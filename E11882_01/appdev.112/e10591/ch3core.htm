<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle COM Automation Feature Core Functionality</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2011-01-21T18:9:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="COM Automation Feature Developer's Guide" />
<meta name="dcterms.identifier" content="E10591-05" />
<meta name="dcterms.isVersionOf" content="COMDG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="ch2insta.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch4plsql.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10591.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/13</span> <!-- End Header --><a id="g1018297"></a>
<h1 class="chapter"><span class="secnum">3</span> <a id="COMDG004"></a>Oracle COM Automation Feature Core Functionality</h1>
<p>This chapter describes aspects of the programming interface for Oracle COM Automation Feature.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1006203">Data Type Conversions</a></p>
</li>
<li>
<p><a href="#i1006324">HRESULT Error Codes</a></p>
</li>
<li>
<p><a href="#i1006367">Oracle COM Automation for Java Exception Handling</a></p>
</li>
<li>
<p><a href="#i1006436">Typical COM Automation Functionality</a></p>
</li>
<li>
<p><a href="#i1006490">Application Programming Interfaces</a></p>
</li>
<li>
<p><a href="#i1006585">PL/SQL APIs</a></p>
</li>
<li>
<p><a href="#i1007927">Java APIs</a></p>
</li>
</ul>
<a id="i1006203"></a>
<div class="sect1">
<h2 class="sect1">Data Type Conversions</h2>
<p>Because Microsoft COM Automation uses COM Automation data types, and Oracle COM Automation Feature uses either PL/SQL or Java data types, Oracle COM Automation Feature must convert the data that it receives and pass it to the COM Automation object. Similarly, Oracle COM Automation Feature must pass the data that it receives from the COM Automation object and convert it.</p>
<a id="i1006209"></a>
<div class="sect2">
<h3 class="sect2">Data Type Conversion<a id="sthref68"></a><a id="sthref69"></a> for PL/SQL</h3>
<p><a href="#i1006219">Table 3-1</a> shows the mapping between PL/SQL data types and COM Automation data types.</p>
<p>This guide follows a convention where COM Automation data types are prefaced by an initial <span class="italic">p</span> when used as <code>IN</code> <code>OUT</code> or <code>OUT</code> parameters. Data types without the initial <span class="italic">p</span> are <code>IN</code> parameters.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref70"></a><a id="sthref71"></a>Table 3-1 <a id="i1006219"></a><span class="bolditalic">PL/SQL to COM Automation Data Types</span></p>
<table class="cellalignment715" title="PL/SQL to COM Automation Data Types" summary="rows are datatypes. first column is PL/SQL datatype;second column is COM Automation datatype" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t2">PL/SQL Data Type</th>
<th class="cellalignment716" id="r1c2-t2">COM Automation Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t2" headers="r1c1-t2">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment710" headers="r2c1-t2 r1c2-t2">
<p><code>BSTR, pBSTR</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t2" headers="r1c1-t2">
<p><code>BOOLEAN</code></p>
</td>
<td class="cellalignment710" headers="r3c1-t2 r1c2-t2">
<p><code>BOOL, pBOOL</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t2" headers="r1c1-t2">
<p><code>BINARY_INTEGER</code></p>
</td>
<td class="cellalignment710" headers="r4c1-t2 r1c2-t2">
<p><code>DISPATCH, pDISPATCH</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t2" headers="r1c1-t2">
<p><code>DOUBLE PRECISION</code></p>
</td>
<td class="cellalignment710" headers="r5c1-t2 r1c2-t2">
<p><code>UI1, pUI1, I2, pI2, I4, pI4, R4, pR4, R8, pR8, SCODE, pSCODE, CY, pCY, DISPATCH, pDISPATCH</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t2" headers="r1c1-t2">
<p><code>DATE</code></p>
</td>
<td class="cellalignment710" headers="r6c1-t2 r1c2-t2">
<p><code>DATE, pDATE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle restricts a <code>CY</code> and <code>pCY</code> value to be between -9999999999.9999 and 9999999999.9999.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref72"></a>
<h3 class="sect2">Data Type Conversion<a id="sthref73"></a><a id="sthref74"></a> for Java</h3>
<p><a href="#g1008666">Table 3-2</a> lists the supported COM Automation data types and related mappings to Java data types.</p>
<p>All data type mapping applies to properties, arguments, and return values, except <code>void</code>, which applies only to return values.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref75"></a><a id="g1008666"></a>Table 3-2 Java to COM Automation Data Types</p>
<table class="cellalignment715" title="Java to COM Automation Data Types" summary="rows are datatypes. first column is Java datatype;second column is COM Automation datatype" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t4">Java Data Type</th>
<th class="cellalignment716" id="r1c2-t4">COM Automation Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t4" headers="r1c1-t4">
<p><code>boolean</code></p>
</td>
<td class="cellalignment710" headers="r2c1-t4 r1c2-t4">
<p><code>BOOL</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t4" headers="r1c1-t4">
<p><code>char</code></p>
</td>
<td class="cellalignment710" headers="r3c1-t4 r1c2-t4">
<p><code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t4" headers="r1c1-t4">
<p><code>double</code></p>
</td>
<td class="cellalignment710" headers="r4c1-t4 r1c2-t4">
<p><code>DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t4" headers="r1c1-t4">
<p><code>int</code></p>
</td>
<td class="cellalignment710" headers="r5c1-t4 r1c2-t4">
<p><code>INT</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t4" headers="r1c1-t4">
<p><code>long</code></p>
</td>
<td class="cellalignment710" headers="r6c1-t4 r1c2-t4">
<p><code>LONG</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r7c1-t4" headers="r1c1-t4">
<p><code>float</code></p>
</td>
<td class="cellalignment710" headers="r7c1-t4 r1c2-t4">
<p><code>FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r8c1-t4" headers="r1c1-t4">
<p><code>short</code></p>
</td>
<td class="cellalignment710" headers="r8c1-t4 r1c2-t4">
<p><code>SHORT</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r9c1-t4" headers="r1c1-t4">
<p><code>byte</code></p>
</td>
<td class="cellalignment710" headers="r9c1-t4 r1c2-t4">
<p><code>BYTE</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r10c1-t4" headers="r1c1-t4">
<p><code>java.lang.String</code></p>
</td>
<td class="cellalignment710" headers="r10c1-t4 r1c2-t4">
<p><code>BSTR</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r11c1-t4" headers="r1c1-t4">
<p><code>oracle.win.com.Currency</code></p>
</td>
<td class="cellalignment710" headers="r11c1-t4 r1c2-t4">
<p><code>CURRENCY</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r12c1-t4" headers="r1c1-t4">
<p><code>java.util.Calendar</code></p>
</td>
<td class="cellalignment710" headers="r12c1-t4 r1c2-t4">
<p><code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r13c1-t4" headers="r1c1-t4">
<p><code>void</code></p>
</td>
<td class="cellalignment710" headers="r13c1-t4 r1c2-t4">
<p><code>VOID</code> (return values only)</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r14c1-t4" headers="r1c1-t4">
<p><code>oracle.win.com.Automation</code></p>
</td>
<td class="cellalignment710" headers="r14c1-t4 r1c2-t4">
<p><code>IDispatch*</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006324"></a>
<div class="sect1">
<h2 class="sect1">HRESULT Error Codes<a id="sthref76"></a><a id="sthref77"></a><a id="sthref78"></a><a id="sthref79"></a></h2>
<p><code>HRESULT</code> error codes are provided by the Microsoft Windows API.</p>
<p>An <code>HRESULT</code> is a COM error code of the hexadecimal form 0x800<span class="italic">nnnnn</span>. However, it has the decimal form -214<span class="italic">nnnnnnn</span>. For example, passing an invalid object name when creating a COM object causes the <code>HRESULT</code> of -2147221005 to be returned, which is 0x800401f3 in hexadecimal form.</p>
<p>For complete information about the <code>HRESULT</code> return code, refer to the Microsoft documentation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="appendix.htm#i634491">"Microsoft COM Automation Errors"</a> for additional information</div>
<div class="sect2"><a id="sthref80"></a>
<h3 class="sect2">PL/SQL Use of HRESULT</h3>
<p>The PL/SQL APIs return an integer return code. The return code is <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006662">"GetLastError"</a> for additional information about how to interpret the return codes from Oracle COM Automation Feature</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref81"></a>
<h3 class="sect2">Java Use of HRESULT</h3>
<p>In the Java API, <code>HRESULT</code> is a data member of the <code>COMException</code> class.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1006367">"Oracle COM Automation for Java Exception Handling"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006367"></a>
<div class="sect1">
<h2 class="sect1">Oracle COM Automation for Java Exception Handling</h2>
<p>Oracle COM Automation for Java uses standard Java exception mechanisms. Specifically, a Java exception class, <code>oracle.win.com.COMException</code>, is introduced to represent COM errors.</p>
<p>This exception is thrown by the <code>Automation</code> Java class when an error occurs.</p>
<p>The error information provided by this exception is similar to that provided by the PL/SQL API <code>GetLastError</code> function.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>HRESULT</code> data member has the same meaning as the value of <code>HRESULT</code> returned by the PL/SQL functions.</div>
<p>If the COM error is <code>DISP_E_EXCEPTION</code> as indicated by the <code>excepInfo</code> data member, <code>COMException</code> uses the <code>source</code>, <code>description</code>, <code>helpfile</code>, and <code>helpid</code> data members. Otherwise, these data members are not valid.</p>
<p>The <code>COMException</code> writes an error message representing the COM error to the <code>errmsg</code> data member.</p>
<p><a href="#CACICAHB">Table 3-3</a> lists the <code>COMException</code> data members and their descriptions.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref82"></a><a id="CACICAHB"></a>Table 3-3 COMException Data Members</p>
<table class="cellalignment715" title="COMException Data Members" summary="rows are COMException data members. first column is member name; second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t9">Member</th>
<th class="cellalignment716" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t9" headers="r1c1-t9">
<p><code>hresult</code></p>
</td>
<td class="cellalignment710" headers="r2c1-t9 r1c2-t9">
<p>is an <code>HRESULT</code> value as defined by the Windows API.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t9" headers="r1c1-t9">
<p><code>errmsg</code></p>
</td>
<td class="cellalignment710" headers="r3c1-t9 r1c2-t9">
<p>is the textual representation of <code>HRESULT</code> in the appropriate language.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t9" headers="r1c1-t9">
<p><code>source</code></p>
</td>
<td class="cellalignment710" headers="r4c1-t9 r1c2-t9">
<p>is the <code>source</code> of the exception, typically the application name.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t9" headers="r1c1-t9">
<p><code>description</code></p>
</td>
<td class="cellalignment710" headers="r5c1-t9 r1c2-t9">
<p>is the error description.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t9" headers="r1c1-t9">
<p><code>helpfile</code></p>
</td>
<td class="cellalignment710" headers="r6c1-t9 r1c2-t9">
<p>is the fully qualified path name of the <code>helpfile</code> containing more information about the error.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r7c1-t9" headers="r1c1-t9">
<p><code>helpid</code></p>
</td>
<td class="cellalignment710" headers="r7c1-t9 r1c2-t9">
<p>is the help context ID of a topic within the <code>helpfile</code> specified by help file.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r8c1-t9" headers="r1c1-t9">
<p><code>excepInfo</code></p>
</td>
<td class="cellalignment710" headers="r8c1-t9 r1c2-t9">
<p>is <code>DISP_E_EXCEPTION</code>, if HRESULT returns true, and <code>source</code>, <code>description</code>, <code>helpfile</code>, and <code>helpid</code> contain more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="sthref83"></a>Code Sample</p>
<p>This example demonstrates the <code>COMException</code> exception.</p>
<pre>
 try
   {
     // Some code that might throw a COMException exception.
   }
   catch(COMException e)
   {
     System.out.println(e.toString());
     if(e.excepInfo)
     {
       System.out.println(e.source);
       System.out.println(e.description);
       System.out.println(e.helpfile);
       System.out.println(e.helpid);
     }
   }
</pre></div>
<!-- class="sect1" -->
<a id="i1006436"></a>
<div class="sect1">
<h2 class="sect1">Typical COM Automation Functionality</h2>
<p>This section discusses the required information and the general steps to build a solution using Oracle COM Automation Feature.</p>
<div class="sect2"><a id="sthref84"></a>
<h3 class="sect2">Information Required for COM Objects<a id="sthref85"></a></h3>
<p>Review the following information about the <span class="bold">COM</span> objects that you intend to use:</p>
<ul>
<li>
<p>You must determine the <a id="sthref86"></a><a id="sthref87"></a><a id="sthref88"></a><a id="sthref89"></a>Program ID of the COM object. The Program ID, or <a href="glossary.htm#i996771"><span class="xrefglossterm">progID</span></a>, is a descriptive string that maps to the globally unique identifier (<a href="glossary.htm#i996744"><span class="xrefglossterm">GUID</span></a>), a hexadecimal number that uniquely identifies a COM object.</p>
<p>The following string is an example of a <code>progID</code>:</p>
<pre>
Excel.Worksheet.1
</pre>
<p>Use the <code>progID</code> with the API that instantiates the COM object.</p>
</li>
<li>
<p><a id="sthref90"></a>You must be aware of the types of properties and methods that are exposed through the COM object's <code>IDispatch</code> interface. Usually, the ISV provides documentation describing the names and data type of the object's properties and the prototypes of the object's methods. Properties are referred to by a descriptive string, such as <code>xpos</code> or <code>ypos</code>. A property can be any standard COM Automation data type, such as <code>INT</code> or <code>BSTR</code>. The <code>GetProperty</code> and <code>SetProperty</code> APIs take the property name and a variable of the appropriate data type. Methods are referred to by a descriptive string, such as <code>InsertChart</code>. A method takes a set of parameters that are of different COM Automation data types and returns a COM Automation data type.</p>
<p>The following is an example of a COM Automation method prototype in<a id="sthref91"></a><a id="sthref92"></a> COM Interface Definition Language (IDL) grammar:</p>
<pre>
[id(0x6003000)]
long Post([in, out] long* lngAccountNo,
          [in, out] long* lngAmount,
          [in, out] BSTR* strResult);
</pre>
<p>Interfaces define object methods and properties. COM IDL is used to specify interfaces that are defined on COM objects.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref93"></a>
<h3 class="sect2">OLE/COM Object Viewer</h3>
<p><a id="sthref94"></a><a id="sthref95"></a>Microsoft provides a tool called the OLE/COM Object Viewer with Microsoft Visual Studio for browsing the properties and methods of COM objects on a local system. This tool enables you to quickly and easily determine the properties and methods that each COM object exposes. See <a href="#i1006471">Figure 3-1</a> for an example.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006471"></a>Figure 3-1 OLE/COM Object Viewer</p>
<img width="768" height="537" src="img/olecom.gif" alt="Description of Figure 3-1 follows" title="Description of Figure 3-1 follows" /><br />
<a id="sthref96" href="img_text/olecom.htm">Description of "Figure 3-1 OLE/COM Object Viewer"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref97"></a>
<h3 class="sect2">Using COM Automation Feature APIs</h3>
<p>In a typical use of Oracle COM Automation Feature, you design a Java class or PL/SQL block to create and manipulate a COM object. The class or code block performs the following steps:</p>
<ol>
<li>
<p>Creates the COM object as follows:</p>
<ul>
<li>
<p>In PL/SQL, using <code>CreateObject</code></p>
</li>
<li>
<p>In Java, using a constructor or the <code>Create</code> method</p>
</li>
</ul>
</li>
<li>
<p>Manipulates the COM object calling the following APIs:</p>
<ul>
<li>
<p><code>GetProperty</code> to get a property value</p>
</li>
<li>
<p><code>SetProperty</code> to set a property value to a new value</p>
</li>
</ul>
</li>
<li>
<p>Calls <code>Invoke</code> to call a method</p>
<p>To prepare for the <code>Invoke</code> call, you use <code>InitArg</code> and <code>SetArg</code> to package the argument to be sent to the COM Automation method.</p>
</li>
<li>
<p>Calls <code>GetLastError</code> in PL/SQL to get the most recent error information</p>
</li>
<li>
<p>Destroys the object using <code>DestroyObject</code> in PL/SQL or <code>Destroy</code> in Java</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006490"></a>
<div class="sect1">
<h2 class="sect1">Application Programming Interfaces<a id="sthref98"></a></h2>
<p>This section lists and then describes the APIs available for Oracle COM Automation Feature.</p>
<div class="sect2"><a id="sthref99"></a>
<h3 class="sect2">PL/SQL APIs</h3>
<p>Oracle COM Automation Feature externalizes the following APIs for PL/SQL development:</p>
<ul>
<li>
<p><a href="#i1006588">CreateObject</a></p>
</li>
<li>
<p><a href="#i1006633">DestroyObject</a></p>
</li>
<li>
<p><a href="#i1006662">GetLastError</a></p>
</li>
<li>
<p><a href="#i1006717">GetProperty</a></p>
</li>
<li>
<p><a href="#i1007705">SetProperty</a></p>
</li>
<li>
<p><a href="#i1007819">InitArg</a></p>
</li>
<li>
<p><a href="#i1006839">InitOutArg</a></p>
</li>
<li>
<p><a href="#i1006861">GetArg</a></p>
</li>
<li>
<p><a href="#i1006917">SetArg</a></p>
</li>
<li>
<p><a href="#i1006992">Invoke</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref100"></a>
<h3 class="sect2">Java APIs</h3>
<p>Oracle COM Automation Feature externalizes the following APIs for Java development:</p>
<ul>
<li>
<p><a href="#i1007089">Automation Constructor</a></p>
</li>
<li>
<p>Automation Methods</p>
<ul>
<li>
<p><a href="#i1007148">Create</a></p>
</li>
<li>
<p><a href="#i1007198">Destroy</a></p>
</li>
<li>
<p><a href="#i1007214">GetProperty</a></p>
</li>
<li>
<p><a href="#i1007276">SetProperty</a></p>
</li>
<li>
<p><a href="#i1007328">InitArg</a></p>
</li>
<li>
<p><a href="#i1007344">SetArg</a></p>
</li>
<li>
<p><a href="#i1007393">Invoke</a></p>
</li>
</ul>
</li>
<li>
<p><a href="#i1007468">Currency Constructor</a></p>
</li>
<li>
<p>Currency Methods</p>
<ul>
<li>
<p><a href="#i1007485">Get</a></p>
</li>
<li>
<p><a href="#i1007493">Set</a></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006585"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref101"></a><a id="sthref102"></a>PL/SQL APIs</h2>
<p>This section describes the PL/SQL APIs for manipulating COM objects using the COM Automation interface. Each of the following PL/SQL stored procedures resides in the package <code>ORDCOM</code>.</p>
<a id="i1006588"></a>
<div class="sect2">
<h3 class="sect2">CreateObject<a id="sthref103"></a><a id="sthref104"></a></h3>
<p>This API instantiates a COM object in a COM Automation server.</p>
<p class="subhead1"><a id="sthref105"></a>Syntax</p>
<pre>
FUNCTION CreateObject(progid VARCHAR2, reserved BINARY_INTEGER, servername VARCHAR2, 
objecttoken OUT BINARY_INTEGER) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="CreateObject parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t10">Where</th>
<th class="cellalignment716" id="r1c2-t10">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t10" headers="r1c1-t10"><code>progid</code></td>
<td class="cellalignment710" headers="r2c1-t10 r1c2-t10">the programmatic identifier (progID) of the COM Automation object to create. This character string describes the class of the COM Automation object and has the following form:
<p><code><span class="codeinlineitalic">COMComponent.Object</span></code></p>
<p><code><span class="codeinlineitalic">COMComponent</span></code> is the component name of the COM Automation server, and <code><span class="codeinlineitalic">Object</span></code> is the name of the COM Automation object. The specified COM Automation object must be creatable and must support the <a id="sthref106"></a><code>IDispatch</code> interface.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t10" headers="r1c1-t10"><code>reserved</code></td>
<td class="cellalignment710" headers="r3c1-t10 r1c2-t10">a parameter currently reserved for future use. Pass a value of <code>0</code>. Future versions of Oracle COM Automation Feature may use this parameter.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t10" headers="r1c1-t10"><code>servername</code></td>
<td class="cellalignment710" headers="r4c1-t10 r1c2-t10">the name of the remote DCOM server on which the COM object is being instantiated.
<p>Passing a specified name forces Oracle COM Automation Feature to attempt to instantiate the COM object on a remote computer. Passing an empty string, for example, '', forces Oracle COM Automation Feature to check the registry for the location of the COM object. Registry information indicates whether the COM object is local or remote. Therefore, to create a local COM object, always pass an empty string and ensure that the registry indicates that the COM object exists locally. The registry information for COM objects can be configured with the tool <code>dcomcnfg.exe</code>.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t10" headers="r1c1-t10"><code>objecttoken</code></td>
<td class="cellalignment710" headers="r5c1-t10 r1c2-t10">the returned object token. It must be a local variable of data type <code>BINARY_INTEGER</code>. This object token identifies the created COM Automation object and is used in calls to the other Oracle COM Automation Feature APIs.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref107"></a>Remarks</p>
<p>The created COM Automation object is freed with a corresponding call to <code>DestroyObject</code>. This nullifies the internal representation of the object in the Oracle COM Automation Feature and releases all interfaces associated with the object.</p>
<p>This function returns <code>0</code> when successful, or a nonzero value for <code>HRESULT</code> when an error occurs.</p>
<p class="subhead1"><a id="sthref108"></a>Code Sample</p>
<pre>
HRESULT BINARY_INTEGER;
applicationToken BINARY_INTEGER:=-1;

HRESULT :=ORDCOM.CreateObject('Excel.Application', 0, '', applicationToken);
IF (HRESULT!=0) THEN
  dbms_output.put_line(HRESULT);
END IF;
</pre></div>
<!-- class="sect2" -->
<a id="i1006633"></a>
<div class="sect2">
<h3 class="sect2">DestroyObject<a id="sthref109"></a><a id="sthref110"></a></h3>
<p>This API destroys a created COM Automation object.</p>
<p class="subhead1"><a id="sthref111"></a>Syntax</p>
<pre>
FUNCTION DestroyObject(objecttoken BINARY_INTEGER) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="DestroyObject parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t11">Where</th>
<th class="cellalignment716" id="r1c2-t11">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t11" headers="r1c1-t11"><code>objecttoken</code></td>
<td class="cellalignment710" headers="r2c1-t11 r1c2-t11">the object token of a COM Automation object previously created by <code>CreateObject</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref112"></a>Remarks</p>
<p>Calling <code>DestroyObject</code> nullifies the internal representation of the object in the Oracle COM Automation Feature and releases all interfaces associated with the object.</p>
<p>This function returns <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<p class="subhead1"><a id="sthref113"></a>Code Sample</p>
<pre>
HRESULT BINARY_INTEGER;
applicationToken BINARY_INTEGER:=-1;

/* Assume applicationToken is initialized. */

HRESULT:=ORDCOM.DestroyObject(applicationToken);
IF (HRESULT!=0) THEN
   dbms_output.put_line(HRESULT);
</pre></div>
<!-- class="sect2" -->
<a id="i1006662"></a>
<div class="sect2">
<h3 class="sect2">GetLastError<a id="sthref114"></a><a id="sthref115"></a></h3>
<p>This API obtains the COM Automation error information about the last error that occurred.</p>
<p class="subhead1"><a id="sthref116"></a>Syntax</p>
<pre>
FUNCTION GetLastError(source OUT VARCHAR2, description OUT VARCHAR2, helpfile OUT VARCHAR2, 
helpid OUT BINARY_INTEGER) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="GetLastError parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t12">Where</th>
<th class="cellalignment716" id="r1c2-t12">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t12" headers="r1c1-t12"><code>source</code></td>
<td class="cellalignment710" headers="r2c1-t12 r1c2-t12">the source of the error information. If specified, it must be a local <code>CHAR</code> or <code>VARCHAR</code> variable. The return value is truncated to fit the local variable if necessary.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t12" headers="r1c1-t12"><code>description</code></td>
<td class="cellalignment710" headers="r3c1-t12 r1c2-t12">the description of the error. If specified, it must be a local <code>CHAR</code> or <code>VARCHAR</code> variable. The return value is truncated to fit the local variable if necessary.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t12" headers="r1c1-t12"><code>helpfile</code></td>
<td class="cellalignment710" headers="r4c1-t12 r1c2-t12">the Help file for the COM Automation object. If specified, it must be a local <code>CHAR</code> or <code>VARCHAR</code> variable. The return value is truncated to fit the local variable if necessary.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t12" headers="r1c1-t12"><code>helpid</code></td>
<td class="cellalignment710" headers="r5c1-t12 r1c2-t12">the Help file context ID. If specified, it must be a local <code>INT</code> variable.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref117"></a>Remarks</p>
<p>Each call to an Oracle COM Automation Feature API (except <code>GetLastError</code>) resets the error information, so that <code>GetLastError</code> obtains error information only for the most recent Oracle COM Automation Feature API call. Because <code>GetLastError</code> does not reset the last error information, it can be called multiple times to get the same error information.</p>
<p>This function returns <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<p>See <a href="appendix.htm#i634491">"Microsoft COM Automation Errors"</a> for a description of the types of errors that can be returned by this function.</p>
<p class="subhead1"><a id="sthref118"></a>Code Sample</p>
<pre>
HRESULT BINARY_INTEGER;
applicationToken BINARY_INTEGER:=-1;
error_src VARCHAR2(255);
error_description VARCHAR2(255);
error_helpfile VARCHAR2(255);
error_helpID BINARY_INTEGER;

HRESULT:=ORDCOM.CreateObject('Excel.Application', 0, '', applicationToken);
IF (HRESULT!=0) THEN
  ORDCOM.GetLastError(error_src, error_description, error_helpfile, 
      error_helpID);
  dbms_output.put_line(error_src);
  dbms_output.put_line(error_description);

  dbms_output.put_line(error_helpfile);
END IF;
</pre></div>
<!-- class="sect2" -->
<a id="i1006717"></a>
<div class="sect2">
<h3 class="sect2">GetProperty<a id="sthref119"></a><a id="sthref120"></a></h3>
<p>This API returns the property value of a COM Automation object.</p>
<p class="subhead1"><a id="sthref121"></a>Syntax</p>
<pre>
FUNCTION GetProperty(objecttoken BINARY_INTEGER, propertyname VARCHAR2, argcount BINARY_INTEGER, 
propertyvalue OUT <span class="italic">any_PL/SQL_data type</span>) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="GetProperty parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t13">Where</th>
<th class="cellalignment716" id="r1c2-t13">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t13" headers="r1c1-t13"><code>objecttoken</code></td>
<td class="cellalignment710" headers="r2c1-t13 r1c2-t13">the object token of a COM object previously created by <code>CreateObject</code>.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t13" headers="r1c1-t13"><code>propertyname</code></td>
<td class="cellalignment710" headers="r3c1-t13 r1c2-t13">the property name of the COM object to return.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t13" headers="r1c1-t13"><code>argcount</code></td>
<td class="cellalignment710" headers="r4c1-t13 r1c2-t13">the index of the property array. If the property is not an array, then the developer should specify <code>0</code>.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t13" headers="r1c1-t13"><code>propertyvalue</code></td>
<td class="cellalignment710" headers="r5c1-t13 r1c2-t13">the returned property value. The returned property type depends on the COM Automation data type that is returned. You must pass the PL/SQL data type that corresponds to the COM Automation data type of the COM Automation property. Otherwise, the COM Automation Feature will not properly convert the COM Automation data type.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t13" headers="r1c1-t13"><code><span class="codeinlineitalic">any_PL/SQL_data type</span></code></td>
<td class="cellalignment710" headers="r6c1-t13 r1c2-t13">any data type supported by COM Automation Feature.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref122"></a>Remarks</p>
<p>If the property returns a COM object, then you must specify a local variable of data type <code>BINARY_INTEGER</code> for the <code>propertyvalue</code> parameter. An object token is stored in the local variable, and this object token can be used with other COM Automation stored procedures.</p>
<p>When the property returns an array, if <code>propertyvalue</code> is specified, then it is set to <code>NULL</code>.</p>
<p>This function returns <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<p class="subhead1"><a id="sthref123"></a>Code Sample</p>
<pre>
/*
 * This is an excerpt from a Microsoft Excel application.
 */

HRESULT BINARY_INTEGER;
ChartObject BINARY_INTEGER := -1;
ChartToken BINARY_INTEGER := -1;

/* Assume ChartObject is initialized. */

HRESULT := ORDCOM.GetProperty(ChartObject, 'Chart', 0, ChartToken);
IF (HRESULT!=0) THEN    
  dbms_output.put_line(HRESULT);
END IF;
</pre></div>
<!-- class="sect2" -->
<a id="i1007705"></a>
<div class="sect2">
<h3 class="sect2">SetProperty<a id="sthref124"></a><a id="sthref125"></a></h3>
<p>This API sets a property of a COM Automation object to a new value.</p>
<p class="subhead1"><a id="sthref126"></a>Syntax</p>
<pre>
FUNCTION<span class="bold"> </span>SetProperty(objecttoken<span class="bold"> </span>BINARY_INTEGER<span class="bold">,</span> propertyname<span class="bold"> </span>VARCHAR2<span class="bold">,</span> newvalue<span class="bold"> </span><span class="italic">any_PL/SQL_data type</span>, 
data type<span class="bold"> </span>VARCHAR2) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="SetProperty parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t14">Where</th>
<th class="cellalignment716" id="r1c2-t14">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t14" headers="r1c1-t14"><code>objecttoken</code></td>
<td class="cellalignment710" headers="r2c1-t14 r1c2-t14">the object token of a COM Automation object previously created by <code>CreateObject</code>.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t14" headers="r1c1-t14"><code>propertyname</code></td>
<td class="cellalignment710" headers="r3c1-t14 r1c2-t14">the property name of the COM object to set to a new value.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t14" headers="r1c1-t14"><code>newvalue</code></td>
<td class="cellalignment710" headers="r4c1-t14 r1c2-t14">the new value of the property. It must be a value of the appropriate data type.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t14" headers="r1c1-t14"><code>data type</code></td>
<td class="cellalignment710" headers="r5c1-t14 r1c2-t14">the explicitly specified data type of the value passed in. The available data types are:
<ul>
<li>
<p><code>UI1</code> - byte integer</p>
</li>
<li>
<p><code>I2</code> - 2 byte integer</p>
</li>
<li>
<p><code>I4</code> - 4 byte integer</p>
</li>
<li>
<p><code>R4</code> - IEEE 4 byte real</p>
</li>
<li>
<p><code>R8</code> - IEEE 8 byte real</p>
</li>
<li>
<p><code>SCODE</code> - error code</p>
</li>
<li>
<p><code>CY</code> - currency (value - 9999999999.9999 to 9999999999.9999)</p>
<p>(This is an Oracle restriction)</p>
</li>
<li>
<p><code>DISPATCH</code> - dispatch pointer</p>
</li>
<li>
<p><code>BSTR</code> - String</p>
</li>
<li>
<p><code>BOOL</code> - boolean</p>
</li>
<li>
<p><code>DATE</code> - date</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t14" headers="r1c1-t14"><code><span class="codeinlineitalic">any_PL/SQL_data type</span></code></td>
<td class="cellalignment710" headers="r6c1-t14 r1c2-t14">any data type supported by COM Automation Feature.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref127"></a>Remarks</p>
<p>This function returns a <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<p class="subhead1"><a id="sthref128"></a>Code Sample</p>
<pre>
/*
 * This is an excerpt from a Microsoft Excel application.
 */

HRESULT BINARY_INTEGER;
RangeToken BINARY_INTEGER := -1;

/* Assume RangeToken is initialized. */

HRESULT := ORDCOM.SetProperty(RangeToken, 'Value', 'EmpNo', 'BSTR');
IF (HRESULT!=0) THEN    
  dbms_output.put_line(HRESULT);
END IF;

</pre></div>
<!-- class="sect2" -->
<a id="i1007819"></a>
<div class="sect2">
<h3 class="sect2">InitArg<a id="sthref129"></a><a id="sthref130"></a></h3>
<p>This API initializes the parameter set passed to an <code>Invoke</code> call.</p>
<p class="subhead1"><a id="sthref131"></a>Syntax</p>
<pre>
PROCEDURE<span class="bold"> </span>InitArg();
</pre>
<p class="subhead1"><a id="sthref132"></a>Remarks</p>
<p>The <code>InitArg</code> call initializes the parameter set. After <code>InitArg</code> has been called, a <code>SetArg</code> call sets the first parameter to the specified value. A second <code>SetArg</code> call sets the second parameter in the parameter list. Subsequent calls set the <span class="italic">n</span>th parameters in the parameter list, where <span class="italic">n</span> is the number of times <code>SetArg</code> has been called after an <code>InitArg</code> call. Another call to <code>InitArg</code> resets the argument list and a call to <code>SetArg</code> sets the first parameter again.</p>
<p class="subhead1"><a id="sthref133"></a>Code Sample</p>
<p>See <a href="#i1006992">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1006839"></a>
<div class="sect2">
<h3 class="sect2">InitOutArg<a id="sthref134"></a><a id="sthref135"></a></h3>
<p><code>InitOutArg</code> must be called after a COM method is invoked in preparation for getting the values of <code>OUT</code> and <code>IN</code> <code>OUT</code> parameters using <code>GetArg</code>. After calling <code>InitOutArg</code>, the first call to <code>GetArg</code> gets the value for the first <code>OUT</code> or <code>IN</code> <code>OUT</code> parameter, the second call to <code>GetArg</code> gets the value for the second <code>OUT</code> or <code>IN</code> <code>OUT</code> parameters, and so on. Calling <code>InitOutArg</code> again restarts this process.</p>
<p class="subhead1"><a id="sthref136"></a>Syntax</p>
<pre>
PROCEDURE InitOutArg();
</pre>
<p class="subhead1"><a id="sthref137"></a>Remarks</p>
<p>See the section on <code>SetArg</code> data type strings in <a href="#i1006917">"SetArg"</a> for information about <code>IN</code> and <code>OUT</code> parameters.</p>
<p class="subhead1"><a id="sthref138"></a>Code Sample</p>
<p>See <a href="#i1006992">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1006861"></a>
<div class="sect2">
<h3 class="sect2">GetArg<a id="sthref139"></a><a id="sthref140"></a></h3>
<p>Gets the argument of <code>OUT</code> and <code>IN</code> <code>OUT</code> parameters after the COM method has been invoked.</p>
<p class="subhead1"><a id="sthref141"></a>Syntax</p>
<pre>
PROCEDURE GetArg(data OUT <span class="italic">any_PL/SQL_data type</span>, type VARCHAR2);
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="GetArg parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t15">Where</th>
<th class="cellalignment716" id="r1c2-t15">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t15" headers="r1c1-t15"><code>data</code></td>
<td class="cellalignment710" headers="r2c1-t15 r1c2-t15">the value of the <code>OUT</code> or <code>IN</code> <code>OUT</code> parameter after the COM method has been invoked.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t15" headers="r1c1-t15"><code>type</code></td>
<td class="cellalignment710" headers="r3c1-t15 r1c2-t15">the COM Automation data type of the parameter.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t15" headers="r1c1-t15">&nbsp;</td>
<td class="cellalignment710" headers="r4c1-t15 r1c2-t15">The available data types are:
<ul>
<li>
<p><code>pUI1</code> - byte integer</p>
</li>
<li>
<p><code>pI2</code> - 2 byte integer</p>
</li>
<li>
<p><code>pI4</code> - 4 byte integer</p>
</li>
<li>
<p><code>pR4</code> - IEEE 4 byte real</p>
</li>
<li>
<p><code>pR8</code> - IEEE 8 byte real</p>
</li>
<li>
<p><code>pSCODE</code> - error code</p>
</li>
<li>
<p><code>pCY</code> - currency (value -9999999999.9999 to 9999999999.9999) (This is an Oracle restriction)</p>
</li>
<li>
<p><code>pDISPATCH</code> - dispatch pointer</p>
</li>
<li>
<p><code>pBSTR</code> - String</p>
</li>
<li>
<p><code>pBOOL</code> - Boolean</p>
</li>
<li>
<p><code>pDATE</code> - date</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t15" headers="r1c1-t15"><code><span class="codeinlineitalic">any_PL/SQL_data type</span></code></td>
<td class="cellalignment710" headers="r5c1-t15 r1c2-t15">any data type supported by COM Automation Feature.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref142"></a>Remarks</p>
<p>See the section on <code>SetArg</code> data type strings in <a href="#i1006917">"SetArg"</a> for information about <code>IN</code> and <code>OUT</code> parameters.</p>
<p class="subhead1"><a id="sthref143"></a>Code Sample</p>
<p>See <a href="#i1006992">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1006917"></a>
<div class="sect2">
<h3 class="sect2">SetArg<a id="sthref144"></a><a id="sthref145"></a></h3>
<p>Used to construct the parameter list for the next <code>Invoke</code> call.</p>
<p><code>SetArg</code> sets a parameter's value to be passed by value.</p>
<p class="subhead1"><a id="sthref146"></a>Syntax</p>
<pre>
PROCEDURE<span class="bold"> </span>SetArg(paramvalue<span class="bold"> </span><span class="italic">any_PL/SQL_data type</span>, data type<span class="bold"> </span>VARCHAR2);
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="SetArg parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t16">Where</th>
<th class="cellalignment716" id="r1c2-t16">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t16" headers="r1c1-t16"><code>paramvalue</code></td>
<td class="cellalignment710" headers="r2c1-t16 r1c2-t16">the value of the parameter to be passed to an <code>Invoke</code> call. The parameter set is the <span class="italic">n</span>th parameter in the parameter list, where <span class="italic">n</span> is the number of times <code>SetArg</code> has been called after an <code>InitArg</code> call.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t16" headers="r1c1-t16"><code>data type</code></td>
<td class="cellalignment710" headers="r3c1-t16 r1c2-t16">the explicitly specified data type for the parameters.
<p>Those data types prefaced by an initial <code>p</code> are <code>IN</code> <code>OUT</code> or <code>OUT</code> parameters. The <code>p</code> indicates that the <code>VT_BYREF</code> flag will be set for the COM Automation data type.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t16" headers="r1c1-t16">&nbsp;</td>
<td class="cellalignment710" headers="r4c1-t16 r1c2-t16">Those data types without the initial <code>p</code> are <code>IN</code> parameters. The available data types are:
<ul>
<li>
<p><code>UI1</code> - byte integer</p>
</li>
<li>
<p><code>pUI1</code> - byte integer</p>
</li>
<li>
<p><code>I2</code> - 2-byte integer</p>
</li>
<li>
<p><code>pI2</code> - 2-byte integer</p>
</li>
<li>
<p><code>I4</code> - 4-byte integer</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t16" headers="r1c1-t16">&nbsp;</td>
<td class="cellalignment710" headers="r5c1-t16 r1c2-t16">
<ul>
<li><code>pI4</code> - 4-byte integer</li>
<li>
<p><code>R4</code> - IEEE 4-byte real</p>
</li>
<li>
<p><code>pR4</code> - IEEE 4-byte real</p>
</li>
<li>
<p><code>R8</code> - IEEE 8-byte real</p>
</li>
<li>
<p><code>pR8</code> - IEEE 8-byte real</p>
</li>
<li>
<p><code>SCODE</code> - error code</p>
</li>
<li>
<p><code>pSCODE</code> - error code</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t16" headers="r1c1-t16">&nbsp;</td>
<td class="cellalignment710" headers="r6c1-t16 r1c2-t16">
<ul>
<li><code>CY</code> - currency (value -9999999999.9999 to 9999999999.9999)
<p>(This is an Oracle restriction)</p>
</li>
<li>
<p><code>pCY</code> - currency (value -9999999999.9999 to 9999999999.9999)</p>
<p>(This is an Oracle restriction)</p>
</li>
<li>
<p><code>DISPATCH</code> - dispatch pointer</p>
</li>
<li>
<p><code>pDISPATCH</code> - dispatch pointer</p>
</li>
<li>
<p><code>BSTR</code> - String</p>
</li>
<li>
<p><code>pBSTR</code> - String</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r7c1-t16" headers="r1c1-t16">&nbsp;</td>
<td class="cellalignment710" headers="r7c1-t16 r1c2-t16">
<ul>
<li><code>BOOL</code> - Boolean</li>
<li>
<p><code>pBOOL</code> - Boolean</p>
</li>
<li>
<p><code>DATE</code> - date</p>
</li>
<li>
<p><code>pDATE</code> - date</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r8c1-t16" headers="r1c1-t16"><code><span class="codeinlineitalic">any_PL/SQL_data type</span></code></td>
<td class="cellalignment710" headers="r8c1-t16 r1c2-t16">any data type supported by COM Automation Feature.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref147"></a>Remarks</p>
<p>Each <code>SetArg</code> procedure sets the <span class="italic">n</span>th parameter value. The <code>InitArg</code> call initializes the parameter set. After <code>InitArg</code> has been called, a <code>SetArg</code> call sets the first parameter to the specified value. A second <code>SetArg</code> call sets the second parameter in the parameter list. Subsequent calls set the <span class="italic">n</span>th parameters in the parameter list, where <span class="italic">n</span> is the number of times <code>SetArg</code> has been called after an <code>InitArg</code> call. Another call to <code>InitArg</code> resets the argument list and a call to <code>SetArg</code> sets the first parameter again.</p>
<p>Data types without the initial <span class="italic">p</span> are <code>IN</code> parameters. Those data types prefaced by an initial <span class="italic">p</span> are <code>IN</code> <code>OUT</code> or <code>OUT</code> parameters.</p>
<p class="subhead1"><a id="sthref148"></a>Code Sample</p>
<p>See <a href="#i1006992">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1006992"></a>
<div class="sect2">
<h3 class="sect2">Invoke<a id="sthref149"></a><a id="sthref150"></a></h3>
<p>This API calls a method of a COM Automation object. This function uses the parameter list, previously created by the calls to <code>InitArg</code> and <code>SetArg</code> as input for the COM Automation method.</p>
<p class="subhead1"><a id="sthref151"></a>Syntax</p>
<pre>
FUNCTION Invoke(objecttoken BINARY_INTEGER, methodname VARCHAR2, argcount BINARY_INTEGER, 
returnvalue OUT <span class="italic">any_PL/SQL_data type</span>) RETURN BINARY_INTEGER;
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Invoke parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t17">Where</th>
<th class="cellalignment716" id="r1c2-t17">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t17" headers="r1c1-t17"><code>objecttoken</code></td>
<td class="cellalignment710" headers="r2c1-t17 r1c2-t17">the object token of a COM Automation object previously created by <code>CreateObject</code>.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t17" headers="r1c1-t17"><code>methodname</code></td>
<td class="cellalignment710" headers="r3c1-t17 r1c2-t17">the method name of the COM Automation object to call.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t17" headers="r1c1-t17"><code>argcount</code></td>
<td class="cellalignment710" headers="r4c1-t17 r1c2-t17">the number of arguments passed to the COM Automation object method.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t17" headers="r1c1-t17"><code>returnvalue</code></td>
<td class="cellalignment710" headers="r5c1-t17 r1c2-t17">the return value of the method of the COM Automation object. If specified, it must be a local variable of the appropriate data type.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r6c1-t17" headers="r1c1-t17"><code><span class="codeinlineitalic">any_PL/SQL_data type</span></code></td>
<td class="cellalignment710" headers="r6c1-t17 r1c2-t17">any data type supported by COM Automation Feature.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref152"></a>Remarks</p>
<p>If the return value of the function is a COM object, then the developer must specify a local variable of data type <code>BINARY_INTEGER</code> for the <code>returnvalue</code> parameter. An object token is stored in the local variable, and this object token can be used with other Oracle COM Automation Feature APIs.</p>
<p>This function returns <code>0</code> when successful, or a nonzero value of <code>HRESULT</code> when an error occurs.</p>
<p class="subhead1"><a id="sthref153"></a>Code Sample</p>
<pre>
/*
* Following is the IDL definition of the COM Automation method
* being called:
*
* HRESULT TestOutArg([in, out] short *x1,
* [in] short x2,
* [out] short *x3,
* [out, retval] short *x4);
*/

HRESULT BINARY_INTEGER := -1;
applicationToken BINARY_INTEGER := -1;
x1 DOUBLE PRECISION := 12;
x2 DOUBLE PRECISION := 7;
x3 DOUBLE PRECISION := 0;
x4 DOUBLE PRECISION := 0;

/* Assume applicationToken is initialized. */

ORDCOM.InitArg();
ORDCOM.SetArg(x1, 'pI2');
ORDCOM.SetArg(x2, 'I2');
ORDCOM.SetArg(x3, 'pI2');

HRESULT := ORDCOM.Invoke(applicationToken, 'TestOutArg', 3, x4);
IF (HRESULT!=0) THEN    
  dbms_output.put_line(HRESULT);
END IF;

ORDCOM.InitOutArg();
ORDCOM.GetArg(x1, 'pI2');
ORDCOM.GetArg(x3, 'pI2');
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007927"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref154"></a><a id="sthref155"></a><a id="sthref156"></a>Java APIs</h2>
<p>This section describes the Java APIs for manipulating COM objects using the COM Automation interface. These APIs are found in the <code>Automation</code> and <code>Currency</code> Java classes.</p>
<p>The <code>Automation</code> Java class provides access to COM objects that support COM Automation. With this Java class, you can create a COM object and obtain a pointer to the <code><a id="sthref157"></a>IDispatch</code> interface for the COM object. You can then get and set properties on the COM object, as well as invoke methods (with or without arguments) on the COM object. This class provides a wrapper for the COM object, so there is no direct access to the COM object or to its <code>IDispatch</code> interface.</p>
<p>The <code>Currency</code> Java class represents the CURRENCY COM Automation data type. CURRENCY is a an 8-byte number where the last four digits represent the fractional part of the value. For example, the number 12345 actually represents the value 1.2345. CURRENCY has a range of (+/-)922337203685477.5807.</p>
<p class="subhead2"><a id="sthref158"></a>COM Object Reference Counting</p>
<p>COM object interface reference counting is handled internally, and <code>IUnknown::AddRef(</code>) and <code>IUnknown::Release()</code> are not exposed. The user cannot explicitly address COM object interfaces. The lifetime of a particular COM object starts when the associated Java constructor or <a href="#i1007148">Create</a> method is invoked, and it is released when the associated <a href="#i1007198">Destroy</a> method is invoked.</p>
<p class="subhead2"><a id="sthref159"></a>Constructors and Destructors</p>
<p>Because the default constructor does not create a COM object, there are two approaches to creating a COM object:</p>
<ul>
<li>
<p>Instantiate the Java object using the default constructor, and call one of the <a href="#i1007148">Create</a> methods. Which <code>Create</code> method you use depends on whether you want to specify the server name. Later, you must call the <a href="#i1007198">Destroy</a> method to free the COM object.</p>
<p>The <code>Create</code> method can be called at any time, but if a COM object was previously created through one of the nondefault constructors or the <code>Create</code> method, then you must first call the <code>Destroy</code> method.</p>
</li>
<li>
<p>Instantiate the Java object using a nondefault constructor. Which nondefault constructor you use depends on whether you want to specify the server name. Later, you must call the <a href="#i1007198">Destroy</a> method to free the COM object.</p>
</li>
</ul>
<p class="subhead2"><a id="sthref160"></a>Handling COM Object Errors</p>
<p>All COM errors are mapped to Java exceptions. Users can catch COM object errors through the Java exception handling mechanism.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle COM Automation Feature for Java does not allow in-process COM Automation servers. Developers can use <code>dllhost</code> to support in-process servers.</div>
<a id="i1007089"></a>
<div class="sect2">
<h3 class="sect2">Automation Constructor<a id="sthref161"></a><a id="sthref162"></a><a id="sthref163"></a><a id="sthref164"></a></h3>
<p>This API creates a COM object.</p>
<p class="subhead1"><a id="sthref165"></a>Syntax</p>
<pre>
  public Automation()
        public Automation(String progID)
        public Automation(String progID, String serverName)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Automation parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t19">Where</th>
<th class="cellalignment716" id="r1c2-t19">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t19" headers="r1c1-t19"><code>progID</code></td>
<td class="cellalignment710" headers="r2c1-t19 r1c2-t19">the programmatic identifier (progID) of the COM Automation object to create. This character string describes the class of the COM Automation object and has the following form:
<p><code><span class="codeinlineitalic">COMComponent.Object</span></code></p>
<p><code><span class="codeinlineitalic">COMComponent</span></code> is the component name of the COM Automation server, and <code><span class="codeinlineitalic">Object</span></code> is the name of the COM Automation object. The specified COM Automation object must be creatable and must support the <code><a id="sthref166"></a>IDispatch</code> interface.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t19" headers="r1c1-t19"><code>serverName</code></td>
<td class="cellalignment710" headers="r3c1-t19 r1c2-t19">the name of the remote DCOM server on which the COM object is being instantiated.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t19" headers="r1c1-t19">&nbsp;</td>
<td class="cellalignment710" headers="r4c1-t19 r1c2-t19">Passing a specified name forces Oracle COM Automation Feature to attempt to instantiate the COM object on a remote computer.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref167"></a>Remarks</p>
<p>The default constructor <code>public Automation()</code> does nothing. It is used with a <a href="#i1007148">Create</a> method.</p>
<p>Using a constructor that takes only the <code>progID</code> parameter forces Oracle COM Automation Feature to check the registry for the location of the COM object. Registry information indicates whether the COM object is local or remote.</p>
<p>COM Automation objects created using the nondefault constructors are freed with a corresponding call to <a href="#i1007198">Destroy</a>. This nullifies the internal representation of the objects in Oracle COM Automation Feature and releases all interfaces associated with the objects.</p>
<p>Oracle COM Automation Feature for Java does not allow in-process COM Automation servers. Developers can use <code>dllhost</code> to support in-process servers.</p>
<p>The <code>COMException</code> exception is thrown if an error occurs.</p>
<p class="subhead1"><a id="sthref168"></a>Code Sample</p>
<p>The following code sample demonstrates the nondefault constructors.</p>
<pre>
 // Use the registry to determine where to create the COM object.
   Automation word = new Automation("Word.Basic");

   // Create the COM object on the specified server.
   Automation excel = new Automation("Excel.Application", 
                                     "\\ServerName");

   // Free the COM objects.
   word.Destroy();
   excel.Destroy();
</pre></div>
<!-- class="sect2" -->
<a id="i1007148"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref169"></a><a id="sthref170"></a>Create</h3>
<p>This API instantiates a COM object in a COM Automation server.</p>
<p class="subhead1"><a id="sthref171"></a>Syntax</p>
<pre>
public void Create(String progID)
public void Create(String progID, String serverName)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Create parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t20">Where</th>
<th class="cellalignment716" id="r1c2-t20">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t20" headers="r1c1-t20"><code>progID</code></td>
<td class="cellalignment710" headers="r2c1-t20 r1c2-t20">the programmatic identifier (progID) of the COM Automation object to create. This character string describes the class of the COM Automation object and has the following form:
<p><code><span class="codeinlineitalic">COMComponent.Object</span></code></p>
<p><code><span class="codeinlineitalic">COMComponent</span></code> is the component name of the COM Automation server, and <code><span class="codeinlineitalic">Object</span></code> is the name of the COM Automation object. The specified COM Automation object must be creatable and must support the <code>IDispatch</code> interface.</p>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t20" headers="r1c1-t20"><code>serverName</code></td>
<td class="cellalignment710" headers="r3c1-t20 r1c2-t20">the name of the remote DCOM server on which the COM object is being instantiated.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t20" headers="r1c1-t20">&nbsp;</td>
<td class="cellalignment710" headers="r4c1-t20 r1c2-t20">Passing a specified name forces Oracle COM Automation Feature to attempt to instantiate the COM object on a remote computer.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref172"></a>Remarks</p>
<p>The COM Automation object created with the <code>Create</code> method is freed with a corresponding call to <code>Destroy</code>. This nullifies the internal representation of the object in Oracle COM Automation Feature and releases all interfaces associated with the object.</p>
<p>Using the constructor that takes only the <code>progID</code> parameter forces Oracle COM Automation Feature to check the registry for the location of the COM object. Registry information indicates whether the COM object is local or remote.</p>
<p>Oracle COM Automation Feature for Java does not allow in-process COM Automation servers. Developers can use <code>dllhost</code> to support in-process servers.</p>
<p>The <code>COMException</code> exception is thrown if an error occurs.</p>
<p class="subhead1"><a id="sthref173"></a>Code Sample</p>
<pre>
  // Use the default constructor.
   Automation word = new Automation();
   Automation excel = new Automation();

   // Use the registry to determine where to create the COM object.
   word.Create("Word.Basic");

   // Create the COM object on the specified server system.
   excel.Create("Excel.Application", "\\ServerName");

   // Free the COM objects.
   word.Destroy();
   excel.Destroy();
</pre></div>
<!-- class="sect2" -->
<a id="i1007198"></a>
<div class="sect2">
<h3 class="sect2">Destroy<a id="sthref174"></a><a id="sthref175"></a></h3>
<p>This API destroys a created COM Automation object.</p>
<p class="subhead1"><a id="sthref176"></a>Syntax</p>
<pre>
  public void Destroy()
</pre>
<p class="subhead1"><a id="sthref177"></a>Remarks</p>
<p>Calling <code>Destroy</code> nullifies the internal representation of the object in the Oracle COM Automation Feature and releases all interfaces associated with the object.</p>
<p class="subhead1"><a id="sthref178"></a>Code Sample</p>
<p>See <a href="#i1007148">"Create"</a> for code sample.</p>
</div>
<!-- class="sect2" -->
<a id="i1007214"></a>
<div class="sect2">
<h3 class="sect2">GetProperty<a id="sthref179"></a><a id="sthref180"></a></h3>
<p>This API gets a property value of a COM Automation object.</p>
<p class="subhead1"><a id="sthref181"></a>Syntax</p>
<pre>
public <span class="italic">allowed_type</span> GetProperty(String propName, <span class="italic">allowed_type</span>[] propVal)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="GetProperty parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t21">Where</th>
<th class="cellalignment716" id="r1c2-t21">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t21" headers="r1c1-t21"><code>propName</code></td>
<td class="cellalignment710" headers="r2c1-t21 r1c2-t21">the property name of the COM object to return</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t21" headers="r1c1-t21"><code>propVal</code></td>
<td class="cellalignment710" headers="r3c1-t21 r1c2-t21">the returned property value. The returned property type depends on the COM Automation type that is returned. The array must be big enough to hold at least one element although only the first element will be accessed to return the property.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t21" headers="r1c1-t21"><code><span class="codeinlineitalic">allowed_type</span></code></td>
<td class="cellalignment710" headers="r4c1-t21 r1c2-t21">from the following list:</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t21" headers="r1c1-t21">&nbsp;</td>
<td class="cellalignment710" headers="r5c1-t21 r1c2-t21">
<ul>
<li><code>boolean</code></li>
<li>
<p><code>byte</code></p>
</li>
<li>
<p><code>char</code></p>
</li>
<li>
<p><code>short</code></p>
</li>
<li>
<p><code>int</code></p>
</li>
<li>
<p><code>long</code></p>
</li>
<li>
<p><code>float</code></p>
</li>
<li>
<p><code>double</code></p>
</li>
<li>
<p><code>java.long.String</code></p>
</li>
<li>
<p><code>oracle.win.com.Automation</code></p>
</li>
<li>
<p><code>oracle.win.com.Currency</code></p>
</li>
<li>
<p><code>java.util.Calendar</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref182"></a>Remarks</p>
<p>If the property is a COM object, then it can be retrieved using the <code><span class="codeinlineitalic">allowed_type</span></code> of <code>oracle.win.com.Automation</code>. The Automation Java object that is returned can be used to get and set properties and call methods on the property.</p>
<p><code>GetProperty</code> uses an array parameter to return the property value to overload the <code>GetProperty</code> method. Overloading would not be possible if the property value were returned as a return value. The array solves the problem caused by Java not having an <span class="italic">out</span> parameter.</p>
<p>The property is still returned as a return value for convenience.</p>
<p>The <code>COMException exception</code> is thrown if an error occurs.</p>
<p class="subhead1"><a id="sthref183"></a>Code Sample</p>
<pre>
   // A Microsoft Excel ChartObject object.
   Automation chartObject = null;
   // A Microsoft Excel Chart object.
   Automation chart = null;
   // Used for properties of type Automation.
   Automation[] autoProp = { null };

   // Assume the Microsoft Excel ChartObject object is initialized.

   // Get the Chart property.
   chartObject.GetProperty("Chart", autoProp);
   chart = autoProp[0];

   // Set the Chart property.
   chartObject.SetProperty("Chart", chart);
</pre></div>
<!-- class="sect2" -->
<a id="i1007276"></a>
<div class="sect2">
<h3 class="sect2">SetProperty<a id="sthref184"></a><a id="sthref185"></a></h3>
<p>This API sets a property of a COM Automation object to a new value.</p>
<p class="subhead1"><a id="sthref186"></a>Syntax</p>
<pre>
public void SetProperty(String propName, <span class="italic">allowed_type</span> propVal)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="SetProperty parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t22">Where</th>
<th class="cellalignment716" id="r1c2-t22">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t22" headers="r1c1-t22"><code>propName</code></td>
<td class="cellalignment710" headers="r2c1-t22 r1c2-t22">the property name of the COM object being set to a new value</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t22" headers="r1c1-t22"><code>propVal</code></td>
<td class="cellalignment710" headers="r3c1-t22 r1c2-t22">the new value of the property. It must be a value of the appropriate data type.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t22" headers="r1c1-t22"><code><span class="codeinlineitalic">allowed_type</span></code></td>
<td class="cellalignment710" headers="r4c1-t22 r1c2-t22">from the following list:</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t22" headers="r1c1-t22">&nbsp;</td>
<td class="cellalignment710" headers="r5c1-t22 r1c2-t22">
<ul>
<li><code>boolean</code></li>
<li>
<p><code>byte</code></p>
</li>
<li>
<p><code>char</code></p>
</li>
<li>
<p><code>short</code></p>
</li>
<li>
<p><code>int</code></p>
</li>
<li>
<p><code>long</code></p>
</li>
<li>
<p><code>float</code></p>
</li>
<li>
<p><code>double</code></p>
</li>
<li>
<p><code>java.long.String</code></p>
</li>
<li>
<p><code>oracle.win.com.Automation</code></p>
</li>
<li>
<p><code>oracle.win.com.Currency</code></p>
</li>
<li>
<p><code>java.util.Calendar</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref187"></a>Remarks</p>
<p>If the property is a COM object, it can be set using the allowed type of <code>oracle.win.com.Automation</code>. The property value must be a valid Automation Java object.</p>
<p>The <code>COMException exception</code> is thrown if an error occurs.</p>
<p class="subhead1"><a id="sthref188"></a>Code Sample</p>
<p>See <a href="#i1007214">"GetProperty"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1007328"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref189"></a><a id="sthref190"></a>InitArg</h3>
<p>This API initializes the parameter set passed to an <code>Invoke</code> call.</p>
<p class="subhead1"><a id="sthref191"></a>Syntax</p>
<pre>
public void InitArg()
</pre>
<p class="subhead1"><a id="sthref192"></a>Remarks</p>
<p>The <code>InitArg</code> call initializes the parameter set and must be called even if the COM method does not take any parameters. After <code>InitArg</code> has been called, a <code>SetArg</code> call sets the first parameter to the specified value. A second <code>SetArg</code> call sets the second parameter in the parameter list. Subsequent calls set the <span class="italic">n</span>th parameters in the parameter list, where <span class="italic">n</span> is the number of times <code>SetArg</code> has been called after an <code>InitArg</code> call. Another call to <code>InitArg</code> resets the argument list and a call to <code>SetArg</code> sets the first parameter again.</p>
<p class="subhead1"><a id="sthref193"></a>Code Sample</p>
<p>See <a href="#i1007393">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1007344"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref194"></a><a id="sthref195"></a>SetArg</h3>
<p>This API is used to construct the parameter list for the next <code>Invoke</code> call.</p>
<p class="subhead1"><a id="sthref196"></a>Syntax</p>
<pre>
public void SetArg(<span class="italic">allowed_type</span> val)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="SetArg parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t23">Where</th>
<th class="cellalignment716" id="r1c2-t23">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t23" headers="r1c1-t23"><code>val</code></td>
<td class="cellalignment710" headers="r2c1-t23 r1c2-t23">the value of the parameter to be passed to an <code>Invoke</code> call. The parameter set is the <span class="italic">n</span>th parameter in the parameter list, where <span class="italic">n</span> is the number of times <code>SetArg</code> has been called after an <code>InitArg</code> call.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t23" headers="r1c1-t23"><code><span class="codeinlineitalic">allowed_type</span></code></td>
<td class="cellalignment710" headers="r3c1-t23 r1c2-t23">from the following list.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment710" headers="r4c1-t23 r1c2-t23">
<ul>
<li><code>boolean</code></li>
<li>
<p><code>byte</code></p>
</li>
<li>
<p><code>char</code></p>
</li>
<li>
<p><code>short</code></p>
</li>
<li>
<p><code>int</code></p>
</li>
<li>
<p><code>long</code></p>
</li>
<li>
<p><code>float</code></p>
</li>
<li>
<p><code>double</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t23" headers="r1c1-t23">&nbsp;</td>
<td class="cellalignment710" headers="r5c1-t23 r1c2-t23">
<ul>
<li><code>java.long.String</code></li>
<li>
<p><code>oracle.win.com.Automation</code></p>
</li>
<li>
<p><code>oracle.win.com.Currency</code></p>
</li>
<li>
<p><code>java.util.Calendar</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref197"></a>Remarks</p>
<p>If a parameter is a COM object, then the <code><span class="codeinlineitalic">allowed_type</span></code> of the corresponding argument should be <code>oracle.win.com.Automation</code>. The argument should be a valid Automation Java object.</p>
<p>No exceptions are thrown at this time. However, if an error occurs, for example, if the wrong argument type is passed, then it will be caught when the <code>Invoke</code> method is called.</p>
<p class="subhead1"><a id="sthref198"></a>Code Sample</p>
<p>See <a href="#i1007393">"Invoke"</a> for sample code.</p>
</div>
<!-- class="sect2" -->
<a id="i1007393"></a>
<div class="sect2">
<h3 class="sect2">Invoke<a id="sthref199"></a><a id="sthref200"></a></h3>
<p>Calls a method of a COM Automation object. This function uses the parameter list, previously created by the calls to <code>InitArg</code> and <code>SetArg</code>, as input for the COM Automation method.</p>
<p class="subhead1"><a id="sthref201"></a>Syntax</p>
<pre>
public void Invoke(String methodName, <span class="italic">allowed_type</span>[] retVal)
public void Invoke(String methodName)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Invoke parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t24">Where</th>
<th class="cellalignment716" id="r1c2-t24">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t24" headers="r1c1-t24"><code>methodName</code></td>
<td class="cellalignment710" headers="r2c1-t24 r1c2-t24">the method name of the COM Automation object to call</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r3c1-t24" headers="r1c1-t24"><code>retVal</code></td>
<td class="cellalignment710" headers="r3c1-t24 r1c2-t24">the return value of the method of the COM Automation object. If specified, then it must be a local variable of the appropriate data type. The array must be big enough to hold at least one element, although only the first element will be accessed to return the property.</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r4c1-t24" headers="r1c1-t24"><code><span class="codeinlineitalic">allowed_type</span></code></td>
<td class="cellalignment710" headers="r4c1-t24 r1c2-t24">a type from the following list:</td>
</tr>
<tr class="cellalignment704">
<td class="cellalignment710" id="r5c1-t24" headers="r1c1-t24">&nbsp;</td>
<td class="cellalignment710" headers="r5c1-t24 r1c2-t24">
<ul>
<li><code>boolean</code></li>
<li>
<p><code>byte</code></p>
</li>
<li>
<p><code>char</code></p>
</li>
<li>
<p><code>short</code></p>
</li>
<li>
<p><code>int</code></p>
</li>
<li>
<p><code>long</code></p>
</li>
<li>
<p><code>float</code></p>
</li>
<li>
<p><code>double</code></p>
</li>
<li>
<p><code>java.long.String</code></p>
</li>
<li>
<p><code>oracle.win.com.Automation</code></p>
</li>
<li>
<p><code>oracle.win.com.Currency</code></p>
</li>
<li>
<p><code>java.util.Calendar</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="sthref202"></a>Remarks</p>
<p>If the COM method returns a COM object as the return value, then the <code><span class="codeinlineitalic">allowed_type</span></code> of the return value is <code>oracle.win.com.Automation</code>. The Automation Java object that is returned can be used to get and set properties, and call methods on the return value.</p>
<p>To overload the <code>Invoke</code> method<code>,</code> <code>Invoke</code> uses an array parameter to return the values of COM object methods. Overloading would not be possible if the property value was returned as a return value. The array solves the problem caused by Java not having an <span class="italic">out</span> parameter.</p>
<p>The version of <code>Invoke</code> that takes only one parameter, <code>public void Invoke(String methodName)</code>, is used for COM object methods with <code>void</code> return types.</p>
<p>The property is still returned as a return value for convenience.</p>
<p>The <code>COMException exception</code> is thrown if an error occurs.</p>
<p class="subhead1"><a id="sthref203"></a>Code Sample</p>
<pre>
   // A Microsoft Excel Worksheet object.
   Automation workSheet = null;
   // A Microsoft Excel ChartObjects collection object.
   Automation chartObjects = null;
   // A Microsoft Excel ChartObject object.
   Automation chartObject = null;
   // Used for return values of type Automation.
   Automation[] autorv = { null };
   // Dimensions for a Microsoft Excel ChartObject object.
   short xpos = 100, ypos = 30, width = 400, height = 250;

   // Assume the Microsoft Excel Worksheet object is initialized.

   // Invoke a method that takes no arguments.
   workSheet.InitArg();
   workSheet.Invoke("ChartObjects", autorv);
   chartObjects = autorv[0];
   
   // Invoke a method that takes multiple arguments.
   chartObjects.InitArg();
   chartObjects.SetArg(xpos);
   chartObjects.SetArg(ypos);
   chartObjects.SetArg(width);
   chartObjects.SetArg(height);
   chartObjects.Invoke("Add", autorv);
   chartObject = autorv[0];
</pre></div>
<!-- class="sect2" -->
<a id="i1007468"></a>
<div class="sect2">
<h3 class="sect2">Currency<a id="sthref204"></a><a id="sthref205"></a><a id="sthref206"></a> Constructor</h3>
<p>This API creates a <code>currency</code> Java object.</p>
<p class="subhead1"><a id="sthref207"></a>Syntax</p>
<pre>
public Currency(long value)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Currency parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t25">Where</th>
<th class="cellalignment716" id="r1c2-t25">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t25" headers="r1c1-t25"><code>value</code></td>
<td class="cellalignment710" headers="r2c1-t25 r1c2-t25">the 8-byte <code>CURRENCY</code> number</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" -->
<a id="i1007485"></a>
<div class="sect2">
<h3 class="sect2">Get</h3>
<p>This API gets the 8-byte <code>CURRENCY</code> number.</p>
<p class="subhead1"><a id="sthref208"></a>Syntax</p>
<pre>
public long Get()
</pre>
<p class="subhead1"><a id="sthref209"></a>Remarks</p>
<p>Returns the 8-byte <code>CURRENCY</code> number.</p>
</div>
<!-- class="sect2" -->
<a id="i1007493"></a>
<div class="sect2">
<h3 class="sect2">Set</h3>
<p>This API sets the 8-byte <code>CURRENCY</code> number.</p>
<p class="subhead1"><a id="sthref210"></a>Syntax</p>
<pre>
public void Set(long value)
</pre>
<div class="inftblinformal">
<table class="cellalignment717" title="Set parameter list" summary="rows are parameters. first column is parameter name;second column is description" dir="ltr">
<thead>
<tr class="cellalignment704">
<th class="cellalignment716" id="r1c1-t26">Where</th>
<th class="cellalignment716" id="r1c2-t26">Is</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment704">
<td class="cellalignment710" id="r2c1-t26" headers="r1c1-t26"><code>value</code></td>
<td class="cellalignment710" headers="r2c1-t26 r1c2-t26">the 8-byte <code>CURRENCY</code> number</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment703">
<tr>
<td class="cellalignment710">
<table class="cellalignment708">
<tr>
<td class="cellalignment707"><a href="ch2insta.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment707"><a href="ch4plsql.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment712">
<table class="cellalignment706">
<tr>
<td class="cellalignment707"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment707"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment707"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment707"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment707"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment707"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
