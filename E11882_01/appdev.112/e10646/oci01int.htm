<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OCI: Introduction and Upgrading</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:21Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci02bas.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/79</span> <!-- End Header -->
<div id="LNOCI010" class="chapter"><a id="g441944"></a> <a id="i432262"></a>
<h1 class="chapter"><span class="secnum">1</span> OCI: Introduction and Upgrading</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i435125">Overview of OCI</a></p>
</li>
<li>
<p><a href="#i421879">Compatibility and Upgrading</a></p>
</li>
<li>
<p><a href="#i423362">OCI Instant Client</a></p>
</li>
</ul>
<a id="i435125"></a>
<div id="LNOCI16114" class="sect1">
<h2 class="sect1">Overview of OCI<a id="sthref8"></a></h2>
<p>Oracle Call Interface (OCI) is an application programming interface (API) that lets you create applications that use function calls to access an Oracle database and control all phases of SQL statement execution. OCI supports the data types, calling conventions, syntax, and semantics of C and C++.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNCPP001" href="../../appdev.112/e10764/introduction.htm#LNCPP001"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a></p>
</li>
<li>
<p><a href="preface.htm#CIAFJDBI">"Related Documents"</a></p>
</li>
</ul>
</div>
<p>OCI provides:</p>
<ul>
<li>
<p>Improved performance and scalability through the efficient use of system memory and network connectivity</p>
</li>
<li>
<p>Consistent interfaces for dynamic session and transaction management in a two-tier client/server or multitier environment</p>
</li>
<li>
<p>N-tier authentication</p>
</li>
<li>
<p>Comprehensive support for application development using Oracle Database objects</p>
</li>
<li>
<p>Access to external databases</p>
</li>
<li>
<p>Applications that support an increasing number of users and requests without additional hardware investments</p>
</li>
</ul>
<p>OCI enables you to manipulate data and schemas in an Oracle Database using the C programming language. It provides a library of standard database access and retrieval functions in the form of a dynamic runtime library (OCI library) that can be linked in an application at run time.</p>
<p>You can use OCI to access Oracle <a id="sthref9"></a>TimesTen In-Memory Database and Oracle In-Memory Database Cache. See <span class="italic">Oracle TimesTen In-Memory Database C Developer's Guide.</span></p>
<p>OCI has many new features that can be categorized into several primary areas:</p>
<ul>
<li>
<p>Encapsulated or opaque interfaces, whose implementation details are unknown<a id="sthref10"></a></p>
</li>
<li>
<p>Simplified user authentication and password management</p>
</li>
<li>
<p>Extensions to improve application performance and scalability</p>
</li>
<li>
<p>Consistent interface for transaction management</p>
</li>
<li>
<p>OCI extensions to support client-side access to Oracle objects</p>
</li>
</ul>
<div id="LNOCI16115" class="sect2"><a id="sthref11"></a>
<h3 class="sect2">Advantages of OCI<a id="sthref12"></a><a id="sthref13"></a></h3>
<p>OCI provides significant advantages over other methods of accessing an Oracle Database:</p>
<ul>
<li>
<p>More fine-grained control over all aspects of application design</p>
</li>
<li>
<p>High degree of control over program execution</p>
</li>
<li>
<p>Use of familiar third-generation language programming techniques and application development tools, such as browsers and debuggers</p>
</li>
<li>
<p>Connection pooling, session pooling, and statement caching that enable building of scalable applications</p>
</li>
<li>
<p>Support of dynamic SQL</p>
</li>
<li>
<p>Availability on the broadest range of operating systems of all the Oracle programmatic interfaces</p>
</li>
<li>
<p>Dynamic binding and defining using callbacks</p>
</li>
<li>
<p>Description functionality to expose layers of server metadata</p>
</li>
<li>
<p>Asynchronous event notification for registered client applications</p>
</li>
<li>
<p>Enhanced array data manipulation language (DML) capability for array inserts, updates, and deletes</p>
</li>
<li>
<p>Ability to associate commit requests with executes to reduce round-trips</p>
</li>
<li>
<p>Optimization of queries using transparent prefetch buffers to reduce round-trips</p>
</li>
<li>
<p>Thread safety, which eliminates the need for mutual exclusive locks (mutexes) on OCI handles</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNOCI16116" class="sect2"><a id="sthref14"></a>
<h3 class="sect2">Building an OCI Application</h3>
<p>You compile and link an OCI program in the same way that you compile and link a non-database application. There is no need for a separate preprocessing or precompilation step.</p>
<p><span class="bold"><a id="sthref15"></a><a id="sthref16"></a></span>Oracle Database supports most popular third-party compilers. The details of linking an OCI program vary from system to system. On some operating systems, it may be necessary to include other libraries, in addition to the OCI library, to properly link your OCI programs. See your Oracle Database system-specific documentation and the installation guide for more information about compiling and linking an OCI application for your operating system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociadwin.htm#g637990">Appendix D, "Getting Started with OCI for Windows"</a></div>
</div>
<!-- class="sect2" -->
<a id="i425222"></a>
<div id="LNOCI16117" class="sect2">
<h3 class="sect2">Parts of OCI<a id="sthref17"></a></h3>
<p>OCI has the following functionality:</p>
<ul>
<li>
<p>APIs to design a scalable, multithreaded application that can support large numbers of users securely</p>
</li>
<li>
<p>SQL access functions, for managing database access, processing SQL statements, and manipulating objects retrieved from an Oracle database</p>
</li>
<li>
<p>Data type mapping and manipulation functions, for manipulating data attributes of Oracle types</p>
</li>
<li>
<p>Data loading functions, for loading data directly into the database without using SQL statements</p>
</li>
<li>
<p>External procedure functions, for writing C callbacks from PL/SQL</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNOCI16118" class="sect2"><a id="sthref18"></a>
<h3 class="sect2">Procedural and Nonprocedural Elements</h3>
<p>OCI enables you to develop scalable, multithreaded applications in a multitier architecture that combines the nonprocedural data access power of structured query language (SQL) with the procedural capabilities of C and C++.</p>
<ul>
<li>
<p>In a nonprocedural language program, the set of data to be operated on is specified, but what operations are to be performed, or how the operations are to be conducted, is not specified. The nonprocedural nature of SQL makes it an easy language to learn and to use to perform database transactions. It is also the standard language used to access and manipulate data in modern relational and object-relational database systems.</p>
</li>
<li>
<p>In a procedural language program, the execution of most statements depends on previous or subsequent statements and on control structures, such as loops or conditional branches, that are not available in SQL. The procedural nature of these languages makes them more complex than SQL, but it also makes them more flexible and powerful.</p>
</li>
</ul>
<p>The combination of both nonprocedural and procedural language elements in an OCI program provides easy access to an Oracle database in a structured programming environment.</p>
<p>OCI supports all SQL data definition, data manipulation, query, and transaction control facilities that are available through an Oracle database. For example, an OCI program can run a query against an Oracle database. The query can require the program to supply data to the database using input (bind) variables, as follows:</p>
<pre>
SELECT name FROM employees WHERE empno = :empnumber;
</pre>
<p>In the preceding SQL statement, <code>:empnumber</code> is a placeholder for a value that is to be supplied by the application.</p>
<p>You can also take advantage of PL/SQL, Oracle's procedural extension to SQL. The applications you develop can be more powerful and flexible than applications written in SQL alone. OCI also provides facilities for accessing and manipulating objects in a database.</p>
</div>
<!-- class="sect2" -->
<a id="i426017"></a>
<div id="LNOCI16119" class="sect2">
<h3 class="sect2">Object Support<a id="sthref19"></a></h3>
<p>OCI has facilities for working with <span class="italic">object types</span> and <span class="italic">objects</span>. An object type is a user-defined data structure representing an abstraction of a real-world entity. For example, the database might contain a definition of a <code>person</code> object. That object might have <span class="italic">attributes</span>&mdash;<code>first_name</code>, <code>last_name</code>, and <code>age</code>&mdash;to represent a person's identifying characteristics.</p>
<p>The object type definition serves as the basis for creating objects that represent instances of the object type by using the object type as a structural definition, you could create a <code>person</code> object with the attribute values 'John', 'Bonivento', and '30'. Object types may also contain <span class="italic">methods</span>&mdash;programmatic functions that represent the behavior of that object type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT88817" href="../../server.112/e40540/tablecls.htm#CNCPT88817"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
<li>
<p><a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide.</span></a></p>
</li>
</ul>
</div>
<p>OCI includes functions that extend the capabilities of OCI to handle objects in an Oracle Database. These capabilities include:</p>
<ul>
<li>
<p>Executing SQL statements that manipulate object data and schema information</p>
</li>
<li>
<p>Passing of object references and instances as input variables in SQL statements</p>
</li>
<li>
<p>Declaring object references and instances as variables to receive the output of SQL statements</p>
</li>
<li>
<p>Fetching object references and instances from a database</p>
</li>
<li>
<p>Describing the properties of SQL statements that return object instances and references</p>
</li>
<li>
<p>Describing PL/SQL procedures or functions with object parameters or results</p>
</li>
<li>
<p>Extension of commit and rollback calls to synchronize object and relational functionality</p>
</li>
</ul>
<p>Additional OCI calls are provided to support manipulation of objects after they have been accessed by SQL statements. For a more detailed description, see <a href="#i421416">"Encapsulated Interfaces"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i426066"></a>
<div id="LNOCI16120" class="sect2">
<h3 class="sect2">SQL Statements<a id="sthref20"></a></h3>
<p>One of the main tasks of an OCI application is to process SQL statements. Different types of SQL statements require different processing steps in your program. It is important to take this into account when coding your OCI application. Oracle Database recognizes several types of SQL statements:</p>
<ul>
<li>
<p><a href="#i426099">Data Definition Language</a> (DDL)</p>
</li>
<li>
<p><a href="#i426121">Control Statements</a></p>
<ul>
<li>
<p>Transaction Control</p>
</li>
<li>
<p>Session Control</p>
</li>
<li>
<p>System Control</p>
</li>
</ul>
</li>
<li>
<p><a href="#i426130">Data Manipulation Language</a> (DML)</p>
</li>
<li>
<p><a href="#i426149">Queries</a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Queries are often classified as DML statements, but OCI applications process queries differently, so they are considered separately here.</div>
</li>
</ul>
<ul>
<li>
<p><a href="#i426182">PL/SQL</a></p>
</li>
<li>
<p><a href="#i426218">Embedded SQL</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci04sql.htm#g454129">Chapter 4, "Using SQL Statements in OCI"</a></div>
</li>
</ul>
<a id="i426099"></a>
<div id="LNOCI16121" class="sect3">
<h4 class="sect3">Data Definition Language<a id="sthref21"></a><a id="sthref22"></a></h4>
<p>Data definition language (DDL) statements manage schema objects in the database. DDL statements create new tables, drop old tables, and establish other schema objects. They also control access to schema objects.</p>
<p>The following is an example of creating and specifying access to a table:</p>
<pre>
CREATE TABLE employees
    (name       VARCHAR2(20),
     ssn        VARCHAR2(12),
     empno      NUMBER(6),
     mgr        NUMBER(6),
     salary     NUMBER(6));

GRANT UPDATE, INSERT, DELETE ON employees TO donna;
REVOKE UPDATE ON employees FROM jamie;
</pre>
<p>DDL statements also allow you to work with objects in the Oracle database, as in the following series of statements that create an object table:</p>
<pre>
CREATE TYPE person_t AS OBJECT (
    name     VARCHAR2(30),
    ssn      VARCHAR2(12),
    address  VARCHAR2(50));

CREATE TABLE person_tab OF person_t;
</pre></div>
<!-- class="sect3" -->
<a id="i426121"></a>
<div id="LNOCI16122" class="sect3">
<h4 class="sect3">Control Statements<a id="sthref23"></a></h4>
<p>OCI applications treat transaction control, session control, and system control statements as if they were DML statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30043" href="../../server.112/e41084/statements_1001.htm#SQLRF30043"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about these types of statements</div>
</div>
<!-- class="sect3" -->
<a id="i426130"></a>
<div id="LNOCI16123" class="sect3">
<h4 class="sect3">Data Manipulation Language<a id="sthref24"></a><a id="sthref25"></a></h4>
<p>Data manipulation language (DML) statements can change data in the database tables. For example, DML statements are used to:</p>
<ul>
<li>
<p>Insert new rows into a table</p>
</li>
<li>
<p>Update column values in existing rows</p>
</li>
<li>
<p>Delete rows from a table</p>
</li>
<li>
<p>Lock a table in the database</p>
</li>
<li>
<p>Explain the execution plan for a SQL statement</p>
</li>
<li>
<p>Require an application to supply data to the database using input (bind) variables</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci04sql.htm#i420655">"Binding Placeholders in OCI"</a> for more information about input bind variables</div>
</li>
</ul>
<p>DML statements also allow you to work with objects in the Oracle database, as in the following example, which inserts an instance of type <code>person_t</code> into the object table <code>person_tab</code>:</p>
<pre>
INSERT INTO person_tab
    VALUES (person_t('Steve May','987-65-4320','146 Winfield Street'));
</pre></div>
<!-- class="sect3" -->
<a id="i426149"></a>
<div id="LNOCI16124" class="sect3">
<h4 class="sect3">Queries<a id="sthref26"></a><a id="sthref27"></a></h4>
<p>Queries are statements that retrieve data from a database. A query can return zero, one, or many rows of data. All queries begin with the SQL keyword <code>SELECT</code>, as in the following example:</p>
<pre>
SELECT dname FROM dept
     WHERE deptno = 42;
</pre>
<p>Queries access data in tables, and they are often classified with DML statements. However, OCI applications process queries differently, so they are considered separately in this guide.</p>
<p>Queries can require the program to supply data to the database using input (bind) variables, as in the following example:</p>
<pre>
SELECT name 
    FROM employees
    WHERE empno = :empnumber;
</pre>
<p>In the preceding SQL statement, <code>:empnumber</code> is a placeholder for a value that is to be supplied by the application.</p>
<p>When processing a query, an OCI application also must define output variables to receive the returned results. In the preceding statement, you must define an output variable to receive any <code>name</code> values returned from the query.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i436225">"Overview of Binding in OCI"</a> for more information about input bind variables</p>
</li>
<li>
<p><a href="oci05bnd.htm#i421494">"Overview of Defining in OCI"</a> for information about defining output variables</p>
</li>
<li>
<p><a href="oci04sql.htm#g454129">Chapter 4</a>, for detailed information about how SQL statements are processed in an OCI program</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i426182"></a>
<div id="LNOCI16125" class="sect3">
<h4 class="sect3">PL/SQL<a id="sthref28"></a><a id="sthref29"></a></h4>
<p>PL/SQL is Oracle's procedural extension to the SQL language. PL/SQL processes tasks that are more complicated than simple queries and SQL data manipulation language statements. PL/SQL allows some constructs to be grouped into a single block and executed as a unit. Among these are:</p>
<ul>
<li>
<p>One or more SQL statements</p>
</li>
<li>
<p>Variable declarations</p>
</li>
<li>
<p>Assignment statements</p>
</li>
<li>
<p>Procedural control statements (IF...THEN...ELSE statements and loops)</p>
</li>
<li>
<p>Exception handling</p>
</li>
</ul>
<p>You can use PL/SQL blocks in your OCI program to:</p>
<ul>
<li>
<p>Call Oracle Database stored procedures and stored functions</p>
</li>
<li>
<p>Combine procedural control statements with several SQL statements, so that they are executed as a unit</p>
</li>
<li>
<p>Access special PL/SQL features such as records, tables, cursor FOR loops, and exception handling</p>
</li>
<li>
<p>Use cursor variables</p>
</li>
<li>
<p>Access and manipulate objects in an Oracle database</p>
</li>
</ul>
<p>The following PL/SQL example issues a SQL statement to retrieve values from a table of employees, given a particular employee number. This example also demonstrates the use of placeholders in PL/SQL statements.</p>
<pre>
BEGIN
    SELECT ename, sal, comm INTO :emp_name, :salary, :commission
    FROM emp
    WHERE empno = :emp_number;
END;
</pre>
<p>Note that the placeholders in this statement are not PL/SQL variables. They represent input values passed to the database when the statement is processed. These placeholders must be bound to C language variables in your program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS141" href="../../appdev.112/e25519/overview.htm#LNPLS141"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about coding PL/SQL blocks</p>
</li>
<li>
<p><a href="oci05bnd.htm#i421871">"Binding Placeholders in PL/SQL"</a> for information about working with placeholders in PL/SQL</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i426218"></a>
<div id="LNOCI16126" class="sect3">
<h4 class="sect3">Embedded SQL<a id="sthref30"></a><a id="sthref31"></a><a id="sthref32"></a></h4>
<p>OCI processes SQL statements as text strings that an application passes to the database on execution. The Oracle precompilers (Pro*C/C++, Pro*COBOL, Pro*FORTRAN) allow you to embed SQL statements directly into your application code. A separate precompilation step is then necessary to generate an executable application.</p>
<p>It is possible to mix OCI calls and embedded SQL in a precompiler program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a></div>
</div>
<!-- class="sect3" -->
<a id="i426228"></a>
<div id="LNOCI16127" class="sect3">
<h4 class="sect3">Special OCI Terms for SQL<a id="sthref33"></a></h4>
<p>This guide uses special terms to refer to the different parts of a SQL statement. For example, consider the following SQL statement:</p>
<pre>
SELECT customer, address
FROM customers
WHERE bus_type = 'SOFTWARE'
AND sales_volume = :sales;
</pre>
<p>It contains the following parts:</p>
<ul>
<li>
<p>A SQL <span class="italic">command -</span> <code>SELECT</code></p>
</li>
<li>
<p>Two <span class="italic">select-list items</span> - <code>customer</code> and <code>address</code></p>
</li>
<li>
<p>A <span class="italic">table name</span> in the <code>FROM</code> clause - <code>customers</code></p>
</li>
<li>
<p>Two <span class="italic">column names</span> in the <code>WHERE</code> clause - <code>bus_type</code> and <code>sales_volume</code></p>
</li>
<li>
<p>A <span class="italic">literal input value</span> in the <code>WHERE</code> clause - '<code>SOFTWARE</code>'</p>
</li>
<li>
<p>A <span class="italic">placeholder</span> for an input variable in the <code>WHERE</code> clause - <code>:sales</code></p>
</li>
</ul>
<p>When you develop your OCI application, you call routines that specify to the Oracle database the address (location) of input and output variables of your program. In this guide, specifying the address of a placeholder variable for data input is called a <span class="italic">bind operation</span>. Specifying the address of a variable to receive select-list items is called a <span class="italic">define operation</span>.</p>
<p>For PL/SQL, both input and output specifications are called bind operations. These terms and operations are described in <a href="oci04sql.htm#g454129">Chapter 4</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i421416"></a>
<div id="LNOCI16128" class="sect2">
<h3 class="sect2">Encapsulated Interfaces</h3>
<p>All the data structures that are used by OCI calls are encapsulated in the form of opaque interfaces that are called handles. A <span class="italic">handle</span> is an opaque pointer to a storage area allocated by the OCI library that stores context information, connection information, error information, or bind information about a SQL or PL/SQL statement. A client allocates certain types of handles, populates one or more of those handles through well-defined interfaces, and sends requests to the server using those handles. In turn, applications can access the specific information contained in a handle by using accessor functions.</p>
<p>The OCI library manages a hierarchy of handles. Encapsulating the OCI interfaces with these handles has several benefits to the application developer, including:</p>
<ul>
<li>
<p>Reduction of server-side state information that must be retained, thereby reducing server-side memory usage</p>
</li>
<li>
<p>Improvement of productivity by eliminating the need for global variables, making error reporting easier, and providing consistency in the way OCI variables are accessed and used</p>
</li>
<li>
<p>Allows changes to be made to the underlying structure without affecting applications</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i425483"></a>
<div id="LNOCI16129" class="sect2">
<h3 class="sect2">Simplified User Authentication and Password Management</h3>
<p>OCI provides application developers with simplified user authentication and password management in several ways:</p>
<ul>
<li>
<p>OCI enables a single OCI application to authenticate and maintain multiple users.</p>
</li>
<li>
<p>OCI enables the application to update a user's password, which is particularly helpful if an expired password message is returned by an authentication attempt.</p>
</li>
</ul>
<p>OCI supports two types of login sessions:</p>
<ul>
<li>
<p>A simplified login function for sessions by which a single user connects to the database using a login name and password</p>
</li>
<li>
<p>A mechanism by which a single OCI application authenticates and maintains multiple sessions by separating the login session (the session created when a user logs in to an Oracle database) from the user sessions (all other sessions created by a user)</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNOCI16130" class="sect2"><a id="sthref34"></a>
<h3 class="sect2">Extensions to Improve Application Performance and Scalability</h3>
<p>OCI provides several feature extensions to improve application performance and scalability. Application performance has been improved by reducing the number of client to server round-trips required, and scalability improvements have been made by reducing the amount of state information that must be retained on the server side. Some of these features include:</p>
<ul>
<li>
<p>Increased client-side processing, and reduced server-side requirements on queries</p>
</li>
<li>
<p>Implicit prefetching of <code>SELECT</code> statement result sets to eliminate the describe round-trip, reduce round-trips, and reduce memory usage</p>
</li>
<li>
<p>Elimination of open and closed cursor round-trips</p>
</li>
<li>
<p>Improved support for multithreaded environments</p>
</li>
<li>
<p>Session multiplexing over connections</p>
</li>
<li>
<p>Consistent support for a variety of configurations, including standard two-tier client/server configurations, server-to-server transaction coordination, and three-tier TP-monitor configurations</p>
</li>
<li>
<p>Consistent support for local and global transactions, including support for the XA interface's TM_JOIN operation</p>
</li>
<li>
<p>Improved scalability by providing the ability to concentrate connections, processes, and sessions across users on connections and by eliminating the need for separate sessions to be created for each branch of a global transaction</p>
</li>
<li>
<p>Allowing applications to authenticate multiple users and allow transactions to be started on their behalf</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNOCI16131" class="sect2"><a id="sthref35"></a>
<h3 class="sect2">OCI Object Support</h3>
<p>OCI provides a comprehensive application programming interface for programmers seeking to use Oracle Database object capabilities. These features can be divided into the following major categories:</p>
<ul>
<li>
<p><a href="#i423660">Client-Side Object Cache</a></p>
</li>
<li>
<p><a href="#CIHHIAGF">Associative and Navigational Interfaces</a> to access and manipulate objects</p>
</li>
<li>
<p><a href="#CIHGJHEG">OCI Runtime Environment for Objects</a></p>
</li>
<li>
<p><a href="#CIHCCGBG">Type Management: Mapping and Manipulation Functions</a> to access information about object types and control data attributes of Oracle types</p>
</li>
<li>
<p><a href="#CIHHEEGB">Object Type Translator</a> (OTT) utility, for mapping internal Oracle Database schema information to client-side language bind variables</p>
</li>
</ul>
<a id="i423660"></a>
<div id="LNOCI16132" class="sect3">
<h4 class="sect3">Client-Side Object Cache</h4>
<p>The object cache is a client-side memory buffer that provides lookup and memory management support for objects. It stores and tracks object instances that have been fetched by an OCI application from the server to the client side. The object cache is created when the OCI environment is initialized. When multiple applications run against the same server, each has its own object cache. The cache tracks the objects that are currently in memory, maintains references to objects, manages automatic object swapping, and tracks the meta-attributes or type information about objects. The object cache provides the following features to OCI applications:</p>
<ul>
<li>
<p>Improved application performance by reducing the number of client/server round-trips required to fetch and operate on objects</p>
</li>
<li>
<p>Enhanced scalability by supporting object swapping from the client-side cache</p>
</li>
<li>
<p>Improved concurrency by supporting object-level locking</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHHIAGF"></a>
<div id="LNOCI16133" class="sect3">
<h4 class="sect3">Associative and Navigational Interfaces</h4>
<p>Applications using OCI can access objects in an Oracle database through several types of interfaces:</p>
<ul>
<li>
<p>Using SQL <code>SELECT</code>, <code>INSERT</code>, and <code>UPDATE</code> statements</p>
</li>
<li>
<p>Using a C-style <span class="italic">pointer chasing</span> scheme to access objects in the client-side cache by traversing the corresponding smart pointers or <code>REF</code>s</p>
</li>
</ul>
<p>OCI provides a set of functions with extensions to support object manipulation using SQL <code>SELECT</code>, <code>INSERT</code>, and <code>UPDATE</code> statements. To access Oracle Database objects, these SQL statements use a consistent set of steps as if they were accessing relational tables. OCI provides the following sets of functions required to access objects:</p>
<ul>
<li>
<p>Binding and defining object type instances and references as input and output variables of SQL statements</p>
</li>
<li>
<p>Executing SQL statements that contain object type instances and references</p>
</li>
<li>
<p>Fetching object type instances and references</p>
</li>
<li>
<p>Describing select-list items of an Oracle object type</p>
</li>
</ul>
<p>OCI also provides a set of functions using a C-style pointer chasing scheme to access objects after they have been fetched into the client-side cache by traversing the corresponding smart pointers or <code>REF</code>s. This <span class="italic">navigational interface</span> provides functions for:</p>
<ul>
<li>
<p>Instantiating a copy of a referenceable persistent object (that is, of a persistent object with object ID in the client-side cache) by <span class="italic">pinning</span> its smart pointer or <code>REF</code></p>
</li>
<li>
<p>Traversing a sequence of objects that are <span class="italic">connected</span> to each other by traversing the <code>REF</code>s that point from one to the other</p>
</li>
<li>
<p>Dynamically getting and setting values of an object's attributes</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHGJHEG"></a>
<div id="LNOCI16134" class="sect3">
<h4 class="sect3">OCI Runtime Environment for Objects</h4>
<p>OCI provides functions for objects to manage how Oracle Database objects are used on the client side. These functions provide for:</p>
<ul>
<li>
<p>Connecting to an Oracle database server to access its object functionality, including initializing a session, logging on to a database server, and registering a connection</p>
</li>
<li>
<p>Setting up the client-side object cache and tuning its parameters</p>
</li>
<li>
<p>Getting errors and warning messages</p>
</li>
<li>
<p>Controlling transactions that access objects in the database</p>
</li>
<li>
<p>Associatively accessing objects through SQL</p>
</li>
<li>
<p>Describing PL/SQL procedures or functions whose parameters or results are Oracle types</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHCCGBG"></a>
<div id="LNOCI16135" class="sect3">
<h4 class="sect3">Type Management: Mapping and Manipulation Functions</h4>
<p>OCI provides two sets of functions to work with Oracle Database objects:</p>
<ul>
<li>
<p>Type Mapping functions allow applications to map attributes of an Oracle schema represented in the server as internal Oracle data types to their corresponding host language types.</p>
</li>
<li>
<p>Type Manipulation functions allow host language applications to manipulate individual attributes of an Oracle schema such as setting and getting their values and flushing their values to the server.</p>
</li>
</ul>
<p>Additionally, the <code>OCIDescribeAny()</code> function provides information about objects stored in the database.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHEEGB"></a>
<div id="LNOCI16136" class="sect3">
<h4 class="sect3">Object Type Translator</h4>
<p>The Object Type Translator (OTT) utility translates schema information about Oracle object types into client-side language bindings of host language variables, such as structures. The OTT takes as input an <code>intype</code> file that contains metadata information about Oracle schema objects. It generates an <code>outtype</code> file and the header and implementation files that must be included in a C application that runs against the object schema. Both OCI applications and Pro*C/C++ precompiler applications may include code generated by the OTT. The OTT is beneficial because it:</p>
<ul>
<li>
<p>Improves application developer productivity: OTT eliminates the need for you to code the host language variables that correspond to schema objects.</p>
</li>
<li>
<p>Maintains SQL as the data definition language of choice: By providing the ability to automatically map Oracle schema objects that are created using SQL to host language variables, OTT facilitates the use of SQL as the data definition language of choice. This in turn allows Oracle Database to support a consistent model of data.</p>
</li>
<li>
<p>Facilitates schema evolution of object types: OTT regenerates included header files when the schema is changed, allowing Oracle applications to support schema evolution.</p>
</li>
</ul>
<p>OTT is typically invoked from the command line by specifying the <code>intype</code> file, the <code>outtype</code> file, and the specific database connection. With Oracle Database, OTT can only generate C structures that can either be used with OCI programs or with the Pro*C/C++ precompiler programs.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16137" class="sect2"><a id="sthref36"></a>
<h3 class="sect2">OCI Support for Oracle Streams Advanced Queuing</h3>
<p>OCI provides an interface to Oracle Streams Advanced Queuing (Streams AQ) feature. Streams AQ provides message queuing as an integrated part of Oracle Database. Streams AQ provides this functionality by integrating the queuing system with the database, thereby creating a <span class="italic">message-enabled database.</span> By providing an integrated solution, Streams AQ frees you to devote your efforts to your specific business logic rather than having to construct a messaging infrastructure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i467582">"OCI and Streams Advanced Queuing"</a></div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16138" class="sect2"><a id="sthref37"></a>
<h3 class="sect2"><a id="sthref38"></a><a id="sthref39"></a><a id="sthref40"></a>XA Library Support</h3>
<p>OCI supports the Oracle XA library. The <code>xa.h</code> header file is in the same location as all the other OCI header files. For Linux or UNIX, the path is <code>$ORACLE_HOME/rdbms/public</code>. Users of the <code>demo_rdbms.mk</code> file on Linux or UNIX are not affected because this make file includes the <code>$ORACLE_HOME/rdbms/public</code> directory.</p>
<p>For Windows, the path is <code><span class="codeinlineitalic">ORACLE_BASE\ORACLE_HOME</span></code>\<code>oci\include</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ociadwin.htm#i634614">"Oracle XA Library"</a> for more information about Windows and XA applications</p>
</li>
<li>
<p><a class="olink ADFNS017" href="../../appdev.112/e41502/adfns_xa.htm#ADFNS017"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about developing applications with Oracle XA</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i421879"></a>
<div id="LNOCI16139" class="sect1">
<h2 class="sect1">Compatibility and Upgrading<a id="sthref41"></a></h2>
<p>The following sections discuss issues concerning compatibility between different releases<a id="sthref42"></a> of OCI client and server, changes in the OCI library routines, and upgrading an application from the release 7.<span class="italic">x</span> OCI to the current release of OCI.</p>
<a id="CHDJAEJE"></a>
<div id="LNOCI16140" class="sect2">
<h3 class="sect2"><a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a><a id="sthref46"></a><a id="sthref47"></a>Version Compatibility of Statically Linked and Dynamically Linked Applications</h3>
<p>Here are the rules for relinking for a new release.</p>
<ul>
<li>
<p>Statically linked OCI applications:</p>
<p>Statically linked OCI applications must be relinked for both major and minor releases, because the statically linked Oracle Database client-side library code may be incompatible with the error messages in the upgraded Oracle home. For example, if an error message was updated with additional parameters then it is no longer compatible with the statically linked code.</p>
</li>
<li>
<p>Dynamically linked OCI applications:</p>
<p>Dynamically linked OCI applications from Oracle Database 10<span class="italic">g</span> and later releases need not be relinked. That is, the Oracle Database client-side dynamic library is upwardly compatible with the previous version of the library. Oracle Universal Installer creates a symbolic link for the previous version of the library that resolves to the current version. Therefore, an application that is dynamically linked with the previous version of the Oracle Database client-side dynamic library does not need to be relinked to operate with the current version of the Oracle Database client-side library.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the application is linked with a runtime library search path (such as <code>-rpath</code> on Linux), then the application may still run with the version of Oracle Database client-side library it is linked with. To run with the current version of Oracle Database client-side library, it must be relinked.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink UPGRD005" href="../../server.112/e23633/intro.htm#UPGRD005"><span class="italic">Oracle Database Upgrade Guide</span></a> for information about compatibility and upgrading</p>
</li>
<li>
<p>The server versions supported currently are found on My Oracle Support in note 207303.1. See the website at</p>
<p><code><a href="https://support.oracle.com/">https://support.oracle.com/</a></code></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i433838"></a>
<div id="LNOCI16141" class="sect2">
<h3 class="sect2">Simplified Upgrading of Existing OCI Release 7 Applications</h3>
<p>OCI has been significantly improved with many features since OCI release 7. Applications written to work with OCI release 7 have a smooth migration path to the current OCI release because of the interoperability of OCI release 7 clients with the current release of the Oracle Database, and of clients of the current release with Oracle Database release 7.</p>
<p>Specifically:</p>
<ul>
<li>
<p>Applications that use the OCI release 7.3 API work unchanged against the current release of Oracle Database. They do need to be linked with the current client library.</p>
</li>
<li>
<p>OCI release 7 and the OCI calls of this release can be mixed in the same application and in the same transaction provided they are not mixed within the same statement execution.</p>
</li>
</ul>
<p>As a result, when migrating an existing OCI version 7 application you have the following two alternatives:</p>
<ul>
<li>
<p>Upgrade to the current OCI client but do not modify the application: If you choose to upgrade from an Oracle release 7 OCI client to the current release OCI client, you need only link the new version of the OCI library and need <span class="italic">not</span> recompile your application. The relinked Oracle Database release 7 OCI applications work unchanged against a current Oracle Database.</p>
</li>
<li>
<p>Upgrade to the current OCI client and modify the application: To use the performance and scalability benefits provided by the current OCI, however, you must modify your existing applications to use the current OCI programming paradigm, relink them with the current OCI library, and run them against the current release of the Oracle database.</p>
</li>
</ul>
<p>If you want to use any of the object capabilities of the current Oracle Database release, you must upgrade your client to the current release of OCI.</p>
</div>
<!-- class="sect2" -->
<a id="i423077"></a>
<div id="LNOCI16142" class="sect2">
<h3 class="sect2">Obsolete OCI Routines<a id="sthref48"></a></h3>
<p>Release 8.0 of the OCI introduced an entirely new set of functions that were not available in release 7.3. Oracle Database continues to support these release 7.3 functions. Many of the earlier 7.<span class="italic">x</span> calls are available, but Oracle strongly recommends that new applications use the new calls to improve performance and provide increased functionality.</p>
<p><a href="#g435463">Table 1-1</a> lists the 7.<span class="italic">x</span> OCI calls with their later equivalents. For more information about the OCI calls, see the function descriptions in this guide. For more information about the 7<span class="italic">.x</span> calls, see <span class="italic">Programmer's Guide to the Oracle Call Interface, Release 7.3</span>. These 7.<span class="italic">x</span> calls are obsolete, meaning that OCI has replaced them with newer calls. Although the obsolete calls are now supported, they may not be supported in all future versions of OCI.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
In many cases the new or current OCI routines do not map directly onto the 7.<span class="italic">x</span> routines, so it almost may not be possible to simply replace one function call and parameter list with another. Additional program logic may be required before or after the new or current call is made. See the remaining chapters, in particular <a href="oci02bas.htm#g478150">Chapter 2, "OCI Programming Basics"</a> of this guide for more information.</div>
<div id="LNOCI16143" class="tblformal">
<p class="titleintable"><a id="sthref49"></a><a id="g435463"></a>Table 1-1 Obsolescent OCI Functions</p>
<table class="cellalignment1016" title="Obsolescent OCI Functions " summary="Obsolescent OCI Functions" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t17">7<span class="italic">.x</span> OCI Routine</th>
<th class="cellalignment1012" id="r1c2-t17">Equivalent or Similar Later OCI Routine</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t17" headers="r1c1-t17">
<p><code>obindps(), obndra(), obndrn(), obndrv()</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t17 r1c2-t17">
<p><code>OCIBindByName()</code>, <code>OCIBindByPos()</code> (Note: additional bind calls may be necessary for some data types)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t17" headers="r1c1-t17">
<p><code>obreak()</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t17 r1c2-t17">
<p><code>OCIBreak()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t17" headers="r1c1-t17">
<p><code>ocan()</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t17 r1c2-t17">
<p>none</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t17" headers="r1c1-t17">
<p><code>oclose()</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t17 r1c2-t17">
<p>Note: cursors are not used in release 8<span class="italic">.</span>x or later</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t17" headers="r1c1-t17">
<p><code>ocof(), ocon()</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t17 r1c2-t17">
<p><code>OCIStmtExecute()</code> with <code>OCI_COMMIT_ON_SUCCESS</code> mode</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t17" headers="r1c1-t17">
<p><code>ocom()</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t17 r1c2-t17">
<p><code>OCITransCommit()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t17" headers="r1c1-t17">
<p><code>odefin(), odefinps()</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t17 r1c2-t17">
<p><code>OCIDefineByPos()</code> (Note: additional define calls may be necessary for some data types)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t17" headers="r1c1-t17">
<p><code>odescr()</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t17 r1c2-t17">
<p>Note: schema objects are described with OCIDescribeAny(). A describe, as used in release 7.<span class="italic">x</span>, most often be done by calling OCIAttrGet() on the statement handle after SQL statement execution.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t17" headers="r1c1-t17">
<p><code>odessp()</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t17 r1c2-t17">
<p><code>OCIDescribeAny()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t17" headers="r1c1-t17">
<p><code>oerhms()</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t17 r1c2-t17">
<p><code>OCIErrorGet()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t17" headers="r1c1-t17">
<p><code>oexec(), oexn()</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t17 r1c2-t17">
<p><code>OCIStmtExecute()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t17" headers="r1c1-t17">
<p><code>oexfet()</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t17 r1c2-t17">
<p><code>OCIStmtExecute()</code>, <code>OCIStmtFetch()</code> (Note: result set rows can be implicitly prefetched)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t17" headers="r1c1-t17">
<p><code>ofen()</code>, <code>ofetch()</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t17 r1c2-t17">
<p><code>OCIStmtFetch()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t17" headers="r1c1-t17">
<p><code>oflng()</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t17 r1c2-t17">
<p>none</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t17" headers="r1c1-t17">
<p><code>ogetpi()</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t17 r1c2-t17">
<p><code>OCIStmtGetPieceInfo()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t17" headers="r1c1-t17">
<p><code>olog()</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t17 r1c2-t17">
<p><code>OCILogon()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t17" headers="r1c1-t17">
<p><code>ologof()</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t17 r1c2-t17">
<p><code>OCILogoff()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t17" headers="r1c1-t17">
<p><code>onbclr(), onbset(), onbtst()</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t17 r1c2-t17">
<p>Note: nonblocking mode can be set or checked by calling <code>OCIAttrSet()</code> or <code>OCIAttrGet()</code> on the server context handle or service context handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t17" headers="r1c1-t17">
<p><code>oopen()</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t17 r1c2-t17">
<p>Note: cursors are not used in release 8.<span class="italic">x</span> or later</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t17" headers="r1c1-t17">
<p><code>oopt()</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t17 r1c2-t17">
<p>none</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t17" headers="r1c1-t17">
<p><code>oparse()</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t17 r1c2-t17">
<p><code>OCIStmtPrepare()</code>; however, it is all local</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t17" headers="r1c1-t17">
<p><code>opinit()</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t17 r1c2-t17">
<p><code>OCIEnvCreate()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t17" headers="r1c1-t17">
<p><code>orol()</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t17 r1c2-t17">
<p><code>OCITransRollback()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t17" headers="r1c1-t17">
<p><code>osetpi()</code></p>
</td>
<td class="cellalignment1013" headers="r25c1-t17 r1c2-t17">
<p><code>OCIStmtSetPieceInfo()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t17" headers="r1c1-t17">
<p><code>sqlld2()</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t17 r1c2-t17">
<p><code>SQLSvcCtxGet or SQLEnvGet</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t17" headers="r1c1-t17">
<p><code>sqllda()</code></p>
</td>
<td class="cellalignment1013" headers="r27c1-t17 r1c2-t17">
<p><code>SQLSvcCtxGet or SQLEnvGet</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t17" headers="r1c1-t17">
<p><code>odsc()</code></p>
</td>
<td class="cellalignment1013" headers="r28c1-t17 r1c2-t17">
<p>Note: see odescr() preceding</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t17" headers="r1c1-t17">
<p><code>oermsg()</code></p>
</td>
<td class="cellalignment1013" headers="r29c1-t17 r1c2-t17">
<p><code>OCIErrorGet()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r30c1-t17" headers="r1c1-t17">
<p><code>olon()</code></p>
</td>
<td class="cellalignment1013" headers="r30c1-t17 r1c2-t17">
<p><code>OCILogon()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r31c1-t17" headers="r1c1-t17">
<p><code>orlon()</code></p>
</td>
<td class="cellalignment1013" headers="r31c1-t17 r1c2-t17">
<p><code>OCILogon()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r32c1-t17" headers="r1c1-t17">
<p><code>oname()</code></p>
</td>
<td class="cellalignment1013" headers="r32c1-t17 r1c2-t17">
<p>Note: see <code>odescr()</code> preceding</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r33c1-t17" headers="r1c1-t17">
<p><code>osql3()</code></p>
</td>
<td class="cellalignment1013" headers="r33c1-t17 r1c2-t17">
<p>Note: see <code>oparse()</code> preceding</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i431199"></a>
<div id="LNOCI16144" class="sect2">
<h3 class="sect2">OCI Routines Not Supported<a id="sthref50"></a></h3>
<p>Some OCI routines that were available in previous versions of OCI are not supported in the current release. They are listed in <a href="#g435610">Table 1-2</a>.</p>
<div id="LNOCI16145" class="tblformal">
<p class="titleintable"><a id="sthref51"></a><a id="g435610"></a>Table 1-2 OCI Functions Not Supported</p>
<table class="cellalignment1016" title="OCI Functions Not Supported " summary="OCI functions not supported" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t18">OCI Routine</th>
<th class="cellalignment1012" id="r1c2-t18">Equivalent or Similar Later OCI Routine</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t18" headers="r1c1-t18">
<p><code>obind()</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t18 r1c2-t18">
<p><code>OCIBindByName()</code>, <code>OCIBindByPos()</code> (Note: additional bind calls may be necessary for some data types)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t18" headers="r1c1-t18">
<p><code>obindn()</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t18 r1c2-t18">
<p><code>OCIBindByName()</code>, <code>OCIBindByPos()</code> (Note: additional bind calls may be necessary for some data types)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t18" headers="r1c1-t18">
<p><code>odfinn()</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t18 r1c2-t18">
<p><code>OCIDefineByPos()</code> (Note: additional define calls may be necessary for some data types)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t18" headers="r1c1-t18">
<p><code>odsrbn()</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t18 r1c2-t18">
<p>Note: see <code>odescr()</code> in <a href="#g435463">Table 1-1</a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t18" headers="r1c1-t18">
<p><code>ologon()</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t18 r1c2-t18">
<p><code>OCILogon()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t18" headers="r1c1-t18">
<p><code>osql()</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t18 r1c2-t18">
<p>Note: see <code>oparse()</code> <a href="#g435463">Table 1-1</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i431250"></a>
<div id="LNOCI16146" class="sect2">
<h3 class="sect2">Compatibility Between Different Releases of OCI and Servers<a id="sthref52"></a><a id="sthref53"></a></h3>
<p>This section addresses compatibility between different releases of OCI and Oracle Database.</p>
<p>Existing 7.<span class="italic">x</span> applications with no new post-release 7.<span class="italic">x</span> calls have to be relinked with the current client-side library.</p>
<p>The application cannot use the object features of Oracle8<span class="italic">i</span> or later, and cannot get any of the performance or scalability benefits provided by those OCI releases.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16147" class="sect2"><a id="sthref54"></a>
<h3 class="sect2">Upgrading OCI<a id="sthref55"></a></h3>
<p>Programmers who want to incorporate post-release 7.<span class="italic">x</span> functionality into existing OCI applications have two options:</p>
<ul>
<li>
<p>Completely rewrite the application to use only current OCI calls (recommended).</p>
</li>
<li>
<p>Incorporate current OCI post-release 7.<span class="italic">x</span> calls into the application, while still using 7.<span class="italic">x</span> calls for some operations.</p>
</li>
</ul>
<p>This manual should provide the information necessary to rewrite an existing application to use only current OCI calls.</p>
<div id="LNOCI16148" class="sect3"><a id="sthref56"></a>
<h4 class="sect3">Adding Post-Release 7.<span class="italic">x</span> OCI Calls to 7.<span class="italic">x</span> Applications</h4>
<p>The following guidelines apply to programmers who want to incorporate current Oracle data types and features by using current OCI calls, while keeping 7.<span class="italic">x</span> calls for some operations:</p>
<ul>
<li>
<p>Change the existing logon to use <code>OCILogon()</code> instead of <code>olog()</code> (or other logon call). The service context handle can be used with current OCI calls or can be converted into an <code>Lda_Def</code> to be used with 7.<span class="italic">x</span> OCI calls.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
See the description of <a href="oci16rel001.htm#i558225">"OCIServerAttach()"</a> and the description of <a href="oci16rel001.htm#i556608">"OCISessionBegin()"</a> for information about the logon calls necessary for applications that are maintaining multiple sessions</div>
</li>
</ul>
<pre>
</pre>
<ul>
<li>
<p>After the server context handle has been initialized, it can be used with OCI post-release 7.<span class="italic">x</span> calls.</p>
</li>
<li>
<p>To use release 7 OCI calls, convert the server context handle to an <code>Lda_Def</code> using <code>OCISvcCtxToLda()</code>, and pass the resulting <code>Lda_Def</code> to the 7<span class="italic">.x</span> calls.</p>
</li>
</ul>
<pre>
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If there are multiple service contexts that share the same server handle, only one can be in Oracle Database release 7 mode at any one time.</div>
<pre>
</pre>
<ul>
<li>
<p>To begin using post-release 7.<span class="italic">x</span> OCI calls again, the application must convert the <code>Lda_Def</code> back to a server context handle using <code>OCILdaToSvcCtx()</code>.</p>
</li>
<li>
<p>The application may toggle between the <code>Lda_Def</code> and server context as often as necessary in the application.</p>
</li>
</ul>
<p>This approach allows an application to use a single connection, but two different APIs, to accomplish different tasks.</p>
<p>You can mix OCI 7.<span class="italic">x</span> and post-release 7.<span class="italic">x</span> calls within a transaction, but not within a statement. This lets you execute one SQL or PL/SQL statement with OCI 7.<span class="italic">x</span> calls and the next SQL or PL/SQL statement within that transaction with post-release 7.<span class="italic">x</span> OCI calls.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
You <span class="italic">cannot</span> open a cursor, parse with OCI 7.<span class="italic">x</span> calls and then execute the statement with post-release 7.<span class="italic">x</span> calls.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i423362"></a>
<div id="LNOCI019" class="sect1">
<h2 class="sect1">OCI <a id="sthref57"></a>Instant Client</h2>
<p>The Instant Client feature simplifies the deployment of customer applications based on OCI, OCCI, ODBC, and JDBC OCI by eliminating the need for an Oracle home. The storage space requirement of an OCI application running in Instant Client mode is significantly reduced compared to the same application running in a full client-side installation. The Instant Client shared libraries occupy only about one-fourth the disk space of a full client-side installation.</p>
<p>A README file is included with the Instant Client installation. It describes the version, date and time, and the operating system the Instant Client was generated on.</p>
<p><a href="#g435667">Table 1-3</a> shows the Oracle Database client-side files required to deploy an OCI application:</p>
<div id="LNOCI16149" class="tblformal">
<p class="titleintable"><a id="sthref58"></a><a id="g435667"></a>Table 1-3 OCI Instant Client Shared Libraries</p>
<table class="cellalignment1016" title="OCI Instant Client Shared Libraries" summary="OCI Instant Client shared libraries" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t22">Linux and UNIX</th>
<th class="cellalignment1012" id="r1c2-t22">Description for Linux and UNIX</th>
<th class="cellalignment1012" id="r1c3-t22">Microsoft Windows</th>
<th class="cellalignment1012" id="r1c4-t22">Description for Microsoft Windows</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t22" headers="r1c1-t22">
<p><code>libclntsh.so.11.1</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c2-t22">
<p>Client Code Library</p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c3-t22">
<p><code>oci.dll</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c4-t22">
<p>Forwarding functions that applications link with</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t22" headers="r1c1-t22">
<p><code>libociei.so</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c2-t22">
<p>OCI Instant Client Data Shared Library</p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c3-t22">
<p><code>oraociei11.dll</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c4-t22">
<p>Data and code</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t22" headers="r1c1-t22">
<p><code>libnnz11.so</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c2-t22">
<p>Security Library</p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c3-t22">
<p><code>orannzsbb11.dll</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c4-t22">
<p>Security Library</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t22" headers="r1c1-t22">&nbsp;</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c2-t22">&nbsp;</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c3-t22">
<p><code>oci.sym</code>, <code>oraociei11.sym</code>, <code>orannzsbb11.sym</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c4-t22">
<p>Symbol tables</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>A <code>.sym</code> file is provided for each dynamic-link library (DLL). When the <code>.sym</code> file is present in the same location as the DLL, a stack trace with function names is generated when a failure occurs in OCI on Windows.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci10new.htm#CHDCIAHJ">"Fault Diagnosability in OCI"</a></div>
<p>Oracle Database 11<span class="italic">g</span> Release 1 library names are used in the table.</p>
<p>To use the Microsoft ODBC and OLEDB driver, you must copy <code>ociw32.dll</code> from the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>\bin</code> directory.</p>
<div id="LNOCI16150" class="sect2"><a id="sthref59"></a>
<h3 class="sect2">Benefits of Instant Client</h3>
<p>Why use Instant Client?</p>
<ul>
<li>
<p>Installation involves copying a small number of files.</p>
</li>
<li>
<p>The Oracle Database client-side number of required files and the total disk storage are significantly reduced.</p>
</li>
<li>
<p>There is no loss of functionality or performance for applications deployed in Instant Client mode.</p>
</li>
<li>
<p>It is simple for independent software vendors to package applications.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDEIGDI"></a>
<div id="LNOCI16151" class="sect2">
<h3 class="sect2">OCI Instant Client Installation Process</h3>
<p>The Instant Client libraries can be installed by either choosing the Instant Client option from Oracle Universal Installer or by downloading and installing the Instant Client libraries from the OCI page (see the bottom of OCI page for the Instant Client link) on the Oracle Technology Network website:</p>
<pre>
<a href="http://www.oracle.com/technology/tech/oci/instantclient/index.html">http://www.oracle.com/technology/tech/oci/instantclient/index.html</a>
</pre>
<p class="subhead2"><a id="LNOCI18111"></a>To Download and Install the Instant Client Libraries from the Oracle Technology Network Website</p>
<ol>
<li>
<p>Download and install the Instant Client shared libraries to an empty directory, such as <code>instantclient_11_2</code>, for Oracle Database release 11.2. Choose the Basic package.</p>
</li>
<li>
<p>Set the operating system shared library path environment variable to the directory from Step 1. For example, on Linux or UNIX, set <code>LD_LIBRARY_PATH</code> to <code>instantclient_11_2</code>. On Windows, set <code>PATH</code> to the <code>instantclient_11_2</code> directory.</p>
</li>
<li>
<p>If necessary, set the <code>NLS_LANG</code> environment variable to specify the language and territory used by the client application and database connections opened by the application, and the client's character set, which is the character set for data entered or displayed by a client program. <code>NLS_LANG</code> is set as an environment variable on UNIX platforms and is set in the registry on Windows platforms. See <a class="olink NLSPG189" href="../../server.112/e10729/ch3globenv.htm#NLSPG189">Oracle Database Globalization Support Guide</a> for more information on setting the <code>NLS_LANG</code> environment variable.</p>
</li>
</ol>
<p>After completing the preceding steps you are ready to run the OCI application.</p>
<p>The OCI application operates in Instant Client mode when the OCI shared libraries are accessible through the operating system Library Path variable. In this mode, there is no dependency on the Oracle home and none of the other code and data files provided in the Oracle home are needed by OCI (except for the <a id="sthref60"></a><code>tnsnames.ora</code> file described later).</p>
<p class="subhead2"><a id="LNOCI18112"></a>To Install the Instant Client from the Oracle Universal Installer</p>
<ol>
<li>
<p>Invoke the Oracle Universal Installer and select the Instant Client option.</p>
</li>
<li>
<p>Install the Instant Client shared libraries to an empty directory, such as <code>instantclient_11_2</code>, for release 11.2.</p>
</li>
<li>
<p>Set the <code>LD_LIBRARY_PATH</code> to the instant client directory to operate in instant client mode.</p>
</li>
<li>
<p>If necessary, set the <code>NLS_LANG</code> environment variable to specify the language and territory used by the client application and database connections opened by the application, and the client's character set, which is the character set for data entered or displayed by a client program. <code>NLS_LANG</code> is set as an environment variable on UNIX platforms and is set in the registry on Windows platforms. See <a class="olink NLSPG189" href="../../server.112/e10729/ch3globenv.htm#NLSPG189">Oracle Database Globalization Support Guide</a> for more information on setting the <code>NLS_LANG</code> environment variable.</p>
</li>
</ol>
<p>If you did a complete client installation (by choosing the <code>Admin</code> option in Oracle Universal Installer), the Instant Client shared libraries are also installed. The locations of the Instant Client shared libraries in a full client installation are:</p>
<p>On Linux or UNIX:</p>
<p><code>libociei.so</code> library is in <code>$ORACLE_HOME/instantclient</code></p>
<p><code>libclntsh.so.11.1</code> and <code>libnnz11.so</code> are in <code>$ORACLE_HOME/lib</code></p>
<p>On Windows:</p>
<p><code>oraociei11.dll</code> library is in <code>ORACLE_HOME\instantclient</code></p>
<p><code>oci.dll</code>, <code>ociw32.dll</code>, and <code>orannzsbb11.dll</code> are in <code>ORACLE_HOME\bin</code></p>
<p>To enable running the OCI application in Instant Client mode, copy the preceding libraries to a different directory and set the operating system shared library path to locate this directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All the libraries must be copied from the same Oracle home and must be placed in the same directory. Co-location of symlinks to Instant Client libraries is not a substitute for physical co-location of the libraries.
<p>There should be only one set of Oracle libraries on the operating system Library Path variable. That is, if you have multiple directories containing Instant Client libraries, then only one such directory should be on the operating system Library Path.</p>
<p>Similarly, if an Oracle home-based installation is performed on the same system, then you should not have <code>ORACLE_HOME/lib</code> and the Instant Client directory on the operating system Library Path simultaneously regardless of the order in which they appear on the Library Path. That is, either the <code>ORACLE_HOME/lib</code> directory (for non-Instant Client operation) or Instant Client directory (for Instant Client operation) should be on the operating system Library Path variable, but not both.</p>
</div>
<p>To enable other capabilities such as OCCI and JDBC OCI, you must copy a few additional files. To enable OCCI, you must install the OCCI Library (<code>libocci.so.11.1</code> on Linux or UNIX and <code>oraocci11.dll</code> on Windows) in the Instant Client directory. For the JDBC OCI driver, in addition to the three OCI shared libraries, you must also download OCI JDBC Library (for example <code>libocijdbc11.so</code> on Linux or UNIX and <code>ocijdbc11.dll</code> on Windows). Place all libraries in the Instant Client directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
On hybrid platforms, such as Sparc64, to operate the JDBC OCI driver in the Instant Client mode, copy the <code>libociei.so</code> library from the <code>ORACLE_HOME/instantclient32</code> directory to the Instant Client directory. Copy all other Sparc64 libraries needed for the JDBC OCI Instant Client from the <code>ORACLE_HOME/lib32</code> directory to the Instant Client directory.</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16152" class="sect2"><a id="sthref61"></a>
<h3 class="sect2">When to Use Instant Client</h3>
<p>Instant Client is a deployment feature and should be used for running production applications. In general, all OCI functionality is available to an application being run in the Instant Client mode, except that the Instant Client mode is for client-side operation only. Therefore, server-side external procedures cannot operate in the Instant Client mode.</p>
<p>For development you can also use the Instant Client SDK.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDCIGDF">"SDK for Instant Client"</a></p>
</li>
<li>
<p><a href="oci10new.htm#CHDCIAHJ">"Fault Diagnosability in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16153" class="sect2"><a id="sthref62"></a>
<h3 class="sect2">Patching Instant Client Shared Libraries on Linux or UNIX</h3>
<p>Because Instant Client is a deployment feature, the number and size of files (client footprint) required to run an OCI application has been reduced. Hence, all files needed to patch Instant Client shared libraries are not available in an Instant Client deployment. A complete client installation based on Oracle home is needed to patch the Instant Client shared libraries. Use the <code>opatch</code> utility to patch the Instant Client shared libraries.</p>
<p>After you apply the patch in an Oracle home environment, copy the files listed in <a href="#g435667">Table 1-3</a> to the instant client directory, as described in <a href="#CHDEIGDI">"OCI Instant Client Installation Process"</a>.</p>
<p>Instead of copying individual files, you can generate Instant Client zip and RPM files for OCI and OCCI, JDBC, and SQL*Plus as described in <a href="#CHDHICGB">"Regeneration of Data Shared Library and Zip and RPM Files"</a>. Then, you can copy the zip and RPM files to the target system and unzip them as described in <a href="#CHDEIGDI">"OCI Instant Client Installation Process"</a>.</p>
<p>The <code>opatch</code> utility stores the patching information of the <code>ORACLE_HOME</code> installation in <code>libclntsh.so</code> . This information can be retrieved by the following command:</p>
<pre>
genezi -v
</pre>
<p>If the Instant Client deployment system does not have the <code>genezi</code> utility, you can copy it from the <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/bin</code> directory.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>opatch</code> utility is not available on Windows.</div>
</div>
<!-- class="sect2" -->
<a id="CHDHICGB"></a>
<div id="LNOCI16154" class="sect2">
<h3 class="sect2">Regeneration of Data Shared Library and Zip and RPM Files</h3>
<p>The process to regenerate the data shared library and the zip and RPM files has changed for release 11.2 and later. Separate targets are added to create the data shared libraries, zip, and RPM files either individually or all at once. In previous releases, one target, <code>ilibociei</code>, was provided to build the data shared libraries, zip, and RPM files. Now <code>ilibociei</code> builds only the zip and RPM files. Regeneration of data shared libraries requires both a compiler and linker, which may not be available on all installations. Therefore, separate targets have been added to regenerate the data shared libraries.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The regenerated Instant Client binaries contain only the Instant Client files installed in the Oracle Client Administrator Home from which the regeneration is done. Therefore, error messages, character set encodings, and time zone files that are present in the regeneration environment are the only ones that are packaged in the data shared libraries. Error messages, character set encodings, and time zone files depend on which national languages were selected for the installation of the Oracle Client Administrator Home.</div>
<div id="LNOCI16155" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref63"></a>
<h4 class="sect3">Regenerating Data Shared Library libociei.so</h4>
<p>The OCI Instant Client Data Shared Library (<code>libociei.so</code>) can be regenerated by using the following commands in an Administrator Install of <code>ORACLE_HOME</code>:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk igenlibociei
</pre>
<p>The new regenerated <code>libociei.so</code> is placed in the <code>ORACLE_HOME</code><code>/instantclient</code> directory. The original existing <code>libociei.so</code> located in this same directory is renamed to <code>libociei.so0</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16156" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref64"></a>
<h4 class="sect3">Regenerating Data Shared Library libociicus.so</h4>
<p>To regenerate Instant Client Light data shared library (<code>libociicus.so</code>), use the following commands:</p>
<pre>
mkdir -p $ORACLE_HOME/rdbms/install/instantclient/light
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk igenlibociicus
</pre>
<p>The newly regenerated <code>libociicus.so</code> is placed in the <code>ORACLE_HOME</code>/<code>instantclient</code>/<code>light</code> directory. The original existing <code>libociicus.so</code> located in this same directory is renamed to <code>libociicus.so0</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16157" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref65"></a>
<h4 class="sect3">Regenerating Data Shared Libraries libociei.so and libociicus.so in One Step</h4>
<p>To regenerate the data shared libraries <code>libociei.so</code> and libociicus.so, use the following commands:</p>
<pre>
mkdir -p $ORACLE_HOME/rdbms/install/instantclient/light
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk igenliboci
</pre>
<p>The newly regenerated <code>libociei.so</code> is placed in the <code>ORACLE_HOME</code>/<code>instantclient</code> directory. The original existing <code>libociei.so</code> located in this same directory is renamed to <code>libociei.so0</code>.</p>
<p>The newly regenerated <code>libociicus.so</code> is placed in the <code>ORACLE_HOME</code>/<code>instantclient</code>/<code>light</code> directory. The original existing <code>libociicus.so</code> located in this same directory is renamed to <code>libociicus.so0</code>.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16159" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref66"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the Basic Package</h4>
<p>To regenerate the zip and RPM files for the basic package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_basic_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16160" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref67"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the Basic Light Package</h4>
<p>To regenerate the zip and RPM files for the basic light package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_basiclite_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16161" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref68"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the JDBC Package</h4>
<p>To regenerate the zip and RPM files for the JDBC package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_jdbc_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16162" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref69"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the ODBC Package</h4>
<p>To regenerate the zip and RPM files for the ODBC package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_odbc_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16164" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref70"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the SQL*Plus Package</h4>
<p>To regenerate the zip and RPM files for the SQL*Plus package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_sqlplus_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16165" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref71"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for the Tools Package</h4>
<p>To regenerate the zip and RPM files for the tools package, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ic_tools_zip
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16166" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref72"></a>
<h4 class="sect3">Regenerating Zip and RPM Files for All Packages</h4>
<p>To regenerate the zip and RPM files for all packages, use the following commands:</p>
<pre>
cd $ORACLE_HOME/rdbms/lib
make -f ins_rdbms.mk ilibociei
</pre>
<p>The new zip and RPM files are generated under the following directory:</p>
<p><code>$ORACLE_HOME/rdbms/install/instantclient</code></p>
<p>Regeneration of the data shared library and the zip and RPM files is not available on Windows platforms.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16167" class="sect2"><a id="sthref73"></a>
<h3 class="sect2">Database Connection Strings for OCI Instant Client</h3>
<p>OCI Instant Client can make remote database connections in all the ways that ordinary SQL clients can. However, because Instant Client does not have the Oracle home environment and directory structure, some database naming methods require additional configuration steps.</p>
<p>All Oracle Net naming methods that do not require use of <code>ORACLE_HOME</code> or <a id="sthref74"></a><code>TNS_ADMIN</code> (to locate configuration files such as <code>tnsnames.ora</code> or <code>sqlnet.ora</code>) work in the Instant Client mode. In particular, the <code>connect_identifier</code> in the <code>OCIServerAttach()</code> call can be specified in the following formats:</p>
<ul>
<li>
<p>A SQL Connect URL string of the form:</p>
<pre>
[//]<span class="italic">host</span>[:<span class="italic">port</span>][/<span class="italic">service name</span>]
</pre>
<p>For example:</p>
<pre>
//dlsun242:5521/bjava21
</pre></li>
<li>
<p>As an Oracle Net connect descriptor. For example:</p>
<pre>
"(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp) (HOST=dlsun242) (PORT=5521))
(CONNECT_DATA=(SERVICE_NAME=bjava21)))"
</pre></li>
<li>
<p>A Connection Name that is resolved through Directory Naming where the site is configured for LDAP server discovery.</p>
</li>
</ul>
<p>For naming methods such as <code>tnsnames</code> and directory naming to work, the <code>TNS_ADMIN</code> environment variable must be set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NETAG008" href="../../network.112/e41945/naming.htm#NETAG008"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a> chapter on "Configuring Naming Methods" for more about connect descriptors</div>
<p>If the <code>TNS_ADMIN</code> environment variable is not set, and <code>TNSNAMES</code> entries such as <code>inst1</code>, and so on, are used, then the <code>ORACLE_HOME</code> variable must be set, and the configuration files are expected to be in the <code>$ORACLE_HOME/network/admin</code> directory.</p>
<p>Note that the <code>ORACLE_HOME</code> variable in this case is only used for locating Oracle Net configuration files, and no other component of Client Code Library (OCI, NLS, and so on) uses the value of <code>ORACLE_HOME</code>.</p>
<p>If a <code>NULL</code> string, "", is used as the connection string in the <code>OCIServerAttach()</code> call, then the <code>TWO_TASK</code> environment variable can be set to the <code>connect_identifier</code>. On a Windows operating system, the <code>LOCAL</code> environment variable is used instead of <code>TWO_TASK</code>.</p>
<p>Similarly, for OCI command-line applications such as SQL*Plus, the <code>TWO_TASK</code> (or <code>LOCAL</code> on Windows) environment variable can be set to the connect_identifier. Its value can be anything that would have gone to the right of the '@' on a typical connect string.</p>
<div id="LNOCI16168" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref75"></a>
<h4 class="sect3">Examples of Instant Client Connect Identifiers</h4>
<p>If you are using SQL*Plus in Instant Client mode, then you can specify the connect identifier in the following ways:</p>
<p>If the <code>listener.ora</code> file on the Oracle database contains the following:</p>
<pre>
LISTENER = (ADDRESS_LIST=
 (ADDRESS=(PROTOCOL=tcp)(HOST=server6)(PORT=1573))
)
 
SID_LIST_LISTENER = (SID_LIST= 
 (SID_DESC=(SID_NAME=rdbms3)(GLOBAL_DBNAME=rdbms3.server6.us.alchemy.com)
(ORACLE_HOME=/home/dba/rdbms3/oracle))
)
</pre>
<p>The SQL*Plus connect identifier is:</p>
<pre>
"(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=server6)(PORT=1573))(CONNECT_DATA=
(SERVICE_NAME=rdbms3.server6.us.alchemy.com)))"
</pre>
<p>The connect identifier can also be specified as:</p>
<pre>
"//server6:1573/rdbms3.server6.us.alchemy.com"
</pre>
<p>Alternatively, you can set the <code>TWO_TASK</code> environment variable to any of the previous connect identifiers and connect without specifying the connect identifier. For example:</p>
<pre>
setenv TWO_TASK "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=server6)(PORT=1573))
(CONNECT_DATA=(SERVICE_NAME=rdbms3.server6.us.alchemy.com)))"
</pre>
<p>You can also specify the <code>TWO_TASK</code> environment variable as:</p>
<pre>
setenv TWO_TASK //server6:1573/rdbms3.server6.us.alchemy.com
</pre>
<p>Then you can invoke SQL*Plus with an empty connect identifier (you are prompted for the password):</p>
<pre>
sqlplus <span class="italic">user</span>
</pre>
<p>The connect descriptor can also be stored in the <code>tnsnames.ora</code> file. For example, if the <code>tnsnames.ora</code> file contains the following connect descriptor:</p>
<pre>
conn_str = (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=server6)(PORT=1573))(CONNECT_DATA=
(SERVICE_NAME=rdbms3.server6.us.alchemy.com)))
</pre>
<p>The <code>tnsnames.ora</code> file is located in the <code>/home/webuser/instantclient</code> directory, so you can set the variable <code>TNS_ADMIN</code> (or <code>LOCAL</code> on Windows) as:</p>
<pre>
setenv TNS_ADMIN /home/webuser/instantclient
</pre>
<p>Then you can use the connect identifier <code>conn_str</code> for invoking SQL*Plus, or for your OCI connection.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>TNS_ADMIN</code> specifies the directory where the <code>tnsnames.ora</code> file is located and <code>TNS_ADMIN</code> is not the full path of the <code>tnsnames.ora</code> file.</div>
<p>If the preceding <code>tnsnames.ora</code> file is located in an installation based Oracle home, in the /<code>network/server6/home/dba/oracle/network/admin</code> directory, then the <code>ORACLE_HOME</code> environment variable can be set as follows and SQL*Plus can be invoked as previously, with the identifier <code>conn_str</code>:</p>
<pre>
setenv ORACLE_HOME /network/server6/home/dba/oracle
</pre>
<p>Finally, if <code>tnsnames.ora</code> can be located by <code>TNS_ADMIN</code> or <code>ORACLE_HOME</code>, then the <code>TWO_TASK</code> environment variable can be set as follows enabling you to invoke SQL*Plus without a connect identifier:</p>
<pre>
setenv TWO_TASK conn_str
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16169" class="sect2"><a id="sthref76"></a>
<h3 class="sect2">Environment Variables for OCI Instant Client</h3>
<p>The <code>ORACLE_HOME</code> environment variable no longer determines the location of NLS, CORE, and error message files. An OCI-only application should not require <code>ORACLE_HOME</code> to be set. However, if it is set, it does not affect OCI. OCI always obtains its data from the Data Shared Library. If the Data Shared Library is not available, only then is <code>ORACLE_HOME</code> used and a full client installation is assumed. Though <code>ORACLE_HOME</code> is not required to be set, if it is set, then it must be set to a valid operating system path name that identifies a directory.</p>
<p>If Dynamic User callback libraries are to be loaded, then as this guide specifies, the callback package must reside in <code>ORACLE_HOME/lib</code> (<code>ORACLE_HOME\bin</code> on Windows). Set <code>ORACLE_HOME</code> in this case.</p>
<p>Environment variables <code>ORA_NLS10</code> and <code>ORA_NLS_PROFILE33</code> are ignored in the Instant Client mode.</p>
<p>In the Instant Client mode, if the <code>ORA_TZFILE</code> variable is not set, then the larger, default, <code>timezlrg_n.dat</code> file from the Data Shared Library is used. If the smaller <code>timezone_n.dat</code> file is to be used from the Data Shared Library, then set the <code>ORA_TZFILE</code> environment variable to the name of the file without any absolute or relative path names.</p>
<p>On Linux or UNIX:</p>
<pre>
setenv ORA_TZFILE timezone_<span class="italic">n</span>.dat
</pre>
<p>On Windows:</p>
<pre>
set ORA_TZFILE=timezone_<span class="italic">n</span>.dat
</pre>
<p>In these examples, <span class="italic">n</span> is the time zone data file version number.</p>
<p>To determine the versions of small and large timezone files that are packaged in the Instant Client Data Shared Library, enter the following command to run the <code>genezi</code> utility:</p>
<pre>
genezi -v
</pre>
<p>If OCI is not operating in the Instant Client mode (because the Data Shared Library is not available), then <code>ORA_TZFILE</code> variable, if set, names a complete path name as it does in previous Oracle Database releases.</p>
<p>If <code>TNSNAMES</code> entries are used, then, as mentioned earlier, <code>TNS_ADMIN</code> directory must contain the <code>TNSNAMES</code> configuration files. If <code>TNS_ADMIN</code> is not set, then the <code>ORACLE_HOME/network/admin</code> directory must contain Oracle Net Services configuration files.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCFHAC"></a>
<div id="LNOCI13309" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Instant<a id="sthref77"></a> Client Light (English)</h3>
<p>The Instant Client Light (English) version of Instant Client further reduces the disk space requirements of the client installation. The size of the library has been reduced by removing error message files for languages other than English and leaving only a few supported character set definitions out of around 250.</p>
<p>This Instant Client Light version is geared toward applications that use either US7ASCII, WE8DEC, WE8ISO8859P1, WE8MSWIN1252, or a Unicode character set. There is no restriction on the <code>LANGUAGE</code> and the <code>TERRITORY</code> fields of the <code>NLS_LANG</code> setting, so the Instant Client Light operates with any language and territory settings. Because only English error messages are provided with the Instant Client Light, error messages generated on the client side, such as Net connection errors, are always reported in English, even if <code>NLS_LANG</code> is set to a language other than <code>AMERICAN</code>. Error messages generated by the database side, such as syntax errors in SQL statements, are in the selected language provided the appropriate translated message files are installed in the Oracle home of the database instance.</p>
<div id="LNOCI16170" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref78"></a>
<h4 class="sect3">Globalization Settings</h4>
<p>Instant Client Light supports the following client character sets:</p>
<p>Single-byte</p>
<ul>
<li>
<p>US7ASCII</p>
</li>
<li>
<p>WE8DEC</p>
</li>
<li>
<p>WE8MSWIN1252</p>
</li>
<li>
<p>WE8ISO8859P1</p>
</li>
</ul>
<p>Unicode</p>
<ul>
<li>
<p>UTF8</p>
</li>
<li>
<p>AL16UTF16</p>
</li>
<li>
<p>AL32UTF8</p>
</li>
</ul>
<p>Instant Client Light can connect to databases having one of these database character sets:</p>
<ul>
<li>
<p>US7ASCII</p>
</li>
<li>
<p>WE8DEC</p>
</li>
<li>
<p>WE8MSWIN1252</p>
</li>
<li>
<p>WE8ISO8859P1</p>
</li>
<li>
<p>WE8EBCDIC37C</p>
</li>
<li>
<p>WE8EBCDIC1047</p>
</li>
<li>
<p>UTF8</p>
</li>
<li>
<p>AL32UTF8</p>
</li>
</ul>
<p>Instant Client Light returns an error if a character set other than those in the preceding lists is used as the client or database character set.</p>
<p>Instant Client Light can also operate with the OCI Environment handles created in the <code>OCI_UTF16</code> mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG014" href="../../server.112/e10729/applocaledata.htm#NLSPG014"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about National Language Support (NLS) settings</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16171" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref79"></a>
<h4 class="sect3">Operation of Instant Client Light</h4>
<p>OCI applications, by default, look for the OCI Data Shared Library, <code>libociei.so</code> (or <code>Oraociei11.dll</code> on Windows) on the <code>LD_LIBRARY_PATH</code> (<code>PATH</code> on Windows) to determine if the application should operate in the Instant Client mode. If this library is not found, then OCI tries to load the Instant Client Light Data Shared Library (see <a href="#CIHGDBFI">Table 1-4</a>), <code>libociicus.so</code> (or <code>Oraociicus11.dll</code> on Windows). If the Instant Client Light library is found, then the application operates in the Instant Client Light mode. Otherwise, a full installation based on Oracle home is assumed.</p>
<div id="LNOCI16172" class="tblformal">
<p class="titleintable"><a id="sthref80"></a><a id="CIHGDBFI"></a>Table 1-4 OCI Instant Client Light Shared Libraries</p>
<table class="cellalignment1016" title="OCI Instant Client Light Shared Libraries" summary="OCI Instant Client shared libraries" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t32">Linux and UNIX</th>
<th class="cellalignment1012" id="r1c2-t32">Description for Linux and UNIX</th>
<th class="cellalignment1012" id="r1c3-t32">Windows</th>
<th class="cellalignment1012" id="r1c4-t32">Description for Windows</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t32" headers="r1c1-t32">
<p><code>libclntsh.so.11.1</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t32 r1c2-t32">
<p>Client Code Library</p>
</td>
<td class="cellalignment1013" headers="r2c1-t32 r1c3-t32">
<p><code>oci.dll</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t32 r1c4-t32">
<p>Forwarding functions that applications link with</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t32" headers="r1c1-t32">
<p><code>libociicus.so</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t32 r1c2-t32">
<p>OCI Instant Client Light Data Shared Library</p>
</td>
<td class="cellalignment1013" headers="r3c1-t32 r1c3-t32">
<p><code>oraociicus11.dll</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t32 r1c4-t32">
<p>Data and code</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t32" headers="r1c1-t32">
<p><code>libnnz11.so</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t32 r1c2-t32">
<p>Security Library</p>
</td>
<td class="cellalignment1013" headers="r4c1-t32 r1c3-t32">
<p><code>orannzsbb11.dll</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t32 r1c4-t32">
<p>Security Library</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t32" headers="r1c1-t32">&nbsp;</td>
<td class="cellalignment1013" headers="r5c1-t32 r1c2-t32">&nbsp;</td>
<td class="cellalignment1013" headers="r5c1-t32 r1c3-t32">
<p><code>oci.sym</code>, <code>oraociicus11.sym</code>, <code>orannzsbb11.sym</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t32 r1c4-t32">
<p>Symbol tables</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<div id="LNOCI16173" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref81"></a>
<h4 class="sect3">Installation of Instant Client Light</h4>
<p>Instant Client Light can be installed in one of these ways:</p>
<ul>
<li>
<p>From OTN</p>
<p>Go to the Instant Client link from the OCI URL (see the bottom of OCI page for the Instant Client link) on the Oracle Technology Network website:</p>
<pre>
<a href="http://www.oracle.com/technology/software/tech/oci/instantclient/">http://www.oracle.com/technology/software/tech/oci/instantclient/</a>
</pre>
<p>For Instant Client Light, download and unzip the <code>basiclite.zip</code> package in to an empty <code>instantclient_11_2</code> directory.</p>
</li>
<li>
<p>From Client Admin Install</p>
<p>From the <code>ORACLE_HOME/instantclient/light</code> subdirectory, copy <code>libociicus.so</code> (or <code>Oraociicus11.dll</code> on Windows). The Instant Client directory on the <code>LD_LIBRARY_PATH</code> (<code>PATH</code> on Windows) should contain the Instant Client Light Data Shared Library, <code>libociicus.so</code> (<code>Oraociicus11.dll</code> on Windows), instead of the larger OCI Instant Client Data Shared Library, <code>libociei.so</code> (<code>Oraociei11.dll</code> on Windows).</p>
</li>
<li>
<p>From Oracle Universal Installer</p>
<p>When you select the Instant Client option from the Oracle Universal Installer, <code>libociei.so</code> (or <code>Oraociei11.dll</code> on Windows) is installed in the base directory of the installation, which means these files are placed on the <code>LD_LIBRARY_PATH</code> (<code>PATH</code> on Widows).</p>
<p>The Instant Light Client Data Shared Library, <code>libociicus.so</code> (or <code>Oraociicus11.dll</code> on Windows), is installed in the <code>light</code> subdirectory of the base directory and not enabled by default. Therefore, to operate in the Instant Client Light mode, the OCI Data Shared Library, <code>libociei.so</code> (or <code>Oraociei11.dll</code> on Windows) must be deleted or renamed and the Instant Client Light library must be copied from the <code>light</code> subdirectory to the base directory of the installation.</p>
<p>For example, if Oracle Universal Installer has installed the Instant Client in <code>my_oraic_11_2</code> directory on the <code>LD_LIBRARY_PATH</code> (<code>PATH</code> on Windows), then use the following command sequence to operate in the Instant Client Light mode:</p>
<pre>
cd my_oraic_11_2
rm libociei.so
mv light/libociicus.so .
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
To ensure that no incompatible binaries exist in the installation, always copy and install the Instant Client files in to an empty directory.</div>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDCIGDF"></a>
<div id="LNOCI16174" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref82"></a>SDK for Instant Client</h3>
<p>The SDK can be downloaded from the Instant Client link on the OCI URL (see the bottom of OCI page for the Instant Client link) on the Oracle Technology Network website:</p>
<pre>
<a href="http://www.oracle.com/technology/tech/oci/instantclient/">http://www.oracle.com/technology/tech/oci/instantclient/</a>
</pre>
<ul>
<li>
<p>The Instant Client SDK package has both C and C++ header files and a makefile for developing OCI and OCCI applications while in an Instant Client environment. Developed applications can be deployed in any client environment.</p>
</li>
<li>
<p>The SDK contains C and C++ demonstration programs.</p>
</li>
<li>
<p>On Windows, libraries required to link the OCI or OCCI applications are also included. <code>Make.bat</code> is provided to build the demos.</p>
</li>
<li>
<p>On UNIX or Linux, the makefile <code>demo.mk</code> is provided to build the demos. The <code>instantclient_11_2</code> directory must be on the <code>LD_LIBRARY_PATH</code> before linking the application. The OCI and OCCI programs require the presence of <code>libclntsh.so</code> and <code>libocci.so</code> symbolic links in the <code>instantclient_11_2</code> directory. <code>demo.mk</code> creates these before the link step. These symbolic links can also be created in a shell:</p>
<pre>
cd instantclient_11_2
ln -s libclntsh.so.11.1 libclntsh.so
ln -s libocci.so.11.1 libocci.so
</pre></li>
<li>
<p>The SDK also contains the Object Type Translator (OTT) utility and its classes to generate the application header files.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="whatsnew.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci02bas.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
