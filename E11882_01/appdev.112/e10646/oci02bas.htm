<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OCI Programming Basics</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:22Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci01int.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci03typ.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/79</span> <!-- End Header -->
<div id="LNOCI020" class="chapter"><a id="g478150"></a> <a id="i460946"></a>
<h1 class="chapter"><span class="secnum">2</span> OCI Programming Basics</h1>
<p>This chapter introduces concepts and procedures involved in programming with OCI. After reading this chapter, you should have most of the tools necessary to understand and create a basic OCI application.</p>
<p>This chapter includes the following major sections:</p>
<ul>
<li>
<p><a href="#CHDJJCJI">Header File and Makefile Locations</a></p>
</li>
<li>
<p><a href="#i461059">Overview of OCI Program Programming</a></p>
</li>
<li>
<p><a href="#i461103">OCI Data Structures</a></p>
</li>
<li>
<p><a href="#i461853">OCI Programming Steps</a></p>
</li>
<li>
<p><a href="#i462233">Error Handling in OCI</a></p>
</li>
<li>
<p><a href="#i462503">Additional Coding Guidelines</a></p>
</li>
<li>
<p><a href="#i462916">Using PL/SQL in an OCI Program</a></p>
</li>
<li>
<p><a href="#i462957">OCI Globalization Support</a></p>
</li>
</ul>
<p>New users should pay particular attention to the information presented in this chapter, because it forms the basis for the rest of the material presented in this guide. The information in this chapter is supplemented by information in later chapters.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<span class="bold"><a id="sthref83"></a><a id="sthref84"></a><a id="sthref85"></a><a id="sthref86"></a></span>
<ul>
<li>
<p><a class="olink NLSPG010" href="../../server.112/e10729/ch10oci.htm#NLSPG010"><span class="italic">Oracle Database Globalization Support Guide</span></a> for a discussion of the OCI functions that apply to a multilingual environment</p>
</li>
<li>
<p><a class="olink ADDCI4934" href="../../appdev.112/e10765/serv_c_java_ref.htm#ADDCI4934"><span class="italic">Oracle Database Data Cartridge Developer's Guide</span></a> for a discussion of the OCI functions that apply to cartridge services</p>
</li>
</ul>
</div>
<a id="CHDJJCJI"></a>
<div id="LNOCI16176" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Header File and Makefile<a id="sthref87"></a> Locations<a id="sthref88"></a><a id="sthref89"></a></h2>
<p>The OCI and OCCI header files that are required for OCI and OCCI client application development on Linux and UNIX operating systems reside in the <code>$ORACLE_HOME/rdbms/public</code> directory. These files are available both with the Oracle Database Server installation, and with the Oracle Database Client Administration and Custom installations.</p>
<p>All demonstration programs and their related header files continue to reside in the <code>$ORACLE_HOME/rdbms/demo</code> directory. These demonstration files are installable only from the Examples media. See <a href="ociabdem.htm#g462659">Appendix B</a> for the names of these programs and their purposes.</p>
<p>Several makefiles are provided in the <code>demo</code> directory. Each makefile contains comments with instructions on its use in building OCI executables. Oracle recommends that you use these demonstration makefiles whenever possible to avoid errors in compilation and linking.</p>
<p>The <code><a id="sthref90"></a>demo_rdbms.mk</code> file in the <code>demo</code> directory and is an example makefile. See the comments on how to build the demonstration OCI programs. The <code>demo_rdbms.mk</code> file includes the <code>$ORACLE_HOME/rdbms/public</code> directory. Ensure that your own customized makefiles have the <code>$ORACLE_HOME/rdbms/public</code> directory in the <code>INCLUDE</code> path.</p>
<p>The <code>ociucb.mk</code> file is a makefile in <code>demo</code> for building a callback shared library.</p>
</div>
<!-- class="sect1" -->
<a id="i461059"></a>
<div id="LNOCI16178" class="sect1">
<h2 class="sect1">Overview of OCI Program Programming<a id="sthref91"></a></h2>
<p><a id="sthref92"></a>The general goal of an OCI application is to operate on behalf of multiple users. In an n-tiered configuration, multiple users are sending HTTP requests to the client application. The client application may need to perform some data operations that include exchanging data and performing data processing.</p>
<p>OCI uses the following basic program flow:</p>
<a id="i461065"></a>
<ol>
<li>
<p>Create the environment by initializing the OCI programming environment and threads.</p>
</li>
<li>
<p>Allocate necessary handles, and establish server connections and user sessions.</p>
</li>
<li>
<p>Exchange data with the database server by executing SQL statements on the server, and perform necessary application data processing.</p>
</li>
<li>
<p>Execute prepared statements, or prepare a new statement for execution.</p>
</li>
<li>
<p>Terminate user sessions and disconnect from server connections.</p>
</li>
<li>
<p>Free handles and data structures.</p>
</li>
</ol>
<p><a href="#i461082">Figure 2-1</a> illustrates the flow of steps in an OCI application. <a href="#i461853">"OCI Programming Steps"</a> describes each step in more detail.</p>
<div id="LNOCI16179" class="figure">
<p class="titleinfigure"><a id="i461082"></a>Figure 2-1 Basic OCI Program Flow</p>
<img width="122" height="285" src="img/lnoci017.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref93" href="img_text/lnoci017.htm">Description of "Figure 2-1 Basic OCI Program Flow"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The diagram and the list of steps present a simple generalization of OCI programming steps. Variations are possible, depending on the functionality of the program. OCI applications that include more sophisticated functionality, such as managing multiple sessions and transactions and using objects, require additional steps.</p>
<p>All OCI function calls are executed in the context of an environment. There can be multiple environments within an OCI process. If an environment requires any process-level initialization, then it is performed automatically.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
It is possible to have multiple active connections and statements in an OCI application.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci11obj.htm#i450885">Chapter 11</a> through <a href="oci15ott.htm#g455369">Chapter 15</a> for information about accessing and manipulating objects</div>
</div>
<!-- class="sect1" -->
<a id="i461103"></a>
<div id="LNOCI16180" class="sect1">
<h2 class="sect1">OCI Data Structures<a id="sthref94"></a></h2>
<p><span class="italic">Handles</span> and <span class="italic">descriptors</span> are opaque data structures that are defined in OCI applications. They can be allocated directly, through specific allocate calls, or they can be implicitly allocated by OCI functions.</p>
<div class="infobox-note">
<p class="notep1">7.x Upgrade Note:</p>
Programmers who have previously written 7.x OCI applications must become familiar with these data structures that are used by most OCI calls.</div>
<p>Handles and descriptors store information pertaining to data, connections, or application behavior. Handles are defined in more detail in the next section. Descriptors are discussed in <a href="#i463442">"OCI Descriptors"</a>.</p>
<a id="i461125"></a>
<div id="LNOCI16181" class="sect2">
<h3 class="sect2"><a id="sthref95"></a>Handles</h3>
<p><a id="sthref96"></a>Almost every OCI call includes in its parameter list one or more handles. A handle is an opaque pointer to a storage area allocated by the OCI library. You use a handle to store context or connection information, (for example, an environment or service context handle), or it may store information about OCI functions or data (for example, an error or describe handle). Handles can make programming easier, because the library, rather than the application, maintains this data.</p>
<p>Most OCI applications must access the information stored in handles. The get and set attribute OCI calls, <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> and <a href="oci16rel002.htm#i443804">OCIAttrSet()</a>, access and set this information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i461538">"Handle Attributes"</a></div>
<p><a id="sthref97"></a><a id="sthref98"></a><a href="#g466063">Table 2-1</a> lists the handles defined for OCI. For each handle type, the C data type and handle type constant used to identify the handle type<a id="sthref99"></a><a id="sthref100"></a> in OCI calls are listed.</p>
<div id="LNOCI16182" class="tblformalwide">
<p class="titleintable"><a id="sthref101"></a><a id="g466063"></a>Table 2-1 OCI Handle Types</p>
<table class="cellalignment1011" title="OCI Handle Types " summary="OCI handle ypes" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t7">Description</th>
<th class="cellalignment1012" id="r1c2-t7">C Data Type</th>
<th class="cellalignment1012" id="r1c3-t7">Handle Type Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t7" headers="r1c1-t7">
<p>OCI environment handle</p>
</td>
<td class="cellalignment1013" headers="r2c1-t7 r1c2-t7">
<p><code>OCIEnv</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t7 r1c3-t7">
<p><a id="sthref102"></a><code>OCI_HTYPE_ENV</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t7" headers="r1c1-t7">
<p>OCI error handle</p>
</td>
<td class="cellalignment1013" headers="r3c1-t7 r1c2-t7">
<p><code>OCIError</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t7 r1c3-t7">
<p><a id="sthref103"></a><code>OCI_HTYPE_ERROR</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t7" headers="r1c1-t7">
<p>OCI service context handle</p>
</td>
<td class="cellalignment1013" headers="r4c1-t7 r1c2-t7">
<p><code>OCISvcCtx</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t7 r1c3-t7">
<p><a id="sthref104"></a><code>OCI_HTYPE_SVCCTX</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t7" headers="r1c1-t7">
<p>OCI statement handle</p>
</td>
<td class="cellalignment1013" headers="r5c1-t7 r1c2-t7">
<p><code>OCIStmt</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t7 r1c3-t7">
<p><a id="sthref105"></a><code>OCI_HTYPE_STMT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t7" headers="r1c1-t7">
<p>OCI bind handle</p>
</td>
<td class="cellalignment1013" headers="r6c1-t7 r1c2-t7">
<p><code>OCIBind</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t7 r1c3-t7">
<p><a id="sthref106"></a><code>OCI_HTYPE_BIND</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t7" headers="r1c1-t7">
<p>OCI define handle</p>
</td>
<td class="cellalignment1013" headers="r7c1-t7 r1c2-t7">
<p><code>OCIDefine</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t7 r1c3-t7">
<p><a id="sthref107"></a><code>OCI_HTYPE_DEFINE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t7" headers="r1c1-t7">
<p>OCI describe handle</p>
</td>
<td class="cellalignment1013" headers="r8c1-t7 r1c2-t7">
<p><code>OCIDescribe</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t7 r1c3-t7">
<p><a id="sthref108"></a><code>OCI_HTYPE_DESCRIBE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t7" headers="r1c1-t7">
<p>OCI server handle</p>
</td>
<td class="cellalignment1013" headers="r9c1-t7 r1c2-t7">
<p><code>OCIServer</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t7 r1c3-t7">
<p><a id="sthref109"></a><code>OCI_HTYPE_SERVER</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t7" headers="r1c1-t7">
<p>OCI user session handle</p>
</td>
<td class="cellalignment1013" headers="r10c1-t7 r1c2-t7">
<p><code>OCISession</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t7 r1c3-t7">
<p><a id="sthref110"></a><code>OCI_HTYPE_SESSION</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t7" headers="r1c1-t7">
<p>OCI authentication information handle</p>
</td>
<td class="cellalignment1013" headers="r11c1-t7 r1c2-t7">
<p><code>OCIAuthInfo</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t7 r1c3-t7">
<p><a id="sthref111"></a><a id="sthref112"></a><code>OCI_HTYPE_AUTHINFO</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t7" headers="r1c1-t7">
<p>OCI connection pool handle</p>
</td>
<td class="cellalignment1013" headers="r12c1-t7 r1c2-t7">
<p><code>OCICPool</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t7 r1c3-t7">
<p><a id="sthref113"></a><code>OCI_HTYPE_CPOOL</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t7" headers="r1c1-t7">
<p>OCI session pool handle</p>
</td>
<td class="cellalignment1013" headers="r13c1-t7 r1c2-t7">
<p><code>OCISPool</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t7 r1c3-t7">
<p><a id="sthref114"></a><code>OCI_HTYPE_SPOOL</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t7" headers="r1c1-t7">
<p>OCI transaction handle</p>
</td>
<td class="cellalignment1013" headers="r14c1-t7 r1c2-t7">
<p><code>OCITrans</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t7 r1c3-t7">
<p><a id="sthref115"></a><code>OCI_HTYPE_TRANS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t7" headers="r1c1-t7">
<p>OCI complex object retrieval (COR) handle</p>
</td>
<td class="cellalignment1013" headers="r15c1-t7 r1c2-t7">
<p><code>OCIComplexObject</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t7 r1c3-t7">
<p><a id="sthref116"></a><code>OCI_HTYPE_COMPLEXOBJECT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t7" headers="r1c1-t7">
<p>OCI thread handle</p>
</td>
<td class="cellalignment1013" headers="r16c1-t7 r1c2-t7">
<p><code>OCIThreadHandle</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t7 r1c3-t7">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t7" headers="r1c1-t7">
<p>OCI subscription handle</p>
</td>
<td class="cellalignment1013" headers="r17c1-t7 r1c2-t7">
<p><code>OCISubscription</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t7 r1c3-t7">
<p><a id="sthref117"></a><code>OCI_HTYPE_SUBSCRIPTION</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t7" headers="r1c1-t7">
<p>OCI direct path context handle</p>
</td>
<td class="cellalignment1013" headers="r18c1-t7 r1c2-t7">
<p><code>OCIDirPathCtx</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t7 r1c3-t7">
<p><a id="sthref118"></a><code>OCI_HTYPE_DIRPATH_CTX</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t7" headers="r1c1-t7">
<p>OCI direct path function context handle</p>
</td>
<td class="cellalignment1013" headers="r19c1-t7 r1c2-t7">
<p><code>OCIDirPathFuncCtx</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t7 r1c3-t7">
<p><a id="sthref119"></a><code>OCI_HTYPE_DIRPATH_FN_CTX</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t7" headers="r1c1-t7">
<p>OCI direct path column array handle</p>
</td>
<td class="cellalignment1013" headers="r20c1-t7 r1c2-t7">
<p><code>OCIDirPathColArray</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t7 r1c3-t7">
<p><a id="sthref120"></a><code>OCI_HTYPE_DIRPATH_COLUMN_ARRAY</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t7" headers="r1c1-t7">
<p>OCI direct path stream handle</p>
</td>
<td class="cellalignment1013" headers="r21c1-t7 r1c2-t7">
<p><code>OCIDirPathStream</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t7 r1c3-t7">
<p><a id="sthref121"></a><code>OCI_HTYPE_DIRPATH_STREAM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t7" headers="r1c1-t7">
<p>OCI process handle</p>
</td>
<td class="cellalignment1013" headers="r22c1-t7 r1c2-t7">
<p><code>OCIProcess</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t7 r1c3-t7">
<p><code>OCI_<a id="sthref122"></a>HTYPE_PROC</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t7" headers="r1c1-t7">
<p>OCI administration handle</p>
</td>
<td class="cellalignment1013" headers="r23c1-t7 r1c2-t7">
<p><code>OCIAdmin</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t7 r1c3-t7">
<p><code><a id="sthref123"></a>OCI_HTYPE_ADMIN</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t7" headers="r1c1-t7">
<p>OCI HA event handle</p>
</td>
<td class="cellalignment1013" headers="r24c1-t7 r1c2-t7">
<p><code>OCIEvent</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t7 r1c3-t7">
<p>Not applicable</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI16183" class="sect3"><a id="sthref124"></a>
<h4 class="sect3">Allocating and Freeing Handles</h4>
<p><a id="sthref125"></a><a id="sthref126"></a>Your application allocates all handles (except the bind, define, and thread handles) for a particular environment handle. You pass the environment handle as one of the parameters to the handle allocation call. The allocated handle is then specific to that particular environment.</p>
<p>The bind and define handles are allocated for a statement handle, and contain information about the statement represented by that handle.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The bind and define handles are implicitly allocated by the OCI library, and do not require user allocation.</div>
<p>The environment handle is allocated and initialized with a call to <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> or to <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, one of which is required by all OCI applications.</p>
<p>All user-allocated handles are initialized using the OCI handle allocation call, <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>.</p>
<p>The types of handles include: session pool handle, direct path context handle, thread handle, COR handle, subscription handle, describe handle, statement handle, service context handle, error handle, server handle, connection pool handle, event handle, and administration handle.</p>
<p>The thread handle is allocated with the <a href="oci17msc005.htm#i492926">OCIThreadHndInit()</a> call.</p>
<p>An application must free all handles when they are no longer needed. The <a href="oci16rel002.htm#i540911">OCIHandleFree()</a> function frees all handles.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<span class="bold"><a id="sthref127"></a></span>When a parent handle is freed, all child handles associated with it are also freed and can no longer be used. For example, when a statement handle is freed, any bind and define handles associated with it are also freed.</div>
<p><a id="sthref128"></a>Handles lessen the need for global variables. Handles also make error reporting easier. An error handle is used to return errors and diagnostic information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The example programs listed in <a href="ociabdem.htm#g462659">Appendix B</a> for sample code demonstrating the allocation and use of OCI handles</div>
</div>
<!-- class="sect3" -->
<a id="CHDEFDHB"></a>
<div id="LNOCI16184" class="sect3">
<h4 class="sect3">Environment Handle<a id="sthref129"></a><a id="sthref130"></a></h4>
<p>The <span class="italic">environment handle</span> defines a context in which all OCI functions are invoked. Each environment handle contains a memory cache that enables fast memory access. All memory allocation under the environment handle is done from this cache. Access to the cache is serialized if multiple threads try to allocate memory under the same environment handle. When multiple threads share a single environment handle, they may block on access to the cache.</p>
<p>The environment handle is passed as the <span class="italic">parent</span> parameter to the <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a> call to allocate all other handle types. Bind and define handles are allocated implicitly.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16185" class="sect3"><a id="sthref131"></a>
<h4 class="sect3">Error Handle<a id="sthref132"></a><a id="sthref133"></a></h4>
<p>The <span class="italic">error handle</span> is passed as a parameter to most OCI calls. The error handle maintains information about errors that occur during an OCI operation. If an error occurs in a call, the error handle can be passed to <code>OCIErrorGet()</code> to obtain additional information about the error that occurred.</p>
<p>Allocating the error handle is one of the first steps in an OCI application because most OCI calls require an error handle as a parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci08sca.htm#CHDFEGIC">"Implementing Thread Safety"</a></div>
</div>
<!-- class="sect3" -->
<a id="i461358"></a>
<div id="LNOCI16186" class="sect3">
<h4 class="sect3">Service Context Handle and Associated Handles<a id="sthref134"></a><a id="sthref135"></a><a id="sthref136"></a></h4>
<p>A <span class="italic">service context handle</span> defines attributes that determine the operational context for OCI calls to a server. The service context handle contains three handles as its attributes, that represent a server connection, a user session, and a transaction. These attributes are illustrated in <a href="#i461365">Figure 2-2</a>.</p>
<div id="LNOCI16187" class="figure">
<p class="titleinfigure"><a id="i461365"></a>Figure 2-2 Components of a Service Context</p>
<img width="326" height="111" src="img/lnoci019.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref137" href="img_text/lnoci019.htm">Description of "Figure 2-2 Components of a Service Context"</a><br />
<br /></div>
<!-- class="figure" -->
<ul>
<li>
<p><a id="sthref138"></a><a id="sthref139"></a>A <span class="italic">server handle</span> <a id="sthref140"></a>identifies a connection to a database. It translates into a physical connection in a connection-oriented transport mechanism.</p>
</li>
<li>
<p><a id="sthref141"></a><a id="sthref142"></a>A <span class="italic">user session handle<a id="sthref143"></a></span> defines a user's roles and privileges (also known as the user's security domain), and the operational context in which the calls execute.</p>
</li>
<li>
<p><a id="sthref144"></a><a id="sthref145"></a>A <span class="italic">transaction handle</span> defines the transaction in which the SQL operations are performed. The transaction context includes user session state information, including any fetch state and package instantiation.</p>
</li>
</ul>
<p>Breaking the service context handle down in this way provides scalability and enables programmers to create sophisticated multitiered applications and transaction processing (TP) monitors to execute requests on behalf of multiple users on multiple application servers and different transaction contexts.</p>
<p>You must allocate and initialize the service context handle with <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>, <a href="oci16rel001.htm#i556477">OCILogon()</a>, or <a href="oci16rel001.htm#i558312">OCILogon2()</a> before you can use it. The service context handle is allocated explicitly by <code>OCIHandleAlloc()</code>. It can be initialized using <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> with the server, user session, and transaction handle. If the service context handle is allocated implicitly using <code>OCILogon()</code>, it is already initialized.</p>
<p>Applications maintaining only a single user session for each database connection at any time can call <code>OCILogon()</code> to get an initialized service context handle.</p>
<p><a id="sthref146"></a><a id="sthref147"></a>In applications requiring more complex session management, the service context handle must be explicitly allocated, and the server and user session handles must be explicitly set into the service context handle. <a href="oci16rel001.htm#i558225">OCIServerAttach()</a> and <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> calls initialize the server and user session handle respectively.</p>
<p>An application only defines a transaction explicitly if it is a global transaction or there are multiple transactions active for sessions. It works correctly with the implicit transaction created automatically by OCI when the application makes changes to the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci08sca.htm#i421830">"OCI Support for Transactions"</a></p>
</li>
<li>
<p><a href="#i461923">"OCI Environment Initialization"</a>, and <a href="oci08sca.htm#i422789">"Password and Session Management"</a> for more information about establishing a server connection and user session</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16188" class="sect3"><a id="sthref148"></a>
<h4 class="sect3">Statement, Bind, and Define Handles<a id="sthref149"></a><a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a><a id="sthref153"></a><a id="sthref154"></a></h4>
<p>A <span class="italic">statement handle</span> is the context that identifies a SQL or PL/SQL statement and its associated attributes, as shown in <a href="#CHDIBGAG">Figure 2-3</a>.</p>
<div id="LNOCI16189" class="figure">
<p class="titleinfigure"><a id="CHDIBGAG"></a>Figure 2-3 Statement Handles</p>
<img width="212" height="111" src="img/lnoci041.gif" alt="Description of Figure 2-3 follows" /><br />
<a id="sthref155" href="img_text/lnoci041.htm">Description of "Figure 2-3 Statement Handles"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Information about input and output bind variables is stored in <span class="italic">bind handles</span>. The OCI library allocates a bind handle for each placeholder bound with the <a href="oci16rel003.htm#i456223">OCIBindByName()</a> or <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> function. The user must not allocate bind handles. They are implicitly allocated by the bind call.</p>
<p>Fetched data returned by a query (select statement) is converted and retrieved according to the specifications of the <span class="italic">define handles</span>. The OCI library allocates a define handle for each output variable defined with <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a>. The user must not allocate define handles. They are implicitly allocated by the define call.</p>
<p>Bind and define handles are implicitly allocated by the OCI library, and are transparently reused if the bind or define operation is repeated. The actual value of the bind or define handle is needed by the application for the advanced bind or define operations described in <a href="oci05bnd.htm#g453183">Chapter 5</a>. The handles are freed when the statement handle is freed or when a new statement is prepared on the statement handle. Explicitly allocating bind or define handles may lead to memory leaks. Explicitly freeing bind or define handles may cause abnormal program termination.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i421489">"Advanced Bind Operations in OCI"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i421090">"Advanced Define Operations in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16190" class="sect3"><a id="sthref156"></a>
<h4 class="sect3">Describe Handle<a id="sthref157"></a><a id="sthref158"></a></h4>
<p>The <span class="italic">describe handle</span> is used by the OCI describe call, <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>. This call obtains information about schema objects in a database (for example, functions or procedures). The call takes a describe handle as one of its parameters, along with information about the object being described. When the call completes, the describe handle is populated with information about the object. The OCI application can then obtain describe information through the attributes of the parameter descriptors.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci06des.htm#g464132">Chapter 6</a> for more information about using the <code>OCIDescribeAny()</code> function</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16191" class="sect3"><a id="sthref159"></a>
<h4 class="sect3">Complex Object Retrieval Handle<a id="sthref160"></a></h4>
<p>The <span class="italic">complex object retrieval (COR) handle</span> is used<a id="sthref161"></a> by some OCI applications that work with objects in an Oracle database. This handle contains <span class="italic">COR descriptors,</span> which provide instructions for retrieving objects referenced by another object.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also :</p>
<a href="oci11obj.htm#i440830">"Complex Object Retrieval"</a></div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16192" class="sect3"><a id="sthref162"></a>
<h4 class="sect3">Thread Handle</h4>
<p>For information about the thread handle<a id="sthref163"></a>, which is used in multithreaded applications, see <a href="oci08sca.htm#i434459">"OCIThread Package"</a>.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16193" class="sect3"><a id="sthref164"></a>
<h4 class="sect3">Subscription Handle<a id="sthref165"></a><a id="sthref166"></a></h4>
<p>The subscription handle is used by an OCI client application that registers and subscribes to receive notifications of database events or events in the AQ namespace. The subscription handle encapsulates all information related to a registration from a client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i435757">"Publish-Subscribe Notification in OCI"</a></div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16194" class="sect3"><a id="sthref167"></a>
<h4 class="sect3">Direct Path Handles<a id="sthref168"></a><a id="sthref169"></a></h4>
<p>The direct path handles are necessary for an OCI application that uses the direct path load engine in the Oracle database. The direct path load interface enables the application to access the direct block formatter of the Oracle database. <a href="#CHDIHGED">Figure 2-4</a> shows the different kinds of direct path handles.</p>
<div id="LNOCI16195" class="figure">
<p class="titleinfigure"><a id="CHDIHGED"></a>Figure 2-4 Direct Path Handles</p>
<img width="314" height="122" src="img/lnoci042.gif" alt="Description of Figure 2-4 follows" /><br />
<a id="sthref170" href="img_text/lnoci042.htm">Description of "Figure 2-4 Direct Path Handles"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci13obn.htm#i426339">"Direct Path Loading Overview"</a></p>
</li>
<li>
<p><a href="ociaahan.htm#i444702">"Direct Path Loading Handle Attributes"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16196" class="sect3"><a id="sthref171"></a>
<h4 class="sect3">Connection Pool Handle</h4>
<p>The <span class="italic">connection pool handle</span> is <a id="sthref172"></a><a id="sthref173"></a>used for applications that pool physical connections into virtual connections by calling specific OCI functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i452584">"Connection Pooling in OCI"</a></div>
</div>
<!-- class="sect3" -->
<a id="i461538"></a>
<div id="LNOCI16197" class="sect3">
<h4 class="sect3">Handle Attributes<a id="sthref174"></a><a id="sthref175"></a></h4>
<p>All OCI handles have <span class="italic">attributes</span> that represent data stored in that handle. You can read handle attributes by using the attribute get call, <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a>, and you can change them with the attribute set call, <a href="oci16rel002.htm#i443804">OCIAttrSet()</a>.</p>
<p>For example, the statements in <a href="#CIHCFIFH">Example 2-1</a> set the user name in the session handle by writing to the <code>OCI_ATTR_USERNAME</code> attribute:</p>
<div id="LNOCI18113" class="example">
<p class="titleinexample"><a id="CIHCFIFH"></a>Example 2-1 Using the OCI_ATTR_USERNAME Attribute to Set the User Name in the Session Handle</p>
<pre>
text username[] = "hr";
err = OCIAttrSet ((void *) mysessp, OCI_HTYPE_SESSION, (void *)username,
      (ub4) strlen((char *)username), OCI_ATTR_USERNAME, (OCIError *) myerrhp);
</pre></div>
<!-- class="example" -->
<p>Some OCI functions require that particular handle attributes be set before the function is called. For example, when <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> is called to establish a user's login session, the user name and password must be set in the user session handle before the call is made.</p>
<p>Other OCI functions provide useful return data in handle attributes after the function completes. For example, when <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> is called to execute a SQL query, describe information relating to the select-list items is returned in the statement handle, as shown in <a href="#CIHGFEBG">Example 2-2</a>.</p>
<div id="LNOCI18114" class="example">
<p class="titleinexample"><a id="CIHGFEBG"></a>Example 2-2 Returning Describe Information in the Statement Handle Relating to Select-List Items</p>
<pre>
ub4 parmcnt;
/* get the number of columns in the select list */
err = OCIAttrGet ((void  *)stmhp, (ub4)OCI_HTYPE_STMT, (void  *)
         &amp;parmcnt, (ub4 *) 0, (ub4)OCI_ATTR_PARAM_COUNT, errhp);
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The description of <a href="oci16rel002.htm#i493114">"OCIArrayDescriptorAlloc()"</a> for an example showing how to allocate a large number of descriptors</p>
</li>
<li>
<p><a href="ociaahan.htm#i442199">Appendix A, "Handle and Descriptor Attributes"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i463442"></a>
<div id="LNOCI16198" class="sect3">
<h4 class="sect3">OCI Descriptors<a id="sthref176"></a><a id="sthref177"></a></h4>
<p>OCI <span class="italic">descriptors</span> and <span class="italic">locators</span> are opaque data structures that maintain data-specific information. <a href="#g466207">Table 2-2</a> lists them, along with their C data type, and the OCI type constant that allocates a descriptor of that type in a call to <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>. The <a href="oci16rel002.htm#i540811">OCIDescriptorFree()</a> function frees descriptors and locators. See also the functions <a href="oci16rel002.htm#i493114">"OCIArrayDescriptorAlloc()"</a> and <a href="oci16rel002.htm#CHDDJFFE">"OCIArrayDescriptorFree()"</a>.</p>
<div id="LNOCI16199" class="tblformalwide">
<p class="titleintable"><a id="sthref178"></a><a id="g466207"></a>Table 2-2 Descriptor Types</p>
<table class="cellalignment1011" title="Descriptor Types " summary="Descriptor types" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t20">Description</th>
<th class="cellalignment1012" id="r1c2-t20">C Data Type</th>
<th class="cellalignment1012" id="r1c3-t20">OCI Type Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t20" headers="r1c1-t20">
<p>Snapshot descriptor<a id="sthref179"></a><a id="sthref180"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c2-t20">
<p><code>OCISnapshot</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c3-t20">
<p><a id="sthref181"></a><code>OCI_DTYPE_SNAP</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t20" headers="r1c1-t20">
<p>Result set descriptor<a id="sthref182"></a><a id="sthref183"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c2-t20">
<p><code>OCIResult</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c3-t20">
<p><code><a id="sthref184"></a>OCI_DTYPE_RSET</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t20" headers="r1c1-t20">
<p>LOB data type locator<a id="sthref185"></a><a id="sthref186"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c2-t20">
<p><code>OCILobLocator</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c3-t20">
<p><a id="sthref187"></a><code>OCI_DTYPE_LOB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t20" headers="r1c1-t20">
<p><code>BFILE</code> data type locator<a id="sthref188"></a><a id="sthref189"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c2-t20">
<p><code>OCILobLocator</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c3-t20">
<p><a id="sthref190"></a><code>OCI_DTYPE_FILE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t20" headers="r1c1-t20">
<p>Read-only parameter descriptor<a id="sthref191"></a><a id="sthref192"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c2-t20">
<p><code>OCIParam</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c3-t20">
<p><a id="sthref193"></a><code>OCI_DTYPE_PARAM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t20" headers="r1c1-t20">
<p><code>ROWID</code> descriptor<a id="sthref194"></a><a id="sthref195"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c2-t20">
<p><code>OCIRowid</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c3-t20">
<p><a id="sthref196"></a><code>OCI_DTYPE_ROWID</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t20" headers="r1c1-t20">
<p><code>ANSI DATE</code> descriptor<a id="sthref197"></a><a id="sthref198"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c2-t20">
<p><code>OCIDateTime</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c3-t20">
<p><a id="sthref199"></a><code>OCI_DTYPE_DATE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t20" headers="r1c1-t20">
<p><code>TIMESTAMP</code> descriptor<a id="sthref200"></a><a id="sthref201"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t20 r1c2-t20">
<p><code>OCIDateTime</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t20 r1c3-t20">
<p><a id="sthref202"></a><code>OCI_DTYPE_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t20" headers="r1c1-t20">
<p><code>TIMESTAMP WITH TIME ZONE</code> descriptor<a id="sthref203"></a><a id="sthref204"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t20 r1c2-t20">
<p><code>OCIDateTime</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t20 r1c3-t20">
<p><a id="sthref205"></a><code>OCI_DTYPE_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t20" headers="r1c1-t20">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code> descriptor<a id="sthref206"></a><a id="sthref207"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t20 r1c2-t20">
<p><code>OCIDateTime</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t20 r1c3-t20">
<p><a id="sthref208"></a><code>OCI_DTYPE_TIMESTAMP_LTZ</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t20" headers="r1c1-t20">
<p><code>INTERVAL YEAR TO MONTH</code> descriptor<a id="sthref209"></a><a id="sthref210"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t20 r1c2-t20">
<p><code>OCIInterval</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t20 r1c3-t20">
<p><a id="sthref211"></a><code>OCI_DTYPE_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t20" headers="r1c1-t20">
<p><code>INTERVAL DAY TO SECOND</code> descriptor<a id="sthref212"></a><a id="sthref213"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t20 r1c2-t20">
<p><code>OCIInterval</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t20 r1c3-t20">
<p><a id="sthref214"></a><code>OCI_DTYPE_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t20" headers="r1c1-t20">
<p>User callback descriptor<a id="sthref215"></a><a id="sthref216"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t20 r1c2-t20">
<p><code>OCIUcb</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t20 r1c3-t20">
<p><code><a id="sthref217"></a>OCI_DTYPE_UCB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t20" headers="r1c1-t20">
<p><a id="sthref218"></a><a id="sthref219"></a>Distinguished names of the database servers in a registration request</p>
</td>
<td class="cellalignment1013" headers="r15c1-t20 r1c2-t20">
<p><code>OCIServerDNs</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t20 r1c3-t20">
<p><a id="sthref220"></a><code>OCI_DTYPE_SRVDN</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t20" headers="r1c1-t20">
<p>Complex object descriptor<a id="sthref221"></a><a id="sthref222"></a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t20 r1c2-t20">
<p><code>OCIComplexObjectComp</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t20 r1c3-t20">
<p><a id="sthref223"></a><code>OCI_DTYPE_COMPLEXOBJECTCOMP</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t20" headers="r1c1-t20">
<p><a id="sthref224"></a><a id="sthref225"></a>Advanced queuing enqueue options</p>
</td>
<td class="cellalignment1013" headers="r17c1-t20 r1c2-t20">
<p><code>OCIAQEnqOptions</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t20 r1c3-t20">
<p><a id="sthref226"></a><code>OCI_DTYPE_AQENQ_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t20" headers="r1c1-t20">
<p><a id="sthref227"></a><a id="sthref228"></a>Advanced queuing dequeue options</p>
</td>
<td class="cellalignment1013" headers="r18c1-t20 r1c2-t20">
<p><code>OCIAQDeqOptions</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t20 r1c3-t20">
<p><a id="sthref229"></a><code>OCI_DTYPE_AQDEQ_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t20" headers="r1c1-t20">
<p><a id="sthref230"></a><a id="sthref231"></a>Advanced queuing message properties</p>
</td>
<td class="cellalignment1013" headers="r19c1-t20 r1c2-t20">
<p><code>OCIAQMsgProperties</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t20 r1c3-t20">
<p><a id="sthref232"></a><code>OCI_DTYPE_AQMSG_PROPERTIES</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t20" headers="r1c1-t20">
<p><a id="sthref233"></a><a id="sthref234"></a>Advanced queuing agent</p>
</td>
<td class="cellalignment1013" headers="r20c1-t20 r1c2-t20">
<p><code>OCIAQAgent</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t20 r1c3-t20">
<p><a id="sthref235"></a><code>OCI_DTYPE_AQAGENT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t20" headers="r1c1-t20">
<p><a id="sthref236"></a><a id="sthref237"></a>Advanced queuing notification</p>
</td>
<td class="cellalignment1013" headers="r21c1-t20 r1c2-t20">
<p><code>OCIAQNotify</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t20 r1c3-t20">
<p><a id="sthref238"></a><code>OCI_DTYPE_AQNFY</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t20" headers="r1c1-t20">
<p><a id="sthref239"></a><a id="sthref240"></a>Advanced queuing listen options</p>
</td>
<td class="cellalignment1013" headers="r22c1-t20 r1c2-t20">
<p><code>OCIAQListenOpts</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t20 r1c3-t20">
<p><code><a id="sthref241"></a>OCI_DTYPE_AQLIS_OPTIONS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t20" headers="r1c1-t20">
<p><a id="sthref242"></a><a id="sthref243"></a>Advanced queuing message properties</p>
</td>
<td class="cellalignment1013" headers="r23c1-t20 r1c2-t20">
<p><code>OCIAQLisMsgProps</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t20 r1c3-t20">
<p><code><a id="sthref244"></a>OCI_DTYPE_AQLIS_MSG_PROPERTIES</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t20" headers="r1c1-t20">
<p><a id="sthref245"></a><a id="sthref246"></a>Change notification</p>
</td>
<td class="cellalignment1013" headers="r24c1-t20 r1c2-t20">
<p>None</p>
</td>
<td class="cellalignment1013" headers="r24c1-t20 r1c3-t20">
<p><a id="sthref247"></a><code>OCI_DTYPE_CHDES</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t20" headers="r1c1-t20">
<p><a id="sthref248"></a><a id="sthref249"></a>Table change</p>
</td>
<td class="cellalignment1013" headers="r25c1-t20 r1c2-t20">
<p>None</p>
</td>
<td class="cellalignment1013" headers="r25c1-t20 r1c3-t20">
<p><code><a id="sthref250"></a>OCI_DTYPE_TABLE_CHDES</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t20" headers="r1c1-t20">
<p><a id="sthref251"></a><a id="sthref252"></a>Row change</p>
</td>
<td class="cellalignment1013" headers="r26c1-t20 r1c2-t20">
<p>None</p>
</td>
<td class="cellalignment1013" headers="r26c1-t20 r1c3-t20">
<p><code><a id="sthref253"></a>OCI_DTYPE_ROW_CHDES</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Although there is a single C type for <code>OCILobLocator</code>, this locator is allocated with a different OCI type constant for internal and external LOBs. <a href="#CIHFFAEH">"LOB and BFILE Locators"</a> discusses this difference.</div>
<p>The following list describes the main purpose of each descriptor type. The sections that follow describe each descriptor type in more detail:</p>
<ul>
<li>
<p><code>OCISnapshot</code> - Used in statement execution</p>
</li>
<li>
<p><code>OCILobLocator</code> - Used for LOB (<code>OCI_DTYPE_LOB</code>) or <code>BFILE</code> (<code>OCI_DTYPE_FILE</code>) calls</p>
</li>
<li>
<p><code>OCIParam</code> - Used in describe calls</p>
</li>
<li>
<p><code>OCIRowid</code> - Used for binding or defining <code>ROWID</code> values</p>
</li>
<li>
<p><code>OCIDateTime</code> and <code>OCIInterval</code> - Used for datetime and interval data types</p>
</li>
<li>
<p><code>OCIComplexObjectComp</code> - Used for complex object retrieval</p>
</li>
<li>
<p><code>OCIAQEnqOptions</code>, <code>OCIAQDeqOptions</code>, <code>OCIAQMsgProperties</code>, <code>OCIAQAgent</code> - Used for Advanced Queuing</p>
</li>
<li>
<p><code>OCIAQNotify</code> - Used for publish-subscribe notification</p>
</li>
<li>
<p><code>OCIServerDNs</code> - Used for LDAP-based publish-subscribe notification</p>
</li>
</ul>
<div id="LNOCI16200" class="sect4"><a id="sthref254"></a>
<h5 class="sect4"><a id="sthref255"></a><a id="sthref256"></a>Snapshot Descriptor</h5>
<p>The <span class="italic">snapshot descriptor</span> is an optional parameter to the execute call, <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> . It indicates that a query is being executed against a database snapshot that represents the state of a database at a particular time.</p>
<p>Allocate a snapshot descriptor with a call to <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> by passing <code>OCI_DTYPE_SNAP</code> as the <code>type</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci04sql.htm#i430413">"Execution Snapshots"</a> for more information about <code>OCIStmtExecute()</code> and database snapshots</div>
</div>
<!-- class="sect4" -->
<a id="CIHFFAEH"></a>
<div id="LNOCI16201" class="sect4">
<h5 class="sect4">LOB and BFILE Locators<a id="sthref257"></a><a id="sthref258"></a><a id="sthref259"></a></h5>
<p>A large object (LOB) is an Oracle data type that can hold binary large object (<code>BLOB</code>) or character large object (<code>CLOB</code>) data. In the database, an opaque data structure called a <span class="italic">LOB locator</span> is stored in a LOB column of a database row, or in the place of a LOB attribute of an object. The locator serves as a pointer to the actual LOB value, which is stored in a separate location.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Depending on your application, you may or may not want to use LOB locators. You can use the data interface for LOBs, which does not require LOB locators. In this interface, you can bind or define character data for <code>CLOB</code> columns or <code>RAW</code> data for <code>BLOB</code> columns.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i440236">"Binding LOB Data"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i440237">"Defining LOB Data"</a></p>
</li>
</ul>
</div>
<p>The OCI LOB locator is used to perform OCI operations against a LOB (<code>BLOB</code> or <code>CLOB</code>) or FILE (<code>BFILE</code>). <code>OCILobXXX</code> functions take a LOB locator parameter instead of the LOB value. OCI LOB functions do not use actual LOB data as parameters. They use the LOB locators as parameters and operate on the LOB data referenced by them.</p>
<p>The LOB locator is allocated with a call to <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> by passing <code>OCI_DTYPE_LOB</code> as the <code>type</code> parameter for <code>BLOB</code>s or <code>CLOB</code>s, and <code>OCI_DTYPE_FILE</code> for <code>BFILE</code>s.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
The two LOB locator types are <span class="italic">not</span> interchangeable. When binding or defining a <code>BLOB</code> or <code>CLOB</code>, the application must take care that the locator is properly allocated by using <code>OCI_DTYPE_LOB</code>. Similarly, when binding or defining a <code>BFILE</code>, the application must be sure to allocate the locator using <code>OCI_DTYPE_FILE</code>.</div>
<p>An OCI application can retrieve a LOB locator from the Oracle database by issuing a SQL statement containing a LOB column or attribute as an element in the select list. In this case, the application would first allocate the LOB locator and then use it to define an output variable. Similarly, a LOB locator can be used as part of a bind operation to create an association between a LOB and a placeholder in a SQL statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci07lob.htm#g452677">Chapter 7, "LOB and BFILE Operations"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i440236">"Binding LOB Data"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i440237">"Defining LOB Data"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<div id="LNOCI16202" class="sect4"><a id="sthref260"></a>
<h5 class="sect4">Parameter Descriptor<a id="sthref261"></a><a id="sthref262"></a></h5>
<p>OCI applications use <span class="italic">parameter descriptors</span> to obtain information about select-list columns or schema objects. This information is obtained through a describe operation.</p>
<p>The parameter descriptor is the only descriptor type that is <span class="italic">not</span> allocated using <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>. You can obtain it only as an attribute of a describe handle, statement handle, or through a complex object retrieval handle by specifying the position of the parameter using an <a href="oci16rel002.htm#i540956">OCIParamGet()</a> call.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci06des.htm#g464132">Chapter 6</a> and <a href="oci04sql.htm#i441217">"Describing Select-List Items"</a> for more information about obtaining and using parameter descriptors</div>
</div>
<!-- class="sect4" -->
<div id="LNOCI16203" class="sect4"><a id="sthref263"></a>
<h5 class="sect4">ROWID Descriptor<a id="sthref264"></a><a id="sthref265"></a><a id="sthref266"></a></h5>
<p>The <code>ROWID</code> descriptor, <code>OCIRowid</code>, is used by applications that must retrieve and use Oracle ROWIDs. To work with a <code>ROWID</code> an application can define a <code>ROWID</code> descriptor for a rowid position in a SQL select list, and retrieve a <code>ROWID</code> into the descriptor. This same descriptor can later be bound to an input variable in an <code>INSERT</code> statement or <code>WHERE</code> clause.</p>
<p><code>ROWID</code>s are also redirected into descriptors using <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> on the statement handle following an execute operation.</p>
</div>
<!-- class="sect4" -->
<div id="LNOCI16204" class="sect4"><a id="sthref267"></a>
<h5 class="sect4">Date, Datetime, and Interval Descriptors</h5>
<p>The date, <a id="sthref268"></a><a id="sthref269"></a><a id="sthref270"></a>datetime, and interval descriptors are used by applications that use the date, datetime, or interval data types (<code>OCIDate</code>, <code>OCIDateTime</code>, and <code>OCIInterval</code>). These descriptors can be used for binding and defining, and are passed as parameters to the functions <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> and <a href="oci16rel002.htm#i540811">OCIDescriptorFree()</a> to allocate and free memory.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci03typ.htm#g467721">Chapter 3</a> for more information about these data types</p>
</li>
<li>
<p><a href="oci19map.htm#i518093">Chapter 19</a> for descriptions of the functions that operate on these data types</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<div id="LNOCI16205" class="sect4"><a id="sthref271"></a>
<h5 class="sect4">Complex Object Descriptor<a id="sthref272"></a><a id="sthref273"></a></h5>
<p>Application performance when dealing with objects may be increased using <span class="italic">complex object retrieval (COR)</span>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci11obj.htm#i440830">"Complex Object Retrieval"</a> for information about the complex object descriptor and its use</div>
</div>
<!-- class="sect4" -->
<div id="LNOCI16206" class="sect4"><a id="sthref274"></a>
<h5 class="sect4">Advanced Queuing Descriptors</h5>
<p>Oracle Streams <a id="sthref275"></a>Advanced Queuing provides message queuing as an integrated part of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci09adv.htm#i467582">"OCI and Streams Advanced Queuing"</a></p>
</li>
<li>
<p><a href="oci09adv.htm#i462621">"Publish-Subscribe Registration Functions in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="i463458"></a>
<div id="LNOCI16207" class="sect4">
<h5 class="sect4">User Memory Allocation<a id="sthref276"></a><a id="sthref277"></a></h5>
<p>The <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> call has an <code>xtramem_sz</code> parameter in its parameter list. This parameter is used to specify the amount of user memory that should be allocated along with a descriptor or locator.</p>
<p>Typically, an application uses this parameter to allocate an application-defined structure that has the same lifetime as the descriptor or locator. This structure can be used for application <span class="italic">bookkeeping</span> or storing context information.</p>
<p>Using the <code>xtramem_sz</code> parameter means that the application does not need to explicitly allocate and deallocate memory as each descriptor or locator is allocated and deallocated. The memory is allocated along with the descriptor or locator, and freeing the descriptor or locator (with <a href="oci16rel002.htm#i540811">OCIDescriptorFree()</a>) frees the user's data structures as well.</p>
<p>The <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a> call has a similar parameter for allocating user memory that has the same lifetime as the handle.</p>
<p>The <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> and (<a href="ociaedep001.htm#BEIGIBFB">OCIEnvInit()</a> deprecated) calls have a similar parameter for allocating user memory that has the same lifetime as the environment handle.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i461853"></a>
<div id="LNOCI16208" class="sect1">
<h2 class="sect1">OCI Programming Steps<a id="sthref278"></a></h2>
<p>The following sections describe in detail each of the steps in developing an OCI application. Some of the steps are optional. For example, you do not need to describe or define select-list items if the statement is not a query.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The first sample program in <a href="ociabdem.htm#g462659">Appendix B</a> for an example showing the use of OCI calls for processing SQL statements.</p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for a detailed description of the special case of dynamically providing data at run time</p>
</li>
<li>
<p><a href="oci05bnd.htm#i421503">"Binding and Defining Arrays of Structures in OCI"</a> for a description of the special considerations for operations involving arrays of structures</p>
</li>
<li>
<p><a href="#i462233">"Error Handling in OCI"</a> for an outline of the steps involved in processing a SQL statement within an OCI program</p>
</li>
<li>
<p><a href="oci08sca.htm#i456377">"Overview of OCI Multithreaded Development"</a> for information about using the OCI to write multithreaded applications</p>
</li>
<li>
<p><a href="oci01int.htm#i426066">"SQL Statements"</a> for more information about types of SQL statements</p>
</li>
</ul>
</div>
<p>The following sections describe the steps that are required of an OCI application:</p>
<ul>
<li>
<p><a href="#i461923">OCI Environment Initialization</a></p>
</li>
<li>
<p><a href="#i462170">Processing SQL Statements in OCI</a></p>
</li>
<li>
<p><a href="#i462177">Commit or Roll Back Operations</a></p>
</li>
<li>
<p><a href="#i462205">Terminating the Application</a></p>
</li>
<li>
<p><a href="#i462233">Error Handling in OCI</a></p>
</li>
</ul>
<p>Application-specific processing also occurs in between any and all of the OCI function steps.</p>
<a id="i461923"></a>
<div id="LNOCI16209" class="sect2">
<h3 class="sect2">OCI Environment Initialization</h3>
<p>This section describes how to initialize the OCI environment, establish a connection to a server, and authorize a user to perform actions against the database.</p>
<p>First, the three main steps in initializing the OCI environment are described in the following sections:</p>
<ul>
<li>
<p><a href="#i464242">"Creating the OCI Environment"</a></p>
</li>
<li>
<p><a href="#i464259">"Allocating Handles and Descriptors"</a></p>
</li>
<li>
<p><a href="#i462054">"Application Initialization, Connection, and Session Creation"</a></p>
</li>
</ul>
<a id="i464242"></a>
<div id="LNOCI16210" class="sect3">
<h4 class="sect3">Creating the OCI Environment</h4>
<p>Each OCI function call is executed in the context of an environment that is created with the <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> call. This call must be invoked before any other OCI call is executed. The only exception is the setting of a process-level attribute for the OCI shared mode.</p>
<p>The <code>mode</code> parameter of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> specifies whether the application calling the OCI library functions can:</p>
<ul>
<li>
<p>Run in a threaded environment (<code>mode</code> = <code>OCI_THREADED</code>).</p>
</li>
<li>
<p>Use objects (<code>mode</code> = <code><a id="sthref279"></a>OCI_OBJECT</code>). Use with AQ subscription registration.</p>
</li>
<li>
<p>Use subscriptions (<code>mode</code> = <code>OCI_EVENTS</code>).</p>
</li>
</ul>
<p>The mode can be set independently in each environment.</p>
<p>It is necessary to initialize in object mode if the application binds and defines objects, or if it uses the OCI's object navigation calls. The program may also choose to use none of these features (<code>mode</code> = <code>OCI_DEFAULT</code>) or some combination of them, separating the options with a vertical bar. For example if <code>mode</code> = (<code>OCI_THREADED</code> | <code>OCI_OBJECT</code>), then the application runs in a threaded environment and uses objects.</p>
<p>You can specify user-defined memory management functions for each OCI environment.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci16rel001.htm#i556149">"OCIEnvCreate()"</a>, <a href="oci16rel001.htm#i562098">"OCIEnvNlsCreate()"</a>, and <a href="ociaedep001.htm#i556330">"OCIInitialize()"</a> (deprecated) for more information about the initialization calls</p>
</li>
<li>
<p><a href="oci08sca.htm#i456377">"Overview of OCI Multithreaded Development"</a></p>
</li>
<li>
<p><a href="oci11obj.htm#i450885">Chapter 11</a>, <a href="oci12oty.htm#g453655">Chapter 12</a>, <a href="oci13obn.htm#g443680">Chapter 13</a>, <a href="oci14oca.htm#g458990">Chapter 14</a>, and <a href="oci15ott.htm#g455369">Chapter 15</a></p>
</li>
<li>
<p><a href="oci09adv.htm#i435757">"Publish-Subscribe Notification in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="i464259"></a>
<div id="LNOCI16211" class="sect3">
<h4 class="sect3">Allocating Handles and Descriptors<a id="sthref280"></a><a id="sthref281"></a></h4>
<p>Oracle Database provides OCI functions to allocate and deallocate handles and descriptors. You must allocate handles using <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a> before passing them into an OCI call, unless the OCI call, such as <a href="oci16rel003.htm#i456224">OCIBindByPos()</a>, allocates the handles for you.</p>
<p>You can allocate the types of handles listed in <a href="#g466063">Table 2-1</a> with <code>OCIHandleAlloc()</code> Depending on the functionality of your application, it must allocate some or all of these handles.</p>
</div>
<!-- class="sect3" -->
<a id="i462054"></a>
<div id="LNOCI16212" class="sect3">
<h4 class="sect3">Application Initialization, Connection, and Session Creation<a id="sthref282"></a><a id="sthref283"></a><a id="sthref284"></a></h4>
<p>An application must call <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> to initialize the OCI environment handle. Existing applications may have used <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>.</p>
<p>Following this step, the application has several options for establishing an Oracle database connection and beginning a user session.</p>
<p>These methods include:</p>
<ul>
<li>
<p><a href="#CIHEDJJB">Single User, Single Connection</a></p>
</li>
<li>
<p><a href="#CHDJDICD">Client Access Through a Proxy</a></p>
</li>
<li>
<p><a href="#CIHIFGJG">Nonproxy Multiple Sessions or Connections</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> or <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> should be used instead of the <code>OCIInitialize()</code> and <code>OCIEnvInit()</code> calls. <code>OCIInitialize()</code> and <code>OCIEnvInit()</code> calls are supported for backward compatibility.</div>
<a id="CIHEDJJB"></a>
<div id="LNOCI16213" class="sect4">
<h5 class="sect4">Single User, Single Connection<a id="sthref285"></a></h5>
<p>The single user, single connection option is the simplified logon method, which can be used if an application maintains only a single user session for each database connection at any time.</p>
<p>When an application calls <a href="oci16rel001.htm#i558312">OCILogon2()</a> or <a href="oci16rel001.htm#i556477">OCILogon()</a>, the OCI library initializes the service context handle that is passed to it, and creates a connection to the specified Oracle database for the user making the request.</p>
<p><a href="#CIHBFIIG">Example 2-3</a> shows what a call to <a href="oci16rel001.htm#i558312">OCILogon2()</a> looks like for a single user session with user name <code>hr</code>, password <code>hr</code>, and database <code>oracledb</code>.</p>
<div id="LNOCI18115" class="example">
<p class="titleinexample"><a id="CIHBFIIG"></a>Example 2-3 Using the OCILogon2 Call for a Single User Session</p>
<pre>
OCILogon2(envhp, errhp, &amp;svchp, (text *)"hr", (ub4)strlen("hr"), (text *)"hr",
          (ub4)strlen("hr"), (text *)"oracledb", (ub4)strlen("oracledb"),
          OCI_DEFAULT);
</pre></div>
<!-- class="example" -->
<p>The parameters to this call include the service context handle (which has been initialized), the user name, the user's password, and the name of the database that are used to establish the connection. With the last parameter, <code>mode</code>, set to <code>OCI_DEFAULT</code>, this call has the same effect as calling the older <code>OCILogon()</code>. Use <a href="oci16rel001.htm#i558312">OCILogon2()</a> for any new applications. The server and user session handles are implicitly allocated by this function.</p>
<p>If an application uses this logon method, the service context, server, and user session handles are all read-only; the application cannot switch session or transaction by changing the appropriate attributes of the service context handle using an <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> call.</p>
<p>An application that initializes its session and authorization using <a href="oci16rel001.htm#i558312">OCILogon2()</a> must terminate them using <a href="oci16rel001.htm#i556437">OCILogoff()</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For simplicity in demonstrating this feature, this example does not perform the password management techniques that a deployed system normally uses. In a production environment, follow the Oracle Database password management guidelines, and disable any sample accounts. See <a class="olink DBSEG10005" href="../../network.112/e36292/guidelines.htm#DBSEG10005"><span class="italic">Oracle Database Security Guide</span></a> for password management guidelines and other security recommendations.</div>
<p>For information regarding operating systems providing facilities for spawning processes that allow child processes to reuse state created by their parent process, see <a href="#CIHDDHDE">"Operating System Considerations"</a>. This section explains why the child process must not use the same database connection as created by the parent.</p>
</div>
<!-- class="sect4" -->
<a id="CHDJDICD"></a>
<div id="LNOCI13341" class="sect4">
<h5 class="sect4"><a id="sthref286"></a><a id="sthref287"></a>Client Access Through a Proxy</h5>
<p>Proxy authentication is a process typically employed in an environment with a middle tier such as a firewall, in which the end user authenticates to the middle tier, which then authenticates to the database on the user's behalf&mdash;as its proxy. The middle tier logs in to the database as a proxy user. A proxy user can switch identities and, after logging in to the database, switch to the end user's identity. It can perform operations on the end user's behalf, using the authorization appropriate to that particular end user.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In release 1 of Oracle 11<span class="italic">g</span>, standards for acceptable passwords were greatly raised to increase security. Examples of passwords in this section are incorrect. A password must contain no fewer than eight characters. See the guidelines for securing passwords <a class="olink DBSEG10005" href="../../network.112/e36292/guidelines.htm#DBSEG10005"><span class="italic">Oracle Database Security Guide</span></a> for additional information.</div>
<p>Proxy to database users is supported by using OCI and the <code>ALTER</code> <code>USER</code> statement, whose BNF syntax is:</p>
<pre>
ALTER USER &lt;<span class="italic">targetuser</span>&gt; GRANT CONNECT THROUGH &lt;proxy&gt; [AUTHENTICATION REQUIRED];
</pre>
<p>The <code>ALTER</code> <code>USER</code> statement is used once in an application. Connections can be made multiple times afterward. In OCI, you can either use connect strings or the function <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> with the parameter <code>OCI_ATTR_PROXY_CLIENT</code>.</p>
<p>After a proxy switch is made, the current and connected user is the target user of the proxy. The identity of the original user is not used for any privilege calculations. The original user can be a local or external user.</p>
<p><a href="#CIHGEIDA">Example 2-4</a> through <a href="#CIHHBCID">Example 2-11</a> show connect strings that you can use in functions such as <a href="oci16rel001.htm#i558312">OCILogon2()</a> (set <code>mode</code> = <code>OCI_DEFAULT</code>), <code>OCILogon()</code>, <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> with <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> (pass the attribute <code><a id="sthref288"></a>OCI_ATTR_USERNAME</code> of the session handle), and so on.</p>
<p>In <a href="#CIHGEIDA">Example 2-4</a>, Dilbert and Joe are two local database users. To enable Dilbert to serve as a proxy for Joe, use the SQL statement shown in <a href="#CIHGEIDA">Example 2-4</a>.</p>
<div id="LNOCI18116" class="example">
<p class="titleinexample"><a id="CIHGEIDA"></a>Example 2-4 Enabling a Local User to Serve as a Proxy for Another User</p>
<pre>
ALTER USER joe GRANT CONNECT THROUGH dilbert;
</pre></div>
<!-- class="example" -->
<p>When user name <code>dilbert</code> is acting on behalf of <code>joe</code>, use the connection string shown in <a href="#CIHGAGIJ">Example 2-5</a>. (The user name <code>dilbert</code> has the password <code>tiger123</code>).</p>
<div id="LNOCI18117" class="example">
<p class="titleinexample"><a id="CIHGAGIJ"></a>Example 2-5 Connection String to Use for the Proxy User</p>
<pre>
dilbert[joe]/tiger123@db1
</pre></div>
<!-- class="example" -->
<p>The left and right brackets "[" and "]" are entered in the connection string.</p>
<p>In <a href="#CIHIFFBF">Example 2-6</a>, "Dilbert" and "Joe" are two local database users. The names are case-sensitive and must be enclosed in double quotation marks. To enable "Dilbert" to serve as a proxy for "Joe", use the SQL statement shown in <a href="#CIHIFFBF">Example 2-6</a>.</p>
<div id="LNOCI18118" class="example">
<p class="titleinexample"><a id="CIHIFFBF"></a>Example 2-6 Preserving Case Sensitivity When Enabling a Local User to Serve as a Proxy for Another User</p>
<pre>
ALTER USER "Joe" GRANT CONNECT THROUGH "Dilbert";
</pre></div>
<!-- class="example" -->
<p>When "Dilbert" is acting on behalf of "Joe", use the connection string shown in <a href="#CIHJDDAC">Example 2-7</a>. Be sure to include the double quotation marks (") characters.</p>
<div id="LNOCI18119" class="example">
<p class="titleinexample"><a id="CIHJDDAC"></a>Example 2-7 Preserving Case Sensitivity in the Connection String</p>
<pre>
"Dilbert"["Joe"]/tiger123@db1
</pre></div>
<!-- class="example" -->
<p>When the proxy user is created as "dilbert[mybert]", use the connection string shown in <a href="#CIHGAEIC">Example 2-8</a> to connect to the database. (The left and right brackets "[" and "]" are entered in the connection string.)</p>
<div id="LNOCI18120" class="example">
<p class="titleinexample"><a id="CIHGAEIC"></a>Example 2-8 Using "dilbert[mybert]" in the Connection String</p>
<pre>
"dilbert[mybert]"/tiger123

rem the user was already created this way:
rem CREATE USER "dilbert[mybert]" IDENTIFIED BY tiger123;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHBJDDA">Example 2-9</a>, dilbert[mybert] and joe[myjoe] are two database users that contain the left and right bracket characters "[" and "]". If dilbert[mybert] wants to act on behalf of joe[myjoe], <a href="#CIHBJDDA">Example 2-9</a> shows the connect statement to use.</p>
<div id="LNOCI18121" class="example">
<p class="titleinexample"><a id="CIHBJDDA"></a>Example 2-9 Using "dilbert[mybert]"["joe[myjoe]"] in the Connection String</p>
<pre>
"dilbert[mybert]"["joe[myjoe]"]/tiger123
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHBGCBI">Example 2-10</a>, you can set the target user name by using the <code>ALTER</code> <code>USER</code> statement.</p>
<div id="LNOCI18122" class="example">
<p class="titleinexample"><a id="CIHBGCBI"></a>Example 2-10 Setting the Target User Name</p>
<pre>
ALTER USER joe GRANT CONNECT THROUGH dilbert;
</pre>
<p>Then, as shown in <a href="#CIHHBCID">Example 2-11</a>, in an OCI program, use the <code>OCIAttrSet()</code> call to set the attribute <code><a id="sthref289"></a>OCI_ATTR_PROXY_CLIENT</code> and the proxy <code>dilbert</code>. In your program, use these statements to connect multiple times.</p>
</div>
<!-- class="example" -->
<div id="LNOCI18123" class="example">
<p class="titleinexample"><a id="CIHHBCID"></a>Example 2-11 Using OCI to Set the OCI_ATTR_PROXY_CLIENT Attribute and the Proxy dilbert</p>
<pre>
OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)"dilbert",
           (ub4)strlen("dilbert"), OCI_ATTR_USERNAME, 
           error_handle);
OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)"tiger123", 
           (ub4)strlen("tiger123"), OCI_ATTR_PASSWORD, 
           error_handle);
OCIAttrSet(session, OCI_HTYPE_SESSION, (void  *)"joe",
           (ub4)strlen("joe"), OCI_ATTR_PROXY_CLIENT, 
           error_handle);
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ociaahan.htm#BAJFJCJG">"OCI_ATTR_PROXY_CLIENT"</a></p>
</li>
<li>
<p><a class="olink DBSEG33101" href="../../network.112/e36292/authentication.htm#DBSEG33101"><span class="italic">Oracle Database Security Guide</span></a> for a discussion of proxy authentication</p>
</li>
<li>
<p><a href="oci08sca.htm#i422789">"Password and Session Management"</a></p>
</li>
<li>
<p><a href="oci16rel002.htm#i443804">"OCIAttrSet()"</a></p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Caution:</p>
There are compatibility issues of client access through a proxy. Because this feature was introduced in Oracle Database release 10.2, pre-10.2 clients do not have it. If newer clients use the feature with pre-10.2 Oracle databases, the connect fails and the client returns an error after checking the database release level.</div>
</div>
<!-- class="sect4" -->
<a id="CIHIFGJG"></a>
<div id="LNOCI16215" class="sect4">
<h5 class="sect4">Nonproxy Multiple Sessions or Connections</h5>
<p>The nonproxy multiple sessions or connections option uses explicit attach and begin-session calls to maintain multiple user sessions and connections on a database connection. Specific calls to attach to the Oracle database and begin sessions are:</p>
<ul>
<li>
<p><a href="oci16rel001.htm#i558225">OCIServerAttach()</a> - Creates an access path to the Oracle database for OCI operations.</p>
</li>
<li>
<p><code><a id="sthref290"></a></code><a href="oci16rel001.htm#i556608">OCISessionBegin()</a> - Establishes a session for a user against a particular Oracle database. This call is required for the user to execute operations on the Oracle database.</p>
</li>
</ul>
<p>A subsequent call to <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> using different service context and session context handles logs off the previous user and causes an error. To run two simultaneous nonmigratable sessions, a second <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> call must be made with the same service context handle and a new session context handle.</p>
<p>These calls set up an operational environment that enables you to execute SQL and PL/SQL statements against a database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci16rel001.htm#CIHDFJBA">"Connect, Authorize, and Initialize Functions"</a></p>
</li>
<li>
<p><a href="oci09adv.htm#g489977">Chapter 9</a> for more information about maintaining multiple sessions, transactions, and connections</p>
</li>
<li>
<p><a href="#i462960">"Client Character Set Control from OCI"</a> for the use of <code>OCIEnvNlsCreate()</code></p>
</li>
</ul>
</div>
<p><a href="#CIHDEGIE">Example 2-12</a> demonstrates the creation and initialization of an OCI environment.</p>
<ul>
<li>
<p>A server context is created and set in the service handle.</p>
</li>
<li>
<p>Then a user session handle is created and initialized using a database user name and password.</p>
</li>
<li>
<p>For simplicity, error checking is not included.</p>
</li>
</ul>
<div id="LNOCI18124" class="example">
<p class="titleinexample"><a id="CIHDEGIE"></a>Example 2-12 Creating and Initializing an OCI Environment<a id="sthref291"></a></p>
<pre>
#include &lt;oci.h&gt;
...
main()
{
...
OCIEnv     *myenvhp;    /* the environment handle */
OCIServer  *mysrvhp;    /* the server handle */
OCIError   *myerrhp;    /* the error handle */
OCISession *myusrhp;    /* user session handle */
OCISvcCtx  *mysvchp;    /* the  service handle */
...
/* initialize the mode to be the threaded and object environment */
(void) OCIEnvCreate(&amp;myenvhp, OCI_THREADED|OCI_OBJECT, (void  *)0,
                    0, 0, 0, (size_t) 0, (void  **)0);

     /* allocate a server handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;mysrvhp,
      OCI_HTYPE_SERVER, 0, (void  **) 0);

      /* allocate an error handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;myerrhp,
      OCI_HTYPE_ERROR, 0, (void  **) 0);

      /* create a server context */
(void) OCIServerAttach (mysrvhp, myerrhp, (text *)"inst1_alias",
      strlen ("inst1_alias"), OCI_DEFAULT);

     /* allocate a service handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;mysvchp,
      OCI_HTYPE_SVCCTX, 0, (void  **) 0);

 /* set the server attribute in the service context handle*/
(void) OCIAttrSet ((void  *)mysvchp, OCI_HTYPE_SVCCTX,
       (void  *)mysrvhp, (ub4) 0, OCI_ATTR_SERVER, myerrhp);

      /* allocate a user session handle */
(void) OCIHandleAlloc ((void  *)myenvhp, (void  **)&amp;myusrhp,
     OCI_HTYPE_SESSION, 0, (void  **) 0);

      /* set user name attribute in user session handle */
 (void) OCIAttrSet ((void  *)myusrhp, OCI_HTYPE_SESSION,
      (void  *)"hr", (ub4)strlen("hr"),
      OCI_ATTR_USERNAME, myerrhp);

      /* set password attribute in user session handle */
 (void) OCIAttrSet ((void  *)myusrhp, OCI_HTYPE_SESSION,
      (void  *)"hr", (ub4)strlen("hr"),
      OCI_ATTR_PASSWORD, myerrhp);

 (void) OCISessionBegin ((void  *) mysvchp, myerrhp, myusrhp,
      OCI_CRED_RDBMS, OCI_DEFAULT);

    /* set the user session attribute in the service context handle*/
 (void) OCIAttrSet ((void  *)mysvchp, OCI_HTYPE_SVCCTX,
       (void  *)myusrhp, (ub4) 0, OCI_ATTR_SESSION, myerrhp);
...
}
</pre></div>
<!-- class="example" -->
<p>The demonstration program <code>cdemo81.c</code> in the <code>demo</code> directory illustrates this process, with error checking.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i462170"></a>
<div id="LNOCI16217" class="sect2">
<h3 class="sect2">Processing SQL Statements in OCI</h3>
<p><a href="oci04sql.htm#g454129">Chapter 4</a> outlines the specific steps involved in processing SQL statements in OCI.</p>
</div>
<!-- class="sect2" -->
<a id="i462177"></a>
<div id="LNOCI16218" class="sect2">
<h3 class="sect2">Commit or Roll Back Operations</h3>
<p><a id="sthref292"></a><a id="sthref293"></a><a id="sthref294"></a><a id="sthref295"></a>An application commits changes to the database by calling <a href="oci17msc006.htm#i428845">OCITransCommit()</a>. This call uses a service context as one of its parameters. The transaction is associated with the service context whose changes are committed. This transaction can be explicitly created by the application or implicitly created when the application modifies the database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
By using the <code>OCI_COMMIT_ON_SUCCESS</code> mode of the <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> call, the application can selectively commit transactions after each statement execution, saving an extra round-trip.</div>
<p>To roll back a transaction, use the <a href="oci17msc006.htm#i428853">OCITransRollback()</a> call.</p>
<p>If an application disconnects from Oracle Database in a way other than a normal logoff, such as losing a network connection, and <a href="oci17msc006.htm#i428845">OCITransCommit()</a> has not been called, all active transactions are rolled back automatically.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i461358">"Service Context Handle and Associated Handles"</a></p>
</li>
<li>
<p><a href="oci08sca.htm#i421830">"OCI Support for Transactions"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i462205"></a>
<div id="LNOCI16219" class="sect2">
<h3 class="sect2">Terminating the Application<a id="sthref296"></a></h3>
<p>An OCI application should perform the following steps before it terminates:</p>
<ol>
<li>
<p>Delete the user session by calling <a href="oci16rel001.htm#i556679">OCISessionEnd()</a> for each session.</p>
</li>
<li>
<p>Delete access to the data sources by calling <a href="oci16rel001.htm#i556585">OCIServerDetach()</a> for each source.</p>
</li>
<li>
<p>Explicitly deallocate all handles by calling <a href="oci16rel002.htm#i540911">OCIHandleFree()</a> for each handle.</p>
</li>
<li>
<p>Delete the environment handle, which deallocates all other handles associated with it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When a parent OCI handle is freed, any child handles associated with it are freed automatically</div>
</li>
</ol>
<p>The calls to <a href="oci16rel001.htm#i556585">OCIServerDetach()</a> and <a href="oci16rel001.htm#i556679">OCISessionEnd()</a> are not mandatory but are recommended. If the application terminates, and <a href="oci17msc006.htm#i428845">OCITransCommit()</a> (transaction commit) has not been called, any pending transactions are automatically rolled back.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The first sample program in <a href="ociabdem.htm#g462659">Appendix B</a> for an example showing handles being freed at the end of an application</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the application uses the simplified logon method of <a href="oci16rel001.htm#i558312">OCILogon2()</a>, then a call to <a href="oci16rel001.htm#i556437">OCILogoff()</a> terminates the session, disconnects from the Oracle database, and frees the service context and associated handles. The application is still responsible for freeing other handles it allocated.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i462233"></a>
<div id="LNOCI16220" class="sect1">
<h2 class="sect1">Error Handling in OCI<a id="sthref297"></a><a id="sthref298"></a></h2>
<p>OCI function calls have a set of return codes, listed in <a href="#g466363">Table 2-3</a>, which indicate the success or failure of the call, such as <code>OCI_SUCCESS</code> or <code>OCI_ERROR</code>, or provide other information that may be required by the application, such as <code>OCI_NEED_DATA</code> or <code>OCI_STILL_EXECUTING</code>. Most OCI calls return one of these codes.</p>
<p>To verify that the connection to the server is not terminated by the <code>OCI_ERROR</code>, an application can check the value of the attribute <a id="sthref299"></a><code>OCI_ATTR_SERVER_STATUS</code> in the server handle. If the value of the attribute is <code>OCI_SERVER_NOT_CONNECTED</code>, then the connection to the server and the user session must be reestablished.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i462464">"Functions Returning Other Values"</a> for exceptions</p>
</li>
<li>
<p><a href="oci17msc007.htm#i540516">"OCIErrorGet()"</a> for complete details and an example of usage</p>
</li>
<li>
<p><a href="ociaahan.htm#i429949">"Server Handle Attributes"</a></p>
</li>
</ul>
</div>
<div id="LNOCI16221" class="tblformalwide">
<p class="titleintable"><a id="sthref300"></a><a id="g466363"></a>Table 2-3 OCI Return Codes</p>
<table class="cellalignment1011" title="OCI Return Codes " summary="OCI return codes" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t45">OCI Return Code</th>
<th class="cellalignment1012" id="r1c2-t45">Value</th>
<th class="cellalignment1012" id="r1c3-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t45" headers="r1c1-t45">
<p><a id="sthref301"></a><code>OCI_SUCCESS</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t45 r1c2-t45">
<p>0</p>
</td>
<td class="cellalignment1013" headers="r2c1-t45 r1c3-t45">
<p>The function completed successfully.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t45" headers="r1c1-t45">
<p><a id="sthref302"></a><code>OCI_SUCCESS_WITH_INFO</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t45 r1c2-t45">
<p>1</p>
</td>
<td class="cellalignment1013" headers="r3c1-t45 r1c3-t45">
<p>The function completed successfully; a call to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> returns additional diagnostic information. This may include warnings.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t45" headers="r1c1-t45">
<p><a id="sthref303"></a><code>OCI_NO_DATA</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t45 r1c2-t45">
<p>100</p>
</td>
<td class="cellalignment1013" headers="r4c1-t45 r1c3-t45">
<p>The function completed, and there is no further data.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t45" headers="r1c1-t45">
<p><a id="sthref304"></a><code>OCI_ERROR</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t45 r1c2-t45">
<p>-1</p>
</td>
<td class="cellalignment1013" headers="r5c1-t45 r1c3-t45">
<p>The function failed; a call to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> returns additional information.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t45" headers="r1c1-t45">
<p><a id="sthref305"></a><code>OCI_INVALID_HANDLE</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t45 r1c2-t45">
<p>-2</p>
</td>
<td class="cellalignment1013" headers="r6c1-t45 r1c3-t45">
<p>An invalid handle was passed as a parameter or a user callback was passed an invalid handle or invalid context. No further diagnostics are available.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t45" headers="r1c1-t45">
<p><a id="sthref306"></a><code>OCI_NEED_DATA</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t45 r1c2-t45">
<p>99</p>
</td>
<td class="cellalignment1013" headers="r7c1-t45 r1c3-t45">
<p>The application must provide runtime data.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t45" headers="r1c1-t45">
<p><a id="sthref307"></a><code>OCI_STILL_EXECUTING</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t45 r1c2-t45">
<p>-3123</p>
</td>
<td class="cellalignment1013" headers="r8c1-t45 r1c3-t45">
<p>The service context was established in nonblocking mode, and the current operation could not be completed immediately. The operation must be called again to complete. <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> returns <code>ORA-03123</code> as the error code.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t45" headers="r1c1-t45">
<p><a id="sthref308"></a><code>OCI_CONTINUE</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t45 r1c2-t45">
<p>-24200</p>
</td>
<td class="cellalignment1013" headers="r9c1-t45 r1c3-t45">
<p>This code is returned only from a callback function. It indicates that the callback function wants the OCI library to resume its normal processing.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t45" headers="r1c1-t45">
<p><a id="sthref309"></a><code>OCI_ROWCBK_DONE</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t45 r1c2-t45">
<p>-24201</p>
</td>
<td class="cellalignment1013" headers="r10c1-t45 r1c3-t45">
<p>This code is returned only from a callback function. It indicates that the callback function is done with the user row callback.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>If the return code indicates that an error has occurred, the application can retrieve error codes and messages specific to Oracle Database by calling <code>OCIErrorGet()</code>. One of the parameters to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> is the error handle passed to the call that caused the error.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Multiple diagnostic records can be retrieved by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> repeatedly until there are no more records (<code>OCI_NO_DATA</code> is returned). <code>OCIErrorGet()</code> returns at most a single diagnostic record.</div>
<div id="LNOCI16222" class="sect2"><a id="sthref310"></a>
<h3 class="sect2">Return and Error Codes for Data</h3>
<p><a id="sthref311"></a><a id="sthref312"></a>In <a href="#g466402">Table 2-4</a>, the OCI return code, error number, indicator variable, and column return code are specified when the data fetched is normal, null, or truncated.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i462559">"Indicator Variables"</a></div>
<div id="LNOCI16223" class="tblformal">
<p class="titleintable"><a id="sthref313"></a><a id="g466402"></a>Table 2-4 Return and Error Codes</p>
<table class="cellalignment1016" title="Return and Error Codes " summary="Return and error codes" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t48">State of Data</th>
<th class="cellalignment1012" id="r1c2-t48">Return Code</th>
<th class="cellalignment1012" id="r1c3-t48"><span class="bold">Indicator - Not provided</span></th>
<th class="cellalignment1012" id="r1c4-t48"><span class="bold">Indicator - Provided</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t48" headers="r1c1-t48">
<p>Not null or truncated</p>
</td>
<td class="cellalignment1013" headers="r2c1-t48 r1c2-t48">
<p>Not provided</p>
</td>
<td class="cellalignment1013" headers="r2c1-t48 r1c3-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
</td>
<td class="cellalignment1013" headers="r2c1-t48 r1c4-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = 0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t48" headers="r1c1-t48">
<p>Not null or truncated</p>
</td>
<td class="cellalignment1013" headers="r3c1-t48 r1c2-t48">
<p>Provided</p>
</td>
<td class="cellalignment1013" headers="r3c1-t48 r1c3-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Return code = 0</p>
</td>
<td class="cellalignment1013" headers="r3c1-t48 r1c4-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = 0</p>
<p>Return code = 0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t48" headers="r1c1-t48">
<p>Null data</p>
</td>
<td class="cellalignment1013" headers="r4c1-t48 r1c2-t48">
<p>Not provided</p>
</td>
<td class="cellalignment1013" headers="r4c1-t48 r1c3-t48">
<p><code>OCI_ERROR</code></p>
<p>Error = 1405</p>
</td>
<td class="cellalignment1013" headers="r4c1-t48 r1c4-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = -1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t48" headers="r1c1-t48">
<p>Null data</p>
</td>
<td class="cellalignment1013" headers="r5c1-t48 r1c2-t48">
<p>Provided</p>
</td>
<td class="cellalignment1013" headers="r5c1-t48 r1c3-t48">
<p><code>OCI_ERROR</code></p>
<p>Error = 1405</p>
<p>Return code = 1405</p>
</td>
<td class="cellalignment1013" headers="r5c1-t48 r1c4-t48">
<p><code>OCI_SUCCESS</code></p>
<p>Error = 0</p>
<p>Indicator = -1</p>
<p>Return code = 1405</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t48" headers="r1c1-t48">
<p>Truncated data</p>
</td>
<td class="cellalignment1013" headers="r6c1-t48 r1c2-t48">
<p>Not provided</p>
</td>
<td class="cellalignment1013" headers="r6c1-t48 r1c3-t48">
<p><code>OCI_ERROR</code></p>
<p>Error = 1406</p>
</td>
<td class="cellalignment1013" headers="r6c1-t48 r1c4-t48">
<p><code>OCI_ERROR</code></p>
<p>Error = 1406</p>
<p>Indicator = data_len</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t48" headers="r1c1-t48">
<p>Truncated data</p>
</td>
<td class="cellalignment1013" headers="r7c1-t48 r1c2-t48">
<p>Provided</p>
</td>
<td class="cellalignment1013" headers="r7c1-t48 r1c3-t48">
<p><code>OCI_SUCCESS_WITH_INFO</code></p>
<p>Error = 24345</p>
<p>Return code = 1405</p>
</td>
<td class="cellalignment1013" headers="r7c1-t48 r1c4-t48">
<p><code>OCI_SUCCESS_WITH_INFO</code></p>
<p>Error = 24345</p>
<p>Indicator = data_len</p>
<p>Return code = 1406</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For truncated data, <code>data_len</code> is the actual length of the data that has been truncated if this length is less than or equal to <code>SB2MAXVAL</code>. Otherwise, the indicator is set to -2.</p>
</div>
<!-- class="sect2" -->
<a id="i462464"></a>
<div id="LNOCI16224" class="sect2">
<h3 class="sect2">Functions Returning Other Values<a id="sthref314"></a></h3>
<p>Some functions return values other than the OCI error codes listed in <a href="#g466363">Table 2-3</a>. When you use these functions, be aware that they return values directly from the function call, rather than through an <code>OUT</code> parameter. More detailed information about each function and its return values is listed in the reference chapters.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i462503"></a>
<div id="LNOCI16225" class="sect1">
<h2 class="sect1">Additional Coding Guidelines</h2>
<p>This section explains some additional issues when coding OCI applications.</p>
<a id="CIHDDHDE"></a>
<div id="LNOCI18125" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Operating System Considerations</h3>
<p>Operating systems may provide facilities for spawning processes that allow child processes to reuse the state created by their parent process. After spawning a child process, the child process must not use the same database connection as created by the parent. Any attempt on behalf of the child process to use the same database connection as the parent may cause undesired connection interference and result in intermittent <code>ORA-03137</code> errors, because Oracle Net expects only one user process to be using a connection to the database.</p>
<p>Where multiple, concurrent connections are required, consider using threads if your platform supports a threads package. Concurrent connections are supported in either single-threaded or multithreaded applications.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="oci08sca.htm#i456377">"Overview of OCI Multithreaded Development"</a></li>
<li>
<p><a href="oci08sca.htm#i434459">"OCIThread Package"</a></p>
</li>
</ul>
</div>
<p>For better performance with many concurrently opened connections, consider pooling them.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="oci09adv.htm#i465498">"Session Pooling in OCI"</a></li>
<li>
<p><a href="oci09adv.htm#i471769">"When to Use Connection Pooling, Session Pooling, or Neither"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16226" class="sect2"><a id="sthref315"></a>
<h3 class="sect2">Parameter Types</h3>
<p>OCI functions take a variety of different types of parameters, including integers, handles, and character strings. Special considerations must be taken into account for some types of parameters, as described in the following sections.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci16rel001.htm#CIHDFJBA">"Connect, Authorize, and Initialize Functions"</a> for more information about parameter data types and parameter passing conventions</div>
<div id="LNOCI16227" class="sect3"><a id="sthref316"></a>
<h4 class="sect3">Address Parameters</h4>
<p>Address parameters are used to pass the address of the variable to Oracle Database. You should be careful when developing in C, because it normally passes scalar parameters by value.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16228" class="sect3"><a id="sthref317"></a>
<h4 class="sect3">Integer Parameters</h4>
<p>Binary integer and short binary integer parameters are numbers whose size is system-dependent. See Oracle Database documentation that is specific to your operating system for the size of these integers on your system.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16229" class="sect3"><a id="sthref318"></a>
<h4 class="sect3">Character String Parameters<a id="sthref319"></a><a id="sthref320"></a></h4>
<p>Character strings are a special type of address parameter. Each OCI routine that enables a character string to be passed as a parameter also has a string length parameter. The length parameter should be set to the length of the string.</p>
<div class="infobox-note">
<p class="notep1">7.x Upgrade Note:</p>
Unlike earlier versions of OCI, you do not pass -1 for the string length parameter of a null-terminated string.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16230" class="sect2"><a id="sthref321"></a>
<h3 class="sect2">Inserting Nulls into a Column<a id="sthref322"></a><a id="sthref323"></a><a id="sthref324"></a><a id="sthref325"></a><a id="sthref326"></a><a id="sthref327"></a></h3>
<p>You can insert a null into a database column in several ways.</p>
<ul>
<li>
<p>One method is to use a literal <code>NULL</code> in the text of an <code>INSERT</code> or <code>UPDATE</code> statement. For example, the SQL statement makes the <code>ENAME</code> column <code>NULL</code>.</p>
<pre>
     INSERT INTO emp1 (ename, empno, deptno)
        VALUES (NULL, 8010, 20)
</pre></li>
<li>
<p>Use indicator variables in the OCI bind call. See <a href="#i462559">"Indicator Variables"</a>.</p>
</li>
<li>
<p>Insert a <code>NULL</code> to set both the buffer length and maximum length parameters to zero on a bind call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Following the SQL standard requirements, Oracle Database returns an error if an attempt is made to fetch a null select-list item into a variable that does not have an associated indicator variable specified in the define call.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i462559"></a>
<div id="LNOCI16231" class="sect2">
<h3 class="sect2">Indicator Variables<a id="sthref328"></a></h3>
<p>Each bind and define OCI call has a parameter that associates an indicator variable, or an array of indicator variables, with a DML statement, a PL/SQL statement, or a query.</p>
<p>The C language does not have the concept of null values; therefore, you associate indicator variables with input variables to specify whether the associated placeholder is a <code>NULL</code>. When data is passed to an Oracle database, the values of these indicator variables determine whether a <code>NULL</code> is assigned to a database field.</p>
<p>For output variables, indicator variables determine whether the value returned from Oracle is a <code>NULL</code> or a truncated value. For a <code>NULL</code> fetch in an <a href="oci17msc001.htm#i575019">OCIStmtFetch2()</a> call or a truncation in an <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> call, the OCI call returns <code>OCI_SUCCESS_WITH_INFO</code>. The output indicator variable is set.</p>
<p>The data type of indicator variables is <code>sb2</code>. For arrays of indicator variables, the individual array elements should be of type <code>sb2</code>.</p>
<div id="LNOCI16232" class="sect3"><a id="sthref329"></a>
<h4 class="sect3">Input<a id="sthref330"></a></h4>
<p>For input host variables, the OCI application can assign the following values to an indicator variable:</p>
<div class="inftblinformal">
<table class="cellalignment1011" title="Input indicator variable values" summary="Input indicator values vs. action taken" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t54">Input Indicator Value</th>
<th class="cellalignment1012" id="r1c2-t54">Action Taken by Oracle Database</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t54" headers="r1c1-t54">-1</td>
<td class="cellalignment1013" headers="r2c1-t54 r1c2-t54">Oracle Database assigns a <code>NULL</code> to the column, ignoring the value of the input variable.</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t54" headers="r1c1-t54">&gt;=0</td>
<td class="cellalignment1013" headers="r3c1-t54 r1c2-t54">Oracle Database assigns the value of the input variable to the column.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNOCI16233" class="sect3"><a id="sthref331"></a>
<h4 class="sect3">Output</h4>
<p>On output, Oracle Database can assign the following values to an indicator variable:</p>
<div class="inftblinformal">
<table class="cellalignment1011" title="Output indicator variable values" summary="Output indicator values and meaning" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t55">Output Indicator Value</th>
<th class="cellalignment1012" id="r1c2-t55">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t55" headers="r1c1-t55">-2</td>
<td class="cellalignment1013" headers="r2c1-t55 r1c2-t55">The length of the item is greater than the length of the output variable; the item has been truncated. Additionally, the original length is longer than the maximum data length that can be returned in the <code>sb2</code> indicator variable.</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t55" headers="r1c1-t55">-1</td>
<td class="cellalignment1013" headers="r3c1-t55 r1c2-t55">The selected value is null, and the value of the output variable is unchanged.</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t55" headers="r1c1-t55">0</td>
<td class="cellalignment1013" headers="r4c1-t55 r1c2-t55">Oracle Database assigned an intact value to the host variable.</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t55" headers="r1c1-t55">&gt;0</td>
<td class="cellalignment1013" headers="r5c1-t55 r1c2-t55">The length of the item is greater than the length of the output variable; the item has been truncated. The positive value returned in the indicator variable is the actual length before truncation.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<div id="LNOCI16234" class="sect3"><a id="sthref332"></a>
<h4 class="sect3">Indicator Variables for Named Data Types and REFs<a id="sthref333"></a><a id="sthref334"></a><a id="sthref335"></a><a id="sthref336"></a></h4>
<p>Indicator variables for most data types introduced after release 8.0 behave as described earlier. The only exception is SQLT_NTY (a named data type). For data of type SQLT_NTY, the indicator variable must be a pointer to an indicator structure. Data of type SQLT_REF uses a standard scalar indicator, just like other variable types.</p>
<p>When database types are translated into C struct representations using the Object Type Translator (OTT), a null indicator structure is generated for each object type. This structure includes an atomic null indicator, plus indicators for each object attribute.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Documentation for the OTT in <a href="oci15ott.htm#g455369">Chapter 15</a>, and <a href="oci11obj.htm#i440892">"NULL Indicator Structure"</a> for information about NULL indicator structures</p>
</li>
<li>
<p>Descriptions of <code>OCIBindByName()</code> and <code>OCIBindByPos()</code> in <a href="oci16rel003.htm#i567777">"Bind, Define, and Describe Functions"</a>, and the sections <a href="oci12oty.htm#i437227">"Information for Named Data Type and REF Binds"</a>, and <a href="oci12oty.htm#i437290">"Information for Named Data Type and REF Defines, and PL/SQL OUT Binds"</a> for more information about setting indicator parameters for named data types and <code>REF</code>s</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i464495"></a>
<div id="LNOCI16235" class="sect2">
<h3 class="sect2">Canceling Calls<a id="sthref337"></a><a id="sthref338"></a><a id="sthref339"></a><a id="sthref340"></a></h3>
<p>On most operating systems, you can cancel long-running or repeated OCI calls by entering the operating system's interrupt character (usually Control+C) from the keyboard.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This is not to be confused with canceling a cursor, which is accomplished by calling <a href="oci17msc001.htm#i575019">OCIStmtFetch2()</a> with the <code>nrows</code> parameter set to zero.</div>
<p>When you cancel the long-running or repeated call using the operating system interrupt, the error code <code>ORA-01013</code> ("user requested cancel of current operation") is returned.</p>
<p>When given a particular service context pointer or server context pointer, the <code>OCIBreak()</code> function performs an immediate (asynchronous) stop of any currently executing OCI function associated with the server. It is normally used to stop a long-running OCI call being processed on the server. The <a href="oci17msc007.htm#i540646">OCIReset()</a> function is necessary to perform a protocol synchronization on a nonblocking connection after an OCI application stops a function with <a href="oci17msc007.htm#i540487">OCIBreak()</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="oci17msc007.htm#i540487">OCIBreak()</a> works on Windows systems.</div>
<p>The status of potentially long-running calls can be monitored using nonblocking calls. Use multithreading for new applications.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci08sca.htm#i456377">"Overview of OCI Multithreaded Development"</a></p>
</li>
<li>
<p><a href="oci08sca.htm#i434459">"OCIThread Package"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i462679"></a>
<div id="LNOCI16236" class="sect2">
<h3 class="sect2">Positioned Updates and Deletes<a id="sthref341"></a><a id="sthref342"></a><a id="sthref343"></a><a id="sthref344"></a><a id="sthref345"></a></h3>
<p>You can use the <code>ROWID</code> associated with a <code>SELECT</code>...<code>FOR</code> <code>UPDATE</code> <code>OF</code>... statement in a later <code>UPDATE</code> or <code>DELETE</code> statement. The <code>ROWID</code> is retrieved by calling <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> on the statement handle to retrieve the handle's <code>OCI_ATTR_ROWID</code> attribute.</p>
<p>For example, consider a SQL statement such as the following:</p>
<pre>
SELECT ename FROM emp1 WHERE empno = 7499 FOR UPDATE OF sal
</pre>
<p>When the fetch is performed, the <code>ROWID</code> attribute in the handle contains the row identifier of the selected row. You can retrieve the <code>ROWID</code> into a buffer in your program by calling <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> as follows:</p>
<pre>
OCIRowid *rowid;   /* the rowid in opaque format */
/* allocate descriptor with OCIDescriptorAlloc() */
status = OCIDescriptorAlloc ((void  *) envhp, (void  **) &amp;rowid,
     (ub4) OCI_DTYPE_ROWID, (size_t) 0, (void  **) 0);
status = OCIAttrGet ((void *) mystmtp, OCI_HTYPE_STMT,
     (void *) rowid, (ub4 *) 0, OCI_ATTR_ROWID, (OCIError *) myerrhp);
</pre>
<p>You can then use the saved <code>ROWID</code> in a <code>DELETE</code> or <code>UPDATE</code> statement. For example, if <code>rowid</code> is the buffer in which the row identifier has been saved, you can later process a SQL statement such as the following by binding the new salary to the <code>:1</code> placeholder and <code>rowid</code> to the <code>:2</code> placeholder.</p>
<pre>
UPDATE emp1 SET sal = :1 WHERE rowid = :2
</pre>
<p>Be sure to use data type code 104 (<code>ROWID</code> descriptor, see <a href="oci03typ.htm#CEGIEEJI">Table 3-2</a>) when binding <code>rowid</code> to <code>:2</code>.</p>
<p>By using prefetching, you can select an array of <code>ROWID</code>s for use in subsequent batch updates.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="oci03typ.htm#i435033">"UROWID"</a> and <a href="oci03typ.htm#i431453">"DATE"</a> for more information about <code>ROWID</code>s</li>
<li>
<p><a href="oci03typ.htm#i423688">"External Data Types"</a> for a table of external data types and codes</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16237" class="sect2"><a id="sthref346"></a>
<h3 class="sect2">Reserved Words</h3>
<p><span class="bold"><a id="sthref347"></a><a id="sthref348"></a><a id="sthref349"></a></span>Some words are reserved by Oracle. That is, they have a special meaning to Oracle and cannot be redefined. For this reason, you cannot use them to name database objects such as columns, tables, or indexes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF55621" href="../../server.112/e41084/ap_keywd001.htm#SQLRF55621"><span class="italic">Oracle Database SQL Language Reference</span></a> and <a class="olink LNPLS019" href="../../appdev.112/e25519/reservewords.htm#LNPLS019"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> to view the lists of the Oracle keywords or reserved words for SQL and PL/SQL</div>
<div id="LNOCI16238" class="sect3"><a id="sthref350"></a>
<h4 class="sect3"><a id="sthref351"></a>Oracle Reserved Namespaces</h4>
<p><a href="#g466511">Table 2-5</a> contains a list of namespaces that are reserved by Oracle. The initial characters of function names in Oracle libraries are restricted to the character strings in this list. Because of potential name conflicts, do not use function names that begin with these characters.</p>
<div id="LNOCI16239" class="tblformal">
<p class="titleintable"><a id="sthref352"></a><a id="g466511"></a>Table 2-5 Oracle Reserved Namespaces</p>
<table class="cellalignment1016" title="Oracle Reserved Namespaces " summary="Oracle reserved namespaces" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t62">Namespace</th>
<th class="cellalignment1012" id="r1c2-t62">Library</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t62" headers="r1c1-t62">
<p><code>XA</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t62 r1c2-t62">
<p>External functions for XA applications only</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t62" headers="r1c1-t62">
<p><code>SQ</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t62 r1c2-t62">
<p>External SQLLIB functions used by Oracle Precompiler and SQL*Module applications</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t62" headers="r1c1-t62">
<p><code>O, OCI</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t62 r1c2-t62">
<p>External OCI functions internal OCI functions</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t62" headers="r1c1-t62">
<p><code>UPI, KP</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t62 r1c2-t62">
<p>Function names from the Oracle UPI layer</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t62" headers="r1c1-t62">
<p><code>NA</code></p>
<p><code>NC</code></p>
<p><code>ND</code></p>
<p><code>NL</code></p>
<p><code>NM</code></p>
<p><code>NR</code></p>
<p><code>NS</code></p>
<p><code>NT</code></p>
<p><code>NZ</code></p>
<p><code>OSN</code></p>
<p><code>TTC</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t62 r1c2-t62">
<p>Oracle Net Native Services Product</p>
<p>Oracle Net RPC Project</p>
<p>Oracle Net Directory</p>
<p>Oracle Net Network Library Layer</p>
<p>Oracle Net Management Project</p>
<p>Oracle Net Interchange</p>
<p>Oracle Net Transparent Network Service</p>
<p>Oracle Net Drivers</p>
<p>Oracle Net Security Service</p>
<p>Oracle Net V1</p>
<p>Oracle Net Two Task</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t62" headers="r1c1-t62">
<p><code>GEN, L, ORA</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t62 r1c2-t62">
<p>Core library functions</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t62" headers="r1c1-t62">
<p><code>LI, LM, LX</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t62 r1c2-t62">
<p>Function names from the Oracle Globalization Support layer</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t62" headers="r1c1-t62">
<p><code>S</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t62 r1c2-t62">
<p>Function names from system-dependent libraries</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t62" headers="r1c1-t62">
<p><code>KO</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t62 r1c2-t62">
<p>Kernel Objects</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For a complete list of functions within a particular namespace, refer to the document that corresponds to the appropriate Oracle library.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCFDHCIG"></a>
<div id="LNOCI18126" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref353"></a>Polling Mode Operations in OCI</h3>
<p>OCI has calls that poll for completion. Examples of such polling mode calls are:</p>
<ul>
<li>
<p>OCI calls in nonblocking mode</p>
</li>
<li>
<p>OCI calls that operate on LOB data in pieces such as <a href="oci17msc002.htm#i578721">OCILobRead2()</a> and <a href="oci17msc002.htm#i578761">OCILobWrite2()</a></p>
</li>
<li>
<p><a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> and <a href="oci17msc001.htm#i575019">OCIStmtFetch2()</a> when used with <a href="oci17msc001.htm#i575292">OCIStmtSetPieceInfo()</a> and <a href="oci17msc001.htm#i575083">OCIStmtGetPieceInfo()</a></p>
</li>
</ul>
<p>In such cases, OCI requires that the application ensure that the same OCI call is repeated on the connection and nothing else is done on the connection in the interim. Performing any other OCI call on such a connection (when OCI has handed control back to the caller) can result in unexpected behavior.</p>
<p>Hence, with such polling mode OCI calls, the caller must ensure that the same call is repeated on the connection and that nothing else is done until the call completes.</p>
<p><a href="oci17msc007.htm#i540487">OCIBreak()</a> and <a href="oci17msc007.htm#i540646">OCIReset()</a> are exceptions to the rule. These calls are allowed so that the caller can stop an OCI call that has been started.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDFAHG"></a>
<div id="LNOCI16240" class="sect2">
<h3 class="sect2">Nonblocking Mode in OCI<a id="sthref354"></a><a id="sthref355"></a><a id="sthref356"></a></h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Because nonblocking mode requires the caller to repeat the same call until it completes, it increases CPU usage. Instead, use multithreaded mode.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci08sca.htm#i456377">"Overview of OCI Multithreaded Development"</a></p>
</li>
<li>
<p><a href="oci08sca.htm#i434459">"OCIThread Package"</a></p>
</li>
</ul>
</div>
<p>OCI provides the ability to establish a server connection in <span class="italic">blocking mode</span> or <span class="italic">nonblocking mode</span>. When a connection is made in blocking mode, an OCI call returns control to an OCI client application only when the call completes, either successfully or in error. With the nonblocking mode, control is immediately returned to the OCI program if the call could not complete, and the call returns a value of <code><a id="sthref357"></a>OCI_STILL_EXECUTING</code>.</p>
<p>In nonblocking mode, an application must test the return code of each OCI function to see if it returns <code>OCI_STILL_EXECUTING</code>. If it does, the OCI client can continue to process program logic while waiting to retry the OCI call to the server. This mode is particularly useful in graphical user interface (GUI) applications, real-time applications, and in distributed environments.</p>
<p>The nonblocking mode is not interrupt-driven. Rather, it is based on a polling paradigm, which means that the client application must check whether the pending call is finished at the server by executing the call again <span class="italic">with the exact same parameters</span>.</p>
<p>The following features and functions are not supported in nonblocking mode:</p>
<ul>
<li>
<p>Direct Path Load</p>
</li>
<li>
<p>LOB buffering</p>
</li>
<li>
<p>Objects</p>
</li>
<li>
<p>Query cache</p>
</li>
<li>
<p>Scrollable cursors</p>
</li>
<li>
<p>Transparent application failover (TAF)</p>
</li>
<li>
<p><code>OCIAQEnqArray</code>()</p>
</li>
<li>
<p><code>OCIAQDeqArray()</code></p>
</li>
<li>
<p><code>OCIDescribeAny()</code></p>
</li>
<li>
<p><code>OCILobArrayRead()</code></p>
</li>
<li>
<p><code>OCILobArrayWrite()</code></p>
</li>
<li>
<p><code>OCITransStart()</code></p>
</li>
<li>
<p><code>OCITransDetach()</code></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="LNOCI16241" class="sect2"><a id="sthref358"></a>
<h3 class="sect2">Setting Blocking Modes</h3>
<p>You can modify or check an application's blocking status by calling <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> to set the status, or <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> to read the status on the server context handle with the <code>attrtype</code> parameter set to <a id="sthref359"></a><code>OCI_ATTR_NONBLOCKING_MODE</code>. You must set this attribute only after <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> or <a href="oci16rel001.htm#i558312">OCILogon2()</a> has been called. Otherwise, an error is returned.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i429949">"Server Handle Attributes"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only functions that have a server context or a service context handle as a parameter can return <code>OCI_STILL_EXECUTING</code>.</div>
</div>
<!-- class="sect2" -->
<a id="i462856"></a>
<div id="LNOCI16242" class="sect2">
<h3 class="sect2">Canceling a Nonblocking Call<a id="sthref360"></a><a id="sthref361"></a></h3>
<p>You can cancel a long-running OCI call by using the <a href="oci17msc007.htm#i540487">OCIBreak()</a> function while the OCI call is in progress. You must then issue an <a href="oci17msc007.htm#i540646">OCIReset()</a> call to reset the asynchronous operation and protocol.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i462916"></a>
<div id="LNOCI16243" class="sect1">
<h2 class="sect1">Using PL/SQL in an OCI Program<a id="sthref362"></a><a id="sthref363"></a><a id="sthref364"></a><a id="sthref365"></a></h2>
<p>PL/SQL is Oracle's procedural extension to the SQL language. PL/SQL supports tasks that are more complicated than simple queries and SQL data manipulation language (DML) statements. PL/SQL enables you to group some constructs into a single block and execute it as a unit. These constructs include:</p>
<ul>
<li>
<p>One or more SQL statements</p>
</li>
<li>
<p>Variable declarations</p>
</li>
<li>
<p>Assignment statements</p>
</li>
<li>
<p>Procedural control statements such as <code>IF...THEN...ELSE</code> statements and loops</p>
</li>
<li>
<p>Exception handling</p>
</li>
</ul>
<p>You can use PL/SQL blocks in your OCI program to perform the following operations:</p>
<ul>
<li>
<p>Call Oracle stored procedures and stored functions</p>
</li>
<li>
<p>Combine procedural control statements with several SQL statements, to be executed as a unit</p>
</li>
<li>
<p>Access special PL/SQL features such as tables, <code>CURSOR FOR</code> loops, and exception handling</p>
</li>
<li>
<p>Use cursor variables</p>
</li>
<li>
<p>Operate on objects in a server</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Although OCI can only directly process anonymous blocks, and not named packages or procedures, you can always put the package or procedure call within an anonymous block and process that block.</p>
</li>
<li>
<p>Note that all OUT variables must be initialized to <code>NULL</code> (through an indicator of -1, or an actual length of 0) before a PL/SQL begin-end block can be executed in OCI.</p>
</li>
<li>
<p>OCI does not support the PL/SQL <code>RECORD</code> data type.</p>
</li>
<li>
<p>When binding a PL/SQL VARCHAR2 variable in OCI, the maximum size of the bind variable is 32512 bytes, because of the overhead of control structures.</p>
</li>
</ul>
</div>
<div class="infobox-note">
<p class="notep1">Caution:</p>
When you write PL/SQL code, it is important to remember that the parser treats everything between a pair of hyphens"--" and a carriage return character as a comment. So if comments are indicated on each line by "--", the C compiler can concatenate all lines in a PL/SQL block into a single line without putting a carriage return "\n" for each line. In this particular case, the parser fails to extract the PL/SQL code of a line if the previous line ends with a comment. To avoid the problem, the programmer should put "\n" after each "--" comment to ensure that the comment ends there.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS141" href="../../appdev.112/e25519/overview.htm#LNPLS141"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about coding PL/SQL blocks</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i462957"></a>
<div id="LNOCI16244" class="sect1">
<h2 class="sect1"><a id="sthref366"></a>OCI Globalization Support</h2>
<p>The following sections introduce OCI functions that can be used for globalization purposes, such as deriving locale information, manipulating strings, character set conversion, and OCI messaging. These functions are also described in detail in other chapters of this guide because they have multiple purposes and functionality.</p>
<a id="i462960"></a>
<div id="LNOCI16245" class="sect2">
<h3 class="sect2">Client Character Set Control from OCI</h3>
<p>The function <a id="sthref367"></a><a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> enables you to set character set information in applications independently from <a id="sthref368"></a>NLS_LANG and <a id="sthref369"></a>NLS_NCHAR settings. One application can have several environment handles initialized within the same system environment using different client-side character set IDs and national character set IDs. For example:</p>
<pre>
OCIEnvNlsCreate(OCIEnv **envhpp, ..., csid, ncsid); 
</pre>
<p>In this example, <code>csid</code> is the value for the character set ID, and <code>ncsid</code> is the value for the national character set ID. Either can be 0 or <a id="sthref370"></a><code>OCI_UTF16ID</code>. If both are 0, this is equivalent to using <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> instead. The other arguments are the same as for the <code>OCIEnvCreate()</code> call.</p>
<p>The <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> function is an enhancement for programmatic control of character sets, because it validates <code>OCI_UTF16ID</code>.</p>
<p>When character set IDs are set through the function <code>OCIEnvNlsCreate()</code>, they replace the settings in NLS_LANG and NLS_NCHAR. In addition to all character sets supported by the National Language Support Runtime Library (NLSRTL), <code>OCI_UTF16ID</code> is allowed as a character set ID in the <code>OCIEnvNlsCreate()</code> function, although this ID is not valid in NLS_LANG or NLS_NCHAR.</p>
<p>Any Oracle character set ID, except AL16UTF16, can be specified through the <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> function to specify the encoding of metadata, SQL <code>CHAR</code> data, and SQL <code>NCHAR</code> data.</p>
<p>You can retrieve character sets in NLS_LANG and NLS_NCHAR through another function, <a id="sthref371"></a><a href="oci22glb001.htm#i529146">OCINlsEnvironmentVariableGet()</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="oci16rel001.htm#i562098">"OCIEnvNlsCreate()"</a></li>
<li>
<p><a href="oci05bnd.htm#i436743">"Setting Client Character Sets in OCI"</a> <a id="sthref372"></a> for a pseudocode fragment that illustrates a sample usage of these calls</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16247" class="sect2"><a id="sthref373"></a>
<h3 class="sect2">Character Control and OCI Interfaces</h3>
<p>The <code><a id="sthref374"></a></code><a href="oci22glb001.htm#i532046">OCINlsGetInfo()</a> function returns information about <code>OCI_UTF16ID</code> if this value has been used in <code>OCIEnvNlsCreate()</code>.</p>
<p>The <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> function returns the character set ID and national character set ID that were passed into <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>. This is used to get <code><a id="sthref375"></a>OCI_ATTR_ENV_CHARSET_ID</code> and <a id="sthref376"></a><code>OCI_ATTR_ENV_NCHARSET_ID</code>. This includes the value <code>OCI_UTF16ID</code>.</p>
<p>If both <code>charset</code> and <code>ncharset</code> parameters were set to NULL by <code>OCIEnvNlsCreate()</code>, the character set IDs in <code>NLS_LANG</code> and <code>NLS_NCHAR</code> are returned.</p>
<p>The <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> function sets character IDs as the defaults if <code>OCI_ATTR_CHARSET_FORM</code> is reset through this function. The eligible character set IDs include <code>OCI_UTF16ID</code> if <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> is passed as <code>charset</code> or <code>ncharset</code>.</p>
<p>The <a href="oci16rel003.htm#i456223">OCIBindByName()</a> and <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> functions bind variables with the default character set in the <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a> call, including <code>OCI_UTF16ID</code>. The actual length and the returned length are always in bytes if <code>OCIEnvNlsCreate()</code> is used.</p>
<p>The <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a> function defines variables with the value of <code>charset</code> in <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, including <code>OCI_UTF16ID</code>, as the default. The actual length and returned length are always in bytes if <code>OCIEnvNlsCreate()</code> is used. This behavior for bind and define handles is different from that when <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a> is used and <code>OCI_UTF16ID</code> is the character set ID for the bind and define handles.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16248" class="sect2"><a id="sthref377"></a>
<h3 class="sect2">Character-Length Semantics in OCI</h3>
<p>OCI works as a translator between server and client, and passes around character information for constraint checking.</p>
<p>There are two kinds of character sets: variable-width and fixed-width. (A single-byte character set is a special case of a fixed-width character set where each byte stands for one character.)</p>
<p>For fixed-width character sets, constraint checking is easier, as the number of bytes is equal to a multiple of the number of characters. Therefore, scanning of the entire string is not needed to determine the number of characters for fixed-width character sets. However, for variable-width character sets, complete scanning is needed to determine the number of characters in a string.</p>
</div>
<!-- class="sect2" -->
<a id="i463015"></a>
<div id="LNOCI16249" class="sect2">
<h3 class="sect2">Character Set Support in OCI</h3>
<p>See <a href="oci06des.htm#i448663">"Character-Length Semantics Support in Describe Operations"</a> and <a href="oci05bnd.htm#i422770">"Character Conversion in OCI Binding and Defining"</a> for a complete discussion of character set support in OCI.</p>
</div>
<!-- class="sect2" -->
<a id="i463030"></a>
<div id="LNOCI16250" class="sect2">
<h3 class="sect2">Other OCI Globalization Support Functions</h3>
<p>Many globalization support functions accept either the environment handle or the user session handle. The OCI environment handle is associated with the client NLS environment variables. This environment does not change when <code>ALTER</code> <code>SESSION</code> statements are issued to the server. The character set associated with the environment handle is the client character set. The OCI session handle (returned by <code><a id="sthref378"></a></code><a href="oci16rel001.htm#i556608">OCISessionBegin()</a>) is associated with the server session environment. The NLS settings change when the session environment is modified with an <code>ALTER</code> <code>SESSION</code> statement. The character set associated with the session handle is the database character set.</p>
<p>Note that the OCI session handle does not have NLS settings associated with it until the first transaction begins in the session. <code>SELECT</code> statements do not begin a transaction.<a id="sthref379"></a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci22glb.htm#i534291">Chapter 22, "OCI Globalization Support Functions"</a></p>
</li>
<li>
<p><a class="olink NLSPG0074" href="../../server.112/e10729/ch7progrunicode.htm#NLSPG0074"><span class="italic">Oracle Database Globalization Support Guide</span></a><a id="sthref380"></a> for information about OCI programming with Unicode</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16251" class="sect2"><a id="sthref381"></a>
<h3 class="sect2">Getting Locale Information in OCI</h3>
<p>An Oracle Database locale consists of language, territory, and character set definitions. The locale determines conventions such as day and month names, as well as date, time, number, and currency formats. A globalized application follows a user's locale setting and cultural conventions. For example, when the locale is set to German, users expect to see day and month names in German.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci22glb001.htm#g556588">"OCI Locale Functions"</a></p>
</li>
<li>
<p><a href="oci22glb001.htm#i529146">"OCINlsEnvironmentVariableGet()"</a></p>
</li>
</ul>
</div>
<p>You can retrieve the following information with the <a href="oci22glb001.htm#i532046">OCINlsGetInfo()</a> function:</p>
<ul>
<li>
<p>Days of the week (translated)</p>
</li>
<li>
<p>Abbreviated days of the week (translated)</p>
</li>
<li>
<p>Month names (translated)</p>
</li>
<li>
<p>Abbreviated month names (translated)</p>
</li>
<li>
<p>Yes/no (translated)</p>
</li>
<li>
<p>AM/PM (translated)</p>
</li>
<li>
<p>AD/BC (translated)</p>
</li>
<li>
<p>Numeric format</p>
</li>
<li>
<p>Debit/credit</p>
</li>
<li>
<p>Date format</p>
</li>
<li>
<p>Currency formats</p>
</li>
<li>
<p>Default language</p>
</li>
<li>
<p>Default territory</p>
</li>
<li>
<p>Default character set</p>
</li>
<li>
<p>Default linguistic sort</p>
</li>
<li>
<p>Default calendar</p>
</li>
</ul>
<p>The code in <a href="#CIHBCBGC">Example 2-13</a> retrieves locale information and checks for errors.</p>
<div id="LNOCI18127" class="example">
<p class="titleinexample"><a id="CIHBCBGC"></a>Example 2-13 Getting Locale Information in OCI</p>
<pre>
sword MyPrintLinguisticName(envhp, errhp)
OCIEnv   *envhp;
OCIError *errhp;
{
  OraText  infoBuf[OCI_NLS_MAXBUFSZ];
  sword ret;
  
  ret = OCINlsGetInfo(envhp,                           /* environment handle */
                      errhp,                                 /* error handle */
                      infoBuf,                         /* destination buffer */
                      (size_t) OCI_NLS_MAXBUFSZ,              /* buffer size */
                      (ub2) OCI_NLS_LINGUISTIC_NAME);                /* item */

  if (ret != OCI_SUCCESS) 
  {
    checkerr(errhp, ret, OCI_HTYPE_ERROR);
    ret = OCI_ERROR; 
  }
  else
  {
    printf("NLS linguistic: %s\n", infoBuf);
   }
  return(ret);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16253" class="sect2"><a id="sthref382"></a>
<h3 class="sect2">Manipulating Strings in OCI</h3>
<p>Multibyte strings and wide-character strings are supported for string manipulation.</p>
<p>Multibyte strings are encoded in native Oracle character sets. Functions that operate on multibyte strings take the string as a whole unit with the length of the string calculated in bytes. Wide-character string (<code>wchar</code>) functions provide more flexibility in string manipulation. They support character-based and string-based operations where the length the string calculated in characters.</p>
<p>The wide-character data type, <a id="sthref383"></a><a id="sthref384"></a><code>OCIWchar</code>, is Oracle-specific and should not be confused with the <code>wchar_t</code> data type defined by the ANSI/ISO C standard. The Oracle wide-character data type is always 4 bytes in all operating systems, whereas the size of <code>wchar_t</code> depends on the implementation and the operating system. The Oracle wide-character data type normalizes multibyte characters so that they have a uniform fixed width for easy processing. This guarantees no data loss for round-trip conversion between the Oracle wide-character set and the native character set.</p>
<p>String manipulation can be classified into the following categories:</p>
<ul>
<li>
<p>Conversion of strings between multibyte and wide character</p>
</li>
<li>
<p>Character classifications</p>
</li>
<li>
<p>Case conversion</p>
</li>
<li>
<p>Calculations of display length</p>
</li>
<li>
<p>General string manipulation, such as comparison, concatenation, and searching</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a id="sthref385"></a><a href="oci22glb003.htm#i530674">"OCI String Manipulation Functions"</a></div>
</li>
</ul>
<p><a href="#CIHCHBAH">Example 2-14</a> shows a simple case of manipulating strings.</p>
<div id="LNOCI18128" class="example">
<p class="titleinexample"><a id="CIHCHBAH"></a>Example 2-14 Basic String Manipulation in OCI</p>
<pre>
size_t MyConvertMultiByteToWideChar(envhp, dstBuf, dstSize, srcStr)
OCIEnv     *envhp;
OCIWchar   *dstBuf;
size_t      dstSize;
OraText    *srcStr;                         /* null terminated source string */
{
  sword  ret;
  size_t dstLen = 0;
  size_t srcLen;

  /* get length of source string */
  srcLen = OCIMultiByteStrlen(envhp, srcStr);
  
  ret = OCIMultiByteInSizeToWideChar(envhp,            /* environment handle */
                 dstBuf,                               /* destination buffer */
                 dstSize,                         /* destination buffer size */
                 srcStr,                                    /* source string */
                 srcLen,                          /* length of source string */
                 &amp;dstLen);                  /* pointer to destination length */

  if (ret != OCI_SUCCESS)                                          
  {
    checkerr(envhp, ret, OCI_HTYPE_ENV);                 
  }
  return(dstLen);
}
</pre></div>
<!-- class="example" -->
<p>The OCI character classification functions are described in detail in <a href="oci22glb004.htm#i531645">"OCI Character Classification Functions"</a>.</p>
<p><a href="#CIHDCIFG">Example 2-15</a> shows how to classify characters in OCI.</p>
<div id="LNOCI18129" class="example">
<p class="titleinexample"><a id="CIHDCIFG"></a>Example 2-15 Classifying Characters in OCI</p>
<pre>
boolean MyIsNumberWideCharString(envhp, srcStr)
OCIEnv   *envhp;
OCIWchar *srcStr;                                 /* wide char source string */
{
  OCIWchar *pstr = srcStr;                        /* define and init pointer */
  boolean status = TRUE;            /* define and initialize status variable */

  /* Check input */
  if (pstr == (OCIWchar*) NULL)
    return(FALSE);


  if (*pstr == (OCIWchar) NULL)
    return(FALSE);

                                            /* check each character for digit */
  do 
  {
    if (OCIWideCharIsDigit(envhp, *pstr) != TRUE)
    {
      status = FALSE;
      break;                                  /* non-decimal digit character */
    }
  } while ( *++pstr != (OCIWchar) NULL);

  return(status);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16256" class="sect2"><a id="sthref386"></a>
<h3 class="sect2"><a id="sthref387"></a><a id="sthref388"></a>Converting Character Sets in OCI</h3>
<p>Conversion between Oracle character sets and Unicode (16-bit, fixed-width Unicode encoding) is supported. Replacement characters are used if a character has no mapping from Unicode to the Oracle character set. Therefore, conversion back to the original character set is not always possible without data loss.</p>
<p>Character set conversion functions involving Unicode character sets require data bind and define buffers to be aligned at a <code>ub2</code> address or an error is raised.</p>
<p><a href="#CIHCECEE">Example 2-16</a> shows a simple conversion into Unicode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a id="sthref389"></a><a href="oci22glb005.htm#i531650">"OCI Character Set Conversion Functions"</a></div>
<div id="LNOCI18130" class="example">
<p class="titleinexample"><a id="CIHCECEE"></a>Example 2-16 Converting Character Sets in OCI</p>
<pre>
/* Example of Converting Character Sets in OCI
--------------------------------------------*/

size_t MyConvertMultiByteToUnicode(envhp, errhp, dstBuf, dstSize, srcStr)
OCIEnv   *envhp;
OCIError *errhp;
ub2 *dstBuf;
size_t dstSize;
OraText *srcStr;
{
  size_t dstLen = 0;
  size_t srcLen = 0;
  OraText tb[OCI_NLS_MAXBUFSZ];   /* NLS info buffer */
  ub2    cid;                     /* OCIEnv character set ID */

  /* get OCIEnv character set */
  checkerr(errhp, OCINlsGetInfo(envhp, errhp, tb, sizeof(tb),
                                OCI_NLS_CHARACTER_SET));
  cid = OCINlsCharSetNameToId(envhp, tb);

  if (cid == OCI_UTF16ID)
  {
    ub2    *srcStrUb2 = (ub2*)srcStr;
    while (*srcStrUb2++) ++srcLen;
    srcLen *= sizeof(ub2);
  }
  else
    srcLen = OCIMultiByteStrlen(envhp, srcStr);

  checkerr(errhp,
    OCINlsCharSetConvert(
      envhp,       /* environment handle */
      errhp,       /* error handle */
      OCI_UTF16ID, /* Unicode character set ID */
      dstBuf,      /* destination buffer */
      dstSize,     /* size of destination buffer */
      cid,         /* OCIEnv character set ID */
      srcStr,      /* source string */
      srcLen,      /* length of source string */
      &amp;dstLen));   /* pointer to destination length */

  return dstLen/sizeof(ub2);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16258" class="sect2"><a id="sthref390"></a>
<h3 class="sect2">OCI Messaging Functions</h3>
<p>The user message API provides a simple interface for cartridge developers to retrieve their own messages and Oracle Database messages.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADDCI4934" href="../../appdev.112/e10765/serv_c_java_ref.htm#ADDCI4934"><span class="italic">Oracle Database Data Cartridge Developer's Guide</span></a></p>
</li>
<li>
<p><a href="oci22glb006.htm#BGBIAJDG">"OCI Messaging Functions"</a></p>
</li>
</ul>
</div>
<p><a href="#CIHJDGHD">Example 2-17</a> creates a message handle, initializes it to retrieve messages from <code>impus.msg</code>, retrieves message number 128, and closes the message handle. It assumes that OCI environment handles, OCI session handles, and the product, facility, and cache size have been initialized properly.</p>
<div id="LNOCI18131" class="example">
<p class="titleinexample"><a id="CIHJDGHD"></a>Example 2-17 Retrieving a Message from a Text Message File</p>
<pre>
OCIMsg msghnd;                                              /* message handle */
         /* initialize a message handle for retrieving messages from impus.msg*/
err = OCIMessageOpen(hndl,errhp, &amp;msghnd, prod,fac,OCI_DURATION_SESSION);
if (err != OCI_SUCCESS)
                                                            /* error handling */
...
                            /* retrieve the message with message number = 128 */
msgptr = OCIMessageGet(msghnd, 128, msgbuf, sizeof(msgbuf));
                         /* do something with the message, such as display it */
...
      /* close the message handle when there are no more messages to retrieve */
OCIMessageClose(hndl, errhp, msghnd);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i463306"></a>
<div id="LNOCI16260" class="sect2">
<h3 class="sect2"><a id="sthref391"></a>lmsgen Utility</h3>
<p>The <code>lmsgen</code> utility converts text-based message files (<code>.msg</code>) into binary format (<code>.msb</code>) so that Oracle Database messages and OCI messages provided by the user can be returned to OCI functions in the desired language.</p>
<p>The BNF syntax of the Imsgen utility is as follows:</p>
<pre>
lmsgen <span class="codeinlineitalic">text_file</span> <span class="codeinlineitalic">product</span> <span class="codeinlineitalic">facility</span> [<span class="codeinlineitalic">language</span>]
</pre>
<p>In the preceding syntax:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">text_file</span></code> is a message text file.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">product</span></code> is the name of the product.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">facility</span></code> is the name of the facility.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">language</span></code> is the optional message language corresponding to the language specified in the <code>NLS_LANG</code> parameter. The language parameter is required if the message file is not tagged properly with language.</p>
</li>
</ul>
<div id="LNOCI16262" class="sect3"><a id="sthref392"></a>
<h4 class="sect3">Guidelines for Text Message Files</h4>
<p>Text message files must follow these guidelines:</p>
<ul>
<li>
<p>Lines that start with "<code>/"</code> and "<code>//</code>" are treated as internal comments and are ignored.</p>
</li>
<li>
<p>To tag the message file with a specific language, include a line similar to the following:</p>
<pre>
#   CHARACTER_SET_NAME= Japanese_Japan.JA16EUC
</pre></li>
<li>
<p>Each message contains three fields:</p>
<pre>
<span class="codeinlineitalic">message_number</span>, <span class="codeinlineitalic">warning_level</span>, <span class="codeinlineitalic">message_text</span>
</pre>
<ul>
<li>
<p>The message number must be unique within a message file.</p>
</li>
<li>
<p>The warning level is not currently used. Set to 0.</p>
</li>
<li>
<p>The message text cannot be longer than 76 bytes.</p>
</li>
</ul>
</li>
</ul>
<p>The following is an example of an Oracle Database message text file:</p>
<pre>
/ Copyright (c) 2001 by the Oracle Corporation.  All rights reserved.
/ This is a test us7ascii message file
# CHARACTER_SET_NAME= american_america.us7ascii
/
00000, 00000, "Export terminated unsuccessfully\n"
00003, 00000, "no storage definition found for segment(%lu, %lu)"
</pre></div>
<!-- class="sect3" -->
<div id="LNOCI16263" class="sect3"><a id="sthref393"></a>
<h4 class="sect3">An Example of Creating a Binary Message File from a Text Message File</h4>
<p>The following table contains sample values for the <code>lmsgen</code> parameters:</p>
<div class="inftblinformal">
<table class="cellalignment1011" title="lmsgen parameter values" summary="lmsgen parameter and value" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t76">lmsgen Parameter</th>
<th class="cellalignment1012" id="r1c2-t76">Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t76" headers="r1c1-t76"><code><span class="codeinlineitalic">product</span></code></td>
<td class="cellalignment1013" headers="r2c1-t76 r1c2-t76"><code>$HOME/myApplication</code></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t76" headers="r1c1-t76"><code><span class="codeinlineitalic">facility</span></code></td>
<td class="cellalignment1013" headers="r3c1-t76 r1c2-t76"><code>imp</code></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t76" headers="r1c1-t76"><code><span class="codeinlineitalic">language</span></code></td>
<td class="cellalignment1013" headers="r4c1-t76 r1c2-t76"><code>AMERICAN</code></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t76" headers="r1c1-t76"><code><span class="codeinlineitalic">text_file</span></code></td>
<td class="cellalignment1013" headers="r5c1-t76 r1c2-t76"><code>impus.msg</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>The text message file is found in the following location:</p>
<pre>
$HOME/myApp/mesg/impus.msg
</pre>
<p>One of the lines in the text message file is:</p>
<pre>
00128,2, "Duplicate entry %s found in %s"
</pre>
<p>The <code>lmsgen</code> utility converts the text message file (<code>impus.msg</code>) into binary format, resulting in a file called <code>impus.msb</code>:</p>
<pre>
% lmsgen impus.msg $HOME/myApplication imp AMERICAN
</pre>
<p>The following output results:</p>
<pre>
Generating message file impus.msg --&gt;
/home/scott/myApplication/mesg/impus.msb

NLS Binary Message File Generation Utility: Version 9.2.0.0.0 -Production

Copyright (c) Oracle Corporation 1979, 2001.  All rights reserved.

CORE    9.2.0.0.0       Production
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci01int.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci03typ.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
