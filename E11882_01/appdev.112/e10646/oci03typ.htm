<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:22Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci02bas.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci04sql.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/79</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='oci03typ'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="LNOCI030" class="chapter"><a id="g467721"></a> <a id="i443570"></a>
<h1 class="chapter"><span class="secnum">3</span> Data Types</h1>
<p>This chapter provides a reference to Oracle external data types used by OCI applications. It also discusses Oracle data types and the conversions between internal and external representations that occur when you transfer data between your program and an Oracle database.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i423708">Oracle Data Types</a></p>
</li>
<li>
<p><a href="#i423684">Internal Data Types</a></p>
</li>
<li>
<p><a href="#i423688">External Data Types</a></p>
</li>
<li>
<p><a href="#i426447">Data Conversions</a></p>
</li>
<li>
<p><a href="#i446338">Typecodes</a></p>
</li>
<li>
<p><a href="#i429902">Definitions in oratypes.h</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30020" href="../../server.112/e41084/sql_elements001.htm#SQLRF30020"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about Oracle internal data types</div>
</li>
</ul>
<a id="i423708"></a>
<div id="LNOCI16264" class="sect1">
<h2 class="sect1">Oracle Data Types<a id="sthref394"></a><a id="sthref395"></a></h2>
<p>One of the main functions of an OCI program is to communicate with an Oracle database. The OCI application may retrieve data from database tables through SQL <code>SELECT</code> queries, or it may modify existing data in tables through <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements.</p>
<p>Inside a database, values are stored in columns in tables. Internally, Oracle represents data in particular formats known as <span class="italic">internal data types</span>. Examples of internal data types include <code>NUMBER</code>, <code>CHAR</code>, and <code>DATE</code> (see <a href="#CEGGBDFC">Table 3-1</a>).</p>
<p>In general, OCI applications do not work with internal data type representations of data, but with host language data types that are predefined by the language in which they are written. When data is transferred between an OCI client application and a database table, the OCI libraries convert the data between internal data types and <span class="italic">external data types</span>.</p>
<p>External data types are host language types that have been defined in the OCI header files. When an OCI application binds input variables, one of the bind parameters is an indication of the external data type code (or <span class="italic">SQLT code</span>) of the variable. Similarly, when output variables are specified in a define call, the external representation of the retrieved data must be specified.</p>
<p>In some cases, external data types are similar to internal types. External types provide a convenience for the programmer by making it possible to work with host language types instead of proprietary data formats.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Even though some external types are similar to internal types, an OCI application never binds to internal data types. They are discussed here because it can be useful to understand how internal types can map to external types.</div>
<p>OCI can perform a wide range of data type conversions when transferring data between an Oracle database and an OCI application. There are more OCI external data types than Oracle internal data types. In some cases, a single external type maps to an internal type; in other cases, multiple external types map to a single internal type.</p>
<p>The many-to-one mappings for some data types provide flexibility for the OCI programmer. For example, suppose that you are processing the following SQL statement:</p>
<pre>
SELECT sal FROM emp WHERE empno = :employee_number
</pre>
<p>You want the salary to be returned as character data, instead of a binary floating-point format. Therefore, you specify an Oracle database external string data type, such as <code>VARCHAR2</code> (code = 1) or <code>CHAR</code> (code = 96) for the <code>dty</code> parameter in the <a href="oci16rel003.htm#i459315">"OCIDefineByPos()"</a> call for the <code>sal</code> column. You also must declare a string variable in your program and specify its address in the <code>valuep</code> parameter. See <a href="#CEGIEEJI">Table 3-2</a> for more information.</p>
<p>If you want the salary information to be returned as a binary floating-point value, however, specify the <code>FLOAT</code> (code = 4) external data type. You also must define a variable of the appropriate type for the <code>valuep</code> parameter.</p>
<p>Oracle Database performs most data conversions transparently. The ability to specify almost any external data type provides a lot of power for performing specialized tasks. For example, you can input and output <code>DATE</code> values in pure binary format, with no character conversion involved, by using the <code>DATE</code> external data type. See the description of the <a href="#i431453">DATE</a> external data type for more information.</p>
<p>To control data conversion, you must use the appropriate external data type codes in the bind and define routines. You must tell Oracle Database where the input or output variables are in your OCI program and their data types and lengths.</p>
<p>OCI also supports an additional set of OCI typecodes that are used by the Oracle Database type management system to represent data types of object type attributes. You can use a set of predefined constants to represent these typecodes. The constants each contain the prefix <code>OCI_TYPECODE</code>.</p>
<p>In summary, the OCI programmer must be aware of the following different data types or data representations:</p>
<ul>
<li>
<p>Internal Oracle data types, which are used by table columns in an Oracle database. These also include data types used by PL/SQL that are not used by Oracle Database columns (for example, indexed table, boolean, record).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i423684">"Internal Data Types"</a></div>
</li>
</ul>
<pre>
</pre>
<ul>
<li>
<p>External OCI data types, which are used to specify host language representations of Oracle data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i423688">"External Data Types"</a> and <a href="#i429972">"Using External Data Type Codes"</a></div>
</li>
</ul>
<pre>
</pre>
<ul>
<li>
<p><code>OCI_TYPECODE</code> values, which are used by Oracle Database to represent type information for object type attributes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i446338">"Typecodes"</a>, and <a href="#i430014">"Relationship Between SQLT and OCI_TYPECODE Values"</a></div>
</li>
</ul>
<p>Information about a column's internal data type is conveyed to your application in the form of an internal data type code. With this information about what type of data is to be returned, your application can determine how to convert and format the output data. The Oracle internal data type codes are listed in the section <a href="#i423684">"Internal Data Types"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF30020" href="../../server.112/e41084/sql_elements001.htm#SQLRF30020"><span class="italic">Oracle Database SQL Language Reference</span></a> for detailed information about Oracle internal data types</p>
</li>
<li>
<p><a href="oci04sql.htm#i441217">"Describing Select-List Items"</a> for information about describing select-list items in a query</p>
</li>
</ul>
</div>
<a id="i429972"></a>
<div id="LNOCI16265" class="sect2">
<h3 class="sect2">Using External Data Type Codes<a id="sthref396"></a><a id="sthref397"></a></h3>
<p>An external data type code indicates to Oracle Database how a host variable represents data in your program. This determines how the data is converted when it is returned to output variables in your program, or how it is converted from input (bind) variables to Oracle Database column values. For example, to convert a <code>NUMBER</code> in an Oracle database column to a variable-length character array, you specify the <code>VARCHAR2</code> external data type code in the <code>OCIDefineByPos()</code> call that defines the output variable.</p>
<p>To convert a bind variable to a value in an Oracle Database column, specify the external data type code that corresponds to the type of the bind variable. For example, to input a character string such as 02-FEB-65 to a <code>DATE</code> column, specify the data type as a character string and set the length parameter to 9.</p>
<p>It is always the programmer's responsibility to ensure that values are convertible. If you try to insert the string <code>"</code>MY BIRTHDAY<code>"</code> into a <code>DATE</code> column, you get an error when you execute the statement.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CEGIEEJI">Table 3-2</a> for a complete list of the external data types and data type codes</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i423684"></a>
<div id="LNOCI16266" class="sect1">
<h2 class="sect1">Internal Data Types<a id="sthref398"></a><a id="sthref399"></a></h2>
<p><a href="#CEGGBDFC">Table 3-1</a> lists the internal Oracle Database data types (also known as <span class="italic">built-in</span>), along with each type's maximum internal length and data type code.</p>
<div id="LNOCI16267" class="tblformal">
<p class="titleintable"><a id="sthref400"></a><a id="CEGGBDFC"></a>Table 3-1 Internal Oracle Database Data Types</p>
<table class="cellalignment1016" title="Internal Oracle Database Data Types" summary="This table is described in the preceding text" >
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t9"><a id="sthref401"></a><a id="sthref402"></a>Internal Oracle Database Data Type</th>
<th class="cellalignment1012" id="r1c2-t9">Maximum Internal Length</th>
<th class="cellalignment1012" id="r1c3-t9">Data Type Code</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t9" headers="r1c1-t9">
<p><code>VARCHAR2, NVARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t9 r1c2-t9">
<p>4000 bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t9 r1c3-t9">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t9" headers="r1c1-t9">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t9 r1c2-t9">
<p>21 bytes</p>
</td>
<td class="cellalignment1013" headers="r3c1-t9 r1c3-t9">
<p>2</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t9" headers="r1c1-t9">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t9 r1c2-t9">
<p>2^31-1 bytes (2 gigabytes)</p>
</td>
<td class="cellalignment1013" headers="r4c1-t9 r1c3-t9">
<p>8</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t9" headers="r1c1-t9">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t9 r1c2-t9">
<p>7 bytes</p>
</td>
<td class="cellalignment1013" headers="r5c1-t9 r1c3-t9">
<p>12</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t9" headers="r1c1-t9">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t9 r1c2-t9">
<p>2000 bytes</p>
</td>
<td class="cellalignment1013" headers="r6c1-t9 r1c3-t9">
<p>23</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t9" headers="r1c1-t9">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t9 r1c2-t9">
<p>2^31-1 bytes</p>
</td>
<td class="cellalignment1013" headers="r7c1-t9 r1c3-t9">
<p>24</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t9" headers="r1c1-t9">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t9 r1c2-t9">
<p>10 bytes</p>
</td>
<td class="cellalignment1013" headers="r8c1-t9 r1c3-t9">
<p>69</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t9" headers="r1c1-t9">
<p><code>CHAR, NCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t9 r1c2-t9">
<p>2000 bytes</p>
</td>
<td class="cellalignment1013" headers="r9c1-t9 r1c3-t9">
<p>96</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t9" headers="r1c1-t9">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t9 r1c2-t9">
<p>4 bytes</p>
</td>
<td class="cellalignment1013" headers="r10c1-t9 r1c3-t9">
<p>100</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t9" headers="r1c1-t9">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t9 r1c2-t9">
<p>8 bytes</p>
</td>
<td class="cellalignment1013" headers="r11c1-t9 r1c3-t9">
<p>101</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t9" headers="r1c1-t9">
<p>User-defined type (object type, <code>VARRAY</code>, <code>nested table</code>)</p>
</td>
<td class="cellalignment1013" headers="r12c1-t9 r1c2-t9">
<p>Not Applicable</p>
</td>
<td class="cellalignment1013" headers="r12c1-t9 r1c3-t9">
<p>108</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t9" headers="r1c1-t9">
<p><code>REF</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t9 r1c2-t9">
<p>Not Applicable</p>
</td>
<td class="cellalignment1013" headers="r13c1-t9 r1c3-t9">
<p>111</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t9" headers="r1c1-t9">
<p><code>CLOB, NCLOB</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t9 r1c2-t9">
<p>128 terabytes</p>
</td>
<td class="cellalignment1013" headers="r14c1-t9 r1c3-t9">
<p>112</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t9" headers="r1c1-t9">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t9 r1c2-t9">
<p>128 terabytes</p>
</td>
<td class="cellalignment1013" headers="r15c1-t9 r1c3-t9">
<p>113</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t9" headers="r1c1-t9">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t9 r1c2-t9">
<p>Maximum operating system file size or <code>UB8MAXVAL</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t9 r1c3-t9">
<p>114</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t9 r1c2-t9">
<p>11 bytes</p>
</td>
<td class="cellalignment1013" headers="r17c1-t9 r1c3-t9">
<p>180</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t9 r1c2-t9">
<p>13 bytes</p>
</td>
<td class="cellalignment1013" headers="r18c1-t9 r1c3-t9">
<p>181</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t9" headers="r1c1-t9">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t9 r1c2-t9">
<p>5 bytes</p>
</td>
<td class="cellalignment1013" headers="r19c1-t9 r1c3-t9">
<p>182</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t9" headers="r1c1-t9">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t9 r1c2-t9">
<p>11 bytes</p>
</td>
<td class="cellalignment1013" headers="r20c1-t9 r1c3-t9">
<p>183</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t9" headers="r1c1-t9">
<p><code>UROWID</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t9 r1c2-t9">
<p>3950 bytes</p>
</td>
<td class="cellalignment1013" headers="r21c1-t9 r1c3-t9">
<p>208</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t9 r1c2-t9">
<p>11 bytes</p>
</td>
<td class="cellalignment1013" headers="r22c1-t9 r1c3-t9">
<p>231</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF30020" href="../../server.112/e41084/sql_elements001.htm#SQLRF30020"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about these built-in data types</div>
<div id="LNOCI16268" class="sect2"><a id="sthref403"></a>
<h3 class="sect2">LONG, RAW, LONG RAW, VARCHAR2</h3>
<p>You can use the piecewise capabilities provided by <a href="oci16rel003.htm#i456223">OCIBindByName()</a>, <a href="oci16rel003.htm#i456224">OCIBindByPos()</a>, <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a>, <a href="oci17msc001.htm#i575083">OCIStmtGetPieceInfo()</a>, and <a href="oci17msc001.htm#i575292">OCIStmtSetPieceInfo()</a> to perform inserts, updates or fetches involving column data of the <code>LONG</code>, <code>RAW</code>, <code>LONG RAW</code>, and <code>VARCHAR2</code> data types.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16269" class="sect2"><a id="sthref404"></a>
<h3 class="sect2">Character Strings and Byte Arrays</h3>
<p>You can use following Oracle internal data types to specify columns that contain characters or arrays of bytes: <code>CHAR</code>, <code>VARCHAR2</code>, <code>RAW</code>, <code>LONG</code>, and <code>LONG</code> <code>RAW</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
LOBs can contain characters and <code>BFILE</code>s can contain binary data. They are handled differently than other types, so they are not included in this discussion. See <a href="oci07lob.htm#g452677">Chapter 7</a> for more information about these data types.</div>
<p><code>CHAR</code>, <code>VARCHAR2</code>, and <code>LONG</code> columns normally hold character data. <code>RAW</code> and <code>LONG</code> <code>RAW</code> hold bytes that are not interpreted as characters (for example, pixel values in a bit-mapped graphic image). Character data can be transformed when it is passed through a gateway between networks. Character data passed between machines using different languages, where single characters may be represented by differing numbers of bytes, can be significantly changed in length. Raw data is never converted in this way.</p>
<p>It is the responsibility of the database designer to choose the appropriate Oracle internal data type for each column in the table. The OCI programmer must be aware of the many possible ways that character and byte-array data can be represented and converted between variables in the OCI program and Oracle Database tables.</p>
<p>When an array holds characters, the length parameter for the array in an OCI call is always passed in and returned in bytes, not characters.</p>
</div>
<!-- class="sect2" -->
<a id="i435033"></a>
<div id="LNOCI16270" class="sect2">
<h3 class="sect2">UROWID<a id="sthref405"></a></h3>
<p><a id="sthref406"></a><a id="sthref407"></a><a id="sthref408"></a>The Universal <code>ROWID</code> (<code>UROWID</code>) is a data type that can store both logical and physical rowids of Oracle Database tables. Logical rowids are primary key-based logical identifiers for the rows of index-organized tables (IOTs).</p>
<p>To use columns of the <code>UROWID</code> data type, the value of the <code>COMPATIBLE</code> initialization parameter must be set to 8.1 or higher.</p>
<p>The following host variables can be bound to Universal <code>ROWID</code>s:</p>
<ul>
<li>
<p><code>SQLT_CHR</code> (<code>VARCHAR2</code>)</p>
</li>
<li>
<p><code>SQLT_VCS</code> (<code>VARCHAR</code>)</p>
</li>
<li>
<p><code>SQLT_STR</code> (<code>NULL</code>-terminated string)</p>
</li>
<li>
<p><code>SQLT_LVC</code> (<code>LONG VARCHAR</code>)</p>
</li>
<li>
<p><code>SQLT_AFC</code> (<code>CHAR</code>)</p>
</li>
<li>
<p><code>SQLT_AVC</code> (<code>CHARZ</code>)</p>
</li>
<li>
<p><code>SQLT_VST</code> (OCI String)</p>
</li>
<li>
<p><code>SQLT_RDD</code> (<code>ROWID</code> descriptor)</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i448005"></a>
<div id="LNOCI031" class="sect2">
<h3 class="sect2"><a id="sthref409"></a>BINARY_FLOAT and <a id="sthref410"></a>BINARY_DOUBLE</h3>
<p>The <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> data types represent single-precision and double-precision floating point values that mostly conform to the IEEE754 Standard for Floating-Point Arithmetic.</p>
<p>Prior to the addition of these data types with release 10.1, all numeric values in an Oracle Database were stored in the Oracle <code>NUMBER</code> format. These new binary floating point types do not replace Oracle <code>NUMBER</code>. Rather, they are alternatives to Oracle <code>NUMBER</code> that provide the advantage of using less disk storage.</p>
<p>These internal types are represented by the following codes:</p>
<ul>
<li>
<p><a id="sthref411"></a><code>SQLT_IBFLOAT</code> for <code>BINARY_FLOAT</code></p>
</li>
<li>
<p><a id="sthref412"></a><code>SQLT_IBDOUBLE</code> for <code>BINARY_DOUBLE</code></p>
</li>
</ul>
<p>All the following host variables can be bound to <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> data types:</p>
<ul>
<li>
<p><code>SQLT_BFLOAT</code> (native float)</p>
</li>
<li>
<p><code>SQLT_BDOUBLE</code> (native double)</p>
</li>
<li>
<p><code>SQLT_INT</code> (integer)</p>
</li>
<li>
<p><code>SQLT_FLT</code> (float)</p>
</li>
<li>
<p><code>SQLT_NUM</code> (Oracle <code>NUMBER</code>)</p>
</li>
<li>
<p><code>SQLT_UIN</code> (unsigned)</p>
</li>
<li>
<p><code>SQLT_VNU</code> (<code>VARNUM</code>)</p>
</li>
<li>
<p><code>SQLT_CHR</code> (<code>VARCHAR2</code>)</p>
</li>
<li>
<p><code>SQLT_VCS</code> (<code>VARCHAR</code>)</p>
</li>
<li>
<p><code>SQLT_STR</code> (<code>NULL</code>-terminated String)</p>
</li>
<li>
<p><code>SQLT_LVC</code> (<code>LONG</code> <code>VARCHAR</code>)</p>
</li>
<li>
<p><code>SQLT_AFC</code> (<code>CHAR</code>)</p>
</li>
<li>
<p><code>SQLT_AVC</code> (<code>CHARZ</code>)</p>
</li>
<li>
<p><code>SQLT_VST</code> (OCIString)</p>
</li>
</ul>
<p>For best performance, use external types <code>SQLT_BFLOAT</code> and <code>SQLT_BDOUBLE</code> in conjunction with the <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> data types.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i423688"></a>
<div id="LNOCI16271" class="sect1">
<h2 class="sect1">External Data Types<a id="sthref413"></a><a id="sthref414"></a></h2>
<p><a href="#CEGIEEJI">Table 3-2</a> lists data type codes for external data types. For each data type, the table lists the program variable types for C from or to which Oracle Database internal data is normally converted.</p>
<div id="LNOCI16272" class="tblformalwide">
<p class="titleintable"><a id="sthref415"></a><a id="CEGIEEJI"></a>Table 3-2 External Data Types and Codes</p>
<table class="cellalignment1011" title="External Data Types and Codes " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t12">External Data Type</th>
<th class="cellalignment1012" id="r1c2-t12">Code</th>
<th class="cellalignment1012" id="r1c3-t12">Program Variable<a id="sthref416" href="#sthref416" onclick='footdisplay(1,"Where the length is shown as n, it is a variable, and depends on the requirements of the program (or of the operating system for ROWID).")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment1012" id="r1c4-t12">OCI-Defined Constant</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t12" headers="r1c1-t12">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t12 r1c2-t12">
<p>1</p>
</td>
<td class="cellalignment1013" headers="r2c1-t12 r1c3-t12">
<p>char[n]</p>
</td>
<td class="cellalignment1013" headers="r2c1-t12 r1c4-t12">
<p><code>SQLT_CHR</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t12" headers="r1c1-t12">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t12 r1c2-t12">
<p>2</p>
</td>
<td class="cellalignment1013" headers="r3c1-t12 r1c3-t12">
<p>unsigned char[21]</p>
</td>
<td class="cellalignment1013" headers="r3c1-t12 r1c4-t12">
<p><code>SQLT_NUM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t12" headers="r1c1-t12">
<p>8-bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t12 r1c2-t12">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r4c1-t12 r1c3-t12">
<p>signed char</p>
</td>
<td class="cellalignment1013" headers="r4c1-t12 r1c4-t12">
<p><code>SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t12" headers="r1c1-t12">
<p>16-bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t12 r1c2-t12">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r5c1-t12 r1c3-t12">
<p>signed short, signed int</p>
</td>
<td class="cellalignment1013" headers="r5c1-t12 r1c4-t12">
<p><code>SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t12" headers="r1c1-t12">
<p>32-bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t12 r1c2-t12">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r6c1-t12 r1c3-t12">
<p>signed int, signed long</p>
</td>
<td class="cellalignment1013" headers="r6c1-t12 r1c4-t12">
<p><code>SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t12" headers="r1c1-t12">
<p>64-bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t12 r1c2-t12">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r7c1-t12 r1c3-t12">
<p>signed long, signed long long</p>
</td>
<td class="cellalignment1013" headers="r7c1-t12 r1c4-t12">
<p><code>SQLT_INT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t12" headers="r1c1-t12">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t12 r1c2-t12">
<p>4</p>
</td>
<td class="cellalignment1013" headers="r8c1-t12 r1c3-t12">
<p>float, double</p>
</td>
<td class="cellalignment1013" headers="r8c1-t12 r1c4-t12">
<p><code>SQLT_FLT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t12" headers="r1c1-t12">
<p><code>NULL</code>-terminated <code>STRING</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t12 r1c2-t12">
<p>5</p>
</td>
<td class="cellalignment1013" headers="r9c1-t12 r1c3-t12">
<p>char[n+1]</p>
</td>
<td class="cellalignment1013" headers="r9c1-t12 r1c4-t12">
<p><code>SQLT_STR</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t12" headers="r1c1-t12">
<p><code>VARNUM</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t12 r1c2-t12">
<p>6</p>
</td>
<td class="cellalignment1013" headers="r10c1-t12 r1c3-t12">
<p>char[22]</p>
</td>
<td class="cellalignment1013" headers="r10c1-t12 r1c4-t12">
<p><code>SQLT_VNU</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t12" headers="r1c1-t12">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t12 r1c2-t12">
<p>8</p>
</td>
<td class="cellalignment1013" headers="r11c1-t12 r1c3-t12">
<p>char[n]</p>
</td>
<td class="cellalignment1013" headers="r11c1-t12 r1c4-t12">
<p><code>SQLT_LNG</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t12" headers="r1c1-t12">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t12 r1c2-t12">
<p>9</p>
</td>
<td class="cellalignment1013" headers="r12c1-t12 r1c3-t12">
<p>char[n+sizeof(short integer)]</p>
</td>
<td class="cellalignment1013" headers="r12c1-t12 r1c4-t12">
<p><code>SQLT_VCS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t12" headers="r1c1-t12">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t12 r1c2-t12">
<p>12</p>
</td>
<td class="cellalignment1013" headers="r13c1-t12 r1c3-t12">
<p>char[7]</p>
</td>
<td class="cellalignment1013" headers="r13c1-t12 r1c4-t12">
<p><code>SQLT_DAT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t12" headers="r1c1-t12">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t12 r1c2-t12">
<p>15</p>
</td>
<td class="cellalignment1013" headers="r14c1-t12 r1c3-t12">
<p>unsigned char[n+sizeof(short integer)]</p>
</td>
<td class="cellalignment1013" headers="r14c1-t12 r1c4-t12">
<p><code>SQLT_VBI</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t12" headers="r1c1-t12">
<p>native float</p>
</td>
<td class="cellalignment1013" headers="r15c1-t12 r1c2-t12">
<p>21</p>
</td>
<td class="cellalignment1013" headers="r15c1-t12 r1c3-t12">
<p>float</p>
</td>
<td class="cellalignment1013" headers="r15c1-t12 r1c4-t12">
<p><code>SQLT_BFLOAT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t12" headers="r1c1-t12">
<p>native double</p>
</td>
<td class="cellalignment1013" headers="r16c1-t12 r1c2-t12">
<p>22</p>
</td>
<td class="cellalignment1013" headers="r16c1-t12 r1c3-t12">
<p>double</p>
</td>
<td class="cellalignment1013" headers="r16c1-t12 r1c4-t12">
<p><code>SQLT_BDOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t12" headers="r1c1-t12">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t12 r1c2-t12">
<p>23</p>
</td>
<td class="cellalignment1013" headers="r17c1-t12 r1c3-t12">
<p>unsigned char[n]</p>
</td>
<td class="cellalignment1013" headers="r17c1-t12 r1c4-t12">
<p><code>SQLT_BIN</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t12" headers="r1c1-t12">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t12 r1c2-t12">
<p>24</p>
</td>
<td class="cellalignment1013" headers="r18c1-t12 r1c3-t12">
<p>unsigned char[n]</p>
</td>
<td class="cellalignment1013" headers="r18c1-t12 r1c4-t12">
<p><code>SQLT_LBI</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t12" headers="r1c1-t12">
<p><code>UNSIGNED INT</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t12 r1c2-t12">
<p>68</p>
</td>
<td class="cellalignment1013" headers="r19c1-t12 r1c3-t12">
<p>unsigned</p>
</td>
<td class="cellalignment1013" headers="r19c1-t12 r1c4-t12">
<p><code>SQLT_UIN</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t12" headers="r1c1-t12">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t12 r1c2-t12">
<p>94</p>
</td>
<td class="cellalignment1013" headers="r20c1-t12 r1c3-t12">
<p>char[n+sizeof(integer)]</p>
</td>
<td class="cellalignment1013" headers="r20c1-t12 r1c4-t12">
<p><code>SQLT_LVC</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t12" headers="r1c1-t12">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t12 r1c2-t12">
<p>95</p>
</td>
<td class="cellalignment1013" headers="r21c1-t12 r1c3-t12">
<p>unsigned char[n+sizeof(integer)]</p>
</td>
<td class="cellalignment1013" headers="r21c1-t12 r1c4-t12">
<p><code>SQLT_LVB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t12" headers="r1c1-t12">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t12 r1c2-t12">
<p>96</p>
</td>
<td class="cellalignment1013" headers="r22c1-t12 r1c3-t12">
<p>char[n]</p>
</td>
<td class="cellalignment1013" headers="r22c1-t12 r1c4-t12">
<p><code>SQLT_AFC</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t12" headers="r1c1-t12">
<p><code>CHARZ</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t12 r1c2-t12">
<p>97</p>
</td>
<td class="cellalignment1013" headers="r23c1-t12 r1c3-t12">
<p>char[n+1]</p>
</td>
<td class="cellalignment1013" headers="r23c1-t12 r1c4-t12">
<p><code>SQLT_AVC</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t12" headers="r1c1-t12">
<p><code>ROWID</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r24c1-t12 r1c2-t12">
<p>104</p>
</td>
<td class="cellalignment1013" headers="r24c1-t12 r1c3-t12">
<p>OCIRowid *</p>
</td>
<td class="cellalignment1013" headers="r24c1-t12 r1c4-t12">
<p><code>SQLT_RDD</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t12" headers="r1c1-t12">
<p>NAMED DATATYPE</p>
</td>
<td class="cellalignment1013" headers="r25c1-t12 r1c2-t12">
<p>108</p>
</td>
<td class="cellalignment1013" headers="r25c1-t12 r1c3-t12">
<p>struct</p>
</td>
<td class="cellalignment1013" headers="r25c1-t12 r1c4-t12">
<p><code>SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t12" headers="r1c1-t12">
<p><code>REF</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t12 r1c2-t12">
<p>110</p>
</td>
<td class="cellalignment1013" headers="r26c1-t12 r1c3-t12">
<p>OCIRef</p>
</td>
<td class="cellalignment1013" headers="r26c1-t12 r1c4-t12">
<p><code>SQLT_REF</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t12" headers="r1c1-t12">
<p>Character LOB descriptor</p>
</td>
<td class="cellalignment1013" headers="r27c1-t12 r1c2-t12">
<p>112</p>
</td>
<td class="cellalignment1013" headers="r27c1-t12 r1c3-t12">
<p>OCILobLocator<a id="CEGIEIJD" href="#CEGIEIJD" onclick='footdisplay(2,"In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r27c1-t12 r1c4-t12">
<p><code>SQLT_CLOB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t12" headers="r1c1-t12">
<p>Binary LOB descriptor</p>
</td>
<td class="cellalignment1013" headers="r28c1-t12 r1c2-t12">
<p>113</p>
</td>
<td class="cellalignment1013" headers="r28c1-t12 r1c3-t12">
<p>OCILobLocator<a id="sthref417" href="#sthref417" onclick='footdisplay(2,"In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment1013" headers="r28c1-t12 r1c4-t12">
<p><code>SQLT_BLOB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t12" headers="r1c1-t12">
<p>Binary FILE descriptor</p>
</td>
<td class="cellalignment1013" headers="r29c1-t12 r1c2-t12">
<p>114</p>
</td>
<td class="cellalignment1013" headers="r29c1-t12 r1c3-t12">
<p>OCILobLocator</p>
</td>
<td class="cellalignment1013" headers="r29c1-t12 r1c4-t12">
<p><code>SQLT_FILE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r30c1-t12" headers="r1c1-t12">
<p><code>OCI STRING</code> type</p>
</td>
<td class="cellalignment1013" headers="r30c1-t12 r1c2-t12">
<p>155</p>
</td>
<td class="cellalignment1013" headers="r30c1-t12 r1c3-t12">
<p>OCIString</p>
</td>
<td class="cellalignment1013" headers="r30c1-t12 r1c4-t12">
<p><code>SQLT_VST</code><a id="CEGHABFC" href="#CEGHABFC" onclick='footdisplay(3,"For more information about the use of these data types, see Chapter 12.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r31c1-t12" headers="r1c1-t12">
<p><code>OCI DATE</code> type</p>
</td>
<td class="cellalignment1013" headers="r31c1-t12 r1c2-t12">
<p>156</p>
</td>
<td class="cellalignment1013" headers="r31c1-t12 r1c3-t12">
<p>OCIDate *</p>
</td>
<td class="cellalignment1013" headers="r31c1-t12 r1c4-t12">
<p><code>SQLT_ODT</code><a id="sthref418" href="#sthref418" onclick='footdisplay(3,"For more information about the use of these data types, see Chapter 12.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r32c1-t12" headers="r1c1-t12">
<p><code>ANSI DATE</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r32c1-t12 r1c2-t12">
<p>184</p>
</td>
<td class="cellalignment1013" headers="r32c1-t12 r1c3-t12">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment1013" headers="r32c1-t12 r1c4-t12">
<p><code>SQLT_DATE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r33c1-t12" headers="r1c1-t12">
<p><code>TIMESTAMP</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r33c1-t12 r1c2-t12">
<p>187</p>
</td>
<td class="cellalignment1013" headers="r33c1-t12 r1c3-t12">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment1013" headers="r33c1-t12 r1c4-t12">
<p><code>SQLT_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r34c1-t12" headers="r1c1-t12">
<p><code>TIMESTAMP WITH TIME ZONE</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r34c1-t12 r1c2-t12">
<p>188</p>
</td>
<td class="cellalignment1013" headers="r34c1-t12 r1c3-t12">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment1013" headers="r34c1-t12 r1c4-t12">
<p><code>SQLT_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r35c1-t12" headers="r1c1-t12">
<p><code>INTERVAL YEAR TO MONTH</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r35c1-t12 r1c2-t12">
<p>189</p>
</td>
<td class="cellalignment1013" headers="r35c1-t12 r1c3-t12">
<p>OCIInterval *</p>
</td>
<td class="cellalignment1013" headers="r35c1-t12 r1c4-t12">
<p><code>SQLT_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r36c1-t12" headers="r1c1-t12">
<p><code>INTERVAL DAY TO SECOND</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r36c1-t12 r1c2-t12">
<p>190</p>
</td>
<td class="cellalignment1013" headers="r36c1-t12 r1c3-t12">
<p>OCIInterval *</p>
</td>
<td class="cellalignment1013" headers="r36c1-t12 r1c4-t12">
<p><code>SQLT_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r37c1-t12" headers="r1c1-t12">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r37c1-t12 r1c2-t12">
<p>232</p>
</td>
<td class="cellalignment1013" headers="r37c1-t12 r1c3-t12">
<p>OCIDateTime *</p>
</td>
<td class="cellalignment1013" headers="r37c1-t12 r1c4-t12">
<p><code>SQLT_TIMESTAMP_LTZ</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Where the length is shown as n, it is a variable, and depends on the requirements of the program (or of the operating system for ROWID).</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>In applications using data type mappings generated by OTT, CLOBs may be mapped as OCIClobLocator, and BLOBs may be mapped as OCIBlobLocator. For more information, see Chapter 15.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>For more information about the use of these data types, see Chapter 12.</p>
<p>The following two types are internal to PL/SQL and cannot be returned as values by OCI:</p>
<ul>
<li>
<p>Boolean, <code>SQLT_BOL</code></p>
</li>
<li>
<p>Record, <code>SQLT_REC</code></p>
</li>
</ul>
<div id="LNOCI16273" class="sect2"><a id="sthref419"></a>
<h3 class="sect2">VARCHAR2<a id="sthref420"></a><a id="sthref421"></a></h3>
<p>The <code>VARCHAR2</code> data type is a variable-length string of characters with a maximum length of 4000 bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using Oracle Database objects, you can work with a special <code>OCIString</code> external data type using a set of predefined OCI functions. See <a href="oci12oty.htm#g453655">Chapter 12</a> for more information about this data type.</div>
<div id="LNOCI16274" class="sect3"><a id="sthref422"></a>
<h4 class="sect3">Input</h4>
<p>The <code>value_sz</code> parameter determines the length in the <a href="oci16rel003.htm#i456223">OCIBindByName()</a> or <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> call.</p>
<p>If the <code>value_sz</code> parameter is greater than zero, Oracle Database obtains the bind variable value by reading exactly that many bytes, starting at the buffer address in your program. Trailing blanks are stripped, and the resulting value is used in the SQL statement or PL/SQL block. If, with an <code>INSERT</code> statement, the resulting value is longer than the defined length of the database column, the <code>INSERT</code> fails, and an error is returned.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A trailing <code>NULL</code> is not stripped. Variables should be blank-padded but not <code>NULL</code>-terminated.</div>
<p>If the <code>value_sz</code> parameter is zero, Oracle Database treats the bind variable as a <code>NULL</code>, regardless of its actual content. Of course, a <code>NULL</code> must be allowed for the bind variable value in the SQL statement. If you try to insert a <code>NULL</code> into a column that has a <code>NOT</code> <code>NULL</code> integrity constraint, Oracle Database issues an error, and the row is not inserted.</p>
<p>When the Oracle internal (column) data type is <code>NUMBER</code>, input from a character string that contains the character representation of a number is legal. Input character strings are converted to internal numeric format. If the <code>VARCHAR2</code> string contains an illegal conversion character, Oracle Database returns an error and the value is not inserted into the database.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16275" class="sect3"><a id="sthref423"></a>
<h4 class="sect3">Output</h4>
<p>Specify the desired length for the return value in the <code>value_sz</code> parameter of the <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a> call, or the <code>value_sz</code> parameter of <a href="oci16rel003.htm#i456223">OCIBindByName()</a> or <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> for PL/SQL blocks. If zero is specified for the length, no data is returned.</p>
<p>If you omit the <code>rlenp</code> parameter of <code>OCIDefineByPos()</code>, returned values are blank-padded to the buffer length, and <code>NULL</code>s are returned as a string of blank characters. If <code>rlenp</code> is included, returned values are not blank-padded. Instead, their actual lengths are returned in the <code>rlenp</code> parameter.</p>
<p>To check if a <code>NULL</code> is returned or if character truncation has occurred, include an indicator parameter in the <code>OCIDefineByPos()</code> call. Oracle Database sets the indicator parameter to -1 when a <code>NULL</code> is fetched and to the original column length when the returned value is truncated. Otherwise, it is set to zero. If you do not specify an indicator parameter and a <code>NULL</code> is selected, the fetch call returns the error code <code>OCI_SUCCESS_WITH_INFO</code>. Retrieving diagnostic information for the error returns <code>ORA-1405</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i462559">"Indicator Variables"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16276" class="sect2"><a id="sthref424"></a>
<h3 class="sect2">NUMBER<a id="sthref425"></a><a id="sthref426"></a></h3>
<p>You should not need to use <code>NUMBER</code> as an external data type. If you do use it, Oracle Database returns numeric values in its internal 21-byte binary format and expects this format on input. The following discussion is included for completeness only.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are using objects in an Oracle database, you can work with a special <code>OCINumber</code> data type using a set of predefined OCI functions. See <a href="oci12oty.htm#i434059">"Number (OCINumber)"</a> for more information about this data type.</div>
<p>Oracle Database stores values of the <code>NUMBER</code> data type in a variable-length format. The first byte is the exponent and is followed by 1 to 20 mantissa bytes. The high-order bit of the exponent byte is the sign bit; it is set for positive numbers, and it is cleared for negative numbers. The lower 7 bits represent the exponent, which is a base-100 digit with an offset of 65.</p>
<p>To calculate the decimal exponent, add 65 to the base-100 exponent and add another 128 if the number is positive. If the number is negative, you do the same, but subsequently the bits are inverted. For example, -5 has a base-100 exponent = 62 (0x3e). The decimal exponent is thus (~0x3e) -128 - 65 = 0xc1 -128 -65 = 193 -128 -65 = 0.</p>
<p>Each mantissa byte is a base-100 digit, in the range 1..100. For positive numbers, the digit has 1 added to it. So, the mantissa digit for the value 5 is 6. For negative numbers, instead of adding 1, the digit is subtracted from 101. So, the mantissa digit for the number -5 is 96 (101 - 5). Negative numbers have a byte containing 102 appended to the data bytes. However, negative numbers that have 20 mantissa bytes do not have the trailing 102 byte. Because the mantissa digits are stored in base 100, each byte can represent 2 decimal digits. The mantissa is normalized; leading zeros are not stored.</p>
<p>Up to 20 data bytes can represent the mantissa. However, only 19 are guaranteed to be accurate. The 19 data bytes, each representing a base-100 digit, yield a maximum precision of 38 digits for an Oracle <code>NUMBER</code>.</p>
<p>If you specify the data type code 2 in the <code>dty</code> parameter of an <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a> call, your program receives numeric data in this Oracle internal format. The output variable should be a 21-byte array to accommodate the largest possible number. Note that only the bytes that represent the number are returned. There is no blank padding or <code>NULL</code> termination. If you must know the number of bytes returned, use the <code>VARNUM</code> external data type instead of <code>NUMBER</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci12oty.htm#i423538">"OCINumber Examples"</a></p>
</li>
<li>
<p><a href="#i423877">"VARNUM"</a> for a description of the internal <code>NUMBER</code> format</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BEHBABGD"></a>
<div id="LNOCI039" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref427"></a>64-Bit Integer Host Data Type</h3>
<p>Starting with release 11.2, OCI supports the ability to bind and define integer values greater than 32-bit size (more than nine digits of precision) from and into a <code>NUMBER</code> column using a 64-bit native host variable and <code>SQLT_INT</code> or <code>SQLT_UIN</code> as the external data type in an OCI application.</p>
<p>This feature enables an application to bind and define 8-byte native host variables using <code>SQLT_INT</code> or <code>SQLT_UIN</code> external data types in the OCI bind and define function calls on all platforms. The <code><a href="oci16rel003.htm#i459315">OCIDefineByPos()</a></code>, <code><a href="oci16rel003.htm#i456223">OCIBindByName()</a></code>, and <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> function calls can specify an 8-byte integer data type pointer as the <code>valuep</code> parameter. This feature enables you to insert and fetch large integer values (up to 18 decimal digits of precision) directly into and from native host variables and to perform free arithmetic on them.</p>
<div id="LNOCI16277" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref428"></a>
<h4 class="sect3">OCI Bind and Define for 64-Bit Integers</h4>
<p><a href="#CEGHEBFH">Example 3-1</a> shows a code fragment that works without errors.</p>
<div id="LNOCI18132" class="example">
<p class="titleinexample"><a id="CEGHEBFH"></a>Example 3-1 OCI Bind and Define Support for 64-Bit Integers</p>
<pre>
...
/* Variable declarations */
orasb8    sbigval1, sbigval2, sbigval3; // Signed 8-byte variables.
oraub8    ubigval1, ubigval2, ubigval3; // Unsigned 8-byte variables.
...
/* Bind Statements */
OCIBindByPos(..., (void *) &amp;sbigval1, sizeof(sbigval1), ..., SQLT_INT, ...);
OCIBindByPos(..., (void *) &amp;ubigval1, sizeof(ubigval1), ..., SQLT_UIN, ...);
OCIBindByName(...,(void *) &amp;sbigval2, sizeof(sbigval2), ..., SQLT_INT, ...);
OCIBindByName(...,(void *) &amp;ubigval2, sizeof(ubigval2), ..., SQLT_UIN, ...);
...
/* Define Statements */
OCIDefineByPos(..., (void *) &amp;sbigval3, sizeof(sbigval3), ..., SQLT_INT, ...);
OCIDefineByPos(..., (void *) &amp;ubigval3, sizeof(ubigval3), ..., SQLT_UIN, ...);
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="LNOCI16278" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref429"></a>
<h4 class="sect3">Support for OUT Bind DML Returning Statements</h4>
<p><a href="#CEGHJEJC">Example 3-2</a> shows a code fragment that illustrates binding 8-byte integer data types for OUT binds of a DML returning statement.</p>
<div id="LNOCI18133" class="example">
<p class="titleinexample"><a id="CEGHJEJC"></a>Example 3-2 Binding 8-Byte Integer Data Types for OUT Binds of a DML Returning Statement</p>
<pre>
...
/* Define SQL statements to be used in program. */
static text *dml_stmt = (text *) " UPDATE emp SET sal = sal + :1
                                   WHERE empno = :2
                                   RETURNING sal INTO :out1";
...
 
/* Declare all handles to be used in program. */
OCIStmt    *stmthp;
OCIError   *errhp;
OCIBind    *bnd1p   = (OCIBind *) 0;
OCIBind    *bnd2p   = (OCIBind *) 0;
OCIBind    *bnd3p   = (OCIBind *) 0;
...
 
/* Bind variable declarations */
orasb8    sbigval;   // OUT bind variable (8-byte size).
sword     eno, hike; // IN bind variables.
...
 
/* get values for IN bind variables */
...
 
/* Bind Statements */
OCIBindByPos(stmthp, &amp;bnd1p, errhp, 1, (dvoid *) &amp;hike,
            (sb4) sizeof(hike), SQLT_INT, (dvoid *) 0, 
            (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
OCIBindByPos(stmthp, &amp;bnd2p, errhp, 2, (dvoid *) &amp;eno,
            (sb4) sizeof(eno), SQLT_INT, (dvoid *) 0, 
            (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
OCIBindByName(stmthp, &amp;bnd3p, errhp, (text *) ":out1", -1, 
             (dvoid *) &amp;sbigval, sizeof(sbigval), SQLT_INT, (dvoid *) 0,
             (ub2 *) 0, (ub2 *) 0, (ub4) 0, (ub4 *) 0, OCI_DEFAULT);
...
 
/* Use the returned OUT bind variable value */
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16279" class="sect2"><a id="sthref430"></a>
<h3 class="sect2">INTEGER<a id="sthref431"></a><a id="sthref432"></a></h3>
<p>The <code>INTEGER</code> data type converts numbers. An external integer is a signed binary number; the size in bytes is system-dependent. The host system architecture determines the order of the bytes in the variable. A length specification is required for input and output. If the number being returned from Oracle Database is not an integer, the fractional part is discarded, and no error or other indication is returned. If the number to be returned exceeds the capacity of a signed integer for the system, Oracle Database returns an "overflow on conversion" error.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16280" class="sect2"><a id="sthref433"></a>
<h3 class="sect2">FLOAT<a id="sthref434"></a><a id="sthref435"></a></h3>
<p>The <code>FLOAT</code> data type processes numbers that have fractional parts or that exceed the capacity of an integer. The number is represented in the host system's floating-point format. Normally the length is either 4 or 8 bytes. The length specification is required for both input and output.</p>
<p>The internal format of an Oracle number is decimal, and most floating-point implementations are binary; therefore, Oracle Database can represent numbers with greater precision than floating-point representations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You may receive a round-off error when converting between <code>FLOAT</code> and <code>NUMBER</code>. Using a <code>FLOAT</code> as a bind variable in a query may return an <code>ORA-1403</code> error. You can avoid this situation by converting the <code>FLOAT</code> into a <code>STRING</code> and then using <code>VARCHAR2</code> or a <code>NULL</code>-terminated string for the operation.</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16281" class="sect2"><a id="sthref436"></a>
<h3 class="sect2">STRING<a id="sthref437"></a><a id="sthref438"></a></h3>
<p>The <code>NULL</code>-terminated <code>STRING</code> format behaves like the <code>VARCHAR2</code> format, except that the string must contain a <code>NULL</code> terminator character. This data type is most useful for C language programs.</p>
<div id="LNOCI16282" class="sect3"><a id="sthref439"></a>
<h4 class="sect3">Input</h4>
<p>The string length supplied in the <code>OCIBindByName()</code> or <code>OCIBindByPos()</code> call limits the scan for the <code>NULL</code> terminator. If the <code>NULL</code> terminator is not found within the length specified, Oracle Database issues the following error:</p>
<p>ORA-01480: trailing <code>NULL</code> missing from <code>STR</code> bind value</p>
<p>If the length is not specified in the bind call, OCI uses an implied maximum string length of 4000.</p>
<p>The minimum string length is 2 bytes. If the first character is a <code>NULL</code> terminator and the length is specified as 2, a <code>NULL</code> is inserted into the column, if permitted. Unlike types <code>VARCHAR2</code> and <code>CHAR</code>, a string containing all blanks is not treated as a <code>NULL</code> on input; it is inserted as is.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot pass -1 for the string length parameter of a <code>NULL</code>-terminated string</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16283" class="sect3"><a id="sthref440"></a>
<h4 class="sect3">Output</h4>
<p>A <code>NULL</code> terminator is placed after the last character returned. If the string exceeds the field length specified, it is truncated and the last character position of the output variable contains the <code>NULL</code> terminator.</p>
<p>A <code>NULL</code> select-list item returns a <code>NULL</code> terminator character in the first character position. An <code>ORA-01405</code> error is also possible.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i423877"></a>
<div id="LNOCI16284" class="sect2">
<h3 class="sect2">VARNUM<a id="sthref441"></a><a id="sthref442"></a></h3>
<p>The <code>VARNUM</code> data type is like the external <code>NUMBER</code> data type, except that the first byte contains the length of the number representation. This length does not include the length byte itself. Reserve 22 bytes to receive the longest possible <code>VARNUM</code>. Set the length byte when you send a <code>VARNUM</code> value to Oracle Database.</p>
<p><a href="#g454194">Table 3-3</a> shows several examples of the <code>VARNUM</code> values returned for numbers in a table.</p>
<div id="LNOCI16285" class="tblformal">
<p class="titleintable"><a id="sthref443"></a><a id="g454194"></a>Table 3-3 VARNUM Examples</p>
<table class="cellalignment1016" title="VARNUM Examples " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t20">Decimal Value</th>
<th class="cellalignment1012" id="r1c2-t20">Length Byte</th>
<th class="cellalignment1012" id="r1c3-t20">Exponent Byte</th>
<th class="cellalignment1012" id="r1c4-t20">Mantissa Bytes</th>
<th class="cellalignment1012" id="r1c5-t20">Terminator Byte</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t20" headers="r1c1-t20">
<p>0</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c2-t20">
<p>1</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c3-t20">
<p>128</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c4-t20">
<p>Not applicable</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c5-t20">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t20" headers="r1c1-t20">
<p>5</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c2-t20">
<p>2</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c3-t20">
<p>193</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c4-t20">
<p>6</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c5-t20">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t20" headers="r1c1-t20">
<p>-5</p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c2-t20">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c3-t20">
<p>62</p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c4-t20">
<p>96</p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c5-t20">
<p>102</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t20" headers="r1c1-t20">
<p>2767</p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c2-t20">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c3-t20">
<p>194</p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c4-t20">
<p>28, 68</p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c5-t20">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t20" headers="r1c1-t20">
<p>-2767</p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c2-t20">
<p>4</p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c3-t20">
<p>61</p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c4-t20">
<p>74, 34</p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c5-t20">
<p>102</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t20" headers="r1c1-t20">
<p>100000</p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c2-t20">
<p>2</p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c3-t20">
<p>195</p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c4-t20">
<p>11</p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c5-t20">
<p>Not applicable</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t20" headers="r1c1-t20">
<p>1234567</p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c2-t20">
<p>5</p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c3-t20">
<p>196</p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c4-t20">
<p>2, 24, 46, 68</p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c5-t20">
<p>Not applicable</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="LNOCI16286" class="sect2"><a id="sthref444"></a>
<h3 class="sect2">LONG<a id="sthref445"></a><a id="sthref446"></a></h3>
<p>The <code>LONG</code> data type stores character strings longer than 4000 bytes. You can store up to 2 gigabytes (2^31-1 bytes) in a <code>LONG</code> column. Columns of this type are used only for storage and retrieval of long strings. They cannot be used in functions, expressions, or <code>WHERE</code> clauses. <code>LONG</code> column values are generally converted to and from character strings.</p>
<p>Do not create tables with <code>LONG</code> columns. Use <code>LOB</code> columns (<code>CLOB</code>, <code>NCLOB</code>, or <code>BLOB</code>) instead. <code>LONG</code> columns are supported only for backward compatibility.</p>
<p>Oracle also recommends that you convert existing <code>LONG</code> columns to <code>LOB</code> columns. <code>LOB</code> columns are subject to far fewer restrictions than <code>LONG</code> columns. Furthermore, <code>LOB</code> functionality is enhanced in every release, but <code>LONG</code> functionality has been static for several releases.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16287" class="sect2"><a id="sthref447"></a>
<h3 class="sect2">VARCHAR<a id="sthref448"></a><a id="sthref449"></a></h3>
<p>The <code>VARCHAR</code> data type stores character strings of varying length. The first 2 bytes contain the length of the character string, and the remaining bytes contain the string. The specified length of the string in a bind or a define call must include the two length bytes, so the largest <code>VARCHAR</code> string that can be received or sent is 65533 bytes long, not 65535.</p>
</div>
<!-- class="sect2" -->
<a id="i431453"></a>
<div id="LNOCI16288" class="sect2">
<h3 class="sect2">DATE<a id="sthref450"></a><a id="sthref451"></a></h3>
<p>The <code>DATE</code> data type can update, insert, or retrieve a date value using the Oracle internal date binary format. A date in binary format contains 7 bytes, as shown in <a href="#CEGGCDCF">Table 3-4</a>.</p>
<div id="LNOCI16289" class="tblformal">
<p class="titleintable"><a id="sthref452"></a><a id="CEGGCDCF"></a>Table 3-4 Format of the DATE Data Type</p>
<table class="cellalignment1016" title="Format of the DATE Data Type" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t21">Byte</th>
<th class="cellalignment1012" id="r1c2-t21">1</th>
<th class="cellalignment1012" id="r1c3-t21">2</th>
<th class="cellalignment1012" id="r1c4-t21">3</th>
<th class="cellalignment1012" id="r1c5-t21">4</th>
<th class="cellalignment1012" id="r1c6-t21">5</th>
<th class="cellalignment1012" id="r1c7-t21">6</th>
<th class="cellalignment1012" id="r1c8-t21">7</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t21" headers="r1c1-t21">
<p>Meaning</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c2-t21">
<p>Century</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c3-t21">
<p>Year</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c4-t21">
<p>Month</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c5-t21">
<p>Day</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c6-t21">
<p>Hour</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c7-t21">
<p>Minute</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c8-t21">
<p>Second</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t21" headers="r1c1-t21">
<p>Example (for 30-NOV-1992, 3:17 PM)</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c2-t21">
<p>119</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c3-t21">
<p>192</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c4-t21">
<p>11</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c5-t21">
<p>30</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c6-t21">
<p>16</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c7-t21">
<p>18</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c8-t21">
<p>1</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The century and year bytes (bytes 1 and 2) are in excess-100 notation. The first byte stores the value of the year, which is 1992, as an integer, divided by 100, giving 119 in excess-100 notation. The second byte stores year modulo 100, giving 192. Dates Before Common Era (BCE) are less than 100. The era begins on 01-JAN-4712 BCE, which is Julian day 1. For this date, the century byte is 53, and the year byte is 88. The hour, minute, and second bytes are in excess-1 notation. The hour byte ranges from 1 to 24, the minute and second bytes from 1 to 60. If no time was specified when the date was created, the time defaults to midnight (1, 1, 1).</p>
<p>When you enter a date in binary format using the <code>DATE</code> external data type, the database does not do consistency or range checking. All data in this format must be carefully validated before input.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is little need to use the Oracle external <code>DATE</code> data type in ordinary database operations. It is much more convenient to convert <code>DATE</code> into character format, because the program usually deals with data in a character format, such as DD-MON-YY.</div>
<p>When a <code>DATE</code> column is converted to a character string in your program, it is returned using the default format mask for your session, or as specified in the <code>INIT.ORA</code> file.</p>
<p>If you are using objects in an Oracle database, you can work with a special <code>OCIDate</code> data type using a set of predefined OCI functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci12oty.htm#i424575">"Date (OCIDate)"</a> for more information about the <code>OCIDate</code> data type</p>
</li>
<li>
<p><a href="#i440836">"Datetime and Interval Data Type Descriptors"</a> for information about <code>DATETIME</code> and <code>INTERVAL</code> data types</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16290" class="sect2"><a id="sthref453"></a>
<h3 class="sect2">RAW<a id="sthref454"></a><a id="sthref455"></a></h3>
<p>The <code>RAW</code> data type is used for binary data or byte strings that are not to be interpreted by Oracle Database, for example, to store graphics character sequences. The maximum length of a <code>RAW</code> column is 2000 bytes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF50993" href="../../server.112/e41084/sql_elements001.htm#SQLRF50993"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<p>When <code>RAW</code> data in an Oracle Database table is converted to a character string in a program, the data is represented in hexadecimal character code. Each byte of the <code>RAW</code> data is returned as two characters that indicate the value of the byte, from '00' to 'FF'. To input a character string in your program to a <code>RAW</code> column in an Oracle Database table, you must code the data in the character string using this hexadecimal code.</p>
<p>You can use the piecewise capabilities provided by <code>OCIDefineByPos()</code>, <code>OCIBindByName()</code>, <code>OCIBindByPos()</code>, <code>OCIStmtGetPieceInfo()</code>, and <code>OCIStmtSetPieceInfo()</code> to perform inserts, updates, or fetches involving <code>RAW</code> (or <code>LONG</code> <code>RAW</code>) columns.</p>
<p>If you are using objects in an Oracle database, you can work with a special <code>OCIRaw</code> data type using a set of predefined OCI functions. See <a href="oci12oty.htm#i421681">"Raw (OCIRaw)"</a> for more information about this data type.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16291" class="sect2"><a id="sthref456"></a>
<h3 class="sect2">VARRAW<a id="sthref457"></a><a id="sthref458"></a></h3>
<p>The <code>VARRAW</code> data type is similar to the <code>RAW</code> data type. However, the first 2 bytes contain the length of the data. The specified length of the string in a bind or a define call must include the two length bytes, so the largest <code>VARRAW</code> string that can be received or sent is 65533 bytes, not 65535. For converting longer strings, use the <code>LONG</code> <code>VARRAW</code> external data type.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16292" class="sect2"><a id="sthref459"></a>
<h3 class="sect2">LONG RAW<a id="sthref460"></a><a id="sthref461"></a></h3>
<p>The <code>LONG</code> <code>RAW</code> data type is similar to the <code>RAW</code> data type, except that it stores raw data with a length up to 2 gigabytes (2^31-1 bytes).</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16293" class="sect2"><a id="sthref462"></a>
<h3 class="sect2">UNSIGNED<a id="sthref463"></a><a id="sthref464"></a></h3>
<p>The <code>UNSIGNED</code> data type is used for unsigned binary integers. The size in bytes is system-dependent. The host system architecture determines the order of the bytes in a word. A length specification is required for input and output. If the number being output from Oracle Database is not an integer, the fractional part is discarded, and no error or other indication is returned. If the number to be returned exceeds the capacity of an unsigned integer for the system, Oracle Database returns an "overflow on conversion" error.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16294" class="sect2"><a id="sthref465"></a>
<h3 class="sect2">LONG VARCHAR<a id="sthref466"></a><a id="sthref467"></a></h3>
<p>The <code>LONG</code> <code>VARCHAR</code> data type stores data from and into an Oracle Database <code>LONG</code> column. The first 4 bytes of a <code>LONG</code> <code>VARCHAR</code> contain the length of the item. So, the maximum length of a stored item is 2^31-5 bytes.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16295" class="sect2"><a id="sthref468"></a>
<h3 class="sect2">LONG VARRAW<a id="sthref469"></a><a id="sthref470"></a></h3>
<p>The <code>LONG</code> <code>VARRAW</code> data type is used to store data from and into an Oracle Database <code>LONG</code> <code>RAW</code> column. The length is contained in the first four bytes. The maximum length is 2^31-5 bytes.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16296" class="sect2"><a id="sthref471"></a>
<h3 class="sect2">CHAR<a id="sthref472"></a><a id="sthref473"></a></h3>
<p>The <code>CHAR</code> data type is a string of characters, with a maximum length of 2000. <code>CHAR</code> strings are compared using blank-padded comparison semantics.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF50974" href="../../server.112/e41084/sql_elements001.htm#SQLRF50974"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<div id="LNOCI16297" class="sect3"><a id="sthref474"></a>
<h4 class="sect3">Input</h4>
<p>The length is determined by the <code>value_sz</code> parameter in the <a href="oci16rel003.htm#i456223">OCIBindByName()</a> or <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> call.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The entire contents of the buffer (<code>value_sz</code> chars) is passed to the database, including any trailing blanks or <code>NULL</code>s.</div>
<p>If the <code>value_sz</code> parameter is zero, Oracle Database treats the bind variable as a <code>NULL</code>, regardless of its actual content. Of course, a <code>NULL</code> must be allowed for the bind variable value in the SQL statement. If you try to insert a <code>NULL</code> into a column that has a <code>NOT</code> <code>NULL</code> integrity constraint, Oracle Database issues an error and does not insert the row.</p>
<p>Negative values for the <code>value_sz</code> parameter are not allowed for <code>CHAR</code>s.</p>
<p>When the Oracle internal (column) data type is <code>NUMBER</code>, input from a character string that contains the character representation of a number is legal. Input character strings are converted to internal numeric format. If the <code>CHAR</code> string contains an illegal conversion character, Oracle Database returns an error and does not insert the value. Number conversion follows the conventions established by globalization support settings for your system. For example, your system might be configured to recognize a comma (,) rather than a period (.) as the decimal point.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16298" class="sect3"><a id="sthref475"></a>
<h4 class="sect3">Output</h4>
<p>Specify the desired length for the return value in the <code>value_sz</code> parameter of the <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a> call. If zero is specified for the length, no data is returned.</p>
<p>If you omit the <code>rlenp</code> parameter of <code>OCIDefineByPos()</code>, returned values are blank padded to the buffer length, and <code>NULL</code>s are returned as a string of blank characters. If <code>rlenp</code> is included, returned values are not blank-padded. Instead, their actual lengths are returned in the <code>rlenp</code> parameter.</p>
<p>To check whether a <code>NULL</code> is returned or character truncation occurs, include an indicator parameter or array of indicator parameters in the <a href="oci16rel003.htm#i459315">OCIDefineByPos()</a> call. An indicator parameter is set to -1 when a <code>NULL</code> is fetched and to the original column length when the returned value is truncated. Otherwise, it is set to zero. If you do not specify an indicator parameter and a <code>NULL</code> is selected, the fetch call returns an <code>ORA-01405</code> error.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i462559">"Indicator Variables"</a></div>
<p>You can also request output to a character string from an internal <code>NUMBER</code> data type. Number conversion follows the conventions established by the globalization support settings for your system. For example, your system might use a comma (,) rather than a period (.) as the decimal point.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16299" class="sect2"><a id="sthref476"></a>
<h3 class="sect2">CHARZ<a id="sthref477"></a><a id="sthref478"></a></h3>
<p>The <code>CHARZ</code> external data type is similar to the <code>CHAR</code> data type, except that the string must be <code>NULL</code>-terminated on input, and Oracle Database places a <code>NULL</code>-terminator character at the end of the string on output. The <code>NULL</code> terminator serves only to delimit the string on input or output; it is not part of the data in the table.</p>
<p>On input, the length parameter must indicate the exact length, including the <code>NULL</code> terminator. For example, if an array in C is declared as follows, then the length parameter when you bind <code>my_num</code> must be seven. Any other value would return an error for this example.</p>
<pre>
char my_num[] = "123.45";
</pre>
<p>The following new external data types were introduced with or after release 8.0. These data types are not supported when you connect to an Oracle release 7 server.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Both internal and external data types have Oracle-defined constant values, such as <code>SQLT_NTY</code>, <code>SQLT_REF</code>, corresponding to their data type codes. Although the constants are not listed for all of the types in this chapter, they are used in this section when discussing new Oracle data types. The data type constants are also used in other chapters of this guide when referring to these new types.</div>
</div>
<!-- class="sect2" -->
<a id="i449533"></a>
<div id="LNOCI16300" class="sect2">
<h3 class="sect2">Named Data Types<a id="sthref479"></a><a id="sthref480"></a><a id="sthref481"></a><a id="sthref482"></a>: Object, <a id="sthref483"></a>VARRAY, Nested Table</h3>
<p>Named data types are user-defined types that are specified with the <code>CREATE</code> <code>TYPE</code> command in SQL. Examples include object types, varrays, and nested tables. In OCI, <span class="italic">named data type</span> refers to a host language representation of the type. The <code>SQLT_NTY</code> data type code is used when binding or defining named data types.<a id="sthref484"></a></p>
<p>In a C application, named data types are represented as C structs. These structs can be generated from types stored in the database by using the Object Type Translator. These types correspond to <code>OCI_TYPECODE_OBJECT</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci12oty.htm#i426966">"Object Type Information Storage and Access"</a> for more information about working with named data types in OCI</p>
</li>
<li>
<p><a href="oci15ott.htm#g455369">Chapter 15</a> for information about how named data types are represented as C structs</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16301" class="sect2"><a id="sthref485"></a>
<h3 class="sect2">REF<a id="sthref486"></a><a id="sthref487"></a><a id="sthref488"></a><a id="sthref489"></a><a id="sthref490"></a></h3>
<p>This is a reference to a named data type. The C language representation of a <code>REF</code> is a variable declared to be of type <code>OCIRef *</code>. The <code>SQLT_REF</code> data type code is used when binding or defining <code>REF</code>s.<a id="sthref491"></a></p>
<p>Access to <code>REF</code>s is only possible when an OCI application has been initialized in object mode. When <code>REF</code>s are retrieved from the server, they are stored in the client-side object cache.</p>
<p>To allocate a <code>REF</code> for use in your application, you should declare a variable to be a pointer to a <code>REF</code>, and then call <a href="oci18nav004.htm#i470965">OCIObjectNew()</a>, passing <code>OCI_TYPECODE_REF</code> as the <code>typecode</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci14oca.htm#g458990">Chapter 14</a> for more information about working with <code>REF</code>s in the OCI</div>
</div>
<!-- class="sect2" -->
<a id="CEGJAJHJ"></a>
<div id="LNOCI16302" class="sect2">
<h3 class="sect2">ROWID Descriptor<a id="sthref492"></a><a id="sthref493"></a></h3>
<p>The <code>ROWID</code> data type identifies a particular row in a database table. <code>ROWID</code> can be a select-list item in a query, such as:</p>
<pre>
SELECT ROWID, ename, empno FROM emp
</pre>
<p>In this case, you can use the returned <code>ROWID</code> in further <code>DELETE</code> statements.</p>
<p>If you are performing a <code>SELECT</code> for <code>UPDATE</code>, the <code>ROWID</code> is implicitly returned. This <code>ROWID</code> can be read into a user-allocated <code>ROWID</code> descriptor by using <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> on the statement handle and used in a subsequent <code>UPDATE</code> statement. The prefetch operation fetches all <code>ROWID</code>s on a <code>SELECT</code> for <code>UPDATE</code>; use prefetching and then a single row fetch.</p>
<p>You access rowids using a <code>ROWID</code> descriptor, which you can use as a bind or define variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i463442">"OCI Descriptors"</a> and <a href="oci02bas.htm#i462679">"Positioned Updates and Deletes"</a> for more information about the use of the <code>ROWID</code> descriptor</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16303" class="sect2"><a id="sthref494"></a>
<h3 class="sect2">LOB Descriptor<a id="sthref495"></a><a id="sthref496"></a><a id="sthref497"></a><a id="sthref498"></a><a id="sthref499"></a></h3>
<p>A LOB (large object) stores binary or character data up to 128 terabytes (TB) in length. Binary data is stored in a <code>BLOB</code> (binary LOB), and character data is stored in a <code>CLOB</code> (character LOB) or <code>NCLOB</code> (national character LOB).</p>
<p>LOB values may or may not be stored inline with other row data in the database. In either case, LOBs have the full transactional support of the Oracle database. A database table stores a <span class="italic">LOB locator</span> that points to the LOB value, which may be in a different storage space.</p>
<p>When an OCI application issues a SQL query that includes a LOB column or attribute in its select list, fetching the results of the query returns the locator, rather than the actual LOB value. In OCI, the LOB locator maps to a variable of type <code>OCILobLocator</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Depending on your application, you may or may not want to use LOB locators. You can use the data interface for LOBs, which does not require LOB locators. In this interface, you can bind or define character data for <code>CLOB</code> columns or <code>RAW</code> data for <code>BLOB</code> columns.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci02bas.htm#i463442">"OCI Descriptors"</a> for more information about descriptors, including the LOB locator</p>
</li>
<li>
<p><a class="olink SQLRF50997" href="../../server.112/e41084/sql_elements001.htm#SQLRF50997"><span class="italic">Oracle Database SQL Language Reference</span></a> and <a class="olink ADLOB001" href="../../appdev.112/e18294/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about LOBs</p>
</li>
<li>
<p><a href="oci05bnd.htm#i440236">"Binding LOB Data"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i440237">"Defining LOB Data"</a></p>
</li>
</ul>
</div>
<p>The OCI functions for LOBs take a LOB locator as one of their arguments. The OCI functions assume that the locator has already been created, whether or not the LOB to which it points contains data.</p>
<p>Bind and define operations are performed on the LOB locator, which is allocated with the <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> function.</p>
<p>The locator is always fetched first using SQL or <a href="oci18nav005.htm#i433563">OCIObjectPin()</a>, and then operations are performed using the locator. The OCI functions never take the actual LOB value as a parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#g452677">Chapter 7</a> for more information about OCI LOB functions</div>
<p>The data type codes available for binding or defining LOBs are:</p>
<ul>
<li>
<p><code>SQLT_BLOB</code> - A binary LOB data type</p>
</li>
<li>
<p><code>SQLT_CLOB</code> - A character LOB data type</p>
</li>
</ul>
<p>The <code>NCLOB</code> is a special type of <code>CLOB</code> with the following requirements:</p>
<ul>
<li>
<p>To write into or read from an <code>NCLOB</code>, the user must set the character set form (<code>csfrm</code>) parameter to be <code>SQLCS_NCHAR</code>.</p>
</li>
<li>
<p>The amount (<code>amtp</code>) parameter in calls involving <code>CLOB</code>s and <code>NCLOB</code>s is always interpreted in terms of characters, rather than bytes, for fixed-width character sets.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444493">"LOB and BFILE Functions in OCI"</a></div>
</li>
</ul>
<div id="LNOCI16304" class="sect3"><a id="sthref500"></a>
<h4 class="sect3">BFILE<a id="sthref501"></a><a id="sthref502"></a><a id="sthref503"></a><a id="sthref504"></a></h4>
<p><a id="sthref505"></a>Oracle Database supports access to binary files (<code>BFILE</code>s). The <code>BFILE</code> data type provides access to LOBs that are stored in file systems outside an Oracle database.</p>
<p>A <code>BFILE</code> column or attribute stores a file LOB locator, which serves as a pointer to a binary file on the server's file system. The locator maintains the directory object and the file name. The maximum size of a <code>BFILE</code> is the smaller of the operating system maximum file size or <code>UB8MAXVAL</code>.</p>
<p>Binary file LOBs do not participate in transactions. Rather, the underlying operating system provides file integrity and durability.</p>
<p>The database administrator must ensure that the file exists and that Oracle Database processes have operating system read permissions on the file.</p>
<p>The <code>BFILE</code> data type allows read-only support of large binary files; you cannot modify a file through Oracle Database. Oracle Database provides APIs to access file data.</p>
<p>The data type code available for binding or defining <code>BFILE</code>s is <code>SQLT_BFILE</code> (a binary FILE LOB data type)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB45827" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB45827"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about directory aliases</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16305" class="sect3"><a id="sthref506"></a>
<h4 class="sect3">BLOB<a id="sthref507"></a><a id="sthref508"></a></h4>
<p><a id="sthref509"></a>The <code>BLOB</code> data type stores unstructured binary large objects. <code>BLOB</code>s can be thought of as bit streams with no character set semantics. <code>BLOB</code>s can store up to 128 terabytes of binary data.</p>
<p><code>BLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. The <code>BLOB</code> value manipulations can be committed or rolled back. You cannot save a <code>BLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16306" class="sect3"><a id="sthref510"></a>
<h4 class="sect3">CLOB<a id="sthref511"></a><a id="sthref512"></a></h4>
<p><a id="sthref513"></a>The <code>CLOB</code> data type stores fixed-width or variable-width character data. <code>CLOB</code>s can store up to 128 terabytes of character data.</p>
<p><code>CLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. The <code>CLOB</code> value manipulations can be committed or rolled back. You cannot save a <code>CLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16307" class="sect3"><a id="sthref514"></a>
<h4 class="sect3">NCLOB<a id="sthref515"></a><a id="sthref516"></a><a id="sthref517"></a></h4>
<p>An <code>NCLOB</code> is a national character version of a <code>CLOB</code>. It stores fixed-width, single-byte or multibyte national character set (<code>NCHAR</code>) data, or variable-width character set data. <code>NCLOB</code>s can store up to 128 terabytes of character text data.</p>
<p><code>NCLOB</code>s have full transactional support; changes made through OCI participate fully in the transaction. <code>NCLOB</code> value manipulations can be committed or rolled back. You cannot save an <code>NCLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i440836"></a>
<div id="LNOCI16308" class="sect2">
<h3 class="sect2">Datetime and Interval Data Type Descriptors</h3>
<p>The datetime and interval data type descriptors are briefly summarized here.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF50972" href="../../server.112/e41084/sql_elements001.htm#SQLRF50972"><span class="italic">Oracle Database SQL Language Reference</span></a></div>
<div id="LNOCI16309" class="sect3"><a id="sthref518"></a>
<h4 class="sect3">ANSI DATE<a id="sthref519"></a><a id="sthref520"></a></h4>
<p><code>ANSI</code> <code>DATE</code> is based on <code>DATE</code>, but contains no time portion. It also has no time zone. <code>ANSI</code> <code>DATE</code> follows the ANSI specification for the <code>DATE</code> data type. When assigning an <code>ANSI</code> <code>DATE</code> to a <code>DATE</code> or a time stamp data type, the time portion of the Oracle <code>DATE</code> and the time stamp are set to zero. When assigning a <code>DATE</code> or a time stamp to an <code>ANSI</code> <code>DATE</code>, the time portion is ignored.</p>
<p>Instead of using the <code>ANSI DATE</code> data type, Oracle recommends that you use the <code>TIMESTAMP</code> data type, which contains both date and time.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16310" class="sect3"><a id="sthref521"></a>
<h4 class="sect3">TIMESTAMP<a id="sthref522"></a><a id="sthref523"></a></h4>
<p>The <code>TIMESTAMP</code> data type is an extension of the <code>DATE</code> data type. It stores the year, month, and day of the <code>DATE</code> data type, plus the hour, minute, and second values. It has no time zone. The <code>TIMESTAMP</code> data type has the following form:</p>
<pre>
TIMESTAMP(fractional_seconds_precision) 
</pre>
<p>In this form, the optional <code>fractional_seconds_precision</code> specifies the number of digits in the fractional part of the <code>SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16311" class="sect3"><a id="sthref524"></a>
<h4 class="sect3">TIMESTAMP WITH TIME ZONE<a id="sthref525"></a><a id="sthref526"></a></h4>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> (<code>TSTZ</code>) is a variant of <code>TIMESTAMP</code> that includes an explicit time zone displacement in its value. The time zone displacement is the difference in hours and minutes between local time and UTC (coordinated universal time&mdash;formerly Greenwich mean time). The <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> data type has the following form:</p>
<pre>
TIMESTAMP(fractional_seconds_precision) WITH TIME ZONE
</pre>
<p>In this form, <code>fractional_seconds_precision</code> optionally specifies the number of digits in the fractional part of the <code>SECOND</code> datetime field, and can be a number in the range 0 to 9. The default is 6.</p>
<p>Two <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> values are considered identical if they represent the same instant in UTC, regardless of the <code>TIME</code> <code>ZONE</code> offsets stored in the data.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16312" class="sect3"><a id="sthref527"></a>
<h4 class="sect3">TIMESTAMP WITH LOCAL TIME ZONE<a id="sthref528"></a><a id="sthref529"></a></h4>
<p><code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> (<code>TSLTZ</code>) is another variant of <code>TIMESTAMP</code> that includes a time zone displacement in its value. Storage is in the same format as for <code>TIMESTAMP</code>. This type differs from <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> in that data stored in the database is normalized to the database time zone, and the time zone displacement is not stored as part of the column data. When retrieving the data, Oracle Database returns it in your local session time zone.</p>
<p>The time zone displacement is the difference (in hours and minutes) between local time and UTC (coordinated universal time&mdash;formerly Greenwich mean time). The <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> data type has the following form:</p>
<pre>
TIMESTAMP(fractional_seconds_precision) WITH LOCAL TIME ZONE
</pre>
<p>In this form, <code>fractional_seconds_precision</code> optionally specifies the number of digits in the fractional part of the <code>SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16313" class="sect3"><a id="sthref530"></a>
<h4 class="sect3">INTERVAL YEAR TO MONTH<a id="sthref531"></a><a id="sthref532"></a></h4>
<p><code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> stores a period of time using the <code>YEAR</code> and <code>MONTH</code> datetime fields. The <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> data type has the following form:</p>
<pre>
INTERVAL YEAR(year_precision) TO MONTH
</pre>
<p>In this form, the optional <code>year_precision</code> is the number of digits in the <code>YEAR</code> datetime field. The default value of <code>year_precision</code> is 2.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16314" class="sect3"><a id="sthref533"></a>
<h4 class="sect3">INTERVAL DAY TO SECOND<a id="sthref534"></a><a id="sthref535"></a></h4>
<p><code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> stores a period of time in terms of days, hours, minutes, and seconds. The <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> data type has the following form:</p>
<pre>
INTERVAL DAY (day_precision) TO SECOND(fractional_seconds_precision)
</pre>
<p>In this form:</p>
<ul>
<li>
<p><code>day_precision</code> is the number of digits in the <code>DAY</code> datetime field. It is optional. Accepted values are 0 to 9. The default is 2.</p>
</li>
<li>
<p><code>fractional_seconds_precision</code> is the number of digits in the fractional part of the <code>SECOND</code> datetime field. Accepted values are 0 to 9. The default is 6.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="LNOCI16315" class="sect3"><a id="sthref536"></a>
<h4 class="sect3"><a id="sthref537"></a>Avoiding Unexpected Results Using Datetime</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
To avoid unexpected results in your data manipulation language (DML) operations on datetime data, you can verify the database and session time zones by querying the built-in SQL functions <code>DBTIMEZONE</code> and <code>SESSIONTIMEZONE</code>. If the time zones have not been set manually, Oracle Database uses the operating system time zone by default. If the operating system time zone is not a valid Oracle Database time zone, Oracle Database uses UTC as the default value.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i448004"></a>
<div id="LNOCI16316" class="sect2">
<h3 class="sect2">Native <a id="sthref538"></a><a id="sthref539"></a>Float and Native Double</h3>
<p>The native float (<a id="sthref540"></a><code>SQLT_BFLOAT</code>) and native double (<a id="sthref541"></a><code>SQLT_BDOUBLE</code>) data types represent the single-precision and double-precision floating-point values. They are represented natively, that is, in the host system's floating-point format.</p>
<p>These external types were added in release 10.1 to externally represent the <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> internal data types. Thus, performance for the internal types is best when used in conjunction with external types native float and native double respectively. This draws a clear distinction between the existing representation of floating-point values (<code>SQLT_FLT</code>) and these types.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16317" class="sect2"><a id="sthref542"></a>
<h3 class="sect2">C Object-Relational Data Type Mappings</h3>
<p>OCI supports Oracle-defined C data types for mapping user-defined data types to C representations (for example, <code>OCINumber</code>, <code>OCIArray</code>). OCI provides a set of calls to operate on these data types, and to use these data types in bind and define operations, in conjunction with OCI external data types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci12oty.htm#g453655">Chapter 12</a> for information about using these Oracle-defined C data types</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i426447"></a>
<div id="LNOCI16318" class="sect1">
<h2 class="sect1">Data Conversions<a id="sthref543"></a><a id="sthref544"></a><a id="sthref545"></a></h2>
<p><a href="#g454246">Table 3-5</a> shows the supported conversions from internal data types to external data types, and from external data types into internal column representations, for all data types available through release 7.3. Information about data conversions for data types newer than release 7.3 is listed here:</p>
<ul>
<li>
<p>REFs stored in the database are converted to <code>SQLT_REF</code> on output.</p>
</li>
<li>
<p><code>SQLT_REF</code> is converted to the internal representation of <code>REF</code>s on input.</p>
</li>
<li>
<p>Named data types stored in the database can be converted to <code>SQLT_NTY</code> (and represented by a C struct in the application) on output.</p>
</li>
<li>
<p><code>SQLT_NTY</code> (represented by a C struct in an application) is converted to the internal representation of the corresponding type on input.</p>
</li>
</ul>
<p>LOBs are shown in <a href="#g455014">Table 3-6</a>, because of the width limitation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci12oty.htm#g453655">Chapter 12</a> for information about <code>OCIString</code>, <code>OCINumber</code>, and other new data types</div>
<div id="LNOCI16319" class="tblformalwide">
<p class="titleintable"><a id="sthref546"></a><a id="g454246"></a>Table 3-5 Data Conversions</p>
<table class="cellalignment1011" title="Data Conversions " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t41">NA<a id="sthref547" href="#sthref547" onclick='footdisplay(1,"NA means not applicable.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></th>
<th class="cellalignment1012" id="r1c2-t41">INTERNAL DATA TYPES-&gt;</th>
<th class="cellalignment1012" id="r1c3-t41">NA</th>
<th class="cellalignment1012" id="r1c4-t41">NA</th>
<th class="cellalignment1012" id="r1c5-t41">NA</th>
<th class="cellalignment1012" id="r1c6-t41">NA</th>
<th class="cellalignment1012" id="r1c7-t41">NA</th>
<th class="cellalignment1012" id="r1c8-t41">NA</th>
<th class="cellalignment1012" id="r1c9-t41">NA</th>
<th class="cellalignment1012" id="r1c10-t41">NA</th>
</tr>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r2c1-t41" headers="r1c1-t41">EXTERNALDATA TYPES</th>
<th class="cellalignment1012" id="r2c2-t41" headers="r2c1-t41 r1c2-t41">VARCHAR2</th>
<th class="cellalignment1012" id="r2c3-t41" headers="r2c1-t41 r1c3-t41">NUMBER</th>
<th class="cellalignment1012" id="r2c4-t41" headers="r2c1-t41 r1c4-t41">LONG</th>
<th class="cellalignment1012" id="r2c5-t41" headers="r2c1-t41 r1c5-t41">ROWID</th>
<th class="cellalignment1012" id="r2c6-t41" headers="r2c1-t41 r1c6-t41">UROWID</th>
<th class="cellalignment1012" id="r2c7-t41" headers="r2c1-t41 r1c7-t41">DATE</th>
<th class="cellalignment1012" id="r2c8-t41" headers="r2c1-t41 r1c8-t41">RAW</th>
<th class="cellalignment1012" id="r2c9-t41" headers="r2c1-t41 r1c9-t41">LONG RAW</th>
<th class="cellalignment1012" id="r2c10-t41" headers="r2c1-t41 r1c10-t41">CHAR</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref548" href="#sthref548" onclick='footdisplay(2,"I/O = Conversion is valid for input or output.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="CEGJJEEI" href="#CEGJJEEI" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref549" href="#sthref549" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="CEGCAEAH" href="#CEGCAEAH" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="tablefootnote">Foot&nbsp;4&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="CEGEDAFF" href="#CEGEDAFF" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="tablefootnote">Foot&nbsp;5&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c9-t41 r2c9-t41">
<p>I/O<a id="sthref550" href="#sthref550" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t41 r1c10-t41 r2c10-t41">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="CEGIECDG" href="#CEGIECDG" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="tablefootnote">Foot&nbsp;6&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c4-t41 r2c4-t41">
<p>I<a id="sthref551" href="#sthref551" onclick='footdisplay(7,"I = Conversion is valid for input only.")'><sup class="tablefootnote">Foot&nbsp;7&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref552" href="#sthref552" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref553" href="#sthref553" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref554" href="#sthref554" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref555" href="#sthref555" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref556" href="#sthref556" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>STRING</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref557" href="#sthref557" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref558" href="#sthref558" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref559" href="#sthref559" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref560" href="#sthref560" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c9-t41 r2c9-t41">
<p>I/O<a id="sthref561" href="#sthref561" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a>,<a id="CEGCHDIH" href="#CEGCHDIH" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="tablefootnote">Foot&nbsp;8&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>VARNUM</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref562" href="#sthref562" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref563" href="#sthref563" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref564" href="#sthref564" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref565" href="#sthref565" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref566" href="#sthref566" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref567" href="#sthref567" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref568" href="#sthref568" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref569" href="#sthref569" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c9-t41 r2c9-t41">
<p>I/O<a id="sthref570" href="#sthref570" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a>,<a id="sthref571" href="#sthref571" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref572" href="#sthref572" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref573" href="#sthref573" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref574" href="#sthref574" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref575" href="#sthref575" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c9-t41 r2c9-t41">
<p>I/O<a id="sthref576" href="#sthref576" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a>,<a id="sthref577" href="#sthref577" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c7-t41 r2c7-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r12c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="CEGGBDIE" href="#CEGGBDIE" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="tablefootnote">Foot&nbsp;9&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c4-t41 r2c4-t41">
<p>I<a id="sthref578" href="#sthref578" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a>,<a id="sthref579" href="#sthref579" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c8-t41 r2c8-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c9-t41 r2c9-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r13c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref580" href="#sthref580" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref581" href="#sthref581" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c4-t41 r2c4-t41">
<p>I<a id="sthref582" href="#sthref582" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a>,<a id="sthref583" href="#sthref583" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c8-t41 r2c8-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c9-t41 r2c9-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r14c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref584" href="#sthref584" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c2-t41 r2c2-t41">
<p>O<a id="sthref585" href="#sthref585" onclick='footdisplay(10,"O = Conversion is valid for output only.")'><sup class="tablefootnote">Foot&nbsp;10&nbsp;</sup></a>,<a id="sthref586" href="#sthref586" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c4-t41 r2c4-t41">
<p>I<a id="sthref587" href="#sthref587" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a>,<a id="sthref588" href="#sthref588" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c8-t41 r2c8-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c9-t41 r2c9-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r15c1-t41 r1c10-t41 r2c10-t41">
<p>O<a id="sthref589" href="#sthref589" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>UNSIGNED</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref590" href="#sthref590" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c4-t41 r2c4-t41">
<p>I</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r16c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref591" href="#sthref591" onclick='footdisplay(6,"For output, column value must represent a valid number.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref592" href="#sthref592" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref593" href="#sthref593" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref594" href="#sthref594" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref595" href="#sthref595" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c9-t41 r2c9-t41">
<p>I/O<a id="sthref596" href="#sthref596" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a>,<a id="sthref597" href="#sthref597" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c2-t41 r2c2-t41">
<p>I/O<a id="sthref598" href="#sthref598" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c4-t41 r2c4-t41">
<p>I<a id="sthref599" href="#sthref599" onclick='footdisplay(8,"Length must be less than or equal to 2000.")'><sup class="footnotenumber">Footref&nbsp;8</sup></a>,<a id="sthref600" href="#sthref600" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c5-t41 r2c5-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c6-t41 r2c6-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c8-t41 r2c8-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c9-t41 r2c9-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r18c1-t41 r1c10-t41 r2c10-t41">
<p>I/O<a id="sthref601" href="#sthref601" onclick='footdisplay(9,"On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;9</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref602" href="#sthref602" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref603" href="#sthref603" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref604" href="#sthref604" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref605" href="#sthref605" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c9-t41 r2c9-t41">
<p>I<a id="sthref606" href="#sthref606" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>CHARZ</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c2-t41 r2c2-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c3-t41 r2c3-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c4-t41 r2c4-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c5-t41 r2c5-t41">
<p>I/O<a id="sthref607" href="#sthref607" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c6-t41 r2c6-t41">
<p>I/O<a id="sthref608" href="#sthref608" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c7-t41 r2c7-t41">
<p>I/O<a id="sthref609" href="#sthref609" onclick='footdisplay(4,"For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c8-t41 r2c8-t41">
<p>I/O<a id="sthref610" href="#sthref610" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c9-t41 r2c9-t41">
<p>I<a id="sthref611" href="#sthref611" onclick='footdisplay(5,"For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.")'><sup class="footnotenumber">Footref&nbsp;5</sup></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t41 r1c10-t41 r2c10-t41">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t41" headers="r1c1-t41 r2c1-t41">
<p><code>ROWID</code> descriptor</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c2-t41 r2c2-t41">
<p>I<a id="sthref612" href="#sthref612" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c3-t41 r2c3-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c4-t41 r2c4-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c5-t41 r2c5-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c6-t41 r2c6-t41">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c7-t41 r2c7-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c8-t41 r2c8-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c9-t41 r2c9-t41">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r21c1-t41 r1c10-t41 r2c10-t41">
<p>I<a id="sthref613" href="#sthref613" onclick='footdisplay(3,"For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.")'><sup class="footnotenumber">Footref&nbsp;3</sup></a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>NA means not applicable.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>For input, host string must be in Oracle ROWID/UROWID format. On output, column value is returned in Oracle ROWID/UROWID format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;4&nbsp;</sup>For input, host string must be in the Oracle DATE character format. On output, column value is returned in Oracle DATE format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;5&nbsp;</sup>For input, host string must be in hexadecimal format. On output, column value is returned in hexadecimal format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;6&nbsp;</sup>For output, column value must represent a valid number.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;7&nbsp;</sup>I = Conversion is valid for input only.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;8&nbsp;</sup>Length must be less than or equal to 2000.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;9&nbsp;</sup>On input, column value is stored in hexadecimal format. On output, column value must be in hexadecimal format.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;10&nbsp;</sup>O = Conversion is valid for output only.</p>
<div id="LNOCI16320" class="sect2"><a id="sthref614"></a>
<h3 class="sect2">Data Conversions for LOB Data Type Descriptors</h3>
<p><a href="#g455014">Table 3-6</a> shows the data conversions for <code>LOB</code>s. For example, the external character data types (<code>VARCHAR</code>, <code>CHAR</code>, <code>LONG</code>, and <code>LONG VARCHAR</code>) convert to the internal <code>CLOB</code> data type, whereas the external raw data types (<code>RAW</code>, <code>VARRAW</code>, <code>LONG RAW</code>, and <code>LONG VARRAW</code>) convert to the internal <code>BLOB</code> data type.</p>
<div id="LNOCI16321" class="tblformal">
<p class="titleintable"><a id="sthref615"></a><a id="g455014"></a>Table 3-6 Data Conversions for LOBs</p>
<table class="cellalignment1016" title="Data Conversions for LOBs " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t42">EXTERNAL DATA TYPES</th>
<th class="cellalignment1012" id="r1c2-t42">INTERNAL CLOB</th>
<th class="cellalignment1012" id="r1c3-t42">INTERNAL BLOB</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t42" headers="r1c1-t42">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t42 r1c2-t42">
<p>I/O<a id="sthref616" href="#sthref616" onclick='footdisplay(1,"I/O = Conversion is valid for input or output.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t42 r1c3-t42">
<p>NA<a id="sthref617" href="#sthref617" onclick='footdisplay(2,"NA means not applicable.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t42" headers="r1c1-t42">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t42 r1c2-t42">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t42 r1c3-t42">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t42" headers="r1c1-t42">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t42 r1c2-t42">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t42 r1c3-t42">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t42" headers="r1c1-t42">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t42 r1c2-t42">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t42 r1c3-t42">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t42" headers="r1c1-t42">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t42 r1c2-t42">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t42 r1c3-t42">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t42" headers="r1c1-t42">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t42 r1c2-t42">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r7c1-t42 r1c3-t42">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t42" headers="r1c1-t42">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t42 r1c2-t42">
<p>NA&nbsp;</p>
</td>
<td class="cellalignment1013" headers="r8c1-t42 r1c3-t42">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t42" headers="r1c1-t42">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t42 r1c2-t42">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t42 r1c3-t42">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>NA means not applicable.</p>
</div>
<!-- class="sect2" -->
<a id="i442641"></a>
<div id="LNOCI16322" class="sect2">
<h3 class="sect2">Data Conversions for Datetime and Interval Data Types</h3>
<p>You can also use one of the character data types for the host variable used in a fetch or insert operation from or to a datetime or interval column. Oracle Database does the conversion between the character data type and datetime or interval data type for you (see <a href="#CHDJJHHB">Table 3-7</a>.</p>
<div id="LNOCI16323" class="tblformalwide">
<p class="titleintable"><a id="sthref618"></a><a id="CHDJJHHB"></a>Table 3-7 Data Conversion for Datetime and Interval Types</p>
<table class="cellalignment1011" title="Data Conversion for Datetime and Interval Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t43">External Types/Internal Types</th>
<th class="cellalignment1012" id="r1c2-t43">VARCHAR,CHAR</th>
<th class="cellalignment1012" id="r1c3-t43">DATE</th>
<th class="cellalignment1012" id="r1c4-t43">TS</th>
<th class="cellalignment1012" id="r1c5-t43">TSTZ</th>
<th class="cellalignment1012" id="r1c6-t43">TSLTZ</th>
<th class="cellalignment1012" id="r1c7-t43">INTERVAL YEAR TO MONTH</th>
<th class="cellalignment1012" id="r1c8-t43">INTERVAL DAY TO SECOND</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t43" headers="r1c1-t43">
<p><code>VARCHAR2, CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c2-t43">
<p>I/O<a id="sthref619" href="#sthref619" onclick='footdisplay(1,"I/O = Conversion is valid for input or output.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c7-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r2c1-t43 r1c8-t43">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t43" headers="r1c1-t43">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c7-t43">
<p>NA<a id="sthref620" href="#sthref620" onclick='footdisplay(2,"NA means not applicable.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t43" headers="r1c1-t43">
<p><code>OCI DATE</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r4c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t43" headers="r1c1-t43">
<p><code>ANSI DATE</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r5c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t43" headers="r1c1-t43">
<p><code>TIMESTAMP (TS)</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r6c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t43" headers="r1c1-t43">
<p><code>TIMESTAMP WITH TIME ZONE (TSTZ)</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r7c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t43" headers="r1c1-t43">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE (TSLTZ)</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c3-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c4-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c5-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c6-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r8c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t43" headers="r1c1-t43">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c3-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c4-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c5-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c6-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c7-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r9c1-t43 r1c8-t43">
<p>NA</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t43" headers="r1c1-t43">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c2-t43">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c3-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c4-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c5-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c6-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c7-t43">
<p>NA</p>
</td>
<td class="cellalignment1013" headers="r10c1-t43 r1c8-t43">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>I/O = Conversion is valid for input or output.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>NA means not applicable.</p>
<div id="LNOCI16324" class="sect3"><a id="sthref621"></a>
<h4 class="sect3">Assignment Notes</h4>
<p>When you assign a source with a time zone to a target without a time zone, the time zone portion of the source is ignored. When you assign a source without a time zone to a target with a time zone, the time zone of the target is set to the session's default time zone.</p>
<p>When you assign an Oracle Database <code>DATE</code> to a <code>TIMESTAMP</code>, the <code>TIME</code> portion of the <code>DATE</code> is copied over to the <code>TIMESTAMP</code>. When you assign a <code>TIMESTAMP</code> to Oracle Database <code>DATE</code>, the <code>TIME</code> portion of the result <code>DATE</code> is set to zero. This is done to encourage upgrading of Oracle Database <code>DATE</code> to <code>ANSI</code>-compliant <code>DATETIME</code> data types.</p>
<p>When you assign an <code>ANSI</code> <code>DATE</code> to an Oracle <code>DATE</code> or a <code>TIMESTAMP</code>, the <code>TIME</code> portion of the Oracle Database <code>DATE</code> and the <code>TIMESTAMP</code> are set to zero. When you assign an Oracle Database <code>DATE</code> or a <code>TIMESTAMP</code> to an ANSI <code>DATE</code>, the <code>TIME</code> portion is ignored.</p>
<p>When you assign a <code>DATETIME</code> to a character string, the <code>DATETIME</code> is converted using the session's default <code>DATETIME</code> format. When you assign a character string to a <code>DATETIME</code>, the string must contain a valid <code>DATETIME</code> value based on the session's default <code>DATETIME</code> format</p>
<p>When you assign a character string to an <code>INTERVAL</code>, the character string must be a valid <code>INTERVAL</code> character format.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16325" class="sect3"><a id="sthref622"></a>
<h4 class="sect3">Data Conversion Notes for Datetime and Interval Types</h4>
<p>When you convert from <code>TSLTZ</code> to <code>CHAR</code>, <code>DATE</code>, <code>TIMESTAMP</code>, and <code>TSTZ</code>, the value is adjusted to the session time zone.</p>
<p>When you convert from <code>CHAR</code>, <code>DATE</code>, and <code>TIMESTAMP</code> to <code>TSLTZ</code>, the session time zone is stored in memory.</p>
<p>When you assign <code>TSLTZ</code> to <code>ANSI</code> <code>DATE</code>, the time portion is zero.</p>
<p>When you convert from <code>TSTZ</code>, the time zone that the time stamp is in is stored in memory.</p>
<p>When you assign a character string to an interval, the character string must be a valid interval character format.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16326" class="sect2"><a id="sthref623"></a>
<h3 class="sect2">Datetime and Date Upgrading Rules<a id="sthref624"></a></h3>
<p>OCI has full forward and backward compatibility between a client application and the Oracle database for datetime and date columns.</p>
<div id="LNOCI16327" class="sect3"><a id="sthref625"></a>
<h4 class="sect3">Pre-9.0 Client with 9.0 or Later Server</h4>
<p>The only datetime data type available to a pre-9.0 application is the <code>DATE</code> data type, <code>SQLT_DAT</code>. When a pre-9.0 client that defined a buffer as <code>SQLT_DAT</code> tries to obtain data from a <code>TSLTZ</code> column, only the date portion of the value is returned to the client.</p>
</div>
<!-- class="sect3" -->
<div id="LNOCI16328" class="sect3"><a id="sthref626"></a>
<h4 class="sect3">Pre-9.0 Server with 9.0 or Later Client</h4>
<p>When a pre-9.0 server is used with a 9.0 or later client, the client can have a bind or define buffer of type <code>SQLT_TIMESTAMP_LTZ</code>. The following compatibilities are maintained in this case.</p>
<p>If any client application tries to insert a <code>SQLT_TIMESTAMP_LTZ</code> (or any of the new datetime data types) into a <code>DATE</code> column, an error is issued because there is potential data loss in this situation.</p>
<p>When a client has an OUT bind or a define buffer that is of data type <code>SQLT_TIMESTAMP_LTZ</code> and the underlying server-side SQL buffer or column is of <code>DATE</code> type, then the session time zone is assigned.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="LNOCI16329" class="sect2"><a id="sthref627"></a>
<h3 class="sect2">Data Conversion for BINARY_FLOAT and BINARY_DOUBLE in OCI</h3>
<p><a href="#g454882">Table 3-8</a> shows the supported conversions between internal numeric data types and all relevant external types. An (I) implies that the conversion is valid for input only (binds), and (O) implies that the conversion is valid for output only (defines). An (I/O) implies that the conversion is valid for input and output (binds and defines).</p>
<div id="LNOCI16330" class="tblformal">
<p class="titleintable"><a id="sthref628"></a><a id="g454882"></a>Table 3-8 Data Conversion for External Data Types to Internal Numeric Data Types</p>
<table class="cellalignment1016" title="Data Conversion for External Data Types to Internal Numeric Data Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t44">External Types/Internal Types</th>
<th class="cellalignment1012" id="r1c2-t44">BINARY_FLOAT</th>
<th class="cellalignment1012" id="r1c3-t44">BINARY_DOUBLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t44" headers="r1c1-t44">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t44 r1c2-t44">
<p>I/O<a id="sthref629" href="#sthref629" onclick='footdisplay(1,"An (I/O) implies that the conversion is valid for input and output (binds and defines)")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t44" headers="r1c1-t44">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t44" headers="r1c1-t44">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r4c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t44" headers="r1c1-t44">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t44" headers="r1c1-t44">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t44" headers="r1c1-t44">
<p><code>STRING</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t44" headers="r1c1-t44">
<p><code>VARNUM</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r8c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t44" headers="r1c1-t44">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r9c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t44" headers="r1c1-t44">
<p><code>UNSIGNED INT</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r10c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t44" headers="r1c1-t44">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r11c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t44" headers="r1c1-t44">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r12c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t44" headers="r1c1-t44">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r13c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t44" headers="r1c1-t44">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t44 r1c2-t44">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r14c1-t44 r1c3-t44">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>An (I/O) implies that the conversion is valid for input and output (binds and defines)</p>
<p><a href="#g455058">Table 3-9</a> shows the supported conversions between all relevant internal types and numeric external types. An (I) implies that the conversion is valid for input only (only for binds), and (O) implies that the conversion is valid for output only (only for defines). An (I/O) implies that the conversion is valid for input and output (binds and defines).</p>
<div id="LNOCI16331" class="tblformal">
<p class="titleintable"><a id="sthref630"></a><a id="g455058"></a>Table 3-9 Data Conversions for Internal to External Numeric Data Types</p>
<table class="cellalignment1016" title="Data Conversions for Internal to External Numeric Data Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t45">Internal Types/External Types</th>
<th class="cellalignment1012" id="r1c2-t45">Native Float</th>
<th class="cellalignment1012" id="r1c3-t45">Native Double</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t45" headers="r1c1-t45">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t45 r1c2-t45">
<p>I/O<a id="sthref631" href="#sthref631" onclick='footdisplay(1,"An (I/O) implies that the conversion is valid for input and output (binds and defines)")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t45 r1c3-t45">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t45" headers="r1c1-t45">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t45 r1c2-t45">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r3c1-t45 r1c3-t45">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t45" headers="r1c1-t45">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t45 r1c2-t45">
<p>I<a id="sthref632" href="#sthref632" onclick='footdisplay(2,"An (I) implies that the conversion is valid for input only (only for binds)")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t45 r1c3-t45">
<p>I</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t45" headers="r1c1-t45">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t45 r1c2-t45">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r5c1-t45 r1c3-t45">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t45" headers="r1c1-t45">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t45 r1c2-t45">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r6c1-t45 r1c3-t45">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t45" headers="r1c1-t45">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t45 r1c2-t45">
<p>I/O</p>
</td>
<td class="cellalignment1013" headers="r7c1-t45 r1c3-t45">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>An (I/O) implies that the conversion is valid for input and output (binds and defines)</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>An (I) implies that the conversion is valid for input only (only for binds)</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i446338"></a>
<div id="LNOCI16332" class="sect1">
<h2 class="sect1">Typecodes<a id="sthref633"></a><a id="sthref634"></a></h2>
<p>A unique typecode is associated with each Oracle Database type, whether scalar, collection, reference, or object type. This typecode identifies the type, and is used by Oracle Database to manage information about object type attributes. This typecode system is designed to be generic and extensible. It is not tied to a direct one-to-one mapping to Oracle data types. Consider the following SQL statements:</p>
<pre>
CREATE TYPE my_type AS OBJECT
( attr1    NUMBER,
  attr2    INTEGER,
  attr3    SMALLINT);

CREATE TABLE my_table AS TABLE OF my_type;
</pre>
<p>These statements create an object type and an object table. When it is created, <code>my_table</code> has three columns, all of which are of Oracle <code>NUMBER</code> type, because <code>SMALLINT</code> and <code>INTEGER</code> map internally to <code>NUMBER</code>. The internal representation of the attributes of <code>my_type</code>, however, maintains the distinction between the data types of the three attributes: <code>attr1</code> is <code>OCI_TYPECODE_NUMBER</code>, <code>attr2</code> is <code>OCI_TYPECODE_INTEGER</code>, and <code>attr3</code> is <code>OCI_TYPECODE_SMALLINT</code>. If an application describes <code>my_type</code>, these typecodes are returned.</p>
<p><code>OCITypeCode</code> is<a id="sthref635"></a> the C data type of the typecode. The typecode is used by some OCI functions, like <a href="oci18nav004.htm#i470965">OCIObjectNew()</a>, where it helps determine what type of object is created. It is also returned as the value of some attributes when an object is described; for example, querying the <code>OCI_ATTR_TYPECODE</code> attribute of a type returns an <code>OCITypeCode</code> value.</p>
<p><a id="sthref636"></a><a href="#g454481">Table 3-10</a> lists the possible values for an <code>OCITypeCode</code>. There is a value corresponding to each Oracle data type.</p>
<div id="LNOCI16333" class="tblformal">
<p class="titleintable"><a id="sthref637"></a><a id="g454481"></a>Table 3-10 OCITypeCode Values and Data Types</p>
<table class="cellalignment1016" title="OCITypeCode Values and Data Types" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t46">Value</th>
<th class="cellalignment1012" id="r1c2-t46">Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_REF</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t46 r1c2-t46">
<p>REF</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_DATE</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t46 r1c2-t46">
<p>DATE</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t46 r1c2-t46">
<p>TIMESTAMP</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t46 r1c2-t46">
<p>TIMESTAMP WITH TIME ZONE</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t46 r1c2-t46">
<p>TIMESTAMP WITH LOCAL TIME ZONE</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_INTERVAL_YM</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t46 r1c2-t46">
<p>INTERVAL YEAR TO MONTH</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_INTERVAL_DS</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t46 r1c2-t46">
<p>INTERVAL DAY TO SECOND</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_REAL</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t46 r1c2-t46">
<p>Single-precision real</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t46 r1c2-t46">
<p>Double-precision real</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t46 r1c2-t46">
<p>Floating-point</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t46 r1c2-t46">
<p>Oracle NUMBER</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_BFLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t46 r1c2-t46">
<p>BINARY_FLOAT</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_BDOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t46 r1c2-t46">
<p>BINARY_DOUBLE</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_DECIMAL</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t46 r1c2-t46">
<p>Decimal</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_OCTET</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t46 r1c2-t46">
<p>Octet</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t46 r1c2-t46">
<p>Integer</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_SMALLINT</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t46 r1c2-t46">
<p>Small int</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_RAW</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t46 r1c2-t46">
<p>RAW</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t46 r1c2-t46">
<p>Variable string ANSI SQL, that is, VARCHAR2</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t46 r1c2-t46">
<p>Variable string Oracle SQL, that is, VARCHAR</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t46 r1c2-t46">
<p>Fixed-length string inside SQL, that is SQL CHAR</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_VARRAY</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t46 r1c2-t46">
<p>Variable-length array (varray)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_TABLE</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t46 r1c2-t46">
<p>Multiset</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_CLOB</code></p>
</td>
<td class="cellalignment1013" headers="r25c1-t46 r1c2-t46">
<p>Character large object (CLOB)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t46 r1c2-t46">
<p>Binary large object (BLOB)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r27c1-t46 r1c2-t46">
<p>Binary large object file (<code>BFILE</code>)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_OBJECT</code></p>
</td>
<td class="cellalignment1013" headers="r28c1-t46 r1c2-t46">
<p>Named object type, or SYS.XMLType</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t46" headers="r1c1-t46">
<p><code>OCI_TYPECODE_NAMEDCOLLECTION</code></p>
</td>
<td class="cellalignment1013" headers="r29c1-t46 r1c2-t46">
<p>Domain (named primitive type)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i430014"></a>
<div id="LNOCI16334" class="sect2">
<h3 class="sect2">Relationship Between SQLT and OCI_TYPECODE Values<a id="sthref638"></a><a id="sthref639"></a></h3>
<p>Oracle Database recognizes two different sets of data type code values. One set is distinguished by the <code>SQLT_</code> prefix, the other by the <code>OCI_TYPECODE_</code> prefix.</p>
<p>The <code>SQLT</code> typecodes are used by OCI to specify a data type in a bind or define operation, enabling you to control data conversions between Oracle Database and OCI client applications. The <code>OCI_TYPECODE</code> types are used by Oracle's type system to reference or describe predefined types when manipulating or creating user-defined types.</p>
<p>In many cases, there are direct mappings between <code>SQLT</code> and <code>OCI_TYPECODE</code> values. In other cases, however, there is not a direct one-to-one mapping. For example, <code>OCI_TYPECODE_SIGNED8</code>, <code>OCI_TYPECODE_SIGNED16</code>, <code>OCI_TYPECODE_SIGNED32</code>, <code>OCI_TYPECODE_INTEGER</code>, <code>OCI_TYPECODE_OCTET</code>, and <code>OCI_TYPECODE_SMALLINT</code> are all mapped to the <code>SQLT_INT</code> type.</p>
<p><a href="#g454572">Table 3-11</a> illustrates the mappings between <code>SQLT</code> and <code>OCI_TYPECODE</code> types.</p>
<div id="LNOCI16335" class="tblformalwide">
<p class="titleintable"><a id="sthref640"></a><a id="g454572"></a>Table 3-11 OCI_TYPECODE to SQLT Mappings</p>
<table class="cellalignment1011" title="OCI_TYPECODE to SQLT Mappings " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t47">Oracle Type System Typename</th>
<th class="cellalignment1012" id="r1c2-t47">Oracle Type System Type</th>
<th class="cellalignment1012" id="r1c3-t47">Equivalent SQLT Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t47" headers="r1c1-t47">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t47 r1c3-t47">
<p><code>SQLT_BFILE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t47" headers="r1c1-t47">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t47 r1c3-t47">
<p><code>SQLT_BLOB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t47" headers="r1c1-t47">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_CHAR</code> (n)</p>
</td>
<td class="cellalignment1013" headers="r4c1-t47 r1c3-t47">
<p><code>SQLT_AFC</code>(n)<a id="CEGEFEEE" href="#CEGEFEEE" onclick='footdisplay(1,"n is the size of the string in bytes.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t47" headers="r1c1-t47">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_CLOB</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t47 r1c3-t47">
<p><code>SQLT_CLOB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t47" headers="r1c1-t47">
<p><code>COLLECTION</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_NAMEDCOLLECTION</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t47 r1c3-t47">
<p><code>SQLT_NCO</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t47" headers="r1c1-t47">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_DATE</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t47 r1c3-t47">
<p><code>SQLT_DAT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t47" headers="r1c1-t47">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t47 r1c3-t47">
<p><code>SQLT_TIMESTAMP</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t47" headers="r1c1-t47">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_TIMESTAMP_TZ</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t47 r1c3-t47">
<p><code>SQLT_TIMESTAMP_TZ</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t47" headers="r1c1-t47">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_TIMESTAMP_LTZ</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t47 r1c3-t47">
<p><code>SQLT_TIMESTAMP_LTZ</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t47" headers="r1c1-t47">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_INTERVAL_YM</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t47 r1c3-t47">
<p><code>SQLT_INTERVAL_YM</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t47" headers="r1c1-t47">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_INTERVAL_DS</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t47 r1c3-t47">
<p><code>SQLT_INTERVAL_DS</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t47" headers="r1c1-t47">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_FLOAT</code> (b)</p>
</td>
<td class="cellalignment1013" headers="r13c1-t47 r1c3-t47">
<p><code>SQLT_FLT</code> (8)<a id="sthref641" href="#sthref641" onclick='footdisplay(2,"These are floating-point numbers, the precision is given in terms of binary digits. b is the precision of the number in binary digits.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t47" headers="r1c1-t47">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_DECIMAL</code> (p)</p>
</td>
<td class="cellalignment1013" headers="r14c1-t47 r1c3-t47">
<p><code>SQLT_NUM</code> (p, 0)<a id="sthref642" href="#sthref642" onclick='footdisplay(3,"This is equivalent to a NUMBER with no decimal places.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t47" headers="r1c1-t47">
<p><code>DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t47 r1c3-t47">
<p><code>SQLT_FLT</code> (8)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t47" headers="r1c1-t47">
<p><code>BINARY_FLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_BFLOAT</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t47 r1c3-t47">
<p><code>SQLT_BFLOAT</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t47" headers="r1c1-t47">
<p><code>BINARY_DOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_BDOUBLE</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t47 r1c3-t47">
<p><code>SQLT_BDOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t47" headers="r1c1-t47">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_INTEGER</code></p>
</td>
<td class="cellalignment1013" headers="r18c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (i)<a id="CEGFHFAG" href="#CEGFHFAG" onclick='footdisplay(4,"i is the size of the number in bytes, set as part of an OCI call.")'><sup class="tablefootnote">Foot&nbsp;4&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t47" headers="r1c1-t47">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1013" headers="r19c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_NUMBER</code> (p, s)</p>
</td>
<td class="cellalignment1013" headers="r19c1-t47 r1c3-t47">
<p><code>SQLT_NUM</code> (p, s)<a id="sthref643" href="#sthref643" onclick='footdisplay(5,"p is the precision of the number in decimal digits; s is the scale of the number in decimal digits.")'><sup class="tablefootnote">Foot&nbsp;5&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t47" headers="r1c1-t47">
<p><code>OCTET</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_OCTET</code></p>
</td>
<td class="cellalignment1013" headers="r20c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (1)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t47" headers="r1c1-t47">
<p><code>POINTER</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_PTR</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t47 r1c3-t47">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t47" headers="r1c1-t47">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_RAW</code></p>
</td>
<td class="cellalignment1013" headers="r22c1-t47 r1c3-t47">
<p><code>SQLT_LVB</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t47" headers="r1c1-t47">
<p><code>REAL</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_REAL</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t47 r1c3-t47">
<p><code>SQLT_FLT</code> (4)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t47" headers="r1c1-t47">
<p><code>REF</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_REF</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t47 r1c3-t47">
<p><code>SQLT_REF</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t47" headers="r1c1-t47">
<p><code>OBJECT</code> or <code>SYS.XMLType</code></p>
</td>
<td class="cellalignment1013" headers="r25c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_OBJECT</code></p>
</td>
<td class="cellalignment1013" headers="r25c1-t47 r1c3-t47">
<p><code>SQLT_NTY</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t47" headers="r1c1-t47">
<p><code>SIGNED(8)</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_SIGNED8</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (1)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t47" headers="r1c1-t47">
<p><code>SIGNED(16)</code></p>
</td>
<td class="cellalignment1013" headers="r27c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_SIGNED16</code></p>
</td>
<td class="cellalignment1013" headers="r27c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (2)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t47" headers="r1c1-t47">
<p><code>SIGNED(32)</code></p>
</td>
<td class="cellalignment1013" headers="r28c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_SIGNED32</code></p>
</td>
<td class="cellalignment1013" headers="r28c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (4)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t47" headers="r1c1-t47">
<p><code>SMALLINT</code></p>
</td>
<td class="cellalignment1013" headers="r29c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_SMALLINT</code></p>
</td>
<td class="cellalignment1013" headers="r29c1-t47 r1c3-t47">
<p><code>SQLT_INT</code> (i)<a id="sthref644" href="#sthref644" onclick='footdisplay(4,"i is the size of the number in bytes, set as part of an OCI call.")'><sup class="footnotenumber">Footref&nbsp;4</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r30c1-t47" headers="r1c1-t47">
<p><code>TABLE</code><a id="CEGFIIIG" href="#CEGFIIIG" onclick='footdisplay(6,"Can only be part of a named collection type.")'><sup class="tablefootnote">Foot&nbsp;6&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r30c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_TABLE</code></p>
</td>
<td class="cellalignment1013" headers="r30c1-t47 r1c3-t47">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r31c1-t47" headers="r1c1-t47">
<p><code>UNSIGNED(8)</code></p>
</td>
<td class="cellalignment1013" headers="r31c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_UNSIGNED8</code></p>
</td>
<td class="cellalignment1013" headers="r31c1-t47 r1c3-t47">
<p><code>SQLT_UIN</code> (1)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r32c1-t47" headers="r1c1-t47">
<p><code>UNSIGNED(16)</code></p>
</td>
<td class="cellalignment1013" headers="r32c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_UNSIGNED16</code></p>
</td>
<td class="cellalignment1013" headers="r32c1-t47 r1c3-t47">
<p><code>SQLT_UIN</code> (2)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r33c1-t47" headers="r1c1-t47">
<p><code>UNSIGNED(32)</code></p>
</td>
<td class="cellalignment1013" headers="r33c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_UNSIGNED32</code></p>
</td>
<td class="cellalignment1013" headers="r33c1-t47 r1c3-t47">
<p><code>SQLT_UIN</code> (4)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r34c1-t47" headers="r1c1-t47">
<p><code>VARRAY</code><a id="sthref645" href="#sthref645" onclick='footdisplay(6,"Can only be part of a named collection type.")'><sup class="footnotenumber">Footref&nbsp;6</sup></a></p>
</td>
<td class="cellalignment1013" headers="r34c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_VARRAY</code></p>
</td>
<td class="cellalignment1013" headers="r34c1-t47 r1c3-t47">
<p>&lt;NONE&gt;</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r35c1-t47" headers="r1c1-t47">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1013" headers="r35c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_VARCHAR</code> (n)</p>
</td>
<td class="cellalignment1013" headers="r35c1-t47 r1c3-t47">
<p><code>SQLT_CHR</code> (n)<a id="sthref646" href="#sthref646" onclick='footdisplay(1,"n is the size of the string in bytes.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r36c1-t47" headers="r1c1-t47">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1013" headers="r36c1-t47 r1c2-t47">
<p><code>OCI_TYPECODE_VARCHAR2</code> (n)</p>
</td>
<td class="cellalignment1013" headers="r36c1-t47 r1c3-t47">
<p><code>SQLT_VCS</code> (n)<a id="sthref647" href="#sthref647" onclick='footdisplay(1,"n is the size of the string in bytes.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>n is the size of the string in bytes.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>These are floating-point numbers, the precision is given in terms of binary digits. b is the precision of the number in binary digits.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>This is equivalent to a NUMBER with no decimal places.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;4&nbsp;</sup>i is the size of the number in bytes, set as part of an OCI call.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;5&nbsp;</sup>p is the precision of the number in decimal digits; s is the scale of the number in decimal digits.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;6&nbsp;</sup>Can only be part of a named collection type.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i429902"></a>
<div id="LNOCI16336" class="sect1">
<h2 class="sect1">Definitions in oratypes.h<span class="italic"><a id="sthref648"></a><a id="sthref649"></a><a id="sthref650"></a><a id="sthref651"></a><a id="sthref652"></a><a id="sthref653"></a><a id="sthref654"></a><a id="sthref655"></a></span></h2>
<p>Throughout this guide there are references to data types like <code>ub2</code> or <code>sb4</code>, or to constants like <code>UB4MAXVAL</code>. These types are defined in the <code>oratypes.h</code> header file, which is found in the <code>public</code> directory. The exact contents may vary according to the operating system that you are using.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a id="sthref656"></a><a id="sthref657"></a>The use of the data types in <code>oratypes.h</code> is<a id="sthref658"></a> the only supported means of supplying parameters to OCI.</div>
<pre>
</pre></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci02bas.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci04sql.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
