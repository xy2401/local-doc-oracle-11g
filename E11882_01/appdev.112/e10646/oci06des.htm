<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Describing Schema Metadata</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:22Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci05bnd.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci07lob.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/79</span> <!-- End Header -->
<div id="LNOCI060" class="chapter"><a id="g464132"></a> <a id="i446492"></a>
<h1 class="chapter"><span class="secnum">6</span> Describing Schema Metadata</h1>
<p>This chapter discusses the use of the <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> function to obtain information about schema elements.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i451773">Using OCIDescribeAny()</a></p>
</li>
<li>
<p><a href="#i440535">Parameter Attributes</a></p>
</li>
<li>
<p><a href="#i448663">Character-Length Semantics Support in Describe Operations</a></p>
</li>
<li>
<p><a href="#i448540">Examples Using OCIDescribeAny()</a></p>
</li>
</ul>
<a id="i451773"></a>
<div id="LNOCI16438" class="sect1">
<h2 class="sect1">Using OCIDescribeAny()<a id="sthref866"></a></h2>
<p>The <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> function enables you to perform an explicit describe of the following schema objects and their subschema objects:</p>
<ul>
<li>
<p>Tables and views<a id="sthref867"></a><a id="sthref868"></a><a id="sthref869"></a><a id="sthref870"></a></p>
</li>
<li>
<p>Synonyms<a id="sthref871"></a><a id="sthref872"></a></p>
</li>
<li>
<p>Procedures<a id="sthref873"></a><a id="sthref874"></a></p>
</li>
<li>
<p>Functions<a id="sthref875"></a><a id="sthref876"></a></p>
</li>
<li>
<p>Packages<a id="sthref877"></a><a id="sthref878"></a></p>
</li>
<li>
<p>Sequences<a id="sthref879"></a><a id="sthref880"></a></p>
</li>
<li>
<p>Collections<a id="sthref881"></a><a id="sthref882"></a></p>
</li>
<li>
<p>Types<a id="sthref883"></a><a id="sthref884"></a></p>
</li>
<li>
<p>Schemas<a id="sthref885"></a><a id="sthref886"></a></p>
</li>
<li>
<p>Databases<a id="sthref887"></a><a id="sthref888"></a></p>
</li>
</ul>
<p>Information about other schema elements (function arguments, columns, type attributes, and type methods) is available through a describe of one of the preceding schema objects or an explicit describe of the subschema object.</p>
<p>When an application describes a table, it can then retrieve information about that table's columns. Additionally, <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> can directly describe subschema objects such as columns of a table, packages of a function, or fields of a type if given the name of the subschema object.</p>
<p>The <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> call requires a describe handle as one of its arguments. The describe handle must be previously allocated with a call to <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>.</p>
<p>The information returned by <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> is organized hierarchically like a tree, as shown in <a href="#i444983">Figure 6-1</a>.</p>
<div id="LNOCI16439" class="figure">
<p class="titleinfigure"><a id="i444983"></a>Figure 6-1 OCIDescribeAny() Table Description</p>
<img width="285" height="248" src="img/lnoci031.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref889" href="img_text/lnoci031.htm">Description of "Figure 6-1 OCIDescribeAny() Table Description"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="i446511"></a>The describe handle returned by the <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> call has an attribute, <code>OCI_ATTR_PARAM</code>, that points to such a description tree. Each node of the tree has attributes associated with that node, as well as attributes that are like recursive describe handles and point to subtrees containing further information. If all the attributes are homogenous, as with elements of a column list, they are called <span class="italic">parameters</span>. The attributes associated with any node are returned by <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a>, and the parameters are returned by <a href="oci16rel002.htm#i540956">OCIParamGet()</a>.</p>
<p>A call to <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> on the describe handle for the table returns a handle to the column-list information. An application can then use <a href="oci16rel002.htm#i540956">OCIParamGet()</a> to retrieve the handle to the column description of a particular column in the column list. The handle to the column descriptor can be passed to <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> to get further information about the column, such as the name and data type.</p>
<p>After a SQL statement is executed, information about the select list is available as an attribute of the statement handle. No explicit describe call is needed. To retrieve information about select-list items from the statement handle, the application must call <a href="oci16rel002.htm#i540956">OCIParamGet()</a> once for each position in the select list to allocate a parameter descriptor for that position.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
No subsequent <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> or <a href="oci16rel002.htm#i540956">OCIParamGet()</a> call requires extra round-trips, as the entire description is cached on the client side by <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>.</div>
<div id="LNOCI16440" class="sect2"><a id="sthref890"></a>
<h3 class="sect2"><a id="sthref891"></a><a id="sthref892"></a>Limitations on OCIDescribeAny()</h3>
<p>The <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> call limits information returned to the basic information and stops expanding a node if it amounts to another describe operation. For example, if a table column is of an object type, then OCI does not return a subtree describing the type, because this information can be obtained by another describe call.</p>
<p>The table name is not returned by <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> or the implicit use of <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a>. Sometimes a column is not associated with a table. In most cases, the table is already known.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci04sql.htm#i441217">"Describing Select-List Items"</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#i455723">"OCIDescribeAny()"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16441" class="sect2"><a id="sthref893"></a>
<h3 class="sect2">Notes on Types and Attributes</h3>
<p>When performing describe operations, you should be aware of the following topics.</p>
<a id="i442394"></a>
<div id="LNOCI16442" class="sect3">
<h4 class="sect3">Data Type Codes</h4>
<p>The <a id="sthref894"></a><code>OCI_ATTR_TYPECODE</code> attribute returns typecodes that represent the types supplied by the user when a new type is created using the <code>CREATE TYPE</code> statement. These typecodes are of the enumerated type <code>OCITypeCode</code>, and are represented by <code>OCI_TYPECODE</code> constants. Internal PL/SQL type (boolean) is not supported.</p>
<p>The <a id="sthref895"></a><code>OCI_ATTR_DATA_TYPE</code> attribute returns typecodes that represent the data types stored in database columns. These are similar to the describe values returned by previous versions of Oracle Database. These values are represented by SQLT constants (<code>ub2</code> values). Boolean types return <code>SQLT_BOL</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci03typ.htm#i423688">"External Data Types"</a> for more information about <code>SQLT_BOL</code></p>
</li>
<li>
<p><a href="oci03typ.htm#i446338">"Typecodes"</a> for more information about typecodes, such as the <code>OCI_TYPECODE</code> <a id="sthref896"></a>values returned in the <code>OCI_ATTR_TYPECODE</code> attribute and the SQLT typecodes returned in the <code>OCI_ATTR_DATA_TYPE</code> attribute</p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16443" class="sect3"><a id="sthref897"></a>
<h4 class="sect3">Describing Types</h4>
<p>To describe type objects, it is necessary to initialize the OCI process in object mode, as shown in <a href="#CIHDBGDD">Example 6-1</a>.</p>
<div id="LNOCI18167" class="example">
<p class="titleinexample"><a id="CIHDBGDD"></a>Example 6-1 Initializing the OCI Process in Object Mode</p>
<pre>
/* Initialize the OCI Process */
 if (OCIEnvCreate((OCIEnv **) &amp;envhp, (ub4) OCI_OBJECT, (voivoid *) 0,
                  (void * (*)(void *,size_t)) 0,
                  (void * (*)(void *, void *, size_t)) 0,
                  (void (*)(void *, void *)) 0, (size_t) 0, (void **) 0))
 {
   printf("FAILED: OCIEnvCreate()\n");
   return OCI_ERROR;
 }
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci16rel001.htm#i556149">"OCIEnvCreate()"</a></div>
</div>
<!-- class="sect3" -->
<div id="LNOCI16444" class="sect3"><a id="sthref898"></a>
<h4 class="sect3">Implicit and Explicit Describe Operations<a id="sthref899"></a><a id="sthref900"></a><a id="sthref901"></a></h4>
<p>The column attribute <code>OCI_ATTR_PRECISION</code> can be returned using an implicit describe with <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a> and an explicit describe with <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>. When you use an implicit describe, set the precision to <code>sb2</code>. When you use an explicit describe, set the precision to <code>ub1</code> for a placeholder. This is necessary to match the data type of precision in the dictionary.</p>
</div>
<!-- class="sect3" -->
<a id="i442801"></a>
<div id="LNOCI16445" class="sect3">
<h4 class="sect3"><a id="sthref902"></a>OCI_ATTR_LIST_ARGUMENTS Attribute</h4>
<p>The <code>OCI_ATTR_LIST_ARGUMENTS</code> attribute for type methods represents <span class="italic">second-level</span> arguments for the method.</p>
<p>For example, consider the following record <code>my_type</code> and the procedure <code>my_proc</code> that takes an argument of type <code>my_type:</code></p>
<pre>
my_type record(a number, b char)
my_proc (my_input my_type)
</pre>
<p>In this example, the <code>OCI_ATTR_LIST_ARGUMENTS</code> attribute would apply to arguments <code>a</code> and <code>b</code> of the <code>my_type</code> record.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i440535"></a>
<div id="LNOCI16446" class="sect1">
<h2 class="sect1">Parameter Attributes<a id="sthref903"></a><a id="sthref904"></a><a id="sthref905"></a><a id="sthref906"></a></h2>
<p>A parameter is returned by <a href="oci16rel002.htm#i540956">OCIParamGet()</a>. Parameters can describe different types of objects or information, and have attributes depending on the type of description they contain, or type-specific attributes. This section describes the attributes and handles that belong to different parameters.</p>
<p>The <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> call does support more than two name components (for example, <code>schema.type.attr1.attr2.method1</code>). With more than one component, the first component is interpreted as the schema name (unless some other flag is set). There is a flag to specify that the object must be looked up under PUBLIC, that is, describe "a", where "a" can be either in the current schema or a public synonym.</p>
<p>If you do not know what the object type is, specify <code>OCI_PTYPE_UNK</code>. Otherwise, an error is returned if the actual object type does not match the specified type.</p>
<p><a href="#g454436">Table 6-1</a> lists the attributes of all parameters.</p>
<div id="LNOCI16447" class="tblformalwide">
<p class="titleintable"><a id="sthref907"></a><a id="g454436"></a>Table 6-1 Attributes of All Parameters</p>
<table class="cellalignment1011" title="Attributes of All Parameters " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t6">Attribute</th>
<th class="cellalignment1012" id="r1c2-t6">Description</th>
<th class="cellalignment1012" id="r1c3-t6">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t6" headers="r1c1-t6">
<p><a id="sthref908"></a><code>OCI_ATTR_OBJ_ID</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t6 r1c2-t6">
<p>Object or schema ID</p>
</td>
<td class="cellalignment1013" headers="r2c1-t6 r1c3-t6">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t6" headers="r1c1-t6">
<p><a id="sthref909"></a><code>OCI_ATTR_OBJ_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t6 r1c2-t6">
<p>Database name or object name in a schema</p>
</td>
<td class="cellalignment1013" headers="r3c1-t6 r1c3-t6">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t6" headers="r1c1-t6">
<p><a id="sthref910"></a><code>OCI_ATTR_OBJ_SCHEMA</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t6 r1c2-t6">
<p>Schema name where the object is located</p>
</td>
<td class="cellalignment1013" headers="r4c1-t6 r1c3-t6">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t6" headers="r1c1-t6">
<p><code>OCI_ATTR_PTYPE</code><a id="sthref911"></a><a id="sthref912"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t6 r1c2-t6">
<p>Type of information described by the parameter. Possible values:</p>
<p><code><a id="sthref913"></a>OCI_PTYPE_TABLE</code> - table</p>
<p><a id="sthref914"></a><code>OCI_PTYPE_VIEW</code> - view</p>
<p><code><a id="sthref915"></a>OCI_PTYPE_PROC</code> - procedure</p>
<p><a id="sthref916"></a><code>OCI_PTYPE_FUNC</code> - function</p>
<p><code><a id="sthref917"></a>OCI_PTYPE_PKG</code> - package</p>
<p><code><a id="sthref918"></a>OCI_PTYPE_TYPE</code> - type</p>
<p><code><a id="sthref919"></a>OCI_PTYPE_TYPE_ATTR</code> - attribute of a type</p>
<p><a id="sthref920"></a><code>OCI_PTYPE_TYPE_COLL</code> - collection type information</p>
<p><code><a id="sthref921"></a>OCI_PTYPE_TYPE_METHOD</code> - method of a type</p>
<p><code><a id="sthref922"></a>OCI_PTYPE_SYN</code> - synonym</p>
<p><code><a id="sthref923"></a>OCI_PTYPE_SEQ</code> - sequence</p>
<p><code><a id="sthref924"></a>OCI_PTYPE_COL</code> - column of a table or view</p>
<p><a id="sthref925"></a><code>OCI_PTYPE_ARG</code> - argument of a function or procedure</p>
<p><code><a id="sthref926"></a>OCI_PTYPE_TYPE_ARG</code> - argument of a type method</p>
<p><code><a id="sthref927"></a>OCI_PTYPE_TYPE_RESULT</code> - results of a method</p>
<p><code><a id="sthref928"></a>OCI_PTYPE_LIST</code> - column list for tables and views, argument list for functions and procedures, or subprogram list for packages</p>
<p><code><a id="sthref929"></a>OCI_PTYPE_SCHEMA</code> - schema</p>
<p><code><a id="sthref930"></a>OCI_PTYPE_DATABASE</code> - database</p>
<p><a id="sthref931"></a><code>OCI_PTYPE_UNK</code> - unknown schema object</p>
</td>
<td class="cellalignment1013" headers="r5c1-t6 r1c3-t6">
<pre>
ub1 
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t6" headers="r1c1-t6">
<p><code>OCI_ATTR_TIMESTAMP</code><a id="sthref932"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t6 r1c2-t6">
<p>The time stamp of the object on which the description is based in Oracle date format</p>
</td>
<td class="cellalignment1013" headers="r6c1-t6 r1c3-t6">
<pre>
ub1 *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>The following sections list the attributes and handles specific to different types of parameters.</p>
<div id="LNOCI16448" class="sect2"><a id="sthref933"></a>
<h3 class="sect2">Table or View<a id="sthref934"></a><a id="sthref935"></a><a id="sthref936"></a><a id="sthref937"></a> Parameters</h3>
<p><a href="#CIHHHICB">Table 6-2</a> lists the type-specific attributes for parameters for a table or view (type <code>OCI_PTYPE_TABLE</code> or <code>OCI_PTYPE_VIEW</code>).</p>
<div id="LNOCI16449" class="tblformalwide">
<p class="titleintable"><a id="sthref938"></a><a id="CIHHHICB"></a>Table 6-2 Attributes of Tables or Views</p>
<table class="cellalignment1011" title="Attributes of Tables or Views " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t7">Attribute</th>
<th class="cellalignment1012" id="r1c2-t7">Description</th>
<th class="cellalignment1012" id="r1c3-t7">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_OBJID</code><a id="sthref939"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t7 r1c2-t7">
<p>Object ID</p>
</td>
<td class="cellalignment1013" headers="r2c1-t7 r1c3-t7">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_NUM_COLS</code><a id="sthref940"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t7 r1c2-t7">
<p>Number of columns</p>
</td>
<td class="cellalignment1013" headers="r3c1-t7 r1c3-t7">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_LIST_COLUMNS</code><a id="sthref941"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t7 r1c2-t7">
<p>Column list (type <code>OCI_PTYPE_LIST</code>)</p>
</td>
<td class="cellalignment1013" headers="r4c1-t7 r1c3-t7">
<pre>
OCIParam *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref942"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t7 r1c2-t7">
<p><code>REF</code> to the type description object (TDO) of the base type for extent tables</p>
</td>
<td class="cellalignment1013" headers="r5c1-t7 r1c3-t7">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_IS_TEMPORARY</code><a id="sthref943"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t7 r1c2-t7">
<p>Indicates that the table is temporary</p>
</td>
<td class="cellalignment1013" headers="r6c1-t7 r1c3-t7">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t7" headers="r1c1-t7">
<p><code><a id="sthref944"></a>OCI_ATTR_IS_TYPED</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t7 r1c2-t7">
<p>Indicates that the table is typed</p>
</td>
<td class="cellalignment1013" headers="r7c1-t7 r1c3-t7">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t7" headers="r1c1-t7">
<p><code>OCI_ATTR_DURATION</code><a id="sthref945"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t7 r1c2-t7">
<p>Duration of a temporary table. Values can be:</p>
<p><code><a id="sthref946"></a><a id="sthref947"></a>OCI_DURATION_SESSION</code> - session</p>
<p><a id="sthref948"></a><a id="sthref949"></a><code>OCI_DURATION_TRANS</code> - transaction</p>
<p><code><a id="sthref950"></a><a id="sthref951"></a>OCI_DURATION_NULL</code> - table not temporary</p>
</td>
<td class="cellalignment1013" headers="r8c1-t7 r1c3-t7">
<pre>
OCIDuration
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p><a href="#CIHIDHJE">Table 6-3</a> lists additional attributes that belong to tables.</p>
<div id="LNOCI16450" class="tblformalwide">
<p class="titleintable"><a id="sthref952"></a><a id="CIHIDHJE"></a>Table 6-3 Attributes Specific to Tables</p>
<table class="cellalignment1011" title="Attributes Specific to Tables " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t8">Attribute</th>
<th class="cellalignment1012" id="r1c2-t8">Description</th>
<th class="cellalignment1012" id="r1c3-t8">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t8" headers="r1c1-t8">
<p><code>OCI_ATTR_RDBA</code><a id="sthref953"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t8 r1c2-t8">
<p>Data block address of the segment header</p>
</td>
<td class="cellalignment1013" headers="r2c1-t8 r1c3-t8">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t8" headers="r1c1-t8">
<p><code>OCI_ATTR_TABLESPACE</code><a id="sthref954"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t8 r1c2-t8">
<p>Tablespace that the table resides in</p>
</td>
<td class="cellalignment1013" headers="r3c1-t8 r1c3-t8">
<pre>
word
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t8" headers="r1c1-t8">
<p><code>OCI_ATTR_CLUSTERED</code><a id="sthref955"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t8 r1c2-t8">
<p>Indicates that the table is clustered</p>
</td>
<td class="cellalignment1013" headers="r4c1-t8 r1c3-t8">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t8" headers="r1c1-t8">
<p><code>OCI_ATTR_PARTITIONED</code><a id="sthref956"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t8 r1c2-t8">
<p>Indicates that the table is partitioned</p>
</td>
<td class="cellalignment1013" headers="r5c1-t8 r1c3-t8">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t8" headers="r1c1-t8">
<p><code>OCI_ATTR_INDEX_ONLY</code><a id="sthref957"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t8 r1c2-t8">
<p>Indicates that the table is index-only</p>
</td>
<td class="cellalignment1013" headers="r6c1-t8 r1c3-t8">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16451" class="sect2"><a id="sthref958"></a>
<h3 class="sect2">Procedure, Function, and <a id="sthref959"></a>Subprogram Attributes<a id="sthref960"></a><a id="sthref961"></a><a id="sthref962"></a><a id="sthref963"></a></h3>
<p><a href="#CIHDGCHI">Table 6-4</a> lists the type-specific attributes when a parameter is for a procedure or function (type <code>OCI_PTYPE_PROC</code> or <code>OCI_PTYPE_FUNC</code>).</p>
<div id="LNOCI16452" class="tblformalwide">
<p class="titleintable"><a id="sthref964"></a><a id="CIHDGCHI"></a>Table 6-4 Attributes of Procedures or Functions</p>
<table class="cellalignment1011" title="Attributes of Procedures or Functions " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t9">Attribute</th>
<th class="cellalignment1012" id="r1c2-t9">Description</th>
<th class="cellalignment1012" id="r1c3-t9">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t9" headers="r1c1-t9">
<p><code>OCI_ATTR_LIST_ARGUMENTS</code><a id="sthref965"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t9 r1c2-t9">
<p>Argument list. See <a href="#i442669">"List Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t9 r1c3-t9">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t9" headers="r1c1-t9">
<p><code>OCI_ATTR_IS_INVOKER_RIGHTS</code><a id="sthref966"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t9 r1c2-t9">
<p>Indicates that the procedure or function has invoker's rights</p>
</td>
<td class="cellalignment1013" headers="r3c1-t9 r1c3-t9">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p><a href="#CIHBICAE">Table 6-5</a> lists the attributes that are defined only for package subprograms.</p>
<div id="LNOCI16453" class="tblformalwide">
<p class="titleintable"><a id="sthref967"></a><a id="CIHBICAE"></a>Table 6-5 Attributes Specific to Package Subprograms</p>
<table class="cellalignment1011" title="Attributes Specific to Package Subprograms" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t10">Attribute</th>
<th class="cellalignment1012" id="r1c2-t10">Description</th>
<th class="cellalignment1012" id="r1c3-t10">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t10" headers="r1c1-t10">
<p><code>OCI_ATTR_NAME</code><a id="sthref968"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t10 r1c2-t10">
<p>Name of the procedure or function</p>
</td>
<td class="cellalignment1013" headers="r2c1-t10 r1c3-t10">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t10" headers="r1c1-t10">
<p><code>OCI_ATTR_OVERLOAD<a id="sthref969"></a>_ID</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t10 r1c2-t10">
<p>Overloading ID number (relevant in case the procedure or function is part of a package and is overloaded). Values returned may be different from direct query of a PL/SQL function or procedure.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t10 r1c3-t10">
<pre>
ub2
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16454" class="sect2"><a id="sthref970"></a>
<h3 class="sect2">Package Attributes<a id="sthref971"></a><a id="sthref972"></a></h3>
<p><a href="#CIHDECFF">Table 6-6</a> lists the attributes when a parameter is for a package (type <code>OCI_PTYPE_PKG</code>).</p>
<div id="LNOCI16455" class="tblformalwide">
<p class="titleintable"><a id="sthref973"></a><a id="CIHDECFF"></a>Table 6-6 Attributes of Packages</p>
<table class="cellalignment1011" title="Attributes of Packages " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t11">Attribute</th>
<th class="cellalignment1012" id="r1c2-t11">Description</th>
<th class="cellalignment1012" id="r1c3-t11">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t11" headers="r1c1-t11">
<p><code>OCI_ATTR_LIST_SUBPROGRAMS</code><a id="sthref974"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t11 r1c2-t11">
<p>Subprogram list. See <a href="#i442669">"List Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t11 r1c3-t11">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t11" headers="r1c1-t11">
<p><code>OCI_ATTR_IS_INVOKER_RIGHTS</code><a id="sthref975"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t11 r1c2-t11">
<p>Indicates that the package has invoker's rights?</p>
</td>
<td class="cellalignment1013" headers="r3c1-t11 r1c3-t11">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16456" class="sect2"><a id="sthref976"></a>
<h3 class="sect2">Type Attributes<a id="sthref977"></a><a id="sthref978"></a></h3>
<p><a href="#g453808">Table 6-7</a> lists the attributes when a parameter is for a type (type <code>OCI_PTYPE_TYPE</code>). These attributes are only valid if the application initialized the OCI process in <code>OCI_OBJECT</code> mode in a call to <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>.</p>
<div id="LNOCI16457" class="tblformalwide">
<p class="titleintable"><a id="sthref979"></a><a id="g453808"></a>Table 6-7 Attributes of Types</p>
<table class="cellalignment1011" title="Attributes of Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t12">Attribute</th>
<th class="cellalignment1012" id="r1c2-t12">Description</th>
<th class="cellalignment1012" id="r1c3-t12">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref980"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t12 r1c2-t12">
<p>Returns the in-memory <code>REF</code> of the type descriptor object (TDO) for the type, if the column type is an object type. If space has not been reserved for the <code>OCIRef</code>, then it is allocated implicitly in the cache. The caller can then pin the TDO with <code>OCIObjectPin()</code>.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t12 r1c3-t12">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_TYPECODE</code><a id="sthref981"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t12 r1c2-t12">
<p>Typecode. See <a href="#i442394">"Data Type Codes"</a>. Currently can be only <code><a id="sthref982"></a>OCI_TYPECODE_OBJECT</code> or <code><a id="sthref983"></a>OCI_TYPECODE_NAMEDCOLLECTION</code>.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t12 r1c3-t12">
<pre>
OCITypeCode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_COLLECTION_TYPECODE</code><a id="sthref984"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t12 r1c2-t12">
<p>Typecode of collection if type is collection; invalid otherwise. See <a href="#i442394">"Data Type Codes"</a>. Currently can be only <code><a id="sthref985"></a>OCI_TYPECODE_VARRAY</code> or <code><a id="sthref986"></a>OCI_TYPECODE_TABLE</code>. If this attribute is queried for a type that is not a collection, an error is returned.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t12 r1c3-t12">
<pre>
OCITypeCode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_INCOMPLETE_TYPE</code><a id="sthref987"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t12 r1c2-t12">
<p>Indicates that this is an incomplete type</p>
</td>
<td class="cellalignment1013" headers="r5c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_SYSTEM_TYPE</code><a id="sthref988"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t12 r1c2-t12">
<p>Indicates that this is a system type</p>
</td>
<td class="cellalignment1013" headers="r6c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_PREDEFINED_TYPE</code><a id="sthref989"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t12 r1c2-t12">
<p>Indicates that this is a predefined type</p>
</td>
<td class="cellalignment1013" headers="r7c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_TRANSIENT_TYPE</code><a id="sthref990"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t12 r1c2-t12">
<p>Indicates that this is a transient type</p>
</td>
<td class="cellalignment1013" headers="r8c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_SYSTEM_GENERATED_TYPE</code><a id="sthref991"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t12 r1c2-t12">
<p>Indicates that this is a system-generated type</p>
</td>
<td class="cellalignment1013" headers="r9c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_HAS_NESTED_TABLE</code><a id="sthref992"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t12 r1c2-t12">
<p>This type contains a nested table attribute.</p>
</td>
<td class="cellalignment1013" headers="r10c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_HAS_LOB</code><a id="sthref993"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t12 r1c2-t12">
<p>This type contains a LOB attribute.</p>
</td>
<td class="cellalignment1013" headers="r11c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_HAS_FILE</code><a id="sthref994"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t12 r1c2-t12">
<p>This type contains a <code>BFILE</code> attribute.</p>
</td>
<td class="cellalignment1013" headers="r12c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_COLLECTION_ELEMENT</code><a id="sthref995"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t12 r1c2-t12">
<p>Handle to collection element. See <a href="#i442697">"Collection Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r13c1-t12 r1c3-t12">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_NUM_TYPE_ATTRS</code><a id="sthref996"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t12 r1c2-t12">
<p>Number of type attributes</p>
</td>
<td class="cellalignment1013" headers="r14c1-t12 r1c3-t12">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_LIST_TYPE_ATTRS</code><a id="sthref997"></a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t12 r1c2-t12">
<p>List of type attributes. See <a href="#i442669">"List Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r15c1-t12 r1c3-t12">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_NUM_TYPE_METHODS</code><a id="sthref998"></a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t12 r1c2-t12">
<p>Number of type methods</p>
</td>
<td class="cellalignment1013" headers="r16c1-t12 r1c3-t12">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_LIST_TYPE_METHODS</code><a id="sthref999"></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t12 r1c2-t12">
<p>List of type methods. See <a href="#i442669">"List Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r17c1-t12 r1c3-t12">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_MAP_METHOD</code><a id="sthref1000"></a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t12 r1c2-t12">
<p>Map method of type. See <a href="#i442701">"Type Method Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r18c1-t12 r1c3-t12">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_ORDER_METHOD</code><a id="sthref1001"></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t12 r1c2-t12">
<p>Order method of type. See <a href="#i442701">"Type Method Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r19c1-t12 r1c3-t12">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_IS_INVOKER_RIGHTS</code><a id="sthref1002"></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t12 r1c2-t12">
<p>Indicates that the type has invoker's rights</p>
</td>
<td class="cellalignment1013" headers="r20c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_NAME</code><a id="sthref1003"></a></p>
</td>
<td class="cellalignment1013" headers="r21c1-t12 r1c2-t12">
<p>A pointer to a string that is the type attribute name</p>
</td>
<td class="cellalignment1013" headers="r21c1-t12 r1c3-t12">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t12" headers="r1c1-t12">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1004"></a></p>
</td>
<td class="cellalignment1013" headers="r22c1-t12 r1c2-t12">
<p>A string with the schema name where the type has been created</p>
</td>
<td class="cellalignment1013" headers="r22c1-t12 r1c3-t12">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t12" headers="r1c1-t12">
<p><a id="sthref1005"></a><code>OCI_ATTR_IS_FINAL_TYPE</code></p>
</td>
<td class="cellalignment1013" headers="r23c1-t12 r1c2-t12">
<p>Indicates that this is a final type</p>
</td>
<td class="cellalignment1013" headers="r23c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t12" headers="r1c1-t12">
<p><a id="sthref1006"></a><code>OCI_ATTR_IS_INSTANTIABLE_TYPE</code></p>
</td>
<td class="cellalignment1013" headers="r24c1-t12 r1c2-t12">
<p>Indicates that this is an instantiable type</p>
</td>
<td class="cellalignment1013" headers="r24c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t12" headers="r1c1-t12">
<p><a id="sthref1007"></a><code>OCI_ATTR_IS_SUBTYPE</code></p>
</td>
<td class="cellalignment1013" headers="r25c1-t12 r1c2-t12">
<p>Indicates that this is a subtype</p>
</td>
<td class="cellalignment1013" headers="r25c1-t12 r1c3-t12">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t12" headers="r1c1-t12">
<p><a id="sthref1008"></a><code>OCI_ATTR_SUPERTYPE_SCHEMA_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r26c1-t12 r1c2-t12">
<p>Name of the schema that contains the supertype</p>
</td>
<td class="cellalignment1013" headers="r26c1-t12 r1c3-t12">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t12" headers="r1c1-t12">
<p><a id="sthref1009"></a><code>OCI_ATTR_SUPERTYPE_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r27c1-t12 r1c2-t12">
<p>Name of the supertype</p>
</td>
<td class="cellalignment1013" headers="r27c1-t12 r1c3-t12">
<pre>
OraText *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16458" class="sect2"><a id="sthref1010"></a>
<h3 class="sect2">Type Attribute Attributes<a id="sthref1011"></a><a id="sthref1012"></a></h3>
<p><a href="#g453920">Table 6-8</a> lists the attributes when a parameter is for an attribute of a type (type <code>OCI_PTYPE_TYPE_ATTR</code>).</p>
<div id="LNOCI16459" class="tblformalwide">
<p class="titleintable"><a id="sthref1013"></a><a id="g453920"></a>Table 6-8 Attributes of Type Attributes</p>
<table class="cellalignment1011" title="Attributes of Type Attributes " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t13">Attribute</th>
<th class="cellalignment1012" id="r1c2-t13">Description</th>
<th class="cellalignment1012" id="r1c3-t13">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_DATA_SIZE</code><a id="sthref1014"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t13 r1c2-t13">
<p>The maximum size of the type attribute. This length is returned in bytes and not characters for strings and raws. It returns 22 for <code>NUMBER</code>s.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t13 r1c3-t13">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_TYPECODE</code><a id="sthref1015"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t13 r1c2-t13">
<p>Typecode. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t13 r1c3-t13">
<pre>
OCITypeCode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_DATA_TYPE</code><a id="sthref1016"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t13 r1c2-t13">
<p>The data type of the type attribute. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t13 r1c3-t13">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_NAME</code><a id="sthref1017"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t13 r1c2-t13">
<p>A pointer to a string that is the type attribute name</p>
</td>
<td class="cellalignment1013" headers="r5c1-t13 r1c3-t13">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_PRECISION</code><a id="sthref1018"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t13 r1c2-t13">
<p>The precision of numeric type attributes. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r6c1-t13 r1c3-t13">
<pre>
ub1 for explicit describe
sb2 for implicit describe
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_SCALE</code><a id="sthref1019"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t13 r1c2-t13">
<p>The scale of numeric type attributes. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r7c1-t13 r1c3-t13">
<pre>
sb1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_TYPE_NAME</code><a id="sthref1020"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t13 r1c2-t13">
<p>A string that is the type name. The returned value contains the type name if the data type is <code>SQLT_NTY</code> or <code>SQLT_REF</code>. If the data type is <code>SQLT_NTY</code>, the name of the named data type's type is returned. If the data type is <code>SQLT_REF</code>, the type name of the named data type pointed to by the <code>REF</code> is returned.</p>
</td>
<td class="cellalignment1013" headers="r8c1-t13 r1c3-t13">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1021"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t13 r1c2-t13">
<p>A string with the schema name under which the type has been created</p>
</td>
<td class="cellalignment1013" headers="r9c1-t13 r1c3-t13">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref1022"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t13 r1c2-t13">
<p>Returns the in-memory <code>REF</code> of the TDO for the type, if the column type is an object type. If space has not been reserved for the <code>OCIRef</code>, then it is allocated implicitly in the cache. The caller can then pin the TDO with <code>OCIObjectPin()</code>.</p>
</td>
<td class="cellalignment1013" headers="r10c1-t13 r1c3-t13">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_CHARSET_ID</code><a id="sthref1023"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t13 r1c2-t13">
<p>The character set ID, if the type attribute is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r11c1-t13 r1c3-t13">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_CHARSET_FORM</code><a id="sthref1024"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t13 r1c2-t13">
<p>The character set form, if the type attribute is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r12c1-t13 r1c3-t13">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_FSPRECISION</code><a id="sthref1025"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t13 r1c2-t13">
<p>The fractional seconds precision of a datetime or interval</p>
</td>
<td class="cellalignment1013" headers="r13c1-t13 r1c3-t13">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t13" headers="r1c1-t13">
<p><code>OCI_ATTR_LFPRECISION</code><a id="sthref1026"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t13 r1c2-t13">
<p>The leading field precision of an interval</p>
</td>
<td class="cellalignment1013" headers="r14c1-t13 r1c3-t13">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i442701"></a>
<div id="LNOCI16460" class="sect2">
<h3 class="sect2"><a id="sthref1027"></a>Type Method Attributes<a id="sthref1028"></a><a id="sthref1029"></a><a id="sthref1030"></a><a id="sthref1031"></a></h3>
<p><a href="#g454036">Table 6-9</a> lists the attributes when a parameter is for a method of a type (type <a id="sthref1032"></a><code>OCI_PTYPE_TYPE_METHOD</code>).</p>
<div id="LNOCI16461" class="tblformalwide">
<p class="titleintable"><a id="sthref1033"></a><a id="g454036"></a>Table 6-9 Attributes of Type Methods</p>
<table class="cellalignment1011" title="Attributes of Type Methods " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t14">Attribute</th>
<th class="cellalignment1012" id="r1c2-t14">Description</th>
<th class="cellalignment1012" id="r1c3-t14">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_NAME</code><a id="sthref1034"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t14 r1c2-t14">
<p>Name of method (procedure or function)</p>
</td>
<td class="cellalignment1013" headers="r2c1-t14 r1c3-t14">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_ENCAPSULATION</code><a id="sthref1035"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t14 r1c2-t14">
<p>Encapsulation level of the method (either <code><a id="sthref1036"></a>OCI_TYPEENCAP_PRIVATE</code> or <code><a id="sthref1037"></a>OCI_TYPEENCAP_PUBLIC</code>)</p>
</td>
<td class="cellalignment1013" headers="r3c1-t14 r1c3-t14">
<pre>
OCITypeEncap
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_LIST_ARGUMENTS</code><a id="sthref1038"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t14 r1c2-t14">
<p>Argument list. See <a href="#i442801">"OCI_ATTR_LIST_ARGUMENTS Attribute"</a>, and <a href="#i442669">"List Attributes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t14 r1c3-t14">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_CONSTRUCTOR</code><a id="sthref1039"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t14 r1c2-t14">
<p>Indicates that method is a constructor</p>
</td>
<td class="cellalignment1013" headers="r5c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_DESTRUCTOR</code><a id="sthref1040"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t14 r1c2-t14">
<p>Indicates that method is a destructor</p>
</td>
<td class="cellalignment1013" headers="r6c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_OPERATOR</code><a id="sthref1041"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t14 r1c2-t14">
<p>Indicates that method is an operator</p>
</td>
<td class="cellalignment1013" headers="r7c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_SELFISH</code><a id="sthref1042"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t14 r1c2-t14">
<p>Indicates that method is selfish</p>
</td>
<td class="cellalignment1013" headers="r8c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_MAP</code><a id="sthref1043"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t14 r1c2-t14">
<p>Indicates that method is a map method</p>
</td>
<td class="cellalignment1013" headers="r9c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_ORDER</code><a id="sthref1044"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t14 r1c2-t14">
<p>Indicates that method is an order method</p>
</td>
<td class="cellalignment1013" headers="r10c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_RNDS</code><a id="sthref1045"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t14 r1c2-t14">
<p>Indicates that "Read No Data State" is set for method</p>
</td>
<td class="cellalignment1013" headers="r11c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_RNPS</code><a id="sthref1046"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t14 r1c2-t14">
<p>Indicates that "Read No Process State" is set for method</p>
</td>
<td class="cellalignment1013" headers="r12c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_WNDS</code><a id="sthref1047"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t14 r1c2-t14">
<p>Indicates that "Write No Data State" is set for method</p>
</td>
<td class="cellalignment1013" headers="r13c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t14" headers="r1c1-t14">
<p><code>OCI_ATTR_IS_WNPS</code><a id="sthref1048"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t14 r1c2-t14">
<p>Indicates that "Write No Process State" is set for method</p>
</td>
<td class="cellalignment1013" headers="r14c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t14" headers="r1c1-t14">
<p><a id="sthref1049"></a><code>OCI_ATTR_IS_FINAL_METHOD</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t14 r1c2-t14">
<p>Indicates that this is a final method</p>
</td>
<td class="cellalignment1013" headers="r15c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t14" headers="r1c1-t14">
<p><a id="sthref1050"></a><code>OCI_ATTR_IS_INSTANTIABLE_METHOD</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t14 r1c2-t14">
<p>Indicates that this is an instantiable method</p>
</td>
<td class="cellalignment1013" headers="r16c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t14" headers="r1c1-t14">
<p><a id="sthref1051"></a><code>OCI_ATTR_IS_OVERRIDING_METHOD</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t14 r1c2-t14">
<p>Indicates that this is an overriding method</p>
</td>
<td class="cellalignment1013" headers="r17c1-t14 r1c3-t14">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i442697"></a>
<div id="LNOCI16462" class="sect2">
<h3 class="sect2">Collection Attributes<a id="sthref1052"></a><a id="sthref1053"></a></h3>
<p><a href="#g453980">Table 6-10</a> lists the attributes when a parameter is for a collection type (type <code>OCI_PTYPE_COLL</code>).</p>
<div id="LNOCI16463" class="tblformalwide">
<p class="titleintable"><a id="sthref1054"></a><a id="g453980"></a>Table 6-10 Attributes of Collection Types</p>
<table class="cellalignment1011" title="Attributes of Collection Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t15">Attribute</th>
<th class="cellalignment1012" id="r1c2-t15">Description</th>
<th class="cellalignment1012" id="r1c3-t15">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_DATA_SIZE</code><a id="sthref1055"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t15 r1c2-t15">
<p>The maximum size of the type attribute. This length is returned in bytes and not characters for strings and raws. It returns 22 for <code>NUMBER</code>s.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t15 r1c3-t15">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_TYPECODE</code><a id="sthref1056"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t15 r1c2-t15">
<p>Typecode. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t15 r1c3-t15">
<pre>
OCITypeCode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_DATA_TYPE</code><a id="sthref1057"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t15 r1c2-t15">
<p>The data type of the type attribute. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t15 r1c3-t15">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_NUM_ELEMS</code><a id="sthref1058"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t15 r1c2-t15">
<p>The number of elements in an array. It is only valid for collections that are arrays.</p>
</td>
<td class="cellalignment1013" headers="r5c1-t15 r1c3-t15">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_NAME</code><a id="sthref1059"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t15 r1c2-t15">
<p>A pointer to a string that is the type attribute name</p>
</td>
<td class="cellalignment1013" headers="r6c1-t15 r1c3-t15">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_PRECISION</code><a id="sthref1060"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t15 r1c2-t15">
<p>The precision of numeric type attributes. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r7c1-t15 r1c3-t15">
<pre>
ub1 for explicit describe
sb2 for implicit describe
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_SCALE</code><a id="sthref1061"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t15 r1c2-t15">
<p>The scale of numeric type attributes. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r8c1-t15 r1c3-t15">
<pre>
sb1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_TYPE_NAME</code><a id="sthref1062"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t15 r1c2-t15">
<p>A string that is the type name. The returned value contains the type name if the data type is <code>SQLT_NTY</code> or <code>SQLT_REF</code>. If the data type is <code>SQLT_NTY</code>, the name of the named data type's type is returned. If the data type is <code>SQLT_REF</code>, the type name of the named data type pointed to by the <code>REF</code> is returned.</p>
</td>
<td class="cellalignment1013" headers="r9c1-t15 r1c3-t15">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1063"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t15 r1c2-t15">
<p>A string with the schema name under which the type has been created</p>
</td>
<td class="cellalignment1013" headers="r10c1-t15 r1c3-t15">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref1064"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t15 r1c2-t15">
<p>Returns the in-memory <code>REF</code> of the type descriptor object (TDO) for the type, if the column type is an object type. If space has not been reserved for the <code>OCIRef</code>, then it is allocated implicitly in the cache. The caller can then pin the TDO with <code>OCIObjectPin()</code>.</p>
</td>
<td class="cellalignment1013" headers="r11c1-t15 r1c3-t15">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_CHARSET_ID</code><a id="sthref1065"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t15 r1c2-t15">
<p>The character set ID, if the type attribute is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r12c1-t15 r1c3-t15">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t15" headers="r1c1-t15">
<p><code>OCI_ATTR_CHARSET_FORM</code><a id="sthref1066"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t15 r1c2-t15">
<p>The character set form, if the type attribute is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r13c1-t15 r1c3-t15">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16464" class="sect2"><a id="sthref1067"></a>
<h3 class="sect2">Synonym Attributes<a id="sthref1068"></a><a id="sthref1069"></a></h3>
<p><a href="#g454108">Table 6-11</a> lists the attributes when a parameter is for a synonym (type <code>OCI_PTYPE_SYN</code>).</p>
<div id="LNOCI16465" class="tblformalwide">
<p class="titleintable"><a id="sthref1070"></a><a id="g454108"></a>Table 6-11 Attributes of Synonyms</p>
<table class="cellalignment1011" title="Attributes of Synonyms " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t16">Attribute</th>
<th class="cellalignment1012" id="r1c2-t16">Description</th>
<th class="cellalignment1012" id="r1c3-t16">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t16" headers="r1c1-t16">
<p><code>OCI_ATTR_OBJID</code><a id="sthref1071"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t16 r1c2-t16">
<p>Object ID</p>
</td>
<td class="cellalignment1013" headers="r2c1-t16 r1c3-t16">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t16" headers="r1c1-t16">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1072"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t16 r1c2-t16">
<p>A string containing the schema name of the synonym translation</p>
</td>
<td class="cellalignment1013" headers="r3c1-t16 r1c3-t16">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t16" headers="r1c1-t16">
<p><code>OCI_ATTR_NAME</code><a id="sthref1073"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t16 r1c2-t16">
<p>A <code>NULL</code>-terminated string containing the object name of the synonym translation</p>
</td>
<td class="cellalignment1013" headers="r4c1-t16 r1c3-t16">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t16" headers="r1c1-t16">
<p><code>OCI_ATTR_LINK</code><a id="sthref1074"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t16 r1c2-t16">
<p>A <code>NULL</code>-terminated string containing the database link name of the synonym translation</p>
</td>
<td class="cellalignment1013" headers="r5c1-t16 r1c3-t16">
<pre>
OraText *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16466" class="sect2"><a id="sthref1075"></a>
<h3 class="sect2">Sequence Attributes<a id="sthref1076"></a><a id="sthref1077"></a></h3>
<p><a href="#g454132">Table 6-12</a> lists the attributes when a parameter is for a sequence (type <code>OCI_PTYPE_SEQ</code>).</p>
<div id="LNOCI16467" class="tblformalwide">
<p class="titleintable"><a id="sthref1078"></a><a id="g454132"></a>Table 6-12 Attributes of Sequences</p>
<table class="cellalignment1011" title="Attributes of Sequences " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t17">Attribute</th>
<th class="cellalignment1012" id="r1c2-t17">Description</th>
<th class="cellalignment1012" id="r1c3-t17">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_OBJID</code><a id="sthref1079"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t17 r1c2-t17">
<p>Object ID</p>
</td>
<td class="cellalignment1013" headers="r2c1-t17 r1c3-t17">
<p>ub4</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_MIN</code><a id="sthref1080"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t17 r1c2-t17">
<p>Minimum value (in Oracle <code>NUMBER</code> format)</p>
</td>
<td class="cellalignment1013" headers="r3c1-t17 r1c3-t17">
<p>ub1 *</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_MAX</code><a id="sthref1081"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t17 r1c2-t17">
<p>Maximum value (in Oracle <code>NUMBER</code> format)</p>
</td>
<td class="cellalignment1013" headers="r4c1-t17 r1c3-t17">
<p>ub1 *</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_INCR</code><a id="sthref1082"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t17 r1c2-t17">
<p>Increment (in Oracle <code>NUMBER</code> format)</p>
</td>
<td class="cellalignment1013" headers="r5c1-t17 r1c3-t17">
<pre>
ub1 *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_CACHE</code><a id="sthref1083"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t17 r1c2-t17">
<p>Number of sequence numbers cached; zero if the sequence is not a cached sequence (in Oracle <code>NUMBER</code> format)</p>
</td>
<td class="cellalignment1013" headers="r6c1-t17 r1c3-t17">
<pre>
ub1 *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_ORDER</code><a id="sthref1084"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t17 r1c2-t17">
<p>Whether the sequence is ordered</p>
</td>
<td class="cellalignment1013" headers="r7c1-t17 r1c3-t17">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t17" headers="r1c1-t17">
<p><code>OCI_ATTR_HW_MARK</code><a id="sthref1085"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t17 r1c2-t17">
<p>High-water mark (in <code>NUMBER</code> format)</p>
</td>
<td class="cellalignment1013" headers="r8c1-t17 r1c3-t17">
<pre>
ub1 *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci12oty.htm#i423538">"OCINumber Examples"</a></div>
</div>
<!-- class="sect2" -->
<div id="LNOCI16468" class="sect2"><a id="sthref1086"></a>
<h3 class="sect2">Column Attributes<a id="sthref1087"></a><a id="sthref1088"></a></h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
For <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code>:
<p>If <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> is used to retrieve the column data type (<code>OCI_ATTR_DATA_TYPE</code>) for <code>BINARY_FLOAT</code> or <code>BINARY_DOUBLE</code> columns in a table, it returns the internal data type code.</p>
<p>The SQLT codes corresponding to the internal data type codes for <code>BINARY_FLOAT</code> and <code>BINARY_DOUBLE</code> are <a id="sthref1089"></a><code>SQLT_IBFLOAT</code> and <a id="sthref1090"></a><code>SQLT_IBDOUBLE</code>.</p>
</div>
<p><a href="#g454168">Table 6-13</a> lists the attributes when a parameter is for a column of a table or view (type <code>OCI_PTYPE_COL</code>).</p>
<div id="LNOCI16469" class="tblformalwide">
<p class="titleintable"><a id="sthref1091"></a><a id="g454168"></a>Table 6-13 Attributes of Columns of Tables or Views</p>
<table class="cellalignment1011" title="Attributes of Columns of Tables or Views " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t20">Attribute</th>
<th class="cellalignment1012" id="r1c2-t20">Description</th>
<th class="cellalignment1012" id="r1c3-t20">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t20" headers="r1c1-t20">
<p><a id="sthref1092"></a><code>OCI_ATTR_CHAR_USED</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c2-t20">
<p>Returns the type of length semantics of the column. Zero (0) means byte-length semantics and 1 means character-length semantics. See <a href="#i448663">"Character-Length Semantics Support in Describe Operations"</a>.</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c3-t20">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t20" headers="r1c1-t20">
<p><a id="sthref1093"></a><code>OCI_ATTR_CHAR_SIZE</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c2-t20">
<p>Returns the column character length that is the number of characters allowed in the column. It is the counterpart of <code><a id="sthref1094"></a>OCI_ATTR_DATA_SIZE</code>, which gets the byte length. See <a href="#i448663">"Character-Length Semantics Support in Describe Operations"</a>.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c3-t20">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_DATA_SIZE</code><a id="sthref1095"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c2-t20">
<p>The maximum size of the column. This length is returned in bytes and not characters for strings and raws. It returns 22 for <code>NUMBER</code>s.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t20 r1c3-t20">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_DATA_TYPE</code><a id="sthref1096"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c2-t20">
<p>The data type of the column. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r5c1-t20 r1c3-t20">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_NAME</code><a id="sthref1097"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c2-t20">
<p>A pointer to a string that is the column name</p>
</td>
<td class="cellalignment1013" headers="r6c1-t20 r1c3-t20">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_PRECISION</code><a id="sthref1098"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c2-t20">
<p>The precision of numeric columns. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r7c1-t20 r1c3-t20">
<pre>
ub1 for explicit describe
sb2 for implicit describe
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_SCALE</code><a id="sthref1099"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c2-t20">
<p>The scale of numeric columns. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER</code>(<code>precision, scale</code>). When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r8c1-t20 r1c3-t20">
<pre>
sb1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_IS_NULL</code><a id="sthref1100"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t20 r1c2-t20">
<p>Returns 0 if null values are not permitted for the column. Does not return a correct value for a <code>CUBE</code> or <code>ROLLUP</code> operation.</p>
</td>
<td class="cellalignment1013" headers="r9c1-t20 r1c3-t20">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_TYPE_NAME</code><a id="sthref1101"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t20 r1c2-t20">
<p>Returns a string that is the type name. The returned value contains the type name if the data type is <code>SQLT_NTY</code> or <code>SQLT_REF</code>. If the data type is <code>SQLT_NTY</code>, the name of the named data type's type is returned. If the data type is <code>SQLT_REF</code>, the type name of the named data type pointed to by the <code>REF</code> is returned.</p>
</td>
<td class="cellalignment1013" headers="r10c1-t20 r1c3-t20">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1102"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t20 r1c2-t20">
<p>Returns a string with the schema name under which the type has been created</p>
</td>
<td class="cellalignment1013" headers="r11c1-t20 r1c3-t20">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref1103"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t20 r1c2-t20">
<p>The <code>REF</code> of the TDO for the type, if the column type is an object type</p>
</td>
<td class="cellalignment1013" headers="r12c1-t20 r1c3-t20">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_CHARSET_ID</code><a id="sthref1104"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t20 r1c2-t20">
<p>The character set ID, if the column is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r13c1-t20 r1c3-t20">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t20" headers="r1c1-t20">
<p><code>OCI_ATTR_CHARSET_FORM</code><a id="sthref1105"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t20 r1c2-t20">
<p>The character set form, if the column is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r14c1-t20 r1c3-t20">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16470" class="sect2"><a id="sthref1106"></a>
<h3 class="sect2">Argument and Result Attributes<a id="sthref1107"></a><a id="sthref1108"></a></h3>
<p><a href="#g454228">Table 6-14</a> lists the attributes when a parameter is for an argument of a procedure or function (type <code>OCI_PTYPE_ARG</code>), for a type method argument (type <code>OCI_PTYPE_TYPE_ARG</code>), or for <a id="sthref1109"></a>method results (type <code>OCI_PTYPE_TYPE_RESULT</code>).</p>
<div id="LNOCI16471" class="tblformalwide">
<p class="titleintable"><a id="sthref1110"></a><a id="g454228"></a>Table 6-14 Attributes of Arguments and Results</p>
<table class="cellalignment1011" title="Attributes of Arguments and Results " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t21">Attribute</th>
<th class="cellalignment1012" id="r1c2-t21">Description</th>
<th class="cellalignment1012" id="r1c3-t21">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_NAME</code><a id="sthref1111"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c2-t21">
<p>Returns a pointer to a string that is the argument name</p>
</td>
<td class="cellalignment1013" headers="r2c1-t21 r1c3-t21">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_POSITION</code><a id="sthref1112"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c2-t21">
<p>The position of the argument in the argument list. Always returns zero.</p>
</td>
<td class="cellalignment1013" headers="r3c1-t21 r1c3-t21">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_TYPECODE</code><a id="sthref1113"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t21 r1c2-t21">
<p>Typecode. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r4c1-t21 r1c3-t21">
<pre>
OCITypeCode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_DATA_TYPE</code><a id="sthref1114"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t21 r1c2-t21">
<p>The data type of the argument. See <a href="#i442394">"Data Type Codes"</a>.</p>
</td>
<td class="cellalignment1013" headers="r5c1-t21 r1c3-t21">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_DATA_SIZE</code><a id="sthref1115"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t21 r1c2-t21">
<p>The size of the data type of the argument. This length is returned in bytes and not characters for strings and raws. It returns 22 for <code>NUMBER</code>s.</p>
</td>
<td class="cellalignment1013" headers="r6c1-t21 r1c3-t21">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_PRECISION</code><a id="sthref1116"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t21 r1c2-t21">
<p>The precision of numeric arguments. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r7c1-t21 r1c3-t21">
<p><code>b1</code> for explicit describe</p>
<p><code>sb2</code> for implicit describe</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_SCALE</code><a id="sthref1117"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t21 r1c2-t21">
<p>The scale of numeric arguments. If the precision is nonzero and scale is -127, then it is a <code>FLOAT</code>; otherwise, it is a <code>NUMBER(precision, scale)</code>. When precision is 0, <code>NUMBER(precision, scale)</code> can be represented simply as <code>NUMBER</code>.</p>
</td>
<td class="cellalignment1013" headers="r8c1-t21 r1c3-t21">
<p><code>sb1</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_LEVEL</code><a id="sthref1118"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t21 r1c2-t21">
<p>The data type levels. This attribute always returns zero.</p>
</td>
<td class="cellalignment1013" headers="r9c1-t21 r1c3-t21">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_HAS_DEFAULT</code><a id="sthref1119"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t21 r1c2-t21">
<p>Indicates whether an argument has a default</p>
</td>
<td class="cellalignment1013" headers="r10c1-t21 r1c3-t21">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t21" headers="r1c1-t21">
<p><code><a id="sthref1120"></a>OCI_ATTR_LIST_ARGUMENTS</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t21 r1c2-t21">
<p>The list of arguments at the next level (when the argument is of a record or table type)</p>
</td>
<td class="cellalignment1013" headers="r11c1-t21 r1c3-t21">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_IOMODE</code><a id="sthref1121"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t21 r1c2-t21">
<p>Indicates the argument mode:</p>
<p>0 is IN (<code>OCI_TYPEPARAM_IN</code>),</p>
<p>1 is OUT (<code>OCI_TYPEPARAM_OUT</code>),</p>
<p>2 is IN/OUT (<code>OCI_TYPEPARAM_INOUT</code>)</p>
</td>
<td class="cellalignment1013" headers="r12c1-t21 r1c3-t21">
<pre>
OCITypeParamMode
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_RADIX</code><a id="sthref1122"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t21 r1c2-t21">
<p>Returns a radix (if number type)</p>
</td>
<td class="cellalignment1013" headers="r13c1-t21 r1c3-t21">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_IS_NULL</code><a id="sthref1123"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t21 r1c2-t21">
<p>Returns 0 if null values are not permitted for the column</p>
</td>
<td class="cellalignment1013" headers="r14c1-t21 r1c3-t21">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_TYPE_NAME</code><a id="sthref1124"></a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t21 r1c2-t21">
<p>Returns a string that is the type name or the package name for package local types. The returned value contains the type name if the data type is <code>SQLT_NTY</code> or <code>SQLT_REF</code>. If the data type is <code>SQLT_NTY</code>, the name of the named data type's type is returned. If the data type is <code>SQLT_REF</code>, the type name of the named data type pointed to by the <code>REF</code> is returned.</p>
</td>
<td class="cellalignment1013" headers="r15c1-t21 r1c3-t21">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_SCHEMA_NAME</code><a id="sthref1125"></a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t21 r1c2-t21">
<p>For <code>SQLT_NTY</code> or <code>SQLT_REF</code>, returns a string with the schema name under which the type was created, or under which the package was created for package local types</p>
</td>
<td class="cellalignment1013" headers="r16c1-t21 r1c3-t21">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_SUB_NAME</code><a id="sthref1126"></a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t21 r1c2-t21">
<p>For <code>SQLT_NTY</code> or <code>SQLT_REF</code>, returns a string with the type name, for package local types</p>
</td>
<td class="cellalignment1013" headers="r17c1-t21 r1c3-t21">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_LINK</code><a id="sthref1127"></a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t21 r1c2-t21">
<p>For <code>SQLT_NTY</code> or <code>SQLT_REF</code>, returns a string with the database link name of the database on which the type exists. This can happen only for package local types, when the package is remote.</p>
</td>
<td class="cellalignment1013" headers="r18c1-t21 r1c3-t21">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_REF_TDO</code><a id="sthref1128"></a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t21 r1c2-t21">
<p>Returns the <code>REF</code> of the type descriptor object (TDO) for the type, if the argument type is an object</p>
</td>
<td class="cellalignment1013" headers="r19c1-t21 r1c3-t21">
<pre>
OCIRef *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t21" headers="r1c1-t21">
<p><code>OCI_ATTR_CHARSET_ID</code><a id="sthref1129"></a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t21 r1c2-t21">
<p>Returns the character set ID if the argument is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r20c1-t21 r1c3-t21">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t21" headers="r1c1-t21">
<p><a id="sthref1130"></a><code>OCI_ATTR_CHARSET_FORM</code></p>
</td>
<td class="cellalignment1013" headers="r21c1-t21 r1c2-t21">
<p>Returns the character set form if the argument is of a string or character type</p>
</td>
<td class="cellalignment1013" headers="r21c1-t21 r1c3-t21">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i442669"></a>
<div id="LNOCI16472" class="sect2">
<h3 class="sect2">List Attributes<a id="sthref1131"></a><a id="sthref1132"></a></h3>
<p>When a parameter is for a list of columns, arguments, or subprograms (<a id="sthref1133"></a>type <code>OCI_PTYPE_LIST</code>), it has the type-specific attributes and handles (parameters) shown in <a href="#g453664">Table 6-15</a>.</p>
<p><a id="sthref1134"></a>The list has an <code>OCI_ATTR_LTYPE</code> attribute that designates the list type. <a href="#g453664">Table 6-15</a> lists the possible values and their lower bounds when traversing the list.</p>
<div id="LNOCI16473" class="tblformalwide">
<p class="titleintable"><a id="sthref1135"></a><a id="g453664"></a>Table 6-15 List Attributes</p>
<table class="cellalignment1011" title="List Attributes " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t22">List Attribute</th>
<th class="cellalignment1012" id="r1c2-t22">Description</th>
<th class="cellalignment1012" id="r1c3-t22">Lower Bound</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t22" headers="r1c1-t22">
<p><a id="i448398"></a><code><a id="sthref1136"></a>OCI_LTYPE_COLUMN</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c2-t22">
<p>Column list</p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c3-t22">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t22" headers="r1c1-t22">
<p><a id="sthref1137"></a><code>OCI_LTYPE_ARG_PROC</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c2-t22">
<p>Procedure argument list</p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c3-t22">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t22" headers="r1c1-t22">
<p><a id="sthref1138"></a><code>OCI_LTYPE_ARG_FUNC</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c2-t22">
<p>Function argument list</p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c3-t22">
<p>0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t22" headers="r1c1-t22">
<p><a id="sthref1139"></a><code>OCI_LTYPE_SUBPRG</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c2-t22">
<p>Subprogram list</p>
</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c3-t22">
<p>0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t22" headers="r1c1-t22">
<p><a id="sthref1140"></a><code>OCI_LTYPE_TYPE_ATTR</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t22 r1c2-t22">
<p>Type attribute list</p>
</td>
<td class="cellalignment1013" headers="r6c1-t22 r1c3-t22">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t22" headers="r1c1-t22">
<p><a id="sthref1141"></a><code>OCI_LTYPE_TYPE_METHOD</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t22 r1c2-t22">
<p>Type method list</p>
</td>
<td class="cellalignment1013" headers="r7c1-t22 r1c3-t22">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t22" headers="r1c1-t22">
<p><a id="sthref1142"></a><code>OCI_LTYPE_TYPE_ARG_PROC</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t22 r1c2-t22">
<p>Type method without result argument list</p>
</td>
<td class="cellalignment1013" headers="r8c1-t22 r1c3-t22">
<p>0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t22" headers="r1c1-t22">
<p><a id="sthref1143"></a><code>OCI_LTYPE_TYPE_ARG_FUNC</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t22 r1c2-t22">
<p>Type method without result argument list</p>
</td>
<td class="cellalignment1013" headers="r9c1-t22 r1c3-t22">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t22" headers="r1c1-t22">
<p><a id="sthref1144"></a><code>OCI_LTYPE_SCH_OBJ</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t22 r1c2-t22">
<p>Object list within a schema</p>
</td>
<td class="cellalignment1013" headers="r10c1-t22 r1c3-t22">
<p>0</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t22" headers="r1c1-t22">
<p><a id="sthref1145"></a><code>OCI_LTYPE_DB_SCH</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t22 r1c2-t22">
<p>Schema list within a database</p>
</td>
<td class="cellalignment1013" headers="r11c1-t22 r1c3-t22">
<p>0</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>The list has an <code>OCI_ATTR_NUM_PARAMS</code> attribute, which tells the number of elements in the list.<a id="sthref1146"></a></p>
<p>Each list has <code>LowerBound</code> ... <code>OCI_ATTR_NUM_PARAMS</code> parameters. <code>LowerBound</code> is the value in the Lower Bound column of <a href="#g453664">Table 6-15</a>. For a function argument list, position 0 has a parameter for the return value (type <code>OCI_PTYPE_ARG</code>).</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16474" class="sect2"><a id="sthref1147"></a>
<h3 class="sect2">Schema Attributes<a id="sthref1148"></a><a id="sthref1149"></a></h3>
<p><a href="#g454316">Table 6-16</a> lists the attributes when a parameter is for a <a id="sthref1150"></a>schema type (type <code>OCI_PTYPE_SCHEMA</code>).</p>
<div id="LNOCI16475" class="tblformalwide">
<p class="titleintable"><a id="sthref1151"></a><a id="g454316"></a>Table 6-16 Attributes Specific to Schemas</p>
<table class="cellalignment1011" title="Attributes Specific to Schemas " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t23">Attribute</th>
<th class="cellalignment1012" id="r1c2-t23">Description</th>
<th class="cellalignment1012" id="r1c3-t23">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t23" headers="r1c1-t23">
<p><code>OCI_ATTR_LIST_OBJECTS</code><a id="sthref1152"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t23 r1c2-t23">
<p>List of objects in the schema</p>
</td>
<td class="cellalignment1013" headers="r2c1-t23 r1c3-t23">
<pre>
OCIParam *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16476" class="sect2"><a id="sthref1153"></a>
<h3 class="sect2">Database Attributes<a id="sthref1154"></a><a id="sthref1155"></a></h3>
<p><a href="#g454328">Table 6-17</a> lists the attributes when a parameter is for a <a id="sthref1156"></a>database type (type <code>OCI_PTYPE_DATABASE</code>).</p>
<div id="LNOCI16477" class="tblformalwide">
<p class="titleintable"><a id="sthref1157"></a><a id="g454328"></a>Table 6-17 Attributes Specific to Databases</p>
<table class="cellalignment1011" title="Attributes Specific to Databases " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t24">Attribute</th>
<th class="cellalignment1012" id="r1c2-t24">Description</th>
<th class="cellalignment1012" id="r1c3-t24">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_VERSION</code><a id="sthref1158"></a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t24 r1c2-t24">
<p>Database version</p>
</td>
<td class="cellalignment1013" headers="r2c1-t24 r1c3-t24">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_CHARSET_ID</code><a id="sthref1159"></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t24 r1c2-t24">
<p>Database character set ID from the server handle</p>
</td>
<td class="cellalignment1013" headers="r3c1-t24 r1c3-t24">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_NCHARSET_ID</code><a id="sthref1160"></a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t24 r1c2-t24">
<p>Database national character set ID from the server handle</p>
</td>
<td class="cellalignment1013" headers="r4c1-t24 r1c3-t24">
<pre>
ub2
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_LIST_SCHEMAS</code><a id="sthref1161"></a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t24 r1c2-t24">
<p>List of schemas (type <code>OCI_PTYPE_SCHEMA</code>) in the database</p>
</td>
<td class="cellalignment1013" headers="r5c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_MAX_PROC_LEN</code><a id="sthref1162"></a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t24 r1c2-t24">
<p>Maximum length of a procedure name</p>
</td>
<td class="cellalignment1013" headers="r6c1-t24 r1c3-t24">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_MAX_COLUMN_LEN</code><a id="sthref1163"></a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t24 r1c2-t24">
<p>Maximum length of a column name</p>
</td>
<td class="cellalignment1013" headers="r7c1-t24 r1c3-t24">
<pre>
ub4
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_CURSOR_COMMIT_BEHAVIOR</code><a id="sthref1164"></a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t24 r1c2-t24">
<p>How a <code>COMMIT</code> operation affects cursors and prepared statements in the database. Values are:</p>
<p><code>OCI_CURSOR_OPEN</code> - Preserve cursor state as before the commit operation.</p>
<p><code>OCI_CURSOR_CLOSED</code> - Cursors are closed on <code>COMMIT</code>, but the application can still reexecute the statement without preparing it again.</p>
</td>
<td class="cellalignment1013" headers="r8c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_MAX_CATALOG_NAMELEN</code><a id="sthref1165"></a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t24 r1c2-t24">
<p>Maximum length of a catalog (database) name</p>
</td>
<td class="cellalignment1013" headers="r9c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_CATALOG_LOCATION</code><a id="sthref1166"></a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t24 r1c2-t24">
<p>Position of the catalog in a qualified table. Values are <code>OCI_CL_START</code> and <code>OCI_CL_END</code>.</p>
</td>
<td class="cellalignment1013" headers="r10c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_SAVEPOINT_SUPPORT</code><a id="sthref1167"></a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t24 r1c2-t24">
<p>Does database support savepoints? Values are <code>OCI_SP_SUPPORTED</code> and <code>OCI_SP_UNSUPPORTED</code>.</p>
</td>
<td class="cellalignment1013" headers="r11c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_NOWAIT_SUPPORT</code><a id="sthref1168"></a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t24 r1c2-t24">
<p>Does database support the nowait clause? Values are <code>OCI_NW_SUPPORTED</code> and <code>OCI_NW_UNSUPPORTED</code>.</p>
</td>
<td class="cellalignment1013" headers="r12c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_AUTOCOMMIT_DDL</code><a id="sthref1169"></a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t24 r1c2-t24">
<p>Is autocommit mode required for DDL statements? Values are <code>OCI_AC_DDL</code> and <code>OCI_NO_AC_DDL</code>.</p>
</td>
<td class="cellalignment1013" headers="r13c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t24" headers="r1c1-t24">
<p><code>OCI_ATTR_LOCKING_MODE</code><a id="sthref1170"></a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t24 r1c2-t24">
<p>Locking mode for the database. Values are <code>OCI_LOCK_IMMEDIATE</code> and <code>OCI_LOCK_DELAYED</code>.</p>
</td>
<td class="cellalignment1013" headers="r14c1-t24 r1c3-t24">
<pre>
ub1
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i450721"></a>
<div id="LNOCI16478" class="sect2">
<h3 class="sect2">Rule Attributes<a id="sthref1171"></a><a id="sthref1172"></a><a id="sthref1173"></a></h3>
<p><a href="#g454404">Table 6-18</a> lists the attributes when a parameter is for a <a id="sthref1174"></a>rule (type <code>OCI_PTYPE_RULE</code>).</p>
<div id="LNOCI16479" class="tblformalwide">
<p class="titleintable"><a id="sthref1175"></a><a id="g454404"></a>Table 6-18 Attributes Specific to Rules</p>
<table class="cellalignment1011" title="Attributes Specific to Rules " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t25">Attribute</th>
<th class="cellalignment1012" id="r1c2-t25">Description</th>
<th class="cellalignment1012" id="r1c3-t25">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t25" headers="r1c1-t25">
<p><a id="sthref1176"></a><code>OCI_ATTR_CONDITION</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t25 r1c2-t25">
<p>Rule condition</p>
</td>
<td class="cellalignment1013" headers="r2c1-t25 r1c3-t25">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t25" headers="r1c1-t25">
<p><a id="sthref1177"></a><code>OCI_ATTR_EVAL_CONTEXT_OWNER</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t25 r1c2-t25">
<p>Owner name of the evaluation context associated with the rule, if any</p>
</td>
<td class="cellalignment1013" headers="r3c1-t25 r1c3-t25">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t25" headers="r1c1-t25">
<p><a id="sthref1178"></a><code>OCI_ATTR_EVAL_CONTEXT_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t25 r1c2-t25">
<p>Object name of the evaluation context associated with the rule, if any</p>
</td>
<td class="cellalignment1013" headers="r4c1-t25 r1c3-t25">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t25" headers="r1c1-t25">
<p><a id="sthref1179"></a><code>OCI_ATTR_COMMENT</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t25 r1c2-t25">
<p>Comment associated with the rule, if any</p>
</td>
<td class="cellalignment1013" headers="r5c1-t25 r1c3-t25">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t25" headers="r1c1-t25">
<p><a id="sthref1180"></a><code>OCI_ATTR_LIST_ACTION_CONTEXT</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t25 r1c2-t25">
<p>List of name-value pairs in the action context (type <code>OCI_PTYPE_LIST</code>)</p>
</td>
<td class="cellalignment1013" headers="r6c1-t25 r1c3-t25">
<pre>
void *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16480" class="sect2"><a id="sthref1181"></a>
<h3 class="sect2">Rule Set Attributes<a id="sthref1182"></a><a id="sthref1183"></a><a id="sthref1184"></a></h3>
<p><a href="#g454468">Table 6-19</a> lists the attributes when a parameter is for a <a id="sthref1185"></a>rule set (type <code>OCI_PTYPE_RULE_SET</code>).</p>
<div id="LNOCI16481" class="tblformalwide">
<p class="titleintable"><a id="sthref1186"></a><a id="g454468"></a>Table 6-19 Attributes Specific to Rule Sets</p>
<table class="cellalignment1011" title="Attributes Specific to Rule Sets " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t26">Attribute</th>
<th class="cellalignment1012" id="r1c2-t26">Description</th>
<th class="cellalignment1012" id="r1c3-t26">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t26" headers="r1c1-t26">
<p><a id="sthref1187"></a><code>OCI_ATTR_EVAL_CONTEXT_OWNER</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t26 r1c2-t26">
<p>Owner name of the evaluation context associated with the rule set, if any</p>
</td>
<td class="cellalignment1013" headers="r2c1-t26 r1c3-t26">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t26" headers="r1c1-t26">
<p><a id="sthref1188"></a><code>OCI_ATTR_EVAL_CONTEXT_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t26 r1c2-t26">
<p>Object name of the evaluation context associated with the rule set, if any</p>
</td>
<td class="cellalignment1013" headers="r3c1-t26 r1c3-t26">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t26" headers="r1c1-t26">
<p><a id="sthref1189"></a><code>OCI_ATTR_COMMENT</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t26 r1c2-t26">
<p>Comment associated with the rule set, if any</p>
</td>
<td class="cellalignment1013" headers="r4c1-t26 r1c3-t26">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t26" headers="r1c1-t26">
<p><a id="sthref1190"></a><code>OCI_ATTR_LIST_RULES</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t26 r1c2-t26">
<p>List of rules in the rule set (type <code>OCI_PTYPE_LIST</code>)</p>
</td>
<td class="cellalignment1013" headers="r5c1-t26 r1c3-t26">
<pre>
void *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16482" class="sect2"><a id="sthref1191"></a>
<h3 class="sect2">Evaluation Context Attributes<a id="sthref1192"></a><a id="sthref1193"></a><a id="sthref1194"></a></h3>
<p><a href="#g454492">Table 6-20</a> lists the attributes when a parameter is for an <a id="sthref1195"></a>evaluation context (type <code>OCI_PTYPE_EVALUATION_CONTEXT</code>).</p>
<div id="LNOCI16483" class="tblformalwide">
<p class="titleintable"><a id="sthref1196"></a><a id="g454492"></a>Table 6-20 Attributes Specific to Evaluation Contexts</p>
<table class="cellalignment1011" title="Attributes Specific to Evaluation Contexts " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t27">Attribute</th>
<th class="cellalignment1012" id="r1c2-t27">Description</th>
<th class="cellalignment1012" id="r1c3-t27">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t27" headers="r1c1-t27">
<p><a id="sthref1197"></a><code>OCI_ATTR_EVALUATION_FUNCTION</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t27 r1c2-t27">
<p>Evaluation function associated with the evaluation context, if any</p>
</td>
<td class="cellalignment1013" headers="r2c1-t27 r1c3-t27">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t27" headers="r1c1-t27">
<p><a id="sthref1198"></a><code>OCI_ATTR_COMMENT</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t27 r1c2-t27">
<p>Comment associated with the evaluation context, if any</p>
</td>
<td class="cellalignment1013" headers="r3c1-t27 r1c3-t27">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t27" headers="r1c1-t27">
<p><a id="sthref1199"></a><code>OCI_ATTR_LIST_TABLE_ALIASES</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t27 r1c2-t27">
<p>List of table aliases in the evaluation context (type <code>OCI_PTYPE_LIST</code>)</p>
</td>
<td class="cellalignment1013" headers="r4c1-t27 r1c3-t27">
<pre>
void *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t27" headers="r1c1-t27">
<p><a id="sthref1200"></a><code>OCI_ATTR_LIST_VARIABLE_TYPES</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t27 r1c2-t27">
<p>List of variable types in the evaluation context (type <code>OCI_PTYPE_LIST</code>)</p>
</td>
<td class="cellalignment1013" headers="r5c1-t27 r1c3-t27">
<pre>
void *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16484" class="sect2"><a id="sthref1201"></a>
<h3 class="sect2">Table Alias Attributes<a id="sthref1202"></a><a id="sthref1203"></a></h3>
<p><a href="#g454516">Table 6-21</a> lists the attributes when a parameter is for a <a id="sthref1204"></a>table alias (type <code>OCI_PTYPE_TABLE_ALIAS</code>).</p>
<div id="LNOCI16485" class="tblformalwide">
<p class="titleintable"><a id="sthref1205"></a><a id="g454516"></a>Table 6-21 Attributes Specific to Table Aliases</p>
<table class="cellalignment1011" title="Attributes Specific to Table Aliases " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t28">Attribute</th>
<th class="cellalignment1012" id="r1c2-t28">Description</th>
<th class="cellalignment1012" id="r1c3-t28">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t28" headers="r1c1-t28">
<p><a id="sthref1206"></a><code>OCI_ATTR_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t28 r1c2-t28">
<p>Table alias name</p>
</td>
<td class="cellalignment1013" headers="r2c1-t28 r1c3-t28">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t28" headers="r1c1-t28">
<p><a id="sthref1207"></a><code>OCI_ATTR_TABLE_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t28 r1c2-t28">
<p>Table name associated with the alias</p>
</td>
<td class="cellalignment1013" headers="r3c1-t28 r1c3-t28">
<pre>
OraText *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16486" class="sect2"><a id="sthref1208"></a>
<h3 class="sect2">Variable Type Attributes<a id="sthref1209"></a><a id="sthref1210"></a></h3>
<p><a href="#g454532">Table 6-22</a> lists the attributes when a parameter is for a <a id="sthref1211"></a>variable (type <code>OCI_PTYPE_VARIABLE_TYPE</code>).</p>
<div id="LNOCI16487" class="tblformalwide">
<p class="titleintable"><a id="sthref1212"></a><a id="g454532"></a>Table 6-22 Attributes Specific to Variable Types</p>
<table class="cellalignment1011" title="Attributes Specific to Variable Types " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t29">Attribute</th>
<th class="cellalignment1012" id="r1c2-t29">Description</th>
<th class="cellalignment1012" id="r1c3-t29">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t29" headers="r1c1-t29">
<p><a id="i450263"></a><code><a id="sthref1213"></a>OCI_ATTR_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t29 r1c2-t29">
<p>Variable name</p>
</td>
<td class="cellalignment1013" headers="r2c1-t29 r1c3-t29">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t29" headers="r1c1-t29">
<p><a id="i450296"></a><code><a id="sthref1214"></a>OCI_ATTR_TYPE</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t29 r1c2-t29">
<p>Variable type</p>
</td>
<td class="cellalignment1013" headers="r3c1-t29 r1c3-t29">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t29" headers="r1c1-t29">
<p><a id="i450300"></a><code><a id="sthref1215"></a>OCI_ATTR_VAR_VALUE_FUNCTION</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t29 r1c2-t29">
<p>Variable value function associated with the variable, if any</p>
</td>
<td class="cellalignment1013" headers="r4c1-t29 r1c3-t29">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t29" headers="r1c1-t29">
<p><a id="i450350"></a><code><a id="sthref1216"></a><a id="sthref1217"></a>OCI_ATTR_VAR_METHOD_FUNCTION</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t29 r1c2-t29">
<p>Variable method function associated with the variable, if any</p>
</td>
<td class="cellalignment1013" headers="r5c1-t29 r1c3-t29">
<pre>
OraText *
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="LNOCI16488" class="sect2"><a id="sthref1218"></a>
<h3 class="sect2">Name Value Attributes<a id="sthref1219"></a><a id="sthref1220"></a></h3>
<p><a href="#g454556">Table 6-23</a> lists the attributes when a parameter is for a <a id="sthref1221"></a>name-value pair (type <code>OCI_PTYPE_NAME_VALUE</code>).</p>
<div id="LNOCI16489" class="tblformalwide">
<p class="titleintable"><a id="sthref1222"></a><a id="g454556"></a>Table 6-23 Attributes Specific to Name-Value Pair</p>
<table class="cellalignment1011" title="Attributes Specific to Name-Value Pair " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t30">Attribute</th>
<th class="cellalignment1012" id="r1c2-t30">Description</th>
<th class="cellalignment1012" id="r1c3-t30">Attribute Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t30" headers="r1c1-t30">
<p><a id="sthref1223"></a><code>OCI_ATTR_NAME</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t30 r1c2-t30">
<p>Name</p>
</td>
<td class="cellalignment1013" headers="r2c1-t30 r1c3-t30">
<pre>
OraText *
</pre></td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t30" headers="r1c1-t30">
<p><a id="sthref1224"></a><code>OCI_ATTR_VALUE</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t30 r1c2-t30">
<p>Value</p>
</td>
<td class="cellalignment1013" headers="r3c1-t30 r1c3-t30">
<pre>
OCIAnyData*
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i448663"></a>
<div id="LNOCI16490" class="sect1">
<h2 class="sect1">Character-Length Semantics Support in Describe Operations</h2>
<p>Since release Oracle9<span class="italic">i</span>, query and column information are supported with <a id="sthref1225"></a>character-length semantics.</p>
<p>The following attributes of describe handles support character-length semantics:</p>
<ul>
<li>
<p><a id="sthref1226"></a><code>OCI_ATTR_CHAR_SIZE</code> gets the column character length, which is the number of characters allowed in the column. It is the counterpart of <a id="sthref1227"></a><code>OCI_ATTR_DATA_SIZE</code>, which gets the byte length.</p>
</li>
<li>
<p>Calling <code>OCIAttrGet()</code> with attribute <code>OCI_ATTR_CHAR_SIZE</code> or <code>OCI_ATTR_DATA_SIZE</code> does not return data on stored procedure parameters, because stored procedure parameters are not bounded.</p>
</li>
<li>
<p><a id="sthref1228"></a><code>OCI_ATTR_CHAR_USED</code> gets the type of length semantics of the column. Zero (0) means byte-length semantics and 1 means character-length semantics.</p>
</li>
</ul>
<p>An application can describe a select-list query either implicitly or explicitly through <a href="oci17msc001.htm#i574897">OCIStmtExecute()</a>. Other schema elements must be described explicitly through <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>.</p>
<div id="LNOCI16491" class="sect2"><a id="sthref1229"></a>
<h3 class="sect2">Implicit Describing</h3>
<p>If the database <a id="sthref1230"></a>column was created using character-length semantics, then the implicit describe information contains the character length, the byte length, and a flag indicating how the database column was created. <code>OCI_ATTR_CHAR_SIZE</code> is the character length of the column or expression. The <code>OCI_ATTR_CHAR_USED</code> flag is 1 in this case, indicating that the column or expression was created with character-length semantics.</p>
<p>The <code>OCI_ATTR_DATA_SIZE</code> value is always large enough to hold all the data, as many as <code>OCI_ATTR_CHAR_SIZE</code> number of characters. The <code>OCI_ATTR_DATA_SIZE</code> is usually set to (<code>OCI_ATTR_CHAR_SIZE</code>)*(the client's maximum number of bytes) for each character value.</p>
<p>If the database column was created with byte-length semantics, then for the implicit describe (it behaves exactly as it does before release 9.0) the <code>OCI_ATTR_DATA_SIZE</code> value returned is (column's byte length)*(the maximum conversion ratio between the client and server's character set). That is, the column byte length divided by the server's maximum number of bytes for each character multiplied by the client's maximum number of bytes for each character. The <code>OCI_ATTR_CHAR_USED</code> value is 0 and the <code>OCI_ATTR_CHAR_SIZE</code> value is set to the same value as <code>OCI_ATTR_DATA_SIZE</code>.</p>
</div>
<!-- class="sect2" -->
<div id="LNOCI16492" class="sect2"><a id="sthref1231"></a>
<h3 class="sect2">Explicit Describing</h3>
<p>Explicit <a id="sthref1232"></a>describes of tables have the following attributes:</p>
<ul>
<li>
<p><a id="sthref1233"></a><code>OCI_ATTR_DATA_SIZE</code> gets the column's size in bytes, as it appears in the server</p>
</li>
<li>
<p><a id="sthref1234"></a><code>OCI_ATTR_CHAR_SIZE</code> indicates the length of the column in characters</p>
</li>
<li>
<p><code><a id="sthref1235"></a>OCI_ATTR_CHAR_USED</code>, is a flag that indicates how the column was created, as described previously in terms of the type of length semantics of the column</p>
</li>
</ul>
<p>When inserting, if the <code>OCI_ATTR_CHAR_USED</code> flag is set, you can set the <code>OCI_ATTR_MAXCHAR_SIZE</code> in the bind handle to the value returned by <code>OCI_ATTR_CHAR_SIZE</code> in the parameter handle. This prevents you from violating the size constraint for the column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci05bnd.htm#i432029">"IN Binds"</a></div>
<div id="LNOCI16493" class="sect3"><a id="sthref1236"></a>
<h4 class="sect3">Client and Server Compatibility Issues for Describing</h4>
<p>When an Oracle9<span class="italic">i</span> or later client talks to an Oracle8<span class="italic">i</span> or earlier server, it behaves as if the database is only using byte-length semantics.</p>
<p>When an Oracle8<span class="italic">i</span> or earlier client talks to a Oracle9<span class="italic">i</span> or later server, the attributes <code>OCI_ATTR_CHAR_SIZE</code> and <code>OCI_ATTR_CHAR_USED</code> are not available on the client side.</p>
<p>In both cases, the character-length semantics cannot be described when either the server or client has an Oracle8<span class="italic">i</span> or earlier software release.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i448540"></a>
<div id="LNOCI16494" class="sect1">
<h2 class="sect1">Examples Using OCIDescribeAny()<a id="sthref1237"></a></h2>
<p>The following examples demonstrate the use of <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a> for describing different types of schema objects. For a more detailed code sample, see the demonstration program <code>cdemodsa.c</code> included with your Oracle Database installation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociabdem.htm#g462659">Appendix B</a> for additional information about the demonstration programs</div>
<a id="i441254"></a>
<div id="LNOCI16495" class="sect2">
<h3 class="sect2"><a id="sthref1238"></a>Retrieving Column Data Types for a Table</h3>
<p><a href="#CIHEEEEH">Example 6-2</a> illustrates the use of an explicit describe that retrieves the column data types for a table.</p>
<div id="LNOCI18168" class="example">
<p class="titleinexample"><a id="CIHEEEEH"></a>Example 6-2 <a id="sthref1239"></a>Using an Explicit Describe to Retrieve Column Data Types for a Table</p>
<pre>
...
int i=0;
text objptr[] = "EMPLOYEES"; /* the name of a table to be described */
ub2          numcols, col_width;
ub1          char_semantics;
ub2  coltyp;
ub4 objp_len = (ub4) strlen((char *)objptr);
OCIParam *parmh = (OCIParam *) 0;         /* parameter handle */
OCIParam *collsthd = (OCIParam *) 0;      /* handle to list of columns */
OCIParam *colhd = (OCIParam *) 0;         /* column handle */
OCIDescribe *dschp = (OCIDescribe *)0;      /* describe handle */

OCIHandleAlloc((void *)envhp, (void **)&amp;dschp,
        (ub4)OCI_HTYPE_DESCRIBE, (size_t)0, (void **)0);

/* get the describe handle for the table */
if (OCIDescribeAny(svch, errh, (void *)objptr, objp_len, OCI_OTYPE_NAME, 0,
     OCI_PTYPE_TABLE, dschp))
   return OCI_ERROR;

/* get the parameter handle */
if (OCIAttrGet((void *)dschp, OCI_HTYPE_DESCRIBE, (void *)&amp;parmh, (ub4 *)0,
                OCI_ATTR_PARAM, errh))
    return OCI_ERROR;

/* The type information of the object, in this case, OCI_PTYPE_TABLE,
is obtained from the parameter descriptor returned by the OCIAttrGet(). */
/* get the number of columns in the table */
numcols = 0;
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;numcols, (ub4 *)0,
     OCI_ATTR_NUM_COLS, errh))
    return OCI_ERROR;

/* get the handle to the column list of the table */
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;collsthd, (ub4 *)0,
     OCI_ATTR_LIST_COLUMNS, errh)==OCI_NO_DATA)
   return OCI_ERROR;

/* go through the column list and retrieve the data type of each column,
and then recursively describe column types. */

for (i = 1; i &lt;= numcols; i++)
{
    /* get parameter for column i */
    if (OCIParamGet((void *)collsthd, OCI_DTYPE_PARAM, errh, (void **)&amp;colhd, (ub4)i))
        return OCI_ERROR;

    /* for example, get data type for ith column */
    coltyp = 0;
    if (OCIAttrGet((void *)colhd, OCI_DTYPE_PARAM, (void *)&amp;coltyp, (ub4 *)0,
       OCI_ATTR_DATA_TYPE, errh))
        return OCI_ERROR;

    /* Retrieve the length semantics for the column */
    char_semantics = 0;
    OCIAttrGet((void*) colhd, (ub4) OCI_DTYPE_PARAM,
                 (void*) &amp;char_semantics,(ub4 *) 0, (ub4) OCI_ATTR_CHAR_USED,
                 (OCIError *) errh);

    col_width = 0;
    if (char_semantics)
        /* Retrieve the column width in characters */
        OCIAttrGet((void*) colhd, (ub4) OCI_DTYPE_PARAM,
                 (void*) &amp;col_width, (ub4 *) 0, (ub4) OCI_ATTR_CHAR_SIZE,
                 (OCIError *) errh);
    else
        /* Retrieve the column width in bytes */
        OCIAttrGet((void*) colhd, (ub4) OCI_DTYPE_PARAM,
                 (void*) &amp;col_width,(ub4 *) 0, (ub4) OCI_ATTR_DATA_SIZE,
                 (OCIError *) errh);
}

if (dschp)
    OCIHandleFree((void *) dschp, OCI_HTYPE_DESCRIBE);
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16496" class="sect2"><a id="sthref1240"></a>
<h3 class="sect2">Describing the Stored Procedure</h3>
<p>The difference between a procedure and a function is that the latter has a return type at position 0 in the argument list, whereas the former has no argument associated with position 0 in the argument list. The steps required to describe type methods (also divided into functions and procedures) are identical to those of regular PL/SQL functions and procedures. Note that procedures and functions can take the default types of objects as arguments. Consider the following procedure:</p>
<pre>
P1 (arg1 emp.sal%type, arg2 emp%rowtype)
</pre>
<p>In <a href="#CIHHHCAE">Example 6-3</a>, assume that each row in <code>emp</code> table has two columns: <code>name(VARCHAR2(20))</code> and <code>sal(NUMBER)</code>. In the argument list for <code>P1</code>, there are two arguments (<code>arg1</code> and <code>arg2</code> at positions 1 and 2, respectively) at level 0 and arguments (<code>name</code> and <code>sal</code> at positions 1 and 2, respectively) at level 1. Description of <code>P1</code> returns the number of arguments as two while returning the higher level (&gt; 0) arguments as attributes of the 0 zero level arguments.</p>
<div id="LNOCI18169" class="example">
<p class="titleinexample"><a id="CIHHHCAE"></a>Example 6-3 <a id="sthref1241"></a>Describing the Stored Procedure</p>
<pre>
...
int i = 0, j = 0;
text objptr[] = "add_job_history"; /* the name of a procedure to be described */
ub4 objp_len = (ub4)strlen((char *)objptr);
ub2 numargs = 0, numargs1, pos, level;
text *name, *name1;
ub4 namelen, namelen1;
OCIParam *parmh = (OCIParam *) 0;         /* parameter handle */
OCIParam *arglst = (OCIParam *) 0;          /* list of args */
OCIParam *arg = (OCIParam *) 0;             /* argument handle */
OCIParam *arglst1 = (OCIParam *) 0;          /* list of args */
OCIParam *arg1 = (OCIParam *) 0;             /* argument handle */
OCIDescribe *dschp = (OCIDescribe *)0;      /* describe handle */

OCIHandleAlloc((void *)envhp, (void **)&amp;dschp,
        (ub4)OCI_HTYPE_DESCRIBE, (size_t)0, (void **)0);

/* get the describe handle for the procedure */
if (OCIDescribeAny(svch, errh, (void *)objptr, objp_len, OCI_OTYPE_NAME, 0,
     OCI_PTYPE_PROC, dschp))
   return OCI_ERROR;

/* get the parameter handle */
if (OCIAttrGet((void *)dschp, OCI_HTYPE_DESCRIBE, (void *)&amp;parmh, (ub4 *)0,
         OCI_ATTR_PARAM, errh))
    return OCI_ERROR;

/* Get the number of arguments and the arg list */
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;arglst,
       (ub4 *)0, OCI_ATTR_LIST_ARGUMENTS, errh))
    return OCI_ERROR;

if (OCIAttrGet((void *)arglst, OCI_DTYPE_PARAM, (void *)&amp;numargs, (ub4 *)0,
    OCI_ATTR_NUM_PARAMS, errh))
    return OCI_ERROR;

/* For a procedure, you begin with i = 1; for a
function, you begin with i = 0. */

for (i = 1; i &lt;= numargs; i++) {
  OCIParamGet ((void *)arglst, OCI_DTYPE_PARAM, errh, (void **)&amp;arg, (ub4)i);
  namelen = 0;
  OCIAttrGet((void *)arg, OCI_DTYPE_PARAM, (void *)&amp;name, (ub4 *)&amp;namelen,
       OCI_ATTR_NAME, errh);

  /* to print the attributes of the argument of type record
  (arguments at the next level), traverse the argument list */

  OCIAttrGet((void *)arg, OCI_DTYPE_PARAM, (void *)&amp;arglst1, (ub4 *)0,
        OCI_ATTR_LIST_ARGUMENTS, errh);

  /* check if the current argument is a record. For arg1 in the procedure
  arglst1 is NULL. */

  if (arglst1) {
    numargs1 = 0;
    OCIAttrGet((void *)arglst1, OCI_DTYPE_PARAM, (void *)&amp;numargs1, (ub4 *)0,
         OCI_ATTR_NUM_PARAMS, errh);

    /* Note that for both functions and procedures,the next higher level
    arguments start from index 1. For arg2 in the procedure, the number of
    arguments at the level 1 would be 2 */

    for (j = 1; j &lt;= numargs1; j++) {
      OCIParamGet((void *)arglst1, OCI_DTYPE_PARAM, errh, (void **)&amp;arg1,
          (ub4)j);
      namelen1 = 0;
      OCIAttrGet((void *)arg1, OCI_DTYPE_PARAM, (void *)&amp;name1, (ub4 *)&amp;namelen1,
        OCI_ATTR_NAME, errh);
    }
  }
}

if (dschp)
    OCIHandleFree((void *) dschp, OCI_HTYPE_DESCRIBE);
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16497" class="sect2"><a id="sthref1242"></a>
<h3 class="sect2"><a id="sthref1243"></a>Retrieving Attributes of an Object Type</h3>
<p><a href="#CIHDDJEH">Example 6-4</a> illustrates the use of an explicit describe on a named object type. It illustrates how you can describe an object by its name or by its object reference (<code>OCIRef</code>). The following code fragment attempts to retrieve the data type value of each of the object type's attributes.</p>
<div id="LNOCI18170" class="example">
<p class="titleinexample"><a id="CIHDDJEH"></a>Example 6-4 <a id="sthref1244"></a>Using an Explicit Describe on a Named Object Type</p>
<pre>
...
int i = 0;
text type_name[] = "inventory_typ";
ub4 type_name_len = (ub4)strlen((char *)type_name);
OCIRef *type_ref = (OCIRef *) 0;
ub2 numattrs = 0, describe_by_name = 1;
ub2 datatype = 0;
OCITypeCode typecode = 0;
OCIDescribe *dschp = (OCIDescribe *) 0;      /* describe handle */
OCIParam *parmh = (OCIParam *) 0;         /* parameter handle */
OCIParam *attrlsthd = (OCIParam *) 0;     /* handle to list of attrs */
OCIParam *attrhd = (OCIParam *) 0;        /* attribute handle */

/* allocate describe handle */
if (OCIHandleAlloc((void *)envh, (void **)&amp;dschp,
                  (ub4)OCI_HTYPE_DESCRIBE, (size_t)0, (void **)0))
   return OCI_ERROR;

/* get the describe handle for the type */
if (describe_by_name) {
  if (OCIDescribeAny(svch, errh, (void *)type_name, type_name_len,
       OCI_OTYPE_NAME, 0, OCI_PTYPE_TYPE, dschp))
       return OCI_ERROR;
}
else {
  /* get ref to type using OCIAttrGet */

  /* get the describe handle for the type */
  if (OCIDescribeAny(svch, errh, (void*)type_ref, 0, OCI_OTYPE_REF,
        0, OCI_PTYPE_TYPE, dschp))
       return OCI_ERROR;
}

/* get the parameter handle */
if (OCIAttrGet((void *)dschp, OCI_HTYPE_DESCRIBE, (void *)&amp;parmh, (ub4 *)0,
        OCI_ATTR_PARAM, errh))
    return OCI_ERROR;

/* The type information of the object, in this case, OCI_PTYPE_TYPE, is
obtained from the parameter descriptor returned by OCIAttrGet */

/* get the number of attributes in the type */
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;numattrs, (ub4 *)0,
    OCI_ATTR_NUM_TYPE_ATTRS, errh))
    return OCI_ERROR;

/* get the handle to the attribute list of the type */
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;attrlsthd, (ub4 *)0,
      OCI_ATTR_LIST_TYPE_ATTRS, errh))
  return OCI_ERROR;

/* go through the attribute list and retrieve the data type of each attribute,
and then recursively describe attribute types. */

for (i = 1; i &lt;= numattrs; i++)
{
/* get parameter for attribute i */
if (OCIParamGet((void *)attrlsthd, OCI_DTYPE_PARAM, errh, (void **)&amp;attrhd, i))
      return OCI_ERROR;

/* for example, get data type and typecode for attribute; note that
OCI_ATTR_DATA_TYPE returns the SQLT code, whereas OCI_ATTR_TYPECODE returns the
Oracle Type System typecode. */

datatype = 0;
if (OCIAttrGet((void *)attrhd, OCI_DTYPE_PARAM, (void *)&amp;datatype, (ub4 *)0,
               OCI_ATTR_DATA_TYPE,errh))
    return OCI_ERROR;

typecode = 0;
if (OCIAttrGet((void *)attrhd, OCI_DTYPE_PARAM,(void *)&amp;typecode, (ub4 *)0,
               OCI_ATTR_TYPECODE, errh))
    return OCI_ERROR;

/* if attribute is an object type, recursively describe it */
if (typecode == OCI_TYPECODE_OBJECT)
{
  OCIRef *attr_type_ref;
  OCIDescribe *nested_dschp;

  /* allocate describe handle */
  if (OCIHandleAlloc((void *)envh,(void**)&amp;nested_dschp,
    (ub4)OCI_HTYPE_DESCRIBE,(size_t)0, (void **)0))
    return OCI_ERROR;

  if (OCIAttrGet((void *)attrhd, OCI_DTYPE_PARAM,
          (void *)&amp;attr_type_ref, (ub4 *)0, OCI_ATTR_REF_TDO,errh))
    return OCI_ERROR;

   OCIDescribeAny(svch, errh,(void*)attr_type_ref, 0,
          OCI_OTYPE_REF, 0, OCI_PTYPE_TYPE, nested_dschp);
    /* go on describing the attribute type... */
}
}

if (dschp)
    OCIHandleFree((void *) dschp, OCI_HTYPE_DESCRIBE);
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16498" class="sect2"><a id="sthref1245"></a>
<h3 class="sect2"><a id="sthref1246"></a>Retrieving the Collection Element's Data Type of a Named Collection Type</h3>
<p><a href="#CIHGGHIG">Example 6-5</a> illustrates the use of an explicit describe on a named collection type.</p>
<div id="LNOCI18171" class="example">
<p class="titleinexample"><a id="CIHGGHIG"></a>Example 6-5 <a id="sthref1247"></a>Using an Explicit Describe on a Named Collection Type</p>
<pre>
text type_name[] = "phone_list_typ";
ub4 type_name_len = (ub4) strlen((char *)type_name);
OCIRef *type_ref = (OCIRef *) 0;
ub2 describe_by_name = 1;
ub4 num_elements = 0;
OCITypeCode typecode = 0, collection_typecode = 0, element_typecode = 0;
void *collection_element_parmh = (void *) 0;
OCIDescribe *dschp = (OCIDescribe *) 0;      /* describe handle */
OCIParam *parmh = (OCIParam *) 0;         /* parameter handle */

/* allocate describe handle */
if (OCIHandleAlloc((void *)envh, (void **)&amp;dschp,
                  (ub4)OCI_HTYPE_DESCRIBE, (size_t)0, (void **)0))
   return OCI_ERROR;

/* get the describe handle for the type */
if (describe_by_name) {
  if (OCIDescribeAny(svch, errh, (void *)type_name, type_name_len,
       OCI_OTYPE_NAME, 0, OCI_PTYPE_TYPE, dschp))
       return OCI_ERROR;
}
else {
  /* get ref to type using OCIAttrGet */

  /* get the describe handle for the type */
  if (OCIDescribeAny(svch, errh, (void*)type_ref, 0, OCI_OTYPE_REF,
        0, OCI_PTYPE_TYPE, dschp))
       return OCI_ERROR;
}

/* get the parameter handle */
if (OCIAttrGet((void *)dschp, OCI_HTYPE_DESCRIBE, (void *)&amp;parmh, (ub4 *)0,
        OCI_ATTR_PARAM, errh))
    return OCI_ERROR;

/* get the Oracle Type System type code of the type to determine that this is a
collection type */
typecode = 0;
if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM,(void *)&amp;typecode, (ub4 *)0,
      OCI_ATTR_TYPECODE, errh))
    return OCI_ERROR;

/* if typecode is OCI_TYPECODE_NAMEDCOLLECTION,
  proceed to describe collection element */
if (typecode == OCI_TYPECODE_NAMEDCOLLECTION)
{
  /* get the collection's type: OCI_TYPECODE_VARRAY or OCI_TYPECODE_TABLE */
  collection_typecode = 0;
  if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, (void *)&amp;collection_typecode,
 (ub4 *)0,
       OCI_ATTR_COLLECTION_TYPECODE, errh))
    return OCI_ERROR;

  /* get the collection element; you MUST use this to further retrieve information
     about the collection's element */
  if (OCIAttrGet((void *)parmh, OCI_DTYPE_PARAM, &amp;collection_element_parmh,
                 (ub4 *)0,
        OCI_ATTR_COLLECTION_ELEMENT, errh))
    return OCI_ERROR;
  /* get the number of elements if collection is a VARRAY; not valid for nested
     tables */
  if (collection_typecode == OCI_TYPECODE_VARRAY) {
    if (OCIAttrGet((void *)collection_element_parmh, OCI_DTYPE_PARAM,
          (void *)&amp;num_elements, (ub4 *)0, OCI_ATTR_NUM_ELEMS, errh))
      return OCI_ERROR;
  }
  /* now use the collection_element parameter handle to retrieve information about
     the collection element */
  element_typecode = 0;
  if (OCIAttrGet((void *)collection_element_parmh, OCI_DTYPE_PARAM,
        (void *)&amp;element_typecode, (ub4 *)0, OCI_ATTR_TYPECODE, errh))
    return OCI_ERROR;

  /* do the same to describe additional collection element information; this is
  very similar to describing type attributes */
}

if (dschp)
    OCIHandleFree((void *) dschp, OCI_HTYPE_DESCRIBE);
...
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="LNOCI16499" class="sect2"><a id="sthref1248"></a>
<h3 class="sect2">Describing with Character-Length Semantics</h3>
<p><a href="#CIHCCBHD">Example 6-6</a> shows a loop that retrieves the column names and data types corresponding to a query following query execution. The query was associated with the statement handle by a prior call to <a href="oci17msc001.htm#i575144">OCIStmtPrepare()</a>.</p>
<div id="LNOCI18172" class="example">
<p class="titleinexample"><a id="CIHCCBHD"></a>Example 6-6 Using a Parameter Descriptor to Retrieve the Data Types, Column Names, and Character-Length Semantics</p>
<pre>
...
OCIParam     *mypard = (OCIParam *) 0;
ub2          dtype;
text         *col_name;
ub4          counter, col_name_len, char_semantics;
ub2          col_width;
sb4          parm_status;

text *sqlstmt = (text *)"SELECT * FROM employees WHERE employee_id = 100";

checkerr(errhp, OCIStmtPrepare(stmthp, errhp, (OraText *)sqlstmt,
                    (ub4)strlen((char *)sqlstmt),
                    (ub4) OCI_NTV_SYNTAX, (ub4) OCI_DEFAULT));
checkerr(errhp, OCIStmtExecute(svchp, stmthp, errhp, 0, 0, (OCISnapshot *)0, (OCISnapshot *)0, OCI_DEFAULT));

/* Request a parameter descriptor for position 1 in the select list */
counter = 1;
parm_status = OCIParamGet((void *)stmthp, OCI_HTYPE_STMT, errhp,
               (void **)&amp;mypard, (ub4) counter);
/* Loop only if a descriptor was successfully retrieved for
   current position, starting at 1 */
while (parm_status == OCI_SUCCESS) {
   /* Retrieve the data type attribute */
   checkerr(errhp, OCIAttrGet((void*) mypard, (ub4) OCI_DTYPE_PARAM,
           (void*) &amp;dtype,(ub4 *) 0, (ub4) OCI_ATTR_DATA_TYPE,
           (OCIError *) errhp  ));
   /* Retrieve the column name attribute */
   col_name_len = 0;
   checkerr(errhp, OCIAttrGet((void*) mypard, (ub4) OCI_DTYPE_PARAM,
           (void**) &amp;col_name, (ub4 *) &amp;col_name_len, (ub4) OCI_ATTR_NAME,
           (OCIError *) errhp ));
   /* Retrieve the length semantics for the column */
   char_semantics = 0;
   checkerr(errhp, OCIAttrGet((void*) mypard, (ub4) OCI_DTYPE_PARAM,
           (void*) &amp;char_semantics,(ub4 *) 0, (ub4) OCI_ATTR_CHAR_USED,
           (OCIError *) errhp  ));
   col_width = 0;
   if (char_semantics)
       /* Retrieve the column width in characters */
       checkerr(errhp, OCIAttrGet((void*) mypard, (ub4) OCI_DTYPE_PARAM,
               (void*) &amp;col_width, (ub4 *) 0, (ub4) OCI_ATTR_CHAR_SIZE,
               (OCIError *) errhp  ));
   else
       /* Retrieve the column width in bytes */
       checkerr(errhp, OCIAttrGet((void*) mypard, (ub4) OCI_DTYPE_PARAM,
               (void*) &amp;col_width,(ub4 *) 0, (ub4) OCI_ATTR_DATA_SIZE,
               (OCIError *) errhp  ));
   /* increment counter and get next descriptor, if there is one */
   counter++;
   parm_status = OCIParamGet((void *)stmthp, OCI_HTYPE_STMT, errhp,
          (void **)&amp;mypard, (ub4) counter);
} /* while */
...

</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci05bnd.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci07lob.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
