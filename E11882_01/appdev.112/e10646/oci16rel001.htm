<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Connect, Authorize, and Initialize Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci16rel.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci16rel002.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">24/79</span> <!-- End Header --><a id="CIHDFJBA"></a>
<div id="LNOCI151" class="refsect1">
<h1 class="refsect1">Connect, Authorize, and Initialize Functions<a id="sthref2317"></a><a id="sthref2318"></a><a id="sthref2319"></a><a id="sthref2320"></a></h1>
<p><a href="oci16rel.htm#CIHGGCHE">Table 16-1</a> describes the OCI connect, authorize, and initialize functions that are described in this section.</p>
<div id="LNOCI17106" class="tblformalwide">
<p class="titleintable"><a id="sthref2321"></a><a id="sthref2322"></a>Table 16-2 Connect, Authorize, and Initialize Functions &nbsp;</p>
<table class="cellalignment1011" title="Connect, Authorize, and Initialize Functions &nbsp;" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t5">Function</th>
<th class="cellalignment1012" id="r1c2-t5">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#CHDBCBIA">"OCIAppCtxClearAll()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t5 r1c2-t5">
<p>Clear all attribute-value information in a namespace of an application context</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#CHDICDCB">"OCIAppCtxSet()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t5 r1c2-t5">
<p>Set an attribute and its associated value in a namespace of an application context</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#i556060">"OCIConnectionPoolCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t5 r1c2-t5">
<p>Initialize the connection pool</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#i556129">"OCIConnectionPoolDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t5 r1c2-t5">
<p>Destroy the connection pool</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#BEIHACDC">"OCIDBShutdown()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t5 r1c2-t5">
<p>Shut down Oracle Database</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#BEIDFIBJ">"OCIDBStartup()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t5 r1c2-t5">
<p>Start an Oracle Database instance</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#i556149">"OCIEnvCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t5 r1c2-t5">
<p>Create and initialize an OCI environment handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#i562098">"OCIEnvNlsCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t5 r1c2-t5">
<p>Create and initialize an environment handle for OCI functions to work under. Enable you to set character set ID and national character set ID at environment creation time.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#i556437">"OCILogoff()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t5 r1c2-t5">
<p>Release a session that was retrieved using <code>OCILogon2()</code> or <code>OCILogon()</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t5" headers="r1c1-t5">
<p><a href="#i556477">"OCILogon()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t5 r1c2-t5">
<p>Simplify single-session logon</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t5" headers="r1c1-t5">
<p><a href="#i558312">"OCILogon2()"</a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t5 r1c2-t5">
<p>Create a logon session in various modes</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t5" headers="r1c1-t5">
<p><a href="#i558225">"OCIServerAttach()"</a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t5 r1c2-t5">
<p>Attach to a server; initialize server context handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t5" headers="r1c1-t5">
<p><a href="#i556585">"OCIServerDetach()"</a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t5 r1c2-t5">
<p>Detach from a server; uninitialize server context handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t5" headers="r1c1-t5">
<p><a href="#i556608">"OCISessionBegin()"</a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t5 r1c2-t5">
<p>Authenticate a user</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t5" headers="r1c1-t5">
<p><a href="#i556679">"OCISessionEnd()"</a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t5 r1c2-t5">
<p>Terminate a user session</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t5" headers="r1c1-t5">
<p><a href="#i563311">"OCISessionGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t5 r1c2-t5">
<p>Get a session from a session pool</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t5" headers="r1c1-t5">
<p><a href="#i563356">"OCISessionPoolCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t5 r1c2-t5">
<p>Initialize a session pool</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t5" headers="r1c1-t5">
<p><a href="#i561765">"OCISessionPoolDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t5 r1c2-t5">
<p>Destroy a session pool</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t5" headers="r1c1-t5">
<p><a href="#i563322">"OCISessionRelease()"</a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t5 r1c2-t5">
<p>Release a session</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t5" headers="r1c1-t5">
<p><a href="#i562956">"OCITerminate()"</a></p>
</td>
<td class="cellalignment1013" headers="r21c1-t5 r1c2-t5">
<p>Detach from a shared memory subsystem</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI17107" class="refsect2"><a id="CHDBCBIA"></a>
<h2 class="refsect2"><a id="sthref2323"></a>OCIAppCtxClearAll()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2324"></a>Purpose</p>
<p>Clears all attribute-value information in a namespace of an application context.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2325"></a>Syntax</p>
<pre>
sword OCIAppCtxClearAll ( void      *sesshndl,
                          void      *nsptr, 
                          ub4       nsptrlen,
                          OCIError  *errhp,
                          ub4       mode ;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2326"></a>Parameters</p>
<dl>
<dt>sesshndl (IN/OUT)</dt>
<dd>
<p>Pointer to a session handle.</p>
</dd>
<dt>nsptr (IN)</dt>
<dd>
<p>Pointer to the namespace string (currently only <code>CLIENTCONTEXT</code>).</p>
</dd>
<dt>nsptrlen (IN)</dt>
<dd>
<p>Length of the namespace string.</p>
</dd>
<dt>errhp (OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Mode (<code>OCI_DEFAULT</code> is the default).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2327"></a>Returns</p>
<p>Returns an error number.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2328"></a>Comments</p>
<p>This cleans up the context information on the server side during the next call to the server. This namespace information is cleared from the session handle after the information has been sent to the server and must be set up again if needed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2329"></a>Related Functions</p>
<p><a href="#CHDICDCB">OCIAppCtxSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17108" class="refsect2"><a id="CHDICDCB"></a>
<h2 class="refsect2"><a id="sthref2330"></a>OCIAppCtxSet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2331"></a>Purpose</p>
<p>Sets an attribute and its associated value in a namespace of an application context.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2332"></a>Syntax</p>
<pre>
sword OCIAppCtxSet ( void      *sesshndl,
                     void      *nsptr,
                     ub4       nsptrlen,
                     void      *attrptr,
                     ub4       attrptrlen,
                     void      *valueptr,
                     ub4       valueptrlen,
                     OCIError  *errhp, 
                     ub4       mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2333"></a>Parameters</p>
<dl>
<dt>sesshndl (IN/OUT)</dt>
<dd>
<p>Pointer to a session handle.</p>
</dd>
<dt>nsptr (IN)</dt>
<dd>
<p>Pointer to the namespace string (currently only <code>CLIENTCONTEXT</code>).</p>
</dd>
<dt>nsptrlen (IN)</dt>
<dd>
<p>Length of the namespace string.</p>
</dd>
<dt>attrptr (IN)</dt>
<dd>
<p>Pointer to the attribute string.</p>
</dd>
<dt>attrptrlen (IN)</dt>
<dd>
<p>The length of the string pointed to by <code>attrptr</code>.</p>
</dd>
<dt>valueptr (IN)</dt>
<dd>
<p>Pointer to the value string.</p>
</dd>
<dt>valueptrlen (IN)</dt>
<dd>
<p>The length of the string pointed to by <code>valueptr</code>.</p>
</dd>
<dt>errhp (OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Mode (<code>OCI_DEFAULT</code> is the default).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2334"></a>Returns</p>
<p>Returns an error number.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2335"></a>Comments</p>
<p>The information set on the session handle is sent to the server during the next call to the server.</p>
<p>This information is cleared from the session handle after the information has been sent to the server and must be set up again if needed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2336"></a>Related Functions</p>
<p><a href="#CHDBCBIA">OCIAppCtxClearAll()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17109" class="refsect2"><a id="i556060"></a>
<h2 class="refsect2"><a id="sthref2337"></a>OCIConnectionPoolCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2338"></a>Purpose</p>
<p>Initializes the connection pool.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2339"></a>Syntax</p>
<pre>
sword OCIConnectionPoolCreate ( OCIEnv         *envhp,
                                OCIError       *errhp, 
                                OCICPool       *poolhp,
                                OraText        **poolName,
                                sb4            *poolNameLen,
                                const OraText  *dblink, 
                                sb4            dblinkLen,
                                ub4            connMin,
                                ub4            connMax,
                                ub4            connIncr,
                                const OraText  *poolUsername,
                                sb4            poolUserLen,
                                const OraText  *poolPassword,
                                sb4            poolPassLen,
                                ub4            mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2340"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>A pointer to the environment where the connection pool is to be created</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>poolhp (IN)</dt>
<dd>
<p>An allocated pool handle.</p>
</dd>
<dt>poolName (OUT)</dt>
<dd>
<p>The name of the connection pool connected to.</p>
</dd>
<dt>poolNameLen (OUT)</dt>
<dd>
<p>The length of the string pointed to by <code>poolName</code>.</p>
</dd>
<dt>dblink (IN)</dt>
<dd>
<p>Specifies the database (server) to connect to.</p>
</dd>
<dt>dblinkLen (IN)</dt>
<dd>
<p>The length of the string pointed to by <code>dblink</code>.</p>
</dd>
<dt>connMin (IN)</dt>
<dd>
<p>Specifies the minimum number of connections in the connection pool. Valid values are 0 and higher.</p>
<p>These connections are opened to the server by <code>OCIConnectionPoolCreate()</code>. After the connection pool is created, connections are opened only when necessary. Generally, this parameter should be set to the number of concurrent statements that the application is planning or expecting to run.</p>
</dd>
<dt>connMax (IN)</dt>
<dd>
<p>Specifies the maximum number of connections that can be opened to the database. After this value is reached, no more connections are opened. Valid values are 1 and higher.</p>
</dd>
<dt>connIncr (IN)</dt>
<dd>
<p>Allows the application to set the next increment for connections to be opened to the database if the current number of connections is less than <code>connMax</code>. Valid values are 0 and higher.</p>
</dd>
<dt>poolUsername (IN)</dt>
<dd>
<p>Connection pooling requires an implicit primary session. This attribute provides a user name for that session.</p>
</dd>
<dt>poolUserLen (IN)</dt>
<dd>
<p>The length of <code>poolUsername</code>.</p>
</dd>
<dt>poolPassword (IN)</dt>
<dd>
<p>The password for the user name <code>poolUsername</code>.</p>
</dd>
<dt>poolPassLen (IN)</dt>
<dd>
<p>The length of <code>poolPassword</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The modes supported are:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2341"></a><code>OCI_DEFAULT</code></p>
</li>
<li>
<p><a id="sthref2342"></a><code>OCI_CPOOL_REINITIALIZE</code></p>
</li>
</ul>
<p>Ordinarily, <code>OCIConnectionPoolCreate()</code> is called with <code>mode</code> set to <code>OCI_DEFAULT</code>.</p>
<p>To change the pool attributes dynamically (for example, to change the <code>connMin</code>, <code>connMax</code>, and <code>connIncr</code> parameters), call <code>OCIConnectionPoolCreate()</code> with <code>mode</code> set to <code>OCI_CPOOL_REINITIALIZE</code>. When this is done, the other parameters are ignored.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2343"></a>Comments</p>
<p>The OUT parameters <code>poolName</code> and <code>poolNameLen</code> contain values to be used in subsequent <a href="#i558225">OCIServerAttach()</a> and <a href="#i558312">OCILogon2()</a> calls in place of the database name and the database name length arguments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i450511">"Connection Pool Handle Attributes"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2344"></a>Related Functions</p>
<p><a href="#i556129">OCIConnectionPoolDestroy()</a>, <a href="#i558312">OCILogon2()</a>, <a href="#i558225">OCIServerAttach()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17110" class="refsect2"><a id="i556129"></a>
<h2 class="refsect2"><a id="sthref2345"></a>OCIConnectionPoolDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2346"></a>Purpose</p>
<p>Destroys the connection pool.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2347"></a>Syntax</p>
<pre>
sword OCIConnectionPoolDestroy ( OCICPool     *poolhp,
                                 OCIError     *errhp, 
                                 ub4          mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2348"></a>Parameters</p>
<dl>
<dt>poolhp (IN)</dt>
<dd>
<p>A pool handle for which a pool has been created.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Currently, this function supports only the <code>OCI_DEFAULT</code> mode.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2349"></a>Related Functions</p>
<p><a href="#i556060">OCIConnectionPoolCreate()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17111" class="refsect2"><a id="BEIHACDC"></a>
<h2 class="refsect2"><a id="sthref2350"></a>OCIDBShutdown()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2351"></a>Purpose</p>
<p>Shuts down an Oracle Database instance.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2352"></a>Syntax</p>
<pre>
sword OCIDBShutdown ( OCISvcCtx     *svchp,
                      OCIError      *errhp,
                      OCIAdmin      *admhp,
                      ub4           mode);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2353"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>A handle to a service context. There must be a valid server handle and a valid user handle set in <code>svchp</code>.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>admhp (IN) - Optional</dt>
<dd>
<p>An instance administration handle. Currently not used; pass <code>(OCIAdmin *)0</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p><code>OCI_DEFAULT</code> - Further connects are prohibited. Waits for users to disconnect from the database.</p>
<p><code>OCI_DBSHUTDOWN_TRANSACTIONAL</code> - Further connects are prohibited and no new transactions are allowed. Waits for active transactions to complete.</p>
<p><code>OCI_DBSHUTDOWN_TRANSACTIONAL_LOCAL</code> - Further connects are prohibited and no new transactions are allowed. Waits only for local transactions to complete.</p>
<p><code>OCI_DBSHUTDOWN_IMMEDIATE</code> - Does not wait for current calls to complete or users to disconnect from the database. All uncommitted transactions are terminated and rolled back.</p>
<p><code>OCI_DBSHUTDOWN_FINAL</code> - Shuts down the database. Should be used only in the second call to <code>OCIDBShutdown()</code> after the database is closed and dismounted.</p>
<p><code>OCI_DBSHUTDOWN_ABORT</code> - Does not wait for current calls to complete or users to disconnect from the database. All uncommitted transactions are terminated and are not rolled back. This is the fastest possible way to shut down the database, but the next database startup may require instance recovery. Therefore, this option should be used only in unusual circumstances; for example, if a background process terminates abnormally.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2354"></a>Comments</p>
<p>To do a shut down, you must be connected to the database as <code>SYSOPER</code> or <code>SYSDBA</code>. You cannot be connected to a shared server through a dispatcher. When shutting down in any mode other than <code>OCI_DBSHUTDOWN_ABORT</code>, use the following procedure:</p>
<ol>
<li>
<p>Call <code>OCIDBShutdown()</code> in <code>OCI_DEFAULT</code>, <code>OCI_DBSHUTDOWN_TRANSACTIONAL</code>, <code>OCI_DBSHUTDOWN_TRANSACTIONAL_LOCAL</code>, or <code>OCI_DBSHUTDOWN_IMMEDIATE</code> mode to prohibit further connects.</p>
</li>
<li>
<p>Issue the necessary <code>ALTER</code> <code>DATABASE</code> commands to close and dismount the database.</p>
</li>
<li>
<p>Call <code>OCIDBShutdown()</code> in <code>OCI_DBSHUTDOWN_FINAL</code> mode to shut down the instance.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci10new.htm#CJGDJFAF">"Database Startup and Shutdown"</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2355"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i443804">OCIAttrSet()</a>, <a href="#BEIDFIBJ">OCIDBStartup()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17112" class="refsect2"><a id="BEIDFIBJ"></a>
<h2 class="refsect2"><a id="sthref2356"></a>OCIDBStartup()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2357"></a>Purpose</p>
<p>Starts an Oracle Database instance.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2358"></a>Syntax</p>
<pre>
sword OCIDBStartup ( OCISvcCtx     *svchp,
                     OCIError      *errhp,
                     OCIAdmin      *admhp,
                     ub4           mode,
                     ub4           flags);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2359"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>A handle to a service context. There must be a valid server handle and user handle set in <code>svchp</code>.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>admhp (IN) - Optional</dt>
<dd>
<p>An instance administration handle. Use to pass additional arguments to the startup call, or pass <code>(OCIAdmin *)0</code> if you do not set <code>OCI_ATTR_ADMIN_PFILE</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p><code>OCI_DEFAULT</code> - This is the only supported mode. It starts the instance, but does not mount or open the database. Same as <code>STARTUP</code> <code>NOMOUNT</code>.</p>
</dd>
<dt>flags (IN)</dt>
<dd>
<p><code>OCI_DEFAULT</code> - Allows database access to all users.</p>
<p><code>OCI_DBSTARTUPFLAG_RESTRICT</code> - Allows database access only to users with both the <code>CREATE</code> <code>SESSION</code> and <code>RESTRICTED</code> <code>SESSION</code> privileges (normally, the DBA).</p>
<p><code>OCI_DBSTARTUPFLAG_FORCE</code> - Shuts down a running instance (if there is any) using <code>ABORT</code> before starting a new one. This mode should be used only in unusual circumstances.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2360"></a>Comments</p>
<p>You must be connected to the database as <code>SYSOPER</code> or <code>SYSDBA</code> in <code>OCI_PRELIM_AUTH</code> mode. You cannot be connected to a shared server through a dispatcher (that is, when you restart a running instance with <code>OCI_DBSTARTUPFLAG_FORCE</code>). To use a client-side parameter file (<code>pfile</code>), <code>OCI_ATTR_ADMIN_PFILE</code> must be set in the administration handle; otherwise, a server-side parameter file (<code>spfile</code>) is used. A call to <code>OCIDBStartup()</code> starts one instance on the server.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci10new.htm#CJGDJFAF">"Database Startup and Shutdown"</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2361"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i443804">OCIAttrSet()</a>, <a href="#BEIHACDC">OCIDBShutdown()</a>, <a href="#i558225">OCIServerAttach()</a>, <a href="#i556608">OCISessionBegin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI7016" class="refsect2"><a id="i556149"></a>
<h2 class="refsect2">OCIEnvCreate()<a id="sthref2362"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2363"></a>Purpose</p>
<p>Creates and initializes an environment handle for OCI functions to work under.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2364"></a>Syntax</p>
<pre>
sword OCIEnvCreate   ( OCIEnv        **envhpp,
                       ub4           mode,
                       const void    *ctxp,
                       const void    *(*malocfp)
                                     (void  *ctxp,
                                      size_t size),
                       const void    *(*ralocfp)
                                     (void  *ctxp,
                                      void  *memptr,
                                      size_t newsize),
                       const void    (*mfreefp)
                                     (void  *ctxp,
                                      void  *memptr))
                       size_t         xtramemsz,
                       void           **usrmempp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2365"></a>Parameters</p>
<dl>
<dt><span class="bold">envhpp</span> (OUT)</dt>
<dd>
<p>A pointer to an environment handle whose encoding setting is specified by <code>mode</code>. The setting is inherited by statement handles derived from <code>envhpp</code>.</p>
</dd>
<dt><span class="bold">mode</span> (IN)</dt>
<dd>
<p>Specifies initialization of the mode. Valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code><a id="sthref2366"></a>OCI_DEFAULT</code> - The default value, which is non-<code>UTF-16</code> encoding.</p>
</li>
<li>
<p><code><a id="sthref2367"></a>OCI_THREADED</code> - Uses threaded environment. Internal data structures not exposed to the user are protected from concurrent accesses by multiple threads.</p>
</li>
<li>
<p><code><a id="sthref2368"></a>OCI_OBJECT</code> - Uses object features.</p>
</li>
<li>
<p><code><a id="sthref2369"></a>OCI_EVENTS</code> - Uses publish-subscribe notifications.</p>
</li>
<li>
<p><code><a id="sthref2370"></a>OCI_NO_UCB</code> - Suppresses the calling of the dynamic callback routine <code>OCIEnvCallback()</code>. The default behavior is to allow calling of <code>OCIEnvCallback()</code> when the environment is created.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i449022">"Dynamic Callback Registrations"</a></div>
</li>
<li>
<p><code><a id="sthref2371"></a>OCI_ENV_NO_MUTEX</code> - No mutual exclusion (mutex) locking occurs in this mode. All OCI calls done on the environment handle, or on handles derived from the environment handle, must be serialized. <code>OCI_THREADED</code> must also be specified when <code>OCI_ENV_NO_MUTEX</code> is specified.</p>
</li>
<li>
<p><a id="sthref2372"></a><code>OCI_NEW_LENGTH_SEMANTICS</code> - Byte-length semantics is used consistently for all handles, regardless of character sets.</p>
</li>
<li>
<p><a id="sthref2373"></a><code>OCI_SUPPRESS_NLS_VALIDATION</code> - Suppresses NLS character validation; NLS character validation suppression is on by default beginning with Oracle Database 11<span class="italic">g</span> Release 1 (11.1). Use <code>OCI_ENABLE_NLS_VALIDATION</code> to enable NLS character validation. See Comments for more information.</p>
</li>
<li>
<p><code><a id="sthref2374"></a>OCI_NCHAR_LITERAL_REPLACE_ON</code> - Turns on N' substitution.</p>
</li>
<li>
<p><code><a id="sthref2375"></a>OCI_NCHAR_LITERAL_REPLACE_OFF</code> - Turns off N' substitution. If neither this mode nor <code>OCI_NCHAR_LITERAL_REPLACE_ON</code> is used, the substitution is determined by the environment variable <code>ORA_NCHAR_LITERAL_REPLACE</code>, which can be set to <code>TRUE</code> or <code>FALSE</code>. When it is set to <code>TRUE</code>, the replacement is turned on; otherwise it is turned off, which is the default setting in OCI.</p>
</li>
<li>
<p><code><a id="sthref2376"></a>OCI_ENABLE_NLS_VALIDATION</code> - Enables NLS character validation. See Comments for more information.</p>
</li>
</ul>
<dl>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the user-defined context for the memory callback routines.</p>
</dd>
<dt>malocfp (IN)</dt>
<dd>
<p>Specifies the user-defined memory allocation function. If mode is <code>OCI_THREADED</code>, this memory allocation routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory allocation function.</p>
</dd>
<dt>size (IN)</dt>
<dd>
<p>Specifies the size of memory to be allocated by the user-defined memory allocation function.</p>
</dd>
<dt>ralocfp (IN)</dt>
<dd>
<p>Specifies the user-defined memory reallocation function. If the mode is <code>OCI_THREADED</code>, this memory allocation routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory reallocation function.</p>
</dd>
<dt>memptr (IN)</dt>
<dd>
<p>Pointer to memory block.</p>
</dd>
<dt>newsize (IN)</dt>
<dd>
<p>Specifies the new size of memory to be allocated.</p>
</dd>
<dt>mfreefp (IN)</dt>
<dd>
<p>Specifies the user-defined memory free function. If the mode is <code>OCI_THREADED</code>, this memory free routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory free function.</p>
</dd>
<dt>memptr (IN)</dt>
<dd>
<p>Pointer to memory to be freed.</p>
</dd>
<dt><span class="bold">xtramemsz</span> (IN)</dt>
<dd>
<p>Specifies the amount of user memory to be allocated for the duration of the environment.</p>
</dd>
<dt><span class="bold">usrmempp</span> (OUT)</dt>
<dd>
<p>Returns a pointer to the user memory of size <code>xtramemsz</code> allocated by the call for the user.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2377"></a>Comments</p>
<p>This call creates an environment for all the OCI calls using the modes specified by the user.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This call should be invoked before any other OCI call and should be used instead of the <code>OCIInitialize()</code> call.</div>
<p>This call returns an environment handle, which is then used by the remaining OCI functions. There can be multiple environments in OCI, each with its own environment modes. This function also performs any process level initialization if required by any mode. For example, if the user wants to initialize an environment as <code>OCI_THREADED</code>, then all libraries that are used by OCI are also initialized in the threaded mode.</p>
<p>If N' substitution is turned on, the <a href="oci17msc001.htm#i575144">OCIStmtPrepare()</a> or <a href="oci17msc001.htm#i575217">OCIStmtPrepare2()</a> function performs the N' substitution on the SQL text and stores the resulting SQL text in the statement handle. Thus, if the application uses <code>OCI_ATTR_STATEMENT</code> to retrieve the SQL text from the OCI statement handle, the modified SQL text, instead of the original SQL text, is returned.</p>
<p>To turn on N' substitution in <code>ksh</code> shell:</p>
<pre>
export <a id="sthref2378"></a>ORA_NCHAR_LITERAL_REPLACE=TRUE
</pre>
<p>To turn on N' substitution in <code>csh</code> shell:</p>
<pre>
setenv ORA_NCHAR_LITERAL_REPLACE TRUE
</pre>
<p>If a remote database is of a release before 10.2, N' substitution is not performed.</p>
<p>If you are writing a DLL or a shared library using the OCI library, then use this call instead of the deprecated <a href="ociaedep001.htm#i556330">OCIInitialize()</a> call.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i463458">"User Memory Allocation"</a> for more information about the <code>xtramemsz</code> parameter and user memory allocation</div>
<p>Regarding <code>OCI_SUPPRESS_NLS_VALIDATION</code> and <code>OCI_ENABLE_NLS_VALIDATION</code> modes, by default, when client and server character sets are identical, and client and server releases are both Oracle Database 11<span class="italic">g</span> Release 1 (11.1) or higher, OCI does not validate character data in the interest of better performance. This means that if the application inserts a character string with partial multibyte characters (for example, at the end of a bind variable), then such strings could get persisted in the database as is.</p>
<p>Note that if either the client or the server release is older than Oracle Database 11<span class="italic">g</span> Release 1 (11.1), then OCI does not allow partial characters.</p>
<p>The <code>OCI_ENABLE_NLS_VALIDATION</code> mode, which was the default until Oracle Database 10<span class="italic">g</span> Release 2 (10.2), ensures that partial multibyte characters are not persisted in the database (when client and server character sets are identical). If the application can produce partial multibyte characters, and if the application can run in an environment where the client and server character sets are identical, then Oracle recommends using the <code>OCI_ENABLE_NLS_VALIDATION</code> mode explicitly in order to ensure that such partial characters get stripped out.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2379"></a>Example</p>
<div id="LNOCI18334" class="example">
<p class="titleinexample"><a id="sthref2380"></a>Example 16-1 Creating a Thread-Safe OCI Environment with N' Substitution Turned On</p>
<pre>
OCIEnv *envhp;
...
/* Create a thread-safe OCI environment with N' substitution turned on.  */
if(OCIEnvCreate((OCIEnv **)&amp;envhp,
         (ub4)OCI_THREADED | OCI_NCHAR_LITERAL_REPLACE_ON,
         (void  *)0, (void  * (*)(void  *, size_t))0,
         (void  * (*)(void  *, void  *, size_t))0,
         (void (*)(void  *, void  *))0,
         (size_t)0, (void  **)0))
{
  printf("Failed: OCIEnvCreate()\n");
  return 1;
}
...
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2381"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>, <a href="oci16rel002.htm#i540911">OCIHandleFree()</a>, <a href="#i562098">OCIEnvNlsCreate()</a>, <a href="#i562956">OCITerminate()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17114" class="refsect2"><a id="i562098"></a>
<h2 class="refsect2"><a id="sthref2382"></a>OCIEnvNlsCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2383"></a>Purpose</p>
<p>Creates and initializes an environment handle for OCI functions to work under. It is an enhanced version of the <a href="#i556149">OCIEnvCreate()</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2384"></a>Syntax</p>
<pre>
sword OCIEnvNlsCreate   ( OCIEnv        **envhpp,
                          ub4           mode,
                          void          *ctxp,
                          void          *(*malocfp)
                                             (void  *ctxp,
                                              size_t size),
                          void          *(*ralocfp)
                                             (void  *ctxp,
                                              void  *memptr,
                                              size_t newsize),
                          void          (*mfreefp)
                                             (void  *ctxp,
                                              void  *memptr))
                          size_t        xtramemsz,
                          void          **usrmempp
                          ub2           charset,
                          ub2           ncharset );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2385"></a>Parameters</p>
<dl>
<dt><span class="bold">envhpp</span> (OUT)</dt>
<dd>
<p>A pointer to an environment handle whose encoding setting is specified by <code>mode</code>. The setting is inherited by statement handles derived from <code>envhpp</code>.</p>
</dd>
<dt><span class="bold">mode</span> (IN)</dt>
<dd>
<p>Specifies initialization of the mode. Valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code><a id="sthref2386"></a>OCI_DEFAULT</code> - The default value, which is non-<code>UTF-16</code> encoding.</p>
</li>
<li>
<p><code><a id="sthref2387"></a>OCI_THREADED</code> - Uses threaded environment. Internal data structures not exposed to the user are protected from concurrent accesses by multiple threads.</p>
</li>
<li>
<p><code><a id="sthref2388"></a>OCI_OBJECT</code> - Uses object features.</p>
</li>
<li>
<p><code><a id="sthref2389"></a>OCI_EVENTS</code> - Uses publish-subscribe notifications.</p>
</li>
<li>
<p><a id="sthref2390"></a><code><a id="sthref2391"></a>OCI_NO_UCB</code> - Suppresses the calling of the dynamic callback routine <code>OCIEnvCallback()</code>. The default behavior is to allow calling of <code>OCIEnvCallback()</code> when the environment is created.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i449022">"Dynamic Callback Registrations"</a></div>
</li>
</ul>
<ul>
<li>
<p><code><a id="sthref2392"></a>OCI_ENV_NO_MUTEX</code> - No mutual exclusion (mutex) locking occurs in this mode. All OCI calls done on the environment handle, or on handles derived from the environment handle, must be serialized. <code>OCI_THREADED</code> must also be specified when <code>OCI_ENV_NO_MUTEX</code> is specified.</p>
</li>
<li>
<p><a id="sthref2393"></a><code>OCI_SUPPRESS_NLS_VALIDATION</code> - Suppresses NLS character validation; NLS character validation suppression is on by default beginning with Oracle Database 11<span class="italic">g</span> Release 1 (11.1). Use <code>OCI_ENABLE_NLS_VALIDATION</code> to enable NLS character validation. See Comments for more information.</p>
</li>
<li>
<p><code><a id="sthref2394"></a>OCI_NCHAR_LITERAL_REPLACE_ON</code> - Turns on N' substitution.</p>
</li>
<li>
<p><code><a id="sthref2395"></a>OCI_NCHAR_LITERAL_REPLACE_OFF</code> - Turns off N' substitution. If neither this mode nor <code>OCI_NCHAR_LITERAL_REPLACE_ON</code> is used, the substitution is determined by the environment variable <code>ORA_NCHAR_LITERAL_REPLACE</code>, which can be set to <code>TRUE</code> or <code>FALSE</code>. When it is set to <code>TRUE</code>, the replacement is turned on; otherwise it is turned off, the default setting in OCI.</p>
</li>
<li>
<p><code><a id="sthref2396"></a>OCI_ENABLE_NLS_VALIDATION</code> - Enables NLS character validation. See Comments for more information.</p>
</li>
</ul>
<dl>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the user-defined context for the memory callback routines.</p>
</dd>
<dt>malocfp (IN)</dt>
<dd>
<p>Specifies the user-defined memory allocation function. If <code>mode</code> is <code>OCI_THREADED</code>, this memory allocation routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory allocation function.</p>
</dd>
<dt>size (IN)</dt>
<dd>
<p>Specifies the size of memory to be allocated by the user-defined memory allocation function.</p>
</dd>
<dt>ralocfp (IN)</dt>
<dd>
<p>Specifies the user-defined memory reallocation function. If the mode is <code>OCI_THREADED</code>, this memory allocation routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory reallocation function.</p>
</dd>
<dt>memptr (IN)</dt>
<dd>
<p>Pointer to memory block.</p>
</dd>
<dt>newsize (IN)</dt>
<dd>
<p>Specifies the new size of memory to be allocated.</p>
</dd>
<dt>mfreefp (IN)</dt>
<dd>
<p>Specifies the user-defined memory free function. If the mode is <code>OCI_THREADED</code>, this memory free routine must be thread-safe.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>Specifies the context pointer for the user-defined memory free function.</p>
</dd>
<dt>memptr (IN)</dt>
<dd>
<p>Pointer to memory to be freed.</p>
</dd>
<dt><span class="bold">xtramemsz</span> (IN)</dt>
<dd>
<p>Specifies the amount of user memory to be allocated for the duration of the environment.</p>
</dd>
<dt><span class="bold">usrmempp</span> (OUT)</dt>
<dd>
<p>Returns a pointer to the user memory of size <code>xtramemsz</code> allocated by the call for the user.</p>
</dd>
<dt>charset (IN)</dt>
<dd>
<p>The client-side character set for the current environment handle. If it is 0, the <code>NLS_LANG</code> setting is used. <code>OCI_UTF16ID</code> is a valid setting; it is used by the metadata and the <code>CHAR</code> data.</p>
</dd>
<dt>ncharset (IN)</dt>
<dd>
<p>The client-side national character set for the current environment handle. If it is 0, <code>NLS_NCHAR</code> setting is used. <code>OCI_UTF16ID</code> is a valid setting; it is used by the <code>NCHAR</code> data.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2397"></a>Returns</p>
<p><code>OCI_SUCCESS</code> - Environment handle has been successfully created.</p>
<p><code>OCI_ERROR</code> - An error occurred.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2398"></a>Comments</p>
<p>This call creates an environment for all the OCI calls using the modes specified by the user.</p>
<p>After you use <code>OCIEnvNlsCreate()</code> to create the environment handle, the actual lengths and returned lengths of bind and define handles are always expressed in number of bytes. This applies to the following calls:</p>
<ul>
<li>
<p><a href="oci16rel003.htm#i456223">OCIBindByName()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#i456224">OCIBindByPos()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#i444015">OCIBindDynamic()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#i459315">OCIDefineByPos()</a></p>
</li>
<li>
<p><a href="oci16rel003.htm#i444226">OCIDefineDynamic()</a></p>
</li>
</ul>
<p>This function enables you to set <code>charset</code> and <code>ncharset</code> IDs at environment creation time. It is an enhanced version of the <code>OCIEnvCreate()</code> function.</p>
<p>This function sets nonzero <code>charset</code> and <code>ncharset</code> as client-side database and national character sets, replacing the ones specified by <code>NLS_LANG</code> and <code>NLS_NCHAR</code>. When <code>charset</code> and <code>ncharset</code> are 0, the function behaves exactly the same as <a href="#i556149">OCIEnvCreate()</a>. Specifically, <code>charset</code> controls the encoding for metadata and data with implicit form attribute, and <code>ncharset</code> controls the encoding for data with <code>SQLCS_NCHAR</code> form attribute.</p>
<p>Although <code>OCI_UTF16ID</code> can be set by <code>OCIEnvNlsCreate()</code>, it cannot be set in <code>NLS_LANG</code> or <code>NLS_NCHAR</code>. To access the character set IDs in <code>NLS_LANG</code> and <code>NLS_NCHAR</code>, use <a href="oci22glb001.htm#i529146">OCINlsEnvironmentVariableGet()</a>.</p>
<p>This call returns an environment handle, which is then used by the remaining OCI functions. There can be multiple environments in OCI, each with its own environment modes. This function also performs any process level initialization if required by any mode. For example, if the user wants to initialize an environment as <code>OCI_THREADED</code>, then all libraries that are used by OCI are also initialized in the threaded mode.</p>
<p>If N' substitution is turned on, the <a href="oci17msc001.htm#i575144">OCIStmtPrepare()</a> or <a href="oci17msc001.htm#i575217">OCIStmtPrepare2()</a> function performs the N' substitution on the SQL text and stores the resulting SQL text in the statement handle. Thus, if the application uses <code>OCI_ATTR_STATEMENT</code> to retrieve the SQL text from the OCI statement handle, the modified SQL text, instead of the original SQL text, is returned.</p>
<p>To turn on N' substitution in <code>ksh</code> shell:</p>
<pre>
export ORA_NCHAR_LITERAL_REPLACE=TRUE
</pre>
<p>To turn on N' substitution in <code>csh</code> shell:</p>
<pre>
setenv ORA_NCHAR_LITERAL_REPLACE TRUE
</pre>
<p>If a remote database is of a release before 10.2, N' substitution is not performed.</p>
<p>If you are writing a DLL or a shared library using the OCI library, then use this call instead of the deprecated <a href="ociaedep001.htm#i556330">OCIInitialize()</a> call.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci02bas.htm#i463458">"User Memory Allocation"</a> for more information about the <code>xtramemsz</code> parameter and user memory allocation</p>
</li>
<li>
<p><a href="#i556149">"OCIEnvCreate()"</a> for a code example illustrating setting N' substitution in a related function</p>
</li>
</ul>
</div>
<p>Regarding <code>OCI_SUPPRESS_NLS_VALIDATION</code> and <code>OCI_ENABLE_NLS_VALIDATION</code> modes, by default, when client and server character sets are identical, and client and server releases are both Oracle Database 11<span class="italic">g</span> Release 1 (11.1) or higher, OCI does not validate character data in the interest of better performance. This means that if the application inserts a character string with partial multibyte characters (for example, at the end of a bind variable), then such strings could get persisted in the database as is.</p>
<p>Note that if either the client or the server release is older than Oracle Database 11<span class="italic">g</span> Release 1 (11.1), then OCI does not allow partial characters.</p>
<p>The <code>OCI_ENABLE_NLS_VALIDATION</code> mode, which was the default until Oracle Database 10<span class="italic">g</span> Release 2 (10.2), ensures that partial multibyte characters are not persisted in the database (when client and server character sets are identical). If the application can produce partial multibyte characters, and if the application can run in an environment where the client and server character sets are identical, then Oracle recommends using the <code>OCI_ENABLE_NLS_VALIDATION</code> mode explicitly in order to ensure that such partial characters get stripped out.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2399"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>, <a href="oci16rel002.htm#i540911">OCIHandleFree()</a>, <a href="#i562956">OCITerminate()</a>, <a href="oci22glb001.htm#i529146">OCINlsEnvironmentVariableGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17116" class="refsect2"><a id="i556437"></a>
<h2 class="refsect2">OCILogoff()<a id="sthref2400"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2401"></a>Purpose</p>
<p>Releases a session that was retrieved using <code>OCILogon2()</code> or <code>OCILogon()</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2402"></a>Syntax</p>
<pre>
sword OCILogoff ( OCISvcCtx      *svchp
                  OCIError       *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2403"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle that was used in the call to <a href="#i556477">OCILogon()</a> or <a href="#i558312">OCILogon2()</a>.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2404"></a>Comments</p>
<p>This function is used to release a session that was retrieved using <code>OCILogon2()</code> or <code>OCILogon()</code>. If <code>OCILogon()</code> was used, then this function terminates the connection and session. If <code>OCILogon2()</code> was used, then the exact behavior of this call is determined by the <code>mode</code> in which the corresponding <code>OCILogon2()</code> function was called. In the default case, this function closes the session or connection. For connection pooling, it closes the session and returns the connection to the pool. For session pooling, it returns the session or connection pair to the pool.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i462054">"Application Initialization, Connection, and Session Creation"</a> for more information about logging on and off in an application</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2405"></a>Related Functions</p>
<p><a href="#i556477">OCILogon()</a>, <a href="#i558312">OCILogon2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17117" class="refsect2"><a id="i556477"></a>
<h2 class="refsect2">OCILogon()<a id="sthref2406"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2407"></a>Purpose</p>
<p>Creates a simple logon session.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2408"></a>Syntax</p>
<pre>
sword OCILogon ( OCIEnv          *envhp,
                 OCIError        *errhp,
                 OCISvcCtx       **svchp,
                 const OraText   *username,
                 ub4             uname_len,
                 const OraText   *password,
                 ub4             passwd_len,
                 const OraText   *dbname,
                 ub4             dbname_len );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2409"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The service context pointer.</p>
</dd>
<dt>username (IN)</dt>
<dd>
<p>The user name. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <code>OCIEnvNlsCreate()</code>.</p>
</dd>
<dt>uname_len (IN)</dt>
<dd>
<p>The length of <code>username</code>, in number of bytes, regardless of the encoding.</p>
</dd>
<dt>password (IN)</dt>
<dd>
<p>The user's password. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt>passwd_len (IN)</dt>
<dd>
<p>The length of <code>password</code>, in number of bytes, regardless of the encoding.</p>
</dd>
<dt>dbname (IN)</dt>
<dd>
<p>The name of the database to connect to. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt>dbname_len (IN)</dt>
<dd>
<p>The length of <code>dbname</code>, in number of bytes, regardless of the encoding.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2410"></a>Comments</p>
<p>This function is used to create a simple logon session for an application.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Users requiring more complex sessions, such as TP monitor applications, should see <a href="oci02bas.htm#i462054">"Application Initialization, Connection, and Session Creation"</a>.</div>
<p>This call allocates the service context handles that are passed to it. This call also implicitly allocates server and user session handles associated with the session. These handles can be retrieved by calling <a href="oci16rel002.htm#i493114">OCIArrayDescriptorAlloc()</a> on the service context handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2411"></a>Related Functions</p>
<p><a href="#i556437">OCILogoff()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17118" class="refsect2"><a id="i558312"></a>
<h2 class="refsect2"><a id="sthref2412"></a>OCILogon2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2413"></a>Purpose</p>
<p>Gets a session. This session may be a new one with a new underlying connection, or one that is started over a virtual connection from an existing connection pool, or one from an existing session pool. The <code>mode</code> that the function is called with determines its behavior.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2414"></a>Syntax</p>
<pre>
sword OCILogon2 ( OCIEnv          *envhp,
                  OCIError        *errhp,
                  OCISvcCtx       **svchp,
                  const OraText   *username,
                  ub4             uname_len,
                  const OraText   *password,
                  ub4             passwd_len,
                  const OraText   *dbname,
                  ub4             dbname_len );
                  ub4             mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2415"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The OCI environment handle. For connection pooling and session pooling, this must be the one that the respective pool was created in.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>Address of an OCI service context pointer. This is filled with a server and session handle.</p>
<p>In the default case, a new session and server handle is allocated, the connection and session are started, and the service context is populated with these handles.</p>
<p>For connection pooling, a new session handle is allocated, and the session is started over a virtual connection from the connection pool.</p>
<p>For session pooling, the service context is populated with an existing session or server handle pair from the session pool.</p>
<p>Note that the user must not change any attributes of the server and user or session handles associated with the service context pointer. Doing so results in an error being returned by the <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> call.</p>
<p>The only attribute of the service context that can be altered is <code>OCI_ATTR_STMTCACHESIZE</code>.</p>
</dd>
<dt>username (IN)</dt>
<dd>
<p>The user name used to authenticate the session. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt>uname_len (IN)</dt>
<dd>
<p>The length of <code>username</code>, in number of bytes, regardless of the encoding.</p>
</dd>
<dt>password (IN)</dt>
<dd>
<p>The user's password. For connection pooling, if this parameter is <code>NULL</code> then <code>OCILogon2()</code> assumes that the logon is for a proxy user. It implicitly creates a proxy connection in such a case, using the pool user to authenticate the proxy user. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt>passwd_len (IN)</dt>
<dd>
<p>The length of <code>password</code>, in number of bytes, regardless of the encoding.</p>
</dd>
<dt>dbname (IN)</dt>
<dd>
<p>For the default case, this indicates the connect string to use to connect to the Oracle Database.</p>
<p>For connection pooling, this indicates the connection pool from which to retrieve the virtual connection to start the session. This value is returned by the <a href="#i556060">OCIConnectionPoolCreate()</a> call.</p>
<p>For session pooling, it indicates the pool to get the session from. It is returned by the <a href="#i563356">OCISessionPoolCreate()</a> call.</p>
<p>The <code>dbname</code> must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt>dbname_len (IN)</dt>
<dd>
<p>The length of <code>dbname</code>. For session pooling and connection pooling, this value is returned by the <a href="#i563356">OCISessionPoolCreate()</a> or <a href="#i556060">OCIConnectionPoolCreate()</a> call respectively.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The values accepted are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code></p>
</li>
<li>
<p><code>OCI_LOGON2_CPOOL</code></p>
</li>
<li>
<p><code>OCI_LOGON2_SPOOL</code></p>
</li>
<li>
<p><code>OCI_LOGON2_STMTCACHE</code></p>
</li>
<li>
<p><code>OCI_LOGON2_PROXY</code></p>
</li>
</ul>
<p>For the default (nonpooling case), the following modes are valid:</p>
<p><code>OCI_DEFAULT</code> - Equivalent to calling <code>OCILogon()</code>.</p>
<p><code>OCI_LOGON2_STMTCACHE</code> - Enable statement caching.</p>
<p>For connection pooling, the following modes are valid:</p>
<p><code>OCI_LOGON2_CPOOL</code> or <code>OCI_CPOOL</code> - This must be set to use connection pooling.</p>
<p><code>OCI_LOGON2_STMTCACHE</code> - Enable statement caching.</p>
<p>To use proxy authentication for connection pooling, the password must be set to <code>NULL</code>. The user is then given a session that is authenticated by the user name provided in the <code>OCILogon2()</code> call, through the proxy credentials supplied in the <a href="#i556060">OCIConnectionPoolCreate()</a> call.</p>
<p>For session pooling, the following modes are valid:</p>
<p><code>OCI_LOGON2_SPOOL</code> - This must be set to use session pooling.</p>
<p><code>OCI_LOGON2_STMTCACHE</code> - Enable statement caching.</p>
<p><code>OCI_LOGON2_PROXY</code> - Use proxy authentication. The user is given a session that is authenticated by the user name provided in the <code>OCILogon2()</code> call, through the proxy credentials supplied in the <a href="#i563356">OCISessionPoolCreate()</a> call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2416"></a>Comments</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2417"></a>Related Functions</p>
<p><a href="#i556477">OCILogon()</a>, <a href="#i556437">OCILogoff()</a>, <a href="#i563311">OCISessionGet()</a>, <a href="#i563322">OCISessionRelease()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17119" class="refsect2"><a id="i558225"></a>
<h2 class="refsect2">OCIServerAttach()<a id="sthref2418"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2419"></a>Purpose</p>
<p>Creates an access path to a data source for OCI operations.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2420"></a>Syntax</p>
<pre>
sword OCIServerAttach ( OCIServer     *srvhp,
                        OCIError      *errhp,
                        const OraText *dblink,
                        sb4           dblink_len,
                        ub4           mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2421"></a>Parameters</p>
<dl>
<dt><span class="bold">srvhp</span> (IN/OUT)</dt>
<dd>
<p>An uninitialized server handle, which is initialized by this call. Passing in an initialized server handle causes an error.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">dblink</span> (IN)</dt>
<dd>
<p>Specifies the database server to use. This parameter points to a character string that specifies a connect string or a service point. If the connect string is <code>NULL</code>, then this call attaches to the default host. The string itself could be in <code>UTF-16</code> encoding mode or not, depending on the <code>mode</code> or the setting in application's environment handle. The length of <code>dblink</code> is specified in <code>dblink_len</code>. The <code>dblink</code> pointer may be freed by the caller on return.</p>
<p>The name of the connection pool to connect to when <code>mode</code> = <code>OCI_CPOOL</code>. This must be the same as the <code>poolName</code> parameter of the connection pool created by <a href="#i556060">OCIConnectionPoolCreate()</a>. Must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt><span class="bold">dblink_len</span> (IN)</dt>
<dd>
<p>The length of the string pointed to by <code>dblink</code>. For a valid connect string name or alias, <code>dblink_len</code> must be nonzero. Its value is in number of bytes.</p>
<p>The length of <code>poolName</code>, in number of bytes, regardless of the encoding, when <code>mode</code> = <code>OCI_CPOOL</code>.</p>
</dd>
<dt><span class="bold">mode</span> (IN)</dt>
<dd>
<p>Specifies the various modes of operation. The valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code> - For encoding, this value tells the server handle to use the setting in the environment handle.</p>
</li>
<li>
<p><code>OCI_CPOOL</code> - Use connection pooling.</p>
</li>
</ul>
<p>Because an attached server handle can be set for any connection session handle, the <code>mode</code> value here does not contribute to any session handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2422"></a>Comments</p>
<p>This call is used to create an association between an OCI application and a particular server.</p>
<p>This call assumes that <a href="#i556060">OCIConnectionPoolCreate()</a> has been called, giving <code>poolName</code>, when connection pooling is in effect.</p>
<p>This call initializes a server context handle, which must have been previously allocated with a call to <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>. The server context handle initialized by this call can be associated with a service context through a call to <a href="oci16rel002.htm#i443804">OCIAttrSet()</a>. After that association has been made, OCI operations can be performed against the server.</p>
<p>If an application is operating against multiple servers, multiple server context handles can be maintained. OCI operations are performed against whichever server context is currently associated with the service context.</p>
<p><span class="bold"><a id="sthref2423"></a></span>When <code>OCIServerAttach()</code> is successfully completed, an Oracle Database shadow process is started. <a href="#i556679">OCISessionEnd()</a> and <a href="#i556585">OCIServerDetach()</a> should be called to clean up the Oracle Database shadow process. Otherwise, the shadow processes accumulate and cause the Linux or UNIX system to run out of processes. If the database is restarted and there are not enough processes, the database may not start up.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2424"></a>Example</p>
<p><a href="#CIHHIIGI">Example 16-2</a> demonstrates the use of <code>OCIServerAttach()</code>. This code segment allocates the server handle, makes the attach call, allocates the service context handle, and then sets the server context into it.</p>
<div id="LNOCI18335" class="example">
<p class="titleinexample"><a id="CIHHIIGI"></a>Example 16-2 Using the OCIServerAttach() Call</p>
<pre>
OCIHandleAlloc( (void  *) envhp, (void  **) &amp;srvhp, (ub4)
     OCI_HTYPE_SERVER, 0, (void  **) 0);
OCIServerAttach( srvhp, errhp, (text *) 0, (sb4) 0, (ub4) OCI_DEFAULT);
OCIHandleAlloc( (void  *) envhp, (void  **) &amp;svchp, (ub4)
     OCI_HTYPE_SVCCTX, 0, (void  **) 0);
/* set attribute server context in the service context */
OCIAttrSet( (void  *) svchp, (ub4) OCI_HTYPE_SVCCTX, (void  *) srvhp,
     (ub4) 0, (ub4) OCI_ATTR_SERVER, (OCIError *) errhp);
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2425"></a>Related Functions</p>
<p><a href="#i556585">OCIServerDetach()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17120" class="refsect2"><a id="i556585"></a>
<h2 class="refsect2">OCIServerDetach()<a id="sthref2426"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2427"></a>Purpose</p>
<p>Deletes an access path to a data source for OCI operations.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2428"></a>Syntax</p>
<pre>
sword OCIServerDetach ( OCIServer   *srvhp,
                        OCIError    *errhp,
                        ub4         mode ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2429"></a>Parameters</p>
<dl>
<dt><span class="bold">srvhp</span> (IN)</dt>
<dd>
<p>A handle to an initialized server context, which is reset to an uninitialized state. The handle is not deallocated.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">mode</span> (IN)</dt>
<dd>
<p>Specifies the various modes of operation. The only valid mode is <code>OCI_DEFAULT</code> for the default mode.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2430"></a>Comments</p>
<p>This call deletes an access path a to data source for OCI operations. The access path was established by a call to <a href="#i558225">OCIServerAttach()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2431"></a>Related Functions</p>
<p><a href="#i558225">OCIServerAttach()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17121" class="refsect2"><a id="i556608"></a>
<h2 class="refsect2">OCISessionBegin()<a id="sthref2432"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2433"></a>Purpose</p>
<p>Creates a user session and begins a user session for a given server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2434"></a>Syntax</p>
<pre>
sword OCISessionBegin ( OCISvcCtx     *svchp,
                        OCIError      *errhp,
                        OCISession    *usrhp,
                        ub4           credt,
                        ub4           mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2435"></a>Parameters</p>
<dl>
<dt><span class="bold">svch</span>p (IN)</dt>
<dd>
<p>A handle to a service context. There must be a valid server handle set in <code>svchp</code>.</p>
</dd>
<dt>errhp (IN)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>usrhp (IN/OUT)</dt>
<dd>
<p>A handle to a user session context, which is initialized by this call.</p>
</dd>
<dt>credt (IN)</dt>
<dd>
<p>Specifies the type of credentials to use for establishing the user session. Valid values for <code>credt</code> are:</p>
</dd>
</dl>
<a id="CIHEICBJ"></a>
<ul>
<li id="CIHFBFJJ">
<p><a id="sthref2436"></a><code>OCI_CRED_RDBMS</code> - Authenticate using a database user name and password pair as credentials. The attributes <code>OCI_ATTR_USERNAME</code> and <code>OCI_ATTR_PASSWORD</code> should be set on the user session context before this call.</p>
</li>
<li>
<p><a id="sthref2437"></a><code>OCI_CRED_EXT</code> - Authenticate using external credentials. No user name or password is provided.</p>
</li>
</ul>
<dl>
<dt>mode (IN)</dt>
<dd>
<p>Specifies the various modes of operation. Valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code><a id="sthref2438"></a>OCI_DEFAULT</code> - In this mode, the user session context returned can only ever be set with the server context specified in <code>svchp</code>. For encoding, the server handle uses the setting in the environment handle.</p>
</li>
<li>
<p><a id="sthref2439"></a><code>OCI_MIGRATE</code> - In this mode, the new user session context can be set in a service handle with a different server handle. This mode establishes the user session context. To create a migratable session, the service handle must already be set with a nonmigratable user session, which becomes the "creator" session of the migratable session. That is, a migratable session must have a nonmigratable parent session.</p>
<p><code>OCI_MIGRATE</code> should not be used when the session uses connection pool underneath. The session migration and multiplexing happens transparently to the user.</p>
</li>
<li>
<p><code><a id="sthref2440"></a>OCI_SYSDBA</code> - In this mode, the user is authenticated for SYSDBA access.</p>
</li>
<li>
<p><a id="sthref2441"></a><code>OCI_SYSOPER</code> - In this mode, the user is authenticated for SYSOPER access.</p>
</li>
<li>
<p><code><a id="sthref2442"></a>OCI_PRELIM_AUTH</code> - This mode can only be used with <code>OCI_SYSDBA</code> or <code>OCI_SYSOPER</code> to authenticate for certain administration tasks.</p>
</li>
<li>
<p><code><a id="sthref2443"></a>OCI_STMT_CACHE</code> - Enables statement caching with default size on the given service handle. It is optional to pass this mode if the application is going to explicitly set the size later using <a id="sthref2444"></a><code>OCI_ATTR_STMTCACHESIZE</code> on that service handle.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2445"></a>Comments</p>
<p>The <code>OCISessionBegin()</code> call is used to authenticate a user against the server set in the service context handle.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Check for any errors returned when trying to start a session. For example, if the password for the account has expired, an ORA-28001 error is returned.</div>
<p>For release 8.1 or later, <code>OCISessionBegin()</code> must be called for any given server handle before requests can be made against it. <code>OCISessionBegin()</code> only supports authenticating the user for access to the Oracle database specified by the server handle in the service context. In other words, after <a href="#i558225">OCIServerAttach()</a> is called to initialize a server handle, <code>OCISessionBegin()</code> must be called to authenticate the user for that given server.</p>
<p>When using Unicode, when the <code>mode</code> or the environment handle has the appropriate setting, the user name and password that have been set in the session handle <code>usrhp</code> should be in Unicode. Before calling this function to start a session with a user name and password, you must have called <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> to set these two Unicode strings into the session handle with corresponding length in bytes, because <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> only takes <code>void</code> pointers. The string buffers then are interpreted by <code>OCISessionBegin()</code>.</p>
<p><a id="sthref2446"></a><a id="sthref2447"></a>When <code>OCISessionBegin()</code> is called for the first time for a given server handle, the user session may not be created in migratable (<code>OCI_MIGRATE</code>) mode.</p>
<p>After <code>OCISessionBegin()</code> has been called for a server handle, the application may call <code>OCISessionBegin()</code> again to initialize another user session handle with different (or the same) credentials and different (or the same) operation modes. If an application wants to authenticate a user in <code>OCI_MIGRATE</code> mode, the service handle must be associated with a nonmigratable user handle. The user ID of that user handle becomes the ownership ID of the migratable user session. Every migratable session must have a nonmigratable parent session.</p>
<p>If the <code>OCI_MIGRATE</code> mode is not specified, then the user session context can only be used with the same server handle set in <code>svchp</code>. If the <code>OCI_MIGRATE</code> mode is specified, then the user authentication can be set with different server handles. However, the user session context can only be used with server handles that resolve to the same database instance. Security checking is done during session switching. A session can migrate to another process only if there is a nonmigratable session currently connected to that process whose userid is the same as that of the creator's userid or its own userid.</p>
<p>Do not set the <code>OCI_MIGRATE</code> flag in the call to <code>OCISessionBegin()</code> when the virtual server handle points to a connection pool (<a href="#i558225">OCIServerAttach()</a> called with <code>mode</code> set to <code>OCI_CPOOL</code>). Oracle Database supports passing this flag only for compatibility reasons. Do not use the <code>OCI_MIGRATE</code> flag, as the perception that the user gets when using a connection pool is of sessions having their own dedicated (virtual) connections that are transparently multiplexed onto real connections.</p>
<p><code>OCI_SYSDBA</code>, <code>OCI_SYSOPER</code>, and <code>OCI_PRELIM_AUTH</code> can only be used with a primary user session context.</p>
<p>To provide credentials for a call to <code>OCISessionBegin()</code>, two methods are supported. The first method is to provide a valid user name and password pair for database authentication in the user session handle passed to <code>OCISessionBegin()</code>. This involves using <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> to set the <code>OCI_ATTR_USERNAME</code> and <code>OCI_ATTR_PASSWORD</code> attributes on the user session handle. Then <code>OCISessionBegin()</code> is called with <code>OCI_CRED_RDBMS</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When the user session handle is terminated using <a href="#i556679">OCISessionEnd()</a>, the user name and password attributes remain unchanged and thus can be reused in a future call to <code>OCISessionBegin()</code>. Otherwise, they must be reset to new values before the next <code>OCISessionBegin()</code> call.</div>
<p>The second method is to use external credentials. No attributes need to be set on the user session handle before calling <code>OCISessionBegin()</code>. The credential type is <code>OCI_CRED_EXT</code>. This is equivalent to the Oracle7 'connect /' syntax. If values have been set for <code>OCI_ATTR_USERNAME</code> and <code>OCI_ATTR_PASSWORD</code>, then these are ignored if <code>OCI_CRED_EXT</code> is used.</p>
<p>Another way of setting credentials is to use the session ID of an authenticated user with the <code>OCI_MIGSESSION</code> attribute. This ID can be extracted from the session handle of an authenticated user using the <a href="oci16rel002.htm#CHDHCHID">OCIAttrGet()</a> call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2448"></a>Example</p>
<p><a href="#CIHEECEB">Example 16-3</a> demonstrates the use of <code>OCISessionBegin()</code>. This code segment allocates the user session handle, sets the user name and password attributes, calls <code>OCISessionBegin()</code>, and then sets the user session into the service context.</p>
<div id="LNOCI18336" class="example">
<p class="titleinexample"><a id="CIHEECEB"></a>Example 16-3 Using the OCISessionBegin() Call</p>
<pre>
/* allocate a user session handle */
OCIHandleAlloc((void  *)envhp, (void  **)&amp;usrhp, (ub4)
     OCI_HTYPE_SESSION, (size_t) 0, (void  **) 0);
OCIAttrSet((void  *)usrhp, (ub4)OCI_HTYPE_SESSION, (void  *)"hr",
     (ub4)strlen("hr"), OCI_ATTR_USERNAME, errhp);
OCIAttrSet((void  *)usrhp, (ub4)OCI_HTYPE_SESSION, (void  *)"hr",
     (ub4)strlen("hr"), OCI_ATTR_PASSWORD, errhp);
checkerr(errhp, OCISessionBegin (svchp, errhp, usrhp, OCI_CRED_RDBMS,
     OCI_DEFAULT));
OCIAttrSet((void  *)svchp, (ub4)OCI_HTYPE_SVCCTX, (void  *)usrhp,
     (ub4)0, OCI_ATTR_SESSION, errhp);
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2449"></a>Related Functions</p>
<p><a href="#i556679">OCISessionEnd()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17122" class="refsect2"><a id="i556679"></a>
<h2 class="refsect2">OCISessionEnd()<a id="sthref2450"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2451"></a>Purpose</p>
<p>Terminates a user session context created by <code>OCISessionBegin()</code></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2452"></a>Syntax</p>
<pre>
sword OCISessionEnd ( OCISvcCtx       *svchp,
                      OCIError        *errhp,
                      OCISession      *usrhp,
                      ub4             mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2453"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle. There must be a valid server handle and user session handle associated with <code>svchp</code>.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>usrhp (IN)</dt>
<dd>
<p>Deauthenticate this user. If this parameter is passed as <code>NULL</code>, the user in the service context handle is deauthenticated.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The only valid mode is <code>OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2454"></a>Comments</p>
<p>The user security context associated with the service context is invalidated by this call. Storage for the user session context is not freed. The transaction specified by the service context is implicitly committed. The transaction handle, if explicitly allocated, may be freed if it is not being used. Resources allocated on the server for this user are freed. The user session handle can be reused in a new call to <a href="#i556608">OCISessionBegin()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2455"></a>Related Functions</p>
<p><a href="#i556608">OCISessionBegin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17123" class="refsect2"><a id="i563311"></a>
<h2 class="refsect2"><a id="sthref2456"></a>OCISessionGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2457"></a>Purpose</p>
<p>Gets a session. This session may be a new one with a new underlying connection, or one that is started over a virtual connection from an existing connection pool, or one from an existing session pool. The <code>mode</code> that the function is called with determines its behavior.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2458"></a>Syntax</p>
<pre>
sword OCISessionGet ( OCIenv            *envhp,
                      OCIError          *errhp,
                      OCISvcCtx         **svchp,
                      OCIAuthInfo       *authInfop,
                      OraText           *dbName,
                      ub4               dbName_len,
                      const OraText     *tagInfo,
                      ub4               tagInfo_len,
                      OraText           **retTagInfo,
                      ub4               *retTagInfo_len,
                      boolean           *found,
                      ub4               mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2459"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle. For connection pooling and session pooling, this should be the one that the respective pool was created in.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>OCI error handle.</p>
</dd>
<dt>svchp (OUT)</dt>
<dd>
<p>Address of an OCI service context pointer. This is filled with a server and session handle.</p>
<p>In the default case, a new session and server handle are allocated, the connection and session are started, and the service context is populated with these handles.</p>
<p>For connection pooling, a new session handle is allocated, and the session is started over a virtual connection from the connection pool.</p>
<p>For session pooling, the service context is populated with an existing session and server handle pair from the session pool.</p>
<p>Do not change any attributes of the server and user and session handles associated with the service context pointer. Doing so results in an error being returned by the <a href="oci16rel002.htm#i443804">OCIAttrSet()</a> call.</p>
<p>The only attribute of the service context that can be altered is <code><a id="sthref2460"></a>OCI_ATTR_STMTCACHESIZE</code>.</p>
</dd>
<dt>authInfop (IN)</dt>
<dd>
<p>Authentication information handle to be used while getting the session.</p>
<p>In the default and connection pooling cases, this handle can take all the attributes of the session handle.</p>
<p>For session pooling, the authentication information handle is considered only if the session pool mode is not set to <code>OCI_SPC_HOMOGENEOUS</code>.</p>
<p>The attributes that can be set on the <code>OCIAuthInfo</code> handle can be categorized into pre-session-creation attributes and post-session-creation attributes. The pre-session-creation attributes are:</p>
<p><span class="bold">Pre-session-creation attributes</span></p>
<p>Pre-session-creation attributes are those OCI attributes that must be specified before a session is created. These attributes are used to create a session and cannot be changed after a session is created. The pre-session creation attributes are:</p>
<p><code><a id="sthref2461"></a>OCI_ATTR_USERNAME</code></p>
<p><code><a id="sthref2462"></a>OCI_ATTR_PASSWORD</code></p>
<p><code><a id="sthref2463"></a>OCI_ATTR_CONNECTION_CLASS</code></p>
<p><a id="sthref2464"></a><code>OCI_ATTR_PURITY</code></p>
<p><code><a id="sthref2465"></a>OCI_ATTR_PROXY_CREDENTIALS</code></p>
<p><code><a id="sthref2466"></a>OCI_ATTR_DISTINGUISHED_NAME</code></p>
<p><code>OCI_ATTR_CERTIFICATE</code><a id="sthref2467"></a></p>
<p><code><a id="sthref2468"></a>OCI_ATTR_INITIAL_CLIENT_ROLES</code></p>
<p><a id="sthref2469"></a><code>OCI_ATTR_APPCTX_SIZE</code></p>
<p><code><a id="sthref2470"></a>OCI_ATTR_EDITION</code></p>
<p><a id="sthref2471"></a><code>OCI_ATTR_DRIVER_NAME</code></p>
<p><span class="bold">Post-session-creation attributes</span></p>
<p>Post-session-creation attributes are those that can be specified after a session is created. They can be changed freely after a session is created as many times as desired. The following attributes can be set on the <code>OCISession</code> handle after the session has been created:</p>
<p><code><a id="sthref2472"></a>OCI_ATTR_CLIENT_IDENTIFIER</code></p>
<p><a id="sthref2473"></a><code>OCI_ATTR_CURRENT_SCHEMA</code></p>
<p><code><a id="sthref2474"></a>OCI_ATTR_MODULE</code></p>
<p><code><a id="sthref2475"></a>OCI_ATTR_ACTION</code></p>
<p><a id="sthref2476"></a><code>OCI_ATTR_CLIENT_INFO</code></p>
<p><code><a id="sthref2477"></a>OCI_ATTR_COLLECT_CALL_TIME</code></p>
<p><code><a id="sthref2478"></a>OCI_ATTR_DEFAULT_LOBPREFETCH_SIZE</code></p>
<p><code><a id="sthref2479"></a>OCI_ATTR_SESSION_STATE</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci09adv.htm#i465498">"Session Pooling in OCI"</a></p>
</li>
<li>
<p><code>cdemosp.c</code> in the <code>demo</code> directory</p>
</li>
<li>
<p><a href="ociaahan.htm#i428844">"User Session Handle Attributes"</a> for more information about the attributes</p>
</li>
<li>
<p>The Comments section</p>
</li>
</ul>
</div>
</dd>
<dt>dbName (IN)</dt>
<dd>
<p>For the default case, this indicates the connect string to use to connect to the Oracle database.</p>
<p>For connection pooling, it indicates the connection pool to retrieve the virtual connection from, to start the session. This value is returned by the <a href="#i556060">OCIConnectionPoolCreate()</a> call.</p>
<p>For session pooling, it indicates the pool to get the session from. It is returned by the <a href="#i563356">OCISessionPoolCreate()</a> call.</p>
</dd>
<dt>dbName_len (IN)</dt>
<dd>
<p>The length of <code>dbName</code>. For session pooling and connection pooling, this value is returned by the call to <a href="#i563356">OCISessionPoolCreate()</a> or <a href="#i556060">OCIConnectionPoolCreate()</a>, respectively.</p>
</dd>
<dt>tagInfo (IN)</dt>
<dd>
<p>This parameter is used only for session pooling.</p>
<p>This indicates the type of session that the user wants. If the user wants a default session, the user must set this to <code>NULL</code>. See the Comments for a detailed explanation of this parameter.</p>
</dd>
<dt>tagInfo_len (IN)</dt>
<dd>
<p>The length, in bytes, of <code>tagInfo</code>. Used for session pooling only.</p>
</dd>
<dt>retTagInfo (OUT)</dt>
<dd>
<p>This parameter is used only for session pooling. This indicates the type of session that is returned to the user. See the Comments for a detailed explanation of this parameter.</p>
</dd>
<dt>retTagInfo_len (OUT)</dt>
<dd>
<p>The length, in bytes, of <code>retTagInfo</code>. Used for session pooling only.</p>
</dd>
<dt>found (OUT)</dt>
<dd>
<p>This parameter is used only for session pooling. If the type of session that the user requested was returned (that is, the value of <code>tagInfo</code> and <code>retTagInfo</code> is the same), then <code>found</code> is set to <code>TRUE</code>. Otherwise, <code>found</code> is set to <code>FALSE</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code></p>
</li>
<li>
<p><code>OCI_SESSGET_CPOOL</code></p>
</li>
<li>
<p><code>OCI_SESSGET_SPOOL</code></p>
</li>
<li>
<p><code>OCI_SESSGET_CREDPROXY</code></p>
</li>
<li>
<p><code>OCI_SESSGET_CREDEXT</code> - Supported only for heterogeneous pools.</p>
</li>
<li>
<p><code>OCI_SESSGET_PURITY_NEW</code></p>
</li>
<li>
<p><code>OCI_SESSGET_PURITY_SELF</code></p>
</li>
<li>
<p><code>OCI_SESSGET_SPOOL_MATCHANY</code></p>
</li>
<li>
<p><code>OCI_SESSGET_STMTCACHE</code></p>
</li>
<li>
<p><code>OCI_SESSGET_SYSDBA</code></p>
</li>
</ul>
<p>In the default (nonpooling) case, the following modes are valid:</p>
<p><code>OCI_SESSGET_STMTCACHE</code> - Enables statement caching in the session.</p>
<p><code>OCI_SESSGET_CREDEXT</code> - Returns a session authenticated with external credentials.</p>
<p><code>OCI_SESSGET_SYSDBA</code> - Returns a session with <code>SYSDBA</code> privilege for either nonpooling or for session pooling.</p>
<p>For connection pooling, the following modes are valid:</p>
<p><code>OCI_SESSGET_CPOOL</code> - Must be set to use connection pooling.</p>
<p><code>OCI_SESSGET_STMTCACHE</code> - Enables statement caching in the session.</p>
<p><code>OCI_SESSGET_CREDPROXY</code> - Returns a proxy session. The user is given a session that is authenticated by the user name provided in the <code>OCISessionGet()</code> call, through the proxy credentials supplied in the <code>OCIConnectionPoolCreate(</code>) call.</p>
<p><code>OCI_SESSGET_CREDEXT</code> - Returns a session authenticated with external credentials.</p>
<p>For session pooling, the following modes are valid:</p>
<p><code>OCI_SESSGET_SPOOL</code> - Must be set to use session pooling.</p>
<p><code>OCI_SESSGET_SYSDBA</code> - Returns a session with <code>SYSDBA</code> privilege for either nonpooling or for session pooling.</p>
<p><code>OCI_SESSGET_CREDEXT</code> - Returns a session authenticated with external credentials.</p>
<p><code>OCI_SESSGET_CREDPROXY</code> - In this case, the user is given a session that is authenticated by the user name provided in the <code>OCISessionGet()</code> call, through the proxy credentials supplied in the <code>OCISessionPoolCreate()</code> call.</p>
<p><code>OCI_SESSGET_SPOOL_MATCHANY</code> - Refers to the tagging behavior. If this mode is set, then a session that has a different tag than what was asked for, may be returned. See the Comments section.</p>
<p>For database resident connection pooling (DRCP), the following modes are valid:</p>
<p><code>OCI_SESSGET_PURITY_SELF</code> - The application can use a session that has been used before. You can also specify application-specific tags.</p>
<p><code>OCI_SESSGET_PURITY_NEW</code> - The application requires a new session that is not tainted with any prior session state. This is the default.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2480"></a>Comments</p>
<p>The <a id="sthref2481"></a>tags provide a way for users to customize sessions in the pool. A client can get a default or untagged session from a pool, set certain attributes on the session (such as globalization settings), and return the session to the pool, labeling it with an appropriate tag in the <a href="#i563322">OCISessionRelease()</a> call.</p>
<p>The user, or some other user, can request a session with the same attributes, and can do so by providing the same tag in the <code>OCISessionGet()</code> call.</p>
<p>If a user asks for a session with tag 'A', and a matching session is not available, an appropriately authenticated untagged session (session with a <code>NULL</code> tag) is returned, if such a session is free. If even an untagged session is not free <span class="italic">and</span> <code>OCI_SESSGET_SPOOL_MATCHANY</code> has been specified, then an appropriately authenticated session with a different tag is returned. If <code>OCI_SESSGET_SPOOL_MATCHANY</code> is not set, then a session with a different tag is never returned.</p>
<p><a href="#CIHFAFAJ">Example 16-4</a> demonstrates the use of <code>OCI_ATTR_MODULE</code> with session pooling.</p>
<div id="LNOCI18337" class="example">
<p class="titleinexample"><a id="CIHFAFAJ"></a>Example 16-4 Using the OCI_ATTR_MODULE Attribute with OCI Session Pooling</p>
<pre>
Oratext *module = (Oratext*) "mymodule";
/* Allocate the pool handle */
 checkerr(errhp,OCIHandleAlloc(envhp,(void**)&amp;poolhp,
                             OCI_HTYPE_SPOOL,0,0));
 
 checkerr(errhp,OCISessionPoolCreate(envhp,
                             errhp,poolhp,&amp;poolname,&amp;pnamelen,
                             (oratext*)conn_str,
                             len,min,max,incr,0,0,0,0,OCI_DEFAULT));
 
 /* Allocate the auth handle for session get */
 checkerr(errhp, OCIHandleAlloc(envhp,
                 (void**)&amp;authp, OCI_HTYPE_AUTHINFO, 0,0));
 
 checkerr(errhp,OCIAttrSet(authp, OCI_HTYPE_AUTHINFO,
                  username, strlen((char*)username), OCI_ATTR_USERNAME,errhp);
 checkerr(errhp,OCIAttrSet(authp, OCI_HTYPE_AUTHINFO,
                  password, strlen((char*)password), OCI_ATTR_PASSWORD,
                  errhp));
 
 checkerr(errhp,OCISessionGet(envhp,errhp,
              &amp;svchp,authp,poolname, pnamelen,0,0,0,0,0,
              OCI_SESSGET_SPOOL));
 
/* Get the user handle from the service context handle */
checkerr(errhp, OCIAttrGet(svhcp, OCI_HTYPE_SVCCTX, &amp;usrhp_svc,
               0,OCI_ATTR_SESSION,errhp));
 
/* Set module name on the user handle that you obtained */
checkerr (errhp, OCIAttrSet(usrhp_svc, OCI_HTYPE_SESSION, module, 
               strlen((char*)module), OCI_ATTR_MODULE,errhp));
/* Make Database calls. */
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="BEIDIJBD"></a><a id="LNOCI18338"></a>Restrictions on Attributes Supported for OCI Session Pools</p>
<p>You can use the following pre-session-creation attributes with OCI session pools:</p>
<pre>
OCI_ATTR_EDITION
OCI_ATTR_DRIVER_NAME
OCI_ATTR_USERNAME,
OCI_ATTR_PASSWORD,
OCI_ATTR_CONNECTION_CLASS,
OCI_ATTR_PURITY
</pre>
<p>However, <code>OCI_ATTR_EDITION</code> and <code>OCI_ATTR_DRIVERNAME</code> can only be specified during <code>OCISessionPoolCreate()</code> by setting them on the <code>OCIAuthInfo</code> handle that is an attribute of <code>OCISPool</code> handle. They cannot be specified on the <code>OCIAuthInfo</code> handle passed into individual <code>OCISessionGet()</code> calls. This ensures that all sessions that are part of an OCI session pool have uniform values for these attributes.</p>
<p><a href="#CIHCEFJH">Example 16-5</a> shows how to use the <code>OCI_ATTR_EDITION</code> attribute with an OCI session pool.</p>
<div id="LNOCI18339" class="example">
<p class="titleinexample"><a id="CIHCEFJH"></a>Example 16-5 Using the OCI_ATTR_EDITION Attribute with OCI Session Pooling</p>
<pre>
/* allocate the auth handle to be set on the spool handle */
  checkerr(errhp, OCIHandleAlloc(envhp,(void**)&amp;authp_sp,
                  OCI_HTYPE_AUTHINFO, 0,0));
                  
  /* Set the edition on the auth handle */
 
  checkerr(errhp,OCIAttrSet(authp_sp, OCI_HTYPE_AUTHINFO, 
                   "Patch_Bug_12345", strlen("Patch_Bug_12345"), 
                  OCI_ATTR_EDITION,errhp));
 
/* Allocate the pool handle */
 checkerr(errhp,OCIHandleAlloc(envhp,(void**)&amp;poolhp,
                             OCI_HTYPE_SPOOL,0,0));
 
  /* Set the auth handle created above on the spool handle */
 checkerr(errhp,OCIAttrSet(poolhp, OCI_HTYPE_SPOOL,authp_sp,
                  0,OCI_ATTR_SPOOL_AUTH,errhp));
checkerr(errhp,OCISessionPoolCreate(envhp,
                             errhp,poolhp,&amp;poolname,&amp;pnamelen,
                             (oratext*)conn_str,
                             len,min,max,incr,0,0,0,0,OCI_DEFAULT));
 
  /* Allocate the auth handle for session get */
  checkerr(errhp, OCIHandleAlloc(envhp,
                 (void**)&amp;authp_sessget, OCI_HTYPE_AUTHINFO, 0,0));
 
  checkerr(errhp,OCIAttrSet(authp_sessget, OCI_HTYPE_AUTHINFO,
                  username, strlen((char*)username), OCI_ATTR_USERNAME,errhp);
  checkerr(errhp,OCIAttrSet(authp_sessget, OCI_HTYPE_AUTHINFO,
                  password, strlen((char*)password), OCI_ATTR_PASSWORD,
                  errhp));
 
  checkerr(errhp,OCISessionGet(envhp,errhp,
              &amp;svchp,authp_sessget,poolname, pnamelen,0,0,0,0,0,
              OCI_SESSGET_SPOOL));
</pre></div>
<!-- class="example" -->
<p>You can use all post-session-creation attributes with OCI session pool. However, as a session pool can age out sessions, reuse preexisting sessions in the pool, or re-create new sessions transparently, Oracle recommends that the application explicitly set any post-session-creation attributes that it needs after getting a session from a pool. This ensures that the application logic works irrespective of the specific session returned by the OCI session pool.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2482"></a>Related Functions</p>
<p><a href="#i563322">OCISessionRelease()</a>, <a href="#i563356">OCISessionPoolCreate()</a>, <a href="#i561765">OCISessionPoolDestroy()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17124" class="refsect2"><a id="i563356"></a>
<h2 class="refsect2"><a id="sthref2483"></a>OCISessionPoolCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2484"></a>Purpose</p>
<p>Initializes a session pool for use with OCI session pooling and database resident connection pooling (DRCP). It starts <code>sessMin</code> number of sessions and connections to the database. Before making this call, make a call to <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a> to allocate memory for the session pool handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2485"></a>Syntax</p>
<pre>
sword OCISessionPoolCreate ( OCIEnv           *envhp,
                             OCIError         *errhp, 
                             OCISPool         *spoolhp,
                             OraText          **poolName,
                             ub4              *poolNameLen,
                             const OraText    *connStr,
                             ub4              connStrLen,
                             ub4              sessMin, 
                             ub4              sessMax, 
                             ub4              sessIncr,
                             OraText          *userid,
                             ub4              useridLen,
                             OraText          *password,
                             ub4              passwordLen,
                             ub4              mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2486"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>A pointer to the environment handle in which the session pool is to be created.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>spoolhp (IN/OUT)</dt>
<dd>
<p>A pointer to the session pool handle that is initialized.</p>
</dd>
<dt>poolName (OUT)</dt>
<dd>
<p>The name of the session pool returned. It is unique across all session pools in an environment. This value must be passed to the <a href="#i563311">OCISessionGet()</a> call.</p>
</dd>
<dt>poolNameLen (OUT)</dt>
<dd>
<p>Length of <code>poolName</code> in bytes.</p>
</dd>
<dt>connStr (IN)</dt>
<dd>
<p>The TNS alias of the database to connect to.</p>
</dd>
<dt>connStrLen (IN)</dt>
<dd>
<p>The length of <code>connStr</code> in bytes.</p>
</dd>
<dt>sessMin (IN)</dt>
<dd>
<p>Specifies the minimum number of sessions in the session pool.</p>
<p>This number of sessions are started by <code>OCISessionPoolCreate()</code>. After the sessions are started, sessions are opened only when necessary.</p>
<p>This value is used when <code>mode</code> is set to <code>OCI_SPC_HOMOGENEOUS</code>. Otherwise, it is ignored.</p>
</dd>
<dt>sessMax (IN)</dt>
<dd>
<p>Specifies the maximum number of sessions that can be opened in the session pool. After this value is reached, no more sessions are opened. The valid values are 1 and higher.</p>
</dd>
<dt>sessIncr (IN)</dt>
<dd>
<p>Allows applications to set the next increment for sessions to be started if the current number of sessions is less than <code>sessMax</code>. The valid values are 0 and higher.</p>
<p><code>sessMin + sessIncr</code> cannot be more than <code>sessMax</code>.</p>
</dd>
<dt>userid (IN)</dt>
<dd>
<p>Specifies the userid with which to start the sessions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i563837">"Authentication Note"</a></div>
</dd>
<dt>useridLen (IN)</dt>
<dd>
<p>Length of the userid in bytes.</p>
</dd>
<dt>password (IN)</dt>
<dd>
<p>The password for the corresponding userid.</p>
</dd>
<dt>passwordLen (IN)</dt>
<dd>
<p>The length of the password in bytes.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The modes supported are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code> - For a new session pool creation.</p>
</li>
<li>
<p><code>OCI_SPC_REINITIALIZE</code> - After creating a session pool, if you want to change the pool attributes dynamically (change the <code>sessMin</code>, <code>sessMax</code>, and <code>sessIncr</code> parameters), call <code>OCISessionPoolCreate()</code> with <code>mode</code> set to <code>OCI_SPC_REINITIALIZE</code>. When <code>mode</code> is set to <code>OCI_SPC_REINITIALIZE</code>, then <code>connStr</code>, <code>userid</code>, and <code>password</code> are ignored.</p>
</li>
<li>
<p><code>OCI_SPC_STMTCACHE</code> - An OCI statement cache is created for the session pool. If the pool is not created with OCI statement caching turned on, server-side statement caching is automatically used. Note that in general, client-side statement caching gives better performance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i471377">"Statement Caching in OCI"</a></div>
</li>
</ul>
<ul>
<li>
<p><code>OCI_SPC_HOMOGENEOUS</code> - All sessions in the pool are authenticated with the user name and password passed to <code>OCISessionPoolCreate()</code>. The authentication handle (parameter <code>authInfop</code>) passed into <a href="#i563311">OCISessionGet()</a> is ignored in this case. Moreover, the <code>sessMin</code> and the <code>SessIncr</code> values are considered only in this case. No proxy session can be created in this mode. This mode can be used in database resident connection pooling (DRCP).</p>
</li>
<li>
<p><code>OCI_SPC_NO_RLB</code> - By default, the runtime connection load balancing is enabled in the session pool if the client and the server are capable of supporting it. To turn it off, use the new mode, <code>OCI_SPC_NO_RLB</code> mode of <code>OCISessionPoolCreate()</code>. You can only use this mode at the time of pool creation. If this mode is passed for a pool that has been created, an error, ORA-24411, is thrown.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2487"></a>Comments</p>
<a id="i563837"></a>
<dl>
<dt>Authentication Note</dt>
<dd>
<p>A session pool can contain two types of connections to the database: direct connections and proxy connections. To make a proxy connection, a user must have Connect through Proxy privilege.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about proxy connections, see
<ul>
<li>
<p><a href="oci02bas.htm#CHDJDICD">"Client Access Through a Proxy"</a></p>
</li>
<li>
<p><a class="olink SQLRF53630" href="../../server.112/e41084/statements_4003.htm#SQLRF53630"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink CNCPT006" href="../../server.112/e40540/dist_pro.htm#CNCPT006"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
</ul>
</div>
<p>When the session pool is created, the <code>userid</code> and <code>password</code> may or may not be specified. If these values are <code>NULL</code>, no proxy connections can exist in this pool. If <code>mode</code> is set to <code>OCI_SPC_HOMOGENEOUS</code>, no proxy connection can exist.</p>
<p>A <code>userid</code> and <code>password</code> pair may also be specified through the authentication handle in the <a href="#i563311">OCISessionGet()</a> call. If this call is made with <code>mode</code> set to <code>OCI_SESSGET_CREDPROXY</code>, then the user is given a session that is authenticated by the <code>userid</code> provided in the <code>OCISessionGet()</code> call, through the proxy credentials supplied in the <code>OCISessionPoolCreate()</code> call. In this case, the password in the <code>OCISessionGet()</code> call is ignored.</p>
<p>If <a href="#i563311">OCISessionGet()</a> is called with <code>mode</code> <span class="italic">not</span> set to <code>OCI_SESSGET_CREDPROXY</code>, then the user gets a direct session that is authenticated by the credentials provided in the <code>OCISessionGet()</code> call. If none have been provided in this call, the user gets a session authenticated by the credentials in the <code>OCISessionPoolCreate()</code> call.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2488"></a>Example</p>
<p><a href="#CIHCACCF">Example 16-6</a> shows how to disable runtime load balancing.</p>
<div id="LNOCI18340" class="example">
<p class="titleinexample"><a id="CIHCACCF"></a>Example 16-6 Disabling Runtime Load Balancing</p>
<pre>
OCISessionPoolCreate(envhp, errhp, spoolhp, (OraText **)&amp;poolName, 
                     (ub4 *)&amp;poolNameLen,
                     database, (ub4) strlen ((const signed char *) database),
                     sessMin, sessMax, sessIncr, (OraText *) appusername,
                     (ub4) strlen ((const signed char *) appusername),
                     (OraText *) apppassword,
                     (ub4) strlen ((const signed char *) apppassword),
                     OCI_SPC_HOMOGENEOUS | OCI_SPC_NO_RLB);
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2489"></a>Related Functions</p>
<p><a href="#i563322">OCISessionRelease()</a>, <a href="#i563311">OCISessionGet()</a>, <a href="#i561765">OCISessionPoolDestroy()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17125" class="refsect2"><a id="i561765"></a>
<h2 class="refsect2"><a id="sthref2490"></a>OCISessionPoolDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2491"></a>Purpose</p>
<p>Destroys a session pool.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2492"></a>Syntax</p>
<pre>
sword OCISessionPoolDestroy ( OCISPool     *spoolhp, 
                              OCIError     *errhp,
                              ub4          mode );
</pre></div>
<!-- class="refsubsect" -->
<dl>
<dt>spoolhp (IN/OUT)</dt>
<dd>
<p>The session pool handle for the session pool to be destroyed.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <code>OCIErrorGet()</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Currently, <code>OCISessionPoolDestroy()</code> supports modes <code>OCI_DEFAULT</code> and <code>OCI_SPD_FORCE</code>.</p>
<p>If this call is made with <code>mode</code> set to <code>OCI_SPD_FORCE</code>, and there are active sessions in the pool, the sessions are closed and the pool is destroyed. However, if this mode is not set, and there are busy sessions in the pool, an error is returned.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2493"></a>Related Functions</p>
<p><a href="#i563356">OCISessionPoolCreate()</a>, <a href="#i563322">OCISessionRelease()</a>, <a href="#i563311">OCISessionGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17126" class="refsect2"><a id="i563322"></a>
<h2 class="refsect2"><a id="sthref2494"></a>OCISessionRelease()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2495"></a>Purpose</p>
<p>Releases a session that was retrieved using <a href="#i563311">OCISessionGet()</a>. The exact behavior of this call is determined by the <code>mode</code> in which the corresponding <code>OCISessionGet()</code> function was called. In the default case, it closes the session or connection. For connection pooling, it closes the session and returns the connection to the pool. For session pooling, it returns the session or connection pair to the pool, and any pending transaction is committed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2496"></a>Syntax</p>
<pre>
sword OCISessionRelease ( OCISvcCtx       *svchp,
                          OCIError        *errhp,
                          OraText         *tag,
                          ub4             tag_len,
                          ub4             mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2497"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context that was populated during the corresponding <a href="#i563311">OCISessionGet()</a> call.</p>
<p>In the default case, the session and connection associated with this handle is closed.</p>
<p>In the connection pooling case, the session is closed and the connection released to the pool.</p>
<p>For session pooling, the session or connection pair associated with this service context is released to the pool.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle.</p>
</dd>
<dt>tag (IN)</dt>
<dd>
<p>This parameter is used only for session pooling.</p>
<p>This parameter is ignored unless mode <a id="sthref2498"></a><a id="sthref2499"></a><code>OCI_SESSRLS_RETAG</code> is specified. In this case, the session is labeled with this tag and returned to the pool. If this is <code>NULL</code>, then the session is not tagged.</p>
</dd>
<dt>tag_len (IN)</dt>
<dd>
<p>This parameter is used only for session pooling.</p>
<p>Length of the tag. This is ignored unless mode <code>OCI_SESSRLS_RETAG</code> is set.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The supported modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code></p>
</li>
<li>
<p><code>OCI_SESSRLS_DROPSESS</code></p>
</li>
<li>
<p><code>OCI_SESSRLS_RETAG</code></p>
</li>
</ul>
<p>You can only use <code>OCI_DEFAULT</code> for the default case and for connection pooling.</p>
<p><code>OCI_SESSRLS_DROPSESS</code> and <a id="sthref2500"></a><code>OCI_SESSRLS_RETAG</code> are only used for session pooling.</p>
<p>When <code>OCI_SESSRLS_DROPSESS</code> is specified, the session is removed from the session pool.</p>
<p>The tag on the session is altered if and only if <code>OCI_SESSRLS_RETAG</code> is set. If this mode is not set, the <code>tag</code> and <code>tag_len</code> parameters are ignored.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2501"></a>Comments</p>
<p>Be careful to pass in the correct tag when using the <code>tag</code> parameter. If a default session is requested and the user sets certain properties on this session (probably through an <code>ALTER SESSION</code> command), then the user must label this session appropriately by tagging it as such.</p>
<p>If, however, the user requested a tagged session and got one, and has changed the properties on the session, then the user must pass in a different tag if appropriate.</p>
<p>For the correct working of the session pool layer, the application developer must be very careful to pass in the correct tag to the <code><a href="#i563311">OCISessionGet()</a></code> and <code>OCISessionRelease()</code> calls.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2502"></a>Related Functions</p>
<p><a href="#i563311">OCISessionGet()</a>, <a href="#i563356">OCISessionPoolCreate()</a>, <a href="#i561765">OCISessionPoolDestroy()</a>, <a href="#i558312">OCILogon2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17127" class="refsect2"><a id="i562956"></a>
<h2 class="refsect2">OCITerminate()<a id="sthref2503"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2504"></a>Purpose</p>
<p>Detaches the process from the shared memory subsystem and releases the shared memory.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2505"></a>Syntax</p>
<pre>
sword OCITerminate ( ub4    mode);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2506"></a>Parameters</p>
<dl>
<dt>mode (IN)</dt>
<dd>
<p>Call-specific mode. Valid value:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DEFAULT</code> - Executes the default call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2507"></a>Comments</p>
<p><code>OCITerminate()</code> should be called only once for each process and is the counterpart of the <a href="#i556149">OCIEnvCreate()</a>, <a href="#i562098">OCIEnvNlsCreate()</a>, deprecated <a href="ociaedep001.htm#i556330">OCIInitialize()</a> calls. The call tries to detach the process from the shared memory subsystem and shut it down. It also performs additional process cleanup operations. When two or more processes connecting to the same shared memory call <code>OCITerminate()</code> simultaneously, the fastest one releases the shared memory subsystem completely and the slower ones must terminate.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2508"></a>Related Functions</p>
<p><a href="ociaedep001.htm#i556330">OCIInitialize()</a>, <a href="#i556149">OCIEnvCreate()</a>, <a href="#i562098">OCIEnvNlsCreate()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci16rel.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci16rel002.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
