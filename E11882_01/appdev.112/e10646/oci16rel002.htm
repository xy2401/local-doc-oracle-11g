<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Handle and Descriptor Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci16rel001.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci16rel003.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/79</span> <!-- End Header --><a id="CIHIDEHB"></a>
<div id="LNOCI152" class="refsect1">
<h1 class="refsect1">Handle and Descriptor Functions<a id="sthref2509"></a><a id="sthref2510"></a></h1>
<p><a href="#CIHGGHDJ">Table 16-3</a> lists the OCI handle and descriptor functions that are described in this section.</p>
<div id="LNOCI17128" class="tblformalwide">
<p class="titleintable"><a id="sthref2511"></a><a id="CIHGGHDJ"></a>Table 16-3 Handle and Descriptor Functions &nbsp;</p>
<table class="cellalignment1011" title="Handle and Descriptor Functions &nbsp;" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t22">Function</th>
<th class="cellalignment1012" id="r1c2-t22">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t22" headers="r1c1-t22">
<p><a href="#i493114">"OCIArrayDescriptorAlloc()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t22 r1c2-t22">
<p>Allocate an array of descriptors</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t22" headers="r1c1-t22">
<p><a href="#CHDDJFFE">"OCIArrayDescriptorFree()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t22 r1c2-t22">
<p>Free an array of descriptors</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t22" headers="r1c1-t22">
<p><a href="#CHDHCHID">"OCIAttrGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t22 r1c2-t22">
<p>Get the value of an attribute of a handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t22" headers="r1c1-t22">
<p><a href="#i443804">"OCIAttrSet()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t22 r1c2-t22">
<p>Set the value of an attribute of a handle or descriptor</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t22" headers="r1c1-t22">
<p><a href="#i540763">"OCIDescriptorAlloc()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t22 r1c2-t22">
<p>Allocate and initialize a descriptor or LOB locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t22" headers="r1c1-t22">
<p><a href="#i540811">"OCIDescriptorFree()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t22 r1c2-t22">
<p>Free a previously allocated descriptor</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t22" headers="r1c1-t22">
<p><a href="#i540847">"OCIHandleAlloc()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t22 r1c2-t22">
<p>Allocate and initialize a handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t22" headers="r1c1-t22">
<p><a href="#i540911">"OCIHandleFree()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t22 r1c2-t22">
<p>Free a previously allocated handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t22" headers="r1c1-t22">
<p><a href="#i540956">"OCIParamGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t22 r1c2-t22">
<p>Get a parameter descriptor</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t22" headers="r1c1-t22">
<p><a href="#i541003">"OCIParamSet()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t22 r1c2-t22">
<p>Set parameter descriptor in COR handle</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI16100" class="refsect2"><a id="i493114"></a>
<h2 class="refsect2">OCIArrayDescriptorAlloc()<a id="sthref2512"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2513"></a>Purpose</p>
<p>Allocates an array of descriptors.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2514"></a>Syntax</p>
<pre>
sword OCIArrayDescriptorAlloc ( const  void   *parenth,
                                void          **descpp, 
                                const ub4     type,
                                ub4           array_size,
                                const size_t  xtramem_sz,
                                void          **usrmempp);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2515"></a>Parameters</p>
<dl>
<dt>parenth (IN)</dt>
<dd>
<p>An environment handle.</p>
</dd>
<dt>descpp (OUT)</dt>
<dd>
<p>Returns a pointer to a contiguous array of descriptors of the desired type.</p>
</dd>
<dt>type (IN)</dt>
<dd>
<p>Specifies the type of descriptor or LOB locator to be allocated. For a list of types, see <a href="#i540763">"OCIDescriptorAlloc()"</a>.</p>
</dd>
<dt>array_size (IN)</dt>
<dd>
<p>Specifies the number of descriptors to allocate. An error is thrown when the call cannot allocate the number of descriptors.</p>
</dd>
</dl>
<dl>
<dt><span class="bold">xtramem_sz</span> (IN)</dt>
<dd>
<p>Specifies an amount of user memory to be allocated for use by the application for the lifetime of the descriptors.</p>
</dd>
<dt><span class="bold">usrmempp</span> (OUT)</dt>
<dd>
<p>Returns a pointer to the user memory of size <code>xtramem_sz</code> allocated by the call for the user for the lifetime of the descriptors.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2516"></a>Comments</p>
<p>This call returns <code>OCI_SUCCESS</code> if successful, or a suitable error if an out-of-memory condition occurs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i463458">"User Memory Allocation"</a> for more information about the <code>xtramem_sz</code> parameter and user memory allocation</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2517"></a>Example</p>
<p><a href="#CIHHDFEA">Example 16-7</a> can be modified to allocate a large number of descriptors.</p>
<div id="LNOCI18341" class="example">
<p class="titleinexample"><a id="CIHHDFEA"></a>Example 16-7 Allocating a Large Number of Descriptors</p>
<pre>
OCIDateTime *descpp1[500];
...
for (i = 0; i!=500; i++)
{
     /* Allocate descriptors */
OCIDescriptorAlloc((void  *)envhp,(void  **)&amp;descpp1[i], OCI_DTYPE_TIMESTAMP_TZ,
                   0,(void  **)0);
}
...
</pre></div>
<!-- class="example" -->
<p>The for loop in <a href="#CIHHDFEA">Example 16-7</a> can now be replaced with a single call, as shown in <a href="#CIHCFBIJ">Example 16-8</a>.</p>
<div id="LNOCI18342" class="example">
<p class="titleinexample"><a id="CIHCFBIJ"></a>Example 16-8 Allocating an Array of Descriptors</p>
<pre>
OCIArrayDescriptorAlloc((void *)envhp,(void **)&amp;descpp1,
                        OCI_DTYPE_TIMESTAMP_TZ, 500, 0, (void **)0);
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2518"></a>Related Functions</p>
<p><a href="#i540763">OCIDescriptorAlloc()</a>, <a href="#CHDDJFFE">OCIArrayDescriptorFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17129" class="refsect2"><a id="CHDDJFFE"></a>
<h2 class="refsect2"><a id="sthref2519"></a>OCIArrayDescriptorFree()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2520"></a>Purpose</p>
<p>Free a previously allocated array of descriptors.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2521"></a>Syntax</p>
<pre>
sword OCIArrayDescriptorFree ( void       **descp,
                               const ub4  type );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2522"></a>Parameters</p>
<dl>
<dt><span class="bold">descp</span> (IN)</dt>
<dd>
<p>Pointer to an array of allocated descriptors.</p>
</dd>
<dt><span class="bold">type</span> (IN)</dt>
<dd>
<p>Specifies the type of storage to be freed. See the types listed in <a href="#i540763">"OCIDescriptorAlloc()"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2523"></a>Comments</p>
<p>An error is returned when a descriptor is allocated using <a href="#i540763">OCIDescriptorAlloc()</a>, but freed using <a href="#CHDDJFFE">OCIArrayDescriptorFree()</a>.</p>
<p>Descriptors allocated using <code>OCIArrayDescriptorAlloc()</code> must be freed using <code>OCIArrayDescriptorFree()</code>. You must be careful to free the entire array at once: pass in the pointer <code>descpp</code> returned by <code>OCIArrayDescriptorAlloc()</code> to <code>OCIArrayDescriptorFree()</code> appropriately. Otherwise, there can be memory leaks.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2524"></a>Related Functions</p>
<p><a href="#i493114">OCIArrayDescriptorAlloc()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17130" class="refsect2"><a id="CHDHCHID"></a>
<h2 class="refsect2">OCIAttrGet()<a id="sthref2525"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2526"></a>Purpose</p>
<p>Gets the value of an attribute of a handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2527"></a>Syntax</p>
<pre>
sword OCIAttrGet ( const void     *trgthndlp,
                   ub4            trghndltyp,
                   void           *attributep,
                   ub4            *sizep,
                   ub4            attrtype,
                   OCIError       *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2528"></a>Parameters</p>
<dl>
<dt><span class="bold">trgthndlp</span> (IN)</dt>
<dd>
<p>Pointer to a handle type. The actual handle can be a statement handle, a session handle, and so on. When this call is used to get encoding, users are allowed to check against either an environment or statement handle.</p>
</dd>
<dt><span class="bold">trghndltyp</span> (IN)</dt>
<dd>
<p>The handle type. Valid types are:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2529"></a><code>OCI_DTYPE_PARAM</code>, for a parameter descriptor</p>
</li>
<li>
<p><a id="sthref2530"></a><code>OCI_HTYPE_STMT</code>, for a statement handle</p>
</li>
<li>
<p>Any handle type in <a href="oci02bas.htm#g466063">Table 2-1</a> or any descriptor in <a href="oci02bas.htm#g466207">Table 2-2</a>.</p>
</li>
</ul>
<dl>
<dt><span class="bold">attributep</span> (OUT)</dt>
<dd>
<p>Pointer to the storage for an attribute value. Is in the encoding specified by the <code>charset</code> parameter of a previous call to <code>OCIEnvNlsCreate()</code>.</p>
</dd>
<dt><span class="bold">sizep</span> (OUT)</dt>
<dd>
<p>The size of the attribute value, always in bytes because <code>attributep</code> is a <code>void</code> pointer. This can be passed as <code>NULL</code> for most attributes because the sizes of non-string attributes are already known by the OCI library. For <code>text*</code> parameters, a pointer to a <code>ub4</code> must be passed in to get the length of the string.</p>
</dd>
<dt><span class="bold">attrtype</span> (IN)</dt>
<dd>
<p>The type of attribute being retrieved. The handle types and their readable attributes are listed in <a href="ociaahan.htm#i442199">Appendix A</a>.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2531"></a>Comments</p>
<p>This call is used to get a particular attribute of a handle. <a id="sthref2532"></a><code>OCI_DTYPE_PARAM</code> is used to do implicit and explicit describes. The parameter descriptor is also used in direct path loading. For implicit describes, the parameter descriptor has the column description for each select list. For explicit describes, the parameter descriptor has the describe information for each schema object that you are trying to describe. If the top-level parameter descriptor has an attribute that is itself a descriptor, use <a id="sthref2533"></a><code>OCI_ATTR_PARAM</code> as the attribute type in the subsequent call to <code>OCIAttrGet()</code> to get the Unicode information in an environment or statement handle.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci06des.htm#i448540">"Examples Using OCIDescribeAny()"</a> and <a href="oci04sql.htm#i441217">"Describing Select-List Items"</a></div>
<p>A function closely related to <code>OCIAttrGet()</code> is <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>, which is a generic describe call that describes existing schema objects: tables, views, synonyms, procedures, functions, packages, sequences, and types. As a result of this call, the describe handle is populated with the object-specific attributes that can be obtained through an <code>OCIAttrGet()</code> call.</p>
<p>Then an <a href="#i540956">OCIParamGet()</a> call on the describe handle returns a parameter descriptor for a specified position. Parameter positions begin with 1. Calling <code>OCIAttrGet()</code> on the parameter descriptor returns the specific attributes of a stored procedure or function parameter or a table column descriptor. These subsequent calls do not need an extra round-trip to the server because the entire schema object description is cached on the client side by <a href="oci16rel003.htm#i455723">OCIDescribeAny()</a>. Calling <code>OCIAttrGet()</code> on the describe handle can also return the total number of positions.</p>
<p>In <code>UTF-16</code> mode, particularly when executing a loop, try to reuse the same pointer variable corresponding to an attribute and copy the contents to local variables after <code>OCIAttrGet()</code> is called. If multiple pointers are used for the same attribute, a memory leak can occur.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2534"></a>Related Functions</p>
<p><a href="#i443804">OCIAttrSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17131" class="refsect2"><a id="i443804"></a>
<h2 class="refsect2">OCIAttrSet()<a id="sthref2535"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2536"></a>Purpose</p>
<p>Sets the value of an attribute of a handle or a descriptor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2537"></a>Syntax</p>
<pre>
sword OCIAttrSet ( void        *trgthndlp,
                   ub4         trghndltyp,
                   void        *attributep,
                   ub4         size,
                   ub4         attrtype,
                   OCIError    *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2538"></a>Parameters</p>
<dl>
<dt><span class="bold">trgthndlp</span> (IN/OUT)</dt>
<dd>
<p>Pointer to a handle whose attribute gets modified.</p>
</dd>
<dt><span class="bold">trghndltyp</span> (IN/OUT)</dt>
<dd>
<p>The handle type.</p>
</dd>
<dt><span class="bold">attributep</span> (IN)</dt>
<dd>
<p>Pointer to an attribute value. The attribute value is copied into the target handle. If the attribute value is a pointer, then only the pointer is copied, not the contents of the pointer. String attributes must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>.</p>
</dd>
<dt><span class="bold">size</span> (IN)</dt>
<dd>
<p>The size of an attribute value. This can be passed in as 0 for most attributes, as the size is already known by the OCI library. For <code>text*</code> attributes, a <code>ub4</code> must be passed in set to the length of the string in bytes, regardless of encoding.</p>
</dd>
<dt><span class="bold">attrtype</span> (IN)</dt>
<dd>
<p>The type of attribute being set.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2539"></a>Comments</p>
<p>See <a href="ociaahan.htm#i442199">Appendix A</a> for a list of handle types and their writable attributes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2540"></a>Related Functions</p>
<p><a href="#i493114">OCIArrayDescriptorAlloc()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17132" class="refsect2"><a id="i540763"></a>
<h2 class="refsect2">OCIDescriptorAlloc()<a id="sthref2541"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2542"></a>Purpose</p>
<p>Allocates storage to hold descriptors or LOB locators.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2543"></a>Syntax</p>
<pre>
sword OCIDescriptorAlloc ( const void    *parenth,
                           void          **descpp, 
                           ub4           type,
                           size_t        xtramem_sz,
                           void          **usrmempp);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2544"></a>Parameters</p>
<dl>
<dt>parenth (IN)</dt>
<dd>
<p>An environment handle.</p>
</dd>
<dt>descpp (OUT)</dt>
<dd>
<p>Returns a descriptor or LOB locator of the desired type.</p>
</dd>
<dt>type (IN)</dt>
<dd>
<p>Specifies the type of descriptor or LOB locator to be allocated:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DTYPE_SNAP</code> - Specifies generation of snapshot descriptor of C type <code>OCISnapshot</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_LOB</code> - Specifies generation of a LOB value type locator (for a <code>BLOB</code> or <code>CLOB</code>) of C type <code>OCILobLocator</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_FILE</code> - Specifies generation of a FILE value type locator of C type <code>OCILobLocator</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_ROWID</code> - Specifies generation of a <code>ROWID</code> descriptor of C type <code>OCIRowid</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_DATE</code> - Specifies generation of an <code>ANSI</code> <code>DATE</code> descriptor of C type <code>OCIDateTime</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_PARAM</code> - Specifies generation of a read-only parameter descriptor of C type <code>OCIParam</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_TIMESTAMP</code> - Specifies generation of a <code>TIMESTAMP</code> descriptor of C type <code>OCIDateTime</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_TIMESTAMP_TZ</code> - Specifies generation of a <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> descriptor of C type <code>OCIDateTime</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_TIMESTAMP_LTZ</code> - Specifies generation of a <code>TIMESTAMP</code> <code>WITH</code> <code>LOCAL</code> <code>TIME</code> <code>ZONE</code> descriptor of C type <code>OCIDateTime</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_INTERVAL_YM</code> - Specifies generation of an <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> descriptor of C type <code>OCIInterval</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_INTERVAL_DS</code> - Specifies generation of an <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> descriptor of C type <code>OCIInterval</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_COMPLEXOBJECTCOMP</code> - Specifies generation of a complex object retrieval descriptor of C type <code>OCIComplexObjectComp</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQENQ_OPTIONS</code> - Specifies generation of an Advanced Queuing enqueue options descriptor of C type <code>OCIAQEnqOptions</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQDEQ_OPTIONS</code> - Specifies generation of an Advanced Queuing dequeue options descriptor of C type <code>OCIAQDeqOptions</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQMSG_PROPERTIES</code> - Specifies generation of an Advanced Queuing message properties descriptor of C type <code>OCIAQMsgProperties</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQAGENT</code> - Specifies generation of an Advanced Queuing agent descriptor of C type <code>OCIAQAgent</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQNFY</code> - Specifies generation of an Advanced Queuing notification descriptor of C type <code>OCIAQNotify</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQLIS_OPTIONS</code> - Specifies generation of an Advanced Queuing listen descriptor of C type <code>OCIAQListenOpts</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_AQLIS_MSG_PROPERTIES</code> - Specifies generation of an Advanced Queuing message properties descriptor of C type <code>OCIAQLisMsgProps</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_SRVDN</code> - Specifies generation of a Distinguished Names descriptor of C type <code>OCIServerDNs</code>.</p>
</li>
<li>
<p><code>OCI_DTYPE_UCB</code> - Specifies generation of a user callback descriptor of C type <code>OCIUcb</code>.</p>
</li>
</ul>
<dl>
<dt><span class="bold">xtramem_sz</span> (IN)</dt>
<dd>
<p>Specifies an amount of user memory to be allocated for use by the application for the lifetime of the descriptor.</p>
</dd>
<dt><span class="bold">usrmempp</span> (OUT)</dt>
<dd>
<p>Returns a pointer to the user memory of size <code>xtramem_sz</code> allocated by the call for the user for the lifetime of the descriptor.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2545"></a>Comments</p>
<p>Returns a pointer to an allocated and initialized descriptor, corresponding to the type specified in <code>type</code>. A non-<code>NULL</code> descriptor or LOB locator is returned on success. No diagnostics are available on error.</p>
<p>This call returns <code>OCI_SUCCESS</code> if successful, or <code>OCI_INVALID_HANDLE</code> if an out-of-memory error occurs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i463458">"User Memory Allocation"</a> for more information about the <code>xtramem_sz</code> parameter and user memory allocation</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2546"></a>Related Functions</p>
<p><a href="#i540811">OCIDescriptorFree()</a>, <a href="#i493114">OCIArrayDescriptorAlloc()</a>, <a href="#CHDDJFFE">OCIArrayDescriptorFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17133" class="refsect2"><a id="i540811"></a>
<h2 class="refsect2"><a id="sthref2547"></a>OCIDescriptorFree()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2548"></a>Purpose</p>
<p>Deallocates a previously allocated descriptor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2549"></a>Syntax</p>
<pre>
sword OCIDescriptorFree ( void     *descp,
                          ub4      type );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2550"></a>Parameters</p>
<dl>
<dt><span class="bold">descp</span> (IN)</dt>
<dd>
<p>An allocated descriptor.</p>
</dd>
<dt><span class="bold">type</span> (IN)</dt>
<dd>
<p>Specifies the type of storage to be freed. See the types listed in <a href="#i540763">"OCIDescriptorAlloc()"</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2551"></a>Comments</p>
<p>This call frees storage associated with a descriptor. Returns <code>OCI_SUCCESS</code> or <code>OCI_INVALID_HANDLE</code>. All descriptors can be explicitly deallocated; however, OCI deallocates a descriptor if the environment handle is deallocated.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2552"></a>Related Functions</p>
<p><a href="#i540763">OCIDescriptorAlloc()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17134" class="refsect2"><a id="i540847"></a>
<h2 class="refsect2">OCIHandleAlloc()<a id="sthref2553"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2554"></a>Purpose</p>
<p>Returns a pointer to an allocated and initialized handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2555"></a>Syntax</p>
<pre>
sword OCIHandleAlloc ( const void    *parenth,
                       void          **hndlpp, 
                       ub4           type, 
                       size_t        xtramem_sz,
                       void          **usrmempp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2556"></a>Parameters</p>
<dl>
<dt><span class="bold">parenth</span> (IN)</dt>
<dd>
<p>An environment handle.</p>
</dd>
<dt><span class="bold">hndlpp</span> (OUT)</dt>
<dd>
<p>Returns a handle.</p>
</dd>
<dt><span class="bold">type</span> (IN)</dt>
<dd>
<p>Specifies the type of handle to be allocated. The allowed handles are described in <a href="oci02bas.htm#g466063">Table 2-1</a>.</p>
</dd>
</dl>
<dl>
<dt><span class="bold">xtramem_sz</span> (IN)</dt>
<dd>
<p>Specifies an amount of user memory to be allocated.</p>
</dd>
<dt><span class="bold">usrmempp</span> (OUT)</dt>
<dd>
<p>Returns a pointer to the user memory of size <code>xtramem_sz</code> allocated by the call for the user.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2557"></a>Comments</p>
<p>Returns a pointer to an allocated and initialized handle, corresponding to the type specified in <code>type</code>. A non-<code>NULL</code> handle is returned on success. All handles are allocated with respect to an environment handle that is passed in as a parent handle.</p>
<p>No diagnostics are available on error. This call returns <code>OCI_SUCCESS</code> if successful, or <code>OCI_INVALID_HANDLE</code> if an error occurs.</p>
<p>Handles must be allocated using <code>OCIHandleAlloc()</code> before they can be passed into an OCI call.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i463458">"User Memory Allocation"</a> for more information about using the <code>xtramem_sz</code> parameter for user memory allocation</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2558"></a>Related Functions</p>
<p><a href="#i540911">OCIHandleFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17135" class="refsect2"><a id="i540911"></a>
<h2 class="refsect2">OCIHandleFree()<a id="sthref2559"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2560"></a>Purpose</p>
<p>This call explicitly deallocates a handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2561"></a>Syntax</p>
<pre>
sword OCIHandleFree ( void      *hndlp,
                      ub4       type );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2562"></a>Parameters</p>
<dl>
<dt><span class="bold">hndlp</span> (IN)</dt>
<dd>
<p>A handle allocated by <a href="#i540847">OCIHandleAlloc()</a>.</p>
</dd>
<dt><span class="bold">type</span> (IN)</dt>
<dd>
<p>Specifies the type of storage to be freed. The handles are described in <a href="oci02bas.htm#g466063">Table 2-1</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2563"></a>Comments</p>
<p>This call frees up storage associated with a handle, corresponding to the type specified in the <code>type</code> parameter.</p>
<p>This call returns either <code>OCI_SUCCESS</code>, <code>OCI_INVALID_HANDLE</code>, or <code>OCI_ERROR</code>.</p>
<p>All handles may be explicitly deallocated. The OCI deallocates a child handle if the parent is deallocated.</p>
<p>When a statement handle is freed, the cursor associated with the statement handle is closed, but the actual cursor closing may be deferred to the next round-trip to the server. If the application must close the cursor immediately, you can make a server round-trip call, such as <a href="oci17msc007.htm#CHDEGCCB">OCIServerVersion()</a> or <a href="oci17msc007.htm#BABIFFIC">OCIPing()</a>, after the <code>OCIHandleFree()</code> call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2564"></a>Related Functions</p>
<p><a href="#i540847">OCIHandleAlloc()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17136" class="refsect2"><a id="i540956"></a>
<h2 class="refsect2">OCIParamGet()<a id="sthref2565"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2566"></a>Purpose</p>
<p>Returns a descriptor of a parameter specified by position in the describe handle or statement handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2567"></a>Syntax</p>
<pre>
sword OCIParamGet ( const void        *hndlp,
                    ub4               htype,
                    OCIError          *errhp,
                    void              **parmdpp,
                    ub4               pos );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2568"></a>Parameters</p>
<dl>
<dt>hndlp (IN)</dt>
<dd>
<p>A statement handle or describe handle. The <code>OCIParamGet()</code> function returns a parameter descriptor for this handle.</p>
</dd>
<dt>htype (IN)</dt>
<dd>
<p>The type of the handle passed in the <code>hndlp</code> parameter. Valid types are:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2569"></a><code>OCI_DTYPE_PARAM</code>, for a parameter descriptor</p>
</li>
<li>
<p><a id="sthref2570"></a><code>OCI_HTYPE_COMPLEXOBJECT</code>, for a complex object retrieval handle</p>
</li>
<li>
<p><a id="sthref2571"></a><code>OCI_HTYPE_STMT</code>, for a statement handle</p>
</li>
</ul>
<dl>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>parmdpp (OUT)</dt>
<dd>
<p>A descriptor of the parameter at the position given in the <code>pos</code> parameter, of handle type <code>OCI_DTYPE_PARAM</code>.</p>
</dd>
<dt>pos (IN)</dt>
<dd>
<p>Position number in the statement handle or describe handle. A parameter descriptor is returned for this position.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>OCI_ERROR</code> is returned if there are no parameter descriptors for this position.</div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2572"></a>Comments</p>
<p>This call returns a descriptor of a parameter specified by position in the describe handle or statement handle. Parameter descriptors are always allocated internally by the OCI library. They can be freed using <a href="#i540811">OCIDescriptorFree()</a>. For example, if you fetch the same column metadata for every execution of a statement, then the program leaks memory unless you explicitly free the parameter descriptor between each call to <code>OCIParamGet()</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i442199">Appendix A</a> for more detailed information about parameter descriptor attributes</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2573"></a>Related Functions</p>
<p><a href="#i493114">OCIArrayDescriptorAlloc()</a>, <a href="#i443804">OCIAttrSet()</a>, <a href="#i541003">OCIParamSet()</a>, <a href="#i540811">OCIDescriptorFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17137" class="refsect2"><a id="i541003"></a>
<h2 class="refsect2">OCIParamSet()<a id="sthref2574"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2575"></a>Purpose</p>
<p>Sets a complex object retrieval (COR) descriptor into a COR handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2576"></a>Syntax</p>
<pre>
sword OCIParamSet ( void           *hndlp,
                    ub4            htype,
                    OCIError       *errhp,
                    const void     *dscp,
                    ub4            dtyp,
                    ub4            pos );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2577"></a>Parameters</p>
<dl>
<dt>hndlp (IN/OUT)</dt>
<dd>
<p>Handle pointer.</p>
</dd>
<dt>htype (IN)</dt>
<dd>
<p>Handle type.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>dscp (IN)</dt>
<dd>
<p>Complex object retrieval descriptor pointer.</p>
</dd>
<dt>dtyp (IN)</dt>
<dd>
<p>Descriptor type. The descriptor type for a COR descriptor is <code>OCI_DTYPE_COMPLEXOBJECTCOMP</code>.</p>
</dd>
<dt>pos (IN)</dt>
<dd>
<p>Position number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2578"></a>Comments</p>
<p>The COR handle must have been previously allocated using <a href="#i540847">OCIHandleAlloc()</a>, and the descriptor must have been previously allocated using <a href="#i540763">OCIDescriptorAlloc()</a>. Attributes of the descriptor are set using <a href="#i443804">OCIAttrSet()</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci11obj.htm#i440830">"Complex Object Retrieval"</a> for more information about complex object retrieval</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2579"></a>Related Functions</p>
<p><a href="#i540956">OCIParamGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci16rel001.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci16rel003.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
