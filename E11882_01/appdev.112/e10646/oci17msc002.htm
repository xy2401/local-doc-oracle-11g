<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>LOB Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:27Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci17msc001.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci17msc003.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/79</span> <!-- End Header --><a id="CIHEEEHI"></a>
<div id="LNOCI162" class="refsect1">
<h1 class="refsect1">LOB Functions<a id="sthref2716"></a></h1>
<p><a href="#CIHFBAAG">Table 17-2</a> lists the LOB functions that use the LOB locator that are described in this section. Use functions that end in "2" for all new applications.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
There is another way of accessing LOBs -- using the data interface for LOBs. You can bind or define character data for a <code>CLOB</code> column or <code>RAW</code> data for a <code>BLOB</code> column, as described in these locations:
<ul>
<li>
<p><a href="oci05bnd.htm#i440236">"Binding LOB Data"</a> for usage and examples for both <code>INSERT</code> and <code>UPDATE</code> statements</p>
</li>
<li>
<p><a href="oci05bnd.htm#i440237">"Defining LOB Data"</a> for usage and examples of <code>SELECT</code> statements</p>
</li>
<li>
<p><a href="oci07lob.htm#g452677">Chapter 7, "LOB and BFILE Operations"</a></p>
</li>
</ul>
</div>
<div id="LNOCI17171" class="tblformalwide">
<p class="titleintable"><a id="sthref2717"></a><a id="CIHFBAAG"></a>Table 17-2 LOB Functions&nbsp;</p>
<table class="cellalignment1011" title="LOB Functions&nbsp;" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t14">Function</th>
<th class="cellalignment1012" id="r1c2-t14">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t14" headers="r1c1-t14">
<p><a href="#i541721">"OCIDurationBegin()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t14 r1c2-t14">
<p>Start user duration for temporary LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t14" headers="r1c1-t14">
<p><a href="#i541163">"OCIDurationEnd()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t14 r1c2-t14">
<p>End user duration for temporary LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t14" headers="r1c1-t14">
<p><a href="#i428786">"OCILobAppend()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t14 r1c2-t14">
<p>Append one LOB to another</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t14" headers="r1c1-t14">
<p><a href="#BJFEJABB">"OCILobArrayRead()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t14 r1c2-t14">
<p>Read LOB data for multiple locators</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t14" headers="r1c1-t14">
<p><a href="#BJFFHCBB">"OCILobArrayWrite()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t14 r1c2-t14">
<p>Write LOB data for multiple locators</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t14" headers="r1c1-t14">
<p><a href="#i447732">"OCILobAssign()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t14 r1c2-t14">
<p>Assign one LOB locator to another</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t14" headers="r1c1-t14">
<p><a href="#i454946">"OCILobCharSetForm()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t14 r1c2-t14">
<p>Get character set form from LOB locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t14" headers="r1c1-t14">
<p><a href="#i447764">"OCILobCharSetId()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t14 r1c2-t14">
<p>Get character set ID from LOB locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t14" headers="r1c1-t14">
<p><a href="#i496459">"OCILobClose()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t14 r1c2-t14">
<p>Close a previously opened LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t14" headers="r1c1-t14">
<p><a href="#i578816">"OCILobCopy2()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t14 r1c2-t14">
<p>Copy all or part of one LOB to another. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t14" headers="r1c1-t14">
<p><a href="#i578103">"OCILobCreateTemporary()"</a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t14 r1c2-t14">
<p>Create a temporary LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t14" headers="r1c1-t14">
<p><a href="#i455613">"OCILobDisableBuffering()"</a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t14 r1c2-t14">
<p>Turn LOB buffering off</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t14" headers="r1c1-t14">
<p><a href="#i455643">"OCILobEnableBuffering()"</a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t14 r1c2-t14">
<p>Turn LOB buffering on</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t14" headers="r1c1-t14">
<p><a href="#i578657">"OCILobErase2()"</a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t14 r1c2-t14">
<p>Erase a portion of a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t14" headers="r1c1-t14">
<p><a href="#i445818">"OCILobFileClose()"</a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t14 r1c2-t14">
<p>Close a previously opened <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t14" headers="r1c1-t14">
<p><a href="#i451095">"OCILobFileCloseAll()"</a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t14 r1c2-t14">
<p>Close all previously opened files</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t14" headers="r1c1-t14">
<p><a href="#i453601">"OCILobFileExists()"</a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t14 r1c2-t14">
<p>Check if a file exists on the server</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t14" headers="r1c1-t14">
<p><a href="#i450554">"OCILobFileGetName()"</a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t14 r1c2-t14">
<p>Get directory object and file name from the LOB locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t14" headers="r1c1-t14">
<p><a href="#i452089">"OCILobFileIsOpen()"</a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t14 r1c2-t14">
<p>Check if file on server is open using this locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t14" headers="r1c1-t14">
<p><a href="#i450949">"OCILobFileOpen()"</a></p>
</td>
<td class="cellalignment1013" headers="r21c1-t14 r1c2-t14">
<p>Open a <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t14" headers="r1c1-t14">
<p><a href="#i450493">"OCILobFileSetName()"</a></p>
</td>
<td class="cellalignment1013" headers="r22c1-t14 r1c2-t14">
<p>Set directory object and file name in the LOB locator</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t14" headers="r1c1-t14">
<p><a href="#i455682">"OCILobFlushBuffer()"</a></p>
</td>
<td class="cellalignment1013" headers="r23c1-t14 r1c2-t14">
<p>Flush the LOB buffer</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t14" headers="r1c1-t14">
<p><a href="#i491299">"OCILobFreeTemporary()"</a></p>
</td>
<td class="cellalignment1013" headers="r24c1-t14 r1c2-t14">
<p>Free a temporary LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t14" headers="r1c1-t14">
<p><a href="#i493090">"OCILobGetChunkSize()"</a></p>
</td>
<td class="cellalignment1013" headers="r25c1-t14 r1c2-t14">
<p>Get the chunk size of a LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t14" headers="r1c1-t14">
<p><a href="#CHDEHBCD">"OCILobGetContentType()"</a></p>
</td>
<td class="cellalignment1013" headers="r26c1-t14 r1c2-t14">
<p>Retrieve the user-specified content type string (a file format identifier) for a SecureFile</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t14" headers="r1c1-t14">
<p><a href="#i578679">"OCILobGetLength2()"</a></p>
</td>
<td class="cellalignment1013" headers="r27c1-t14 r1c2-t14">
<p>Get length of a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t14" headers="r1c1-t14">
<p><a href="#CHDEAJAB">"OCILobGetOptions()"</a></p>
</td>
<td class="cellalignment1013" headers="r28c1-t14 r1c2-t14">
<p>Get option settings of a SecureFile</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t14" headers="r1c1-t14">
<p><a href="#i578858">"OCILobGetStorageLimit()"</a></p>
</td>
<td class="cellalignment1013" headers="r29c1-t14 r1c2-t14">
<p>Get the maximum length of an internal LOB (BLOB, CLOB, or NCLOB) in bytes</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r30c1-t14" headers="r1c1-t14">
<p><a href="#i450869">"OCILobIsEqual()"</a></p>
</td>
<td class="cellalignment1013" headers="r30c1-t14 r1c2-t14">
<p>Compare two LOB locators for Equality</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r31c1-t14" headers="r1c1-t14">
<p><a href="#i493110">"OCILobIsOpen()"</a></p>
</td>
<td class="cellalignment1013" headers="r31c1-t14 r1c2-t14">
<p>Check to see if a LOB is open</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r32c1-t14" headers="r1c1-t14">
<p><a href="#i491312">"OCILobIsTemporary()"</a></p>
</td>
<td class="cellalignment1013" headers="r32c1-t14 r1c2-t14">
<p>Determine if a given LOB is temporary</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r33c1-t14" headers="r1c1-t14">
<p><a href="#i578701">"OCILobLoadFromFile2()"</a></p>
</td>
<td class="cellalignment1013" headers="r33c1-t14 r1c2-t14">
<p>Load a LOB from a <code>BFILE</code>. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r34c1-t14" headers="r1c1-t14">
<p><a href="#i507395">"OCILobLocatorAssign()"</a></p>
</td>
<td class="cellalignment1013" headers="r34c1-t14 r1c2-t14">
<p>Assign one LOB locator to another</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r35c1-t14" headers="r1c1-t14">
<p><a href="#i451099">"OCILobLocatorIsInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r35c1-t14 r1c2-t14">
<p>Check to see if a LOB locator is initialized</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r36c1-t14" headers="r1c1-t14">
<p><a href="#i493100">"OCILobOpen()"</a></p>
</td>
<td class="cellalignment1013" headers="r36c1-t14 r1c2-t14">
<p>Open a LOB</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r37c1-t14" headers="r1c1-t14">
<p><a href="#i578721">"OCILobRead2()"</a></p>
</td>
<td class="cellalignment1013" headers="r37c1-t14 r1c2-t14">
<p>Read a portion of a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r38c1-t14" headers="r1c1-t14">
<p><a href="#CHDHHGIC">"OCILobSetContentType()"</a></p>
</td>
<td class="cellalignment1013" headers="r38c1-t14 r1c2-t14">
<p>Store the user-specified content type string of the SecureFile</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r39c1-t14" headers="r1c1-t14">
<p><a href="#CHDBDAAF">"OCILobSetOptions()"</a></p>
</td>
<td class="cellalignment1013" headers="r39c1-t14 r1c2-t14">
<p>Enable option settings for existing and newly created SecureFiles</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r40c1-t14" headers="r1c1-t14">
<p><a href="#i578743">"OCILobTrim2()"</a></p>
</td>
<td class="cellalignment1013" headers="r40c1-t14 r1c2-t14">
<p>Truncate a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r41c1-t14" headers="r1c1-t14">
<p><a href="#i578761">"OCILobWrite2()"</a></p>
</td>
<td class="cellalignment1013" headers="r41c1-t14 r1c2-t14">
<p>Write into a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r42c1-t14" headers="r1c1-t14">
<p><a href="#i578780">"OCILobWriteAppend2()"</a></p>
</td>
<td class="cellalignment1013" headers="r42c1-t14 r1c2-t14">
<p>Write data beginning at the end of a LOB. This function must be used for LOBs of size greater than 4 GB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>Note the following for parameters in the OCI LOB calls:<a id="sthref2718"></a><a id="sthref2719"></a><a id="sthref2720"></a><a id="sthref2721"></a></p>
<ul>
<li>
<p>For fixed-width client-side character sets, the offset and amount parameters are always in characters for <code>CLOB</code>s and <code>NCLOB</code>s, and in bytes for <code>BLOB</code>s and <code>BFILE</code>s.</p>
</li>
<li>
<p>For varying-width client-side character sets, these rules generally apply:</p>
<ul>
<li>
<p>Amount (<code>amtp</code>) parameter - When the amount parameter refers to the server-side LOB, the amount is in characters. When the amount parameter refers to the client-side buffer, the amount is in bytes.</p>
<p>For more information, see individual LOB calls, such as <a href="ociaedep003.htm#i555226">OCILobGetLength()</a> (deprecated), <a href="#i578679">OCILobGetLength2()</a>, <a href="ociaedep003.htm#i427817">OCILobRead()</a> (deprecated), <a href="#i578721">OCILobRead2()</a>, <a href="ociaedep003.htm#i427882">OCILobWrite()</a> (deprecated), and <a href="#i578761">OCILobWrite2()</a>.</p>
</li>
<li>
<p>Offset (<code>offset</code>) parameter - Regardless of whether the client-side character set is varying-width, the offset parameter is always in characters for <code>CLOB</code>s and <code>NCLOB</code>s and in bytes for <code>BLOB</code>s and <code>BFILE</code>s.</p>
</li>
</ul>
</li>
<li>
<p>For many of the LOB operations, regardless of the client-side character set, the amount parameter is in characters for <code>CLOB</code>s and <code>NCLOB</code>s. These LOB operations include <a href="#i578816">OCILobCopy2()</a>, <a href="#i578657">OCILobErase2()</a>, <a href="#i578679">OCILobGetLength2()</a>, <a href="#i578701">OCILobLoadFromFile2()</a>, and <a href="#i578743">OCILobTrim2()</a>. All these operations refer to the amount of LOB data on the server.</p>
</li>
</ul>
<p>A <span class="italic">streaming operation</span> means that the LOB is read or written in pieces. Streaming can be implemented using a polling mechanism or by registering a user-defined callback.</p>
<div id="LNOCI17172" class="refsect2"><a id="i541721"></a>
<h2 class="refsect2">OCIDurationBegin()<a id="sthref2722"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2723"></a>Purpose</p>
<p>Starts a user duration for a temporary LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2724"></a>Syntax</p>
<pre>
sword OCIDurationBegin ( OCIEnv              *env,
                         OCIError            *err,
                         const OCISvcCtx     *svc, 
                         OCIDuration         parent,
                         OCIDuration         *duration );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2725"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>Pass as a <code>NULL</code> pointer.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>svc (IN)</dt>
<dd>
<p>An OCI service context handle. Must be non-<code>NULL</code>.</p>
</dd>
<dt>parent (IN)</dt>
<dd>
<p>The duration number of the parent duration. It is one of these:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2726"></a><code>OCI_DURATION_STATEMENT</code></p>
</li>
<li>
<p><a id="sthref2727"></a><code>OCI_DURATION_SESSION</code></p>
</li>
</ul>
<dl>
<dt>duration (OUT)</dt>
<dd>
<p>An identifier unique to the newly created user duration.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2728"></a>Comments</p>
<p>This function starts a user duration. In release 8.1 or later, user durations can be used when creating temporary LOBs. A user can have multiple active user durations simultaneously. The user durations do not have to be nested. The <code>duration</code> parameter is used to return a number that uniquely identifies the duration created by this call.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444762">"Temporary LOB Durations"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2729"></a>Related Functions</p>
<p><a href="#i541163">OCIDurationEnd()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17173" class="refsect2"><a id="i541163"></a>
<h2 class="refsect2">OCIDurationEnd()<a id="sthref2730"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2731"></a>Purpose</p>
<p>Terminates a user duration for a temporary LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2732"></a>Syntax</p>
<pre>
sword OCIDurationEnd ( OCIEnv             *env, 
                       OCIError           *err, 
                       const OCISvcCtx    *svc,
                       OCIDuration        duration );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2733"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>Pass as a <code>NULL</code> pointer.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>svc (IN)</dt>
<dd>
<p>OCI service context. This should be passed as <code>NULL</code> for cartridge services.</p>
</dd>
<dt>duration (IN)</dt>
<dd>
<p>A number to identify the user duration.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2734"></a>Comments</p>
<p>This function terminates a user duration. Temporary LOBs that are allocated for the user duration are freed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444762">"Temporary LOB Durations"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2735"></a>Related Functions</p>
<p><a href="#i541721">OCIDurationBegin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17174" class="refsect2"><a id="i428786"></a>
<h2 class="refsect2">OCILobAppend()<a id="sthref2736"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2737"></a>Purpose</p>
<p>Appends a LOB value at the end of another LOB as specified.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2738"></a>Syntax</p>
<pre>
sword OCILobAppend ( OCISvcCtx        *svchp,
                     OCIError         *errhp,
                     OCILobLocator    *dst_locp,
                     OCILobLocator    *src_locp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2739"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">dst_locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the destination LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">src_locp</span> (IN)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the source LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2740"></a>Comments</p>
<p>Appends a LOB value at the end of another LOB as specified. The data is copied from the source to the end of the destination. The source and destination LOBs must exist. The destination LOB is extended to accommodate the newly written data. It is an error to extend the destination LOB beyond the maximum length allowed (4 Gigabytes (GB)) or to try to copy from a <code>NULL</code> LOB.</p>
<p>The source and the destination LOB locators must be of the same type (that is, they must both be <code>BLOB</code>s or both be <code>CLOB</code>s). LOB buffering must not be enabled for either type of locator. This function does not accept a <code>BFILE</code> locator as the source or the destination.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2741"></a>Related Functions</p>
<p><a href="ociaedep003.htm#i427862">OCILobTrim()</a> (deprecated), <a href="#i578743">OCILobTrim2()</a>, <a href="ociaedep003.htm#i427882">OCILobWrite()</a> (deprecated), <a href="#i578761">OCILobWrite2()</a>, <a href="ociaedep003.htm#CEGFJBBG">OCILobCopy()</a> (deprecated), <a href="#i578816">OCILobCopy2()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="ociaedep003.htm#i493080">OCILobWriteAppend()</a> (deprecated), <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17175" class="refsect2"><a id="BJFEJABB"></a>
<h2 class="refsect2"><a id="sthref2742"></a>OCILobArrayRead()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2743"></a>Purpose</p>
<p>Reads LOB data for multiple locators in one round-trip. This function can be used for LOBs of size greater than or less than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2744"></a>Syntax</p>
<pre>
sword OCILobArrayRead ( OCISvcCtx                *svchp,
                        OCIError                 *errhp,
                        ub4                      *array_iter,
                        OCILobLocator            **locp_arr,
                        oraub8                   *byte_amt_arr,
                        oraub8                   *char_amt_arr,
                        oraub8                   *offset_arr,
                        void                     **bufp_arr,
                        oraub8                   bufl_arr,
                        ub1                      piece,
                        void                     *ctxp, 
                        OCICallbackLobArrayRead  (cbfp)
                                        (
                                         void          *ctxp,
                                         ub4           array_iter,
                                         const void    *bufp,
                                         oraub8        lenp,
                                         ub1           piecep
                                         void          **changed_bufpp,
                                         oraub8        *changed_lenp
                                        )
                        ub2                      csid,
                        ub1                      csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2745"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">array_iter</span> (IN/OUT)</dt>
<dd>
<p>IN - This parameter indicates the size of the LOB locator array. For polling this is relevant only for the first call and is ignored in subsequent calls.</p>
<p>OUT - In polling mode, this parameter indicates the array index of the element read from.</p>
</dd>
<dt><span class="bold">locp_arr</span> (IN)</dt>
<dd>
<p>An array of LOB or <code>BFILE</code> locators.</p>
</dd>
<dt><span class="bold">byte_amt_arr</span> (IN/OUT)</dt>
<dd>
<p>An array of <code>oraub8</code> variables. The array size must be the same as the locator array size. The entries correspond to the amount in bytes for the locators.</p>
<p>IN - The number of bytes to read from the database. Used for <code>BLOB</code> and <code>BFILE</code> always. For <code>CLOB</code> and <code>NCLOB</code>, it is used only when the corresponding value in <code>char_amt_arr</code> is zero.</p>
<p>OUT - The number of bytes read into the user buffer.</p>
</dd>
<dt><span class="bold">char_amt_arr</span> (IN/OUT)</dt>
<dd>
<p>An array of <code>oraub8</code> variables. The array size must be the same as the locator array size. The entries correspond to the amount in characters for the locators.</p>
<p>IN - The maximum number of characters to read into the user buffer. Ignored for <code>BLOB</code> and <code>BFILE</code>.</p>
<p>OUT - The number of characters read into the user buffer. Undefined for <code>BLOB</code> and <code>BFILE</code>.</p>
</dd>
<dt><span class="bold">offset</span>_arr (IN)</dt>
<dd>
<p>An array of <code>oraub8</code> variables. The array size must be the same as the locator array size. For character LOBs (<code>CLOB</code>s, <code>NCLOB</code>s) it is the number of characters from the beginning of the LOB; for binary LOBs or <code>BFILE</code>s, it is the number of bytes. The first position is 1.</p>
</dd>
<dt><span class="bold">bufp</span> _arr (IN/OUT)</dt>
<dd>
<p>An array of pointers to buffers into which the piece is read. The array size must be the same as the locator array size.</p>
</dd>
<dt><span class="bold">bufl</span>_arr (IN)</dt>
<dd>
<p>An array of <code>oraub8</code> variables indicating the buffer lengths for the buffer array. The array size must be the same as the locator array size.</p>
</dd>
<dt>piece (IN)</dt>
<dd>
<p><code>OCI_ONE_PIECE</code> - The call never assumes polling. If the amount indicated is more than the buffer length, then the buffer is filled as much as possible.</p>
<p>For polling, pass <code>OCI_FIRST_PIECE</code> the first time and <code>OCI_NEXT_PIECE</code> in subsequent calls. <code>OCI_FIRST_PIECE</code> should be passed while using the callback.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context pointer for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece. If this is <code>NULL</code>, then <code>OCI_NEED_DATA</code> is returned for each piece.</p>
<p>The callback function must return <code>OCI_CONTINUE</code> for the read to continue. If any other error code is returned, the LOB read is terminated.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">array_iter</span> (IN)</dt>
<dd>
<p>The index of the element read from.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt><span class="bold">lenp</span> (IN)</dt>
<dd>
<p>The length in bytes of the current piece in <code>bufp</code>.</p>
</dd>
<dt><span class="bold">piecep</span> (IN)</dt>
<dd>
<p>Which piece: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>changed_bufpp (OUT)</dt>
<dd>
<p>The callback function can put the address of a new buffer if it prefers to use a new buffer for the next piece to read. The default old buffer <code>bufp</code> is used if this parameter is set to <code>NULL</code>.</p>
</dd>
<dt>changed_lenp (OUT)</dt>
<dd>
<p>Length of the new buffer, if provided.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<dl>
<dt><span class="bold">csid</span> (IN)</dt>
<dd>
<p>The character set ID of the buffer data. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>. It is never assumed to be the server character set, unless the server and client have the same settings.</p>
</dd>
<dt><span class="bold">csfrm (IN)</span></dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2746"></a><code>SQLCS_IMPLICIT</code> - database character set ID</p>
</li>
<li>
<p><code><a id="sthref2747"></a>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>. If <code>csfrm</code> is not specified, the default is assumed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2748"></a>Comments</p>
<p>It is an error to try to read from a <code>NULL</code> LOB or <code>BFILE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When reading or writing LOBs, the character set form (<code>csfrm</code>) specified should match the form of the locator itself.</div>
<p>For <code>BFILE</code>s, the operating system file must exist on the server, and it must have been opened by <a href="#i450949">OCILobFileOpen()</a> or <a href="#i493100">OCILobOpen()</a> using the input locator. The Oracle Database must have permission to read the operating system file, and the user must have read permission on the directory object.</p>
<p>When you use the polling mode for <code>OCILobArrayRead()</code>, the first call must specify values for <code>offset_arr</code> and <code>amt_arr</code>, but on subsequent polling calls to <code>OCILobArrayRead()</code>, you need not specify these values.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To terminate an <code>OCILobArrayRead()</code> operation and free the statement handle, use the <code>OCIBreak()</code> call.</div>
<p>The following points apply to reading LOB data in streaming mode:</p>
<ul>
<li>
<p>When you use polling mode, be sure to specify the <code>char_amt_arr</code> and <code>byte_amt_arr</code> and <code>offset_arr</code> parameters only in the first call to <code>OCILobArrayRead()</code>. On subsequent polling calls, these parameters are ignored. If both <code>byte_amt_arr</code> and <code>char_amt_arr</code> are set to point to zero and <code>OCI_FIRST_PIECE</code> is passed, then polling mode is assumed and data is read to the end of the LOB. On output, <code>byte_amt_arr</code> gives the number of bytes read in the current piece. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>char_amt_arr</code> gives the number of characters read in the current piece.</p>
</li>
<li>
<p>When you use callbacks, the <code>lenp</code> parameter, which is input to the callback, indicates how many bytes are filled in the buffer. Check the <code>lenp</code> parameter during your callback processing, because the entire buffer may not be filled with data.</p>
</li>
<li>
<p>When you use polling, examine the <code>byte_amt_arr</code> parameter to see how much the buffer is filled for the current piece. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>char_amt_arr</code> returns the number of characters read in the buffer as well.</p>
</li>
</ul>
<p>To read data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the c<code>sid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information on Unicode format</p>
</li>
<li>
<p><a class="olink ADLOB45827" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB45827"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2749"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i450493">OCILobFileSetName()</a>, <a href="#i578780">OCILobWriteAppend2()</a>, <a href="#BJFFHCBB">OCILobArrayWrite()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17176" class="refsect2"><a id="BJFFHCBB"></a>
<h2 class="refsect2"><a id="sthref2750"></a>OCILobArrayWrite()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2751"></a>Purpose</p>
<p>Writes LOB data for multiple locators in one round-trip. This function can be used for LOBs of size greater than or less than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2752"></a>Syntax</p>
<pre>
sword OCILobArrayWrite ( OCISvcCtx             *svchp,
                         OCIError              *errhp,
                         ub4                   *array_iter,
                         OCILobLocator         **locp_arr,
                         oraub8                *byte_amt_arr,
                         oraub8                *char_amt_arr,
                         oraub8                *offset_arr,
                         void                  **bufp_arr, 
                         oraub8                *bufl_arr,
                         ub1                   piece,
                         void                  *ctxp, 
                         OCICallbackLobArrayWrite (cbfp)
                                          (
                                            void     *ctxp,
                                            ub4      array_iter,
                                            void     *bufp,
                                            oraub8   *lenp,
                                            ub1      *piecep
                                            void     **changed_bufpp,
                                            oraub8   *changed_lenp
                                          ) 
                         ub2             csid,
                         ub1             csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2753"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">array_iter</span> (IN/OUT)</dt>
<dd>
<p>IN - This parameter indicates the size of the LOB locator array. For polling this is relevant only for the first call and is ignored in subsequent calls.</p>
<p>OUT - In polling mode this parameter indicates the array index of the element just written to.</p>
</dd>
<dt><span class="bold">locp_arr</span> (IN/OUT)</dt>
<dd>
<p>An array of LOB locators.</p>
</dd>
<dt><span class="bold">byte_amt</span>_arr (IN/OUT)</dt>
<dd>
<p>An array of pointers to <code>oraub8</code> variables. The array size must be the same as the locator array size. The entries correspond to the amount in bytes for the locators.</p>
<p>IN - The number of bytes to write to the database. Always used for <code>BLOB</code>. For <code>CLOB</code> and <code>NCLOB</code> it is used only when <code>char_amt_arr</code> is zero.</p>
<p>OUT - The number of bytes written to the database.</p>
</dd>
<dt>char_amt (IN/OUT)</dt>
<dd>
<p>An array of pointers to <code>oraub8</code> variables. The array size must be the same as the locator array size. The entries correspond to the amount in characters for the locators.</p>
<p>IN - The maximum number of characters to write to the database. Ignored for <code>BLOB</code>.</p>
<p>OUT - The number of characters written to the database. Undefined for <code>BLOB</code>.</p>
</dd>
<dt><span class="bold">offset</span>_arr (IN)</dt>
<dd>
<p>An array of pointers to <code>oraub8</code> variables. The array size must be the same as the locator array size. Each entry in the array is the absolute offset from the beginning of the LOB value. For character LOBs (<code>CLOB</code>s, <code>NCLOB</code>s), it is the number of characters from the beginning of the LOB; for <code>BLOB</code>s, it is the number of bytes. The first position is 1.</p>
</dd>
<dt><span class="bold">bufp_arr</span> (IN/OUT)</dt>
<dd>
<p>An array of pointers to buffers into which the pieces for the locators are written. The array size must be the same as the locator array size.</p>
</dd>
<dt><span class="bold">bufl_arr</span> (IN)</dt>
<dd>
<p>An array of <code>oraub8</code> variables indicating the buffer lengths for the buffer array. The array size must be the same as the locator array size.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This parameter assumes an 8-bit byte. If your operating system uses a longer byte, you must adjust the value of <code>bufl_arr</code> accordingly.</div>
</dd>
<dt><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code>OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece.</p>
<p>The following other values are also possible for piecewise or callback mode: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, and <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece. If this is <code>NULL</code>, then <code>OCI_NEED_DATA</code> is returned for each piece. The callback function must return <code>OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated.</p>
<p>The callback takes the following parameters:</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">array_iter</span> (IN)</dt>
<dd>
<p>The index of the element written to.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece. This is the same as the <code>bufp</code> passed as an input to the <code>OCILobArrayWrite()</code> routine.</p>
</dd>
<dt><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code>bufp</code> (OUT).</p>
</dd>
<dt><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code>OCI_NEXT_PIECE</code> or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>changed_bufpp (OUT)</dt>
<dd>
<p>The callback function can put the address of a new buffer if it prefers to use a new buffer for the next piece to read. The default old buffer <code>bufp</code> is used if this parameter is set to <code>NULL</code>.</p>
</dd>
<dt>changed_lenp (OUT)</dt>
<dd>
<p>Length of the new buffer, if provided.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The character set ID of the data in the buffer. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
<ul>
<li>
<p><a id="sthref2754"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><a id="sthref2755"></a><code>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2756"></a>Comments</p>
<p>If LOB data exists, it is overwritten with the data stored in the buffer. The buffers can be written to the LOBs in a single piece with this call, or the buffers can be provided piecewise using callbacks or a standard polling method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you read or write LOBs, specify a character set form (<code>csfrm</code>) that matches the form of the locator itself.
<p>The parameters <code>piece</code>, <code>csid</code>, and <code>csfrm</code> are the same for all locators of the array.</p>
</div>
<p>When you use the polling mode for <code>OCILobArrayWrite()</code>, the first call must specify values for <code>offset_arr</code>, <code>byte_amt_arr</code>, and <code>char_amt_arr</code>, but on subsequent polling calls to <code>OCILobArrayWrite()</code>, you need not specify these values.</p>
<p>If the value of the <code>piece</code> parameter is <code>OCI_FIRST_PIECE</code>, data may need to be provided through callbacks or polling.</p>
<p>If a callback function is defined in the <code>cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code>bufp_arr</code>. If no callback function is defined, then <code>OCILobArrayWrite()</code> returns the <code>OCI_NEED_DATA</code> error code. The application must call <code>OCILobArrayWrite()</code> again to write more pieces of the LOBs. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations.</p>
<p>A <code>piece</code> value of <code>OCI_LAST_PIECE</code> terminates the piecewise write, regardless of whether the polling or callback method is used.</p>
<p>If the amount of data passed to the database (through either input mechanism) is less than the amount specified by the <code>byte_amt_arr</code> or the <code>char_amt_arr</code> parameter, an ORA-22993 error is returned.</p>
<p>This function is valid for internal LOBs only. <code>BFILE</code>s are not valid, because they are read-only. If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<p>If both <code>byte_amt_arr</code> and <code>char_amt_arr</code> are set to point to zero amount and <code>OCI_FIRST_PIECE</code> is given as input, then polling mode is assumed and data is written until you specify <code>OCI_LAST_PIECE</code>. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>byte_amt_arr</code> and <code>char_amt_arr</code> return the data written by each piece in terms of number of bytes and number of characters respectively. For <code>BLOB</code>s, <code>byte_amt_arr</code> returns the number of bytes written by each piece, whereas <code>char_amt_arr</code> is undefined on output.</p>
<p><a id="sthref2757"></a>To write data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the <code>csid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information on Unicode format</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2758"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="ociaedep003.htm#CEGFJBBG">OCILobCopy()</a> (deprecated), <a href="#i578816">OCILobCopy2()</a>, <a href="#i578780">OCILobWriteAppend2()</a>, <a href="#BJFEJABB">OCILobArrayRead()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17177" class="refsect2"><a id="i447732"></a>
<h2 class="refsect2">OCILobAssign()<a id="sthref2759"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2760"></a>Purpose</p>
<p>Assigns one LOB or <code>BFILE</code> locator to another.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2761"></a>Syntax</p>
<pre>
sword OCILobAssign ( OCIEnv                *envhp, 
                     OCIError              *errhp, 
                     const OCILobLocator   *src_locp, 
                     OCILobLocator         **dst_locpp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2762"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>src_locp (IN)</dt>
<dd>
<p>LOB or <code>BFILE</code> locator to copy from.</p>
</dd>
<dt>dst_locpp (IN/OUT)</dt>
<dd>
<p>LOB or <code>BFILE</code> locator to copy to. The caller must have allocated space for the destination locator by calling <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2763"></a>Comments</p>
<p>Assign <span class="italic">source</span> locator to <span class="italic">destination</span> locator. After the assignment, both locators refer to the same LOB value. For internal LOBs, the source locator's LOB value gets copied to the <span class="italic">destination</span> locator's LOB value only when the <span class="italic">destination</span> locator gets stored in the table. Therefore, issuing a flush of the object containing the <span class="italic">destination</span> locator copies the LOB value.</p>
<p><code>OCILobAssign()</code> cannot be used for temporary LOBs; it generates an <code>OCI_INVALID_HANDLE</code> error. For temporary LOBs, use <a href="#i507395">OCILobLocatorAssign()</a>.</p>
<p>For <code>BFILE</code>s, only the locator that refers to the file is copied to the table. The operating system file itself is not copied.</p>
<p>It is an error to assign a <code>BFILE</code> locator to an internal LOB locator, and vice versa.</p>
<p>If the source locator is for an internal LOB that was enabled for buffering, and the source locator has been used to modify the LOB data through the LOB buffering subsystem, and the buffers have not been flushed since the write, then the source locator may not be assigned to the destination locator. This is because only one locator for each LOB can modify the LOB data through the LOB buffering subsystem.</p>
<p>The value of the input destination locator must have been allocated with a call to <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>. For example, assume the following declarations:</p>
<pre>
OCILobLocator     *source_loc = (OCILobLocator *) 0;
OCILobLocator     *dest_loc = (OCILobLocator *) 0;
</pre>
<p><a href="#CIHGEHBH">Example 17-1</a> shows how an application could allocate the <code>source_loc</code> locator.</p>
<div id="LNOCI18343" class="example">
<p class="titleinexample"><a id="CIHGEHBH"></a>Example 17-1 Allocating a source_loc Source Locator</p>
<pre>
if (OCIDescriptorAlloc((void  *) envhp, (void  **) &amp;source_loc,
    (ub4) OCI_DTYPE_LOB, (size_t) 0, (void  **) 0))
    handle_error;
</pre></div>
<!-- class="example" -->
<p>Assume that it then selects a LOB from a table into the <code>source_loc</code> to initialize it. The application must allocate the destination locator, <code>dest_loc</code>, before issuing the <code>OCILobAssign()</code> call to assign the value of <code>source_loc</code> to <code>dest_loc</code>, as shown shown in <a href="#CIHIFDAI">Example 17-2</a>.</p>
<div id="LNOCI18344" class="example">
<p class="titleinexample"><a id="CIHIFDAI"></a>Example 17-2 Allocating a dest_loc Destination Locator</p>
<pre>
if (OCIDescriptorAlloc((void  *) envhp, (void  **) &amp;dest_loc,
    (ub4)OCI_DTYPE_LOB, (size_t) 0, (void  **) 0))
    handle_error;
if (OCILobAssign(envhp, errhp, source_loc, &amp;dest_loc))
    handle_error
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2764"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i450869">OCILobIsEqual()</a>, <a href="#i507395">OCILobLocatorAssign()</a>, <a href="#i451099">OCILobLocatorIsInit()</a>, <a href="#i455643">OCILobEnableBuffering()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17178" class="refsect2"><a id="i454946"></a>
<h2 class="refsect2">OCILobCharSetForm()<a id="sthref2765"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2766"></a>Purpose</p>
<p>Gets the character set form of the LOB locator, if any.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2767"></a>Syntax</p>
<pre>
sword OCILobCharSetForm ( OCIEnv                *envhp, 
                          OCIError              *errhp, 
                          const OCILobLocator   *locp, 
                          ub1                   *csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2768"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>LOB locator for which to get the character set form.</p>
</dd>
<dt>csfrm (OUT)</dt>
<dd>
<p>Character set form of the input LOB locator. If the input locator, <code>locp,</code> is for a <code>BLOB</code> or a <code>BFILE</code>, <code>csfrm</code> is set to 0 because there is no concept of a character set for binary LOBs and <code>BFILE</code>s. The caller must allocate space for <code>csfrm</code> (a <code>ub1</code>).</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2769"></a><code>SQLCS_IMPLICIT</code> - Database character set ID, the default</p>
</li>
<li>
<p><a id="sthref2770"></a><code>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2771"></a>Comments</p>
<p>Returns the character set form of the input <code>CLOB</code> or <code>NCLOB</code> locator in the <code>csfrm</code> output parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2772"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i447764">OCILobCharSetId()</a>, <a href="#i451099">OCILobLocatorIsInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17179" class="refsect2"><a id="i447764"></a>
<h2 class="refsect2">OCILobCharSetId()<a id="sthref2773"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2774"></a>Purpose</p>
<p>Gets the LOB locator's database character set ID of the LOB locator, if any.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2775"></a>Syntax</p>
<pre>
sword OCILobCharSetId ( OCIEnv                  *envhp, 
                        OCIError                *errhp, 
                        const OCILobLocator     *locp, 
                        ub2                     *csid );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2776"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>LOB locator for which to get the character set ID.</p>
</dd>
<dt>csid (OUT)</dt>
<dd>
<p>Database character set ID of the input LOB locator. If the input locator is for a <code>BLOB</code> or a <code>BFILE</code>, <code>csid</code> is set to 0 because there is no concept of a character set for binary LOBs or binary files. The caller must allocate space for the <code>csid</code> <code>ub2</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2777"></a>Comments</p>
<p>Returns the character set ID of the input <code>CLOB</code> or <code>NCLOB</code> locator in the <code>csid</code> output parameter.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2778"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i454946">OCILobCharSetForm()</a>, <a href="#i451099">OCILobLocatorIsInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17180" class="refsect2"><a id="i496459"></a>
<h2 class="refsect2"><a id="sthref2779"></a>OCILobClose()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2780"></a>Purpose</p>
<p>Closes a previously opened LOB or <code>BFILE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2781"></a>Syntax</p>
<pre>
sword OCILobClose ( OCISvcCtx      *svchp,
                    OCIError       *errhp, 
                    OCILobLocator  *locp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2782"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>The LOB to close. The locator can refer to an internal or external LOB.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2783"></a>Comments</p>
<p>Closes a previously opened internal or external LOB. No error is returned if the <code>BFILE</code> exists but is not opened. An error is returned if the internal LOB is not open.</p>
<p>Closing a LOB requires a round-trip to the server for both internal and external LOBs. For internal LOBs, close triggers other code that relies on the close call and for external LOBs (<code>BFILEs</code>), close actually closes the server-side operating system file.</p>
<p>It is not mandatory that you wrap all LOB operations inside the open or close calls. However, if you open a LOB, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column. It is an error to commit the transaction before closing all opened LOBs that were opened by the transaction.</p>
<p>When the error is returned, the LOB is no longer marked as open, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed, but the domain and function-based indexing are not updated. If this happens, rebuild your functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance, so if you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444594">"Functions for Opening and Closing LOBs"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2784"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i493100">OCILobOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17182" class="refsect2"><a id="i578816"></a>
<h2 class="refsect2"><a id="sthref2785"></a>OCILobCopy2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2786"></a>Purpose</p>
<p>Copies all or a portion of a LOB value into another LOB value. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2787"></a>Syntax</p>
<pre>
sword OCILobCopy2 ( OCISvcCtx        *svchp,
                    OCIError         *errhp,
                    OCILobLocator    *dst_locp,
                    OCILobLocator    *src_locp,
                    oraub8           amount,
                    oraub8           dst_offset,
                    oraub8           src_offset );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2788"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">dst_locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the destination LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">src_locp</span> (IN)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the source LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">amount</span> (IN)</dt>
<dd>
<p>The number of characters for <code>CLOB</code>s or <code>NCLOB</code>s or the number of bytes for <code>BLOB</code>s to be copied from the source LOB to the destination LOB. The maximum value accepted by this parameter is <code>UB8MAXVAL</code> (18446744073709551615). Specifying <code>UB8MAXVAL</code> also indicates that the entire source LOB will be copied to the destination LOB using the specified source and destination offsets.</p>
</dd>
<dt><span class="bold">dst_offset</span> (IN)</dt>
<dd>
<p>This is the absolute offset for the destination LOB. For character LOBs, it is the number of characters from the beginning of the LOB at which to begin writing. For binary LOBs, it is the number of bytes from the beginning of the LOB from which to begin writing. The offset starts at 1.</p>
</dd>
<dt><span class="bold">src_offset</span> (IN)</dt>
<dd>
<p>This is the absolute offset for the source LOB. For character LOBs, it is the number of characters from the beginning of the LOB. For binary LOBs, it is the number of bytes. Starts at 1.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2789"></a>Comments</p>
<p>Copies all or a portion of an internal LOB value into another internal LOB as specified. The data is copied from the source to the destination. The source (<code>src_locp</code>) and the destination (<code>dst_locp</code>) LOBs must exist.</p>
<p>Copying a complete SecureFile in a column or partition with deduplicate enabled, to a LOB in the same column or partition, causes the copy to be deduplicated.</p>
<p>If the data exists at the destination's start position, it is overwritten with the source data. If the destination's start position is beyond the end of the current data, zero-byte fillers (for <code>BLOBs</code>) or spaces (for <code>CLOBs</code>) are written into the destination LOB from the end of the current data to the beginning of the newly written data from the source. The destination LOB is extended to accommodate the newly written data if it extends beyond the current length of the destination LOB. It is an error to extend the destination LOB beyond the maximum length allowed (that is, 4 gigabytes) or to try to copy from a <code>NULL</code> LOB. Use <a href="#i578816">OCILobCopy2()</a> for LOBs of size greater than 4 GB.</p>
<p>Both the source and the destination LOB locators must be of the same type (that is, they must both be <code>BLOBs</code> or both be <code>CLOBs</code>). LOB buffering must not be enabled for either locator.</p>
<p>This function does not accept a <code>BFILE</code> locator as the source or the destination.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can call <a href="#i578679">OCILobGetLength2()</a> to determine the length of the source LOB.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2790"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17183" class="refsect2"><a id="i578103"></a>
<h2 class="refsect2">OCILobCreateTemporary()<a id="sthref2791"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2792"></a>Purpose</p>
<p>Creates a temporary LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2793"></a>Syntax</p>
<pre>
sword OCILobCreateTemporary(OCISvcCtx          *svchp,
                            OCIError           *errhp,
                            OCILobLocator      *locp,
                            ub2                csid,
                            ub1                csfrm,
                            ub1                lobtype,
                            boolean            cache,
                            OCIDuration        duration);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2794"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>A locator that points to the temporary LOB. You must allocate the locator using <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> before passing it to this function. It does not matter whether this locator points to a LOB; the temporary LOB gets overwritten either way.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The LOB character set ID. For Oracle8<span class="italic">i</span> or later, pass as <code>OCI_DEFAULT</code>.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The LOB character set form of the buffer data. The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref2795"></a><code>SQLCS_IMPLICIT</code> - Database character set ID, to create a <code>CLOB</code>. <code>OCI_DEFAULT</code> can also be used to implicitly create a <code>CLOB</code>.</p>
</li>
<li>
<p><a id="sthref2796"></a><code>SQLCS_NCHAR</code> - <code>NCHAR</code> character set ID, to create an <code>NCLOB</code>.</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
<dl>
<dt>lobtype (IN)</dt>
<dd>
<p>The type of LOB to create. Valid values include:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_TEMP_BLOB</code> - For a temporary <code>BLOB</code></p>
</li>
<li>
<p><code>OCI_TEMP_CLOB</code> - For a temporary <code>CLOB</code> or <code>NCLOB</code></p>
</li>
</ul>
<dl>
<dt>cache (IN)</dt>
<dd>
<p>Pass <code>TRUE</code> if the temporary LOB should be read into the cache; pass <code>FALSE</code> if it should not. The default is <code>FALSE</code> for <code>NOCACHE</code> functionality.</p>
</dd>
<dt>duration (IN)</dt>
<dd>
<p>The duration of the temporary LOB. The following are valid values:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_DURATION_SESSION</code></p>
</li>
<li>
<p><code>OCI_DURATION_CALL</code></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2797"></a>Comments</p>
<p>This function creates a temporary LOB and its corresponding index in the user's temporary tablespace.</p>
<p>When this function is complete, the <code>locp</code> parameter points to an empty temporary LOB whose length is zero.</p>
<p>The lifetime of the temporary LOB is determined by the <code>duration</code> parameter. At the end of its duration the temporary LOB is freed. An application can free a temporary LOB sooner with the <a href="#i491299">OCILobFreeTemporary()</a> call.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i445781">"Temporary LOB Support"</a> for more information about temporary LOBs and their durations</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2798"></a>Related Functions</p>
<p><a href="#i491299">OCILobFreeTemporary()</a>, <a href="#i491312">OCILobIsTemporary()</a>, <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17184" class="refsect2"><a id="i455613"></a>
<h2 class="refsect2">OCILobDisableBuffering()<a id="sthref2799"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2800"></a>Purpose</p>
<p>Disables LOB buffering for the input locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2801"></a>Syntax</p>
<pre>
sword OCILobDisableBuffering ( OCISvcCtx      *svchp, 
                               OCIError       *errhp, 
                               OCILobLocator  *locp ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2802"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> or diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the LOB.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2803"></a>Comments</p>
<p>Disables LOB buffering for the input internal LOB locator. The next time data is read from or written to the LOB through the input locator, the LOB buffering subsystem is <span class="italic">not</span> used. Note that this call does <span class="italic">not</span> implicitly flush the changes made in the buffering subsystem. The user must explicitly call <a href="#i455682">OCILobFlushBuffer()</a> to do this.</p>
<p>This function does not accept a <code>BFILE</code> locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2804"></a>Related Functions</p>
<p><a href="#i455643">OCILobEnableBuffering()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i455682">OCILobFlushBuffer()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17185" class="refsect2"><a id="i455643"></a>
<h2 class="refsect2">OCILobEnableBuffering()<a id="sthref2805"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2806"></a>Purpose</p>
<p>Enables LOB buffering for the input locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2807"></a>Syntax</p>
<pre>
sword OCILobEnableBuffering ( OCISvcCtx      *svchp, 
                              OCIError       *errhp, 
                              OCILobLocator  *locp ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2808"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>An internal LOB locator uniquely referencing the LOB.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2809"></a>Comments</p>
<p>Enables LOB buffering for the input internal LOB locator. The next time data is read from or written to the LOB through the input locator, the LOB buffering subsystem is used.</p>
<p>If LOB buffering is enabled for a locator and that locator is passed to one of these routines, an error is returned: <a href="#i428786">OCILobAppend()</a>, <a href="ociaedep003.htm#CEGFJBBG">OCILobCopy()</a> (deprecated), <a href="#i578816">OCILobCopy2()</a>, <a href="ociaedep003.htm#i450663">OCILobErase()</a> (deprecated), <a href="#i578657">OCILobErase2()</a>, <a href="ociaedep003.htm#i555226">OCILobGetLength()</a> (deprecated), <a href="#i578679">OCILobGetLength2()</a>, <a href="ociaedep003.htm#i455168">OCILobLoadFromFile()</a> (deprecated), <a href="#i578701">OCILobLoadFromFile2()</a>, <a href="ociaedep003.htm#i427862">OCILobTrim()</a> (deprecated), <a href="#i578743">OCILobTrim2()</a>, <a href="ociaedep003.htm#i493080">OCILobWriteAppend()</a> (deprecated), or <a href="#i578780">OCILobWriteAppend2()</a>.</p>
<p>This function does not accept a <code>BFILE</code> locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2810"></a>Related Functions</p>
<p><a href="#i455613">OCILobDisableBuffering()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="ociaedep003.htm#i427882">OCILobWrite()</a> (deprecated), <a href="#i578761">OCILobWrite2()</a>, <a href="ociaedep003.htm#i427817">OCILobRead()</a> (deprecated), <a href="#i578721">OCILobRead2()</a>, <a href="#i455682">OCILobFlushBuffer()</a>, <a href="ociaedep003.htm#i493080">OCILobWriteAppend()</a> (deprecated), <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17187" class="refsect2"><a id="i578657"></a>
<h2 class="refsect2"><a id="sthref2811"></a>OCILobErase2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2812"></a>Purpose</p>
<p>Erases a specified portion of the internal LOB data starting at a specified offset. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2813"></a>Syntax</p>
<pre>
sword OCILobErase2 ( OCISvcCtx       *svchp,
                     OCIError        *errhp,
                     OCILobLocator   *locp,
                     oraub8          *amount,
                     oraub8          offset );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2814"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">amount</span> (IN/OUT)</dt>
<dd>
<p>The number of characters for <code>CLOB</code>s or <code>NCLOB</code>s, or bytes for <code>BLOB</code>s, to erase. On IN, the value signifies the number of characters or bytes to erase. On OUT, the value identifies the actual number of characters or bytes erased.</p>
</dd>
<dt><span class="bold">offset</span> (IN)</dt>
<dd>
<p>Absolute offset in characters for <code>CLOB</code>s or <code>NCLOB</code>s, or bytes for <code>BLOB</code>s, from the beginning of the LOB value from which to start erasing data. Starts at 1.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2815"></a>Comments</p>
<p>The actual number of characters or bytes erased is returned. For <code>BLOB</code>s, erasing means that zero-byte fillers overwrite the existing LOB value. For <code>CLOB</code>s, erasing means that spaces overwrite the existing LOB value.</p>
<p>This function is valid only for internal LOBs; <code>BFILE</code>s are not allowed.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2816"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578657">OCILobErase2()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17188" class="refsect2"><a id="i445818"></a>
<h2 class="refsect2">OCILobFileClose()<a id="sthref2817"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2818"></a>Purpose</p>
<p>Closes a previously opened <code>BFILE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2819"></a>Syntax</p>
<pre>
sword OCILobFileClose ( OCISvcCtx            *svchp,
                        OCIError             *errhp,
                        OCILobLocator        *filep );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2820"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">filep</span> (IN/OUT)</dt>
<dd>
<p>A pointer to a <code>BFILE</code> locator that refers to the <code>BFILE</code> to be closed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2821"></a>Comments</p>
<p>Closes a previously opened <code>BFILE</code>. It is an error if this function is called for an internal LOB. No error is returned if the <code>BFILE</code> exists but is not opened.</p>
<p>This function is only meaningful the first time it is called for a particular <code>BFILE</code> locator. Subsequent calls to this function using the same <code>BFILE</code> locator have no effect.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2822"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i496459">OCILobClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i452089">OCILobFileIsOpen()</a>, <a href="#i450949">OCILobFileOpen()</a>, <a href="#i493100">OCILobOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17189" class="refsect2"><a id="i451095"></a>
<h2 class="refsect2">OCILobFileCloseAll()<a id="sthref2823"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2824"></a>Purpose</p>
<p>Closes all open <code>BFILE</code>s on a given service context.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2825"></a>Syntax</p>
<pre>
sword OCILobFileCLoseAll ( OCISvcCtx   *svchp,
                           OCIError    *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2826"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2827"></a>Comments</p>
<p>Closes all open <code>BFILE</code>s on a given service context.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2828"></a>Related Functions</p>
<p><a href="#i445818">OCILobFileClose()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i452089">OCILobFileIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17190" class="refsect2"><a id="i453601"></a>
<h2 class="refsect2">OCILobFileExists()<a id="sthref2829"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2830"></a>Purpose</p>
<p>Tests to see if the <code>BFILE</code> exists on the server's operating system.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2831"></a>Syntax</p>
<pre>
sword OCILobFileExists ( OCISvcCtx        *svchp,
                         OCIError         *errhp,
                         OCILobLocator    *filep,
                         boolean          *flag );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2832"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>filep (IN)</dt>
<dd>
<p>Pointer to the <code>BFILE</code> locator that refers to the file.</p>
</dd>
<dt>flag (OUT)</dt>
<dd>
<p>Returns <code>TRUE</code> if the <code>BFILE</code> exists on the server; <code>FALSE</code> if it does not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2833"></a>Comments</p>
<p>Checks to see if the <code>BFILE</code> exists on the server's file system. It is an error to call this function for an internal LOB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Oracle Database SecureFiles and Large Objects Developer's Guide for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2834"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i445818">OCILobFileClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i452089">OCILobFileIsOpen()</a>, <a href="#i493100">OCILobOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17191" class="refsect2"><a id="i450554"></a>
<h2 class="refsect2">OCILobFileGetName()<a id="sthref2835"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2836"></a>Purpose</p>
<p>Gets the <code>BFILE</code> locator's directory object and file name.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2837"></a>Syntax</p>
<pre>
sword OCILobFileGetName ( OCIEnv                   *envhp,
                          OCIError                 *errhp, 
                          const OCILobLocator      *filep, 
                          OraText                  *dir_alias,
                          ub2                      *d_length, 
                          OraText                  *filename, 
                          ub2                      *f_length );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2838"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>filep (IN)</dt>
<dd>
<p><code>BFILE</code> locator for which to get the directory object and file name.</p>
</dd>
<dt>dir_alias (OUT)</dt>
<dd>
<p>Buffer into which the directory object name is placed. This can be in UTF-16. You must allocate enough space for the directory object name. The maximum length for the directory object is 30 bytes.</p>
</dd>
<dt>d_length (IN/OUT)</dt>
<dd>
<p>Serves the following purposes (can be in code point for Unicode, or bytes):</p>
</dd>
</dl>
<ul>
<li>
<p>IN: length of the input <code>dir_alias</code> string</p>
</li>
<li>
<p>OUT: length of the returned <code>dir_alias</code> string</p>
</li>
</ul>
<dl>
<dt>filename (OUT)</dt>
<dd>
<p>Buffer into which the file name is placed. You must allocate enough space for the file name. The maximum length for the file name is 255 bytes.</p>
</dd>
<dt>f_length (IN/OUT)</dt>
<dd>
<p>Serves the following purposes (in number of bytes):</p>
</dd>
</dl>
<ul>
<li>
<p>IN: length of the input <code>filename</code> buffer</p>
</li>
<li>
<p>OUT: length of the returned <code>filename</code> string</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2839"></a>Comments</p>
<p>Returns the directory object and file name associated with this <code>BFILE</code> locator. The environment handle determines whether it is in Unicode. It is an error to call this function for an internal LOB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2840"></a>Related Functions</p>
<p><a href="#i450493">OCILobFileSetName()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17192" class="refsect2"><a id="i452089"></a>
<h2 class="refsect2">OCILobFileIsOpen()<a id="sthref2841"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2842"></a>Purpose</p>
<p>Tests to see if the <code>BFILE</code> is open.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2843"></a>Syntax</p>
<pre>
sword OCILobFileIsOpen ( OCISvcCtx        *svchp,
                         OCIError         *errhp,
                         OCILobLocator    *filep,
                         boolean          *flag );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2844"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>filep (IN)</dt>
<dd>
<p>Pointer to the <code>BFILE</code> locator being examined.</p>
</dd>
<dt>flag (OUT)</dt>
<dd>
<p>Returns <code>TRUE</code> if the <code>BFILE</code> was opened using this particular locator; returns <code>FALSE</code> if it was not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2845"></a>Comments</p>
<p>Checks to see if a file on the server was opened with the <code>filep</code> <code>BFILE</code> locator. It is an error to call this function for an internal LOB.</p>
<p>If the input <code>BFILE</code> locator was never passed to the <a href="#i450949">OCILobFileOpen()</a> or <a href="#i493100">OCILobOpen()</a> command, the file is considered not to be opened by this locator. However, a different locator may have the file open. Openness is associated with a particular locator.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2846"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i496459">OCILobClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i445818">OCILobFileClose()</a>, <a href="#i450949">OCILobFileOpen()</a>, <a href="#i493100">OCILobOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17193" class="refsect2"><a id="i450949"></a>
<h2 class="refsect2">OCILobFileOpen()<a id="sthref2847"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2848"></a>Purpose</p>
<p>Opens a <code>BFILE</code> on the file system of the server for read-only access.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2849"></a>Syntax</p>
<pre>
sword OCILobFileOpen ( OCISvcCtx            *svchp,
                       OCIError             *errhp,
                       OCILobLocator        *filep,
                       ub1                  mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2850"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">filep</span> (IN/OUT)</dt>
<dd>
<p>The <code>BFILE</code> to open. It is an error if the locator does not refer to a <code>BFILE</code>.</p>
</dd>
<dt><span class="bold">mode</span> (IN)</dt>
<dd>
<p>Mode in which to open the file. The only valid mode is <code>OCI_FILE_READONLY</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2851"></a>Comments</p>
<p>Opens a <code>BFILE</code> on the file system of the server. The <code>BFILE</code> can be opened for read-only access. <code>BFILE</code>s can not be written through Oracle Database. It is an error to call this function for an internal LOB.</p>
<p>This function is only meaningful the first time it is called for a particular <code>BFILE</code> locator. Subsequent calls to this function using the same <code>BFILE</code> locator have no effect.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2852"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i496459">OCILobClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i445818">OCILobFileClose()</a>, <a href="#i452089">OCILobFileIsOpen()</a>, <a href="#i493100">OCILobOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17194" class="refsect2"><a id="i450493"></a>
<h2 class="refsect2">OCILobFileSetName()<a id="sthref2853"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2854"></a>Purpose</p>
<p>Sets the directory object and file name in the <code>BFILE</code> locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2855"></a>Syntax</p>
<pre>
sword OCILobFileSetName ( OCIEnv             *envhp,
                          OCIError           *errhp,
                          OCILobLocator      **filepp,
                          const OraText      *dir_alias,
                          ub2                d_length, 
                          const OraText      *filename, 
                          ub2                f_length );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2856"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle. Contains the UTF-16 setting.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>filepp (IN/OUT)</dt>
<dd>
<p>Pointer to the <code>BFILE</code> locator for which to set the directory object and file name.</p>
</dd>
<dt>dir_alias (IN)</dt>
<dd>
<p>Buffer that contains the directory object name (must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>) to set in the <code>BFILE</code> locator.</p>
</dd>
<dt>d_length (IN)</dt>
<dd>
<p>Length (in bytes) of the input <code>dir_alias</code> parameter.</p>
</dd>
<dt>filename (IN)</dt>
<dd>
<p>Buffer that contains the file name (must be in the encoding specified by the <code>charset</code> parameter of a previous call to <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>) to set in the <code>BFILE</code> locator.</p>
</dd>
<dt>f_length (IN)</dt>
<dd>
<p>Length (in bytes) of the input <code>filename</code> parameter.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2857"></a>Comments</p>
<p>It is an error to call this function for an internal LOB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2858"></a>Related Functions</p>
<p><a href="#i450554">OCILobFileGetName()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17195" class="refsect2"><a id="i455682"></a>
<h2 class="refsect2">OCILobFlushBuffer()<a id="sthref2859"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2860"></a>Purpose</p>
<p>Flushes or write s all buffers for this LOB to the server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2861"></a>Syntax</p>
<pre>
sword OCILobFlushBuffer ( OCISvcCtx       *svchp, 
                          OCIError        *errhp, 
                          OCILobLocator   *locp
                          ub4             flag ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2862"></a>Parameters</p>
<dl>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>An internal locator uniquely referencing the LOB.</p>
</dd>
<dt>flag (IN)</dt>
<dd>
<p>When this flag is set to <code>OCI_LOB_BUFFER_FREE</code>, the buffer resources for the LOB are freed after the flush. See the Comments section.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2863"></a>Comments</p>
<p>Flushes to the server changes made to the buffering subsystem that are associated with the LOB referenced by the input locator. This routine actually writes the data in the buffer to the LOB in the database. LOB buffering must have been enabled for the input LOB locator.</p>
<p>The flush operation, by default, does not free the buffer resources for reallocation to another buffered LOB operation. To free the buffer explicitly, you can set the flag parameter to <code>OCI_LOB_BUFFER_FREE</code>.</p>
<p>If the client application intends to read the buffer value after the flush and knows in advance that the current value in the buffer is the desired value, there is no need to reread the data from the server.</p>
<p>The effects of freeing the buffer are mostly transparent to the user, except that the next access to the same range in the LOB involves a round-trip to the server, and there is an added cost for acquiring buffer resources and initializing the buffer with the data read from the LOB. This option is intended for client environments that have low on-board memory.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2864"></a>Related Functions</p>
<p><a href="#i455643">OCILobEnableBuffering()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="ociaedep003.htm#i427882">OCILobWrite()</a> (deprecated), <a href="#i578761">OCILobWrite2()</a>, <a href="ociaedep003.htm#i427817">OCILobRead()</a> (deprecated), <a href="#i578721">OCILobRead2()</a>, <a href="#i455613">OCILobDisableBuffering()</a>, <a href="ociaedep003.htm#i493080">OCILobWriteAppend()</a> (deprecated), <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17196" class="refsect2"><a id="i491299"></a>
<h2 class="refsect2">OCILobFreeTemporary()<a id="sthref2865"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2866"></a>Purpose</p>
<p>Frees a temporary LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2867"></a>Syntax</p>
<pre>
sword OCILobFreeTemporary( OCISvcCtx          *svchp,
                           OCIError           *errhp,
                           OCILobLocator      *locp);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2868"></a>Parameters</p>
<dl>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>A locator uniquely referencing the LOB to be freed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2869"></a>Comments</p>
<p>This function frees the contents of the temporary LOB to which this locator points. Note that the locator itself is not freed until <a href="oci16rel002.htm#i540811">OCIDescriptorFree()</a> is called.</p>
<p>This function returns an error if the LOB locator passed in the <code>locp</code> parameter does not point to a temporary LOB, possibly because the LOB locator:</p>
<ul>
<li>
<p>Points to a permanent LOB</p>
</li>
<li>
<p>Pointed to a temporary LOB that has been freed</p>
</li>
<li>
<p>Has never pointed to anything</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2870"></a>Related functions</p>
<p><a href="#i578103">OCILobCreateTemporary()</a>, <a href="#i491312">OCILobIsTemporary()</a>, <a href="oci17msc007.htm#i540516">OCIErrorGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17197" class="refsect2"><a id="i493090"></a>
<h2 class="refsect2">OCILobGetChunkSize()<a id="sthref2871"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2872"></a>Purpose</p>
<p>Gets the chunk size of a LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2873"></a>Syntax</p>
<pre>
sword OCILobGetChunkSize ( OCISvcCtx       *svchp,
                           OCIError        *errhp,
                           OCILobLocator   *locp,
                           ub4             *chunk_size );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2874"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>The internal LOB for which to get the usable chunk size.</p>
</dd>
<dt>chunk_size (OUT)</dt>
<dd>
<p>For LOBs with storage parameter <code>BASICFILE</code>, the amount of a chunk's space that is used to store the internal LOB value. This is the amount that users should use when reading or writing the LOB value. If possible, users should start their writes at chunk boundaries, such as the beginning of a chunk, and write a chunk at a time.</p>
<p>The <code>chunk_size</code> parameter is returned in terms of bytes for <code>BLOB</code>s, <code>CLOB</code>s, and <code>NCLOB</code>s.</p>
<p>For LOBs with storage parameter <code>SECUREFILE</code>, <code>chunk_size</code> is an advisory size and is provided for backward compatibility.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2875"></a>Comments</p>
<p>When creating a table that contains an internal LOB, the user can specify the chunking factor, which can be a multiple of Oracle Database blocks. This corresponds to the chunk size used by the LOB data layer when accessing and modifying the LOB value. Part of the chunk is used to store system-related information, and the rest stores the LOB value. This function returns the amount of space used in the LOB chunk to store the LOB value. Performance is improved if the application issues read or write requests using a multiple of this chunk size. For writes, there is an added benefit because LOB chunks are versioned and, if all writes are done on a chunk basis, no extra versioning is done or duplicated. Users could batch up the write until they have enough for a chunk instead of issuing several write calls for the same chunk.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444520">"Improving LOB Read/Write Performance"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2876"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578858">OCILobGetStorageLimit()</a>, <a href="ociaedep003.htm#i427817">OCILobRead()</a> (deprecated), <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="ociaedep003.htm#CEGFJBBG">OCILobCopy()</a> (deprecated), <a href="#i578816">OCILobCopy2()</a>, <a href="ociaedep003.htm#i427882">OCILobWrite()</a> (deprecated), <a href="#i578761">OCILobWrite2()</a>, <a href="ociaedep003.htm#i493080">OCILobWriteAppend()</a> (deprecated), <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17198" class="refsect2"><a id="CHDEHBCD"></a>
<h2 class="refsect2"><a id="sthref2877"></a><a id="sthref2878"></a>OCILobGetContentType()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2879"></a>Purpose</p>
<p>Gets the user-specified content type string for the data in a SecureFile, if set.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2880"></a>Syntax</p>
<pre>
sword OCILobGetContentType ( OCIEnv         *envhp, 
                             OCISvcCtx      *svchp,  
                             OCIError       *errhp, 
                             OCILobLocator  *lobp, 
                             oratext        *contenttypep, 
                             ub4            *contenttypelenp,
                             ub4            mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2881"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The environment handle.</p>
</dd>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>lobp (IN)</dt>
<dd>
<p>A LOB locator that uniquely references a LOB.</p>
</dd>
<dt>contenttypep (IN/OUT)</dt>
<dd>
<p>Pointer to the buffer where the content type is stored after successful execution. You must allocate the buffer before calling this function. The size of the allocated buffer must be <code>&gt;= OCI_LOB_CONTENTTYPE_MAXSIZE</code>.</p>
</dd>
<dt>contenttypelenp (IN/OUT)</dt>
<dd>
<p>Set this field to the size of <code>contenttypep</code> buffer. After the call successfully executes, this field holds the size of the <code>contenttypep</code> returned.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>For future use. Pass zero now.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2882"></a>Comments</p>
<p>This function only works on SecureFiles. If <code>lobp</code> is not a SecureFile, then the error <code>SECUREFILE_WRONGTYPE</code> is returned. If <code>lobp</code> is buffered, a temporary LOB, or an abstract LOB, then the error <code>SECUREFILE_BADLOB</code> is returned.</p>
<p>If the SecureFile does not have a <code>contenttype</code> associated with it, the <code>contenttype</code> length (<code>contenttypelenp</code>) is returned as 0 without modifying the buffer <code>contenttypep</code>.</p>
<p>The maximum possible size of the <code>ContentType</code> string is defined as:</p>
<pre>
#define OCI_LOB_CONTENTTYPE_MAXSIZE 128
</pre>
<p>The <code>ContentType</code> is ASCII (that is, 1-byte/7-bit UTF8).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2883"></a>Related Functions</p>
<p><a href="#CHDHHGIC">OCILobSetContentType()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17200" class="refsect2"><a id="i578679"></a>
<h2 class="refsect2"><a id="sthref2884"></a>OCILobGetLength2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2885"></a>Purpose</p>
<p>Gets the length of a LOB. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2886"></a>Syntax</p>
<pre>
sword OCILobGetLength2 ( OCISvcCtx      *svchp,
                         OCIError       *errhp,
                         OCILobLocator  *locp,
                         oraub8         *lenp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2887"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN)</dt>
<dd>
<p>A LOB locator that uniquely references the LOB. For internal LOBs, this locator must have been a locator that was obtained from the server specified by <code>svchp</code>. For <code>BFILE</code>s, the locator can be set by <a href="#i450493">OCILobFileSetName()</a>, by a <code>SELECT</code> statement, or by <a href="oci18nav005.htm#i433563">OCIObjectPin()</a>.</p>
</dd>
<dt><span class="bold">lenp</span> (OUT)</dt>
<dd>
<p>On output, it is the length of the LOB if the LOB is not <code>NULL</code>. For character LOBs, it is the number of characters; for binary LOBs and <code>BFILE</code>s, it is the number of bytes in the LOB.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2888"></a>Comments</p>
<p>Gets the length of a LOB. If the LOB is <code>NULL</code>, the length is undefined. The length of a <code>BFILE</code> includes the EOF, if it exists. The length of an empty internal LOB is zero.</p>
<p>Regardless of whether the client-side character set is varying-width, the output length is in characters for <code>CLOB</code>s and <code>NCLOB</code>s, and in bytes for <code>BLOB</code>s and <code>BFILE</code>s.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Any zero-byte or space fillers in the LOB written by previous calls to <code>OCILobErase2()</code> or <code>OCILobWrite2()</code> are also included in the length count.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2889"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i450493">OCILobFileSetName()</a>, <a href="#i578679">OCILobGetLength2()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578701">OCILobLoadFromFile2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17201" class="refsect2"><a id="CHDEAJAB"></a>
<h2 class="refsect2"><a id="sthref2890"></a>OCILobGetOptions()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2891"></a>Purpose</p>
<p>Obtains the enabled settings corresponding to the given input option types for a given SecureFile LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2892"></a>Syntax</p>
<pre>
sword OCILobGetOptions ( OCISvcCtx         *svchp,
                         OCIError          *errhp,
                         OCILobLocator     *locp,
                         ub4               option_types,
                         void              *optionsp,
                         ub4               optionslenp,
                         ub4               mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2893"></a>Parameters</p>
<dl>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>The LOB locator or <code>BFILE</code> locator that uniquely references the LOB or <code>BFILE</code>. This locator must have been obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt>option_types (IN)</dt>
<dd>
<p>The given option types that can be combined by a bit-wise inclusive <code>OR</code> (symbol "|"):</p>
<ul>
<li>
<p>Compression - <code>OCI_LOB_OPT_COMPRESS</code></p>
</li>
<li>
<p>Encryption - <code>OCI_LOB_OPT_ENCRYPT</code></p>
</li>
<li>
<p>Deduplication - <code>OCI_LOB_OPT_DEDUPLICATE</code></p>
</li>
</ul>
</dd>
<dt>optionsp (OUT)</dt>
<dd>
<p>The current settings for each of the option types given. Possible values are:</p>
<ul>
<li>
<p><code>OCI_LOB_OPT_COMPRESS_ON</code></p>
</li>
<li>
<p><code>OCI_LOB_OPT_ENCRYPT_ON</code></p>
</li>
<li>
<p><code>OCI_LOB_OPT_DEDUPLICATE_ON</code></p>
</li>
</ul>
</dd>
<dt>optionslenp (OUT)</dt>
<dd>
<p>The length of the value in <code>optionsp</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Reserved for future use. Pass in 0.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2894"></a>Comments</p>
<p>You can only specify option types that have been enabled on the column. An error is returned when an attempt is made to get the value of an option type that is not enabled on the column. For example, if you have a LOB column with compression enabled, and you call <code>OCILobGetOptions()</code> with <code>OCI_LOB_OPT_ENCRYPT</code> set in the <code>option_types</code> parameter, an error occurs.</p>
<p>Note that the returned value is a <code>ub4</code> pointer cast as a <code>void</code> pointer to allow for future expansion of option types and values. The <code>optionslenp</code> returned should be equal to <code>sizeof(ub4)</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2895"></a>Related Functions</p>
<p><a href="#CHDBDAAF">OCILobSetOptions()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17203" class="refsect2"><a id="i578858"></a>
<h2 class="refsect2"><a id="sthref2896"></a>OCILobGetStorageLimit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2897"></a>Purpose</p>
<p>Gets the maximum length of an internal LOB (<code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>) in bytes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2898"></a>Syntax</p>
<pre>
sword OCILobGetStorageLimit ( OCISvcCtx      *svchp,
                              OCIError       *errhp,
                              OCILobLocator  *locp,
                              oraub8         *limitp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2899"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>A LOB locator that uniquely references the LOB. The locator must have been one that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt>limitp (OUT)</dt>
<dd>
<p>The maximum length of the LOB (in bytes) that can be stored in the database.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2900"></a>Comments</p>
<p>Because block size ranges from 2 KB to 32 KB, the maximum LOB size ranges from 8 terabytes to 128 terabytes (TB) for LOBs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444306">"Using LOBs of Size Greater than 4 GB"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2901"></a>Related Functions</p>
<p><a href="#i493090">OCILobGetChunkSize()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17204" class="refsect2"><a id="i450869"></a>
<h2 class="refsect2">OCILobIsEqual()<a id="sthref2902"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2903"></a>Purpose</p>
<p>Compares two LOB or <code>BFILE</code> locators for equality.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2904"></a>Syntax</p>
<pre>
sword OCILobIsEqual ( OCIEnv                  *envhp,
                      const OCILobLocator     *x,
                      const OCILobLocator     *y,
                      boolean                 *is_equal );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2905"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The OCI environment handle.</p>
</dd>
<dt>x (IN)</dt>
<dd>
<p>LOB locator to compare.</p>
</dd>
<dt>y (IN)</dt>
<dd>
<p>LOB locator to compare.</p>
</dd>
<dt>is_equal (OUT)</dt>
<dd>
<p><code>TRUE</code>, if the LOB locators are equal; <code>FALSE</code> if they are not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2906"></a>Comments</p>
<p>Compares the given LOB or <code>BFILE</code> locators for equality. Two LOB or <code>BFILE</code> locators are equal if and only if they both refer to the same LOB or <code>BFILE</code> value.</p>
<p>Two <code>NULL</code> locators are considered <span class="italic">not</span> equal by this function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2907"></a>Related Functions</p>
<p><a href="#i447732">OCILobAssign()</a>, <a href="#i451099">OCILobLocatorIsInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17205" class="refsect2"><a id="i493110"></a>
<h2 class="refsect2"><a id="sthref2908"></a>OCILobIsOpen()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2909"></a>Purpose</p>
<p>Tests whether a LOB or <code>BFILE</code> is open.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2910"></a>Syntax</p>
<pre>
sword OCILobIsOpen ( OCISvcCtx        *svchp,
                     OCIError         *errhp, 
                     OCILobLocator    *locp, 
                     boolean          *flag );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2911"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>Pointer to the LOB locator being examined. The locator can refer to an internal or external LOB.</p>
</dd>
<dt>flag (OUT)</dt>
<dd>
<p>Returns <code>TRUE</code> if the internal LOB is open or if the <code>BFILE</code> was opened using the input locator. Returns <code>FALSE</code> if it was not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2912"></a>Comments</p>
<p>Checks to see if the internal LOB is open or if the <code>BFILE</code> was opened using the input locator.</p>
<dl>
<dt>For BFILEs</dt>
<dd>
<p>If the input <code>BFILE</code> locator was never passed to <a href="#i493100">OCILobOpen()</a> or <a href="#i450949">OCILobFileOpen()</a>, the <code>BFILE</code> is considered not to be opened by this <code>BFILE</code> locator. However, a different <code>BFILE</code> locator may have opened the <code>BFILE</code>. Multiple opens can be performed on the same <code>BFILE</code> using different locators. In other words, openness is associated with a specific locator for <code>BFILEs</code>.</p>
</dd>
<dt>For internal LOBs</dt>
<dd>
<p>Openness is associated with the LOB, not with the locator. If <code>locator1</code> opened the LOB, then <code>locator2</code> also sees the LOB as open.</p>
<p>For internal LOBs, this call requires a server round-trip because it checks the state on the server to see if the LOB is open. For external LOBs (<code>BFILEs</code>), this call also requires a round-trip because the operating system file on the server side must be checked to see if it is open.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444594">"Functions for Opening and Closing LOBs"</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2913"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i496459">OCILobClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i445818">OCILobFileClose()</a>, <a href="#i452089">OCILobFileIsOpen()</a>, <a href="#i450949">OCILobFileOpen()</a>, <a href="#i493100">OCILobOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17206" class="refsect2"><a id="i491312"></a>
<h2 class="refsect2">OCILobIsTemporary()<a id="sthref2914"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2915"></a>Purpose</p>
<p>Tests if a locator points to a temporary LOB</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2916"></a>Syntax</p>
<pre>
sword OCILobIsTemporary(OCIEnv            *envhp,
                        OCIError          *errhp,
                        OCILobLocator     *locp,
                        boolean           *is_temporary);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2917"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>The locator to test.</p>
</dd>
<dt>is_temporary (OUT)</dt>
<dd>
<p>Returns <code>TRUE</code> if the LOB locator points to a temporary LOB; <code>FALSE</code> if it does not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2918"></a>Comments</p>
<p>This function tests a locator to determine if it points to a temporary LOB. If so, <code>is_temporary</code> is set to <code>TRUE</code>. If not, <code>is_temporary</code> is set to <code>FALSE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2919"></a>Related Functions</p>
<p><a href="#i578103">OCILobCreateTemporary()</a>, <a href="#i491299">OCILobFreeTemporary()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17208" class="refsect2"><a id="i578701"></a>
<h2 class="refsect2"><a id="sthref2920"></a>OCILobLoadFromFile2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2921"></a>Purpose</p>
<p>Loads and copies all or a portion of the file into an internal LOB. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2922"></a>Syntax</p>
<pre>
sword OCILobLoadFromFile2 ( OCISvcCtx        *svchp, 
                            OCIError         *errhp, 
                            OCILobLocator    *dst_locp, 
                            OCILobLocator    *src_locp, 
                            oraub8           amount, 
                            oraub8           dst_offset, 
                            oraub8           src_offset ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2923"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>dst_locp (IN/OUT)</dt>
<dd>
<p>A locator uniquely referencing the destination internal LOB, that may be of type <code>BLOB</code>, <code>CLOB</code>, or <code>NCLOB</code>.</p>
</dd>
<dt>src_locp (IN/OUT)</dt>
<dd>
<p>A locator uniquely referencing the source <code>BFILE</code>.</p>
</dd>
<dt>amount (IN)</dt>
<dd>
<p>The number of bytes to be loaded.</p>
</dd>
<dt>dst_offset (IN)</dt>
<dd>
<p>This is the absolute offset for the destination LOB. For character LOBs, it is the number of characters from the beginning of the LOB at which to begin writing. For binary LOBs, it is the number of bytes from the beginning of the LOB from which to begin reading. The offset starts at 1.</p>
</dd>
<dt>src_offset (IN)</dt>
<dd>
<p>This is the absolute offset for the source <code>BFILE</code>. It is the number of bytes from the beginning of the <code>BFILE</code>. The offset starts at 1.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2924"></a>Comments</p>
<p>Loads and copies a portion or all of a <code>BFILE</code> value into an internal LOB as specified. The data is copied from the source <code>BFILE</code> to the destination internal LOB (<code>BLOB</code> or <code>CLOB</code>). No character set conversions are performed when copying the <code>BFILE</code> data to a <code>CLOB</code> or <code>NCLOB</code>. Also, when binary data is loaded into a <code>BLOB</code>, no character set conversions are performed. Therefore, the <code>BFILE</code> data must be in the same character set as the LOB in the database. No error checking is performed to verify this.</p>
<p>The source (<code>src_locp</code>) and the destination (<code>dst_locp</code>) LOBs must exist. If the data exists at the destination's start position, it is overwritten with the source data. If the destination's start position is beyond the end of the current data, zero-byte fillers (for <code>BLOB</code>s) or spaces (for <code>CLOB</code>s) are written into the destination LOB from the end of the data to the beginning of the newly written data from the source. The destination LOB is extended to accommodate the newly written data if it extends beyond the current length of the destination LOB.</p>
<p>It is an error to extend the destination LOB beyond the maximum length allowed (4 gigabytes) (see <a href="#i578701">OCILobLoadFromFile2()</a> to use for LOBs of size greater than 4 GB) or to try to copy from a NULL <code>BFILE</code>.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2925"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i578743">OCILobTrim2()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i578679">OCILobGetLength2()</a>, <a href="#i578701">OCILobLoadFromFile2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17209" class="refsect2"><a id="i507395"></a>
<h2 class="refsect2">OCILobLocatorAssign()<a id="sthref2926"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2927"></a>Purpose</p>
<p>Assigns one LOB or <code>BFILE</code> locator to another.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2928"></a>Syntax</p>
<pre>
sword OCILobLocatorAssign ( OCISvcCtx            *svchp,
                            OCIError             *errhp,
                            const OCILobLocator  *src_locp,
                            OCILobLocator         **dst_locpp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2929"></a>Parameters</p>
<dl>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>src_locp (IN)</dt>
<dd>
<p>The LOB or <code>BFILE</code> locator to copy from.</p>
</dd>
<dt>dst_locpp (IN/OUT)</dt>
<dd>
<p>The LOB or <code>BFILE</code> locator to copy to. The caller must allocate space for the <code>OCILobLocator</code> by calling <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2930"></a>Comments</p>
<p>This call assigns the source locator to the destination locator. After the assignment, both locators refer to the same LOB data. For internal LOBs, the source locator's LOB data gets copied to the destination locator's LOB data only when the destination locator gets stored in the table. Therefore, issuing a flush of the object containing the destination locator copies the LOB data. For <code>BFILE</code>s, only the locator that refers to the operating system file is copied to the table; the operating system file is not copied.</p>
<p>Note that this call is similar to <a href="#i447732">OCILobAssign()</a>, but <code>OCILobLocatorAssign()</code> takes an OCI service handle pointer instead of an OCI environment handle pointer. Also, <code>OCILobLocatorAssign()</code> can be used for temporary LOBs, but <a href="#i447732">OCILobAssign()</a> cannot be used for temporary LOBs.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the <code>OCILobLocatorAssign()</code> function fails, the target locator is not restored to its previous state. The target locator should not be used in subsequent operations unless it is reinitialized.</div>
<p>If the destination locator is for a temporary LOB, the destination temporary LOB is freed before the source LOB locator is assignedto it.</p>
<p>If the source LOB locator refers to a temporary LOB, the destination is made into a temporary LOB too. The source and the destination are conceptually different temporary LOBs. In the <code>OCI_DEFAULT</code> mode, the source temporary LOB is deep copied, and a destination locator is created to refer to the new deep copy of the temporary LOB. Hence <a href="#i450869">OCILobIsEqual()</a> returns <code>FALSE</code> after the <code>OCILobLocatorAssign()</code> call. However, in the <code>OCI_OBJECT</code> mode, an optimization is made to minimize the number of deep copies, so the source and destination locators point to the same LOB until any modification is made through either LOB locator. Hence <a href="#i450869">OCILobIsEqual()</a> returns <code>TRUE</code> right after <code>OCILobLocatorAssign()</code> until the first modification. In both these cases, after the <code>OCILobLocatorAssign()</code>, any changes to the source or the destination do not reflect in the other (that is, destination or source) LOB. If you want the source and the destination to point to the same LOB and want your changes to reflect in the other, then you must use the equal sign to ensure that the two LOB locator pointers refer to the same LOB locator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2931"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i447732">OCILobAssign()</a>, <a href="#i450869">OCILobIsEqual()</a>, <a href="#i451099">OCILobLocatorIsInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17210" class="refsect2"><a id="i451099"></a>
<h2 class="refsect2">OCILobLocatorIsInit()<a id="sthref2932"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2933"></a>Purpose</p>
<p>Tests to see if a given LOB or <code>BFILE</code> locator is initialized.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2934"></a>Syntax</p>
<pre>
sword OCILobLocatorIsInit ( OCIEnv               *envhp,
                            OCIError             *errhp,
                            const OCILobLocator  *locp,
                            boolean              *is_initialized );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2935"></a>Parameters</p>
<dl>
<dt>envhp (IN/OUT)</dt>
<dd>
<p>OCI environment handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN)</dt>
<dd>
<p>The LOB or <code>BFILE</code> locator being tested.</p>
</dd>
<dt>is_initialized (OUT)</dt>
<dd>
<p>Returns <code>TRUE</code> if the given LOB or <code>BFILE</code> locator is initialized; returns <code>FALSE</code> if it is not.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2936"></a>Comments</p>
<p>Tests to see if a given LOB or <code>BFILE</code> locator is initialized.</p>
<p>Internal LOB locators can be initialized by one of these methods:</p>
<ul>
<li>
<p>Selecting a non-<code>NULL</code> LOB into the locator</p>
</li>
<li>
<p>Pinning an object that contains a non-<code>NULL</code> LOB attribute by <a href="oci18nav005.htm#i433563">OCIObjectPin()</a></p>
</li>
<li>
<p>Setting the locator to empty by <a href="oci16rel002.htm#i443804">OCIAttrSet()</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i428825">"LOB Locator Attributes"</a></div>
</li>
</ul>
<p><code>BFILE</code> locators can be initialized by one of these methods:</p>
<ul>
<li>
<p>Selecting a non-<code>NULL</code> <code>BFILE</code> into the locator</p>
</li>
<li>
<p>Pinning an object that contains a non-<code>NULL</code> <code>BFILE</code> attribute by <a href="oci18nav005.htm#i433563">OCIObjectPin()</a></p>
</li>
<li>
<p>Calling <a href="#i450493">OCILobFileSetName()</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2937"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i450869">OCILobIsEqual()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17211" class="refsect2"><a id="i493100"></a>
<h2 class="refsect2"><a id="sthref2938"></a>OCILobOpen()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2939"></a>Purpose</p>
<p>Opens a LOB, internal or external, in the indicated mode.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2940"></a>Syntax</p>
<pre>
sword OCILobOpen ( OCISvcCtx        *svchp,
                   OCIError         *errhp, 
                   OCILobLocator    *locp, 
                   ub1              mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2941"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>The LOB to open. The locator can refer to an internal or external LOB.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The mode in which to open the LOB or <code>BFILE</code>. In Oracle8<span class="italic">i</span> or later, valid modes for LOBs are <code>OCI_LOB_READONLY</code> and <code>OCI_LOB_READWRITE</code>. Note that <code>OCI_FILE_READONLY</code> exists as input to <a href="#i450949">OCILobFileOpen()</a>. <code>OCI_FILE_READONLY</code> can be used with <code>OCILobOpen()</code> if the input locator is for a <code>BFILE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2942"></a>Comments</p>
<p>It is an error to open the same LOB twice. <code>BFILE</code>s cannot be opened in read/write mode. If a user tries to write to a LOB or <code>BFILE</code> that was opened in read-only mode, an error is returned.</p>
<p>Opening a LOB requires a round-trip to the server for both internal and external LOBs. For internal LOBs, the open triggers other code that relies on the open call. For external LOBs (<code>BFILE</code>s), open requires a round-trip because the actual operating system file on the server side is being opened.</p>
<p>It is not necessary to open a LOB to perform operations on it. When using function-based indexes, extensible indexes or context, and making multiple calls to update or write to the LOB, you should first call <code>OCILobOpen()</code>, then update the LOB as many times as you want, and finally call <a href="#i496459">OCILobClose()</a>. This sequence of operations ensures that the indexes are only updated once at the end of all the write operations instead of once for each write operation.</p>
<p>It is not mandatory that you wrap all LOB operations inside the open and close calls. However, if you open a LOB, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column. It is an error to commit the transaction before closing all opened LOBs that were opened by the transaction.</p>
<p>When the error is returned, the LOB is no longer marked as open, but the transaction is successfully committed. Hence, all the changes made to the LOB and non-LOB data in the transaction are committed, but the domain and function-based indexing are not updated. If this happens, rebuild your functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance, so if you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444594">"Functions for Opening and Closing LOBs"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2943"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i496459">OCILobClose()</a>, <a href="#i451095">OCILobFileCloseAll()</a>, <a href="#i453601">OCILobFileExists()</a>, <a href="#i445818">OCILobFileClose()</a>, <a href="#i452089">OCILobFileIsOpen()</a>, <a href="#i450949">OCILobFileOpen()</a>, <a href="#i493110">OCILobIsOpen()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17214" class="refsect2"><a id="i578721"></a>
<h2 class="refsect2"><a id="sthref2944"></a>OCILobRead2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2945"></a>Purpose</p>
<p>Reads a portion of a LOB or <code>BFILE</code>, as specified by the call, into a buffer. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2946"></a>Syntax</p>
<pre>
sword OCILobRead2 ( OCISvcCtx          *svchp,
                    OCIError           *errhp,
                    OCILobLocator      *locp,
                    oraub8             *byte_amtp,
                    oraub8             *char_amtp,
                    oraub8             offset,
                    void               *bufp,
                    oraub8             bufl,
                    ub1                piece,
                    void               *ctxp, 
                    OCICallbackLobRead2 (cbfp)
                                        ( void          *ctxp,
                                          const void    *bufp,
                                          oraub8        lenp,
                                          ub1           piecep
                                          void          **changed_bufpp,
                                          oraub8        *changed_lenp
                                        )
                    ub2                csid,
                    ub1                csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2947"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN)</dt>
<dd>
<p>A LOB or <code>BFILE</code> locator that uniquely references the LOB or <code>BFILE</code>. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">byte_amtp</span> (IN/OUT)</dt>
<dd>
<p>IN - The number of bytes to read from the database. Used for <code>BLOB</code> and <code>BFILE</code> always. For <code>CLOB</code> and <code>NCLOB</code>, it is used only when <code>char_amtp</code> is zero.</p>
<p>OUT - The number of bytes read into the user buffer.</p>
</dd>
<dt><span class="bold">char_amtp</span> (IN/OUT)</dt>
<dd>
<p>IN - The maximum number of characters to read into the user buffer. Ignored for <code>BLOB</code> and <code>BFILE</code>.</p>
<p>OUT - The number of characters read into the user buffer. Undefined for <code>BLOB</code> and <code>BFILE</code>.</p>
</dd>
<dt><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, this is the absolute offset from the beginning of the LOB value. For character LOBs (<code>CLOB</code>s, <code>NCLOB</code>s), it is the number of characters from the beginning of the LOB; for binary LOBs or <code>BFILE</code>s, it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>The pointer to a buffer into which the piece is read. The length of the allocated memory is assumed to be <code>bufl</code>.</p>
</dd>
<dt><span class="bold">bufl</span> (IN)</dt>
<dd>
<p>The length of the buffer in octets. This value differs from the <code>amtp</code> value for <code>CLOB</code>s and for <code>NCLOB</code>s (<code>csfrm</code>=<code>SQLCS_NCHAR</code>) when the <code>amtp</code> parameter is specified in terms of characters, and the <code>bufl</code> parameter is specified in terms of bytes.</p>
</dd>
<dt>piece (IN)</dt>
<dd>
<p><code>OCI_ONE_PIECE</code> - The call never assumes polling. If the amount indicated is more than the buffer length, then the buffer is filled as much as possible.</p>
<p>For polling, pass <code>OCI_FIRST_PIECE</code> the first time and <code>OCI_NEXT_PIECE</code> in subsequent calls. <code>OCI_FIRST_PIECE</code> should be passed while using the callback.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context pointer for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece. If this is <code>NULL</code>, then <code>OCI_NEED_DATA</code> is returned for each piece.</p>
<p>The callback function must return <code>OCI_CONTINUE</code> for the read to continue. If any other error code is returned, the LOB read is terminated.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt><span class="bold">lenp</span> (IN)</dt>
<dd>
<p>The length in bytes of the current piece in <code>bufp</code>.</p>
</dd>
<dt><span class="bold">piecep</span> (IN)</dt>
<dd>
<p>Which piece: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>changed_bufpp (OUT)</dt>
<dd>
<p>The callback function can put the address of a new buffer if it prefers to use a new buffer for the next piece to read. The default old buffer <code>bufp</code> is used if this parameter is set to <code>NULL</code>.</p>
</dd>
<dt>changed_lenp (OUT)</dt>
<dd>
<p>Length of the new buffer, if provided.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<dl>
<dt><span class="bold">csid</span> (IN)</dt>
<dd>
<p>The character set ID of the buffer data. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>. It is never assumed to be the server character set, unless the server and client have the same settings.</p>
</dd>
<dt><span class="bold">csfrm (IN)</span></dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><code><a id="sthref2948"></a>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><a id="sthref2949"></a><code>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>. If <code>csfrm</code> is not specified, the default is assumed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2950"></a>Comments</p>
<p>Reads a portion of a LOB or <code>BFILE</code> as specified by the call into a buffer. It is an error to try to read from a <code>NULL</code> LOB or <code>BFILE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you read or write LOBs, specify a character set form (<code>csfrm</code>) that matches the form of the locator itself.</div>
<p>For <code>BFILE</code>s, the operating system file must exist on the server, and it must have been opened by <a href="#i450949">OCILobFileOpen()</a> or <a href="#i493100">OCILobOpen()</a> using the input locator. Oracle Database must have permission to read the operating system file, and the user must have read permission on the directory object.</p>
<p>When you use the polling mode for <code>OCILobRead2()</code>, the first call must specify values for <code>offset</code> and <code>amtp</code>, but on subsequent polling calls to <code>OCILobRead2()</code>, you need not specify these values.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To terminate an <code>OCILobRead2()</code> operation and free the statement handle, use the <a href="oci17msc007.htm#i540487">OCIBreak()</a> call.</div>
<p>The following points apply to reading LOB data in streaming mode:</p>
<ul>
<li>
<p>When you use polling mode, be sure to specify the <code>char_amtp</code> and <code>byte_amtp</code> and offset parameters only in the first call to <code>OCILobRead2()</code>. On subsequent polling calls these parameters are ignored. If both <code>byte_amtp</code> and <code>char_amtp</code> are set to point to zero and <code>OCI_FIRST_PIECE</code> is passed, then polling mode is assumed and data is read till the end of the LOB. On output, <code>byte_amtp</code> gives the number of bytes read in the current piece. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>char_amtp</code> gives the number of characters read in the current piece.</p>
</li>
<li>
<p>When you use callbacks, the <code>len</code> parameter, which is input to the callback, indicates how many bytes are filled in the buffer. Check the <code>len</code> parameter during your callback processing, because the entire buffer cannot be filled with data.</p>
</li>
<li>
<p>When you use polling, look at the <code>byte_amtp</code> parameter to see how much the buffer is filled for the current piece. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>char_amtp</code> returns the number of characters read in the buffer as well.</p>
</li>
</ul>
<p>To read data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the c<code>sid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information about Unicode format</p>
</li>
<li>
<p><a class="olink ADLOB012" href="../../appdev.112/e18294/adlob_bfile_ops.htm#ADLOB012"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for a description of <code>BFILE</code>s</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#BCFDHCIG">"Polling Mode Operations in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2951"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i450493">OCILobFileSetName()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17215" class="refsect2"><a id="CHDHHGIC"></a>
<h2 class="refsect2"><a id="sthref2952"></a><a id="sthref2953"></a>OCILobSetContentType()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2954"></a>Purpose</p>
<p>Sets a content type string for the data in the SecureFile to something that can be used by an application.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2955"></a>Syntax</p>
<pre>
sword OCILobSetContentType ( OCIEnv        *envhp, 
                             OCISvcCtx     *svchp, 
                             OCIError      *errhp, 
                             OCILobLocator *lobp, 
                             const oratext *contenttypep, 
                             ub4           contenttypelen,
                             ub4           mode);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2956"></a>Parameters</p>
<dl>
<dt>envhp (IN)</dt>
<dd>
<p>The environment handle.</p>
</dd>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that can be passed to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>lobp (IN)</dt>
<dd>
<p>A LOB locator that uniquely references a LOB.</p>
</dd>
<dt>contenttypep (IN)</dt>
<dd>
<p>The <code>contenttype</code> to be set for the given LOB.</p>
</dd>
<dt>contenttypelen (IN)</dt>
<dd>
<p>The size of <code>contenttype</code> in bytes. The size must be less than or equal to <code>OCI_LOB_CONTENTTYPE_MAXSIZE</code> bytes.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>For future use. Pass zero now.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2957"></a>Comments</p>
<p>This function only works on SecureFiles. If <code>lobp</code> is not a SecureFile, then the error <code>SECUREFILE_WRONGTYPE</code> is returned. If <code>lobp</code> is buffered, a temporary LOB, or an abstract LOB, then the error <code>SECUREFILE_BADLOB</code> is returned.</p>
<p>The maximum possible size of the <code>ContentType</code> string is defined as:</p>
<pre>
#define OCI_LOB_CONTENTTYPE_MAXSIZE 128
</pre>
<p>The <code>ContentType</code> is ASCII (that is, 1-byte/7-bit UTF8).</p>
<p>To clear an existing <code>contenttype</code> set on a SecureFile, invoke <code>OCILobSetContentType()</code> with <code>contenttypep</code> set to (<code>oratext *)0</code> and <code>contenttypelen</code> set to <code>0</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2958"></a>Related Functions</p>
<p><a href="#CHDEHBCD">OCILobGetContentType()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17216" class="refsect2"><a id="CHDBDAAF"></a>
<h2 class="refsect2"><a id="sthref2959"></a>OCILobSetOptions()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2960"></a>Purpose</p>
<p>Enables option settings for a SecureFile LOB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2961"></a>Syntax</p>
<pre>
sword OCILobSetOptions ( OCISvcCtx       *svchp,
                         OCIError        *errhp,
                         OCILobLocator   *locp,
                         ub4             option_types,
                         void            *optionsp,
                         ub4             optionslen,
                         ub4             mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2962"></a>Parameters</p>
<dl>
<dt>svchp (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>The LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt>option_types (IN)</dt>
<dd>
<p>You can specify multiple option types and values by using the bit-wise inclusive OR ("|"). An error results if you specify an <code>option_types</code> value that is not enabled on the LOB column.</p>
<ul>
<li>
<p>Compression - <code>OCI_LOB_OPT_COMPRESS</code></p>
</li>
<li>
<p>Deduplication - <code>OCI_LOB_OPT_DEDUPLICATE</code></p>
</li>
</ul>
</dd>
<dt>optionsp (IN)</dt>
<dd>
<p>The possible settings are:</p>
<ul>
<li>
<p><code>OCI_LOB_OPT_COMPRESS_OFF</code></p>
</li>
<li>
<p><code>OCI_LOB_OPT_COMPRESS_ON</code></p>
</li>
<li>
<p><code>OCI_LOB_OPT_DEDUPLICATE_OFF</code></p>
</li>
<li>
<p><code>OCI_LOB_OPT_DEDUPLICATE_ON</code></p>
</li>
</ul>
</dd>
<dt>optionslen (IN)</dt>
<dd>
<p>The length of the value in <code>optionsp</code>. Note that the only valid length at this time is <code>sizeof(ub4)</code>.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>Reserved for future use. Pass in 0.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2963"></a>Related Functions</p>
<p><a href="#CHDEAJAB">OCILobGetOptions()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17218" class="refsect2"><a id="i578743"></a>
<h2 class="refsect2"><a id="sthref2964"></a>OCILobTrim2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2965"></a>Purpose</p>
<p>Truncates the LOB value to a shorter length. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2966"></a>Syntax</p>
<pre>
sword OCILobTrim2 ( OCISvcCtx       *svchp,
                    OCIError        *errhp,
                    OCILobLocator   *locp,
                    oraub8          newlen );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2967"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">newlen</span> (IN)</dt>
<dd>
<p>The new length of the LOB value, which must be less than or equal to the current length. For character LOBs, it is the number of characters; for binary LOBs and <code>BFILE</code>s, it is the number of bytes in the LOB.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2968"></a>Comments</p>
<p>This function trims the LOB data to a specified shorter length. The function returns an error if <code>newlen</code> is greater than the current LOB length. This function is valid only for internal LOBs. <code>BFILE</code>s are not allowed.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2969"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i578657">OCILobErase2()</a>, <a href="#i578743">OCILobTrim2()</a>, <a href="#i578761">OCILobWrite2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17221" class="refsect2"><a id="i578761"></a>
<h2 class="refsect2"><a id="sthref2970"></a>OCILobWrite2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2971"></a>Purpose</p>
<p>Writes a buffer into a LOB. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2972"></a>Syntax</p>
<pre>
sword OCILobWrite2 ( OCISvcCtx       *svchp,
                     OCIError        *errhp,
                     OCILobLocator   *locp,
                     oraub8          *byte_amtp,
                     oraub8          *char_amtp,
                     oraub8          offset,
                     void            *bufp, 
                     oraub8          buflen,
                     ub1             piece,
                     void            *ctxp, 
                     OCICallbackLobWrite2 (cbfp)
                                     (
                                       void     *ctxp,
                                       void     *bufp,
                                       oraub8   *lenp,
                                       ub1      *piecep
                                       void     **changed_bufpp,
                                       oraub8   *changed_lenp
                                     ) 
                     ub2             csid,
                     ub1             csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2973"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">byte_amtp</span> (IN/OUT)</dt>
<dd>
<p>IN - The number of bytes to write to the database. Always used for <code>BLOB</code>. For <code>CLOB</code> and <code>NCLOB</code> it is used only when <code>char_amtp</code> is zero.</p>
<p>OUT - The number of bytes written to the database. In polling mode, it is the length of the piece, in bytes, just written.</p>
</dd>
<dt>char_amtp (IN/OUT)</dt>
<dd>
<p>IN - The maximum number of characters to write to the database. Ignored for <code>BLOB</code>.</p>
<p>OUT - The number of characters written to the database. Undefined for <code>BLOB</code>. In polling mode, it is the length of the piece, in characters, just written.</p>
</dd>
<dt><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, it is the absolute offset from the beginning of the LOB value. For character LOBs, it is the number of characters from the beginning of the LOB; for binary LOBs, it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt><span class="bold">bufp</span> (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code>buflen</code>. Even if the data is being written in pieces using the polling method, <code>bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, <code>bufp</code> must not be used to provide data or an error results.</p>
</dd>
<dt><span class="bold">buflen</span> (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. This value differs from the <code>char_amtp</code> value for <code>CLOB</code>s and <code>NCLOB</code>s when the amount is specified in terms of characters using the <code>char_amtp</code> parameter, and the <code>buflen</code> parameter is specified in terms of bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This parameter assumes an 8-bit byte. If your operating system uses a longer byte, you must adjust the value of <code>buflen</code> accordingly.</div>
</dd>
<dt><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code>OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece.</p>
<p>The following other values are also possible for piecewise or callback mode: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, and <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code>NULL</code>, the standard polling method is used.</p>
<p>The callback function must return <code>OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece. This is the same as the <code>bufp</code> passed as an input to the <code>OCILobWrite()</code> routine.</p>
</dd>
<dt><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code>bufp</code> (OUT).</p>
</dd>
<dt><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code>OCI_NEXT_PIECE</code> or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>changed_bufpp (OUT)</dt>
<dd>
<p>The callback function can put the address of a new buffer if it prefers to use a new buffer for next piece to read. The default old buffer <code>bufp</code> is used if this parameter is set to <code>NULL</code>.</p>
</dd>
<dt>changed_lenp (OUT)</dt>
<dd>
<p>Length of the new buffer, if provided.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The character set ID of the data in the buffer. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
<ul>
<li>
<p><a id="sthref2974"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><a id="sthref2975"></a><code>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2976"></a>Comments</p>
<p>Writes a buffer into an internal LOB as specified. If LOB data exists, it is overwritten with the data stored in the buffer. The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you read or write LOBs, specify a character set form (<code>csfrm</code>) that matches the form of the locator itself.</div>
<p>When you use the polling mode for <code>OCILobWrite2()</code>, the first call must specify values for <code>offset</code>, <code>byte_amtp</code>, and <code>char_amtp</code>, but on subsequent polling calls to <code>OCILobWrite2()</code>, you need not specify these values.</p>
<p>If the value of the <code>piece</code> parameter is <code>OCI_FIRST_PIECE</code>, data may need to be provided through callbacks or polling.</p>
<p>If a callback function is defined in the <code>cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code>bufp</code>. If no callback function is defined, then <code>OCILobWrite2()</code> returns the <code>OCI_NEED_DATA</code> error code. The application must call <code>OCILobWrite2()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations.</p>
<p>A <code>piece</code> value of <code>OCI_LAST_PIECE</code> terminates the piecewise write, regardless of whether the polling or callback method is used.</p>
<p>If the amount of data passed to the database (through either input mechanism) is less than the amount specified by the <code>byte_amtp</code> or the <code>char_amtp</code> parameter, an ORA-22993 error is returned.</p>
<p>This function is valid for internal LOBs only. <code>BFILE</code>s are not allowed, because they are read-only. If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<p>If both <code>byte_amtp</code> and <code>char_amtp</code> are set to point to zero amount, and <code>OCI_FIRST_PIECE</code> is given as input, then polling mode is assumed and data is written until you specify <code>OCI_LAST_PIECE</code>. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>byte_amtp</code> and <code>char_amtp</code> return the data written by each piece in terms of number of bytes and number of characters respectively. For <code>BLOB</code>s, <code>byte_amtp</code> returns the number of bytes written by each piece, whereas <code>char_amtp</code> is undefined on output.</p>
<p><a id="sthref2977"></a>To write data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the <code>csid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information about Unicode format</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#BCFDHCIG">"Polling Mode Operations in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2978"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17224" class="refsect2"><a id="i578780"></a>
<h2 class="refsect2"><a id="sthref2979"></a>OCILobWriteAppend2()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2980"></a>Purpose</p>
<p>Writes data starting at the end of a LOB. This function must be used for LOBs of size greater than 4 GB. You can also use this function for LOBs smaller than 4 GB.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2981"></a>Syntax</p>
<pre>
sword OCILobWriteAppend2 ( OCISvcCtx           *svchp,
                           OCIError            *errhp,
                           OCILobLocator       *locp,
                           oraub8              *byte_amtp,
                           oraub8              *char_amtp,
                           void                *bufp, 
                           oraub8              buflen, 
                           ub1                 piece, 
                           void                *ctxp, 
                           OCICallbackLobWrite2 (cbfp)
                                         (
                                           void     *ctxp,
                                           void     *bufp,
                                           oraub8   *lenp,
                                           ub1      *piecep
                                           void     **changed_bufpp,
                                           oraub8   *changed_lenp
                                          ) 
                           ub2 csid, 
                           ub1 csfrm);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2982"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references a LOB.</p>
</dd>
<dt>byte_amtp (IN/OUT)</dt>
<dd>
<p>IN - The number of bytes to write to the database. Used for <code>BLOB</code>. For <code>CLOB</code> and <code>NCLOB</code> it is used only when <code>char_amtp</code> is zero.</p>
<p>OUT - The number of bytes written to the database.</p>
</dd>
<dt>char_amtp (IN/OUT)</dt>
<dd>
<p>IN - The maximum number of characters to write to the database. Ignored for <code>BLOB</code>.</p>
<p>OUT - The number of characters written to the database. Undefined for <code>BLOB</code>.</p>
</dd>
<dt>bufp (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code>buflen</code>. Even if the data is being written in pieces, <code>bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, <code>bufp</code> must not be used to provide data or an error results.</p>
</dd>
<dt>buflen (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. Note that this parameter assumes an 8-bit byte. If your operating system uses a longer byte, the value of <code>buflen</code> must be adjusted accordingly.</p>
</dd>
<dt>piece (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code>OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece. The following other values are also possible for piecewise or callback mode: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, and <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt>cbfp (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code>NULL</code>, the standard polling method is used. The callback function must return <code>OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt>bufp (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code>bufp</code> (OUT).</p>
</dd>
<dt><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code>OCI_NEXT_PIECE</code> or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>changed_bufpp (OUT)</dt>
<dd>
<p>The callback function can put the address of a new buffer if it prefers to use a new buffer for next piece to be written. The default old buffer <code>bufp</code> is used if this parameter is set to <code>NULL</code>.</p>
</dd>
<dt>changed_lenp (OUT)</dt>
<dd>
<p>Length of the new buffer, if provided.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The character set ID of the buffer data.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
<ul>
<li>
<p><a id="sthref2983"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><code><a id="sthref2984"></a>SQLCS_NCHA</code>R - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2985"></a>Comments</p>
<p>The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method. If the value of the piece parameter is <code>OCI_FIRST_PIECE</code>, data must be provided through callbacks or polling. If a callback function is defined in the <code>cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code>bufp</code>. If no callback function is defined, then <code>OCILobWriteAppend2()</code> returns the <code>OCI_NEED_DATA</code> error code.</p>
<p>The application must call <code>OCILobWriteAppend2()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations. A piece value of <code>OCI_LAST_PIECE</code> terminates the piecewise write.</p>
<p>The <code>OCILobWriteAppend2()</code> function is not supported if LOB buffering is enabled.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<p>If both <code>byte_amtp</code> and <code>char_amtp</code> are set to point to zero amount and <code>OCI_FIRST_PIECE</code> is given as input, then polling mode is assumed and data is written until you specify <code>OCI_LAST_PIECE</code>. For <code>CLOB</code>s and <code>NCLOB</code>s, <code>byte_amtp</code> and <code>char_amtp</code> return the data written by each piece in terms of number of bytes and number of characters respectively. For <code>BLOB</code>s, <code>byte_amtp</code> returns the number of bytes written by each piece whereas <code>char_amtp</code> is undefined on output.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444520">"Improving LOB Read/Write Performance"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2986"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i578721">OCILobRead2()</a>, <a href="#i428786">OCILobAppend()</a>, <a href="#i578816">OCILobCopy2()</a>, <a href="#i578761">OCILobWrite2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci17msc001.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci17msc003.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
