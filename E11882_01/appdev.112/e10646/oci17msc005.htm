<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Thread Management Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:33Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci17msc004.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci17msc006.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">32/79</span> <!-- End Header --><a id="i540465"></a>
<div id="LNOCI165" class="refsect1">
<h1 class="refsect1">Thread Management Functions<a id="sthref3134"></a></h1>
<p><a href="#CIHIBIJA">Table 17-5</a> lists the thread management functions that are described in this section.</p>
<div id="LNOCI17250" class="tblformalwide">
<p class="titleintable"><a id="sthref3135"></a><a id="CIHIBIJA"></a>Table 17-5 Thread Management Functions</p>
<table class="cellalignment1011" title="Thread Management Functions" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t59">Function</th>
<th class="cellalignment1012" id="r1c2-t59">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t59" headers="r1c1-t59">
<p><a href="#i532971">"OCIThreadClose()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t59 r1c2-t59">
<p>Close a thread handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t59" headers="r1c1-t59">
<p><a href="#i492914">"OCIThreadCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t59 r1c2-t59">
<p>Create a new thread</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t59" headers="r1c1-t59">
<p><a href="#i492918">"OCIThreadHandleGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t59 r1c2-t59">
<p>Retrieve the OCIThreadHandle of the thread in which it is called</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t59" headers="r1c1-t59">
<p><a href="#i492922">"OCIThreadHndDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t59 r1c2-t59">
<p>Destroy and deallocate the thread handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t59" headers="r1c1-t59">
<p><a href="#i492926">"OCIThreadHndInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t59 r1c2-t59">
<p>Allocate and initialize the thread handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t59" headers="r1c1-t59">
<p><a href="#i492930">"OCIThreadIdDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t59 r1c2-t59">
<p>Destroy and deallocate a thread ID</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t59" headers="r1c1-t59">
<p><a href="#i492934">"OCIThreadIdGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t59 r1c2-t59">
<p>Retrieve the <code>OCIThreadId</code> of the thread in which it is called</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t59" headers="r1c1-t59">
<p><a href="#i492938">"OCIThreadIdInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t59 r1c2-t59">
<p>Allocate and initialize the thread ID</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t59" headers="r1c1-t59">
<p><a href="#i492942">"OCIThreadIdNull()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t59 r1c2-t59">
<p>Determine whether a given <code>OCIThreadId</code> is the <code>NULL</code> thread ID</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t59" headers="r1c1-t59">
<p><a href="#i492946">"OCIThreadIdSame()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t59 r1c2-t59">
<p>Determine whether two <code>OCIThreadId</code>s represent the same thread</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t59" headers="r1c1-t59">
<p><a href="#i492950">"OCIThreadIdSet()"</a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t59 r1c2-t59">
<p>Set one <code>OCIThreadId</code> to another</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t59" headers="r1c1-t59">
<p><a href="#i492954">"OCIThreadIdSetNull()"</a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t59 r1c2-t59">
<p>Set the <code>NULL</code> thread ID to a given <code>OCIThreadId</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t59" headers="r1c1-t59">
<p><a href="#i492958">"OCIThreadInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t59 r1c2-t59">
<p>Initialize OCIThread context</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t59" headers="r1c1-t59">
<p><a href="#i492962">"OCIThreadIsMulti()"</a></p>
</td>
<td class="cellalignment1013" headers="r15c1-t59 r1c2-t59">
<p>Tell the caller whether the application is running in a multithreaded environment or a single-threaded environment</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t59" headers="r1c1-t59">
<p><a href="#i492966">"OCIThreadJoin()"</a></p>
</td>
<td class="cellalignment1013" headers="r16c1-t59 r1c2-t59">
<p>Allow the calling thread to join with another thread</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t59" headers="r1c1-t59">
<p><a href="#i492970">"OCIThreadKeyDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r17c1-t59 r1c2-t59">
<p>Destroy and deallocate the key pointed to by <code>key</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t59" headers="r1c1-t59">
<p><a href="#i492974">"OCIThreadKeyGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r18c1-t59 r1c2-t59">
<p>Get the calling thread's current value for a key</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t59" headers="r1c1-t59">
<p><a href="#i492978">"OCIThreadKeyInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r19c1-t59 r1c2-t59">
<p>Create a key</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t59" headers="r1c1-t59">
<p><a href="#i492982">"OCIThreadKeySet()"</a></p>
</td>
<td class="cellalignment1013" headers="r20c1-t59 r1c2-t59">
<p>Set the calling thread's value for a key</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t59" headers="r1c1-t59">
<p><a href="#i492986">"OCIThreadMutexAcquire()"</a></p>
</td>
<td class="cellalignment1013" headers="r21c1-t59 r1c2-t59">
<p>Acquire a mutex for the thread in which it is called</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t59" headers="r1c1-t59">
<p><a href="#i493050">"OCIThreadMutexDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r22c1-t59 r1c2-t59">
<p>Destroy and deallocate a mutex</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t59" headers="r1c1-t59">
<p><a href="#i493054">"OCIThreadMutexInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r23c1-t59 r1c2-t59">
<p>Allocate and initialize a mutex</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t59" headers="r1c1-t59">
<p><a href="#i493058">"OCIThreadMutexRelease()"</a></p>
</td>
<td class="cellalignment1013" headers="r24c1-t59 r1c2-t59">
<p>Release a mutex</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t59" headers="r1c1-t59">
<p><a href="#i493062">"OCIThreadProcessInit()"</a></p>
</td>
<td class="cellalignment1013" headers="r25c1-t59 r1c2-t59">
<p>Perform OCIThread process initialization</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t59" headers="r1c1-t59">
<p><a href="#i493066">"OCIThreadTerm()"</a></p>
</td>
<td class="cellalignment1013" headers="r26c1-t59 r1c2-t59">
<p>Release the OCIThread context</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI17251" class="refsect2"><a id="i532971"></a>
<h2 class="refsect2"><a id="sthref3136"></a>OCIThreadClose()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3137"></a>Purpose</p>
<p>Closes a thread handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3138"></a>Syntax</p>
<pre>
sword OCIThreadClose ( void             *hndl, 
                       OCIError         *err, 
                       OCIThreadHandle  *tHnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3139"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tHnd (IN/OUT)</dt>
<dd>
<p>The OCIThread thread handle to close.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3140"></a>Comments</p>
<p>The <code>tHnd</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>. Both the thread handle and the thread ID that was returned by the same call to <a href="#i492914">OCIThreadCreate()</a> are invalid after the call to <code>OCIThreadClose()</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3141"></a>Related Functions</p>
<p><a href="#i492914">OCIThreadCreate()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17252" class="refsect2"><a id="i492914"></a>
<h2 class="refsect2"><a id="sthref3142"></a>OCIThreadCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3143"></a>Purpose</p>
<p>Creates a new thread.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3144"></a>Syntax</p>
<pre>
sword OCIThreadCreate ( void             *hndl, 
                        OCIError         *err, 
                        void (*start)    (void *),
                        void             *arg, 
                        OCIThreadId      *tid, 
                        OCIThreadHandle  *tHnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3145"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>start (IN)</dt>
<dd>
<p>The function in which the new thread should begin execution.</p>
</dd>
<dt>arg (IN)</dt>
<dd>
<p>The argument to give the function pointed to by <code>start</code>.</p>
</dd>
<dt>tid (IN/OUT)</dt>
<dd>
<p>If not <code>NULL</code>, gets the ID for the new thread.</p>
</dd>
<dt>tHnd (IN/OUT)</dt>
<dd>
<p>If not <code>NULL</code>, gets the handle for the new thread.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3146"></a>Comments</p>
<p>The new thread starts by executing a call to the function pointed to by <code>start</code> with the argument given by <code>arg</code>. When that function returns, the new thread terminates. The function should not return a value and should accept one parameter, a <code>void</code>. The call to <code>OCIThreadCreate()</code> must be matched by a call to <a href="#i532971">OCIThreadClose()</a> if and only if <code>tHnd</code> is non-<code>NULL</code>.</p>
<p>If <code>tHnd</code> is <code>NULL</code>, a thread ID placed in <code>*tid</code> is not valid in the calling thread because the timing of the spawned threads termination is unknown.</p>
<p>The <code>tid</code> parameter should be initialized by <a href="#i492938">OCIThreadIdInit()</a> and <code>tHnd</code> should be initialized by <a href="#i492926">OCIThreadHndInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3147"></a>Related Functions</p>
<p><a href="#i532971">OCIThreadClose()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492926">OCIThreadHndInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17253" class="refsect2"><a id="i492918"></a>
<h2 class="refsect2"><a id="sthref3148"></a>OCIThreadHandleGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3149"></a>Purpose</p>
<p>Retrieves the <code>OCIThreadHandle</code> of the thread in which it is called.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3150"></a>Syntax</p>
<pre>
sword OCIThreadHandleGet ( void             *hndl,
                           OCIError         *err,
                           OCIThreadHandle  *tHnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3151"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tHnd (IN/OUT)</dt>
<dd>
<p>If not <code>NULL</code>, the location to place the thread handle for the thread.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3152"></a>Comments</p>
<p>The <code>tHnd</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>.</p>
<p>The thread handle <code>tHnd</code> retrieved by this function must be closed with <a href="#i532971">OCIThreadClose()</a> and destroyed by <a href="#i492922">OCIThreadHndDestroy()</a> after it is used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3153"></a>Related Functions</p>
<p><a href="#i492922">OCIThreadHndDestroy()</a>, <a href="#i492926">OCIThreadHndInit()</a>, <a href="#i532971">OCIThreadClose()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17254" class="refsect2"><a id="i492922"></a>
<h2 class="refsect2"><a id="sthref3154"></a>OCIThreadHndDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3155"></a>Purpose</p>
<p>Destroys and deallocates the thread handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3156"></a>Syntax</p>
<pre>
sword OCIThreadHndDestroy ( void             *hndl, 
                            OCIError         *err, 
                            OCIThreadHandle  **thnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3157"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>thnd (IN/OUT)</dt>
<dd>
<p>The address of pointer to the thread handle to destroy.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3158"></a>Comments</p>
<p>The <code>thnd</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3159"></a>Related Functions</p>
<p><a href="#i492918">OCIThreadHandleGet()</a>, <a href="#i492926">OCIThreadHndInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17255" class="refsect2"><a id="i492926"></a>
<h2 class="refsect2"><a id="sthref3160"></a>OCIThreadHndInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3161"></a>Purpose</p>
<p>Allocates and initializes the thread handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3162"></a>Syntax</p>
<pre>
sword OCIThreadHndInit ( void            *hndl, 
                         OCIError        *err,
                         OCIThreadHandle **thnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3163"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>thnd (OUT)</dt>
<dd>
<p>The address of the pointer to the thread handle to initialize.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3164"></a>Related Functions</p>
<p><a href="#i492918">OCIThreadHandleGet()</a>, <a href="#i492922">OCIThreadHndDestroy()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17256" class="refsect2"><a id="i492930"></a>
<h2 class="refsect2"><a id="sthref3165"></a>OCIThreadIdDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3166"></a>Purpose</p>
<p>Destroys and deallocates a thread ID.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3167"></a>Syntax</p>
<pre>
sword OCIThreadIdDestroy (void         *hndl,
                          OCIError     *err,
                          OCIThreadId  **tid );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3168"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid (IN/OUT)</dt>
<dd>
<p>Pointer to the thread ID to destroy.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3169"></a>Comments</p>
<p>The <code>tid</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3170"></a>Related Functions</p>
<p><a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17257" class="refsect2"><a id="i492934"></a>
<h2 class="refsect2"><a id="sthref3171"></a>OCIThreadIdGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3172"></a>Purpose</p>
<p>Retrieves the <code>OCIThreadId</code> of the thread in which it is called.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3173"></a>Syntax</p>
<pre>
sword OCIThreadIdGet ( void         *hndl,
                       OCIError     *err, 
                       OCIThreadId  *tid );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3174"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid (OUT)</dt>
<dd>
<p>This should point to the location in which to place the ID of the calling thread.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3175"></a>Comments</p>
<p>The <code>tid</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>. When OCIThread is used in a single-threaded environment, <code>OCIThreadIdGet()</code> always places the same value in the location pointed to by <code>tid</code>. The exact value itself is not important. The important thing is that it is different from the <code>NULL</code> thread ID and that it is always the same value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3176"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17258" class="refsect2"><a id="i492938"></a>
<h2 class="refsect2"><a id="sthref3177"></a>OCIThreadIdInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3178"></a>Purpose</p>
<p>Allocate and initialize the thread ID <code>tid</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3179"></a>Syntax</p>
<pre>
sword OCIThreadIdInit ( void         *hndl,
                        OCIError     *err, 
                        OCIThreadId  **tid );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3180"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid (OUT)</dt>
<dd>
<p>Pointer to the thread ID to initialize.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3181"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17259" class="refsect2"><a id="i492942"></a>
<h2 class="refsect2"><a id="sthref3182"></a>OCIThreadIdNull()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3183"></a>Purpose</p>
<p>Determines whether a given <code>OCIThreadId</code> is the <code>NULL</code> thread ID.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3184"></a>Syntax</p>
<pre>
sword OCIThreadIdNull ( void         *hndl, 
                        OCIError     *err, 
                        OCIThreadId  *tid, 
                        boolean      *result );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3185"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid (IN)</dt>
<dd>
<p>Pointer to the <code>OCIThreadId</code> to check.</p>
</dd>
<dt>result (IN/OUT)</dt>
<dd>
<p>Pointer to the result.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3186"></a>Comments</p>
<p>If <code>tid</code> is the <code>NULL</code> thread ID, <code>result</code> is set to <code>TRUE</code>. Otherwise, <code>result</code> is set to <code>FALSE</code>. The <code>tid</code> parameter should be initialized by <a href="#i492938">OCIThreadIdInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3187"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17260" class="refsect2"><a id="i492946"></a>
<h2 class="refsect2"><a id="sthref3188"></a>OCIThreadIdSame()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3189"></a>Purpose</p>
<p>Determines whether two <code>OCIThreadId</code>s represent the same thread.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3190"></a>Syntax</p>
<pre>
sword OCIThreadIdSame ( void          *hndl, 
                        OCIError      *err,
                        OCIThreadId   *tid1, 
                        OCIThreadId   *tid2, 
                        boolean       *result );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3191"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid1 (IN)</dt>
<dd>
<p>Pointer to the first <code>OCIThreadId</code>.</p>
</dd>
<dt>tid2 (IN)</dt>
<dd>
<p>Pointer to the second <code>OCIThreadId</code>.</p>
</dd>
<dt>result (IN/OUT)</dt>
<dd>
<p>Pointer to the result.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3192"></a>Comments</p>
<p>If <code>tid1</code> and <code>tid2</code> represent the same thread, <code>result</code> is set to <code>TRUE</code>. Otherwise, <code>result</code> is set to <code>FALSE</code>. The <code>result</code> parameter is set to <code>TRUE</code> if both <code>tid1</code> and <code>tid2</code> are the <code>NULL</code> thread ID. The parameters <code>tid1</code> and <code>tid2</code> should be initialized by <a href="#i492938">OCIThreadIdInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3193"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492950">OCIThreadIdSet()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17261" class="refsect2"><a id="i492950"></a>
<h2 class="refsect2"><a id="sthref3194"></a>OCIThreadIdSet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3195"></a>Purpose</p>
<p>Sets one <code>OCIThreadId</code> to another.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3196"></a>Syntax</p>
<pre>
sword OCIThreadIdSet ( void         *hndl,
                       OCIError     *err,
                       OCIThreadId  *tidDest, 
                       OCIThreadId  *tidSrc );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3197"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tidDest (OUT)</dt>
<dd>
<p>This should point to the location of the <code>OCIThreadId</code> to set to.</p>
</dd>
<dt>tidSrc (IN)</dt>
<dd>
<p>This should point to the <code>OCIThreadId</code> to set from.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3198"></a>Comments</p>
<p>The <code>tid</code> parameter should be initialized by <a href="#i492938">OCIThreadIdInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3199"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492954">OCIThreadIdSetNull()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17262" class="refsect2"><a id="i492954"></a>
<h2 class="refsect2"><a id="sthref3200"></a>OCIThreadIdSetNull()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3201"></a>Purpose</p>
<p>Sets the <code>NULL</code> thread ID to a given <code>OCIThreadId</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3202"></a>Syntax</p>
<pre>
sword OCIThreadIdSetNull ( void         *hndl,
                           OCIError     *err, 
                           OCIThreadId  *tid );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3203"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tid (OUT)</dt>
<dd>
<p>This should point to the <code>OCIThreadId</code> in which to put the <code>NULL</code> thread ID.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3204"></a>Comments</p>
<p>The <code>tid</code> parameter should be initialized by <a href="#i492938">OCIThreadIdInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3205"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17263" class="refsect2"><a id="i492958"></a>
<h2 class="refsect2"><a id="sthref3206"></a>OCIThreadInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3207"></a>Purpose</p>
<p>Initializes the OCIThread context.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3208"></a>Syntax</p>
<pre>
sword OCIThreadInit ( void      *hndl,
                      OCIError  *err );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3209"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3210"></a>Comments</p>
<p>It is illegal for OCIThread clients to try to examine the memory pointed to by the returned pointer. It is safe to make concurrent calls to <code>OCIThreadInit()</code>. Unlike <a href="#i493062">OCIThreadProcessInit()</a>, there is no need to have a first call that occurs before all the others.</p>
<p>The first time <code>OCIThreadInit()</code> is called, it initializes the OCIThread context. It also saves a pointer to the context in some system-dependent manner. Subsequent calls to <code>OCIThreadInit()</code> return the same context.</p>
<p>Each call to <code>OCIThreadInit()</code> must eventually be matched by a call to <a href="#i493066">OCIThreadTerm()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3211"></a>Related Functions</p>
<p><a href="#i493066">OCIThreadTerm()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17264" class="refsect2"><a id="i492962"></a>
<h2 class="refsect2"><a id="sthref3212"></a>OCIThreadIsMulti()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3213"></a>Purpose</p>
<p>Tells the caller whether the application is running in a multithreaded environment or a single-threaded environment.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3214"></a>Syntax</p>
<pre>
boolean OCIThreadIsMulti ( );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3215"></a>Returns</p>
<p><code>TRUE</code> if the environment is multithreaded.</p>
<p><code>FALSE</code> if the environment is single-threaded.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3216"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17265" class="refsect2"><a id="i492966"></a>
<h2 class="refsect2"><a id="sthref3217"></a>OCIThreadJoin()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3218"></a>Purpose</p>
<p>Allows the calling thread to join with another thread.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3219"></a>Syntax</p>
<pre>
sword OCIThreadJoin ( void             *hndl,
                      OCIError         *err, 
                      OCIThreadHandle  *tHnd );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3220"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tHnd (IN)</dt>
<dd>
<p>The <code>OCIThreadHandle</code> of the thread to join with.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3221"></a>Comments</p>
<p>This function blocks the caller until the specified thread terminates.</p>
<p>The <code>tHnd</code> parameter should be initialized by <a href="#i492926">OCIThreadHndInit()</a>. The result of multiple threads all trying to join with the same thread is undefined.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3222"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17266" class="refsect2"><a id="i492970"></a>
<h2 class="refsect2"><a id="sthref3223"></a>OCIThreadKeyDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3224"></a>Purpose</p>
<p>Destroys and deallocates the key pointed to by <code>key</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3225"></a>Syntax</p>
<pre>
sword OCIThreadKeyDestroy ( void          *hndl,
                            OCIError      *err, 
                            OCIThreadKey  **key );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3226"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>key (IN/OUT)</dt>
<dd>
<p>The <code>OCIThreadKey</code> in which to destroy the key.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3227"></a>Comments</p>
<p>This is different from the destructor function callback passed to the key create routine. The function <code>OCIThreadKeyDestroy()</code> is used to terminate any resources that the OCIThread acquired when it created <code>key</code>. The <code>OCIThreadKeyDestFunc</code> callback of <a href="#i492978">OCIThreadKeyInit()</a> is a key value destructor; it does not operate on the key itself.</p>
<p>This must be called after the user has finished using the key. Not calling the <code>OCIThreadKeyDestroy()</code> function may result in memory leaks.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3228"></a>Related Functions</p>
<p><a href="#i492974">OCIThreadKeyGet()</a>, <a href="#i492978">OCIThreadKeyInit()</a>, <a href="#i492982">OCIThreadKeySet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17267" class="refsect2"><a id="i492974"></a>
<h2 class="refsect2"><a id="sthref3229"></a>OCIThreadKeyGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3230"></a>Purpose</p>
<p>Gets the calling thread's current value for a key.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3231"></a>Syntax</p>
<pre>
sword OCIThreadKeyGet ( void          *hndl, 
                        OCIError      *err, 
                        OCIThreadKey  *key, 
                        void          **pValue );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3232"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>key (IN)</dt>
<dd>
<p>The key.</p>
</dd>
<dt>pValue (IN/OUT)</dt>
<dd>
<p>The location in which to place the thread-specific key value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3233"></a>Comments</p>
<p>It is illegal to use this function on a key that has not been created using <a href="#i492978">OCIThreadKeyInit()</a>.</p>
<p>If the calling thread has not yet assigned a value to the key, <code>NULL</code> is placed in the location pointed to by <code>pValue</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3234"></a>Related Functions</p>
<p><a href="#i492970">OCIThreadKeyDestroy()</a>, <a href="#i492978">OCIThreadKeyInit()</a>, <a href="#i492982">OCIThreadKeySet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17268" class="refsect2"><a id="i492978"></a>
<h2 class="refsect2"><a id="sthref3235"></a>OCIThreadKeyInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3236"></a>Purpose</p>
<p>Creates a key.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3237"></a>Syntax</p>
<pre>
sword OCIThreadKeyInit (void                  *hndl, 
                        OCIError              *err,
                        OCIThreadKey          **key,
                        OCIThreadKeyDestFunc  destFn );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3238"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>key (OUT)</dt>
<dd>
<p>The <code>OCIThreadKey</code> in which to create the new key.</p>
</dd>
<dt>destFn (IN)</dt>
<dd>
<p>The destructor for the key. <code>NULL</code> is permitted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3239"></a>Comments</p>
<p>Each call to this routine allocates and generates a new key that is distinct from all other keys. After this function executes successfully, a pointer to an allocated and initialized key is returned. That key can be used with <a href="#i492974">OCIThreadKeyGet()</a> and <a href="#i492982">OCIThreadKeySet()</a>. The initial value of the key is <code>NULL</code> for all threads.</p>
<p>It is illegal for this function to be called more than once with the same value for the <code>key</code> parameter.</p>
<p>If the <code>destFn</code> parameter is not <code>NULL</code>, the routine pointed to by <code>destFn</code> is called whenever a thread that has a non-<code>NULL</code> value for the key terminates. The routine is called with one parameter. The parameter is the key's value for the thread at the time at which the thread terminated. If the key does not need a destructor function, pass <code>NULL</code> for <code>destFn</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3240"></a>Related Functions</p>
<p><a href="#i492970">OCIThreadKeyDestroy()</a>, <a href="#i492974">OCIThreadKeyGet()</a>, <a href="#i492982">OCIThreadKeySet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17269" class="refsect2"><a id="i492982"></a>
<h2 class="refsect2"><a id="sthref3241"></a>OCIThreadKeySet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3242"></a>Purpose</p>
<p>Sets the calling thread's value for a key.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3243"></a>Syntax</p>
<pre>
sword OCIThreadKeySet ( void           *hndl,
                        OCIError       *err, 
                        OCIThreadKey   *key,
                        void           *value );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3244"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>key (IN/OUT)</dt>
<dd>
<p>The key.</p>
</dd>
<dt>value (IN)</dt>
<dd>
<p>The thread-specific value to set in the key.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3245"></a>Comments</p>
<p>It is illegal to use this function on a key that has not been created using <a href="#i492978">OCIThreadKeyInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3246"></a>Related Functions</p>
<p><a href="#i492970">OCIThreadKeyDestroy()</a>, <a href="#i492974">OCIThreadKeyGet()</a>, <a href="#i492978">OCIThreadKeyInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17270" class="refsect2"><a id="i492986"></a>
<h2 class="refsect2"><a id="sthref3247"></a>OCIThreadMutexAcquire()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3248"></a>Purpose</p>
<p>Acquires a mutex for the thread in which it is called.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3249"></a>Syntax</p>
<pre>
sword OCIThreadMutexAcquire ( void            *hndl,
                              OCIError        *err, 
                              OCIThreadMutex  *mutex );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3250"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mutex (IN/OUT)</dt>
<dd>
<p>The mutex to acquire.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3251"></a>Comments</p>
<p>If the mutex is held by another thread, the calling thread is blocked until it can acquire the mutex.</p>
<p>It is illegal to attempt to acquire an uninitialized mutex.</p>
<p>This function's behavior is undefined if it is used by a thread to acquire a mutex that is already held by that thread.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3252"></a>Related Functions</p>
<p><a href="#i493050">OCIThreadMutexDestroy()</a>, <a href="#i493054">OCIThreadMutexInit()</a>, <a href="#i493058">OCIThreadMutexRelease()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17271" class="refsect2"><a id="i493050"></a>
<h2 class="refsect2"><a id="sthref3253"></a>OCIThreadMutexDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3254"></a>Purpose</p>
<p>Destroys and deallocates a mutex.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3255"></a>Syntax</p>
<pre>
sword OCIThreadMutexDestroy ( void           *hndl, 
                              OCIError       *err, 
                              OCIThreadMutex **mutex );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3256"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mutex (IN/OUT)</dt>
<dd>
<p>The mutex to destroy.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3257"></a>Comments</p>
<p>Each mutex must be destroyed after it is no longer needed.</p>
<p>It is not legal to destroy a mutex that is uninitialized or is currently held by a thread. The destruction of a mutex must not occur concurrently with any other operations on the mutex. A mutex must not be used after it has been destroyed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3258"></a>Related Functions</p>
<p><a href="#i492986">OCIThreadMutexAcquire()</a>, <a href="#i493054">OCIThreadMutexInit()</a>, <a href="#i493058">OCIThreadMutexRelease()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17272" class="refsect2"><a id="i493054"></a>
<h2 class="refsect2"><a id="sthref3259"></a>OCIThreadMutexInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3260"></a>Purpose</p>
<p>Allocates and initializes a mutex.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3261"></a>Syntax</p>
<pre>
sword OCIThreadMutexInit ( void            *hndl,
                           OCIError        *err, 
                           OCIThreadMutex  **mutex );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3262"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mutex (OUT)</dt>
<dd>
<p>The mutex to initialize.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3263"></a>Comments</p>
<p>All mutexes must be initialized before use.</p>
<p>Multiple threads must not initialize the same mutex simultaneously. Also, a mutex must not be reinitialized until it has been destroyed (see <code><a href="#i493050">OCIThreadMutexDestroy()</a></code>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3264"></a>Related Functions</p>
<p><a href="#i493050">OCIThreadMutexDestroy()</a>, <a href="#i492986">OCIThreadMutexAcquire()</a>, <a href="#i493058">OCIThreadMutexRelease()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17273" class="refsect2"><a id="i493058"></a>
<h2 class="refsect2"><a id="sthref3265"></a>OCIThreadMutexRelease()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3266"></a>Purpose</p>
<p>Releases a mutex.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3267"></a>Syntax</p>
<pre>
sword OCIThreadMutexRelease ( void            *hndl,
                              OCIError        *err, 
                              OCIThreadMutex  *mutex );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3268"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>mutex (IN/OUT)</dt>
<dd>
<p>The mutex to release.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3269"></a>Comments</p>
<p>If there are any threads blocked on the mutex, one of them acquires it and becomes unblocked.</p>
<p>It is illegal to attempt to release an uninitialized mutex. It is also illegal for a thread to release a mutex that it does not hold.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3270"></a>Related Functions</p>
<p><a href="#i493050">OCIThreadMutexDestroy()</a>, <a href="#i493054">OCIThreadMutexInit()</a>, <a href="#i492986">OCIThreadMutexAcquire()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17274" class="refsect2"><a id="i493062"></a>
<h2 class="refsect2"><a id="sthref3271"></a>OCIThreadProcessInit()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3272"></a>Purpose</p>
<p>Performs OCIThread process initialization.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3273"></a>Syntax</p>
<pre>
void OCIThreadProcessInit ( );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3274"></a>Comments</p>
<p>Whether this function must be called depends on how OCIThread is going to be used.</p>
<p>In a single-threaded application, calling this function is optional. If it is called at all, the first call to it must occur before calls to any other OCIThread functions. Subsequent calls can be made without restriction; they do not have any effect.</p>
<p>In a multithreaded application, this function must be called. The first call to it must occur strictly before any other OCIThread calls; that is, no other calls to OCIThread functions (including other calls to this one) can be concurrent with the first call.</p>
<p>Subsequent calls to this function can be made without restriction; they do not have any effect.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3275"></a>Related Functions</p>
<p><a href="#i492930">OCIThreadIdDestroy()</a>, <a href="#i492934">OCIThreadIdGet()</a>, <a href="#i492938">OCIThreadIdInit()</a>, <a href="#i492942">OCIThreadIdNull()</a>, <a href="#i492946">OCIThreadIdSame()</a>, <a href="#i492950">OCIThreadIdSet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17275" class="refsect2"><a id="i493066"></a>
<h2 class="refsect2"><a id="sthref3276"></a>OCIThreadTerm()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3277"></a>Purpose</p>
<p>Releases the OCIThread context.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3278"></a>Syntax</p>
<pre>
sword OCIThreadTerm ( void      *hndl, 
                      OCIError  *err );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3279"></a>Parameters</p>
<dl>
<dt>hndl (IN/OUT)</dt>
<dd>
<p>The OCI environment or user session handle.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error and <code>OCI_ERROR</code> is returned, the error is recorded in <code>err</code> and diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3280"></a>Comments</p>
<p>This function should be called exactly once for each call made to <a href="#i492958">OCIThreadInit()</a>.</p>
<p>It is safe to make concurrent calls to <code>OCIThreadTerm()</code>. <code>OCIThreadTerm()</code> does not do anything until it has been called as many times as <a href="#i492958">OCIThreadInit()</a> has been called. When that happens, <code>OCIThreadTerm()</code> terminates the OCIThread layer and frees the memory allocated for the context. Once this happens, the context should not be reused. It is necessary to obtain a new one by calling <a href="#i492958">OCIThreadInit()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3281"></a>Related Functions</p>
<p><a href="#i492958">OCIThreadInit()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci17msc004.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci17msc006.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
