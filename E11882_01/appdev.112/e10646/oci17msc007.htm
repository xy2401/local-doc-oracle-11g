<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Miscellaneous Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci17msc006.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci18nav.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">34/79</span> <!-- End Header --><a id="CIHCAFDD"></a>
<div id="LNOCI167" class="refsect1">
<h1 class="refsect1">Miscellaneous Functions<a id="sthref3328"></a></h1>
<p><a href="#CIHHAGJA">Table 17-7</a> lists the miscellaneous OCI functions that are described in this section.</p>
<div id="LNOCI17284" class="tblformalwide">
<p class="titleintable"><a id="sthref3329"></a><a id="CIHHAGJA"></a>Table 17-7 Miscellaneous Functions</p>
<table class="cellalignment1011" title="Miscellaneous Functions" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t63">Function</th>
<th class="cellalignment1012" id="r1c2-t63">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t63" headers="r1c1-t63">
<p><a href="#i540487">"OCIBreak()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t63 r1c2-t63">
<p>Perform an immediate asynchronous break</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t63" headers="r1c1-t63">
<p><a href="#BJFIBFAI">"OCIClientVersion()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t63 r1c2-t63">
<p>Return the client library version</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t63" headers="r1c1-t63">
<p><a href="#i540516">"OCIErrorGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t63 r1c2-t63">
<p>Return error message and Oracle error</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t63" headers="r1c1-t63">
<p><a href="#i540561">"OCILdaToSvcCtx()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t63 r1c2-t63">
<p>Toggle <code>Lda_Def</code> to service context handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t63" headers="r1c1-t63">
<p><a href="#i573853">"OCIPasswordChange()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t63 r1c2-t63">
<p>Change password</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t63" headers="r1c1-t63">
<p><a href="#BABIFFIC">"OCIPing()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t63 r1c2-t63">
<p>Confirm that the connection and the server are active</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t63" headers="r1c1-t63">
<p><a href="#i540646">"OCIReset()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t63 r1c2-t63">
<p>Call after <code>OCIBreak()</code> to reset asynchronous operation and protocol</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t63" headers="r1c1-t63">
<p><a href="#i566891">"OCIRowidToChar()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t63 r1c2-t63">
<p>Convert a Universal <code>ROWID</code> to character extended (base 64) representation</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t63" headers="r1c1-t63">
<p><a href="#i540674">"OCIServerRelease()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t63 r1c2-t63">
<p>Get the Oracle release string</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t63" headers="r1c1-t63">
<p><a href="#CHDEGCCB">"OCIServerVersion()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t63 r1c2-t63">
<p>Get the Oracle version string</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t63" headers="r1c1-t63">
<p><a href="#i540717">"OCISvcCtxToLda()"</a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t63 r1c2-t63">
<p>Toggle service context handle to <code>Lda_Def</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t63" headers="r1c1-t63">
<p><a href="#i491405">"OCIUserCallbackGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t63 r1c2-t63">
<p>Identify the callback that is registered for handle</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t63" headers="r1c1-t63">
<p><a href="#i523285">"OCIUserCallbackRegister()"</a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t63 r1c2-t63">
<p>Register a user-created callback function</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI17285" class="refsect2"><a id="i540487"></a>
<h2 class="refsect2">OCIBreak()<a id="sthref3330"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3331"></a>Purpose</p>
<p>Performs an immediate (asynchronous) termination of any currently executing OCI function that is associated with a server.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3332"></a>Syntax</p>
<pre>
sword OCIBreak ( void       *hndlp,
                 OCIError   *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3333"></a>Parameters</p>
<dl>
<dt><span class="bold">hndlp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle or the server context handle.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3334"></a>Comments</p>
<p>This call performs an immediate (asynchronous) termination of any currently executing OCI function that is associated with a server. It is normally used to stop a long-running OCI call being processed on the server. It can be called by a user thread in multithreaded applications, or by a user signal handler on Linux or UNIX systems. <code>OCIBreak()</code> is the only OCI call allowed in a user signal handler.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>OCIBreak()</code> works on Windows systems, including Windows 2000 and Windows XP.</div>
<p>This call can take either the service context handle or the server context handle as a parameter to identify the function to be terminated.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="ociaahan.htm#i429949">"Server Handle Attributes"</a></p>
</li>
<li>
<p><a href="oci02bas.htm#CHDDFAHG">"Nonblocking Mode in OCI"</a></p>
</li>
<li>
<p><a href="oci02bas.htm#i464495">"Canceling Calls"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3335"></a>Related Functions</p>
<p><a href="#i540646">OCIReset()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17286" class="refsect2"><a id="BJFIBFAI"></a>
<h2 class="refsect2"><a id="sthref3336"></a>OCIClientVersion()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3337"></a>Purpose</p>
<p>Returns the 5 digit Oracle Database version number of the client library at run time.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3338"></a>Syntax</p>
<pre>
void OCIClientVersion ( sword        *major_version, 
                        sword        *minor_version, 
                        sword        *update_num,
                        sword        *patch_num,
                        sword        *port_update_num );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3339"></a>Parameters</p>
<dl>
<dt>major_version (OUT)</dt>
<dd>
<p>The major version.</p>
</dd>
<dt>minor_version (OUT)</dt>
<dd>
<p>The minor version.</p>
</dd>
<dt><span class="bold">update_num</span> (OUT)</dt>
<dd>
<p>The update number.</p>
</dd>
<dt>patch_num (OUT)</dt>
<dd>
<p>The patch number that was applied to the library.</p>
</dd>
<dt>port_update_num (OUT)</dt>
<dd>
<p>The port-specific patch applied to the library.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3340"></a>Comments</p>
<p><code>OCIClientVersion()</code> returns the version of OCI client that the application is running with. This is useful for the application to know at run time. An application or a test program can determine the version and the patch set of a particular OCI client installation by calling this function. This is also useful if the application wants to have different codepaths depending upon the level of the client patchset.</p>
<p>In addition to <code>OCIClientVersion()</code> there are two macros defined: <a id="sthref3341"></a><code>OCI_MAJOR_VERSION</code> and <code><a id="sthref3342"></a>OCI_MINOR_VERSION</code>. These are useful for writing a generic application that can be built and run with different versions of OCI client. For example:</p>
<pre>
....
#if (OCI_MAJOR_VERSION &gt; 9)
...
#endif
....
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3343"></a>Related Functions</p>
<p><a href="#i540674">OCIServerRelease()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17287" class="refsect2"><a id="i540516"></a>
<h2 class="refsect2">OCIErrorGet()<a id="sthref3344"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3345"></a>Purpose</p>
<p>Returns an error message in the buffer provided and an Oracle Database error code.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3346"></a>Syntax</p>
<pre>
sword OCIErrorGet ( void       *hndlp, 
                    ub4        recordno,
                    OraText    *sqlstate,
                    sb4        *errcodep, 
                    OraText    *bufp,
                    ub4        bufsiz,
                    ub4        type );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3347"></a>Parameters</p>
<dl>
<dt><span class="bold">hndlp</span> (IN)</dt>
<dd>
<p>The error handle, usually, or the environment handle (for errors on <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a>).</p>
</dd>
<dt><span class="bold">recordno</span> (IN)</dt>
<dd>
<p>Indicates the status record from which the application seeks information. Starts from 1.</p>
</dd>
<dt><span class="bold">sqlstate</span> (OUT)</dt>
<dd>
<p>Not supported in release 8.x or later.</p>
</dd>
<dt><span class="bold">errcodep</span> (OUT)</dt>
<dd>
<p>The error code returned.</p>
</dd>
<dt><span class="bold">bufp</span> (OUT)</dt>
<dd>
<p>The error message text returned.</p>
</dd>
<dt><span class="bold">bufsiz</span> (IN)</dt>
<dd>
<p>The size of the buffer provided for the error message, in number of bytes. If the error message length is more than <code>bufsiz</code>, a truncated error message text is returned in <code>bufp</code>.</p>
<p>If <code>type</code> is set to <code>OCI_HTYPE_ERROR</code>, then the return code during truncation for OCIErrorGet() is <code>OCI_ERROR</code>. The client can then specify a bigger buffer and call OCIErrorGet() again.</p>
<p>If <code>bufsiz</code> is sufficient to hold the entire message text and the message could be successfully copied into <code>bufp</code>, the return code for OCIErrorGet() is <code>OCI_SUCCESS.</code></p>
</dd>
<dt><span class="bold">type</span> (IN)</dt>
<dd>
<p>The type of the handle (<code>OCI_HTYPE_ERROR</code> or <code>OCI_HTYPE_ENV</code>).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3348"></a>Comments</p>
<p>This function does not support SQL statements. Usually, <code>hndlp</code> is actually the error handle, or the environment handle. You should always get the message in the encoding that was set in the environment handle. This function can be called multiple times if there are multiple diagnostic records for an error.</p>
<p>Note that OCIErrorGet() must not be called when the return code is <code>OCI_SUCCESS</code>. Otherwise, an error message from a previously executed statement is found by <code>OCIErrorGet()</code>.</p>
<p>The error handle is originally allocated with a call to <code>OCIHandleAlloc()</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Multiple diagnostic records can be retrieved by calling <code>OCIErrorGet()</code> repeatedly until there are no more records (<code>OCI_NO_DATA</code> is returned). <code>OCIErrorGet()</code> returns at most a single diagnostic record.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci02bas.htm#i462233">"Error Handling in OCI"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3349"></a>Example</p>
<p><a id="sthref3350"></a><a id="sthref3351"></a><a href="#CIHJJDJB">Example 17-6</a> shows a simplified example of a function for error checking using <code>OCIErrorGet()</code>.</p>
<div id="LNOCI18348" class="example">
<p class="titleinexample"><a id="CIHJJDJB"></a>Example 17-6 Using OCIErrorGet() for Error Checking</p>
<pre>
static void checkerr(OCIError *errhp, sword status)
{
  text errbuf[512];
  ub4 buflen;
  sb4 errcode;

  if (status == OCI_SUCCESS) return;

  switch (status)
  {
  case OCI_SUCCESS_WITH_INFO:
    printf("Error - OCI_SUCCESS_WITH_INFO\n");
    OCIErrorGet ((void  *) errhp, (ub4) 1, (text *) NULL, &amp;errcode,
            errbuf, (ub4) sizeof(errbuf), (ub4) OCI_HTYPE_ERROR);
    printf("Error - %s\n", errbuf);
    break;
  case OCI_NEED_DATA:
    printf("Error - OCI_NEED_DATA\n");
    break;
  case OCI_NO_DATA:
    printf("Error - OCI_NO_DATA\n");
    break;
  case OCI_ERROR:
    OCIErrorGet ((void  *) errhp, (ub4) 1, (text *) NULL, &amp;errcode,
            errbuf, (ub4) sizeof(errbuf), (ub4) OCI_HTYPE_ERROR);
    printf("Error - %s\n", errbuf);
    break;
  case OCI_INVALID_HANDLE:
    printf("Error - OCI_INVALID_HANDLE\n");
    break;
  case OCI_STILL_EXECUTING:
    printf("Error - OCI_STILL_EXECUTING\n");
    break;
  case OCI_CONTINUE:
    printf("Error - OCI_CONTINUE\n");
    break;
  default:
    printf("Error - %d\n", status);
    break;
  }
}
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3352"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i540847">OCIHandleAlloc()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17288" class="refsect2"><a id="i540561"></a>
<h2 class="refsect2">OCILdaToSvcCtx()<a id="sthref3353"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3354"></a>Purpose</p>
<p>Converts a V7 <code>Lda_Def</code> to a V8 or later service context handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3355"></a>Syntax</p>
<pre>
sword OCILdaToSvcCtx ( OCISvcCtx  **svchpp,
                       OCIError   *errhp,
                       Lda_Def    *ldap );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3356"></a>Parameters</p>
<dl>
<dt><span class="bold">svchpp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">ldap</span> (IN/OUT)</dt>
<dd>
<p>The Oracle7 logon data area returned by <code>OCISvcCtxToLda()</code> from this service context.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3357"></a>Comments</p>
<p>Converts an Oracle7 <code>Lda_Def</code> to a release 8 or later service context handle. The action of this call can be reversed by passing the resulting service context handle to the <code>OCISvcCtxToLda()</code> function.</p>
<p>You should use the <code>OCILdaToSvcCtx()</code> call only for resetting an <code>Lda_Def</code> obtained from <code>OCISvcCtxToLda()</code> back to a service context handle. It cannot be used to transform an <code>Lda_def</code> that started as an <code>Lda_def</code> back to a service context handle.</p>
<p>If the service context has been converted to an <code>Lda_Def</code>, only Oracle7 calls can be used. It is illegal to make OCI release 8 or later calls without first resetting the <code>Lda_Def</code> to a service context.</p>
<p>The <code>OCI_ATTR_IN_V8_MODE</code> attribute of the server handle or service context handle enables an application to determine whether the application is currently in Oracle release 7 mode or Oracle release 8 or later mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i442199">Appendix A, "Handle and Descriptor Attributes"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3358"></a>Related Functions</p>
<p><a href="#i540717">OCISvcCtxToLda()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17289" class="refsect2"><a id="i573853"></a>
<h2 class="refsect2">OCIPasswordChange()<a id="sthref3359"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3360"></a>Purpose</p>
<p>Allows the password of an account to be changed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3361"></a>Syntax</p>
<pre>
sword OCIPasswordChange ( OCISvcCtx     *svchp,
                          OCIError      *errhp,
                          const OraText *user_name,
                          ub4           usernm_len,
                          const OraText *opasswd,
                          ub4           opasswd_len,
                          const OraText *npasswd,
                          sb4           npasswd_len,
                          ub4           mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3362"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>A handle to a service context. The service context handle must be initialized and have a server context handle associated with it.</p>
</dd>
<dt><span class="bold">errhp</span> (IN)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">user_name</span> (IN)</dt>
<dd>
<p>Specifies the user name, which can be in UTF-16 encoding. It must be terminated with a <code>NULL</code> character if the service context has been initialized with an authentication handle.</p>
</dd>
<dt><span class="bold">usernm_len</span> (IN)</dt>
<dd>
<p>The length of the user name string specified in <code>user_name</code>, in number of bytes regardless of the encoding. The <code>usernm_len</code> value must be nonzero.</p>
</dd>
<dt><span class="bold">opasswd</span> (IN)</dt>
<dd>
<p>Specifies the user's old password, which can be in UTF-16 encoding.</p>
</dd>
<dt><span class="bold">opasswd_len</span> (IN)</dt>
<dd>
<p>The length of the old password string specified in <code>opasswd</code>, in bytes. The <code>opasswd_len</code> value must be nonzero.</p>
</dd>
<dt><span class="bold">npasswd</span> (IN)</dt>
<dd>
<p>Specifies the user's new password, which can be in UTF-16 encoding. If the password complexity verification routine is specified in the user's profile to verify the new password's complexity, the new password must meet the complexity requirements of the verification function.</p>
</dd>
<dt><span class="bold">npasswd_len</span> (IN)</dt>
<dd>
<p>The length in bytes of the new password string specified in <code>npasswd</code>. For a valid password string, <code>npasswd_len</code> must be nonzero.</p>
</dd>
<dt><span class="bold">mode (IN)</span></dt>
<dd>
<p><code>OCI_DEFAULT</code> - Use the setting in the environment handle.</p>
<ul>
<li>
<p><code>OCI_UTF16</code> - Use UTF-16 encoding, regardless of the setting of the environment handle.</p>
<p>There is only one encoding allowed, either UTF-16 or not, for <code>user_name</code>, <code>opasswd</code>, and <code>npasswd</code>.</p>
</li>
<li>
<p><code>OCI_AUTH</code> - If a user session context is not created, a call with this flag creates the user session context and changes the password. At the end of the call, the user session context is not cleared. Hence the user remains logged in.</p>
<p>If the user session context is created, a call with this flag only changes the password and has no effect on the session. Hence the user still remains logged in.</p>
</li>
</ul>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3363"></a>Comments</p>
<p>This call allows the password of an account to be changed. This call is similar to <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> with the following differences:</p>
<ul>
<li>
<p>If the user session is established, this call authenticates the account using the old password and then changes the password to the new password.</p>
</li>
<li>
<p>If the user session is not established, this call establishes a user session and authenticates the account using the old password, and then changes the password to the new password.</p>
</li>
</ul>
<p>This call is useful when the password of an account has expired and <a href="oci16rel001.htm#i556608">OCISessionBegin()</a> returns an error (ORA-28001) or warning that indicates that the password has expired.</p>
<p>The <code>mode</code> or the environment handle determines if UTF-16 is being used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3364"></a>Related Functions</p>
<p><a href="oci16rel001.htm#i556608">OCISessionBegin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17290" class="refsect2"><a id="BABIFFIC"></a>
<h2 class="refsect2"><a id="sthref3365"></a>OCIPing()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3366"></a>Purpose</p>
<p>Makes a round-trip call to the server to confirm that the connection and the server are active.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3367"></a>Syntax</p>
<pre>
sword OCIPing ( OCISvcCtx     *svchp,
                OCIError      *errhp,
                ub4           mode );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3368"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN)</dt>
<dd>
<p>A handle to a service context. The service context handle must be initialized and have a server context handle associated with it.</p>
</dd>
<dt><span class="bold">errhp</span> (IN)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>mode (IN)</dt>
<dd>
<p>The mode for the call. Use <code>OCI_DEFAULT</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3369"></a>Comments</p>
<p><code>OCIPing()</code> makes a dummy round-trip call to the server; that is, a dummy packet is sent to the server for response. <code>OCIPing()</code> returns after the round-trip is completed. No server operation is performed for this call itself.</p>
<p>You can use <code>OCIPing()</code> to make a lightweight call to the server. A successful return of the call indicates that the connection and server are active. If the call blocks, the connection may be in use by other threads. If it fails, there may be some problem with the connection or the server, and the error can be retrieved from the error handle. Because <code>OCIPing()</code> is a round-trip call, you can also use it to flush all the pending OCI client-side calls to the server, if any exist. For example, calling <code>OCIPing()</code> after <a href="oci16rel002.htm#i540911">OCIHandleFree()</a> can force the execution of the pending call to close back-end cursors. The call is useful when the application requires the back-end cursors to be closed immediately.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3370"></a>Related Functions</p>
<p><a href="oci16rel002.htm#i540911">OCIHandleFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17291" class="refsect2"><a id="i540646"></a>
<h2 class="refsect2">OCIReset()<a id="sthref3371"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3372"></a>Purpose</p>
<p>Resets the interrupted asynchronous operation and protocol. Must be called if an <a href="#i540487">OCIBreak()</a> call was issued while a nonblocking operation was in progress.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3373"></a>Syntax</p>
<pre>
sword OCIReset ( void       *hndlp,
                 OCIError   *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3374"></a>Parameters</p>
<dl>
<dt>hndlp (IN)</dt>
<dd>
<p>The service context handle or the server context handle.</p>
</dd>
<dt>errhp (IN)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3375"></a>Comments</p>
<p>This call is called in nonblocking mode only. It resets the interrupted asynchronous operation and protocol. OCIReset() must be called if an <a href="#i540487">OCIBreak()</a> call was issued while a nonblocking operation was in progress.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3376"></a>Related Functions</p>
<p><a href="#i540487">OCIBreak()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17292" class="refsect2"><a id="i566891"></a>
<h2 class="refsect2"><a id="sthref3377"></a>OCIRowidToChar()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3378"></a>Purpose</p>
<p>Converts a Universal <code>ROWID</code> to character extended (base 64) representation.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3379"></a>Syntax</p>
<pre>
sword OCIRowidToChar ( OCIRowid      *rowidDesc,
                       OraText       *outbfp,
                       ub2           *outbflp
                       OCIError      *errhp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3380"></a>Parameters</p>
<dl>
<dt>rowidDesc (IN)</dt>
<dd>
<p>The <code>ROWID</code> descriptor that is allocated by <a href="oci16rel002.htm#i540763">OCIDescriptorAlloc()</a> and populated by a prior execution of a SQL statement.</p>
</dd>
<dt>outbfp (OUT)</dt>
<dd>
<p>Pointer to the buffer where the character representation is stored after successful execution of this call.</p>
</dd>
<dt>outbflp (IN/OUT)</dt>
<dd>
<p>Pointer to the output buffer length. Before execution, the buffer length contains the size of <code>outbfp</code>. After execution it contains the number of bytes converted.</p>
<p>If there is truncation during conversion, <code>outbfp</code> contains the length required to make conversion successful. An error is also returned.</p>
</dd>
<dt>errhp (IN)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3381"></a>Comments</p>
<p>After this conversion, the <code>ROWID</code> in character format can be bound with the <a href="oci16rel003.htm#i456224">OCIBindByPos()</a> or <a href="oci16rel003.htm#i456223">OCIBindByName()</a> calls, and used to query a row at the given <code>ROWID</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17293" class="refsect2"><a id="i540674"></a>
<h2 class="refsect2"><a id="sthref3382"></a>OCIServerRelease()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3383"></a>Purpose</p>
<p>Returns the Oracle Database release string.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3384"></a>Syntax</p>
<pre>
sword OCIServerRelease ( void         *hndlp, 
                         OCIError     *errhp, 
                         OraText      *bufp,
                         ub4          bufsz
                         ub1          hndltype 
                         ub4          *version );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3385"></a>Parameters</p>
<dl>
<dt><span class="bold">hndlp</span> (IN)</dt>
<dd>
<p>The service context handle or the server context handle.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>The buffer in which the release string is returned.</p>
</dd>
<dt><span class="bold">bufsz</span> (IN)</dt>
<dd>
<p>The length of the buffer in number of bytes.</p>
</dd>
<dt>hndltype (IN)</dt>
<dd>
<p>The type of handle passed to the function.</p>
</dd>
<dt>version (IN/OUT)</dt>
<dd>
<p>The release string in integer format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3386"></a>Comments</p>
<p>The buffer pointer <code>bufp</code> points to the release information in a string representation up to the <code>bufsz</code> including the <code>NULL</code> terminator. If the buffer size is too small, the result is truncated to the size <code>bufsz</code>. The <code>version</code> argument contains the 5-digit Oracle Database release string in integer format, which can be retrieved using the following macros:</p>
<pre>
#define MAJOR_NUMVSN(v) ((sword)(((v) &gt;&gt; 24) &amp; 0x000000FF))      /* version number */ 
#define MINOR_NUMRLS(v) ((sword)(((v) &gt;&gt; 20) &amp; 0x0000000F))      /* release number */
#define UPDATE_NUMUPD(v) ((sword)(((v) &gt;&gt; 12) &amp; 0x000000FF))     /* update number */ 
#define PORT_REL_NUMPRL(v) ((sword)(((v) &gt;&gt; 8) &amp; 0x0000000F))    /* port release number */ 
#define PORT_UPDATE_NUMPUP(v) ((sword)(((v) &gt;&gt; 0) &amp; 0x000000FF)) /* port update number */
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3387"></a>Related Functions</p>
<p><a href="#CHDEGCCB">OCIServerVersion()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17294" class="refsect2"><a id="CHDEGCCB"></a>
<h2 class="refsect2"><a id="sthref3388"></a>OCIServerVersion()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3389"></a>Purpose</p>
<p>Returns the Oracle Database version string.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3390"></a>Syntax</p>
<pre>
sword OCIServerVersion ( void         *hndlp, 
                         OCIError     *errhp, 
                         OraText      *bufp,
                         ub4          bufsz
                         ub1          hndltype );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3391"></a>Parameters</p>
<dl>
<dt><span class="bold">hndlp</span> (IN)</dt>
<dd>
<p>The service context handle or the server context handle.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>The buffer in which the version information is returned.</p>
</dd>
<dt><span class="bold">bufsz</span> (IN)</dt>
<dd>
<p>The length of the buffer in number of bytes.</p>
</dd>
<dt>hndltype (IN)</dt>
<dd>
<p>The type of handle passed to the function.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3392"></a>Comments</p>
<p>This call returns the version string of Oracle Database. It can be in Unicode if the environment handle so determines.</p>
<p>For example, the following is returned in <code>bufp</code> as the version string if an application is running on an 8.1.5 SunOS server:</p>
<pre>
Oracle8i Enterprise Edition Release 8.1.5.0.0 - Production
With the Partitioning and Java options
PL/SQL Release 8.1.5.0.0 - Production
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3393"></a>Related Functions</p>
<p><a href="#i540516">OCIErrorGet()</a>, <a href="#BJFIBFAI">OCIClientVersion()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17295" class="refsect2"><a id="i540717"></a>
<h2 class="refsect2">OCISvcCtxToLda()<a id="sthref3394"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3395"></a>Purpose</p>
<p>Toggles between a V8 or later service context handle and a V7 <code>Lda_Def</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3396"></a>Syntax</p>
<pre>
sword OCISvcCtxToLda ( OCISvcCtx    *srvhp,
                       OCIError     *errhp,
                       Lda_Def      *ldap );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3397"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt><span class="bold">errhp</span> (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">ldap</span> (IN/OUT)</dt>
<dd>
<p>A Logon Data Area for Oracle7-style OCI calls that is initialized by this call.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3398"></a>Comments</p>
<p>Toggles between an OCI release 8 or later service context handle and an Oracle7 <code>Lda_Def</code>.</p>
<p>This function can only be called after a service context has been properly initialized.</p>
<p>Once the service context has been translated to an <code>Lda_Def</code>, it can be used in release 7.x OCI calls (for example, <code>obindps()</code><span class="italic">,</span> <code>ofen()</code>).</p>
<p>If there are multiple service contexts that share the same server handle, only one can be in Oracle7 mode at any time.</p>
<p>The action of this call can be reversed by passing the resulting <code>Lda_Def</code> to the <code>OCILdaToSvcCtx()</code> function.</p>
<p>The <code>OCI_ATTR_IN_V8_MODE</code> attribute of the server handle or service context handle enables an application to determine whether the application is currently in Oracle release 7 mode or Oracle release 8 or later mode.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociaahan.htm#i442199">Appendix A, "Handle and Descriptor Attributes"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3399"></a>Related Functions</p>
<p><a href="#i540561">OCILdaToSvcCtx()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17296" class="refsect2"><a id="i491405"></a>
<h2 class="refsect2"><a id="sthref3400"></a>OCIUserCallbackGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3401"></a>Purpose</p>
<p>Determines the callback that is registered for a handle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3402"></a>Syntax</p>
<pre>
sword OCIUserCallbackGet ( void    *hndlp,
                           ub4     type,
                           void    *ehndlp,
                           ub4     fcode,
                           ub4     when,
                           OCIUserCallback (*callbackp)
                                           (
                                             void   *ctxp,
                                             void   *hndlp,
                                             ub4  type,
                                             ub4  fcode,
                                             ub1  when,
                                             sword  returnCode,
                                             ub4  *errnop,
                                             va_list arglist
                                            ),
                           void    **ctxpp,
                           OCIUcb  *ucbDesc );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3403"></a>Parameters</p>
<dl>
<dt>hndlp (IN)</dt>
<dd>
<p>This is the handle whose type is specified by the type parameter.</p>
</dd>
<dt>type (IN)</dt>
<dd>
<p>The handle type. The valid handle type is <code>OCI_HTYPE_ENV</code>. The callback is registered for all calls of the function specified by <code>fcode</code> made on the environment handle.</p>
</dd>
<dt>ehndlp (IN)</dt>
<dd>
<p>The OCI error or environment handle. If there is an error, it is recorded in <code>ehndlp</code>, and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>fcode (IN)</dt>
<dd>
<p>A unique function code of an OCI function. These are listed in <a href="#g770704">Table 17-8</a>.</p>
</dd>
<dt>when (IN)</dt>
<dd>
<p>Defines when the callback is invoked. Valid modes are:</p>
<ul>
<li>
<p><code>OCI_UCBTYPE_ENTRY</code> - The callback is invoked on entry into the OCI function.</p>
</li>
<li>
<p><code>OCI_UCBTYPE_EXIT</code> - The callback is invoked before exit from the OCI function.</p>
</li>
<li>
<p><code>OCI_UCBTYPE_REPLACE</code> - If it returns anything other than an <code>OCI_CONTINUE</code>, then the next replacement callback and the OCI code for the OCI function are not called. Instead, processing jumps to the exit callbacks. For information about this parameter, see <a href="#i523285">"OCIUserCallbackRegister()"</a>.</p>
</li>
</ul>
</dd>
<dt>callbackp (OUT)</dt>
<dd>
<p>A pointer to a callback function pointer. This returns the function that is currently registered for these values of <code>fcode</code>, <code>when</code>, and <code>hndlp</code>. The value returned would be <code>NULL</code> if no callback is registered for this case.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i523285">"OCIUserCallbackRegister()"</a> for information about the parameters of <code>callbackp</code></div>
</dd>
<dt>ctxpp (OUT)</dt>
<dd>
<p>A pointer to return context for the currently registered callback.</p>
</dd>
<dt>ucbDesc (IN)</dt>
<dd>
<p>A descriptor provided by OCI. This descriptor is passed by OCI in the environment callback. It contains the priority at which the callback would be registered. If the <code>ucbDesc</code> parameter is specified as <code>NULL</code>, then this callback has the highest priority.</p>
<p>User callbacks registered statically (as opposed to those registered dynamically in a package) use a <code>NULL</code> descriptor because they do not have a <code>ucb</code> descriptor to use.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3404"></a>Comments</p>
<p>This function discovers or detects what callback is registered for a particular handle.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci09adv.htm#i448855">"Restrictions on Callback Functions"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3405"></a>Related Functions</p>
<p><a href="#i523285">OCIUserCallbackRegister()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17297" class="refsect2"><a id="i523285"></a>
<h2 class="refsect2"><a id="sthref3406"></a>OCIUserCallbackRegister()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3407"></a>Purpose</p>
<p>Registers a user-created callback function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3408"></a>Syntax</p>
<pre>
sword OCIUserCallbackRegister ( void    *hndlp,
                                ub4      type,
                                void    *ehndlp,
                                OCIUserCallback  (callback)
                                                 (
                                                    void    *ctxp,
                                                    void    *hndlp,
                                                    ub4     type,
                                                    ub4     fcode,
                                                    ub1     when,
                                                    sword   returnCode,
                                                    ub4     *errnop,
                                                    va_list arglist
                                                  ),
                               void     *ctxp,
                               ub4      fcode,
                               ub4      when,
                               OCIUcb   *ucbDesc );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3409"></a>Parameters</p>
<dl>
<dt>hndlp (IN)</dt>
<dd>
<p>This is the handle whose type is specified by the type parameter.</p>
</dd>
<dt>type (IN)</dt>
<dd>
<p>The handle type. The valid handle type is <code>OCI_HTYPE_ENV</code>. The callback is registered for all calls of the function specified by <code>fcode</code> made on the environment handle.</p>
</dd>
</dl>
<dl>
<dt>ehndlp (IN)</dt>
<dd>
<p>The OCI error or environment handle. If there is an error, it is recorded in <code>ehndlp</code> and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="#i540516">OCIErrorGet()</a>. Because an error handle is not available within <code>OCIEnvCallback</code>, the environment handle is passed in as a <code>ehndlp</code>.</p>
</dd>
<dt>callback (IN)</dt>
<dd>
<p>A callback function pointer. The variable argument list in the <code>OCIUserCallback</code> function prototype are the parameters passed to the OCI function. The typedef for <code>OCIUserCallback</code> is described later.</p>
<p>If an entry callback returns anything other than <code>OCI_CONTINUE</code>, then the return code is passed to the subsequent entry or replacement callback, if there is one. If this is the last entry callback and there is no replacement callback, then the OCI code is executed and the return code is ignored.</p>
<p>If a replacement callback returns anything other than <code>OCI_CONTINUE</code>, then subsequent replacement callbacks and the OCI code are bypassed, and processing jumps to the exit callbacks.</p>
<p>If the exit callback returns anything other than <code>OCI_CONTINUE</code>, then that returned value is returned by the OCI function; otherwise, the return value from the OCI code or the replacement callback (if the replacement callback did not return <code>OCI_CONTINUE</code> and essentially bypassed the OCI code) is returned by the call.</p>
<p>If a <code>NULL</code> value is passed in for callback, then the callback is removed for the <code>when</code> value and the specified handle. This is the way to deregister a callback for a given <code>ucbDesc</code> value, including the <code>NULL</code> <code>ucbDesc.</code></p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>A context pointer for the callback.</p>
</dd>
<dt>fcode (IN)</dt>
<dd>
<p>A unique function code of an OCI function. These are listed in <a href="#g770704">Table 17-8</a>.</p>
</dd>
<dt>when (IN)</dt>
<dd>
<p>Defines when the callback is invoked. Valid modes are:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_UCBTYPE_ENTRY</code> - The callback is invoked on entry into the OCI function.</p>
</li>
<li>
<p><code>OCI_UCBTYPE_EXIT</code> - The callback is invoked before exit from the OCI function.</p>
</li>
<li>
<p><code>OCI_UCBTYPE_REPLACE</code> - If the callback returns anything other than <code>OCI_CONTINUE</code>, then the next replacement callback and the OCI code for the OCI function is not called. Instead, processing jumps to the exit callbacks.</p>
</li>
</ul>
<dl>
<dt>ucbDesc (IN)</dt>
<dd>
<p>A descriptor provided by OCI. This descriptor is passed by OCI in the environment callback. It contains the priority at which the callback would be registered. If the <code>ucbDesc</code> parameter is specified as <code>NULL</code>, then this callback has the highest priority.</p>
<p>User callbacks registered statically (as opposed to those registered dynamically in a package) use a <code>NULL</code> descriptor as they do not have a ucb descriptor to use.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3410"></a>Comments</p>
<p>This function is used to register a user-created callback with the OCI environment.</p>
</div>
<!-- class="refsubsect" -->
<p>Such callbacks allow an application to:</p>
<ul>
<li>
<p>Trace OCI calls for debugging and performance measurements</p>
</li>
<li>
<p>Perform additional pre-processing or post-processing after selected OCI calls</p>
</li>
<li>
<p>Substitute the body of a given function with proprietary code to execute on a foreign data source</p>
</li>
</ul>
<p>The OCI supports: <span class="italic">entry callbacks, replacement callbacks,</span> and <span class="italic">exit callbacks</span>.</p>
<p>The three types of callbacks are identified by the modes <code>OCI_UCBTYPE_ENTRY</code>, <code>OCI_UCBTYPE_REPLACE</code>, and <code>OCI_UCBTYPE_EXIT</code>.</p>
<p>The control flow now is:</p>
<ol>
<li>
<p>Execute entry callbacks.</p>
</li>
<li>
<p>Execute replacement callbacks.</p>
</li>
<li>
<p>Execute OCI code.</p>
</li>
<li>
<p>Execute exit callbacks.</p>
</li>
</ol>
<p>Entry callbacks are executed when a program enters an OCI function.</p>
<p>Replacement callbacks are executed after entry callbacks. If the replacement callback returns a value of <code>OCI_CONTINUE</code>, then subsequent replacement callbacks or the normal OCI-specific code is executed. If the callback returns anything other than <code>OCI_CONTINUE</code>, then subsequent replacement callbacks and the OCI code do not execute.</p>
<p>After an OCI function successfully executes, or after a replacement callback returns something other than <code>OCI_CONTINUE</code>, program control transfers to the exit callback (if one is registered).</p>
<p>If a replacement or exit callback returns anything other than <code>OCI_CONTINUE</code>, then the return code from the callback is returned from the associated OCI call.</p>
<p>To determine the callback that is registered for the handle, you can use <a href="#i491405">OCIUserCallbackGet()</a>.</p>
<p>The prototype of the <code>OCIUserCallback</code> typedef is:</p>
<pre>
typedef sword (*OCIUserCallback)
           (void    *ctxp,
            void    *hndlp,
            ub4     type,
            ub4     fcode,
            ub4     when,
            sword   returnCode,
            sb4     *errnop,
            va_list arglist );
</pre>
<p>The parameters to the OCIUserCallback function prototype are:</p>
<dl>
<dt>ctxp (IN)</dt>
<dd>
<p>The context passed in as <code>ctxp</code> in the register callback function.</p>
</dd>
<dt>hndlp (IN)</dt>
<dd>
<p>This is the handle whose type is specified in the <code>type</code> parameter. It is the handle on which the callback is invoked. Because only a type of <code>OCI_HTYPE_ENV</code> is allowed, the environment handle, <code>env</code>, would be passed in here.</p>
</dd>
<dt>type (IN)</dt>
<dd>
<p>The type registered for the <code>hndlp</code>. The valid handle type is <code>OCI_HTYPE_ENV</code>. The callback is registered for all calls of the function specified by <code>fcode</code> made on the environment handle.</p>
</dd>
</dl>
<dl>
<dt>fcode (IN)</dt>
<dd>
<p>The function code of the OCI call. These are listed in <a href="#g770704">Table 17-8</a>. Note that callbacks can be registered for only the OCI calls listed in <a href="oci17msc003.htm#g731077">Table 17-3</a>.</p>
</dd>
<dt>when (IN)</dt>
<dd>
<p>The <code>when</code> value of the callback.</p>
</dd>
<dt>returnCode (IN)</dt>
<dd>
<p>This is the return code from the previous callback or the OCI code. For the first entry callback, <code>OCI_SUCCESS</code> is always passed in. For the subsequent callbacks, the return code from the OCI code or the previous callback is passed in.</p>
</dd>
<dt>errnop (IN/OUT)</dt>
<dd>
<p>When the first entry callback is called, the input value of <code>*errnop</code> is 0. If the callback is returning any value other than <code>OCI_CONTINUE</code>, then it must also set an error number in <code>*errnop</code>. This value is the set in the error handle passed in the OCI call.</p>
<p>For all subsequent callbacks, the input value of <code>*errnop</code> is the value of error number in the error handle. Therefore, if the previous callback did not return <code>OCI_CONTINUE</code>, then the out value of <code>*errnop</code> from the previous callback would be the one in the error handle, and that value would be passed in here to the subsequent callback. If, however, the previous callback returned <code>OCI_CONTINUE</code>, then whatever value is in the error handle would be passed in here.</p>
<p>Note that if a non-Oracle error number is returned in <code>*errnop</code>, then a callback must also be registered for the <a href="#i540516">OCIErrorGet()</a> function to return appropriate text for the error number.</p>
</dd>
<dt>arglist (IN)</dt>
<dd>
<p>These are the parameters to the OCI call passed in here as variable number of arguments. They should be dereferenced using <code>va_arg</code>, as illustrated in the user callback demonstration programs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></div>
<p><a href="#g770704">Table 17-8</a> and <a href="#CIHEDDBJ">Table 17-9</a> list the OCI Function codes and provides the OCI routine name and its function number.</p>
</dd>
</dl>
<div id="LNOCI17298" class="tblformal">
<p class="titleintable"><a id="sthref3411"></a><a id="g770704"></a>Table 17-8 OCI Function Codes &nbsp;</p>
<table class="cellalignment1016" title="OCI Function Codes &nbsp;" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t73">#<br /></th>
<th class="cellalignment1012" id="r1c2-t73">OCI Routine</th>
<th class="cellalignment1012" id="r1c3-t73">#<br /></th>
<th class="cellalignment1012" id="r1c4-t73">OCI Routine</th>
<th class="cellalignment1012" id="r1c5-t73">#<br /></th>
<th class="cellalignment1012" id="r1c6-t73">OCI Routine</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t73" headers="r1c1-t73">
<p>1</p>
</td>
<td class="cellalignment1013" headers="r2c1-t73 r1c2-t73">
<p>OCIInitialize</p>
</td>
<td class="cellalignment1013" headers="r2c1-t73 r1c3-t73">
<p>33</p>
</td>
<td class="cellalignment1013" headers="r2c1-t73 r1c4-t73">
<p>OCITransStart</p>
</td>
<td class="cellalignment1013" headers="r2c1-t73 r1c5-t73">
<p>65</p>
</td>
<td class="cellalignment1013" headers="r2c1-t73 r1c6-t73">
<p>OCIDefineByPos</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t73" headers="r1c1-t73">
<p>2</p>
</td>
<td class="cellalignment1013" headers="r3c1-t73 r1c2-t73">
<p>OCIHandleAlloc</p>
</td>
<td class="cellalignment1013" headers="r3c1-t73 r1c3-t73">
<p>34</p>
</td>
<td class="cellalignment1013" headers="r3c1-t73 r1c4-t73">
<p>OCITransDetach</p>
</td>
<td class="cellalignment1013" headers="r3c1-t73 r1c5-t73">
<p>66</p>
</td>
<td class="cellalignment1013" headers="r3c1-t73 r1c6-t73">
<p>OCIBindByPos</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t73" headers="r1c1-t73">
<p>3</p>
</td>
<td class="cellalignment1013" headers="r4c1-t73 r1c2-t73">
<p>OCIHandleFree</p>
</td>
<td class="cellalignment1013" headers="r4c1-t73 r1c3-t73">
<p>35</p>
</td>
<td class="cellalignment1013" headers="r4c1-t73 r1c4-t73">
<p>OCITransCommit</p>
</td>
<td class="cellalignment1013" headers="r4c1-t73 r1c5-t73">
<p>67</p>
</td>
<td class="cellalignment1013" headers="r4c1-t73 r1c6-t73">
<p>OCIBindByName</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t73" headers="r1c1-t73">
<p>4</p>
</td>
<td class="cellalignment1013" headers="r5c1-t73 r1c2-t73">
<p>OCIDescriptorAlloc</p>
</td>
<td class="cellalignment1013" headers="r5c1-t73 r1c3-t73">
<p>36</p>
</td>
<td class="cellalignment1013" headers="r5c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r5c1-t73 r1c5-t73">
<p>68</p>
</td>
<td class="cellalignment1013" headers="r5c1-t73 r1c6-t73">
<p>OCILobAssign</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t73" headers="r1c1-t73">
<p>5</p>
</td>
<td class="cellalignment1013" headers="r6c1-t73 r1c2-t73">
<p>OCIDescriptorFree</p>
</td>
<td class="cellalignment1013" headers="r6c1-t73 r1c3-t73">
<p>37</p>
</td>
<td class="cellalignment1013" headers="r6c1-t73 r1c4-t73">
<p>OCIErrorGet</p>
</td>
<td class="cellalignment1013" headers="r6c1-t73 r1c5-t73">
<p>69</p>
</td>
<td class="cellalignment1013" headers="r6c1-t73 r1c6-t73">
<p>OCILobIsEqual</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t73" headers="r1c1-t73">
<p>6</p>
</td>
<td class="cellalignment1013" headers="r7c1-t73 r1c2-t73">
<p>OCIEnvInit</p>
</td>
<td class="cellalignment1013" headers="r7c1-t73 r1c3-t73">
<p>38</p>
</td>
<td class="cellalignment1013" headers="r7c1-t73 r1c4-t73">
<p>OCILobFileOpen</p>
</td>
<td class="cellalignment1013" headers="r7c1-t73 r1c5-t73">
<p>70</p>
</td>
<td class="cellalignment1013" headers="r7c1-t73 r1c6-t73">
<p>OCILobLocatorIsInit</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t73" headers="r1c1-t73">
<p>7</p>
</td>
<td class="cellalignment1013" headers="r8c1-t73 r1c2-t73">
<p>OCIServerAttach</p>
</td>
<td class="cellalignment1013" headers="r8c1-t73 r1c3-t73">
<p>39</p>
</td>
<td class="cellalignment1013" headers="r8c1-t73 r1c4-t73">
<p>OCILobFileClose</p>
</td>
<td class="cellalignment1013" headers="r8c1-t73 r1c5-t73">
<p>71</p>
</td>
<td class="cellalignment1013" headers="r8c1-t73 r1c6-t73">
<p>OCILobEnableBuffering</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t73" headers="r1c1-t73">
<p>8</p>
</td>
<td class="cellalignment1013" headers="r9c1-t73 r1c2-t73">
<p>OCIServerDetach</p>
</td>
<td class="cellalignment1013" headers="r9c1-t73 r1c3-t73">
<p>40</p>
</td>
<td class="cellalignment1013" headers="r9c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r9c1-t73 r1c5-t73">
<p>72</p>
</td>
<td class="cellalignment1013" headers="r9c1-t73 r1c6-t73">
<p>OCILobCharSetId</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t73" headers="r1c1-t73">
<p>9</p>
</td>
<td class="cellalignment1013" headers="r10c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r10c1-t73 r1c3-t73">
<p>41</p>
</td>
<td class="cellalignment1013" headers="r10c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r10c1-t73 r1c5-t73">
<p>73</p>
</td>
<td class="cellalignment1013" headers="r10c1-t73 r1c6-t73">
<p>OCILobCharSetForm</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t73" headers="r1c1-t73">
<p>10</p>
</td>
<td class="cellalignment1013" headers="r11c1-t73 r1c2-t73">
<p>OCISessionBegin</p>
</td>
<td class="cellalignment1013" headers="r11c1-t73 r1c3-t73">
<p>42</p>
</td>
<td class="cellalignment1013" headers="r11c1-t73 r1c4-t73">
<p>OCILobCopy</p>
</td>
<td class="cellalignment1013" headers="r11c1-t73 r1c5-t73">
<p>74</p>
</td>
<td class="cellalignment1013" headers="r11c1-t73 r1c6-t73">
<p>OCILobFileSetName</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t73" headers="r1c1-t73">
<p>11</p>
</td>
<td class="cellalignment1013" headers="r12c1-t73 r1c2-t73">
<p>OCISessionEnd</p>
</td>
<td class="cellalignment1013" headers="r12c1-t73 r1c3-t73">
<p>43</p>
</td>
<td class="cellalignment1013" headers="r12c1-t73 r1c4-t73">
<p>OCILobAppend</p>
</td>
<td class="cellalignment1013" headers="r12c1-t73 r1c5-t73">
<p>75</p>
</td>
<td class="cellalignment1013" headers="r12c1-t73 r1c6-t73">
<p>OCILobFileGetName</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t73" headers="r1c1-t73">
<p>12</p>
</td>
<td class="cellalignment1013" headers="r13c1-t73 r1c2-t73">
<p>OCIPasswordChange</p>
</td>
<td class="cellalignment1013" headers="r13c1-t73 r1c3-t73">
<p>44</p>
</td>
<td class="cellalignment1013" headers="r13c1-t73 r1c4-t73">
<p>OCILobErase</p>
</td>
<td class="cellalignment1013" headers="r13c1-t73 r1c5-t73">
<p>76</p>
</td>
<td class="cellalignment1013" headers="r13c1-t73 r1c6-t73">
<p>OCILogon</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t73" headers="r1c1-t73">
<p>13</p>
</td>
<td class="cellalignment1013" headers="r14c1-t73 r1c2-t73">
<p>OCIStmtPrepare</p>
</td>
<td class="cellalignment1013" headers="r14c1-t73 r1c3-t73">
<p>45</p>
</td>
<td class="cellalignment1013" headers="r14c1-t73 r1c4-t73">
<p>OCILobGetLength</p>
</td>
<td class="cellalignment1013" headers="r14c1-t73 r1c5-t73">
<p>77</p>
</td>
<td class="cellalignment1013" headers="r14c1-t73 r1c6-t73">
<p>OCILogoff</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t73" headers="r1c1-t73">
<p>14</p>
</td>
<td class="cellalignment1013" headers="r15c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r15c1-t73 r1c3-t73">
<p>46</p>
</td>
<td class="cellalignment1013" headers="r15c1-t73 r1c4-t73">
<p>OCILobTrim</p>
</td>
<td class="cellalignment1013" headers="r15c1-t73 r1c5-t73">
<p>78</p>
</td>
<td class="cellalignment1013" headers="r15c1-t73 r1c6-t73">
<p>OCILobDisableBuffering</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t73" headers="r1c1-t73">
<p>15</p>
</td>
<td class="cellalignment1013" headers="r16c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r16c1-t73 r1c3-t73">
<p>47</p>
</td>
<td class="cellalignment1013" headers="r16c1-t73 r1c4-t73">
<p>OCILobRead</p>
</td>
<td class="cellalignment1013" headers="r16c1-t73 r1c5-t73">
<p>79</p>
</td>
<td class="cellalignment1013" headers="r16c1-t73 r1c6-t73">
<p>OCILobFlushBuffer</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t73" headers="r1c1-t73">
<p>16</p>
</td>
<td class="cellalignment1013" headers="r17c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r17c1-t73 r1c3-t73">
<p>48</p>
</td>
<td class="cellalignment1013" headers="r17c1-t73 r1c4-t73">
<p>OCILobWrite</p>
</td>
<td class="cellalignment1013" headers="r17c1-t73 r1c5-t73">
<p>80</p>
</td>
<td class="cellalignment1013" headers="r17c1-t73 r1c6-t73">
<p>OCILobLoadFromFile</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r18c1-t73" headers="r1c1-t73">
<p>17</p>
</td>
<td class="cellalignment1013" headers="r18c1-t73 r1c2-t73">
<p>OCIBindDynamic</p>
</td>
<td class="cellalignment1013" headers="r18c1-t73 r1c3-t73">
<p>49</p>
</td>
<td class="cellalignment1013" headers="r18c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r18c1-t73 r1c5-t73">
<p>81</p>
</td>
<td class="cellalignment1013" headers="r18c1-t73 r1c6-t73">
<p>OCILobOpen</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r19c1-t73" headers="r1c1-t73">
<p>18</p>
</td>
<td class="cellalignment1013" headers="r19c1-t73 r1c2-t73">
<p>OCIBindObject</p>
</td>
<td class="cellalignment1013" headers="r19c1-t73 r1c3-t73">
<p>50</p>
</td>
<td class="cellalignment1013" headers="r19c1-t73 r1c4-t73">
<p>OCIBreak</p>
</td>
<td class="cellalignment1013" headers="r19c1-t73 r1c5-t73">
<p>82</p>
</td>
<td class="cellalignment1013" headers="r19c1-t73 r1c6-t73">
<p>OCILobClose</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r20c1-t73" headers="r1c1-t73">
<p>19</p>
</td>
<td class="cellalignment1013" headers="r20c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r20c1-t73 r1c3-t73">
<p>51</p>
</td>
<td class="cellalignment1013" headers="r20c1-t73 r1c4-t73">
<p>OCIServerVersion</p>
</td>
<td class="cellalignment1013" headers="r20c1-t73 r1c5-t73">
<p>83</p>
</td>
<td class="cellalignment1013" headers="r20c1-t73 r1c6-t73">
<p>OCILobIsOpen</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r21c1-t73" headers="r1c1-t73">
<p>20</p>
</td>
<td class="cellalignment1013" headers="r21c1-t73 r1c2-t73">
<p>OCIBindArrayOfStruct</p>
</td>
<td class="cellalignment1013" headers="r21c1-t73 r1c3-t73">
<p>52</p>
</td>
<td class="cellalignment1013" headers="r21c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r21c1-t73 r1c5-t73">
<p>84</p>
</td>
<td class="cellalignment1013" headers="r21c1-t73 r1c6-t73">
<p>OCILobFileIsOpen</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r22c1-t73" headers="r1c1-t73">
<p>21</p>
</td>
<td class="cellalignment1013" headers="r22c1-t73 r1c2-t73">
<p>OCIStmtExecute</p>
</td>
<td class="cellalignment1013" headers="r22c1-t73 r1c3-t73">
<p>53</p>
</td>
<td class="cellalignment1013" headers="r22c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r22c1-t73 r1c5-t73">
<p>85</p>
</td>
<td class="cellalignment1013" headers="r22c1-t73 r1c6-t73">
<p>OCILobFileExists</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r23c1-t73" headers="r1c1-t73">
<p>22</p>
</td>
<td class="cellalignment1013" headers="r23c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r23c1-t73 r1c3-t73">
<p>54</p>
</td>
<td class="cellalignment1013" headers="r23c1-t73 r1c4-t73">
<p>OCIAttrGet</p>
</td>
<td class="cellalignment1013" headers="r23c1-t73 r1c5-t73">
<p>86</p>
</td>
<td class="cellalignment1013" headers="r23c1-t73 r1c6-t73">
<p>OCILobFileCloseAll</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r24c1-t73" headers="r1c1-t73">
<p>23</p>
</td>
<td class="cellalignment1013" headers="r24c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r24c1-t73 r1c3-t73">
<p>55</p>
</td>
<td class="cellalignment1013" headers="r24c1-t73 r1c4-t73">
<p>OCIAttrSet</p>
</td>
<td class="cellalignment1013" headers="r24c1-t73 r1c5-t73">
<p>87</p>
</td>
<td class="cellalignment1013" headers="r24c1-t73 r1c6-t73">
<p>OCILobCreateTemporary</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r25c1-t73" headers="r1c1-t73">
<p>24</p>
</td>
<td class="cellalignment1013" headers="r25c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r25c1-t73 r1c3-t73">
<p>56</p>
</td>
<td class="cellalignment1013" headers="r25c1-t73 r1c4-t73">
<p>OCIParamSet</p>
</td>
<td class="cellalignment1013" headers="r25c1-t73 r1c5-t73">
<p>88</p>
</td>
<td class="cellalignment1013" headers="r25c1-t73 r1c6-t73">
<p>OCILobFreeTemporary</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r26c1-t73" headers="r1c1-t73">
<p>25</p>
</td>
<td class="cellalignment1013" headers="r26c1-t73 r1c2-t73">
<p>OCIDefineObject</p>
</td>
<td class="cellalignment1013" headers="r26c1-t73 r1c3-t73">
<p>57</p>
</td>
<td class="cellalignment1013" headers="r26c1-t73 r1c4-t73">
<p>OCIParamGet</p>
</td>
<td class="cellalignment1013" headers="r26c1-t73 r1c5-t73">
<p>89</p>
</td>
<td class="cellalignment1013" headers="r26c1-t73 r1c6-t73">
<p>OCILobIsTemporary</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r27c1-t73" headers="r1c1-t73">
<p>26</p>
</td>
<td class="cellalignment1013" headers="r27c1-t73 r1c2-t73">
<p>OCIDefineDynamic</p>
</td>
<td class="cellalignment1013" headers="r27c1-t73 r1c3-t73">
<p>58</p>
</td>
<td class="cellalignment1013" headers="r27c1-t73 r1c4-t73">
<p>OCIStmtGetPieceInfo</p>
</td>
<td class="cellalignment1013" headers="r27c1-t73 r1c5-t73">
<p>90</p>
</td>
<td class="cellalignment1013" headers="r27c1-t73 r1c6-t73">
<p>OCIAQEnq</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r28c1-t73" headers="r1c1-t73">
<p>27</p>
</td>
<td class="cellalignment1013" headers="r28c1-t73 r1c2-t73">
<p>OCIDefineArrayOfStruct</p>
</td>
<td class="cellalignment1013" headers="r28c1-t73 r1c3-t73">
<p>59</p>
</td>
<td class="cellalignment1013" headers="r28c1-t73 r1c4-t73">
<p>OCILdaToSvcCtx</p>
</td>
<td class="cellalignment1013" headers="r28c1-t73 r1c5-t73">
<p>91</p>
</td>
<td class="cellalignment1013" headers="r28c1-t73 r1c6-t73">
<p>OCIAQDeq</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r29c1-t73" headers="r1c1-t73">
<p>28</p>
</td>
<td class="cellalignment1013" headers="r29c1-t73 r1c2-t73">
<p>OCIStmtFetch</p>
</td>
<td class="cellalignment1013" headers="r29c1-t73 r1c3-t73">
<p>60</p>
</td>
<td class="cellalignment1013" headers="r29c1-t73 r1c4-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r29c1-t73 r1c5-t73">
<p>92</p>
</td>
<td class="cellalignment1013" headers="r29c1-t73 r1c6-t73">
<p>OCIReset</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r30c1-t73" headers="r1c1-t73">
<p>29</p>
</td>
<td class="cellalignment1013" headers="r30c1-t73 r1c2-t73">
<p>OCIStmtGetBindInfo</p>
</td>
<td class="cellalignment1013" headers="r30c1-t73 r1c3-t73">
<p>61</p>
</td>
<td class="cellalignment1013" headers="r30c1-t73 r1c4-t73">
<p>OCIStmtSetPieceInfo</p>
</td>
<td class="cellalignment1013" headers="r30c1-t73 r1c5-t73">
<p>93</p>
</td>
<td class="cellalignment1013" headers="r30c1-t73 r1c6-t73">
<p>OCISvcCtxToLda</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r31c1-t73" headers="r1c1-t73">
<p>30</p>
</td>
<td class="cellalignment1013" headers="r31c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r31c1-t73 r1c3-t73">
<p>62</p>
</td>
<td class="cellalignment1013" headers="r31c1-t73 r1c4-t73">
<p>OCITransForget</p>
</td>
<td class="cellalignment1013" headers="r31c1-t73 r1c5-t73">
<p>94</p>
</td>
<td class="cellalignment1013" headers="r31c1-t73 r1c6-t73">
<p>OCILobLocatorAssign</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r32c1-t73" headers="r1c1-t73">
<p>31</p>
</td>
<td class="cellalignment1013" headers="r32c1-t73 r1c2-t73">
<p>(not used)</p>
</td>
<td class="cellalignment1013" headers="r32c1-t73 r1c3-t73">
<p>63</p>
</td>
<td class="cellalignment1013" headers="r32c1-t73 r1c4-t73">
<p>OCITransPrepare</p>
</td>
<td class="cellalignment1013" headers="r32c1-t73 r1c5-t73">
<p>95</p>
</td>
<td class="cellalignment1013" headers="r32c1-t73 r1c6-t73">
<p>(not used)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r33c1-t73" headers="r1c1-t73">
<p>32</p>
</td>
<td class="cellalignment1013" headers="r33c1-t73 r1c2-t73">
<p>OCIDescribeAny</p>
</td>
<td class="cellalignment1013" headers="r33c1-t73 r1c3-t73">
<p>64</p>
</td>
<td class="cellalignment1013" headers="r33c1-t73 r1c4-t73">
<p>OCITransRollback</p>
</td>
<td class="cellalignment1013" headers="r33c1-t73 r1c5-t73">
<p>96</p>
</td>
<td class="cellalignment1013" headers="r33c1-t73 r1c6-t73">
<p>OCIAQListen</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="LNOCI18349" class="tblformal">
<p class="titleintable"><a id="sthref3412"></a><a id="CIHEDDBJ"></a>Table 17-9 Continuation of OCI Function Codes from 97 and Higher</p>
<table class="cellalignment1016" title="Continuation of OCI Function Codes from 97 and Higher" summary="This table is a continuation of the previous table and lists the OCI Function codes and provides the OCI routine name and its function number, from 97 and higher." dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t74">#<br /></th>
<th class="cellalignment1012" id="r1c2-t74">OCI Routine</th>
<th class="cellalignment1012" id="r1c3-t74">#<br /></th>
<th class="cellalignment1012" id="r1c4-t74">OCI Routine</th>
<th class="cellalignment1012" id="r1c5-t74">#<br /></th>
<th class="cellalignment1012" id="r1c6-t74">OCI Routine</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t74" headers="r1c1-t74">
<p>97</p>
</td>
<td class="cellalignment1013" headers="r2c1-t74 r1c2-t74">
<p>Reserved</p>
</td>
<td class="cellalignment1013" headers="r2c1-t74 r1c3-t74">
<p>113</p>
</td>
<td class="cellalignment1013" headers="r2c1-t74 r1c4-t74">
<p>OCILobErase2</p>
</td>
<td class="cellalignment1013" headers="r2c1-t74 r1c5-t74">
<p>129</p>
</td>
<td class="cellalignment1013" headers="r2c1-t74 r1c6-t74">
<p>OCILobGetOptions</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t74" headers="r1c1-t74">
<p>98</p>
</td>
<td class="cellalignment1013" headers="r3c1-t74 r1c2-t74">
<p>Reserved</p>
</td>
<td class="cellalignment1013" headers="r3c1-t74 r1c3-t74">
<p>114</p>
</td>
<td class="cellalignment1013" headers="r3c1-t74 r1c4-t74">
<p>OCILobGetLength2</p>
</td>
<td class="cellalignment1013" headers="r3c1-t74 r1c5-t74">
<p>130</p>
</td>
<td class="cellalignment1013" headers="r3c1-t74 r1c6-t74">
<p>OCILobSetOptions</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t74" headers="r1c1-t74">
<p>99</p>
</td>
<td class="cellalignment1013" headers="r4c1-t74 r1c2-t74">
<p>OCITransMultiPrepare</p>
</td>
<td class="cellalignment1013" headers="r4c1-t74 r1c3-t74">
<p>115</p>
</td>
<td class="cellalignment1013" headers="r4c1-t74 r1c4-t74">
<p>OCILobLoadFromFile2</p>
</td>
<td class="cellalignment1013" headers="r4c1-t74 r1c5-t74">
<p>131</p>
</td>
<td class="cellalignment1013" headers="r4c1-t74 r1c6-t74">
<p>OCILobFragementInsert</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t74" headers="r1c1-t74">
<p>100</p>
</td>
<td class="cellalignment1013" headers="r5c1-t74 r1c2-t74">
<p>OCIConnectionPoolCreate</p>
</td>
<td class="cellalignment1013" headers="r5c1-t74 r1c3-t74">
<p>116</p>
</td>
<td class="cellalignment1013" headers="r5c1-t74 r1c4-t74">
<p>OCILobRead2</p>
</td>
<td class="cellalignment1013" headers="r5c1-t74 r1c5-t74">
<p>132</p>
</td>
<td class="cellalignment1013" headers="r5c1-t74 r1c6-t74">
<p>OCILobFragementDelete</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t74" headers="r1c1-t74">
<p>101</p>
</td>
<td class="cellalignment1013" headers="r6c1-t74 r1c2-t74">
<p>OCIConnectionPoolDestroy</p>
</td>
<td class="cellalignment1013" headers="r6c1-t74 r1c3-t74">
<p>117</p>
</td>
<td class="cellalignment1013" headers="r6c1-t74 r1c4-t74">
<p>OCILobTrim2</p>
</td>
<td class="cellalignment1013" headers="r6c1-t74 r1c5-t74">
<p>133</p>
</td>
<td class="cellalignment1013" headers="r6c1-t74 r1c6-t74">
<p>OCILobFragementMove</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t74" headers="r1c1-t74">
<p>102</p>
</td>
<td class="cellalignment1013" headers="r7c1-t74 r1c2-t74">
<p>OCILogon2</p>
</td>
<td class="cellalignment1013" headers="r7c1-t74 r1c3-t74">
<p>118</p>
</td>
<td class="cellalignment1013" headers="r7c1-t74 r1c4-t74">
<p>OCILobWrite2</p>
</td>
<td class="cellalignment1013" headers="r7c1-t74 r1c5-t74">
<p>134</p>
</td>
<td class="cellalignment1013" headers="r7c1-t74 r1c6-t74">
<p>OCILobFragementReplace</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t74" headers="r1c1-t74">
<p>103</p>
</td>
<td class="cellalignment1013" headers="r8c1-t74 r1c2-t74">
<p>OCIRowidToChar</p>
</td>
<td class="cellalignment1013" headers="r8c1-t74 r1c3-t74">
<p>119</p>
</td>
<td class="cellalignment1013" headers="r8c1-t74 r1c4-t74">
<p>OCILobGetStorageLimit</p>
</td>
<td class="cellalignment1013" headers="r8c1-t74 r1c5-t74">
<p>135</p>
</td>
<td class="cellalignment1013" headers="r8c1-t74 r1c6-t74">
<p>OCILobGetDeduplicateRegions</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t74" headers="r1c1-t74">
<p>104</p>
</td>
<td class="cellalignment1013" headers="r9c1-t74 r1c2-t74">
<p>OCISessionPoolCreate</p>
</td>
<td class="cellalignment1013" headers="r9c1-t74 r1c3-t74">
<p>120</p>
</td>
<td class="cellalignment1013" headers="r9c1-t74 r1c4-t74">
<p>OCIDBStartup</p>
</td>
<td class="cellalignment1013" headers="r9c1-t74 r1c5-t74">
<p>136</p>
</td>
<td class="cellalignment1013" headers="r9c1-t74 r1c6-t74">
<p>OCIAppCtxSet</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t74" headers="r1c1-t74">
<p>105</p>
</td>
<td class="cellalignment1013" headers="r10c1-t74 r1c2-t74">
<p>OCISessionPoolDestroy</p>
</td>
<td class="cellalignment1013" headers="r10c1-t74 r1c3-t74">
<p>121</p>
</td>
<td class="cellalignment1013" headers="r10c1-t74 r1c4-t74">
<p>OCIDBShutdown</p>
</td>
<td class="cellalignment1013" headers="r10c1-t74 r1c5-t74">
<p>137</p>
</td>
<td class="cellalignment1013" headers="r10c1-t74 r1c6-t74">
<p>OCIAppCtxClearAll</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t74" headers="r1c1-t74">
<p>106</p>
</td>
<td class="cellalignment1013" headers="r11c1-t74 r1c2-t74">
<p>OCISessionGet</p>
</td>
<td class="cellalignment1013" headers="r11c1-t74 r1c3-t74">
<p>122</p>
</td>
<td class="cellalignment1013" headers="r11c1-t74 r1c4-t74">
<p>OCILobArrayRead</p>
</td>
<td class="cellalignment1013" headers="r11c1-t74 r1c5-t74">
<p>138</p>
</td>
<td class="cellalignment1013" headers="r11c1-t74 r1c6-t74">
<p>OCILobGetContentType</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t74" headers="r1c1-t74">
<p>107</p>
</td>
<td class="cellalignment1013" headers="r12c1-t74 r1c2-t74">
<p>OCISessionRelease</p>
</td>
<td class="cellalignment1013" headers="r12c1-t74 r1c3-t74">
<p>123</p>
</td>
<td class="cellalignment1013" headers="r12c1-t74 r1c4-t74">
<p>OCILobArrayWrite</p>
</td>
<td class="cellalignment1013" headers="r12c1-t74 r1c5-t74">
<p>139</p>
</td>
<td class="cellalignment1013" headers="r12c1-t74 r1c6-t74">
<p>OCILobSetContentType</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t74" headers="r1c1-t74">
<p>108</p>
</td>
<td class="cellalignment1013" headers="r13c1-t74 r1c2-t74">
<p>OCIStmtPrepare2</p>
</td>
<td class="cellalignment1013" headers="r13c1-t74 r1c3-t74">
<p>124</p>
</td>
<td class="cellalignment1013" headers="r13c1-t74 r1c4-t74">
<p>OCIAQEnqStreaming</p>
</td>
<td class="cellalignment1013" headers="r13c1-t74 r1c5-t74">&nbsp;</td>
<td class="cellalignment1013" headers="r13c1-t74 r1c6-t74">&nbsp;</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t74" headers="r1c1-t74">
<p>109</p>
</td>
<td class="cellalignment1013" headers="r14c1-t74 r1c2-t74">
<p>OCIStmtRelease</p>
</td>
<td class="cellalignment1013" headers="r14c1-t74 r1c3-t74">
<p>125</p>
</td>
<td class="cellalignment1013" headers="r14c1-t74 r1c4-t74">
<p>OCIAQGetReplayInfo</p>
</td>
<td class="cellalignment1013" headers="r14c1-t74 r1c5-t74">&nbsp;</td>
<td class="cellalignment1013" headers="r14c1-t74 r1c6-t74">&nbsp;</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t74" headers="r1c1-t74">
<p>110</p>
</td>
<td class="cellalignment1013" headers="r15c1-t74 r1c2-t74">
<p>OCIAQEnqArray</p>
</td>
<td class="cellalignment1013" headers="r15c1-t74 r1c3-t74">
<p>126</p>
</td>
<td class="cellalignment1013" headers="r15c1-t74 r1c4-t74">
<p>OCIAQResetReplayInfo</p>
</td>
<td class="cellalignment1013" headers="r15c1-t74 r1c5-t74">&nbsp;</td>
<td class="cellalignment1013" headers="r15c1-t74 r1c6-t74">&nbsp;</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t74" headers="r1c1-t74">
<p>111</p>
</td>
<td class="cellalignment1013" headers="r16c1-t74 r1c2-t74">
<p>OCIAQDeqArray</p>
</td>
<td class="cellalignment1013" headers="r16c1-t74 r1c3-t74">
<p>127</p>
</td>
<td class="cellalignment1013" headers="r16c1-t74 r1c4-t74">
<p>OCIArrayDescriptorAlloc</p>
</td>
<td class="cellalignment1013" headers="r16c1-t74 r1c5-t74">&nbsp;</td>
<td class="cellalignment1013" headers="r16c1-t74 r1c6-t74">&nbsp;</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t74" headers="r1c1-t74">
<p>112</p>
</td>
<td class="cellalignment1013" headers="r17c1-t74 r1c2-t74">
<p>OCILobCopy2</p>
</td>
<td class="cellalignment1013" headers="r17c1-t74 r1c3-t74">
<p>128</p>
</td>
<td class="cellalignment1013" headers="r17c1-t74 r1c4-t74">
<p>OCIArrayDescriptorFree</p>
</td>
<td class="cellalignment1013" headers="r17c1-t74 r1c5-t74">&nbsp;</td>
<td class="cellalignment1013" headers="r17c1-t74 r1c6-t74">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3413"></a>Related Functions</p>
<p><a href="#i491405">OCIUserCallbackGet()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<!-- class="chapter" -->
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci17msc006.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci18nav.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
