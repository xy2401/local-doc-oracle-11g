<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OCI Pin, Unpin, and Free Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:36Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci18nav004.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci18nav006.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">40/79</span> <!-- End Header --><a id="i471218"></a>
<div id="LNOCI175" class="refsect1">
<h1 class="refsect1">OCI Pin, Unpin, and Free Functions</h1>
<p><a href="#CACHCHHC">Table 18-10</a> describes the OCI pin, unpin, and free functions that are described in this section.</p>
<div id="LNOCI17346" class="tblformalwide">
<p class="titleintable"><a id="sthref3585"></a><a id="CACHCHHC"></a>Table 18-10 Pin, Unpin, and Free Functions</p>
<table class="cellalignment1011" title="Pin, Unpin, and Free Functions" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t35">Function</th>
<th class="cellalignment1012" id="r1c2-t35">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t35" headers="r1c1-t35">
<p><a href="#i471310">"OCICacheFree()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t35 r1c2-t35">
<p>Free objects in the cache</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t35" headers="r1c1-t35">
<p><a href="#i469229">"OCICacheUnpin()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t35 r1c2-t35">
<p>Unpin persistent objects in cache or connection</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t35" headers="r1c1-t35">
<p><a href="#i427422">"OCIObjectArrayPin()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t35 r1c2-t35">
<p>Pin an array of references</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t35" headers="r1c1-t35">
<p><a href="#i430212">"OCIObjectFree()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t35 r1c2-t35">
<p>Free a previously allocated object</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t35" headers="r1c1-t35">
<p><a href="#i433563">"OCIObjectPin()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t35 r1c2-t35">
<p>Pin an object</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t35" headers="r1c1-t35">
<p><a href="#i433515">"OCIObjectPinCountReset()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t35 r1c2-t35">
<p>Unpin an object to zero pin count</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t35" headers="r1c1-t35">
<p><a href="#i433457">"OCIObjectPinTable()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t35 r1c2-t35">
<p>Pin a table object with a given duration</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t35" headers="r1c1-t35">
<p><a href="#i438263">"OCIObjectUnpin()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t35 r1c2-t35">
<p>Unpin an object</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI17347" class="refsect2"><a id="i471310"></a>
<h2 class="refsect2">OCICacheFree()<a id="sthref3586"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3587"></a>Purpose</p>
<p>Frees all objects and values in the cache for the specified connection.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3588"></a>Syntax</p>
<pre>
sword OCICacheFree ( OCIEnv              *env,
                     OCIError            *err, 
                     const OCISvcCtx     *svc ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3589"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>svc (IN)</dt>
<dd>
<p>An OCI service context.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3590"></a>Comments</p>
<p>If a connection is specified, this function frees the persistent objects, transient objects and values allocated for that connection. Otherwise, all persistent objects, transient objects and values in the object cache are freed. Objects are freed regardless of their pin count.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i430212">"OCIObjectFree()"</a> for more information about freeing an instance</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3591"></a>Related Functions</p>
<p><a href="#i430212">OCIObjectFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17348" class="refsect2"><a id="i469229"></a>
<h2 class="refsect2">OCICacheUnpin()<a id="sthref3592"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3593"></a>Purpose</p>
<p>Unpins persistent objects.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3594"></a>Syntax</p>
<pre>
sword OCICacheUnpin ( OCIEnv              *env,
                      OCIError            *err, 
                      const OCISvcCtx     *svc );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3595"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>svc (IN)</dt>
<dd>
<p>An OCI service context handle. The objects on the specified connection are unpinned.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3596"></a>Comments</p>
<p>This function completely unpins all of the persistent objects for the given connection. The pin count for the objects is reset to zero.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li><a href="oci11obj.htm#i440479">"Pinning an Object"</a></li>
<li>
<p><a href="oci11obj.htm#i446786">"Pin Count and Unpinning"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3597"></a>Related Functions</p>
<p><a href="#i438263">OCIObjectUnpin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17349" class="refsect2"><a id="i427422"></a>
<h2 class="refsect2">OCIObjectArrayPin()<a id="sthref3598"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3599"></a>Purpose</p>
<p>Pins an array of references.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3600"></a>Syntax</p>
<pre>
sword OCIObjectArrayPin ( OCIEnv            *env, 
                          OCIError          *err, 
                          OCIRef            **ref_array, 
                          ub4               array_size,
                          OCIComplexObject  **cor_array,
                          ub4               cor_array_size, 
                          OCIPinOpt         pin_option, 
                          OCIDuration       pin_duration,
                          OCILockOpt        lock, 
                          void              **obj_array,
                          ub4               *pos );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3601"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>ref_array (IN)</dt>
<dd>
<p>Array of references to be pinned.</p>
</dd>
<dt>array_size (IN)</dt>
<dd>
<p>Number of elements in the array of references.</p>
</dd>
<dt>cor_array</dt>
<dd>
<p>An array of COR handles corresponding to the objects being pinned.</p>
</dd>
<dt>cor_array_size</dt>
<dd>
<p>The number of elements in <code>cor_array</code>.</p>
</dd>
<dt>pin_option (IN)</dt>
<dd>
<p>Pin option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i433563">"OCIObjectPin()"</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<dl>
<dt>pin_duration (IN)</dt>
<dd>
<p>Pin duration. See <code>OCIObjectPin()</code>.</p>
</dd>
<dt>lock (IN)</dt>
<dd>
<p>Lock option. See <code>OCIObjectPin()</code>.</p>
</dd>
<dt>obj_array (OUT)</dt>
<dd>
<p>If this argument is not <code>NULL</code>, the pinned objects are returned in the array. The user must allocate this array with the element type being <code>void *</code>. The size of this array is identical to <code>array_size</code>.</p>
</dd>
<dt>pos (OUT)</dt>
<dd>
<p>If there is an error, this argument indicates the element that is causing the error. Note that this argument is set to 1 for the first element in the <code>ref_array</code>.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3602"></a>Comments</p>
<p>All the pinned objects are retrieved from the database in one network round-trip. If the user specifies an output array (<code>obj_array</code>), then the address of the pinned objects are assigned to the elements in the array.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3603"></a>Related Functions</p>
<p><a href="#i433563">OCIObjectPin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17350" class="refsect2"><a id="i430212"></a>
<h2 class="refsect2">OCIObjectFree()<a id="sthref3604"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3605"></a>Purpose</p>
<p>Frees and unpins an object instance.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3606"></a>Syntax</p>
<pre>
sword OCIObjectFree ( OCIEnv          *env, 
                      OCIError        *err, 
                      void            *instance, 
                      ub2             flags );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3607"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>instance (IN)</dt>
<dd>
<p>Pointer to a standalone instance. If it is an object, it must be pinned.</p>
</dd>
<dt>flags (IN)</dt>
<dd>
<p>If <code>OCI_OBJECTFREE_FORCE</code> is passed, free the object even if it is pinned or dirty. If <code>OCI_OBJECTFREE_NONULL</code> is passed, the <code>NULL</code> structure is not freed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3608"></a>Comments</p>
<p>This function deallocates all the memory allocated for an object instance, including the <code>NULL</code> structure. The following rules apply to different instance types:</p>
<dl>
<dt>For Persistent Objects</dt>
<dd>
<p>This function returns an error if the client is attempting to free a dirty persistent object that has not been flushed. The client should either flush the persistent object, unmark it, or set the parameter <code>flags</code> to <code>OCI_OBJECTFREE_FORCE</code>.</p>
<p>This function calls <code>OCIObjectUnpin()</code> once to check if the object can be completely unpinned. If it succeeds, the rest of the function proceeds to free the object. If it fails, then an error is returned unless the parameter <code>flags</code> is set to <code>OCI_OBJECTFREE_FORCE</code>.</p>
<p>Freeing a persistent object in memory does not change the persistent state of that object at the server. For example, the object remains locked after the object is freed.</p>
</dd>
<dt>For Transient Objects</dt>
<dd>
<p>This function calls <code>OCIObjectUnpin()</code> once to check if the object can be completely unpinned. If it succeeds, the rest of the function proceeds to free the object. If it fails, then an error is returned unless the parameter <code>flags</code> is set to <code>OCI_OBJECTFREE_FORCE</code>.</p>
</dd>
<dt>For Values</dt>
<dd>
<p>The memory of the object is freed immediately.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3609"></a>Related Functions</p>
<p><a href="#i471310">OCICacheFree()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17351" class="refsect2"><a id="i433563"></a>
<h2 class="refsect2">OCIObjectPin()<a id="sthref3610"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3611"></a>Purpose</p>
<p>Pins a referenceable object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3612"></a>Syntax</p>
<pre>
sword OCIObjectPin ( OCIEnv              *env, 
                     OCIError            *err, 
                     OCIRef              *object_ref,
                     OCIComplexObject    *corhdl,
                     OCIPinOpt           pin_option, 
                     OCIDuration         pin_duration, 
                     OCILockOpt          lock_option,
                     void                **object );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3613"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>object_ref (IN)</dt>
<dd>
<p>The reference to the object.</p>
</dd>
<dt>corhdl (IN)</dt>
<dd>
<p>Handle for complex object retrieval.</p>
</dd>
<dt>pin_option (IN)</dt>
<dd>
<p>Used to specify the copy of the object that is to be retrieved.</p>
</dd>
<dt>pin_duration (IN)</dt>
<dd>
<p>The duration during which the object is being accessed by a client. The object is implicitly unpinned at the end of the pin duration. If <code><a id="sthref3614"></a>OCI_DURATION_NULL</code> is passed, there is no pin promotion if the object is already loaded into the cache. If the object is not yet loaded, then the pin duration is set to <a id="sthref3615"></a><code>OCI_DURATION_DEFAULT</code> for <code>OCI_DURATION_NULL</code>.</p>
</dd>
<dt>lock_option (IN)</dt>
<dd>
<p>Lock option (for example, exclusive). If a lock option is specified, the object is locked in the server. The lock status of an object can also be retrieved by calling <code>OCIObjectIsLocked()</code>. Valid values include:<a id="sthref3616"></a></p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_LOCK_NONE</code> (no lock)</p>
</li>
<li>
<p><code>OCI_LOCK_X</code> (exclusive lock)</p>
</li>
<li>
<p><code>OCI_LOCK_X_NOWAIT</code> (exclusive lock with the <code>NOWAIT</code> option)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci14oca.htm#i443357">"Locking with the NOWAIT Option"</a></div>
</li>
</ul>
<dl>
<dt>object (OUT)</dt>
<dd>
<p>The pointer to the pinned object.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3617"></a>Comments</p>
<p>This function pins a referenceable object instance when given the object reference. The process of pinning serves two purposes:</p>
<ul>
<li>
<p>It locates an object given its reference. This is done by the object cache that keeps track of the objects in the object cache.</p>
</li>
<li>
<p>It notifies the object cache that a persistent object is being used such that the persistent object cannot be aged out. Because a persistent object can be loaded from the server whenever is needed, the memory utilization can be increased if a completely unpinned persistent object can be freed (aged out) even before the allocation duration is expired. An object can be pinned many times. A pinned object remains in memory until it is completely unpinned.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i438263">"OCIObjectUnpin()"</a></div>
</li>
</ul>
<dl>
<dt>For Persistent Objects</dt>
<dd>
<p>When pinning a persistent object, if it is not in the cache, the object is fetched from the persistent store. The allocation duration of the object is session. If the object is already in the cache, it is returned to the client. The object is locked in the server if a lock option is specified.</p>
<p>This function returns an error for a nonexistent object.</p>
<p>A pin option is used to specify the copy of the object that is to be retrieved:</p>
</dd>
</dl>
<ul>
<li>
<p>If <code>pin_option</code> is <code>OCI_PIN_ANY</code> (pin any), then if the object is already in the object cache, return this object. Otherwise, the object is retrieved from the database. In this case, it is the same as <code>OCI_PIN_LATEST</code>. This option is useful when the client knows that he has the exclusive access to the data in a session.</p>
</li>
<li>
<p>If <code>pin_option</code> is <code>OCI_PIN_LATEST</code> (pin latest), if the object is not locked, it is retrieved from the database. If the object is cached, it is refreshed with the latest version. See <code>OCIObjectRefresh()</code> for more information about refreshing. If the object is already pinned in the cache and marked dirty, then a pointer to that object is returned. The object is not refreshed from the database.</p>
</li>
<li>
<p>If <code>pin_option</code> is <code>OCI_PIN_RECENT</code> (pin recent), if the object is loaded into the cache in the current transaction, the object is returned. If the object is not loaded in the current transaction, the object is refreshed from the server.</p>
</li>
</ul>
<dl>
<dt>For Transient Objects</dt>
<dd>
<p>This function returns an error if the transient object has already been freed. This function does not return an error if an exclusive lock is specified in the lock option.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3618"></a>Related Functions</p>
<p><a href="#i438263">OCIObjectUnpin()</a>, <a href="#i433515">OCIObjectPinCountReset()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17352" class="refsect2"><a id="i433515"></a>
<h2 class="refsect2">OCIObjectPinCountReset()<a id="sthref3619"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3620"></a>Purpose</p>
<p>Completely unpins an object, setting its pin count to zero.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3621"></a>Syntax</p>
<pre>
sword OCIObjectPinCountReset ( OCIEnv        *env, 
                               OCIError      *err, 
                               void          *object );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3622"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>object (IN)</dt>
<dd>
<p>A pointer to an object, which must already be pinned.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3623"></a>Comments</p>
<p>This function completely unpins an object, setting its pin count to zero. When an object is completely unpinned, it can be freed implicitly by the OCI at any time without error. The following rules apply to specific object types:</p>
<dl>
<dt>For Persistent Objects</dt>
<dd>
<p>When a persistent object is completely unpinned, it becomes a candidate for aging. The memory of an object is freed when it is aged out. Aging is used to maximize the utilization of memory. A dirty object cannot be aged out unless it is flushed.</p>
</dd>
<dt>For Transient Objects</dt>
<dd>
<p>The pin count of the object is decremented. A transient object can be freed only at the end of its allocation duration or when it is explicitly freed by calling <a href="#i430212">OCIObjectFree()</a>.</p>
</dd>
<dt>For Values</dt>
<dd>
<p>This function returns an error for value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci11obj.htm#i446786">"Pin Count and Unpinning"</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3624"></a>Related Functions</p>
<p><a href="#i433563">OCIObjectPin()</a>, <a href="#i438263">OCIObjectUnpin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17353" class="refsect2"><a id="i433457"></a>
<h2 class="refsect2">OCIObjectPinTable()<a id="sthref3625"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3626"></a>Purpose</p>
<p>Pins a table object for a specified duration.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3627"></a>Syntax</p>
<pre>
sword OCIObjectPinTable ( OCIEnv             *env, 
                          OCIError           *err, 
                          const OCISvcCtx    *svc, 
                          const OraText      *schema_name,
                          ub4                s_n_length, 
                          const OraText      *object_name, 
                          ub4                o_n_length, 
                          const OCIRef       *scope_obj_ref, 
                          OCIDuration        pin_duration, 
                          void               **object );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3628"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>svc (IN)</dt>
<dd>
<p>The OCI service context handle.</p>
</dd>
<dt>schema_name (IN) [optional]</dt>
<dd>
<p>The schema name of the table.</p>
</dd>
<dt>s_n_length (IN) [optional]</dt>
<dd>
<p>The length of the schema name indicated in <code>schema_name</code>, in bytes.</p>
</dd>
<dt>object_name (IN)</dt>
<dd>
<p>The name of the table.</p>
</dd>
<dt>o_n_length (IN)</dt>
<dd>
<p>The length of the table name specified in <code>object_name</code>, in bytes.</p>
</dd>
<dt>scope_obj_ref (IN) [optional]</dt>
<dd>
<p>The reference of the scoping object.</p>
</dd>
<dt>pin_duration (IN)</dt>
<dd>
<p>The pin duration.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i433563">"OCIObjectPin()"</a></div>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<dl>
<dt>object (OUT)</dt>
<dd>
<p>The pinned table object.</p>
</dd>
</dl>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3629"></a>Comments</p>
<p>This function pins a table object with the specified pin duration. The client can unpin the object by calling <a href="#i438263">OCIObjectUnpin()</a>.</p>
<p>The table object pinned by this call can be passed as a parameter to <a href="oci18nav004.htm#i470965">OCIObjectNew()</a> to create a standalone persistent object.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The TDO (array of TDOs or table definition) obtained by this function belongs to the logical partition of the cache corresponding to the service handle (connection) passed in. If TDOs or tables are used across logical partitions, then the behavior is not known and may change between releases.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3630"></a>Related Functions</p>
<p><a href="#i433563">OCIObjectPin()</a>, <a href="#i438263">OCIObjectUnpin()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17354" class="refsect2"><a id="i438263"></a>
<h2 class="refsect2">OCIObjectUnpin()<a id="sthref3631"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3632"></a>Purpose</p>
<p>Unpins an object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3633"></a>Syntax</p>
<pre>
sword OCIObjectUnpin ( OCIEnv        *env,
                       OCIError      *err, 
                       void          *object );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3634"></a>Parameters</p>
<dl>
<dt>env (IN/OUT)</dt>
<dd>
<p>The OCI environment handle initialized in object mode. See the descriptions of <a href="oci16rel001.htm#i556149">OCIEnvCreate()</a>, <a href="oci16rel001.htm#i562098">OCIEnvNlsCreate()</a>, and <a href="ociaedep001.htm#i556330">OCIInitialize()</a> (deprecated) for more information.</p>
</dd>
<dt>err (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>object (IN)</dt>
<dd>
<p>A pointer to an object, which must already be pinned.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3635"></a>Comments</p>
<p>There is a pin count associated with each object, which is incremented whenever an object is pinned. When the pin count of the object is zero, the object is said to be completely unpinned. An unpinned object can be freed implicitly by OCI at any time without error.</p>
<p>This function unpins an object. An object is completely unpinned when any of the following is true:</p>
<ul>
<li>
<p>The object's pin count reaches zero (that is, it is unpinned a total of <span class="italic">n</span> times after being pinned a total of <span class="italic">n</span> times).</p>
</li>
<li>
<p>It is the end of the object's pin duration.</p>
</li>
<li>
<p>The function <code>OCIObjectPinCountReset()</code> is called on the object.</p>
</li>
</ul>
<p>When an object is completely unpinned, it can be freed implicitly by OCI at any time without error.</p>
<p>The following rules apply to unpinning different types of objects:</p>
<dl>
<dt>For Persistent Objects</dt>
<dd>
<p>When a persistent object is completely unpinned, it becomes a candidate for aging. The memory of an object is freed when it is aged out. Aging is used to maximize the utilization of memory. A dirty object cannot be aged out unless it is flushed.</p>
</dd>
<dt>For Transient Objects</dt>
<dd>
<p>The pin count of the object is decremented. A transient object can be freed only at the end of its allocation duration or when it is explicitly deleted by calling <code>OCIObjectFree()</code>.</p>
</dd>
<dt>For Values</dt>
<dd>
<p>This function returns an error for values.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref3636"></a>Related Functions</p>
<p><a href="#i433563">OCIObjectPin()</a>, <a href="#i433515">OCIObjectPinCountReset()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci18nav004.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci18nav006.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
