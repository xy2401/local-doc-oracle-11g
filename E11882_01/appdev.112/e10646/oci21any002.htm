<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>OCI Any Data Interface Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:45Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="oci21any001.htm" title="Previous" type="text/html" />
<link rel="Next" href="oci21any003.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">59/79</span> <!-- End Header --><a id="i521646"></a>
<div id="LNOCI202" class="refsect1">
<h1 class="refsect1">OCI Any Data Interface Functions</h1>
<p><a href="#BGBHIHFG">Table 21-3</a> lists the Any Data Interface functions that are described in this section.</p>
<div id="LNOCI17602" class="tblformalwide">
<p class="titleintable"><a id="sthref4829"></a><a id="BGBHIHFG"></a>Table 21-3 Any Data Functions &nbsp;</p>
<table class="cellalignment1011" title="Any Data Functions &nbsp;" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t7">Function</th>
<th class="cellalignment1012" id="r1c2-t7">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#i521738">"OCIAnyDataAccess()"</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t7 r1c2-t7">
<p>Retrieve the data value of an <code>OCIAnyData</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#i520814">"OCIAnyDataAttrGet()"</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t7 r1c2-t7">
<p>Get the value of the attribute at the current position in the <code>OCIAnyData</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#i522394">"OCIAnyDataAttrSet()"</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t7 r1c2-t7">
<p>Set the attribute at the current position with a given value</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#i522801">"OCIAnyDataBeginCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t7 r1c2-t7">
<p>Allocate an <code>OCIAnyData</code> for the given duration and initialize it with the type information</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#i521748">"OCIAnyDataCollAddElem()"</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t7 r1c2-t7">
<p>Add the next collection element to the collection attribute of the <code>OCIAnyData</code> at the current attribute position</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t7" headers="r1c1-t7">
<p><a href="#i521752">"OCIAnyDataCollGetElem()"</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t7 r1c2-t7">
<p>Access sequentially the elements in the collection attribute at the current position in the <code>OCIAnyData</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t7" headers="r1c1-t7">
<p><a href="#i521756">"OCIAnyDataConvert()"</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t7 r1c2-t7">
<p>Construct an <code>OCIAnyData</code> with the given data value of the given type</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t7" headers="r1c1-t7">
<p><a href="#i521760">"OCIAnyDataDestroy()"</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t7 r1c2-t7">
<p>Free an AnyData</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t7" headers="r1c1-t7">
<p><a href="#i521764">"OCIAnyDataEndCreate()"</a></p>
</td>
<td class="cellalignment1013" headers="r10c1-t7 r1c2-t7">
<p>Mark the end of <code>OCIAnyData</code> creation</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t7" headers="r1c1-t7">
<p><a href="#i524107">"OCIAnyDataGetCurrAttrNum()"</a></p>
</td>
<td class="cellalignment1013" headers="r11c1-t7 r1c2-t7">
<p>Return the current attribute number of the <code>OCIAnyData</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t7" headers="r1c1-t7">
<p><a href="#i521768">"OCIAnyDataGetType()"</a></p>
</td>
<td class="cellalignment1013" headers="r12c1-t7 r1c2-t7">
<p>Get the type corresponding to an AnyData value</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t7" headers="r1c1-t7">
<p><a href="#i521772">"OCIAnyDataIsNull()"</a></p>
</td>
<td class="cellalignment1013" headers="r13c1-t7 r1c2-t7">
<p>Check if <code>OCIAnyData</code> is <code>NULL</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t7" headers="r1c1-t7">
<p><a href="#i524177">"OCIAnyDataTypeCodeToSqlt()"</a></p>
</td>
<td class="cellalignment1013" headers="r14c1-t7 r1c2-t7">
<p>Convert the <code>OCITypeCode</code> for an AnyData value to the SQLT code that corresponds to the representation of the value as returned by the OCIAnyData API</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="LNOCI17603" class="refsect2"><a id="i521738"></a>
<h2 class="refsect2"><a id="sthref4830"></a>OCIAnyDataAccess()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4831"></a>Purpose</p>
<p>Retrieves the data value of an <code>OCIAnyData</code>. The data value should be of the type with which the <code>OCIAnyData</code> was initialized. You can use this call to access an entire <code>OCIAnyData</code>, which can be of type <code>OCI_TYPECODE_OBJECT</code>, any of the collection types, or any of the built-in types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4832"></a>Syntax</p>
<pre>
sword OCIAnyDataAccess ( OCISvcCtx    *svchp, 
                         OCIError     *errhp,
                         OCIAnyData   *sdata, 
                         OCITypeCode  tc, 
                         OCIType      *inst_type, 
                         void         *null_ind, 
                         void         *data_value, 
                         ub4          *length );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4833"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN)</dt>
<dd>
<p>Initialized pointer to an <code>OCIAnyData</code>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p>Typecode of the data value. This is used for type checking (with the initialization type of the <code>OCIAnyData</code>).</p>
</dd>
<dt>inst_type (IN)</dt>
<dd>
<p>The <code>OCIType</code> of the data value (if it is not a primitive one). If the <code>tc</code> parameter is any of the following types, then this parameter should be not <code>NULL</code>.</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_TYPECODE_OBJECT</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_REF</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_VARRAY</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_TABLE</code></p>
</li>
</ul>
<p>Otherwise, it could be <code>NULL</code>.</p>
<dl>
<dt>null_ind (OUT)</dt>
<dd>
<p>Indicates if the <code>data_value</code> is <code>NULL</code>. Pass an <code>(OCIInd *)</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>. The value returned is <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it is <code><a id="sthref4834"></a>OCI_IND_NULL</code> for a <code>NULL</code> value. If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer to the indicator struct of the <code>data_value</code> as the argument here. See <a href="#i520814">OCIAnyDataAttrGet()</a> for details.</p>
</dd>
<dt>data_value (OUT)</dt>
<dd>
<p>The data value (is of the type with which the <code>OCIAnyData</code> was initialized). See <a href="#i520814">OCIAnyDataAttrGet()</a> for the appropriate C type corresponding to each allowed typecode and for a description of how memory allocation behavior depends on the value passed for this parameter.</p>
</dd>
<dt>length (OUT)</dt>
<dd>
<p>Currently, this parameter is ignored. In the future, this may be used for certain typecodes where the data representation itself does not give the length, in bytes, implicitly.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17604" class="refsect2"><a id="i520814"></a>
<h2 class="refsect2"><a id="sthref4835"></a>OCIAnyDataAttrGet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4836"></a>Purpose</p>
<p>Gets the value of the attribute at the current position in the <code>OCIAnyData</code>. Attribute values can be accessed sequentially.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4837"></a>Syntax</p>
<pre>
sword OCIAnyDataAttrGet ( OCISvcCtx    *svchp, 
                          OCIError     *errhp, 
                          OCIAnyData   *sdata, 
                          OCITypeCode  tc, 
                          OCIType      *attr_type, 
                          void         *null_ind, 
                          void         *attr_value, 
                          ub4          *length, 
                          boolean      is_any );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4838"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Pointer to initialized type <code>OCIAnyData</code>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p>Typecode of the attribute. Type checking happens based on <code>tc</code>, <code>attr_type</code>, and the type information in the <code>OCIAnyData</code>.</p>
</dd>
<dt>attr_type (IN) [optional]</dt>
<dd>
<p>The <code>attr_type</code> parameter should give the type description of the referenced type (for <code>OCI_TYPECODE_REF</code>) or the type description of the collection type (for <code>OCI_TYPECODE_VARRAY</code>, <code>OCI_TYPECODE_TABLE</code>), or the type description of the object (for <code>OCI_TYPECODE_OBJECT</code>). This parameter is not required for built-in typecodes.</p>
</dd>
<dt>null_ind (OUT)</dt>
<dd>
<p>Indicates if the <code>attr_value</code> is <code>NULL</code>. Pass <code>(OCIInd *)</code> in <code>null_ind</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>.</p>
<p>If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer <code>(void **)</code> in <code>null_ind</code>.</p>
<p>The indicator returned is <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it is <code>OCI_IND_NULL</code> for a <code>NULL</code> value.</p>
</dd>
<dt>attr_value (IN/OUT)</dt>
<dd>
<p>Value for the attribute.</p>
</dd>
<dt>length (IN/OUT)</dt>
<dd>
<p>Currently, this parameter is ignored. Pass 0 here. In the future, this may be used for certain typecodes where the data representation itself does not give the length, in bytes, implicitly.</p>
</dd>
<dt>is_any (IN)</dt>
<dd>
<p>Is attribute to be returned in the form of <code>OCIAnyData</code>?</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4839"></a>Comments</p>
<p>You can use this call with an <code>OCIAnyData</code> of typecode <code>OCI_TYPECODE_OBJECT</code> only.</p>
<ul>
<li>
<p>This call gets the value of the attribute at the current position in the <code>OCIAnyData</code>.</p>
</li>
<li>
<p>The <code>tc</code> parameter must match the type of the attribute at the current position; otherwise, an error is returned.</p>
</li>
<li>
<p>The <code>is_any</code> parameter is applicable only when the typecode of the attribute is one of these values:</p>
<ul>
<li>
<p><code>OCI_TYPECODE_OBJECT</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_VARRAY</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_TABLE</code></p>
</li>
</ul>
<p>If <code>is_any</code> is <code>TRUE</code>, then <code>attr_value</code> is returned in the form of <code>OCIAnyData*</code>.</p>
</li>
<li>
<p>You must allocate the memory for the attribute before calling the function. You can allocate memory through <code>OCIObjectNew()</code>. For built-in types such as <code>NUMBER</code> and <code>VARCHAR</code>, the attribute can be just a pointer to a stack variable. <a href="#BGBDDHHJ">Table 21-4</a> lists the available Oracle data types that can be used as object attribute types and the corresponding types of the attribute value that should be passed.</p>
</li>
</ul>
<div id="LNOCI17605" class="tblformal">
<p class="titleintable"><a id="sthref4840"></a><a id="BGBDDHHJ"></a>Table 21-4 Data Types and Attribute Values</p>
<table class="cellalignment1016" title="Data Types and Attribute Values " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t8">Data Types</th>
<th class="cellalignment1012" id="r1c2-t8">attr_value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t8" headers="r1c1-t8">
<p><code>VARCHAR2, VARCHAR, CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t8 r1c2-t8">
<p><code>OCIString **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t8" headers="r1c1-t8">
<p><code>NUMBER, REAL, INT, FLOAT, DECIMAL</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t8 r1c2-t8">
<p><code>OCINumber **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t8" headers="r1c1-t8">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t8 r1c2-t8">
<p><code>OCIDate **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t8" headers="r1c1-t8">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t8 r1c2-t8">
<p><code>OCIDateTime **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t8" headers="r1c1-t8">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t8 r1c2-t8">
<p><code>OCIDateTime **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t8" headers="r1c1-t8">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t8 r1c2-t8">
<p><code>OCIDateTime **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t8" headers="r1c1-t8">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t8 r1c2-t8">
<p><code>OCIInterval **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t8" headers="r1c1-t8">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t8 r1c2-t8">
<p><code>OCIInterval **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t8" headers="r1c1-t8">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t8 r1c2-t8">
<p><code>OCILobLocator **</code> or <code>OCIBlobLocator **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t8" headers="r1c1-t8">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t8 r1c2-t8">
<p><code>OCILobLocator **</code> or <code>OCIClobLocator *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t8" headers="r1c1-t8">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t8 r1c2-t8">
<p><code>OCILobLocator **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t8" headers="r1c1-t8">
<p><code>REF</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t8 r1c2-t8">
<p><code>OCIRef **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t8" headers="r1c1-t8">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t8 r1c2-t8">
<p><code>OCIRaw **</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t8" headers="r1c1-t8">
<p><code>VARRAY</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t8 r1c2-t8">
<p><code>OCIArray **</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t8" headers="r1c1-t8">
<p><code>TABLE</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t8 r1c2-t8">
<p><code>OCITable **</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t8" headers="r1c1-t8">
<p><code>OBJECT</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t8 r1c2-t8">
<p><code>void **</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17606" class="refsect2"><a id="i522394"></a>
<h2 class="refsect2"><a id="sthref4841"></a>OCIAnyDataAttrSet()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4842"></a>Purpose</p>
<p>Sets the attribute at the current position with a given value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4843"></a>Syntax</p>
<pre>
sword OCIAnyDataAttrSet ( OCISvcCtx    *svchp, 
                          OCIError     *errhp, 
                          OCIAnyData   *sdata, 
                          OCITypeCode  tc, 
                          OCIType      *attr_type, 
                          void         *null_ind, 
                          void         *attr_value, 
                          ub4          length, 
                          boolean      is_any );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4844"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p>Typecode of the attribute. Type checking happens based on <code>tc</code>, <code>attr_type</code>, and the type information in the <code>OCIAnyData</code>.</p>
</dd>
<dt>attr_type (IN) [optional]</dt>
<dd>
<p>The <code>attr_type</code> parameter gives the type description of the referenced type (for <code>OCI_TYPECODE_REF</code>), the type description of the collection type (for <code>OCI_TYPECODE_VARRAY</code>, <code>OCI_TYPECODE_TABLE</code>), and the type description of the object (for <code>OCI_TYPECODE_OBJECT</code>). This parameter is not required for built-in typecodes or if <code>OCI_TYPECODE_NONE</code> is specified.</p>
</dd>
<dt>null_ind (IN)</dt>
<dd>
<p>Indicates if the <code>attr_value</code> is <code>NULL</code>. Pass <code>(OCIInd *)</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>. The indicator should be <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it should be <code>OCI_IND_NULL</code> for a <code>NULL</code> value.</p>
<p>If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer to the indicator struct of the <code>attr_value</code> as the argument here.</p>
</dd>
<dt>attr_value (IN)</dt>
<dd>
<p>Value for the attribute.</p>
</dd>
<dt>length (IN)</dt>
<dd>
<p>Currently, this parameter is ignored. Pass 0 here. In the future, this may be used for certain typecodes where the data representation itself does not give the length implicitly.</p>
</dd>
<dt>is_any (IN)</dt>
<dd>
<p>Is attribute in the form of <code>OCIAnyData</code>?</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4845"></a>Comments</p>
<p><a href="#i522801">OCIAnyDataBeginCreate()</a> creates an <code>OCIAnyData</code> with an empty skeleton instance. To fill the attribute values, use <code>OCIAnyDataAttrSet()</code> (for <code>OCI_TYPECODE_OBJECT</code>) or <a href="#i521748">OCIAnyDataCollAddElem()</a> (for the collection typecodes).</p>
<p>Attribute values must be set in order, from the first attribute to the last. The current attribute number is remembered as the state maintained inside the <code>OCIAnyData</code>. Piece-wise construction of embedded attributes and collection elements is not yet supported.</p>
<p>This call sets the attribute at the current position with <code>attr_value</code>. Once piece-wise construction has started for an <code>OCIAnyData</code> instance, the <code>OCIAnyDataConstruct()</code> calls can no longer be used.</p>
<p>The <code>tc</code> parameter must match the type of the attribute at the current position. Otherwise, an error is returned.</p>
<p>If <code>is_any</code> is <code>TRUE</code>, then the attribute must be in the form of <code>OCIAnyData*</code>, and it is copied into the enclosing <code>OCIAnyData</code> (data) without any conversion.</p>
<p><a href="#BGBBBGEE">Table 21-5</a> lists the available data types that can be used as object attribute types and the corresponding types of the attribute value that should be passed.</p>
<div id="LNOCI17607" class="tblformal">
<p class="titleintable"><a id="sthref4846"></a><a id="BGBBBGEE"></a>Table 21-5 Data Types and Attribute Values</p>
<table class="cellalignment1016" title="Data Types and Attribute Values " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t9">Data Types</th>
<th class="cellalignment1012" id="r1c2-t9">attr_value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t9" headers="r1c1-t9">
<p><code>VARCHAR2, VARCHAR, CHAR</code></p>
</td>
<td class="cellalignment1013" headers="r2c1-t9 r1c2-t9">
<p><code>OCIString *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t9" headers="r1c1-t9">
<p><code>NUMBER, REAL, INT, FLOAT, DECIMAL</code></p>
</td>
<td class="cellalignment1013" headers="r3c1-t9 r1c2-t9">
<p><code>OCINumber *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t9" headers="r1c1-t9">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1013" headers="r4c1-t9 r1c2-t9">
<p><code>OCIDate *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1013" headers="r5c1-t9 r1c2-t9">
<p><code>OCIDateTime *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r6c1-t9 r1c2-t9">
<p><code>OCIDateTime *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t9" headers="r1c1-t9">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment1013" headers="r7c1-t9 r1c2-t9">
<p><code>OCIDateTime *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t9" headers="r1c1-t9">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1013" headers="r8c1-t9 r1c2-t9">
<p><code>OCIInterval *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t9" headers="r1c1-t9">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1013" headers="r9c1-t9 r1c2-t9">
<p><code>OCIInterval *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r10c1-t9" headers="r1c1-t9">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1013" headers="r10c1-t9 r1c2-t9">
<p><code>OCILobLocator *</code> or <code>OCIBlobLocator *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r11c1-t9" headers="r1c1-t9">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1013" headers="r11c1-t9 r1c2-t9">
<p><code>OCILobLocator *</code> or <code>OCIClobLocator *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r12c1-t9" headers="r1c1-t9">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment1013" headers="r12c1-t9 r1c2-t9">
<p><code>OCILobLocator *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r13c1-t9" headers="r1c1-t9">
<p><code>REF</code></p>
</td>
<td class="cellalignment1013" headers="r13c1-t9 r1c2-t9">
<p><code>OCIRef *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r14c1-t9" headers="r1c1-t9">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1013" headers="r14c1-t9 r1c2-t9">
<p><code>OCIRaw *</code></p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r15c1-t9" headers="r1c1-t9">
<p><code>VARRAY</code></p>
</td>
<td class="cellalignment1013" headers="r15c1-t9 r1c2-t9">
<p><code>OCIArray *</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r16c1-t9" headers="r1c1-t9">
<p><code>TABLE</code></p>
</td>
<td class="cellalignment1013" headers="r16c1-t9 r1c2-t9">
<p><code>OCITable *</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r17c1-t9" headers="r1c1-t9">
<p><code>OBJECT</code></p>
</td>
<td class="cellalignment1013" headers="r17c1-t9 r1c2-t9">
<p><code>void *</code> (or <code>OCIAnyData *</code> if <code>is_any</code> is <code>TRUE</code>)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17608" class="refsect2"><a id="i522801"></a>
<h2 class="refsect2"><a id="sthref4847"></a>OCIAnyDataBeginCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4848"></a>Purpose</p>
<p>Allocates an <code>OCIAnyData</code> for the given duration and initializes it with the type information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4849"></a>Syntax</p>
<pre>
sword OCIAnyDataBeginCreate ( OCISvcCtx      *svchp, 
                              OCIError       *errhp, 
                              OCITypeCode    tc, 
                              OCIType        *type,
                              OCIDuration    dur,
                              OCIAnyData     **sdata );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4850"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p>Typecode corresponding to <code>OCIAnyData</code>. Can be a built-in typecode or a user-defined type's typecode such as:</p>
</dd>
</dl>
<ul>
<li>
<p><code>OCI_TYPECODE_OBJECT</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_REF</code></p>
</li>
<li>
<p><code>OCI_TYPECODE_VARRAY</code></p>
</li>
</ul>
<dl>
<dt>type (IN)</dt>
<dd>
<p>The type corresponding to <code>OCIAnyData.</code> If the typecode corresponds to a built-in type (<code>OCI_TYPECODE_NUMBER</code>, and so on), this parameter can be <code>NULL</code>. It should be non-<code>NULL</code> for user-defined types (<code>OCI_TYPECODE_OBJECT</code>, <code>OCI_TYPECODE_REF</code>, collection types, and so on).</p>
</dd>
<dt>dur (IN)</dt>
<dd>
<p>Duration for which <code>OCIAnyData</code> is allocated. It is one of these:</p>
</dd>
</dl>
<ul>
<li>
<p>A user duration that was previously created. It can be created by using <a href="oci17msc002.htm#i541721">OCIDurationBegin()</a>.<a id="sthref4851"></a></p>
</li>
<li>
<p><a id="sthref4852"></a>A predefined duration, such as <code>OCI_DURATION_SESSION</code>.</p>
</li>
</ul>
<dl>
<dt>sdata (OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>. If <code>(*sdata)</code> is not <code>NULL</code> at the beginning of the call, the memory could be reused instead of reallocating space for <code>OCIAnyData</code>.</p>
<p>Therefore, do not pass an uninitialized pointer here.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4853"></a>Comments</p>
<p><code>OCIAnyDataBeginCreate()</code> creates an <code>OCIAnyData</code> with an empty skeleton instance. To fill in the attribute values, use <a href="#i522394">OCIAnyDataAttrSet()</a> for <code>OCI_TYPECODE_OBJECT</code> or <a href="#i521748">OCIAnyDataCollAddElem()</a> for the collection typecodes.</p>
<p>Attribute values must be set in order. They must be set from the first attribute to the last. The current attribute number is remembered as state maintained inside the <code>OCIAnyData</code>. Piece-wise construction of embedded attributes and collection elements is not yet supported.</p>
<p>For performance reasons, <code>OCIAnyData</code> ends up pointing to the <code>OCIType</code> parameter passed in. You must ensure that the <code>OCIType</code> lives longer (has an allocation duration &gt;= the duration of <code>OCIAnyData</code>, if the <code>OCIType</code> is a transient one, or has an allocation or pin duration &gt;= the duration of <code>OCIAnyData</code>, if the <code>OCIType</code> is a persistent one).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17609" class="refsect2"><a id="i521748"></a>
<h2 class="refsect2"><a id="sthref4854"></a>OCIAnyDataCollAddElem()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4855"></a>Purpose</p>
<p>Adds the next collection element to the collection attribute of the <code>OCIAnyData</code> at the current attribute position. If the <code>OCIAnyData</code> is of a collection type, then there is no notion of attribute position and this call adds the next collection element.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4856"></a>Syntax</p>
<pre>
sword OCIAnyDataCollAddElem ( OCISvcCtx    *svchp, 
                              OCIError     *errhp, 
                              OCIAnyData   *sdata, 
                              OCITypeCode  collelem_tc, 
                              OCIType      *collelem_type, 
                              void         *null_ind, 
                              void         *elem_value, 
                              ub4          length, 
                              boolean      is_any, 
                              boolean      last_elem );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4857"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
<dt>collelem_tc (IN)</dt>
<dd>
<p>The typecode of the collection element to be added. Type checking happens based on <code>collelem_tc</code>, <code>collelem_type</code> and the type information in the <code>OCIAnyData</code>.</p>
</dd>
<dt>collelem_type (IN) [optional]</dt>
<dd>
<p>The <code>collelem_type</code> parameter gives the type description of the referenced type (for <code>OCI_TYPECODE_REF</code>), the type description of the collection type (for <code>OCI_TYPECODE_NAMEDCOLLECTION</code>), and the type description of the object (for <code>OCI_TYPECODE_OBJECT</code>).</p>
<p>This parameter is not required for built-in typecodes.</p>
</dd>
<dt>null_ind (IN)</dt>
<dd>
<p>Indicates if the <code>elem_value</code> is <code>NULL</code>. Pass an <code>(OCIInd *)</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>. The indicator should be <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it should be <code>OCI_IND_NULL</code> for a <code>NULL</code> value.</p>
<p>If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer to the indicator struct of the <code>elem_value</code> as the argument here.</p>
</dd>
<dt>elem_value (IN)</dt>
<dd>
<p>Value for the collection element.</p>
</dd>
<dt>length (IN)</dt>
<dd>
<p>Length of the collection element.</p>
</dd>
<dt>is_any (IN)</dt>
<dd>
<p>Is the attribute in the form of <code>OCIAnyData</code>?</p>
</dd>
<dt>last_elem (IN)</dt>
<dd>
<p>Is the element being added the last in the collection?</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4858"></a>Comments</p>
<p>This call can be invoked for an <code>OCIAnyData</code> of type <code>OCI_TYPECODE_OBJECT</code> or of any of the collection types. Once piece-wise construction has started for an <code>OCIAnyData</code> instance, the <code>OCIAnyDataConstruct()</code> calls can no longer be used.</p>
<p>As in <code>OCIAnyDataAttrSet()</code>, <code>is_any</code> is applicable only if the <code>collelem_tc</code> is that of typecode <code>OCI_TYPECODE_OBJECT</code> or a collection typecode. If <code>is_any</code> is <code>TRUE</code>, the attribute should be in the form of <code>OCIAnyData *</code>.</p>
<p>If the element being added is the last element in the collection, <code>last_elem</code> should be set to <code>TRUE</code>.</p>
<p>To add a <code>NULL</code> element, the <code>NULL</code> indicator (<code>null_ind</code>) should be set to <code>OCI_IND_NULL</code>, in which case all other arguments are ignored. Otherwise, <code>null_ind</code> must be set to <code>OCI_IND_NOTNULL</code>.</p>
<p>See <a href="#i522394">"OCIAnyDataAttrSet()"</a> for the type of attribute to be passed in for all the possible types of the collection elements.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17610" class="refsect2"><a id="i521752"></a>
<h2 class="refsect2"><a id="sthref4859"></a>OCIAnyDataCollGetElem()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4860"></a>Purpose</p>
<p>Accesses sequentially the elements in the collection attribute at the current position in the <code>OCIAnyData</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4861"></a>Syntax</p>
<pre>
sword OCIAnyDataCollGetElem ( OCISvcCtx    *svchp, 
                              OCIError     *errhp, 
                              OCIAnyData   *sdata, 
                              OCITypeCode  collelem_tc, 
                              OCIType      *collelem_type, 
                              void         *null_ind, 
                              void         *collelem_value, 
                              ub4          *length, 
                              boolean      is_any );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4862"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
<dt>collelem_tc (IN)</dt>
<dd>
<p>The typecode of the collection element to be retrieved. Type checking happens based on <code>collelem_tc</code>, <code>collelem_type</code> and the type information in the <code>OCIAnyData</code>.</p>
</dd>
<dt>collelem_type (IN) [optional]</dt>
<dd>
<p>The <code>collelem_type</code> parameter gives the type description of the referenced type (for <code>OCI_TYPECODE_REF</code>), the type description of the collection type (for <code>OCI_TYPECODE_NAMEDCOLLECTION</code>), and the type description of the object (for <code>OCI_TYPECODE_OBJECT</code>).</p>
<p>This parameter is not required for built-in typecodes.</p>
</dd>
<dt>null_ind (OUT)</dt>
<dd>
<p>Indicates if the <code>collelem_value</code> is <code>NULL</code>. Pass an <code>(OCIInd *)</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>. The indicator should be <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it should be <code>OCI_IND_NULL</code> for a <code>NULL</code> value.</p>
<p>If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer <code>(void **)</code> to the indicator struct of the <code>collelem_value</code> as the argument here.</p>
</dd>
<dt>collelem_value (IN/OUT)</dt>
<dd>
<p>Value for the collection element.</p>
</dd>
<dt>length (IN/OUT)</dt>
<dd>
<p>Length of the collection element. Currently ignored. Set to 0 on input.</p>
</dd>
<dt>is_any (IN)</dt>
<dd>
<p>Is <code>attr_value</code> to be returned in the form of <code>OCIAnyData</code>?</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4863"></a>Comments</p>
<p>The <code>OCIAnyData</code> data can also correspond to a top-level collection. If the <code>OCIAnyData</code> is of type <code>OCI_TYPECODE_OBJECT</code>, the attribute at the current position must be a collection of the appropriate type. Otherwise, an error is returned.</p>
<p>As for <a href="#i520814">OCIAnyDataAttrGet()</a>, the <code>is_any</code> parameter is applicable only if the <code>collelem_tc</code> typecode is <code>OCI_TYPECODE_OBJECT</code>. If <code>is_any</code> is <code>TRUE</code>, the <code>attr_value</code> is in the form of <code>OCIAnyData *</code>.</p>
<p>This call returns <code>OCI_NO_DATA</code> when the end of the collection has been reached. It returns <code>OCI_SUCCESS</code> upon success and <code>OCI_ERROR</code> upon error.</p>
<p>See <a href="#i520814">"OCIAnyDataAttrGet()"</a> for the type of attribute to be passed in for all the possible types of the collection elements.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17611" class="refsect2"><a id="i521756"></a>
<h2 class="refsect2"><a id="sthref4864"></a>OCIAnyDataConvert()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4865"></a>Purpose</p>
<p>Constructs an <code>OCIAnyData</code> with the given data value that is of the given type. You can use this call to construct an entire <code>OCIAnyData</code>, which could be of type <code>OCI_TYPECODE_OBJECT</code>, any of the collection types, or any of the built-in types.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4866"></a>Syntax</p>
<pre>
sword OCIAnyDataConvert ( OCISvcCtx    *svchp, 
                          OCIError     *errhp, 
                          OCITypeCode  tc, 
                          OCIType      *inst_type, 
                          OCIDuration  dur, 
                          void         *null_ind, 
                          void         *data_value, 
                          ub4          length, 
                          OCIAnyData   **sdata );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4867"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p>Typecode of the data value. Can be a built-in typecode or a user-defined type's typecode (such as <code>OCI_TYPECODE_OBJECT</code>, <code>OCI_TYPECODE_REF</code>, or <code>OCI_TYPECODE_VARRAY</code>).</p>
<p>If (<code>*sdata</code>) is not <code>NULL</code> and it represents a skeleton instance returned during the <a href="oci21any003.htm#i521888">OCIAnyDataSetAddInstance()</a>, the <code>tc</code> and the <code>inst_type</code> parameters are optional here. This is because the type information for such a skeleton instance is known. If the <code>tc</code> and <code>inst_type</code> parameters are provided for this situation, they are used only for type-checking purposes.</p>
</dd>
<dt>inst_type (IN)</dt>
<dd>
<p>Type corresponding to the <code>OCIAnyData</code>. If the typecode corresponds to a built-in type (<code>OCI_TYPECODE_NUMBER</code>, and so on), this parameter can be <code>NULL</code>. It should not be <code>NULL</code> for user-defined types (<code>OCI_TYPECODE_OBJECT</code>, <code>OCI_TYPECODE_REF</code>, or collection types).</p>
</dd>
<dt>dur (IN)</dt>
<dd>
<p>Duration for which the <code>OCIAnyData</code> is allocated. It is one of these:</p>
</dd>
</dl>
<ul>
<li>
<p>A user duration that was previously created. It can be created by using <code>OCIDurationBegin()</code>.<a id="sthref4868"></a></p>
</li>
<li>
<p><a id="sthref4869"></a>A predefined duration, such as <code>OCI_DURATION_SESSION</code>.</p>
</li>
</ul>
<dl>
<dt>null_ind</dt>
<dd>
<p>Indicates if <code>data_value</code> is <code>NULL</code>. Pass an <code>(OCIInd *)</code> for all typecodes except <code>OCI_TYPECODE_OBJECT</code>. The indicator is <code>OCI_IND_NOTNULL</code> if the value is not <code>NULL</code>, and it is <code>OCI_IND_NULL</code> for a <code>NULL</code> value.</p>
<p>If the typecode is <code>OCI_TYPECODE_OBJECT</code>, pass a pointer to the indicator struct of the <code>data_value</code> as the argument here.</p>
</dd>
<dt>data_value (IN)</dt>
<dd>
<p>The data value (should be of the type with which the <code>OCIAnyData</code> was initialized). See <a href="#i522394">OCIAnyDataAttrSet()</a> for the appropriate C type corresponding to each allowed typecode.</p>
</dd>
<dt>length (IN)</dt>
<dd>
<p>Currently, this parameter is ignored. Pass 0 here. In the future, this may be used for certain typecodes where the data representation itself does not give the length implicitly.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>. If (<code>*sdata</code>) is not <code>NULL</code> at the beginning of the call, the memory could be reused instead of reallocating space for <code>OCIAnyData</code>.</p>
<p>Therefore, do not pass an uninitialized pointer here.</p>
<p>If (<code>*sdata</code>) represents a skeleton instance returned during an <a href="oci21any003.htm#i521888">OCIAnyDataSetAddInstance()</a> call, the <code>tc</code> and <code>inst_type</code> parameters are used for type checking, if necessary.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4870"></a>Comments</p>
<p>For performance reasons, <code>OCIAnyData</code> pointer ends up pointing to the passed in <code>OCIType</code> parameter. You must ensure that the <code>OCIType</code> lives longer (has an allocation duration &gt;= the duration of <code>OCIAnyData</code>, if the <code>OCIType</code> is a transient one, or has an allocation or pin duration &gt;= the duration of <code>OCIAnyData,</code> if the <code>OCIType</code> is a persistent one).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17612" class="refsect2"><a id="i521760"></a>
<h2 class="refsect2"><a id="sthref4871"></a>OCIAnyDataDestroy()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4872"></a>Purpose</p>
<p>Frees an <code>OCIAnyData</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4873"></a>Syntax</p>
<pre>
sword OCIAnyDataDestroy ( OCISvcCtx      *svchp, 
                          OCIError       *errhp, 
                          OCIAnyData     *sdata );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4874"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN/OUT)</dt>
<dd>
<p>Pointer to a type of <code>OCIAnyData</code> to be freed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17613" class="refsect2"><a id="i521764"></a>
<h2 class="refsect2"><a id="sthref4875"></a>OCIAnyDataEndCreate()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4876"></a>Purpose</p>
<p>Marks the end of <code>OCIAnyData</code> creation. It should be called after initializing all attributes of its instances with suitable values. This call is valid only if <code>OCIAnyDataBeginCreate()</code> was called earlier for the <code>OCIAnyData</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4877"></a>Syntax</p>
<pre>
sword OCIAnyDataEndCreate ( OCISvcCtx      *svchp, 
                            OCIError       *errhp, 
                            OCIAnyData     *data );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4878"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>data (IN/OUT)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17614" class="refsect2"><a id="i524107"></a>
<h2 class="refsect2"><a id="sthref4879"></a>OCIAnyDataGetCurrAttrNum()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4880"></a>Purpose</p>
<p>Returns the current attribute number of <code>OCIAnyData</code>. If <code>OCIAnyData</code> is being constructed, this function refers to the current attribute that is being set. Otherwise, if <code>OCIAnyData</code> is being accessed, this function refers to the attribute that is being accessed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4881"></a>Syntax</p>
<pre>
sword OCIAnyDataGetCurrAttrNum( OCISvcCtx      *svchp, 
                                OCIError       *errhp, 
                                OCIAnyData     *sdata,
                                ub4            *attrnum );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4882"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
<dt>attrnum (OUT)</dt>
<dd>
<p>The attribute number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17615" class="refsect2"><a id="i521768"></a>
<h2 class="refsect2"><a id="sthref4883"></a>OCIAnyDataGetType()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4884"></a>Purpose</p>
<p>Gets the type corresponding to an <code>OCIAnyData</code> value. It returns the actual pointer to the type maintained inside an <code>OCIAnyData</code>. No copying is done for performance reasons. Do not use this type after the <code>OCIAnyData</code> is freed (or its duration ends).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4885"></a>Syntax</p>
<pre>
sword OCIAnyDataGetType( OCISvcCtx      *svchp, 
                         OCIError       *errhp, 
                         OCIAnyData     *data,
                         OCITypeCode    *tc, 
                         OCIType        **type ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4886"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code>, and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>data (IN)</dt>
<dd>
<p>Initialized <code>OCIAnyData</code>.</p>
</dd>
<dt>tc (OUT)</dt>
<dd>
<p>The typecode corresponding to the <code>OCIAnyData</code>.</p>
</dd>
<dt>type (OUT)</dt>
<dd>
<p>The type corresponding to the <code>OCIAnyData</code>. This is <code>NULL</code> if the <code>OCIAnyData</code> corresponds to a built-in type.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17616" class="refsect2"><a id="i521772"></a>
<h2 class="refsect2"><a id="sthref4887"></a>OCIAnyDataIsNull()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4888"></a>Purpose</p>
<p>Checks if the content of the type within the <code>OCIAnyData</code> is <code>NULL</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4889"></a>Syntax</p>
<pre>
sword OCIAnyDataIsNull ( OCISvcCtx         *svchp, 
                         OCIError          *errhp,
                         const OCIAnyData  *sdata,
                         boolean           *isNull) ; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4890"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The OCI service context.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>err</code> and this function returns <code>OCI_ERROR</code>. Obtain diagnostic information by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>sdata (IN)</dt>
<dd>
<p><code>OCIAnyData</code> to be checked.</p>
</dd>
<dt>isNull (IN/OUT)</dt>
<dd>
<p><code>TRUE</code> if <code>NULL</code>; otherwise, <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17617" class="refsect2"><a id="i524177"></a>
<h2 class="refsect2"><a id="sthref4891"></a>OCIAnyDataTypeCodeToSqlt()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4892"></a>Purpose</p>
<p>Converts the <code>OCITypeCode</code> for an <code>OCIAnyData</code> value to the SQLT code that corresponds to the representation of the value as returned by the OCIAnyData API.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4893"></a>Syntax</p>
<pre>
sword  OCIAnyDataTypeCodeToSqlt ( OCIError       *errhp, 
                                  OCITypeCode    tc,
                                  ub1            *sqltcode,
                                  ub1            *csfrm) ;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4894"></a>Parameters</p>
<dl>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>The OCI error handle. If there is an error, it is recorded in <code>errhp</code>, and this function returns <code>OCI_ERROR</code>. Diagnostic information can be obtained by calling <a href="oci17msc007.htm#i540516">OCIErrorGet()</a>.</p>
</dd>
<dt>tc (IN)</dt>
<dd>
<p><code>OCITypeCode</code> corresponding to the AnyData value.</p>
</dd>
<dt>sqltcode (OUT)</dt>
<dd>
<p>SQLT code corresponding to the user format of the typecode.</p>
</dd>
<dt>csfrm (OUT)</dt>
<dd>
<p>Charset form corresponding to the user format of the typecode. Meaningful only for character types. Returns <code>SQLCS_IMPLICIT</code> or <code>SQLCS_NCHAR</code> (for <code>NCHAR</code> types).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref4895"></a>Comments</p>
<p>This function converts <code>OCI_TYPECODE_CHAR</code> and <code>OCI_TYPECODE_VARCHAR2</code> to <code>SQLT_VST</code> (which corresponds to the <code>OCIString</code> mapping) with a charset form of <code>SQLCS_IMPLICIT</code>. <code>OCI_TYPECODE_NVARCHAR2</code> also returns <code>SQLT_VST</code> (<code>OCIString</code> mapping is used by the OCIAnyData API) with a charset form of <code>SQLCS_NCHAR</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci12oty.htm#i438070">"NCHAR Typecodes for OCIAnyData Functions"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="oci21any001.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="oci21any003.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
