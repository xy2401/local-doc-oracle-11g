<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Deprecated Lob Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="dcterms.created" content="2014-07-18T15:18:46Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Call Interface Programmer's Guide" />
<meta name="dcterms.identifier" content="E10646-15" />
<meta name="dcterms.isVersionOf" content="LNOCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ociaedep002.htm" title="Previous" type="text/html" />
<link rel="Next" href="ociaedep004.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10646.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">77/79</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='ociaedep003'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="LNOCI18396" class="refsect1"><!-- infolevel="all" infotype="General" --><a id="sthref5788"></a>
<h1 class="refsect1">Deprecated Lob Functions</h1>
<p><a href="#CEGBHIAJ">Table E-4</a> lists the deprecated LOB functions that are described in this section.</p>
<div id="LNOCI18397" class="tblformal">
<p class="titleintable"><a id="sthref5789"></a><a id="CEGBHIAJ"></a>Table E-4 Deprecated LOB Functions</p>
<table class="cellalignment1016" title="Deprecated LOB Functions " summary="This table lists the deprecated Streams Advanced Queuing Functions." >
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t10">Function</th>
<th class="cellalignment1012" id="r1c2-t10">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t10" headers="r1c1-t10">
<p><a href="#CEGFJBBG">OCILobCopy()</a></p>
</td>
<td class="cellalignment1013" headers="r2c1-t10 r1c2-t10">
<p>Copy all or part of one LOB to another.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t10" headers="r1c1-t10">
<p><a href="#i450663">OCILobErase()</a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t10 r1c2-t10">
<p>Erase a portion of a LOB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r4c1-t10" headers="r1c1-t10">
<p><a href="#i555226">OCILobGetLength()</a></p>
</td>
<td class="cellalignment1013" headers="r4c1-t10 r1c2-t10">
<p>Get length of a LOB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r5c1-t10" headers="r1c1-t10">
<p><a href="#i455168">OCILobLoadFromFile()</a></p>
</td>
<td class="cellalignment1013" headers="r5c1-t10 r1c2-t10">
<p>Load a LOB from a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r6c1-t10" headers="r1c1-t10">
<p><a href="#i427817">OCILobRead()</a></p>
</td>
<td class="cellalignment1013" headers="r6c1-t10 r1c2-t10">
<p>Read a portion of a LOB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r7c1-t10" headers="r1c1-t10">
<p><a href="#i427862">OCILobTrim()</a></p>
</td>
<td class="cellalignment1013" headers="r7c1-t10 r1c2-t10">
<p>Truncate a LOB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r8c1-t10" headers="r1c1-t10">
<p><a href="#i427882">OCILobWrite()</a></p>
</td>
<td class="cellalignment1013" headers="r8c1-t10 r1c2-t10">
<p>Write into a LOB.</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r9c1-t10" headers="r1c1-t10">
<p><a href="#i493080">OCILobWriteAppend()</a></p>
</td>
<td class="cellalignment1013" headers="r9c1-t10 r1c2-t10">
<p>Write data beginning at the end of a LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="LNOCI18398" class="refsect2"><a id="CEGFJBBG"></a>
<h2 class="refsect2">OCILobCopy()<a id="sthref5790"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5791"></a>Purpose</p>
<p>Copies all or a portion of a LOB value into another LOB value. This function is deprecated. Use <a href="oci17msc002.htm#i578816">OCILobCopy2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5792"></a>Syntax</p>
<pre>
sword OCILobCopy ( OCISvcCtx        *svchp,
                   OCIError         *errhp,
                   OCILobLocator    *dst_locp,
                   OCILobLocator    *src_locp,
                   ub4              amount,
                   ub4              dst_offset,
                   ub4              src_offset );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5793"></a>Parameters</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="oci17msc002.htm#i578816">"OCILobCopy2()"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17186" class="refsect2"><a id="i450663"></a>
<h2 class="refsect2">OCILobErase()<a id="sthref5794"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5795"></a>Purpose</p>
<p>Erases a specified portion of the internal LOB data starting at a specified offset. This function is deprecated. Use <a href="oci17msc002.htm#i578657">OCILobErase2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5796"></a>Syntax</p>
<pre>
sword OCILobErase ( OCISvcCtx       *svchp,
                    OCIError        *errhp,
                    OCILobLocator   *locp,
                    ub4             *amount,
                    ub4             offset );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5797"></a>Parameters</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="oci17msc002.htm#i578657">"OCILobErase2()"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17199" class="refsect2"><a id="i555226"></a>
<h2 class="refsect2">OCILobGetLength()<a id="sthref5798"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5799"></a>Purpose</p>
<p>Gets the length of a LOB. This function is deprecated. Use <a href="oci17msc002.htm#i578679">OCILobGetLength2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5800"></a>Syntax</p>
<pre>
sword OCILobGetLength ( OCISvcCtx      *svchp,
                        OCIError       *errhp,
                        OCILobLocator  *locp,
                        ub4            *lenp );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5801"></a>Parameters</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="oci17msc002.htm#i578679">"OCILobGetLength2()"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17207" class="refsect2"><a id="i455168"></a>
<h2 class="refsect2">OCILobLoadFromFile()<a id="sthref5802"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5803"></a>Purpose</p>
<p>Loads and copies all or a portion of the file into an internal LOB. This function is deprecated. Use <a href="oci17msc002.htm#i578701">OCILobLoadFromFile2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5804"></a>Syntax</p>
<pre>
sword OCILobLoadFromFile ( OCISvcCtx        *svchp, 
                           OCIError         *errhp, 
                           OCILobLocator    *dst_locp, 
                           OCILobLocator    *src_locp, 
                           ub4              amount, 
                           ub4              dst_offset, 
                           ub4              src_offset ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5805"></a>Parameters</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="oci17msc002.htm#i578701">"OCILobLoadFromFile2()"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17212" class="refsect2"><a id="i427817"></a>
<h2 class="refsect2">OCILobRead()<a id="sthref5806"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5807"></a>Purpose</p>
<p>Reads a portion of a LOB or <code>BFILE</code>, as specified by the call, into a buffer. This function is deprecated. Use <a href="oci17msc002.htm#i578721">OCILobRead2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5808"></a>Syntax</p>
<pre>
sword OCILobRead ( OCISvcCtx          *svchp,
                   OCIError           *errhp,
                   OCILobLocator      *locp,
                   ub4                *amtp,
                   ub4                offset,
                   void               *bufp,
                   ub4                bufl,
                   void               *ctxp, 
                   OCICallbackLobRead (cbfp)
                                      ( void          *ctxp,
                                        const void    *bufp,
                                        ub4           len,
                                        ub1           piece 
                                      )
                   ub2                csid,
                   ub1                csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5809"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN)</dt>
<dd>
<p>A LOB or <code>BFILE</code> locator that uniquely references the LOB or <code>BFILE</code>. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">amtp</span> (IN/OUT)</dt>
<dd>
<p>The value in <code>amtp</code> is the amount in either bytes or characters, as shown in <a href="#CIHDFFII">Table E-5</a>.</p>
</dd>
</dl>
<div id="LNOCI17213" class="tblformal">
<p class="titleintable"><a id="sthref5810"></a><a id="CIHDFFII"></a>Table E-5 Characters or Bytes in amtp for OCILobRead()</p>
<table class="cellalignment1016" title="Characters or Bytes in amtp for OCILobRead()" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t15">LOB or BFILE</th>
<th class="cellalignment1012" id="r1c2-t15">Input</th>
<th class="cellalignment1012" id="r1c3-t15">Output with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment1012" id="r1c4-t15">Output with Varying-Width Client-Side Character Set</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t15" headers="r1c1-t15">
<p><code>BLOB</code>s and <code>BFILE</code>s</p>
</td>
<td class="cellalignment1013" headers="r2c1-t15 r1c2-t15">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t15 r1c3-t15">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t15 r1c4-t15">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t15" headers="r1c1-t15">
<p><code>CLOB</code>s and <code>NCLOB</code>s</p>
</td>
<td class="cellalignment1013" headers="r3c1-t15 r1c2-t15">
<p>characters</p>
</td>
<td class="cellalignment1013" headers="r3c1-t15 r1c3-t15">
<p>characters</p>
</td>
<td class="cellalignment1013" headers="r3c1-t15 r1c4-t15">
<p>bytes <a id="sthref5811" href="#sthref5811" onclick='footdisplay(1,"The input amount refers to the number of characters to be read from the server-side \u003ccode\u003eCLOB\u003c/code\u003e or \u003ccode\u003eNCLOB\u003c/code\u003e. The output amount indicates how many bytes were read into the buffer \u003ccode\u003ebufp\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The input amount refers to the number of characters to be read from the server-side <code>CLOB</code> or <code>NCLOB</code>. The output amount indicates how many bytes were read into the buffer <code>bufp</code>.</p>
<p>The parameter <code>amtp</code> is the total amount of data read if:</p>
<ul>
<li>
<p>Data is not read in streamed mode (only one piece is read and there is no polling or callback)</p>
</li>
<li>
<p>Data is read in streamed mode with a callback</p>
</li>
</ul>
<p>The parameter <code>amtp</code> is the length of the last piece read if the data is read in streamed mode using polling.</p>
<p>If the amount to be read is larger than the buffer length, it is assumed that the LOB is being read in a streamed mode from the input offset until the end of the LOB, or until the specified number of bytes have been read, whichever comes first. On input, if this value is 0, then the data is read in streamed mode from the input offset until the end of the LOB.</p>
<p>The streamed mode (implemented with either polling or callbacks) reads the LOB value sequentially from the input offset.</p>
<p>If the data is read in pieces, the <code>amtp</code> parameter always contains the length of the piece just read.</p>
<p>If a callback function is defined, then this callback function is invoked each time <code>bufl</code> bytes are read off the pipe. Each piece is written into <code>bufp</code>.</p>
<p>If the callback function is not defined, then the <code>OCI_NEED_DATA</code> error code is returned. The application must call <code>OCILobRead()</code> over and over again to read more pieces of the LOB until the <code>OCI_NEED_DATA</code> error code is not returned. The buffer pointer and the length can be different in each call if the pieces are being read into different sizes and locations.</p>
<dl>
<dt><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, this is the absolute offset from the beginning of the LOB value. For character LOBs (<code>CLOB</code>s, <code>NCLOB</code>s) it is the number of characters from the beginning of the LOB, for binary LOBs or <code>BFILE</code>s it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>The pointer to a buffer into which the piece is read. The length of the allocated memory is assumed to be <code>bufl</code>.</p>
</dd>
<dt><span class="bold">bufl</span> (IN)</dt>
<dd>
<p>The length of the buffer in octets. This value differs from the <code>amtp</code> value for <code>CLOB</code>s and for <code>NCLOB</code>s (<code>csfrm</code>=<code>SQLCS_NCHAR</code>) when the <code>amtp</code> parameter is specified in terms of characters, and the <code>bufl</code> parameter is specified in terms of bytes.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context pointer for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece. If this is <code>NULL</code>, then <code>OCI_NEED_DATA</code> is returned for each piece.</p>
<p>The callback function must return <code>OCI_CONTINUE</code> for the read to continue. If any other error code is returned, the LOB read is terminated.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt><span class="bold">len</span> (IN)</dt>
<dd>
<p>The length in bytes of the current piece in <code>bufp</code>.</p>
</dd>
<dt><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt><span class="bold">csid</span> (IN)</dt>
<dd>
<p>The character set ID of the buffer data. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>. It is never assumed to be the server's character set, unless the server and client have the same settings.</p>
</dd>
<dt><span class="bold">csfrm (IN)</span></dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
<ul>
<li>
<p><a id="sthref5812"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><code><a id="sthref5813"></a>SQLCS_NCHAR</code> - NCHAR character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>. If <code>csfrm</code> is not specified, the default is assumed.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5814"></a>Comments</p>
<p>Reads a portion of a LOB or <code>BFILE</code> as specified by the call into a buffer. It is an error to try to read from a <code>NULL</code> LOB or <code>BFILE</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you you read or write LOBs, specify a character set form (<code>csfrm</code>) that matches the form of the locator itself.</div>
<p>For <code>BFILE</code>s, the operating system file must exist on the server, and it must have been opened by <a href="oci17msc002.htm#i450949">OCILobFileOpen()</a> or <a href="oci17msc002.htm#i493100">OCILobOpen()</a> using the input locator. Oracle Database must have permission to read the operating system file, and the user must have read permission on the directory object.</p>
<p>When you use the polling mode for <code>OCILobRead()</code>, the first call must specify values for <code>offset</code> and <code>amtp</code>, but on subsequent polling calls to <code>OCILobRead()</code>, you need not specify these values.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To terminate an <code>OCILobRead()</code> operation and free the statement handle, use the <a href="oci17msc007.htm#i540487">OCIBreak()</a> call.</div>
<p>The following apply to client-side varying-width character sets for <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p>When you use polling mode, be sure to specify the <code>amtp</code> and <code>offset</code> parameters only in the first call to <code>OCILobRead()</code>. On subsequent polling calls, these parameters are ignored.</p>
</li>
<li>
<p>When you use callbacks, the <code>len</code> parameter, which is input to the callback, indicates how many bytes are filled in the buffer. Check the <code>len</code> parameter during your callback processing because the entire buffer cannot be filled with data.</p>
</li>
</ul>
<p>The following applies to client-side fixed-width character sets and server-side varying-width character sets for <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p>When reading a <code>CLOB</code> or <code>NCLOB</code> value, look at the <code>amtp</code> parameter after every call to <code>OCILobRead()</code> to see how much of the buffer is filled. When the return value is in characters (as when the client-side character set is fixed-width), then convert this value to bytes and determine how much of the buffer is filled. When you use callbacks, always check the <code>len</code> parameter to see how much of the buffer is filled. This value is always in bytes.</p>
</li>
</ul>
<p><a id="sthref5815"></a>To read data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the <code>csid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information about Unicode format</p>
</li>
<li>
<p>Oracle Database SecureFiles and Large Objects Developer's Guide for a description of <code>BFILE</code>s</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#BCFDHCIG">"Polling Mode Operations in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5816"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>,<a href="oci17msc002.htm#i578721">OCILobRead2()</a>, <a href="#i427882">OCILobWrite()</a>, <a href="oci17msc002.htm#i578761">OCILobWrite2()</a>, <a href="oci17msc002.htm#i450493">OCILobFileSetName()</a>, <a href="#i493080">OCILobWriteAppend()</a>, <a href="oci17msc002.htm#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17217" class="refsect2"><a id="i427862"></a>
<h2 class="refsect2">OCILobTrim()<a id="sthref5817"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5818"></a>Purpose</p>
<p>Truncates the LOB value to a shorter length. This function is deprecated. Use <a href="oci17msc002.htm#i578743">OCILobTrim2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5819"></a>Syntax</p>
<pre>
sword OCILobTrim ( OCISvcCtx       *svchp,
                   OCIError        *errhp,
                   OCILobLocator   *locp,
                   ub4             newlen );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5820"></a>Parameters</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="oci17msc002.htm#i578743">"OCILobTrim2()"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17219" class="refsect2"><a id="i427882"></a>
<h2 class="refsect2">OCILobWrite()<a id="sthref5821"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5822"></a>Purpose</p>
<p>Writes a buffer into a LOB. This function is deprecated. Use <a href="oci17msc002.htm#i578761">OCILobWrite2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5823"></a>Syntax</p>
<pre>
sword OCILobWrite ( OCISvcCtx       *svchp,
                    OCIError        *errhp,
                    OCILobLocator   *locp,
                    ub4             *amtp,
                    ub4             offset,
                    void            *bufp, 
                    ub4             buflen,
                    ub1             piece,
                    void            *ctxp, 
                    OCICallbackLobWrite      (cbfp)
                                    (
                                      void     *ctxp,
                                      void     *bufp,
                                      ub4      *lenp,
                                      ub1      *piecep
                                    ) 
                    ub2             csid,
                    ub1             csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5824"></a>Parameters</p>
<dl>
<dt><span class="bold">svchp</span> (IN/OUT)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt><span class="bold">locp</span> (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references the LOB. This locator must have been a locator that was obtained from the server specified by <code>svchp</code>.</p>
</dd>
<dt><span class="bold">amtp</span> (IN/OUT)</dt>
<dd>
<p>The value in <code>amtp</code> is the amount in either bytes or characters, as shown in <a href="#CIHFHDAB">Table E-6</a>.</p>
</dd>
</dl>
<div id="LNOCI17220" class="tblformal">
<p class="titleintable"><a id="sthref5825"></a><a id="CIHFHDAB"></a>Table E-6 Characters or Bytes in amtp for OCILobWrite()</p>
<table class="cellalignment1016" title="Characters or Bytes in amtp for OCILobWrite()" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t20">LOB or BFILE</th>
<th class="cellalignment1012" id="r1c2-t20">Input with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment1012" id="r1c3-t20">Input with Varying-Width Client-Side Character Set</th>
<th class="cellalignment1012" id="r1c4-t20">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t20" headers="r1c1-t20">
<p><code>BLOB</code>s and <code>BFILE</code>s</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c2-t20">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c3-t20">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t20 r1c4-t20">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t20" headers="r1c1-t20">
<p><code>CLOB</code>s and <code>NCLOB</code>s</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c2-t20">
<p>characters</p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c3-t20">
<p>bytes <a id="sthref5826" href="#sthref5826" onclick='footdisplay(1,"The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the \u003ccode\u003ebufp\u003c/code\u003e, which is specified by \u003ccode\u003ebuflen\u003c/code\u003e. If data is written in pieces, the amount of bytes to write may be larger than the \u003ccode\u003ebuflen\u003c/code\u003e. The output amount refers to the number of characters written into the server-side \u003ccode\u003eCLOB\u003c/code\u003e or \u003ccode\u003eNCLOB\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t20 r1c4-t20">
<p>characters</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code>bufp</code>, which is specified by <code>buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code>buflen</code>. The output amount refers to the number of characters written into the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
<p>This should <span class="italic">always</span> be a non-<code>NULL</code> pointer. If you want to specify write-until-end-of-file, then you must declare a variable, set it equal to zero, and pass its address for this parameter.</p>
<p>If the amount is specified on input, and the data is written in pieces, the parameter <code>amtp</code> contains the total length of the pieces written at the end of the call (last piece written) and is undefined in between. Note that it is different from the piecewise read case. An error is returned if that amount is not sent to the server.</p>
<p>If <code>amtp</code> is zero, then streaming mode is assumed, and data is written until the user specifies <code>OCI_LAST_PIECE</code>.</p>
<dl>
<dt><span class="bold">offset</span> (IN)</dt>
<dd>
<p>On input, it is the absolute offset from the beginning of the LOB value. For character LOBs, it is the number of characters from the beginning of the LOB; for binary LOBs, it is the number of bytes. The first position is 1.</p>
<p>If you use streaming (by polling or a callback), specify the offset in the first call; in subsequent polling calls, the offset parameter is ignored. When you use a callback, there is no offset parameter.</p>
</dd>
<dt><span class="bold">bufp</span> (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code>buflen</code>. Even if the data is being written in pieces using the polling method, <code>bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, <code>bufp</code> must not be used to provide data or an error results.</p>
</dd>
<dt><span class="bold">buflen</span> (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. This value differs from the <code>amtp</code> value for <code>CLOB</code>s and <code>NCLOB</code>s when the <code>amtp</code> parameter is specified in terms of characters, and the <code>buflen</code> parameter is specified in terms of bytes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This parameter assumes an 8-bit byte. If your operating system uses a longer byte, you must adjust the value of <code>buflen</code> accordingly.</div>
</dd>
<dt><span class="bold">piece</span> (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code>OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece. The following other values are also possible for piecewise or callback mode: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, and <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">cbfp</span> (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code>NULL</code>, the standard polling method is used.</p>
<p>The callback function must return <code>OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt><span class="bold">ctxp</span> (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt><span class="bold">bufp</span> (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece. This is the same as the <code>bufp</code> passed as an input to the <code>OCILobWrite()</code> routine.</p>
</dd>
<dt><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code>bufp</code> (OUT).</p>
</dd>
<dt><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code>OCI_NEXT_PIECE</code> or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The character set ID of the data in the buffer. If this value is 0, then <code>csid</code> is set to the client's <code>NLS_LANG</code> or <code>NLS_CHAR</code> value, depending on the value of <code>csfrm</code>.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data. The <code>csfrm</code> parameter must be consistent with the type of the LOB.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref5827"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><a id="sthref5828"></a><code>SQLCS_NCHAR</code> - <code>NCHAR</code> character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5829"></a>Comments</p>
<p>Writes a buffer into an internal LOB as specified. If LOB data exists, it is overwritten with the data stored in the buffer. The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you read or write LOBs, specify a character set form (<code>csfrm</code>) that matches the form of the locator itself.</div>
<p>When you use the polling mode for <code>OCILobWrite()</code>, the first call must specify values for <code>offset</code> and <code>amtp</code>, but on subsequent polling calls to <code>OCILobWrite()</code>, you need not specify these values.</p>
<p>If the value of the <code>piece</code> parameter is <code>OCI_FIRST_PIECE</code>, data may need to be provided through callbacks or polling.</p>
<p>If a callback function is defined in the <code>cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code>bufp</code>. If no callback function is defined, then <code>OCILobWrite()</code> returns the <code>OCI_NEED_DATA</code> error code. The application must call <code>OCILobWrite()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations.</p>
<p>A <code>piece</code> value of <code>OCI_LAST_PIECE</code> terminates the piecewise write, regardless of whether the polling or callback method is used.</p>
<p>If the amount of data passed to Oracle Database (through either input mechanism) is less than the amount specified by the <code>amtp</code> parameter, an ORA-22993 error is returned.</p>
<p>This function is valid for internal LOBs only. <code>BFILE</code>s are not allowed, because they are read-only. If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes and the output amount is in characters for <code>CLOB</code>s and <code>NCLOB</code>s. The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code>bufp</code>, which is specified by <code>buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code>buflen</code>. The output amount refers to the number of characters written into the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
<p><a id="sthref5830"></a>To write data in UTF-16 format, set the <code>csid</code> parameter to <code>OCI_UTF16ID</code>. If the <code>csid</code> parameter is set, it overrides the <code>NLS_LANG</code> environment variable.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit or roll back your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="oci05bnd.htm#i423493">"PL/SQL REF CURSORs and Nested Tables in OCI"</a> for additional information about Unicode format</p>
</li>
<li>
<p>The demonstration programs included with your Oracle Database installation for a code sample showing the use of LOB reads and writes.</p>
</li>
<li>
<p><a href="ociabdem.htm#g462659">Appendix B, "OCI Demonstration Programs"</a></p>
</li>
<li>
<p><a href="oci05bnd.htm#i427753">"Runtime Data Allocation and Piecewise Operations in OCI"</a> for general information about piecewise OCI operations</p>
</li>
<li>
<p><a href="oci02bas.htm#BCFDHCIG">"Polling Mode Operations in OCI"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5831"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i427817">OCILobRead()</a>, <a href="oci17msc002.htm#i578721">OCILobRead2()</a>, <a href="oci17msc002.htm#i428786">OCILobAppend()</a>, <a href="#CEGFJBBG">OCILobCopy()</a>, <a href="oci17msc002.htm#i578816">OCILobCopy2()</a>, <a href="#i493080">OCILobWriteAppend()</a>, <a href="oci17msc002.htm#i578780">OCILobWriteAppend2()</a>, <a href="oci17msc002.htm#i578761">OCILobWrite2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="LNOCI17222" class="refsect2"><a id="i493080"></a>
<h2 class="refsect2"><a id="sthref5832"></a>OCILobWriteAppend()</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5833"></a>Purpose</p>
<p>Writes data starting at the end of a LOB. This function is deprecated. Use <a href="oci17msc002.htm#i578780">OCILobWriteAppend2()</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5834"></a>Syntax</p>
<pre>
sword OCILobWriteAppend ( OCISvcCtx *svchp,
                          OCIError *errhp,
                          OCILobLocator *locp,
                          ub4 *amtp,
                          void  *bufp, 
                          ub4 buflen, 
                          ub1 piece, 
                          void  *ctxp, 
                          OCICallbackLobWrite   (cbfp)
                                         (
                                           void     *ctxp,
                                           void     *bufp,
                                           ub4      *lenp,
                                           ub1      *piecep
                                         ) 
                          ub2 csid, 
                          ub1 csfrm );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5835"></a>Parameters</p>
<dl>
<dt>svchp (IN)</dt>
<dd>
<p>The service context handle.</p>
</dd>
<dt>errhp (IN/OUT)</dt>
<dd>
<p>An error handle that you can pass to <a href="oci17msc007.htm#i540516">OCIErrorGet()</a> for diagnostic information when there is an error.</p>
</dd>
<dt>locp (IN/OUT)</dt>
<dd>
<p>An internal LOB locator that uniquely references a LOB.</p>
</dd>
<dt>amtp (IN/OUT)</dt>
<dd>
<p>The value in <code>amtp</code> is the amount in either bytes or characters, as shown in <a href="#CIHJGDCI">Table E-7</a>.</p>
</dd>
</dl>
<div id="LNOCI17223" class="tblformal">
<p class="titleintable"><a id="sthref5836"></a><a id="CIHJGDCI"></a>Table E-7 Characters or Bytes in amtp for OCILobWriteAppend()</p>
<table class="cellalignment1016" title="Characters or Bytes in amtp for OCILobWriteAppend()" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment1005">
<th class="cellalignment1012" id="r1c1-t24">LOB or BFILE</th>
<th class="cellalignment1012" id="r1c2-t24">Input with Fixed-Width Client-Side Character Set</th>
<th class="cellalignment1012" id="r1c3-t24">Input with Varying-Width Client-Side Character Set</th>
<th class="cellalignment1012" id="r1c4-t24">Output</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r2c1-t24" headers="r1c1-t24">
<p><code>BLOB</code>s and <code>BFILE</code>s</p>
</td>
<td class="cellalignment1013" headers="r2c1-t24 r1c2-t24">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t24 r1c3-t24">
<p>bytes</p>
</td>
<td class="cellalignment1013" headers="r2c1-t24 r1c4-t24">
<p>bytes</p>
</td>
</tr>
<tr class="cellalignment1005">
<td class="cellalignment1013" id="r3c1-t24" headers="r1c1-t24">
<p><code>CLOB</code>s and <code>NCLOB</code>s</p>
</td>
<td class="cellalignment1013" headers="r3c1-t24 r1c2-t24">
<p>characters</p>
</td>
<td class="cellalignment1013" headers="r3c1-t24 r1c3-t24">
<p>bytes <a id="sthref5837" href="#sthref5837" onclick='footdisplay(1,"The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the \u003ccode\u003ebufp,\u003c/code\u003e which is specified by \u003ccode\u003ebuflen\u003c/code\u003e. If data is written in pieces, the amount of bytes to write may be larger than the \u003ccode\u003ebuflen\u003c/code\u003e. The output amount refers to the number of characters written into the server-side \u003ccode\u003eCLOB\u003c/code\u003e or \u003ccode\u003eNCLOB\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1013" headers="r3c1-t24 r1c4-t24">
<p>characters</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>The input amount refers to the number of bytes of data that the user wants to write into the LOB and not the number of bytes in the <code>bufp,</code> which is specified by <code>buflen</code>. If data is written in pieces, the amount of bytes to write may be larger than the <code>buflen</code>. The output amount refers to the number of characters written into the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
<p>If the amount is specified on input, and the data is written in pieces, the parameter <code>amtp</code> contains the total length of the pieces written at the end of the call (last piece written) and is undefined in between. (Note it is different from the piecewise read case). An error is returned if that amount is not sent to the server. If <code>amtp</code> is zero, then streaming mode is assumed, and data is written until the user specifies <code>OCI_LAST_PIECE</code>.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes, not characters, for <code>CLOB</code>s or <code>NCLOB</code>s.</p>
<dl>
<dt>bufp (IN)</dt>
<dd>
<p>The pointer to a buffer from which the piece is written. The length of the data in the buffer is assumed to be the value passed in <code>buflen</code>. Even if the data is being written in pieces, <code>bufp</code> must contain the first piece of the LOB when this call is invoked. If a callback is provided, bufp must not be used to provide data or an error results.</p>
</dd>
<dt>buflen (IN)</dt>
<dd>
<p>The length, in bytes, of the data in the buffer. Note that this parameter assumes an 8-bit byte. If your operating system uses a longer byte, the value of <code>buflen</code> must be adjusted accordingly.</p>
</dd>
<dt>piece (IN)</dt>
<dd>
<p>Which piece of the buffer is being written. The default value for this parameter is <code>OCI_ONE_PIECE</code>, indicating that the buffer is written in a single piece. The following other values are also possible for piecewise or callback mode: <code>OCI_FIRST_PIECE</code>, <code>OCI_NEXT_PIECE</code>, and <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt>cbfp (IN)</dt>
<dd>
<p>A callback that can be registered to be called for each piece in a piecewise write. If this is <code>NULL</code>, the standard polling method is used. The callback function must return <code>OCI_CONTINUE</code> for the write to continue. If any other error code is returned, the LOB write is terminated. The callback takes the following parameters:</p>
</dd>
<dt>ctxp (IN)</dt>
<dd>
<p>The context for the callback function. Can be <code>NULL</code>.</p>
</dd>
<dt>bufp (IN/OUT)</dt>
<dd>
<p>A buffer pointer for the piece.</p>
</dd>
<dt><span class="bold">lenp</span> (IN/OUT)</dt>
<dd>
<p>The length (in bytes) of the data in the buffer (IN), and the length (in bytes) of the current piece in <code>bufp</code> (OUT).</p>
</dd>
<dt><span class="bold">piecep</span> (OUT)</dt>
<dd>
<p>Which piece: <code>OCI_NEXT_PIECE</code> or <code>OCI_LAST_PIECE</code>.</p>
</dd>
<dt>csid (IN)</dt>
<dd>
<p>The character set ID of the buffer data.</p>
</dd>
<dt>csfrm (IN)</dt>
<dd>
<p>The character set form of the buffer data.</p>
<p>The <code>csfrm</code> parameter has two possible nonzero values:</p>
</dd>
</dl>
<ul>
<li>
<p><a id="sthref5838"></a><code>SQLCS_IMPLICIT</code> - Database character set ID</p>
</li>
<li>
<p><a id="sthref5839"></a><code>SQLCS_NCHAR</code> - <code>NCHAR</code> character set ID</p>
</li>
</ul>
<p>The default value is <code>SQLCS_IMPLICIT</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5840"></a>Comments</p>
<p>The buffer can be written to the LOB in a single piece with this call, or it can be provided piecewise using callbacks or a standard polling method. If the value of the piece parameter is <code>OCI_FIRST_PIECE</code>, data must be provided through callbacks or polling. If a callback function is defined in the <code>cbfp</code> parameter, then this callback function is invoked to get the next piece after a piece is written to the pipe. Each piece is written from <code>bufp</code>. If no callback function is defined, then <code>OCILobWriteAppend()</code> returns the <code>OCI_NEED_DATA</code> error code.</p>
<p>The application must call <code>OCILobWriteAppend()</code> again to write more pieces of the LOB. In this mode, the buffer pointer and the length can be different in each call if the pieces are of different sizes and from different locations. A piece value of <code>OCI_LAST_PIECE</code> terminates the piecewise write.</p>
<p><code>OCILobWriteAppend()</code> is not supported if LOB buffering is enabled.</p>
<p>If the LOB is a <code>BLOB</code>, the <code>csid</code> and <code>csfrm</code> parameters are ignored.</p>
<p>If the client-side character set is varying-width, then the input amount is in bytes, not characters, for <code>CLOB</code>s or <code>NCLOB</code>s.</p>
<p>It is not mandatory that you wrap this LOB operation inside the open or close calls. If you did not open the LOB before performing this operation, then the functional and domain indexes on the LOB column are updated during this call. However, if you did open the LOB before performing this operation, then you must close it before you commit or roll back your transaction. When an internal LOB is closed, it updates the functional and domain indexes on the LOB column.</p>
<p>If you do not wrap your LOB operations inside the open or close API, then the functional and domain indexes are updated each time you write to the LOB. This can adversely affect performance. If you have functional or domain indexes, Oracle recommends that you enclose write operations to the LOB within the open or close statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="oci07lob.htm#i444520">"Improving LOB Read/Write Performance"</a></div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5841"></a>Related Functions</p>
<p><a href="oci17msc007.htm#i540516">OCIErrorGet()</a>, <a href="#i427817">OCILobRead()</a>, <a href="oci17msc002.htm#i578721">OCILobRead2()</a>, <a href="oci17msc002.htm#i428786">OCILobAppend()</a>, <a href="#CEGFJBBG">OCILobCopy()</a>, <a href="oci17msc002.htm#i578816">OCILobCopy2()</a>, <a href="#i427882">OCILobWrite()</a>, <a href="oci17msc002.htm#i578761">OCILobWrite2()</a>, <a href="oci17msc002.htm#i578780">OCILobWriteAppend2()</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1004">
<tr>
<td class="cellalignment1013">
<table class="cellalignment1009">
<tr>
<td class="cellalignment1008"><a href="ociaedep002.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1008"><a href="ociaedep004.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1015">
<table class="cellalignment1007">
<tr>
<td class="cellalignment1008"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1008"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1008"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1008"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1008"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1008"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
