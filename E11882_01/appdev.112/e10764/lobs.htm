<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Programming with LOBs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:49Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="metadata.htm" title="Previous" type="text/html" />
<link rel="Next" href="ottutility.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/54</span> <!-- End Header --><a id="BABDEGJD"></a><a id="LNCPP007"></a>
<h1 class="chapter"><span class="secnum">7</span> Programming with LOBs</h1>
<p>This chapter provides an overview of LOBs and their use in OCCI.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BABEHDGJ">Overview of LOBs</a></p>
</li>
<li>
<p><a href="#BABFBJAG">Creating LOBs in OCCI Applications</a></p>
</li>
<li>
<p><a href="#BABJICGI">Restricting the Opening and Closing of LOBs</a></p>
</li>
<li>
<p><a href="#BABHJCJE">Reading and Writing LOBs</a></p>
</li>
<li>
<p><a href="#BABIJIBB">Using Objects with LOB Attributes</a></p>
</li>
<li>
<p><a href="#BABEGAHE">Using SecureFiles</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink ADLOB001" href="../../appdev.112/e18294/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for extensive information about LOBs</div>
<a id="BABEHDGJ"></a><a id="LNCPP20317"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of LOBs</h2>
<p>Oracle C++ Call Interface includes classes and methods for performing operations on large objects, LOBs. LOBs are either internal or external depending on their location with respect to the database.</p>
<a id="LNCPP20318"></a>
<div class="sect2"><a id="sthref516"></a>
<h3 class="sect2">Introducing Internal LOBs</h3>
<p>Internal LOBs are stored inside database tablespaces in a way that optimizes space and enables efficient access. Internal LOBs use copy semantics and participate in the transactional model of the server. You can recover internal LOBs after transaction or media failure, and any changes to an internal LOB value can be committed or rolled back. There are three SQL data types for defining instances of internal LOBs:</p>
<ul>
<li>
<p><code>BLOB</code>: A LOB whose value is composed of unstructured binary (raw) data</p>
</li>
<li>
<p><code>CLOB</code>: A LOB whose value is composed of character data that corresponds to the database character set defined for the Oracle database</p>
</li>
<li>
<p><code>NCLOB</code>: A LOB whose value is composed of character data that corresponds to the national character set defined for the Oracle database</p>
</li>
</ul>
<p>The copy semantics for LOBs dictate that when you insert or update a LOB with a LOB from another row in the same table, both the LOB locator and the LOB value are copied. In other words, each row has a copy of the LOB value.</p>
</div>
<!-- class="sect2" -->
<a id="LNCPP20319"></a>
<div class="sect2"><a id="sthref517"></a>
<h3 class="sect2">Introducing External LOBs</h3>
<p><code>BFILE</code>s are large binary (raw) data objects data stored in operating system files outside database tablespaces; therefore, they are referred to as <span class="italic">external</span> LOBs. These files use reference semantics, where only the locator for the LOB is reproduced when inserting or updating in the same table. Apart from conventional secondary storage devices such as hard disks, <code>BFILE</code>s may also be located on tertiary block storage devices such as CD-ROMs, PhotoCDs and DVDs. The <code>BFILE</code> data type allows read-only byte stream access to large files on the file system of the database server. Oracle can access <code>BFILE</code>s if the underlying server operating system supports stream mode access to these files.</p>
<p>External LOBs do not participate in transactions. Any support for integrity and durability must be provided by the underlying file and operating systems. An external LOB must reside on a single device; it may not be striped across a disk array.</p>
</div>
<!-- class="sect2" -->
<a id="LNCPP20320"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref518"></a>
<h3 class="sect2">Storing LOBs</h3>
<p>The size of the LOB value, among other things, dictates where it is stored. The LOB value is either stored inline with the row data or outside the row.</p>
<ul>
<li>
<p><span class="bold">Locator storage:</span> a LOB locator, a pointer to the actual location of the LOB value, is stored inline with the row data and indicates where the LOB value is stored.</p>
<p>For internal LOBs, the LOB column stores a locator to the LOB value stored in a database tablespace. Each internal LOB column and attribute for a particular row has its own unique LOB locator and a distinct copy of the LOB value stored in the database tablespace.</p>
<p>For external LOBs, the LOB column stores a locator to the external operating system file that houses the <code>BFILE</code>. Each external LOB column and attribute for a given row has its own <code>BFILE</code> locator. However, two different rows can contain a <code>BFILE</code> locator that points to the same operating system file.</p>
</li>
<li>
<p><span class="bold">Inline storage:</span> Data stored in a LOB is termed the LOB value. The value of an internal LOB may or may not be stored inline with the other row data. If you do not set <code>DISABLE STORAGE IN ROW</code>, and if the internal LOB value is less than approximately <code>4,000</code> bytes, then the value is stored inline.Otherwise, it is stored outside the row.</p>
<p>Since LOBs are intended to be large objects, inline storage is only relevant if your application mixes small and large LOBs.The LOB value is automatically moved out of the row once it extends beyond approximately <code>4,000</code> bytes.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFBJAG"></a><a id="LNCPP20321"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating LOBs in OCCI Applications</h2>
<p>Follow these steps to use LOBs in your application:</p>
<ul>
<li>
<p>Initialize a new LOB locator in the database.</p>
</li>
<li>
<p>Assign a value to the LOB. In case of <code>BFILE</code>s, assign a reference to a valid external file.</p>
</li>
<li>
<p>To access and manipulate LOBs, see the OCCI classes that implement the methods for using LOBs in an application. All are detailed in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>:</p>
<ul>
<li>
<p><a href="reference006.htm#i1155597">Bfile Class</a> contains the APIs for <code>BFILE</code>s, as summarized in <a href="reference006.htm#BBACGFGD">Table 13-7</a>.</p>
</li>
<li>
<p><a href="reference007.htm#i1119032">Blob Class</a> contains the APIs for <code>BLOB</code>s, as summarized in <a href="reference007.htm#BBAIABGF">Table 13-8</a>.</p>
</li>
<li>
<p><a href="reference009.htm#i1118691">Clob Class</a> contains the APIs for <code>CLOB</code>s and <code>NCLOB</code>s, as summarized in <a href="reference009.htm#BBAFIFAD">Table 13-10</a>.</p>
</li>
</ul>
</li>
<li>
<p>Whenever you want to modify an internal LOB column or attribute using write, copy, trim, and similar operations, you must lock the row that contains the target LOB. Use a <code>SELECT...FOR&nbsp;UPDATE</code> statement to select the LOB locator.</p>
</li>
<li>
<p>A transaction must be open before a LOB write command succeeds. Therefore, you must write the data before committing a transaction (since <code>COMMIT</code> closes the transaction). Otherwise, you must lock the row again by reissuing the <code>SELECT...FOR&nbsp;UPDATE</code> statement. Each of the LOB class implementations in OCCI have <code>open()</code> and <code>close()</code> methods. To check whether a LOB is open, call the <code>isOpen()</code> method of the class.</p>
</li>
<li>
<p>The methods <code>open()</code>, <code>close()</code> and <code>isOpen()</code> should also be used to mark the beginning and end of a series of LOB operations. Whenever a LOB modification is made, it triggers updates on extensible indexes. If these modifications are made within <code>open()...close()</code> code blocks, the individual triggers are disabled until after the <code>close()</code> call, and then all are issued at the same time. This implementation enables the efficient processing of maintenance operations, such as updating indexes, when the LOBs are closed. However, this also means that extensive indexes are not valid during the execution of the <code>open()...close()</code> code block.</p>
<p>Note that for internal LOBs, the concept of openness is associated with the LOB and not the LOB locator. The LOB locator does not store any information about whether the LOB to which it refers is open. It is possible for multiple LOB locators to point to the same open LOB. However, for external LOBs, openness is associated with a specific external LOB locator. Therefore, multiple <code>open()</code> calls can be made on the same <code>BFILE</code> using different external LOB locators.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABJICGI"></a><a id="LNCPP20322"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Restricting the Opening and Closing of LOBs</h2>
<p>The definition of a transaction within which an open LOB value must be closed is one of the following:</p>
<ul>
<li>
<p>Between <code>SET&nbsp;TRANSACTION</code> and <code>COMMIT</code></p>
</li>
<li>
<p>Between <code>DATA&nbsp;MODIFYING&nbsp;DML</code> and <code>COMMIT</code></p>
</li>
<li>
<p>Between <code>SELECT...FOR UPDATE</code> and <code>COMMIT</code></p>
</li>
<li>
<p>Within an autonomous transaction block</p>
</li>
</ul>
<p>The LOB opening and closing mechanism has the following restrictions:</p>
<ul>
<li>
<p>An application must close all previously opened LOBs before committing a transaction. Failing to do so results in an error. If a transaction is rolled back, then all open LOBs are discarded along with the changes made, so associated triggers are not fired.</p>
</li>
<li>
<p>While there is no limit to the number of open internal LOBs, there is a limit on the number of open files. Note that assigning an opened locator to another locator does not count as opening a new LOB.</p>
</li>
<li>
<p>It is an error to open or close the same internal LOB twice within the same transaction, either with different locators or with the same locator.</p>
</li>
<li>
<p>It is an error to close a LOB that has not been opened.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABHJCJE"></a><a id="LNCPP20323"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Reading and Writing LOBs</h2>
<p>There are two general methods for reading and writing LOBs: non-streamed, and streamed.</p>
<a id="LNCPP20324"></a>
<div class="sect2"><a id="sthref519"></a>
<h3 class="sect2">Reading LOBs</h3>
<p><a href="#BABEIIJC">Example 7-1</a> illustrates how to get data from a non-<code>NULL</code> internal LOB, using a non-streamed method. This method requires that you keep track of the read offset and the amount remaining to be read, and pass these values to the <code>read()</code> method.</p>
<div class="example">
<p class="titleinexample"><a id="BABEIIJC"></a><a id="LNCPP20325"></a>Example 7-1 How to Read Non-Streamed BLOBs</p>
<pre>
ResultSet *rset=stmt-&gt;executeQuery("SELECT ad_composite FROM print_media
                                    WHERE product_id=6666");
while(rset-&gt;next())
{
   Blob blob=rset-&gt;getBlob(1);
   if(blob.isNull())
     cerr &lt;&lt;"Null Blob"&lt;&lt;endl;
   else
   {
      blob.open(OCCI_LOB_READONLY);
 
      const unsigned int BUFSIZE=100;
      char buffer[BUFSIZE];
      unsigned int readAmt=BUFSIZE;
      unsigned int offset=1;
 
      //reading readAmt bytes from offset 1
      blob.read(readAmt,buffer,BUFSIZE,offset);
 
      //process information in buffer
      ...
      blob.close();
   }
}
stmt-&gt;closeResultSet(rset);
</pre></div>
<!-- class="example" -->
<p><a href="#BABJCBBE">Example 7-2</a> is similar as it demonstrates how to read data from a <code>BFILE</code>, where the <code>BFILE</code> locator is not <code>NULL</code>, by using a non-streamed read.</p>
<div class="example">
<p class="titleinexample"><a id="BABJCBBE"></a><a id="LNCPP20326"></a>Example 7-2 How to Read Non-Streamed BFILESs</p>
<pre>
ResultSet *rset=stmt-&gt;executeQuery("SELECT ad_graphic FROM print_media
                                    WHERE product_id=6666");
while(rset-&gt;next())
{
   Bfile file=rset-&gt;getBfile(1);
   if(bfile.isNull())
      cerr &lt;&lt;"Null Bfile"&lt;&lt;endl;
   else
   {
      //display the directory alias and the file name of the BFILE
      cout &lt;&lt;"File Name:"&lt;&lt;bfile.getFileName()&lt;&lt;endl;
      cout &lt;&lt;"Directory Alias:"&lt;&lt;bfile.getDirAlias()&lt;&lt;endl;
 
      if(bfile.fileExists())
      {
         unsigned int length=bfile.length();
         char *buffer=new char[length];
         bfile.read(length, buffer, length, 1);
         //read all the contents of the BFILE into buffer, then process
         ...
         delete[] buffer;
      }
      else
         cerr &lt;&lt;"File does not exist"&lt;&lt;endl;
   }
}
stmt-&gt;closeResultSet(rset);
</pre></div>
<!-- class="example" -->
<p>In contrast to <a href="#BABEIIJC">Example 7-1</a> and <a href="#BABJCBBE">Example 7-2</a>, the streamed reading demonstrated in <a href="#BABEFEFI">Example 7-3</a> on a non-<code>NULL</code> <code>BLOB</code> does not require keeping track of the offset.</p>
<div class="example">
<p class="titleinexample"><a id="BABEFEFI"></a><a id="LNCPP20327"></a>Example 7-3 How to Read Streamed BLOBs</p>
<pre>
ResultSet *rset=stmt-&gt;executeQuery("SELECT ad_composite FROM print_media
                                    WHERE product_id=6666");
while(rset-&gt;next())
{
   Blob blob=rset-&gt;getBlob(1);
   if(blob.isNull())
      cerr &lt;&lt;"Null Blob"&lt;&lt;endl;
   else
   {
      Stream *instream=blob.getStream(1,0);
      //reading from offset 1 to the end of the BLOB
 
      unsigned int size=blob.getChunkSize();
      char *buffer=new char[size];
 
      while((unsigned int length=instream-&gt;readBuffer(buffer,size))!=-1)
      {
         //process "length" bytes read into buffer
         ...
      }
      delete[] buffer;
      blob.closeStream(instream);
   }
}
stmt-&gt;closeResultSet(rset);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="LNCPP20328"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref520"></a>
<h3 class="sect2">Writing LOBs</h3>
<p><a href="#BABFFBJI">Example 7-4</a> demonstrates how to write data to an internal non-<code>NULL</code> LOB by using a non-streamed write. The <code>writeChunk()</code> method is enclosed by the <code>open()</code> and <code>close()</code> methods; it operates on a LOB that is currently open and ensures that triggers do not fire for every chunk read. The <code>write()</code> method can be used for the <code>writeChunk()</code> method; however, the <code>write()</code> method implicitly opens and closes the LOB.</p>
<div class="example">
<p class="titleinexample"><a id="BABFFBJI"></a><a id="LNCPP20329"></a>Example 7-4 How to Write Non-Streamed BLOBs</p>
<pre>
ResultSet *rset=stmt-&gt;executeQuery("SELECT ad_composite FROM print_media
                                    WHERE product_id=6666 FOR UPDATE");
while(rset-&gt;next())
{
   Blob blob=rset-&gt;getBlob(1);
   if(blob.isNull())
      cerr &lt;&lt;"Null Blob"&lt;&lt;endl;
   else
   {
      blob.open(OCCI_LOB_READWRITE);
 
      const unsigned int BUFSIZE=100;
      char buffer[BUFSIZE];
      unsigned int writeAmt=BUFSIZE;
      unsigned int offset=1;
 
      //writing writeAmt bytes from offset 1
      //contents of buffer are replaced after each writeChunk(),
      //typically with an fread()
      while(&lt;fread "BUFSIZE" bytes into buffer succeeds&gt;)
      {
         blob.writeChunk(writeAmt, buffer, BUFSIZE, offset);
         offset += writeAmt;
      }
      blob.writeChunk(&lt;remaining amt&gt;, buffer, BUFSIZE, offset);
 
      blob.close();
   }
}
stmt-&gt;closeResultSet(rset);
conn-&gt;commit();
</pre></div>
<!-- class="example" -->
<p><a href="#BABIEGEE">Example 7-5</a> demonstrates how to write data to an internal LOB that is populated by using a streamed write.</p>
<div class="example">
<p class="titleinexample"><a id="BABIEGEE"></a><a id="LNCPP20330"></a>Example 7-5 How to Write Streamed BLOBs</p>
<pre>
ResultSet *rset=stmt-&gt;executeQuery("SELECT ad_composite FROM print_media
                                    WHERE product_id=6666 FOR UPDATE");
while(rset-&gt;next())
{
   Blob blob=rset-&gt;getBlob(1);
   if(blob.isNull())
      cerr &lt;&lt;"Null Blob"&lt;&lt;endl;
   else
   {
      char buffer[BUFSIZE];
      Stream *outstream=blob.getStream(1,0);
 
      //writing from buffer beginning at offset 1 until 
      //a writeLastBuffer() method is issued.
      //contents of buffer are replaced after each writeBuffer(),
      //typically with an fread()
      while(&lt;fread "BUFSIZE" bytes into buffer succeeds&gt;)
         ostream-&gt;writeBuffer(buffer,BUFSIZE);
      ostream-&gt;writeLastBuffer(buffer,&lt;remaining amt&gt;);
      blob.closeStream(outstream);
   }
}
stmt-&gt;closeResultSet(rset);
conn-&gt;commit();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="LNCPP20331"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref521"></a>
<h3 class="sect2">Enhancing the Performance of LOB Reads and Writes</h3>
<p>Reading and writing of internal LOBs can be improved by using either <code>getChunkSize()</code> method.</p>
<a id="LNCPP20332"></a>
<div class="sect3"><a id="sthref522"></a>
<h4 class="sect3">Using the getChunkSize() Method</h4>
<p>The <code>getChunkSize()</code> method returns the usable chunk size in bytes for <code>BLOB</code>s, and in characters for <code>CLOB</code>s and <code>NCLOB</code>s. Performance improves when a read or a write begins on a multiple of the usable chunk size, and the request size is also a multiple of the usable chunk size. You can specify the chunk size for a LOB column when you create a table that contains the LOB.</p>
<p>Calling the <code>getChunkSize()</code> method returns the usable chunk size of the LOB. An application can batch a series of write operations until an entire chunk can be written, rather than issuing multiple LOB write calls that operate on the same chunk</p>
<p>To read through the end of a LOB, use the <code>read()</code> method with an amount of 4 GB. This avoids the round-trip involved with first calling the <code>getLength()</code> method because the <code>read()</code> method with an amount of 4 GB reads until the end of the LOB is reached.</p>
<p>For LOBs that store variable width characters, the <code>GetChunkSize()</code> method returns the number of Unicode characters that fit in a LOB chunk.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="LNCPP20333"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref523"></a>
<h3 class="sect2">Updating LOBs</h3>
<p>To update a value of a LOB in the database, you must assign the new value to the LOB, execute a SQL <code>UPDATE</code> command in the database, and then commit the transaction. <a href="#BABCFBIJ">Example 7-6</a> demonstrates how to update an existing <code>CLOB</code> (in this case, by setting it to empty), while <a href="#BABFDIHD">Example 7-7</a> demonstrates how to update a <code>BFILE</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BABCFBIJ"></a><a id="LNCPP20334"></a>Example 7-6 Updating a CLOB Value</p>
<pre>
Clob clob(conn);
clob.setEmpty();
stmt-&gt;setSQL("UPDATE print_media SET ad_composite = :1
              WHERE product_id=6666");
stmt-&gt;setClob(1, clob);
stmt-&gt;executeUpdate();
conn-&gt;commit();
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="BABFDIHD"></a><a id="LNCPP20335"></a>Example 7-7 Updating a BFILE Value</p>
<pre>
Bfile bfile(conn);
bfile.setName("MEDIA_DIR", "img1.jpg");
stmt-&gt;setSQL("UPDATE print_media SET ad_graphic = :1 
              WHERE product_id=6666");
stmt-&gt;setBfile(1, bfile);
stmt-&gt;executeUpdate();
conn-&gt;commit();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDBAICE"></a><a id="LNCPP20010"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref524"></a>Reading and Writing Multiple LOBs</h3>
<p>As of Oracle Database 10<span class="italic">g</span> Release 2, OCCI has new interfaces that enhance application performance while reading and writing multiple <code>LOB</code>s, such as <code>Bfile</code>s, <code>Blob</code>s, <code>Clob</code>s and <code>NClob</code>s.</p>
<p>These interfaces have several advantages over the standard methods for reading and writing a single LOB at a time:</p>
<ul>
<li>
<p>Reading and writing multiple <code>LOB</code>s through OCCI in a single server round-trip improves performance by decreasing I/O time between the application and the back end.</p>
</li>
<li>
<p>The new APIs provide support for LOBs that are larger than the previous limit of 4&nbsp;GB. The new interfaces accept the <code>oraub8</code> data type for amount, offsets, buffer and length parameters. These parameters are mapped to the appropriate 64-bit native data type, which is determined by the compiler and the operating system.</p>
</li>
<li>
<p>For <code>Clob</code>-related methods, the user can specify the data amount read or written in terms of character counts or byte counts.</p>
</li>
</ul>
<p>New APIs for this features are described in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, section on <a href="reference010.htm#i1118650">Connection Class</a>, and include <a href="reference010.htm#CIAEHGJF">readVectorOfBfiles()</a>, <a href="reference010.htm#CIAGAIGE">readVectorOfBlobs()</a>, <a href="reference010.htm#CIAGGCCE">readVectorOfClobs()</a> (overloaded to support general charactersets, and the <code>UTF16</code> characterset in particular), <a href="reference010.htm#CIAGCBAJ">writeVectorOfBlobs()</a>, and <a href="reference010.htm#CIAHFGAI">writeVectorOfClobs()</a> (overloaded to support general charactersets, and the <code>UTF16</code> characterset in particular).</p>
<a id="LNCPP20336"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref525"></a>
<h4 class="sect3">Using the Interfaces for Reading and Writing Multiple LOBs</h4>
<p>Each of the <code>readVectorOf</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> and <code>writeVectorOf</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> interface uses the following parameters:</p>
<ul>
<li>
<p><code>conn</code>, a <code>Connection</code> class object</p>
</li>
<li>
<p><code>vec</code>, a vector of <code>LOB</code> objects: <code>Bfile</code>, <code>Blob</code>, <code>Clob</code>, or <code>NClob</code></p>
</li>
<li>
<p><code>byteAmts</code>, array of amounts, in bytes, for reading or writing</p>
</li>
<li>
<p><code>charAmts</code>, array of amounts, in characters, for reading or writing (only applicable for <code>Clob</code>s and <code>NClob</code>s)</p>
</li>
<li>
<p><code>offsets</code>, array of offsets, in bytes for <code>Bfile</code>s and <code>Blob</code>s, and in characters for <code>Clob</code>s and <code>NClob</code>s</p>
</li>
<li>
<p><code>buffers</code>, array of buffer pointers</p>
</li>
<li>
<p><code>bufferLengths</code>, array of buffer lengths.</p>
</li>
</ul>
<p>If there are errors in either reading or writing of one of the LOBs in the vector, the whole operation is cancelled. The <code>byteAmts</code> or <code>charAmts</code> parameters should be checked to determine the actual number of bytes or characters read or written.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIJIBB"></a><a id="LNCPP20337"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using Objects with LOB Attributes</h2>
<p>An OCCI application can use the operator <code>new()</code> to create a persistent object with a LOB attribute. By default, all LOB attributes are constructed by using the default constructor, and are initialized to <code>NULL</code>.</p>
<p><a href="#BABGGFIE">Example 7-8</a> demonstrates how to create and use persistent objects with internal LOB attributes. <a href="#BABJDHFB">Example 7-9</a> demonstrates how to create and use persistent objects with external LOB attributes.</p>
<div class="example">
<p class="titleinexample"><a id="BABGGFIE"></a><a id="LNCPP20338"></a>Example 7-8 How to Use a Persistent Object with a BLOB Attribute</p>
<ol>
<li>
<p>Create a persistent object with a <code>BLOB</code> attribute:</p>
<pre>
Person *p=new(conn,"PERSON_TAB")Person();
p-&gt;imgBlob = Blob(conn);
</pre></li>
<li>
<p>Either initialize the <code>Blob</code> object to empty:</p>
<pre>
p-&gt;imgBlob.setEmpty();
</pre>
<p>Or set it to some existing value</p>
</li>
<li>
<p>Mark the <code>Blob</code> object as dirty:</p>
<pre>
p-&gt;markModified();
</pre></li>
<li>
<p>Flush the object:</p>
<pre>
p-&gt;flush();
</pre></li>
<li>
<p>Repin the object after obtaining a <code>REF</code> to it, thereby retrieving a refreshed version of the object from the database and acquiring an initialized LOB:</p>
<pre>
Ref&lt;Person&gt; r = p-&gt;getRef();
delete p;
p = r.ptr();
</pre></li>
<li>
<p>Write the data:</p>
<pre>
p-&gt;imgBlob.write( ... );
</pre></li>
</ol>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="BABJDHFB"></a><a id="LNCPP20339"></a>Example 7-9 How to Use a Persistent Object with a BFILE Attribute</p>
<ol>
<li>
<p>Create a persistent object with a <code>BFILE</code> attribute:</p>
<pre>
Person *p=new(conn,"PERSON_TAB")Person();
p-&gt;imgBFile = BFile(conn);
</pre></li>
<li>
<p>Initialize the <code>Bfile</code> object:</p>
<pre>
p-&gt;setName(<span class="italic">directory_alias</span>, <span class="italic">file_name</span>);
</pre></li>
<li>
<p>Mark the <code>Bfile</code> object as dirty:</p>
<pre>
p-&gt;markModified();
</pre></li>
<li>
<p>Flush the object:</p>
<pre>
p-&gt;flush();
</pre></li>
<li>
<p>Read the data:</p>
<pre>
p-&gt;imgBfile.read( ... );
</pre></li>
</ol>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABEGAHE"></a><a id="LNCPP20340"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using SecureFiles</h2>
<p>Introduced with Oracle Database 11<span class="italic">g</span> Release 1, SecureFiles LOBs add powerful new features for LOB compression, encryption, and deduplication.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB4444" href="../../appdev.112/e18294/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a></div>
<a id="CIAHDFEA"></a><a id="LNCPP20341"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SecureFile Compression</h3>
<p>SecureFiles compression enables server-side compression of LOB data, transparent to the application. Using SecureFiles compression saves storage space with minimal impact on reading and updating performance for SecureFiles LOB data.</p>
</div>
<!-- class="sect2" -->
<a id="BABGCJCE"></a><a id="LNCPP20342"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SecureFiles Encryption</h3>
<p>SecureFiles introduce a new encryption capability for LOB data and extend Transparent Data Encryption by enabling efficient random read and write access to encrypted SecureFiles LOBs.</p>
</div>
<!-- class="sect2" -->
<a id="BABEAIHG"></a><a id="LNCPP20343"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using SecureFiles Deduplication</h3>
<p>SecureFiles deduplication allows the Oracle Database to automatically detect duplicate LOB data, and to conserve space by storing a single copy of the SecureFiles LOB.</p>
</div>
<!-- class="sect2" -->
<a id="BABGJIJG"></a><a id="LNCPP20344"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Combining SecureFiles Compression, Encryption, and Deduplication</h3>
<p>You can combine compression, encryption and deduplication in any combination. Oracle Database applies these features according to the following rules:</p>
<ul>
<li>
<p>Deduplicate detection, if enabled, is performed before compression and encryption. This prevents potentially unnecessary and expensive compression and encryption operations on duplicate SecureFiles LOBs.</p>
</li>
<li>
<p>Compression is performed before encryption, to allow for the highest possible compression ratios.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABHAHHD"></a><a id="LNCPP20345"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SecureFiles LOB Types and Constants</h3>
<p>The following types for SecureFiles LOBs enable additional flexibility for compression, encryption, and deduplication. <a href="#BABGICGB">Table 7-1</a> lists options for the <code>LobOptionType</code>, while <a href="#BABEHGAJ">Table 7-2</a> lists options for the <code>LobOptionValue</code>.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20346"></a><a id="sthref526"></a><a id="BABGICGB"></a>Table 7-1 Values of Type LobOptionType</p>
<table class="cellalignment1073" title="Values of Type LobOptionType" summary="The first column contains a possible value, and the second column contains its description" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t4">Value</th>
<th class="cellalignment1074" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t4" headers="r1c1-t4">
<pre>
OCCI_LOB_OPT_COMPRESS
</pre></td>
<td class="cellalignment1075" headers="r2c1-t4 r1c2-t4">
<p>Compression option type</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t4" headers="r1c1-t4">
<pre>
OCCI_LOB_OPT_ENCRYPT
</pre></td>
<td class="cellalignment1075" headers="r3c1-t4 r1c2-t4">
<p>Encryption option type</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t4" headers="r1c1-t4">
<pre>
OCCI_LOB_OPT_DEDUPLICATE
</pre></td>
<td class="cellalignment1075" headers="r4c1-t4 r1c2-t4">
<p>Deduplicate option type</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20347"></a><a id="sthref527"></a><a id="BABEHGAJ"></a>Table 7-2 Values of Type LobOptionValue</p>
<table class="cellalignment1073" title="Values of Type LobOptionValue" summary="The first column contains a possible value, and the second column contains its description" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t5">Value</th>
<th class="cellalignment1074" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_COMPRESS_OFF
</pre></td>
<td class="cellalignment1075" headers="r2c1-t5 r1c2-t5">
<p>Turns off SecureFiles compression</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_COMPRESS_ON
</pre></td>
<td class="cellalignment1075" headers="r3c1-t5 r1c2-t5">
<p>Turns on SecureFiles compression</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_ENCRYPT_OFF
</pre></td>
<td class="cellalignment1075" headers="r4c1-t5 r1c2-t5">
<p>Turns off SecureFiles encryption</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_ENCRYPT_ON
</pre></td>
<td class="cellalignment1075" headers="r5c1-t5 r1c2-t5">
<p>Turns on SecureFiles encryption</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_DEDUPLICATE_OFF
</pre></td>
<td class="cellalignment1075" headers="r6c1-t5 r1c2-t5">
<p>Turns off SecureFiles deduplication</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t5" headers="r1c1-t5">
<pre>
OCCI_LOB_DEDUPLICATE_ON
</pre></td>
<td class="cellalignment1075" headers="r7c1-t5 r1c2-t5">
<p>Turns off LOB deduplication</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="metadata.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="ottutility.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
