<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Streams Advanced Queuing</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:49Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="globalization.htm" title="Previous" type="text/html" />
<link rel="Next" href="xa.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/54</span> <!-- End Header --><a id="CEGIEBAD"></a><a id="LNCPP010"></a><a id="i1002000"></a>
<h1 class="chapter"><span class="secnum">10</span> Oracle Streams Advanced Queuing</h1>
<p>This chapter describes the OCCI implementation of Oracle Streams Advanced Queuing (AQ) for messages.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1006801">Overview of Oracle Streams Advanced Queuing</a></p>
</li>
<li>
<p><a href="#CEGHJFIC">AQ Implementation in OCCI</a></p>
</li>
<li>
<p><a href="#BABDIAEB">Creating Messages</a></p>
</li>
<li>
<p><a href="#BABFBEAG">Enqueuing Messages</a></p>
</li>
<li>
<p><a href="#BABHIBAH">Dequeuing Messages</a></p>
</li>
<li>
<p><a href="#BABJGCEA">Listening for Messages</a></p>
</li>
<li>
<p><a href="#BABIEDBC">Registering for Notification</a></p>
</li>
<li>
<p><a href="#BABHFDGG">Message Format Transformation</a></p>
</li>
</ul>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADQUE0100" href="../../server.112/e11013/aq_intro.htm#ADQUE0100"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for basic concepts of Advanced Queuing</p>
</li>
<li>
<p><a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<a id="i1006801"></a><a id="LNCPP20424"></a>
<div class="sect1">
<h2 class="sect1">Overview of Oracle Streams Advanced Queuing</h2>
<p>Oracle Streams is a new information sharing feature that provides replication, message queuing, data warehouse loading, and event notification. It is also the foundation behind Oracle Streams Advanced Queuing (AQ).</p>
<p>Advanced Queuing is the integrated message queuing feature that exposes message queuing capabilities of Oracle Streams. AQ enables applications to:</p>
<ul>
<li>
<p>Perform message queuing operations similar to SQL operations from the Oracle database</p>
</li>
<li>
<p>Communicate asynchronously through messages in AQ queues</p>
</li>
<li>
<p>Integrate with database for unprecedented levels of operational simplicity, reliability, and security to message queuing</p>
</li>
<li>
<p>Audit and track messages</p>
</li>
<li>
<p>Supports both synchronous and asynchronous modes of communication</p>
</li>
</ul>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<code><a href="http://www.oracle.com/technology/products/dataint/">http://www.oracle.com/technology/products/dataint/</a></code> for more information about the Advanced Queuing feature</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<p>The advantages of using AQ in OCCI applications include:</p>
<ul>
<li>
<p>Create applications that communicate with each other in a consistent, reliable, secure, and autonomous manner</p>
</li>
<li>
<p>Store messages in database tables, bringing the reliability and recoverability of the database to your messaging infrastructure</p>
</li>
<li>
<p>Retain messages in the database automatically for auditing and business intelligence</p>
</li>
<li>
<p>Create applications that leverage messaging without having to deal with a different security, data type, or operational mode</p>
</li>
<li>
<p>Leverage transactional characteristics of the database</p>
</li>
</ul>
<p>Since traditional messaging solutions have single subscriber queues, a queue must be created for each pair of applications that communicate with each other. The publish/subscribe protocol of the AQ makes it easy to add additional applications (subscribers) to a conversation between multiple applications.</p>
</div>
<!-- class="sect1" -->
<a id="CEGHJFIC"></a><a id="LNCPP20425"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">AQ Implementation in OCCI</h2>
<p>OCCI AQ is a set of interfaces that allows messaging clients to access the Advanced Queuing feature of Oracle for enterprise messaging applications. Currently, OCCI AQ supports only the operational interfaces and not the administrative interface, but administrative operations can be accessed through embedded PL/SQL calls.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
Package <a class="olink ARPLS005" href="../../appdev.112/e40758/d_aqadm.htm#ARPLS005">DBMS_AQADM</a> in <a class="olink ARPLS005" href="../../appdev.112/e40758/d_aqadm.htm#ARPLS005"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for administrative operations in AQ support through PL/SQL</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<p>The AQ feature can be used with other interfaces available through OCCI for sending, receiving, publishing, and subscribing in a message-enabled database. Synchronous and asynchronous message consumption is available based on a message selection rule.</p>
<p>Enqueuing refers to sending a message to a queue and dequeuing refers to receiving one. A client application can create a message, set the desired properties on it and enqueue it by storing the message in the queue, a table in the database. When dequeuing a message, an application can either dequeue it synchronously by calling receive methods on the queue, or asynchronously by waiting for a notification from the database.</p>
<p>The AQ feature is implemented through the abstractions <a href="#CHDEEBDD">Message</a>, <a href="#CHDGEHII">Agent</a>, <a href="#CHDDHAFC">Producer</a>, <a href="#CHDGDGFI">Consumer</a>, <a href="#CHDIDFII">Listener</a> and <a href="#CEGIDJJH">Subscription</a>.</p>
<a id="CHDEEBDD"></a><a id="LNCPP20426"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Message</h3>
<p>A message is the basic unit of information being inserted into and retrieved from a queue. A message consists of control information and payload data. The control information represents message properties used by AQ to manage messages. The payload data is the information stored in the queue and is transparent to AQ.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<a href="reference019.htm#CACGDGIC">Message Class</a> documentation in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="CHDGEHII"></a><a id="LNCPP20427"></a>
<div class="sect2">
<h3 class="sect2">Agent</h3>
<p>An <code>Agent</code> represents and identifies a user of the queue, either producer or consumer of the message, either an end-user or an application. An <code>Agent</code> is identified by a name, an address and a protocol. The name can be either assigned by the application, or be the application itself. The address is determined in terms of the communication protocol. If the protocol is <code>0</code> (default), the address is of the form<code>[schema.]queuename[@dblink]</code>, a database link.</p>
<p><code>Agent</code>s on the same queue must have a unique combination of name, address, and protocol. <a href="#BABCBDDA">Example 10-1</a> demonstrates an instantiation of a new <code>Agent</code> object in a client program.</p>
<div class="example">
<p class="titleinexample"><a id="BABCBDDA"></a><a id="LNCPP20428"></a>Example 10-1 Creating an Agent</p>
<pre>
Agent agt(env, "Billing_app", "billqueue", 0);
</pre></div>
<!-- class="example" -->
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<a href="reference003.htm#CACBIIEC">Agent Class</a> documentation in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="CHDDHAFC"></a><a id="LNCPP20429"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Producer</h3>
<p>A client uses a <code>Producer</code> object to enqueue <code>Message</code>s into a queue. It is also used to specify various enqueue options.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<a href="reference024.htm#CACCIJEB">Producer Class</a> documentation in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="CHDGDGFI"></a><a id="LNCPP20430"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Consumer</h3>
<p>A client uses a <code>Consumer</code> object to dequeue <code>Message</code>s that have been delivered to a queue. It also specifies various dequeuing options.</p>
<p>Before a consumer can receive messages,</p>
<div class="example">
<p class="titleinexample"><a id="CACICDEA"></a><a id="LNCPP20431"></a>Example 10-2 Setting the Agent on the Consumer</p>
<pre>
Consumer cons(conn);
...
cons.setAgent(ag);
cons.receive();
</pre></div>
<!-- class="example" -->
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<a href="reference012.htm#CACBGCEB">Consumer Class</a> documentation in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="CHDIDFII"></a><a id="LNCPP20432"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Listener</h3>
<p>A <code>Listener</code> listens for <code>Message</code>s for registered <code>Agent</code>s at specified queues.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<a href="reference017.htm#CACCCIFB">Listener Class</a> documentation in <a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="CEGIDJJH"></a><a id="LNCPP20433"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Subscription</h3>
<p>A <code>Subscription</code> encapsulates the information and operations necessary for registering a subscriber for notifications.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDIAEB"></a><a id="LNCPP20434"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Creating Messages</h2>
<p>As mentioned previously, a <code>Message</code> is a basic unit of information that contains both the properties of the message and its content, or <span class="bold">payload</span>. Each message is enqueued by the <code>Producer</code> and dequeued by the <code>Consumer</code> objects.</p>
<a id="LNCPP20435"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref592"></a>
<h3 class="sect2">Message Payloads</h3>
<p>OCCI supports three types of message payloads: <a href="#BABIHAEH">RAW</a>, <a href="#BABDGEDJ">AnyData</a>, and <a href="#BABBIAIB">User-defined</a>.</p>
<a id="BABIHAEH"></a><a id="LNCPP20436"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">RAW</h4>
<p><code>RAW</code> payloads are mapped as objects of the <a href="reference008.htm#i1119060">Bytes Class</a> in OCCI.</p>
</div>
<!-- class="sect3" -->
<a id="BABDGEDJ"></a><a id="LNCPP20437"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">AnyData</h4>
<p>The <code>AnyData</code> type models self-descriptive data encapsulation; it contains both the type information and the actual data value. Data values of most SQL types can be converted to <code>AnyData</code>, and then be converted to the original data type. <code>AnyData</code> also supports user-defined data types. The advantage of using <code>AnyData</code> payloads is that it ensures both type preservation after an enqueue and dequeue process, and that it allows the user to use a single queue for all types used in the application. <a href="#BABJIIGJ">Example 10-3</a> demonstrates how to create an <code>AnyData</code> message. <a href="#BABBEEHC">Example 10-4</a> shows how to retrieve the original data type from the message.</p>
<div class="example">
<p class="titleinexample"><a id="BABJIIGJ"></a><a id="LNCPP20438"></a>Example 10-3 Creating an AnyData Message with a String Payload</p>
<pre>
AnyData any(conn);
any.setFromString("item1");
Message mes(env);
mes.setAnyData(any);
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="BABBEEHC"></a><a id="LNCPP20439"></a>Example 10-4 Determining the Type of the Payload in an AnyData Message</p>
<pre>
TypeCode tc = any.getType();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABBIAIB"></a><a id="LNCPP20440"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">User-defined</h4>
<p>OCCI supports enqueuing and dequeuing of user-defined types as payloads. <a href="#BABBGFDC">Example 10-5</a> demonstrates how to create a payload with a user-defined <code>Employee</code> object.</p>
<div class="example">
<p class="titleinexample"><a id="BABBGFDC"></a><a id="LNCPP20441"></a>Example 10-5 Creating an User-defined Payload</p>
<pre>
// Assuming type Employee ( name varchar2(25),
//                          deptid number(10),
//                          manager varchar2(25) )
Employee *emp = new Employee();
emp.setName("Scott");
emp.setDeptid(10);
emp.setManager("James");
Message mes(env);
mes.setObject(emp);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="LNCPP20442"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref593"></a>
<h3 class="sect2">Message Properties</h3>
<p>Aside from payloads, the user can specify several additional message properties, such as <a href="#BABBGBEG">Correlation</a>, <a href="#BABJFEJE">Sender</a>, <a href="#BABGFBCJ">Delay and Expiration</a>, <a href="#BABCFADF">Recipients</a>, and <a href="#BABDADDB">Priority and Ordering</a>.</p>
<a id="BABBGBEG"></a><a id="LNCPP20443"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Correlation</h4>
<p>Applications can specify a correlation identifier of the message during the enqueuing process, as demonstrated in <a href="#BABDEDEI">Example 10-6</a>. This identifier can then be used by the dequeuing application.</p>
<div class="example">
<p class="titleinexample"><a id="BABDEDEI"></a><a id="LNCPP20444"></a>Example 10-6 Specifying the Correlation identifier</p>
<pre>
mes.setCorrelationId("enq_corr_di");
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABJFEJE"></a><a id="LNCPP20445"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Sender</h4>
<p>Applications can specify the sender of the message, as demonstrated in <a href="#BABCCAGF">Example 10-7</a>. The sender identifier can then be used by the receiver of the message.</p>
<div class="example">
<p class="titleinexample"><a id="BABCCAGF"></a><a id="LNCPP20446"></a>Example 10-7 Specifying the Sender identifier</p>
<pre>
mes.setSenderId(agt);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABGFBCJ"></a><a id="LNCPP20447"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Delay and Expiration</h4>
<p>Time settings control the delay and expiration times of the message in seconds, as demonstrated in <a href="#BABDCBFB">Example 10-8</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABDCBFB"></a><a id="LNCPP20448"></a>Example 10-8 Specifying the Delay and Expiration times of the message</p>
<pre>
mes.setDelay(10);
mes.setExpirationTime(60);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABCFADF"></a><a id="LNCPP20449"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Recipients</h4>
<p>The agents for whom the message is intended can be specified during message encoding, as demonstrated in <a href="#BABCHFIA">Example 10-9</a>. This ensures that only the specified recipients can access the message.</p>
<div class="example">
<p class="titleinexample"><a id="BABCHFIA"></a><a id="LNCPP20450"></a>Example 10-9 Specifying message recipients</p>
<pre>
vector&lt;Agent&gt; agt_list;
for (i=0; i&lt;num_recipients; i++)
   agt_list.push_back(Agent(name, address, protocol));
mes.setRecipientList(agt_list);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABDADDB"></a><a id="LNCPP20451"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Priority and Ordering</h4>
<p>By assigning a priority level to a message, the sender can control the order in which the messages are dequeued by the receiver. <a href="#BABHJGCG">Example 10-10</a> demonstrates how to set the priority of a message.</p>
<div class="example">
<p class="titleinexample"><a id="BABHJGCG"></a><a id="LNCPP20452"></a>Example 10-10 Specifying the Priority of a Message</p>
<pre>
mes.setPriority(3);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFBEAG"></a><a id="LNCPP20453"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Enqueuing Messages</h2>
<p>Messages are enqueued by the Producer. The <a href="reference024.htm#CACCIJEB">Producer Class</a> is also used to specify enqueue options. A <code>Producer</code> object can be created on a valid connection where enqueuing is performed, as illustrated in <a href="#BABJABDC">Example 10-11</a>.</p>
<p>The transactional behavior of the enqueue operation can be defined based on application requirements. The application can make the effect of the enqueue operation visible externally either immediately after it is completed, as in <a href="#BABJABDC">Example 10-11</a>, or only after the enclosing transaction has been committed.</p>
<p>To enqueue the message, use the <code>send()</code> method, as demonstrated in <a href="#BABJABDC">Example 10-11</a>. A client may retain the <code>Message</code> object after it is sent, modify it, and send it again.</p>
<div class="example">
<p class="titleinexample"><a id="BABJABDC"></a><a id="LNCPP20454"></a>Example 10-11 Creating a Producer, Setting Visibility, and Enqueuing the Message</p>
<pre>
Producer prod(conn);
...
prod.setVisibility(Producer::ENQ_IMMEDIATE);
...
Message mes(env);
...
mes.setBytes(obj);            // obj represents the content of the message
prod.send(mes, queueName);    // queueName is the name of the queue
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABHIBAH"></a><a id="LNCPP20455"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Dequeuing Messages</h2>
<p>Messages delivered to a queue are dequeued by the <code>Consumer</code>. The <a href="reference012.htm#CACBGCEB">Consumer Class</a> is also used to specify dequeue options. A <code>Consumer</code> object can be created on a valid connection to the database where a queue exists, as demonstrated in <a href="#BABIDDIB">Example 10-12</a>.</p>
<p>In applications that support multiple consumers in the same queue, the name of the consumer has to be specified as a registered subscriber to the queue, as shown in <a href="#BABIDDIB">Example 10-12</a>.</p>
<p>To dequeue the message, use the <code>receive()</code> method, as demonstrated in <a href="#BABIDDIB">Example 10-12</a>. The <code>typeName</code> and <code>schemaName</code> parameters of the <code>receive()</code> method specify the type of payload and the schema of the payload type.</p>
<div class="example">
<p class="titleinexample"><a id="BABIDDIB"></a><a id="LNCPP20456"></a>Example 10-12 Creating a Consumer, Naming the Consumer, and Receiving a Message</p>
<pre>
Consumer cons(conn);
...
// Name must be registered with the queue through administrative interface
cons.setConsumerName("BillApp");
cons.setQueueName(queueName);
...
Message mes = cons.receive(Message::OBJECT, "BILL_TYPE", "BILL_PROCESSOR");
...
// obj is is assigned the content of the message
obj = mes.getObject();
</pre></div>
<!-- class="example" -->
<p>When the queue payload type is either <a href="#BABIHAEH">RAW</a> or <a href="#BABDGEDJ">AnyData</a>, <code>schemaName</code> and <code>typeName</code> are optional, but you must specify these parameters explicitly when working with user-defined payloads. This is illustrated in <a href="#BABICACA">Example 10-13</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABICACA"></a><a id="LNCPP20457"></a>Example 10-13 Receiving a Message</p>
<pre>
//receiving a RAW message
Message mes = cons.receive(Message::RAW);
...
//receiving an ANYDATA message
Message mes = cons.receive(Message::ANYDATA);
...
</pre></div>
<!-- class="example" -->
<a id="LNCPP20458"></a>
<div class="sect2"><a id="sthref594"></a>
<h3 class="sect2">Dequeuing Options</h3>
<p>The dequeuing application can specify several dequeuing options before it begins to receive messages. These include <a href="#BABIDHJG">Correlation</a>, <a href="#BABGEBDC">Mode</a>, and <a href="#BABGEBCH">Navigation</a>.</p>
<a id="BABIDHJG"></a><a id="LNCPP20459"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Correlation</h4>
<p>The message can be dequeued based on the value of its correlation identifier using the <code>setCorrelationId()</code> method, as shown in <a href="#BABIABHI">Example 10-14</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BABGEBDC"></a><a id="LNCPP20460"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Mode</h4>
<p>Based on application requirements, the user can choose to only browse through messages in the queue, remove the messages from the queue, or lock messages using the <code>setDequeueMode()</code> method, as shown in <a href="#BABIABHI">Example 10-14</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BABGEBCH"></a><a id="LNCPP20461"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Navigation</h4>
<p>Messages enqueued in a single transaction can be viewed as a single group by implementing the <code>setPositionOfMessage()</code> method, as shown in <a href="#BABIABHI">Example 10-14</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BABIABHI"></a><a id="LNCPP20462"></a>Example 10-14 Specifying dequeuing options</p>
<pre>
cons.setCorrelationId(corrId);
...
cons.setDequeueMode(deqMode);
...
cons.setPositionOfMessage(Consumer::DEQ_NEXT_TRANSACTION);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJGCEA"></a><a id="LNCPP20463"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Listening for Messages</h2>
<p>The Listener listens for messages on queues on behalf of its registered clients. The <a href="reference017.htm#CACCCIFB">Listener Class</a> implements the <code>listen()</code> method, which is a blocking call that returns when a queue has a message for a registered agent, or throws an error when the time out period expires. <a href="#BABJJHGH">Example 10-15</a> illustrates the listening protocol.</p>
<div class="example">
<p class="titleinexample"><a id="BABJJHGH"></a><a id="LNCPP20464"></a>Example 10-15 Listening for messages</p>
<pre>
Listener listener(conn);

vector&lt;Agent&gt; agtList;
for( int i=0; i&lt;num_agents; i++)
   agtList.push_back( Agent( name, address, protocol);

listener.setAgentList(agtList);
listener.setTimeOutForListen(10);

Agent agt(env);

try{
   agt = listener.listen();
}
catch{
   cout&lt;&lt;e.getMessage()&lt;&lt;endl;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABIEDBC"></a><a id="LNCPP20465"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Registering for Notification</h2>
<p>The <a href="reference032.htm#CIAHFGJA">Subscription Class</a> implements the publish-subscribe notification feature. It allows an OCCI AQ application to receive client notifications directly, register an e-mail address to which notifications can be sent, register an HTTP URL to which notifications can be posted, or register a PL/SQL procedure to be invoked on a notification. Registered clients are notified asynchronously when events are triggered or on an explicit AQ enqueue. Clients do not have to be connected to a database.</p>
<p>An OCCI application can do all of the following:</p>
<ul>
<li>
<p>Register interest in notification in the AQ namespace, and be notified when an enqueue occurs.</p>
</li>
<li>
<p>Register interest in subscriptions to database events, and receive notifications when these events are triggered.</p>
</li>
<li>
<p>Manage registrations, such as disable registrations temporarily, or dropping registrations entirely.</p>
</li>
<li>
<p>Post (or send) notifications to registered clients.</p>
</li>
</ul>
<a id="LNCPP20466"></a>
<div class="sect2"><a id="sthref595"></a>
<h3 class="sect2">Publish-Subscribe Notifications</h3>
<p>Notifications can work in several ways. They can be:</p>
<ul>
<li>
<p>received directly by the OCCI application</p>
</li>
<li>
<p>sent to a pre-specified e-mail address</p>
</li>
<li>
<p>sent to a pre-defined HTTP URL</p>
</li>
<li>
<p>invoke a pre-specified database PL/SQL procedure</p>
</li>
</ul>
<p>Registered clients are notified asynchronously when events are triggered, or on an explicit AQ enqueue. Clients do not have to be connected to a database for notifications to work. Registration can be accomplished either as <a href="#BABDHDBI">Direct Registration</a> or <a href="#BABFJHED">Open Registration</a>.</p>
<a id="BABDHDBI"></a><a id="LNCPP20467"></a>
<div class="sect3">
<h4 class="sect3">Direct Registration</h4>
<p>You can register directly with the database. This is relatively simple, and the registration takes effect immediately. <a href="#BABHDBCF">Example 10-16</a> outlines the required steps to successfully register for direct event notification. It is assumed that the appropriate event trigger or queue is in existence, and that the initialization parameter <code>COMPATIBLE</code> is set to <code>8.1</code> or higher.</p>
<div class="example">
<p class="titleinexample"><a id="BABHDBCF"></a><a id="LNCPP20468"></a>Example 10-16 How to Register for Notifications; Direct Registration</p>
<ol>
<li>
<p>Create the environment in <code>Environment::EVENTS</code> mode.</p>
</li>
<li>
<p>Create the <code>Subscription</code> object.</p>
</li>
<li>
<p>Set these <code>Subscription</code> attributes.</p>
<p>The <code>namespace</code> can be set to these options:</p>
<ul>
<li>
<p>To receive notifications from AQ queues, <code>namespace</code> must be set to <code>Subscription::NS_AQ</code>. The subscription name is then either of the form <code>SCHEMA.QUEUE</code> when registering on a single consumer queue, or <code>SCHEMA.QUEUE:</code><code><span class="codeinlineitalic">CONSUMER_NAME</span></code> when registering on a multiconsumer queue.</p>
</li>
<li>
<p>To receive notifications from other applications that use <code>conn-&gt;postToSubscription()</code> method, <code>namespace</code> must be set to <code>Subscription::NS_ANONYMOUS</code></p>
</li>
</ul>
<p>The <code>protocol</code> can be set to these options:</p>
<ul>
<li>
<p>If an OCCI client must receive an event notification, this attribute should be set to <code>Subscription::PROTO_CBK</code>. You also must set the notification callback and the subscription context before registering the <code>Subscription</code>. The notification callback is called when the event occurs.</p>
</li>
<li>
<p>For an e-mail notification, set the protocol to <code>Subscription::PROTO_MAIL</code>. You must set the recipient name before subscribing to avoid an application error.</p>
</li>
<li>
<p>For an HTTP URL notification, set the protocol to <code>Subscription::HTTP</code>. You must set the recipient name before subscribing to avoid an application error.</p>
</li>
<li>
<p>To invoke PL/SQL procedures in the database on event notification, set protocol to <code>Subscription::PROTO_SERVER</code>. You must set the recipient name before subscribing to avoid an application error.</p>
</li>
</ul>
</li>
<li>
<p>Register the subscriptions using <code>connection-&gt;registerSubscriptions()</code>.</p>
</li>
</ol>
</div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABFJHED"></a><a id="LNCPP20469"></a>
<div class="sect3">
<h4 class="sect3">Open Registration</h4>
<p>You can also register through an intermediate LDAP that sends the registration request to the database. This is used when the client cannot have a direct database connection; for example, the client wants to register for an open event while the database is down. This approach is also used when a client wants to register for the same event(s) in multiple databases, concurrently.</p>
<p><a href="#BABBIBJJ">Example 10-17</a> outlines the LDAP open registration using the Oracle Enterprise Security Manager (OESM). Open registration has these prerequisites:</p>
<ul>
<li>
<p>The client must be an enterprise user</p>
<ul>
<li>
<p>In each enterprise domain, create an enterprise role <code>ENTERPRISE_AQ_USER_ROLE</code></p>
</li>
<li>
<p>For each database in the enterprise domain, add a global role <code>GLOBAL_AQ_USER_ROLE</code> to enterprise the role <code>ENTERPRISE_AQ_USER_ROLE</code>.</p>
</li>
<li>
<p>For each enterprise domain, add an enterprise role <code>ENTERPRISE_AQ_USER_ROLE</code> to the privilege group <code>cn=OracleDBAQUsers</code> under <code>cn=oraclecontext</code> in the administrative context</p>
</li>
<li>
<p>For each enterprise user that is authorized to register for events in the database, grant enterprise the role <code>ENTERPRISE_AQ_USER_ROLE</code></p>
</li>
</ul>
</li>
<li>
<p>The compatibility of the database must be 9.0 or higher</p>
</li>
<li>
<p><code>LDAP_REGISTRATION_ENABLED</code> must be set to <code>TRUE</code> (default is <code>FALSE</code>):</p>
<pre>
ALTER SYSTEM SET LDAP_REGISTRATION_ENABLED=TRUE
</pre></li>
<li>
<p><code>LDAP_REG_SYNC_INTERVAL</code> must be set to the <code>time_interval</code> (in seconds) to refresh registrations from LDAP (default is <code>0</code>, do not refresh):</p>
<pre>
ALTER SYSTEM SET LDAP_REG_SYNC_INTERVAL = time_interval
</pre></li>
</ul>
<p>To force a database refresh of LDAP registration information immediately, issue this command:</p>
<pre>
ALTER SYSTEM REFRESH LDAP_REGISTRATION
</pre>
<div class="example">
<p class="titleinexample"><a id="BABBIBJJ"></a><a id="LNCPP20470"></a>Example 10-17 How to Use Open Registration with LDAP</p>
<ol>
<li>
<p>Create the environment in <code>Environment::EVENTS|Environment::USE_LDAP</code> mode.</p>
</li>
<li>
<p>Set the <code>Environment</code> object for accessing LDAP:</p>
<ul>
<li>
<p>The host and port on which the LDAP server is residing and listening</p>
</li>
<li>
<p>The authentication method; only simple username and password authentication is currently supported</p>
</li>
<li>
<p>The username (distinguished name) and password for authentication with the LDAP server</p>
</li>
<li>
<p>The administrative context for Oracle in the LDAP server</p>
</li>
</ul>
</li>
<li>
<p>Create the <code>Subscription</code> object.</p>
</li>
<li>
<p>Set the distinguished names of the databases in which the client wants to receive notifications on the <code>Subscription</code> object.</p>
</li>
<li>
<p>Set these <code>Subscription</code> attributes.</p>
<p>The <code>namespace</code> can be set to these options:</p>
<ul>
<li>
<p>To receive notifications from AQ queues, <code>namespace</code> must be set to <code>Subscription::NS_AQ</code>. The subscription name is then either of the form <code>SCHEMA.QUEUE</code> when registering on a single consumer queue, or <code>SCHEMA.QUEUE:</code><code><span class="codeinlineitalic">CONSUMER_NAME</span></code> when registering on a multiconsumer queue.</p>
</li>
<li>
<p>To receive notifications from other applications that use <code>conn-&gt;postToSubscription()</code> method, <code>namespace</code> must be set to <code>Subscription::NS_ANONYMOUS</code></p>
</li>
</ul>
<p>The <code>protocol</code> can be set to these options:</p>
<ul>
<li>
<p>If an OCCI client must receive an event notification, this attribute should be set to <code>Subscription::PROTO_CBK</code>. You also must set the notification callback and the subscription context before registering the <code>Subscription</code>. The notification callback is called when the event occurs.</p>
</li>
<li>
<p>For an e-mail notification, set the protocol to <code>Subscription::PROTO_MAIL</code>. You must then set the recipient name to the e-mail address to which the notifications must be sent.</p>
</li>
<li>
<p>For an HTTP URL notification, set the protocol to <code>Subscription::HTTP</code>. You must set the recipient name to the URL to which the notification must be posted.</p>
</li>
<li>
<p>To invoke PL/SQL procedures in the database on event notification, set protocol to <code>Subscription::PROTO_SERVER</code>. You must set the recipient name to the database procedure invoked on notification.</p>
</li>
</ul>
</li>
<li>
<p>Register the subscription: <code>environment-&gt;registerSubscriptions()</code>.</p>
</li>
</ol>
</div>
<!-- class="example" -->
<p>Open registration takes effect when the database accesses LDAP to pick up new registrations. The frequency of pick-ups is determined by the value of <code>REG_SYNC_INTERVAL</code>.</p>
<p>Clients can temporarily disable subscriptions, re-enable them, or permanently unregister from future notifications.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="LNCPP20471"></a>
<div class="sect2"><a id="sthref596"></a>
<h3 class="sect2">Notification Callback</h3>
<p>The client must register a notification callback. This callback is invoked only when there is some activity on the registered subscription. In the Streams AQ namespace, this happens when a message of interest is enqueued.</p>
<p>The callback must return <code>0</code>, and it must have the following specification:</p>
<pre>
typedef unsigned int (*callbackfn) (Subscription &amp;sub, NotifyResult *nr);
</pre>
<p>where:</p>
<ul>
<li>
<p>The <code>sub</code> parameter is the <code>Subscription</code> object which was used when the callback was registered.</p>
</li>
<li>
<p>The <code>nr</code> parameter is the <code>NotifyResult</code> object holding the notification info.</p>
</li>
</ul>
<p>Ensure that the subscription object used to register for notifications is not destroyed until it explicitly unregisters the subscription.</p>
<p>The user can retrieve the payload, message, message id, queue name and consumer name from the <code>NotifyResult</code> object, depending on the source of notification. These results are summarized in <a href="#BABFAACC">Table 10-1</a>. Only a bytes payload is currently supported, and you must explicitly dequeue messages from persistent queues in the AQ namespace. If notifications come from non-persistent queues, messages are available to the callback directly; only <code>RAW</code> payloads are supported. If notifications come from persistent queues, the message has to be explicitly dequeued; all payload types are supported.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20472"></a><a id="sthref597"></a><a id="BABFAACC"></a>Table 10-1 Notification Result Attributes; ANONYMOUS and AQ Namespace</p>
<table class="cellalignment1073" title="Notification Result Attributes; ANONYMOUS and AQ Namespace" summary="Notification Result attributes for ANONYMOUS namespace, for AQ namespace with persistent queues, and for AQ namespace for non-persistent queues" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t10">Notification Result Attribute</th>
<th class="cellalignment1074" id="r1c2-t10">ANONYMOUS Namespace</th>
<th class="cellalignment1074" id="r1c3-t10">AQ Namespace, Persistent Queue</th>
<th class="cellalignment1074" id="r1c4-t10">AQ Namespace, Non-Persistent Queue</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t10" headers="r1c1-t10">
<p>payload</p>
</td>
<td class="cellalignment1075" headers="r2c1-t10 r1c2-t10">
<p>valid</p>
</td>
<td class="cellalignment1075" headers="r2c1-t10 r1c3-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r2c1-t10 r1c4-t10">
<p>invalid</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t10" headers="r1c1-t10">
<p>message</p>
</td>
<td class="cellalignment1075" headers="r3c1-t10 r1c2-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r3c1-t10 r1c3-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r3c1-t10 r1c4-t10">
<p>valid</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t10" headers="r1c1-t10">
<p>messageID</p>
</td>
<td class="cellalignment1075" headers="r4c1-t10 r1c2-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r4c1-t10 r1c3-t10">
<p>valid</p>
</td>
<td class="cellalignment1075" headers="r4c1-t10 r1c4-t10">
<p>valid</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t10" headers="r1c1-t10">
<p>consumer name</p>
</td>
<td class="cellalignment1075" headers="r5c1-t10 r1c2-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r5c1-t10 r1c3-t10">
<p>valid</p>
</td>
<td class="cellalignment1075" headers="r5c1-t10 r1c4-t10">
<p>valid</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t10" headers="r1c1-t10">
<p>queue name</p>
</td>
<td class="cellalignment1075" headers="r6c1-t10 r1c2-t10">
<p>invalid</p>
</td>
<td class="cellalignment1075" headers="r6c1-t10 r1c3-t10">
<p>valid</p>
</td>
<td class="cellalignment1075" headers="r6c1-t10 r1c4-t10">
<p>valid</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHFDGG"></a><a id="LNCPP20473"></a>
<div class="sect1">
<h2 class="sect1">Message Format Transformation</h2>
<p>Applications often use data in different formats, and this requires a type transformation. A transformation is implemented as a SQL function that takes the source data type as input and returns an object of the target data type.Transformations can be applied when message are enqueued, dequeued, or when they are propagated to a remote subscriber.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following chapters of the <a class="olink ADQUE0813" href="../../server.112/e11013/aq_admin.htm#ADQUE0813"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for information of format transformation:
<ul>
<li>
<p><a class="olink ADQUE0900" href="../../server.112/e11013/aq_views.htm#ADQUE0900">Oracle Streams AQ Administrative Interface</a></p>
</li>
<li>
<p><a class="olink ADQUE0100" href="../../server.112/e11013/aq_intro.htm#ADQUE0100">Oracle Streams AQ Administrative Interface: Views</a></p>
</li>
<li>
<p><a class="olink ADQUE1000" href="../../server.112/e11013/aq_opers.htm#ADQUE1000">Oracle Streams AQ Operational Interface: Basic Operations</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="globalization.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="xa.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
