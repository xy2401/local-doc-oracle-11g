<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Bfile Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:50Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="reference005.htm" title="Previous" type="text/html" />
<link rel="Next" href="reference007.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">26/54</span> <!-- End Header --><a id="i1155597"></a><a id="LNCPP1003"></a>
<hr />
<div class="refsect1">
<h1 class="refsect1">Bfile<a id="sthref702"></a><a id="sthref703"></a><a id="sthref704"></a> Class</h1>
<p>The <code>Bfile</code> class defines the common properties of objects of type <code>BFILE</code>. A <code>BFILE</code> is a large binary file stored in an operating system file outside of the Oracle database. A <code>Bfile</code> object contains a logical pointer to a <code>BFILE</code>, not the <code>BFILE</code> itself.</p>
<p>Methods of the <code>Bfile</code> class enable you to perform specific tasks related to <code>Bfile</code> objects.</p>
<p>Methods of the <code>ResultSet</code> and <code>Statement</code> classes, such as <code>getBfile()</code> and <code>setBfile()</code>, enable you to access an SQL <code>BFILE</code> value.</p>
<p>The only methods valid on a <code>NULL</code> <code>Bfile</code> object are <a href="#i1078439">setName()</a>, <a href="#i1078396">isNull()</a>, and <a href="#i1091091">operator=()</a>.</p>
<p>A <code>Bfile</code> object can be initialized by:</p>
<ul>
<li>
<p>The <a href="#i1078439">setName()</a> method. The <code>BFILE</code> can then be modified by inserting this <code>BFILE</code> into the table and then retrieving it using <code>SELECT...FOR&nbsp;UPDATE</code>. The <code>write()</code> method modifies the <code>BFILE</code>; however, the modified data is flushed to the table only when the transaction is committed. Note that an <code>INSERT</code> operation is not required.</p>
</li>
<li>
<p>Assigning an initialized <code>Bfile</code> object to it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
In-depth discussion of LOBs in the introductory chapter of <a class="olink ADLOB001" href="../../appdev.112/e18294/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a>,</div>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20601"></a><a id="sthref705"></a><a id="BBACGFGD"></a>Table 13-7 Summary of B<a id="sthref706"></a><a id="sthref707"></a>file Methods</p>
<table class="cellalignment1073" title="Summary of Bfile Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t32">Method</th>
<th class="cellalignment1074" id="r1c2-t32">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t32" headers="r1c1-t32">
<p><a href="#i1149011">Bfile()</a></p>
</td>
<td class="cellalignment1075" headers="r2c1-t32 r1c2-t32">
<p><code>Bfile</code> class constructor.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t32" headers="r1c1-t32">
<p><a href="#i1078344">close()</a></p>
</td>
<td class="cellalignment1075" headers="r3c1-t32 r1c2-t32">
<p>Closes a previously opened <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t32" headers="r1c1-t32">
<p><a href="#i1149049">closeStream()</a></p>
</td>
<td class="cellalignment1075" headers="r4c1-t32 r1c2-t32">
<p>Closes the stream obtained from the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t32" headers="r1c1-t32">
<p><a href="#i1078359">fileExists()</a></p>
</td>
<td class="cellalignment1075" headers="r5c1-t32 r1c2-t32">
<p>Tests whether the <code>BFILE</code> exists.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t32" headers="r1c1-t32">
<p><a href="#i1078365">getDirAlias()</a></p>
</td>
<td class="cellalignment1075" headers="r6c1-t32 r1c2-t32">
<p>Returns the directory object of the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t32" headers="r1c1-t32">
<p><a href="#i1078371">getFileName()</a></p>
</td>
<td class="cellalignment1075" headers="r7c1-t32 r1c2-t32">
<p>Returns the name of the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t32" headers="r1c1-t32">
<p><a href="#i1078377">getStream()</a></p>
</td>
<td class="cellalignment1075" headers="r8c1-t32 r1c2-t32">
<p>Returns data from the <code>BFILE</code> as a <code>Stream</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t32" headers="r1c1-t32">
<p><a href="#CHEJDEJJ">getUStringDirAlias()</a></p>
</td>
<td class="cellalignment1075" headers="r9c1-t32 r1c2-t32">
<p>Returns a <code>UString</code> containing the directory object associated with the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t32" headers="r1c1-t32">
<p><a href="#CHECFBEC">getUStringFileName()</a></p>
</td>
<td class="cellalignment1075" headers="r10c1-t32 r1c2-t32">
<p>Returns a <code>UString</code> containing the file name associated with the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t32" headers="r1c1-t32">
<p><a href="#i1133393">isInitialized()</a></p>
</td>
<td class="cellalignment1075" headers="r11c1-t32 r1c2-t32">
<p>Tests whether the <code>Bfile</code> object is initialized.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t32" headers="r1c1-t32">
<p><a href="#i1078396">isNull()</a></p>
</td>
<td class="cellalignment1075" headers="r12c1-t32 r1c2-t32">
<p>Tests whether the <code>Bfile</code> object is atomically <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t32" headers="r1c1-t32">
<p><a href="#i1078402">isOpen()</a></p>
</td>
<td class="cellalignment1075" headers="r13c1-t32 r1c2-t32">
<p>Tests whether the <code>BFILE</code> is open.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t32" headers="r1c1-t32">
<p><a href="#i1078407">length()</a></p>
</td>
<td class="cellalignment1075" headers="r14c1-t32 r1c2-t32">
<p>Returns the number of bytes in the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t32" headers="r1c1-t32">
<p><a href="#i1078413">open()</a></p>
</td>
<td class="cellalignment1075" headers="r15c1-t32 r1c2-t32">
<p>Opens the <code>BFILE</code> with read-only access.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t32" headers="r1c1-t32">
<p><a href="#i1091091">operator=()</a></p>
</td>
<td class="cellalignment1075" headers="r16c1-t32 r1c2-t32">
<p>Assigns a <code>BFILE</code> locator to the <code>Bfile</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t32" headers="r1c1-t32">
<p><a href="#i1078418">operator==()</a></p>
</td>
<td class="cellalignment1075" headers="r17c1-t32 r1c2-t32">
<p>Tests whether two <code>Bfile</code> objects are equal.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t32" headers="r1c1-t32">
<p><a href="#i1088772">operator!=()</a></p>
</td>
<td class="cellalignment1075" headers="r18c1-t32 r1c2-t32">
<p>Tests whether two <code>Bfile</code> objects are not equal.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t32" headers="r1c1-t32">
<p><a href="#i1078418">operator==()</a></p>
</td>
<td class="cellalignment1075" headers="r19c1-t32 r1c2-t32">
<p>Reads a specified portion of the <code>BFILE</code> into a buffer.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t32" headers="r1c1-t32">
<p><a href="#i1078439">setName()</a></p>
</td>
<td class="cellalignment1075" headers="r20c1-t32 r1c2-t32">
<p>Sets the directory object and file name of the <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t32" headers="r1c1-t32">
<p><a href="#i1088727">setNull()</a></p>
</td>
<td class="cellalignment1075" headers="r21c1-t32 r1c2-t32">
<p>Sets the <code>Bfile</code> object to atomically <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i1149011"></a><a id="LNCPP20602"></a>
<hr />
<h2 class="refsect2">Bfile()</h2>
<p><code>Bfile</code> class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of Bfile() constructor" summary="First column lists constructor versions; second column provides description of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t33">Syntax</th>
<th class="cellalignment1074" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t33" headers="r1c1-t33">
<pre>
Bfile();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t33 r1c2-t33">Creates a <code>NULL</code> <code>Bfile</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t33" headers="r1c1-t33">
<pre>
Bfile(
   const Connection *connectionp);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t33 r1c2-t33">Creates an uninitialized <code>Bfile</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t33" headers="r1c1-t33">
<pre>
Bfile(
   const Bfile &amp;srcBfile);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t33 r1c2-t33">Creates a copy of a <code>Bfile</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of Bfile() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t34">Parameter</th>
<th class="cellalignment1074" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t34" headers="r1c1-t34">
<pre>
connectionp
</pre></td>
<td class="cellalignment1075" headers="r2c1-t34 r1c2-t34">The connection pointer</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t34" headers="r1c1-t34">
<pre>
srcBfile
</pre></td>
<td class="cellalignment1075" headers="r3c1-t34 r1c2-t34">The source <code>Bfile</code> object</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1078344"></a><a id="LNCPP20603"></a>
<hr />
<h2 class="refsect2">close()</h2>
<p>Closes a previously opened <code>Bfile</code>.</p>
<p class="subhead1"><a id="LNCPP20604"></a>Syntax</p>
<pre>
void close();
</pre>
<a id="i1149049"></a><a id="LNCPP20605"></a>
<hr />
<h2 class="refsect2">closeStream()</h2>
<p>Closes the stream obtained from the <code>Bfile</code>.</p>
<p class="subhead1"><a id="LNCPP20606"></a>Syntax</p>
<pre>
void closeStream(
   Stream *stream); 
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t35">Parameter</th>
<th class="cellalignment1074" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t35" headers="r1c1-t35">
<pre>
stream
</pre></td>
<td class="cellalignment1075" headers="r2c1-t35 r1c2-t35">The stream to be closed.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1078359"></a><a id="LNCPP20607"></a>
<hr />
<h2 class="refsect2">fileExists()</h2>
<p>Tests whether the <code>BFILE</code> exists. If the <code>BFILE</code> exists, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20608"></a>Syntax</p>
<pre>
bool fileExists() const;
</pre>
<a id="i1078365"></a><a id="LNCPP20609"></a>
<hr />
<h2 class="refsect2">getDirAlias()</h2>
<p>Returns a string containing the directory object associated with the <code>BFILE</code>.</p>
<p class="subhead1"><a id="LNCPP20610"></a>Syntax</p>
<pre>
string getDirAlias() const;
</pre>
<a id="i1078371"></a><a id="LNCPP20611"></a>
<hr />
<h2 class="refsect2">getFileName()</h2>
<p>Returns a string containing the file name associated with the <code>BFILE</code>.</p>
<p class="subhead1"><a id="LNCPP20612"></a>Syntax</p>
<pre>
string getFileName() const;
</pre>
<a id="i1078377"></a><a id="LNCPP20613"></a>
<hr />
<h2 class="refsect2">getStream()</h2>
<p>Returns a <code>Stream</code> object read from the <code>BFILE</code>. If a stream is open, it is disallowed to open another stream on the <code>Bfile</code> object. The stream must be closed before performing any <code>Bfile</code> object operations.</p>
<p class="subhead1"><a id="LNCPP20614"></a>Syntax</p>
<pre>
Stream* getStream(
   unsigned int offset = 1,
   unsigned int amount = 0);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t36">Parameter</th>
<th class="cellalignment1074" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t36" headers="r1c1-t36">
<pre>
offset
</pre></td>
<td class="cellalignment1075" headers="r2c1-t36 r1c2-t36">The starting position at which to begin reading data from the <code>BFILE</code>. If <code>offset</code> is not specified, the data is written from the beginning of the <code>BLOB</code>. Valid values are numbers greater than or equal to <code>1</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t36" headers="r1c1-t36">
<pre>
amount
</pre></td>
<td class="cellalignment1075" headers="r3c1-t36 r1c2-t36">The total number of bytes to be read from the <code>BFILE</code>; if <code>amount</code> is <code>0</code>, the data is read in a streamed mode from input <code>offset</code> until the end of the <code>BFILE</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEJDEJJ"></a><a id="LNCPP20615"></a>
<hr />
<h2 class="refsect2">getUStringDirAlias()</h2>
<p>Returns a <code>UString</code> containing the directory object associated with the <code>BFILE</code>. Note the <code>UString</code> object is in UTF16 character set. The environment associated with <code>BFILE</code> should be associated with UTF16 characterset.</p>
<p class="subhead1"><a id="LNCPP20616"></a>Syntax</p>
<pre>
UString getUStringDirAlias() const;
</pre>
<a id="CHECFBEC"></a><a id="LNCPP20617"></a>
<hr />
<h2 class="refsect2">getUStringFileName()</h2>
<p>Returns a <code>UString</code> containing the file name associated with the <code>BFILE</code>. Note the <code>UString</code> object is in UTF16 characterset. The environment associated with <code>BFILE</code> should be associated with UTF16 characterset.</p>
<p class="subhead1"><a id="LNCPP20618"></a>Syntax</p>
<pre>
UString getUStringFileName() const;
</pre>
<a id="i1133393"></a><a id="LNCPP20619"></a>
<hr />
<h2 class="refsect2">isInitialized()</h2>
<p>Tests whether the <code>Bfile</code> object has been initialized. If the <code>Bfile</code> object has been initialized, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20620"></a>Syntax</p>
<pre>
bool isInitialized() const;
</pre>
<a id="i1078396"></a><a id="LNCPP20621"></a>
<hr />
<h2 class="refsect2">isNull()</h2>
<p>Tests whether the <code>Bfile</code> object is atomically <code>NULL</code>. If the <code>Bfile</code> object is atomically <code>NULL</code>, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20622"></a>Syntax</p>
<pre>
bool isNull() const;
</pre>
<a id="i1078402"></a><a id="LNCPP20623"></a>
<hr />
<h2 class="refsect2">isOpen()</h2>
<p>Tests whether the <code>BFILE</code> is open. The <code>BFILE</code> is considered to be open only if it was opened by a call on this <code>Bfile</code> object. (A different <code>Bfile</code> object could have opened this file as multiple <code>open()</code> calls can be performed on the same file by associating the file with different <code>Bfile</code> objects). If the <code>BFILE</code> is open, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20624"></a>Syntax</p>
<pre>
bool isOpen() const;
</pre>
<a id="i1078407"></a><a id="LNCPP20625"></a>
<hr />
<h2 class="refsect2">length()</h2>
<p>Returns the number of bytes (inclusive of the end of file marker) in the <code>BFILE</code>.</p>
<p class="subhead1"><a id="LNCPP20626"></a>Syntax</p>
<pre>
unsigned int length() const;
</pre>
<a id="i1078413"></a><a id="LNCPP20627"></a>
<hr />
<h2 class="refsect2">open()</h2>
<p>Opens an existing <code>BFILE</code> for read-only access. This function is meaningful the first time it is called for a <code>Bfile</code> object.</p>
<p class="subhead1"><a id="LNCPP20628"></a>Syntax</p>
<pre>
void open();
</pre>
<a id="i1091091"></a><a id="LNCPP20629"></a>
<hr />
<h2 class="refsect2">operator=()</h2>
<p>Assigns a <code>Bfile</code> object to the current <code>Bfile</code> object. The source <code>Bfile</code> object is assigned to this <code>Bfile</code> object only when this <code>Bfile</code> object gets stored in the database.</p>
<p class="subhead1"><a id="LNCPP20630"></a>Syntax</p>
<pre>
Bfile&amp; operator=(
   const Bfile &amp;srcBfile);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t37">Parameter</th>
<th class="cellalignment1074" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t37" headers="r1c1-t37">
<pre>
srcBfile
</pre></td>
<td class="cellalignment1075" headers="r2c1-t37 r1c2-t37">The <code>Bfile</code> object to be assigned to the current <code>Bfile</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1078418"></a><a id="LNCPP20631"></a>
<hr />
<h2 class="refsect2">operator==()</h2>
<p>Compares two <code>Bfile</code> objects for equality. The <code>Bfile</code> objects are equal if they both refer to the same <code>BFILE</code>. If the <code>Bfile</code> objects are <code>NULL</code>, then <code>FALSE</code> is returned. If the <code>Bfile</code> objects are equal, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20632"></a>Syntax</p>
<pre>
bool operator==(
   const Bfile &amp;srcBfile) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t38">Parameter</th>
<th class="cellalignment1074" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t38" headers="r1c1-t38">
<pre>
srcBfile
</pre></td>
<td class="cellalignment1075" headers="r2c1-t38 r1c2-t38">The <code>Bfile</code> object to be compared with the current <code>Bfile</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1088772"></a><a id="LNCPP20633"></a>
<hr />
<h2 class="refsect2">operator!=()</h2>
<p>Compares two <code>Bfile objects</code> for inequality. The <code>Bfile</code> objects are equal if they both refer to the same <code>BFILE</code>. If the <code>Bfile</code> objects are not equal, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP20634"></a>Syntax</p>
<pre>
bool operator!=(
   const Bfile &amp;srcBfile) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t39">Parameter</th>
<th class="cellalignment1074" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t39" headers="r1c1-t39">
<pre>
srcBfile
</pre></td>
<td class="cellalignment1075" headers="r2c1-t39 r1c2-t39">The <code>Bfile</code> object to be compared with the current <code>Bfile</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1091076"></a><a id="LNCPP20635"></a>
<hr />
<h2 class="refsect2">read()</h2>
<p>Reads a part or all of the <code>BFILE</code> into the buffer specified, and returns the number of bytes read.</p>
<p class="subhead1"><a id="LNCPP20636"></a>Syntax</p>
<pre>
unsigned int read(
   unsigned int amt,
   unsigned char *buffer,
   unsigned int bufsize,
   unsigned int offset = 1) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of read() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t40">Parameter</th>
<th class="cellalignment1074" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t40" headers="r1c1-t40">
<pre>
amt
</pre></td>
<td class="cellalignment1075" headers="r2c1-t40 r1c2-t40">The number of bytes to be read. Valid values are numbers greater than or equal to <code>1</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t40" headers="r1c1-t40">
<pre>
buffer
</pre></td>
<td class="cellalignment1075" headers="r3c1-t40 r1c2-t40">The buffer that the <code>BFILE</code> data is to be read into. Valid values are numbers greater than or equal to <code>amt</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t40" headers="r1c1-t40">
<pre>
buffsize
</pre></td>
<td class="cellalignment1075" headers="r4c1-t40 r1c2-t40">The size of the buffer that the <code>BFILE</code> data is to be read into. Valid values are numbers greater than or equal to <code>amt</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t40" headers="r1c1-t40">
<pre>
offset
</pre></td>
<td class="cellalignment1075" headers="r5c1-t40 r1c2-t40">The starting position at which to begin reading data from the <code>BFILE</code>. If <code>offset</code> is not specified, the data is written from the beginning of the <code>BFILE</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1078439"></a><a id="LNCPP20637"></a>
<hr />
<h2 class="refsect2">setName()</h2>
<p>Sets the directory object and file name of the <code>BFILE</code>.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setNamet() method" summary="First column lists method versions; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t41">Syntax</th>
<th class="cellalignment1074" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t41" headers="r1c1-t41">
<pre>
void setName(
   const string &amp;dirAlias,
   const string &amp;fileName);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t41 r1c2-t41">Sets the directory object and file name of the <code>BFILE</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t41" headers="r1c1-t41">
<pre>
void setName(
   const UString &amp;dirAlias,
   const UString &amp;fileName);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t41 r1c2-t41">Sets the directory object and file name of the <code>BFILE</code> (Unicode support). The client <code>Environment</code> should be initialized in OCCIUTIF16 mode.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setName() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t42">Parameter</th>
<th class="cellalignment1074" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t42" headers="r1c1-t42">
<pre>
dirAlias
</pre></td>
<td class="cellalignment1075" headers="r2c1-t42 r1c2-t42">The directory object to be associated with the <code>BFILE</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t42" headers="r1c1-t42">
<pre>
fileName
</pre></td>
<td class="cellalignment1075" headers="r3c1-t42 r1c2-t42">The file name to be associated with the <code>BFILE</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1088727"></a><a id="LNCPP20638"></a>
<hr />
<h2 class="refsect2">setNull()</h2>
<p>Sets the <code>Bfile object</code> to atomically <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP20639"></a>Syntax</p>
<pre>
void setNull();
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="reference005.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="reference007.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
