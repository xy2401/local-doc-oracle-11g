<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>IntervalYM Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:51Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="reference015.htm" title="Previous" type="text/html" />
<link rel="Next" href="reference017.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">36/54</span> <!-- End Header --><a id="i1080017"></a><a id="LNCPP1012"></a>
<hr />
<div class="refsect1">
<h1 class="refsect1">IntervalYM<a id="sthref783"></a><a id="sthref784"></a><a id="sthref785"></a> Class</h1>
<p><code>IntervalYM</code> supports the SQL standard data type Year-Month Interval.</p>
<p>Leading field precision is determined by number of decimal digits on input.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21062"></a><a id="sthref786"></a><a id="sthref787"></a>Table 13-21 <a id="sthref788"></a><a id="sthref789"></a>Fields of IntervalYM Class</p>
<table class="cellalignment1073" title="Fields of IntervalYM Class" summary="First column lists fields; second column provides field types; third column provides description and range of legal values of the fields." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t230">Field</th>
<th class="cellalignment1074" id="r1c2-t230">Type</th>
<th class="cellalignment1074" id="r1c3-t230">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t230" headers="r1c1-t230">
<p><code>year</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t230 r1c2-t230">
<p><code>int</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t230 r1c3-t230">
<p>Year component. Valid values are <code>-10^9</code> through <code>10^9</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t230" headers="r1c1-t230">
<p><code>month</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t230 r1c2-t230">
<p><code>int</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t230 r1c3-t230">
<p>Month component. Valid values are <code>-11</code> through <code>11</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="example">
<p class="titleinexample"><a id="LNCPP21063"></a><a id="sthref790"></a>Example 13-8 <a id="sthref791"></a><a id="sthref792"></a>How to Use an Empty IntervalYM Object Through Direct Assignment</p>
<p>This example demonstrates that the default constructor creates a <code>NULL</code> value, and how you can assign a non <code>NULL</code> value to a year-month interval and then perform operations on it:</p>
<pre>
Environment *env = Environment::createEnvironment();

// Create a NULL year-month interval
IntervalYM ym
if(ym.isNull())
   cout &lt;&lt; "\n ym is null";

// Assign a non-NULL value to ym
IntervalYM anotherYM(env, "10-30");
ym=anotherYM;

// Now all operations on YM are valid
int yr = ym.getYear();
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="LNCPP21064"></a><a id="sthref793"></a>Example 13-9 How to Use an IntervalYM Object Through ResultSet and toText() Method</p>
<p>This example demonstrates how to get the year-month interval column from a result set, add to the year-month interval by using the <code>+=</code> operator, multiply by using the <a id="BBAGHFEJ"></a><code>*</code> operator, compare 2 year-month intervals, and convert a year-month interval to a string by using the <code>toText()</code> method.</p>
<pre>
//SELECT WARRANT_PERIOD from PRODUCT_INFORMATION
//obtain result set
resultset-&gt;next();

//get interval value from resultset
IntervalYM ym1 = resultset-&gt;getIntervalYM(1);

IntervalYM addWith(env, 10, 1);
ym1 += addWith;    //call += operator

IntervalYM mulYm1 = ym1 * Number(env, 10);    //call * operator
if(ym1&lt;mulYm1)    //comparison
   .
   .
string strym = ym1.toText(3);    //3 is the leading field precision
</pre></div>
<!-- class="example" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21065"></a><a id="sthref794"></a><a id="sthref795"></a>Table 13-22 Summary of <a id="sthref796"></a><a id="sthref797"></a>IntervalYM Methods</p>
<table class="cellalignment1073" title="Summary of IntervalYM Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t231">Method</th>
<th class="cellalignment1074" id="r1c2-t231">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t231" headers="r1c1-t231">
<p><a href="#i1147560">IntervalYM()</a></p>
</td>
<td class="cellalignment1075" headers="r2c1-t231 r1c2-t231">
<p><code>IntervalYM</code> class constructor.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t231" headers="r1c1-t231">
<p><a href="#i1074888">fromText()</a></p>
</td>
<td class="cellalignment1075" headers="r3c1-t231 r1c2-t231">
<p>Converts a <code>string</code> into an <code>IntervalYM</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t231" headers="r1c1-t231">
<p><a href="#BBAEHDFE">fromUText()</a></p>
</td>
<td class="cellalignment1075" headers="r4c1-t231 r1c2-t231">
<p>Converts a <code>UString</code> into an <code>IntervalYM</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t231" headers="r1c1-t231">
<p><a href="#i1090880">getMonth()</a></p>
</td>
<td class="cellalignment1075" headers="r5c1-t231 r1c2-t231">
<p>Returns month interval value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t231" headers="r1c1-t231">
<p><a href="#i1074918">getYear()</a></p>
</td>
<td class="cellalignment1075" headers="r6c1-t231 r1c2-t231">
<p>Returns year interval value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t231" headers="r1c1-t231">
<p><a href="#i1090881">isNull()</a></p>
</td>
<td class="cellalignment1075" headers="r7c1-t231 r1c2-t231">
<p>Checks if the interval is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t231" headers="r1c1-t231">
<p><a href="#i1090723">operator*()</a></p>
</td>
<td class="cellalignment1075" headers="r8c1-t231 r1c2-t231">
<p>Returns the product of two <code>IntervalYM</code> values.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t231" headers="r1c1-t231">
<p><a href="#i1107723">operator*=()</a></p>
</td>
<td class="cellalignment1075" headers="r9c1-t231 r1c2-t231">
<p>Multiplication assignment.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t231" headers="r1c1-t231">
<p><a href="#i1091018">operator=()</a></p>
</td>
<td class="cellalignment1075" headers="r10c1-t231 r1c2-t231">
<p>Simple assignment.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t231" headers="r1c1-t231">
<p><a href="#i1091026">operator==()</a></p>
</td>
<td class="cellalignment1075" headers="r11c1-t231 r1c2-t231">
<p>Checks if <code>a</code> and <code>b</code> are equal.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t231" headers="r1c1-t231">
<p><a href="#i1107786">operator!=()</a></p>
</td>
<td class="cellalignment1075" headers="r12c1-t231 r1c2-t231">
<p>Checks if <code>a</code> and <code>b</code> are not equal.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t231" headers="r1c1-t231">
<p><a href="#i1107672">operator/()</a></p>
</td>
<td class="cellalignment1075" headers="r13c1-t231 r1c2-t231">
<p>Returns an <code>interval</code> with value <code>(</code><code>a/b</code><code>)</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t231" headers="r1c1-t231">
<p><a href="#i1107771">operator/=()</a></p>
</td>
<td class="cellalignment1075" headers="r14c1-t231 r1c2-t231">
<p>Division assignment.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t231" headers="r1c1-t231">
<p><a href="#i1090750">operator&gt;()</a></p>
</td>
<td class="cellalignment1075" headers="r15c1-t231 r1c2-t231">
<p>Checks if <code>a</code> is greater than <code>b</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t231" headers="r1c1-t231">
<p><a href="#i1107808">operator&gt;=()</a></p>
</td>
<td class="cellalignment1075" headers="r16c1-t231 r1c2-t231">
<p>Checks if <code>a</code> is greater than or equal to <code>b</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t231" headers="r1c1-t231">
<p><a href="#i1091041">operator&lt;()</a></p>
</td>
<td class="cellalignment1075" headers="r17c1-t231 r1c2-t231">
<p>Checks if <code>a</code> is less than <code>b</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t231" headers="r1c1-t231">
<p><a href="#i1107829">operator&lt;=()</a></p>
</td>
<td class="cellalignment1075" headers="r18c1-t231 r1c2-t231">
<p>Checks if <code>a</code> is less than or equal to <code>b</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t231" headers="r1c1-t231">
<p><a href="#i1090757">operator-()</a></p>
</td>
<td class="cellalignment1075" headers="r19c1-t231 r1c2-t231">
<p>Returns an <code>interval</code> with value <code>(</code><code>a - b</code><code>)</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t231" headers="r1c1-t231">
<p><a href="#i1107753">operator<code>-=</code>()</a></p>
</td>
<td class="cellalignment1075" headers="r20c1-t231 r1c2-t231">
<p>Subtraction assignment.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t231" headers="r1c1-t231">
<p><a href="#i1091052">operator+()</a></p>
</td>
<td class="cellalignment1075" headers="r21c1-t231 r1c2-t231">
<p>Returns the sum of two <code>IntervalYM</code> values.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t231" headers="r1c1-t231">
<p><a href="#i1107738">operator+=()</a></p>
</td>
<td class="cellalignment1075" headers="r22c1-t231 r1c2-t231">
<p>Addition assignment.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t231" headers="r1c1-t231">
<p><a href="#i1092012">set()</a></p>
</td>
<td class="cellalignment1075" headers="r23c1-t231 r1c2-t231">
<p>Sets the interval to the values specified.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t231" headers="r1c1-t231">
<p><a href="#i1090869">setNull()</a></p>
</td>
<td class="cellalignment1075" headers="r24c1-t231 r1c2-t231">
<p>Sets the interval to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t231" headers="r1c1-t231">
<p><a href="#i1096985">toText()</a></p>
</td>
<td class="cellalignment1075" headers="r25c1-t231 r1c2-t231">
<p>Converts to a <code>string</code> representation of the interval.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r26c1-t231" headers="r1c1-t231">
<p><a href="#BBAFEDII">toUText()</a></p>
</td>
<td class="cellalignment1075" headers="r26c1-t231 r1c2-t231">
<p>Converts to a <code>UString</code> representation of the interval.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i1147560"></a><a id="LNCPP21066"></a>
<hr />
<h2 class="refsect2">IntervalYM()</h2>
<p>IntervalYM class constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of IntervalYM() constructor" summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t232">Syntax</th>
<th class="cellalignment1074" id="r1c2-t232">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t232" headers="r1c1-t232">
<pre>
IntervalYM();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t232 r1c2-t232">Constructs a <code>NULL</code> <code>IntervalYM</code> object. A <code>NULL</code> <code>IntervalYM</code> can be initialized by assignment or calling <a href="reference015.htm#i1090537">operator*()</a> method. Methods that can be called on <code>NULL</code> <code>IntervalYM</code> objects are <a href="reference006.htm#i1078439">setName()</a> and <a href="reference006.htm#i1078396">isNull()</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t232" headers="r1c1-t232">
<pre>
IntervalYM(
   const Environment *env,
   int year  = 0,
   int month = 0);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t232 r1c2-t232">Creates an <code>IntervalYM</code> object within the specified <code>Environment</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t232" headers="r1c1-t232">
<pre>
IntervalDS(
   const IntervalYM &amp;src);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t232 r1c2-t232">Copy constructor.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of IntervalYM() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t233">Parameter</th>
<th class="cellalignment1074" id="r1c2-t233">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t233" headers="r1c1-t233">
<pre>
env
</pre></td>
<td class="cellalignment1075" headers="r2c1-t233 r1c2-t233">The <code>Environment</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t233" headers="r1c1-t233">
<pre>
year
</pre></td>
<td class="cellalignment1075" headers="r3c1-t233 r1c2-t233">The <code>year</code> field of the <code>IntervalYM</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t233" headers="r1c1-t233">
<pre>
month
</pre></td>
<td class="cellalignment1075" headers="r4c1-t233 r1c2-t233">The <code>month</code> field of the <code>IntervalYM</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t233" headers="r1c1-t233">
<pre>
src
</pre></td>
<td class="cellalignment1075" headers="r5c1-t233 r1c2-t233">The source that the <code>IntervalYM</code> object is copied from.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1074888"></a><a id="LNCPP21067"></a>
<hr />
<h2 class="refsect2">fromText()</h2>
<p>This method initializes the interval to the values in <code>inpstr</code>. The string is interpreted using the NLS parameters set in the environment.</p>
<p>The NLS parameters are picked up from <code>env</code>. If <code>env</code> is <code>NULL</code>, the NLS parameters are picked up from the environment associated with the instance, if any.</p>
<p class="subhead1"><a id="LNCPP21068"></a>Syntax</p>
<pre>
void fromText(
   const string &amp;inpStr,
   const string &amp;nlsParam = "",
   const Environment *env = NULL);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of fromText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t234">Parameter</th>
<th class="cellalignment1074" id="r1c2-t234">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t234" headers="r1c1-t234">
<pre>
inpStr
</pre></td>
<td class="cellalignment1075" headers="r2c1-t234 r1c2-t234">Input string representing a year month interval of the form 'year-month'.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t234" headers="r1c1-t234">
<pre>
nlsParam
</pre></td>
<td class="cellalignment1075" headers="r3c1-t234 r1c2-t234">The NLS parameters string. If <code>nlsParam</code> is specified, this determines the NLS parameters to be used for the conversion. If <code>nlsParam</code> is not specified, the NLS parameters are picked up from <code>envp</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t234" headers="r1c1-t234">
<pre>
env
</pre></td>
<td class="cellalignment1075" headers="r4c1-t234 r1c2-t234">Environment whose NLS parameters are used.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="BBAEHDFE"></a><a id="LNCPP21069"></a>
<hr />
<h2 class="refsect2">fromUText()</h2>
<p>Creates the interval from the <code>UString</code> specified.</p>
<p class="subhead1"><a id="LNCPP21070"></a>Syntax</p>
<pre>
void fromUText(
   const UString &amp;inpStr,
   const Environment *env=NULL );
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of fromUText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t235">Parameter</th>
<th class="cellalignment1074" id="r1c2-t235">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t235" headers="r1c1-t235">
<pre>
inpStr
</pre></td>
<td class="cellalignment1075" headers="r2c1-t235 r1c2-t235">Input <code>UString</code> representing a year month interval of the form 'year-month'.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t235" headers="r1c1-t235">
<pre>
env
</pre></td>
<td class="cellalignment1075" headers="r3c1-t235 r1c2-t235">The <code>Environment</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1090880"></a><a id="LNCPP21071"></a>
<hr />
<h2 class="refsect2">getMonth()</h2>
<p>This method returns the month component of the interval.</p>
<p class="subhead1"><a id="LNCPP21072"></a>Syntax</p>
<pre>
int getMonth() const;
</pre>
<a id="i1074918"></a><a id="LNCPP21073"></a>
<hr />
<h2 class="refsect2">getYear()</h2>
<p>This method returns the year component of the interval.</p>
<p class="subhead1"><a id="LNCPP21074"></a>Syntax</p>
<pre>
int getYear() const;
</pre>
<a id="i1090881"></a><a id="LNCPP21075"></a>
<hr />
<h2 class="refsect2">isNull()</h2>
<p>This method tests whether the interval is <code>NULL</code>. If the interval is <code>NULL</code> then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21076"></a>Syntax</p>
<pre>
bool isNull() const;
</pre>
<a id="i1090723"></a><a id="LNCPP21077"></a>
<hr />
<h2 class="refsect2">operator*()</h2>
<p>This method multiplies the interval by a factor and returns the result.</p>
<p class="subhead1"><a id="LNCPP21078"></a>Syntax</p>
<pre>
const IntervalYM operator*(
   const IntervalDS &amp;interval
   const Number &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator*() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t236">Parameter</th>
<th class="cellalignment1074" id="r1c2-t236">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t236" headers="r1c1-t236">
<pre>
interval
</pre></td>
<td class="cellalignment1075" headers="r2c1-t236 r1c2-t236">Interval to be multiplied.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t236" headers="r1c1-t236">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t236 r1c2-t236">Value by which interval is to be multiplied.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107723"></a><a id="LNCPP21079"></a>
<hr />
<h2 class="refsect2">operator*=()</h2>
<p>This method multiplies the interval by a specified value.</p>
<p>Syntax</p>
<pre>
IntervalYM&amp; operator*=(
   const Number &amp;factor);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator=*() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t237">Parameter</th>
<th class="cellalignment1074" id="r1c2-t237">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t237" headers="r1c1-t237">
<pre>
factor
</pre></td>
<td class="cellalignment1075" headers="r2c1-t237 r1c2-t237">Value to be multiplied.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1091018"></a><a id="LNCPP21080"></a>
<hr />
<h2 class="refsect2">operator=()</h2>
<p>This method assigns the specified value to the interval.</p>
<p class="subhead1"><a id="LNCPP21081"></a>Syntax</p>
<pre>
IntervalYM&amp; operator=(
   const IntervalYM &amp;src);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t238">Parameter</th>
<th class="cellalignment1074" id="r1c2-t238">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t238" headers="r1c1-t238">
<pre>
src
</pre></td>
<td class="cellalignment1075" headers="r2c1-t238 r1c2-t238">Value to be assigned.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1091026"></a><a id="LNCPP21082"></a>
<hr />
<h2 class="refsect2">operator==()</h2>
<p>This method compares the intervals specified. If the intervals are equal then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown.</p>
<p class="subhead1"><a id="LNCPP21083"></a>Syntax</p>
<pre>
bool operator==(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t239">Parameter</th>
<th class="cellalignment1074" id="r1c2-t239">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t239" headers="r1c1-t239">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t239 r1c2-t239">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t239" headers="r1c1-t239">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t239 r1c2-t239">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107786"></a><a id="LNCPP21084"></a>
<hr />
<h2 class="refsect2">operator!=()</h2>
<p>This method compares the intervals specified. If the intervals are not equal then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown.</p>
<p class="subhead1"><a id="LNCPP21085"></a>Syntax</p>
<pre>
bool operator!=(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t240">Parameter</th>
<th class="cellalignment1074" id="r1c2-t240">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t240" headers="r1c1-t240">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t240 r1c2-t240">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t240" headers="r1c1-t240">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t240 r1c2-t240">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107672"></a><a id="LNCPP21086"></a>
<hr />
<h2 class="refsect2">operator/()</h2>
<p>This method returns the result of dividing the interval by a factor.</p>
<p class="subhead1"><a id="LNCPP21087"></a>Syntax</p>
<pre>
const IntervalYM operator/(
   const IntervalYM &amp;dividend,
   const Number &amp;factor);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator/() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t241">Parameter</th>
<th class="cellalignment1074" id="r1c2-t241">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t241" headers="r1c1-t241">
<pre>
dividend
</pre></td>
<td class="cellalignment1075" headers="r2c1-t241 r1c2-t241">The interval to be divided.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t241" headers="r1c1-t241">
<pre>
factor
</pre></td>
<td class="cellalignment1075" headers="r3c1-t241 r1c2-t241">Value by which interval is to be divided.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107771"></a><a id="LNCPP21088"></a>
<hr />
<h2 class="refsect2">operator/=()</h2>
<p>This method divides the interval by a factor.</p>
<p class="subhead1"><a id="LNCPP21089"></a>Syntax</p>
<pre>
IntervalYM&amp; operator/=(
   const Number &amp;factor);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator/=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t242">Parameter</th>
<th class="cellalignment1074" id="r1c2-t242">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t242" headers="r1c1-t242">
<pre>
factor
</pre></td>
<td class="cellalignment1075" headers="r2c1-t242 r1c2-t242">A day second interval.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1090750"></a><a id="LNCPP21090"></a>
<hr />
<h2 class="refsect2">operator&gt;()</h2>
<p>This method compares the intervals specified. If the first interval is greater than the second interval then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown.</p>
<p class="subhead1"><a id="LNCPP21091"></a>Syntax</p>
<pre>
bool operator&gt;(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator&gt;() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t243">Parameter</th>
<th class="cellalignment1074" id="r1c2-t243">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t243" headers="r1c1-t243">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t243 r1c2-t243">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t243" headers="r1c1-t243">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t243 r1c2-t243">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107808"></a><a id="LNCPP21092"></a>
<hr />
<h2 class="refsect2">operator&gt;=()</h2>
<p>This method compares the intervals specified. If the first interval is greater than or equal to the second interval then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown.</p>
<p class="subhead1"><a id="LNCPP21093"></a>Syntax</p>
<pre>
bool operator&gt;=(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator&gt;=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t244">Parameter</th>
<th class="cellalignment1074" id="r1c2-t244">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t244" headers="r1c1-t244">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t244 r1c2-t244">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t244" headers="r1c1-t244">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t244 r1c2-t244">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1091041"></a><a id="LNCPP21094"></a>
<hr />
<h2 class="refsect2">operator&lt;()</h2>
<p>This method compares the intervals specified. If the first interval is less than the second interval then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown.</p>
<p class="subhead1"><a id="LNCPP21095"></a>Syntax</p>
<pre>
bool operator&lt;(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator&lt;() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t245">Parameter</th>
<th class="cellalignment1074" id="r1c2-t245">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t245" headers="r1c1-t245">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t245 r1c2-t245">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t245" headers="r1c1-t245">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t245 r1c2-t245">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107829"></a><a id="LNCPP21096"></a>
<hr />
<h2 class="refsect2">operator&lt;=()</h2>
<p>This method compares the intervals specified. If the first interval is less than or equal to the second interval then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned. If either interval is <code>NULL</code> then SQLException is thrown</p>
<p class="subhead1"><a id="LNCPP21097"></a>Syntax</p>
<pre>
bool operator&lt;=(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator&lt;=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t246">Parameter</th>
<th class="cellalignment1074" id="r1c2-t246">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t246" headers="r1c1-t246">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t246 r1c2-t246">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t246" headers="r1c1-t246">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t246 r1c2-t246">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1090757"></a><a id="LNCPP21098"></a>
<hr />
<h2 class="refsect2">operator-()</h2>
<p>This method returns the difference between the intervals specified.</p>
<p class="subhead1"><a id="LNCPP21099"></a>Syntax</p>
<pre>
const IntervalYM operator-(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator-() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t247">Parameter</th>
<th class="cellalignment1074" id="r1c2-t247">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t247" headers="r1c1-t247">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t247 r1c2-t247">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t247" headers="r1c1-t247">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t247 r1c2-t247">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107753"></a><a id="LNCPP21100"></a>
<hr />
<h2 class="refsect2">operator<code>-=</code>()</h2>
<p>This method computes the difference between itself and another interval.</p>
<p class="subhead1"><a id="LNCPP21101"></a>Syntax</p>
<pre>
IntervalYM&amp; operator-=(
   const IntervalYM &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator-=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t248">Parameter</th>
<th class="cellalignment1074" id="r1c2-t248">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t248" headers="r1c1-t248">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r2c1-t248 r1c2-t248">A day second interval.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1091052"></a><a id="LNCPP21102"></a>
<hr />
<h2 class="refsect2">operator+()</h2>
<p>This method returns the sum of the intervals specified.</p>
<p class="subhead1"><a id="LNCPP21103"></a>Syntax</p>
<pre>
const IntervalYM operator+(
   const IntervalYM &amp;first,
   const IntervalYM &amp;second);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator+() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t249">Parameter</th>
<th class="cellalignment1074" id="r1c2-t249">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t249" headers="r1c1-t249">
<pre>
first
</pre></td>
<td class="cellalignment1075" headers="r2c1-t249 r1c2-t249">The first interval to be compared.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t249" headers="r1c1-t249">
<pre>
second
</pre></td>
<td class="cellalignment1075" headers="r3c1-t249 r1c2-t249">The second interval to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107738"></a><a id="LNCPP21104"></a>
<hr />
<h2 class="refsect2">operator+=()</h2>
<p>This method assigns the sum of <code>IntervalYM</code> and <code>val</code> to <code>IntervalYM</code>.</p>
<p class="subhead1"><a id="LNCPP21105"></a>Syntax</p>
<pre>
IntervalYM&amp; operator+=(
   const IntervalYM &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator+=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t250">Parameter</th>
<th class="cellalignment1074" id="r1c2-t250">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t250" headers="r1c1-t250">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r2c1-t250 r1c2-t250">A day second interval.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1092012"></a><a id="LNCPP21106"></a>
<hr />
<h2 class="refsect2">set()</h2>
<p>This method sets the interval to the values specified.</p>
<p class="subhead1"><a id="LNCPP21107"></a>Syntax</p>
<pre>
void set(
   int year,
   int month);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of set() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t251">Parameter</th>
<th class="cellalignment1074" id="r1c2-t251">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t251" headers="r1c1-t251">
<pre>
year
</pre></td>
<td class="cellalignment1075" headers="r2c1-t251 r1c2-t251">Year component. Valid values are <code>-10^9</code> through <code>10^9</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t251" headers="r1c1-t251">
<pre>
month
</pre></td>
<td class="cellalignment1075" headers="r3c1-t251 r1c2-t251">Month component. Valid values are <code>-11</code> through <code>11</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1090869"></a><a id="LNCPP21108"></a>
<hr />
<h2 class="refsect2">setNull()</h2>
<p>This method sets the interval to <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21109"></a>Syntax</p>
<pre>
void setNull();
</pre>
<a id="i1096985"></a><a id="LNCPP21110"></a>
<hr />
<h2 class="refsect2">toText()</h2>
<p>This method returns the string representation of the interval.</p>
<p class="subhead1"><a id="LNCPP21111"></a>Syntax</p>
<pre>
string toText(
   unsigned int lfprec,
   const string &amp;nlsParam = "") const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of toText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t252">Parameter</th>
<th class="cellalignment1074" id="r1c2-t252">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t252" headers="r1c1-t252">
<pre>
lfprec
</pre></td>
<td class="cellalignment1075" headers="r2c1-t252 r1c2-t252">Leading field precision.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t252" headers="r1c1-t252">
<pre>
nlsParam
</pre></td>
<td class="cellalignment1075" headers="r3c1-t252 r1c2-t252">The NLS parameters string. If <code>nlsParam</code> is specified, this determines the NLS parameters to be used for the conversion. If <code>nlsParam</code> is not specified, the NLS parameters are picked up from <code>envp</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="BBAFEDII"></a><a id="LNCPP21112"></a>
<hr />
<h2 class="refsect2">toUText()</h2>
<p>Converts to a <code>UString</code> representation for the interval.</p>
<p class="subhead1"><a id="LNCPP21113"></a>Syntax</p>
<pre>
UString toUText(
   unsigned int lfprec) cosnt;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of toUText() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t253">Parameter</th>
<th class="cellalignment1074" id="r1c2-t253">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t253" headers="r1c1-t253">
<pre>
lfprec
</pre></td>
<td class="cellalignment1075" headers="r2c1-t253 r1c2-t253">Leading field precision.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="reference015.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="reference017.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
