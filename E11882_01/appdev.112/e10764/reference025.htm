<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Ref Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="reference024.htm" title="Previous" type="text/html" />
<link rel="Next" href="reference026.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">45/54</span> <!-- End Header --><a id="i1079048"></a><a id="LNCPP1017"></a>
<hr />
<div class="refsect1">
<h1 class="refsect1">Ref <a id="sthref862"></a><a id="sthref863"></a><a id="sthref864"></a>Class</h1>
<p>The mapping in the C++ programming language of an SQL REF value, which is a reference to an SQL structured type value in the database.</p>
<p>Each REF value has a unique identifier of the object it refers to. An SQL REF value may be used istead of the SQL structured type it references; it may be used as either a column value in a table or an attribute value in a structured type.</p>
<p>Because an SQL REF value is a logical pointer to an SQL structured type, a Ref object is by default also a logical pointer; thus, retrieving an SQL REF value as a Ref object does not materialize the attributes of the structured type on the client.</p>
<p>The only methods valid on a <code>NULL</code> <code>Ref</code> object are <a href="#i1072606">isNull()</a>, and <a href="#i1072681">operator=()</a>.</p>
<p>A Ref object can be saved to persistent storage and is de-referenced through <a href="#i1072650">operator*()</a>, <a href="#i1072641">operator-&gt;()</a> or <a href="#i1072691">ptr()</a> methods. T must be a class derived from <code>PObject</code>. In the following sections, <code>T*</code> and <code>PObject</code>* are used interchangeably.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21411"></a><a id="sthref865"></a><a id="BBAJGIHJ"></a>Table 13-35 Enumerated Values Used by Ref Class</p>
<table class="cellalignment1073" title="Enumerated Values Used by Ref Class" summary="First column lists the attribute used by the class, the second column describes the options available to each attribute" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t356">Attribute</th>
<th class="cellalignment1074" id="r1c2-t356">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t356" headers="r1c1-t356">
<pre>
LockOptions
</pre></td>
<td class="cellalignment1075" headers="r2c1-t356 r1c2-t356">
<ul>
<li>
<p><code>OCCI_LOCK_NONE</code> clears the lock setting on the <code>Ref</code> object.</p>
</li>
<li>
<p><code>OCCI_LOCK_X</code> indicates that the object should be locked, and to wait for the lock to be available if the object is locked by another session.</p>
</li>
<li>
<p><code>OCCI_LOCK_X_NOWAIT</code> indicates that the object should be locked, and returns an error if it is locked by another session.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t356" headers="r1c1-t356">
<pre>
PrefetchOption
</pre></td>
<td class="cellalignment1075" headers="r3c1-t356 r1c2-t356">
<ul>
<li>
<p><code>OCCI_MAX_PREFETCH_DEPTH</code> indicates that the fetch should be done to maximum depth.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21412"></a><a id="sthref866"></a><a id="sthref867"></a>Table 13-36 Summary of<a id="sthref868"></a><a id="sthref869"></a> Ref Methods</p>
<table class="cellalignment1073" title="Summary of Ref Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t357">Method</th>
<th class="cellalignment1074" id="r1c2-t357">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t357" headers="r1c1-t357">
<p><a href="#i1145818">Ref()</a></p>
</td>
<td class="cellalignment1075" headers="r2c1-t357 r1c2-t357">
<p><code>Ref</code> object constructor.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t357" headers="r1c1-t357">
<p><a href="#i1095369">clear()</a></p>
</td>
<td class="cellalignment1075" headers="r3c1-t357 r1c2-t357">
<p>Clears the reference.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t357" headers="r1c1-t357">
<p><a href="#i1108233">getConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r4c1-t357 r1c2-t357">
<p>Returns the connection this ref was created from.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t357" headers="r1c1-t357">
<p><a href="#i1130541">isClear()</a></p>
</td>
<td class="cellalignment1075" headers="r5c1-t357 r1c2-t357">
<p>Checks if the Ref is cleared.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t357" headers="r1c1-t357">
<p><a href="#i1072606">isNull()</a></p>
</td>
<td class="cellalignment1075" headers="r6c1-t357 r1c2-t357">
<p>Checks if the <code>Ref</code> is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t357" headers="r1c1-t357">
<p><a href="#i1130503">markDelete()</a></p>
</td>
<td class="cellalignment1075" headers="r7c1-t357 r1c2-t357">
<p>Marks the referred object as deleted.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t357" headers="r1c1-t357">
<p><a href="#i1072641">operator-&gt;()</a></p>
</td>
<td class="cellalignment1075" headers="r8c1-t357 r1c2-t357">
<p>Dereferences the <code>Ref</code> and pins the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t357" headers="r1c1-t357">
<p><a href="#i1072650">operator*()</a></p>
</td>
<td class="cellalignment1075" headers="r9c1-t357 r1c2-t357">
<p>Dereferences the <code>Ref</code> and pins or fetches the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t357" headers="r1c1-t357">
<p><a href="#i1072659">operator==()</a></p>
</td>
<td class="cellalignment1075" headers="r10c1-t357 r1c2-t357">
<p>Checks if the <code>Ref</code> and the pointer refer to the same object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t357" headers="r1c1-t357">
<p><a href="#i1072669">operator!=()</a></p>
</td>
<td class="cellalignment1075" headers="r11c1-t357 r1c2-t357">
<p>Checks if the <code>Ref</code> and the pointer refer to different objects.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t357" headers="r1c1-t357">
<p><a href="#i1072681">operator=()</a></p>
</td>
<td class="cellalignment1075" headers="r12c1-t357 r1c2-t357">
<p>Assignment operator.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t357" headers="r1c1-t357">
<p><a href="#i1072691">ptr()</a></p>
</td>
<td class="cellalignment1075" headers="r13c1-t357 r1c2-t357">
<p>Returns a pointer to a <code>PObject</code>. Dereferences the <code>Ref</code> and pins or fetches the object if necessary.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t357" headers="r1c1-t357">
<p><a href="#i1093642">setLock()</a></p>
</td>
<td class="cellalignment1075" headers="r14c1-t357 r1c2-t357">
<p>Sets the lock option for the object referred from this.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t357" headers="r1c1-t357">
<p><a href="#i1130567">setNull()</a></p>
</td>
<td class="cellalignment1075" headers="r15c1-t357 r1c2-t357">
<p>Sets the Ref to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t357" headers="r1c1-t357">
<p><a href="#i1072700">setPrefetch()</a></p>
</td>
<td class="cellalignment1075" headers="r16c1-t357 r1c2-t357">
<p>Sets the prefetch options for complex object retrieval.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t357" headers="r1c1-t357">
<p><a href="#i1110487">unmarkDelete()</a></p>
</td>
<td class="cellalignment1075" headers="r17c1-t357 r1c2-t357">
<p>Unmarks for delete the object referred by this.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i1145818"></a><a id="LNCPP21413"></a>
<hr />
<h2 class="refsect2">Ref()</h2>
<p><code>Ref</code> object constructor.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of Ref() constructor" summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t358">Syntax</th>
<th class="cellalignment1074" id="r1c2-t358">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t358" headers="r1c1-t358">
<pre>
Ref();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t358 r1c2-t358">Creates a <code>NULL Ref.</code></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t358" headers="r1c1-t358">
<pre>
Ref(
   const Ref&lt;T&gt; &amp;src);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t358 r1c2-t358">Creates a copy of <code>Ref.</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of Ref() constructor" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t359">Parameter</th>
<th class="cellalignment1074" id="r1c2-t359">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t359" headers="r1c1-t359">
<pre>
src
</pre></td>
<td class="cellalignment1075" headers="r2c1-t359 r1c2-t359">The <code>Ref</code> that is being copied.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1095369"></a><a id="LNCPP21414"></a>
<hr />
<h2 class="refsect2">clear()</h2>
<p>This method clears the <code>Ref</code> object.</p>
<p class="subhead1"><a id="LNCPP21415"></a>Syntax</p>
<pre>
void clear();
</pre>
<a id="i1108233"></a><a id="LNCPP21416"></a>
<hr />
<h2 class="refsect2">getConnection()</h2>
<p>Returns the connection from which the <code>Ref</code> object was instantiated.</p>
<p class="subhead1"><a id="LNCPP21417"></a>Syntax</p>
<pre>
const Connection *getConnection() const;
</pre>
<a id="i1130541"></a><a id="LNCPP21418"></a>
<hr />
<h2 class="refsect2">isClear()</h2>
<p>This method checks if <code>Ref</code> object is cleared.</p>
<p class="subhead1"><a id="LNCPP21419"></a>Syntax</p>
<pre>
bool isClear() const;
</pre>
<a id="i1072606"></a><a id="LNCPP21420"></a>
<hr />
<h2 class="refsect2">isNull()</h2>
<p>This method tests whether the <code>Ref</code> object is <code>NULL</code>. If the <code>Ref</code> object is <code>NULL</code>, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21421"></a>Syntax</p>
<pre>
bool isNull() const;
</pre>
<a id="i1130503"></a><a id="LNCPP21422"></a>
<hr />
<h2 class="refsect2">markDelete()</h2>
<p>This method marks the referenced object as deleted.</p>
<p class="subhead1"><a id="LNCPP21423"></a>Syntax</p>
<pre>
void markDelete();
</pre>
<a id="i1072641"></a><a id="LNCPP21424"></a>
<hr />
<h2 class="refsect2">operator-&gt;()</h2>
<p>This method dereferences the <code>Ref</code> object and pins, or fetches the referenced object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the referenced object are set.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of operator-&gt;() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t360">Syntax</th>
<th class="cellalignment1074" id="r1c2-t360">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t360" headers="r1c1-t360">
<pre>
T *operator-&gt;();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t360 r1c2-t360">Dereferences and pins or fetches a non-<code>const</code> <code>Ref</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t360" headers="r1c1-t360">
<pre>
const T *operator-&gt;() const;
</pre></td>
<td class="cellalignment1075" headers="r3c1-t360 r1c2-t360">Dereferences and pins or fetches a <code>const</code> <code>Ref</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1072650"></a><a id="LNCPP21425"></a>
<hr />
<h2 class="refsect2">operator*()</h2>
<p>This method dereferences the <code>Ref</code> object and pins or fetches the referenced object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the referenced object are set. The object does not have to be deleted. Destructor would be automatically called when it goes out of scope.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of operator*() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t361">Syntax</th>
<th class="cellalignment1074" id="r1c2-t361">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t361" headers="r1c1-t361">
<pre>
T&amp; operator*();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t361 r1c2-t361">Dereferences and pins or fetches a non-<code>const</code> <code>Ref</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t361" headers="r1c1-t361">
<pre>
const T&amp; operator*() const;
</pre></td>
<td class="cellalignment1075" headers="r3c1-t361 r1c2-t361">Dereferences and pins or fetches a <code>const</code> <code>Ref</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1072659"></a><a id="LNCPP21426"></a>
<hr />
<h2 class="refsect2">operator==()</h2>
<p>This method tests whether two <code>Ref</code> objects are referencing the same object. If the <code>Ref</code> objects are referencing the same object, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21427"></a>Syntax</p>
<pre>
bool operator == (
   const Ref&lt;T&gt; &amp;ref) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator==() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t362">Parameter</th>
<th class="cellalignment1074" id="r1c2-t362">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t362" headers="r1c1-t362">
<pre>
ref
</pre></td>
<td class="cellalignment1075" headers="r2c1-t362 r1c2-t362">The Ref object of the object to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1072669"></a><a id="LNCPP21428"></a>
<hr />
<h2 class="refsect2">operator!=()</h2>
<p>This method tests whether two <code>Ref</code> objects are referencing the same object. If the <code>Ref</code> objects are not referencing the same object, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21429"></a>Syntax</p>
<pre>
bool operator!= (
   const Ref&lt;T&gt; &amp;ref) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator!=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t363">Parameter</th>
<th class="cellalignment1074" id="r1c2-t363">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t363" headers="r1c1-t363">
<pre>
ref
</pre></td>
<td class="cellalignment1075" headers="r2c1-t363 r1c2-t363">The <code>Ref</code> object of the object to be compared.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1072681"></a><a id="LNCPP21430"></a>
<hr />
<h2 class="refsect2">operator=()</h2>
<p>Assigns the <code>Ref</code> or the object to a <code>Ref</code>. For the first case, the <code>Ref</code>s are assigned and for the second case, the <code>Ref</code> is constructed from the object and then assigned.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of operator=() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t364">Syntax</th>
<th class="cellalignment1074" id="r1c2-t364">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t364" headers="r1c1-t364">
<pre>
Ref&lt;T&gt;&amp; operator=(
   const Ref&lt;T&gt; &amp;src);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t364 r1c2-t364">Assigns a <code>Ref</code> to a <code>Ref</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t364" headers="r1c1-t364">
<pre>
Ref&lt;T&gt;&amp; operator=(
   const T *)obj;
</pre></td>
<td class="cellalignment1075" headers="r3c1-t364 r1c2-t364">Assigns a <code>Ref</code> to an object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of operator=() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t365">Parameter</th>
<th class="cellalignment1074" id="r1c2-t365">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t365" headers="r1c1-t365">
<pre>
src
</pre></td>
<td class="cellalignment1075" headers="r2c1-t365 r1c2-t365">The source <code>Ref</code> object to be assigned.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t365" headers="r1c1-t365">
<pre>
obj
</pre></td>
<td class="cellalignment1075" headers="r3c1-t365 r1c2-t365">The source object pointer whose <code>Ref</code> object is to be assigned.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1072691"></a><a id="LNCPP21431"></a>
<hr />
<h2 class="refsect2">ptr()</h2>
<p>Returns a pointer to a <code>PObject</code>. This operator dereferences the <code>Ref</code> and pins or fetches the object if necessary. This might result in prefetching a graph of objects if prefetch attributes of the <code>Ref</code> are set.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of ptr() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t366">Syntax</th>
<th class="cellalignment1074" id="r1c2-t366">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t366" headers="r1c1-t366">
<pre>
T *ptr();
</pre></td>
<td class="cellalignment1075" headers="r2c1-t366 r1c2-t366">Returns a pointer of a non-<code>const</code> <code>Ref</code> object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t366" headers="r1c1-t366">
<pre>
const T *ptr() const;
</pre></td>
<td class="cellalignment1075" headers="r3c1-t366 r1c2-t366">Returns a pointer of a <code>const</code> <code>Ref</code> object.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1093642"></a><a id="LNCPP21432"></a>
<hr />
<h2 class="refsect2">setLock()</h2>
<p>This method specifies how the object should be locked when dereferenced.</p>
<p class="subhead1"><a id="LNCPP21433"></a>Syntax</p>
<pre>
void setLock(lockOptions);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setLock() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t367">Argument</th>
<th class="cellalignment1074" id="r1c2-t367">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t367" headers="r1c1-t367">
<pre>
lockOptions
</pre></td>
<td class="cellalignment1075" headers="r2c1-t367 r1c2-t367">The lock options as defined by <code>LockOptions</code> in <a href="#BBAJGIHJ">Table 13-35</a> .</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1130567"></a><a id="LNCPP21434"></a>
<hr />
<h2 class="refsect2">setNull()</h2>
<p>This method sets the <code>Ref</code> object to <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21435"></a>Syntax</p>
<pre>
void setNull();
</pre>
<a id="i1072700"></a><a id="LNCPP21436"></a>
<hr />
<h2 class="refsect2">setPrefetch()</h2>
<p>Sets the prefetching options for complex object retrieval. This method specifies depth up to which all objects reachable from this object through <code>Ref</code>s (transitive closure) should be prefetched. If only selected attribute types are to be prefetched, then the first version of the method must be used. This method specifies which Ref attributes of the object it refers to should be followed for prefetching of the objects (complex object retrieval) and how many levels deep those links should be followed.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setPrefetch() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t368">Syntax</th>
<th class="cellalignment1074" id="r1c2-t368">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t368" headers="r1c1-t368">
<pre>
void setPrefetch(
   const string &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t368 r1c2-t368">Sets the prefetching options for complex object retrieval, using type name and depth.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t368" headers="r1c1-t368">
<pre>
void setPrefetch(
   unsigned int depth);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t368 r1c2-t368">Sets the prefetching options for complex object retrieval, using depth only.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t368" headers="r1c1-t368">
<pre>
void setPrefetch(
   const string &amp;schName,
   const string &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t368 r1c2-t368">Sets the prefetching options for complex object retrieval, using schema, type name, and depth.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t368" headers="r1c1-t368">
<pre>
void setPrefetch(
   const UString &amp;schName,
   const UString &amp;typeName,
   unsigned int depth);
</pre></td>
<td class="cellalignment1075" headers="r5c1-t368 r1c2-t368">Sets the prefetching options for complex object retrieval, using schema, type name, and depth, and <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setPrefetch() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t369">Parameter</th>
<th class="cellalignment1074" id="r1c2-t369">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t369" headers="r1c1-t369">
<pre>
typeName
</pre></td>
<td class="cellalignment1075" headers="r2c1-t369 r1c2-t369">Type of the Ref attribute to be prefetched.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t369" headers="r1c1-t369">
<pre>
schName
</pre></td>
<td class="cellalignment1075" headers="r3c1-t369 r1c2-t369">Schema name of the Ref attribute to be prefetched.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t369" headers="r1c1-t369">
<pre>
depth
</pre></td>
<td class="cellalignment1075" headers="r4c1-t369 r1c2-t369">Depth level to which the links should be followed; can use <code>PrefetchOption</code> as defined in <a href="#BBAJGIHJ">Table 13-35</a> .</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1110487"></a><a id="LNCPP21437"></a>
<hr />
<h2 class="refsect2">unmarkDelete()</h2>
<p>This method unmarks the referred object as dirty and available for deletion.</p>
<p class="subhead1"><a id="LNCPP21438"></a>Syntax</p>
<pre>
void unmarkDelete();
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="reference024.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="reference026.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
