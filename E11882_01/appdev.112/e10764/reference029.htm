<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>StatelessConnectionPool Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="reference028.htm" title="Previous" type="text/html" />
<link rel="Next" href="reference030.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">49/54</span> <!-- End Header --><a id="i1155046"></a><a id="LNCPP1021"></a>
<hr />
<div class="refsect1">
<h1 class="refsect1">StatelessConnectionPool <a id="sthref893"></a><a id="sthref894"></a><a id="sthref895"></a>Class</h1>
<p>This class represents a pool of stateless, authenticated connections to the database.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21576"></a><a id="sthref896"></a><a id="BBAFHGEG"></a>Table 13-41 Enumerated Values Used by StatelessConnectionPool Class</p>
<table class="cellalignment1073" title="Enumerated Values Used by StatelessConnectionPool Class" summary="First column lists the attribute used by the class, the second column describes the options available to each attribute" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t430">Attribute</th>
<th class="cellalignment1074" id="r1c2-t430">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t430" headers="r1c1-t430">
<pre>
PoolType
</pre></td>
<td class="cellalignment1075" headers="r2c1-t430 r1c2-t430">
<ul>
<li>
<p><code>HETEROGENEOUS</code> is the default state; connections with different authentication contexts can be created in the same pool. This pool type also supports external authentication.</p>
</li>
<li>
<p><code>HOMOGENEOUS</code> indicates that all connections in the pool are authenticated with the username and password provided during pool creation. No proxy connections can be created. <code>minConn</code> and <code>incrConn</code> values are considered only in these <code>HOMOGENEOUS</code> pools.</p>
</li>
<li>
<p><code>NO_RLB</code> turns off run-time load balancing in the connection pool. Can be used with both <code>HETEROGENEOUS</code> and <code>HOMOGENEOUS</code> pools.</p>
</li>
<li>
<p><code>USES_EXT_AUTH</code> indicates that the connections in the pool support external authentication. Can only be used with <code>HETEROGENEOUS</code> pools.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t430" headers="r1c1-t430">
<pre>
BusyOption
</pre></td>
<td class="cellalignment1075" headers="r3c1-t430 r1c2-t430">
<ul>
<li>
<p><code>WAIT</code> indicates that the thread waits and blocks until the connection becomes free.</p>
</li>
<li>
<p><code>NOWAIT</code> throws and error.</p>
</li>
<li>
<p><code>FORCEGET</code> indicates that a new connection is created, even when maximum number of connections is opened and all are busy.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t430" headers="r1c1-t430">
<pre>
DestroyMode
</pre></td>
<td class="cellalignment1075" headers="r4c1-t430 r1c2-t430">
<ul>
<li>
<p><code>DEFAULT</code> indicates that if are still active busy connections in the pool, <code>ORA24422</code> error is thrown</p>
</li>
<li>
<p><code>SPD_FORCE</code> indicates that any busy connections in the pool are forcefully terminated and the pool is destroyed; the user loses memory corresponding to the number of connections forcefully terminated.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21577"></a><a id="sthref897"></a><a id="sthref898"></a>Table 13-42 Summary <a id="sthref899"></a><a id="sthref900"></a>of StatelessConnectionPool Methods</p>
<table class="cellalignment1073" title="Summary of StatelessConnectionPool Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t431">Method</th>
<th class="cellalignment1074" id="r1c2-t431">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t431" headers="r1c1-t431">
<p><a href="#CHEFGDCE">getAnyTaggedConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r2c1-t431 r1c2-t431">
<p>Returns a pointer to the connection object, without the restriction of a matching tag.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t431" headers="r1c1-t431">
<p><a href="#CHEFDDJF">getAnyTaggedProxyConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r3c1-t431 r1c2-t431">
<p>Returns a proxy connection from a connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t431" headers="r1c1-t431">
<p><a href="#CHEHHFHG">getBusyConnections()</a></p>
</td>
<td class="cellalignment1075" headers="r4c1-t431 r1c2-t431">
<p>Returns the number of busy connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t431" headers="r1c1-t431">
<p><a href="#CHEHAJIF">getBusyOption()</a></p>
</td>
<td class="cellalignment1075" headers="r5c1-t431 r1c2-t431">
<p>Returns the behavior of the stateless connection pool when all the connections in the pool are busy and the number of connections have reached maximum</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t431" headers="r1c1-t431">
<p><a href="#CHEJHBEH">getConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r6c1-t431 r1c2-t431">
<p>Returns a pointer to the <code>Connection</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t431" headers="r1c1-t431">
<p><a href="#CHEFEAHC">getIncrConnections()</a></p>
</td>
<td class="cellalignment1075" headers="r7c1-t431 r1c2-t431">
<p>Returns the number of incremental connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t431" headers="r1c1-t431">
<p><a href="#CHEJGJEJ">getMaxConnections()</a></p>
</td>
<td class="cellalignment1075" headers="r8c1-t431 r1c2-t431">
<p>Returns the maximum number of connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t431" headers="r1c1-t431">
<p><a href="#CHEGIBFD">getMinConnections()</a></p>
</td>
<td class="cellalignment1075" headers="r9c1-t431 r1c2-t431">
<p>Returns the minimum number of connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t431" headers="r1c1-t431">
<p><a href="#CHEECIBJ">getOpenConnections()</a></p>
</td>
<td class="cellalignment1075" headers="r10c1-t431 r1c2-t431">
<p>Returns the number of open connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t431" headers="r1c1-t431">
<p><a href="#CHEHEFEJ">getPoolName()</a></p>
</td>
<td class="cellalignment1075" headers="r11c1-t431 r1c2-t431">
<p>Returns the name of the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t431" headers="r1c1-t431">
<p><a href="#CHEEECCC">getProxyConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r12c1-t431 r1c2-t431">
<p>Returns a proxy connection from a connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t431" headers="r1c1-t431">
<p><a href="#CHEJIBJJ">getTimeOut()</a></p>
</td>
<td class="cellalignment1075" headers="r13c1-t431 r1c2-t431">
<p>Returns the timeout period of a connection in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t431" headers="r1c1-t431">
<p><a href="#CHEJHHBI">releaseConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r14c1-t431 r1c2-t431">
<p>Releases the connection back to the pool with an optional tag.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t431" headers="r1c1-t431">
<p><a href="#CHEHCCBA">setBusyOption()</a></p>
</td>
<td class="cellalignment1075" headers="r15c1-t431 r1c2-t431">
<p>Specifies the behavior of the stateless connection pool when:</p>
<ul>
<li>
<p>all the connections in the pool are busy, and</p>
</li>
<li>
<p>the number of connections have reached maximum.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t431" headers="r1c1-t431">
<p><a href="#CHEJDIBI">setPoolSize()</a></p>
</td>
<td class="cellalignment1075" headers="r16c1-t431 r1c2-t431">
<p>Sets the maximum, minimum, and incremental number of pooled connections for the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t431" headers="r1c1-t431">
<p><a href="#CHEIAGCH">setTimeOut()</a></p>
</td>
<td class="cellalignment1075" headers="r17c1-t431 r1c2-t431">
<p>Sets the timeout period of a connection in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t431" headers="r1c1-t431">
<p><a href="#CHEHDHHI">terminateConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r18c1-t431 r1c2-t431">
<p>Closes the connection and remove it from the pool.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CHEFGDCE"></a><a id="LNCPP21578"></a>
<hr />
<h2 class="refsect2">getAnyTaggedConnection()</h2>
<p>Returns a pointer to the connection object, without the restriction of a matching tag.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<p>During the execution of this call, the pool is first searched based on the tag provided. If a connection with the specified tag exists, it is returned to the user. If a matching connection is not available, an appropriately authenticated untagged connection (with a <code>NULL</code> tag) is returned. In cases where an undated connection is not free, an appropriately authenticated connection with a different tag is returned.</p>
<p>A <code>getTag()</code> call to the <code>Connection</code> verifies that the connection tag is received.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of getAnyTaggedConnection() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t432">Syntax</th>
<th class="cellalignment1074" id="r1c2-t432">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t432" headers="r1c1-t432">
<pre>
Connection *getAnyTaggedConnection(
   string &amp;tag="")=0;
</pre></td>
<td class="cellalignment1075" headers="r2c1-t432 r1c2-t432">Returns a pointer to the connection object from a homogeneous stateless connection pool, without the restriction of a matching tag; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t432" headers="r1c1-t432">
<pre>
Connection* getAnyTaggedConnection(
   const UString &amp;tag)=0; 
</pre></td>
<td class="cellalignment1075" headers="r3c1-t432 r1c2-t432">Returns a pointer to the connection object from a homogeneous stateless connection pool, without the restriction of a matching tag; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t432" headers="r1c1-t432">
<pre>
Connection *getAnyTaggedConnection(
   const string &amp;userNname,
   const string &amp;password,
   const string &amp;tag="")=0;
</pre></td>
<td class="cellalignment1075" headers="r4c1-t432 r1c2-t432">Returns a pointer to the connection object from a heterogeneous stateless connection pool, without the restriction of a matching tag; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t432" headers="r1c1-t432">
<pre>
Connection* getAnyTaggedConnection(
   const UString &amp;userName, 
   const UString &amp;Password, 
   const UString &amp;tag)=0 ;
</pre></td>
<td class="cellalignment1075" headers="r5c1-t432 r1c2-t432">Returns a pointer to the connection object from a heterogeneous stateless connection pool, without the restriction of a matching tag; <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getAnyTaggedConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t433">Parameter</th>
<th class="cellalignment1074" id="r1c2-t433">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t433" headers="r1c1-t433">
<pre>
userName
</pre></td>
<td class="cellalignment1075" headers="r2c1-t433 r1c2-t433">The database username</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t433" headers="r1c1-t433">
<pre>
password
</pre></td>
<td class="cellalignment1075" headers="r3c1-t433 r1c2-t433">The database password.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t433" headers="r1c1-t433">
<pre>
tag
</pre></td>
<td class="cellalignment1075" headers="r4c1-t433 r1c2-t433">User-defined type of connection requested. This parameter can be ignored if a default connection is requested.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEFDDJF"></a><a id="LNCPP21579"></a>
<hr />
<h2 class="refsect2">getAnyTaggedProxyConnection()</h2>
<p>Returns a proxy connection from a connection pool.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<p>During the execution of this call, the pool is first searched based on the tag provided. If a connection with the specified tag exists, it is returned to the user. If a matching connection is not available, an appropriately authenticated connection with a different tag is returned. In cases where an undated connection is not free, an appropriately authenticated connection with a different tag is returned.</p>
<p>Restrictions for matching the tag may be removed by passing an empty tag argument parameter.</p>
<p>A <code>getTag()</code> call to the connection verifies the connection tag received.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of getAnyTaggedProxyConnection() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t434">Syntax</th>
<th class="cellalignment1074" id="r1c2-t434">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t434" headers="r1c1-t434">
<pre>
Connection *getAnyTaggedProxyConnection(
   const string &amp;name,
   string roles[],
   unsigned int numRoles,
   const string tag="",
   Connection::ProxyType 
      proxyType=Connection::PROXY_DEFAULT);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t434 r1c2-t434">Get a proxy connection with role specifications from a connection pool; includes support for roles and <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t434" headers="r1c1-t434">
<pre>
Connection* getAnyTaggedProxyConnection(
   const UString &amp;name,
   string roles[],
   unsigned int numRoles,
   const UString &amp;tag,
   Connection::ProxyType 
      proxyType = Connection::PROXY_DEFAULT);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t434 r1c2-t434">Get a proxy connection with role specifications from a connection pool; includes support for roles and <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t434" headers="r1c1-t434">
<pre>
Connection *getAnyTaggedProxyConnection(
   const string &amp;name,
   const string tag="",
   Connection::ProxyType       proxyType=Connection::PROXY_DEFAULT);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t434 r1c2-t434">Get a proxy connection with role specifications from a connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t434" headers="r1c1-t434">
<pre>
Connection* getAnyTaggedProxyConnection(
   const UString &amp;name,
   const UString &amp;tag,
   Connection::ProxyType 
      proxyType = Connection::PROXY_DEFAULT);
</pre></td>
<td class="cellalignment1075" headers="r5c1-t434 r1c2-t434">Get a proxy connection within role specifications from the connection pool; <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getAnyTaggedProxyConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t435">Parameter</th>
<th class="cellalignment1074" id="r1c2-t435">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t435" headers="r1c1-t435">
<pre>
name
</pre></td>
<td class="cellalignment1075" headers="r2c1-t435 r1c2-t435">The username.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t435" headers="r1c1-t435">
<pre>
roles
</pre></td>
<td class="cellalignment1075" headers="r3c1-t435 r1c2-t435">The roles to activate on the database server</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t435" headers="r1c1-t435">
<pre>
numRoles
</pre></td>
<td class="cellalignment1075" headers="r4c1-t435 r1c2-t435">The number of roles to activate on the database server</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t435" headers="r1c1-t435">
<pre>
tag
</pre></td>
<td class="cellalignment1075" headers="r5c1-t435 r1c2-t435">User defined tag associated with the connection.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t435" headers="r1c1-t435">
<pre>
proxyType
</pre></td>
<td class="cellalignment1075" headers="r6c1-t435 r1c2-t435">The type of proxy authentication to perform; <code>ProxyType</code> is defined in <a href="reference010.htm#BBAEAHAH">Table 13-11</a>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEHHFHG"></a><a id="LNCPP21580"></a>
<hr />
<h2 class="refsect2">getBusyConnections()</h2>
<p>Returns the number of busy connections in the connection pool. When using database resident connection pooling, this is the number of persistent connections to the Connection Broker.</p>
<p class="subhead1"><a id="LNCPP21581"></a>Syntax</p>
<pre>
unsigned int getBusyConnections() const=0;
</pre>
<a id="CHEHAJIF"></a><a id="LNCPP21582"></a>
<hr />
<h2 class="refsect2">getBusyOption()</h2>
<p>Returns the behavior of the stateless connection pool when all the connections in the pool are busy, and when the number of connections have reached maximum. The return values are defined for <code>BusyOption</code> in <a href="#BBAFHGEG">Table 13-41</a>.</p>
<p class="subhead1"><a id="LNCPP21583"></a>Syntax</p>
<pre>
BusyOption getBusyOption()=0; 
 
</pre>
<a id="CHEJHBEH"></a><a id="LNCPP21584"></a>
<hr />
<h2 class="refsect2">getConnection()</h2>
<p>Returns a pointer to the connection object of a <code>StatelessConnectionPool</code>.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of getConnection() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t436">Syntax</th>
<th class="cellalignment1074" id="r1c2-t436">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection()=0;
</pre></td>
<td class="cellalignment1075" headers="r2c1-t436 r1c2-t436">Returns a connection that can be authenticated externally.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection(
   string &amp;tag="")=0;
</pre></td>
<td class="cellalignment1075" headers="r3c1-t436 r1c2-t436">Returns an authenticated connection, with a connection pool username and password; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t436" headers="r1c1-t436">
<pre>
Connection* getConnection(
   const UString &amp;tag)=0;
</pre></td>
<td class="cellalignment1075" headers="r4c1-t436 r1c2-t436">Returns an authenticated connection, with a connection pool username and password; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection(
   const string &amp;userName,
   const string &amp;password,
   const string &amp;tag="")=0;
</pre></td>
<td class="cellalignment1075" headers="r5c1-t436 r1c2-t436">Returns a pointer to the connection object from a heterogeneous stateless connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t436" headers="r1c1-t436">
<pre>
Connection* getConnection(
   const UString &amp;userName,
   const UString &amp;password,
   const UString &amp;tag)=0;
</pre></td>
<td class="cellalignment1075" headers="r6c1-t436 r1c2-t436">Returns a pointer to the connection object from a heterogeneous stateless connection pool; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection(
   const string &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r7c1-t436 r1c2-t436">Returns a pointer to the connection object from a database resident connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t436" headers="r1c1-t436">
<pre>
Connection* getConnection(
   const UString &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r8c1-t436 r1c2-t436">Returns a pointer to the connection object from a database resident connection pool; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection(
   const string &amp;userName,
   const string &amp;password,
   const string &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r9c1-t436 r1c2-t436">Returns a pointer to the connection object from a database resident connection pool; user name and password authentication; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t436" headers="r1c1-t436">
<pre>
Connection* getConnection(
   const UString &amp;userName,
   const UString &amp;password,
   const UString &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r10c1-t436 r1c2-t436">Returns a pointer to the connection object from a database resident connection pool; user name and password authentication; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t436" headers="r1c1-t436">
<pre>
Connection *getConnection(
   const string &amp;connectionClass,
   const Connection::Purity &amp;purity,
   const string &amp;tag)=0;
</pre></td>
<td class="cellalignment1075" headers="r11c1-t436 r1c2-t436">Returns a tagged connection object from a database resident connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t436" headers="r1c1-t436">
<pre>
Connection* getConnection(
   const UString &amp;connectionClass,
   const Connection::Purity &amp;purity,
   const UString &amp;tag)=0;
</pre></td>
<td class="cellalignment1075" headers="r12c1-t436 r1c2-t436">Returns a tagged connection object from a database resident connection pool; <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t437">Parameter</th>
<th class="cellalignment1074" id="r1c2-t437">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t437" headers="r1c1-t437">
<pre>
userName
</pre></td>
<td class="cellalignment1075" headers="r2c1-t437 r1c2-t437">The database username.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t437" headers="r1c1-t437">
<pre>
password
</pre></td>
<td class="cellalignment1075" headers="r3c1-t437 r1c2-t437">The database password.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t437" headers="r1c1-t437">
<pre>
tag
</pre></td>
<td class="cellalignment1075" headers="r4c1-t437 r1c2-t437">The user defined tag associated with the connection. During the call, the pool is first searched based on the tag provided. If a connection with the specified tag exists it is returned; otherwise a new connection is created and returned.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t437" headers="r1c1-t437">
<pre>
connectionClass
</pre></td>
<td class="cellalignment1075" headers="r5c1-t437 r1c2-t437">The class of connection used by database resident connection pool.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t437" headers="r1c1-t437">
<pre>
purity
</pre></td>
<td class="cellalignment1075" headers="r6c1-t437 r1c2-t437">The purity of connection used by database resident connection pool; either <code>SELF</code> or <code>NEW</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEFEAHC"></a><a id="LNCPP21585"></a>
<hr />
<h2 class="refsect2">getIncrConnections()</h2>
<p>Returns the number of incremental connections in the connection pool. This call is useful only in cases of homogeneous connection pools. When using database resident connection pooling, this is the number of persistent connections to the Connection Broker.</p>
<p class="subhead1"><a id="LNCPP21586"></a>Syntax</p>
<pre>
unsigned int getIncrConnections() const=0;
</pre>
<a id="CHEJGJEJ"></a><a id="LNCPP21587"></a>
<hr />
<h2 class="refsect2">getMaxConnections()</h2>
<p>Returns the maximum number of connections in the connection pool. When using database resident connection pooling, this is the number of persistent connections to the Connection Broker.</p>
<p class="subhead1"><a id="LNCPP21588"></a>Syntax</p>
<pre>
unsigned int getMaxConnections() const=0;
</pre>
<a id="CHEGIBFD"></a><a id="LNCPP21589"></a>
<hr />
<h2 class="refsect2">getMinConnections()</h2>
<p>Returns the minimum number of connections in the connection pool. When using database resident connection pooling, this is the number of persistent connections to the Connection Broker.</p>
<p class="subhead1"><a id="LNCPP21590"></a>Syntax</p>
<pre>
unsigned int getMinConnections() const=0;
</pre>
<a id="CHEECIBJ"></a><a id="LNCPP21591"></a>
<hr />
<h2 class="refsect2">getOpenConnections()</h2>
<p>Returns the number of open connections in the connection pool. When using database resident connection pooling, this is the number of persistent connections to the Connection Broker.</p>
<p class="subhead1"><a id="LNCPP21592"></a>Syntax</p>
<pre>
unsigned int getOpenConnections() const=0;
</pre>
<a id="CHEHEFEJ"></a><a id="LNCPP21593"></a>
<hr />
<h2 class="refsect2">getPoolName()</h2>
<p>Returns the name of the connection pool.</p>
<p class="subhead1"><a id="LNCPP21594"></a>Syntax</p>
<pre>
string getPoolName() const=0;
</pre>
<a id="CHEEECCC"></a><a id="LNCPP21595"></a>
<hr />
<h2 class="refsect2">getProxyConnection()</h2>
<p>Returns a proxy connection from a connection pool.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of getProxyConnection() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t438">Syntax</th>
<th class="cellalignment1074" id="r1c2-t438">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t438" headers="r1c1-t438">
<pre>
Connection *getProxyConnection(
   const string &amp;userName,
   string roles[],
   unsigned int numRoles,
   const string&amp; tag="",
   Connection::ProxyType 
      proxyType=Connection::PROXY_DEFAULT)=0;
</pre></td>
<td class="cellalignment1075" headers="r2c1-t438 r1c2-t438">Get a proxy connection with role specifications from a connection pool; support for roles and <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t438" headers="r1c1-t438">
<pre>
Connection* getProxyConnection(
   const UString &amp;userName,
   UString roles[], 
   unsigned int numRoles, 
   const UString &amp;tag, 
   Connection::ProxyType 
      proxyType = Connection::PROXY_DEFAULT);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t438 r1c2-t438">Get a proxy connection with role specifications from a connection pool; support for roles and <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t438" headers="r1c1-t438">
<pre>
Connection *getProxyConnection(
   const string &amp;userName,
   const string &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r4c1-t438 r1c2-t438">Get a proxy connection from a database resident connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t438" headers="r1c1-t438">
<pre>
Connection *getProxyConnection(
   const UString &amp;userName,
   const UString &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r5c1-t438 r1c2-t438">Get a proxy connection from a database resident connection pool; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t438" headers="r1c1-t438">
<pre>
Connection *getProxyConnection(
   const string &amp;userName,
   string roles[],
   unsigned int numRoles,
   const string &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r6c1-t438 r1c2-t438">Get a proxy connection with role specifications from a connection pool; support for roles and database resident connection pooling; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t438" headers="r1c1-t438">
<pre>
Connection* getProxyConnection(
   const UString &amp;userName,
   UString roles[], 
   unsigned int numRoles, 
   const UString &amp;connectionClass,
   const Connection::Purity &amp;purity)=0;
</pre></td>
<td class="cellalignment1075" headers="r7c1-t438 r1c2-t438">Get a proxy connection with role specifications from a connection pool; support for roles and database resident connection pooling; <code>UString</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t438" headers="r1c1-t438">
<pre>
Connection *getProxyConnection(
   const string &amp;userName,
   const string&amp; tag="",
   Connection::ProxyType 
      proxyType=Connection::PROXY_DEFAULT)=0;
</pre></td>
<td class="cellalignment1075" headers="r8c1-t438 r1c2-t438">Get a proxy connection without role specifications from a connection pool; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t438" headers="r1c1-t438">
<pre>
Connection* getProxyConnection(
   const UString &amp;userName,
   const UString &amp;tag,
   Connection::ProxyType 
   proxyType = Connection::PROXY_DEFAULT)
</pre></td>
<td class="cellalignment1075" headers="r9c1-t438 r1c2-t438">Get a proxy connection without role specifications from a connection pool; <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getProxyConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t439">Parameter</th>
<th class="cellalignment1074" id="r1c2-t439">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t439" headers="r1c1-t439">
<pre>
userName
</pre></td>
<td class="cellalignment1075" headers="r2c1-t439 r1c2-t439">The user name.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t439" headers="r1c1-t439">
<pre>
roles
</pre></td>
<td class="cellalignment1075" headers="r3c1-t439 r1c2-t439">The roles to activate on the database server.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t439" headers="r1c1-t439">
<pre>
numRoles
</pre></td>
<td class="cellalignment1075" headers="r4c1-t439 r1c2-t439">The number of roles to activate on the database server.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t439" headers="r1c1-t439">
<pre>
tag
</pre></td>
<td class="cellalignment1075" headers="r5c1-t439 r1c2-t439">The user defined tag associated with the connection. During the execution of this call, the pool is first searched based on the tag provided. If a connection with the specified tag exists it is returned; otherwise, a new connection is created and returned.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t439" headers="r1c1-t439">
<pre>
proxyType
</pre></td>
<td class="cellalignment1075" headers="r6c1-t439 r1c2-t439">The type of proxy authentication to perform; <code>ProxyType</code> is defined in <a href="reference010.htm#BBAEAHAH">Table 13-11</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t439" headers="r1c1-t439">
<pre>
connectionClass
</pre></td>
<td class="cellalignment1075" headers="r7c1-t439 r1c2-t439">The class of connection used by database resident connection pool.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t439" headers="r1c1-t439">
<pre>
purity
</pre></td>
<td class="cellalignment1075" headers="r8c1-t439 r1c2-t439">The purity of connection used by database resident connection pool; either <code>SELF</code> or <code>NEW</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CIAHGADF"></a><a id="LNCPP21596"></a>
<hr />
<h2 class="refsect2">getStmtCacheSize()</h2>
<p>Retrieves the size of the statement cache.</p>
<p class="subhead1"><a id="LNCPP21597"></a>Syntax</p>
<pre>
unsigned int getStmtCacheSize() const=0;
</pre>
<a id="CHEJIBJJ"></a><a id="LNCPP21598"></a>
<hr />
<h2 class="refsect2">getTimeOut()</h2>
<p>Returns the timeout period of a connection in the connection pool.</p>
<p class="subhead1"><a id="LNCPP21599"></a>Syntax</p>
<pre>
unsigned int getTimeOut() const=0;
</pre>
<a id="CHEJHHBI"></a><a id="LNCPP21600"></a>
<hr />
<h2 class="refsect2">releaseConnection()</h2>
<p>Releases the connection back to the pool with an optional tag.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of getAnyTaggedProxyConnection() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t440">Syntax</th>
<th class="cellalignment1074" id="r1c2-t440">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t440" headers="r1c1-t440">
<pre>
void releaseConnection(
   Connection *connection,
   const string&amp; tag="");
</pre></td>
<td class="cellalignment1075" headers="r2c1-t440 r1c2-t440">Support for <code>string</code> tag.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t440" headers="r1c1-t440">
<pre>
void releaseConnection(
   Connection *connection,
   const UString &amp;tag);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t440 r1c2-t440">Support for <code>UString</code> tag.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<pre>
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of releaseConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t441">Parameter</th>
<th class="cellalignment1074" id="r1c2-t441">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t441" headers="r1c1-t441">
<pre>
connection
</pre></td>
<td class="cellalignment1075" headers="r2c1-t441 r1c2-t441">The connection to be released.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t441" headers="r1c1-t441">
<pre>
tag
</pre></td>
<td class="cellalignment1075" headers="r3c1-t441 r1c2-t441">The user defined tag associated with the connection. The default of this parameter is <code>""</code>, which untags the connection.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEHCCBA"></a><a id="LNCPP21601"></a>
<hr />
<h2 class="refsect2">setBusyOption()</h2>
<p>Specifies the behavior of the stateless connection pool when all the connections in the pool are busy, and when the number of connections have reached maximum.</p>
<p class="subhead1"><a id="LNCPP21602"></a>Syntax</p>
<pre>
void setBusyOption( 
   BusyOption busyOption)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBusyOption() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t442">Parameter</th>
<th class="cellalignment1074" id="r1c2-t442">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t442" headers="r1c1-t442">
<pre>
busyOption
</pre></td>
<td class="cellalignment1075" headers="r2c1-t442 r1c2-t442">Valid values are defined in <code>BusyOption</code> in <a href="#BBAFHGEG">Table 13-41</a>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEJDIBI"></a><a id="LNCPP21603"></a>
<hr />
<h2 class="refsect2">setPoolSize()</h2>
<p>Sets the maximum, minimum, and incremental number of pooled connections for the connection pool.</p>
<p class="subhead1"><a id="LNCPP21604"></a>Syntax</p>
<pre>
void setPoolSize( 
   unsigned int maxConn=1,
   unsigned int minConn=0,
   unsigned int incrConn=1)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setPoolSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t443">Parameter</th>
<th class="cellalignment1074" id="r1c2-t443">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t443" headers="r1c1-t443">
<pre>
maxConn
</pre></td>
<td class="cellalignment1075" headers="r2c1-t443 r1c2-t443">The maximum number of connections in the connection pool.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t443" headers="r1c1-t443">
<pre>
minConn
</pre></td>
<td class="cellalignment1075" headers="r3c1-t443 r1c2-t443">The minimum number of connections, in homogeneous pools only.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t443" headers="r1c1-t443">
<pre>
incrConn
</pre></td>
<td class="cellalignment1075" headers="r4c1-t443 r1c2-t443">The incremental number of connections, in homogeneous pools only.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEIAGCH"></a><a id="LNCPP21605"></a>
<hr />
<h2 class="refsect2">setTimeOut()</h2>
<p>Sets the time out period of a connection in the connection pool. OCCI terminates any connections related to this connection pool that have been idle for longer than the timeout period specified.</p>
<p>If this attribute is not set, the least recently used connection is timed out when pool space is required. Oracle only checks for timed out connections when it releases a connection back to the pool.</p>
<p class="subhead1"><a id="LNCPP21606"></a>Syntax</p>
<pre>
void setTimeOut( 
   unsigned int connTimeOut=0)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setTimeOut() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t444">Parameter</th>
<th class="cellalignment1074" id="r1c2-t444">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t444" headers="r1c1-t444">
<pre>
connTimeOut
</pre></td>
<td class="cellalignment1075" headers="r2c1-t444 r1c2-t444">The time out period, given in seconds.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CIAICEFF"></a><a id="LNCPP21607"></a>
<hr />
<h2 class="refsect2">setStmtCacheSize()</h2>
<p>Enables or disables statement caching. A nonzero value enables statement caching, with a cache of specified size. A zero value disables caching.</p>
<p>If the user changes the cache size of individual connections and subsequently returns the connection back to the pool with a tag, the cache size does not revert to the one set for the pool. If the connection is untagged, the cache size is reset to equal the cache size specified for the pool.</p>
<p class="subhead1"><a id="LNCPP21608"></a>Syntax</p>
<pre>
void setStmtCacheSize(
   unsigned int cacheSize)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setStmtCacheSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t445">Parameter</th>
<th class="cellalignment1074" id="r1c2-t445">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t445" headers="r1c1-t445">
<pre>
cacheSize
</pre></td>
<td class="cellalignment1075" headers="r2c1-t445 r1c2-t445">The size of the statement cache</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEHDHHI"></a><a id="LNCPP21609"></a>
<hr />
<h2 class="refsect2">terminateConnection()</h2>
<p>Closes the connection and removes it from the pool.</p>
<p>This method works in an environment with enabled database resident connection pooling.</p>
<p class="subhead1"><a id="LNCPP21610"></a>Syntax</p>
<pre>
void terminateConnection( 
   Connection *connection)=0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of terminateConnection() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t446">Parameter</th>
<th class="cellalignment1074" id="r1c2-t446">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t446" headers="r1c1-t446">
<pre>
connection
</pre></td>
<td class="cellalignment1075" headers="r2c1-t446 r1c2-t446">The connection to be terminated</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="reference028.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="reference030.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
