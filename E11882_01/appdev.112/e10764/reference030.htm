<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Statement Class</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:52Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="reference029.htm" title="Previous" type="text/html" />
<link rel="Next" href="reference031.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">50/54</span> <!-- End Header --><a id="i1079052"></a><a id="LNCPP1022"></a>
<hr />
<div class="refsect1">
<h1 class="refsect1">Stateme<a id="sthref901"></a><a id="sthref902"></a><a id="sthref903"></a>nt Class</h1>
<p>A <code>Statement</code> object is used for executing SQL statements. The statement may be a query returning result set, or a non-query statement returning an update count. Non-query SQL can be insert, update, or delete statements. Non-query SQL statements can also be DML statements (such as create, grant, and so on) or stored procedure calls.</p>
<p>A query, insert / update / delete, or stored procedure call statements may have <code>IN</code> bind parameters, while a stored procedure call statement may have either <code>OUT</code> bind parameters or bind parameters that are both <code>IN</code> and <code>OUT</code>, referred to as <code>IN</code>/<code>OUT</code> parameters.</p>
<p>The <code>Statement</code> class methods are divided into three categories:</p>
<ul>
<li>
<p><code>Statement</code> methods applicable to all statements</p>
</li>
<li>
<p>Methods applicable to prepared statements with <code>IN</code> bind parameters</p>
</li>
<li>
<p>Methods applicable to callable statements with <code>OUT</code> or <code>IN/OUT</code> bind parameters.</p>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21611"></a><a id="sthref904"></a><a id="CIAEGJCC"></a>Table 13-43 Enumerated Values used by the Statement Class</p>
<table class="cellalignment1073" title="Enumerated Values used by the Statement Class" summary="The first column contains the constant, the second column hods its description" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t447">Attribute</th>
<th class="cellalignment1074" id="r1c2-t447">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t447" headers="r1c1-t447">
<pre>
Status
</pre></td>
<td class="cellalignment1075" headers="r2c1-t447 r1c2-t447">
<ul>
<li>
<p><code>NEEDS_STREAM_DATA</code> indicates that output <code>Streams</code> must be written for the streamed <code>IN</code> bind parameters. If there are multiple streamed parameters, call the <a href="#i1084015">getCurrentStreamParam()</a> method to find out the bind parameter that needs the stream. If the statement is executed iteratively, call <a href="#i1083876">getCurrentIteration()</a> to find the iteration for the stream that must to be written.</p>
</li>
<li>
<p><code>PREPARED</code> indicates that the <code>Statement</code> is set to a query.</p>
</li>
<li>
<p><code>RESULT_SET_AVAILABLE</code> indicates that the <a href="#i1084443">getResultSet()</a> method must be called to get the result set.</p>
</li>
<li>
<p><code>STREAM_DATA_AVAILABLE</code> indicates that the input <code>Streams</code> must be read for the streamed <code>OUT</code> bind parameters. If there are multiple streamed parameters, call the <a href="#i1084015">getCurrentStreamParam()</a> method to find out the bind parameter that needs the stream. If the statement is executed iteratively, call <a href="#i1083876">getCurrentIteration()</a> to find the iteration for the stream that must be read.</p>
</li>
<li>
<p><code>UPREPARED</code> indicates that the <code>Statement</code> object is not set to a query.</p>
</li>
<li>
<p><code>UPDATE_COUNT_AVAILABLE</code> indicates that the <a href="#i1084553">getUpdateCount()</a> method must be called to find out the update count.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1067">
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP21612"></a><a id="sthref905"></a><a id="sthref906"></a>Table 13-44 <a id="sthref907"></a><a id="sthref908"></a>Statement Methods</p>
<table class="cellalignment1073" title="Statement Methods " summary="First column lists methods; second column provides description of these methods." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t448">Method</th>
<th class="cellalignment1074" id="r1c2-t448">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t448" headers="r1c1-t448">
<p><a href="#i1094372">addIteration()</a></p>
</td>
<td class="cellalignment1075" headers="r2c1-t448 r1c2-t448">
<p>Adds an iteration for execution.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t448" headers="r1c1-t448">
<p><a href="#i1083658">closeResultSet()</a></p>
</td>
<td class="cellalignment1075" headers="r3c1-t448 r1c2-t448">
<p>Immediately releases a result set's database and OCCI resources instead of waiting for automatic release.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t448" headers="r1c1-t448">
<p><a href="#i1083695">closeStream()</a></p>
</td>
<td class="cellalignment1075" headers="r4c1-t448 r1c2-t448">
<p>Closes the stream specified by the parameter <code><span class="codeinlineitalic">stream</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t448" headers="r1c1-t448">
<p><a href="#CACDHDJF">disableCaching()</a></p>
</td>
<td class="cellalignment1075" headers="r5c1-t448 r1c2-t448">
<p>Disables statement caching.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t448" headers="r1c1-t448">
<p><a href="#i1104912">execute()</a></p>
</td>
<td class="cellalignment1075" headers="r6c1-t448 r1c2-t448">
<p>Runs the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t448" headers="r1c1-t448">
<p><a href="#i1073494">executeArrayUpdate()</a></p>
</td>
<td class="cellalignment1075" headers="r7c1-t448 r1c2-t448">
<p>Runs insert, update, and delete statements that use only the <code>setDataBuffer()</code> or stream interface for bind parameters.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t448" headers="r1c1-t448">
<p><a href="#i1083750">executeQuery()</a></p>
</td>
<td class="cellalignment1075" headers="r8c1-t448 r1c2-t448">
<p>Runs a SQL statement that returns a single <code>ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t448" headers="r1c1-t448">
<p><a href="#i1083751">executeUpdate()</a></p>
</td>
<td class="cellalignment1075" headers="r9c1-t448 r1c2-t448">
<p>Runs a SQL statement that does not return a <code>ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t448" headers="r1c1-t448">
<p><a href="#i1151491">getAutoCommit()</a></p>
</td>
<td class="cellalignment1075" headers="r10c1-t448 r1c2-t448">
<p>Returns the current auto-commit state.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t448" headers="r1c1-t448">
<p><a href="#CIAEJFBJ">getBatchErrorMode()</a></p>
</td>
<td class="cellalignment1075" headers="r11c1-t448 r1c2-t448">
<p>Returns the state of the batch error mode.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t448" headers="r1c1-t448">
<p><a href="#i1084194">getBDouble()</a></p>
</td>
<td class="cellalignment1075" headers="r12c1-t448 r1c2-t448">
<p>Returns the value of an IEEE754 <code>DOUBLE</code> as a <code>BDouble</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t448" headers="r1c1-t448">
<p><a href="#i1083783">getBfile()</a></p>
</td>
<td class="cellalignment1075" headers="r13c1-t448 r1c2-t448">
<p>Returns the value of a <code>BFILE</code> as a <code>Bfile</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t448" headers="r1c1-t448">
<p><a href="#i1153214">getBFloat()</a></p>
</td>
<td class="cellalignment1075" headers="r14c1-t448 r1c2-t448">
<p>Returns the value of a <code>IEEE754 FLOAT</code> as a <code>BFloat</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t448" headers="r1c1-t448">
<p><a href="#i1083796">getBlob()</a></p>
</td>
<td class="cellalignment1075" headers="r15c1-t448 r1c2-t448">
<p>Returns the value of a <code>BLOB</code> as a <code>Blob</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t448" headers="r1c1-t448">
<p><a href="#i1083825">getBytes()</a></p>
</td>
<td class="cellalignment1075" headers="r16c1-t448 r1c2-t448">
<p>Returns the value of a <code>SQL BINARY</code> or <code>VARBINARY</code> parameter as <code>Bytes</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t448" headers="r1c1-t448">
<p><a href="#i1083984">getCharSet()</a></p>
</td>
<td class="cellalignment1075" headers="r17c1-t448 r1c2-t448">
<p>Returns the characterset that is in effect for the specified parameter, as a <code>string</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t448" headers="r1c1-t448">
<p><a href="#BBAHBFIF">getCharSetUString()</a></p>
</td>
<td class="cellalignment1075" headers="r18c1-t448 r1c2-t448">
<p>Returns the characterset that is in effect for the specified parameter, as a <code>UString</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t448" headers="r1c1-t448">
<p><a href="#i1083992">getClob()</a></p>
</td>
<td class="cellalignment1075" headers="r19c1-t448 r1c2-t448">
<p>Returns the value of a <code>CLOB</code> as a <code>Clob</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t448" headers="r1c1-t448">
<p><a href="#i1105960">getConnection()</a></p>
</td>
<td class="cellalignment1075" headers="r20c1-t448 r1c2-t448">
<p>Returns the connection from which the <code>Statement</code> object was instantiated.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t448" headers="r1c1-t448">
<p><a href="#i1083876">getCurrentIteration()</a></p>
</td>
<td class="cellalignment1075" headers="r21c1-t448 r1c2-t448">
<p>Returns the iteration number of the current iteration that is being processed.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t448" headers="r1c1-t448">
<p><a href="#i1084007">getCurrentStreamIteration()</a></p>
</td>
<td class="cellalignment1075" headers="r22c1-t448 r1c2-t448">
<p>Returns the current iteration for which stream data is to be read or written.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t448" headers="r1c1-t448">
<p><a href="#i1084015">getCurrentStreamParam()</a></p>
</td>
<td class="cellalignment1075" headers="r23c1-t448 r1c2-t448">
<p>Returns the parameter index of the current output Stream that must be read or written.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t448" headers="r1c1-t448">
<p><a href="#i1084037">getCursor()</a></p>
</td>
<td class="cellalignment1075" headers="r24c1-t448 r1c2-t448">
<p>Returns the <code>REF CURSOR</code> value of an OUT parameter as a <code>ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t448" headers="r1c1-t448">
<p><a href="#i1084057">getDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment1075" headers="r25c1-t448 r1c2-t448">
<p>Returns whether data is in NCHAR character set.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r26c1-t448" headers="r1c1-t448">
<p><a href="#i1084078">getDate()</a></p>
</td>
<td class="cellalignment1075" headers="r26c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a <code>Date</code> object</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r27c1-t448" headers="r1c1-t448">
<p><a href="#i1084194">getBDouble()</a></p>
</td>
<td class="cellalignment1075" headers="r27c1-t448 r1c2-t448">
<p>Returns the value of a parameter as an IEEE754 double.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r28c1-t448" headers="r1c1-t448">
<p><a href="#i1153225">getDouble()</a></p>
</td>
<td class="cellalignment1075" headers="r28c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a C++ double.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r29c1-t448" headers="r1c1-t448">
<p><a href="#i1153214">getBFloat()</a></p>
</td>
<td class="cellalignment1075" headers="r29c1-t448 r1c2-t448">
<p>Returns the value of a parameter as an IEEE754 float.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r30c1-t448" headers="r1c1-t448">
<p><a href="#i1094380">getFloat()</a></p>
</td>
<td class="cellalignment1075" headers="r30c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a C++ float.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r31c1-t448" headers="r1c1-t448">
<p><a href="#i1084209">getInt()</a></p>
</td>
<td class="cellalignment1075" headers="r31c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a C++ int.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r32c1-t448" headers="r1c1-t448">
<p><a href="#i1084217">getIntervalDS()</a></p>
</td>
<td class="cellalignment1075" headers="r32c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a <code>IntervalDS</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r33c1-t448" headers="r1c1-t448">
<p><a href="#i1084225">getIntervalYM()</a></p>
</td>
<td class="cellalignment1075" headers="r33c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a <code>IntervalYM</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r34c1-t448" headers="r1c1-t448">
<p><a href="#i1084233">getMaxIterations()</a></p>
</td>
<td class="cellalignment1075" headers="r34c1-t448 r1c2-t448">
<p>Returns the current limit on maximum number of iterations.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r35c1-t448" headers="r1c1-t448">
<p><a href="#i1084241">getMaxParamSize()</a></p>
</td>
<td class="cellalignment1075" headers="r35c1-t448 r1c2-t448">
<p>Returns the current max parameter size limit.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r36c1-t448" headers="r1c1-t448">
<p><a href="#i1084411">getNumber()</a></p>
</td>
<td class="cellalignment1075" headers="r36c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a <code>Number</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r37c1-t448" headers="r1c1-t448">
<p><a href="#i1084419">getObject()</a></p>
</td>
<td class="cellalignment1075" headers="r37c1-t448 r1c2-t448">
<p>Returns the value of a parameter as a <code>PObject</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r38c1-t448" headers="r1c1-t448">
<p><a href="#i1084427">getOCIStatement()</a></p>
</td>
<td class="cellalignment1075" headers="r38c1-t448 r1c2-t448">
<p>Returns the OCI statement handle associated with the <code>Statement</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r39c1-t448" headers="r1c1-t448">
<p><a href="#i1084435">getRef()</a></p>
</td>
<td class="cellalignment1075" headers="r39c1-t448 r1c2-t448">
<p>Returns the value of a REF parameter as <code>RefAny</code></p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r40c1-t448" headers="r1c1-t448">
<p><a href="#i1084443">getResultSet()</a></p>
</td>
<td class="cellalignment1075" headers="r40c1-t448 r1c2-t448">
<p>Returns the current result as a <code>ResultSet</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r41c1-t448" headers="r1c1-t448">
<p><a href="#i1084451">getRowid()</a></p>
</td>
<td class="cellalignment1075" headers="r41c1-t448 r1c2-t448">
<p>Returns the row id parameter value as a <code>Bytes</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r42c1-t448" headers="r1c1-t448">
<p><a href="#i1094388">getSQL()</a></p>
</td>
<td class="cellalignment1075" headers="r42c1-t448 r1c2-t448">
<p>Returns the current SQL string associated with the <code>Statement</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r43c1-t448" headers="r1c1-t448">
<p><a href="#CHEFEDDF">getSQLUString()</a></p>
</td>
<td class="cellalignment1075" headers="r43c1-t448 r1c2-t448">
<p>Returns the current SQL string associated with the <code>Statement</code> object; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r44c1-t448" headers="r1c1-t448">
<p><a href="#i1084467">getStream()</a></p>
</td>
<td class="cellalignment1075" headers="r44c1-t448 r1c2-t448">
<p>Returns the value of the parameter as a stream.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r45c1-t448" headers="r1c1-t448">
<p><a href="#i1094396">getString()</a></p>
</td>
<td class="cellalignment1075" headers="r45c1-t448 r1c2-t448">
<p>Returns the value of the parameter as a string.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r46c1-t448" headers="r1c1-t448">
<p><a href="#i1084475">getTimestamp()</a></p>
</td>
<td class="cellalignment1075" headers="r46c1-t448 r1c2-t448">
<p>Returns the value of the parameter as a <code>Timestamp</code> object</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r47c1-t448" headers="r1c1-t448">
<p><a href="#i1084545">getUInt()</a></p>
</td>
<td class="cellalignment1075" headers="r47c1-t448 r1c2-t448">
<p>Returns the value of the parameter as a C++ unsigned int</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r48c1-t448" headers="r1c1-t448">
<p><a href="#i1084553">getUpdateCount()</a></p>
</td>
<td class="cellalignment1075" headers="r48c1-t448 r1c2-t448">
<p>Returns the current result as an update count for non-query statements.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r49c1-t448" headers="r1c1-t448">
<p><a href="#CHEEDJBD">getUString()</a></p>
</td>
<td class="cellalignment1075" headers="r49c1-t448 r1c2-t448">
<p>Returns the value of a <code>UString</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r50c1-t448" headers="r1c1-t448">
<p><a href="#CHEGHDBG">getVector()</a></p>
</td>
<td class="cellalignment1075" headers="r50c1-t448 r1c2-t448">
<p>Returns the specified parameter as a vector.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r51c1-t448" headers="r1c1-t448">
<p><a href="#CHEFFBDJ">getVectorOfRefs()</a></p>
</td>
<td class="cellalignment1075" headers="r51c1-t448 r1c2-t448">
<p>Returns the column in the current position as a vector of <code>REF</code>s.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r52c1-t448" headers="r1c1-t448">
<p><a href="#i1084569">isNull()</a></p>
</td>
<td class="cellalignment1075" headers="r52c1-t448 r1c2-t448">
<p>Checks whether the parameter is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r53c1-t448" headers="r1c1-t448">
<p><a href="#i1139303">isTruncated()</a></p>
</td>
<td class="cellalignment1075" headers="r53c1-t448 r1c2-t448">
<p>Checks whether the value is truncated.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r54c1-t448" headers="r1c1-t448">
<p><a href="#i1107094">preTruncationLength()</a></p>
</td>
<td class="cellalignment1075" headers="r54c1-t448 r1c2-t448">
<p>Returns the actual length of the parameter before truncation.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r55c1-t448" headers="r1c1-t448">
<p><a href="#i1104541">registerOutParam()</a></p>
</td>
<td class="cellalignment1075" headers="r55c1-t448 r1c2-t448">
<p>Registers the type and max size of the OUT parameter.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r56c1-t448" headers="r1c1-t448">
<p><a href="#i1094412">setAutoCommit()</a></p>
</td>
<td class="cellalignment1075" headers="r56c1-t448 r1c2-t448">
<p>Specifies auto commit mode.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r57c1-t448" headers="r1c1-t448">
<p><a href="#CIAJGDBG">setBatchErrorMode()</a></p>
</td>
<td class="cellalignment1075" headers="r57c1-t448 r1c2-t448">
<p>Enables or disables the batch error processing mode.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r58c1-t448" headers="r1c1-t448">
<p><a href="#i1153095">setBDouble()</a></p>
</td>
<td class="cellalignment1075" headers="r58c1-t448 r1c2-t448">
<p>Sets a parameter to an IEEE double value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r59c1-t448" headers="r1c1-t448">
<p><a href="#i1094420">setBfile()</a></p>
</td>
<td class="cellalignment1075" headers="r59c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Bfile</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r60c1-t448" headers="r1c1-t448">
<p><a href="#i1153923">setBFloat()</a></p>
</td>
<td class="cellalignment1075" headers="r60c1-t448 r1c2-t448">
<p>Sets a parameter to an IEEE float value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r61c1-t448" headers="r1c1-t448">
<p><a href="#i1087429">setBinaryStreamMode()</a></p>
</td>
<td class="cellalignment1075" headers="r61c1-t448 r1c2-t448">
<p>Specifies that a column is to be returned as a binary stream.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r62c1-t448" headers="r1c1-t448">
<p><a href="#i1094428">setBlob()</a></p>
</td>
<td class="cellalignment1075" headers="r62c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Blob</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r63c1-t448" headers="r1c1-t448">
<p><a href="#i1094436">setBytes()</a></p>
</td>
<td class="cellalignment1075" headers="r63c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Bytes</code> array.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r64c1-t448" headers="r1c1-t448">
<p><a href="#i1088316">setCharacterStreamMode()</a></p>
</td>
<td class="cellalignment1075" headers="r64c1-t448 r1c2-t448">
<p>Specifies that a column is to be returned as a character stream.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r65c1-t448" headers="r1c1-t448">
<p><a href="reference027.htm#i1082532">setCharSet()</a></p>
</td>
<td class="cellalignment1075" headers="r65c1-t448 r1c2-t448">
<p>Specifies the characterset as a <code>string</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r66c1-t448" headers="r1c1-t448">
<p><a href="reference027.htm#CACCCDFG">setCharSetUString()</a></p>
</td>
<td class="cellalignment1075" headers="r66c1-t448 r1c2-t448">
<p>Specifies the character set as a <code>UString</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r67c1-t448" headers="r1c1-t448">
<p><a href="#i1084883">setClob()</a></p>
</td>
<td class="cellalignment1075" headers="r67c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Clob</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r68c1-t448" headers="r1c1-t448">
<p><a href="#i1084891">setDate()</a></p>
</td>
<td class="cellalignment1075" headers="r68c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Date</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r69c1-t448" headers="r1c1-t448">
<p><a href="#i1086347">setDatabaseNCHARParam()</a></p>
</td>
<td class="cellalignment1075" headers="r69c1-t448 r1c2-t448">
<p>Sets to true if the data is to be in the NCHAR character set of the database; set to false to restore the default.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r70c1-t448" headers="r1c1-t448">
<p><a href="#i1086355">setDataBuffer()</a></p>
</td>
<td class="cellalignment1075" headers="r70c1-t448 r1c2-t448">
<p>Specifies a data buffer where data would be available for reading or writing.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r71c1-t448" headers="r1c1-t448">
<p><a href="#i1086363">setDataBufferArray()</a></p>
</td>
<td class="cellalignment1075" headers="r71c1-t448 r1c2-t448">
<p>Specifies an array of data buffers where data would be available for reading or writing.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r72c1-t448" headers="r1c1-t448">
<p><a href="#i1086371">setDouble()</a></p>
</td>
<td class="cellalignment1075" headers="r72c1-t448 r1c2-t448">
<p>Sets a parameter to a C++ double value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r73c1-t448" headers="r1c1-t448">
<p><a href="#i1086379">setErrorOnNull()</a></p>
</td>
<td class="cellalignment1075" headers="r73c1-t448 r1c2-t448">
<p>Enables Or Disables exceptions for reading of <code>NULL</code> values.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r74c1-t448" headers="r1c1-t448">
<p><a href="#i1107128">setErrorOnTruncate()</a></p>
</td>
<td class="cellalignment1075" headers="r74c1-t448 r1c2-t448">
<p>Enables Or Disables exception when truncation occurs.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r75c1-t448" headers="r1c1-t448">
<p><a href="#i1086737">setFloat()</a></p>
</td>
<td class="cellalignment1075" headers="r75c1-t448 r1c2-t448">
<p>Sets a parameter to a C++ float value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r76c1-t448" headers="r1c1-t448">
<p><a href="#i1086745">setInt()</a></p>
</td>
<td class="cellalignment1075" headers="r76c1-t448 r1c2-t448">
<p>Sets a parameter to a C++ int value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r77c1-t448" headers="r1c1-t448">
<p><a href="#i1086753">setIntervalDS()</a></p>
</td>
<td class="cellalignment1075" headers="r77c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>IntervalDS</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r78c1-t448" headers="r1c1-t448">
<p><a href="#i1086761">setIntervalYM()</a></p>
</td>
<td class="cellalignment1075" headers="r78c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>IntervalYM</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r79c1-t448" headers="r1c1-t448">
<p><a href="#i1086769">setMaxIterations()</a></p>
</td>
<td class="cellalignment1075" headers="r79c1-t448 r1c2-t448">
<p>Sets the maximum number of invocations that area made for the DML statement.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r80c1-t448" headers="r1c1-t448">
<p><a href="#i1086777">setMaxParamSize()</a></p>
</td>
<td class="cellalignment1075" headers="r80c1-t448 r1c2-t448">
<p>Sets the maximum amount of data that can sent or returned from the parameter.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r81c1-t448" headers="r1c1-t448">
<p><a href="#i1086785">setNull()</a></p>
</td>
<td class="cellalignment1075" headers="r81c1-t448 r1c2-t448">
<p>Sets a parameter to SQL <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r82c1-t448" headers="r1c1-t448">
<p><a href="#i1086793">setNumber()</a></p>
</td>
<td class="cellalignment1075" headers="r82c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Number</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r83c1-t448" headers="r1c1-t448">
<p><a href="#i1086801">setObject()</a></p>
</td>
<td class="cellalignment1075" headers="r83c1-t448 r1c2-t448">
<p>Sets the value of a parameter using an object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r84c1-t448" headers="r1c1-t448">
<p><a href="#i1086809">setPrefetchMemorySize()</a></p>
</td>
<td class="cellalignment1075" headers="r84c1-t448 r1c2-t448">
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r85c1-t448" headers="r1c1-t448">
<p><a href="#i1086817">setPrefetchRowCount()</a></p>
</td>
<td class="cellalignment1075" headers="r85c1-t448 r1c2-t448">
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r86c1-t448" headers="r1c1-t448">
<p><a href="#BBAGEGCE">setRef()</a></p>
</td>
<td class="cellalignment1075" headers="r86c1-t448 r1c2-t448">
<p>Sets the value of a parameter to a reference.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r87c1-t448" headers="r1c1-t448">
<p><a href="#i1086833">setRowid()</a></p>
</td>
<td class="cellalignment1075" headers="r87c1-t448 r1c2-t448">
<p>Sets a row id bytes array for a bind position.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r88c1-t448" headers="r1c1-t448">
<p><a href="#i1086841">setSQL()</a></p>
</td>
<td class="cellalignment1075" headers="r88c1-t448 r1c2-t448">
<p>Associates new SQL string with <code>Statement</code> object.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r89c1-t448" headers="r1c1-t448">
<p><a href="#CHECDFDD">setSQLUString()</a></p>
</td>
<td class="cellalignment1075" headers="r89c1-t448 r1c2-t448">
<p>Associates new SQL string with <code>Statement</code> object; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r90c1-t448" headers="r1c1-t448">
<p><a href="#i1073503">setString()</a></p>
</td>
<td class="cellalignment1075" headers="r90c1-t448 r1c2-t448">
<p>Sets a parameter for a specified index.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r91c1-t448" headers="r1c1-t448">
<p><a href="#i1086856">setTimestamp()</a></p>
</td>
<td class="cellalignment1075" headers="r91c1-t448 r1c2-t448">
<p>Sets a parameter to a <code>Timestamp</code> value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r92c1-t448" headers="r1c1-t448">
<p><a href="#i1086864">setUInt()</a></p>
</td>
<td class="cellalignment1075" headers="r92c1-t448 r1c2-t448">
<p>Sets a parameter to a C++ unsigned int value.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r93c1-t448" headers="r1c1-t448">
<p><a href="#CHEBAADJ">setUString()</a></p>
</td>
<td class="cellalignment1075" headers="r93c1-t448 r1c2-t448">
<p>Sets a parameter for a specified index; globalization enabled.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r94c1-t448" headers="r1c1-t448">
<p><a href="#i1107158">setVector()</a></p>
</td>
<td class="cellalignment1075" headers="r94c1-t448 r1c2-t448">
<p>Sets a parameter to a vector of unsigned int.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r95c1-t448" headers="r1c1-t448">
<p><a href="#i1152343">setVectorOfRefs()</a></p>
</td>
<td class="cellalignment1075" headers="r95c1-t448 r1c2-t448">
<p>Sets a parameter to a vector; is necessary when the type is a collection of <code>REF</code>s.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r96c1-t448" headers="r1c1-t448">
<p><a href="#i1086880">status()</a></p>
</td>
<td class="cellalignment1075" headers="r96c1-t448 r1c2-t448">
<p>Returns the current status of the statement. This is useful when there is streamed data to be written.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="i1094372"></a><a id="LNCPP21613"></a>
<hr />
<h2 class="refsect2">addIteration()</h2>
<p>After specifying set parameters, an iteration is added for execution.</p>
<p class="subhead1"><a id="LNCPP21614"></a>Syntax</p>
<pre>
void addIteration();
</pre>
<a id="i1083658"></a><a id="LNCPP21615"></a>
<hr />
<h2 class="refsect2">closeResultSet()</h2>
<p>Immediately releases the specified <code>resultSet</code>'s database and OCCI resources when the result set is not needed.</p>
<p class="subhead1"><a id="LNCPP21616"></a>Syntax</p>
<pre>
void closeResultSet(
   ResultSet *resultSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of closeResultSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t449">Parameter</th>
<th class="cellalignment1074" id="r1c2-t449">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t449" headers="r1c1-t449">
<pre>
resultSet
</pre></td>
<td class="cellalignment1075" headers="r2c1-t449 r1c2-t449">The result set to be closed; may be a result of <a href="#i1084443">getResultSet()</a>, <a href="#i1083750">executeQuery()</a>, or <a href="#i1084037">getCursor()</a> calls on the current statement, or by a <a href="#i1084037">getCursor()</a> call of another result set on the same statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083695"></a><a id="LNCPP21617"></a>
<hr />
<h2 class="refsect2">closeStream()</h2>
<p>Closes the stream specified by the parameter <code>stream</code>.</p>
<p class="subhead1"><a id="LNCPP21618"></a>Syntax</p>
<pre>
void closeStream(
   Stream *stream); 
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of closeStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t450">Parameter</th>
<th class="cellalignment1074" id="r1c2-t450">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t450" headers="r1c1-t450">
<pre>
stream
</pre></td>
<td class="cellalignment1075" headers="r2c1-t450 r1c2-t450">The stream to be closed.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CACDHDJF"></a><a id="LNCPP21619"></a>
<hr />
<h2 class="refsect2">disableCaching()</h2>
<p>Disables statement caching. Used if a user wants to destroy a statement instead of caching it. Effective only if statement caching is enabled.</p>
<p class="subhead1"><a id="LNCPP21620"></a>Syntax</p>
<pre>
void disableCaching();
</pre>
<a id="i1104912"></a><a id="LNCPP21621"></a>
<hr />
<h2 class="refsect2">execute()</h2>
<p>Executes an SQL statement that may return either a result set or an update count. The statement may have read-able streams which may have to be written, in which case the results of the execution may not be readily available. The returned value <code>Status</code> is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p>If output streams are used for <code>OUT</code> bind variables, they must be completely read in order. The <a href="#i1084015">getCurrentStreamParam()</a> method would indicate which stream must be read. Similarly, <a href="#i1083876">getCurrentIteration()</a> would indicate the iteration for which data is available.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of execute() constructor." summary="First column lists versions of the constructor; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t451">Syntax</th>
<th class="cellalignment1074" id="r1c2-t451">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t451" headers="r1c1-t451">
<pre>
Status execute(
   const string &amp;sql="");
</pre></td>
<td class="cellalignment1075" headers="r2c1-t451 r1c2-t451">Executes the SQL Statement.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t451" headers="r1c1-t451">
<pre>
Status execute(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t451 r1c2-t451">Executes the SQL Statement; globalization enabled.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of execute() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t452">Parameter</th>
<th class="cellalignment1074" id="r1c2-t452">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t452" headers="r1c1-t452">
<pre>
sql
</pre></td>
<td class="cellalignment1075" headers="r2c1-t452 r1c2-t452">The SQL statement to be executed. This can be <code>NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1073494"></a><a id="LNCPP21622"></a>
<hr />
<h2 class="refsect2">executeArrayUpdate()</h2>
<p>Executes insert/update/delete statements which use only the <a href="#i1086355">setDataBuffer()</a> or stream interface for bind parameters. The bind parameters must be arrays of size <code>arrayLength</code> parameter. The statement may have writeable streams which may have to be written. The returned value <code>Status</code> is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p>If output streams are used for <code>OUT</code> bind variables, they must be completely read in order. The <a href="#i1084015">getCurrentStreamParam()</a> method would indicate which stream must be read. Similarly, <a href="#i1083876">getCurrentIteration()</a> would indicate the iteration for which data is available.</p>
<p>Note that you cannot perform array executes for queries or callable statements.</p>
<p class="subhead1"><a id="LNCPP21623"></a>Syntax</p>
<pre>
Status executeArrayUpdate(
   unsigned int arrayLength);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of executeArrayUpdate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t453">Parameter</th>
<th class="cellalignment1074" id="r1c2-t453">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t453" headers="r1c1-t453">
<pre>
arrayLength
</pre></td>
<td class="cellalignment1075" headers="r2c1-t453 r1c2-t453">The number of elements provided in each buffer of bind variables.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083750"></a><a id="LNCPP21624"></a>
<hr />
<h2 class="refsect2">executeQuery()</h2>
<p>Runs a SQL statement that returns a <code>ResultSet</code>. Should not be called for a statement which is not a query, has streamed parameters. Returns a <code>ResultSet</code> that contains the data produced by the query.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of executeQuery() method." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t454">Syntax</th>
<th class="cellalignment1074" id="r1c2-t454">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t454" headers="r1c1-t454">
<pre>
ResultSet* executeQuery(
   const string &amp;sql="");
</pre></td>
<td class="cellalignment1075" headers="r2c1-t454 r1c2-t454">Executes the SQL Statement that returns a <code>ResultSet</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t454" headers="r1c1-t454">
<pre>
ResultSet* executeQuery(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t454 r1c2-t454">Executes the SQL Statement that returns a <code>ResultSet;</code> globalization enabled.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of executeQuery() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t455">Parameter</th>
<th class="cellalignment1074" id="r1c2-t455">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t455" headers="r1c1-t455">
<pre>
sql
</pre></td>
<td class="cellalignment1075" headers="r2c1-t455 r1c2-t455">The SQL statement to be executed. This can be <code>NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083751"></a><a id="LNCPP21625"></a>
<hr />
<h2 class="refsect2">executeUpdate()</h2>
<p>Executes a non-query statement such as a SQL <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code> statement, a DDL statement such as <code>CREATE</code>/<code>ALTER</code> and so on, or a stored procedure call. Returns either the row count for <code>INSERT</code>, <code>UPDATE</code> or <code>DELETE</code> or <code>0</code> for SQL statements that return nothing.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of executeQuery() method." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t456">Syntax</th>
<th class="cellalignment1074" id="r1c2-t456">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t456" headers="r1c1-t456">
<pre>
unsigned int executeUpdate(
   const string &amp;sql="");
</pre></td>
<td class="cellalignment1075" headers="r2c1-t456 r1c2-t456">Executes a non-query statement.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t456" headers="r1c1-t456">
<pre>
unsigned int executeUpdate(
   const UString &amp;sql);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t456 r1c2-t456">Executes a non-query statement; globalization enabled.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of executeUpdate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t457">Parameter</th>
<th class="cellalignment1074" id="r1c2-t457">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t457" headers="r1c1-t457">
<pre>
sql
</pre></td>
<td class="cellalignment1075" headers="r2c1-t457 r1c2-t457">The SQL statement to be executed. This can be <code>NULL</code> if the <a href="#i1073494">executeArrayUpdate()</a> method was used to associate the sql with the statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1151491"></a><a id="LNCPP21626"></a>
<hr />
<h2 class="refsect2">getAutoCommit()</h2>
<p>Returns the current auto-commit state.</p>
<p class="subhead1"><a id="LNCPP21627"></a>Syntax</p>
<pre>
bool getAutoCommit() const;
</pre>
<a id="CIAEJFBJ"></a><a id="LNCPP21628"></a>
<hr />
<h2 class="refsect2">getBatchErrorMode()</h2>
<p>Returns the state of the batch error mode; <code>TRUE</code> if the batch error mode is enabled, <code>FALSE</code> otherwise.</p>
<p class="subhead1"><a id="LNCPP21629"></a>Syntax</p>
<pre>
bool getBatchErrorMode() const;
</pre>
<a id="i1084194"></a><a id="LNCPP21630"></a>
<hr />
<h2 class="refsect2">getBDouble()</h2>
<p>Returns the value of an IEEE754 <code>DOUBLE</code> column, which has been defined as an <code>OUT</code> bind. If the value is SQL <code>NULL</code>, the result is <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21631"></a>Syntax</p>
<pre>
BDouble getBDouble(
   unsigned int paramIndex) = 0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getBDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t458">Parameter</th>
<th class="cellalignment1074" id="r1c2-t458">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t458" headers="r1c1-t458">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t458 r1c2-t458">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083783"></a><a id="LNCPP21632"></a>
<hr />
<h2 class="refsect2">getBfile()</h2>
<p>Returns the value of a <code>BFILE</code> parameter as a <code>Bfile</code> object.</p>
<p class="subhead1"><a id="LNCPP21633"></a>Syntax</p>
<pre>
Bfile getBfile(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t459">Parameter</th>
<th class="cellalignment1074" id="r1c2-t459">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t459" headers="r1c1-t459">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t459 r1c2-t459">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1153214"></a><a id="LNCPP21634"></a>
<hr />
<h2 class="refsect2">getBFloat()</h2>
<p>Gets the value of an IEEE754 <code>FLOAT</code> column, which has been defined as an <code>OUT</code> bind. If the value is SQL <code>NULL</code>, the result is <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21635"></a>Syntax</p>
<pre>
BFloat getBFloat(
   unsigned int paramIndex) = 0;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getBFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t460">Parameter</th>
<th class="cellalignment1074" id="r1c2-t460">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t460" headers="r1c1-t460">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t460 r1c2-t460">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083796"></a><a id="LNCPP21636"></a>
<hr />
<h2 class="refsect2">getBlob()</h2>
<p>Returns the value of a <code>BLOB</code> parameter as a <code>Blob</code>.</p>
<p class="subhead1"><a id="LNCPP21637"></a>Syntax</p>
<pre>
Blob getBlob(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getBlob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t461">Parameter</th>
<th class="cellalignment1074" id="r1c2-t461">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t461" headers="r1c1-t461">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t461 r1c2-t461">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083825"></a><a id="LNCPP21638"></a>
<hr />
<h2 class="refsect2">getBytes()</h2>
<p>Returns the value of n SQL <code>BINARY</code> or <code>VARBINARY</code> parameter as <code>Bytes</code>; if the value is SQL <code>NULL</code>, the result is <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21639"></a>Syntax</p>
<pre>
Bytes getBytes(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t462">Parameter</th>
<th class="cellalignment1074" id="r1c2-t462">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t462" headers="r1c1-t462">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t462 r1c2-t462">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083984"></a><a id="LNCPP21640"></a>
<hr />
<h2 class="refsect2">getCharSet()</h2>
<p>Returns the characterset that is in effect for the specified parameter, as a <code>string</code>.</p>
<p class="subhead1"><a id="LNCPP21641"></a>Syntax</p>
<pre>
string getCharSet(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t463">Parameter</th>
<th class="cellalignment1074" id="r1c2-t463">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t463" headers="r1c1-t463">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t463 r1c2-t463">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="BBAHBFIF"></a><a id="LNCPP21642"></a>
<hr />
<h2 class="refsect2">getCharSetUString()</h2>
<p>Returns the character set that is in effect for the specified parameter, as a <code>UString</code>.</p>
<p class="subhead1"><a id="LNCPP21643"></a>Syntax</p>
<pre>
UString getCharSetUString(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t464">Parameter</th>
<th class="cellalignment1074" id="r1c2-t464">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t464" headers="r1c1-t464">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t464 r1c2-t464">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1083992"></a><a id="LNCPP21644"></a>
<hr />
<h2 class="refsect2">getClob()</h2>
<p>Get the value of a <code>CLOB</code> parameter as a <code>Clob</code>. Returns the parameter value.</p>
<p class="subhead1"><a id="LNCPP21645"></a>Syntax</p>
<pre>
Clob getClob(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getClob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t465">Parameter</th>
<th class="cellalignment1074" id="r1c2-t465">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t465" headers="r1c1-t465">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t465 r1c2-t465">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1105960"></a><a id="LNCPP21646"></a>
<hr />
<h2 class="refsect2">getConnection()</h2>
<p>Returns the connection from which the <code>Statement</code> object was instantiated.</p>
<p class="subhead1"><a id="LNCPP21647"></a>Syntax</p>
<pre>
Connection* getConnection() const;
</pre>
<a id="i1083876"></a><a id="LNCPP21648"></a>
<hr />
<h2 class="refsect2">getCurrentIteration()</h2>
<p>If the prepared statement has any output <code>Streams</code>, this method returns the current iteration of the statement that is being processed by OCCI. If this method is called after all the invocations in the set of iterations has been processed, it returns <code>0</code>. Returns the iteration number of the current iteration that is being processed. The first iteration is numbered <code>1</code> and so on. If the statement has finished execution, a <code>0</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21649"></a>Syntax</p>
<pre>
unsigned int getCurrentIteration() const;
</pre>
<a id="i1084007"></a><a id="LNCPP21650"></a>
<hr />
<h2 class="refsect2">getCurrentStreamIteration()</h2>
<p>Returns the current parameter stream for which data is available.</p>
<p class="subhead1"><a id="LNCPP21651"></a>Syntax</p>
<pre>
unsigned int getCurrentStreamIteration() const;
</pre>
<a id="i1084015"></a><a id="LNCPP21652"></a>
<hr />
<h2 class="refsect2">getCurrentStreamParam()</h2>
<p>Returns the parameter index of the current output <code>Stream</code> parameter that must be written. If the prepared statement has any output <code>Stream</code> parameters, this method returns the parameter index of the current output <code>Stream</code> that must be written. If no output <code>Stream</code> must be written, or there are no output <code>Stream</code> parameters in the prepared statement, this method returns <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21653"></a>Syntax</p>
<pre>
unsigned int getCurrentStreamParam() const;
</pre>
<a id="i1084037"></a><a id="LNCPP21654"></a>
<hr />
<h2 class="refsect2">getCursor()</h2>
<p>Gets the <code>REF</code> <code>CURSOR</code> value of an <code>OUT</code> parameter as a <code>ResultSet</code>. Data can be fetched from this result set. The <code>OUT</code> parameter must be registered as <code>CURSOR</code> with the <a href="#i1104541">registerOutParam()</a> method. Returns a <code>ResultSet</code> for the <code>OUT</code> parameter value.</p>
<p>Note that if there are multiple <code>REF</code> <code>CURSORs</code> being returned due to a batched call, data from each cursor must be completely fetched before retrieving the next <code>REF</code> <code>CURSOR</code> and starting fetch on it.</p>
<p class="subhead1"><a id="LNCPP21655"></a>Syntax</p>
<pre>
ResultSet * getCursor(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getCursor() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t466">Parameter</th>
<th class="cellalignment1074" id="r1c2-t466">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t466" headers="r1c1-t466">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t466 r1c2-t466">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084057"></a><a id="LNCPP21656"></a>
<hr />
<h2 class="refsect2">getDatabaseNCHARParam()</h2>
<p>Returns whether data is in <code>NCHAR</code> character set or not.</p>
<p class="subhead1"><a id="LNCPP21657"></a>Syntax</p>
<pre>
bool getDatabaseNCHARParam(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getDatabaseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t467">Parameter</th>
<th class="cellalignment1074" id="r1c2-t467">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t467" headers="r1c1-t467">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t467 r1c2-t467">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084078"></a><a id="LNCPP21658"></a>
<hr />
<h2 class="refsect2">getDate()</h2>
<p>Get the value of a SQL <code>DATE</code> parameter as a <code>Date</code> object. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21659"></a>Syntax</p>
<pre>
Date getDate(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getDate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t468">Parameter</th>
<th class="cellalignment1074" id="r1c2-t468">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t468" headers="r1c1-t468">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t468 r1c2-t468">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1153225"></a><a id="LNCPP21660"></a>
<hr />
<h2 class="refsect2">getDouble()</h2>
<p>Get the value of a <code>DOUBLE</code> parameter as a C++ <code>double</code>. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is 0.</p>
<p class="subhead1"><a id="LNCPP21661"></a>Syntax</p>
<pre>
double getDouble(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t469">Parameter</th>
<th class="cellalignment1074" id="r1c2-t469">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t469" headers="r1c1-t469">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t469 r1c2-t469">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094380"></a><a id="LNCPP21662"></a>
<hr />
<h2 class="refsect2">getFloat()</h2>
<p>Get the value of a <code>FLOAT</code> parameter as a C++ <code>float</code>. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21663"></a>Syntax</p>
<pre>
float getFloat(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t470">Parameter</th>
<th class="cellalignment1074" id="r1c2-t470">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t470" headers="r1c1-t470">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t470 r1c2-t470">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084209"></a><a id="LNCPP21664"></a>
<hr />
<h2 class="refsect2">getInt()</h2>
<p>Get the value of an <code>INTEGER</code> parameter as a C++ int. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21665"></a>Syntax</p>
<pre>
unsigned int getInt(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t471">Parameter</th>
<th class="cellalignment1074" id="r1c2-t471">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t471" headers="r1c1-t471">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t471 r1c2-t471">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084217"></a><a id="LNCPP21666"></a>
<hr />
<h2 class="refsect2">getIntervalDS()</h2>
<p>Get the value of a parameter as a <code>IntervalDS</code> object.</p>
<p class="subhead1"><a id="LNCPP21667"></a>Syntax</p>
<pre>
IntervalDS getIntervalDS(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getIntervalDS() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t472">Parameter</th>
<th class="cellalignment1074" id="r1c2-t472">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t472" headers="r1c1-t472">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t472 r1c2-t472">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084225"></a><a id="LNCPP21668"></a>
<hr />
<h2 class="refsect2">getIntervalYM()</h2>
<p>Get the value of a parameter as a <code>IntervalYM</code> object.</p>
<p class="subhead1"><a id="LNCPP21669"></a>Syntax</p>
<pre>
IntervalYM getIntervalYM(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getIntervalYM() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t473">Parameter</th>
<th class="cellalignment1074" id="r1c2-t473">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t473" headers="r1c1-t473">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t473 r1c2-t473">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084233"></a><a id="LNCPP21670"></a>
<hr />
<h2 class="refsect2">getMaxIterations()</h2>
<p>Gets the current limit on maximum number of iterations. Default is <code>1</code>. Returns the current maximum number of iterations.</p>
<p class="subhead1"><a id="LNCPP21671"></a>Syntax</p>
<pre>
unsigned int getMaxIterations() const;
</pre>
<a id="i1084241"></a><a id="LNCPP21672"></a>
<hr />
<h2 class="refsect2">getMaxParamSize()</h2>
<p>The <code>maxParamSize</code> limit (in bytes) is the maximum amount of data sent or returned for any parameter value; it only applies to character and binary types. If the limit is exceeded, the excess data is silently discarded. Returns the current <code>max</code> parameter size limit.</p>
<p class="subhead1"><a id="LNCPP21673"></a>Syntax</p>
<pre>
unsigned int getMaxParamSize(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getMaxParamSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t474">Parameter</th>
<th class="cellalignment1074" id="r1c2-t474">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t474" headers="r1c1-t474">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t474 r1c2-t474">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084411"></a><a id="LNCPP21674"></a>
<hr />
<h2 class="refsect2">getNumber()</h2>
<p>Gets the value of a <code>NUMERIC</code> parameter as a <code>Number</code> object. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21675"></a>Syntax</p>
<pre>
Number getNumber(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getNumber() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t475">Parameter</th>
<th class="cellalignment1074" id="r1c2-t475">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t475" headers="r1c1-t475">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t475 r1c2-t475">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084419"></a><a id="LNCPP21676"></a>
<hr />
<h2 class="refsect2">getObject()</h2>
<p>Gets the value of a parameter as a <code>PObject</code>. This method returns an <code>PObject</code> whose type corresponds to the SQL type that was registered for this parameter using <a href="#i1104541">registerOutParam()</a>. Returns A <code>PObject</code> holding the <code>OUT</code> parameter value.</p>
<p>This method may be used to read database-specific, abstract data types.</p>
<p class="subhead1"><a id="LNCPP21677"></a>Syntax</p>
<pre>
PObject * getObject(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getObject() method" summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t476">Parameter</th>
<th class="cellalignment1074" id="r1c2-t476">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t476" headers="r1c1-t476">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t476 r1c2-t476">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084427"></a><a id="LNCPP21678"></a>
<hr />
<h2 class="refsect2">getOCIStatement()</h2>
<p>Get the OCI statement handle associated with the <code>Statement</code>.</p>
<p class="subhead1"><a id="LNCPP21679"></a>Syntax</p>
<pre>
OCIStmt * getOCIStatement() const;
</pre>
<a id="i1084435"></a><a id="LNCPP21680"></a>
<hr />
<h2 class="refsect2">getRef()</h2>
<p>Get the value of a <code>REF</code> parameter as <code>RefAny</code>. Returns the parameter value.</p>
<p class="subhead1"><a id="LNCPP21681"></a>Syntax</p>
<pre>
RefAny getRef(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getRef() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t477">Parameter</th>
<th class="cellalignment1074" id="r1c2-t477">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t477" headers="r1c1-t477">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t477 r1c2-t477">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084443"></a><a id="LNCPP21682"></a>
<hr />
<h2 class="refsect2">getResultSet()</h2>
<p>Returns the current result as a <code>ResultSet</code>.</p>
<p class="subhead1"><a id="LNCPP21683"></a>Syntax</p>
<pre>
ResultSet * getResultSet();
</pre>
<a id="i1084451"></a><a id="LNCPP21684"></a>
<hr />
<h2 class="refsect2">getRowid()</h2>
<p>Get the <code>rowid</code> parameter value as a <code>Bytes</code>.</p>
<p class="subhead1"><a id="LNCPP21685"></a>Syntax</p>
<pre>
Bytes getRowid(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getRowid() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t478">Parameter</th>
<th class="cellalignment1074" id="r1c2-t478">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t478" headers="r1c1-t478">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t478 r1c2-t478">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094388"></a><a id="LNCPP21686"></a>
<hr />
<h2 class="refsect2">getSQL()</h2>
<p>Returns the current SQL string associated with the Statement object.</p>
<p class="subhead1"><a id="LNCPP21687"></a>Syntax</p>
<pre>
string getSQL() const;
</pre>
<a id="CHEFEDDF"></a><a id="LNCPP21688"></a>
<hr />
<h2 class="refsect2">getSQLUString()</h2>
<p>Returns the current SQL <code>UString</code> associated with the Statement object; globalization enabled.</p>
<p class="subhead1"><a id="LNCPP21689"></a>Syntax</p>
<pre>
UString getSQLUString() const;
</pre>
<a id="i1084467"></a><a id="LNCPP21690"></a>
<hr />
<h2 class="refsect2">getStream()</h2>
<p>Returns the value of the parameter as a stream.</p>
<p class="subhead1"><a id="LNCPP21691"></a>Syntax</p>
<pre>
Stream * getStream(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getStream() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t479">Parameter</th>
<th class="cellalignment1074" id="r1c2-t479">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t479" headers="r1c1-t479">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t479 r1c2-t479">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094396"></a><a id="LNCPP21692"></a>
<hr />
<h2 class="refsect2">getString()</h2>
<p>Get the value of a <code>CHAR</code>, <code>VARCHAR</code>, or <code>LONGVARCHAR</code> parameter as an string. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is empty string.</p>
<p class="subhead1"><a id="LNCPP21693"></a>Syntax</p>
<pre>
string getString(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t480">Parameter</th>
<th class="cellalignment1074" id="r1c2-t480">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t480" headers="r1c1-t480">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t480 r1c2-t480">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084475"></a><a id="LNCPP21694"></a>
<hr />
<h2 class="refsect2">getTimestamp()</h2>
<p>Get the value of a SQL <code>TIMESTAMP</code> parameter as a <code>Timestamp</code> object. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>NULL</code></p>
<p class="subhead1"><a id="LNCPP21695"></a>Syntax</p>
<pre>
Timestamp getTimestamp(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getTimestamp() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t481">Parameter</th>
<th class="cellalignment1074" id="r1c2-t481">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t481" headers="r1c1-t481">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t481 r1c2-t481">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084545"></a><a id="LNCPP21696"></a>
<hr />
<h2 class="refsect2">getUInt()</h2>
<p>Get the value of a <code>BIGINT</code> parameter as a C++ unsigned int. Returns the parameter value; if the value is SQL <code>NULL</code>, the result is <code>0</code>.</p>
<p class="subhead1"><a id="LNCPP21697"></a>Syntax</p>
<pre>
unsigned int getUInt(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getUIntl() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t482">Parameter</th>
<th class="cellalignment1074" id="r1c2-t482">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t482" headers="r1c1-t482">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t482 r1c2-t482">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084553"></a><a id="LNCPP21698"></a>
<hr />
<h2 class="refsect2">getUpdateCount()</h2>
<p>Returns the current result as an update count.</p>
<p class="subhead1"><a id="LNCPP21699"></a>Syntax</p>
<pre>
unsigned int getUpdateCount() const;
</pre>
<a id="CHEEDJBD"></a><a id="LNCPP21700"></a>
<hr />
<h2 class="refsect2">getUString()</h2>
<p>Returns the value as a UString.</p>
<p>This method should be called only if the environment's character set is UTF16, or if <code>setCharset()</code> method has been called to explicitly retrieve UTF16 data.</p>
<p class="subhead1"><a id="LNCPP21701"></a>Syntax</p>
<pre>
UString getUString(
   unsigned int paramIndex);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t483">Parameter</th>
<th class="cellalignment1074" id="r1c2-t483">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t483" headers="r1c1-t483">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t483 r1c2-t483">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEGHDBG"></a><a id="LNCPP21702"></a>
<hr />
<h2 class="refsect2">getVector()</h2>
<p>Returns the column in the current position as a vector. The column at the position, specified by index, should be a collection type (<code>varray</code> or nested table). The SQL type of the elements in the collection should be compatible with the type of the vector.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="Versions of the getVector() method of the Statement class." summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t484">Syntax</th>
<th class="cellalignment1074" id="r1c2-t484">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   std::vector&lt;UString&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t484 r1c2-t484">Used for vectors of <code>UString Class</code>; globalization enabled.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BDouble&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t484 r1c2-t484">Used for <code>BDouble</code> vectors.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BFile&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t484 r1c2-t484">Used for vectors of <a href="reference006.htm#i1155597">Bfile Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;BFloat&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r5c1-t484 r1c2-t484">Used for <code>BFloat</code> vectors.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Blob&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r6c1-t484 r1c2-t484">Used for vectors of <a href="reference007.htm#i1119032">Blob Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Clob&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r7c1-t484 r1c2-t484">Used for <code>Clob</code> vectors.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Date&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r8c1-t484 r1c2-t484">Used for vectors of <a href="reference013.htm#i1079044">Date Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;double&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r9c1-t484 r1c2-t484">Used for vectors of <code>double Class.</code></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;float&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r10c1-t484 r1c2-t484">Used for vectors of <code>float Class.</code></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;int&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r11c1-t484 r1c2-t484">Used for vectors of <code>int Class.</code></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalDS&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r12c1-t484 r1c2-t484">Used for vectors of <a href="reference015.htm#i1066767">IntervalDS Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalYM&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r13c1-t484 r1c2-t484">Used for vectors of <a href="reference016.htm#i1080017">IntervalYM Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Number&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r14c1-t484 r1c2-t484">Used for vectors of <a href="reference022.htm#i1018892">Number Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;RefAny&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r15c1-t484 r1c2-t484">Used for vectors of <a href="reference026.htm#i1109327">RefAny Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;string&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r16c1-t484 r1c2-t484">Used for vectors of <code>string Class.</code></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;T *&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r17c1-t484 r1c2-t484">Intended for use on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;T&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r18c1-t484 r1c2-t484">Intended for use on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS. For <code>OUT</code> binds.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Timestamp&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r19c1-t484 r1c2-t484">Used for vectors of <a href="reference033.htm#i1118557">Timestamp Class</a>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;u &lt;Ref&lt;T&gt; &gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r20c1-t484 r1c2-t484">Available only on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t484" headers="r1c1-t484">
<pre>
void getVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;unsigned int&gt; &amp;vect);
</pre></td>
<td class="cellalignment1075" headers="r21c1-t484 r1c2-t484">Used for on vectors of <code>unsigned int Class.</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getVector() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t485">Parameter</th>
<th class="cellalignment1074" id="r1c2-t485">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t485" headers="r1c1-t485">
<pre>
stmt
</pre></td>
<td class="cellalignment1075" headers="r2c1-t485 r1c2-t485">The statement.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t485" headers="r1c1-t485">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r3c1-t485 r1c2-t485">Parameter index.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t485" headers="r1c1-t485">
<pre>
vect
</pre></td>
<td class="cellalignment1075" headers="r4c1-t485 r1c2-t485">Reference to the vector (<code>OUT</code> parameter) into which the values should be retrieved.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEFFBDJ"></a><a id="LNCPP21703"></a>
<hr />
<h2 class="refsect2">getVectorOfRefs()</h2>
<p>This method returns the column in the current position as a vector of <code>REF</code>s. The column should be a collection type (varray or nested table) of <code>REF</code>s. Used with <code>OUT</code> binds.</p>
<p class="subhead1"><a id="LNCPP21704"></a>Syntax</p>
<pre>
void getVectorOfRefs(
   Statement *stmt,
   unsigned int colIndex,
   vector&lt; Ref&lt;T&gt; &gt; &amp;vect);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of getVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t486">Parameter</th>
<th class="cellalignment1074" id="r1c2-t486">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t486" headers="r1c1-t486">
<pre>
stmt
</pre></td>
<td class="cellalignment1075" headers="r2c1-t486 r1c2-t486">The statement object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t486" headers="r1c1-t486">
<pre>
colIndex
</pre></td>
<td class="cellalignment1075" headers="r3c1-t486 r1c2-t486">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t486" headers="r1c1-t486">
<pre>
vect
</pre></td>
<td class="cellalignment1075" headers="r4c1-t486 r1c2-t486">The reference to the vector of <code>REF</code>s (<code>OUT</code> parameter). It is recommended to use <code>getVectorOfRefs()</code> instead of specialized <code>getVector()</code> function for <code>Ref&lt;T&gt;.</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084569"></a><a id="LNCPP21705"></a>
<hr />
<h2 class="refsect2">isNull()</h2>
<p>An <code>OUT</code> parameter may have the value of SQL <code>NULL</code>; <code>isNull()</code> reports whether the last value read has this special value. Note that you must first call <code>ge</code>t<code><span class="codeinlineitalic">xxx</span></code><code>()</code> on a parameter to read its value and then call <code>isNull()</code> to see if the value was SQL <code>NULL</code>. Returns <code>TRUE</code> if the last parameter read was SQL <code>NULL</code>.</p>
<p class="subhead1"><a id="LNCPP21706"></a>Syntax</p>
<pre>
bool isNull(
   unsigned int paramIndex ) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of isNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t487">Parameter</th>
<th class="cellalignment1074" id="r1c2-t487">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t487" headers="r1c1-t487">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t487 r1c2-t487">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1139303"></a><a id="LNCPP21707"></a>
<hr />
<h2 class="refsect2">isTruncated()</h2>
<p>This method checks whether the value of the parameter is truncated. If the value of the parameter is truncated, then <code>TRUE</code> is returned; otherwise, <code>FALSE</code> is returned.</p>
<p class="subhead1"><a id="LNCPP21708"></a>Syntax</p>
<pre>
bool isTruncated(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of isTruncated() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t488">Parameter</th>
<th class="cellalignment1074" id="r1c2-t488">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t488" headers="r1c1-t488">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t488 r1c2-t488">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107094"></a><a id="LNCPP21709"></a>
<hr />
<h2 class="refsect2">preTruncationLength()</h2>
<p>Returns the actual length of the parameter before truncation.</p>
<p class="subhead1"><a id="LNCPP21710"></a>Syntax</p>
<pre>
int preTruncationLength(
   unsigned int paramIndex) const;
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of preTruncatedLength() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t489">Parameter</th>
<th class="cellalignment1074" id="r1c2-t489">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t489" headers="r1c1-t489">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t489 r1c2-t489">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1104541"></a><a id="LNCPP21711"></a>
<hr />
<h2 class="refsect2">registerOutParam()</h2>
<p>This method registers the <code>type</code> of each <code>out</code> parameter of a PL/SQL stored procedure. Before executing a PL/SQL stored procedure, you must explicitly call this method to register the <code>type</code> of each <code>out</code> parameter. This method should be called for <code>out</code> parameters only. Use the <code>set</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> method for in/out parameters.</p>
<ul>
<li>
<p>When reading the value of an <code>out</code> parameter, you must use the <code>get</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> method that corresponds to the parameter's registered SQL type. For example, use <code>getInt</code> or <code>getNumber</code> when <code>OCCIINT</code> or <code>OCCINumber</code> is the type specified.</p>
</li>
<li>
<p>If a PL/SQL stored procedure has an <code>out</code> parameter of <code>type</code> <code>ROWID</code>, the <code>type</code> specified in this method should be <code>OCCISTRING</code>. The value of the <code>out</code> parameter can then be retrieved by calling the <code>getString()</code> method.</p>
</li>
<li>
<p>If a PL/SQL stored procedure has an in/out parameter of type <code>ROWID</code>, call the methods <code>setString()</code> and <code>getString()</code> to set the type and retrieve the value of the <code>IN</code>/<code>OUT</code> parameter.</p>
</li>
</ul>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of registerOutParam() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t490">Syntax</th>
<th class="cellalignment1074" id="r1c2-t490">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t490" headers="r1c1-t490">
<pre>
void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize=0,
   const string &amp;sqltype="");
</pre></td>
<td class="cellalignment1075" headers="r2c1-t490 r1c2-t490">Registers the <code>type</code> of each <code>out</code> parameter of a PL/SQL stored procedure.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t490" headers="r1c1-t490">
<pre>
void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize,
   const string typName,
   const string &amp;schName);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t490 r1c2-t490">Registers the <code>type</code> of each <code>out</code> parameter of a PL/SQL stored procedure; <code>string</code> support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t490" headers="r1c1-t490">
<pre>
void registerOutParam(
   unsigned int paramIndex,
   Type type,
   unsigned int maxSize,
   const UString &amp;typName,
   const UString &amp;schName);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t490 r1c2-t490">Registers the <code>type</code> of each <code>out</code> parameter of a PL/SQL stored procedure; globalization enabled, or <code>UString</code> support.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="First column lists parameters; second column provides description of these parameters." summary="parameters" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t491">Parameter</th>
<th class="cellalignment1074" id="r1c2-t491">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t491" headers="r1c1-t491">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t491 r1c2-t491">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t491" headers="r1c1-t491">
<pre>
type
</pre></td>
<td class="cellalignment1075" headers="r3c1-t491 r1c2-t491">SQL type code defined by <code><span class="codeinlineitalic">type</span></code>; only data types corresponding to OCCI data types such as <code>Date</code>, <code>Bytes</code>, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t491" headers="r1c1-t491">
<pre>
maxSize
</pre></td>
<td class="cellalignment1075" headers="r4c1-t491 r1c2-t491">The maximum size of the retrieved value. For data types of <code>OCCIBYTES</code> and <code>OCCISTRING</code>, <code>maxSize</code> should be greater than <code>0</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t491" headers="r1c1-t491">
<pre>
sqltype
</pre></td>
<td class="cellalignment1075" headers="r5c1-t491 r1c2-t491">The name of the type in the data base (used for types which have been created with <code>CREATE TYPE</code>).</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t491" headers="r1c1-t491">
<pre>
typName
</pre></td>
<td class="cellalignment1075" headers="r6c1-t491 r1c2-t491">The name of the type.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t491" headers="r1c1-t491">
<pre>
schName
</pre></td>
<td class="cellalignment1075" headers="r7c1-t491 r1c2-t491">The schema name.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094412"></a><a id="LNCPP21712"></a>
<hr />
<h2 class="refsect2">setAutoCommit()</h2>
<p>A <code>Statement</code> can be in auto-commit mode. In this case any statement executed is also automatically committed. By default, the auto-commit mode is turned-off.</p>
<p class="subhead1"><a id="LNCPP21713"></a>Syntax</p>
<pre>
void setAutoCommit(
   bool autoCommit);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setAutoCommit() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t492">Parameter</th>
<th class="cellalignment1074" id="r1c2-t492">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t492" headers="r1c1-t492">
<pre>
autoCommit
</pre></td>
<td class="cellalignment1075" headers="r2c1-t492 r1c2-t492"><code>TRUE</code> enables auto-commit; <code>FALSE</code> disables auto-commit.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CIAJGDBG"></a><a id="LNCPP21714"></a>
<hr />
<h2 class="refsect2">setBatchErrorMode()</h2>
<p>Enables or disables the batch error processing mode.</p>
<p class="subhead1"><a id="LNCPP21715"></a>Syntax</p>
<pre>
virtual void setBatchErrorMode(
   bool batchErrorMode);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBatchErrorMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t493">Parameter</th>
<th class="cellalignment1074" id="r1c2-t493">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t493" headers="r1c1-t493">
<pre>
batchErrorMode
</pre></td>
<td class="cellalignment1075" headers="r2c1-t493 r1c2-t493"><code>TRUE</code> enables batch error processing; <code>FALSE</code> disables batch error processing.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1153095"></a><a id="LNCPP21716"></a>
<hr />
<h2 class="refsect2">setBDouble()</h2>
<p>Sets an IEEE754 double as a bind value to a <code>Statement</code> object at the position specified by <code>paramIndex</code> attribute.</p>
<p class="subhead1"><a id="LNCPP21717"></a>Syntax</p>
<pre>
void setBDouble(
   unsigned int paramIndex,
   const BDouble &amp;dval);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t494">Parameter</th>
<th class="cellalignment1074" id="r1c2-t494">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t494" headers="r1c1-t494">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t494 r1c2-t494">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t494" headers="r1c1-t494">
<pre>
dval
</pre></td>
<td class="cellalignment1075" headers="r3c1-t494 r1c2-t494">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094420"></a><a id="LNCPP21718"></a>
<hr />
<h2 class="refsect2">setBfile()</h2>
<p>Sets a parameter to a <code>Bfile</code> value.</p>
<p class="subhead1"><a id="LNCPP21719"></a>Syntax</p>
<pre>
void setBfile(
   unsigned int paramIndex,
   const Bfile &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBfile() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t495">Parameter</th>
<th class="cellalignment1074" id="r1c2-t495">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t495" headers="r1c1-t495">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t495 r1c2-t495">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t495" headers="r1c1-t495">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t495 r1c2-t495">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1153923"></a><a id="LNCPP21720"></a>
<hr />
<h2 class="refsect2">setBFloat()</h2>
<p>Sets an IEEE754 float as a bind value to a <code>Statement</code> object at the position specified by the <code>paramIndex</code> attribute.</p>
<p class="subhead1"><a id="LNCPP21721"></a>Syntax</p>
<pre>
void setBFloat(
   unsigned int paramIndex,
   const BFloat &amp;fval);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t496">Parameter</th>
<th class="cellalignment1074" id="r1c2-t496">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t496" headers="r1c1-t496">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t496 r1c2-t496">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t496" headers="r1c1-t496">
<pre>
fval
</pre></td>
<td class="cellalignment1075" headers="r3c1-t496 r1c2-t496">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1087429"></a><a id="LNCPP21722"></a>
<hr />
<h2 class="refsect2">setBinaryStreamMode()</h2>
<p>Defines that a column is to be returned as a binary stream.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setBinaryStreamMode() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t497">Syntax</th>
<th class="cellalignment1074" id="r1c2-t497">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t497" headers="r1c1-t497">
<pre>
void setBinaryStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t497 r1c2-t497">Sets column returned to be a binary stream.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t497" headers="r1c1-t497">
<pre>
void setBinaryStreamMode(
   unsigned int colIndex,
   unsigned int size
   bool inArg);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t497 r1c2-t497">Sets column returned to be a binary stream; used with PL/SQL <code>IN</code> or <code>IN/OUT</code> arguments in the bind position.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBinaryStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t498">Parameter</th>
<th class="cellalignment1074" id="r1c2-t498">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t498" headers="r1c1-t498">
<pre>
colIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t498 r1c2-t498">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t498" headers="r1c1-t498">
<pre>
size
</pre></td>
<td class="cellalignment1075" headers="r3c1-t498 r1c2-t498">The amount of data to be read or returned as a binary <code>Stream</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t498" headers="r1c1-t498">
<pre>
inArg
</pre></td>
<td class="cellalignment1075" headers="r4c1-t498 r1c2-t498">Pass <code>TRUE</code> if the bind position is a PL/SQL <code>IN</code> or <code>IN/OUT</code> argument</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094428"></a><a id="LNCPP21723"></a>
<hr />
<h2 class="refsect2">setBlob()</h2>
<p>Sets a parameter to a <code>Blob</code> value.</p>
<p class="subhead1"><a id="LNCPP21724"></a>Syntax</p>
<pre>
void setBlob(
   unsigned int paramIndex,
   const Blob &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBlob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t499">Parameter</th>
<th class="cellalignment1074" id="r1c2-t499">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t499" headers="r1c1-t499">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t499 r1c2-t499">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t499" headers="r1c1-t499">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t499 r1c2-t499">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094436"></a><a id="LNCPP21725"></a>
<hr />
<h2 class="refsect2">setBytes()</h2>
<p>Sets a parameter to a <code>Bytes</code> array.</p>
<p class="subhead1"><a id="LNCPP21726"></a>Syntax</p>
<pre>
void setBytes(
   unsigned int paramIndex,
   const Bytes &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setBytes() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t500">Parameter</th>
<th class="cellalignment1074" id="r1c2-t500">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t500" headers="r1c1-t500">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t500 r1c2-t500">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t500" headers="r1c1-t500">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t500 r1c2-t500">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1088316"></a><a id="LNCPP21727"></a>
<hr />
<h2 class="refsect2">setCharacterStreamMode()</h2>
<p>Defines that a column is to be returned as a character stream.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setCharacterStreamMode() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t501">Syntax</th>
<th class="cellalignment1074" id="r1c2-t501">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t501" headers="r1c1-t501">
<pre>
void setCharacterStreamMode(
   unsigned int colIndex,
   unsigned int size);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t501 r1c2-t501">Sets column returned to be a character stream.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t501" headers="r1c1-t501">
<pre>
void setCharacterStreamMode(
   unsigned int colIndex,
   unsigned int size,
   bool inArg);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t501 r1c2-t501">Sets column returned to be a character stream; used with PL/SQL <code>IN</code> or <code>IN/OUT</code> arguments in the bind position.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setCharacterStreamMode() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t502">Parameter</th>
<th class="cellalignment1074" id="r1c2-t502">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t502" headers="r1c1-t502">
<pre>
colIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t502 r1c2-t502">Column index; first column is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t502" headers="r1c1-t502">
<pre>
size
</pre></td>
<td class="cellalignment1075" headers="r3c1-t502 r1c2-t502">The amount of data to be read or returned as a character <code>Stream</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t502" headers="r1c1-t502">
<pre>
inArg
</pre></td>
<td class="cellalignment1075" headers="r4c1-t502 r1c2-t502">Pass <code>TRUE</code> if the bind position is a PL/SQL <code>IN</code> or <code>IN/OUT</code> argument</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1094444"></a><a id="LNCPP21728"></a>
<hr />
<h2 class="refsect2">setCharSet()</h2>
<p>Overrides the default character set for the specified parameter. Data is assumed to be in the specified character set and is converted to database character set. For <code>OUT</code> binds, this specifies the character set to which database characters are converted to.</p>
<p class="subhead1"><a id="LNCPP21729"></a>Syntax</p>
<pre>
void setCharSet(
   unsigned int paramIndex,
   string &amp;charSet);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setCharSet() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t503">Parameter</th>
<th class="cellalignment1074" id="r1c2-t503">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t503" headers="r1c1-t503">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t503 r1c2-t503">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t503" headers="r1c1-t503">
<pre>
charSet
</pre></td>
<td class="cellalignment1075" headers="r3c1-t503 r1c2-t503">Selected character set, as a string.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="BBAFCFJI"></a><a id="LNCPP21730"></a>
<hr />
<h2 class="refsect2">setCharSetUString()</h2>
<p>Overrides the default character set for the specified parameter. Data is assumed to be in the specified character set and is converted to database character set. For <code>OUT</code> binds, this specifies the character set to which database characters are converted to.</p>
<p class="subhead1"><a id="LNCPP21731"></a>Syntax</p>
<pre>
void setCharSetUString(
   unsigned int paramIndex,
   const UString&amp; charSet); 
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setCharSetUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t504">Parameter</th>
<th class="cellalignment1074" id="r1c2-t504">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t504" headers="r1c1-t504">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t504 r1c2-t504">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t504" headers="r1c1-t504">
<pre>
charSet
</pre></td>
<td class="cellalignment1075" headers="r3c1-t504 r1c2-t504">Selected character set, as a <code>UString</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084883"></a><a id="LNCPP21732"></a>
<hr />
<h2 class="refsect2">setClob()</h2>
<p>Sets a parameter to a <code>Clob</code> value.</p>
<p class="subhead1"><a id="LNCPP21733"></a>Syntax</p>
<pre>
void setClob(
   unsigned int paramIndex,
   const Clob &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setClob() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t505">Parameter</th>
<th class="cellalignment1074" id="r1c2-t505">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t505" headers="r1c1-t505">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t505 r1c2-t505">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t505" headers="r1c1-t505">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t505 r1c2-t505">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1084891"></a><a id="LNCPP21734"></a>
<hr />
<h2 class="refsect2">setDate()</h2>
<p>Sets a parameter to a <code>Date</code> value.</p>
<p class="subhead1"><a id="LNCPP21735"></a>Syntax</p>
<pre>
void setDate(
   unsigned int paramIndex,
   const Date &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setDate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t506">Parameter</th>
<th class="cellalignment1074" id="r1c2-t506">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t506" headers="r1c1-t506">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t506 r1c2-t506">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t506" headers="r1c1-t506">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t506 r1c2-t506">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086347"></a><a id="LNCPP21736"></a>
<hr />
<h2 class="refsect2">setDatabaseNCHARParam()</h2>
<p>If the parameter is going to be inserted in a column that contains data in the database's <code>NCHAR</code> character set, then OCCI must be informed by passing a <code>TRUE</code> value. A <code>FALSE</code> can be passed to restore the dafault.Returns returns the character set that is in effect for the specified parameter.</p>
<p class="subhead1"><a id="LNCPP21737"></a>Syntax</p>
<pre>
void setDatabaseNCHARParam(
   unsigned int paramIndex,
   bool isNCHAR);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setDatabseNCHARParam() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t507">Parameter</th>
<th class="cellalignment1074" id="r1c2-t507">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t507" headers="r1c1-t507">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t507 r1c2-t507">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t507" headers="r1c1-t507">
<pre>
isNCHAR
</pre></td>
<td class="cellalignment1075" headers="r3c1-t507 r1c2-t507"><code>TRUE</code> if this parameter contains data in Database's <code>NCHAR</code> character set; <code>FALSE</code> otherwise</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086355"></a><a id="LNCPP21738"></a>
<hr />
<h2 class="refsect2">setDataBuffer()</h2>
<p>Specifies a data buffer where data would be available. Also used for <code>OUT</code> bind parameters of callable statements.</p>
<p>The <code>buffer</code> parameter is a pointer to a user allocated data buffer. The current length of data must be specified in the <code>length</code> parameter. The amount of data should not exceed the <code>size</code> parameter. Finally, <code>type</code> is the data type of the data.</p>
<p>Note that not all <code>types</code> can be supplied in the buffer. For example, all OCCI allocated types (such as <code>Bytes</code>, <code>Date</code> and so on) cannot be provided by the <a href="#i1086355">setDataBuffer()</a> interface. Similarly, C++ Standard Library strings cannot be provided with the <a href="#i1086355">setDataBuffer()</a> interface either. The <code>type</code> can be any of OCI data types such <code>VARCHAR2</code>, <code>CSTRING</code>, <code>CHARZ</code> and so on.</p>
<p>If <a href="#i1086355">setDataBuffer()</a> is used to specify data for iterative or array executes, it should be called only once in the first iteration only. For subsequent iterations, OCCI would assume that data is at <code>buffer +(i*size)</code> location where <code>i</code> is the iteration number. Similarly the length of the data would be assumed to be at <code>(length+i).</code></p>
<p class="subhead1"><a id="LNCPP21739"></a>Syntax</p>
<pre>
void setDataBuffer(
   unsigned int paramIndex,
   void *buffer,
   Type type,
   sb4 size,
   ub2 *length,
   sb2 *ind = NULL,
   ub2 *rc= NULL);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setDataBuffer() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t508">Parameter</th>
<th class="cellalignment1074" id="r1c2-t508">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t508" headers="r1c1-t508">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t508 r1c2-t508">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t508" headers="r1c1-t508">
<pre>
buffer
</pre></td>
<td class="cellalignment1075" headers="r3c1-t508 r1c2-t508">Pointer to user-allocated buffer. For iterative or array executes, it should have <code>numIterations()</code> size bytes in it. For array fetches, it should have <code>numRows</code> * size bytes in it. For gather or scatter binds and defines, this structure stores the address of <code>OCIIOVec</code> and the number of <code>OCIIOVec</code> elements that start at that address.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t508" headers="r1c1-t508">
<pre>
type
</pre></td>
<td class="cellalignment1075" headers="r4c1-t508 r1c2-t508">Type of the data that is provided (or retrieved) in the buffer.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t508" headers="r1c1-t508">
<pre>
size
</pre></td>
<td class="cellalignment1075" headers="r5c1-t508 r1c2-t508">Size of the data buffer; for iterative and array executes, it is the size of each element of the data items. For gather or scatter binds and defines, it is the size of the <code>OCIIOVecArray</code> to which the <code>buffer</code> points; the <code>mode</code> must be set to <code>IOVEC</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t508" headers="r1c1-t508">
<pre>
length
</pre></td>
<td class="cellalignment1075" headers="r6c1-t508 r1c2-t508">Pointer to the length of data in the buffer; for iterative and array executes, it should be an array of length data for each buffer element; the size of the array should be equal to <code>arrayLength()</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t508" headers="r1c1-t508">
<pre>
ind
</pre></td>
<td class="cellalignment1075" headers="r7c1-t508 r1c2-t508">Indicator. For iterative and array executes, an indicator for every buffer element.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t508" headers="r1c1-t508">
<pre>
rc
</pre></td>
<td class="cellalignment1075" headers="r8c1-t508 r1c2-t508">Returns code; for iterative and array executes, a return code for every buffer element.</td>
</tr>
<tr class="cellalignment1067">
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086363"></a><a id="LNCPP21740"></a>
<hr />
<h2 class="refsect2">setDataBufferArray()</h2>
<p>Specifies an array of data buffers where data would be available for reading or writing. Used for <code>IN</code>, <code>OUT</code>, and <code>IN/OUT</code> bind parameters for stored procedures which read/write array parameters.</p>
<ul>
<li>
<p>A stored procedure can have an array of values for <code>IN</code>, <code>IN/OUT</code>, or <code>OUT</code> parameters. In this case, the parameter must be specified using the <a href="#i1086363">setDataBufferArray()</a> method. The array is specified just as for the <a href="#i1086355">setDataBuffer()</a> method for iterative or array executes, but the number of elements in the array is determined by <code>*arrayLength</code> parameter.</p>
</li>
<li>
<p>For <code>OUT</code> and <code>IN/OUT</code> parameters, the maximum number of elements in the array is specified (and returned) by the <code>arraySize</code> parameter. The client must ensure that it has allocated size *<code>arraySize</code> bytes for the <code>buffer</code>. For iterative prepared statements, the number of elements in the array is determined by the number of iterations, and for array executes the number of elements in the array is determined by the <code>arrayLength</code> parameter of the <a href="#i1073494">executeArrayUpdate()</a> method. However, for array parameters of stored procedures, the number of elements in the array must be specified in the <code>arrayLength</code> parameter of the <a href="#i1086363">setDataBufferArray()</a> method because each parameter may have a different size array.</p>
</li>
<li>
<p>This is different from prepared statements where for iterative and array executes, the number of elements in the array for each parameter is the same and is determined by the number of iterations of the statement, but a callable statement is executed only once, and each of its parameter can be a varying length array with possibly a different length.</p>
</li>
</ul>
<p class="subhead1"><a id="LNCPP21741"></a>Syntax</p>
<pre>
void setDataBufferArray(
   unsigned int paramIndex,
   void *buffer,
   Type type,
   ub4 arraySize,
   ub4 *arrayLength,
   sb4 elementSize,
   ub2 *elementLength,
   sb2 *ind = NULL,
   ub2 *rc = NULL);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setDataBufferArray() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t509">Parameter</th>
<th class="cellalignment1074" id="r1c2-t509">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t509" headers="r1c1-t509">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t509 r1c2-t509">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t509" headers="r1c1-t509">
<pre>
buffer
</pre></td>
<td class="cellalignment1075" headers="r3c1-t509 r1c2-t509">Pointer to user-allocated buffer. It should have <code>size* arraySize</code> bytes in it. For gather or scatter binds and defines, this structure stores the address of <code>OCIIOVec</code> and the number of <code>OCIIOVec</code> elements that start at that address.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t509" headers="r1c1-t509">
<pre>
type
</pre></td>
<td class="cellalignment1075" headers="r4c1-t509 r1c2-t509">Type of the data that is provided (or retrieved) in the buffer.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t509" headers="r1c1-t509">
<pre>
arraySize
</pre></td>
<td class="cellalignment1075" headers="r5c1-t509 r1c2-t509">Maximum number of elements in the array.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t509" headers="r1c1-t509">
<pre>
arrayLength
</pre></td>
<td class="cellalignment1075" headers="r6c1-t509 r1c2-t509">Pointer to number of current elements in the array.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t509" headers="r1c1-t509">
<pre>
elementSize
</pre></td>
<td class="cellalignment1075" headers="r7c1-t509 r1c2-t509">Size of the data buffer for each element. For iterative and array executes, it is the size of each element of the data items. When using gather or scatter binds and defines, it is the size of the <code>OCIIOVecArray</code>; the mode must be set to <code>IOVEC</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t509" headers="r1c1-t509">
<pre>
elementLemgth
</pre></td>
<td class="cellalignment1075" headers="r8c1-t509 r1c2-t509">Pointer to an array of lengths. <code>elementLength[i]</code> has the current length of the <code>i</code>th element of the array.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t509" headers="r1c1-t509">
<pre>
ind
</pre></td>
<td class="cellalignment1075" headers="r9c1-t509 r1c2-t509">Pointer to an array of indicators. An indicator for every buffer element.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t509" headers="r1c1-t509">
<pre>
rcs
</pre></td>
<td class="cellalignment1075" headers="r10c1-t509 r1c2-t509">Pointer to an array of return codes.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086371"></a><a id="LNCPP21742"></a>
<hr />
<h2 class="refsect2">setDouble()</h2>
<p>Sets a parameter to a C++ double value.</p>
<p class="subhead1"><a id="LNCPP21743"></a>Syntax</p>
<pre>
void setDouble(
   unsigned int paramIndex,
   double val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setDouble() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t510">Parameter</th>
<th class="cellalignment1074" id="r1c2-t510">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t510" headers="r1c1-t510">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t510 r1c2-t510">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t510" headers="r1c1-t510">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t510 r1c2-t510">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086379"></a><a id="LNCPP21744"></a>
<hr />
<h2 class="refsect2">setErrorOnNull()</h2>
<p>Enables/disables exceptions for reading of <code>NULL</code> values on paramIndex parameter of the statement. If exceptions are enabled, calling a <code>get</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> on <code>paramIndex</code> parameter would result in an <code>SQLException</code> if the parameter value is <code>NULL</code>. This call can also be used to disable exceptions.</p>
<p class="subhead1"><a id="LNCPP21745"></a>Syntax</p>
<pre>
void setErrorOnNull(
   unsigned int paramIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setErrorOnNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t511">Parameter</th>
<th class="cellalignment1074" id="r1c2-t511">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t511" headers="r1c1-t511">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t511 r1c2-t511">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t511" headers="r1c1-t511">
<pre>
causeException
</pre></td>
<td class="cellalignment1075" headers="r3c1-t511 r1c2-t511">Enable exceptions if <code>TRUE</code>. Disable if <code>FALSE</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107128"></a><a id="LNCPP21746"></a>
<hr />
<h2 class="refsect2">setErrorOnTruncate()</h2>
<p>This method enables/disables exceptions when truncation occurs.</p>
<p class="subhead1"><a id="LNCPP21747"></a>Syntax</p>
<pre>
void setErrorOnTruncate(
   unsigned int paramIndex,
   bool causeException);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setErrorOnTruncate() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t512">Parameter</th>
<th class="cellalignment1074" id="r1c2-t512">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t512" headers="r1c1-t512">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t512 r1c2-t512">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t512" headers="r1c1-t512">
<pre>
causeException
</pre></td>
<td class="cellalignment1075" headers="r3c1-t512 r1c2-t512">Enable exceptions if <code>TRUE</code>. Disable if <code>FALSE</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086737"></a><a id="LNCPP21748"></a>
<hr />
<h2 class="refsect2">setFloat()</h2>
<p>Sets a parameter to a C++ float value.</p>
<p class="subhead1"><a id="LNCPP21749"></a>Syntax</p>
<pre>
void setFloat(
   unsigned int paramIndex,
   float val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setFloat() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t513">Parameter</th>
<th class="cellalignment1074" id="r1c2-t513">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t513" headers="r1c1-t513">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t513 r1c2-t513">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t513" headers="r1c1-t513">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t513 r1c2-t513">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086745"></a><a id="LNCPP21750"></a>
<hr />
<h2 class="refsect2">setInt()</h2>
<p>Sets a parameter to a C++ int value.</p>
<p class="subhead1"><a id="LNCPP21751"></a>Syntax</p>
<pre>
void setInt(
   unsigned int paramIndex,
   int val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t514">Parameter</th>
<th class="cellalignment1074" id="r1c2-t514">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t514" headers="r1c1-t514">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t514 r1c2-t514">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t514" headers="r1c1-t514">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t514 r1c2-t514">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086753"></a><a id="LNCPP21752"></a>
<hr />
<h2 class="refsect2">setIntervalDS()</h2>
<p>Sets a parameter to a <code>IntervalDS</code> value.</p>
<p class="subhead1"><a id="LNCPP21753"></a>Syntax</p>
<pre>
void setIntervalDS(
   unsigned int paramIndex,
   const IntervalDS &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setIntervalDS() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t515">Parameter</th>
<th class="cellalignment1074" id="r1c2-t515">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t515" headers="r1c1-t515">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t515 r1c2-t515">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t515" headers="r1c1-t515">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t515 r1c2-t515">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086761"></a><a id="LNCPP21754"></a>
<hr />
<h2 class="refsect2">setIntervalYM()</h2>
<p>Sets a parameter to a <code>Interval</code> value.</p>
<p class="subhead1"><a id="LNCPP21755"></a>Syntax</p>
<pre>
void setIntervalYM(
   unsigned int paramIndex,
   const IntervalYM &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setIntervalYM() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t516">Parameter</th>
<th class="cellalignment1074" id="r1c2-t516">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t516" headers="r1c1-t516">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t516 r1c2-t516">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t516" headers="r1c1-t516">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t516 r1c2-t516">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086769"></a><a id="LNCPP21756"></a>
<hr />
<h2 class="refsect2">setMaxIterations()</h2>
<p>Sets the maximum number of invocations that are made for the DML statement. This must be called before any parameters are set on the prepared statement. The larger the iterations, the larger the numbers of parameters sent to the server in one round trip. However, a large number causes more memory to be reserved for all the parameters. Note that this is just the maximum limit. Actual number of iterations depends on the number of calls to <a href="#i1094372">addIteration()</a>.</p>
<p class="subhead1"><a id="LNCPP21757"></a>Syntax</p>
<pre>
void setMaxIterations(
   unsigned int maxIterations);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setMaxIterations() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t517">Parameter</th>
<th class="cellalignment1074" id="r1c2-t517">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t517" headers="r1c1-t517">
<pre>
maxIterations
</pre></td>
<td class="cellalignment1075" headers="r2c1-t517 r1c2-t517">Maximum number of iterations allowed on this statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086777"></a><a id="LNCPP21758"></a>
<hr />
<h2 class="refsect2">setMaxParamSize()</h2>
<p>This method sets the maximum amount of data to be sent or received for the specified parameter. It only applies to character and binary data. If the maximum amount is exceeded, the excess data is discarded. This method can be very useful when working with a <code>LONG</code> column. It can be used to truncate the <code>LONG</code> column by reading or writing it into a string or <code>Bytes</code> data type.</p>
<p>If the <a href="#i1094388">getSQL()</a> or <a href="#i1094436">setBytes()</a> method has been called to bind a value to an <code>IN</code>/<code>OUT</code> parameter of a PL/SQL procedure, and the size of the <code>OUT</code> value is expected to be greater than the size of the <code>IN</code> value, then <a href="#i1086777">setMaxParamSize()</a> should be called.</p>
<p class="subhead1"><a id="LNCPP21759"></a>Syntax</p>
<pre>
void setMaxParamSize(
   unsigned int paramIndex,
   unsigned int maxSize);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setMaxParamSize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t518">Parameter</th>
<th class="cellalignment1074" id="r1c2-t518">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t518" headers="r1c1-t518">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t518 r1c2-t518">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t518" headers="r1c1-t518">
<pre>
maxSize
</pre></td>
<td class="cellalignment1075" headers="r3c1-t518 r1c2-t518">The new maximum parameter size limit; must be &gt;0.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086785"></a><a id="LNCPP21760"></a>
<hr />
<h2 class="refsect2">setNull()</h2>
<p>Sets a parameter to SQL <code>NULL</code>. Note that you must specify the parameter's SQL type.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setNull() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t519">Syntax</th>
<th class="cellalignment1074" id="r1c2-t519">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t519" headers="r1c1-t519">
<pre>
void setNull(
   unsigned int paramIndex,
   Type type);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t519 r1c2-t519">Sets the value of a parameter to <code>NULL</code> using an object.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t519" headers="r1c1-t519">
<pre>
void setNull(
   unsigned int paramIndex,
   Type type,
   const string &amp;typeName,
   const string &amp;schemaName = "")
</pre></td>
<td class="cellalignment1075" headers="r3c1-t519 r1c2-t519">Sets the value of a parameter to <code>NULL</code> for object and collection types, <code>OCCIPOBJECT</code> and <code>OCCIVECTOR</code>. Uses the appropriate schema and type name of the object or collection type. Support for <code>string</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t519" headers="r1c1-t519">
<pre>
void setNull(
   unsigned int paramIndex, 
   Type type, 
   UString &amp;typeName, 
   UString &amp;schemaName);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t519 r1c2-t519">Sets the value of a parameter to <code>NULL</code> for object and collection types, <code>OCCIPOBJECT</code> and <code>OCCIVECTOR</code>. Uses the appropriate schema and type name of the object or collection type. Support for <code>UString</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setNull() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t520">Parameter</th>
<th class="cellalignment1074" id="r1c2-t520">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t520" headers="r1c1-t520">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t520 r1c2-t520">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t520" headers="r1c1-t520">
<pre>
type
</pre></td>
<td class="cellalignment1075" headers="r3c1-t520 r1c2-t520">SQL type.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t520" headers="r1c1-t520">
<pre>
typeName
</pre></td>
<td class="cellalignment1075" headers="r4c1-t520 r1c2-t520">Type name of the object or collection.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t520" headers="r1c1-t520">
<pre>
schemaName
</pre></td>
<td class="cellalignment1075" headers="r5c1-t520 r1c2-t520">Name of the schema where the object or collection is defined.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086793"></a><a id="LNCPP21761"></a>
<hr />
<h2 class="refsect2">setNumber()</h2>
<p>Sets a parameter to a <code>Number</code> value.</p>
<p class="subhead1"><a id="LNCPP21762"></a>Syntax</p>
<pre>
void setNumber(
   unsigned int paramIndex,
   const Number &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setNumber() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t521">Parameter</th>
<th class="cellalignment1074" id="r1c2-t521">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t521" headers="r1c1-t521">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t521 r1c2-t521">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t521" headers="r1c1-t521">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t521 r1c2-t521">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086801"></a><a id="LNCPP21763"></a>
<hr />
<h2 class="refsect2">setObject()</h2>
<p>Sets the value of a parameter using an object; use the C++.lang equivalent objects for integral values. The OCCI specification specifies a standard mapping from C++ <code>Object</code> types to SQL types. The given parameter C++ object is converted to the corresponding SQL type before being sent to the database.</p>
<p class="subhead1"><a id="LNCPP21764"></a>Syntax</p>
<pre>
void setObject(
   unsigned int paramIndex,
   PObject* val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setObject() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t522">Parameter</th>
<th class="cellalignment1074" id="r1c2-t522">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t522" headers="r1c1-t522">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t522 r1c2-t522">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t522" headers="r1c1-t522">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t522 r1c2-t522">The object containing the input parameter value.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t522" headers="r1c1-t522">
<pre>
sqltyp
</pre></td>
<td class="cellalignment1075" headers="r4c1-t522 r1c2-t522">The SQL type name of the object to be set.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086809"></a><a id="LNCPP21765"></a>
<hr />
<h2 class="refsect2">setPrefetchMemorySize()</h2>
<p>Sets the amount of memory that is used internally by OCCI to store data fetched during each round trip to the server. A value of <code>0</code> means that the amount of data fetched during the round trip is constrained by the <code>FetchRowCount</code> parameter. If both parameters are nonzero, the smaller of the two is used.</p>
<p class="subhead1"><a id="LNCPP21766"></a>Syntax</p>
<pre>
void setPrefetchMemorySize(
   unsigned int bytes);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setPrefetchMemorySize() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t523">Parameter</th>
<th class="cellalignment1074" id="r1c2-t523">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t523" headers="r1c1-t523">
<pre>
bytes
</pre></td>
<td class="cellalignment1075" headers="r2c1-t523 r1c2-t523">Number of bytes used for storing data fetched during each server round trip.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086817"></a><a id="LNCPP21767"></a>
<hr />
<h2 class="refsect2">setPrefetchRowCount()</h2>
<p>Sets the number of rows that are fetched internally by OCCI during each round trip to the server. A value of <code>0</code> means that the amount of data fetched during the round trip is constrained by the <code>FetchMemorySize</code> parameter. If both parameters are nonzero, the smaller of the two is used. If both of these parameters are zero, row count internally defaults to <code>1</code> row and that is the value returned from the <code>getFetchRowCount()</code> method.</p>
<p class="subhead1"><a id="LNCPP21768"></a>Syntax</p>
<pre>
void setPrefetchRowCount(
   unsigned int rowCount);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setPrefetchRowCount() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t524">Parameter</th>
<th class="cellalignment1074" id="r1c2-t524">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t524" headers="r1c1-t524">
<pre>
rowCount
</pre></td>
<td class="cellalignment1075" headers="r2c1-t524 r1c2-t524">Number of rows to fetch for each round trip to the server.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="BBAGEGCE"></a><a id="LNCPP21769"></a>
<hr />
<h2 class="refsect2">setRef()</h2>
<p>Sets the value of a parameter to a reference. A <code>Ref&lt;T&gt;</code> instance is implicitly converted to a <code>RefAny</code> object during this call.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setRef() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t525">Syntax</th>
<th class="cellalignment1074" id="r1c2-t525">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t525" headers="r1c1-t525">
<pre>
void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny); 
</pre></td>
<td class="cellalignment1075" headers="r2c1-t525 r1c2-t525">Sets the value of a parameter to a reference.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t525" headers="r1c1-t525">
<pre>
void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny,
   const string &amp;typName,
   const string &amp;schName = "");
</pre></td>
<td class="cellalignment1075" headers="r3c1-t525 r1c2-t525">Sets the value of a parameter to a reference. If the <code>Statement</code> represents a callable PL/SQL method, pass the schema name and type name of the object represented by the <code>Ref</code>. Support for <code>string</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t525" headers="r1c1-t525">
<pre>
void setRef(
   unsigned int paramIndex,
   const RefAny &amp;refAny,
   const UString &amp;typName,
   const UString &amp;schName);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t525 r1c2-t525">Sets the value of a parameter to a reference. If the <code>Statement</code> represents a callable PL/SQL method, pass the schema name and type name of the object represented by the <code>Ref</code>. Support for <code>UString</code>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setRef() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t526">Parameter</th>
<th class="cellalignment1074" id="r1c2-t526">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t526" headers="r1c1-t526">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t526 r1c2-t526">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t526" headers="r1c1-t526">
<pre>
refAny
</pre></td>
<td class="cellalignment1075" headers="r3c1-t526 r1c2-t526">The reference.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t526" headers="r1c1-t526">
<pre>
typName
</pre></td>
<td class="cellalignment1075" headers="r4c1-t526 r1c2-t526">The type of the object [optional].</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t526" headers="r1c1-t526">
<pre>
schName
</pre></td>
<td class="cellalignment1075" headers="r5c1-t526 r1c2-t526">The schema where the object type is defined [optional].</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086833"></a><a id="LNCPP21770"></a>
<hr />
<h2 class="refsect2">setRowid()</h2>
<p>Sets a <code>Rowid</code> bytes array for a bind position.</p>
<p class="subhead1"><a id="LNCPP21771"></a>Syntax</p>
<pre>
void setRowid(
   unsigned int paramIndex,
   const Bytes &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setRowid() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t527">Parameter</th>
<th class="cellalignment1074" id="r1c2-t527">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t527" headers="r1c1-t527">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t527 r1c2-t527">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t527" headers="r1c1-t527">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t527 r1c2-t527">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086841"></a><a id="LNCPP21772"></a>
<hr />
<h2 class="refsect2">setSQL()</h2>
<p>A new SQL string can be associated with a <code>Statement</code> object using this call. Resources associated with the previous SQL statement are freed. In particular, a previously obtained result set is invalidated. If an empty SQL string, <code>""</code>, is used when the <code>Statement</code> is created, a <code>setSQL</code> method with the proper SQL string must be performed first.</p>
<p class="subhead1"><a id="LNCPP21773"></a>Syntax</p>
<pre>
void setSQL(
   const string &amp;sql);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setSQL() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t528">Parameter</th>
<th class="cellalignment1074" id="r1c2-t528">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t528" headers="r1c1-t528">
<pre>
sql
</pre></td>
<td class="cellalignment1075" headers="r2c1-t528 r1c2-t528">Any SQL statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHECDFDD"></a><a id="LNCPP21774"></a>
<hr />
<h2 class="refsect2">setSQLUString()</h2>
<p>Associate an SQL statement with this object. Unicode support: the client <code>Environment</code> should be initialized in OCCIUTIF16 mode.</p>
<p class="subhead1"><a id="LNCPP21775"></a>Syntax</p>
<pre>
void setSQLUString(
   const UString &amp;sql);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setSQLUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t529">Parameter</th>
<th class="cellalignment1074" id="r1c2-t529">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t529" headers="r1c1-t529">
<pre>
sql
</pre></td>
<td class="cellalignment1075" headers="r2c1-t529 r1c2-t529">A SQL statement in same character set as the connection source of the statement.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1073503"></a><a id="LNCPP21776"></a>
<hr />
<h2 class="refsect2">setString()</h2>
<p>Sets a parameter for a specified index.</p>
<p class="subhead1"><a id="LNCPP21777"></a>Syntax</p>
<pre>
void setString(
   unsigned int paramIndex,
   const string &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setUInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t530">Parameter</th>
<th class="cellalignment1074" id="r1c2-t530">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t530" headers="r1c1-t530">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t530 r1c2-t530">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t530" headers="r1c1-t530">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t530 r1c2-t530">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086856"></a><a id="LNCPP21778"></a>
<hr />
<h2 class="refsect2">setTimestamp()</h2>
<p>Sets a parameter to a <code>Timestamp</code> value.</p>
<p class="subhead1"><a id="LNCPP21779"></a>Syntax</p>
<pre>
void setTimestamp(
   unsigned int paramIndex,
   const Timestamp &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setTimestamp() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t531">Parameter</th>
<th class="cellalignment1074" id="r1c2-t531">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t531" headers="r1c1-t531">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t531 r1c2-t531">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t531" headers="r1c1-t531">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t531 r1c2-t531">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086864"></a><a id="LNCPP21780"></a>
<hr />
<h2 class="refsect2">setUInt()</h2>
<p>Sets a parameter to a C++ unsigned int value.</p>
<p class="subhead1"><a id="LNCPP21781"></a>Syntax</p>
<pre>
void setUInt(
   unsigned int paramIndex,
   unsigned int val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setUInt() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t532">Parameter</th>
<th class="cellalignment1074" id="r1c2-t532">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t532" headers="r1c1-t532">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t532 r1c2-t532">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t532" headers="r1c1-t532">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t532 r1c2-t532">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="CHEBAADJ"></a><a id="LNCPP21782"></a>
<hr />
<h2 class="refsect2">setUString()</h2>
<p>Sets a parameter for a specified index; globalization enabled.</p>
<p class="subhead1"><a id="LNCPP21783"></a>Syntax</p>
<pre>
void setUString(
   unsigned int paramIndex,
   const UString &amp;val);
</pre>
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setUString() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t533">Parameter</th>
<th class="cellalignment1074" id="r1c2-t533">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t533" headers="r1c1-t533">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r2c1-t533 r1c2-t533">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t533" headers="r1c1-t533">
<pre>
val
</pre></td>
<td class="cellalignment1075" headers="r3c1-t533 r1c2-t533">The parameter value.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1107158"></a><a id="LNCPP21784"></a>
<hr />
<h2 class="refsect2">setVector()</h2>
<p>Sets a parameter to a vector. This method is necessary when the type is a collection type, varrays or nested tables. The SQL Type of the elements in the collection should be compatible with the type of the vector. For example, if the collection is a varray of <code>VARCHAR2</code>, use <code>vector&lt;string&gt;.</code></p>
<div class="inftblinformal">
<table class="cellalignment1076" title="Versions of setVector() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t534">Syntax</th>
<th class="cellalignment1074" id="r1c2-t534">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt; T &gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t534 r1c2-t534">Intended for use on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS. Multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;T* &gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t534 r1c2-t534">Intended for use on platforms where partial ordering of function templates is supported. Multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;BDouble&gt; &amp;vect
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t534 r1c2-t534">Sets a <code>BDouble</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bfile&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r5c1-t534 r1c2-t534">Sets a <code>const Bfile</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Bfile&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r6c1-t534 r1c2-t534">Sets a <code>const BFile</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;BFloat&gt; &amp;vect
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r7c1-t534 r1c2-t534">Sets a <code>BFloat</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Blob&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r8c1-t534 r1c2-t534">Sets a <code>const Blob</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Blob&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r9c1-t534 r1c2-t534">Sets a <code>const Blob</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Clob&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r10c1-t534 r1c2-t534">Sets a <code>const Clob</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Clob&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r11c1-t534 r1c2-t534">Sets a <code>const Clob</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Date&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r12c1-t534 r1c2-t534">Sets a <code>const Date</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Date&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r13c1-t534 r1c2-t534">Sets a <code>const Date</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;double&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r14c1-t534 r1c2-t534">Sets a <code>const double</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;double&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r15c1-t534 r1c2-t534">Sets a <code>const double</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;float&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r16c1-t534 r1c2-t534">Sets a <code>const float</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;float&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r17c1-t534 r1c2-t534">Sets a <code>const float</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;int&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r18c1-t534 r1c2-t534">Sets a <code>const int</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;int&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r19c1-t534 r1c2-t534">Sets a <code>const int</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalDS&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r20c1-t534 r1c2-t534">Sets a <code>const IntervalDS</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalDS&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r21c1-t534 r1c2-t534">Sets a <code>const IntervalDS</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalYM&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r22c1-t534 r1c2-t534">Sets a <code>const IntervalYM</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;IntervalYM&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r23c1-t534 r1c2-t534">Sets a <code>const IntervalYM</code> vector; UTF16 support</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Number&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r24c1-t534 r1c2-t534">Sets a <code>const Number</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Number&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r25c1-t534 r1c2-t534">Sets a <code>const Number</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r26c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;RefAny&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r26c1-t534 r1c2-t534">Sets a <code>const RefAny</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r27c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;RefAny&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r27c1-t534 r1c2-t534">Sets a <code>const RefAny</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r28c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;string&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r28c1-t534 r1c2-t534">Sets a <code>const string</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r29c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;string&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r29c1-t534 r1c2-t534">Sets a <code>const string</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r30c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Timestamp&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r30c1-t534 r1c2-t534">Sets a <code>const Timestamp</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r31c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Timestamp&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r31c1-t534 r1c2-t534">Sets a <code>const Timestamp</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r32c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;unsigned int&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r32c1-t534 r1c2-t534">Sets a <code>const unsigned int</code> vector; multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r33c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;unsigned int&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r33c1-t534 r1c2-t534">Sets a <code>const unsigned int</code> vector; UTF16 support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r34c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Bfile&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r34c1-t534 r1c2-t534">Sets a <code>Bfile</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r35c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Blob&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r35c1-t534 r1c2-t534">Sets a <code>Blob</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r36c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Clob&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r36c1-t534 r1c2-t534">Sets a <code>Clob</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r37c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Date&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r37c1-t534 r1c2-t534">Sets a <code>Date</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r38c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;double&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r38c1-t534 r1c2-t534">Sets a <code>double</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r39c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;float&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r39c1-t534 r1c2-t534">Sets a <code>float</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r40c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;int&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r40c1-t534 r1c2-t534">Sets an <code>int</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r41c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalDS&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r41c1-t534 r1c2-t534">Sets an <code>IntervalDS</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r42c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;IntervalYM&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r42c1-t534 r1c2-t534">Sets an <code>IntervalYM</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r43c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Number&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r43c1-t534 r1c2-t534">Sets a <code>Number</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r44c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;RefAny&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r44c1-t534 r1c2-t534">Sets a <code>RefAn</code>y vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r45c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;string&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r45c1-t534 r1c2-t534">Sets a <code>string</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r46c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Timestamp&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r46c1-t534 r1c2-t534">Sets a <code>Timestamp</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r47c1-t534" headers="r1c1-t534">
<pre>
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;unsigned int&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r47c1-t534 r1c2-t534">Sets an <code>unsigned int</code> vector.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r48c1-t534" headers="r1c1-t534">
<pre>
template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt; T* &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r48c1-t534 r1c2-t534">Intended for use on platforms where partial ordering of function templates is <span class="italic">not</span> supported.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r49c1-t534" headers="r1c1-t534">
<pre>
template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;T&gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r49c1-t534 r1c2-t534">Intended for use on platforms where partial ordering of function templates is supported.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r50c1-t534" headers="r1c1-t534">
<pre>
template &lt;class T&gt;
void setVector(
   Statement *stmt,
   unsigned int paramIndex,
   vector&lt;Ref&lt;T&gt;&gt; &amp;vect,
   string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r50c1-t534 r1c2-t534">Available only on platforms where partial ordering of function templates is supported. <a href="#i1152343">setVectorOfRefs()</a> can be used instead.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setVector() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t535">Parameter</th>
<th class="cellalignment1074" id="r1c2-t535">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t535" headers="r1c1-t535">
<pre>
stmt
</pre></td>
<td class="cellalignment1075" headers="r2c1-t535 r1c2-t535">Statement on which parameter is to be set.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t535" headers="r1c1-t535">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r3c1-t535 r1c2-t535">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t535" headers="r1c1-t535">
<pre>
vect
</pre></td>
<td class="cellalignment1075" headers="r4c1-t535 r1c2-t535">The vector to be set.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t535" headers="r1c1-t535">
<pre>
sqltype
</pre></td>
<td class="cellalignment1075" headers="r5c1-t535 r1c2-t535">Sqltype of the collection in the database. For example, <code>CREATE TYPE num_coll AS VARRAY OF NUMBER</code>. And the column/parameter type is <code>num_coll</code>. The sqltype would be <code>num_coll</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t535" headers="r1c1-t535">
<pre>
schemaName
</pre></td>
<td class="cellalignment1075" headers="r6c1-t535 r1c2-t535">Name of the schema used</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t535" headers="r1c1-t535">
<pre>
typeName
</pre></td>
<td class="cellalignment1075" headers="r7c1-t535 r1c2-t535">Type</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1152343"></a><a id="LNCPP21785"></a>
<hr />
<h2 class="refsect2">setVectorOfRefs()</h2>
<p>Sets a parameter to a vector; is necessary when the type is a collection of <code>REF</code>s or nested tables of <code>REF</code>s.</p>
<div class="inftblinformal">
<table class="cellalignment1076" title="versions of setVectorOfRefs() method" summary="First column lists versions of the method; second column provides descriptions of these versions." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t536">Syntax</th>
<th class="cellalignment1074" id="r1c2-t536">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t536" headers="r1c1-t536">
<pre>
template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt, unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r2c1-t536 r1c2-t536">Sets a parameter to a vector; is necessary when the type is a collection of <code>REF</code>s are varrays or nested tables of <code>REF</code>s.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t536" headers="r1c1-t536">
<pre>
template  &lt;class T&gt;  void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &gt; &amp;vect,
   const string &amp;sqltype);
</pre></td>
<td class="cellalignment1075" headers="r3c1-t536 r1c2-t536">Used for multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t536" headers="r1c1-t536">
<pre>
template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt;&gt; &amp;vect,
   const string &amp;schemaName,
   const string &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r4c1-t536 r1c2-t536">Used for multibyte support.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t536" headers="r1c1-t536">
<pre>
template  &lt;class T&gt; void setVectorOfRefs(
   Statement *stmt,
   unsigned int paramIndex,
   const vector&lt;Ref&lt;T&gt; &amp;vect,
   const UString &amp;schemaName,
   const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r5c1-t536 r1c2-t536">Used for UTF16 support on platforms where partial ordering of function templates is not supported, such as Windows NT and z/OS.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t536" headers="r1c1-t536">
<pre>
template &lt;class T&gt;  void setVector(
Statement *stmt,
unsigned int paramIndex,
const vector&lt;T* &gt; &amp;vect,
const UString &amp;schemaName,
const UString &amp;typeName);
</pre></td>
<td class="cellalignment1075" headers="r6c1-t536 r1c2-t536">Used for UTF16 support on platforms where partial ordering of function templates is supported.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="inftblinformal">
<table class="cellalignment1076" title="parameters of setVectorOfRefs() method" summary="First column lists parameters; second column provides description of these parameters." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t537">Parameter</th>
<th class="cellalignment1074" id="r1c2-t537">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t537" headers="r1c1-t537">
<pre>
stmt
</pre></td>
<td class="cellalignment1075" headers="r2c1-t537 r1c2-t537">Statement on which parameter is to be set.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t537" headers="r1c1-t537">
<pre>
paramIndex
</pre></td>
<td class="cellalignment1075" headers="r3c1-t537 r1c2-t537">Parameter index; first parameter is 1, second is 2, and so on.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t537" headers="r1c1-t537">
<pre>
vect
</pre></td>
<td class="cellalignment1075" headers="r4c1-t537 r1c2-t537">Vector to be set.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t537" headers="r1c1-t537">
<pre>
sqltype
</pre></td>
<td class="cellalignment1075" headers="r5c1-t537 r1c2-t537">Sqltype of the parameter or column. Use <a href="#i1152343">setVectorOfRefs()</a> instead of specialized function <a href="#i1107158">setVector()</a> for <code>Ref&lt;T&gt;</code>.</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t537" headers="r1c1-t537">
<pre>
schemaName
</pre></td>
<td class="cellalignment1075" headers="r6c1-t537 r1c2-t537">Name of the schema used</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t537" headers="r1c1-t537">
<pre>
typeName
</pre></td>
<td class="cellalignment1075" headers="r7c1-t537 r1c2-t537">Type</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<a id="i1086880"></a><a id="LNCPP21786"></a>
<hr />
<h2 class="refsect2">status()</h2>
<p>Returns the current status of the statement. Useful when there is streamed data to be written (or read). Other methods such as <a href="#i1084015">getCurrentStreamParam()</a> and <a href="#i1083876">getCurrentIteration()</a> can be called to find out the streamed parameter that must be written and the current iteration number for an iterative or array execute. The <a href="reference027.htm#i1076893">status()</a>method can be called repeatedly to find out the status of the execution.</p>
<p>The returned value, Status, is defined in <a href="#CIAEGJCC">Table 13-43</a>.</p>
<p class="subhead1"><a id="LNCPP21787"></a>Syntax</p>
<pre>
Status status() const;
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="reference029.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="reference031.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
