<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Relational Programming</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:48Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="install.htm" title="Previous" type="text/html" />
<link rel="Next" href="objects.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/54</span> <!-- End Header --><a id="CHDJCICB"></a><a id="LNCPP003"></a><a id="i1000940"></a>
<h1 class="chapter"><span class="secnum">3</span> Relati<a id="sthref94"></a>onal Programming</h1>
<p>This chapter describes the basics of developing C++ applications using Oracle C++ Call Interface (OCCI) to work with data stored in relational databases.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1005366">Connecting to a Database</a></p>
</li>
<li>
<p><a href="#BAGDHEFJ">Pooling Connections</a></p>
</li>
<li>
<p><a href="#CHDHCIGI">Executing SQL DDL and DML Statements</a></p>
</li>
<li>
<p><a href="#CHDFCCDG">Types of SQL Statements in the OCCI Environment</a></p>
</li>
<li>
<p><a href="#i1010061">Executing SQL Queries</a></p>
</li>
<li>
<p><a href="#i1010067">Executing Statements Dynamically</a></p>
</li>
<li>
<p><a href="#i1010071">Committing a Transaction</a></p>
</li>
<li>
<p><a href="#BAGJEAHJ">Caching Statements</a></p>
</li>
<li>
<p><a href="#i1012597">Handling Exceptions</a></p>
</li>
</ul>
<a id="i1005366"></a><a id="LNCPP0031"></a>
<div class="sect1">
<h2 class="sect1">Connectin<a id="sthref95"></a><a id="sthref96"></a><a id="sthref97"></a>g to a Database</h2>
<p>You have several different options for how your application connects to the database.</p>
<a id="i1011582"></a><a id="LNCPP00311"></a>
<div class="sect2">
<h3 class="sect2">Creating and Termin<a id="sthref98"></a>ating an Environment</h3>
<p>All OCCI processing takes place inside the <code>Environment</code> class. An OCCI environment provides application modes and user-specified memory management functions. <a href="#CHDGHBEF">Example 3-1</a> illustrates how to create an OCCI environment.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGHBEF"></a><a id="LNCPP20105"></a>Example 3-1 <a id="sthref99"></a>How to Create an OCCI Environment</p>
<pre>
Environment *env = Environment::createEnvironment();
</pre></div>
<!-- class="example" -->
<p>All OCCI objects created with the <code>create</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> methods (connections, connection pools, statements) must be explicitly terminated. When appropriate, you must also explicitly terminate the environment. <a href="#CHDJFFII">Example 3-2</a> shows how you terminate an OCCI environment.</p>
<div class="example">
<p class="titleinexample"><a id="CHDJFFII"></a><a id="LNCPP20106"></a>Example 3-2 <a id="sthref100"></a>How to Terminate an OCCI Environment</p>
<pre>
Environment::terminateEnvironment(env);
</pre></div>
<!-- class="example" -->
<p>In addition, an OCCI envi<a id="sthref101"></a>ronment should have a scope that is larger than the scope of the following object types created inside that environment: <code>Agent</code>, <code>Bytes</code>, <code>Date</code>, <code>Message</code>, <code>IntervalDS</code>, <code>IntervalYM</code>, <code>Subscription</code>, and <code>Timestamp</code>. This rule does not apply to <code>BFile</code>, <code>Blob</code>, and <code>Clob</code> objects, as demonstrated in <a href="#CHDJJEHF">Example 3-3</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDJJEHF"></a><a id="LNCPP20107"></a>Example 3-3 How to Use Environment Scope with Blob Objects</p>
<pre>
const <a id="sthref102"></a>string userName = "HR";
const string password = "<span class="italic">password</span>";
const string connectString = "";

Environment *env = Environment::createEnvironment();
{
   Connection *conn = env-&gt;createConnection(
      userName, password, connectString);
   Statement *stmt = conn-&gt;createStatement(
      "SELECT blobcol FROM mytable");
   ResultSet *rs = stmt-&gt;executeQuery();
   rs-&gt;next();
   Blob b = rs-&gt;getBlob(1);
   cout &lt;&lt; "Length of BLOB : " &lt;&lt; b.length();
   ...
   stmt-&gt;closeResultSet(rs);
   conn-&gt;terminateStatement(stmt);
   env-&gt;terminateConnection(conn);
}
Environment::terminateEnvironment(env);
</pre></div>
<!-- class="example" -->
<p>If the application requires access to objects in the global scope, such as static or global variables, these objects must be set to <code>NULL</code> before the environment is terminated. In the preceding example, if <code>b</code> was a global variable, a <code>b.setNull()</code> call has to be made before the <code>terminateEnvironment()</code> call.</p>
<p>You can use the<a id="sthref103"></a><a id="sthref104"></a> mode parameter of the <code>createEnvironment()</code> method to specify that your application:</p>
<ul>
<li>
<p>Runs in a threaded environment (<code>THREADED_MUTEXED</code> or <code>THREADED_UNMUTEXED</code>)</p>
</li>
<li>
<p>Uses objects (<code>OBJECT</code>)</p>
</li>
</ul>
<p>The mode can be set independently in each environment.</p>
</div>
<!-- class="sect2" -->
<a id="i1011550"></a><a id="LNCPP00312"></a>
<div class="sect2">
<h3 class="sect2">Opening and Closing a Connection</h3>
<p>The <code>Environment</code> class is the factory class for creating <code>Connection</code> objects. You first create an <code>Environment</code> instance, and then use it to enable users to connect to the database through the <code>crea<a id="sthref105"></a>teConnection()</code> method.</p>
<p><a href="#CHDIAIEJ">Example 3-4</a> creates an environment instance and then uses it to create a database connection for a database user <code>HR</code> with the appropriate password.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIAIEJ"></a><a id="LNCPP20108"></a>Example 3-4 How to Create an Environment and then a Connection to the Database</p>
<pre>
Environment *env = Env<a id="sthref106"></a>ironment::createEnvironment();
Connecti<a id="sthref107"></a>on *conn = env-&gt;createConnection("HR", "<span class="italic">password</span>");
</pre></div>
<!-- class="example" -->
<p>You must use the <code>termin<a id="sthref108"></a>ateConnection()</code> method shown in the following code example to explicitly close the connection at the end of the working session. In addition, the OCCI environment should be explicitly terminated.</p>
<p>You should remember that all objects (<code>Ref</code>s, <code>Bfile</code>s, <code>Producer</code>s, <code>Consumer</code>s, and so on) created or named within a <code>Connection</code> instance must be within the inner scope of that instance; the scope of these objects must be explicitly terminated before the <code>Connection</code> is terminated. <a href="#CHDDCJEG">Example 3-5</a> demonstrates how to terminate the connection and the environment.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDCJEG"></a><a id="LNCPP20109"></a>Example 3-5 How to Terminate a Connection to the Database and the Environment</p>
<pre>
env-&gt;terminate<a id="sthref109"></a>Connection(conn);
Env<a id="sthref110"></a>ironment::terminateEnvironment(env);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAGDHEFJ"></a><a id="LNCPP0032"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref111"></a>Pooling Connections</h2>
<p>This section discusses how to use the connection pooling feature of OCCI. The information covered includes the following topics:</p>
<ul>
<li>
<p><a href="#i1008381">Using Connection Pools</a></p>
</li>
<li>
<p><a href="#i1016415">Stateless Connection Pooling</a></p>
</li>
</ul>
<p>The primary difference between the two is that <code>StatelessConnectionPool</code>s are used for applications that do not depend on state considerations; these applications can benefit from performance improvements available through use of pre-authenticated connections.</p>
<a id="i1008381"></a><a id="LNCPP00321"></a>
<div class="sect2">
<h3 class="sect2">Using<a id="sthref112"></a> Con<a id="sthref113"></a>nection Pools</h3>
<p>For many middle-tier applications, connections to the database should be enabled for a large number of threads. Because each thread exists for a relatively short time, opening a connection to the database for every thread would be inefficient use of connections, and would result in poor performance.</p>
<p>By employing the <span class="bold">connection pooling</span> feature, your application can create a small set of connections available to a large number of threads, enabling you to use database resources very efficiently.</p>
<a id="LNCPP03211"></a>
<div class="sect3"><a id="sthref114"></a>
<h4 class="sect3">Creating a C<a id="sthref115"></a>onnection Pool</h4>
<p>To create a connection pool, you use the <a id="sthref116"></a><a href="reference014.htm#i1090287">createConnectionPool()</a> method, as demonstrated in <a href="#CHDHIHFG">Example 3-6</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDHIHFG"></a><a id="LNCPP20110"></a>Example 3-6 The createConnectionPool() Method</p>
<pre>
virtu<a id="sthref117"></a>al ConnectionPool* createConnectionPool(
   const string &amp;poolUserName,
   const string &amp;poolPassword,
   const string &amp;connectString ="", 
   unsigned int minConn =0,
   unsigned int maxConn =1,
   unsigned int incrConn =1) = 0;
</pre></div>
<!-- class="example" -->
<p>The following parameters are used in <a href="#CHDHIHFG">Example 3-6</a>:</p>
<ul>
<li>
<p><code>poolUserName</code>: The owner of the connection pool</p>
</li>
<li>
<p><code>poolPassword</code>: The password to gain access to the connection pool</p>
</li>
<li>
<p><code>connectString</code>: The database name that specifies the database server to which the connection pool is related</p>
</li>
<li>
<p><code>minConn</code>: The minimum number of connections to be opened when the connection pool is created</p>
</li>
<li>
<p><code>maxConn</code>: The maximum number of connections that can be maintained by the connection pool. When the maximum number of connections are open in the connection pool, and all the connections are busy, an OCCI method call that needs a connection waits until it gets one, unless <code>setErrorOnBusy()</code> was called on the connection pool</p>
</li>
<li>
<p><code>incrConn</code>: The additional number of connections to be opened when all the connections are busy and a call needs a connection. This increment is implemented only when the total number of open connections is less than the maximum number of connections that can be opened in that connection pool.</p>
</li>
</ul>
<p><a href="#CHDIHAEH">Example 3-7</a> demonstrates how you can create a connection pool.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIHAEH"></a><a id="LNCPP20111"></a>Example 3-7 How to Create a Connection Pool</p>
<pre>
const string connectString = "";
unsigned int maxConn = 5;
unsigned int minConn = 3;
unsigned int incrConn = 2;

ConnectionPool *connPool = env-&gt;createConnectionPool(
   poolUserName,
   poolPassword,
   connectString, 
   minConn,
   maxConn,
   incrConn);
</pre></div>
<!-- class="example" -->
<p>You can also configure all these attributes dynamically. This lets you design an application that has the flexibility of reading the current load (number of open connections and number of busy connections) and tune these attributes appropriately. In addition, you can use the <code>setTimeOut()</code> method to time out the connections that are idle for more than the specified time. The OCCI terminates idle connections periodically to maintain an optimum number of open connections.</p>
<p>There is no restriction that one environment must have only one connection pool. There can be multiple connection pools in a single OCCI environment, and these can connect to the same or different databases. This is useful for applications requiring load balancing.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP03212"></a>
<div class="sect3"><a id="sthref118"></a>
<h4 class="sect3">Proxy C<a id="sthref119"></a>onnections</h4>
<p>If you authorize the connection pool user to act as a proxy for other connections, then no password is required to log in database users who use connections in the connection pool.</p>
<p>A proxy connection can be created by using either of the following two versions of the <a href="reference011.htm#i1081065">createProxyConnection()</a> method, demonstrated in <a href="#CHDGAHDH">Example 3-8</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGAHDH"></a><a id="LNCPP20112"></a>Example 3-8 The createProxyConnection() Method</p>
<pre>
ConnectionPool-&gt;<a id="sthref120"></a>crea<a id="sthref121"></a>teProxyConnection( 
   const string &amp;username,
   Connection::ProxyType proxyType = Connection::PROXY_DEFAULT);
</pre></div>
<!-- class="example" -->
<p>or</p>
<pre>
ConnectionPool-&gt;crea<a id="sthref122"></a>teProxyConnection( 
   const string &amp;username,
   string roles[], 
   int numRoles,
   Connection::ProxyType proxyType = Connection::PROXY_DEFAULT);
</pre>
<p>The following parameters are used in the previous method example:</p>
<ul>
<li>
<p><code>roles[]</code>: The roles array specifies a list of roles to be activated after the proxy connection is activated for the client</p>
</li>
<li>
<p><code>Connection::ProxyType proxyType = Connection::PROXY_DEFAULT</code>: The enumeration <code>Connection::ProxyType</code> lists constants representing the various ways of achieving proxy authentication. <code>PROXY_DEFAULT</code> is used to indicate that <code>name</code> represents a database username and is the only proxy authentication mode currently supported.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1016415"></a><a id="LNCPP03222"></a>
<div class="sect2">
<h3 class="sect2">Stateless Connection Pooling</h3>
<p>Stateless Connection Pooling is specifically designed for use in applications that require short connection times and do not deal with state considerations. The primary benefit of Stateless Connection Pooling is increased performance, since the time consuming connection and authentication protocols are eliminated.</p>
<p>Stateless Connection Pools create and maintain a group of stateless, authenticated connection to the database that can be used by multiple threads. Once a thread finishes using its connection, it should release the connection back to the pool. If no connections are available, new ones are generated. Thus, the number of connections in the pool can increase dynamically.</p>
<p>Some connections in the pool may be tagged with specific properties. The user may request a default connection, set certain attributes, such as Globalization Support settings, then tag it and return it to the pool. When a connection with same attributes is needed, a request for a connection with the same tag can be made, and one of several connections in the pool with the same tag can be reused. The tag on a connection can be changed or reset.</p>
<p>Proxy connections may also be created and maintained through the Stateless Connection Pooling interface.</p>
<p>Stateless connection pooling improves the scalability of the mid-tier applications by multiplexing the connections. However, connections from a <code>StatelessConnectionPool</code> should not be used for long transactions, as holding connections for long periods leads to reduced concurrency.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
<ul>
<li>
<p>OCCI does not check for the correctness of the connection-tag pair. You are responsible for ensuring that connections with different client-side properties do not have the same tag.</p>
</li>
<li>
<p>Your application should commit or rollback any open transactions before releasing the connection back to the pool. If this is not done, Oracle automatically <span class="italic">commits</span> any open transactions when the connection is released.</p>
</li>
</ul>
</div>
<p>There are two types of stateless connection pools:</p>
<ul>
<li>
<p>A <span class="bold">homogeneous pool</span> is one in which all the connections are authenticated with the username and password provided at the time of creation of the pool. Therefore, all connections have the same authentication context. Proxy connections are not allowed in such pools.</p>
</li>
<li>
<p>Different connections can be authenticated by different usernames in <span class="bold">heterogeneous pool</span>s. Proxy connections can also exist in heterogeneous pools, provided the necessary privileges for creating them are granted on the server. Additionally, heterogeneous pools support external authentication.</p>
</li>
</ul>
<p><a href="#CHDDEGEJ">Example 3-9</a> illustrates a basic usage scenario for connection pools. <a href="#BAGBAFDC">Example 3-10</a> presents the usage scenario for creating and using a homogeneous stateless connection pool, while <a href="#BAGIBIDA">Example 3-11</a> covers the use of heterogeneous pools.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDEGEJ"></a><a id="LNCPP20113"></a>Example 3-9 How to Use a StatelessConnectionPool</p>
<p>Because the pool size is dynamic, in response to changing user requirements, up to the specified maximum number of connections. Assume that a stateless connection pool is created with the following parameters:</p>
<ul>
<li>
<p><code>minConn&nbsp;&nbsp;=&nbsp;&nbsp;5</code></p>
</li>
<li>
<p><code>incrConn&nbsp;=&nbsp;&nbsp;2</code></p>
</li>
<li>
<p><code>maxConn&nbsp;&nbsp;=&nbsp;10</code></p>
</li>
</ul>
<p>Five connections are opened when the pool is created:</p>
<ul>
<li>
<p><code>openConn&nbsp;=&nbsp;&nbsp;5</code></p>
</li>
</ul>
<p>Using <code>get[AnyTagged][Proxy]Connection()</code> methods, the user consumes all 5 open connections:</p>
<ul>
<li>
<p><code>openConn&nbsp;=&nbsp;&nbsp;5</code></p>
</li>
<li>
<p><code>busyConn&nbsp;=&nbsp;&nbsp;5</code></p>
</li>
</ul>
<p>When the user wants another connection, the pool opens <code>2</code> new connections and returns one of them to the user.</p>
<ul>
<li>
<p><code>openConn&nbsp;=&nbsp;&nbsp;7</code></p>
</li>
<li>
<p><code>busyConn&nbsp;=&nbsp;&nbsp;6</code></p>
</li>
</ul>
<p>The upper limit for the number of connections that can be pooled is <code>maxConn</code> specified at the time of creation of the pool.</p>
<p>The user can also modify the pool parameters after the pool is created using the call to <code>setPoolSize()</code> method.</p>
<p>If a heterogeneous pool is created, the <code>incrConn</code> and <code>minConn</code> arguments are ignored.</p>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="BAGBAFDC"></a><a id="LNCPP20114"></a>Example 3-10 How to Create and Use a Homogeneous Stateless Connection Pool</p>
<p>To create a homogeneous stateless connection pool, follow these basic steps and pseudocode commands:</p>
<ol>
<li>
<p>Create a stateless connection pool in the <code>HOMOGENEOUS</code> mode of the <code>Environment</code> with a <a href="reference014.htm#CHECBAHJ">createStatelessConnectionPool()</a> call.</p>
<pre>
StatelessConnectionPool *scp = 
      env-&gt;createStatelessConnectionPool(
         username, passwd, connectString, maxCon, minCon, incrCon,
         StatelessConnectionPool::HOMOGENEOUS );
</pre></li>
<li>
<p>Get a new or existing connection from the pool by calling the <a href="reference029.htm#CHEJHBEH">getConnection()</a> method.</p>
<pre>
Connection *conn=scp-&gt;getConnection(tag);
</pre>
<p>During the execution of this call, the pool is searched for a connection with a matching tag. If such a connection exists, it is returned to the user. Otherwise, an untagged connection authenticated by the pool username and password is returned.</p>
<p>Alternatively, you can obtain a connection with <a href="reference029.htm#CHEFGDCE">getAnyTaggedConnection()</a> call. It returns a connection with a non-matching tag if neither a matching tag or <code>NULL</code> tag connections are available. You should verify the tag returned by a <a href="reference010.htm#i1154109">getTag()</a> call on <code>Connection</code>.</p>
<pre>
Connection *conn=scp-&gt;getAnyTaggedConnection(tag);
string tag=conn-&gt;getTag();
</pre></li>
<li>
<p>Use the connection.</p>
</li>
<li>
<p>Release the connection to the <code>StatelessConnectionPool</code> through the <a href="reference029.htm#CHEJHHBI">releaseConnection()</a> call.</p>
<pre>
scp-&gt;releaseConnection(conn, tag);
</pre>
<p>An empty tag, <code>""</code>, untags the <code>Connection</code>.</p>
<p>You have an option of retrieving the connection from the <code>StatelessConnectionPool</code> using the same <code>tag</code> parameter value in a <a href="reference029.htm#CHEJHBEH">getConnection()</a> call.</p>
<pre>
Connection *conn=scp-&gt;getConnection(tag);
</pre>
<p>Instead of returning the <code>Connection</code> to the <code>StatelessConnectionPool,</code> you may want to destroy it using the <a href="reference014.htm#i1079845">terminateConnection()</a> call.</p>
<pre>
scp-&gt;terminateConnection(conn);
</pre></li>
<li>
<p>Destroy the pool through a<a href="reference014.htm#CHEDDEAJ">terminateStatelessConnectionPool()</a> call on the <code>Environment</code> object.</p>
<pre>
env-&gt;terminateStatelessConnectionPool(scp);
</pre></li>
</ol>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="BAGIBIDA"></a><a id="LNCPP20115"></a>Example 3-11 How to Create and Use a Heterogeneous Stateless Connection Pool</p>
<p>To create a heterogeneous stateless connection pool, follow these basic steps and pseudocode commands:</p>
<ol>
<li>
<p>Create a stateless connection pool in the <code>HETEROGENEOUS</code> mode of the <code>Environment</code> with a <a href="reference014.htm#CHECBAHJ">createStatelessConnectionPool()</a> call.</p>
<pre>
StatelessConnectionPool *scp = 
      env-&gt;createStatelessConnectionPool(
         username, passwd, connectString, maxCon, minCon, incrCon, 
         StatelessConnectionPool::HETEROGENEOUS);
</pre>
<p>If you are enabling external authentication, you must also activate the <code>USES_EXT_AUTH</code> mode in the <a href="reference014.htm#CHECBAHJ">createStatelessConnectionPool()</a> call.</p>
<pre>
StatelessConnectionPool *scp = 
      env-&gt;createStatelessConnectionPool(
         username, passwd, connectString, maxCon, minCon, incrCon, 
         StatelessConnectionPool::PoolType(
            StatelessConnectionPool::USES_EXT_AUTH|
            StatelessConnectionPool::HETEROGENEOUS));
</pre></li>
<li>
<p>Get a new or existing connection from the pool by calling the <a href="reference029.htm#CHEJHBEH">getConnection()</a> method of the <code>StatelessConnectionPool</code> that is overloaded for the heterogeneous pool option.</p>
<pre>
Connection *conn=scp-&gt;getConnection(username, passwd, tag);
</pre>
<p>During the execution of this call, the heterogeneous pool is searched for a connection with a matching tag. If such a connection exists, it is returned to the user. Otherwise, an appropriately authenticated untagged connection with a <code>NULL</code> tag is returned.</p>
<p>Alternatively, you can obtain a connection with <a href="reference029.htm#CHEFGDCE">getAnyTaggedConnection()</a> call that has been overloaded for heterogeneous pools. It returns a connection with a non-matching tag if neither a matching tag or <code>NULL</code> tag connections are available. You should verify the tag returned by a <a href="reference010.htm#i1154109">getTag()</a> call on <code>Connection</code>.</p>
<pre>
Connection *conn=scp-&gt;getAnyTaggedConnection(username, passwd, tag);
string tag=conn-&gt;getTag();
</pre>
<p>You may also want to use proxy connections by <a href="reference029.htm#CHEEECCC">getProxyConnection()</a> or <a href="reference029.htm#CHEFDDJF">getAnyTaggedProxyConnection()</a> calls on the <code>StatelessConnectionPool</code>.</p>
<pre>
Connection *pconn = scp-&gt;getProxyConnection(proxyName, roles{}, 
                                           nuRoles, tag, proxyType);
Connection *pconn = scp-&gt;getAnyTaggedProxyConnection( proxyName, tag,
                                                     proxyType);
</pre>
<p>If the pool supports external authentication, use the following <a href="reference029.htm#CHEJHBEH">getConnection()</a> call:</p>
<pre>
Connection *conn=scp-&gt;getConnection();
</pre></li>
<li>
<p>Use the connection.</p>
</li>
<li>
<p>Release the connection to the <code>StatelessConnectionPool</code> through the <a href="reference029.htm#CHEJHHBI">releaseConnection()</a> call.</p>
<pre>
scp-&gt;releaseConnection(conn, tag);
</pre>
<p>An empty tag, <code>""</code>, untags the <code>Connection</code>.</p>
<p>You have an option of retrieving the connection from the <code>StatelessConnectionPool</code> using the same <code>tag</code> parameter value in a <a href="reference029.htm#CHEJHBEH">getConnection()</a> call.</p>
<pre>
Connection *conn=scp-&gt;getConnection(tag);
</pre>
<p>Instead of returning the <code>Connection</code> to the <code>StatelessConnectionPool,</code> you may want to destroy it using the <a href="reference014.htm#i1079845">terminateConnection()</a> call.</p>
<pre>
scp-&gt;terminateConnection(conn);
</pre></li>
<li>
<p>Destroy the pool through a <a href="reference014.htm#CHEDDEAJ">terminateStatelessConnectionPool()</a> call on the <code>Environment</code> object.</p>
<pre>
env-&gt;terminateStatelessConnectionPool(scp);
</pre></li>
</ol>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDGIFFF"></a><a id="LNCPP00323"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref123"></a><a id="sthref124"></a>Database Resident Connection Pooling</h3>
<p>Enterprise-level applications must typically handle a high volume of simultaneous user sessions that are implemented as persistent connections to the database. The memory overhead of creating and managing these connections has significant implications for the performance of the database.</p>
<p>Database Resident Connection Pooling solves the problem of too many persistent connections by providing a pool of dedicated servers for handling a large set of application connections, thus enabling the database to scale to tens of thousands of simultaneous connections. It significantly reduces the memory footprint on the database tier and increases the scalability of both the database and middle tiers. Database Resident Connection Pooling is designed for architectures with multi-process application servers and multiple middle tiers that cannot accommodate connection pooling in the middle tier.</p>
<p>Database Resident Connection Pooling architecture closely follows the default dedicated model for connecting to an Oracle Database instance; however, it removes the overhead of assigning a specific server to each connection. On the server tier, most connections are inactive at any given time, and each of these connections consumes memory. Therefore, database systems that support high connection volumes face the risk of quickly exhausting all available memory. Database Resident Connection Pooling allows a connection to use a dedicated server, which combines an Oracle server process and a user session. Once the connection becomes inactive, it returns its resources to the pool, for use by similar connections.</p>
<p>In multithreaded middle tiers that are capable of comprehensive connection pooling, the issue of unused connections is somewhat different. As the number of middle tiers increases, each middle tier privately holds several connections to the database; these connections cannot be shared with other middle tiers. Locating the connection pool on the database instead enables the sharing of connections across similar clients.</p>
<p>Database Resident Connection Pooling supports password-based authentication, statement caching, tagging, and <a class="olink RACAD7128" href="../../rac.112/e41960/hafeats.htm#RACAD7128">Fast Application Notification</a>. You can also use client-side stateless connection pooling with the database resident connection pooling.</p>
<p>Note that clients that hold connections from the database resident connection pool are persistently connected to a background Connection Broker process. The Connection Broker implements the pool functionality and multiplexes inbound client connections to a pool of dedicated server processes. Clients that do not use the connection pool use dedicated server processes instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1896" href="../../server.112/e40540/dist_pro.htm#CNCPT1896"><span class="italic">Oracle Database Concepts</span></a> for details about the architecture of Database Resident Connection Pooling</p>
</li>
<li>
<p><a class="olink ADMIN00502" href="../../server.112/e25494/manproc.htm#ADMIN00502"><span class="italic">Oracle Database Administrator's Guide</span></a> for details on configuring Database Resident Connection Pooling</p>
</li>
<li>
<p><a class="olink ARPLS215" href="../../appdev.112/e40758/d_connection_pool.htm#ARPLS215"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, for the <code>DBMS_CONNECTION_POOL</code> package</p>
</li>
</ul>
</div>
<a id="CHDFCBGD"></a><a id="LNCPP03231"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref125"></a>Administrating Database Resident Connection Pools</h4>
<p>To implement database resident connection pooling, it must first be enabled on the system by a user with <code>SYSDBA</code> privileges. See <a href="#CHDGIHID">Example 3-12</a> for steps necessary to initiate and maintain a database resident connection pool.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGIHID"></a><a id="LNCPP20116"></a>Example 3-12 How to Administer the Database Resident Connection Pools</p>
<p>A user with <code>SYSDBA</code> privileges must perform the next steps.</p>
<ol>
<li>
<p>Connect to the database.</p>
<pre>
SQLPLUS / AS SYSDBA
</pre></li>
<li>
<p>[Optional] Configure the parameters of the database resident connection pool. The default values of a pool are set in the following way:</p>
<pre>
DBMS_CONNECTION_POOL.CONFIGURE_POOL( 'SYS_DEFAULT_CONNECTION_POOL', 
                                      MIN=&gt;10,
                                      MAX=&gt;200);
</pre></li>
<li>
<p>[Optional] Alter specific parameters of the database resident connection pool without affecting other parameters.</p>
<pre>
DBMS_CONNECTION_POOL.ALTER_PARAM(  'SYS_DEFAULT_CONNECTION_POOL', 
                                   'INACTIVITY_TIMEOUT', 
                                    10);
</pre></li>
<li>
<p>Start the connection pool. After this step, the connection pool is available to all qualified clients.</p>
<pre>
DBMS_CONNECTION_POOL.START_POOL( 'SYS_DEFAULT_CONNECTION_POOL');
</pre></li>
<li>
<p>[Optional] Change the parameters of the database resident connection pool.</p>
<pre>
DBMS_CONNECTION_POOL.ALTER_PARAM( 'SYS_DEFAULT_CONNECTION_POOL', 
                                  'MAXSIZE', 
                                   20);
</pre></li>
<li>
<p>[Optional] The configuration of the connection pool can be reset to default values.</p>
<pre>
DBMS_CONNECTION_POOL.RESTORE_DEFAULTS ( 'SYS_DEFAULT_CONNECTION_POOL');
</pre></li>
<li>
<p>Stop the pool. Note that pool information is persistent: stopping the pool does not destroy the pool name and configuration parameters.</p>
<pre>
DBMS_CONNECTION_POOL.STOP_POOL();
</pre></li>
</ol>
</div>
<!-- class="example" -->
<p>Note that in Oracle RAC configurations, the database resident connection pool starts on all configured nodes. If the pool is not stopped, the starting configuration is persistent across instance restarts: the pool is started automatically when the instance comes up.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHJIHA"></a><a id="LNCPP03232"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref126"></a>Using Database Resident Connection Pools</h4>
<p>To use database resident connection pooling, you must specify the connection class and connection purity. If the application requests a connection that cannot be potentially tainted with prior connection state, it must specify purity as <code>NEW</code>; Oracle recommends this approach if clients from different geographic locale settings share the same database instance. When the application can use a previously used connection, the purity should be set to <code>SELF</code>. In conjunction with connection class and purity specifications, you can also use an application-specific tags to choose a previously used connection that has the desired state. The default connection pool name, as demonstrated in <a href="#CHDGIHID">Example 3-12</a>, is <code>SYS_DEFAULT_CONNECTION_POOL.</code></p>
<p>This feature overloads <a href="reference029.htm#i1155046">StatelessConnectionPool Class</a> and <a href="reference014.htm#i1119099">Environment Class</a> interfaces for retrieving a connection (<code>getConnection()</code> and <code>getProxyConnection()</code>) by adding the parameters that specify connection class and purity. Every connection request outside of a client-side connection pool has a default purity of <code>NEW</code>. Connection requests inside a client-side connection pool have a default purity of <code>SELF</code>.</p>
<div class="example">
<p class="titleinexample"><a id="LNCPP20117"></a><a id="sthref127"></a>Example 3-13 How to Get a Connection from a Database Resident Connection Pool</p>
<pre>
conn1 = env-&gt;createConnection (/*username */"hr",
              /*password*/ "<span class="italic">password</span>", /* database*/ "inst1_cmon",
              <span class="bold">/* connection class */"TESTCC", /* purity */Connection::SELF);</span>
stmt1 = conn1-&gt;createStatement("select count(*) from emp");
rs=stmt1-&gt;executeQuery();
while (rs-&gt;next())
     {
        int num = rs-&gt;getInt(1);
        sprintf((char *)tmp, "%d", num);
        cout &lt;&lt; tmp &lt;&lt; endl;
     }
stmt1-&gt;closeResultSet(rs);
conn1-&gt;terminateStatement(stmt1);
env-&gt;terminateConnection(conn1);
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="LNCPP20118"></a><a id="sthref128"></a>Example 3-14 Using Client-Side Pool and Server-Side Pool</p>
<pre>
StatelessConnectionPool *scPool;
OCCIConnection *conn1, *conn2;
 scPool = env-&gt;createStatelessConnectionPool
      (poolUserName, poolPassword, connectString, maxConn,
       minConn, incrConn, StatelessConnectionPool::HOMOGENEOUS);
 
conn1= scPool-&gt;getConnection( <span class="bold">/* Connection class name */"TESTCC",</span>
                              <span class="bold">/* Purity */ Connection::SELF);</span>
 /* or, for proxy coonnections */
 conn2= scPool-&gt;getProxyConnection(<span class="bold">/* username*/ "HR_PROXY",</span>
                     <span class="bold">/*Connection class */"TESTCC", /* Purity */Connection::SELF);</span>
/* or, for getting a tagged connection */
conn3 = scPool-&gt;getConnection(<span class="bold">/*connection class */"TESTCC", </span>
                              <span class="bold">/*purity*/ Connection::SELF, </span>
                              <span class="bold">/*tag*/ "TESTTAG");</span>
/* Releasing a tagged connection is done presently */
scPool-&gt;releaseConnection(conn3, "TESTTAG");
 
/* To specify purity as new */
conn4 = scPool-&gt;getConnection(<span class="bold">/* connection class */"TESTCC",/* purity of new */</span>
                              <span class="bold">Connection::NEW);</span>
 
/* Get a connection using username and password */
conn5 = scPool-&gt;getConnection (<span class="bold">username, password,"TESTCC", Connection::SELF);</span>
 
/* Using roles when asking for a connection */
conn6 = scPool-&gt;getProxyConnection (username, roles, nRoles,<span class="bold">"TESTCC",</span>
                                    <span class="bold">Connection::SELF);</span>
 
...
 
/* The other code continues as is...writing for clarity */
   ...
    stmt1=conn1-&gt;createStatement  ("INSERT INTO emp values (:c1, :c2)");
    stmt1-&gt;setInt(1, thrid);
    stmt1-&gt;setString(2, "Test");
    int count = stmt1-&gt;executeUpdate ();
    conn1-&gt;commit();
    conn1-&gt;terminateStatement(stmt1);
/* Release the connection */
    scPool-&gt;releaseConnection (conn1);
...
  env-&gt;terminateStatelessConnectionPool (scPool);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHCIGI"></a><a id="LNCPP0033"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Executing S<a id="sthref129"></a>QL DDL and DML<a id="sthref130"></a> Statements</h2>
<p>SQL is the industry-wide language for working with relational databases. In OCCI you execute SQL commands through the <code>Statement</code> class.</p>
<a id="LNCPP00331"></a>
<div class="sect2"><a id="sthref131"></a>
<h3 class="sect2">Creating a Sta<a id="sthref132"></a>tement Object</h3>
<p>To create a <code>Statement</code> object, call the <code>createStatement()</code> method of the <code>Connection</code> object, as demonstrated in <a href="#CHDGABGG">Example 3-15</a>,</p>
<div class="example">
<p class="titleinexample"><a id="CHDGABGG"></a><a id="LNCPP20119"></a>Example 3-15 How to Create a Statement</p>
<pre>
Statement *stmt = conn-&gt;cr<a id="sthref133"></a><a id="sthref134"></a>eateStatement();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1007916"></a><a id="LNCPP00332"></a>
<div class="sect2">
<h3 class="sect2">Creating a Sta<a id="sthref135"></a>tement Object that Executes SQL Commands</h3>
<p>Once you have created a <code>Statement</code> object, execute SQL commands by calling the <a href="reference030.htm#i1104912">execute()</a>, <a href="reference030.htm#i1083751">executeUpdate()</a>, <a href="reference030.htm#i1073494">executeArrayUpdate()</a>, or <a href="reference030.htm#i1083750">executeQuery()</a> methods on the <code>Statement</code> object. These methods are used for the following purposes:</p>
<ul>
<li>
<p><a href="reference030.htm#i1104912">execute()</a> executes all nonspecific statement types</p>
</li>
<li>
<p><a id="sthref136"></a><a href="reference030.htm#i1083751">executeUpdate()</a> executes DML and DDL statements</p>
</li>
<li>
<p><a id="sthref137"></a><a href="reference030.htm#i1073494">executeArrayUpdate()</a> executes multiple DML statements</p>
</li>
<li>
<p><a id="sthref138"></a><a href="reference030.htm#i1083750">executeQuery()</a> executes a query</p>
</li>
</ul>
<a id="i1005989"></a><a id="LNCPP03221"></a>
<div class="sect3">
<h4 class="sect3">Creating a Database Table</h4>
<p><a href="#CHDBIFIA">Example 3-16</a> demonstrates how you can create a database table using the <a href="reference030.htm#i1083751">executeUpdate()</a> method.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBIFIA"></a><a id="LNCPP20120"></a>Example 3-16 How to Create a Database Table Using the executeUpdate() Method</p>
<pre>
stmt-&gt;executeUpdate("CREATE TABLE shopping_basket
   (item_number VARCHAR2(30), quantity NUMBER(3))");
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="i1005996"></a><a id="LNCPP03223"></a>
<div class="sect3">
<h4 class="sect3">Inserting Values into a Database Table</h4>
<p>Similarly, you can execute a SQL <code>INSERT</code> statement by invoking the <a href="reference030.htm#i1083751">executeUpdate()</a> method, as demonstrated in <a href="#CHDCIBJA">Example 3-17</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCIBJA"></a><a id="LNCPP20121"></a>Example 3-17 How to Add Records Using the executeUpdate() Method</p>
<pre>
stmt-&gt;executeUpdate("INSERT INTO shopping_basket
   VALUES('MANGO', 3)");
</pre></div>
<!-- class="example" -->
<p>The <a href="reference030.htm#i1083751">executeUpdate()</a> method returns the number of rows affected by the SQL statement.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1079">
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075">
<p class="notep1">See Also:</p>
<code>$</code><code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/rdbms/demo</code> for a code example that demonstrates how to perform insert, select, update, and delete operations on table rows.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="LNCPP00333"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref139"></a>
<h3 class="sect2"><a id="sthref140"></a>Reusing the Statement Object</h3>
<p>You can reuse a <code>Statement</code> object to execute SQL statements multiple times. To repeatedly execute the same statement with different parameters, you should specify the statement by the <a href="reference030.htm#i1086841">setSQL()</a> method of the <code>Statement</code> object, as demonstrated in <a href="#CHDFFFDA">Example 3-18</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFFFDA"></a><a id="LNCPP20122"></a>Example 3-18 How to Specify a SQL Statement Using the setSQL() Method</p>
<pre>
stmt-&gt;setSQL("INSERT INTO shopping_basket VALUES(:1,:2)");
</pre></div>
<!-- class="example" -->
<p>You may now execute this <code>INSERT</code> statement as many times as required. If at a later time you want to execute a different SQL statement, you simply reset the statement object, as demonstrated in <a href="#CHDFGCJC">Example 3-19</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFGCJC"></a><a id="LNCPP20123"></a>Example 3-19 How to Reset a SQL Statement Using the setSQL() Method</p>
<pre>
stmt-&gt;setSQL("SELECT * FROM shopping_basket WHERE quantity &gt;= :1");
</pre></div>
<!-- class="example" -->
<p>By using the <a href="reference030.htm#i1086841">setSQL()</a> method, OCCI statement objects and their associated resources are not allocated or freed unnecessarily. To retrieve the contents of the current statement object at any time, use the <a href="reference030.htm#i1094388">getSQL()</a> method.</p>
</div>
<!-- class="sect2" -->
<a id="LNCPP00334"></a>
<div class="sect2"><a id="sthref141"></a>
<h3 class="sect2">Terminating a Stat<a id="sthref142"></a>ement Object</h3>
<p>You should explicitly terminate and deallocate a <code>Statement</code> object using the <a href="reference010.htm#i1069634">terminateStatement()</a> method, as demonstrated in <a href="#CHDDDDCF">Example 3-20</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDDDCF"></a><a id="LNCPP20124"></a>Example 3-20 <a id="sthref143"></a>How to Terminate a Statement Using the terminateStatement() Method</p>
<pre>
Connection::conn-&gt;terminateStatement(Statement *stmt);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFCCDG"></a><a id="LNCPP0034"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Types of SQL Sta<a id="sthref144"></a>tements in the OCCI Environment</h2>
<p>There are three types of SQL statements in the OCCI environment:</p>
<ul>
<li>
<p><a href="#CHDJIGEJ">Standard Statements</a> use SQL commands with specified values</p>
</li>
<li>
<p><a id="sthref145"></a><a href="#i1012038">Parameterized Statements</a> have parameters, or bind variables</p>
</li>
<li>
<p><a id="sthref146"></a><a href="#i1005604">Callable Statements</a> call stored PL/SQL procedures and functions</p>
</li>
</ul>
<p>The methods of the <a href="reference030.htm#i1079052">Statement Class</a> are subdivided into those applicable to all statements, to parameterized statements, and to callable statements. Standard statements are a superset of parameterized statements, and parameterized statements are a superset of callable statements.</p>
<a id="CHDJIGEJ"></a><a id="LNCPP00341"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standard Stateme<a id="sthref147"></a><a id="sthref148"></a>nts</h3>
<p>Both <a href="#CHDBIFIA">Example 3-16</a> and <a href="#CHDCIBJA">Example 3-17</a> demonstrate <span class="glossaryterm">standard</span> <span class="glossaryterm">statement</span>s in which you must explicitly define the values of the statement. In <a href="#CHDBIFIA">Example 3-16</a>, the <code>CREATE</code> <code>TABLE</code> statement specifies the name of the table <code>shopping_basket</code>. In <a href="#CHDCIBJA">Example 3-17</a>, the <code>INSERT</code> statement stipulates the values that are inserted into the table, <code>('MANGO', 3)</code>.</p>
</div>
<!-- class="sect2" -->
<a id="i1012038"></a><a id="LNCPP00342"></a>
<div class="sect2">
<h3 class="sect2">Parameteriz<a id="sthref149"></a><a id="sthref150"></a>ed Statements</h3>
<p>You can execute the same statement with different parameters by setting placeholders for the input variables of the statement. These statements are referred to as <span class="bold">parameterized statements</span> because they can accept parameter input from a user or a program.</p>
<p>If you want to execute an <code>INSERT</code> statement with different parameters, you must first specify the statement by the <a href="reference030.htm#i1086841">setSQL()</a> method of the <code>Statement</code> object, as demonstrated in <a href="#CHDFFFDA">Example 3-18</a>.</p>
<p>You then call the <code>set</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> methods to specify the parameters, where <code><span class="codeinlineitalic">xxx</span></code> stands for the type of the parameter. Provided that the value of the statement object is <code>"INSERT INTO shopping_basket VALUES(:1,:2)"</code>, as specified in <a href="#CHDFFFDA">Example 3-18</a>, you can use the code in <a href="#CHDIBFJF">Example 3-21</a> to invoke the <a href="reference030.htm#i1073503">setString()</a> method and <a href="reference030.htm#i1086745">setInt()</a> method to input the values of these types into the first and second parameters, and the <a href="reference030.htm#i1083751">executeUpdate()</a> method to insert the new row into the table.You can reuse the statement object by re-setting the parameters and again calling the <a href="reference030.htm#i1083751">executeUpdate()</a> method. If your application is executing the same statement repeatedly, you should avoid changing the input parameter types because this initiates a rebind operation, and affects application performance.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIBFJF"></a><a id="LNCPP20125"></a>Example 3-21 How to Use setxxx() Methods to Set Individual Column Values</p>
<pre>
stmt-&gt;setString(1, "Banana");     // value for first parameter
stmt-&gt;setInt(2, 5);               // value for second parameter
stmt-&gt;executeUpdate();            // execute statement
...
stmt-&gt;setString(1, "Apple");      // value for first parameter
stmt-&gt;setInt(2, 9);               // value for second parameter
stmt-&gt;executeUpdate();            // execute statement
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1005604"></a><a id="LNCPP00343"></a>
<div class="sect2">
<h3 class="sect2">Callable St<a id="sthref151"></a><a id="sthref152"></a>atements</h3>
<p>PL/SQL stored procedures, as their name suggests, are procedures that are stored on the database server for reuse by an application. In OCCI, a <span class="bold">callable statement</span> is a call to a procedure which contains other SQL statements.</p>
<p>If you want to call a procedure <code>countGroceries()</code>, that returns the quantity of a specified kind of fruit, you must first specify the input parameters of a PL/SQL stored procedure through the <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods of the <code>Statement</code> class, as demonstrated in <a href="#CHDJAABG">Example 3-22</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDJAABG"></a><a id="LNCPP20126"></a>Example 3-22 How to Specify the IN Parameters of a PL/SQL Stored Procedure</p>
<pre>
stmt-&gt;setSQL("BEGIN countGroceries(:1, :2); END:");
int quantity;
stmt-&gt;setString(1, "Apple");   // specify the first (IN) parameter of procedure
</pre></div>
<!-- class="example" -->
<p>However, before calling a stored procedure, you must specify the type and size of any <code>OUT</code> parameters by calling the <a href="reference030.htm#i1104541">registerOutParam()</a> method, as demonstrated in <a href="#CHDCFGBA">Example 3-23</a>. For <code>IN/OUT</code> parameters, use the <code>set</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods to pass in the parameter, and <code>get</code><code><span class="codeinlineitalic">XXX</span></code><code>()</code> methods to retrieve the results.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCFGBA"></a><a id="LNCPP20127"></a>Example 3-23 How to Specify OUT Parameters of a PL/SQL Stored Procedure</p>
<pre>
stmt-&gt;registerOutParam(2, Type::OCCIINT, sizeof(quantity));
   // specify type and size of the second (OUT) parameter
</pre></div>
<!-- class="example" -->
<p>You now execute the statement by calling the procedure:</p>
<pre>
stmt-&gt;executeUpdate();           // call the procedure
</pre>
<p>Finally, you obtain the output parameters by calling the relevant <code>get</code><span class="italic">xxx()</span> method:</p>
<pre>
quantity = stmt-&gt;getInt(2);     // get value of the second (OUT) parameter
</pre>
<a id="LNCPP03431"></a>
<div class="sect3"><a id="sthref153"></a>
<h4 class="sect3">Callable <a id="sthref154"></a>Statements that Use Array Parameters</h4>
<p>A PL/SQL stored procedure executed through a callable statement can have array of values as parameters. The number of elements in the array and the dimension of elements in the array are specified through the <code>setDataBufferArray()</code> method.</p>
<p>The following example shows the <code>setDataBufferArray()</code> method:</p>
<pre>
void setDataBufferArray(
   unsigned int paramIndex,
   void *buffer, 
   Type type, 
   ub4 arraySize, 
   ub4 *arrayLength, 
   sb4 elementSize, 
   ub2 *elementLength,
   sb2 *ind = NULL, 
   ub2 *rc = NULL); 
</pre>
<p>The following parameters are used in the previous method example:</p>
<ul>
<li>
<p><code>paramIndex</code>: Parameter number</p>
</li>
<li>
<p><code>buffer</code>: Data buffer containing an array of values</p>
</li>
<li>
<p><code>Type</code>: Type of data in the data buffer</p>
</li>
<li>
<p><code>arraySize</code>: Maximum number of elements in the array</p>
</li>
<li>
<p><code>arrayLength</code>: Number of elements in the array</p>
</li>
<li>
<p><code>elementSize</code>: Size of the current element in the array</p>
</li>
<li>
<p><code>elementLength</code>: Pointer to an array of lengths. <code>elementLength[i]</code> has the current length of the <code>i</code>th element of the array</p>
</li>
<li>
<p><code>ind</code>: Indicator information</p>
</li>
<li>
<p><code>rc</code>: Returns code</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1013763"></a><a id="LNCPP00344"></a>
<div class="sect2">
<h3 class="sect2">Stream<a id="sthref155"></a><a id="sthref156"></a>ed Reads and Writes</h3>
<p>OCCI supports a streaming interface for insertion and retrieval of very large columns by breaking the data into a series of small chunks. This approach minimizes client-side memory requirements. This streaming interface can be used with parameterized statements such as <code>SELECT</code> and various DML commands, and with callable statements in PL/SQL blocks. The data types supported by streams are <code>BLOB</code>, <code>CLOB</code>, <code>LONG</code>, <code>LONG RAW</code>, <code>RAW</code>, and <code>VARCHAR2</code>.</p>
<p>Streamed data is of three kinds:</p>
<ul>
<li>
<p>A <span class="bold">writable</span> stream corresponds to a bind variable in a <code>SELECT</code>/DML statement or an <code>IN</code> argument in a callable statement.</p>
</li>
<li>
<p>A <span class="bold">readable</span> stream corresponds to a fetched column value in a <code>SELECT</code> statement or an <code>OUT</code> argument in a callable statement.</p>
</li>
<li>
<p>A <span class="bold">bidirectional</span> stream corresponds to an <code>IN/OUT</code> bind variable.</p>
</li>
</ul>
<p>Methods of the <a href="reference031.htm#i1079054">Stream Class</a> support the stream interface.</p>
<p>The <a href="reference030.htm#i1084467">getStream()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> returns a stream object that supports reading and writing for DML and callable statements:</p>
<ul>
<li>
<p>For writing, it passes data to a bind variable or to an <code>IN</code> or <code>IN/OUT</code> argument</p>
</li>
<li>
<p>For reading, it fetches data from an <code>OUT</code> or <code>IN/OUT</code> argument</p>
</li>
</ul>
<p>The <a href="reference027.htm#i1082601">getStream()</a> method of the <a href="reference027.htm#i1079050">ResultSet Class</a> returns a stream object that can be used for reading data.</p>
<p>The <code>status()</code> method of these classes determines the status of the streaming operation.</p>
<a id="LNCPP03441"></a>
<div class="sect3"><a id="sthref157"></a>
<h4 class="sect3">Binding Data in Streaming Mode; SELECT/DML and PL/SQL</h4>
<p>To bind data in a streaming mode, follow these steps and review <a href="#BAGGDACI">Example 3-24</a>:</p>
<ol>
<li>
<p>Create a <code>SELECT</code>/<code>DML</code> or PL/SQL statement with appropriate bind placeholders.</p>
</li>
<li>
<p>Call the <a href="reference030.htm#i1087429">setBinaryStreamMode()</a> or <a href="reference030.htm#i1088316">setCharacterStreamMode()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> for each bind position that is used in the streaming mode. If the bind position is a PL/SQL <code>IN</code> or <code>IN/OUT</code> argument type, indicate this by calling the three-argument versions of these methods and setting the <code>inArg</code> parameter to <code>TRUE</code>.</p>
</li>
<li>
<p>Execute the statement; the <a href="reference030.htm#i1086880">status()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> returns <code>NEEDS_STREAM_DATA</code>.</p>
</li>
<li>
<p>Obtain the stream object through a <a href="reference030.htm#i1084467">getStream()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a>.</p>
</li>
<li>
<p>Use <a href="reference031.htm#i1078019">writeBuffer()</a> and <a href="reference031.htm#i1078030">writeLastBuffer()</a> methods of the <a href="reference031.htm#i1079054">Stream Class</a> to write data.</p>
</li>
<li>
<p>Close the stream with <a href="reference030.htm#i1083695">closeStream()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a>.</p>
</li>
<li>
<p>After all streams are closed, the <a href="reference030.htm#i1086880">status()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> changes to an appropriate value, such as <code>UPDATE_COUNT_AVAILABLE</code>.</p>
</li>
</ol>
<div class="example">
<p class="titleinexample"><a id="BAGGDACI"></a><a id="LNCPP20128"></a>Example 3-24 How to Bind Data in a Streaming Mode</p>
<pre>
Statement *stmt = conn-&gt;createStatement(
   "Insert Into testtab(longcol) values (:1)"); //longcol is LONG type column
stmt-&gt;setCharacterStreamMode(1, 100000);
stmt-&gt;executeUpdate();

Stream *instream = stmt-&gt;getStream(1);
char buffer[1000];
instream-&gt;writeBuffer(buffer, len);             //write data
instream-&gt;writeLastBuffer(buffer, len);         //repeat
stmt-&gt;closeStream(instream);                    //stmt-&gt;status() is
                                                //UPDATE_COUNT_AVAILABLE

Statement *stmt = conn-&gt;createStatement("BEGIN testproc(:1); END;");

//if the argument type to testproc is IN or IN/OUT then pass TRUE to
//setCharacterStreamMode or setBinaryStreamMode 
stmt-&gt;setBinaryStreamMode(1, 100000, TRUE);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="LNCPP03442"></a>
<div class="sect3"><a id="sthref158"></a>
<h4 class="sect3">Fetching Data in Streaming Mode: PL/SQL</h4>
<p>To fetch data from a streaming mode, follow these steps and review <a href="#BAGJGHAG">Example 3-25</a>:</p>
<ol>
<li>
<p>Create a <code>SELECT</code>/DML statement with appropriate bind placeholders.</p>
</li>
<li>
<p>Call the <a href="reference030.htm#i1087429">setBinaryStreamMode()</a> or <a href="reference030.htm#i1088316">setCharacterStreamMode()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> for each bind position into which data is retrieved from the streaming mode.</p>
</li>
<li>
<p>Execute the statement; the <a href="reference030.htm#i1086880">status()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> returns <code>STREAM_DATA_AVAILABLE</code>.</p>
</li>
<li>
<p>Obtain the stream object through a <a href="reference030.htm#i1084467">getStream()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a>.</p>
</li>
<li>
<p>Use <a href="reference031.htm#i1094490">readBuffer()</a> and <a href="reference031.htm#i1078008">readLastBuffer()</a> methods of the <a href="reference031.htm#i1079054">Stream Class</a> to read data.</p>
</li>
<li>
<p>Close the stream with <a href="reference030.htm#i1083695">closeStream()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a>.</p>
</li>
</ol>
<div class="example">
<p class="titleinexample"><a id="BAGJGHAG"></a><a id="LNCPP20129"></a>Example 3-25 How to Fetch Data in a Streaming Mode Using PL/SQL</p>
<pre>
Statement *stmt = conn-&gt;createStatement("BEGIN testproc(:1); END;");
               //argument 1 is OUT type
stmt-&gt;setCharacterStreamMode(1, 100000);
stmt-&gt;execute();

Stream *outarg = stmt-&gt;getStream(1);
               //use Stream::readBuffer/readLastBuffer to read data
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="LNCPP03443"></a>
<div class="sect3"><a id="sthref159"></a>
<h4 class="sect3">Fetching Data in Streaming Mode: ResultSet</h4>
<p><a href="#i1010061">Executing SQL Queries</a> and <a href="#BAGBHIFE">Example 3-28</a> provide an explanation of how to use the streaming interface with result sets.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP03444"></a>
<div class="sect3"><a id="sthref160"></a>
<h4 class="sect3">Working with Multiple Streams</h4>
<p>If you must work with multiple read and write streams, you must ensure that the read or write of one stream is completed before reading or writing on another stream. To determine stream position, use the <a href="reference030.htm#i1084015">getCurrentStreamParam()</a> method of the <a href="reference030.htm#i1079052">Statement Class</a> or the <a href="reference027.htm#i1082551">getCurrentStreamColumn()</a> method of the <a href="reference027.htm#i1079050">ResultSet Class</a>. The <a href="reference031.htm#i1078041">status()</a> method of the <a href="reference031.htm#i1079054">Stream Class</a> returns <code>READY_FOR_READ</code> if there is data in the stream available for reading, or it returns <code>INACTIVE</code> if all the data has been read, as described in <a href="reference031.htm#BBADBFFD">Table 13-45</a>. The application can then read the next streaming column. <a href="#CHDDIJDJ">Example 3-26</a> demonstrates how to read and write with two concurrent streams. Note that it is not possible to use these streaming interfaces with the <code>setDataBuffer()</code> method in the same <code>Statement</code> and <code>ResultSet</code> objects.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDIJDJ"></a><a id="LNCPP20130"></a>Example 3-26 How to Read and Write with Multiple Streams</p>
<pre>
Statement *stmt = conn-&gt;createStatement(
  "Insert into testtab(longcol1, longcol2) values (:1,:2)");
      //longcol1 AND longcol2 are 2 columns inserted in streaming mode

stmt-&gt;setBinaryStreamMode(1, 100000);
stmt-&gt;setBinaryStreamMode(2, 100000);
stmt-&gt;executeUpdate();
 
Stream *col1 = stmt-&gt;getStream(1);
Stream *col2 = stmt-&gt;getStream(2);
 
col1-&gt;writeBuffer(buffer, len);        //first stream
...                                    //complete writing coll stream

col1-&gt;writeLastBuffer(buffer, len);    //finish first stream and move to col2

col2-&gt;writeBuffer(buffer, len);        //second stream

//reading multiple streams
stmt = conn-&gt;createStatement("select longcol1, longcol2 from testtab");
ResultSet *rs = stmt-&gt;executeQuery();
rs-&gt;setBinaryStreamMode(1, 100000);
rs-&gt;setBinaryStreamMode(2, 100000);

while (rs-&gt;next())
{
   Stream *s1 = rs-&gt;getStream(1)
   while (s1-&gt;status() == Stream::READY_FOR_READ)
   {
      s1-&gt;readBuffer(buffer,size);    //process
   }                                  //first streaming column done
   rs-&gt;closeStream(s1);

//move onto next column. rs-&gt;getCurrentStreamColumn() returns 2
 
   Stream *s2 = rs-&gt;getStream(2)
   while (s2-&gt;status() == Stream::READY_FOR_READ)
   {
      s2-&gt;readBuffer(buffer,size);    //process
   }                                  //close the stream
   rs-&gt;closeStream(s2);
}
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="performance.htm#CHDCFGJF">"Application-Managed Data Buffering"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="LNCPP00345"></a>
<div class="sect2"><a id="sthref161"></a>
<h3 class="sect2">Modifying Rows Iteratively</h3>
<p>While you can issue the <code>executeUpdate</code> method repeatedly for each row, OCCI provides an efficient mechanism for sending data for multiple rows in a single network round-trip. Use the <code>addIteration()</code> method of the <code>Statement</code> class to perform batch operations that modify a different row with each iteration.</p>
<p>To execute <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations iteratively, you must:</p>
<ul>
<li>
<p>Set the maximum number of iterations</p>
</li>
<li>
<p>Set the maximum parameter size for variable length parameters</p>
</li>
</ul>
<a id="LNCPP03451"></a>
<div class="sect3"><a id="sthref162"></a>
<h4 class="sect3">Setting the Maximum Number of Iterations</h4>
<p>For iterative execution, first specify the maximum number of iterations that would be done for the statement by calling the <code>setMaxIterations()</code> method:</p>
<pre>
Statement-&gt;setMaxIterations(int maxIterations);
</pre>
<p>You can retrieve the current maximum iterations setting by calling the <code>getMaxIterations()</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP03452"></a>
<div class="sect3"><a id="sthref163"></a>
<h4 class="sect3">Setting the Maximum Parameter Size</h4>
<p>If the iterative execution involves variable-length data types, such as <code>string</code> and <code>Bytes</code>, then you must set the maximum parameter size so that OCCI can allocate the maximum size buffer:</p>
<pre>
Statement-&gt;setMaxParamSize(int parameterIndex, int maxParamSize);
</pre>
<p>You do not have to set the maximum parameter size for fixed-length data types, such as <code>Number</code> and <code>Date</code>, or for parameters that use the <code>setDataBuffer()</code> method.</p>
<p>You can retrieve the current maximum parameter size setting by calling the <code>getMaxParamSize()</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP03453"></a>
<div class="sect3"><a id="sthref164"></a>
<h4 class="sect3">Executing an Iterative Operation</h4>
<p>Once you have set the maximum number of iterations and (if necessary) the maximum parameter size, iterative execution using a parameterized statement is straightforward, as shown in <a href="#CHDHIFJJ">Example 3-27</a>.</p>
<p>Iterative execution is designed only for use in <code>INSERT</code>, <code>UPDATE</code> and <code>DELETE</code> operations that use either standard or parameterized statements. It cannot be used for callable statements and queries. Note that the data type cannot be changed between iterations. For example, if you use <code>setInt()</code> for parameter <code>1</code>, then you cannot use <code>setString()</code> for the same parameter in a later iteration</p>
<div class="example">
<p class="titleinexample"><a id="CHDHIFJJ"></a><a id="LNCPP21895"></a>Example 3-27 How to Execute an Iterative Operation</p>
<pre>
stmt-&gt;setSQL("INSERT INTO basket_tab VALUES(:1, :2)");

stmt-&gt;setString(1, "Apples");   // value for first parameter of first row
stmt-&gt;setInt(2, 6);             // value for second parameter of first row
stmt-&gt;addIteration();           // add the iteration

stmt-&gt;setString(1, "Oranges");  // value for first parameter of second row
stmt-&gt;setInt(1, 4);             // value for second parameter of second row

stmt-&gt;executeUpdate();          // execute statement
</pre></div>
<!-- class="example" -->
<p>As shown in the example, you call the <code>addIteration()</code> method after each iteration except the last, after which you invoke <code>executeUpdate()</code> method. Of course, if you did not have a second row to insert, then you would not have to call the <code>addIteration()</code> method or make the subsequent calls to the <code>set</code><span class="italic">xxx</span><code>()</code> methods.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010061"></a><a id="LNCPP0035"></a>
<div class="sect1">
<h2 class="sect1">Exec<a id="sthref165"></a>uting SQL Queries</h2>
<p>SQL query statements allow your applications to request information from a database based on any constraints specified. A result set is returned by the query.</p>
<a id="LNCPP00351"></a>
<div class="sect2"><a id="sthref166"></a>
<h3 class="sect2">Using the Result<a id="sthref167"></a><a id="sthref168"></a> Set</h3>
<p>Execution of a database query puts the results of the query into a set of rows called the result set. In OCCI, a SQL <code>SELECT</code> statement is executed by the <code>executeQuery</code> method of the <code>Statement</code> class. This method returns an <code>ResultSet</code> object that represents the results of a query.</p>
<pre>
ResultSet *rs = stmt-&gt;executeQuery("SELECT * FROM basket_tab");
</pre>
<p>Once you have the data in the result set, you can perform operations on it. For example, suppose you wanted to print the contents of this table. The <code>next()</code> method of the <code>ResultSet</code> is used to fetch data, and the <code>get</code><span class="italic">xxx</span><code>()</code> methods are used to retrieve the individual columns of the result set, as shown in the following code example:</p>
<pre>
cout &lt;&lt; "The basket has:" &lt;&lt; endl;

while (rs-&gt;next())
{
   string fruit = rs-&gt;getString(1);     // get the first column as string
   int quantity = rs-&gt;getInt(2);        // get the second column as int

   cout &lt;&lt; quantity &lt;&lt; " " &lt;&lt; fruit &lt;&lt; endl;
}
</pre>
<p>The <code>next()</code> and <code>status()</code> methods of the <code>ResultSet</code> class return <code>Status</code>, as defined in <a href="reference027.htm#BBABCCHB">Table 13-38</a>.</p>
<p>If data is available for the current row, then the status is <code>DATA_AVAILABLE</code>. After all the data has been read, the status changes to <code>END_OF_FETCH</code>. If there are any output streams to be read, then the status is <code>STREAM_DATA_AVAILABLE</code>, until all the streamed data are read successfully.</p>
<p><a href="#BAGBHIFE">Example 3-28</a> illustrates how to fetch streaming data into a result set, while section <a href="#i1013763">"Streamed Reads and Writes"</a> provides the general background.</p>
<div class="example">
<p class="titleinexample"><a id="BAGBHIFE"></a><a id="LNCPP20131"></a>Example 3-28 How to Fetch Data in Streaming Mode Using ResultSet</p>
<pre>
char buffer[4096]; 
ResultSet *rs = stmt-&gt;executeQuery 
   ("SELECT col1, col2 FROM tab1 WHERE col1 = 11"); 
rs-&gt;setCharacterStreamMode(2, 10000);

while (rs-&gt;next ()) 
{ 
   unsigned int length = 0; 
   unsigned int size = 500; 
   Stream *stream = rs-&gt;getStream (2); 
   while (stream-&gt;status () == Stream::READY_FOR_READ) 
   { 
      length += stream-&gt;readBuffer (buffer +length, size); 
   } 
   cout &lt;&lt; "Read "  &lt;&lt; length &lt;&lt; " bytes into the buffer" &lt;&lt; endl; 
} 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="LNCPP00352"></a>
<div class="sect2"><a id="sthref169"></a>
<h3 class="sect2">Specifyi<a id="sthref170"></a>ng the Query</h3>
<p>The <code>IN</code> bind variables can be used with queries to specify constraints in the <code>WHERE</code> clause of a query. For example, the following program prints only those items that have a minimum quantity of <code>4</code>:</p>
<pre>
stmt-&gt;setSQL("SELECT * FROM basket_tab WHERE quantity &gt;= :1");
int minimumQuantity = 4;
stmt-&gt;setInt(1, minimumQuantity);     // set first parameter
ResultSet *rs = stmt-&gt;executeQuery();
cout &lt;&lt; "The basket has:" &lt;&lt; endl;

while (rs-&gt;next())
   cout &lt;&lt; rs-&gt;getInt(2) &lt;&lt; " " &lt;&lt; rs-&gt;getString(1) &lt;&lt; endl;
</pre></div>
<!-- class="sect2" -->
<a id="LNCPP00353"></a>
<div class="sect2"><a id="sthref171"></a>
<h3 class="sect2">Optimiz<a id="sthref172"></a><a id="sthref173"></a><a id="sthref174"></a>ing Performance by Setting Prefetch Count</h3>
<p>Although the <code>ResultSet</code> method retrieves data one row at a time, the actual fetch of data from the server need not entail a network round-trip for each row queried. To maximize the performance, you can set the number of rows to prefetch in each round-trip to the server.</p>
<p>You effect this either by setting the number of rows to be prefetched through the <code>setPrefetchRowCount(</code><code>)</code> method, or by setting the memory size to be used for prefetching through the <code>setPrefetchMemorySize()</code> method.</p>
<p>If you set both of these attributes, then the specified number of rows are prefetched unless the specified memory limit is reached first. If the specified memory limit is reached first, then the prefetch returns as many rows as can fit in the memory space defined by the call to the <code>setPrefetchMemorySize()</code> method.</p>
<p>By default, prefetching is turned on and the database fetches an extra row all the time. To turn prefetching off, set both the prefetch row count and memory size to <code>0</code>.</p>
<p>Prefetching is not in effect if <code>LONG</code>, LOB or Opaque Type columns (such as <code>XMLType</code>) are part of the query.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010067"></a><a id="LNCPP0036"></a>
<div class="sect1">
<h2 class="sect1">Executing Stateme<a id="sthref175"></a>nts Dynamically</h2>
<p>When you know that you must execute a DML operation, you use the <code>executeUpdate</code> method. Similarly, when you know that you must execute a query, you use <code>executeQuery()</code> method.</p>
<p>If your application must allow for dynamic events and you cannot be sure of which statement must be executed at run time, then OCCI provides the <code>execute()</code> method. Invoking the <code>execute()</code> method returns one of the following statuses:</p>
<ul>
<li>
<p><a href="#i1014731">UNPREPARED</a></p>
</li>
<li>
<p><a href="#i1007089">PREPARED</a></p>
</li>
<li>
<p><a href="#i1014608">RESULT_SET_AVAILABLE</a></p>
</li>
<li>
<p><a href="#i1007096">UPDATE_COUNT_AVAILABLE</a></p>
</li>
<li>
<p><a href="#i1007101">NEEDS_STREAM_DATA</a></p>
</li>
<li>
<p><a href="#i1007105">STREAM_DATA_AVAILABLE</a></p>
</li>
</ul>
<p>While invoking the <code>execute()</code> method returns one of these statuses, you can further 'interrogate' the statement by using the <code>status()</code> method.</p>
<pre>
Statement stmt = conn-&gt;createStatement(); 
Statement::Status status = stmt-&gt;status();       // status is UNPREPARED 
stmt-&gt;setSQL("select * from emp"); 
status = stmt-&gt;status();                         // status is PREPARED 
</pre>
<p>If a statement object is created with a SQL string, then it is created in a <code>PREPARED</code> state. For example:</p>
<pre>
Statement stmt = conn-&gt;createStatement("insert into foo(id) values(99)"); 
Statement::Status status = stmt-&gt;status();// status is PREPARED 
status = stmt-&gt;execute();                 // status is UPDATE_COUNT_AVAILABLE 
</pre>
<p>When you set another SQL statement on the Statement, the status changes to <code>PREPARED</code>. For example:</p>
<pre>
stmt-&gt;setSQL("select * from emp");        // status is PREPARED 
status = stmt-&gt;execute();                 // status is RESULT_SET_AVAILABLE 
</pre>
<a id="LNCPP00361"></a>
<div class="sect2"><a id="sthref176"></a>
<h3 class="sect2">Statement Status Definitions</h3>
<p>This section describes the possible values of <code>Status</code> related to a statement object:</p>
<ul>
<li>
<p><a id="sthref177"></a><a id="sthref178"></a><a href="#i1014731">UNPREPARED</a></p>
</li>
<li>
<p><a id="sthref179"></a><a id="sthref180"></a><a href="#i1007089">PREPARED</a></p>
</li>
<li>
<p><a id="sthref181"></a><a id="sthref182"></a><a href="#i1014608">RESULT_SET_AVAILABLE</a></p>
</li>
<li>
<p><a id="sthref183"></a><a id="sthref184"></a><a href="#i1007096">UPDATE_COUNT_AVAILABLE</a></p>
</li>
<li>
<p><a id="sthref185"></a><a id="sthref186"></a><a href="#i1007101">NEEDS_STREAM_DATA</a></p>
</li>
<li>
<p><a id="sthref187"></a><a id="sthref188"></a><a href="#i1007105">STREAM_DATA_AVAILABLE</a></p>
</li>
</ul>
<a id="i1014731"></a><a id="LNCPP20132"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref189"></a>UNP<a id="sthref190"></a>REPARED</h4>
<p>If you have not used the <code>setSQL()</code> method to attribute a SQL string to a statement object, then the statement is in an <code>UNPREPARED</code> state.</p>
<pre>
Statement stmt = conn-&gt;createStatement(); 
Statement::Status status = stmt-&gt;status(); // status is UNPREPARED 
</pre></div>
<!-- class="sect3" -->
<a id="i1007089"></a><a id="LNCPP20133"></a>
<div class="sect3">
<h4 class="sect3">PREP<a id="sthref191"></a><a id="sthref192"></a>ARED</h4>
<p>If a Statement is created with an SQL string, then it is created in a <code>PREPARED</code> state. For example:</p>
<pre>
Statement stmt = conn-&gt;createStatement("INSERT INTO demo_tab(id) VALUES(99)"); 
Statement::Status status = stmt-&gt;status();    // status is PREPARED 
</pre>
<p>Setting another SQL statement on the <code>Statement</code> changes the status to <code>PREPARED</code>. For example:</p>
<pre>
status = stmt-&gt;execute();                 // status is UPDATE_COUNT_AVAILABLE
stmt-&gt;setSQL("SELECT * FROM demo_tab");   // status is PREPARED 
</pre></div>
<!-- class="sect3" -->
<a id="i1014608"></a><a id="LNCPP20134"></a>
<div class="sect3">
<h4 class="sect3">RESULT_<a id="sthref193"></a><a id="sthref194"></a>SET_AVAILABLE</h4>
<p>A status of <code>RESULT_SET_AVAILABLE</code> indicates that a properly formulated query has been executed and the results are accessible through a result set.</p>
<p>When you set a statement object to a query, it is <code>PREPARED</code>. Once you have executed the query, the statement changes to <code>RESULT_SET_AVAILABLE</code>. For example:</p>
<pre>
stmt-&gt;setSQL("SELECT * from EMP");          // status is PREPARED 
status = stmt-&gt;execute();                   // status is RESULT_SET_AVAILABLE
</pre>
<p>To access the data in the result set, issue the following statement:</p>
<pre>
ResultSet *rs = Statement-&gt;getResultSet();
</pre></div>
<!-- class="sect3" -->
<a id="i1007096"></a><a id="LNCPP20135"></a>
<div class="sect3">
<h4 class="sect3">UPDATE_C<a id="sthref195"></a><a id="sthref196"></a>OUNT_AVAILABLE</h4>
<p>When a DDL or DML statement in a <code>PREPARED</code> state is executed, its state changes to <code>UPDATE_COUNT_AVAILABLE</code>, as shown in the following code example:</p>
<pre>
Statement stmt = conn-&gt;createStatement("INSERT INTO demo_tab(id) VALUES(99)"); 
Statemnt::Status status = stmt-&gt;status(); // status is PREPARED 
status = stmt-&gt;execute();                 // status is UPDATE_COUNT_AVAILABLE 
</pre>
<p>This status refers to the number of rows affected by the execution of the statement. It indicates that:</p>
<ul>
<li>
<p>The statement did not include any input or output streams.</p>
</li>
<li>
<p>The statement was not a query but either a DDL or DML statement.</p>
</li>
</ul>
<p>You can obtain the number of rows affected by issuing the following statement:</p>
<pre>
Statement-&gt;getUpdateCount();
</pre>
<p>Note that a DDL statement results in an update count of zero (<code>0</code>). Similarly, an update that does not meet any matching conditions also produces a count of zero (<code>0</code>). In such a case, you cannot determine the kind of statement that has been executed from the reported status.</p>
</div>
<!-- class="sect3" -->
<a id="i1007101"></a><a id="LNCPP20136"></a>
<div class="sect3">
<h4 class="sect3">NEEDS_STREAM<a id="sthref197"></a><a id="sthref198"></a>_DATA</h4>
<p>If there are any output streams to be written, the execute does not complete until all the stream data is completely provided. In this case, the status changes to <code>NEEDS_STREAM_DATA</code> to indicate that a stream must be written. After writing the stream, call the <a href="reference030.htm#i1086880">status()</a> method to find out if more stream data should be written, or whether the execution has completed.</p>
<p>In cases where your statement includes multiple streamed parameters, use the <a href="reference030.htm#i1084015">getCurrentStreamParam()</a> method to discover which parameter must be written.</p>
<p>If you are performing an iterative or array execute, the <a href="reference030.htm#i1084007">getCurrentStreamIteration()</a> method reveals to which iteration the data is to be written.</p>
<p>Once all the stream data has been processed, the status changes to either <code>RESULT_SET_AVAILABLE</code> or <code>UPDATE_COUNT_AVAILABLE</code>.</p>
</div>
<!-- class="sect3" -->
<a id="i1007105"></a><a id="LNCPP20137"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref199"></a><a id="sthref200"></a>STREAM_DATA_AVAILABLE</h4>
<p>This status indicates that the application requires some stream data to be read in <code>OUT</code> or <code>IN/OUT</code> parameters before the execution can finish. After reading the stream, call the <code>status</code> method to find out if more stream data should be read, or whether the execution has completed.</p>
<p>In cases in which your statement includes multiple streamed parameters, use the <code>getCurrentStreamParam()</code> method to discover which parameter must be read.</p>
<p>If you are performing an iterative or array execute, then the <code>getCurrentStreamIteration()</code> method reveals from which iteration the data is to be read.</p>
<p>Once all the stream data has been handled, the status changes to <code>UPDATE_COUNT_REMOVE_AVAILABLE</code>.</p>
<p>The <code>ResultSet</code> class also has readable streams and it operates similar to the readable streams of the <code>Statement</code> class.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010071"></a><a id="LNCPP0037"></a>
<div class="sect1">
<h2 class="sect1">Com<a id="sthref201"></a>mitting a Transaction</h2>
<p>All SQL DML statements are executed in the context of a transaction. An application causes the changes made by these statement to become permanent by either committing the transaction, or undoing them by performing a rollback. While the SQL <code>COMMIT</code> and <code>ROLLBACK</code> statements can be executed with the <code>executeUpdate()</code> method, you can also call the <code>Connection::commit()</code> and <code>Connection::rollback()</code> methods.</p>
<p>If you want the DML changes that were made to be committed immediately, you can turn on the auto commit mode of the <code>Statement</code> class by issuing the following statement:</p>
<pre>
Statement::setAutoCommit(TRUE);
</pre>
<p>Once auto commit is in effect, each change is automatically made permanent. This is similar to issuing a commit right after each execution.</p>
<p>To return to the default mode, auto commit off, issue the following statement:</p>
<pre>
Statement::setAutoCommit(FALSE);
</pre></div>
<!-- class="sect1" -->
<a id="BAGJEAHJ"></a><a id="LNCPP0038"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref202"></a>Caching Statements</h2>
<p>The statement caching feature establishes and manages a cache of statements within a session. It improves performance and scalability of application by efficiently using prepared cursors on the server side and eliminating repetitive statement parsing.</p>
<p>Statement caching can be used with connection and session pooling, and also without connection pooling. Please review <a href="#BAGDAIFH">Example 3-29</a> and <a href="#CHDGGCDG">Example 3-30</a> for typical usage scenarios.</p>
<div class="example">
<p class="titleinexample"><a id="BAGDAIFH"></a><a id="LNCPP20138"></a>Example 3-29 Statement Caching without Connection Pooling</p>
<p>These steps and accompanying pseudocode implement the statement caching feature without use of connection pools:</p>
<ol>
<li>
<p>Create a <code>Connection</code> by making a <a href="reference014.htm#CHEEGFAI">createConnection()</a> call on the <code>Environment</code> object.</p>
<pre>
Connection *conn = env-&gt;createConnection(
      username, password, connecstr);
</pre></li>
<li>
<p>Enable statement caching on the <code>Connection</code> object by using a nonzero <code>size</code> parameter in the <a href="reference010.htm#CACIBJFI">setStmtCacheSize()</a> call.</p>
<pre>
conn-&gt;setStmtCacheSize(10);
</pre>
<p>Subsequent calls to <a href="reference010.htm#CACJHFDC">getStmtCacheSize()</a> would determine the size of the cache, while <a href="reference010.htm#CACIBJFI">setStmtCacheSize()</a> call changes the size of the statement cache, or disables statement caching if the <code>size</code> parameter is set to zero.</p>
</li>
<li>
<p>Create a <code>Statement</code> by making a <a href="reference010.htm#i1069559">createStatement()</a> call on the <code>Connection</code> object; the <code>Statement</code> is returned if it is in the cache, or a new <code>Statement</code> with a <code>NULL</code> tag is created for the user.</p>
<pre>
Statement *stmt = conn-&gt;createStatement(sql);
</pre>
<p>To retrieve a previously cached tagged statement, use the alternate form of the <a href="reference010.htm#i1069559">createStatement()</a> method:</p>
<pre>
Statement *stmt = conn-&gt;createStatement(sql, tag);
</pre></li>
<li>
<p>Use the statement to execute SQL commands and obtain results.</p>
</li>
<li>
<p>Return the statement to cache.</p>
<pre>
conn-&gt;terminateStatement(stmt, tag);
</pre>
<p>If you do not want to cache this statement, use the <a href="reference030.htm#CACDHDJF">disableCaching()</a> call and an alternate from of <a href="reference010.htm#i1069634">terminateStatement()</a>:</p>
<pre>
stmt-&gt;disableCaching();
conn-&gt;terminateStatement(stmt);
</pre>
<p>If you must verify whether a statement has been cached, issue an <a href="reference010.htm#CACGDEEH">isCached()</a> call on the <code>Connection</code> object.</p>
<p>You can choose to tag a statement at release time and then reuse it for another statement with the same tag. The tag is used to search the cache. An untagged statement, where tag is <code>NULL</code>, is a special case of a tagged statement. Two statements are considered different if they only differ in their tags, and if only one of them is tagged.</p>
</li>
<li>
<p>Terminate the connection.</p>
</li>
</ol>
</div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="CHDGGCDG"></a><a id="LNCPP20139"></a>Example 3-30 Statement Caching with Connection Pooling</p>
<p>These steps and accompanying pseudocode implement the statement caching feature with connection pooling.</p>
<p>Statement caching is enabled only for connection created after the <code>setStmtCacheSize()</code> call.</p>
<p>If statement cac.hing is not enabled at the pool level, it can still be implemented for individual connections in the pool.</p>
<ol>
<li>
<p>Create a <code>ConnectionPool</code> by making a call to the <a href="reference014.htm#i1090287">createConnectionPool()</a> of the <code>Environment</code> object.</p>
<pre>
ConnectionPool *conPool = env-&gt;createConnectionPool(
                               username, password, connecstr, 
                               minConn, maxConn, incrConn);
</pre>
<p>If using a <code>StatelessConnectionPool</code>, call <a href="reference014.htm#CHECBAHJ">createStatelessConnectionPool()</a> instead. Subsequent operations are the same for <code>ConnectionPool</code> and <code>StatelessConnectionPool</code> objects.</p>
<pre>
Stateless ConnectionPool *conPool = env-&gt;createStatelessConnectionPool(
                                    username, password, connecstr, 
                                    minConn, maxConn, incrConn, mode);
</pre></li>
<li>
<p>Enable statement caching for all <code>Connection</code>s in the <code>ConnectionPool</code> by using a nonzero <code>size</code> parameter in the <a href="reference010.htm#CACIBJFI">setStmtCacheSize()</a> call.</p>
<pre>
conPool-&gt;setStmtCacheSize(10);
</pre>
<p>Subsequent calls to <a href="reference010.htm#CACJHFDC">getStmtCacheSize()</a> would determine the size of the cache, while <a href="reference010.htm#CACIBJFI">setStmtCacheSize()</a> call changes the size of the statement cache, or disables statement caching if the <code>size</code> parameter is set to zero.</p>
</li>
<li>
<p>Get a <code>Connection</code> from the pool by making a <a href="reference011.htm#i1089607">createConnection()</a> call on the <code>ConnectionPool</code> object; the <code>Statement</code> is returned if it is in the cache, or a new <code>Statement</code> with a <code>NULL</code> tag is created for the user.</p>
<pre>
Connection *conn = conPool-&gt;createConnection(username, password, connecstr);
</pre>
<p>To retrieve a previously cached tagged statement, use the alternate form of the <a href="reference010.htm#i1069559">createStatement()</a> method:</p>
<pre>
Statement *stmt = conn-&gt;createStatement(sql, tag);
</pre></li>
<li>
<p>Create a <code>Statement</code> by making a <a href="reference010.htm#i1069559">createStatement()</a> call on the <code>Connection</code> object; the <code>Statement</code> is returned if it is in the cache, or a new <code>Statement</code> with a <code>NULL</code> tag is created for the user.</p>
<pre>
Statement *stmt = conn-&gt;createStatement(sql);
</pre>
<p>To retrieve a previously cached tagged statement, use the alternate form of the <a href="reference010.htm#i1069559">createStatement()</a> method:</p>
<pre>
Statement *stmt = conn-&gt;createStatement(sql, tag);
</pre></li>
<li>
<p>Use the statement to execute SQL commands and obtain results.</p>
</li>
<li>
<p>Return the statement to cache.</p>
<pre>
conn-&gt;terminateStatement(stmt, tag);
</pre>
<p>If you do not want to cache this statement, use the <a href="reference030.htm#CACDHDJF">disableCaching()</a> call and an alternate from of <a href="reference010.htm#i1069634">terminateStatement()</a>:</p>
<pre>
stmt-&gt;disableCaching();
conn-&gt;terminateStatement(stmt);
</pre>
<p>If you must verify whether a statement has been cached, issue an <a href="reference010.htm#CACGDEEH">isCached()</a> call on the <code>Connection</code> object.</p>
</li>
<li>
<p>Release the connection <a href="reference011.htm#i1089631">terminateConnection()</a>.</p>
<pre>
conPool-&gt;terminateConnection(conn);
</pre></li>
</ol>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1012597"></a><a id="LNCPP0039"></a>
<div class="sect1">
<h2 class="sect1">Han<a id="sthref203"></a>dling Exceptions</h2>
<p>Each OCCI method can generate an exception if it is not successful. This exception is of type <code>SQLException</code>. OCCI uses the C++ Standard Template Library (STL), so any exception that can be thrown by the STL can also be thrown by OCCI methods.</p>
<p>The STL exceptions are derived from the standard exception class. The <code>exception::what()</code> method returns a pointer to the error text. The error text is guaranteed to be valid during the catch block</p>
<p>The <code>SQLException</code> class contains Oracle specific error numbers and messages. It is derived from the standard exception class, so it too can obtain the error text by using the <code>exception::what()</code> method.</p>
<p>In addition, the <code>SQLException</code> class has two methods it can use to obtain error information. The <code>getErrorCode()</code> method returns the Oracle error number. The same error text returned by <code>exception::what()</code> can be obtained by the <code>getMessage()</code> method. The <code>getMessage()</code> method returns an STL string so that it can be copied like any other STL string.</p>
<p>Based on your error handling strategy, you may choose to handle OCCI exceptions differently from standard exceptions, or you may choose not to distinguish between the two.</p>
<p>If you decide that it is not important to distinguish between OCCI exceptions and standard exceptions, your catch block might look similar to the following:</p>
<pre>
catch (exception &amp;excp)
{
   cerr &lt;&lt; excp.what() &lt;&lt; endl;
}
</pre>
<p>Should you decide to handle OCCI exceptions differently than standard exceptions, your catch block might look like the following:</p>
<pre>
catch (SQLException &amp;sqlExcp)
{
   cerr &lt;&lt;sqlExcp.getErrorCode &lt;&lt; ": " &lt;&lt; sqlExcp.getErrorMessage() &lt;&lt; endl;
}
catch (exception &amp;excp)
{
   cerr &lt;&lt; excp.what() &lt;&lt; endl;
}
</pre>
<p>In the preceding catch block, SQL exceptions are caught by the first block and non-SQL exceptions are caught by the second block. If the order of these two blocks were to be reversed, SQL exceptions would never be caught. Since <code>SQLException</code> is derived from the standard exception, the standard exception catch block would handle the SQL exception as well.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Description of a special feature for handling errors that arise during batch updates, described in section <a href="performance.htm#CHDJJDAI">"Modifying Rows Iteratively"</a> in <a href="performance.htm#CHDFIEBG">Chapter 12, "Optimizing Performance of OCCI Applications"</a></p>
</li>
<li>
<p><a class="olink ERRMG" href="../../server.112/e17766/toc.htm"><span class="italic">Oracle Database Error Messages</span></a> for more information about Oracle error messages.</p>
</li>
</ul>
</div>
<a id="LNCPP00391"></a>
<div class="sect2"><a id="sthref204"></a>
<h3 class="sect2">Handling Null and Truncated Data</h3>
<p>In general, OCCI does not cause an exception when the data value retrieved by using the <code>get</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> methods of the <code>ResultSet</code> class or <code>Statement</code> class is <code>NULL</code> or truncated. However, this behavior can be changed by calling the <code>setErrorOnNull()</code> method or <code>setErrorOnTruncate()</code> method. If the <code>setError</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> methods are called with <code>causeException=TRUE</code>, then an <code>SQLException</code> is raised when a data value is <code>NULL</code> or truncated.</p>
<p>The default behavior is not to raise an <code>SQLException</code>. A column or parameter value can also be <code>NULL</code>, as determined by a call to <code>isNull()</code> for a <code>ResultSet</code> or <code>Statement</code> object returning <code>TRUE</code>:</p>
<pre>
rs-&gt;isNull(columnIndex);
stmt-&gt;isNull(paramIndex);
</pre>
<p>If the column or parameter value is truncated, it also returns <code>TRUE</code> as determined by a <code>isTruncated()</code> call on a <code>ResultSet</code> or <code>Statement</code> object:</p>
<pre>
rs-&gt;isTruncated(columnIndex);
stmt-&gt;isTruncated(paramIndex);
</pre>
<p>For data retrieved through the <code>setDataBuffer()</code> method and <code>setDataBufferArray()</code> method, exception handling behavior is controlled by the presence or absence of indicator variables and return code variables as shown in <a href="#g1023705">Table 3-1</a>, <a href="#g1023721">Table 3-2</a>, and <a href="#g1023603">Table 3-3</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20140"></a><a id="sthref205"></a><a id="g1023705"></a>Table 3-1 Normal Data - Not Null and Not Truncated</p>
<table class="cellalignment1073" title="Normal Data - Not Null and Not Truncated" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t7">Return Code</th>
<th class="cellalignment1074" id="r1c2-t7"><span class="bold">Indicator - not provided</span></th>
<th class="cellalignment1074" id="r1c3-t7"><span class="bold">Indicator - provided</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t7" headers="r1c1-t7">
<p><span class="bold">Not provided</span></p>
</td>
<td class="cellalignment1075" headers="r2c1-t7 r1c2-t7">
<pre>
error = 0
</pre></td>
<td class="cellalignment1075" headers="r2c1-t7 r1c3-t7">
<pre>
error = 0
indicator = 0
</pre></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t7" headers="r1c1-t7">
<p><span class="bold">Provided</span></p>
</td>
<td class="cellalignment1075" headers="r3c1-t7 r1c2-t7">
<pre>
error = 0
return code = 0
</pre></td>
<td class="cellalignment1075" headers="r3c1-t7 r1c3-t7">
<pre>
error = 0
indicator = 0
return code = 0
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20141"></a><a id="sthref206"></a><a id="g1023721"></a>Table 3-2 Null Data</p>
<table class="cellalignment1073" title="Null Data" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t8">Return Code</th>
<th class="cellalignment1074" id="r1c2-t8"><span class="bold">Indicator - not provided</span></th>
<th class="cellalignment1074" id="r1c3-t8"><span class="bold">Indicator - provided</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t8" headers="r1c1-t8">
<p><span class="bold">Not provided</span></p>
</td>
<td class="cellalignment1075" headers="r2c1-t8 r1c2-t8">
<pre>
SQLException
error = 1405
</pre></td>
<td class="cellalignment1075" headers="r2c1-t8 r1c3-t8">
<pre>
error = 0
indicator = -1
</pre></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t8" headers="r1c1-t8">
<p><span class="bold">Provided</span></p>
</td>
<td class="cellalignment1075" headers="r3c1-t8 r1c2-t8">
<pre>
SQLException
error = 1405
return code = 1405
</pre></td>
<td class="cellalignment1075" headers="r3c1-t8 r1c3-t8">
<pre>
error = 0
indicator = -1
return code = 1405
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20142"></a><a id="sthref207"></a><a id="g1023603"></a>Table 3-3 Truncated Data</p>
<table class="cellalignment1073" title="Truncated Data" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t9">Return Code</th>
<th class="cellalignment1074" id="r1c2-t9"><span class="bold">Indicator - not provided</span></th>
<th class="cellalignment1074" id="r1c3-t9"><span class="bold">Indicator - provided</span></th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t9" headers="r1c1-t9">
<p><span class="bold">Not provided</span></p>
</td>
<td class="cellalignment1075" headers="r2c1-t9 r1c2-t9">
<pre>
SQLException
error = 1406
</pre></td>
<td class="cellalignment1075" headers="r2c1-t9 r1c3-t9">
<pre>
SQLException
error = 1406
indicator = data_len
</pre></td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t9" headers="r1c1-t9">
<p><span class="bold">Provided</span></p>
</td>
<td class="cellalignment1075" headers="r3c1-t9 r1c2-t9">
<pre>
error = 24345
return code = 1405
</pre></td>
<td class="cellalignment1075" headers="r3c1-t9 r1c3-t9">
<pre>
error = 24345
indicator = data_len
return code = 1406
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In <a href="#g1023603">Table 3-3</a>, <code>data_len</code> is the actual length of the data that has been truncated if this length is less than or equal to <code>SB2MAXVAL</code>. Otherwise, the indicator is set to <code>-2</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="install.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="objects.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
