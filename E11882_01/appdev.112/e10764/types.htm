<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Data Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 711" />
<meta name="dcterms.created" content="2013-02-06T9:20:48Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="C++ Call Interface Programmer's Guide," />
<meta name="dcterms.identifier" content="E10764-04" />
<meta name="dcterms.isVersionOf" content="LNCPP" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="objects.htm" title="Previous" type="text/html" />
<link rel="Next" href="metadata.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10764.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/54</span> <!-- End Header --><a id="BABBHJGB"></a><a id="LNCPP005"></a><a id="i1022418"></a>
<h1 class="chapter"><span class="secnum">5</span> Data Types</h1>
<p>This chapter is a reference for Oracle <a id="sthref299"></a>data types used by Oracle C++ Interface applications. This information helps you to understand the conversions between internal and external representations of data that occur when you transfer data between your application and the database server.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1011113">Overview of Oracle Data Types</a></p>
</li>
<li>
<p><a href="#i1011118">Internal Data Types</a></p>
</li>
<li>
<p><a href="#i1011123">External Data Types</a></p>
</li>
<li>
<p><a href="#i1011128">Data Conversions</a></p>
</li>
</ul>
<a id="i1011113"></a><a id="LNCPP20208"></a>
<div class="sect1">
<h2 class="sect1">Overview of Oracl<a id="sthref300"></a>e Data Types</h2>
<p>Accurate communication between your C++ program and the Oracle database server is critical. OCCI applications can retrieve data from database tables by using SQL queries or they can modify existing data with SQL <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> functions. To facilitate communication between the host language C++ and the database server, you must be aware of how C++ data types are converted to Oracle data types and back again.</p>
<p>In the Oracle database, values are stored in columns in tables. Internally, Oracle represents data in particular formats call<a id="sthref301"></a>ed internal data types. <code>NUMBER</code>, <code>VARCHAR2</code>, and <code>DATE</code> are examples of Oracle internal data types.</p>
<p>OCCI applications work with host language data types, or external data types, predefined by the host language. When data is transferred between an OCCI application and the database server, the data from the database is converted from internal data types to exter<a id="sthref302"></a>nal data types.</p>
<a id="LNCPP20209"></a>
<div class="sect2"><a id="sthref303"></a>
<h3 class="sect2">OC<a id="sthref304"></a>CI Type and Data Conversion</h3>
<p>OCCI defines an enumerator called <code>Type</code> that lists the possible data representation formats available in an OCCI application. These representation formats are called external data types. When data is sent to the database server from the OCCI application, the external data type indicates to the database server what format to expect the data. When data is requested from the database server by the OCCI application, the external data type indicates the format of the data to be returned.</p>
<p>For example, on retrieving a value from a <code>NUMBER</code> column, the program may be set to retrieve it in <code>OCCIINT</code> format (a signed integer format into an integer variable). Or, the client might be set to send data in <code>OCCIFLOAT</code> format (floating-point format) stored in a C++ float variable to be inserted in a column of <code>NUMBER</code> type.</p>
<p>An OCCI application binds input parameters to a <code>Statement</code>, by calling a <code>set</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> method (the <code>external datatype</code> is implicitly specified by the method name), or by calling the <code>registerOutParam()</code>, <code>setDataBuffer()</code>, or <code>setDataBufferArray()</code> method (the external data type is explicitly specified in the method call). Similarly, when data values are fetched through a <code>ResultSet</code> object, the external representation of the retrieved data must be specified. This is done by calling a <code>get</code><code><span class="codeinlineitalic">xxx</span></code><code>()</code> method (the <code>external datatype</code> is implicitly specified by the method name) or by calling the <code>setDataBuffer()</code> method (the external data type is explicitly specified in the method call).</p>
<p>Note that there are more external data types than internal data types. In some cases, a single external data type maps to a single internal data type; in other cases, many external data types map to a single internal data type. The many-to-one mapping provides you with added flexibility.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1011123">External Data Types</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011118"></a><a id="LNCPP20210"></a>
<div class="sect1">
<h2 class="sect1">Internal D<a id="sthref305"></a>ata Types</h2>
<p>The internal (built-in) data types provided by Oracle are listed in this section. A brief summary of internal Oracle data types, including description, code, and maximum size, appears in <a href="#CJAFAGFI">Table 5-1</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20211"></a><a id="sthref306"></a><a id="CJAFAGFI"></a>Table 5-1 Summary <a id="sthref307"></a>of Oracle Internal Data Types</p>
<table class="cellalignment1073" title="Summary of Oracle Internal Data Types" summary="Internal Datatype and its Maximum Size" dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t3">Internal Data Type</th>
<th class="cellalignment1074" id="r1c2-t3">Maximum Size</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t3" headers="r1c1-t3">
<pre>
BFILE
</pre></td>
<td class="cellalignment1075" headers="r2c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t3" headers="r1c1-t3">
<pre>
BINARY_DOUBLE
</pre></td>
<td class="cellalignment1075" headers="r3c1-t3 r1c2-t3">
<p>8 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t3" headers="r1c1-t3">
<pre>
BINARY_FLOAT
</pre></td>
<td class="cellalignment1075" headers="r4c1-t3 r1c2-t3">
<p>4 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t3" headers="r1c1-t3">
<pre>
CHAR
</pre></td>
<td class="cellalignment1075" headers="r5c1-t3 r1c2-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t3" headers="r1c1-t3">
<pre>
DATE
</pre></td>
<td class="cellalignment1075" headers="r6c1-t3 r1c2-t3">
<p>7 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t3" headers="r1c1-t3">
<pre>
INTERVAL DAY TO SECOND REF
</pre></td>
<td class="cellalignment1075" headers="r7c1-t3 r1c2-t3">
<p>11 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t3" headers="r1c1-t3">
<pre>
INTERVAL YEAR TO MONTH REF
</pre></td>
<td class="cellalignment1075" headers="r8c1-t3 r1c2-t3">
<p>5 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t3" headers="r1c1-t3">
<pre>
LONG
</pre></td>
<td class="cellalignment1075" headers="r9c1-t3 r1c2-t3">
<p>2 gigabytes (2^31-1 bytes)</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t3" headers="r1c1-t3">
<pre>
LONG RAW
</pre></td>
<td class="cellalignment1075" headers="r10c1-t3 r1c2-t3">
<p>2 gigabytes (2^31-1 bytes)</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t3" headers="r1c1-t3">
<pre>
NCHAR
</pre></td>
<td class="cellalignment1075" headers="r11c1-t3 r1c2-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t3" headers="r1c1-t3">
<pre>
NUMBER
</pre></td>
<td class="cellalignment1075" headers="r12c1-t3 r1c2-t3">
<p>21 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t3" headers="r1c1-t3">
<pre>
NVARCHAR2
</pre></td>
<td class="cellalignment1075" headers="r13c1-t3 r1c2-t3">
<p>4,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t3" headers="r1c1-t3">
<pre>
RAW
</pre></td>
<td class="cellalignment1075" headers="r14c1-t3 r1c2-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t3" headers="r1c1-t3">
<pre>
REF
</pre></td>
<td class="cellalignment1075" headers="r15c1-t3 r1c2-t3">
<p>&nbsp;</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t3" headers="r1c1-t3">
<pre>
BLOB
</pre></td>
<td class="cellalignment1075" headers="r16c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t3" headers="r1c1-t3">
<pre>
CLOB
</pre></td>
<td class="cellalignment1075" headers="r17c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t3" headers="r1c1-t3">
<pre>
NCLOB
</pre></td>
<td class="cellalignment1075" headers="r18c1-t3 r1c2-t3">
<p>4 gigabytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t3" headers="r1c1-t3">
<pre>
ROWID
</pre></td>
<td class="cellalignment1075" headers="r19c1-t3 r1c2-t3">
<p>10 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t3" headers="r1c1-t3">
<pre>
TIMESTAMP
</pre></td>
<td class="cellalignment1075" headers="r20c1-t3 r1c2-t3">
<p>11 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t3" headers="r1c1-t3">
<pre>
TIMESTAMP WITH LOCAL TIME ZONE
</pre></td>
<td class="cellalignment1075" headers="r21c1-t3 r1c2-t3">
<p>7 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t3" headers="r1c1-t3">
<pre>
TIMESTAMP WITH TIME ZONE
</pre></td>
<td class="cellalignment1075" headers="r22c1-t3 r1c2-t3">
<p>13 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t3" headers="r1c1-t3">
<pre>
UROWID
</pre></td>
<td class="cellalignment1075" headers="r23c1-t3 r1c2-t3">
<p>4000 bytes</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t3" headers="r1c1-t3">
<p>User-defined type (object type, <code>VARRAY</code>, nested table)</p>
</td>
<td class="cellalignment1075" headers="r24c1-t3 r1c2-t3">
<p>&nbsp;</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t3" headers="r1c1-t3">
<pre>
VARCHAR2
</pre></td>
<td class="cellalignment1075" headers="r25c1-t3 r1c2-t3">
<p>4,000 bytes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF0021" href="../../server.112/e41084/sql_elements001.htm#SQLRF0021"><span class="italic">Oracle Database SQL Language Reference</span></a></p>
</li>
<li>
<p><a class="olink CNCPT1044" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=CNCPT1044"><span class="italic">Oracle Database Concepts</span></a></p>
</li>
</ul>
</div>
<a id="LNCPP20212"></a>
<div class="sect2"><a id="sthref308"></a>
<h3 class="sect2">Character Strings and Byte Arrays</h3>
<p>You can use five Oracle internal data types to specify columns that contain either characters or arrays of bytes: <code>C<a id="sthref309"></a>HAR</code>, <code>VARCH<a id="sthref310"></a>AR2</code>, <code>R<a id="sthref311"></a>AW</code>, <code>LON<a id="sthref312"></a>G</code>, and <code>LONG<a id="sthref313"></a></code> <code>RAW</code>.</p>
<p><code>CHAR</code>, <code>VARCHAR2</code>, and <code>LONG</code> columns normally hold character data. <code>RAW</code> and <code>LONG</code> <code>RAW</code> hold bytes that are not interpreted as characters, for example, pixel values in a bitmapped graphics image. Character data can be transformed when passed through a gateway between networks. For example, character data passed between systems by using different languages (where single characters may be represented by differing numbers of bytes) can be significantly changed in length. Raw data is never converted in this way.</p>
<p>The database designer is responsible for choosing the appropriate Oracle internal data type for each column in a table. You must be aware of the many possible ways that character and byte-array data can be represented and converted between variables in the OCCI program and Oracle database tables.</p>
</div>
<!-- class="sect2" -->
<a id="LNCPP20213"></a>
<div class="sect2"><a id="sthref314"></a>
<h3 class="sect2">Universal Rowid (UROWID)</h3>
<p>The universal rowid (<code>UROWID</code>) is a data type that can store both the logical and the physical rowid of rows in Oracle tables and in foreign tables, such as DB2 tables accessed through a gateway. Logical <code>rowid</code> values are primary key-based logical identifiers for the rows of <a id="sthref315"></a><a id="sthref316"></a>index-organized tables.</p>
<p>To use columns of the <code>UROWID</code> data type, the value of the <code>COMPATIBLE</code> initialization parameter must be set to <code>8.1</code> or higher.</p>
<p>The following <code>OCCI_SQLT</code> types can be bound to universal <code>rowid</code>s:</p>
<ul>
<li>
<p><code>OCCI_SQLT_CHR</code> (<code>VARCHAR2</code>)</p>
</li>
<li>
<p><code>OCCI_SQLT_VCS</code> (<code>VARCHAR</code>)</p>
</li>
<li>
<p><code>OCCI_SQLT_STR</code> (<code>NULL</code> terminated string)</p>
</li>
<li>
<p><code>OCCI_SQLT_LVC</code> (long <code>VARCHAR</code>)</p>
</li>
<li>
<p><code>OCCI_SQLT_AFC</code> (<code>CHAR)</code></p>
</li>
<li>
<p><code>OCCI_SQLT_AVC</code> (<code>CHARZ</code>)</p>
</li>
<li>
<p><code>OCCI_SQLT_VST</code> (string)</p>
</li>
<li>
<p><code>OCCI_SQLT_RDD</code> (<code>ROWID</code> descriptor)</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011123"></a><a id="LNCPP20214"></a>
<div class="sect1">
<h2 class="sect1">Extern<a id="sthref317"></a>al Data Types</h2>
<p>OCCI application communicate with the Oracle database server by using external data types. Specifically, external data types are mapped to C++ data types.</p>
<p><a href="#CJAFHAAD">Table 5-2</a> lists the Oracle external data types, the C++ equivalent (what the Oracle internal data type is usually converted to), and the corresponding OCCI type. Note the following conditions:</p>
<ul>
<li>
<p>In C++ Data Type column, <code>n</code> stands for variable length and depends on program requirements or operating system.</p>
</li>
<li>
<p>The usage of types in <code>Statement</code> class methods is as follows:</p>
<ul>
<li>
<p><code>setDataBuffer()</code> and <code>setDataBufferArray()</code>: Only types of the form <code>OCCI_SQLT_</code><code><span class="codeinlineitalic">xxx</span></code> (for example, <code>OCCI_SQLT_INT</code>) in the <code>occiCommon.h</code> file are permitted.</p>
</li>
<li>
<p><code>registerOutParam()</code>: Only types of the form <code>OCCI</code><code><span class="codeinlineitalic">xxx</span></code> (for example, <code>OCCIDOUBLE</code>, <code>OCCICURSOR</code>, and so on) on the <code>occiCommon.h</code> file are permitted. However, there are some exceptions: <code>OCCIANYDATA</code>, <code>OCCIMETADATA</code>, <code>OCCISTREAM</code>, and <code>OCCIBOOL</code> are not permitted.</p>
</li>
</ul>
</li>
<li>
<p>In the <code>ResultSet</code> class, only types of the form <code>OCCI_SQLT_</code><code><span class="codeinlineitalic">xxx</span></code> (for example, <code>OCCI_SQLT_INT</code>) in the <code>occiCommon.h</code> file are permitted for use in <code>setDataBuffer()</code> and <code>setDataBufferArray()</code> methods.</p>
</li>
<li>
<p>The <code>TIMESTAMP</code> and <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> data types are collectively known as <span class="bold">datetimes</span>. The <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> and <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> are collectively known as <span class="bold">intervals</span>.</p>
</li>
</ul>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20215"></a><a id="sthref318"></a><a id="CJAFHAAD"></a>Table 5-2 External Data Types and Corresponding C++ and OCCI Types</p>
<table class="cellalignment1073" title="External Data Types and Corresponding C++ and OCCI Types" summary="Column 1 lists external datatypes; column 2 provides a brief description; column 3 lists matching C++ type(s); column 4 lists matching OCCI Types." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t5" headers="ExternalDatatype">External Data Type</th>
<th class="cellalignment1074" id="r1c2-t5" headers="CPPType">C++ Type</th>
<th class="cellalignment1074" id="r1c3-t5" headers="OCCIType">OCCI Type</th>
<th class="cellalignment1074" id="r1c4-t5">Usage Notes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t5" headers="r1c1-t5">
<p>16 bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t5 r1c2-t5">
<pre>
signed short, signed int
</pre></td>
<td class="cellalignment1075" headers="r2c1-t5 r1c3-t5">
<pre>
OCCIINT
</pre></td>
<td class="cellalignment1075" headers="r2c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t5" headers="r1c1-t5">
<p>32 bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t5 r1c2-t5">
<pre>
signed int, signed long
</pre></td>
<td class="cellalignment1075" headers="r3c1-t5 r1c3-t5">
<pre>
OCCIINT
</pre></td>
<td class="cellalignment1075" headers="r3c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t5" headers="r1c1-t5">
<p>8 bit signed <code>INTEGER</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t5 r1c2-t5">
<pre>
signed char
</pre></td>
<td class="cellalignment1075" headers="r4c1-t5 r1c3-t5">
<pre>
OCCIINT
</pre></td>
<td class="cellalignment1075" headers="r4c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t5" headers="r1c1-t5">
<p><code>BFILE</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t5 r1c2-t5">
<pre>
Bfile
</pre></td>
<td class="cellalignment1075" headers="r5c1-t5 r1c3-t5">
<pre>
OCCIBFILE
</pre></td>
<td class="cellalignment1075" headers="r5c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t5" headers="r1c1-t5">
<p><code>FBFILE</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t5 r1c2-t5">
<pre>
OCILobLocator
</pre></td>
<td class="cellalignment1075" headers="r6c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_FILE
</pre></td>
<td class="cellalignment1075" headers="r6c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t5" headers="r1c1-t5">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t5 r1c2-t5">
<pre>
OCILobLocator
</pre></td>
<td class="cellalignment1075" headers="r7c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_BLOB
</pre></td>
<td class="cellalignment1075" headers="r7c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t5" headers="r1c1-t5">
<p><code>BLOB</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t5 r1c2-t5">
<pre>
Blob
</pre></td>
<td class="cellalignment1075" headers="r8c1-t5 r1c3-t5">
<pre>
OCCIBLOB
</pre></td>
<td class="cellalignment1075" headers="r8c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t5" headers="r1c1-t5">
<p><code>BOOL</code></p>
</td>
<td class="cellalignment1075" headers="r9c1-t5 r1c2-t5">
<pre>
bool
</pre></td>
<td class="cellalignment1075" headers="r9c1-t5 r1c3-t5">
<pre>
OCCIBOOL
</pre></td>
<td class="cellalignment1075" headers="r9c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t5" headers="r1c1-t5">
<p><code>BYTES</code></p>
</td>
<td class="cellalignment1075" headers="r10c1-t5 r1c2-t5">
<pre>
Bytes
</pre></td>
<td class="cellalignment1075" headers="r10c1-t5 r1c3-t5">
<pre>
OCCIBYTES
</pre></td>
<td class="cellalignment1075" headers="r10c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t5" headers="r1c1-t5">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1075" headers="r11c1-t5 r1c2-t5">
<pre>
char[n]
</pre></td>
<td class="cellalignment1075" headers="r11c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_AFC
</pre></td>
<td class="cellalignment1075" headers="r11c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t5" headers="r1c1-t5">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1075" headers="r12c1-t5 r1c2-t5">
<pre>
string
</pre></td>
<td class="cellalignment1075" headers="r12c1-t5 r1c3-t5">
<pre>
OCCICHAR
</pre></td>
<td class="cellalignment1075" headers="r12c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t5" headers="r1c1-t5">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1075" headers="r13c1-t5 r1c2-t5">
<pre>
OCILobLocator
</pre></td>
<td class="cellalignment1075" headers="r13c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_CLOB
</pre></td>
<td class="cellalignment1075" headers="r13c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t5" headers="r1c1-t5">
<p><code>CHARZ</code></p>
</td>
<td class="cellalignment1075" headers="r14c1-t5 r1c2-t5">
<pre>
char[n+1]
</pre></td>
<td class="cellalignment1075" headers="r14c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_RDD
</pre></td>
<td class="cellalignment1075" headers="r14c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t5" headers="r1c1-t5">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1075" headers="r15c1-t5 r1c2-t5">
<pre>
Clob
</pre></td>
<td class="cellalignment1075" headers="r15c1-t5 r1c3-t5">
<pre>
OCCICLOB
</pre></td>
<td class="cellalignment1075" headers="r15c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t5" headers="r1c1-t5">
<p><code>CURSOR</code></p>
</td>
<td class="cellalignment1075" headers="r16c1-t5 r1c2-t5">
<pre>
ResultSet
</pre></td>
<td class="cellalignment1075" headers="r16c1-t5 r1c3-t5">
<pre>
OCCICURSOR
</pre></td>
<td class="cellalignment1075" headers="r16c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t5" headers="r1c1-t5">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1075" headers="r17c1-t5 r1c2-t5">
<pre>
char[7]
</pre></td>
<td class="cellalignment1075" headers="r17c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_DAT
</pre></td>
<td class="cellalignment1075" headers="r17c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t5" headers="r1c1-t5">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1075" headers="r18c1-t5 r1c2-t5">
<pre>
Date
</pre></td>
<td class="cellalignment1075" headers="r18c1-t5 r1c3-t5">
<pre>
OCCIDATE
</pre></td>
<td class="cellalignment1075" headers="r18c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t5" headers="r1c1-t5">
<p><code>DOUBLE</code></p>
</td>
<td class="cellalignment1075" headers="r19c1-t5 r1c2-t5">
<pre>
double
</pre></td>
<td class="cellalignment1075" headers="r19c1-t5 r1c3-t5">
<pre>
OCCIDOUBLE
</pre></td>
<td class="cellalignment1075" headers="r19c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t5" headers="r1c1-t5">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1075" headers="r20c1-t5 r1c2-t5">
<pre>
float, double
</pre></td>
<td class="cellalignment1075" headers="r20c1-t5 r1c3-t5">
<pre>
OCCIFLOAT
</pre></td>
<td class="cellalignment1075" headers="r20c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t5" headers="r1c1-t5">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1075" headers="r21c1-t5 r1c2-t5">
<pre>
float
</pre></td>
<td class="cellalignment1075" headers="r21c1-t5 r1c3-t5">
<pre>
OCCIFLOAT
</pre></td>
<td class="cellalignment1075" headers="r21c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t5" headers="r1c1-t5">
<p><code>INT</code></p>
</td>
<td class="cellalignment1075" headers="r22c1-t5 r1c2-t5">
<pre>
int
</pre></td>
<td class="cellalignment1075" headers="r22c1-t5 r1c3-t5">
<pre>
OCCIINT
</pre></td>
<td class="cellalignment1075" headers="r22c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t5" headers="r1c1-t5">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1075" headers="r23c1-t5 r1c2-t5">
<pre>
char[11]
</pre></td>
<td class="cellalignment1075" headers="r23c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_INTERVAL_DS
</pre></td>
<td class="cellalignment1075" headers="r23c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t5" headers="r1c1-t5">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1075" headers="r24c1-t5 r1c2-t5">
<pre>
char[5]
</pre></td>
<td class="cellalignment1075" headers="r24c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_INTERVAL_YM
</pre></td>
<td class="cellalignment1075" headers="r24c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t5" headers="r1c1-t5">
<p><code>INTERVALDS</code></p>
</td>
<td class="cellalignment1075" headers="r25c1-t5 r1c2-t5">
<pre>
IntervalDS
</pre></td>
<td class="cellalignment1075" headers="r25c1-t5 r1c3-t5">
<pre>
OCCIINTERVALDS
</pre></td>
<td class="cellalignment1075" headers="r25c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r26c1-t5" headers="r1c1-t5">
<p><code>INTERVALYM</code></p>
</td>
<td class="cellalignment1075" headers="r26c1-t5 r1c2-t5">
<pre>
IntervalYM
</pre></td>
<td class="cellalignment1075" headers="r26c1-t5 r1c3-t5">
<pre>
OCCIINTERVALYM
</pre></td>
<td class="cellalignment1075" headers="r26c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r27c1-t5" headers="r1c1-t5">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1075" headers="r27c1-t5 r1c2-t5">
<pre>
char[n]
</pre></td>
<td class="cellalignment1075" headers="r27c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_LNG
</pre></td>
<td class="cellalignment1075" headers="r27c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r28c1-t5" headers="r1c1-t5">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1075" headers="r28c1-t5 r1c2-t5">
<pre>
unsigned char[n]
</pre></td>
<td class="cellalignment1075" headers="r28c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_LBI
</pre></td>
<td class="cellalignment1075" headers="r28c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r29c1-t5" headers="r1c1-t5">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r29c1-t5 r1c2-t5">
<pre>
char[n+siezeof(integer)]
</pre></td>
<td class="cellalignment1075" headers="r29c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_LVC
</pre></td>
<td class="cellalignment1075" headers="r29c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r30c1-t5" headers="r1c1-t5">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r30c1-t5 r1c2-t5">
<pre>
unsigned char[n+siezeof(integer)]
</pre></td>
<td class="cellalignment1075" headers="r30c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_LVB
</pre></td>
<td class="cellalignment1075" headers="r30c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r31c1-t5" headers="r1c1-t5">
<p><code>METADATA</code></p>
</td>
<td class="cellalignment1075" headers="r31c1-t5 r1c2-t5">
<pre>
MetaData
</pre></td>
<td class="cellalignment1075" headers="r31c1-t5 r1c3-t5">
<pre>
OCCIMETADATA
</pre></td>
<td class="cellalignment1075" headers="r31c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r32c1-t5" headers="r1c1-t5">
<p><code>NAMED DATA TYPE</code></p>
</td>
<td class="cellalignment1075" headers="r32c1-t5 r1c2-t5">
<pre>
struct
</pre></td>
<td class="cellalignment1075" headers="r32c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_NTY
</pre></td>
<td class="cellalignment1075" headers="r32c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r33c1-t5" headers="r1c1-t5">
<p><code>NATIVE DOUBLE</code></p>
</td>
<td class="cellalignment1075" headers="r33c1-t5 r1c2-t5">
<pre>
double
</pre></td>
<td class="cellalignment1075" headers="r33c1-t5 r1c3-t5">
<pre>
OCCIBDOUBLE
</pre></td>
<td class="cellalignment1075" headers="r33c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r34c1-t5" headers="r1c1-t5">
<p><code>NATIVE DOUBLE</code></p>
</td>
<td class="cellalignment1075" headers="r34c1-t5 r1c2-t5">
<pre>
Bdouble, double
</pre></td>
<td class="cellalignment1075" headers="r34c1-t5 r1c3-t5">
<pre>
OCCIBDOUBLE
</pre></td>
<td class="cellalignment1075" headers="r34c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r35c1-t5" headers="r1c1-t5">
<p><code>NATIVE FLOAT</code></p>
</td>
<td class="cellalignment1075" headers="r35c1-t5 r1c2-t5">
<pre>
float
</pre></td>
<td class="cellalignment1075" headers="r35c1-t5 r1c3-t5">
<pre>
OCCIBFLOAT
</pre></td>
<td class="cellalignment1075" headers="r35c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r36c1-t5" headers="r1c1-t5">
<p><code>NATIVE FLOAT</code></p>
</td>
<td class="cellalignment1075" headers="r36c1-t5 r1c2-t5">
<pre>
BFloat, float
</pre></td>
<td class="cellalignment1075" headers="r36c1-t5 r1c3-t5">
<pre>
OCCIBFLOAT
</pre></td>
<td class="cellalignment1075" headers="r36c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r37c1-t5" headers="r1c1-t5">
<p>null terminated <code>STRING</code></p>
</td>
<td class="cellalignment1075" headers="r37c1-t5 r1c2-t5">
<pre>
char[n+1]
</pre></td>
<td class="cellalignment1075" headers="r37c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_STR
</pre></td>
<td class="cellalignment1075" headers="r37c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r38c1-t5" headers="r1c1-t5">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1075" headers="r38c1-t5 r1c2-t5">
<pre>
unsigned char[21]
</pre></td>
<td class="cellalignment1075" headers="r38c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_NUM
</pre></td>
<td class="cellalignment1075" headers="r38c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r39c1-t5" headers="r1c1-t5">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1075" headers="r39c1-t5 r1c2-t5">
<pre>
Number
</pre></td>
<td class="cellalignment1075" headers="r39c1-t5 r1c3-t5">
<pre>
OCCINUMBER
</pre></td>
<td class="cellalignment1075" headers="r39c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r40c1-t5" headers="r1c1-t5">
<p><code>POBJECT</code></p>
</td>
<td class="cellalignment1075" headers="r40c1-t5 r1c2-t5">
<p>User defined types generated by OTT utility.</p>
</td>
<td class="cellalignment1075" headers="r40c1-t5 r1c3-t5">
<pre>
OCCIPOBJECT
</pre></td>
<td class="cellalignment1075" headers="r40c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r41c1-t5" headers="r1c1-t5">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1075" headers="r41c1-t5 r1c2-t5">
<pre>
unsigned char[n]
</pre></td>
<td class="cellalignment1075" headers="r41c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_BIN
</pre></td>
<td class="cellalignment1075" headers="r41c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r42c1-t5" headers="r1c1-t5">
<p><code>REF</code></p>
</td>
<td class="cellalignment1075" headers="r42c1-t5 r1c2-t5">
<pre>
OCIRef
</pre></td>
<td class="cellalignment1075" headers="r42c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_REF
</pre></td>
<td class="cellalignment1075" headers="r42c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r43c1-t5" headers="r1c1-t5">
<p><code>REF</code></p>
</td>
<td class="cellalignment1075" headers="r43c1-t5 r1c2-t5">
<pre>
Ref
</pre></td>
<td class="cellalignment1075" headers="r43c1-t5 r1c3-t5">
<pre>
OCCIREF
</pre></td>
<td class="cellalignment1075" headers="r43c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r44c1-t5" headers="r1c1-t5">
<p><code>REFANY</code></p>
</td>
<td class="cellalignment1075" headers="r44c1-t5 r1c2-t5">
<pre>
RefAny
</pre></td>
<td class="cellalignment1075" headers="r44c1-t5 r1c3-t5">
<pre>
OCCIREFANY
</pre></td>
<td class="cellalignment1075" headers="r44c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r45c1-t5" headers="r1c1-t5">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment1075" headers="r45c1-t5 r1c2-t5">
<pre>
OCIRowid
</pre></td>
<td class="cellalignment1075" headers="r45c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_RID
</pre></td>
<td class="cellalignment1075" headers="r45c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r46c1-t5" headers="r1c1-t5">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment1075" headers="r46c1-t5 r1c2-t5">
<pre>
Bytes
</pre></td>
<td class="cellalignment1075" headers="r46c1-t5 r1c3-t5">
<pre>
OCCIROWID
</pre></td>
<td class="cellalignment1075" headers="r46c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r47c1-t5" headers="r1c1-t5">
<p><code>ROWID</code> descriptor</p>
</td>
<td class="cellalignment1075" headers="r47c1-t5 r1c2-t5">
<pre>
OCIRowid
</pre></td>
<td class="cellalignment1075" headers="r47c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_RDD
</pre></td>
<td class="cellalignment1075" headers="r47c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r48c1-t5" headers="r1c1-t5">
<p><code>STRING</code></p>
</td>
<td class="cellalignment1075" headers="r48c1-t5 r1c2-t5">
<pre>
STL string
</pre></td>
<td class="cellalignment1075" headers="r48c1-t5 r1c3-t5">
<pre>
OCCISTRING
</pre></td>
<td class="cellalignment1075" headers="r48c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r49c1-t5" headers="r1c1-t5">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1075" headers="r49c1-t5 r1c2-t5">
<pre>
char[11]
</pre></td>
<td class="cellalignment1075" headers="r49c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_TIMESTAMP
</pre></td>
<td class="cellalignment1075" headers="r49c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r50c1-t5" headers="r1c1-t5">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1075" headers="r50c1-t5 r1c2-t5">
<pre>
Timestamp
</pre></td>
<td class="cellalignment1075" headers="r50c1-t5 r1c3-t5">
<pre>
OCCITIMESTAMP
</pre></td>
<td class="cellalignment1075" headers="r50c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r51c1-t5" headers="r1c1-t5">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE</code></p>
</td>
<td class="cellalignment1075" headers="r51c1-t5 r1c2-t5">
<pre>
char[7]
</pre></td>
<td class="cellalignment1075" headers="r51c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_TIMESTAMP_LTZ
</pre></td>
<td class="cellalignment1075" headers="r51c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r52c1-t5" headers="r1c1-t5">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1075" headers="r52c1-t5 r1c2-t5">
<pre>
char[13]
</pre></td>
<td class="cellalignment1075" headers="r52c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_TIMESTAMP_TZ
</pre></td>
<td class="cellalignment1075" headers="r52c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r53c1-t5" headers="r1c1-t5">
<p><code>UNSIGNED INT</code></p>
</td>
<td class="cellalignment1075" headers="r53c1-t5 r1c2-t5">
<pre>
unsigned int
</pre></td>
<td class="cellalignment1075" headers="r53c1-t5 r1c3-t5">
<pre>
OCCIUNSIGNED_INT
</pre></td>
<td class="cellalignment1075" headers="r53c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r54c1-t5" headers="r1c1-t5">
<p><code>UNSIGNED INT</code></p>
</td>
<td class="cellalignment1075" headers="r54c1-t5 r1c2-t5">
<pre>
unsigned int
</pre></td>
<td class="cellalignment1075" headers="r54c1-t5 r1c3-t5">
<pre>
OCCIUNSIGNED_INT
</pre></td>
<td class="cellalignment1075" headers="r54c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r55c1-t5" headers="r1c1-t5">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r55c1-t5 r1c2-t5">
<pre>
char[n+sizeof( short integer)]
</pre></td>
<td class="cellalignment1075" headers="r55c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_VCS
</pre></td>
<td class="cellalignment1075" headers="r55c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r56c1-t5" headers="r1c1-t5">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1075" headers="r56c1-t5 r1c2-t5">
<pre>
char[n]
</pre></td>
<td class="cellalignment1075" headers="r56c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_CHR
</pre></td>
<td class="cellalignment1075" headers="r56c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r57c1-t5" headers="r1c1-t5">
<p><code>VARNUM</code></p>
</td>
<td class="cellalignment1075" headers="r57c1-t5 r1c2-t5">
<pre>
char[22]
</pre></td>
<td class="cellalignment1075" headers="r57c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_VNU
</pre></td>
<td class="cellalignment1075" headers="r57c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r58c1-t5" headers="r1c1-t5">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r58c1-t5 r1c2-t5">
<pre>
unsigned char[n+sizeof( short integer)]
</pre></td>
<td class="cellalignment1075" headers="r58c1-t5 r1c3-t5">
<pre>
OCCI_SQLT_VBI
</pre></td>
<td class="cellalignment1075" headers="r58c1-t5 r1c4-t5">
<p>Use with <code>setDataBuffer()</code>, <code>setDataBufferArray()</code>.</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r59c1-t5" headers="r1c1-t5">
<p><code>VECTOR</code></p>
</td>
<td class="cellalignment1075" headers="r59c1-t5 r1c2-t5">
<pre>
STL vector
</pre></td>
<td class="cellalignment1075" headers="r59c1-t5 r1c3-t5">
<pre>
OCCIVECTOR
</pre></td>
<td class="cellalignment1075" headers="r59c1-t5 r1c4-t5">
<p>Use with <code>regiserOutParam()</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="LNCPP20216"></a>
<div class="sect2"><a id="sthref319"></a>
<h3 class="sect2">Description of Exter<a id="sthref320"></a>nal Data Types</h3>
<p>This section provides a description for each of the external data types.</p>
<a id="LNCPP20217"></a>
<div class="sect3"><a id="sthref321"></a>
<h4 class="sect3">BFILE<a id="sthref322"></a><a id="sthref323"></a></h4>
<p>The external data type <code>BFILE</code> allows read-only byte stream access to large files on the file system of the database server. A <code>BFILE</code> is a large binary data object stored in operating system files outside database tablespaces. These files use reference semantics. The Oracle server can access a <code>BFILE</code> provided the underlying server operating system supports stream-mode access to these operating system files.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20218"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref324"></a>
<h4 class="sect3">BDOUBLE</h4>
<p>The <code>BDouble</code> interface in OCCI encapsulates the native double data and the <code>NULL</code> information of a column or object attribute of the type <code>binary_double</code>. The OCCI methods in <a href="reference004.htm#CACFDEFG">AnyData Class</a>, <a href="reference027.htm#i1079050">ResultSet Class</a> and <a href="reference030.htm#i1079052">Statement Class</a>, and the global methods that take these class objects as parameters, use the following definition for the <code>BDOUBLE</code> data type:</p>
<div class="example">
<p class="titleinexample"><a id="LNCPP20219"></a><a id="sthref325"></a>Example 5-1 Definition of the BDOUBLE Data Type</p>
<pre>
struct BDouble 
{ 
  double value; 
  bool isNull; 
 
 BDouble() 
 { 
    isNull = false; 
    value = 0.; 
 } 
}; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="LNCPP20220"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref326"></a>
<h4 class="sect3">BFLOAT</h4>
<p>The <code>BFloat</code> interface in OCCI encapsulates the native float data and the <code>NULL</code> information of a column or object attribute of the type <code>binary_float</code>. The OCCI methods in <a href="reference004.htm#CACFDEFG">AnyData Class</a>, <a href="reference027.htm#i1079050">ResultSet Class</a> and <a href="reference030.htm#i1079052">Statement Class</a>, and the global methods that take these class objects as parameters, use the following definition for the <code>BFLOAT</code> data type:</p>
<div class="example">
<p class="titleinexample"><a id="LNCPP20221"></a><a id="sthref327"></a>Example 5-2 Definition of the BFLOAT Data Type</p>
<pre>
struct BFloat 
{ 
  float value; 
  bool isNull; 
 
 BFloat() 
 { 
    isNull = false; 
    value = 0.; 
 } 
}; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="LNCPP20222"></a>
<div class="sect3"><a id="sthref328"></a>
<h4 class="sect3">B<a id="sthref329"></a><a id="sthref330"></a>LOB</h4>
<p>The external data type <code>BLOB</code> stores unstructured binary large objects. A <code>BLOB</code> can be thought of as a bitstream with no character set semantics. <code>BLOB</code>s can store up to <code>4</code> gigabytes of binary data.</p>
<p><code>BLOB</code> data types have full transactional support. Changes made through OCCI participate fully in the transaction. <code>BLOB</code> value manipulations can be committed or rolled back. You cannot save a <code>BLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20223"></a>
<div class="sect3"><a id="sthref331"></a>
<h4 class="sect3">CHA<a id="sthref332"></a><a id="sthref333"></a>R</h4>
<p>The external data type <code>CHAR</code> is a string of characters, with a maximum length of <code>2000</code> characters. Character strings are compared by using blank-padded comparison semantics.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20224"></a>
<div class="sect3"><a id="sthref334"></a>
<h4 class="sect3">CHAR<a id="sthref335"></a>Z</h4>
<p>The external data type <code>CHARZ</code> is similar to the <code>CHAR</code> data type, except that the string must be <code>NULL</code> terminated on input, and Oracle places a <code>NULL</code> terminator character at the end of the string on output. The <code>NULL</code> terminator serves only to delimit the string on input or output. It is not part of the data in the table.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20225"></a>
<div class="sect3"><a id="sthref336"></a>
<h4 class="sect3">CLO<a id="sthref337"></a><a id="sthref338"></a>B</h4>
<p>The external data type <code>CLOB</code> stores fixed-width or varying-width character data. A <code>CLOB</code> can store up to <code>4</code> gigabytes of character data. <code>CLOB</code>s have full transactional support. Changes made through OCCI participate fully in the transaction. <code>CLOB</code> value manipulations can be committed or rolled back. You cannot save a <code>CLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20226"></a>
<div class="sect3"><a id="sthref339"></a>
<h4 class="sect3">DA<a id="sthref340"></a><a id="sthref341"></a>TE</h4>
<p>The external data type <code>DATE</code> can update, insert, or retrieve a date value using the Oracle internal seven byte date binary format, as listed in <a href="#g1032325">Table 5-3</a>:</p>
<div class="tblformalwide">
<p class="titleintable"><a id="LNCPP20227"></a><a id="sthref342"></a><a id="g1032325"></a>Table 5-3 Format of the DATE Data Type</p>
<table class="cellalignment1076" title="Format of the DATE Data Type" summary="First column lists ...." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t6">Example</th>
<th class="cellalignment1074" id="r1c2-t6">Byte 1: Century</th>
<th class="cellalignment1074" id="r1c3-t6">Byte 2: Year</th>
<th class="cellalignment1074" id="r1c4-t6">Byte 3: Month</th>
<th class="cellalignment1074" id="r1c5-t6">Byte 4: Day</th>
<th class="cellalignment1074" id="r1c6-t6">Byte 5: Hour</th>
<th class="cellalignment1074" id="r1c7-t6">Byte 6: Minute</th>
<th class="cellalignment1074" id="r1c8-t6">Byte 7: Second</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t6" headers="r1c1-t6">
<p><span class="bold">1:&nbsp;</span>01-JUN-2000, 3:17PM</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c2-t6">
<p>120</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c3-t6">
<p>100</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c4-t6">
<p>6</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c5-t6">
<p>1</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c6-t6">
<p>16</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c7-t6">
<p>18</p>
</td>
<td class="cellalignment1075" headers="r2c1-t6 r1c8-t6">
<p>1</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t6" headers="r1c1-t6">
<p><span class="bold">2:&nbsp;</span>01-JAN-4712 BCE</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c2-t6">
<p>53</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c3-t6">
<p>88</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c4-t6">
<p>1</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c5-t6">
<p>1</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c6-t6">
<p>1</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c7-t6">
<p>1</p>
</td>
<td class="cellalignment1075" headers="r3c1-t6 r1c8-t6">
<p>1</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<a id="LNCPP20228"></a>
<div class="sect4"><a id="sthref343"></a>
<h5 class="sect4">Example 1, 01-JUN-2000, 3:17PM:</h5>
<ul>
<li>
<p>The century and year bytes (1 and 2) are in excess-<code>100</code> notation. Dates BCE (Before Common Era) are less than <code>100</code>. Dates in the Common Era (CE), 0 and after, are greater than <code>100</code>. For dates 0 and after, the first digit of both bytes 1 and 2 signifies that it is of the CE.</p>
</li>
<li>
<p>For byte 1, the second and third digits of the century are calculated as the year (an integer) divided by 100. With integer division, the fractional portion is discarded. The following calculation is for the year 1992: <code>1992 / 100 = 19</code>.</p>
</li>
<li>
<p>For byte 1, <code>119</code> represents the twentieth century, 1900 to 1999. A value of <code>120</code> would represent the twenty-first century, 2000 to 2099.</p>
</li>
<li>
<p>For byte 2, the second and third digits of the year are calculated as the year modulo 100: <code>1992 % 100 = 92</code>.</p>
</li>
<li>
<p>For byte 2, <code>192</code> represents the ninety-second year of the current century. A value of <code>100</code> would represent the zeroth year of the current century.</p>
</li>
<li>
<p>The year 2000 would yield <code>120</code> for byte 1 and <code>100</code> for byte 2.</p>
</li>
<li>
<p>For bytes 3 through 7, valid dates begin at 01-JAN of the year. The month byte ranges from <code>1</code> to <code>12</code>, the date byte ranges from <code>1</code> to <code>31</code>, the hour byte ranges from <code>1</code> to <code>24</code>, the minute byte ranges from <code>1</code> to <code>60</code>, and the second byte ranges from <code>1</code> to <code>60</code>.</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<a id="LNCPP20229"></a>
<div class="sect4"><a id="sthref344"></a>
<h5 class="sect4">Example 2, 01-JAN-4712 BCE:</h5>
<ul>
<li>
<p>For years before 0 CE, centuries and years are represented by the difference between 100 and the number.</p>
</li>
<li>
<p>For byte 1, 01-JAN-4712 BCE is century <code>53:</code> <code>100 - 47 = 53.</code></p>
</li>
<li>
<p>For byte 2, 01-JAN-4712 BCE is year <code>88</code>: <code>100 - 12 = 88</code>.</p>
</li>
</ul>
<p>If no time is specified for a date, the time defaults to midnight and bytes 5 through 6 are set to <code>1</code>: <code>1</code>, <code>1</code>, <code>1</code>.</p>
<p>When you enter a date in binary format by using the external data type <code>DATE</code>, the database does not perform consistency or range checking. All data in this format must be validated before input.</p>
<p>There is little need for the external data type <code>DATE</code>. It is more convenient to convert <code>DATE</code> values to a character format, because most programs deal with dates in a character format, such as <code>DD-MON-YYYY</code>. Instead, you may use the <code>Date</code> data type.</p>
<p>When a <code>DATE</code> column is converted to a character string in your program, it is returned in the default format mask for your session, or as specified in the <code>INIT.ORA</code> file.</p>
<p>This data type is different from <code>OCCI DATE</code> which corresponds to a C++ <code>Date</code> data type.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="LNCPP20230"></a>
<div class="sect3"><a id="sthref345"></a>
<h4 class="sect3">FL<a id="sthref346"></a><a id="sthref347"></a>OAT</h4>
<p>The external data type <code>FLOAT</code> processes numbers with fractional parts. The number is represented in the host system's floating-point format. Normally, the length is 4 or 8 bytes.</p>
<p>The internal format of an Oracle number is decimal. Most floating-point implementations are binary. Oracle, therefore, represents numbers with greater precision than floating-point representations.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20231"></a>
<div class="sect3"><a id="sthref348"></a>
<h4 class="sect3">INTEG<a id="sthref349"></a><a id="sthref350"></a>ER</h4>
<p>The external data type <code>INTEGER</code> is used for converting numbers. An external integer is a signed binary number. Its size is operating system-dependent. If the number being returned from Oracle is not an integer, then the fractional part is discarded, and no error is returned. If the number returned exceeds the capacity of a signed integer for the system, then Oracle returns an overflow on conversion error.</p>
<p>A rounding error may occur when converting between <code>FLOAT</code> and <code>NUMBER</code>. Using a <code>FLOAT</code> as a bind variable in a query may return an error. You can work around this by converting the <code>FLOAT</code> to a string and using the OCCI type <code>OCCI_SQLT_CHR</code> or the OCCI type <code>OCCI_SQLT_STR</code> for the operation.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20232"></a>
<div class="sect3"><a id="sthref351"></a>
<h4 class="sect3">INT<a id="sthref352"></a>ERVAL D<a id="sthref353"></a>AY TO SECOND</h4>
<p>The external data type <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> stores the difference between two datetime values in terms of days, hours, minutes, and seconds. Specify this data type as follows:</p>
<pre>
INTERVAL DAY [(<span class="italic">day_precision</span>)] 
   TO SECOND [(<span class="italic">fractional_seconds_precision</span>)]
</pre>
<p>This example uses the following placeholders:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">day_precision</span></code>: Number of digits in the <code>DAY</code> datetime field. Accepted values are <code>1</code> to <code>9</code>. The default is <code>2</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">fractional_seconds_precision</span></code>: Number of digits in the fractional part of the <code>SECOND</code> datetime field. Accepted values are <code>0</code> to <code>9</code>. The default is <code>6</code>.</p>
</li>
</ul>
<p>To specify an <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> literal with nondefault day and second precision, you must specify the precisions in the literal. For example, you might specify an interval of <code>100</code> days, <code>10</code> hours, <code>20</code> minutes, <code>42</code> seconds, and <code>22</code> hundredths of a second as follows:</p>
<pre>
INTERVAL '100 10:20:42.22' DAY(3) TO SECOND(2)
</pre>
<p>You can also use abbreviated forms of the <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code> literal. For example:</p>
<ul>
<li>
<p><code>INTERVAL '90' MINUTE</code> maps to <code>INTERVAL '00 00:90:00.00' DAY TO SECOND(2)</code></p>
</li>
<li>
<p><code>INTERVAL '30:30' HOUR TO MINUTE</code> maps to <code>INTERVAL '00 30:30:00.00' DAY TO SECOND(2)</code></p>
</li>
<li>
<p><code>INTERVAL '30' SECOND(2,2)</code> maps to <code>INTERVAL '00 00:00:30.00' DAY TO SECOND(2)</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="LNCPP20233"></a>
<div class="sect3"><a id="sthref354"></a>
<h4 class="sect3">INTERVA<a id="sthref355"></a><a id="sthref356"></a>L YEAR TO MONTH</h4>
<p>The external data type <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> stores the difference between two datetime values by using the <code>YEAR</code> and <code>MONTH</code> datetime fields. Specify <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> as follows:</p>
<pre>
INTERVAL YEAR [(<span class="italic">year_precision</span>)] TO MONTH
</pre>
<p>The placeholder <code><span class="codeinlineitalic">year_precision</span></code> is the number of digits in the <code>YEAR</code> datetime field. The default value of <code><span class="codeinlineitalic">year_precision</span></code> is <code>2</code>. To specify an <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> literal with a nondefault <code><span class="codeinlineitalic">year_precision</span></code>, you must specify the precision in the literal. For example, the following <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> literal indicates an interval of <code>123</code> years, <code>2</code> months:</p>
<pre>
INTERVAL '123-2' YEAR(3) TO MONTH
</pre>
<p>You can also use abbreviated forms of the <code>INTERVAL</code> <code>YEAR</code> <code>TO</code> <code>MONTH</code> literal. For example,</p>
<ul>
<li>
<p><code>INTERVAL '10' MONTH</code> maps <code>to INTERVAL '0-10' YEAR TO MONTH</code></p>
</li>
<li>
<p><code>INTERVAL '123' YEAR(3)</code> maps <code>to INTERVAL '123-0' YEAR(3) TO MONTH</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="LNCPP20234"></a>
<div class="sect3"><a id="sthref357"></a>
<h4 class="sect3">LO<a id="sthref358"></a><a id="sthref359"></a>NG</h4>
<p>The external data type <code>LONG</code> stores character strings longer than 4000 bytes and up to <code>2</code> gigabytes in a column of data type <code>LONG</code>. Columns of this type are only used for storage and retrieval of long strings. They cannot be used in methods, expressions, or <code>WHERE</code> clauses. <code>LONG</code> column values are generally converted to and from character strings.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20235"></a>
<div class="sect3"><a id="sthref360"></a>
<h4 class="sect3">LONG R<a id="sthref361"></a><a id="sthref362"></a>AW</h4>
<p>The external data type <code>LONG RAW</code> is similar to the external data type <code>RAW</code>, except that it stores up to <code>2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20236"></a>
<div class="sect3"><a id="sthref363"></a>
<h4 class="sect3">LONG <a id="sthref364"></a><a id="sthref365"></a>VARCHAR</h4>
<p>The external data type <code>LONG VARCHAR</code> stores data from and into an Oracle <code>LONG</code> column. The first four bytes contain the length of the item. The maximum length of a <code>LONG</code> <code>VARCHAR</code> is <code>2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20237"></a>
<div class="sect3"><a id="sthref366"></a>
<h4 class="sect3">LONG V<a id="sthref367"></a><a id="sthref368"></a>ARRAW</h4>
<p>The external data type <code>LONG VARRAW</code> store data from and into an Oracle <code>LONG</code> <code>RAW</code> column. The length is contained in the first four bytes. The maximum length is <code>2</code> gigabytes.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20238"></a>
<div class="sect3"><a id="sthref369"></a>
<h4 class="sect3">NC<a id="sthref370"></a><a id="sthref371"></a>LOB</h4>
<p>The external data type <code>NCLOB</code> is a national character version of a <code>CLOB</code>. It stores fixed-width, multibyte national character set character (<code>NCHAR</code>), or varying-width character set data. An <code>NCLOB</code> can store up to 4 gigabytes of character text data.</p>
<p><code>NCLOB</code>s have full transactional support. Changes made through OCCI participate fully in the transaction. <code>NCLOB</code> value manipulations can be committed or rolled back. You cannot save an <code>NCLOB</code> locator in a variable in one transaction and then use it in another transaction or session.</p>
<p>You cannot create an object with <code>NCLOB</code> attributes, but you can specify <code>NCLOB</code> parameters in methods.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20239"></a>
<div class="sect3"><a id="sthref372"></a>
<h4 class="sect3">NUM<a id="sthref373"></a><a id="sthref374"></a>BER</h4>
<p>You should not have to use <code>NUMBER</code> as an external data type. If you do use it, Oracle returns numeric values in its internal <code>21</code>-byte binary format and expects this format on input. The following discussion is included for completeness only.</p>
<p>Oracle stores values of the <code>NUMBER</code> data type in a variable-length format. The first byte is the exponent and is followed by <code>1</code> to <code>20</code> mantissa bytes. The high-order bit of the exponent byte is the sign bit; it is set for positive numbers and it is cleared for negative numbers. The lower <code>7</code> bits represent the exponent, which is a base-<code>100</code> digit with an offset of <code>65</code>.</p>
<p>To calculate the decimal exponent, add <code>65</code> to the base-<code>100</code> exponent and add another <code>128</code> if the number is positive. If the number is negative, you do the same, but subsequently the bits are inverted. For example, <code>-5</code> has a base-<code>100</code> exponent <code>=</code> <code>62 (0x3e)</code>. The decimal exponent is thus <code>(~0x3e)-128-65 = 0xc1-128-65 = 193-128-65 = 0</code>.</p>
<p>Each mantissa byte is a base-<code>100</code> digit, in the range <code>1</code> to <code>100</code>. For positive numbers, the digit has <code>1</code> added to it. So, the mantissa digit for the value <code>5</code> is <code>6</code>. For negative numbers, instead of adding 1, the digit is subtracted from <code>101</code>. So, the mantissa digit for the number <code>-5</code> is: <code>101-5 = 96</code>. Negative numbers have a byte containing <code>102</code> appended to the data bytes. However, negative numbers that have <code>20</code> mantissa bytes do not have the trailing <code>102</code> byte. Because the mantissa digits are stored in base-<code>100,</code> each byte can represent two decimal digits. The mantissa is normalized; leading zeroes are not stored.</p>
<p>Up to <code>20</code> data bytes can represent the mantissa. However, only <code>19</code> are guaranteed to be accurate. The <code>19</code> data bytes, each representing a base-<code>100</code> digit, yield a maximum precision of <code>38</code> digits for an internal data type <code>NUMBER</code>.</p>
<p>Note that this data type is different from <code>OCCI NUMBER</code> which corresponds to a C++ <code>Number</code> data type.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20240"></a>
<div class="sect3"><a id="sthref375"></a>
<h4 class="sect3">OC<a id="sthref376"></a>CI BFILE</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference006.htm#i1155597">Bfile Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20241"></a>
<div class="sect3"><a id="sthref377"></a>
<h4 class="sect3">OCC<a id="sthref378"></a>I BLOB</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference007.htm#i1119032">Blob Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20242"></a>
<div class="sect3"><a id="sthref379"></a>
<h4 class="sect3">OCCI B<a id="sthref380"></a>YTES</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference008.htm#i1119060">Bytes Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20243"></a>
<div class="sect3"><a id="sthref381"></a>
<h4 class="sect3">OCCI CL<a id="sthref382"></a>OB</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference009.htm#i1118691">Clob Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20244"></a>
<div class="sect3"><a id="sthref383"></a>
<h4 class="sect3">OCCI D<a id="sthref384"></a>ATE</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference013.htm#i1079044">Date Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20245"></a>
<div class="sect3"><a id="sthref385"></a>
<h4 class="sect3">OCCI <a id="sthref386"></a>INTERVALDS</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference015.htm#i1066767">IntervalDS Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20246"></a>
<div class="sect3"><a id="sthref387"></a>
<h4 class="sect3">OC<a id="sthref388"></a>CI INTERVALYM</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference016.htm#i1080017">IntervalYM Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20247"></a>
<div class="sect3"><a id="sthref389"></a>
<h4 class="sect3"><a id="sthref390"></a>OCCI NUMBER</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference022.htm#i1018892">Number Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20248"></a>
<div class="sect3"><a id="sthref391"></a>
<h4 class="sect3">OCCI<a id="sthref392"></a> POBJECT</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference023.htm#i1039640">PObject Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20249"></a>
<div class="sect3"><a id="sthref393"></a>
<h4 class="sect3">OCCI R<a id="sthref394"></a>EF</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference025.htm#i1079048">Ref Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20250"></a>
<div class="sect3"><a id="sthref395"></a>
<h4 class="sect3">OCCI RE<a id="sthref396"></a><a id="sthref397"></a>FANY</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference026.htm#i1109327">RefAny Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20251"></a>
<div class="sect3"><a id="sthref398"></a>
<h4 class="sect3">OCCI STRING</h4>
<p>The external data type <code>OCCI STRING</code> corresponds to an <code>STL string</code>.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20252"></a>
<div class="sect3"><a id="sthref399"></a>
<h4 class="sect3">OC<a id="sthref400"></a>CI TIMESTAMP</h4>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="reference.htm#CIAJIDCF">Chapter 13, "OCCI Application Programming Interface"</a>, <a href="reference033.htm#i1118557">Timestamp Class</a></div>
</div>
<!-- class="sect3" -->
<a id="LNCPP20253"></a>
<div class="sect3"><a id="sthref401"></a>
<h4 class="sect3">OCCI V<a id="sthref402"></a>ECTOR</h4>
<p>The external data type <code>OCCI VECTOR</code> is used to represent collections, for example, a nested table or <code>VARRAY</code>. <code>CREATE TYPE num_type as VARRAY OF NUMBER(10)</code> can be represented in a C++ application as <code>vector&lt;int&gt;</code>, <code>vector&lt;Number&gt;</code>, and so on.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20254"></a>
<div class="sect3"><a id="sthref403"></a>
<h4 class="sect3"><a id="sthref404"></a>RA<a id="sthref405"></a><a id="sthref406"></a>W</h4>
<p>The external data type <code>RAW</code> is used for binary data or byte strings that are not to be interpreted or processed by Oracle. <code>RAW</code> could be used, for example, for graphics character sequences. The maximum length of a <code>RAW</code> column is 2000 bytes.</p>
<p>When <code>RAW</code> data in an Oracle table is converted to a character string, the data is represented in hexadecimal code. Each byte of <code>RAW</code> data is represented as two characters that indicate the value of the byte, ranging from 00 to FF. If you input a character string by using <code>RAW</code>, then you must use hexadecimal coding.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20255"></a>
<div class="sect3"><a id="sthref407"></a>
<h4 class="sect3">R<a id="sthref408"></a><a id="sthref409"></a>EF</h4>
<p>The external data type <code>REF</code> is a reference to a named data type. To allocate a <code>REF</code> for use in an application, declare a variable as a pointer to a <code>REF</code>.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20256"></a>
<div class="sect3"><a id="sthref410"></a>
<h4 class="sect3">ROW<a id="sthref411"></a><a id="sthref412"></a>ID</h4>
<p>The external data type <code>ROWID</code> identifies a particular row in a database table. The <code>ROWID</code> is often returned from a query by issuing a statement similar to the following example:</p>
<pre>
SELECT ROWID, var1, var2 FROM db;
</pre>
<p>You can then use the returned <code>ROWID</code> in further <code>DELETE</code> statements.</p>
<p>If you are performing a <code>SELECT</code> for an <code>UPDATE</code> operation, then the <code>ROWID</code> is implicitly returned.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20257"></a>
<div class="sect3"><a id="sthref413"></a>
<h4 class="sect3">ST<a id="sthref414"></a><a id="sthref415"></a>RING</h4>
<p>The external data type <code>STRING</code> behaves like the external data type <code>VARCHAR2</code> (data type code 1), except that the external data type <code>STRING</code> must be <code>NULL</code>-terminated.</p>
<p>Note that this data type is different from <code>OCCI STRING</code> which corresponds to a C++ STL string data type.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20258"></a>
<div class="sect3"><a id="sthref416"></a>
<h4 class="sect3">TI<a id="sthref417"></a><a id="sthref418"></a>MESTAMP</h4>
<p>The external data type <code>TIMESTAMP</code> is an extension of the <code>DATE</code> data type. It stores the year, month, and day of the <code>DATE</code> data type, plus hour, minute, and second values. Specify the <code>TIMESTAMP</code> data type as follows:</p>
<pre>
TIMESTAMP [(<span class="italic">fractional_seconds_precision</span>)] 
</pre>
<p>The placeholder <code><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the <code>SECOND</code> datetime field and can be a number in the range 0 to 9. The default is 6. For example, you specify <code>TIMESTAMP(2)</code> as a literal as follows:</p>
<pre>
TIMESTAMP '1997-01-31 09:26:50.10'
</pre>
<p>Note that this data type is different from <code>OCCI TIMESTAMP</code>.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20259"></a>
<div class="sect3"><a id="sthref419"></a>
<h4 class="sect3">TIMEST<a id="sthref420"></a>AMP<a id="sthref421"></a> WITH LOCAL TIME ZONE</h4>
<p>The external data type <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> (<code>TSTZ</code>) is a variant of <code>TIMESTAMP</code> that includes an explicit time zone displacement in its value. The time zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC), formerly Greenwich Mean Time. Specify the <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> data type as follows:</p>
<pre>
TIMESTAMP(fractional_seconds_precision) WITH TIME ZONE
</pre>
<p>The placeholder <code><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the <code>SECOND</code> datetime field and can be a number in the range <code>0</code> to <code>9</code>. The default is <code>6</code>.</p>
<p>Two <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> values are considered identical if they represent the same instant in UTC, regardless of the <code>TIME</code> <code>ZONE</code> offsets stored in the data.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20260"></a>
<div class="sect3"><a id="sthref422"></a>
<h4 class="sect3">TIM<a id="sthref423"></a><a id="sthref424"></a>ESTAMP WITH TIME ZONE</h4>
<p>The external data type <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> is a variant of <code>TIMESTAMP</code> that includes a <span class="bold">time zone displacement</span> in its value. The time zone displacement is the difference (in hours and minutes) between local time and Coordinated Universal Time (UTC), formerly Greenwich Mean Time. Specify the <code>TIMESTAMP</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> data type as follows:</p>
<pre>
TIMESTAMP [(<span class="italic">fractional_seconds_precision</span>)] WITH TIME ZONE
</pre>
<p>The placeholder <code><span class="codeinlineitalic">fractional_seconds_precision</span></code> optionally specifies the number of digits in the fractional part of the SECOND datetime field and can be a number in the range <code>0</code> to <code>9</code>. The default is <code>6</code>. For example, you might specify <code>TIMESTAMP(0)</code> <code>WITH</code> <code>TIME</code> <code>ZONE</code> as a literal as follows:</p>
<pre>
TIMESTAMP '1997-01-31 09:26:50+02.00'
</pre></div>
<!-- class="sect3" -->
<a id="LNCPP20261"></a>
<div class="sect3"><a id="sthref425"></a>
<h4 class="sect3">UNSI<a id="sthref426"></a><a id="sthref427"></a>GNED INT</h4>
<p>The external data type <code>UNSIGNED INT</code> is used for unsigned binary integers. The size in bytes is operating system dependent. The host system architecture determines the order of the bytes in a word. If the number being output from Oracle is not an integer, the fractional part is discarded, and no error is returned. If the number to be returned exceeds the capacity of an unsigned integer for the operating system, Oracle returns an overflow on conversion error.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20262"></a>
<div class="sect3"><a id="sthref428"></a>
<h4 class="sect3">VARCH<a id="sthref429"></a><a id="sthref430"></a>AR</h4>
<p>The external data type <code>VARCHAR</code> store character strings of varying length. The first two bytes contain the length of the character string, and the remaining bytes contain the actual string. The specified length of the string in a bind or a define call must include the two length bytes, meaning the largest <code>VARCHAR</code> string is <code>65533</code> bytes long, not <code>65535</code>. For converting longer strings, use the <code>LONG</code> <code>VARCHAR</code> external <a id="sthref431"></a><a id="sthref432"></a>data type.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20263"></a>
<div class="sect3"><a id="sthref433"></a>
<h4 class="sect3">VARCHAR2</h4>
<p>The external data type <code>VARCHAR2</code> is a variable-length string of characters up to <code>4000</code> bytes.</p>
</div>
<!-- class="sect3" -->
<a id="LNCPP20264"></a>
<div class="sect3"><a id="sthref434"></a>
<h4 class="sect3">VARNU<a id="sthref435"></a><a id="sthref436"></a>M</h4>
<p>The external data type <code>VARNUM</code> is similar to the external data type <code>NUMBER</code>, except that the first byte contains the length of the number representation. This length value does not include the length byte itself. Reserve 22 bytes to receive the longest possible <code>VARNUM</code>. You must set the length byte when you send a <code>VARNUM</code> value to the database.</p>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20265"></a><a id="sthref437"></a><a id="sthref438"></a>Table 5-4 VARNUM Examples</p>
<table class="cellalignment1073" title="VARNUM Examples " summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t19">Decimal Value</th>
<th class="cellalignment1074" id="r1c2-t19">Length Byte</th>
<th class="cellalignment1074" id="r1c3-t19">Exponent Byte</th>
<th class="cellalignment1074" id="r1c4-t19">Mantissa Bytes</th>
<th class="cellalignment1074" id="r1c5-t19">Terminator Byte</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r2c1-t19" headers="r1c1-t19">
<p><code>0</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t19 r1c2-t19">
<p><code>1</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t19 r1c3-t19">
<p><code>128</code></p>
</td>
<td class="cellalignment1075" headers="r2c1-t19 r1c4-t19">
<p>N/A</p>
</td>
<td class="cellalignment1075" headers="r2c1-t19 r1c5-t19">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t19" headers="r1c1-t19">
<p><code>5</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t19 r1c2-t19">
<p><code>2</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t19 r1c3-t19">
<p><code>193</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t19 r1c4-t19">
<p><code>6</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t19 r1c5-t19">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t19" headers="r1c1-t19">
<p><code>-5</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t19 r1c2-t19">
<p><code>3</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t19 r1c3-t19">
<p><code>62</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t19 r1c4-t19">
<p><code>96</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t19 r1c5-t19">
<p><code>102</code></p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t19" headers="r1c1-t19">
<p><code>2767</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t19 r1c2-t19">
<p><code>3</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t19 r1c3-t19">
<p><code>194</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t19 r1c4-t19">
<p><code>28, 68</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t19 r1c5-t19">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t19" headers="r1c1-t19">
<p><code>-2767</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t19 r1c2-t19">
<p><code>4</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t19 r1c3-t19">
<p><code>61</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t19 r1c4-t19">
<p><code>74, 34</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t19 r1c5-t19">
<p><code>102</code></p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t19" headers="r1c1-t19">
<p><code>100000</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t19 r1c2-t19">
<p><code>2</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t19 r1c3-t19">
<p><code>195</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t19 r1c4-t19">
<p><code>11</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t19 r1c5-t19">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t19" headers="r1c1-t19">
<p><code>1234567</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t19 r1c2-t19">
<p><code>5</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t19 r1c3-t19">
<p><code>196</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t19 r1c4-t19">
<p><code>2, 24, 46, 68</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t19 r1c5-t19">
<p>N/A</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="LNCPP20266"></a>
<div class="sect3"><a id="sthref439"></a>
<h4 class="sect3">V<a id="sthref440"></a><a id="sthref441"></a>ARRAW</h4>
<p>The <span class="bold">external</span> data type <code>VARRAW</code> is similar to the external data type <code>RAW</code>, except that the first two bytes contain the length of the data. The specified length of the string in a bind or a define call must include the two length bytes. So the largest <code>VARRAW</code> string that can be received or sent is <code>65533</code> bytes, not <code>65535</code>. For converting longer strings, use the <code>LONG</code> <code>VARRAW</code> data type.</p>
</div>
<!-- class="sect3" -->
<a id="i1028557"></a><a id="LNCPP20267"></a>
<div class="sect3">
<h4 class="sect3">NATIVE DOUBLE</h4>
<p>This <span class="bold">external</span> data type implements the IEEE 754 standard double-precision floating point data type. It is represented in the host system's native floating point format. The data type is stored in the Oracle Server in a byte comparable canonical format, and requires 8 bytes for storage, including the length byte. It is an alternative to Oracle <code>NUMBER</code> and has the following advantages over <code>NUMBER</code>:</p>
<ul>
<li>
<p>Fewer bytes used in storage</p>
</li>
<li>
<p>Matches data types used by RDBMS Clients</p>
</li>
<li>
<p>Supports a wider range of values used in scientific calculations.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1028558"></a><a id="LNCPP20268"></a>
<div class="sect3">
<h4 class="sect3">NATIVE FLOAT</h4>
<p>This <span class="bold">external</span> data type implements the IEEE 754 single-precision floating point data type. It is represented in the host system's native floating point format. The data type is stored in the Oracle Server in a byte comparable canonical format, and requires 4 bytes for storage, including the length byte. It is an alternative to Oracle <code>NUMBER</code> and has the following advantages over <code>NUMBER</code>:</p>
<ul>
<li>
<p>Fewer bytes used in storage</p>
</li>
<li>
<p>Matches data types used by RDBMS Clients</p>
</li>
<li>
<p>Supports a wider range of values used in scientific calculations</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1011128"></a><a id="LNCPP20269"></a>
<div class="sect1">
<h2 class="sect1">Data Conve<a id="sthref442"></a>rsions</h2>
<p><a href="#g1032563">Table 5-5</a> lists the supported conversions from Oracle internal data types to external data types, and from external data types to internal column representations.</p>
<p>Note the following conditions:</p>
<ul>
<li>
<p>A <code>REF</code> stored in the database is converted to <code>OCCI_SQLT_REF</code> on output.</p>
</li>
<li>
<p>An <code>OCCI_SQLT_REF</code> is converted to the internal representation of a <code>REF</code> on input.</p>
</li>
<li>
<p>A named data type stored in the database is converted to <code>OCCI_SQLT_NTY</code> (and represented by a C structure in the application) on output.</p>
</li>
<li>
<p>An <code>OCCI_SQLT_NTY</code> (represented by a C structure in an application) is converted to the internal representation of the corresponding data type on input.</p>
</li>
<li>
<p>LOBs and <code>BFILE</code>s are represented by descriptors in OCCI applications, so there are no input or output conversions.</p>
</li>
</ul>
<p>Also note that in <a href="#g1032563">Table 5-5</a>, conversions have the following numeric codes:</p>
<ol>
<li>
<p>The data type must be in Oracle <code>ROWID</code> format for input; it is returned in Oracle <code>ROWID</code> format on output.</p>
</li>
<li>
<p>The data type must be in Oracle <code>DATE</code> format for input; it is returned in <code>Oracle DATE</code> format on output.</p>
</li>
<li>
<p>The data type must be in hexadecimal format for input; it is returned in hexadecimal format on output.</p>
</li>
<li>
<p>The data type must represent a valid number for output.</p>
</li>
<li>
<p>The length must be less than or equal to 2000 characters.</p>
</li>
<li>
<p>The data type must be stored in hexadecimal format on output; it is in hexadecimal format on output.</p>
</li>
</ol>
<div class="tblhruleformalwidekeymax">
<p class="titleintable"><a id="LNCPP20270"></a><a id="sthref443"></a><a id="g1032563"></a>Table 5-5 <a id="sthref444"></a>Data Conversions Between External and Internal Data Types</p>
<table class="cellalignment1076" title="Data Conversions Between External and Internal Data Types" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t20"><br /></th>
<th class="cellalignment1074" id="r1c2-t20" colspan="10">Internal Data Types</th>
</tr>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r2c1-t20" headers="r1c1-t20">External Data Types</th>
<th class="cellalignment1074" id="r2c2-t20" headers="r2c1-t20 r1c2-t20">VARCHAR2</th>
<th class="cellalignment1074" id="r2c3-t20" headers="r2c1-t20 r1c2-t20">NUMBER</th>
<th class="cellalignment1074" id="r2c4-t20" headers="r2c1-t20 r1c2-t20">LONG</th>
<th class="cellalignment1074" id="r2c5-t20" headers="r2c1-t20 r1c2-t20">ROWID</th>
<th class="cellalignment1074" id="r2c6-t20" headers="r2c1-t20 r1c2-t20">DATE</th>
<th class="cellalignment1074" id="r2c7-t20" headers="r2c1-t20 r1c2-t20">RAW</th>
<th class="cellalignment1074" id="r2c8-t20" headers="r2c1-t20 r1c2-t20">LONG RAW</th>
<th class="cellalignment1074" id="r2c9-t20" headers="r2c1-t20 r1c2-t20">CHAR</th>
<th class="cellalignment1074" id="r2c10-t20" headers="r2c1-t20 r1c2-t20">BFLOAT</th>
<th class="cellalignment1074" id="r2c11-t20" headers="r2c1-t20 r1c2-t20">BDOUBLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c8-t20">
<p>I<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>CHARZ</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c8-t20">
<p>I<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r4c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c6-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>DECIMAL</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>FLOAT</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>INTEGER</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t20 r1c2-t20 r2c11-t20">
<p>II/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c2-t20">
<p>O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c9-t20">
<p>O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r13c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t20" headers="r1c1-t20 r2c1-t20">
<pre>
OCCI BDouble
</pre></td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c3-t20">
<p>1/O</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r14c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t20" headers="r1c1-t20 r2c1-t20">
<pre>
OCCI BFloat
</pre></td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c3-t20">
<p>1/O</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r15c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r16c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>OCCI Bytes</code></p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r16c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r17c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>OCCI Date</code></p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c6-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r17c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r18c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>OCCI Number</code></p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r18c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r19c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>OCCI Timestamp</code></p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c2-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c4-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c9-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r19c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r20c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r20c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r21c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c2-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c5-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c9-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r21c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r22c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>STL string</code></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c9-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c10-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r22c1-t20 r1c2-t20 r2c11-t20">
<p>I/O<sup>4</sup></p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r23c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>STRING</code></p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r23c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r24c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>UNSIGNED</code></p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r24c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r25c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c9-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r25c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r26c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>VARCHAR</code>2</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c2-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c4-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c5-t20">
<p>I/O<sup>1</sup></p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c6-t20">
<p>I/O<sup>2</sup></p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c7-t20">
<p>I/O<sup>3</sup></p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c8-t20">
<p>I/O<sup>3, 5</sup></p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c9-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r26c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r27c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>VARNUM</code></p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c3-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c4-t20">
<p>I</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c7-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c8-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>4</sup></p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c10-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r27c1-t20 r1c2-t20 r2c11-t20">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r28c1-t20" headers="r1c1-t20 r2c1-t20">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c2-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c3-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c4-t20">
<p>I<sup>5, 6</sup></p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c5-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c6-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c7-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c8-t20">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c9-t20">
<p>I/O<sup>6</sup></p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c10-t20">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r28c1-t20 r1c2-t20 r2c11-t20">
<p>-</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidekeymax" -->
<a id="LNCPP20271"></a>
<div class="sect2"><a id="sthref445"></a>
<h3 class="sect2">Data C<a id="sthref446"></a>onversions for L<a id="sthref447"></a>OB Data Types</h3>
<div class="tblformal">
<p class="titleintable"><a id="LNCPP20272"></a><a id="sthref448"></a><a id="sthref449"></a>Table 5-6 <a id="sthref450"></a>Data Conversions for LOBs</p>
<table class="cellalignment1073" title="Data Conversions for LOBs" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t21" rowspan="2">EXTERNAL DATATYPES</th>
<th class="cellalignment1074" id="r1c2-t21" colspan="2">INTERNAL DATATYPES</th>
</tr>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r2c1-t21" headers="r1c1-t21 r1c1-t21">CLOB</th>
<th class="cellalignment1074" id="r2c2-t21" headers="r1c1-t21 r2c1-t21 r1c2-t21">BLOB</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t21 r1c2-t21">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>CHAR</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t21 r1c2-t21">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>LONG</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t21 r1c2-t21">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>LONG VARCHAR</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t21 r1c2-t21">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>STL String</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t21 r1c2-t21 r2c2-t21">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t21 r1c2-t21">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>RAW</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t21 r1c2-t21 r2c2-t21">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r9c1-t21 r1c2-t21 r2c2-t21">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r9c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>LONG RAW</code></p>
</td>
<td class="cellalignment1075" headers="r10c1-t21 r1c2-t21 r2c2-t21">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>LONG VARRAW</code></p>
</td>
<td class="cellalignment1075" headers="r11c1-t21 r1c2-t21 r2c2-t21">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r11c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t21" headers="r1c1-t21 r2c1-t21">
<p><code>OCCI Bytes</code></p>
</td>
<td class="cellalignment1075" headers="r12c1-t21 r1c2-t21 r2c2-t21">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t21 r1c2-t21">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADLOB001" href="../../appdev.112/e18294/adlob_intro.htm#ADLOB001"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for an introduction to <code>LOB</code> data types.</div>
</div>
<!-- class="sect2" -->
<a id="LNCPP20273"></a>
<div class="sect2"><a id="sthref451"></a>
<h3 class="sect2">Data Conversions<a id="sthref452"></a><a id="sthref453"></a> for Date, Timesta<a id="sthref454"></a><a id="sthref455"></a>mp, and Interval Data Types</h3>
<p>You can also use a character data type for the host variable used in a fetch or insert operation from or to a datetime or interval column. Oracle performs the conversion between the character data type and datetime/interval data type for you.</p>
<div class="tblformalwide">
<p class="titleintable"><a id="LNCPP20274"></a><a id="sthref456"></a><a id="sthref457"></a>Table 5-7 <a id="sthref458"></a><a id="sthref459"></a><a id="sthref460"></a>Data Conversions for Date, Timestamp, and Interval Data Types</p>
<table class="cellalignment1076" title="Data Conversions for Date, Timestamp, and Interval Data Types" summary="First column lists ..." dir="ltr">
<thead>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r1c1-t23">External Types</th>
<th class="cellalignment1074" id="r1c2-t23" colspan="7">Internal Types</th>
</tr>
<tr class="cellalignment1067">
<th class="cellalignment1074" id="r2c1-t23" headers="r1c1-t23">&nbsp;<br /></th>
<th class="cellalignment1074" id="r2c2-t23" headers="r2c1-t23 r1c2-t23">VARCHAR, CHAR</th>
<th class="cellalignment1074" id="r2c3-t23" headers="r2c1-t23 r1c2-t23">DATE</th>
<th class="cellalignment1074" id="r2c4-t23" headers="r2c1-t23 r1c2-t23">TS</th>
<th class="cellalignment1074" id="r2c5-t23" headers="r2c1-t23 r1c2-t23">TSTZ</th>
<th class="cellalignment1074" id="r2c6-t23" headers="r2c1-t23 r1c2-t23">TSLTZ</th>
<th class="cellalignment1074" id="r2c7-t23" headers="r2c1-t23 r1c2-t23">INTERVAL YEAR TO MONTH</th>
<th class="cellalignment1074" id="r2c8-t23" headers="r2c1-t23 r1c2-t23">INTERVAL DAY TO SECOND</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r3c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>VARCHAR2, CHAR</code></p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r3c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r4c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>STL String</code></p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r4c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r5c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r5c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r6c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>OCCI Date</code></p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r6c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r7c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>ANSI DATE</code></p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r7c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r8c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>TIMESTAMP (TS)</code></p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r8c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r9c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>OCCI Timestamp</code></p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r9c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r10c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>TIMESTAMP WITH TIME ZONE (TSTZ)</code></p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r10c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r11c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>TIMESTAMP WITH LOCAL TIME ZONE (TSLTZ)</code></p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c3-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c4-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c5-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c6-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r11c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r12c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>INTERVAL YEAR TO MONTH</code></p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c3-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c4-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c5-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c6-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r12c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r13c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>OCCI IntervalYM</code></p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c3-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c4-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c5-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c6-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c7-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r13c1-t23 r1c2-t23 r2c8-t23">
<p>-</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r14c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>INTERVAL DAY TO SECOND</code></p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c3-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c4-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c5-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c6-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r14c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
<tr class="cellalignment1067">
<td class="cellalignment1075" id="r15c1-t23" headers="r1c1-t23 r2c1-t23">
<p><code>OCCI IntervalDS</code></p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c2-t23">
<p>I/O</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c3-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c4-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c5-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c6-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c7-t23">
<p>-</p>
</td>
<td class="cellalignment1075" headers="r15c1-t23 r1c2-t23 r2c8-t23">
<p>I/O</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>These consideration apply when converting between Date, Timestamp and Interval data types:</p>
<ul>
<li>
<p>When assigning a source with time zone to a target without a time zone, the time zone portion of the source is ignored. On assigning a source without a time zone to a target with a time zone, the time zone of the target is set to the session's default time zone.</p>
</li>
<li>
<p>When assigning an Oracle <code>DATE</code> to a <code>TIMESTAMP</code>, the <code>TIME</code> portion of the <code>DATE</code> is copied over to the <code>TIMESTAMP</code>. When assigning a <code>TIMESTAMP</code> to Oracle <code>DATE</code>, the <code>TIME</code> portion of the result <code>DATE</code> is set to zero. This is done to encourage migration of Oracle <code>DATE</code> to <code>ANSI</code> compliant <code>DATETIME</code> data types.</p>
</li>
<li>
<p>(When assigning an <code>ANSI</code> <code>DATE</code> to an Oracle <code>DATE</code> or a <code>TIMESTAMP</code>, the <code>TIME</code> portion of the Oracle <code>DATE</code> and the <code>TIMESTAMP</code> are set to zero. When assigning an Oracle <code>DATE</code> or a <code>TIMESTAMP</code> to an ANSI <code>DATE</code>, the <code>TIME</code> portion is ignored.</p>
</li>
<li>
<p>When assigning a <code>DATETIME</code> to a character string, the <code>DATETIME</code> is converted using the session's default <code>DATETIME</code> format. When assigning a character string to a <code>DATETIME</code>, the string must contain a valid <code>DATETIME</code> value based on the session's default <code>DATETIME</code> format.</p>
</li>
<li>
<p>When assigning a character string to an <code>INTERVAL</code>, the character string must be a valid <code>INTERVAL</code> character format.</p>
</li>
<li>
<p>When converting from <code>TSLTZ</code> to <code>CHAR</code>, <code>DATE</code>, <code>TIMESTAMP</code> and <code>TSTZ</code>, the value is adjusted to the session time zone.</p>
</li>
<li>
<p>When converting from <code>CHAR</code>, <code>DATE</code>, and <code>TIMESTAMP</code> to <code>TSLTZ</code>, the session time zone is stored in memory.</p>
</li>
<li>
<p>When assigning <code>TSLTZ</code> to <code>ANSI</code> <code>DATE</code>, the time portion is <code>0</code>.</p>
</li>
<li>
<p>When converting from <code>TSTZ</code>, the time zone that the time stamp is in is stored in memory.</p>
</li>
<li>
<p>When assigning a character string to an interval, the character string must be a valid interval character format.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1066">
<tr>
<td class="cellalignment1075">
<table class="cellalignment1071">
<tr>
<td class="cellalignment1070"><a href="objects.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1070"><a href="metadata.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1078">
<table class="cellalignment1069">
<tr>
<td class="cellalignment1070"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1070"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1070"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1070"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1070"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1070"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
