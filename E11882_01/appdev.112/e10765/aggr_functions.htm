<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using User-Defined Aggregate Functions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:27Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ext_optimizer.htm" title="Previous" type="text/html" />
<link rel="Next" href="cart_services.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/36</span> <!-- End Header --><a id="CECJAAJG"></a><a id="ADDCI2120"></a>
<h1 class="chapter"><span class="secnum">11</span> Using User-Defined Aggregate Functions</h1>
<p>This chapter introduces user-defined aggregate functions, demonstrates how to create and use them, both singly and in parallel, and shows how to work with large aggregation contexts and materialized views.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BEJBEBHE">Overview of User-Defined Aggregate Functions</a></p>
</li>
<li>
<p><a href="#BEJDGFHF">Creating a User-Defined Aggregate</a></p>
</li>
<li>
<p><a href="#i1004685">Using a User-Defined Aggregate</a></p>
</li>
<li>
<p><a href="#i1004974">Evaluating User-Defined Aggregates in Parallel</a></p>
</li>
<li>
<p><a href="#i1005028">Handling Large Aggregation Contexts</a></p>
</li>
<li>
<p><a href="#i1004720">Using Materialized Views with User-Defined Aggregates</a></p>
</li>
<li>
<p><a href="#BEJBFBHH">Creating and Using a User-Defined Aggregate Function</a></p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="ext_agg_ref.htm#BABIEAJC">Chapter 22, "User-Defined Aggregate Functions Interface"</a> for a detailed description of the <code>ODCIAggregate</code> interface.</div>
</li>
</ul>
<a id="BEJBEBHE"></a><a id="ADDCI4623"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref464"></a>Overview of User-Defined Aggregate Functions</h2>
<p>Oracle provides several pre-defined <a id="sthref465"></a>aggregate functions such as <code>MAX</code>, <code>MIN</code>, and <code>SUM</code> for performing operations on a set of rows. These pre-defined aggregate functions can be used only with scalar data, not with complex data types such as multimedia data stored using object types, opaque types, and LOBs. You can, however, define custom implementations of these functions for complex data types. You can also define entirely new aggregate functions to use with complex data. User-defined aggregate functions can be used in SQL DML statements just like Oracle's built-in aggregates. When functions are registered with the server, Oracle simply invokes the user-defined aggregation routines supplied by you instead of the native routines. User-defined aggregates can also be used with scalar data, such as complex statistical data necessary for scientific applications.</p>
<p>User-defined aggregates are a feature of the Extensibility Framework, and you can implement them using <code>ODCIAggregate</code> interface routines.</p>
<p><a id="sthref466"></a>You can create a user-defined <a id="sthref467"></a>aggregate function by implementing a set of routines collectively known as the <a id="sthref468"></a><a id="sthref469"></a><code>ODCIAggregate</code> routines. You can implement these routines as methods within an object type, so the implementation can be in any language that Oracle supports, PL/SQL, C, C++ or Java. When the object type is defined and the routines are implemented in the type body, use the <code><a id="sthref470"></a><a id="sthref471"></a>CREATE FUNCTION</code> statement to create the aggregate function.</p>
<p><a id="sthref472"></a>Each user-defined aggregate function uses up to four <code>ODCIAggregate</code> routines, or steps, to define internal operations that any aggregate function performs, namely: initialization, iteration, merging, and termination.</p>
<ul>
<li>
<p><a id="sthref473"></a><a id="sthref474"></a>Initialization is accomplished by the <a id="sthref475"></a><a href="ext_agg_ref.htm#CACJCHFF">ODCIAggregateInitialize()</a> routine, which is invoked by Oracle to initialize the computation of the user-defined aggregate. The initialized aggregation context is passed back to Oracle as an object type instance.</p>
</li>
<li>
<p><a id="sthref476"></a><a id="sthref477"></a>Iteration is performed through the <a id="sthref478"></a><a href="ext_agg_ref.htm#CACCAFIG">ODCIAggregateIterate()</a> routine, which is repeatedly invoked by Oracle. On each invocation, a new value or a set of new values and the current aggregation context are passed in. The routine processes the new values and returns the updated aggregation context. This routine is invoked for every non-<code>NULL</code> value in the underlying group. <code>NULL</code> values are ignored during aggregation and are not passed to the routine.</p>
</li>
<li>
<p><a id="sthref479"></a><a id="sthref480"></a>Merging is performed by <a id="sthref481"></a><a href="ext_agg_ref.htm#CACHGGCE">ODCIAggregateMerge()</a>, a routine invoked by Oracle to combine two aggregation contexts. This routine takes the two contexts as inputs, combines them, and returns a single aggregation context.</p>
</li>
<li>
<p><a id="sthref482"></a><a id="sthref483"></a>Termination takes place when the <a id="sthref484"></a><a href="ext_agg_ref.htm#CACBJHHI">ODCIAggregateTerminate()</a> routine is invoked by Oracle as the final step of aggregation. The routine takes the aggregation context as input and returns the resulting aggregate value.</p>
</li>
</ul>
<p>The process is illustrated in <a href="#CECGABFC">Example 11-1</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CECGABFC"></a><a id="ADDCI4624"></a>Example 11-1 How User-Defined Aggregate Functions Work</p>
<p>Consider the aggregate function <code>AVG()</code> in the following statement:</p>
<pre>
SELECT AVG(T.Sales)
FROM AnnualSales T
GROUP BY T.State;
</pre>
<p>To perform this computation, the aggregate function <code>AVG()</code> goes through thse steps:</p>
<ol>
<li>
<p>Initializes the computation by initializing the aggregation context, or the rows over which aggregation is performed:</p>
<pre>
runningSum = 0; runningCount = 0;
</pre></li>
<li>
<p>Iteratively processes each successive input value and updates the context:</p>
<pre>
runningSum += inputval; runningCount++;
</pre></li>
<li>
<p>[Optional] Merge by combining the two aggregation contexts and return a single context. This operation combines the results of aggregation over subsets to obtain the aggregate over the entire set. This extra step can be required during either serial or parallel evaluation of an aggregate. If needed, it is performed before step <a href="#CIHFDJJC">4</a>:</p>
<pre>
runningSum = runningSum1 + runningSum2;
runningCount = runningCount1 + runningCount2
</pre>
<p>Section <a href="#i1004974">"Evaluating User-Defined Aggregates in Parallel"</a> describes this step in greater detail.</p>
</li>
<li>
<p><a id="CIHFDJJC"></a>Terminates by computing the result; uses the context to return the resultant aggregate value:</p>
<pre>
return (runningSum/runningCount);
</pre></li>
</ol>
<p>If <code>AVG()</code> were a user-defined function, the object type that embodies it would implement a method for a corresponding <code>ODCIAggregate</code> routine for each of these steps. The variables <code>runningSum</code> and <code>runningCount</code>, which determine the state of the aggregation in the example, would be attributes of that object type.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BEJDGFHF"></a><a id="ADDCI4625"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref485"></a>Creating a User-Defined Aggregate</h2>
<p>The process of creating a user-defined aggregate function has two steps, illustrated in <a href="#CECHAFJJ">Example 11-2</a> and <a href="#CECHHIGE">Example 11-3</a>. Both examples use the <code>SpatialUnion()</code> aggregate function defined by Oracle Spatial. The function computes the bounding geometry over a set of input geometries.</p>
<div class="example">
<p class="titleinexample"><a id="CECHAFJJ"></a><a id="ADDCI4626"></a>Example 11-2 <a id="sthref486"></a>Implementing the ODCIAggregate Interface</p>
<p>The <code>ODCIAggregate</code> routines are implemented as methods within an object type <code>SpatialUnionRoutines</code>. The actual implementation could be in any Oracle-supported language for type methods, such as PL/SQL, C, C++ or Java.</p>
<pre>
CREATE TYPE SpatialUnionRoutines(
   STATIC FUNCTION ODCIAggregateInitialize( ... ) ...,
   MEMBER FUNCTION ODCIAggregateIterate(...) ... ,
   MEMBER FUNCTION ODCIAggregateMerge(...) ...,
   MEMBER FUNCTION ODCIAggregateTerminate(...)
);

CREATE TYPE BODY SpatialUnionRoutines IS 
...
END;
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="CECHHIGE"></a><a id="ADDCI4627"></a>Example 11-3 <a id="sthref487"></a>Defining a User-Defined Aggregate Function</p>
<p>This function definition creates the <code>SpatialUnion()</code> aggregate function by specifying its signature and the object type that implements the <code>ODCIAggregate</code> interface:</p>
<pre>
CREATE FUNCTION SpatialUnion(x Geometry) RETURN Geometry 
AGGREGATE USING SpatialUnionRoutines;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1004685"></a><a id="ADDCI4628"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref488"></a>Using a User-Defined Aggregate</h2>
<p>User-defined aggregates can be used just like built-in aggregate functions in SQL DML and query statements. They can appear in the <code>SELECT</code> list, <code>ORDER BY</code> clause, or as part of the predicate in the <code>HAVING</code> clause. The following <a href="#CECEFHHG">Example 11-4</a>, <a href="#CECGJAEB">Example 11-5</a> and <a href="#CECFDFAD">Example 11-6</a> illustrate some options.</p>
<div class="example">
<p class="titleinexample"><a id="CECEFHHG"></a><a id="ADDCI4629"></a>Example 11-4 Using the SELECT Statement with User-Defined Aggregate Functions</p>
<p>The following query can be used to compute state boundaries by aggregating the geometries of all counties belonging to the same state:</p>
<pre>
SELECT SpatialUnion(geometry)
FROM counties
GROUP BY state
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="CECGJAEB"></a><a id="ADDCI4630"></a>Example 11-5 Using the HAVING Clause with User-Defined Aggregate Functions</p>
<p>User-defined aggregates can be used in the <code>HAVING</code> clause to eliminate groups from the output based on the results of the aggregate function. Here, <code>MyUDAG()</code> is a user-defined aggregate:</p>
<pre>
SELECT groupcol, MyUDAG(col)
FROM tab
GROUP BY groupcol
HAVING MyUDAG(col) &gt; 100
ORDER BY MyUDAG(col);
</pre></div>
<!-- class="example" -->
<div class="example">
<p class="titleinexample"><a id="CECFDFAD"></a><a id="ADDCI4631"></a>Example 11-6 Using other Query Options with User-Defined Aggregate Functions</p>
<p>User-defined aggregates can take <code>DISTINCT</code> or <code>ALL</code> (default) options on the input parameter. <code>DISTINCT</code> causes duplicate values to be ignored while computing an aggregate. The <code>SELECT</code> statement that contains a user-defined aggregate can also include <code>GROUP BY</code> extensions such as <code>ROLLUP</code>, <code>CUBE</code> and grouping sets:</p>
<pre>
SELECT ..., MyUDAG(col)
FROM tab
GROUP BY ROLLUP(gcol1, gcol2);
</pre>
<p>The <a href="ext_agg_ref.htm#CACHGGCE">ODCIAggregateMerge()</a> interface is invoked to compute super aggregate values in such rollup operations.</p>
</div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG" href="../../server.112/e25554/toc.htm"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about <code>GROUP BY</code> extensions such as <code>ROLLUP</code>, <code>CUBE</code> and grouping sets</div>
</div>
<!-- class="sect1" -->
<a id="i1004974"></a><a id="ADDCI4632"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref489"></a><a id="sthref490"></a>Evaluating User-Defined Aggregates in Parallel</h2>
<p>Like built-in aggregate functions, user-defined aggregates can be evaluated in parallel.</p>
<p>The aggregation contexts generated by aggregating subsets of the rows within the parallel slaves are sent back to the next parallel step, either the query coordinator or the next slave set. It then merges the aggregation contexts, and then invokes the Terminate routine to obtain the aggregate value. This behavious is illustrated in <a href="#CECCIIFH">Figure 11-1</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CECCIIFH"></a><a id="ADDCI4633"></a>Figure 11-1 Sequence of Calls for Parallel Evaluation of User-Defined Aggregates</p>
<img width="236" height="142" src="img/addci043.gif" alt="Description of Figure 11-1 follows" title="Description of Figure 11-1 follows" /><br />
<a id="sthref491" href="img_text/addci043.htm">Description of "Figure 11-1 Sequence of Calls for Parallel Evaluation of User-Defined Aggregates"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You should note that the aggregate function must be declared to be parallel-enabled, as shown in <a href="#CECCFBAI">Example 11-7</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CECCFBAI"></a><a id="ADDCI4634"></a>Example 11-7 Parallel-Enabling a User-Defined Aggregate Function</p>
<pre>
CREATE FUNCTION MyUDAG(...) RETURN ...
PARALLEL_ENABLE AGGREGATE USING MyAggrRoutines;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1005028"></a><a id="ADDCI4635"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref492"></a><a id="sthref493"></a>Handling Large Aggregation Contexts</h2>
<p>When the implementation type methods are implemented in an external language, such as C++ or Java, the aggregation context must be passed back and forth between the Oracle server process and the external function's language environment each time an implementation type method is called. This can have an adverse effect on performance as the size of the aggregation context increases.</p>
<p>To enhance performance, you can store the aggregation context in external memory, allocated in the external function's execution environment. You can then pass the reference or key between the Oracle server and the external function. The key itself should be stored in the implementation type instance, the <code>self</code>. This approach keeps the implementation type instance small so that it can be transferred quickly. Another advantage of this strategy is that the memory used to hold the aggregation context is allocated in the function's execution environment, such as <code>extproc</code>, and not in the Oracle server.</p>
<p>Usually you should use <a href="ext_agg_ref.htm#CACJCHFF">ODCIAggregateInitialize()</a> to allocate the memory to hold the aggregation context and store the reference to it in the implementation type instance. In subsequent calls, the external memory and the aggregation context that it contains can be accessed using the reference. The external memory should usually be freed in <a href="ext_agg_ref.htm#CACBJHHI">ODCIAggregateTerminate()</a>. <a href="ext_agg_ref.htm#CACHGGCE">ODCIAggregateMerge()</a> should free the external memory used to store the merged context (the second argument of <a href="ext_agg_ref.htm#CACHGGCE">ODCIAggregateMerge()</a> after the merge is finished.</p>
<a id="ADDCI4636"></a>
<div class="sect2"><a id="sthref494"></a>
<h3 class="sect2"><a id="sthref495"></a>External <a id="sthref496"></a><a id="sthref497"></a>Context and Parallel Aggregation</h3>
<p>With parallel execution of queries with user-defined aggregates, the entire aggregation context, which comprises all partial aggregates computed by slave processes, must sometimes be transmitted to another slave or to the master process. You can implement the optional routine <a id="sthref498"></a><a id="sthref499"></a><a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> to collect all the partial aggregates. If a user-defined aggregate is being evaluated in parallel, and <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> is defined, Oracle invokes the routine to copy all external context references into the implementation type instance and then frees the external memory. To support <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a>, the implementation type must contain attributes to hold the aggregation context and another attribute to hold the key that identifies the external memory.</p>
<p>When the aggregation context is stored externally, the key attribute of the implementation type should contain the reference identifying the external memory, and the remaining attributes of the implementation type should be <code>NULL</code>. After a <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> call runs successfully, the key attribute should be <code>NULL</code>, and the other attributes should hold the actual aggregation context.</p>
<div class="example">
<p class="titleinexample"><a id="ADDCI4637"></a><a id="sthref500"></a>Example 11-8 Using External Memory to Store Aggregate Context</p>
<p>This example shows how an aggregation context type that contains references to external memory can also store the entire context, when needed.</p>
<p>The <code>4</code> byte <code>key</code> parameter is used to look up the external context. When <code>NULL</code>, it implies that the entire context value is held by the rest of the attributes in the object. The other attributes, such as <code>GeometrySet</code>, correspond to the actual aggregation context. If the <code>key</code> value is not <code>NULL</code>, these attributes must have a <code>NULL</code> value. However, when the context object is self-contained, as after a call to <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a>, these attributes hold the current context values.</p>
<pre>
CREATE TYPE MyAggrRoutines AS OBJECT
(
key RAW(4),
ctxval GeometrySet,
ctxval2 ...
);
</pre></div>
<!-- class="example" -->
<p>Each of the implementation type's member methods should begin by checking whether the <a id="sthref501"></a><a id="sthref502"></a>context is <span class="bold">inline</span> (contained in the implementation type instance) or in external memory. If the context is inline, as it would be if it was sent from another parallel slave, it should be copied to external memory so that it can be passed by reference.</p>
<p>Implementation of the <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> routine is optional. It is necessary only when external memory holds the aggregation context, and the user-defined aggregate is evaluated in parallel. If the user-defined aggregate is never evaluated in parallel, <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> is not needed. If the <a href="ext_agg_ref.htm#CACBBFAJ">ODCIAggregateWrapContext()</a> method is not defined, Oracle assumes that the aggregation context is not stored externally and does not try to call the method.</p>
</div>
<!-- class="sect2" -->
<a id="BEJJGBEH"></a><a id="ADDCI4638"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref503"></a>User-Defined Aggregates and Analytic Functions</h3>
<p><a id="sthref504"></a>Analytic functions enable you to compute various cumulative, moving, and centered aggregates over a set of rows called a window. For each row in a table, analytic functions return a value computed on the other rows contained in the given row's window. These functions provide access to several rows of a table without a self-join. User-defined aggregates can be used as analytic functions.</p>
<div class="example">
<p class="titleinexample"><a id="ADDCI4639"></a><a id="sthref505"></a>Example 11-9 Using User-Defined Aggregates as Analytic Functions</p>
<pre>
SELECT Account_number, Trans_date, Trans_amount,
   MyAVG (Trans_amount) OVER
      PARTITION BY Account_number ORDER BY Trans_date
      RANGE INTERVAL '7' DAY PRECEDING) AS mavg_7day
FROM Ledger;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BEJBFAEH"></a><a id="ADDCI4640"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref506"></a>Reusing the Aggregation Context for Analytic Functions</h3>
<p>When a user-defined aggregate is used as an analytic function, the aggregate is calculated for each row's corresponding window. Generally, each successive window contains largely the same set of rows, such that the new aggregation context, the new window, differs by only a few rows from the old aggregation context, the previous window. To reuse the aggregation context, any new rows that were not in the old context must be iterated over to add them, and any rows from the old context that do not belong in the new context must be removed. If the aggregation context cannot be reused, all the rows it contains must be reiterated to rebuild it.</p>
<p>You can implement an optional routine, <a id="sthref507"></a><a id="sthref508"></a><a href="ext_agg_ref.htm#CACEDHAD">ODCIAggregateDelete()</a>, to allow Oracle to reuse the aggregation context more efficiently. <a href="ext_agg_ref.htm#CACEDHAD">ODCIAggregateDelete()</a> removes from the aggregation context rows from the previous context that are not in the new (current) window. Oracle calls this routine for each row that must be removed. For each row that must be added, Oracle calls <a href="ext_agg_ref.htm#CACCAFIG">ODCIAggregateIterate()</a>.</p>
<p>If the new aggregation context is a superset of the old one, then it contains all the rows from the old context and no rows must be deleted. Oracle then reuses the old context even if <a href="ext_agg_ref.htm#CACEDHAD">ODCIAggregateDelete()</a> is not implemented.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink DWHSG021" href="../../server.112/e25554/analysis.htm#DWHSG021"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about analytic functions</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="ADDCI4641"></a>
<div class="sect2"><a id="sthref509"></a>
<h3 class="sect2"><a id="sthref510"></a><a id="sthref511"></a><a id="sthref512"></a>External Context<a id="sthref513"></a> and User-Defined <a id="sthref514"></a>Analytic Functions</h3>
<p>When user-defined aggregates are used as analytic functions, the aggregation context can be reused from one window to the next. In these cases, the flag argument of the <a href="ext_agg_ref.htm#CACBJHHI">ODCIAggregateTerminate()</a> function has its <code><a id="sthref515"></a>ODCI_AGGREGATE_REUSE_CTX</code> bit set to indicate that the external memory holding the aggregation context should not be freed. Also, the <a href="ext_agg_ref.htm#CACJCHFF">ODCIAggregateInitialize()</a> method is passed the implementation type instance of the previous window, so instead of having to allocate memory again, you can access and re-initialize the external memory previously allocated. To support external context for user-defined analytic functions, you should follow these steps:</p>
<ol>
<li>
<p><a href="ext_agg_ref.htm#CACJCHFF">ODCIAggregateInitialize()</a> - If the implementation type instance passed is not <code>NULL</code>, use the previously allocated external memory instead of allocating new external memory, and reinitialize the aggregation context.</p>
</li>
<li>
<p><a href="ext_agg_ref.htm#CACBJHHI">ODCIAggregateTerminate()</a> - Free external memory only if the bit <code>ODCI_AGGREGATE_REUSE_CTX</code> of the flag argument is not set.</p>
</li>
<li>
<p><a href="ext_agg_ref.htm#CACHGGCE">ODCIAggregateMerge()</a> - Free external memory associated with the merged aggregation context.</p>
</li>
<li>
<p><a href="ext_agg_ref.htm#CACBJHHI">ODCIAggregateTerminate()</a> - Copy the aggregation context from the external memory into the implementation type instance, and free the external memory.</p>
</li>
<li>
<p>All member methods - First determine if the context is stored externally or inline. If the context is inline, allocate external memory and copy the context there.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004720"></a><a id="ADDCI4642"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref516"></a>Using Materialized Views with User-Defined Aggregates</h2>
<p>A <a id="sthref517"></a>materialized view definition can contain user-defined aggregates and built-in aggregate operators, as demonstrated in <a href="#CIHCBBJJ">Example 11-10</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHCBBJJ"></a><a id="ADDCI4643"></a>Example 11-10 Creating Materialized Views</p>
<pre>
CREATE MATERIALIZED VIEW MyMV AS 
SELECT gcols, MyUDAG(c1) FROM tab GROUP BY (gcols);
</pre></div>
<!-- class="example" -->
<p>To enable the materialized view for query rewrite, the user-defined aggregates in the materialized view must be declared as <code>DETERMINISTIC</code>, as demonstratedin <a href="#CIHJJDAJ">Example 11-11</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHJJDAJ"></a><a id="ADDCI4644"></a>Example 11-11 Enabling Materialized Views for Query Rewrite</p>
<pre>
CREATE FUNCTION MyUDAG(x NUMBER) RETURN NUMBER
DETERMINISTIC
AGGREGATE USING MyImplType;

CREATE MATERIALIZED VIEW MyMV
ENABLE QUERY REWRITE AS
SELECT gcols, MyUDAG(c1) FROM tab GROUP BY (gcols);
</pre></div>
<!-- class="example" -->
<p>When a user-defined aggregate is dropped or re-created, all of its dependent materialized views are marked invalid.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink DWHSG008" href="../../server.112/e25554/basicmv.htm#DWHSG008"><span class="italic">Oracle Database Data Warehousing Guide</span></a> for information about materialized views</div>
</div>
<!-- class="sect1" -->
<a id="BEJBFBHH"></a><a id="ADDCI026"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref518"></a>Creating and Using a User-Defined Aggregate Function</h2>
<p><a href="#CIHECHID">Example 11-12</a> illustrates how to create and use a simple user-defined aggregate function, <code>SecondMax()</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CIHECHID"></a><a id="ADDCI4645"></a>Example 11-12 Creating and Using a User-Defined Aggregate Function</p>
<p><code>SecondMax()</code> returns the second-largest value in a set of numbers.</p>
<ol>
<li>
<p>Implement the type <code>SecondMaxImpl</code> to contain the <code>ODCIAggregate</code> routines:</p>
<pre>
create type SecondMaxImpl as object
(
  max NUMBER, -- highest value seen so far 
  secmax NUMBER, -- second highest value seen so far
  static function ODCIAggregateInitialize(sctx IN OUT SecondMaxImpl) 
    return number,
  member function ODCIAggregateIterate(self IN OUT SecondMaxImpl, 
    value IN number) return number,
  member function ODCIAggregateTerminate(self IN SecondMaxImpl, 
    returnValue OUT number, flags IN number) return number,
  member function ODCIAggregateMerge(self IN OUT SecondMaxImpl, 
    ctx2 IN SecondMaxImpl) return number
);
/
</pre></li>
<li>
<p>Implement the type body for <code>SecondMaxImpl</code>:</p>
<pre>
create or replace type body SecondMaxImpl is 
static function ODCIAggregateInitialize(sctx IN OUT SecondMaxImpl) 
return number is 
begin
  sctx := SecondMaxImpl(0, 0);
  return ODCIConst.Success;
end;

member function ODCIAggregateIterate(self IN OUT SecondMaxImpl, value IN number) return number is
begin
  if value &gt; self.max then
    self.secmax := self.max;
    self.max := value;
  elsif value &gt; self.secmax then
    self.secmax := value;
  end if;
  return ODCIConst.Success;
end;

member function ODCIAggregateTerminate(self IN SecondMaxImpl, 
    returnValue OUT number, flags IN number) return number is
begin
  returnValue := self.secmax;
  return ODCIConst.Success;
end;

member function ODCIAggregateMerge(self IN OUT SecondMaxImpl, ctx2 IN SecondMaxImpl) return number is
begin
  if ctx2.max &gt; self.max then
    if ctx2.secmax &gt; self.secmax then 
      self.secmax := ctx2.secmax;
    else
      self.secmax := self.max;
    end if;
    self.max := ctx2.max;
  elsif ctx2.max &gt; self.secmax then
    self.secmax := ctx2.max;
  end if;
  return ODCIConst.Success;
end;
end;
/
</pre></li>
<li>
<p>Create the user-defined aggregate:</p>
<pre>
CREATE FUNCTION SecondMax (input NUMBER) RETURN NUMBER 
PARALLEL_ENABLE AGGREGATE USING SecondMaxImpl;
</pre></li>
<li>
<p>Use <code>SecondMax()</code>:</p>
<pre>
SELECT SecondMax(salary), department_id
   FROM MyEmployees
   GROUP BY department_id
   HAVING SecondMax(salary) &gt; 9000;
</pre></li>
</ol>
</div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="ext_optimizer.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="cart_services.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
