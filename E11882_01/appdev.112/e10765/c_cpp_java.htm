<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Implementing Data Cartridges in C, C++, and Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="pl_sql.htm" title="Previous" type="text/html" />
<link rel="Next" href="lobs.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/36</span> <!-- End Header --><a id="BABGEFJB"></a><a id="ADDCI250"></a>
<h1 class="chapter"><span class="secnum">5</span> Implementing Data Cartridges in C, C++, and Java</h1>
<p>This chapter describes how to use C, C++, and Java to implement the methods of a data cartridge. Methods are procedures and functions that define the operations permitted on data defined using the data cartridge. The focus is on issues related to developing and debugging external procedures.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1004624">Using External Procedures</a></p>
</li>
<li>
<p><a href="#i1004632">Using Shared Libraries</a></p>
</li>
<li>
<p><a href="#i1004644">Registering an External Procedure</a></p>
</li>
<li>
<p><a href="#i1004686">How PL/SQL Calls an External Procedure</a></p>
</li>
<li>
<p><a href="#i1004727">Configuration Files for External Procedures</a></p>
</li>
<li>
<p><a href="#i1005104">Doing Callbacks</a></p>
</li>
<li>
<p><a href="#i1005193">Common Potential Errors</a></p>
</li>
<li>
<p><a href="#i1005213">Debugging External Procedures</a></p>
</li>
<li>
<p><a href="#i1005240">Guidelines for Using External Procedures with Data Cartridges</a></p>
</li>
<li>
<p><a href="#i1005252">Java Methods</a></p>
</li>
</ul>
<a id="i1004624"></a><a id="ADDCI4334"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref201"></a>Using External Procedures</h2>
<p>PL/SQL is a powerful language for database programming, but some methods are too complex to code optimally in PL/SQL. For example, a routine to perform numeric integration probably runs faster if it is implemented in C rather than PL/SQL.</p>
<p>To support such special-purpose processing, PL/SQL provides an interface for calling routines written in other languages. This makes the strengths and capabilities of 3GLs, like C, available through calls from a database server. Such a 3GL routine is called an <span class="bold">external procedure</span>; it is stored in a shared library, registered with PL/SQL, and called from PL/SQL at run time.</p>
<p>External procedures are an important tool for data cartridge developers. They can be used not only to write fast, efficient, computation-intensive routines for cartridge types, but also to integrate existing code with the database as data cartridges. Existing shared libraries from other languages, such as a Windows NT DLL with C routines to perform format conversions for audio files, can be called directly from a method in a type implemented by an audio cartridge. Similarly, you can use external procedures to process signals, drive devices, analyze data streams, render graphics, or process numeric data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">PL/SQL User's Guide and Reference</span></a> for details on external procedures and their use</div>
</div>
<!-- class="sect1" -->
<a id="i1004632"></a><a id="ADDCI4335"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref202"></a><a id="sthref203"></a><a id="sthref204"></a><a id="sthref205"></a>Using Shared Libraries</h2>
<p>A <span class="bold">shared library</span> is an operating system file, such as a Windows DLL or a Solaris shared object, that stores the coded implementation of external procedures. You can access to the shared library from Oracle by using an <span class="bold">alias library</span>, which is a schema object that represents the library within PL/SQL. For security reasons, you need DBA privileges to create an alias library.</p>
<p>To create the alias library, you must decide on the operating system location for the library, log in as a DBA or as a user with the <code>CREATE</code> <code>LIBRARY</code> privilege, and then enter the statement in <a href="#BGBJBCFF">Example 5-1</a>. This creates the alias library schema object in the database. After the alias library is created, you can refer to the shared library by the name <code>DS_Lib</code> from PL/SQL.</p>
<div class="example">
<p class="titleinexample"><a id="BGBJBCFF"></a><a id="ADDCI4336"></a>Example 5-1 Creating an Alias Library</p>
<pre>
CREATE OR REPLACE LIBRARY DS_Lib AS  
     '/data_cartridge_dir/libdatastream.so';
</pre></div>
<!-- class="example" -->
<p><a href="#BGBJBCFF">Example 5-1</a> specifies an absolute path for the library. If you have copies of the library on multiple systems, to support distributed execution of external procedures by designated or dedicated agents, use an environment variable to specify the location of the libraries more generally, as in <a href="#BGBDIDHB">Example 5-2</a>. This statement uses the environment variable <code>${DS_LIB_HOME}</code> to specify a common point of reference or root directory from which the library can be found on all systems. The string following the <code>AGENT</code> keyword specifies the agent (actually, a database link) that is used to run any external procedure declared to be in library <code>DS_Lib</code>.</p>
<div class="example">
<p class="titleinexample"><a id="BGBDIDHB"></a><a id="ADDCI4337"></a>Example 5-2 Specifying the Location of the Library Using an Environment Variable</p>
<pre>
CREATE OR REPLACE LIBRARY DS_Lib AS 
  '${DS_LIB_HOME}/libdatastream.so' AGENT 'agent_link';
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information on using dedicated external procedure agents</div>
</div>
<!-- class="sect1" -->
<a id="i1004644"></a><a id="ADDCI4338"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref206"></a><a id="sthref207"></a>Registering an External Procedure</h2>
<p>To call an external procedure, you must not only instruct PL/SQL regarding the alias library where the external procedure is defined, but also how to call this procedure and what arguments to pass to it.</p>
<p>The <code>DataStream</code> type was defined in <a href="obj_types.htm#CHDGIJCD">Example 3-1</a>, and <a href="obj_types.htm#CHDDCIDI">Example 3-2</a> defined methods o f <code>DataStream</code> by calling functions from the <code>DS_Package</code> package, which is specified in <a href="pl_sql.htm#CIHBEFGH">Example 4-9</a>. <a href="#BGBCCFEE">Example 5-3</a> defines the body of this package.</p>
<div class="example">
<p class="titleinexample"><a id="BGBCCFEE"></a><a id="ADDCI4339"></a>Example 5-3 Defining the Body of a Package</p>
<pre>
CREATE OR REPLACE PACKAGE BODY DS_Package AS 
     FUNCTION DS_Findmin(data  CLOB) RETURN PLS_INTEGER IS EXTERNAL 
     NAME "c_findmin" LIBRARY DS_Lib LANGUAGE C WITH CONTEXT; 
     FUNCTION DS_Findmax(data CLOB) RETURN PLS_INTEGER IS EXTERNAL 
     NAME "c_findmax" LIBRARY DS_Lib LANGUAGE C WITH CONTEXT; 
   END;
</pre></div>
<!-- class="example" -->
<p>Note that in the <code>PACKAGE</code> <code>BODY</code> declaration clause, the package functions are tied to external procedures in a shared library. The <code>EXTERNAL</code> clause in the function declaration registers information about the external procedure, such as its name (found after the <code>NAME</code> keyword), its location (which must be an alias library, following the <code>LIBRARY</code> keyword), the language in which the external procedure is written (following the <code>LANGUAGE</code> keyword), and so on.</p>
<p>The final part of the <code>EXTERNAL</code> clause in the example is the <code>WITH</code> <code>CONTEXT</code> specification. Here, a context pointer is passed to the external procedure. The context pointer is opaque to the external procedure, but is available so that the external procedure can call back to the Oracle server, to potentially access more data in the same transaction context.</p>
<p>Although the example describes external procedure calls from object type methods, a data cartridge can use external procedures from a variety of other places in PL/SQL. External procedure calls can appear in:</p>
<ul>
<li>
<p>Anonymous blocks</p>
</li>
<li>
<p>Standalone and packaged subprograms</p>
</li>
<li>
<p>Methods of an object type</p>
</li>
<li>
<p>Database triggers</p>
</li>
<li>
<p>SQL statements (calls to packaged functions only)</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">PL/SQL User's Guide and Reference.</span></a> for a description of the parameters that can accompany an <code>EXTERNAL</code> clause</p>
</li>
<li>
<p><a class="olink ADFNS" href="../e41502/toc.htm"><span class="variable">Oracle Database Advanced Application Developer's Guide</span></a>, the chapter on external procedures, for information on formatting the call specification when passing an object type to a C routine</p>
</li>
<li>
<p>The <code>WITH</code> <code>CONTEXT</code> clause is discussed in <a href="#i1005067">"Using the WITH CONTEXT Clause"</a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004686"></a><a id="ADDCI4340"></a>
<div class="sect1">
<h2 class="sect1">How PL/SQL Calls an External Procedure</h2>
<p><a id="sthref208"></a>To call an external procedure, PL/SQL must know the DLL or shared library in which the procedure resides. PL/SQL looks up the alias library in the <code>EXTERNAL</code> clause of the subprogram that registered the external procedure. The data dictionary is used to determine the actual path to the operating system shared library or DLL.</p>
<p>PL/SQL alerts a Listener process, which in turn starts a session-specific agent. Unless some other particular agent has been designated either in the <code>CREATE LIBRARY</code> statement for the procedure's specified library or in the agent argument of the <code>CREATE PROCEDURE</code> statement, the default agent <code>extproc</code> is launched. The Listener hands over the connection to the agent. PL/SQL passes the agent the name of the DLL, the name of the external procedure, and any parameters passed in by the caller. The rest of this account assumes that the agent launched is the default agent <code>extproc</code>.</p>
<p>After receiving the name of the DLL and the external procedure, <code><a id="sthref209"></a>extproc</code> loads the DLL and runs the external procedure. Also, <code><a id="sthref210"></a>extproc</code> handles service calls, such as raising an exception, and callbacks to the Oracle server. Finally, <code><a id="sthref211"></a>extproc</code> passes to PL/SQL any values returned by the external procedure. <a href="#i1004696">Figure 5-1</a> shows the flow of control.</p>
<div class="figure">
<p class="titleinfigure"><a id="ADDCI4341"></a><a id="i1004696"></a>Figure 5-1 Calling an External Procedure</p>
<img width="491" height="222" src="img/addci012.gif" alt="Description of Figure 5-1 follows" title="Description of Figure 5-1 follows" /><br />
<a id="sthref212" href="img_text/addci012.htm">Description of "Figure 5-1 Calling an External Procedure"</a><br />
<br /></div>
<!-- class="figure" -->
<p>After the external procedure completes, <code><a id="sthref213"></a>extproc</code> remains active throughout your Oracle session. Thus, you incur the cost of spawning <code><a id="sthref214"></a>extproc</code> only one time, no matter how many calls you make. Still, you should call an external procedure only when the computational benefits outweigh the cost. When you log off, <code><a id="sthref215"></a>extproc</code> is killed.</p>
<p>Note that the Listener must start <code><a id="sthref216"></a>extproc</code> on the system that runs the Oracle server. Starting <code><a id="sthref217"></a>extproc</code> on a different system is not supported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information on using dedicated external procedure agents to run an external procedure</p>
</li>
<li>
<p><a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide.</span></a> for information about administering <code><a id="sthref218"></a>extproc</code> and external procedure call</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004727"></a><a id="ADDCI4342"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref219"></a><a id="sthref220"></a>Configuration Files for External Procedures</h2>
<p>The configuration files <code>listener.ora</code> and <code>tnsnames.ora</code> must have appropriate entries, so that the Listener can dispatch the external procedures.</p>
<p>The Listener configuration file <code>listener.ora</code> must have a <code>SID_DESC</code> entry for the external procedure, as demonstrated in <a href="#BGBJEEGF">Example 5-4</a>.</p>
<div class="example">
<p class="titleinexample"><a id="BGBJEEGF"></a><a id="ADDCI4343"></a>Example 5-4 Setting the SID_DESC Entry in the Listener Configuration FIle</p>
<pre>
# Listener configuration file  
# This file is generated by stkconf.tsc  
 
CONNECT_TIMEOUT_LISTENER = 0  
 
LISTENER = (ADDRESS_LIST=  
  (ADDRESS=(PROTOCOL=ipc)(KEY=o10))  
  (ADDRESS=(PROTOCOL=tcp)(HOST=unix123)(PORT=1521))  
)

SID_LIST_LISTENER = (SID_LIST=   
  SID_DESC=(SID_NAME=o10)(ORACLE_HOME=/rdbms/u01/app/oracle/product/11.2.0.1.0) 
  SID_DESC=(SID_NAME=extproc)
           (ORACLE_HOME=/rdbms/u01/app/oracle/product/11.2.0.1.0)
  (PROGRAM=extproc))  
</pre></div>
<!-- class="example" -->
<p><a href="#BGBJEEGF">Example 5-4</a> assumes the following:</p>
<ul>
<li>
<p>The Oracle instance is called <code>o10</code>.</p>
</li>
<li>
<p>The system or node on which the Oracle server runs is named <code>unix123</code>.</p>
</li>
<li>
<p>The installation directory for the Oracle server is <code>/rdbms/u01</code>.</p>
</li>
<li>
<p>The port number for Oracle TCP/IP communication is the default Listener port <code>1521</code>.</p>
</li>
</ul>
<p>The <code>tnsnames.ora</code> file is the network substrate configuration file, and it must also be updated to refer to the external procedure, as demonstrated in <a href="#BGBBGEFC">Example 5-5</a>:</p>
<div class="example">
<p class="titleinexample"><a id="BGBBGEFC"></a><a id="ADDCI4344"></a>Example 5-5 Updating the Network Substrate Configuration to Refer to External Procedures</p>
<pre>
o10 = (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=unix123)(PORT=1521))
  (CONNECT_DATA=(SID=o10)))
extproc_connection_data = (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=o10))
  CONNECT_DATA=(SID=extproc)))
</pre></div>
<!-- class="example" -->
<p><a href="#BGBBGEFC">Example 5-5</a> assumes that IPC mechanisms are used to communicate with the external procedure. You can also use, for example, TCP/IP for communication, in which case the <code>PROTOCOL</code> parameter must be set to <code>tcp</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="variable">Oracle Database Administrator's Guide</span></a> for more information about configuring the <code>listener.ora</code> and <code>tnsnames.ora</code> files</div>
<a id="ADDCI4345"></a>
<div class="sect2"><a id="sthref221"></a>
<h3 class="sect2">Passing Parameters to an External Procedure</h3>
<p><a id="sthref222"></a>Passing parameters to an external procedure is complicated by several circumstances:</p>
<ul>
<li>
<p>The set of PL/SQL data types does not correspond one-to-one with the set of C data types.</p>
</li>
<li>
<p>PL/SQL parameters can be <code>null</code>, whereas C parameters cannot. Unlike C, PL/SQL includes the RDBMS concept of nullity.</p>
</li>
<li>
<p>The external procedure might need the current length or maximum length of <code>CHAR</code>, <code>LONG</code> <code>RAW</code>, <code>RAW</code>, and <code>VARCHAR2</code> parameters.</p>
</li>
<li>
<p>The external procedure might need character set information about <code>CHAR</code>, <code>VARCHAR2</code>, and <code>CLOB</code> parameters.</p>
</li>
<li>
<p>PL/SQL might need the current length, maximum length, or null status of values returned by the external procedure.</p>
</li>
</ul>
<p>In the following sections, you learn how to specify a parameter list that deals with these circumstances. An example of parameter passing is shown in <a href="#BGBBAJIF">Example 5-6</a>, where the package function <code>DS_Findmin(data CLOB)</code> calls the C routine <code>c_findmin</code> and the <code>CLOB</code> argument is passed to the C routine as an <code>OCILobLocator()</code>.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4346"></a>
<div class="sect2"><a id="sthref223"></a>
<h3 class="sect2"><a id="sthref224"></a>Specifying Data Types</h3>
<p><a id="sthref225"></a>You do not pass parameters to an external procedure directly. Instead, you pass them to the PL/SQL subprogram that registered the external procedure. So, you must specify PL/SQL data types for the parameters. <a href="#g1012384">Table 5-1</a> maps each PL/SQL data type to a default external data type. The external data types map to C data type.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4347"></a><a id="sthref226"></a><a id="g1012384"></a>Table 5-1 Parameter Data Type Mappings</p>
<table class="cellalignment1246" title="Parameter Data Type Mappings " summary="Specifies the mappings from PL/SQL datatypes to supported and default external datatypes" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t7">PL/SQL Type</th>
<th class="cellalignment1247" id="r1c2-t7">Supported External Types</th>
<th class="cellalignment1247" id="r1c3-t7">Default External Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t7" headers="r1c1-t7">
<pre>
BINARY_INTEGER,
BOOLEAN,
PLS_INTEGER 
</pre></td>
<td class="cellalignment1243" headers="r2c1-t7 r1c2-t7">
<pre>
CHAR, UNSIGNED CHAR, SHORT, UNSIGNED
 SHORT, INT, UNSIGNED INT, LONG,
 UNSIGNED LONG, SB1, UB1, SB2, UB2, 
 SB4, UB4, SIZE_T
</pre></td>
<td class="cellalignment1243" headers="r2c1-t7 r1c3-t7">
<pre>
INT
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t7" headers="r1c1-t7">
<pre>
NATURAL, NATURALN, 
POSITIVE,
POSITIVEN, 
SIGNTYPE
</pre></td>
<td class="cellalignment1243" headers="r3c1-t7 r1c2-t7">
<pre>
CHAR, UNSIGNED CHAR, SHORT, UNSIGNED
 SHORT, INT, UNSIGNED INT, LONG,
 UNSIGNED LONG, SB1, UB1, SB2 ,UB2,
 SB4, UB4, SIZE_T
</pre></td>
<td class="cellalignment1243" headers="r3c1-t7 r1c3-t7">
<pre>
UNSIGNED INT
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t7" headers="r1c1-t7">
<pre>
FLOAT, REAL
</pre></td>
<td class="cellalignment1243" headers="r4c1-t7 r1c2-t7">
<pre>
FLOAT
</pre></td>
<td class="cellalignment1243" headers="r4c1-t7 r1c3-t7">
<pre>
FLOAT
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t7" headers="r1c1-t7">
<pre>
DOUBLE PRECISION
</pre></td>
<td class="cellalignment1243" headers="r5c1-t7 r1c2-t7">
<pre>
DOUBLE
</pre></td>
<td class="cellalignment1243" headers="r5c1-t7 r1c3-t7">
<pre>
DOUBLE
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r6c1-t7" headers="r1c1-t7">
<pre>
CHAR, CHARACTER,
LONG, ROWID, VARCHAR, VARCHAR2 
</pre></td>
<td class="cellalignment1243" headers="r6c1-t7 r1c2-t7">
<pre>
STRING
</pre></td>
<td class="cellalignment1243" headers="r6c1-t7 r1c3-t7">
<pre>
STRING
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r7c1-t7" headers="r1c1-t7">
<pre>
LONG RAW, RAW
</pre></td>
<td class="cellalignment1243" headers="r7c1-t7 r1c2-t7">
<pre>
RAW
</pre></td>
<td class="cellalignment1243" headers="r7c1-t7 r1c3-t7">
<pre>
RAW
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r8c1-t7" headers="r1c1-t7">
<pre>
BFILE, BLOB, CLOB
</pre></td>
<td class="cellalignment1243" headers="r8c1-t7 r1c2-t7">
<pre>
OCILOBLOCATOR
</pre></td>
<td class="cellalignment1243" headers="r8c1-t7 r1c3-t7">
<pre>
OCILOBLOCATOR
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In some cases, you can use the <code>PARAMETERS</code> clause to override the default data type mappings. For example, you can re-map the PL/SQL data type <code>BOOLEAN</code> from external data type <code>INT</code> to external data type <code>CHAR</code>.</p>
<p>To avoid errors when declaring C prototype parameters, refer to <a href="#g1012786">Table 5-2</a>, which shows the C data type to specify for a given external data type and PL/SQL parameter mode. For example, if the external data type of an <code>OUT</code> parameter is <code>CHAR</code>, specify the data type <code>char*</code> in your C prototype.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4348"></a><a id="sthref227"></a><a id="g1012786"></a>Table 5-2 External Data Type Mappings</p>
<table class="cellalignment1246" title="External Data Type Mappings" summary="Specifies the C datatype to use for external datatypes and PL/SQL parameter mode" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t8">External Data Type</th>
<th class="cellalignment1247" id="r1c2-t8">IN, RETURN</th>
<th class="cellalignment1247" id="r1c3-t8">IN by Reference, RETURN by Reference</th>
<th class="cellalignment1247" id="r1c4-t8">IN OUT, OUT</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t8" headers="r1c1-t8">
<pre>
CHAR
</pre></td>
<td class="cellalignment1243" headers="r2c1-t8 r1c2-t8">
<pre>
char
</pre></td>
<td class="cellalignment1243" headers="r2c1-t8 r1c3-t8">
<pre>
char *
</pre></td>
<td class="cellalignment1243" headers="r2c1-t8 r1c4-t8">
<pre>
char *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t8" headers="r1c1-t8">
<pre>
UNSIGNED CHAR
</pre></td>
<td class="cellalignment1243" headers="r3c1-t8 r1c2-t8">
<pre>
unsigned char
</pre></td>
<td class="cellalignment1243" headers="r3c1-t8 r1c3-t8">
<pre>
unsigned char *
</pre></td>
<td class="cellalignment1243" headers="r3c1-t8 r1c4-t8">
<pre>
unsigned char *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t8" headers="r1c1-t8">
<pre>
SHORT
</pre></td>
<td class="cellalignment1243" headers="r4c1-t8 r1c2-t8">
<pre>
short
</pre></td>
<td class="cellalignment1243" headers="r4c1-t8 r1c3-t8">
<pre>
short *
</pre></td>
<td class="cellalignment1243" headers="r4c1-t8 r1c4-t8">
<pre>
short *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t8" headers="r1c1-t8">
<pre>
UNSIGNED SHORT
</pre></td>
<td class="cellalignment1243" headers="r5c1-t8 r1c2-t8">
<pre>
unsigned short
</pre></td>
<td class="cellalignment1243" headers="r5c1-t8 r1c3-t8">
<pre>
unsigned short *
</pre></td>
<td class="cellalignment1243" headers="r5c1-t8 r1c4-t8">
<pre>
unsigned short *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r6c1-t8" headers="r1c1-t8">
<pre>
INT
</pre></td>
<td class="cellalignment1243" headers="r6c1-t8 r1c2-t8">
<pre>
int
</pre></td>
<td class="cellalignment1243" headers="r6c1-t8 r1c3-t8">
<pre>
int *
</pre></td>
<td class="cellalignment1243" headers="r6c1-t8 r1c4-t8">
<pre>
int *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r7c1-t8" headers="r1c1-t8">
<pre>
UNSIGNED INT
</pre></td>
<td class="cellalignment1243" headers="r7c1-t8 r1c2-t8">
<pre>
unsigned int
</pre></td>
<td class="cellalignment1243" headers="r7c1-t8 r1c3-t8">
<pre>
unsigned int *
</pre></td>
<td class="cellalignment1243" headers="r7c1-t8 r1c4-t8">
<pre>
unsigned int *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r8c1-t8" headers="r1c1-t8">
<pre>
LONG
</pre></td>
<td class="cellalignment1243" headers="r8c1-t8 r1c2-t8">
<pre>
long
</pre></td>
<td class="cellalignment1243" headers="r8c1-t8 r1c3-t8">
<pre>
long *
</pre></td>
<td class="cellalignment1243" headers="r8c1-t8 r1c4-t8">
<pre>
long *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r9c1-t8" headers="r1c1-t8">
<pre>
UNSIGNED LONG
</pre></td>
<td class="cellalignment1243" headers="r9c1-t8 r1c2-t8">
<pre>
unsigned long
</pre></td>
<td class="cellalignment1243" headers="r9c1-t8 r1c3-t8">
<pre>
unsigned long *
</pre></td>
<td class="cellalignment1243" headers="r9c1-t8 r1c4-t8">
<pre>
unsigned long *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r10c1-t8" headers="r1c1-t8">
<pre>
SIZE_T
</pre></td>
<td class="cellalignment1243" headers="r10c1-t8 r1c2-t8">
<pre>
size_t
</pre></td>
<td class="cellalignment1243" headers="r10c1-t8 r1c3-t8">
<pre>
size_t *
</pre></td>
<td class="cellalignment1243" headers="r10c1-t8 r1c4-t8">
<pre>
size_t *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r11c1-t8" headers="r1c1-t8">
<pre>
SB1
</pre></td>
<td class="cellalignment1243" headers="r11c1-t8 r1c2-t8">
<pre>
sb1
</pre></td>
<td class="cellalignment1243" headers="r11c1-t8 r1c3-t8">
<pre>
sb1 *
</pre></td>
<td class="cellalignment1243" headers="r11c1-t8 r1c4-t8">
<pre>
sb1 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r12c1-t8" headers="r1c1-t8">
<pre>
UB1
</pre></td>
<td class="cellalignment1243" headers="r12c1-t8 r1c2-t8">
<pre>
ub1
</pre></td>
<td class="cellalignment1243" headers="r12c1-t8 r1c3-t8">
<pre>
ub1 *
</pre></td>
<td class="cellalignment1243" headers="r12c1-t8 r1c4-t8">
<pre>
ub1 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r13c1-t8" headers="r1c1-t8">
<pre>
SB2
</pre></td>
<td class="cellalignment1243" headers="r13c1-t8 r1c2-t8">
<pre>
sb2
</pre></td>
<td class="cellalignment1243" headers="r13c1-t8 r1c3-t8">
<pre>
sb2 *
</pre></td>
<td class="cellalignment1243" headers="r13c1-t8 r1c4-t8">
<pre>
sb2 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r14c1-t8" headers="r1c1-t8">
<pre>
UB2
</pre></td>
<td class="cellalignment1243" headers="r14c1-t8 r1c2-t8">
<pre>
ub2
</pre></td>
<td class="cellalignment1243" headers="r14c1-t8 r1c3-t8">
<pre>
ub2 *
</pre></td>
<td class="cellalignment1243" headers="r14c1-t8 r1c4-t8">
<pre>
ub2 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r15c1-t8" headers="r1c1-t8">
<pre>
SB4
</pre></td>
<td class="cellalignment1243" headers="r15c1-t8 r1c2-t8">
<pre>
sb4
</pre></td>
<td class="cellalignment1243" headers="r15c1-t8 r1c3-t8">
<pre>
sb4 *
</pre></td>
<td class="cellalignment1243" headers="r15c1-t8 r1c4-t8">
<pre>
sb4 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r16c1-t8" headers="r1c1-t8">
<pre>
UB4
</pre></td>
<td class="cellalignment1243" headers="r16c1-t8 r1c2-t8">
<pre>
ub4
</pre></td>
<td class="cellalignment1243" headers="r16c1-t8 r1c3-t8">
<pre>
ub4 *
</pre></td>
<td class="cellalignment1243" headers="r16c1-t8 r1c4-t8">
<pre>
ub4 *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r17c1-t8" headers="r1c1-t8">
<pre>
FLOAT
</pre></td>
<td class="cellalignment1243" headers="r17c1-t8 r1c2-t8">
<pre>
float
</pre></td>
<td class="cellalignment1243" headers="r17c1-t8 r1c3-t8">
<pre>
float *
</pre></td>
<td class="cellalignment1243" headers="r17c1-t8 r1c4-t8">
<pre>
float *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r18c1-t8" headers="r1c1-t8">
<pre>
DOUBLE
</pre></td>
<td class="cellalignment1243" headers="r18c1-t8 r1c2-t8">
<pre>
double
</pre></td>
<td class="cellalignment1243" headers="r18c1-t8 r1c3-t8">
<pre>
double *
</pre></td>
<td class="cellalignment1243" headers="r18c1-t8 r1c4-t8">
<pre>
double *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r19c1-t8" headers="r1c1-t8">
<pre>
STRING
</pre></td>
<td class="cellalignment1243" headers="r19c1-t8 r1c2-t8">
<pre>
char *
</pre></td>
<td class="cellalignment1243" headers="r19c1-t8 r1c3-t8">
<pre>
char *
</pre></td>
<td class="cellalignment1243" headers="r19c1-t8 r1c4-t8">
<pre>
char *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r20c1-t8" headers="r1c1-t8">
<pre>
RAW
</pre></td>
<td class="cellalignment1243" headers="r20c1-t8 r1c2-t8">
<pre>
unsigned char *
</pre></td>
<td class="cellalignment1243" headers="r20c1-t8 r1c3-t8">
<pre>
unsigned char *
</pre></td>
<td class="cellalignment1243" headers="r20c1-t8 r1c4-t8">
<pre>
unsigned char *
</pre></td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r21c1-t8" headers="r1c1-t8">
<pre>
OCILOBLOCATOR
</pre></td>
<td class="cellalignment1243" headers="r21c1-t8 r1c2-t8">
<pre>
OCILobLocator *
</pre></td>
<td class="cellalignment1243" headers="r21c1-t8 r1c3-t8">
<pre>
OCILobLocator *
</pre></td>
<td class="cellalignment1243" headers="r21c1-t8 r1c4-t8">
<pre>
OCILobLocator **
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="ADDCI4349"></a>
<div class="sect2"><a id="sthref228"></a>
<h3 class="sect2"><a id="sthref229"></a><a id="sthref230"></a>Using the Parameters Clause</h3>
<p>You can optionally use the <code>PARAMETERS</code> clause to pass additional information about PL/SQL formal parameters and function return values to an external procedure. You can also use this clause to reposition parameters.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference.</span></a></div>
</div>
<!-- class="sect2" -->
<a id="i1005067"></a><a id="ADDCI4350"></a>
<div class="sect2">
<h3 class="sect2">Using the WITH CONTEXT Clause</h3>
<p><a id="sthref231"></a><a id="sthref232"></a><a id="sthref233"></a>When launched, an external procedure must access the database. For example, <code>DS_Findmin</code> does not copy the entire <code>CLOB</code> data over to <code>c_findmin</code>, because doing so would vastly increase the amount of stack that the C routine needs. Instead, the PL/SQL function just passes a <code>LOB</code> locator to the C routine, with the intent that the database is accessed again from C to read the actual <code>LOB</code> data.</p>
<p>When the C routine reads the data, it can use the OCI buffering and streaming interfaces associated with LOBs, so that only incremental amounts of stack are needed. Such re-access of the database from an external procedure is known as a <span class="glossaryterm">callback</span>.</p>
<p>To be able to call back to a database, you must use the <code>WITH</code> <code>CONTEXT</code> clause to give the external procedure access to the database environment, service, and error handles. When an external procedure is called using <code>WITH</code> <code>CONTEXT</code>, the corresponding C routine automatically gets an argument of type <code>OCIExtProcContext</code>* as its first parameter. The order of the parameters can be changed using the <code>PARAMETERS</code> clause. You can use this context pointer to fetch the handles using the <code>OCIExtProcGetEnv</code> call, and then call back to the database. This procedure is shown in <a href="#BGBBAJIF">Example 5-6</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI" href="../e10646/toc.htm"><span class="variable">Oracle Call Interface Programmer's Guide</span></a> for details about OCI callbacks</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005104"></a><a id="ADDCI4351"></a>
<div class="sect1">
<h2 class="sect1">Doing Callbacks</h2>
<p>An external procedure that runs on the Oracle server can call the access function <code>OCIExtProcGetEnv()</code> to obtain the OCI environment and service handles. With the OCI, you can use callbacks to execute SQL statements and PL/SQL subprograms, fetch data, and manipulate LOBs. Moreover, callbacks and external procedures operate in the same user session and transaction context, so they have the same user privileges.</p>
<p><a href="#BGBBAJIF">Example 5-6</a> is a version of <code>c_findmin</code> that is simplified to illustrate callbacks.</p>
<div class="example">
<p class="titleinexample"><a id="BGBBAJIF"></a><a id="ADDCI4352"></a>Example 5-6 Using Callbacks</p>
<pre>
Static  OCIEnv   *envhp;
Static  OCISvcCtx  *svchp;
Static OCIError   *errhp;
Int   c_findmin (OCIExtProcContext *ctx, OCILobLocator  *lobl) {
sword  retval;
retval = OCIExtProcGetEnv (ctx, &amp;envhp, &amp;svchp, &amp;errhp);
if ((retval != OCI_SUCCESS) &amp;&amp; (retval !=  OCI_SUCCESS_WITH_INFO))
   exit(-1);
   /* Use lobl to read the CLOB, compute the minimum, and store the value
       in retval. */
return retval;
}
</pre></div>
<!-- class="example" -->
<a id="ADDCI4353"></a>
<div class="sect2"><a id="sthref234"></a>
<h3 class="sect2"><a id="sthref235"></a>Restrictions on <a id="sthref236"></a>Callbacks</h3>
<p><a id="sthref237"></a>With callbacks, the following SQL statements and OCI routines are not supported:</p>
<ul>
<li>
<p>Transaction control statements such as <code>COMMIT</code></p>
</li>
<li>
<p>Data definition statements such as <code>CREATE</code></p>
</li>
<li>
<p>Object-oriented OCI routines such as <code>OCIRefClear</code></p>
</li>
<li>
<p>Polling-mode OCI routines such as <code>OCIGetPieceInfo</code></p>
</li>
<li>
<p>The following OCI routines:</p>
<ul>
<li>
<p><code>OCIEnvInit()</code></p>
</li>
<li>
<p><code>OCIInitialize()</code></p>
</li>
<li>
<p><code>OCIPasswordChange()</code></p>
</li>
<li>
<p><code>OCIServerAttach()</code></p>
</li>
<li>
<p><code>OCIServerDetach()</code></p>
</li>
<li>
<p><code>OCISessionBegin ()</code></p>
</li>
<li>
<p><code>OCISessionEnd ()</code></p>
</li>
<li>
<p><code>OCISvcCtxToLda()</code></p>
</li>
<li>
<p><code>OCITransCommit()</code></p>
</li>
<li>
<p><code>OCITransDetach()</code></p>
</li>
<li>
<p><code>OCITransRollback()</code></p>
</li>
<li>
<p><code>OCITransStart()</code></p>
</li>
</ul>
</li>
<li>
<p>Also, with OCI routine <code>OCIHandleAlloc()</code>, the following handle types are not supported:</p>
<ul>
<li>
<p><code>OCI_HTYPE_SERVER</code></p>
</li>
<li>
<p><code>OCI_HTYPE_SESSION</code></p>
</li>
<li>
<p><code>OCI_HTYPE_SVCCTX</code></p>
</li>
<li>
<p><code>OCI_HTYPE_TRANS</code></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005193"></a><a id="ADDCI4354"></a>
<div class="sect1">
<h2 class="sect1">Common Potential Errors</h2>
<p>This section presents several kinds of errors you might encounter when running external procedures.</p>
<a id="ADDCI4355"></a>
<div class="sect2"><a id="sthref238"></a>
<h3 class="sect2">Calls to External Functions</h3>
<pre>
Can't Find DLL
ORA-06520: PL/SQL: Error loading external library
ORA-06522: Unable to load DLL
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at line &lt;number&gt;
</pre>
<p>You may have specified the wrong path or wrong name for the DLL file, or you may have tried to use a DLL on a network mounted drive (a remote drive).</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4356"></a>
<div class="sect2"><a id="sthref239"></a>
<h3 class="sect2"><a id="sthref240"></a>RPC Time Out</h3>
<pre>
ORA-28576: lost RPC connection to external procedure agent
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at line &lt;number&gt;
</pre>
<p>This error might occur after you exit a debugger while debugging a shared library or DLL. Simply disconnect your client and reconnect to the database.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005213"></a><a id="ADDCI4357"></a>
<div class="sect1">
<h2 class="sect1">D<a id="sthref241"></a><a id="sthref242"></a>ebugging External Procedures</h2>
<p>Usually, when an external procedure fails, its C prototype is faulty. That is, the prototype does not match the one generated internally by PL/SQL. This can happen if you specify an incompatible C data type. For example, to pass an <code>OUT</code> parameter of type <code>REAL</code>, you must specify <code>float *</code>. Specifying <code>float</code>, <code>double *</code>, or any other C data type, results in a mismatch.</p>
<p>In such cases, you might get a lost RPC connection to external procedure agent error, which means that agent <code><a id="sthref243"></a>extproc</code> terminated abnormally because the external procedure caused a core dump. To avoid errors when declaring C prototype parameters, refer to <a href="#g1012786">Table 5-2</a>.</p>
<a id="ADDCI4358"></a>
<div class="sect2"><a id="sthref244"></a>
<h3 class="sect2">Using Package <a id="sthref245"></a>DEBUG_EXTPROC</h3>
<p>To help you debug external procedures, PL/SQL provides the utility package <code>DEBUG_EXTPROC</code>. To install the package, run the script <code>dbgextp</code>.<code>sql</code>, which you can find in the PL/SQL demo directory.</p>
<p>To use the package, follow the instructions in <code>dbgextp.sql</code>. Your Oracle account must have <code>EXECUTE</code> privileges on the package and <code>CREATE</code> <code>LIBRARY</code> privileges.</p>
<p>Note that <code>DEBUG_EXTPROC</code> works only on platforms with debuggers that can attach to a running process.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4359"></a>
<div class="sect2"><a id="sthref246"></a>
<h3 class="sect2">Debugging C Code in DLLs on Windows NT Systems</h3>
<p><a id="sthref247"></a><a id="sthref248"></a><a id="sthref249"></a>If you are developing on a Windows NT system, you may perform the following additional actions to debug external procedures:</p>
<ol>
<li>
<p>Invoke the Windows NT Task Manager; press Ctrl+Alt+Del and select Task Manager.</p>
</li>
<li>
<p>In the Processes display, select ExtProc.exe.</p>
</li>
<li>
<p>Right click, and select Debug.</p>
</li>
<li>
<p>Select OK in the message box.</p>
<p>At this point, if you have built your DLL in a debug fashion with Microsoft Visual C++, Visual C++ is activated.</p>
</li>
<li>
<p>In the Visual C++ window, select Edit &gt; Breakpoints.</p>
</li>
<li>
<p>Use the breakpoint identified in <code>dbgextp.sql</code> in the PL/SQL demo directory.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005240"></a><a id="ADDCI4360"></a>
<div class="sect1">
<h2 class="sect1">Guidelines for Using External Procedures with Data Cartridges</h2>
<p><a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a><a id="sthref253"></a>Make sure to write thread-safe external procedures. In particular, avoid using static variables, which can be shared by routines running in separate threads.</p>
<p>For help in creating a dynamic link library, look in the RDBMS subdirectory <code>/public</code>, where a template <code>makefile</code> can be found.</p>
<p>When calling external procedures, never write to <code>IN</code> parameters or overflow the capacity of <code>OUT</code> parameters. PL/SQL does no run-time checks for these error conditions. Likewise, never read an <code>OUT</code> parameter or a function result. Also, always assign a value to <code>IN</code> <code>OUT</code> and <code>OUT</code> parameters and to function results. Otherwise, your external procedure does not return successfully.</p>
<p>If you include the <code>WITH</code> <code>CONTEXT</code> and <code>PARAMETERS</code> clauses, you must specify the parameter <code>CONTEXT</code>, which shows the position of the context pointer in the parameter list. If you omit the <code>PARAMETERS</code> clause, the context pointer is the first parameter passed to the external procedure.</p>
<p>If you include the <code>PARAMETERS</code> clause and the external procedure is a function, you must specify the parameter <code>RETURN</code> (not <code>RETURN property</code>) in the last position.</p>
<p>For every formal parameter, there must be a corresponding parameter in the <code>PARAMETERS</code> clause. Also, ensure that the data types of parameters in the <code>PARAMETERS</code> clause are compatible with those in the C prototype, because no implicit conversions are done.</p>
<p>A parameter for which you specify <code>INDICATOR</code> or <code>LENGTH</code> has the same parameter mode as the corresponding formal parameter. However, a parameter for which you specify <code>MAXLEN</code>, <code>CHARSETID</code>, or <code>CHARSETFORM</code> is always treated like an <code>IN</code> parameter, even if you also specify <code>BY REFERENCE</code>.</p>
<p>With a parameter of type <code>CHAR</code>, <code>LONG</code> <code>RAW</code>, <code>RAW</code>, or <code>VARCHAR2</code>, you must use the property <code>LENGTH</code>. Also, if that parameter is <code>IN</code> <code>OUT</code> or <code>OUT</code> and null, you must set the length of the corresponding C parameter to zero.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about multithreading, see the <a class="olink HETER" href="../../server.112/e11050/toc.htm"><span class="italic">Oracle Database Heterogeneous Connectivity Administrator's Guide.</span></a></div>
</div>
<!-- class="sect1" -->
<a id="i1005252"></a><a id="ADDCI4361"></a>
<div class="sect1">
<h2 class="sect1">Java Methods</h2>
<p>To use Java Data Cartridges, it is important that you know how to load Java class definitions, about how to call stored procedures, and about context management. Information on ODCI classes can also be found in <a href="serv_c_java_ref.htm#CIHIFJEJ">Chapter 18, "Cartridge Services Using C, C++ and Java"</a> of this manual.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="pl_sql.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="lobs.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
