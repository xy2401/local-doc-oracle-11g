<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Extensible Optimizer</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:27Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="operators.htm" title="Previous" type="text/html" />
<link rel="Next" href="aggr_functions.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/36</span> <!-- End Header --><a id="BABEDGGD"></a><a id="ADDCI2110"></a><a id="i1006541"></a>
<h1 class="chapter"><span class="secnum">10</span> Using Extensible Optimizer</h1>
<p>This chapter introduces the Oracle Database extensible optimizer, descibes the concepts of optimization, statistics, selectivity, and cost analysis, provides usage examples, and explains predicate ordering and the dependency model of optimizer.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1004590">Overview of Query Optimization</a></p>
</li>
<li>
<p><a href="#i1004687">Defining Statistics, Selectivity, and Cost Functions</a></p>
</li>
<li>
<p><a href="#i1004900">Using User-Defined Statistics, Selectivity, and Cost</a></p>
</li>
<li>
<p><a href="#i1006511">Predicate Ordering</a></p>
</li>
<li>
<p><a href="#CHDEEAAC">Dependency Model</a></p>
</li>
<li>
<p><a href="#CHDICECG">Restrictions and Suggestions</a></p>
</li>
</ul>
<a id="i1004590"></a><a id="ADDCI4552"></a>
<div class="sect1">
<h2 class="sect1">Overview of Query Optimization</h2>
<p><span class="bold">Query Optimization</span> is the process of choosing the most efficient way to execute a SQL statement. When the cost-based optimizer was offered for the first time with Oracle7, Oracle supported only standard relational data. The introduction of objects extended the supported data types and functions. The Extensible Indexing feature discussed in <a href="operators.htm#BACJHBGC">Chapter 9, "Defining Operators"</a> introduces user-defined access methods.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT" href="../../server.112/e40540/toc.htm"><span class="variable">Oracle Database Concepts</span></a> for an introduction to optimization</p>
</li>
<li>
<p><a class="olink PFGRF" href="../../server.112/e41573/toc.htm"><span class="variable">Oracle Database Performance Tuning Guide</span></a> for information about using hints in SQL statements</p>
</li>
<li>
<p><a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code>DBMS_STATS</code></p>
</li>
</ul>
</div>
<p>The extensible optimizer feature allows authors of user-defined functions and indexes to create statistics collection, selectivity, and cost functions that are used by the optimizer in choosing a query plan. The optimizer cost model is extended to integrate information supplied by the user to assess CPU and the I/O cost, where CPU cost is the number of machine instructions used, and I/O cost is the number of data blocks fetched.</p>
<p>Specifically, you can:</p>
<ul>
<li>
<p>Associate cost functions and default costs with domain indexes (partitioned or non-partitioned), indextypes, packages, and standalone functions. The optimizer can obtain the cost of scanning a single partition of a domain index, multiple domain index partitions, or an entire index.</p>
</li>
<li>
<p>Associate selectivity functions and default selectivity with methods of object types, package functions, and standalone functions. The optimizer can estimate user-defined selectivity for a single partition, multiple partitions, or the entire table involved in a query.</p>
</li>
<li>
<p>Associate statistics collection functions with domain indexes and columns of tables. The optimizer can collect user-defined statistics at both the partition level and the object level for a domain index or a table.</p>
</li>
<li>
<p>Order predicates with functions based on cost.</p>
</li>
<li>
<p>Select a user-defined access method (domain index) for a table based on access cost.</p>
</li>
<li>
<p>Use the <code>DBMS_STATS</code> package to invoke user-defined statistics collection and deletion functions.</p>
</li>
<li>
<p>Use new data dictionary views to include information about the statistics collection, cost, or selectivity functions associated with columns, domain indexes, indextypes or functions.</p>
</li>
<li>
<p>Add a hint to preserve the order of evaluation for function predicates.</p>
</li>
</ul>
<p>Please note that only the cost-based optimizer has been enhanced; Oracle has not altered the operation of the rule-based optimizer.</p>
<p>The optimizer generates an execution plan for SQL queries and DML statements <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code>. For simplicity, we describe the generation of an execution plan in terms of a <code>SELECT</code> statement, but the process for DML statements is similar.</p>
<p>An execution plan includes an access method for each table in the <code>FROM</code> clause, and an ordering, called the join order, of the tables in the <code>FROM</code> clause. System-defined access methods include indexes, hash clusters, and table scans. The optimizer chooses a plan by generating a set of join orders, or permutations, by computing the cost of each, and then by selecting the process with the lowest cost. For each table in the join order, the optimizer computes the cost of each possible access method and join method and chooses the one with the lowest cost. The cost of the join order is the sum of the access method and join method costs. The costs are calculated using algorithms that comprise the cost model. The cost model includes varying level of detail about the physical environment in which the query is executed.</p>
<p>The optimizer uses statistics about the objects referenced in the query to compute the selectivity and costs. The statistics are gathered using the <code>DBMS_STATS</code> package. The selectivity of a predicate is the fraction of rows in a table that is chosen by the predicate, and it is a number between <code>0</code> and <code>1</code>.</p>
<p>The Extensible Indexing feature allows users to define new operators, indextypes, and domain indexes. For user-defined operators and domain indexes, the Extensible Optimizer feature enables you to control the three main components used by the optimizer to select an execution plan statistics, selectivity, and cost. In the following sections, we describe each of these components in greater detail.</p>
<a id="ADDCI4553"></a>
<div class="sect2"><a id="sthref426"></a>
<h3 class="sect2">Statistics</h3>
<p>Statistics for tables and indexes can be generated by using the <code>DBMS_STATS</code> package. In general, the more accurate the statistics, the better the execution plan generated by the optimizer.</p>
<a id="ADDCI4554"></a>
<div class="sect3"><a id="sthref427"></a>
<h4 class="sect3">User-Defined Statistics</h4>
<p>The Extensible Optimizer feature lets you define <span class="italic">statistics collection</span> functions for domain indexes, indextypes, data types, individual table columns, and partitions. This means that whenever a domain index is analyzed, a call is made to the user-specified statistics collection function. The database does not know the representation and meaning of the user-collected statistics.</p>
<p>In addition to domain indexes, Oracle supports user-defined statistics collection functions for individual columns of a table, and for user-defined data types. In the former case, whenever a column is analyzed, the user-defined statistics collection function is called to collect statistics in addition to any standard statistics that the database collects. If a statistics collection function exists for a data type, it is called for each column of the table being analyzed that has the required type.</p>
<p>The cost of evaluating a user-defined function depends on the algorithm and the statistical properties of its arguments. It is not practical to store statistics for all possible combinations of columns that could be used as arguments for all functions. Therefore, Oracle maintains only statistics on individual columns. It is also possible that function costs depend on the different statistical properties of each argument. Every column could require statistics for every argument position of every applicable function. Oracle does not support such a proliferation of statistics and cost functions because it would decrease performance.</p>
<p>A user-defined function to drop statistics is required whenever there is a user-defined statistics collection function.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4555"></a>
<div class="sect3"><a id="sthref428"></a>
<h4 class="sect3">User-Defined Statistics for Partitioned Objects</h4>
<p>When using system-managed local domain indexes, you must implement two methods of the ODCIStats interface: <a href="ext_opt_ref.htm#CHEDHDAJ">ODCIStatsExchangePartition()</a>, and <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="ADDCI4556"></a>
<div class="sect2"><a id="sthref429"></a>
<h3 class="sect2">Selectivity</h3>
<p>The optimizer uses statistics to calculate the selectivity of predicates. The selectivity is the fraction of rows in a table or partition that is chosen by the predicate. It is a number between <code>0</code> and <code>1</code>. The selectivity of a predicate is used to estimate the cost of a particular access method; it is also used to determine the optimal join order. A poor choice of join order by the optimizer could result in a very expensive execution plan.</p>
<p>Currently, the optimizer uses a standard algorithm to estimate the selectivity of selection and join predicates. However, the algorithm does not always work well in cases in which predicates contain functions or type methods. In addition, predicates can contain user-defined operators about which the optimizer does not have any information. In that case the optimizer cannot compute an accurate selectivity.</p>
<a id="ADDCI4557"></a>
<div class="sect3"><a id="sthref430"></a>
<h4 class="sect3">User-Defined Selectivity</h4>
<p>For greater control over the optimizer's selectivity estimation, this feature lets you specify user-defined selectivity functions for predicates containing user-defined operators, standalone functions, package functions, or type methods. The user-defined selectivity function is called by the optimizer whenever it encounters a predicate with one of the forms shown in <a href="#CHDFFJIB">Example 10-1</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CHDFFJIB"></a><a id="ADDCI4558"></a>Example 10-1 Three Predicate Forms that Trigger a Call to the Optimizer</p>
<pre>
operator(...) relational_operator <span class="italic">constant</span>
<span class="italic">constant</span> relational_operator operator(...)
operator(...) LIKE <span class="italic">constant</span>
</pre>
<p>where</p>
<ul>
<li>
<p><code>operator(...)</code> is a user-defined operator, standalone function, package function, or type method,</p>
</li>
<li>
<p><code>relational_operator</code> is one of <code>{&lt;, &lt;=, =, &gt;=, &gt;}</code>, and</p>
</li>
<li>
<p><code><span class="codeinlineitalic">constant</span></code> is a constant value expression or bind variable.</p>
</li>
</ul>
</div>
<!-- class="example" -->
<p>For such cases, users can define selectivity functions associated with <code>operator(...)</code>. The arguments to <code>operator</code> can be columns, constants, bind variables, or attribute references. When optimizer encounters such a predicate, it calls the user-defined selectivity function and passes the entire predicate as an argument (including the operator, function, or type method and its arguments, the relational operator <code>relational_operator</code>, and the constant expression or bind variable). The return value of the user-defined selectivity function must be expressed as a percent, and be between 0 and 100 inclusive; the optimizer ignores values outside this range.</p>
<p>Wherever possible, the optimizer uses user-defined selectivity values. However, this is not possible in the following cases:</p>
<ul>
<li>
<p>The user-defined selectivity function returns an invalid value (less than <code>0</code> or greater than <code>100</code>).</p>
</li>
<li>
<p>There is no user-defined selectivity function defined for the operator, function, or method in the predicate.</p>
</li>
<li>
<p>The predicate does not have one of the forms listed in <a href="#CHDFFJIB">Example 10-1</a>; it may also be of the form <code>operator(...) + 3 relational_operator</code> <code><span class="codeinlineitalic">constant</span></code>.</p>
</li>
</ul>
<p>In each of these cases, the optimizer uses heuristics to estimate the selectivity.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="ADDCI4559"></a>
<div class="sect2"><a id="sthref431"></a>
<h3 class="sect2">Cost</h3>
<p>The optimizer estimates the cost of various access paths to choose an optimal plan. For example, it computes the CPU and I/O cost of using an index and a full table scan to choose between the two. However the optimizer does not know the internal storage structure of domain indexes, and so it cannot compute a good estimate of the cost of a domain index.</p>
<a id="ADDCI4560"></a>
<div class="sect3"><a id="sthref432"></a>
<h4 class="sect3">User-Defined Cost</h4>
<p>For greater flexibility, the cost model has been extended to let you define costs for domain indexes, index partitions, and user-defined standalone functions, package functions, and type methods. The user-defined costs can be in the form of default costs that the optimizer looks up, or they can be full-fledged cost functions which the optimizer calls to compute the cost.</p>
<p>Like user-defined selectivity statistics, user-defined cost statistics are optional. If no user-defined cost is available, the optimizer uses heuristics to compute an estimate. However, in the absence of sufficient useful information about the storage structures in user-defined domain indexes and functions, such estimates can be very inaccurate and result in the choice of a sub-optimal execution plan.</p>
<p>User-defined cost functions for domain indexes are called by the optimizer only if a domain index is a valid access path for a user-defined operator (for details regarding when this is true, see the discussion of user-defined indexing in the previous chapter). User-defined cost functions for functions, methods and domain indexes are only called when a predicate has one of the forms outlined in <a href="#CHDFFJIB">Example 10-1</a>, which is identical to the conditions for user-defined selectivity functions.</p>
<p>User-defined cost functions can return three cost values, each value representing the cost of a <span class="italic">single</span> execution of a function or domain index implementation:</p>
<ul>
<li>
<p><code>CPU</code> &mdash; the number of machine cycles executed by the function or domain index implementation. This does not include the overhead of invoking the function.</p>
</li>
<li>
<p><code>I/O</code> &mdash; the number of data blocks read by the function or domain index implementation. For a domain index, this does not include accesses to the Oracle table. The multiblock I/O factor is not passed to the user-defined cost functions.</p>
</li>
<li>
<p><code>NETWORK</code> &mdash; the number of data blocks transmitted. This is valid for distributed queries, functions, andand domain index implementations. For Oracle this cost component is not used and is ignored; however, as described in the following sections, the user is required to stipulate a value so that backward compatibility is facilitated when this feature is introduced.</p>
</li>
</ul>
<p>The optimizer computes a composite cost from these cost values.</p>
<p>The package <code>DBMS_ODCI</code> contains a function <code>estimate_cpu_units</code> to help get the CPU and I/O cost from input consisting of the elapsed time of a user function. <code>estimate_cpu_units</code> measures CPU units by multiplying the elapsed time by the processor speed of the machine and returns the approximate number of CPU instructions associated with the user function. For a multiprocessor machine, <code>estimate_cpu_units</code> considers the speed of a single processor.</p>
<p>The cost of a query is a function of the cost values. The settings of optimizer initialization parameters determine which cost to minimize. If <code>optimizer_mode</code> is <code>first_rows</code>, the resource cost of returning a single row is minimized, and the optimizer mode is passed to user-defined cost functions. Otherwise, the resource cost of returning all rows is minimized.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004687"></a><a id="ADDCI4561"></a>
<div class="sect1">
<h2 class="sect1">Defining Statistics, Selectivity, and Cost Functions</h2>
<p>You can compute and store user-defined statistics for domain indexes and columns. User-defined selectivity and cost functions for functions and domain indexes can use both standard and user-defined statistics in their computation. The internal representation of these statistics need not be known to Oracle, but you must provide methods for their collection. You are solely responsible for defining the representation of such statistics and for maintaining them. Note that user-collected statistics are used only by user-defined selectivity and cost functions; the optimizer uses only its standard statistics.</p>
<p>User-defined statistics collection, selectivity, and cost functions must be defined in a user-defined type. Depending on the functionality you want it to support, this type must implement as methods some or all of the functions defined in the system interface <code>ODCIStats</code>, Oracle Data Cartridge Interface Statistics, in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
<p><a href="#CHDCFDCF">Example 10-2</a> shows a type definition (or the outline of one) that implements all the functions in the <code>ODCIStats</code> interface.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCFDCF"></a><a id="ADDCI4562"></a>Example 10-2 Defining a Statistics Type</p>
<pre>
CREATE TYPE my_statistics AS OBJECT (

  -- Function to get current interface
  FUNCTION ODCIGetInterfaces(ifclist OUT ODCIObjectList) RETURN NUMBER,

   -- User-defined statistics functions
  FUNCTION ODCIStatsCollect(col ODCIColInfo, options ODCIStatsOptions,
    statistics OUT RAW, env ODCIEnv) RETURN NUMBER,
  FUNCTION ODCIStatsCollect(ia ODCIIndexInfo, options ODCIStatsOptions,
    statistics OUT RAW, env ODCIEnv) RETURN NUMBER,
  FUNCTION ODCIStatsDelete(col ODCIColInfo, statistics OUT RAW, env ODCIEnv) 
    RETURN NUMBER,
  FUNCTION ODCIStatsDelete(ia ODCIIndexInfo, statistics OUT RAW, env ODCIEnv) 
    RETURN NUMBER,
   
  -- User-defined statistics functions for local domain index
  FUNCTION ODCIStatsUpdPartStatistics(ia ODCIIndexInfo, palistODCIPartInfoList,
    env ODCIEnv) RETURN NUMBER;
  FUNCTION ODCIStatsExchangePartition(ia ODCIIndexInfo, ia1 ODCIIndexInfo, 
    env ODCIEnv) RETURN NUMBER;

  -- User-defined selectivity function
  FUNCTION ODCIStatsSelectivity(pred ODCIPredInfo, sel OUT NUMBER, args
    ODCIArgDescList, start &lt;function_return_type&gt;,
    stop &lt;function_return_type&gt;, &lt;list of function arguments&gt;, 
    env ODCIEnv) RETURN NUMBER,

  -- User-defined cost function for functions and type methods
  FUNCTION ODCIStatsFunctionCost(func ODCIFuncInfo, cost OUT ODCICost,
    args ODCIArgDescList, &lt;list of function arguments&gt;) RETURN NUMBER,

  -- User-defined cost function for domain indexes
  FUNCTION ODCIStatsIndexCost(ia ODCIIndexInfo, sel NUMBER,
    cost OUT ODCICost, qi ODCIQueryInfo, pred ODCIPredInfo,         
    args ODCIArgDescList, start &lt;operator_return_type&gt;,
    stop &lt;operator_return_type&gt;, &lt;list of operator value arguments&gt;, 
    env ODCIEnv) RETURN NUMBER
)
</pre></div>
<!-- class="example" -->
<p>The object type that you define, referred to as a <span class="bold">statistics type,</span> need not implement all the functions from <code>ODCIStats</code>. User-defined statistics collection, selectivity, and cost functions are optional, so a statistics type may contain only a subset of the functions in <code>ODCIStats</code>. <a href="#g1006880">Table 10-1</a> lists the type methods and default statistics associated with different kinds of schema objects.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4563"></a><a id="sthref433"></a><a id="g1006880"></a>Table 10-1 Statistics Methods and Default Statistics for Various Schema Objects</p>
<table class="cellalignment1246" title="Statistics Methods and Default Statistics for Various Schema Objects" summary="Lists the type methods and default statistics associated with different kinds of schema objects" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t3">ASSOCIATE STATISTICS</th>
<th class="cellalignment1247" id="r1c2-t3">Statistics Type Methods Used</th>
<th class="cellalignment1247" id="r1c3-t3">Default Statistics</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t3" headers="r1c1-t3">
<p>column</p>
</td>
<td class="cellalignment1243" headers="r2c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>, <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a></p>
</td>
<td class="cellalignment1243" headers="r2c1-t3 r1c3-t3">&nbsp;</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t3" headers="r1c1-t3">
<p>object type</p>
</td>
<td class="cellalignment1243" headers="r3c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>, <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a>, <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a>, <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a></p>
</td>
<td class="cellalignment1243" headers="r3c1-t3 r1c3-t3">
<p>cost, selectivity</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t3" headers="r1c1-t3">
<p>function</p>
</td>
<td class="cellalignment1243" headers="r4c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a>, <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a></p>
</td>
<td class="cellalignment1243" headers="r4c1-t3 r1c3-t3">
<p>cost, selectivity</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t3" headers="r1c1-t3">
<p>package</p>
</td>
<td class="cellalignment1243" headers="r5c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a>, <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a></p>
</td>
<td class="cellalignment1243" headers="r5c1-t3 r1c3-t3">
<p>cost, selectivity</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r6c1-t3" headers="r1c1-t3">
<p>index</p>
</td>
<td class="cellalignment1243" headers="r6c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>, <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a>, <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a></p>
</td>
<td class="cellalignment1243" headers="r6c1-t3 r1c3-t3">
<p>cost</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r7c1-t3" headers="r1c1-t3">
<p>indextype</p>
</td>
<td class="cellalignment1243" headers="r7c1-t3 r1c2-t3">
<p><a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>, <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a>, <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a>, <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a>, <a href="ext_opt_ref.htm#CHEDHDAJ">ODCIStatsExchangePartition()</a></p>
</td>
<td class="cellalignment1243" headers="r7c1-t3 r1c3-t3">
<p>cost</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The types of the parameters of statistics type methods are system-defined ODCI data types. These are described in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
<p>The selectivity and cost functions must not change any database or package state. Consequently, no SQL DDL or DML operations are permitted in the selectivity and cost functions. If such operations are present, the functions are not called by the optimizer.</p>
<a id="ADDCI4564"></a>
<div class="sect2"><a id="sthref434"></a>
<h3 class="sect2">User-Defined Statistics Functions</h3>
<p>There are two user-defined statistics collection functions, one for collecting statistics and the other for deleting them.</p>
<p>The first, <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>, is used to collect user-defined statistics; its interface depends on whether a column or domain index is being analyzed. It is called when analyzing a column of a table or a domain index and takes two parameters:</p>
<ul>
<li>
<p><code>col</code> for the column being analyzed, or <code>ia</code> for the domain index being analyzed;</p>
</li>
<li>
<p><code>options</code> for options specified in the <code>DBMS_STATS</code> package.</p>
</li>
</ul>
<p>As mentioned, the database does not interpret statistics collected by <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>. For system-managed domain index statistics, you don't return the statistics collected by <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a>. You should store these statistics in a user-managed format, as described in section <a href="#BHAJFEEJ">"Generating Statistics for System-Managed Domain Indexes"</a>, and illustrated in <a href="#CHDHAHFD">Figure 10-1</a>, <a href="#CHDEHGJA">Figure 10-2</a>, and <a href="#CHDICHBJ">Figure 10-3</a>.</p>
<p>User-collected statistics are deleted by calling the <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> function whose interface depends on whether the statistics for a column or domain index are being dropped. It takes a single parameter: <code>col</code>, for the column whose user-defined statistics must be deleted, or <code>ia</code>, for the domain index whose statistics are to be deleted.</p>
<p>If a user-defined <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> function is present in a statistics type, the corresponding <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> function must also be present.</p>
<p>The return values of the <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> and <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> functions must be <code>Success</code>, <code>Error</code>, or <code>Warning</code>; these return values are defined in a system package <code>ODCIConst</code>.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4565"></a>
<div class="sect2"><a id="sthref435"></a>
<h3 class="sect2">User-Defined Selectivity Functions</h3>
<p>User-defined selectivity functions are used only for predicate forms listed in <a href="#CHDFFJIB">Example 10-1</a>.</p>
<p>A user-defined selectivity function <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> takes five sets of input parameters that describe the predicate:</p>
<ul>
<li>
<p>The <code>pred</code> parameter describes the function <code>operator</code> and the relational operator <code>relational_operator</code>.</p>
</li>
<li>
<p>The <code>args</code> parameter describes the start and stop values (that is, &lt;<code>constant</code>&gt;) of the function and the actual arguments to the function (<code>operator()</code>).</p>
</li>
<li>
<p>The <code>start</code> parameter, whose data type is identical to that of the function's return value, describes the start value of the function.</p>
</li>
<li>
<p>The <code>stop</code> parameter, whose data type is identical to that of the function's return value, describes the stop value of the function.</p>
</li>
<li>
<p>A list of function arguments whose number, position, and type must match the arguments of the function <code>operator</code>.</p>
</li>
</ul>
<p>The computed selectivity is returned in the output parameter <code>sel</code> as a number between <code>0</code> and <code>100</code> (inclusive) that represents a percentage. The optimizer ignores numbers less than <code>0</code> or greater than <code>100</code> as invalid values.</p>
<p>The return value of the <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> function must be one of <code>Success</code>, <code>Error</code>, or <code>Warning</code>.</p>
<p>As an example, consider a function <code>myFunction</code>, as defined in <a href="#CHDIGBIH">Example 10-3</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIGBIH"></a><a id="ADDCI4566"></a>Example 10-3 Defining a User-Defined Function</p>
<pre>
myFunction (a NUMBER, b VARCHAR2(10)) return NUMBER
</pre></div>
<!-- class="example" -->
<p>A user-defined selectivity function <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> is detailed in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
<p>If <code>myFunction()</code> is called using literal arguments, such as <code>myFunction(2, 'TEST') &gt; 5</code>, then the selectivity function is called as out lined in <a href="#CHDEIGDJ">Example 10-4</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDEIGDJ"></a><a id="ADDCI4567"></a>Example 10-4 Calling a Selectivity Function Using Literal Arguments</p>
<pre>
ODCIStatsSelectivity(<span class="italic">ODCIPredInfo_constructor</span>, sel,
   O<span class="italic">DCIArgDescList_constructor</span>, 5, NULL, 2, 'TEST', <span class="italic">ODCIEnv_flag</span>)
</pre></div>
<!-- class="example" -->
<p>If, on the other hand, <code>myFunction()</code> is called with some non-literals arguments, such as <code>myFunction(Test_tab.col_a, 'TEST')&gt; 5</code>, where <code>col_a</code> is a column in table <code>Test_tab</code>, then the selectivity function is called as outlined in <a href="#CHDFHEJH">Example 10-5</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFHEJH"></a><a id="ADDCI4568"></a>Example 10-5 Calling a Selectivity Function Using Non-Literal Arguments</p>
<pre>
ODCIStatsSelectivity(<span class="italic">ODCIPredInfo_constructor</span>, sel,
   <span class="italic">ODCIArgDescList_constructor</span>, 5, NULL, NULL, 'TEST', <span class="italic">ODCIEnv_flag</span>)
</pre></div>
<!-- class="example" -->
<p>In summary, the start, stop, and function argument values are passed to the selectivity function only if they are literals; otherwise they are <code>NULL</code>. <a href="ext_types_ref.htm#CHDEFHIE">ODCIArgDescList</a> describes all the arguments that follow it.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4569"></a>
<div class="sect2"><a id="sthref436"></a>
<h3 class="sect2">User-Defined Cost Functions for Functions</h3>
<p>User-defined cost functions are only used for predicate forms listed in <a href="#CHDFFJIB">Example 10-1</a>.</p>
<p>You can define a function, <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a>, for computing the cost of standalone functions, package functions, or type methods. This function takes three sets of input parameters describing the predicate:</p>
<ul>
<li>
<p>The <code>func</code> parameter describes the function <code>operator</code>.</p>
</li>
<li>
<p>The <code>args</code> parameter describes the actual arguments to the function <code>operator</code>.</p>
</li>
<li>
<p>A list of function arguments whose number, position, and type must match the arguments of the function <code>operator</code>.</p>
</li>
</ul>
<p>The <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> function returns its computed cost in the <code>cost</code> parameter. The returned cost can have two components, a CPU cost and an I/O cost, which are combined by the optimizer to compute a composite cost. The costs returned by user-defined cost functions must be positive whole numbers. Invalid values are ignored by the optimizer.</p>
<p>The return value of the <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> function must be one of <code>Success</code>, <code>Error</code>, or <code>Warning</code>.</p>
<p>Consider a <code>myFunction()</code>, defined in <a href="#CHDIGBIH">Example 10-3</a>.</p>
<p>A user-defined cost function <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> is detailed in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
<p>If <code>myFunction()</code> is called using literal arguments, such as <code>myFunction(2, 'TEST') &gt; 5</code>, where <code>col_a</code> is a column in table <code>Test_tab</code>, then the cost function is called as out lined in <a href="#CHDGBEEI">Example 10-6</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGBEEI"></a><a id="ADDCI4570"></a>Example 10-6 Calling a Cost Function Using Literal Arguments</p>
<pre>
ODCIStatsFunctionCost(<span class="italic">ODCIFuncInfo_constructor</span>, cost,
   <span class="italic">ODCIArgDescList_constructor</span>, 2, 'TEST', <span class="italic">ODCIEnv_flag</span>)
</pre></div>
<!-- class="example" -->
<p>If, on the other hand, <code>myFunction()</code> is called with non-literal arguments, such as <code>myFunction(Test_tab.col_a, 'TEST') &gt; 5</code>, where <code>col_a</code> is a column in table <code>Test_tab</code>, then the cost function is called as out lined in <a href="#CHDFBFEI">Example 10-7</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFBFEI"></a><a id="ADDCI4571"></a>Example 10-7 Calling a Cost Function Using Non-Literal Arguments</p>
<pre>
ODCIStatsFunctionCost(<span class="italic">ODCIFuncInfo_constructor</span>, cost,
   <span class="italic">ODCIArgDescList_constructor</span>, NULL, 'TEST', <span class="italic">ODCIEnv_flag</span>)
</pre></div>
<!-- class="example" -->
<p>In summary, function argument values are passed to the cost function only if they are literals; otherwise, they are <code>NULL</code>. <a href="ext_types_ref.htm#CHDEFHIE">ODCIArgDescList</a> describes all the arguments that follow it.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4572"></a>
<div class="sect2"><a id="sthref437"></a>
<h3 class="sect2">User-Defined Cost Functions for Domain Indexes</h3>
<p>User-defined cost functions for domain indexes are used for the same type of predicates mentioned previously, except that <code>operator</code> must be a user-defined operator for which a valid domain index access path exists.</p>
<p>The <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> function takes these sets of parameters:</p>
<ul>
<li>
<p><code>ia</code> describing the domain index</p>
</li>
<li>
<p><code>sel</code> representing the user-computed selectivity of the predicate</p>
</li>
<li>
<p><code>cost</code> giving the computed cost</p>
</li>
<li>
<p><code>qi</code> containing additional information about the query</p>
</li>
<li>
<p><code>pred</code> describing the predicate</p>
</li>
<li>
<p><code>args</code> describing the start and stop values (that is, &lt;<code>constant</code>&gt;) of the operator and the actual arguments to the operator <code>operator</code></p>
</li>
<li>
<p><code>start</code>, whose data type is identical to that of the operator's return value, describing the start value of the operator</p>
</li>
<li>
<p><code>stop</code> whose data type is identical to that of the operator's return value, describing the stop value of the operator</p>
</li>
<li>
<p>a list of operator value arguments whose number, position, and type must match the arguments of the operator <code>operator</code>. The value arguments of an operator are the arguments excluding the first argument.</p>
</li>
<li>
<p><code>env</code>, an environment flag set by the server to indicate which call is being made in cases where multiple calls are made to the same routine. The flag is reserved for future use; currently it is always set to <code>0</code>.</p>
</li>
</ul>
<p>The computed cost of the domain index is returned in the output parameter, <code>cost</code>.</p>
<p><a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> returns <code>Success</code>, <code>Error</code> or <code>Warning</code>.</p>
<p>Consider an operator defined in <a href="#CHDIGECH">Example 10-8</a>, which returns <code>1</code> or <code>0</code> depending on whether or not the string <code>b_string</code> is contained in the string <code>a_string</code>. Further, assume that the operator is implemented by a domain index.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIGECH"></a><a id="ADDCI4573"></a>Example 10-8 Defining an Operator</p>
<pre>
Contains(a_string VARCHAR2(2000), b_string VARCHAR2(10))
</pre></div>
<!-- class="example" -->
<p>A user-defined index cost function <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> is detailed in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
<p>If <code>contains()</code> is called using non-literal arguments, such as <code>Contains(Test_tab.col_c,'TEST') &lt;= 1</code>, then the index cost function is called as out lined in <a href="#CHDIDIDE">Example 10-9</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDIDIDE"></a><a id="ADDCI4574"></a>Example 10-9 Calling an Index Cost Function Using Non-Literal Arguments</p>
<pre>
ODCIStatsIndexCost(<span class="italic">ODCIIndexInfo_constructor</span>, sel, cost,
   <span class="italic">ODCIQueryInfo_constructor</span>, <span class="italic">ODCIPredInfo_constructor</span>, 
<span class="italic">   ODCIArgDescList_constructor</span>, NULL, 1, 'TEST', <span class="italic">ODCIEnv_flag</span>)
</pre></div>
<!-- class="example" -->
<p>Note that the first argument, <code>a_string</code>, of <code>Contains</code> does not appear as a parameter of <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a>. This is because the first argument to an operator must be a column for the domain index to be used, and this column information is passed in through the <code>ODCIIndexInfo</code> parameter. Only the operator arguments after the first (the value arguments) must appear as parameters to the <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> function.</p>
<p>In summary, the start, stop, and operator argument values are passed to the index cost function only if they are literals; otherwise they are <code>NULL</code>. <a href="ext_types_ref.htm#CHDEFHIE">ODCIArgDescList</a> describes all the arguments that follow it.</p>
</div>
<!-- class="sect2" -->
<a id="BHAJFEEJ"></a><a id="ADDCI4575"></a>
<div class="sect2">
<h3 class="sect2">Generating Statistics for System-Managed Domain Indexes</h3>
<p>If you choose the system-managed approach to maintain domain indexes and must associate a statistics type with the domain index or the indextype, then the statistics type must also be managed by the system.</p>
<p>Statistics may be collected when issuing an <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> call for a system-managed domain index. For a non-partitioned index, the statistics may be stored with the index storage table, as a separate table, or in a data cartridge metadata table with index name qualified rows.</p>
<p>For local partitioned domain indexes, there are three options for storing statistics. All use the <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a> method during a partition maintenance operation in the following ways. Please note that in all the following examples, no DDLs are executed inside the <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a> call, and only DML and query instructions are allowed in the implementation of <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a>.</p>
<ol>
<li>
<p>The system calls the <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a> method If the statistics are stored with the indexed data in the index storage (system-partitioned) tables, as illustrated in <a href="#CHDHAHFD">Figure 10-1</a> . The method can optionally maintain any statistics-related partition metadata, or be a null operation. The server deletes or drops the statistics for the affected partitions along with the index data specific to these partitions.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDHAHFD"></a><a id="ADDCI4576"></a>Figure 10-1 Storing Index-Specific Statistics with Index Tables</p>
<img width="224" height="195" src="img/addci049.gif" alt="Description of Figure 10-1 follows" title="Description of Figure 10-1 follows" /><br />
<a id="sthref438" href="img_text/addci049.htm">Description of "Figure 10-1 Storing Index-Specific Statistics with Index Tables"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>If the statistics are stored in separate system-partitioned tables, as illustrated in <a href="#CHDEHGJA">Figure 10-2</a>, the server tracks the creation of these system partitioned tables of store statistics during an <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> call. These tables are maintained by the server in the same manner as for index storage tables.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDEHGJA"></a><a id="ADDCI4577"></a>Figure 10-2 Storing Index-Specific Statistics in a Separate Table</p>
<img width="144" height="195" src="img/addci050.gif" alt="Description of Figure 10-2 follows" title="Description of Figure 10-2 follows" /><br />
<a id="sthref439" href="img_text/addci050.htm">Description of "Figure 10-2 Storing Index-Specific Statistics in a Separate Table"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>If the statistics are stored in a non-partitioned table as either schema-name, index-name, or partition-name qualified rows, as illustrated in <a href="#CHDICHBJ">Figure 10-3</a>, then you have to maintain the partition-level statistics with a call to <a href="ext_opt_ref.htm#CHEGAICB">ODCIStatsUpdPartStatistics()</a>. The server does not perform any operation on these tables.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDICHBJ"></a><a id="ADDCI4578"></a>Figure 10-3 Storing Index-Partition Statistics in a Common Table</p>
<img width="377" height="168" src="img/addci051.gif" alt="Description of Figure 10-3 follows" title="Description of Figure 10-3 follows" /><br />
<a id="sthref440" href="img_text/addci051.htm">Description of "Figure 10-3 Storing Index-Partition Statistics in a Common Table"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004900"></a><a id="ADDCI4579"></a>
<div class="sect1">
<h2 class="sect1">Using User-Defined Statistics, Selectivity, and Cost</h2>
<p>Statistics types act as interfaces for user-defined functions that influence the choice of an execution plan by the optimizer. However, for the optimizer to be able to use a statistics type, it requires a mechanism to bind the statistics type to a database object such as a column, a standalone function, an object type, an index, an indextype or a package. You cannot associate a statistics type with a partition of a table or a partition of a domain index. The <code>ASSOCIATE</code> <code>STATISTICS</code> command creates this association. The following sections describe this command in more detail.</p>
<a id="ADDCI4580"></a>
<div class="sect2"><a id="sthref441"></a>
<h3 class="sect2">User-Defined Statistics</h3>
<p>User-defined statistics functions are relevant for columns that use both standard SQL data types and object types, and for domain indexes. The functions <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a>, <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a>, and <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> are not used for user-defined statistics, so statistics types used only to collect user-defined statistics need not implement these functions. The following sections describe how to collect column and index user-defined statistics.</p>
<p>Users could create their own tables. This approach requires that privileges on these tables be administered properly, backup and restoration of these tables be done along with other dictionary tables, and point-in-time recovery considerations be resolved.</p>
<a id="ADDCI4581"></a>
<div class="sect3"><a id="sthref442"></a>
<h4 class="sect3">Column Statistics</h4>
<p>Consider a table <code>Test_tab</code>, defined as in <a href="#CHDCDBAB">Example 10-10</a>, where <code>typ1</code> is an object type.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCDBAB"></a><a id="ADDCI4582"></a>Example 10-10 Creating a Table with an Object Type Column</p>
<pre>
CREATE TABLE Test_tab (
   col_a    NUMBER,
   col_b    typ1,
   col_c    VARCHAR2(2000)
)
</pre></div>
<!-- class="example" -->
<p>Suppose that <code>stat</code> is a statistics type that implements <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> and <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> functions.User-defined statistics are collected by the <code>DBMS_STATS</code> package for the column <code>col_b</code> if we bind a statistics type with the column, as demonstrated in <a href="#CHDEICEA">Example 10-11</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CHDEICEA"></a><a id="ADDCI4583"></a>Example 10-11 Associating Statistics with Columns for User-Defined Statistics</p>
<pre>
ASSOCIATE STATISTICS WITH COLUMNS Test_tab.col_b USING stat
</pre></div>
<!-- class="example" -->
<p>A list of columns can be associated with the statistics type <code>stat</code>. Note that Oracle supports only associations with top-level columns, not attributes of object types; if you wish, the <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> function can collect individual attribute statistics by traversing the column.</p>
<p>Another way to collect user-defined statistics is to declare an association with a data type, as in <a href="#CHDBFCFG">Example 10-12</a>, which declares <code>stat_typ1</code> as the statistics type for the type <code>typ1</code>. When the table <code>Test_tab</code> is analyzed with this association, user-defined statistics are collected for the column <code>col_b</code> using the <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> function of statistics type <code>stat_typ1</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBFCFG"></a><a id="ADDCI4584"></a>Example 10-12 Associating Statistics with Data Types for User-Defined Statistics</p>
<pre>
ASSOCIATE STATISTICS WITH TYPES typ1 USING stat_typ1
</pre></div>
<!-- class="example" -->
<p>Individual column associations always have precedence over associations with types. Thus, in the preceding example, if both <code>ASSOCIATE</code> <code>STATISTICS</code> commands are issued, <code>DBMS_STATS</code> would use the statistics type <code>stat</code> (and <span class="italic">not</span> <code>stat_typ1</code>) to collect user-defined statistics for column <code>col_b</code>. It is also important to note that standard statistics, if possible, are collected along with user-defined statistics.</p>
<p>User-defined statistics are deleted using the <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> function from the same statistics type that was used to collect the statistics.</p>
<p>Associations defined by the <code>ASSOCIATE</code> <code>STATISTICS</code> command are stored in a dictionary table called <code>ASSOCIATION$</code>.</p>
<p>Only user-defined data types can have statistics types associated with them; you cannot declare associations for standard SQL data types.</p>
</div>
<!-- class="sect3" -->
<a id="CHDCDAHE"></a><a id="ADDCI4585"></a>
<div class="sect3">
<h4 class="sect3">Domain Index Statistics</h4>
<p>A domain index has an indextype. A statistics type for a system-managed domain index is defined by associating it only with its indextype. <a href="#CHDGGHIB">Example 10-13</a> demonstrates how to create an indextype, an index, and an operator on the table <code>Test_tab</code> from <a href="#CHDCDBAB">Example 10-10</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CHDGGHIB"></a><a id="ADDCI4586"></a>Example 10-13 Creating an Indextype, an Index and an Operator for User-Defined Statistics</p>
<pre>
CREATE INDEXTYPE indtype
FOR userOp(NUMBER)
USING imptype WITH SYSTEM MANAGED STORAGE TABLES;

CREATE INDEX Test_indx ON Test_tab(col_a)
INDEXTYPE IS indtype PARAMETERS('example');

CREATE OPERATOR userOp BINDING (NUMBER) RETURN NUMBER
USING userOp_func;
</pre></div>
<!-- class="example" -->
<p>Here, <code>indtype</code> is the indextype, <code>userOp</code> is a user-defined operator supported by <code>indtype</code>, <code>userOp_func</code> is the functional implementation of <code>userOp</code>, and <code>imptype</code> is the implementation type of the indextype <code>indtype</code>.</p>
<p>A statistics type <code>stat_indtype</code> can be associated with the system-managed indextype, as demonstrated in <a href="#CHDDHFGE">Example 10-14</a>. When the domain index <code>Test_indx</code> that has an indextype <code>indtype</code> is analyzed, user-defined statistics for the index are collected by calling the <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> function of <code>stat_indtype</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDHFGE"></a><a id="ADDCI4587"></a>Example 10-14 Associating Statistics with System-Managed Indextypes</p>
<pre>
ASSOCIATE STATISTICS WITH INDEXTYPES indtype USING stat_indtype
WITH SYSTEM MANAGED STORAGE TABLES
</pre></div>
<!-- class="example" -->
<p>To drop index statistics, use the <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> method which is defined for the same statistics type that defined the earlier <a href="ext_opt_ref.htm#i77265">ODCIStatsCollect()</a> method.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="ADDCI4588"></a>
<div class="sect2"><a id="sthref443"></a>
<h3 class="sect2">User-Defined Selectivity</h3>
<p>The optimizer uses selectivity functions to compute the selectivity of predicates in a query. The predicates must have one of the appropriate forms and can contain user-defined operators, standalone functions, package functions, or type methods. The following sections describe selectivity computation for each.</p>
<a id="ADDCI4589"></a>
<div class="sect3"><a id="sthref444"></a>
<h4 class="sect3">User-Defined Operators</h4>
<p>Suppose that the association in <a href="#CHDCFAHB">Example 10-15</a> is declared. If the optimizer encounters the <code>userOp(Test_tab.col_a) = 1</code> predicate, it calls the <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> function (if present) in the statistics type <code>stat_userOp_func</code> that is associated with the functional implementation of the <code>userOp_func</code> of the <code>userOp</code> operator.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCFAHB"></a><a id="ADDCI4590"></a>Example 10-15 Associating Statistics with User-Defined Operators</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS userOp_func USING stat_userOp_func
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4591"></a>
<div class="sect3"><a id="sthref445"></a>
<h4 class="sect3">Standalone Functions</h4>
<p>If the association in <a href="#CHDBFGDA">Example 10-16</a> is declared for a standalone function <code>myFunction</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> function (if present) in the statistics type <code>stat_myFunction</code> for the <code>myFunction(Test_tab.col_a, 'TEST') = 1</code> predicate.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBFGDA"></a><a id="ADDCI4592"></a>Example 10-16 Associating Statistics with Standalone Functions</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS myFunction USING stat_MyFunction
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4593"></a>
<div class="sect3"><a id="sthref446"></a>
<h4 class="sect3">Package Functions</h4>
<p>If the association in <a href="#CHDEBDHD">Example 10-17</a> is declared for a package <code>Demo_pack</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> function (if present) in the statistics type <code>stat_Demo_pack</code> for the <code>Demo_pack.myDemoPackFunction(Test_tab.col_a, 'TEST') = 1</code> predicate, where <code>myDemoPackFunction</code> is a function in <code>Demo_pack</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDEBDHD"></a><a id="ADDCI4594"></a>Example 10-17 Associating Statistics with Package Functions</p>
<pre>
ASSOCIATE STATISTICS WITH PACKAGES Demo_pack USING stat_Demo_pack
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4595"></a>
<div class="sect3"><a id="sthref447"></a>
<h4 class="sect3">Type Methods</h4>
<p>If the association in <a href="#CHDBDEHF">Example 10-18</a> is declared for a type <code>Example_typ</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEDEDGJ">ODCIStatsSelectivity()</a> function (if present) in the statistics type <code>stat_Example_typ</code> for the <code>myExampleTypMethod(Test_tab.col_b) = 1</code> predicate, where <code>myExampleTypMethod</code> is a method in <code>Example_typ</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBDEHF"></a><a id="ADDCI4596"></a>Example 10-18 Associating Statistics with Type Methods</p>
<pre>
ASSOCIATE STATISTICS WITH TYPES Example_typ USING stat_Example_typ
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4597"></a>
<div class="sect3"><a id="sthref448"></a>
<h4 class="sect3">Default Selectivity</h4>
<p>An alternative to selectivity functions is user-defined <span class="italic">default selectivity.</span> The default selectivity is a value between <code>0</code> and <code>100%</code>; the optimizer looks it up instead of calling a selectivity function. Default selectivities can be used for predicates with user-defined operators, standalone functions, package functions, or type methods.</p>
<p>The association in <a href="#CHDECCEG">Example 10-19</a> declares that the <code>myFunction(Test_tab.col_a) = 1</code> predicate always has a selectivity of <code>20%</code> (or <code>0.2</code>), regardless of the parameters of <code>myFunction,</code> the comparison operator <code>=</code>, or the constant <code>1</code>. The optimizer uses this default selectivity instead of calling a selectivity function.</p>
<div class="example">
<p class="titleinexample"><a id="CHDECCEG"></a><a id="ADDCI4598"></a>Example 10-19 Associating Statistics with Default Selectivity</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS myFunction DEFAULT SELECTIVITY 20
</pre></div>
<!-- class="example" -->
<p>An association can be declared using either a statistics type or a default selectivity, but not both. Thus, the following statement is illegal:</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS myFunction USING stat_myFunction
   DEFAULT SELECTIVITY 20
</pre>
<p>Other examples of default selectivity declarations include:</p>
<pre>
ASSOCIATE STATISTICS WITH PACKAGES Demo_pack DEFAULT SELECTIVITY 20
ASSOCIATE STATISTICS WITH TYPES Example_typ DEFAULT SELECTIVITY 20
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="ADDCI4599"></a>
<div class="sect2"><a id="sthref449"></a>
<h3 class="sect2">User-Defined Cost</h3>
<p>The optimizer uses user-defined cost functions to compute the cost of predicates in a query. The predicates must have one of the forms listed earlier and can contain user-defined operators, standalone functions, package functions, or type methods. In addition, user-defined cost functions are also used to compute the cost of domain indexes. The following sections describe cost computation for each.</p>
<a id="ADDCI4600"></a>
<div class="sect3"><a id="sthref450"></a>
<h4 class="sect3">User-Defined Operators</h4>
<p>If the association in <a href="#CHDCFABJ">Example 10-20</a> is declared, consider the <code>userOp(Test_tab.col_a) = 1</code> predicate. If the optimizer evaluates the domain index <code>Test_indx</code> with an <code>indtype</code> indextype that implements <code>userOp</code>, it calls the <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> method (if present) in the statistics type <code>stat_indtype</code>. If the domain index is not used, however, the optimizer calls the <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> (if present) in the statistics type <code>stat_userOp</code> to compute the cost of the functional implementation of the operator <code>userOp</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCFABJ"></a><a id="ADDCI4601"></a>Example 10-20 Associating Statistics with User-Defined Operators</p>
<pre>
ASSOCIATE STATISTICS WITH INDEXTYPES indtype USING stat_indtype
  WITH SYSTEM MANAGED STORAGE TABLES
ASSOCIATE STATISTICS WITH FUNCTIONS userOp USING stat_userOp_func
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4602"></a>
<div class="sect3"><a id="sthref451"></a>
<h4 class="sect3">Standalone Functions</h4>
<p>If the association in <a href="#CHDBCAIG">Example 10-21</a> is declared for a standalone function <code>myFunction</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> function (if present) in the statistics type <code>stat_myFunction</code> for the <code>myFunction(Test_tab.col_a, 'TEST') = 1</code> predicate.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBCAIG"></a><a id="ADDCI4603"></a>Example 10-21 Associating Statistics with Standalone Functions</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS myFunction USING stat_myFunction;
</pre></div>
<!-- class="example" -->
<p>User-defined function costs do not influence the choice of access methods; they are only used for ordering predicates, described in <a href="ext_opt_ref.htm#CHEBFJDA">Chapter 21, "Extensible Optimizer Interface"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4604"></a>
<div class="sect3"><a id="sthref452"></a>
<h4 class="sect3">Package Functions</h4>
<p>If the association in <a href="#CHDFCBAB">Example 10-22</a> is declared for a package <code>Demo_pack</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> function, if present, in the statistics type <code>stat_Demo_pack</code> for the <code>Demo_pack.myDemoPackFunction(Test_tab.col_a) = 1</code> predicate, where <code>myDemoPackFunction</code> is a function in <code>Demo_pack</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFCBAB"></a><a id="ADDCI4605"></a>Example 10-22 Associating Statistics with Package Functions</p>
<pre>
ASSOCIATE STATISTICS WITH PACKAGES Demo_pack USING stat_Demo_pack;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4606"></a>
<div class="sect3"><a id="sthref453"></a>
<h4 class="sect3">Type Methods</h4>
<p>If the association is declared, as in <a href="#CHDJCJJF">Example 10-23</a>, for a type <code>Example_typ</code>, then the optimizer calls the <a href="ext_opt_ref.htm#CHEBBEGF">ODCIStatsFunctionCost()</a> function, if present, in the statistics type <code>stat_Example_typ</code> for the <code>myExampleTypMethod(Test_tab.col_b) = 1</code> predicate, where <code>myExampleTypMethod</code> is a method in <code>Example_typ</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDJCJJF"></a><a id="ADDCI4607"></a>Example 10-23 Associating Statistics with Type Methods</p>
<pre>
ASSOCIATE STATISTICS WITH TYPES Example_typ USING stat_Example_typ;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="ADDCI4608"></a>
<div class="sect3"><a id="sthref454"></a>
<h4 class="sect3">Default Cost</h4>
<p>Like default selectivity, default costs can be used for predicates with user-defined operators, standalone functions, package functions, or type methods. The command in <a href="#CHDCCFJE">Example 10-24</a> declares that using the domain index <code>Test_indx</code> to implement the <code>userOp(Test_tab.col_a) = 1</code> predicate always has a CPU cost of <code>100</code>, an I/O cost of <code>5</code>, and a network cost of <code>0</code> (the network cost is ignored in Oracle), regardless of the parameters of <code>userOp</code>, the comparison operator "<code>=</code>", or the constant "<code>1</code>". The optimizer uses this default cost instead of calling the <a href="ext_opt_ref.htm#CHEHFCIG">ODCIStatsIndexCost()</a> function.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCCFJE"></a><a id="ADDCI4609"></a>Example 10-24 Associating Statistics with Default Cost</p>
<pre>
ASSOCIATE STATISTICS WITH INDEXES Test_indx DEFAULT COST (100, 5, 0);
</pre></div>
<!-- class="example" -->
<p>You can declare an association using either a statistics type or a default cost but not both. Thus, the following statement is illegal:</p>
<pre>
ASSOCIATE STATISTICS WITH INDEXES Test_indx USING stat_Test_indx
   DEFAULT COST (100, 5, 0)
</pre>
<p>The following are some more examples of default cost declarations:</p>
<pre>
ASSOCIATE STATISTICS WITH FUNCTIONS myFunction DEFAULT COST (100, 5, 0)
ASSOCIATE STATISTICS WITH PACKAGES Demo_pack DEFAULT COST (100, 5, 0)
ASSOCIATE STATISTICS WITH TYPES Example_typ DEFAULT COST (100, 5, 0)
ASSOCIATE STATISTICS WITH INDEXTYPES indtype DEFAULT COST (100, 5, 0)
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="ADDCI4610"></a>
<div class="sect2"><a id="sthref455"></a>
<h3 class="sect2">Declaring a NULL Association for an Index or Column</h3>
<p>An association of a statistics type defined for an indextype or object type is inherited by index instances of that indextype and by columns of that object type. An inherited association can be overridden by explicitly defining a different association for an index instance or column, but there may be occasions when you would prefer an index or column not to have any association at all. For example, for a particular query the benefit of a better plan may not outweigh the additional compilation time incurred by invoking the cost or selectivity functions. For cases like this, you can use the <code>ASSOCIATE</code> command to declare a <code>NULL</code> association for a column or index, as in <a href="#CHDFHGJA">Example 10-25</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFHGJA"></a><a id="ADDCI4611"></a>Example 10-25 Declaring NULL Statistics Associations for Columns and Indexes</p>
<pre>
ASSOCIATE STATISTICS WITH COLUMNS <span class="italic">columns</span> NULL;
ASSOCIATE STATISTICS WITH INDEXES <span class="italic">indexes</span> NULL;
</pre></div>
<!-- class="example" -->
<p>If the <code>NULL</code> association is specified, the schema object does not inherit any statistics type from the column type or the indextype. A <code>NULL</code> association also precludes default values.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4612"></a>
<div class="sect2"><a id="sthref456"></a>
<h3 class="sect2">How Statistics Are Affected by DDL Operations</h3>
<p>Partition-level and schema object-level aggregate statistics are affected by DDL operations in the same way as standard statistics. <a href="#g1006951">Table 10-2</a> summarizes the effects.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4613"></a><a id="sthref457"></a><a id="g1006951"></a>Table 10-2 Effects of DDL on Partition and Global Statistics</p>
<table class="cellalignment1246" title="Effects of DDL on Partition and Global Statistics" summary="Lists the effects of DDL operations on partition-level and schema object-level aggregrate statistics" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t4">Operation</th>
<th class="cellalignment1247" id="r1c2-t4">Effect on Partition Statistics</th>
<th class="cellalignment1247" id="r1c3-t4">Effect on Global Statistics</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t4" headers="r1c1-t4">
<pre>
ADD PARTITION
</pre></td>
<td class="cellalignment1243" headers="r2c1-t4 r1c2-t4">
<p>None</p>
</td>
<td class="cellalignment1243" headers="r2c1-t4 r1c3-t4">
<p>No Action</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t4" headers="r1c1-t4">
<pre>
DROP PARTITION
</pre></td>
<td class="cellalignment1243" headers="r3c1-t4 r1c2-t4">
<p>Statistics deleted</p>
</td>
<td class="cellalignment1243" headers="r3c1-t4 r1c3-t4">
<p>Statistics recalculated (if _<code>minimal_stats_aggregation</code> is <code>FALSE</code>, otherwise no effect)</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t4" headers="r1c1-t4">
<pre>
SPLIT PARTITION
</pre></td>
<td class="cellalignment1243" headers="r4c1-t4 r1c2-t4">
<p>Statistics deleted</p>
</td>
<td class="cellalignment1243" headers="r4c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t4" headers="r1c1-t4">
<pre>
MERGE PARTITION
</pre></td>
<td class="cellalignment1243" headers="r5c1-t4 r1c2-t4">
<p>Statistics deleted</p>
</td>
<td class="cellalignment1243" headers="r5c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r6c1-t4" headers="r1c1-t4">
<pre>
TRUNCATE PARTITION
</pre></td>
<td class="cellalignment1243" headers="r6c1-t4 r1c2-t4">
<p>Statistics deleted</p>
</td>
<td class="cellalignment1243" headers="r6c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r7c1-t4" headers="r1c1-t4">
<pre>
EXCHANGE PARTITION
</pre></td>
<td class="cellalignment1243" headers="r7c1-t4 r1c2-t4">
<p>Statistics deleted</p>
</td>
<td class="cellalignment1243" headers="r7c1-t4 r1c3-t4">
<p>Statistics recalculated (if _<code>minimal_stats_aggregation</code> is <code>FALSE</code>, otherwise no effect)</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r8c1-t4" headers="r1c1-t4">
<pre>
REBUILD PARTITION
</pre></td>
<td class="cellalignment1243" headers="r8c1-t4 r1c2-t4">
<p>None</p>
</td>
<td class="cellalignment1243" headers="r8c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r9c1-t4" headers="r1c1-t4">
<pre>
MOVE PARTITION
</pre></td>
<td class="cellalignment1243" headers="r9c1-t4 r1c2-t4">
<p>None</p>
</td>
<td class="cellalignment1243" headers="r9c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r10c1-t4" headers="r1c1-t4">
<pre>
RENAME PARTITION
</pre></td>
<td class="cellalignment1243" headers="r10c1-t4 r1c2-t4">
<p>None</p>
</td>
<td class="cellalignment1243" headers="r10c1-t4 r1c3-t4">
<p>None</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If an existing partition is exchanged, or dropped with an <code>ALTER TABLE DROP PARTITION</code> statement, and the <code>_minimal_stats_aggregation</code> parameter is set to <code>FALSE</code>, the statistics for that partition are deleted, and the aggregate statistics of the table or index are recalculated.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006511"></a><a id="ADDCI4614"></a>
<div class="sect1">
<h2 class="sect1">Predicate Ordering</h2>
<p>In the absence of an <code>ORDERED_PREDICATES</code> hint, predicates (except those used for index keys) are evaluated in the order specified by the following rules:</p>
<ul>
<li>
<p>Predicates without any user-defined functions, type methods, or subqueries are evaluated first, in the order specified in the <code>WHERE</code> clause.</p>
</li>
<li>
<p>Predicates with user-defined functions and type methods which have user-computed costs are evaluated in increasing order of their cost.</p>
</li>
<li>
<p>Predicates with user-defined functions and type methods that have no user-computed cost are evaluated next, in the order specified in the <code>WHERE</code> clause.</p>
</li>
<li>
<p>Predicates not specified in the <code>WHERE</code> clause (for example, predicates transitively generated by the optimizer) are evaluated next.</p>
</li>
<li>
<p>Predicates with subqueries are evaluated last in the order specified in the <code>WHERE</code> clause.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDEEAAC"></a><a id="ADDCI4615"></a>
<div class="sect1">
<h2 class="sect1">Dependency Model</h2>
<p>The dependency model reflects the actions that are taken when you issue any of the SQL commands described in <a href="#g1006912">Table 10-3</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4616"></a><a id="sthref458"></a><a id="g1006912"></a>Table 10-3 Dependency Model for DDLs</p>
<table class="cellalignment1246" title="Dependency Model for DDLs " summary="Lists the actions that are taken when you issue any of a set of DDL commands" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t5">Command</th>
<th class="cellalignment1247" id="r1c2-t5">Action</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t5" headers="r1c1-t5">
<pre>
<span class="italic">DROP statistics_type </span>
</pre></td>
<td class="cellalignment1243" headers="r2c1-t5 r1c2-t5">
<p>If an association is defined with <code>statistics_type</code>, the command fails, otherwise the type is dropped.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t5" headers="r1c1-t5">
<pre>
DROP <span class="italic">statistics_type</span> FORCE
</pre></td>
<td class="cellalignment1243" headers="r3c1-t5 r1c2-t5">
<p>Calls <code>DISASSOCIATE</code> <code>FORCE</code> for all objects associated with the <code>statistics_type</code>; drops <code>statistics_type</code>.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t5" headers="r1c1-t5">
<pre>
DROP <span class="italic">object</span>
</pre></td>
<td class="cellalignment1243" headers="r4c1-t5 r1c2-t5">
<p>Calls <code>DISASSOCIATE</code>, drops <code>object_type</code> if <code>DISASSOCIATE</code> succeeds.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t5" headers="r1c1-t5">
<pre>
ALTER TABLE DROP COLUMN
</pre></td>
<td class="cellalignment1243" headers="r5c1-t5 r1c2-t5">
<p>If association is present for the column, this calls <code>DISASSOCIATE</code> <code>FORCE</code> with column; if no entry in <code>ASSOCIATION$</code> but there are entries in type <code>USATS$,</code> then <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> for the columns is invoked.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r6c1-t5" headers="r1c1-t5">
<pre>
DISASSOCIATE
</pre></td>
<td class="cellalignment1243" headers="r6c1-t5 r1c2-t5">
<p>If user-defined statistics collected with the <code>statistics_type</code> are present, the command fails.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r7c1-t5" headers="r1c1-t5">
<pre>
DISASSOCIATE FORCE
</pre></td>
<td class="cellalignment1243" headers="r7c1-t5 r1c2-t5">
<p>Deletes the entry in <code>ASSOCIATION$</code> and calls <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a>.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r8c1-t5" headers="r1c1-t5">
<p>Delete index statistics using the <code>DBMS_STATISTICS</code> package</p>
</td>
<td class="cellalignment1243" headers="r8c1-t5 r1c2-t5">
<p>The <a href="ext_opt_ref.htm#CHEDFDDJ">ODCIStatsDelete()</a> function is invoked; if any errors are raised, statistics deletion fails and an error is reported.</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r9c1-t5" headers="r1c1-t5">
<pre>
ASSOCIATE
</pre></td>
<td class="cellalignment1243" headers="r9c1-t5 r1c2-t5">
<p>If an association or user-defined statistics are present for the associated object, the command fails.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CHDICECG"></a><a id="ADDCI4617"></a>
<div class="sect1">
<h2 class="sect1">Restrictions and Suggestions</h2>
<p>A statistics type is an ordinary object type. Since an object type must have at least one attribute, so must a statistics type. However, because it is never be accessed or set, this is a dummy attribute.</p>
<a id="ADDCI4618"></a>
<div class="sect2"><a id="sthref459"></a>
<h3 class="sect2">Distributed Execution</h3>
<p>Oracle's distributed implementation does not support adding functions to the remote capabilities list. All functions referencing remote tables are executed as filters. The placement of the filters occurs outside the optimizer. The cost model reflects this implementation and does not attempt to optimize placement of these predicates.</p>
<p>Since predicates are not shipped to the remote site, you cannot use domain indexes on remote tables. Therefore, the <code>DESCRIBE</code> protocol is unchanged, and remote domain indexes are not visible from the local site.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4619"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref460"></a>
<h3 class="sect2">System-Managed Storage Tables and ASSOCIATE STATISTICS</h3>
<p>If you are creating an indextype <code>WITH SYSTEM MANAGED STORAGE TABLES</code>, you should also create its associated statistics type <code>WITH SYSTEM MANAGED STORAGE TABLES</code>. If you are collecting statistics on the local indexed column using system partitioned tables, then the Oracle server maintains the system-partitioned statistics tables for them during partition maintenance operations. You can only use the <code>WITH SYSTEM MANAGED STORAGE TABLES</code> option when an indextype is associated with the statistics type; otherwise the system raises an error.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4620"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref461"></a>
<h3 class="sect2">Aggregate Object-Level Statistics</h3>
<p>When using local indexes, it may be useful to maintain both partition-level and aggregate object-level statistics. During partition maintenance operations, the partition level statistics are deleted, while the aggregate object-level statistics are either adjusted to reflect the operation or left "as is" for later recomputation.</p>
<p>The decision to adjust or recompute the aggregate statistics is made based on <code>_minimal_stats_aggregation</code> parameter in the server. If the parameter is <code>FALSE</code>, the aggregate statistics are recomputed. If the parameter is <code>TRUE</code>, the statistics are not recomputed.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4621"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref462"></a>
<h3 class="sect2">System-Managed Domain Indexing</h3>
<p>The system-managed domain indexing approach supports system-managed statistics that are associated with indextypes; indextype itself should also be system-managed.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4622"></a>
<div class="sect2"><a id="sthref463"></a>
<h3 class="sect2">Performance</h3>
<p>The cost of execution of the queries remains the same with the extensible optimizer if the same plan is chosen. If a different plan is chosen, the execution time should be better assuming that the user-defined cost, selectivity, and statistics collection functions are accurate. In light of this, you are strongly encouraged to provide statistics collection, selectivity, and cost functions for user-defined structures because the optimizer defaults can be inaccurate and lead to an expensive execution plan.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="operators.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="aggr_functions.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
