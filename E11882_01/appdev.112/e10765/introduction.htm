<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Introduction to Data Cartridges</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part1.htm" title="Previous" type="text/html" />
<link rel="Next" href="roadmap.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/36</span> <!-- End Header --><a id="BABIHGEI"></a><a id="ADDCI110"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to Data Cartridges</h1>
<p>In addition to the efficient and secure management of data ordered under the relational model, Oracle provides support for data organized under the object model. Object types and other features such as large objects (<code>LOB</code>s), external procedures, extensible indexing, and query optimization can be used to build powerful, reusable server-based components called <a id="sthref11"></a><span class="glossaryterm">data cartridges</span>.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1004600">Overview of Data Cartridges</a></p>
</li>
<li>
<p><a href="#i1004611">Uses of Data Cartridges</a></p>
</li>
<li>
<p><a href="#i1004771">Extending the Server: Services and Interfaces</a></p>
</li>
</ul>
<a id="i1004600"></a><a id="ADDCI4241"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref12"></a>Overview of Data Cartridges</h2>
<p>Data cartridges extend the capabilities of the Oracle server by taking advantage of <span class="bold"><a id="sthref13"></a>Oracle Extensibility Architecture</span> framework. This framework lets you capture business logic and processes associated with specialized or domain-specific data in user-defined data types. Data cartridges that provide new behavior without needing additional attributes have the option of using packages rather than user-defined types. Either way, you determine how the server interprets, stores, retrieves, and indexes the application data. Data cartridges package this functionality, creating software components that plug into a server and extend its capabilities into a new domain, making the database itself <span class="bold"><a id="sthref14"></a>extensible</span>.</p>
<p>You can customize the indexing and query optimization mechanisms of an extensible database management system and provide specialized services or more efficient processing for user-defined business objects and rich types. When you register your implementations with the server through <span class="bold"><a id="sthref15"></a>extensibility interfaces</span>, you direct the server to implement your customized processing instructions instead of its own default processes.</p>
<p>The extensibility interfaces consist of functions that the server calls to execute the custom indexing or optimizing behavior implemented for a data cartridge. The interfaces are defined by Oracle; as a cartridge developer, you must implement the functions or interfaces that have the specialized behavior you require in your application. In general, you implement the functions as static methods of an object type. An object type that implements the extensible indexing interface is called an <a id="sthref16"></a><span class="bold">indextype</span>; an object type that implements the extensible optimizing interface is called a <a id="sthref17"></a><span class="bold">statistics type</span>.</p>
<p><a id="sthref18"></a>Data cartridges have the following key characteristics:</p>
<ul>
<li>
<p><span class="italic">Data cartridges are server-based</span>. Their constituents reside on the server or are accessed from the server. The server runs all data cartridge processes, or dispatches these processes as external procedures.</p>
</li>
<li>
<p><span class="italic">Data cartridges extend the server</span>. They define new types and behavior, enabling the server to perform processes that were are otherwise unavailable to it, in component form. Data cartridges can use these new types and behaviors in their applications.</p>
</li>
<li>
<p><span class="italic">Data cartridges are integrated with the server</span>. The Oracle Extensibility Framework defines a set of interfaces that integrate data cartridges with the components of the server engine, allowing for domain-specific indexing, domain-specific optimized access to the CPU resources, and domain-specific optimization of I/O access to cartridge data.</p>
</li>
<li>
<p><span class="italic">Data cartridges are packaged.</span> A data cartridge is installed as a unit. After it is installed, the data cartridge handles all access issues for each user, including verification of schemas and privileges.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1004611"></a><a id="ADDCI4242"></a>
<div class="sect1">
<h2 class="sect1">Uses of Data Cartridges</h2>
<p><a id="sthref19"></a>Most industries have evolved sophisticated models to handle complex <span class="bold"><a id="sthref20"></a>data objects</span> that form the essence of their business. These data objects are both the structures that relate different units of information and the operations that are performed on them.</p>
<p>The simple names given to data objects often conceal considerable complexity. For example, the banking industry has many different types of bank accounts. Each bank account has customer demographic information, balance information, transaction information, and rules that embody its behavior (deposit, withdrawal, interest accrual, and so forth). When using data cartridges and their object-relational extension, application programmers and independent software vendors can encapsulate business logic in software components that integrate with the Oracle server and enhance it to support data types, processes, and logic to model business objects.</p>
<p>While business models have developed increasingly <a id="sthref21"></a>complex data objects, information technology has made it necessary to work with new and complex kinds of data, such as satellite images, X-rays, animal sounds, seismic vibrations, and chemical models. Complex and multimedia data types are now frequently stored and retrieved, queried and analyzed.</p>
<p>Web-based applications routinely include many different kinds of complex data. Including application-specific data types and the associated business logic requires a new class of networked, content-rich, multitiered, distributed applications. Data cartridges help you meet this need by combining scalar and unstructured data types in domain-specific components.</p>
<a id="i1004620"></a><a id="ADDCI4243"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref22"></a><a id="sthref23"></a>Data Cartridge Domains</h3>
<p>Data cartridges are typically domain-specific, characterized by content and scope of their target domain.</p>
<p>In terms of <span class="bold"><a id="sthref24"></a><a id="sthref25"></a><a id="sthref26"></a>content</span>, a data cartridge can accommodate scalar, complex, and multimedia data. Scalar data can be modeled using native SQL types such as <code>INTEGER</code>, <code>NUMBER</code>, or <code>CHAR</code>. Complex data include matrices, temperature and magnetic grids, and compound documents. Unstructured multimedia data includes such information as video, voice, and image data.</p>
<p>In terms of <a id="sthref27"></a><a id="sthref28"></a><a id="sthref29"></a><span class="bold">scope</span>, a data cartridge can have either broad horizontal (cross-industry) coverage, or it can be specialized for a specific type of business. For example, a data cartridge for general storage and retrieval of text-based data is cross-industry in scope; a data cartridge for the storage and retrieval of legal documents for litigation support is industry-specific. <a href="#BCECHICF">Table 1-1</a> shows a way of classifying data cartridge domains according to their content and scope, with some examples.</p>
<div class="tblformal">
<p class="titleintable"><a id="ADDCI4244"></a><a id="sthref30"></a><a id="BCECHICF"></a>Table 1-1 Data Cartridge Domains; Content and Scope</p>
<table class="cellalignment1246" title="Data Cartridge Domains; Content and Scope" summary="Classifies data cartridge domains according to their content and scope" dir="ltr">
<thead>
<tr class="cellalignment1237">
<th class="cellalignment1247" id="r1c1-t2">Content</th>
<th class="cellalignment1247" id="r1c2-t2"><span class="bold">Cross-Industry Uses</span></th>
<th class="cellalignment1247" id="r1c3-t2">Industry-Specific Extensions</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r2c1-t2" headers="r1c1-t2">
<p>Scalar Data</p>
</td>
<td class="cellalignment1243" headers="r2c1-t2 r1c2-t2">
<p>Statistical conversion</p>
</td>
<td class="cellalignment1243" headers="r2c1-t2 r1c3-t2">
<p>Financial and Petroleum</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r3c1-t2" headers="r1c1-t2">
<p>Multimedia and Complex Unstructured Data</p>
</td>
<td class="cellalignment1243" headers="r3c1-t2 r1c2-t2">
<p>Text</p>
</td>
<td class="cellalignment1243" headers="r3c1-t2 r1c3-t2">
<p>Image</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r4c1-t2" headers="r1c1-t2">
<p>Audio/Video</p>
</td>
<td class="cellalignment1243" headers="r4c1-t2 r1c2-t2">
<p>Spatial</p>
</td>
<td class="cellalignment1243" headers="r4c1-t2 r1c3-t2">
<p>Legal</p>
</td>
</tr>
<tr class="cellalignment1237">
<td class="cellalignment1243" id="r5c1-t2" headers="r1c1-t2">
<p>Medical</p>
</td>
<td class="cellalignment1243" headers="r5c1-t2 r1c2-t2">
<p>Broadcasting</p>
</td>
<td class="cellalignment1243" headers="r5c1-t2 r1c3-t2">
<p>Utilities</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You can also use scalar data types to construct more complex user-defined types. The object-relational database management system provides foundational data cartridges that package multimedia and complex data. These data cartridges can be used in developing applications across many different industries:</p>
<ul>
<li>
<p><a id="sthref31"></a><a id="sthref32"></a><a id="sthref33"></a>Oracle Text uses the tokenized serial byte stream database model are used to implement display compress, reformat, and indexing behavior.</p>
</li>
<li>
<p><a id="sthref34"></a><a id="sthref35"></a><a id="sthref36"></a>Oracle Multimedia uses the database model for structured large objects to support storage and management of image, audio and video.</p>
</li>
<li>
<p><a id="sthref37"></a><a id="sthref38"></a><a id="sthref39"></a>Oracle Spatial is for use with geometric objects (points, lines, polygons); it implements project, rotate, transform and map behavior.</p>
</li>
</ul>
<p>Another way of viewing the relationship of cartridges to domains is to consider basic multimedia data types as an extensible foundation that can be customized for specific industries. For example, medical applications can customize the Oracle Text for records, Oracle Multimedia for MRI results and heartbeat monitoring, and Oracle Spatial for demographic analysis.</p>
<p>A cartridge that provides basic services can be deployed across many industries. A cartridge can also leverage domain expertise across an industry. These cartridges can be further extended for more specialized vertical applications.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1004771"></a><a id="ADDCI4245"></a>
<div class="sect1">
<h2 class="sect1">Extending the Server: Services and Interfaces</h2>
<p>The Oracle server provides services for basic data storage, query processing, optimization, and indexing. Applications use these services to access database capabilities. However, data cartridges have specialized needs because they incorporate domain-specific data. To accommodate these specialized applications, these basic services have been made extensible; where standard Oracle services are not adequate for meeting a data cartridge's requirements, you can provide additional services that satisfy the requirements of the specific data cartridge. Every data cartridge can provide its own implementations of these services.</p>
<p>For example, if you are developing a spatial data cartridge for geographic information systems (GIS) applications, you must to implement routines that create a spatial index, insert an entry into the index, update the index, delete from the index, and perform other required operations. Thus, you extend the indexing service of the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pwr_example.htm#BABEIEIE">Chapter 15, "Power Demand Cartridge Example"</a>.</div>
<a id="CHDFFFIB"></a><a id="ADDCI4246"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref40"></a><a id="sthref41"></a>Extensibility Services</h3>
<p>This section describes some extensible services, highlighting major Oracle capabilities as they relate to data cartridge development. <a href="#i1005187">Figure 1-2</a> shows the standard services implemented by the Oracle server.</p>
<div class="figure">
<p class="titleinfigure"><a id="ADDCI4247"></a><a id="sthref42"></a>Figure 1-1 Oracle Services</p>
<img width="381" height="210" src="img/addci009.gif" alt="Description of Figure 1-1 follows" title="Description of Figure 1-1 follows" /><br />
<a id="sthref43" href="img_text/addci009.htm">Description of "Figure 1-1 Oracle Services"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="ADDCI4248"></a>
<div class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref44"></a>
<h4 class="sect3"><a id="sthref45"></a><a id="sthref46"></a><a id="sthref47"></a>Extensible Type System</h4>
<p>The Oracle universal data server provides both native and extensible type system services. Historically, most applications have focused on accessing and modifying corporate data that is stored in tables composed of native SQL data types, such as <code>INTEGER</code>, <code>NUMBER</code>, <code>DATE</code>, and <code>CHAR</code>. Oracle adds support for new types, including:</p>
<ul>
<li>
<p>User-defined object types</p>
</li>
<li>
<p>Collections, such as <code>VARRAY</code> (varying length array) and nested tables</p>
</li>
<li>
<p>Relationships (<code>REF</code>s)</p>
</li>
<li>
<p>Large object types (<code>LOB</code>s), such as binary large objects (<code>BLOB</code>s), character large objects (<code>CLOB</code>s), and external binary files (<code>BFILE</code>s)</p>
</li>
</ul>
<a id="ADDCI4249"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref48"></a>
<h5 class="sect4">User-Defined Types</h5>
<p><a id="sthref49"></a><a id="sthref50"></a><a id="sthref51"></a>A <span class="glossaryterm">user-defined type</span> extents the modeling capabilities of the native data types and from them both because it is defined by a user, and because it specifies both the underlying persistent data (attributes) and the related behaviors (methods).</p>
<p>With user-defined types, you can make better models of complex entities in the real world by binding data <span class="bold">attributes</span> to semantic behaviors. A user-defined type can have one or more attributes, each with a name and a type. The type of an attribute can be a native SQL type, a <code>LOB</code>, a collection, another object type, or a <code>REF</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="obj_types.htm#CIHEHCCG">Chapter 3, "Defining Object Types"</a> for type definition syntax.</p>
</li>
<li>
<p><a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information on user-defined types.</p>
</li>
</ul>
</div>
<p><a id="sthref52"></a><a id="sthref53"></a><a id="sthref54"></a>A <span class="bold">method</span> is a procedure or a function that is part of a user-defined type. Methods can access and manipulate attributes of their type while running within the execution environment of the Oracle server, or when they are dispatched outside the server as part of the extensible server execution environment.</p>
</div>
<!-- class="sect4" -->
<a id="ADDCI4250"></a>
<div class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref55"></a>
<h5 class="sect4"><a id="sthref56"></a><a id="sthref57"></a><a id="sthref58"></a>Collection Types</h5>
<p><span class="bold">Collections</span> are SQL data types that contain multiple elements. Elements, or values, of a collection are all from the same type hierarchy. In Oracle, collections of complex types can be <code>VARRAY</code>s or nested tables.</p>
<p>A <code>VARRAY</code> type contains a variable number of ordered elements and can be used for a column of a table or an attribute of an object type. The element type of a <code>VARRAY</code> can be either a native data type, such as <code>NUMBER</code>, or a user-defined type.</p>
<p>To provide the semantics of an unordered collection, you could create a nested table using Oracle SQL As with a <code>VARRAY</code>, a nested table can define a column of a table or an attribute of a user-defined type.</p>
</div>
<!-- class="sect4" -->
<a id="ADDCI4251"></a>
<div class="sect4"><a id="sthref59"></a>
<h5 class="sect4"><a id="sthref60"></a><a id="sthref61"></a><a id="sthref62"></a><a id="sthref63"></a><a id="sthref64"></a>Reference Types</h5>
<p>If you create an object table in Oracle, you can obtain a <span class="bold">reference</span>, <code><span class="codeinlinebold">REF</span></code>, that behaves like a database pointer to an associated row object. References are important for navigating among object instances. Because <code>REF</code>s rely on the underlying object identity, you can only use a <code>REF</code> with an object stored as a row in an object table, or with objects composed from an object view.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF00694" href="../../server.112/e41084/functions145.htm#SQLRF00694"><span class="italic">Oracle Database SQL Language Reference</span></a> for details of the <code>REF</code> operator.</p>
</li>
<li>
<p><a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about objects.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="ADDCI4252"></a>
<div class="sect4"><a id="sthref65"></a>
<h5 class="sect4"><a id="sthref66"></a>Large Objects</h5>
<p><span class="bold">Large object</span> types, or <code><span class="codeinlinebold">LOB</span></code><span class="bold">s</span>, handle the storage demands of images, video clips, documents, and other forms of unstructured data. <code>LOB</code>s storage optimizes space requirements and efficient access.</p>
<p><code>LOB</code>s are composed of locators and the related binary or character data. The locators are stored inline with other table columns. Internal <code>LOB</code>s (<code>BLOB</code>s, <code>CLOBs</code>, and <code>NCLOB</code>s) can store data in a separate database storage area. External <code>LOB</code>s (<code>BFILE</code>s) store the data outside the database tablespaces, in operating system files. A table can contain multiple <code>LOB</code> columns, in contrast to the limit of a single <code>LONG</code> <code>RAW</code> column for each table. Each <code>LOB</code> column can be stored in a separate tablespace, and even on different secondary storage devices.</p>
<p>You can create, modify, and delete tables and object types that contain <code>LOB</code>s using the Oracle SQL data definition language (DDL) extensions. Using the Oracle SQL data manipulation language (DML) statements, you can insert and delete complete <code>LOBs</code>. There is also an extensive set of statements for piece-wise reading, writing, and manipulating of <code>LOB</code>s within Java, PL/SQL, and the Oracle Call Interface.</p>
<p>For internal <code>LOB</code> types, both the locators and related data participate fully in the transactional model of the Oracle server. The data for <code>BFILEs</code> does not participate in transactions; however, <code>BFILE</code> locators are fully supported by Oracle server transactions.</p>
<p>Unlike scalar quantities, a <code>LOB</code> value cannot be indexed by built-in indexing schemes. However, you can use the various <code>LOB</code> APIs to build modules, including methods of user-defined types, to access and manipulate <code>LOB</code> content. You can define the semantics of data residing in <code>LOB</code>s and manipulate this data using the extensible indexing framework.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="lobs.htm#CIHEHGAI">Chapter 6, "Working with Multimedia Data Types"</a> for information on how to use <code>LOBs</code> to store and manipulate binary and character data that represents your domain.</p>
</li>
<li>
<p><a class="olink ADLOB002" href="../../appdev.112/e18294/adlob_working.htm#ADLOB002"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for detailed discussions of large objects.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="i1004849"></a><a id="ADDCI4253"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref67"></a>Extensible Server Execution Environment</h4>
<p>The Oracle type system decouples the implementation of a member method for a user-defined type from the specification of that method. Oracle data cartridge components can be implemented using a large number of popular programming languages, such as PL/SQL, C, C++, or Java, extending the database server run-time environment by user-defined methods, functions, and procedures.</p>
<p>Java offers data cartridge developers a powerful implementation choice for data cartridge behavior. PL/SQL is a powerful procedural language that supports all the object extensions for SQL. With PL/SQL, program logic can execute on the server and perform traditional procedural language operations such as loops, if-then-else clauses, and array access.</p>
<p>While PL/SQL and Java are powerful, certain computation-intensive operations such as a Fast Fourier Transform or an image format conversion are handled more efficiently by C programs. You can call C language programs from the server, running them in a separate address space, thus insulating the server and protecting the database from corruption by external procedure failures.</p>
<p>With certain reasonable restrictions, external procedures can <span class="glossaryterm">callback</span> the Oracle Server using OCI. Callbacks are particularly useful for processing <code>LOB</code>s. External procedure can use callbacks to perform piece-wise reads or writes of <code>LOB</code>s stored in the database, or to manipulate domain indexes stored as index-organized tables in the database.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1005187"></a><a id="ADDCI4254"></a>Figure 1-2 External Programs Executing in a Separate Address Space</p>
<img width="521" height="322" src="img/addci010.gif" alt="Description of Figure 1-2 follows" title="Description of Figure 1-2 follows" /><br />
<a id="sthref68" href="img_text/addci010.htm">Description of "Figure 1-2 External Programs Executing in a Separate Address Space"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="i1004862"></a><a id="ADDCI4255"></a>
<div class="sect3">
<h4 class="sect3"><a id="sthref69"></a><a id="sthref70"></a>Extensible Indexing</h4>
<p>Basic database management systems support a few types of access methods, such as <a id="sthref71"></a>B+ trees and <a id="sthref72"></a>hash indexes, on a limited set of data types, such as numbers and strings. For simple data types like integers and small strings, all aspects of indexing can easily be handled by the database system. As data becomes more complex with addition of text, spatial, image, video, and audio information, it requires complex data types and specialized indexing techniques.</p>
<p>Complex data types have application-specific formats, indexing requirements, and selection predicates. For example, there are many different means of document encoding (ODA, XML, plain text) and information retrieval techniques (keyword, full-text boolean, similarity, and probabilistic). Similarly, <a id="sthref73"></a>R-trees are an efficient method of indexing spatial data. To enable you to define the index types necessary for your business requirements, Oracle provides an extensible indexing framework.</p>
<p>Such user-defined indexes are called <span class="bold"><a id="sthref74"></a>domain indexes</span> because they index data in an application-specific domain. The cartridge is responsible for defining the index structure, maintaining the index content during load and update operations, and searching the index during query processing. The physical index can be stored either in the Oracle database as tables, or externally as a file.</p>
<p>A domain index is a schema object. It is created, managed, and accessed by routines implemented as methods of a user-defined type called an <a id="sthref75"></a><span class="bold">indextype</span>. The routines that an indextype must implement, and the operations the routines must perform, are described in <a href="dom_idx.htm#BHADJHIF">Chapter 8, "Building Domain Indexes"</a>. Implementation of the routines is specific to an application, and must therefore be completed by the cartridge developer.</p>
<p><a id="sthref76"></a>With extensible indexing, the application must have the following processes:</p>
<ul>
<li>
<p>Define the structure of the domain index.</p>
</li>
<li>
<p>Store the index data, either inside or outside the Oracle database.</p>
</li>
<li>
<p>Manage, retrieve, and use the index data to evaluate user queries.</p>
</li>
</ul>
<p><a id="sthref77"></a>When the database system handles the physical storage of domain indexes, data cartridges must have the following processes:</p>
<ul>
<li>
<p>Define the format and content of an index. Cartridges define an index structure that can accommodate a complex data object.</p>
</li>
<li>
<p>Build, delete, and update a domain index. Cartridges build and maintain the index structures. Because indexes are modeled as collections of tuples, they directly support in-place updates.</p>
</li>
<li>
<p>Access and interpret the content of an index. Cartridges become an integral component of query processing by handling content-related clauses for database queries.</p>
</li>
</ul>
<p>Typical relational and object-relational database management systems do not support extensible indexing. Consequently, many applications maintain file-based indexes for complex data in relational database tables. A considerable amount of code and effort is required to complete the following tasks:</p>
<ul>
<li>
<p>Maintain consistency between external indexes and the related relational data.</p>
</li>
<li>
<p>Support compound queries involving tabular values and external indexes.</p>
</li>
<li>
<p>Manage the system, performing backup, recovery, storage allocation, and so on, with multiple forms of persistent storage, such as files and databases.</p>
</li>
</ul>
<p>By supporting extensible indexes, the Oracle server significantly reduces the level of effort needed to develop solutions involving high-performance access to complex data types.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4256"></a>
<div class="sect3"><a id="sthref78"></a>
<h4 class="sect3">Extensible Optimizer</h4>
<p>The <a id="sthref79"></a><a id="sthref80"></a><span class="bold">extensible optimizer</span> lets user-defined functions and indexes collect statistical information, such as selectivity and cost functions, and generates an execution plan for a SQL statement. This information is used by the optimizer in choosing a query plan, thus extending the optimizer to use the user-supplied information. The rule-based optimizer remains unchanged.</p>
<p>An <a id="sthref81"></a><span class="bold">execution plan</span> generated by the optimizer includes an access method for each table in the <code>FROM</code> clause, and an ordering, called the <a id="sthref82"></a><span class="bold">join order</span>, of the tables in the <code>FROM</code> clause. System-defined access methods include indexes, hash clusters, and table scans. For each table in the join order, the optimizer chooses a plan by generating a set of join orders or permutations, computing the cost of each, and selecting the one with the lowest cost. The cost of the join order is the sum of the access method and join method costs.</p>
<p>The <span class="bold"><a id="sthref83"></a>cost model</span> is a group of algorithms used for calculating the cost of a given operation. It can include varying levels of detail about the physical environment in which the query runs. The current cost model includes the number of disk accesses and estimates of network costs, with minor adjustments.</p>
<p>The optimizer also uses statistics about the objects referenced in the query to calculate cost and <a id="sthref84"></a><span class="bold">selectivity</span>, or the fraction of rows in a table that a query selects (between 0 and 100, a percentage). The <a id="sthref85"></a><code>DBMS_STATS</code> package contains methods for generating these statistics.</p>
<p>Extensibility allows users to define new operators, index types, and domain indexes, and enables the control of the three main components used by the optimizer to select an execution plan: statistics, selectivity, and cost.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS059" href="../../appdev.112/e40758/d_stats.htm#ARPLS059"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code>DBMS_STATS</code>.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJJCGD"></a><a id="ADDCI4257"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref86"></a><a id="sthref87"></a>Extensibility Interfaces</h3>
<p>There are three classes of extensibility interfaces: DBMS interfaces, cartridge basic service interfaces, and data cartridge interfaces.</p>
<a id="ADDCI4258"></a>
<div class="sect3"><a id="sthref88"></a>
<h4 class="sect3"><a id="sthref89"></a><a id="sthref90"></a>DBMS Interfaces</h4>
<p>The DBMS interfaces offer the simplest kind of extensibility services. They can be used through extensions to SQL or to the Oracle Call Interface (OCI). For example, the extensible type manager uses the <a id="sthref91"></a><code>CREATE</code> <code>TYPE</code> syntax in SQL. Similarly, extensible indexing uses DDL and DML support for specifying and manipulating indexes.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4259"></a>
<div class="sect3"><a id="sthref92"></a>
<h4 class="sect3"><a id="sthref93"></a><a id="sthref94"></a>Cartridge Basic Service Interfaces</h4>
<p>Cartridge basic interfaces provide generic services like memory management, context management, internationalization, and cartridge-specific management. They implement behavior for new data types for the server's execution environment, and provide routines that help developers implement portable and robust server-side methods.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4260"></a>
<div class="sect3"><a id="sthref95"></a>
<h4 class="sect3"><a id="sthref96"></a><a id="sthref97"></a>Data Cartridge Interfaces</h4>
<p>When processing user-defined indextypes, Oracle calls data cartridge functions to perform index search or fetch operations. For user-defined query optimization, the query optimizer calls functions implemented by the data cartridge to compute the cost of user-defined operators or functions.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="part1.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="roadmap.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
