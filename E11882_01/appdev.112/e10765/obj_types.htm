<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Defining Object Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="part2.htm" title="Previous" type="text/html" />
<link rel="Next" href="pl_sql.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">12/36</span> <!-- End Header --><a id="CIHEHCCG"></a><a id="ADDCI210"></a>
<h1 class="chapter"><span class="secnum">3</span> Defining Object Types</h1>
<p>This chapter provides an example of starting with a schema for a data cartridge. Object types are crucial to building data cartridges in that they enable domain-level abstractions to be captured in the database.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1004616">Objects and Object Types</a></p>
</li>
<li>
<p><a href="#i1004682">Assigning an Object Identifier to an Object Type</a></p>
</li>
<li>
<p><a href="#i1004867">Constructor Methods</a></p>
</li>
<li>
<p><a href="#i1004721">Object Comparison</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following manuals for additional information about creating and using object types:
<ul>
<li>
<p><a class="olink ADOBJ" href="../e11822/toc.htm"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink CNCPT" href="../../server.112/e40540/toc.htm"><span class="variable">Oracle Database Concepts</span></a></p>
</li>
<li>
<p><a class="olink ADFNS" href="../e41502/toc.htm"><span class="variable">Oracle Database Advanced Application Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="variable">Oracle Database PL/SQL Language Reference</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1004616"></a><a id="ADDCI4294"></a>
<div class="sect1">
<h2 class="sect1">Objects and Object Types</h2>
<p>In the Oracle Object-Relational Database Management System (ORDBMS), you use object types to model real-world entities. An object type has attributes, which reflect the entity's structure, and methods, which implement the operations on the entity. Attributes are defined using built-in types or other object types. Methods are functions or procedures written in PL/SQL or an external language, like C, and stored in the database.</p>
<p>A typical use for an object type is to impose structure on some part of the data in the database. For example, an object type named <code>DataStream</code> could be used by a cartridge to store large amounts of data in a character LOB (a data type for large objects). This object type has attributes such as an identifier, a name, a date, and so on. The statement in <a href="#CHDGIJCD">Example 3-1</a> defines the <code>DataStream</code> data type:</p>
<div class="example">
<p class="titleinexample"><a id="CHDGIJCD"></a><a id="ADDCI4295"></a>Example 3-1 Defining a DataStream data type</p>
<pre>
create or replace type DataStream as object (
   id integer, 
   name varchar2(20),
   createdOn date,
   data clob, 
   MEMBER FUNCTION DataStreamMin  return pls_integer,
   MEMBER FUNCTION DataStreamMax  return pls_integer,
   MAP MEMBER FUNCTION DataStreamToInt  return integer,
   PRAGMA restrict_references(DataStreamMin, WNDS, WNPS),
   PRAGMA restrict_references(DataStreamMax, WNDS, WNPS));
</pre></div>
<!-- class="example" -->
<p><a id="sthref154"></a><a id="sthref155"></a>A method is a procedure or function that is part of the object type definition and that can operate on the object type data attributes. Such methods are called <span class="bold">member methods</span>, and they take the keyword <code>MEMBER</code> when you specify them as a component of the object type. The <code>DataStream</code> type definition declares three methods. The first two, <code>DataStreamMin</code> and <code>DataStreamMax</code>, calculate the minimum and maximum values, respectively, in the data stream stored inside the character <code>LOB</code>.</p>
<p>The third method, <code>DataStreamToInt</code>, a <span class="bold">map method</span>, governs comparisons between instances of data stream type.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="#i1004721">"Object Comparison"</a> for information about map methods</div>
<p>The pragma (compiler directive) <code>RESTRICT_REFERENCES</code> is necessary for security, and is discussed in the following sections.</p>
<p>After declaring the type, define the type body. The body contains the code for type methods. <a href="#CHDDCIDI">Example 3-2</a> shows the type body definition for the <code>DataStream</code> type. It defines the member function methods, <code>DataStreamMin</code> and <code>DataStreamMax</code>, and the map method <code>DataStreamToInt</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDCIDI"></a><a id="ADDCI4296"></a>Example 3-2 Defining the Type Body</p>
<pre>
CREATE OR REPLACE TYPE BODY DataStream IS
    MEMBER FUNCTION DataStreamMin return pls_integer is 
      a pls_integer := DS_Package.ds_findmin(data); 
      begin return a; end; 
    MEMBER FUNCTION DataStreamMax return pls_integer is 
      b pls_integer := DS_Package.ds_findmax(data); 
      begin return b; end; 
    MAP MEMBER FUNCTION DataStreamToInt return integer is 
      c integer := id; 
      begin return c; end; 
end;
</pre></div>
<!-- class="example" -->
<p><code>DataStreamMin</code> and <code>DataStreamMax</code> are call routines in a PL/SQL package named <code>DS_Package</code>. Since these methods are likely to be compute-intensive (they process numbers stored in the <code>CLOB</code> to determine minimum and maximum values), they are defined as external procedures and implemented in C. The external dispatch is routed through a PL/SQL package named <code>DS_Package</code>. Such packages are discussed in <a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>The third method, <code>DataStreamToInt</code>, is implemented in PL/SQL. Because we have a identifier, <code>id</code>, attribute in <code>DataStream</code>, this method can return the value of the identifier attribute. Most map methods, however, are more complex than <code>DataStreamToInt</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="lobs.htm#CIHEHGAI">Chapter 6, "Working with Multimedia Data Types"</a></p>
</li>
<li>
<p><a class="olink ADLOB" href="../e18294/toc.htm"><span class="variable">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for general information about LOBs</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004682"></a><a id="ADDCI4297"></a>
<div class="sect1">
<h2 class="sect1">Assigning an Object Identifier to an Object Type</h2>
<p><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a>The <code>CREATE</code> <code>TYPE</code> statement has an optional keyword <code>OID</code>, which associates a user-specified object identifier (<code>OID</code>) with the type definition. It necessary to anyone who creates an object type used in several database.s</p>
<p>Each type has an <code>OID</code>. If you create an object type and do not specify an <code>OID</code>, Oracle generates an <code>OID</code> and assigns it to the type. Oracle uses the <code>OID</code> internally for operations pertaining to that type. Using the same <code>OID</code> for a type is important if you plan to share instances of the type across databases for such operations as export/import and distributed queries.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In <code>CREATE</code> <code>TYPE</code> with <code>OID</code>, an <code>OID</code> is assigned to the type itself. Each row in a table with a column of the specified type has a row-specific <code>OID</code>.</div>
<p>Consider creating a <code>SpecialPerson</code> type, and then instantiating this type in two different databases in tables named <code>SpecialPersonTable1</code> and <code>SpecialPersonTable2</code>. The RDBMS must know that the <code>SpecialPerson</code> type is the same type in both instances, and therefore the type must be defined using the same <code>OID</code> in both databases. If you do not specify an <code>OID</code> with <code>CREATE</code> <code>TYPE</code>, a unique identifier is created automatically by the RDBMS. The syntax for specifying an <code>OID</code> for an object type is in <a href="#CHDJHFDB">Example 3-3</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDJHFDB"></a><a id="ADDCI4298"></a>Example 3-3 Specifying an ODI for an Object Type</p>
<pre>
CREATE OR REPLACE TYPE type_name OID 'oid' AS OBJECT (attribute datatype [,...]);
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFIEEI">Example 3-4</a>, the <code>SELECT</code> statement generates an <code>OID</code>, and the <code>CREATE</code> <code>TYPE</code> statement uses the <code>OID</code> in creating an object type named <code>mytype</code>. Be sure to use the <code>SELECT</code> statement to generate a different <code>OID</code> for each object type to be created, because this is the only way to guarantee that each <code>OID</code> is valid and globally unique.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFIEEI"></a><a id="ADDCI4299"></a>Example 3-4 Assigning and Using OIDs</p>
<pre>
SQLPLUS&gt; SELECT SYS_OP_GUID() FROM DUAL; 
SYS_OP_GUID()                    
-------------------------------- 
19A57209ECB73F91E03400400B40BBE3 
1 row selected. 
 
SQLPLUS&gt; CREATE TYPE mytype OID '19A57209ECB73F91E03400400B40BBE3'
     2&gt; AS OBJECT (attrib1 NUMBER); 
Statement processed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1004867"></a><a id="ADDCI4300"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref159"></a><a id="sthref160"></a>Constructor Methods</h2>
<p>Oracle implicitly defines a <span class="bold">constructor method</span> for each object type that you define. The name of the constructor method is identical to the name of the object type. The parameters of the constructor method are exactly the data attributes of the object type, and they occur in the same order as the attribute definition for the object type. Only one constructor method can be defined for each object type.</p>
<p>In <a href="#CHDEHCJC">Example 3-5</a>, the system creates a type named <code>rational_type</code> and implicitly creates a constructor method for this object type.</p>
<div class="example">
<p class="titleinexample"><a id="CHDEHCJC"></a><a id="ADDCI4301"></a>Example 3-5 Creating a Type</p>
<pre>
CREATE TYPE rational_type (
     numerator integer,
     denominator integer);
</pre></div>
<!-- class="example" -->
<p>When you instantiate an object of <code>rational_type</code>, you invoke the constructor method, as demonstrated in <a href="#CHDDBDEB">Example 3-6</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CHDDBDEB"></a><a id="ADDCI4302"></a>Example 3-6 Instantiating a Type Object</p>
<pre>
CREATE TABLE some_table (
     c1 integer, c2 rational_type);
INSERT INTO some_table
     VALUES (42, rational_type(223, 71));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1004721"></a><a id="ADDCI4303"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref161"></a><a id="sthref162"></a><a id="sthref163"></a><a id="sthref164"></a><a id="sthref165"></a>Object Comparison</h2>
<p>SQL performs comparison operations on objects. Some comparisons are explicit, using the comparison operators (=, &lt;, &gt;, &lt;&gt;, &lt;=, &gt;=, !=) and the <code>BETWEEN</code> and <code>IN</code> predicates. Other comparisons are implicit, as in the <code>GROUP</code> <code>BY</code>, <code>ORDER</code> <code>BY</code>, <code>DISTINCT</code>, and <code>UNIQUE</code> clauses.</p>
<p>Comparison of objects uses special member functions of the object type: map methods and order methods. To perform object comparison, you must implement either a map method or an order method in the <code>CREATE</code> <code>TYPE</code> and <code>CREATE</code> <code>TYPE</code> <code>BODY</code> statements. In <a href="#CHDIEHCC">Example 3-7</a>, the type body for the <code>DataStream</code> type implements the map member function:</p>
<div class="example">
<p class="titleinexample"><a id="CHDIEHCC"></a><a id="ADDCI4304"></a>Example 3-7 Implementing a Member Function</p>
<pre>
MAP MEMBER FUNCTION DataStreamToInt return integer is 
      c integer := id; 
      begin return c; end; 
</pre></div>
<!-- class="example" -->
<p>This definition of the map member function relies on the presence of the <code>id</code> attribute of the <code>DataStream</code> type to map instances to integers. Whenever a comparison operation is required between objects of type <code>DataStream</code>, the map function <code>DataStreamToInt()</code> is called implicitly by the system.</p>
<p>The object type <code>rational_type</code> does not have a simple <code>id</code> attribute like <code>DataStream</code>. Instead, its map member function is complicated, as demonstrated in <a href="#CHDHCEED">Example 3-8</a>. Because a map function can return any of the built-in types, <code>rational_type</code> can return a value or type <code>REAL</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CHDHCEED"></a><a id="ADDCI4305"></a>Example 3-8 Implementing Functions for Types Without a Simple Id Attributte</p>
<pre>
MAP MEMBER FUNCTION RationalToReal RETURN REAL IS
     BEGIN
         RETURN numerator/denominator;
     END;
...
</pre></div>
<!-- class="example" -->
<p>If you have not defined a map or order function for an object type, it can only support equality comparisons. Oracle SQL performs the comparison by doing a field-by-field comparison of the attributes of that type.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="part2.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="pl_sql.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
