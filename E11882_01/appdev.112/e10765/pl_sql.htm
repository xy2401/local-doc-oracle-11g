<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Implementing Data Cartridges in PL/SQL</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2010-03-08T13:16:26Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Data Cartridge Developer's Guide" />
<meta name="dcterms.identifier" content="E10765-02" />
<meta name="dcterms.isVersionOf" content="ADDCI" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="obj_types.htm" title="Previous" type="text/html" />
<link rel="Next" href="c_cpp_java.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10765.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/36</span> <!-- End Header --><a id="CHDCIFDH"></a><a id="ADDCI240"></a>
<h1 class="chapter"><span class="secnum">4</span> Implementing Data Cartridges in PL/SQL</h1>
<p>This chapter describes how to use PL/SQL to implement the methods of a data cartridge. Methods are procedures and functions that define the operations permitted on data defined using the data cartridge.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1004594">Methods</a></p>
</li>
<li>
<p><a href="#BEIEEDHG">PL/SQL Packages</a></p>
</li>
<li>
<p><a href="#i1004752">Pragma RESTRICT_REFERENCES</a></p>
</li>
<li>
<p><a href="#i1004791">Privileges Required to Create Procedures and Functions</a></p>
</li>
<li>
<p><a href="#i1004803">Debugging PL/SQL Code</a></p>
</li>
</ul>
<a id="i1004594"></a><a id="ADDCI4306"></a>
<div class="sect1">
<h2 class="sect1">Methods</h2>
<p><a id="sthref166"></a><a id="sthref167"></a>A <span class="bold">method</span> is procedure or function that is part of the object type definition, and that can operate on the attributes of the type. Such methods are also called <span class="bold">member methods</span>, and they take the keyword <code>MEMBER</code> when you specify them as a component of the object type.</p>
<p>The following sections show simple examples of implementing a method, invoking a method, and referencing an attribute in a method.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT" href="../../server.112/e40540/toc.htm"><span class="variable">Oracle Database Concepts</span></a> for information about method specifications, names, and overloading</p>
</li>
<li>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="variable">Oracle Database PL/SQL Language Reference</span></a>. for further explanation and examples</p>
</li>
</ul>
</div>
<a id="i1004614"></a><a id="ADDCI4307"></a>
<div class="sect2">
<h3 class="sect2">Implementing Methods</h3>
<p><a id="sthref168"></a><a id="sthref169"></a>To implement a method, create the PL/SQL code and specify it within a <code>CREATE</code> <code>TYPE</code> <code>BODY</code> statement. If an object type has no methods, no <code>CREATE</code> <code>TYPE</code> <code>BODY</code> statement for that object type is required.</p>
<p><a href="#CIHCJCJB">Example 4-1</a>demonstrates the definition of an object type <code>rational_type</code>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHCJCJB"></a><a id="ADDCI4308"></a>Example 4-1 Defining an Object Type</p>
<pre>
CREATE TYPE rational_type AS OBJECT
( numerator INTEGER,
  denominator INTEGER,
  MAP MEMBER FUNCTION rat_to_real RETURN REAL,
  MEMBER PROCEDURE normalize,
  MEMBER FUNCTION plus (x rational_type)
       RETURN rational_type);
</pre></div>
<!-- class="example" -->
<p>The definition in <a href="#CIHIFECI">Example 4-2</a> defines the function <code>gcd</code>, which is used in the definition of the <code>normalize</code> method in the <code>CREATE</code> <code>TYPE</code> <code>BODY</code> statement later in this section.</p>
<div class="example">
<p class="titleinexample"><a id="CIHIFECI"></a><a id="ADDCI4309"></a>Example 4-2 Defining a "Greatest Common Divisor" Function</p>
<pre>
CREATE FUNCTION gcd (x INTEGER, y INTEGER) RETURN INTEGER AS
-- Find greatest common divisor of x and y. For example, if
-- (8,12) is input, the greatest common divisor is 4.
-- This normalizes (simplifies) fractions.
-- (You need not try to understand how this code works, unless
--  you are a math wizard. It does.)
--
   ans INTEGER;
BEGIN
   IF (y &lt;= x) AND (x MOD y = 0) THEN
      ans := y;
   ELSIF x &lt; y THEN 
      ans := gcd(y, x);  -- Recursive call
   ELSE
      ans := gcd(y, x MOD y);  -- Recursive call
   END IF;
   RETURN ans;
END;
</pre></div>
<!-- class="example" -->
<p>The statements in <a href="#CIHGAAHI">Example 4-3</a> implement the methods <code>rat_to_real</code>, <code>normalize</code>, and <code>plus</code> for the object type <code>rational_type</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CIHGAAHI"></a><a id="ADDCI4310"></a>Example 4-3 Implementing Methods for an Object Type</p>
<pre>
CREATE TYPE BODY rational_type
( MAP MEMBER FUNCTION rat_to_real RETURN REAL IS
   -- The rat-to-real function converts a rational number to 
   -- a real number. For example, 6/8 = 0.75
   BEGIN
      RETURN numerator/denominator;
   END;

   -- The normalize procedure simplifies a fraction.
   -- For example, 6/8 = 3/4
   MEMBER PROCEDURE normalize IS
      divisor INTEGER := gcd(numerator, denominator);
   BEGIN
      numerator := numerator/divisor;
      denominator := denominator/divisor;
   END;

   -- The plus function adds a specified value to the
   -- current value and returns a normalized result.
   -- For example, 1/2 + 3/4 = 5/4
   -- 
   MEMBER FUNCTION plus(x rational_type)
            RETURN rational_type IS
            -- Return sum of SELF + x
   BEGIN
      r = rational_type(numerator*x.demonimator +
             x.numerator*denominator,
             denominator*x.denominator);
                 -- Example adding 1/2 to 3/4:
                 -- (3*2 + 1*4) / (4*2)
      -- Now normalize (simplify). Here, 10/8 = 5/4
      r.normalize;
      RETURN r;
   END;
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="ADDCI4311"></a>
<div class="sect2"><a id="sthref170"></a>
<h3 class="sect2">Invoking Methods</h3>
<p><a id="sthref171"></a>To invoke a method, use the syntax in <a href="#CIHJCGJG">Example 4-4</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHJCGJG"></a><a id="ADDCI4312"></a>Example 4-4 Invoking Methods; General Syntax</p>
<pre>
<span class="italic">object_name</span>.<span class="italic">method_name</span>(<span class="italic">[parameter_list]</span>)
</pre></div>
<!-- class="example" -->
<p>In SQL statements only, you can use the syntax in <a href="#CIHGFHGD">Example 4-5</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHGFHGD"></a><a id="ADDCI4313"></a>Example 4-5 Invoking Methods; SQL Syntax</p>
<pre>
<span class="italic">correlation_variable</span>.<span class="italic">method_name</span>(<span class="italic">[parameter_list]</span>)
</pre></div>
<!-- class="example" -->
<p><a href="#CIHIBBHG">Example 4-6</a> shows how to invoke a method named <code>get_emp_sal</code> in PL/SQL:</p>
<div class="example">
<p class="titleinexample"><a id="CIHIBBHG"></a><a id="ADDCI4314"></a>Example 4-6 Invoking Methods; General Syntax</p>
<pre>
DECLARE
   employee employee_type;
   salary number;
   ...
BEGIN
   salary := employee.get_emp_sal();
   ...
END;
</pre></div>
<!-- class="example" -->
<p><a id="sthref172"></a>An alternative way to invoke a method is by using the <code>SELF</code> built-in parameter. Because the implicit first parameter of each method is the name of the object on whose behalf the method is invoked, <a href="#CIHHAIGD">Example 4-7</a> performs the same action as the <code>salary := employee.get_emp_sal();</code> line in <a href="#CIHIBBHG">Example 4-6</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHHAIGD"></a><a id="ADDCI4315"></a>Example 4-7 Using the SELF Build-In Paramenter</p>
<pre>
salary := get_emp_sal(SELF =&gt; employee);
</pre></div>
<!-- class="example" -->
<p>In this example, <code>employee</code> is the name of the object on whose behalf the <code>get_emp_sal()</code> method is invoked.</p>
</div>
<!-- class="sect2" -->
<a id="ADDCI4316"></a>
<div class="sect2"><a id="sthref173"></a>
<h3 class="sect2">Referencing Attributes in a Method</h3>
<p><a id="sthref174"></a><a id="sthref175"></a><a id="sthref176"></a>Because member methods can reference the attributes and member methods of the same object type without using a qualifier, a built-in reference, <code>SELF</code>, always identifies the object on whose behalf the method is invoked.</p>
<p>Consider <a href="#CIHBCEGG">Example 4-8</a>, where two statements set the value of variable <code>var1</code> to <code>42</code>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHBCEGG"></a><a id="ADDCI4317"></a>Example 4-8 Setting Variable Values</p>
<pre>
CREATE TYPE a_type AS OBJECT (
   var1 INTEGER,
   MEMBER PROCEDURE set_var1);
CREATE TYPE BODY a_type (
   MEMBER PROCEDURE set_var1 IS
   BEGIN
      var1 := 42;
      SELF.var1 := 42;
   END set_var1;
);
</pre></div>
<!-- class="example" -->
<p>The statements <code>var1 := 42</code> and <code>SELF.var1 := 42</code> have the same effect. Because <code>var1</code> is the name of an attribute of the object type <code>a_type</code> and because <code>set_var1</code> is a member method of this object type, no qualification is required to access <code>var1</code> in the method code. However, for code readability and maintainability, you can use the keyword <code>SELF</code> in this context to make the reference to <code>var1</code> more clear.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BEIEEDHG"></a><a id="ADDCI4318"></a>
<div class="sect1">
<h2 class="sect1">PL/SQL Packages<a id="sthref177"></a><a id="sthref178"></a><a id="sthref179"></a><a id="sthref180"></a></h2>
<p>A <span class="bold">package</span> is a group of PL/SQL types, objects, and stored procedures and functions. The <span class="bold">specification</span> part of a package declares the public types, variables, constants, and subprograms that are visible outside the immediate scope of the package. The <span class="bold">body</span> of a package defines the objects declared in the specification, and private objects that are not visible to applications outside the package.</p>
<p><a href="#CIHBEFGH">Example 4-9</a> shows the package specification for the package named <code>DS_package</code>. This package contains the two stored functions <code>ds_findmin</code> and <code>ds_findmax</code>, which implement the <code>DataStreamMin</code> and <code>DataStreamMax</code> functions defined for the <code>DataStream</code> object type.</p>
<div class="example">
<p class="titleinexample"><a id="CIHBEFGH"></a><a id="ADDCI4319"></a>Example 4-9 Creating a Package Specification</p>
<pre>
create or replace package DS_package as 
    function  ds_findmin(data clob) return pls_integer; 
    function  ds_findmax(data clob) return pls_integer; 
     pragma restrict_references(ds_findmin, WNDS, WNPS); 
     pragma restrict_references(ds_findmax, WNDS, WNPS); 
end;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="roadmap.htm#CHDHAIFH">Chapter 2, "Roadmap to Building a Data Cartridge"</a> for the <span class="italic">DataStream</span> type and type body definitions</p>
</li>
<li>
<p><a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about PL/SQL packages</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004752"></a><a id="ADDCI4320"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref181"></a><a id="sthref182"></a><a id="sthref183"></a><a id="sthref184"></a>Pragma RESTRICT_REFERENCES</h2>
<p>To execute a SQL statement that calls a member function, Oracle must know the <span class="bold">purity level</span> of the function, or the extent to which the function is free of side effects. The term <span class="bold">side effect</span>, refers to accessing database tables, package variables, and so forth for reading or writing. It is important to control side effects because they can prevent the proper parallelization of a query, produce order-dependent and therefore indeterminate results, or require impermissible actions such as the maintenance of package state across user sessions.</p>
<p>A member function called from a SQL statement can be restricted so that it cannot:</p>
<ul>
<li>
<p>Insert into, update, or delete database tables</p>
</li>
<li>
<p>Be executed remotely or in parallel if it reads or writes the values of packaged variables</p>
</li>
<li>
<p>Write the values of packaged variables unless it is called from a <code>SELECT</code>, <code>VALUES</code>, or <code>SET</code> clause</p>
</li>
<li>
<p>Call another method or subprogram that violates any of these rules</p>
</li>
<li>
<p>Reference a view that violates any of these rules</p>
</li>
</ul>
<p>You must use the pragma <code>RESTRICT_REFERENCES</code>, a compiler directive, to enforce these rules. In <a href="#CIHHCCCI">Example 4-10</a>, the purity level of the <code>DataStreamMax</code> method of type <code>DataStream</code> is asserted to be <code>write no database state</code> (<code>WNDS</code>) and <code>write no package state</code> (<code>WNPS</code>).</p>
<div class="example">
<p class="titleinexample"><a id="CIHHCCCI"></a><a id="ADDCI4321"></a>Example 4-10 Asserting the Purity Level of a Type</p>
<pre>
CREATE TYPE DataStream AS OBJECT (
         ....
PRAGMA RESTRICT_REFERENCES (DataStreamMax, WNDS, WNPS)
         ... );
</pre></div>
<!-- class="example" -->
<p>Member methods that call external procedures cannot do so directly but must route the calls through a package, because the arguments to external procedures cannot be object types. A member function automatically gets a <code>SELF</code> reference as its first argument. Therefore, member methods in objects types cannot call out directly to external procedures.</p>
<p>Collecting all external calls into a package makes for a better design. The purity level of the package must also be asserted. Therefore, when the package named <code>DS_Package</code> is declared and all external procedure calls from type <code>DataStream</code> are routed through this package, the purity level of the package is also declared, as demonstrated in <a href="#CIHIFHEH">Example 4-11</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHIFHEH"></a><a id="ADDCI4322"></a>Example 4-11 Asserting the Purity Level of a Package</p>
<pre>
CREATE OR REPLACE PACKAGE DS_Package AS
   ... 
PRAGMA RESTRICT_REFERENCES (ds_findmin, WNDS, WNPS)
   ...
end;
</pre></div>
<!-- class="example" -->
<p>In addition to <code>WNDS</code> and <code>WNPS</code>, it is possible to specify two other constraints: <code>read no database state</code> (<code>RNDS</code>) and <code>read no package state</code> (<code>RNPS</code>). These two constraints are normally useful if you have parallel queries.</p>
<p>Each constraint is independent of the others, and does not imply another. Choose the set of constraints based on application-specific requirements.</p>
<p>You can also specify the keyword <code>DEFAULT</code> instead of a method or procedure name, in which case the pragma applies to all member functions of the type or procedures of the package, as demonstrated <a href="#CIHIDAGA">Example 4-12</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CIHIDAGA"></a><a id="ADDCI4323"></a>Example 4-12 Asserting a Default Purity Level for All Type Methods and Package Procedures</p>
<pre>
PRAGMA RESTRICT_REFERENCES (DEFAULT, WNDS, WNPS)
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="variable">Oracle Database PL/SQL Language Reference</span></a>. for more information about the rules governing purity levels and side effects</p>
</li>
<li>
<p><a class="olink ADFNS" href="../e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>. for more information about controlling side effects using the <code>RESTRICT_REFERENCES</code> pragma</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1004791"></a><a id="ADDCI4324"></a>
<div class="sect1">
<h2 class="sect1">Privileges Required to Create Procedures and Functions <a id="sthref185"></a><a id="sthref186"></a></h2>
<p>To create a standalone procedure or function, or a package specification or a body, you must have the <code>CREATE</code> <code>PROCEDURE</code> system privilege to create a procedure or package in your schema, or the <code>CREATE</code> <code>ANY</code> <code>PROCEDURE</code> system privilege to create a procedure or package in another user's schema.</p>
<p>For the compilation of the procedure or package, the <span class="italic">owner</span> of the procedure or package must have been explicitly granted the necessary object privileges for all objects referenced within the body of the code. The owner cannot have obtained required privileges through roles.</p>
<p>For more information about privilege requirements for creating procedures and functions, see the chapter about using procedures and packages in the <a class="olink ADFNS" href="../e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="i1004803"></a><a id="ADDCI4325"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref187"></a><a id="sthref188"></a>Debugging PL/SQL Code</h2>
<p>One of the simplest ways to debug PL/SQL code is to try each method, block, or statement interactively using SQL*Plus, and fix any problems before proceeding to the next statement. If you need more information on an error message, enter the statement <code>SHOW</code> <code>ERRORS</code>. Also. consider displaying statements for run-time debugging. You can debug stored procedures and packages using the <code>DBMS_OUTPUT</code> package, by inserting <code>PUT</code> and <code>PUTLINE</code> statements into the code to output the values of variables and expressions to your terminal, as demonstrated in<a href="#CIHEEDCB">Example 4-13</a>.</p>
<div class="example">
<p class="titleinexample"><a id="CIHEEDCB"></a><a id="ADDCI4326"></a>Example 4-13 Outputing Variable Values to the Terminal, for Debugging</p>
<pre>
Location in module: <span class="italic">location</span>
Parameter name: <span class="italic">name</span>
Parameter value: <span class="italic">value</span>
</pre></div>
<!-- class="example" -->
<p>A PL/SQL tracing tool provides more information about exception conditions in application code. You can use this tool to trace the execution of server-side PL/SQL statements. Object type methods cannot be traced directly, but you can trace any PL/SQL functions or procedures that a method calls. The tracing tool also provides information about exception conditions in the application code. The trace output is written to the Oracle server trace file. Note that only the database administrator has access to the file.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>The <a class="olink ADFNS" href="../e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>. describes the tracing tool</p>
</li>
<li>
<p>The <a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> and the <a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference.</span></a> describe the <code>DBMS_OUTPUT</code> package</p>
</li>
</ul>
</div>
<a id="ADDCI4327"></a>
<div class="sect2"><a id="sthref189"></a>
<h3 class="sect2"><a id="sthref190"></a><a id="sthref191"></a>Notes for C and C++ Programmers</h3>
<p>If you are a C or C++ programmer, several PL/SQL conventions and requirements may differ from your expectations</p>
<ul>
<li>
<p>= means equal (not assign).</p>
</li>
<li>
<p>:= means assign (as in Algol).</p>
</li>
<li>
<p><code>VARRAYs</code> begin at index <code>1</code> (not <code>0</code>).</p>
</li>
<li>
<p>Comments begin with two hyphens (--), not with <code>//</code> or <code>/*</code>.</p>
</li>
<li>
<p>The <code>IF</code> statement requires the <code>THEN</code> keyword.</p>
</li>
<li>
<p>The <code>IF</code> statement must be concluded with the <code>END</code> <code>IF</code> keyword (which comes after the <code>ELSE</code> clause, if there is one).</p>
</li>
<li>
<p>There is no <code>PRINTF</code> statement. The comparable feature is the <code>DBMS_OUTPUT</code>.<code>PUT_LINE</code> statement. In this statement, literal and variable text is separated using the double vertical bar, <code>||</code>.</p>
</li>
<li>
<p>A function must have a return value, and a procedure cannot have a return value.</p>
</li>
<li>
<p>If you call a function, it must be on the right side of an assignment operator.</p>
</li>
<li>
<p>Many PL/SQL keywords cannot be used as variable names.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="ADDCI4328"></a>
<div class="sect2"><a id="sthref192"></a>
<h3 class="sect2"><a id="sthref193"></a>Common Potential Errors</h3>
<p>This section presents several kinds of errors you may make in creating a data cartridge.</p>
<a id="ADDCI4329"></a>
<div class="sect3"><a id="sthref194"></a>
<h4 class="sect3"><a id="sthref195"></a>Signature Mismatches</h4>
<pre>
13/19    PLS-00538: subprogram or cursor '&lt;name&gt;' is declared in an object
         type specification and must be defined in the object type body
15/19    PLS-00539: subprogram '&lt;name&gt;' is declared in an object type body
         and must be defined in the object type specification
</pre>
<p>If you see either or both of these messages, you have made an error with the signature for a procedure or function. In other words, you have a mismatch between the function or procedure prototype that you entered in the object specification, and the definition in the object body.</p>
<p>Ensure that parameter orders, parameter spelling (including case), and function returns are identical. Use copy-and-paste to avoid errors in typing.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4330"></a>
<div class="sect3"><a id="sthref196"></a>
<h4 class="sect3"><a id="sthref197"></a>RPC Time Out</h4>
<pre>
ORA-28576: lost RPC connection to external procedure agent
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at line 34
</pre>
<p>This error might occur after you exit the debugger for the DLL. Restart the program outside the debugger.</p>
</div>
<!-- class="sect3" -->
<a id="ADDCI4331"></a>
<div class="sect3"><a id="sthref198"></a>
<h4 class="sect3"><a id="sthref199"></a><a id="sthref200"></a>Package Corruption</h4>
<pre>
ERROR at line 1:
ORA-04068: existing state of packages has been discarded
ORA-04063: package body "&lt;name&gt;" has errors
ORA-06508: PL/SQL: could not find program unit being called
ORA-06512: at "&lt;name&gt;", line &lt;number&gt;
ORA-06512: at line &lt;number&gt;
</pre>
<p>This error might occur if you are extending an existing data cartridge; it indicates that the package has been corrupted and must be recompiled.</p>
<p>Before you can perform the recompilation, you must delete all tables and object types that depend upon the package that you are recompiling. To find the dependents on a Windows NT system, use the Oracle Administrator toolbar. Click the Schema button, log in as <code>sys\change_on_install</code>, and find packages and tables that you created. Drop these packages and tables by entering SQL statements in the SQL*Plus interface, as shown in <a href="#CIHDJDJJ">Example 4-14</a> :</p>
<div class="example">
<p class="titleinexample"><a id="CIHDJDJJ"></a><a id="ADDCI4332"></a>Example 4-14 Dropping Packages and Tables</p>
<pre>
Drop type <span class="italic">type_name</span>;
Drop table <span class="italic">table_name</span> cascade constraints;
</pre></div>
<!-- class="example" -->
<p>The recompilation can then be done using the SQL statements in <a href="#CIHGGHIH">Example 4-15</a>:</p>
<div class="example">
<p class="titleinexample"><a id="CIHGGHIH"></a><a id="ADDCI4333"></a>Example 4-15 Recompiling Packages</p>
<pre>
Alter type <span class="italic">type_name</span> compile body;
Alter type t<span class="italic">ype_name</span> compile specification;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1236">
<tr>
<td class="cellalignment1243">
<table class="cellalignment1241">
<tr>
<td class="cellalignment1240"><a href="obj_types.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1240"><a href="c_cpp_java.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1245">
<table class="cellalignment1239">
<tr>
<td class="cellalignment1240"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1240"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1240"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1240"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1240"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1240"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
