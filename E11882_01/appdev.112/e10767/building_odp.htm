<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Retrieving and Updating with Oracle Data Provider for .NET</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1 Build 005" />
<meta name="dcterms.created" content="2009-07-23T17:44:4Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database 2 Day + .NET Developer's Guide" />
<meta name="dcterms.identifier" content="E10767-01" />
<meta name="dcterms.isVersionOf" content="TDPNG" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2006, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="connecting.htm" title="Previous" type="text/html" />
<link rel="Next" href="building_odt.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10767.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/15</span> <!-- End Header --><a id="CHDDJIFI"></a>
<h1 class="chapter"><span class="secnum">4</span> <a id="TDPNG40000"></a>Retrieving and Updating with Oracle Data Provider for .NET</h1>
<p>This chapter contains:<a id="sthref233"></a></p>
<ul>
<li>
<p><a href="#CEGBBCEF">Using the Command Object</a></p>
</li>
<li>
<p><a href="#CEGGBGAA">Retrieving Data: a Simple Query</a></p>
</li>
<li>
<p><a href="#CEGCGDAB">Retrieving Data: Bind Variables</a></p>
</li>
<li>
<p><a href="#CEGFJFEB">Retrieving Data: Multiple Values</a></p>
</li>
<li>
<p><a href="#CEGHAFDH">Using the DataSet Class with Oracle Data Provider for .NET</a></p>
</li>
<li>
<p><a href="#CHDHHGCG">Enabling Updates to the Database</a></p>
</li>
<li>
<p><a href="#CEGCEFHJ">Inserting, Deleting, and Updating Data</a></p>
</li>
</ul>
<a id="CEGBBCEF"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPNG40020"></a>Using the Command Object<a id="sthref234"></a><a id="sthref235"></a><a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a><a id="sthref240"></a></h2>
<p>To view, edit, insert or delete data in a database, you must encapsulate a request in an <code>OracleCommand</code> object specifying a SQL command, stored procedure, or table name. The <code>OracleCommand</code> object creates the request, sends it to the database, and returns the result.</p>
<p class="subhead2"><a id="sthref241"></a>To use the command object:</p>
<ol>
<li>
<p>Make two copies of <code>Form1</code><code><span class="codeinlineitalic">.xx</span></code>, from application HR_Connect_<code><span class="codeinlineitalic">xx</span></code> in <a href="connecting.htm#CEGFHEDI">Chapter 3, "Building a Simple .NET Application Using ODP.NET"</a>. To make copies, see the instructions in <a href="appendix_b.htm#BABJJIJJ">Appendix B, "Copying a Form"</a>.</p>
<p>Name the copies <code>Form2.cs</code> or <code>Form2.vb</code> and <code>Form3.cs</code> or <code>Form3.vb</code>. The first copy is for the first part of the chapter, and the second copy for the second part of the chapter</p>
</li>
<li>
<p><a id="BABIGEBJ"></a>Open <code>Form2.cs</code> or <code>Form2.vb</code>.</p>
<p>Note that the actual form in the designer still says Form1, as you renamed code files but not the actual form controls within the project.</p>
</li>
<li>
<p>Create a string that represents the SQL query and add to the body of the <code>try</code> statement.</p>
<p>The new code is in bold typeface.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CHDCEICG"></a>
try
{
    conn.Open();
    connect.Enabled = false;
 
    <span class="bold">// SQL Statement</span>
    <span class="bold">string sql = "select department_name from departments"</span>
     <span class="bold">  + " where department_id = 10";</span>
}
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CHDDDGIA"></a>
Try
      conn.Open()
      connect.Enabled = False
 
     <span class="bold">Dim sql As String = "select department_name from departments" &amp; _</span>
   <span class="bold">    "where department_id = 10"</span>
 
</pre></li>
<li>
<p><a id="BABGFHAI"></a>Use the new <code>sql</code> variable to create the <code>OracleCommand</code> object, and set the <code>CommandType</code> property to run a text command.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
try
{
    conn.Open();
    connect.Enabled = false;
 
    // SQL Statement
    string sql = "select department_name from departments"
       + " where department_id = 10";

<span class="bold">OracleCommand cmd = new OracleCommand(sql, conn);</span>
<span class="bold">cmd.CommandType = CommandType.Text;</span>
}
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
Try
      conn.Open()
      connect.Enabled = False
 
      Dim sql As String = "select department_name from departments" &amp; _
         "where department_id = 10"
 
<span class="bold">Dim cmd As New OracleCommand(sql, conn)</span>
<span class="bold">cmd.CommandType = CommandType.Text</span>
</pre></li>
<li>
<p>Save your work.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CEGGBGAA"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPNG40030"></a>Retrieving Data: a Simple Query<a id="sthref242"></a><a id="sthref243"></a><a id="sthref244"></a><a id="sthref245"></a><a id="sthref246"></a><a id="sthref247"></a><a id="sthref248"></a><a id="sthref249"></a><a id="sthref250"></a><a id="sthref251"></a><a id="sthref252"></a></h2>
<p>This section demonstrates retrieving data from the database.</p>
<p>The <code>ExecuteReader()</code> method of an <code>OracleCommand</code> object returns an <code>OracleDataReader</code> object, which can be accessed to display the result on the form. The application uses a ListBox to display the results.</p>
<p class="subhead2"><a id="sthref253"></a>To retrieve data:</p>
<ol>
<li>
<p><a id="BABHCFGH"></a>Create an <code>OracleDataReader</code> object, by adding the code indicated to the bottom of the Try block of the <code>connect_Click()</code> method.</p>
<p>This enables you to read the result of the query.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CEGCFIAH"></a>
OracleDataReader dr = cmd.ExecuteReader();
dr.Read();
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CEGGHCFC"></a>
Dim dr As OracleDataReader = cmd.ExecuteReader()
dr.Read()
</pre></li>
<li>
<p>Open Form1 in Design view. From the <span class="bold">View</span> menu, select <span class="bold">Designer</span>.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Toolbox</span>.</p>
</li>
<li>
<p>From the Toolbox, select a <span class="bold">Label</span> and drag it onto Form1.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Properties Window</span>.</p>
</li>
<li>
<p>In the Properties window, change the <span class="bold">Text</span> of the label to <code>Department</code>.</p>
</li>
<li>
<p>From the Toolbox, under Window forms, select a <span class="bold">ListBox</span> and drag it onto Form1.</p>
</li>
<li>
<p><a id="BABBJGJH"></a>In the Properties window, under Design, change the <span class="bold">Name</span> to <code>departments</code>.</p>
<img width="549" height="194" src="img/simple1.gif" alt="Description of simple1.gif follows" title="Description of simple1.gif follows" /><br />
<a id="sthref254" href="img_text/simple1.htm">Description of the illustration simple1.gif</a><br />
<br /></li>
<li>
<p>Add accessor type methods for retrieving data from the query result.</p>
<p>Double-click the connect button to edit the <code>connect_click()</code> method, and add the code indicated to the bottom of the <code>try</code> block.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CHDFEIBB"></a>
departments.Items.Add(dr.GetString(0)); 
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CHDIDFBE"></a>
departments.Items.Add(dr.GetString(0))
</pre>
<p>Typed accessors, such as <code>GetString</code>, return native .NET data types and native Oracle data types. Zero-based ordinals passed to the accessors specify which column in the result set to return.</p>
</li>
<li>
<p><a id="BABGEEIB"></a>Build and save the application.</p>
</li>
<li>
<p>Run the application. Enter the login and data source.</p>
<p>After you connect, the <code>departments</code> list box shows <code>Administration</code>, the correct name for department number <code>10</code> in the HR schema, as requested by the <code>SELECT</code> statement.</p>
<img width="549" height="194" src="img/simple2.gif" alt="Description of simple2.gif follows" title="Description of simple2.gif follows" /><br />
<a id="sthref255" href="img_text/simple2.htm">Description of the illustration simple2.gif</a><br />
<br /></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CEGCGDAB"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPNG40040"></a>Retrieving Data: Bind Variables<a id="sthref256"></a><a id="sthref257"></a><a id="sthref258"></a><a id="sthref259"></a><a id="sthref260"></a><a id="sthref261"></a><a id="sthref262"></a><a id="sthref263"></a><a id="sthref264"></a><a id="sthref265"></a><a id="sthref266"></a><a id="sthref267"></a><a id="sthref268"></a><a id="sthref269"></a><a id="sthref270"></a><a id="sthref271"></a><a id="sthref272"></a><a id="sthref273"></a><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a><a id="sthref277"></a><a id="sthref278"></a><a id="sthref279"></a><a id="sthref280"></a><a id="sthref281"></a><a id="sthref282"></a></h2>
<p>Bind variables are placeholders inside a SQL statement. When a database receives a SQL statement, it determines if the statement has already been executed and stored in memory. If the statement does exist in memory, Oracle Database can reuse it and skip the task of parsing and optimizing the statement. Using bind variables makes the statement reusable with different input values. Using bind variables also improves query performance in the database, eliminates the need for special handling of literal quotation marks in the input, and protects against SQL injection attacks.</p>
<p>The following code shows a typical <code>SELECT</code> statement that does not use bind variables, with the value <code>10</code> specified in the <code>WHERE</code> clause of the statement.</p>
<pre>
<a id="BABDJIAJ"></a>
SELECT department_name FROM departments WHERE department_id = 10
</pre>
<p>The following code replaces the numerical value with a bind variable <code>:department_id</code>. A bind variable identifier always begins with a single colon ( <code>:)</code>.</p>
<pre>
SELECT department_name FROM departments WHERE department_id = :department_id
</pre>
<p>Note that bind variables can also be used with <code>UPDATE</code>, <code>INSERT</code>, and <code>DELETE</code> statements, and also with stored procedures. The following code illustrates how to use bind variables in an <code>UPDATE</code> statement:</p>
<pre>
UPDATE departments SET department_name = :department_name
  WHERE departname_id = : department_id
</pre>
<p>See <a href="#CEGCEFHJ">"Inserting, Deleting, and Updating Data"</a> for more details.</p>
<p>You can use the <code>OracleParameter</code> class to represent each bind variable in your .NET code. The <code>OracleParameterCollection</code> class contains the <code>OracleParameter</code> objects associated with the <code>OracleCommand</code> object for each statement. The <code>OracleCommand</code> class passes your SQL statement to the database and returns the results to your application.</p>
<p>You can bind variables by position or by name by setting the <code>OracleCommand</code> property <code>BindByName</code> (which defaults to <code>false</code>).</p>
<ul>
<li>
<p>Binding by position</p>
<p>You must use the <code>Add()</code> method to add the parameters to the <code>OracleParameterCollection</code> in the same order as they appear in the SQL statement or stored procedure.</p>
</li>
<li>
<p>Bind by name</p>
<p>You may add the parameters to the collection in any order; however, you must set the <code>ParameterName</code> property for the parameter object to the same name as the bind variable identifier in the stored procedure declaration.</p>
</li>
</ul>
<p>In addition to the binding mode (by position or by name), the .NET developer sets the following properties for each parameter object: <code>Direction</code>, <code>OracleDbType</code>, <code>Size</code>, and <code>Value</code>.</p>
<ul>
<li>
<p><code><span class="codeinlinebold">Direction</span></code> Bind variables may be used as output, input, or input/output parameters. The <code>Direction</code> property indicates the direction of each parameter. The default value of the <code>Direction</code> property is <code>Input</code>.</p>
</li>
<li>
<p><code><span class="codeinlinebold">OracleDbType</span></code> property indicates whether or not the parameter is a <code>number</code>, a <code>date</code>, a <code>VARCHAR2</code>, and so on.</p>
</li>
<li>
<p><code><span class="codeinlinebold">Size</span></code> indicates the maximum data size that parameters with a variable length data type, such as <code>VARCHAR2</code>, can hold.</p>
</li>
<li>
<p><code><span class="codeinlinebold">Value</span></code> contains the parameter value, either before statement execution (for input parameters), after execution (for output parameters), or both before and after (for input/output parameters).</p>
</li>
</ul>
<p class="subhead2"><a id="sthref283"></a>To retrieve data using bind variables:</p>
<ol>
<li>
<p>Move the ListBox named Departments to the right.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Toolbox</span>.</p>
</li>
<li>
<p>From the <span class="bold">Toolbox</span>, select a <span class="bold">TextBox</span> and drag it onto Form1, under the label that says Department.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Properties Window</span>.</p>
</li>
<li>
<p>In the Properties window, change <span class="bold">Name</span> to <code>departmentID</code>.</p>
<img width="549" height="195" src="img/bind0.gif" alt="Description of bind0.gif follows" title="Description of bind0.gif follows" /><br />
<a id="sthref284" href="img_text/bind0.htm">Description of the illustration bind0.gif</a><br />
<br /></li>
<li>
<p>Change the <code>SELECT</code> statement to use the bind variable by adding the code indicated to the Try block of the <code>connect_Click()</code> method.</p>
<p>Changed or new code is in bold typeface.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="BABEDGDE"></a>
string sql = "select department_name from departments where department_id = <span class="bold">" +</span>
  <span class="bold">":department_id"</span>;
OracleCommand cmd = new OracleCommand(sql, conn);
cmd.CommandType = CommandType.Text;
<span class="bold">OracleParameter p_department_id = new OracleParameter();</span> 
<span class="bold">p_department_id.OracleDbType = OracleDbType.Decimal;</span>     
<span class="bold">p_department_id.Value = departmentID.Text;</span>                              
<span class="bold">cmd.Parameters.Add(p_department_id); </span>                    

OracleDataReader dr = cmd.ExecuteReader();
dr.Read();

departments.Items.Add(dr.GetString(0));
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CEGDDEJI"></a>
Dim sql As String = "select department_name from departments where" &amp; _
  "department_id= "<span class="bold">:department_id</span>"
Dim cmd As OracleCommand = New OracleCommand(sql, conn)
cmd.CommandType = CommandType.Text
<span class="bold">Dim p_department_id as OracleParameter = new OracleParameter()</span> 
<span class="bold">p_department_id.OracleDbType = OracleDbType.Decimal</span>     
<span class="bold">p_department_id.Value = departmentID.Text</span>
<span class="bold">cmd.Parameters.Add(p_department_id) </span>

Dim dr As OracleDataReader = cmd.ExecuteReader()
dr.Read()

departments.Items.Add(dr.GetString(0))
</pre>
<p>For this code, the parameter object sets the <code>OracleDbType</code> property, but there is no need to set the <code>Direction</code> property because it uses the default value, <code>Input</code>. There is no need to set the <code>Size</code> property because the object is an input parameter, and the data provider can determine the size from the value.</p>
</li>
<li>
<p>Save and run the application.</p>
</li>
<li>
<p><a id="BABFCBEG"></a>Enter the login information, and a typical department number, such as 50, from the HR schema.</p>
</li>
<li>
<p>Click <span class="bold">Connect</span>.</p>
<p>The application returns the name of the department that corresponds to the department ID.</p>
<img width="549" height="195" src="img/bind1.gif" alt="Description of bind1.gif follows" title="Description of bind1.gif follows" /><br />
<a id="sthref285" href="img_text/bind1.htm">Description of the illustration bind1.gif</a><br />
<br /></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CEGFJFEB"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPNG40050"></a>Retrieving Data: Multiple Values<a id="sthref286"></a><a id="sthref287"></a><a id="sthref288"></a><a id="sthref289"></a><a id="sthref290"></a><a id="sthref291"></a><a id="sthref292"></a><a id="sthref293"></a></h2>
<p>You frequently need to retrieve more than just one value from the database. A <code>DataReader</code> object can retrieve values for multiple columns and multiple rows. Consider the multiple column, multiple row query in the following example:</p>
<pre>
<a id="CHDEHDGC"></a>
SELECT department_id, department_name, manager_id, location_id
  FROM departments
  WHERE department_id &lt; 100
</pre>
<p>Processing multiple rows from the <code>DataReader</code> object requires a looping construct. Also, a control that can display multiple rows is useful. Because the <code>OracleDataReader</code> object is a forward-only, read-only cursor, it cannot be bound to an updatable or backward scrollable control such as Windows Forms <code>DataGrid</code> control. An <code>OracleDataReader</code> object is, however, compatible with a <code>ListBox</code> control.</p>
<p class="subhead2"><a id="sthref294"></a>To retrieve multiple values:</p>
<ol>
<li>
<p>In the <code>try</code> block of the <code>connect_Click()</code> method, change the SQL query to return a multiple row result set and add a while loop to enclose the read method that displays the department names.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CHDDBDFH"></a>
try
{
  ...
string sql = "select department_name from departments where department_id" +
  "<span class="bold">&lt; :department_id</span>";
...
  <span class="bold">while (dr.Read())</span>
  <span class="bold">{</span> 
    departments.Items.Add(dr.GetString(0));
  <span class="bold">}</span>
}
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CHDJJFAJ"></a>
Try
  ...
  Dim sql As String = "select department_name from departments " &amp; _
        "where department_id <span class="bold">&lt; :department_id"</span>
...
  <span class="bold">While (dr.Read())</span>
    departments.Items.Add(dr.GetString(0))
  <span class="bold">End While</span>
</pre></li>
<li>
<p>Save and run the application.</p>
</li>
<li>
<p>Enter the login information and enter 50 for the department.</p>
</li>
<li>
<p>Click <span class="bold">Connect</span>.</p>
<p>The application returns the name of the departments that correspond to the query.</p>
<img width="551" height="201" src="img/bind2.gif" alt="Description of bind2.gif follows" title="Description of bind2.gif follows" /><br />
<a id="sthref295" href="img_text/bind2.htm">Description of the illustration bind2.gif</a><br />
<br /></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CEGHAFDH"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="TDPNG40060"></a>Using the DataSet Class with Oracle Data Provider for .NET<a id="sthref296"></a><a id="sthref297"></a><a id="sthref298"></a><a id="sthref299"></a><a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a><a id="sthref305"></a></h2>
<p>The <code>DataSet</code> class provides a memory-resident copy of database data. It consists of one or more tables that store relational or XML data. Unlike an <code>OracleDataReader</code> object, a <code>DataSet</code> is updatable and backward scrollable.</p>
<p class="subhead2"><a id="sthref306"></a>To use the DataSet class:</p>
<ol>
<li>
<p>If you have not done so before, make another copy of the Form1 that you completed in Chapter 3, and name it <code>Form3.vb</code> or <code>.cs</code>, as described in <a href="appendix_b.htm#BABJJIJJ">Appendix B, "Copying a Form"</a>. If <code>Form1.</code><code><span class="codeinlineitalic">xx</span></code> does not appear in the Solution Explorer, from the <span class="bold">Project</span> menu, select <span class="bold">Show All Files</span>.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Designer</span> view.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Toolbox</span>.</p>
</li>
<li>
<p><a id="BABGDADI"></a>From the <span class="bold">Toolbox</span>, select a <span class="bold">DataGridView</span> and drag it onto Form1.</p>
</li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Properties Window</span>.</p>
</li>
<li>
<p><a id="CEGJIBEB"></a>In the <span class="bold">Properties</span> window, change the <span class="bold">Name</span> of the data grid view to <code>departments</code>.</p>
<img width="525" height="270" src="img/dataset1.gif" alt="Description of dataset1.gif follows" title="Description of dataset1.gif follows" /><br />
<a id="sthref307" href="img_text/dataset1.htm">Description of the illustration dataset1.gif</a><br />
<br /></li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Code</span>.</p>
</li>
<li>
<p><a id="CHDCGBGH"></a>Immediately after the <code>conn</code> declaration in the code, add variable declarations to the class variables, as indicated.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CEGIEGDI"></a>
public partial class Form1 : Form
{
  public Form1()
  {
      InitializeComponent();
  }
  private OracleConnection conn = new OracleConnection();
  <span class="bold">private OracleCommand cmd;</span>
  <span class="bold">private OracleDataAdapter da;</span>
  <span class="bold">private OracleCommandBuilder cb;</span>
  <span class="bold">private DataSet ds;</span>
...
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CEGCBBCC"></a>
Public Class Form1    Dim conn As New OracleConnection     <span class="bold">Private cmd As OracleCommand</span>
    <span class="bold">Private da As OracleDataAdapter</span>
    <span class="bold">Private cb As OracleCommandBuilder</span>
    <span class="bold">Private ds As DataSet</span>
</pre></li>
<li>
<p>Within the <code>connect_Click()</code> method <code>try</code> block, add code to:</p>
<ul>
<li>
<p>Query the database</p>
</li>
<li>
<p>Fill the <code>DataSet</code> with the result of the command query</p>
</li>
<li>
<p>Bind the <code>DataSet</code> to the data grid (departments)</p>
</li>
</ul>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CEGEICJG"></a>
conn.Open();
connect.Enabled = false;
 
<span class="bold">string sql = "select * from departments where department_id &lt; 60";</span>
<span class="bold">cmd = new OracleCommand(sql, conn);</span>
<span class="bold">cmd.CommandType = CommandType.Text;</span>

<span class="bold">da = new OracleDataAdapter(cmd);</span>
<span class="bold">cb = new OracleCommandBuilder(da);</span>
<span class="bold">ds = new DataSet();</span>
 
<span class="bold">da.Fill(ds);</span>
 
<span class="bold">departments.DataSource = ds.Tables[0];</span>
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
conn.Open()
connect.Enabled = False
 
<span class="bold">Dim sql As String = "select * from departments where department_id &lt; 60"</span>
<span class="bold">cmd = New OracleCommand(sql, conn)</span>
<span class="bold">cmd.CommandType = CommandType.Text</span>
 
<span class="bold">da = New OracleDataAdapter(cmd)</span>
<span class="bold">cb = New OracleCommandBuilder(da)</span>
<span class="bold">ds = New DataSet()</span>
 
<span class="bold">da.Fill(ds)</span>
 
<span class="bold">departments.DataSource = ds.Tables(0)</span>
</pre></li>
<li>
<p>Build and save the application.</p>
</li>
<li>
<p><a id="BABCIDBA"></a>Run the application, entering the login and data source.</p>
<p>After you successfully connect to the database, the data grid is populated with the results of the query.</p>
<img width="527" height="275" src="img/dataset3.gif" alt="Description of dataset3.gif follows" title="Description of dataset3.gif follows" /><br />
<a id="sthref308" href="img_text/dataset3.htm">Description of the illustration dataset3.gif</a><br />
<br /></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CHDHHGCG"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Enabling Updates to the Database</h2>
<p>At this point, the <code>DataSet</code> contains a client copy of the database data. In this section, you will add a button that enables client data changes to be saved back to the database. The following section will show you how to test updating, inserting, and deleting the data.</p>
<p><span class="bold">To enable saving data from the DataSet to the database:</span></p>
<ol>
<li>
<p>From the Toolbox, drag and drop a <span class="bold">Button</span> onto Form1.</p>
</li>
<li>
<p>In the <span class="bold">Properties</span> window, change the <span class="bold">Name</span> of the button to <code>save</code>.</p>
<p>Change the <span class="bold">Text</span> property to <code>Save</code>.</p>
</li>
<li>
<p>At the top of the <span class="bold">Properties</span> Window, click <span class="bold">Events</span> (the lightning bolt). In the list of events, select the click event. In the second column, enter the event name, <code>save_Click</code>.</p>
<img width="523" height="271" src="img/dataset2.gif" alt="Description of dataset2.gif follows" title="Description of dataset2.gif follows" /><br />
<a id="sthref309" href="img_text/dataset2.htm">Description of the illustration dataset2.gif</a><br />
<br /></li>
<li>
<p>From the <span class="bold">View</span> menu, select <span class="bold">Code</span>.</p>
</li>
<li>
<p>Add code that updates the data, to the body of the <code>save_Click()</code> method, as indicated.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
da.Update(ds.Tables[0]);
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
da.Update(ds.Tables(0))
</pre>
<p>You may see some errors show up in the Error List. These will disappear after you add the code in the next step.</p>
</li>
<li>
<p><a id="BABEFCCA"></a>Within the <code>Form()</code> method or <code>Form1_Load</code> method, add the code indicated.</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
<a id="CHDCDBGH"></a>
public Form1()
{
    InitializeComponent();
    <span class="bold">save.Enabled = false;</span>
}
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
<a id="CHDCGBAD"></a>
Private Sub Form1_Load(ByVal sender As System.Object, &amp; _
    ByVal e As System.EventArgs) Handles MyBase.Load
    <span class="bold">save.Enabled = false</span>

</pre></li>
<li>
<p>Within the <code>connect_Click()</code> method <code>try</code> block, add code to enable the <span class="bold">Save</span> button as indicated:</p>
<p><span class="bold">Visual C#:</span></p>
<pre>
conn.Open();
 ...
departments.DataSource = ds.Tables[0];
 
<span class="bold">save.Enabled = true;</span>
</pre>
<p><span class="bold">Visual Basic:</span></p>
<pre>
conn.Open()
...
departments.DataSource = ds.Tables(0)
 
<span class="bold">save.Enabled = True</span>
</pre></li>
<li>
<p><a id="BABBAICE"></a>Remove the <code>conn.Dispose()</code> call from the <code>finally</code> block in the <code>connect_Click()</code> method.</p>
<p>Note: In the previous code used in this example, this method was necessary to dispose or close the connection. However, with these changes to the code, it is necessary to keep the connection open after the query result returns, so that data changes made by the end user are propagated to the database. A general override call, <code>components.Dispose()</code>, is already part of the definition of Form1.</p>
</li>
<li>
<p>Build and save the application.</p>
</li>
<li>
<p>Run the application, entering the login and data source.</p>
<p>After you successfully connect to the database, the data grid is populated with the results of the query.</p>
<img width="518" height="267" src="img/dataset3a.gif" alt="Description of dataset3a.gif follows" title="Description of dataset3a.gif follows" /><br />
<a id="sthref310" href="img_text/dataset3a.htm">Description of the illustration dataset3a.gif</a><br />
<br /></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CEGCEFHJ"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Inserting, Deleting, and Updating Data<a id="sthref311"></a><a id="sthref312"></a><a id="sthref313"></a></h2>
<p>This section demonstrates how to use your new application to directly manipulate data in the database.</p>
<p class="subhead2"><a id="sthref314"></a>To insert, delete and update data:</p>
<ol>
<li>
<p>Run the application you created in the last section, entering the login and data source, and connecting to the database.</p>
</li>
<li>
<p><a id="BABJFFDJ"></a>At the bottom of the data grid, enter a new record at the <span class="bold">*</span> prompt:</p>
<ul>
<li>
<p>For <code>DEPARTMENT_ID</code>, enter <code>5</code>.</p>
</li>
<li>
<p>For <code>DEPARTMENT_NAME</code>, enter <code>Community Outreach</code>.</p>
</li>
<li>
<p>Leave <code>MANAGER_ID</code> without a value.</p>
</li>
<li>
<p>For <code>LOCATION_ID</code>, enter <code>1700</code>.</p>
</li>
</ul>
<img width="527" height="275" src="img/dataset4.gif" alt="Description of dataset4.gif follows" title="Description of dataset4.gif follows" /><br />
<a id="sthref315" href="img_text/dataset4.htm">Description of the illustration dataset4.gif</a><br />
<br /></li>
<li>
<p>Click <span class="bold">Save</span>.</p>
</li>
<li>
<p><a id="BABFIIIE"></a>Close the application to check if the new record is saved.</p>
</li>
<li>
<p>Run the application again, and connect to the database.</p>
<p>Note that the new department is at the top of the <code>DEPARTMENTS</code> table, in numerical order by <code>DEPARTMENT_ID</code>.</p>
</li>
<li>
<p><a id="BABEAAAC"></a>Change the name of the department to <code>Community Volunteers</code>, and click the <span class="bold">Save</span> button.</p>
<img width="526" height="272" src="img/dataset10.gif" alt="Description of dataset10.gif follows" title="Description of dataset10.gif follows" /><br />
<a id="sthref316" href="img_text/dataset10.htm">Description of the illustration dataset10.gif</a><br />
<br /></li>
<li>
<p>Repeat Step <a href="#BABFIIIE">4</a>, run the application again, and connect to the database, and note that the name of the department is changed.</p>
</li>
<li>
<p><a id="BABICBIJ"></a>Select the entire record you just changed (click the cursor icon in the far left column), and delete it using the <span class="bold">Delete</span> key. Click the <span class="bold">Save</span> button. <img width="525" height="273" src="img/dataset11.gif" alt="Description of dataset11.gif follows" title="Description of dataset11.gif follows" /><br />
<a id="sthref317" href="img_text/dataset11.htm">Description of the illustration dataset11.gif</a><br />
<br /></p>
</li>
<li>
<p>Repeat Step <a href="#BABFIIIE">4</a>, run the application again, and connect to the database, and note that the new record is no longer part of the <code>DEPARTMENTS</code> table.</p>
</li>
<li>
<p>Close the application.</p>
</li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1159">
<tr>
<td class="cellalignment1166">
<table class="cellalignment1164">
<tr>
<td class="cellalignment1163"><a href="connecting.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1163"><a href="building_odt.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2006, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1168">
<table class="cellalignment1162">
<tr>
<td class="cellalignment1163"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1163"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1163"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1163"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1163"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1163"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
