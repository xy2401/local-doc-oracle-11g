<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Datatypes for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2010-05-28T13:40:59Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database XML C API Reference" />
<meta name="dcterms.identifier" content="E10770-02" />
<meta name="dcterms.isVersionOf" content="CAXML" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html" />
<link rel="Next" href="callback.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10770.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/24</span> <!-- End Header --><a id="datatypes"></a><a id="CAXML00100"></a>
<h1 class="chapter"><span class="secnum">1</span> Datatypes for C</h1>
<p>This package defines macros which declare functions (or function pointers) for XML callbacks. Callbacks are used for error-message handling, memory allocation and freeing, and stream operations.</p>
<p>This chapter contains this section:</p>
<ul>
<li>
<p><a href="#CIHFJEHH">C Datatypes</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../e23582/toc.htm"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a></p>
</li>
</ul>
</div>
<a id="CIHFJEHH"></a><a id="CAXML5016"></a>
<hr />
<div class="refsect1">
<h2 class="refsect1">C Datatypes</h2>
<p><a href="#CIHBHFAD">Table 1-1</a> lists all C datatypes and their descriptions.</p>
<div class="tblformal">
<p class="titleintable"><a id="CAXML5017"></a><a id="sthref18"></a><a id="CIHBHFAD"></a>Table 1-1 Summary of C Datatypes</p>
<table class="cellalignment860" title="Summary of C Datatypes" summary="The first column lists the datatype, the second column provides a brief description" dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t3">Datatype</th>
<th class="cellalignment861" id="r1c2-t3">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#CHDIAFJG">oracheck</a></p>
</td>
<td class="cellalignment862" headers="r2c1-t3 r1c2-t3">
<p>Checkword for validating data structures.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#CHDECAAB">oraerr</a></p>
</td>
<td class="cellalignment862" headers="r3c1-t3 r1c2-t3">
<p>Error code: <code>0</code> is success, non-<code>0</code> is failure.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#CHDIEBJB">oraprop_id</a></p>
</td>
<td class="cellalignment862" headers="r4c1-t3 r1c2-t3">
<p>The id of property; if <code>&gt;= 0</code> it is valid, if <code>&lt; 0</code>, it is invalid.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#CHDDDFCH">oramemctx</a></p>
</td>
<td class="cellalignment862" headers="r5c1-t3 r1c2-t3">
<p>Opaque memory context.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#CHDHIADF">oraprop</a></p>
</td>
<td class="cellalignment862" headers="r6c1-t3 r1c2-t3">
<p>Property name.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#CHDHAEGB">oraprop_t</a></p>
</td>
<td class="cellalignment862" headers="r7c1-t3 r1c2-t3">
<p>Property value type.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#CHDDJJHC">oraprop_v</a></p>
</td>
<td class="cellalignment862" headers="r8c1-t3 r1c2-t3">
<p>Value: union of storage for all data types.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#CHDIAHGI">orastream</a></p>
</td>
<td class="cellalignment862" headers="r9c1-t3 r1c2-t3">
<p>Opaque stream object.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#CHDIDAHB">orastreamhdl</a></p>
</td>
<td class="cellalignment862" headers="r10c1-t3 r1c2-t3">
<p>Storage for file handles.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#CIHEJDDA">xmlcmphow</a></p>
</td>
<td class="cellalignment862" headers="r11c1-t3 r1c2-t3">
<p>Constant used for DOM Range comparisons.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#CIHFACAE">xmlctx</a></p>
</td>
<td class="cellalignment862" headers="r12c1-t3 r1c2-t3">
<p>Context shared for all documents in an XML session.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#CHDJGECE">xmldfsrct</a></p>
</td>
<td class="cellalignment862" headers="r13c1-t3 r1c2-t3">
<p>Specifies input types for <code>XmlDiff</code> operations</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#CIHGFJHJ">xmlerr</a></p>
</td>
<td class="cellalignment862" headers="r14c1-t3 r1c2-t3">
<p>Numeric error code returned by many functions.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#CHDGCGGB">xmlevctx</a></p>
</td>
<td class="cellalignment862" headers="r15c1-t3 r1c2-t3">
<p>XML Event context.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#CHDFJGHA">xmlhasht</a></p>
</td>
<td class="cellalignment862" headers="r16c1-t3 r1c2-t3">
<p>The hash value of an XML tree or sub-tree; also known as a digest.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#CIHDHEGB">xmlistream</a></p>
</td>
<td class="cellalignment862" headers="r17c1-t3 r1c2-t3">
<p>Generic user-defined input stream.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r18c1-t3" headers="r1c1-t3">
<p><a href="#CIHFHDBF">xmliter</a></p>
</td>
<td class="cellalignment862" headers="r18c1-t3 r1c2-t3">
<p>Control structure for DOM2 <code>NodeIterator</code> and <code>TreeWalker</code>.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r19c1-t3" headers="r1c1-t3">
<p><a href="#CIHGEAII">xmlnodetype</a></p>
</td>
<td class="cellalignment862" headers="r19c1-t3 r1c2-t3">
<p>The numeric type code of a node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r20c1-t3" headers="r1c1-t3">
<p><a href="#CIHBIBFJ">xmlostream</a></p>
</td>
<td class="cellalignment862" headers="r20c1-t3 r1c2-t3">
<p>Generic user-defined output stream.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r21c1-t3" headers="r1c1-t3">
<p><a href="#CIHHBGCD">xmlpoint</a></p>
</td>
<td class="cellalignment862" headers="r21c1-t3 r1c2-t3">
<p>XPointer point location.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r22c1-t3" headers="r1c1-t3">
<p><a href="#CIHDCCCD">xmlrange</a></p>
</td>
<td class="cellalignment862" headers="r22c1-t3 r1c2-t3">
<p>Controls structure for DOM2 Range.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r23c1-t3" headers="r1c1-t3">
<p><a href="#CHDGBIEA">xmlsoapbind</a></p>
</td>
<td class="cellalignment862" headers="r23c1-t3 r1c2-t3">
<p>Binding for SOAP connections.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r24c1-t3" headers="r1c1-t3">
<p><a href="#CHDFEDJB">xmlsoapcon</a></p>
</td>
<td class="cellalignment862" headers="r24c1-t3 r1c2-t3">
<p>SOAP connection object.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r25c1-t3" headers="r1c1-t3">
<p><a href="#CHDBGFDD">xmlsoapctx</a></p>
</td>
<td class="cellalignment862" headers="r25c1-t3 r1c2-t3">
<p>Context for SOAP operations.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r26c1-t3" headers="r1c1-t3">
<p><a href="#CHDFFAGJ">xmlsoaprole</a></p>
</td>
<td class="cellalignment862" headers="r26c1-t3 r1c2-t3">
<p>Role for a SOAP node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r27c1-t3" headers="r1c1-t3">
<p><a href="#CIHHHAEH">xmlshowbits</a></p>
</td>
<td class="cellalignment862" headers="r27c1-t3 r1c2-t3">
<p>Bit flags used to select which node types to show.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r28c1-t3" headers="r1c1-t3">
<p><a href="#CIHCAEFC">xmlurlacc</a></p>
</td>
<td class="cellalignment862" headers="r28c1-t3 r1c2-t3">
<p>This is an enumeration of the known access methods for retrieving data from a URL.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r29c1-t3" headers="r1c1-t3">
<p><a href="#CIHIJIJC">xmlurlhdl</a></p>
</td>
<td class="cellalignment862" headers="r29c1-t3 r1c2-t3">
<p>This union contains the handle(s) needed to access URL data, be it a stream or <code>stdio</code> pointer, file descriptor(s), and so on.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r30c1-t3" headers="r1c1-t3">
<p><a href="#CIHEGBDC">xmlurlpart</a></p>
</td>
<td class="cellalignment862" headers="r30c1-t3 r1c2-t3">
<p>This structure contains the sub-parts of a URL.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r31c1-t3" headers="r1c1-t3">
<p><a href="#CIHFBHIB">xmlxptrloc</a></p>
</td>
<td class="cellalignment862" headers="r31c1-t3 r1c2-t3">
<p>XPointer location datatype.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r32c1-t3" headers="r1c1-t3">
<p><a href="#CIHDDCHH">xmlxptrlocset</a></p>
</td>
<td class="cellalignment862" headers="r32c1-t3 r1c2-t3">
<p>XPointer location set datatype.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r33c1-t3" headers="r1c1-t3">
<p><a href="#CIHFIFGJ">xmlxslobjtype</a></p>
</td>
<td class="cellalignment862" headers="r33c1-t3 r1c2-t3">
<p>Type of XSLT object that may be returned.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r34c1-t3" headers="r1c1-t3">
<p><a href="#CIHHHHEA">xmlxslomethod</a></p>
</td>
<td class="cellalignment862" headers="r34c1-t3 r1c2-t3">
<p>Type of output produced by the XSLT processor.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r35c1-t3" headers="r1c1-t3">
<p><a href="#CIHICADI">xmlxvm</a></p>
</td>
<td class="cellalignment862" headers="r35c1-t3 r1c2-t3">
<p>An object of type <code>xmlxvm</code> is used for XML document transformation.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r36c1-t3" headers="r1c1-t3">
<p><a href="#CIHBFEHF">xmlxvmcomp</a></p>
</td>
<td class="cellalignment862" headers="r36c1-t3 r1c2-t3">
<p>An object of type <code>xmlxvmcomp</code> is used for compiling XSL stylesheets.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r37c1-t3" headers="r1c1-t3">
<p><a href="#CIHIBBGF">xmlxvmflags</a></p>
</td>
<td class="cellalignment862" headers="r37c1-t3 r1c2-t3">
<p>Control flags for the XSLT compiler.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r38c1-t3" headers="r1c1-t3">
<p><a href="#CIHFDCBH">xmlxvmobjtype</a></p>
</td>
<td class="cellalignment862" headers="r38c1-t3 r1c2-t3">
<p>Type of XSLTVM object.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r39c1-t3" headers="r1c1-t3">
<p><a href="#CIHFGDFI">xpctx</a></p>
</td>
<td class="cellalignment862" headers="r39c1-t3 r1c2-t3">
<p>XPath top-level context.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r40c1-t3" headers="r1c1-t3">
<p><a href="#CIHJCIBB">xpexpr</a></p>
</td>
<td class="cellalignment862" headers="r40c1-t3 r1c2-t3">
<p>XPath expression.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r41c1-t3" headers="r1c1-t3">
<p><a href="#CIHBFBIG">xpobj</a></p>
</td>
<td class="cellalignment862" headers="r41c1-t3 r1c2-t3">
<p>XPath object.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r42c1-t3" headers="r1c1-t3">
<p><a href="#CIHJJAEE">xsdctx</a></p>
</td>
<td class="cellalignment862" headers="r42c1-t3 r1c2-t3">
<p>XMLSchema validator context.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r43c1-t3" headers="r1c1-t3">
<p><a href="#CIHIEIIC">xslctx</a></p>
</td>
<td class="cellalignment862" headers="r43c1-t3 r1c2-t3">
<p>XSL top-level context.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r44c1-t3" headers="r1c1-t3">
<p><a href="#CIHIEABI">xvmobj</a></p>
</td>
<td class="cellalignment862" headers="r44c1-t3 r1c2-t3">
<p>XSLVM processor run-time object; contents are private and must not be accessed by users.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CHDIAFJG"></a><a id="CAXML5018"></a>
<hr />
<h3 class="refsect2">oracheck</h3>
<p>Checkword for validating data structures.</p>
<p class="subhead2"><a id="CAXML5019"></a>Definition</p>
<pre>
typedef ub4 oracheck;
</pre>
<a id="CHDECAAB"></a><a id="CAXML5020"></a>
<hr />
<h3 class="refsect2">oraerr</h3>
<p>Error code: <code>0</code> is success, non-<code>0</code> is failure.</p>
<p class="subhead2"><a id="CAXML5021"></a>Definition</p>
<pre>
typedef ub4 oraerr;
</pre>
<a id="CHDIEBJB"></a><a id="CAXML5022"></a>
<hr />
<h3 class="refsect2">oraprop_id</h3>
<p>The id of property; if <code>&gt;= 0</code> it is valid, if <code>&lt; 0</code>, it is invalid.</p>
<p class="subhead2"><a id="CAXML5023"></a>Definition</p>
<pre>
typedef sb2 oraprop_id;
</pre>
<a id="CHDDDFCH"></a><a id="CAXML5024"></a>
<hr />
<h3 class="refsect2">oramemctx</h3>
<p>Opaque memory context.</p>
<p class="subhead2"><a id="CAXML5025"></a>Definition</p>
<pre>
typedef struct oramemctx oramemctx;
</pre>
<a id="CHDHIADF"></a><a id="CAXML5026"></a>
<hr />
<h3 class="refsect2">oraprop</h3>
<p>Property name.</p>
<p class="subhead2"><a id="CAXML5027"></a>Definition</p>
<pre>
typedef struct oraprop {
    oratext    *name_oraprop;
    oraprop_id  id_oraprop;
    oraprop_t   type_oraprop;
    oraprop_v   value_oraprop;
} oraprop;
</pre>
<a id="CHDHAEGB"></a><a id="CAXML5028"></a>
<hr />
<h3 class="refsect2">oraprop_t</h3>
<p>Property value type.</p>
<p class="subhead2"><a id="CAXML5029"></a>Definition</p>
<pre>
typedef enum {
    ORAPROP_TYPE_BOOLEAN,
    ORAPROP_TYPE_SIGNED,
    ORAPROP_TYPE_UNSIGNED,        
    ORAPROP_TYPE_POINTER
} oraprop_t;
</pre>
<a id="CHDDJJHC"></a><a id="CAXML5030"></a>
<hr />
<h3 class="refsect2">oraprop_v</h3>
<p>Value: union of storage for all data types.</p>
<p class="subhead2"><a id="CAXML5031"></a>Definition</p>
<pre>
typedef union oraprop_v {
    boolean b_oraprop_v;
    sb4     s_oraprop_v;
    ub4     u_oraprop_v;
    void   *p_oraprop_v;
} oraprop_v;
</pre>
<a id="CHDIAHGI"></a><a id="CAXML5032"></a>
<hr />
<h3 class="refsect2">orastream</h3>
<p>Opaque stream object.</p>
<p class="subhead2"><a id="CAXML5033"></a>Definition</p>
<pre>
typedef struct orastream orastream;
</pre>
<a id="CHDIDAHB"></a><a id="CAXML5034"></a>
<hr />
<h3 class="refsect2">orastreamhdl</h3>
<p>Storage for file handles.</p>
<p class="subhead2"><a id="CAXML5035"></a>Definition</p>
<pre>
typedef union orastreamhdl {
    void  *ptr_orastreamhdl;      /* generic pointer stream/file/etc */
    struct {
        sb4 fd_orastreamhdl;     /* file descriptor(s) [FTP needs all 3!] */
        sb4 fd2_orastreamhdl;
        sb4 fd3_orastreamhdl;
    } fds_lpihdl;
} orastreamhdl;
</pre>
<a id="CIHEJDDA"></a><a id="CAXML5036"></a>
<hr />
<h3 class="refsect2">xmlcmphow</h3>
<p>Constant used for DOM Range comparisons.</p>
<p class="subhead2"><a id="CAXML5037"></a>Definition</p>
<pre>
typedef enum {
    XMLDOM_START_TO_START ,
    XMLDOM_START_TO_END   ,
    XMLDOM_END_TO_END     ,
    XMLDOM_END_TO_START   
} xmlcmphow;
</pre>
<a id="CIHFACAE"></a><a id="CAXML5038"></a>
<hr />
<h3 class="refsect2">xmlctx</h3>
<p>Context shared for all documents in an XML session. Contains encoding information, low-level memory allocation function pointers, error message language or encoding and optional handler function, and so on. Required to load (parse) documents and create DOM, generate SAX, and so on.</p>
<p class="subhead2"><a id="CAXML5039"></a>Definition</p>
<pre>
struct xmlctx;
typedef struct xmlctx xmlctx;
</pre>
<a id="CAXML5040"></a>
<hr />
<a id="sthref19"></a>
<h3 class="refsect2">xmldfoptype</h3>
<p>Operation type, represents one or more operations. Used for passing the <code>diff</code> to a custom Operation Buildder (OB) in <a href="xmldiff.htm#Xmldiffxmldiff">XmlDiff()</a>.</p>
<p class="subhead2"><a id="CAXML5041"></a>Definition</p>
<pre>
typedef enum {
  XMLDF_OP_NONE, /* Should not be set to non-zero for XMLDF_NUM_OP macro below */
  XMLDF_OP_UPDATE,
  XMLDF_OP_RENAME,
  XMLDF_OP_DELETE,
  XMLDF_OP_INSERT_BEFORE,
  XMLDF_OP_APPEND
} xmldfoptype;
</pre>
<a id="CHDJGECE"></a><a id="CAXML5042"></a>
<hr />
<h3 class="refsect2">xmldfsrct</h3>
<p>Specifies input types for <code>XmlDiff</code> operations.</p>
<p class="subhead2"><a id="CAXML5043"></a>Definition</p>
<pre>
typedef enum {
   XMLDF_SRCT_NONE ,    /* default is DOM */
   XMLDF_SRCT_DOM,      /* DOM: doc node must be specified */
   XMLDF_SRCT_FILE,     /* file name must be specified */
   XMLDF_SRCT_URL,      /* URL in compiler encoding */
   XMLDF_SRCT_BUFFER,   /* buffer: buffer pointer and length must be specified */
   XMLDF_SRCT_FILEP,    /* FILE */
   XMLDF_SRCT_OSTREAM,  /* orastream: stream pointer must be specified */
   XMLDF_SRCT_DOMNODE   /* DOM node, used with XmlHash() */
} xmldfsrct;
</pre>
<a id="CIHGFJHJ"></a><a id="CAXML5044"></a>
<hr />
<h3 class="refsect2">xmlerr</h3>
<p>Numeric error code returned by many functions. A zero value indicates success; a nonzero value indicates error.</p>
<p class="subhead2"><a id="CAXML5045"></a>Definition</p>
<pre>
typedef enum {
   XMLERR_OK              , /* success return */
   XMLERR_NULL_PTR        , /* NULL pointer */
   XMLERR_NO_MEMORY       , /* out of memory */
   XMLERR_HASH_DUP        , /* duplicate entry in hash table */
   XMLERR_INTERNAL        ,  /* internal error */
   XMLERR_BUFFER_OVERFLOW ,  /* name/quoted string too long */
   XMLERR_BAD_CHILD       ,  /* invalid child for parent */
   XMLERR_EOI             ,  /* unexpected EndOfInformation */
   XMLERR_BAD_MEMCB       ,  /* invalid memory callbacks */
   XMLERR_UNICODE_ALIGN   , /* Unicode data misalignment */
   XMLERR_NODE_TYPE       , /* wrong node type */
   XMLERR_UNCLEAN         , /* context is not clean */
   XMLERR_NESTED_STRINGS  , /* internal: nested open str */
   XMLERR_PROP_NOT_FOUND  , /* property not found */
   XMLERR_SAVE_OVERFLOW   , /* save output overflowed */
   XMLERR_NOT_IMP         , /* feature not implemented */
   XMLERR_NLS_MISMATCH    , /* specify lxglo/lxd or neither*/
   XMLERR_NLS_INIT        , /* error at NLS initialization */
   XMLERR_LEH_INIT        , /* error at LEH initialization */
   XMLERR_LML_INIT        , /* error at LML initialization */
   XMLERR_LPU_INIT          /* error at LPU initialization */
} xmlerr;
</pre>
<a id="CHDGCGGB"></a><a id="CAXML5046"></a>
<hr />
<h3 class="refsect2">xmlevctx</h3>
<p>XML Event context.</p>
<p class="subhead2"><a id="CAXML5047"></a>Definition</p>
<pre>
typedef  struct {
   void *ctx_xmlevctx;       /* implementation specific context */
   xmlevdisp disp_xmlevctx;  /* dispatch table */         
   ub4 checkword_xmlevctx;   /* checkword for integrity check */
   ub4 flags_xmlevctx;       /* mode; default: expand_entity */
   struct xmlevctx;          /* input xmlevctx; chains the XML Event context */   
} xmlevctx;
</pre>
<a id="CAXML5048"></a>
<hr />
<a id="sthref20"></a>
<h3 class="refsect2">xmlevtype</h3>
<p>The event type for parser pull events.</p>
<p class="subhead2"><a id="CAXML5049"></a>Definition</p>
<pre>
typedef enum  xmlevtype {
   XML_EVENT_FATAL_ERROR,            /* Fatal Error */
   XML_EVENT_BEFORE_START,           /* Before Start Document */
   XML_EVENT_START_DOCUMENT,         /* Indicates Start Document */
   XML_EVENT_START_DTD,              /* Start DTD */
   XML_EVENT_END_DTD,                /* End DTD */
   XML_EVENT_NOTATION_DECLARATION,   /* Notation Decl */
   XML_EVENT_PE_DECLARATION,         /* PE Decl */
   XML_EVENT_UE_DECLARATION,         /* US Decl */
   XML_EVENT_ELEMENT_DECLARATION,    /* Element Decl */ 
   XML_EVENT_ATTLIST_DECLARATION,    /* Attribute Decl */
   XML_EVENT_START_ELEMENT,          /* Start Element */
   XML_EVENT_END_ELEMENT,            /* End Element */
   XML_EVENT_CHARACTERS,             /* Characters (text) */
   XML_EVENT_CHARACTERS_CONT,        /* Characters Continued */
   XML_EVENT_PI,                     /* Processing Instruction */
   XML_EVENT_PI_CONT,                /* Processing Instruction Continued */
   XML_EVENT_COMMENT,                /* Comment */
   XML_EVENT_COMMENT_CONT,           /* Comment Continued */
   XML_EVENT_SPACE,                  /* White Space */
   XML_EVENT_SPACE_CONT,             /* White Space Continued */
   XML_EVENT_ENTITY_REFERENCE,       /* Entity Reference */
   XML_EVENT_CDATA,                  /* CDATA */
   XML_EVENT_CDATA_CONT,             /* CDATA continued */
   XML_EVENT_START_ENTITY,           /* Start Entity */
   XML_EVENT_END_ENTITY,             /* End Entity */
   XML_EVENT_END_DOCUMENT,           /* End Document */
   XML_EVENT_ERROR                   /* Error */
}xmlevtype;
</pre>
<a id="CHDFJGHA"></a><a id="CAXML5050"></a>
<hr />
<h3 class="refsect2">xmlhasht</h3>
<p>The hash value of an XML tree or sub-tree; also known as a digest.</p>
<p>If the hash values for two XML trees are equal, the trees are considered equal, to a very high probability; uses the MD5 algorithm.</p>
<p class="subhead2"><a id="CAXML5051"></a>Definition</p>
<pre>
struct xmlhasht {
   ub4  l_xmlhasht;   /* lenght of digest in bytes */
   ub1  d_xmlhasht[XMLDF_DIGEST_MAX];   /* the digest */
};
typedef struct xmlhasht xmlhasht;
</pre>
<a id="CIHDHEGB"></a><a id="CAXML5052"></a>
<hr />
<h3 class="refsect2">xmlistream</h3>
<p>Generic user-defined input stream. The three function pointers are required (but may be stubs). The context pointer is entirely user-defined; point it to whatever state information is required to manage the stream; it will be passed as first argument to the user functions.</p>
<p class="subhead2"><a id="CAXML5053"></a>Definition</p>
<pre>
typedef struct xmlistream {
   XML_STREAM_OPEN_F(
      (*open_xmlistream),
      xctx, 
      sctx, 
      path,
      parts,
      length);
   XML_STREAM_READ_F(
      (*read_xmlistream),
      xctx, 
      sctx, 
      path, 
      dest, 
      size,
      nraw, eoi);
   XML_STREAM_CLOSE_F(
      (*close_xmlistream),
      xctx,
      sctx);
   void *ctx_xmlistream;                         /* user's stream context */
} xmlistream;
</pre>
<a id="CIHFHDBF"></a><a id="CAXML5054"></a>
<hr />
<h3 class="refsect2">xmliter</h3>
<p>Control structure for DOM 2 <code>NodeIterator</code> and <code>TreeWalker</code>.</p>
<p class="subhead2"><a id="CAXML5055"></a>Definition</p>
<pre>
struct xmliter {
   xmlnode *root_xmliter;   /* root node of the iteration space */
   xmlnode *cur_xmliter;    /* current position iterator ref node */
   ub4      show_xmliter;   /* node filter mask */
   void    *filt_xmliter;   /* node filter function */
   boolean  attach_xmliter; /* is iterator valid? */
   boolean  expan_xmliter;  /* are external entities expanded? */
   boolean  before_xmliter; /* iter position before ref node? */
};
typedef struct xmliter xmliter;
typedef struct xmliter xmlwalk;
</pre>
<a id="CIHGEAII"></a><a id="CAXML5056"></a>
<hr />
<h3 class="refsect2">xmlnodetype</h3>
<p>The numeric type code of a node. <code>0</code> means invalid, 1-13 are the standard numberings from DOM 1.0, and higher numbers are for internal use only.</p>
<p class="subhead2"><a id="CAXML5057"></a>Definition</p>
<pre>
typedef enum {
    XMLDOM_NONE     , /* bogus node */
    XMLDOM_ELEM     , /* element */
    XMLDOM_ATTR     , /* attribute */
    XMLDOM_TEXT     , /* char data not escaped by CDATA */
    XMLDOM_CDATA    , /* char data escaped by CDATA */
    XMLDOM_ENTREF   , /* entity reference */
    XMLDOM_ENTITY   , /* entity */
    XMLDOM_PI       , /* &lt;?processing instructions?&gt; */
    XMLDOM_COMMENT  , /* &lt;!-- Comments --&gt; */
    XMLDOM_DOC      , /* Document */
    XMLDOM_DTD      , /* DTD */
    XMLDOM_FRAG     , /* Document fragment */
    XMLDOM_NOTATION , /* notation */

    /* Oracle extensions from here on */
    XMLDOM_ELEMDECL , /* DTD element declaration */
    XMLDOM_ATTRDECL , /* DTD attribute declaration */

    /* Content Particles (nodes in element's Content Model) */
    XMLDOM_CPELEM   , /* element */
    XMLDOM_CPCHOICE , /* choice (a|b) */
    XMLDOM_CPSEQ    , /* sequence (a,b) */
    XMLDOM_CPPCDATA , /* #PCDATA */
    XMLDOM_CPSTAR   , /* '*' (zero or more) */
    XMLDOM_CPPLUS   , /* '+' (one or more) */
    XMLDOM_CPOPT    , /* '?' (optional) */
    XMLDOM_CPEND      /* end marker */
} xmlnodetype;
</pre>
<a id="CIHBIBFJ"></a><a id="CAXML5058"></a>
<hr />
<h3 class="refsect2">xmlostream</h3>
<p>Generic user-defined output stream. The three function pointers are required (but may be stubs). The context pointer is entirely user-defined; point it to whatever state information is required to manage the stream; it will be passed as first argument to the user functions.</p>
<p class="subhead2"><a id="CAXML5059"></a>Definition</p>
<pre>
typedef struct xmlostream {
   XML_STREAM_OPEN_F(
      (*open_xmlostream),
      xctx,
      sctx, 
      path, 
      parts,
      length);
   XML_STREAM_WRITE_F(
      (*write_xmlostream),
      xctx, 
      sctx,
      path, 
      src,
      size);
   XML_STREAM_CLOSE_F(
      (*close_xmlostream),
      xctx,
      sctx);
   void *ctx_xmlostream;        /* user's stream context */
} xmlostream;
</pre>
<a id="CIHHBGCD"></a><a id="CAXML5060"></a>
<hr />
<h3 class="refsect2">xmlpoint</h3>
<p>XPointer point location.</p>
<p class="subhead2"><a id="CAXML5061"></a>Definition</p>
<pre>
typedef struct xmlpoint xmlpoint;
</pre>
<a id="CIHDCCCD"></a><a id="CAXML5062"></a>
<hr />
<h3 class="refsect2">xmlrange</h3>
<p>Control structure for DOM 2 Range.</p>
<p class="subhead2"><a id="CAXML5063"></a>Definition</p>
<pre>
typedef struct xmlrange {
 xmlnode *startnode_xmlrange;  /* start point container */
 ub4      startofst_xmlrange;  /* start point index */
 xmlnode *endnode_xmlrange;    /* end point container */
 ub4      endofst_xmlrange;    /* end point index */
 xmlnode *doc_xmlrange;        /* document node */
 xmlnode *root_xmlrange;       /* root node of the range */
 boolean  collapsed_xmlrange;  /* is range collapsed? */
 boolean  detached_xmlrange;   /* range invalid, invalidated?*/
} xmlrange;
</pre>
<a id="CHDGBIEA"></a><a id="CAXML5064"></a>
<hr />
<h3 class="refsect2">xmlsoapbind</h3>
<p>Binding for SOAP connections. SOAP does not dictate the binding (transport) used for conveying messages; however the HTTP protocol is well-defined and currently the only choice.</p>
<p class="subhead2"><a id="CAXML5065"></a>Definition</p>
<pre>
typedef enum xmlsoapbind {
   XMLSOAP_BIND_NONE ,  /* none */
   XMLSOAP_BIND_HTTP    /* HTTP */ } xmlsoapbind;
</pre>
<a id="CHDFEDJB"></a><a id="CAXML5066"></a>
<hr />
<h3 class="refsect2">xmlsoapcon</h3>
<p>SOAP connection object. Each distinct connection requires an instance of this type, which contains binding and endpoint information.</p>
<p class="subhead2"><a id="CAXML5067"></a>Definition</p>
<pre>
typedef struct xmlsoapcon xmlsoapcon;
</pre>
<a id="CHDBGFDD"></a><a id="CAXML5068"></a>
<hr />
<h3 class="refsect2">xmlsoapctx</h3>
<p>Context for SOAP operations. Only a single context is needed and it can be shared by several SOAP messages.</p>
<p class="subhead2"><a id="CAXML5069"></a>Definition</p>
<pre>
typedef struct xmlsoapctx xmlsoapctx;
</pre>
<a id="CHDFFAGJ"></a><a id="CAXML5070"></a>
<hr />
<h3 class="refsect2">xmlsoaprole</h3>
<p>Role for a SOAP node.</p>
<p class="subhead2"><a id="CAXML5071"></a>Definition</p>
<pre>
typedef enum xmlsoaprole {
    XMLSOAP_ROLE_UNSET,   /* not specified */
    XMLSOAP_ROLE_NONE,    /* "none" */
    XMLSOAP_ROLE_NEXT,    /* "next" */
    XMLSOAP_ROLE_ULT,     /* "ultimateReceiver" */
    XMLSOAP_ROLE_OTHER    /* other - user defined */
} xmlsoaprole;
</pre>
<a id="CIHHHAEH"></a><a id="CAXML5072"></a>
<hr />
<h3 class="refsect2">xmlshowbits</h3>
<p>Bit flags used to select which nodes types to show.</p>
<p class="subhead2"><a id="CAXML5073"></a>Definition</p>
<pre>
typedef ub4 xmlshowbits;
#define XMLDOM_SHOW_ALL        ~(ub4)0
#define XMLDOM_SHOW_BIT(ntype) ((ub4)1 &lt;&lt; (ntype))
#define XMLDOM_SHOW_ELEM       XMLDOM_SHOW_BIT(XMLDOM_ELEM)
#define XMLDOM_SHOW_ATTR       XMLDOM_SHOW_BIT(XMLDOM_ATTR)
#define XMLDOM_SHOW_TEXT       XMLDOM_SHOW_BIT(XMLDOM_TEXT)
#define XMLDOM_SHOW_CDATA      XMLDOM_SHOW_BIT(XMLDOM_CDATA)
#define XMLDOM_SHOW_ENTREF     XMLDOM_SHOW_BIT(XMLDOM_ENTREF)
#define XMLDOM_SHOW_ENTITY     XMLDOM_SHOW_BIT(XMLDOM_ENTITY)
#define XMLDOM_SHOW_PI         XMLDOM_SHOW_BIT(XMLDOM_PI)
#define XMLDOM_SHOW_COMMENT    XMLDOM_SHOW_BIT(XMLDOM_COMMENT)
#define XMLDOM_SHOW_DOC        XMLDOM_SHOW_BIT(XMLDOM_DOC)
#define XMLDOM_SHOW_DTD        XMLDOM_SHOW_BIT(XMLDOM_DTD)
#define XMLDOM_SHOW_FRAG       XMLDOM_SHOW_BIT(XMLDOM_FRAG)
#define XMLDOM_SHOW_NOTATION   XMLDOM_SHOW_BIT(XMLDOM_NOTATION)
#define XMLDOM_SHOW_DOC_TYPE   XMLDOM_SHOW_BIT(XMLDOM_DOC_TYPE)
</pre>
<a id="CIHCAEFC"></a><a id="CAXML5074"></a>
<hr />
<h3 class="refsect2">xmlurlacc</h3>
<p>This is an enumeration of the known access methods for retrieving data from a URL. Open/read/close functions may be plugged in to override the default behavior.</p>
<p class="subhead2"><a id="CAXML5075"></a>Definition</p>
<pre>
typedef enum {
    XML_ACCESS_NONE    , /* not specified */
    XML_ACCESS_UNKNOWN , /* specified but unknown */
    XML_ACCESS_FILE    , /* filesystem access */
    XML_ACCESS_HTTP    , /* HTTP */
    XML_ACCESS_FTP     , /* FTP */
    XML_ACCESS_GOPHER  , /* Gopher */
    XML_ACCESS_ORADB   , /* Oracle DB */
    XML_ACCESS_STREAM    /* user-defined stream */
} xmlurlacc;
</pre>
<a id="CIHIJIJC"></a><a id="CAXML5076"></a>
<hr />
<h3 class="refsect2">xmlurlhdl</h3>
<p>This union contains the handle(s) needed to access URL data, be it a stream or stdio pointer, file descriptor(s), and so on.</p>
<p class="subhead2"><a id="CAXML5077"></a>Definition</p>
<pre>
typedef union xmlurlhdl {
    void  *ptr_xmlurlhdl;  /* generic stream/file/... handle */
    struct {
        sb4 fd1_xmlurlhdl; /* file descriptor(s) [FTP needs all 3!] */
        sb4 fd2_xmlurlhdl;
        sb4 fd3_xmlurlhdl;
    } fds_lpihdl;
} xmlurlhdl;
</pre>
<a id="CIHEGBDC"></a><a id="CAXML5078"></a>
<hr />
<h3 class="refsect2">xmlurlpart</h3>
<p>This structure contains the sub-parts of a URL. The original URL is parsed and the pieces copies (<code>NULL</code>-terminated) to a working buffer, then this structure is filled in to point to the parts. Given URL <code>http://user:pwd@baz.com:8080/pub/baz.html;quux=1?huh#fraggy</code>, the example component part from this URL will be shown.</p>
<p class="subhead2"><a id="CAXML5079"></a>Definition</p>
<pre>
typedef struct xmlurlpart {
 xmlurlacc access_xmlurlpart;   /* access method code, XMLACCESS_HTTP */
 oratext   *accbuf_xmlurlpart;  /* access method name: "http" */
 oratext   *host_xmlurlpart;    /* hostname:         "baz.com" */
 oratext   *dir_xmlurlpart;     /* directory:        "pub" */
 oratext   *file_xmlurlpart;    /* filename:         "baz.html" */
 oratext   *uid_xmlurlpart;     /* userid/username:  "user" */
 oratext   *passwd_xmlurlpart;  /* password:         "pwd" */
 oratext   *port_xmlurlpart;    /* port (as string): "8080" */
 oratext   *frag_xmlurlpart;    /* fragment:         "fraggy" */
 oratext   *query_xmlurlpart;   /* query:            "huh" */
 oratext   *param_xmlurlpart;   /* parameter:        "quux=1" */
 ub2        portnum_xmlurlpart; /* port (as number): 8080 */
 ub1        abs_xmlurlpart;     /* absolute path?     TRUE */
} xmlurlpart;
</pre>
<a id="CIHFBHIB"></a><a id="CAXML5080"></a>
<hr />
<h3 class="refsect2">xmlxptrloc</h3>
<p>XPointer location data type.</p>
<p class="subhead2"><a id="CAXML5081"></a>Definition</p>
<pre>
typedef struct xmlxptrloc xmlxptrloc;
</pre>
<a id="CIHDDCHH"></a><a id="CAXML5082"></a>
<hr />
<h3 class="refsect2">xmlxptrlocset</h3>
<p>XPointer location set data type.</p>
<p class="subhead2"><a id="CAXML5083"></a>Definition</p>
<pre>
typedef struct xmlxptrlocset xmlxptrlocset;
</pre>
<a id="CIHFIFGJ"></a><a id="CAXML5084"></a>
<hr />
<h3 class="refsect2">xmlxslobjtype</h3>
<p>Type of XSLT object that may be returned.</p>
<p class="subhead2"><a id="CAXML5085"></a>Definition</p>
<pre>
typedef enum xmlxslobjtype {
    XMLXSL_TYPE_UNKNOWN , /* Not a defined type */
    XMLXSL_TYPE_NDSET   , /* Node-set */
    XMLXSL_TYPE_BOOL    , /* Boolean value */
    XMLXSL_TYPE_NUM     , /* Numeric value (double) */
    XMLXSL_TYPE_STR     , /* String */
    XMLXSL_TYPE_FRAG      /* Document Fragment */
} xmlxslobjtype;
</pre>
<a id="CIHHHHEA"></a><a id="CAXML5086"></a>
<hr />
<h3 class="refsect2">xmlxslomethod</h3>
<p>Type of output to be produced by the XSLT processor.</p>
<p class="subhead2"><a id="CAXML5087"></a>Definition</p>
<pre>
typedef enum xmlxslomethod {
 XMLXSL_OUTPUT_UNKNOWN , /* Not defined */
 XMLXSL_OUTPUT_XML     , /* Produce a Document Fragment */
 XMLXSL_OUTPUT_STREAM  , /* Stream out formatted result */
 XMLXSL_OUTPUT_HTML      /* Stream out HTML formatted result */
} xmlxslomethod;
</pre>
<a id="CIHICADI"></a><a id="CAXML5088"></a>
<hr />
<h3 class="refsect2">xmlxvm</h3>
<p>An object of type <code>xmlxvm</code> is used for XML documents transformation. The contents of <code>xmlxvm</code> are private and must not be accessed by users.</p>
<p class="subhead2"><a id="CAXML5089"></a>Definition</p>
<pre>
struct xmlxvm; 
typedef struct xmlxvm xmlxvm;
</pre>
<a id="CIHBFEHF"></a><a id="CAXML5090"></a>
<hr />
<h3 class="refsect2">xmlxvmcomp</h3>
<p>An object of type <code>xmlxvmcomp</code> is used for compiling XSL stylesheets. The contents of <code>xmlxvmcomp</code> are private and must not be accessed by users.</p>
<p class="subhead2"><a id="CAXML5091"></a>Definition</p>
<pre>
struct xmlxvmcomp; 
typedef struct xmlxvmcomp xmlxvmcomp;
</pre>
<a id="CIHIBBGF"></a><a id="CAXML5092"></a>
<hr />
<h3 class="refsect2">xmlxvmflags</h3>
<p>Control flags for the XSLT compiler.</p>
<ul>
<li>
<p><code>XMLXVM_DEBUG</code> forces compiler to insert debug information into the bytecode.</p>
</li>
<li>
<p><code>XMLXVM_STRIPSPACE</code> forces the same behavior as <code>xsl:strip-space elements="*"</code></p>
</li>
</ul>
<p class="subhead2"><a id="CAXML5093"></a>Definition</p>
<pre>
typedef ub4 xmlxvmflag;
#define XMLXVM_NOFLAG   
#define XMLXVM_DEBUG      /* insert debug info into bytecode */
#define XMLXVM_STRIPSPACE /* same as xsl:strip-space elements="*" */
</pre>
<a id="CIHFDCBH"></a><a id="CAXML5094"></a>
<hr />
<h3 class="refsect2">xmlxvmobjtype</h3>
<p>Type of XSLTVM object.</p>
<p class="subhead2"><a id="CAXML5095"></a>Definition</p>
<pre>
typedef enum xmlxvmobjtype {
    XMLXVM_TYPE_UNKNOWN ,
    XMLXVM_TYPE_NDSET   ,
    XMLXVM_TYPE_BOOL    ,
    XMLXVM_TYPE_NUM     ,
    XMLXVM_TYPE_STR     ,
    XMLXVM_TYPE_FRAG    
} xmlxvmobjtype;
</pre>
<a id="CIHFGDFI"></a><a id="CAXML5096"></a>
<hr />
<h3 class="refsect2">xpctx</h3>
<p>XPath top-level context.</p>
<p class="subhead2"><a id="CAXML5097"></a>Definition</p>
<pre>
struct xpctx;
typedef struct xpctx xpctx;
</pre>
<a id="CIHJCIBB"></a><a id="CAXML5098"></a>
<hr />
<h3 class="refsect2">xpexpr</h3>
<p>XPath expression.</p>
<p class="subhead2"><a id="CAXML5099"></a>Definition</p>
<pre>
struct xpexpr;
typedef struct xpexpr xpexpr;
</pre>
<a id="CIHBFBIG"></a><a id="CAXML5100"></a>
<hr />
<h3 class="refsect2">xpobj</h3>
<p>Xpath object.</p>
<p class="subhead2"><a id="CAXML5101"></a>Definition</p>
<pre>
struct xpobj;typedef struct xpobj xpobj;
</pre>
<a id="CIHJJAEE"></a><a id="CAXML5102"></a>
<hr />
<h3 class="refsect2">xsdctx</h3>
<p>XML Schema validator context, created by <code>XmlSchemaCreate</code> and passed to most Schema functions.</p>
<p class="subhead2"><a id="CAXML5103"></a>Definition</p>
<pre>
# define XSDCTX_DEFINED
struct xsdctx; typedef struct xsdctx xsdctx;
</pre>
<a id="CIHIEIIC"></a><a id="CAXML5104"></a>
<hr />
<h3 class="refsect2">xslctx</h3>
<p>XSL top-level context.</p>
<p class="subhead2"><a id="CAXML5105"></a>Definition</p>
<pre>
struct xslctx;
typedef struct xslctx xslctx;
</pre>
<a id="CIHIEABI"></a><a id="CAXML5106"></a>
<hr />
<h3 class="refsect2">xvmobj</h3>
<p>XSLVM processor run-time object; content is private and must not be accessed by users.</p>
<p class="subhead2"><a id="CAXML5107"></a>Definition</p>
<pre>
struct xvmobj;
typedef struct xvmobj xvmobj;
</pre></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment853">
<tr>
<td class="cellalignment862">
<table class="cellalignment858">
<tr>
<td class="cellalignment857"><a href="whatsnew.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment857"><a href="callback.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment865">
<table class="cellalignment856">
<tr>
<td class="cellalignment857"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment857"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment857"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment857"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment857"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment857"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
