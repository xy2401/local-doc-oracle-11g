<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Package Traversal APIs for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.1" />
<meta name="dcterms.created" content="2010-05-28T13:41:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database XML C API Reference" />
<meta name="dcterms.identifier" content="E10770-02" />
<meta name="dcterms.isVersionOf" content="CAXML" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="soap.htm" title="Previous" type="text/html" />
<link rel="Next" href="xml.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10770.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/24</span> <!-- End Header --><a id="Traversalpackage"></a><a id="CAXML01100"></a>
<h1 class="chapter"><span class="secnum">10</span> Package Traversal APIs for C<a id="sthref986"></a><a id="sthref987"></a><a id="sthref988"></a></h1>
<p>Package Traversal contains APIs for four interfaces.</p>
<p>This chapter contains the following sections:</p>
<ul>
<li>
<p><a href="#CIHBCFAI">DocumentTraversal Interface</a></p>
</li>
<li>
<p><a href="#CIHEFGAE">NodeFilter Interface</a></p>
</li>
<li>
<p><a href="#CIHJJABD">NodeIterator Interface</a></p>
</li>
<li>
<p><a href="#Traversalinterfaces">TreeWalker Interface</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDK" href="../e23582/toc.htm"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a></p>
</li>
<li>
<p><a class="olink ADXDB" href="../e23094/toc.htm"><span class="italic">Oracle XML DB Developer's Guide</span></a></p>
</li>
</ul>
</div>
<a id="CIHBCFAI"></a><a id="CAXML6086"></a>
<hr />
<div class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">DocumentTraversal Interface</h2>
<p><a href="#CIHGCBEG">Table 10-1</a> summarizes the methods available through the DocumentTraversal interface.</p>
<div class="tblformal">
<p class="titleintable"><a id="CAXML6087"></a><a id="sthref989"></a><a id="CIHGCBEG"></a>Table 10-1 Summary of DocumentTraversal Methods; Traversal Package</p>
<table class="cellalignment860" title="Summary of DocumentTraversal Methods; Traversal Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t3">Function</th>
<th class="cellalignment861" id="r1c2-t3">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomcreatenodeiter">XmlDomCreateNodeIter()</a></p>
</td>
<td class="cellalignment862" headers="r2c1-t3 r1c2-t3">
<p>Create node iterator object.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#Xmldomcreatetreewalker">XmlDomCreateTreeWalker()</a></p>
</td>
<td class="cellalignment862" headers="r3c1-t3 r1c2-t3">
<p>Create a tree walker object.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="Xmldomcreatenodeiter"></a><a id="CAXML6088"></a>
<hr />
<h3 class="refsect2"><a id="sthref990"></a><a id="sthref991"></a><a id="sthref992"></a>XmlDomCreateNodeIter()</h3>
<p>One of two methods of <code>DocumentTraversal</code> interface, used to create a <code>NodeIterator</code> object. This method is identical to <a href="#Xmldomcreatetreewalker">XmlDomCreateTreeWalker()</a> except for the type of object returned.</p>
<p>The <code>whatToShow</code> argument is a mask of flag bits, one for each node type. The value <code>XMLDOM_SHOW_ALL</code> passes all node types through, otherwise only the types whose bits are set will be passed.</p>
<p><code>Entity</code> reference expansion is controlled by the <code>entrefExpansion</code> flag. If <code>TRUE</code>, entity references are replaced with their final content; if <code>FALSE</code>, entity references are left as nodes.</p>
<p class="subhead1"><a id="CAXML6089"></a>Syntax</p>
<pre>
xmliter* XmlDomCreateNodeIter(
   xmlctx *xctx,
   xmliter *iter,
   xmlnode *root,
   xmlshowbits whatToShow, 
   XMLDOM_ACCEPT_NODE_F(
      (*nodeFilter), 
      xctx, 
      node),
   boolean entrefExpand);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t4">Parameter</th>
<th class="cellalignment861" id="r1c2-t4">In/Out</th>
<th class="cellalignment861" id="r1c3-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t4" headers="r1c1-t4">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t4 r1c3-t4">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t4" headers="r1c1-t4">
<pre>
iter
</pre></td>
<td class="cellalignment862" headers="r3c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t4 r1c3-t4">existing NodeIterator to set, <code>NULL</code> to create</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t4" headers="r1c1-t4">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r4c1-t4 r1c3-t4">root node for NodeIterator</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t4" headers="r1c1-t4">
<pre>
whatToShow
</pre></td>
<td class="cellalignment862" headers="r5c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r5c1-t4 r1c3-t4">mask of <code>XMLDOM_SHOW_</code><code><span class="codeinlineitalic">XXX</span></code> flag bits</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r6c1-t4" headers="r1c1-t4">
<pre>
nodeFilter
</pre></td>
<td class="cellalignment862" headers="r6c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r6c1-t4 r1c3-t4">node filter to be used, <code>NULL</code> if none</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r7c1-t4" headers="r1c1-t4">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r7c1-t4 r1c2-t4">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r7c1-t4 r1c3-t4">whether to expand entity reference nodes</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6090"></a>Returns</p>
<p><code>(xmliter *)</code> original or new <code>NodeIterator</code> object</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreatetreewalker">XmlDomCreateTreeWalker()</a></div>
<a id="Xmldomcreatetreewalker"></a><a id="CAXML6091"></a>
<hr />
<h3 class="refsect2"><a id="sthref993"></a><a id="sthref994"></a><a id="sthref995"></a>XmlDomCreateTreeWalker()</h3>
<p>One of two methods of DocumentTraversal interface, used to create a <code>TreeWalker</code> object. This method is identical to <a href="#Xmldomcreatenodeiter">XmlDomCreateNodeIter()</a> except for the type of object returned.</p>
<p>The <code>whatToShow</code> argument is a mask of flag bits, one for each node type. The value <code>XMLDOM_SHOW_ALL</code> passes all node types through, otherwise only the types whose bits are set will be passed.</p>
<p><code>Entity</code> reference expansion is controlled by the <code>entrefExpansion</code> flag. If <code>TRUE</code>, entity references are replaced with their final content; if <code>FALSE</code>, entity references are left as nodes.</p>
<p class="subhead1"><a id="CAXML6092"></a>Syntax</p>
<pre>
xmlwalk* XmlDomCreateTreeWalker(
   xmlctx *xctx, 
   xmlwalk* walker, 
   xmlnode *root,
   xmlshowbits whatToShow,
   XMLDOM_ACCEPT_NODE_F(
      (*nodeFilter),
      xctx,
      node),
   boolean entrefExpansion);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t6">Parameter</th>
<th class="cellalignment861" id="r1c2-t6">In/Out</th>
<th class="cellalignment861" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t6" headers="r1c1-t6">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t6 r1c3-t6">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t6" headers="r1c1-t6">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t6 r1c3-t6">existing <code>TreeWalker</code> to set, <code>NULL</code> to create</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t6" headers="r1c1-t6">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r4c1-t6 r1c3-t6">root node for <code>TreeWalker</code></td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t6" headers="r1c1-t6">
<pre>
whatToShow
</pre></td>
<td class="cellalignment862" headers="r5c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r5c1-t6 r1c3-t6">mask of <code>XMLDOM_SHOW_</code><code><span class="codeinlineitalic">XXX</span></code> flag bits</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r6c1-t6" headers="r1c1-t6">
<pre>
nodeFilter
</pre></td>
<td class="cellalignment862" headers="r6c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r6c1-t6 r1c3-t6">node filter to be used, <code>NULL</code> if none</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r7c1-t6" headers="r1c1-t6">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r7c1-t6 r1c2-t6">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r7c1-t6 r1c3-t6">whether to expand entity reference nodes</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6093"></a>Returns</p>
<p><code>(xmlwalk *)</code> new <code>TreeWalker</code> object</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomcreatenodeiter">XmlDomCreateNodeIter()</a></div>
</div>
<!-- class="refsect1" -->
<a id="CIHEFGAE"></a><a id="CAXML6094"></a>
<hr />
<div class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NodeFilter Interface</h2>
<p><a href="#CHDJAGDA">Table 10-2</a> summarizes the methods available through the NodeFilter interface.</p>
<div class="tblformal">
<p class="titleintable"><a id="CAXML6095"></a><a id="sthref996"></a><a id="CHDJAGDA"></a>Table 10-2 Summary of NodeFileter Methods; Traversal Package</p>
<table class="cellalignment860" title="Summary of NodeFileter Methods; Traversal Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t8">Function</th>
<th class="cellalignment861" id="r1c2-t8">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#CIHFGGGI">XMLDOM_ACCEPT_NODE_F()</a></p>
</td>
<td class="cellalignment862" headers="r2c1-t8 r1c2-t8">
<p>Determines the filtering action based on node adn filter..</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CIHFGGGI"></a><a id="CAXML6096"></a>
<hr />
<h3 class="refsect2"><a id="sthref997"></a><a id="sthref998"></a><a id="sthref999"></a>XMLDOM_ACCEPT_NODE_F()</h3>
<p>Sole method of <code>NodeFilter</code> interface. Given a node and a filter, determines the filtering action to perform.</p>
<p>This function pointer is passed to the node iterator/tree walker methods, as needed.</p>
<p>Values for xmlerr are:</p>
<ul>
<li>
<p><code>XMLERR_OK</code> Accept the node. Navigation methods defined for <code>NodeIterator</code> or <code>TreeWalker</code> will return this node.</p>
</li>
<li>
<p><code>XMLERR_FILTER_REJECT</code> Reject the node. Navigation methods defined for <code>NodeIterator</code> or <code>TreeWalker</code> will not return this node. For <code>TreeWalker</code>, the children of this node will also be rejected. <code>NodeIterator</code>s treat this as a synonym for <code>XMLDOM_FILTER_SKIP</code></p>
</li>
<li>
<p><code>XMLERR_FILTER_SKIP</code> Skip this single node. Navigation methods defined for <code>NodeIterator</code> or <code>TreeWalker</code> will not return this node. For both <code>NodeIterator</code> and <code>TreeWalker</code>, the children of this node will still be considered.</p>
</li>
</ul>
<p class="subhead1"><a id="CAXML6097"></a>Syntax</p>
<pre>
#define XMLDOM_ACCEPT_NODE_F(func, xctx, node)
xmlerr func(
   xmlctx *xctx,
   xmlnode *node);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t9">Parameter</th>
<th class="cellalignment861" id="r1c2-t9">In/Out</th>
<th class="cellalignment861" id="r1c3-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t9" headers="r1c1-t9">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t9 r1c2-t9">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t9 r1c3-t9">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t9" headers="r1c1-t9">
<pre>
node
</pre></td>
<td class="cellalignment862" headers="r3c1-t9 r1c2-t9">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t9 r1c3-t9">node to test</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6098"></a>Returns</p>
<p><code>(xmlerr)</code> filtering result</p>
</div>
<!-- class="refsect1" -->
<a id="CIHJJABD"></a><a id="CAXML6099"></a>
<hr />
<div class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">NodeIterator Interface</h2>
<p><a href="#CIHJBHED">Table 10-3</a> summarizes the methods available through the <code>NodeIterator</code> interface.</p>
<div class="tblformal">
<p class="titleintable"><a id="CAXML6100"></a><a id="sthref1000"></a><a id="CIHJBHED"></a>Table 10-3 Summary of NodeIterator Methods; Package Traversal</p>
<table class="cellalignment860" title="Summary of NodeIterator Methods; Package Traversal" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t10">Function</th>
<th class="cellalignment861" id="r1c2-t10">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t10" headers="r1c1-t10">
<p><a href="#Xmldomiterdetach">XmlDomIterDetach()</a></p>
</td>
<td class="cellalignment862" headers="r2c1-t10 r1c2-t10">
<p>Detach a node iterator (deactivate it).</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t10" headers="r1c1-t10">
<p><a href="#Xmldomiternextnode">XmlDomIterNextNode()</a></p>
</td>
<td class="cellalignment862" headers="r3c1-t10 r1c2-t10">
<p>Returns next node for iterator.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t10" headers="r1c1-t10">
<p><a href="#Xmldomiterprevnode">XmlDomIterPrevNode()</a></p>
</td>
<td class="cellalignment862" headers="r4c1-t10 r1c2-t10">
<p>Returns previous node for iterator.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="Xmldomiterdetach"></a><a id="CAXML6101"></a>
<hr />
<h3 class="refsect2"><a id="sthref1001"></a><a id="sthref1002"></a><a id="sthref1003"></a>XmlDomIterDetach()</h3>
<p>Detaches the <code>NodeIterator</code> from the set which it iterated over, releasing any resources and placing the iterator in the <code>INVALID</code> state. After detach has been invoked, calls to <code>XmlDomIterNextNode</code> or <code>XmlDomIterPrevNode</code> will raise the exception <code>XMLERR_ITER_DETACHED</code>.</p>
<p class="subhead1"><a id="CAXML6102"></a>Syntax</p>
<pre>
xmlerr XmlDomIterDetach(
   xmlctx *xctx, 
   xmliter *iter);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t11">Parameter</th>
<th class="cellalignment861" id="r1c2-t11">In/Out</th>
<th class="cellalignment861" id="r1c3-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t11" headers="r1c1-t11">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t11 r1c2-t11">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t11 r1c3-t11">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t11" headers="r1c1-t11">
<pre>
iter
</pre></td>
<td class="cellalignment862" headers="r3c1-t11 r1c2-t11">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t11 r1c3-t11">node iterator object</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomiternextnode">XmlDomIterNextNode()</a>, <a href="#Xmldomiterprevnode">XmlDomIterPrevNode()</a></div>
<a id="Xmldomiternextnode"></a><a id="CAXML6103"></a>
<hr />
<h3 class="refsect2"><a id="sthref1004"></a><a id="sthref1005"></a><a id="sthref1006"></a>XmlDomIterNextNode()</h3>
<p>Returns the next node in the set and advances the position of the iterator in the set. After a node iterator is created, the first call to <code>XmlDomIterNextNode</code> returns the first node in the set. It assumed that the reference node (current iterator position) is never deleted. Otherwise, changes in the underlying DOM tree do not invalidate the iterator.</p>
<p class="subhead1"><a id="CAXML6104"></a>Syntax</p>
<pre>
xmlnode* XmlDomIterNextNode(
   xmlctx *xctx, 
   xmliter *iter, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t13">Parameter</th>
<th class="cellalignment861" id="r1c2-t13">In/Out</th>
<th class="cellalignment861" id="r1c3-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t13" headers="r1c1-t13">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t13 r1c2-t13">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t13 r1c3-t13">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t13" headers="r1c1-t13">
<pre>
iter
</pre></td>
<td class="cellalignment862" headers="r3c1-t13 r1c2-t13">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t13 r1c3-t13">node iterator object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t13" headers="r1c1-t13">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t13 r1c2-t13">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t13 r1c3-t13">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6105"></a>Returns</p>
<p><code>(xmlnode *)</code> next node in set being iterated over [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomiterprevnode">XmlDomIterPrevNode()</a>, <a href="#Xmldomiterdetach">XmlDomIterDetach()</a></div>
<a id="Xmldomiterprevnode"></a><a id="CAXML6106"></a>
<hr />
<h3 class="refsect2"><a id="sthref1007"></a><a id="sthref1008"></a><a id="sthref1009"></a>XmlDomIterPrevNode()</h3>
<p>Returns the previous node in the set and moves the position of the iterator backward in the set.</p>
<p class="subhead1"><a id="CAXML6107"></a>Syntax</p>
<pre>
xmlnode* XmlDomIterPrevNode(
   xmlctx *xctx, 
   xmliter *iter, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t15">Parameter</th>
<th class="cellalignment861" id="r1c2-t15">In/Out</th>
<th class="cellalignment861" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t15" headers="r1c1-t15">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t15 r1c2-t15">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t15 r1c3-t15">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t15" headers="r1c1-t15">
<pre>
iter
</pre></td>
<td class="cellalignment862" headers="r3c1-t15 r1c2-t15">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t15 r1c3-t15">node iterator object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t15" headers="r1c1-t15">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t15 r1c2-t15">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t15 r1c3-t15">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6108"></a>Returns</p>
<p><code>(xmlnode *)</code> previous node in set being iterated over [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomiternextnode">XmlDomIterNextNode()</a>, <a href="#Xmldomiterdetach">XmlDomIterDetach()</a></div>
</div>
<!-- class="refsect1" -->
<a id="Traversalinterfaces"></a><a id="CAXML6109"></a>
<hr />
<div class="refsect1">
<h2 class="refsect1">TreeWalker Interface</h2>
<p><a href="#Summarytraversal">Table 10-4</a> summarizes the methods available through the <code>TreeWalker</code> interface.</p>
<div class="tblformal">
<p class="titleintable"><a id="CAXML6110"></a><a id="sthref1010"></a><a id="Summarytraversal"></a>Table 10-4 Summary of TreeWalker Methods; Traversal Package</p>
<table class="cellalignment860" title="Summary of TreeWalker Methods; Traversal Package" summary="First column lists interfaces; second column provides a brief description of these interfaces." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t17">Function</th>
<th class="cellalignment861" id="r1c2-t17">Summary</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkerfirstchild">XmlDomWalkerFirstChild()</a></p>
</td>
<td class="cellalignment862" headers="r2c1-t17 r1c2-t17">
<p>Return first visible child of current node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkergetcurrentnode">XmlDomWalkerGetCurrentNode()</a></p>
</td>
<td class="cellalignment862" headers="r3c1-t17 r1c2-t17">
<p>Return current node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkergetroot">XmlDomWalkerGetRoot()</a></p>
</td>
<td class="cellalignment862" headers="r4c1-t17 r1c2-t17">
<p>Return root node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkerlastchild">XmlDomWalkerLastChild()</a></p>
</td>
<td class="cellalignment862" headers="r5c1-t17 r1c2-t17">
<p>Return last visible child of current node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r6c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkernextnode">XmlDomWalkerNextNode()</a></p>
</td>
<td class="cellalignment862" headers="r6c1-t17 r1c2-t17">
<p>Return next visible node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r7c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkernextsibling">XmlDomWalkerNextSibling()</a></p>
</td>
<td class="cellalignment862" headers="r7c1-t17 r1c2-t17">
<p>Return next sibling node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r8c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkerparentnode">XmlDomWalkerParentNode()</a></p>
</td>
<td class="cellalignment862" headers="r8c1-t17 r1c2-t17">
<p>Return parent node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r9c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkerprevnode">XmlDomWalkerPrevNode()</a></p>
</td>
<td class="cellalignment862" headers="r9c1-t17 r1c2-t17">
<p>Return previous node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r10c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkerprevsibling">XmlDomWalkerPrevSibling()</a></p>
</td>
<td class="cellalignment862" headers="r10c1-t17 r1c2-t17">
<p>Return previous sibling node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r11c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkersetcurrentnode">XmlDomWalkerSetCurrentNode()</a></p>
</td>
<td class="cellalignment862" headers="r11c1-t17 r1c2-t17">
<p>Set current node.</p>
</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r12c1-t17" headers="r1c1-t17">
<p><a href="#Xmldomwalkersetroot">XmlDomWalkerSetRoot()</a></p>
</td>
<td class="cellalignment862" headers="r12c1-t17 r1c2-t17">
<p>Set the root node.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="Xmldomwalkerfirstchild"></a><a id="CAXML6111"></a>
<hr />
<h3 class="refsect2"><a id="sthref1011"></a><a id="sthref1012"></a><a id="sthref1013"></a>XmlDomWalkerFirstChild()</h3>
<p>Moves the <code>TreeWalker</code> to the first visible child of the current node, and returns the new node. If the current node has no visible children, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6112"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerFirstChild(
   xmlctx *xctx,
   xmlwalk *walker,
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t18">Parameter</th>
<th class="cellalignment861" id="r1c2-t18">In/Out</th>
<th class="cellalignment861" id="r1c3-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t18" headers="r1c1-t18">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t18 r1c2-t18">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t18 r1c3-t18">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t18" headers="r1c1-t18">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t18 r1c2-t18">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t18 r1c3-t18"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t18" headers="r1c1-t18">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t18 r1c2-t18">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t18 r1c3-t18">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6113"></a>Returns</p>
<p><code>(xmlnode *)</code> first visible child [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomwalkerlastchild">XmlDomWalkerLastChild()</a></div>
<a id="Xmldomwalkergetcurrentnode"></a><a id="CAXML6114"></a>
<hr />
<h3 class="refsect2"><a id="sthref1014"></a><a id="sthref1015"></a><a id="sthref1016"></a>XmlDomWalkerGetCurrentNode()</h3>
<p>Return (get) current node, or <code>NULL</code> on error.</p>
<p class="subhead1"><a id="CAXML6115"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerGetCurrentNode(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t20">Parameter</th>
<th class="cellalignment861" id="r1c2-t20">In/Out</th>
<th class="cellalignment861" id="r1c3-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t20" headers="r1c1-t20">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t20 r1c2-t20">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t20 r1c3-t20">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t20" headers="r1c1-t20">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t20 r1c2-t20">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t20 r1c3-t20"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t20" headers="r1c1-t20">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t20 r1c2-t20">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t20 r1c3-t20">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6116"></a>Returns</p>
<p><code>(xmlnode *)</code> current node</p>
<a id="Xmldomwalkergetroot"></a><a id="CAXML6117"></a>
<hr />
<h3 class="refsect2"><a id="sthref1017"></a><a id="sthref1018"></a><a id="sthref1019"></a>XmlDomWalkerGetRoot()</h3>
<p>Return (get) root node, or <code>NULL</code> on error. Since the current node can be removed from under the root node together with a subtree where it belongs to, the current root node in a walker might have no relation to the current node any more. The <code>TreeWalker</code> iterations are based on the current node. However, the root node defines the space of an iteration. This function checks if the root node is still in the root node (ancestor) relation to the current node. If so, it returns this root node. Otherwise, it finds the root of the tree where the current node belongs to, and sets and returns this root as the root node of the walker. It returns <code>NULL</code> if the walker is a <code>NULL</code> pointer.</p>
<p class="subhead1"><a id="CAXML6118"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerGetRoot(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t21">Parameter</th>
<th class="cellalignment861" id="r1c2-t21">In/Out</th>
<th class="cellalignment861" id="r1c3-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t21" headers="r1c1-t21">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t21 r1c2-t21">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t21 r1c3-t21">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t21" headers="r1c1-t21">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t21 r1c2-t21">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t21 r1c3-t21">TreeWalker object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t21" headers="r1c1-t21">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t21 r1c2-t21">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t21 r1c3-t21">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6119"></a>Returns</p>
<p><code>(xmlnode *)</code> root node</p>
<a id="Xmldomwalkerlastchild"></a><a id="CAXML6120"></a>
<hr />
<h3 class="refsect2"><a id="sthref1020"></a><a id="sthref1021"></a><a id="sthref1022"></a>XmlDomWalkerLastChild()</h3>
<p>Moves the <code>TreeWalker</code> to the last visible child of the current node, and returns the new node. If the current node has no visible children, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6121"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerLastChild(
   xmlctx *xctx, 
   xmlwalk *walker,
    xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t22">Parameter</th>
<th class="cellalignment861" id="r1c2-t22">In/Out</th>
<th class="cellalignment861" id="r1c3-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t22" headers="r1c1-t22">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t22 r1c2-t22">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t22 r1c3-t22">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t22" headers="r1c1-t22">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t22 r1c2-t22">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t22 r1c3-t22">TreeWalker object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t22" headers="r1c1-t22">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t22 r1c2-t22">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t22 r1c3-t22">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6122"></a>Returns</p>
<p><code>(xmlnode *)</code> last visible children [or <code>NULL</code>]</p>
<a id="Xmldomwalkernextnode"></a><a id="CAXML6123"></a>
<hr />
<h3 class="refsect2"><a id="sthref1023"></a><a id="sthref1024"></a><a id="sthref1025"></a>XmlDomWalkerNextNode()</h3>
<p>Moves the <code>TreeWalker</code> to the next visible node in document order relative to the current node, and returns the new node. If the current node has no next node, or if the search for the next node attempts to step upward from the <code>TreeWalker</code>'s root node, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6124"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerNextNode(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t23">Parameter</th>
<th class="cellalignment861" id="r1c2-t23">In/Out</th>
<th class="cellalignment861" id="r1c3-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t23" headers="r1c1-t23">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t23 r1c2-t23">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t23 r1c3-t23">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t23" headers="r1c1-t23">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t23 r1c2-t23">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t23 r1c3-t23">TreeWalker object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t23" headers="r1c1-t23">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t23 r1c2-t23">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t23 r1c3-t23">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6125"></a>Returns</p>
<p><code>(xmlnode *)</code> next node [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomwalkerprevnode">XmlDomWalkerPrevNode()</a>, <a href="#Xmldomwalkernextsibling">XmlDomWalkerNextSibling()</a>, <a href="#Xmldomwalkerprevsibling">XmlDomWalkerPrevSibling()</a></div>
<a id="Xmldomwalkernextsibling"></a><a id="CAXML6126"></a>
<hr />
<h3 class="refsect2"><a id="sthref1026"></a><a id="sthref1027"></a><a id="sthref1028"></a>XmlDomWalkerNextSibling()</h3>
<p>Moves the <code>TreeWalker</code> to the next sibling of the current node, and returns the new node. If the current node has no visible next sibling, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6127"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerNextSibling(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t25">Parameter</th>
<th class="cellalignment861" id="r1c2-t25">In/Out</th>
<th class="cellalignment861" id="r1c3-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t25" headers="r1c1-t25">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t25 r1c2-t25">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t25 r1c3-t25">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t25" headers="r1c1-t25">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t25 r1c2-t25">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t25 r1c3-t25"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t25" headers="r1c1-t25">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t25 r1c2-t25">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t25 r1c3-t25">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6128"></a>Returns</p>
<p><code>(xmlnode *)</code> next sibling [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomwalkernextnode">XmlDomWalkerNextNode()</a>, <a href="#Xmldomwalkerprevnode">XmlDomWalkerPrevNode()</a>, <a href="#Xmldomwalkerprevsibling">XmlDomWalkerPrevSibling()</a></div>
<a id="Xmldomwalkerparentnode"></a><a id="CAXML6129"></a>
<hr />
<h3 class="refsect2"><a id="sthref1029"></a><a id="sthref1030"></a><a id="sthref1031"></a>XmlDomWalkerParentNode()</h3>
<p>Moves to and returns the closest visible ancestor node of the current node. If the search for the parent node attempts to step upward from the <code>TreeWalker</code>'s root node, or if it fails to find a visible ancestor node, this method retains the current position and returns null.</p>
<p class="subhead1"><a id="CAXML6130"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerParentNode(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t27">Parameter</th>
<th class="cellalignment861" id="r1c2-t27">In/Out</th>
<th class="cellalignment861" id="r1c3-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t27" headers="r1c1-t27">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t27 r1c2-t27">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t27 r1c3-t27">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t27" headers="r1c1-t27">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t27 r1c2-t27">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t27 r1c3-t27">TreeWalker object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t27" headers="r1c1-t27">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t27 r1c2-t27">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t27 r1c3-t27">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6131"></a>Returns</p>
<p><code>(xmlnode *)</code> parent node [or <code>NULL</code>]</p>
<a id="Xmldomwalkerprevnode"></a><a id="CAXML6132"></a>
<hr />
<h3 class="refsect2"><a id="sthref1032"></a><a id="sthref1033"></a><a id="sthref1034"></a>XmlDomWalkerPrevNode()</h3>
<p>Moves the <code>TreeWalker</code> to the previous visible node in document order relative to the current node, and returns the new node. If the current node has no previous node, or if the search for the previous node attempts to step upward from the <code>TreeWalker</code>'s root node, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6133"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerPrevNode(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t28">Parameter</th>
<th class="cellalignment861" id="r1c2-t28">In/Out</th>
<th class="cellalignment861" id="r1c3-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t28" headers="r1c1-t28">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t28 r1c2-t28">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t28 r1c3-t28">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t28" headers="r1c1-t28">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t28 r1c2-t28">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t28 r1c3-t28"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t28" headers="r1c1-t28">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t28 r1c2-t28">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t28 r1c3-t28">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6134"></a>Returns</p>
<p><code>(xmlnode *)</code> previous node [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomwalkernextnode">XmlDomWalkerNextNode()</a>, <a href="#Xmldomwalkernextsibling">XmlDomWalkerNextSibling()</a>, <a href="#Xmldomwalkerprevsibling">XmlDomWalkerPrevSibling()</a></div>
<a id="Xmldomwalkerprevsibling"></a><a id="CAXML6135"></a>
<hr />
<h3 class="refsect2"><a id="sthref1035"></a><a id="sthref1036"></a><a id="sthref1037"></a>XmlDomWalkerPrevSibling()</h3>
<p>Moves the <code>TreeWalker</code> to the previous sibling of the current node, and returns the new node. If the current node has no visible previous sibling, returns <code>NULL</code>, and retains the current node.</p>
<p class="subhead1"><a id="CAXML6136"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerPrevSibling(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t30">Parameter</th>
<th class="cellalignment861" id="r1c2-t30">In/Out</th>
<th class="cellalignment861" id="r1c3-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t30" headers="r1c1-t30">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t30 r1c2-t30">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t30 r1c3-t30">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t30" headers="r1c1-t30">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t30 r1c2-t30">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t30 r1c3-t30"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t30" headers="r1c1-t30">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r4c1-t30 r1c2-t30">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r4c1-t30 r1c3-t30">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6137"></a>Returns</p>
<p><code>(xmlnode *)</code> previous sibling [or <code>NULL</code>]</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#Xmldomwalkernextnode">XmlDomWalkerNextNode()</a>, <a href="#Xmldomwalkerprevnode">XmlDomWalkerPrevNode()</a>, <a href="#Xmldomwalkernextsibling">XmlDomWalkerNextSibling()</a></div>
<a id="Xmldomwalkersetcurrentnode"></a><a id="CAXML6138"></a>
<hr />
<h3 class="refsect2"><a id="sthref1038"></a><a id="sthref1039"></a><a id="sthref1040"></a>XmlDomWalkerSetCurrentNode()</h3>
<p>Sets and returns new current node. It also checks if the root node is an ancestor of the new current node. If not it does not set the current node, returns <code>NULL</code>, and sets retval to <code>XMLDOM_WALKER_BAD_NEW_CUR</code>. Returns <code>NULL</code> if an error.</p>
<p class="subhead1"><a id="CAXML6139"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerSetCurrentNode(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlnode *node, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t32">Parameter</th>
<th class="cellalignment861" id="r1c2-t32">In/Out</th>
<th class="cellalignment861" id="r1c3-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t32" headers="r1c1-t32">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t32 r1c2-t32">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t32 r1c3-t32">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t32" headers="r1c1-t32">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t32 r1c2-t32">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t32 r1c3-t32"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t32" headers="r1c1-t32">
<pre>
node
</pre></td>
<td class="cellalignment862" headers="r4c1-t32 r1c2-t32">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r4c1-t32 r1c3-t32">new current node</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t32" headers="r1c1-t32">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r5c1-t32 r1c2-t32">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r5c1-t32 r1c3-t32">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6140"></a>Returns</p>
<p><code>(xmlnode *)</code> new current node</p>
<a id="Xmldomwalkersetroot"></a><a id="CAXML6141"></a>
<hr />
<h3 class="refsect2"><a id="sthref1041"></a><a id="sthref1042"></a><a id="sthref1043"></a>XmlDomWalkerSetRoot()</h3>
<p>Set the root node. Returns new root node if it is an ancestor of the current node. If not it signals an error and checks if the current root node is an ancestor of the current node. If yes it returns it. Otherwise it sets the root node to and returns the root of the tree where the current node belongs to. It returns <code>NULL</code> if the walker or the root node parameter is a <code>NULL</code> pointer.</p>
<p class="subhead1"><a id="CAXML6142"></a>Syntax</p>
<pre>
xmlnode* XmlDomWalkerSetRoot(
   xmlctx *xctx, 
   xmlwalk *walker, 
   xmlnode *node, 
   xmlerr *xerr);
</pre>
<div class="inftblinformal">
<table class="cellalignment863" title="Paramter(s)" summary="Parameter Table; column 1 has parameters, column 2 has the binding (IN, OUT, or IN/OUT), and column 2 has the descriptions." dir="ltr">
<thead>
<tr class="cellalignment854">
<th class="cellalignment861" id="r1c1-t33">Parameter</th>
<th class="cellalignment861" id="r1c2-t33">In/Out</th>
<th class="cellalignment861" id="r1c3-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment854">
<td class="cellalignment862" id="r2c1-t33" headers="r1c1-t33">
<pre>
xctx
</pre></td>
<td class="cellalignment862" headers="r2c1-t33 r1c2-t33">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r2c1-t33 r1c3-t33">XML context</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r3c1-t33" headers="r1c1-t33">
<pre>
walker
</pre></td>
<td class="cellalignment862" headers="r3c1-t33 r1c2-t33">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r3c1-t33 r1c3-t33"><code>TreeWalker</code> object</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r4c1-t33" headers="r1c1-t33">
<pre>
node
</pre></td>
<td class="cellalignment862" headers="r4c1-t33 r1c2-t33">
<pre>
IN
</pre></td>
<td class="cellalignment862" headers="r4c1-t33 r1c3-t33">new root node</td>
</tr>
<tr class="cellalignment854">
<td class="cellalignment862" id="r5c1-t33" headers="r1c1-t33">
<pre>
xerr
</pre></td>
<td class="cellalignment862" headers="r5c1-t33 r1c2-t33">
<pre>
OUT
</pre></td>
<td class="cellalignment862" headers="r5c1-t33 r1c3-t33">numeric return error code</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p class="subhead1"><a id="CAXML6143"></a>Returns</p>
<p><code>(xmlnode *)</code> new root node</p>
</div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment853">
<tr>
<td class="cellalignment862">
<table class="cellalignment858">
<tr>
<td class="cellalignment857"><a href="soap.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment857"><a href="xml.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment865">
<table class="cellalignment856">
<tr>
<td class="cellalignment857"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment857"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment857"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment857"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment857"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment857"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
