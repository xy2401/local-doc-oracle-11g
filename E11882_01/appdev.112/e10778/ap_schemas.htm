<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DICOM XML Schemas</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 009" />
<meta name="dcterms.created" content="2010-08-02T8:12:22Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Multimedia DICOM Developer's Guide" />
<meta name="dcterms.identifier" content="E10778-03" />
<meta name="dcterms.isVersionOf" content="IMDCM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="dm_glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="ap_confg_docs.htm" title="Previous" type="text/html" />
<link rel="Next" href="ap_encdg_rls.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10778.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/31</span> <!-- End Header --><a id="BABEBCJJ"></a><a id="IMDCM11000"></a>
<h1 class="appendix"><span class="secnum">B</span> DICOM XML Schemas</h1>
<p>This appendix lists the DICOM XML schemas used by the methods of the ORDDicom object type. When Oracle Multimedia DICOM is installed, these schemas are registered as global XML schemas in Oracle Database with Oracle XML DB (see <a href="ch_adm_over.htm#CHDIHEGI">Section 9.2.1</a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The schemas in this appendix might not match the code shipped with the Oracle installation. For the final versions of these schemas, use the files provided with the installation.</div>
<p>The latest versions of these schemas are available as files in the <code>ord/xml/xsd</code> directory under <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code>.<a id="sthref990"></a><a id="sthref991"></a> To locate and examine the schemas, query the dictionary view ALL_XML_SCHEMAS (see <a class="olink REFRN20307" href="../../server.112/e40402/statviews_2137.htm#REFRN20307"></a><a href="ch_adm_over.htm#CHDIFGHD">Section 9.2.2</a>). In addition, read the documentation embedded within each schema file for more information.</p>
<p>The DICOM XML schemas are associated with one or more DICOM configuration documents. See <a href="ap_confg_docs.htm#BEIECEEI">Appendix A</a> for a list of configuration documents.</p>
<p>This appendix includes these DICOM XML schemas:</p>
<ul>
<li>
<p><a href="#BABEEICC">Anonymity Document Schema</a> (<code>ordcman.xsd</code>)</p>
</li>
<li>
<p><a href="#BABGGGJG">Constraint Document Schema</a> (<code>ordcmct.xsd</code>)</p>
</li>
<li>
<p><a href="#BABHBAIJ">Data Type Definition Schema</a> (<code>ordcmrdt.xsd</code>)</p>
</li>
<li>
<p><a href="#BABIJCHF">Default DICOM Metadata Schema</a> (<code>ordcmmd.xsd</code>)</p>
</li>
<li>
<p><a href="#BCFIFBBD">Manifest Document Schema</a> (<code>ordcmmft.xsd</code>)</p>
</li>
<li>
<p><a href="#BABGBICI">Mapping Document Schema</a> (<code>ordcmmp.xsd</code>)</p>
</li>
<li>
<p><a href="#BABEBFCA">Metadata Data Type Definition Schema</a> (<code>ordcmmddt.xsd</code>)</p>
</li>
<li>
<p><a href="#BABFEEEF">Preference Document Schema</a> (<code>ordcmpf.xsd</code>)</p>
</li>
<li>
<p><a href="#BABIIBCJ">Private Dictionary Document Schema</a> (<code>ordcmpv.xsd</code>)</p>
</li>
<li>
<p><a href="#BABGBJEJ">Standard Dictionary Document Schema</a> (<code>ordcmsd.xsd</code>)</p>
</li>
<li>
<p><a href="#BCFFHFAE">Stored Tag List Document Schema</a> (<code>ordcmstl.xsd</code>)</p>
</li>
<li>
<p><a href="#BABJDDAF">UID Definition Document Schema</a> (<code>ordcmui.xsd</code>)</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADXDB0600" href="../../appdev.112/e23094/xdb05sto.htm#ADXDB0600"><span class="italic">Oracle XML DB Developer's Guide</span></a> for more information about registering XML schemas</p>
</li>
<li>
<p><code><a href="http://www.w3.org/XML/Schema">http://www.w3.org/XML/Schema</a></code> for more information about XML schemas</p>
</li>
<li>
<p><a class="olink REFRN20307" href="../../server.112/e40402/statviews_2137.htm#REFRN20307"><span class="italic">Oracle Database Reference</span></a> for more information about the dictionary view ALL_XML_SCHEMAS</p>
</li>
</ul>
</div>
<a id="BABEEICC"></a><a id="IMDCM11100"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.1</span> Anonymity Document Schema</h2>
<p>The anonymity document schema <code>ordcman.xsd</code>, shown in <a href="#BABJHBCF">Example B-1</a>, defines the structure of the <a id="sthref992"></a>anonymity documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/anonymity_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABJHBCF"></a><a id="IMDCM13507"></a>Example B-1 Anonymity Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcman.xsd - XML schema for DICOM anonymity documents
--&gt;
 
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
 xmlns="http://xmlns.oracle.com/ord/dicom/anonymity_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/anonymity_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
     Introduction 
      This schema defines the DICOM anonymity document.
      
       Structure Overview
        Question mark "?" means optional items.
        Plus "+" means one or more items.
        Asterisk "*" means zero or more items.
        
        ANONYMITY_RULE_DOCUMENT
        DOCUMENT_HEADER?
         DOCUMENT_CHANGE_LOG*
          DOCUMENT_MODIFIER
          DOCUMENT_MODIFICATION_DATE
          DOCUMENT_VERSION?
          MODIFICATION_COMMENT?
          BASE_DOCUMENT?
          BASE_DOCUMENT_RELEASE_DATE?
          BASE_DOCUMENT_DESCRIPTION?
       PRIVATE_ATTRIBUTES
       UNDEFINED_STANDARD_ATTRIBUTES
       UNDEFINED_PRIVATE_ATTRIBUTES
       INDIVIDUAL_ATTRIBUTE*
       
       The preceding element values specify the actions required to make 
       a DICOM attribute, or a selected group of DICOM attributes, 
       anonymous.
       
      &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="ANONYMITY_RULE_DOCUMENT"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" nillable="true" minOccurs="0"/&gt;
        &lt;xs:element name="PRIVATE_ATTRIBUTES" type="ANONYM_G_T"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              Specify the action required to make all private 
              attributes anonymous.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="UNDEFINED_STANDARD_ATTRIBUTES" type="ANONYM_G_T"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
            Specify the action required to make all undefined 
            standard attributes anonymous. Undefined standard 
            attributes are not defined by the standard data dictionaries
            when makeAnonymous or isAnonymous functions are invoked.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="UNDEFINED_PRIVATE_ATTRIBUTES" type="ANONYM_G_T"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              Specify the action required to make all undefined private 
              attributes anonymous. Undefined private attributes are 
              not defined by the private data dictionaries when 
              makeAnonymous or isAnonymous functions are invoked. 
              This element takes priority over the previous 
              element PRIVATE_ATTRIBUTES.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="INDIVIDUAL_ATTRIBUTE" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              Specify the action required to make an attribute anonymous.
              This element overwrites the group specifications
              specified in the preceding elements.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_T"/&gt;
              &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
              &lt;xs:element name="ANONYMITY_ACTION" type="ANONYM_T" nillable="true"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="ANONYM_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
          The anonymity action type has an attribute action, 
          which defines the action used to make an
          attribute anonymous.
          If the value of the action attribute is "none", no
          action will be taken.
          If the value of the action attribute is "remove", then 
          the element does not require a value.(The default value
          of the action attribute is "remove").
          The selected candidate attribute will be removed from 
          the DICOM object to make it anonymous.
          If the value of the action attribute is "replace", then 
          the string value encoded in the attribute will be cast 
          into the corresponding type of the attribute and the
          new value replaces the original.
          If the value of the action attribute is "empty" , then the
          attribute will be changed into zero length attribute (for future
          use only).
          If the value of the action attribute is "encrypt", then the string 
          value encoded in the action attribute will be replaced with an
          encrypted value (for future use only).
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
      &lt;xs:extension base="dt:SHORT_STRING_T"&gt;
        &lt;xs:attribute name="action" default="remove"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="none"/&gt;
              &lt;xs:enumeration value="remove"/&gt;
              &lt;xs:enumeration value="replace"/&gt;
              &lt;xs:enumeration value="empty"/&gt;
              &lt;xs:enumeration value="encrypt"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ANONYM_G_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
          The anonymity action type for a group attribute is similar to
          ANONYM_T except that it does not allow "replace" action.
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
      &lt;xs:extension base="dt:SHORT_STRING_T"&gt;
        &lt;xs:attribute name="action" default="remove"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="none"/&gt;
              &lt;xs:enumeration value="remove"/&gt;
              &lt;xs:enumeration value="empty"/&gt;
              &lt;xs:enumeration value="encrypt"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABGGGJG"></a><a id="IMDCM11200"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.2</span> Constraint Document Schema</h2>
<p>The constraint document schema <code>ordcmct.xsd</code>, shown in <a href="#BABGBEJH">Example B-2</a>, defines the structure of the <a id="sthref993"></a>constraint documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/constraint_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABGBEJH"></a><a id="IMDCM13508"></a>Example B-2 Constraint Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcmct.xsd - XML schema for DICOM constraint documents
--&gt;

&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
 xmlns="http://xmlns.oracle.com/ord/dicom/constraint_1_0"
 xmlns:ct="http://xmlns.oracle.com/ord/dicom/constraint_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/constraint_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
 
    Introduction
      This schema defines the DICOM constraint document.
      
      A DICOM constraint document defines rules 
      to check the conformance of a DICOM content with respect to 
      the DICOM standard and other organization-wide guidelines.  
      This XML schema document defines the XML schema constraining 
      constraint documents.
      
      A constraint document defines one or more constraint rules.  
      A constraint rule is the unit of invocation for conformance checking.
      At run time, a user may invoke a PL/SQL
      or Java function to check the conformance of a DICOM content
      with respect to a particular rule. Each invocable rule
      is defined as a GLOBAL_RULE, which can reference other global 
      rules internally.  
      A constraint rule can be decomposed into individual predicates.  
      A predicate can be a logical statement, a relational statement 
      comparing values, a function call evaluation that returns a
      Boolean type, or a reference to other predicate definitions.   
      Predicate definitions are recursive. A predicate can be a logical
      statement, which includes the logical OR of two other predicates. 
      Each predicate can be a relational predicate. For example:
      (patientName=="Joe Smith"  AND patientSex=="M")
      After being translated into a predicate, the preceding example becomes: 
      &lt;PREDICATE&gt;
        &lt;DESCRIPTION&gt;An example to find an object that has
              (patientName="Joe Smith" AND patientSex=="M")
         &lt;/DESCRIPTION&gt;
        &lt;LOGICAL operator="and"&gt;
          &lt;PREDICATE&gt;
            &lt;RELATIONAL operator="eq"&gt;
              &lt;DICOM_ATTRIBUTE&gt;00100010&lt;/DICOM_ATTRIBUTE&gt;
              &lt;XML_VALUE&gt;
                &lt;dt:PERSON_NAME&gt;
                  &lt;dt:NAME&gt;
                    &lt;dt:FAMILY&gt;Smith&lt;/dt:FAMILY&gt;
                    &lt;dt:GIVEN&gt;Joe&lt;/dt:GIVEN&gt;
                  &lt;/dt:NAME&gt;
                &lt;/dt:PERSON_NAME&gt;
              &lt;/XML_VALUE&gt;
            &lt;/RELATIONAL&gt;
          &lt;/PREDICATE&gt;
          &lt;PREDICATE&gt;
            &lt;RELATIONAL operator="eq"&gt;
              &lt;DICOM_ATTRIBUTE&gt;00100040&lt;/DICOM_ATTRIBUTE&gt;
              &lt;XML_VALUE&gt;
                &lt;dt:CODE_STRING&gt;M&lt;/dt:CODE_STRING&gt;
              &lt;/XML_VALUE&gt;
            &lt;/RELATIONAL&gt;
          &lt;/PREDICATE&gt;
        &lt;/LOGICAL&gt;
      &lt;/PREDICATE&gt;
 
      Constraint macros can be used to simplify the definition of 
      complex constraint rules. Constraint macros follow the same predicate 
      definition grammar as constraint rules. The operands in 
      constraint macros can be variables rather than fixed values, as they are 
      in constraint rules. The variables in a macro are substituted when the 
      macro is invoked. For example, you can define a macro to compare
      patient names ( patientName == $NAME ). When this macro is invoked,
      the parameter NAME is assigned the value "Joe Smith" and the macro is
      transformed into the predicate:( patientName == "Joe Smith").
      As another example, you can define a macro to check if a DICOM attribute
      is a code sequence attribute. A code sequence attribute must contain the
      mandatory child attributes, code value and code scheme. This macro
      checks whether the specified code sequence attribute contains these
      mandatory child attributes. 
 
 
      &lt;GLOBAL_MACRO name="CSMacro"&gt;
        &lt;DESCRIPTION&gt;
          A subset of Code Sequence Macro defined in DICOM standard, 
          PS3.3-2007, Table 8.8-1
        &lt;/DESCRIPTION&gt;
        &lt;PARAMETER_DECLARATION&gt;
          CodeAttr
        &lt;/PARAMETER_DECLARATION&gt;
        &lt;PREDICATE&gt;
          &lt;DESCRIPTION&gt;Code value must not be empty&lt;/DESCRIPTION&gt;
          &lt;BOOLEAN_FUNC operator="notEmpty"&gt;
            &lt;DICOM_ATTRIBUTE&gt;${CodeAttr}.00080100
            &lt;/DICOM_ATTRIBUTE&gt;
          &lt;/BOOLEAN_FUNC&gt;
        &lt;/PREDICATE&gt;
        &lt;PREDICATE&gt;
          &lt;DESCRIPTION&gt;Code scheme designator must not be empty
          &lt;/DESCRIPTION&gt;
          &lt;BOOLEAN_FUNC operator="notEmpty"&gt;
            &lt;DICOM_ATTRIBUTE&gt;${CodeAttr}.00080102
            &lt;/DICOM_ATTRIBUTE&gt;
          &lt;/BOOLEAN_FUNC&gt;
        &lt;/PREDICATE&gt;
        &lt;!-- other predicates follow --&gt;
      &lt;/GLOBAL_MACRO&gt;
       
      You can separate a constraint definition into multiple files.  
      Each file defines one or more constraint rules or macros.  
      A file can import the macros and constraint rules that are 
      defined in a difference file. You must specify the set of 
      external rules or macros before referencing them in a file.
      EXTERNAL_RULE_INCLUDE and EXTERNAL_MACRO_INCLUDE
      statements serve this purpose.
      
     Structure Overview
      Question mark "?" means optional items.
      Plus "+" means one or more items.
      Asterisk "*" means zero or more items.
 
      
    CONFORMANCE_CONSTRAINT_DEFINITION
      DOCUMENT_HEADER?
        DOCUMENT_CHANGE_LOG+
          DOCUMENT_MODIFIER
          DOCUMENT_MODIFICATION_DATE
          DOCUMENT_VERSION?
          MODIFICATION_COMMENT?
          BASE_DOCUMENT?
          BASE_DOCUMENT_RELEASE_DATE?
          BASE_DOCUMENT_DESCRIPTION?
    EXTERNAL_MACRO_INCLUDE*
    EXTERNAL_RULE_INCLUDE*
    (GLOBAL_MACRO|GLOBAL_RULE)+
    
    GLOBAL_RULE (name) | PREDICATE_DEFINITION (name)
      DESCRIPTION?
      PREDICATE_DEFINITION*
      PREDICATE+
      ACTION (when, action)*
        
    GLOBAL_MACRO (name)
      DESCRIPTION?
      PARAMETER_DECLARATION+
      PREDICATE_DEFINITION*
      PREDICATE+
      ACTION (when, action)*
      
    PREDICATE
      DESCRIPTION?
      (LOGICAL|RELATIONAL|BOOLEAN_FUNC|INVOKE_MACRO|PREDICATE_REF|GLOBAL_RULE_REF)
      ACTION (when, action)*
      
    LOGICAL(operator)
      PREDICATE+
 
    RELATIONAL(operator)
      (ATTRIBUTE_TAG|FUNCTION)(ATTRIBUTE_TAG|STRING_VALUE|XML_VALUE|FUNCTION)+
 
    BOOLEAN_FUNC(operator)
      (ATTRIBUTE_TAG|STRING_VALUE|XML_VALUE|FUNCTION)*
 
    INVOKE_MACRO
      MACRO_NAME
      PARAMETER+
        NAME
        VALUE
 
    FUNCTION(operator)
      (ATTRIBUTE_TAG|STRING_VALUE|XML_VALUE|FUNCTION)*
 
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="CONFORMANCE_CONSTRAINT_DEFINITION"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;A constraint document defines groups of predicates to validate the conformance 
          of a DICOM content or a DICOM metadata document.&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="EXTERNAL_MACRO_INCLUDE" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:simpleContent&gt;
              &lt;xs:extension base="dt:SHORT_TEXT_T"&gt;
                &lt;xs:attribute name="name" type="dt:SHORT_ID_T" use="required"/&gt;
              &lt;/xs:extension&gt;
            &lt;/xs:simpleContent&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="EXTERNAL_RULE_INCLUDE" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:simpleContent&gt;
              &lt;xs:extension base="dt:SHORT_TEXT_T"&gt;
                &lt;xs:attribute name="name" type="dt:SHORT_ID_T" use="required"/&gt;
              &lt;/xs:extension&gt;
            &lt;/xs:simpleContent&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:choice maxOccurs="unbounded"&gt;
          &lt;xs:element name="GLOBAL_MACRO" type="PREDICATE_MACRO_T"&gt;
            &lt;xs:key name="LOCAL_PRED_KEY1"&gt;
              &lt;xs:selector xpath="ct:PREDICATES_DEFINITION"/&gt;
              &lt;xs:field xpath="@name"/&gt;
            &lt;/xs:key&gt;
            &lt;xs:keyref name="LOCAL_PREDICATE_REF1" refer="ct:LOCAL_PRED_KEY1"&gt;
              &lt;xs:selector xpath=".//ct:LOGICAL"/&gt;
              &lt;xs:field xpath=".//ct:PREDICATE_REF"/&gt;
            &lt;/xs:keyref&gt;
          &lt;/xs:element&gt;
          &lt;xs:element name="GLOBAL_RULE" type="PREDICATE_GROUP_T"&gt;
            &lt;xs:key name="LOCAL_PRED_KEY2"&gt;
              &lt;xs:selector xpath="ct:PREDICATES_DEFINITION"/&gt;
              &lt;xs:field xpath="@name"/&gt;
            &lt;/xs:key&gt;
            &lt;xs:keyref name="LOCAL_PREDICATE_REF2" refer="ct:LOCAL_PRED_KEY2"&gt;
              &lt;xs:selector xpath=".//ct:LOGICAL"/&gt;
              &lt;xs:field xpath=".//ct:PREDICATE_REF"/&gt;
            &lt;/xs:keyref&gt;
          &lt;/xs:element&gt;
        &lt;/xs:choice&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;!-- predicate group defined under the root element is global --&gt;
    &lt;xs:key name="GLOBAL_PRED1"&gt;
      &lt;xs:selector xpath="ct:GLOBAL_RULE|ct:EXTERNAL_RULE_INCLUDE"/&gt;
      &lt;xs:field xpath="@name"/&gt;
    &lt;/xs:key&gt;
    &lt;xs:keyref name="PREDICATE_REF1" refer="ct:GLOBAL_PRED1"&gt;
      &lt;xs:selector xpath=".//ct:LOGICAL"/&gt;
      &lt;xs:field xpath="ct:GLOBAL_RULE_REF"/&gt;
    &lt;/xs:keyref&gt;
    &lt;xs:key name="GLOBAL_MACRO1"&gt;
      &lt;xs:selector xpath="ct:GLOBAL_MACRO|ct:EXTERNAL_MACRO_INCLUDE"/&gt;
      &lt;xs:field xpath="@name"/&gt;
    &lt;/xs:key&gt;
    &lt;xs:keyref name="MACRO_USE1" refer="ct:GLOBAL_MACRO1"&gt;
      &lt;xs:selector xpath=".//ct:INVOKE_MACRO"/&gt;
      &lt;xs:field xpath="ct:MACRONAME"/&gt;
    &lt;/xs:keyref&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="PREDICATE_GROUP_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;A predicate group is the logical AND 
      of a collection of predicates or predicate groups. 
      Each predicate group has a name that is unique within 
      its parent. Any other predicates can reference
      this predicate group by its name. The value of the reference 
      is the Boolean of the predicate group.
      Optionally, a predicate group can contain a set of 
      predicate definitions. These definitions are not part of the
      logical AND component of the predicate group, but they
      are meant to be referenced within the predicate group.
      A predicate group has an optional action element that
      specifies what action to take when the predicate evaluates to true
      or false.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
      &lt;xs:element name="PREDICATES_DEFINITION" type="PREDICATE_GROUP_T" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:choice maxOccurs="unbounded"&gt;
        &lt;xs:element name="PREDICATE" type="PREDICATE_T"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element name="ACTION" type="ACTION_T" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="name" type="dt:SHORT_ID_T"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PREDICATE_MACRO_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
      &lt;xs:element name="PARAMETER_DECLARATION" type="dt:SHORT_NAME_T" nillable="false" maxOccurs="unbounded"/&gt;
      &lt;xs:element name="PREDICATES_DEFINITION" type="PREDICATE_GROUP_T" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:choice maxOccurs="unbounded"&gt;
        &lt;xs:element name="PREDICATE" type="PREDICATE_T"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element name="ACTION" type="ACTION_T" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="name" type="dt:SHORT_ID_T"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ACTION_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        A type to specify an action for a predicate value.
        The "when" attribute specifies the predicate value.
        The "action" attribute specifies the type of action.
        When the action type is "log", "warning", or "error",
        the string value of this attribute is returned
        in a log file or as part of warning or error message.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="dt:SHORT_TEXT_T"&gt;
        &lt;xs:attribute name="when" type="xs:boolean" use="required"/&gt;
        &lt;xs:attribute name="action" type="ACTION_LIST_T" use="required"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="ACTION_LIST_T"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:enumeration value="none"/&gt;
      &lt;xs:enumeration value="log"/&gt;
      &lt;xs:enumeration value="warning"/&gt;
      &lt;xs:enumeration value="error"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="PREDICATE_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
      &lt;xs:choice&gt;
        &lt;xs:element name="LOGICAL" type="LOGICAL_PREDICATE_T"/&gt;
        &lt;xs:element name="RELATIONAL" type="RELATIONAL_PREDICATE_T"/&gt;
        &lt;xs:element name="BOOLEAN_FUNC" type="BOOLEAN_FUNC_PREDICATE_T"/&gt;
        &lt;xs:element name="INVOKE_MACRO" type="MACRO_USE_T"/&gt;
        &lt;xs:element name="PREDICATE_REF" type="xs:IDREF"/&gt;
        &lt;xs:element name="GLOBAL_RULE_REF" type="xs:IDREF"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element name="ACTION" type="ACTION_T" nillable="true" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="MACRO_USE_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="MACRO_NAME" type="xs:IDREF"/&gt;
      &lt;xs:element name="PARAMETER" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence maxOccurs="unbounded"&gt;
            &lt;xs:element name="NAME" type="dt:SHORT_STRING_T" nillable="false"/&gt;
            &lt;xs:element name="VALUE" type="dt:SHORT_TEXT_T"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LOGICAL_PREDICATE_T"&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;!--Boolean type, static  inline predicate definition --&gt;
      &lt;xs:element name="PREDICATE" type="PREDICATE_T"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="operator" use="required"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:token"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              A derive B   ( (NOT A)  OR B )
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
          &lt;xs:enumeration value="and"/&gt;
          &lt;xs:enumeration value="or"/&gt;
          &lt;xs:enumeration value="derive"/&gt;
          &lt;xs:enumeration value="not"/&gt;
          &lt;xs:enumeration value="xor"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="RELATIONAL_PREDICATE_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:choice&gt;
        &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_MACRO_T"/&gt;
        &lt;xs:element name="FUNCTION" type="FUNCTION_T"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:choice maxOccurs="unbounded"&gt;
        &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_MACRO_T"/&gt;
        &lt;xs:element name="STRING_VALUE" type="dt:MIXED_TEXT_T"/&gt;
        &lt;xs:element name="XML_VALUE" type="dt:ATTR_VALUE_T"/&gt;
        &lt;xs:element name="FUNCTION" type="FUNCTION_T"/&gt;
      &lt;/xs:choice&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="operator" use="required"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:token"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
            gt     greater than
            ge     greater than or equal to
            lt     less than
            le     less than or equal to
            eq     equal to
            ne     not equal to
            in     value in the set of
            match  attribute value matches pattern
              The second operand must be a Java regular expression 
              pattern as specified by JDK1.5 java.lang.String class 
              documentation. The first operator should be a DICOM 
              attribute tag. The tag should identify an attribute
              that belongs to one of the following value representation 
              types:
                 AE, AS, AT, CS, DA, DT, LO, LT, PN,
                 SH, ST, TM, UI and UT
            Note that the operands must be compatible with each other 
            when a predicate invokes relational operator. For example, 
            (patientAge &gt; 005M) is a valid predicate. But 
            (patientAge &gt; "Joe Smith") is not a valid predicate, because 
            the operand "Joe Smith" cannot be cast into an instance 
            of the patient age attribute.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
          &lt;xs:enumeration value="gt"/&gt;
          &lt;xs:enumeration value="ge"/&gt;
          &lt;xs:enumeration value="lt"/&gt;
          &lt;xs:enumeration value="le"/&gt;
          &lt;xs:enumeration value="eq"/&gt;
          &lt;xs:enumeration value="ne"/&gt;
          &lt;xs:enumeration value="in"/&gt;
          &lt;xs:enumeration value="match"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="BOOLEAN_FUNC_PREDICATE_T"&gt;
    &lt;xs:choice maxOccurs="unbounded" minOccurs="0"&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_MACRO_T"/&gt;
      &lt;xs:element name="STRING_VALUE" type="dt:MIXED_TEXT_T"/&gt;
      &lt;xs:element name="XML_VALUE" type="dt:ATTR_VALUE_T"/&gt;
      &lt;xs:element name="FUNCTION" type="FUNCTION_T"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="operator" use="required"&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
          To allow future extensions, the set of allowed operators for Boolean 
          function types are not fixed. Operator names are case-sensitive.
          The current values for this operator 
          are: "notEmpty", "occurs", "true", and "false". 
          "occurs" takes a single operand ATTRIBUTE_TAG, 
          and returns true if an attribute matching the tag exists. (The 
          attribute value can be an empty string or null. For example, 
          a DICOM type 2 attribute may be empty.); Otherwise, it returns
          false.
          "notEmpty" takes a single operand ATTRIBUTE_TAG. 
          It returns true if an attribute matching the tag exists in 
          a DICOM content and has a non-null value (e.g. a DICOM type 1 
          attribute); otherwise, it returns false.
          "true" takes no operand and it always returns true.
          "false" takes no operand and it always returns false.
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:token"&gt;
          &lt;xs:maxLength value="64"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="FUNCTION_T"&gt;
    &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_MACRO_T"/&gt;
      &lt;xs:element name="STRING_VALUE" type="dt:MIXED_TEXT_T"/&gt;
      &lt;xs:element name="XML_VALUE" type="dt:ATTR_VALUE_T"/&gt;
      &lt;xs:element name="FUNCTION" type="FUNCTION_T"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="operator" use="required"&gt;
      &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
          To allow future extensions, the set of allowed operators for 
          function types are not fixed. Operator names are case-sensitive.
          This feature is not supported for Oracle Database 11g Release 1.
        &lt;/xs:documentation&gt;
      &lt;/xs:annotation&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:token"&gt;
          &lt;xs:maxLength value="64"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABHBAIJ"></a><a id="IMDCM11300"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.3</span> Data Type Definition Schema</h2>
<p>The schema <code>ordcmrdt.xsd</code>, shown in <a href="#BCFJEGEE">Example B-3</a>, defines the DICOM standard data types. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/datatype_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BCFJEGEE"></a><a id="IMDCM13631"></a>Example B-3 Data Type Definition Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, 2009, Oracle and/or its affiliates.All rights reserved. 
 
   NAME
     ordcmrdt.xsd - XML schema for DICOM standard data types. 
--&gt;
 
&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xdb="http://xmlns.oracle.com/xdb" 
 targetNamespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the DICOM standard data types that are used 
      by all other DICOM XML schema definitions.
      
    Naming conventions:
    All DICOM value representation (VR) types are named with a 
    2-character string, such as "AE" and "CS".
    All DICOM attribute type definitions are named as VR_ATTR_T, 
    where VR is replaced by the attribute's 2-character VR.
    
    Note that each item of a sequence type (SQ) is of DATASET_T type.
    The DATASET_T type can recursively contain more attributes.
    The element name of an attribute is its value representation (VR)
    name. Oracle uses value representation names defined
    by the DICOM standard part 5. The element
    name to VR mappings are:
      APPLICATION_ENTITY     ---   AE
      AGE_STRING     ---  AS
      ATTRIBUTE_TAG     ---  AT
      CODE_STRING     ---  CS
      DATE     ---  DA
      DECIMAL_STRING     ---  DS
      FLOAT_SINGLE     ---  FL
      FLOAT_DOUBLE     ---  FD
      INTEGER_STRING     ---  IS
      LONG_STRING     ---  LO
      LONG_TEXT     ---  LT
      OTHER_BYTE     ---  OB
      OTHER_FLOAT     ---  OF
      OTHER_WORD     ---  OW
      OTHER_WORD     ---  OWB
      PERSON_NAME     ---  PN
      SHORT_STRING     ---  SH
      SIGNED_LONG     ---  SL
      SEQUENCE     ---  SQ
      SIGNED_SHORT     ---  SS
      SHORT_TEXT     ---  ST
      TIME     ---  TM
      UNIQUE_ID     ---  UI
      UNSIGNED_LONG     ---  UL
      UNKNOWN     ---  UN
      UNSIGNED_SHORT     ---  US
      SIGNED_SHORT       ---  USS
      UNLIMITED_TEXT     ---  UT
      EXTENDED_TYPE     ---  EXT
      EXCEPTION_TYPE     ---  EXP
      The VR types "OWB', "EXT", "EXP" and "USS" are 
      Oracle-defined extensions.
      Please refer to the individual data type documentation for 
      more explanation.
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:simpleType name="AE"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Value representation Application Entity&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="AS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Value representation Age String. 
        The age string can be expressed either in DICOM string 
        format, or in number of days. When metadata is extracted 
        from a DICOM object, both elements will be populated.
        XML documents can represent age by either format.  
        Age in number of days is converted into an age string when 
        XML metadata is encoded into a DICOM object.
        To convert from age string into the number of days:  
          365 * number_of_year or 31 * number_of_month.  
        Because AGE_STRING is mandatory, it is not necessary to 
        convert from the number of days into an age string. 
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="VALUE" nillable="true"&gt;
        &lt;xs:simpleType&gt;
          &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:pattern value="[0-9]{3}(D|W|M|Y)"/&gt;
          &lt;/xs:restriction&gt;
        &lt;/xs:simpleType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="AGE_IN_DAYS" type="xs:unsignedInt" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="AT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Attribute Tag. An attribute tag is expressed as two 
        big-endian 2-byte hexadecimal number (group number followed by 
        element number with no separator).
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:hexBinary"&gt;
      &lt;xs:minLength value="4"/&gt;
      &lt;xs:maxLength value="4"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="CS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Code String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DA"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type DAte&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:date"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Decimal String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Data Time&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:dateTime"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="FL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type FLoating-point single&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="FD"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Floating-point Double&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:double"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="IS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Integer String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="LO"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type LOng string&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="64"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="LT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Long Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="10240"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="OB"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Other Byte&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:base64Binary"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="OF"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt; VR type Other Float &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="OW"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Other Word in base64binary encoding.
        The mandatory attribute endian specifies the byte 
        order of the binary value.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:base64Binary"&gt;
        &lt;xs:attribute name="endian" use="required"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="big"/&gt;
              &lt;xs:enumeration value="little"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PN"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Person Name. Person Name can be
        expressed either in component format or as a single 
        concatentated string. When metadata is extracted from a 
        DICOM object, the person name type is encoded with
        both formats. Users can index and search DICOM 
        metadata with either the component format or the 
        concatenated string format.
        In component format, a name has an optional "type" attribute that
        indicates its encoding type. The value of the "type" attribute 
        can be "unibyte", "ideographic" or "phonetic". A name may 
        have up to five components: "FAMILY", "GIVEN", "MIDDLE",
        "PREFIX", and "SUFFIX".
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="NAME" minOccurs="0" maxOccurs="3" nillable="true"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="FAMILY" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="GIVEN" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="MIDDLE" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="PREFIX" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="SUFFIX" type="xs:string" minOccurs="0" nillable="true"/&gt;
          &lt;/xs:sequence&gt;
          &lt;xs:attribute name="type" default="unibyte"&gt;
            &lt;xs:simpleType&gt;
              &lt;xs:restriction base="xs:token"&gt;
                &lt;xs:enumeration value="unibyte"/&gt;
                &lt;xs:enumeration value="ideographic"/&gt;
                &lt;xs:enumeration value="phonetic"/&gt;
              &lt;/xs:restriction&gt;
            &lt;/xs:simpleType&gt;
          &lt;/xs:attribute&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="VALUE" minOccurs="0" nillable="true"&gt;
        &lt;xs:simpleType&gt;
          &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:maxLength value="64"/&gt;
          &lt;/xs:restriction&gt;
        &lt;/xs:simpleType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SH"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type SHort string&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Signed Long&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="SQ"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type SeQuence. 
        Note that item number can be explicitly encoded in XML. 
        Number counts from 1 up.
        Each item is a DATASET_T type, which may contain 
        any combination of DICOM attributes.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;xs:element name="ITEM" type="DATASET_T" minOccurs="0" nillable="true"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Signed Short&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="ST"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Short Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="1024"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="TM"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type TiMe&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:time"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UI"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unique Identifier&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="128"/&gt;
      &lt;xs:pattern value="[0-9\.]+"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unsigned Long&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:unsignedInt"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="UN"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type UNknown.
        This type contains a base64 dump of its binary content. The mandatory
        attribute "endian" specifies the byte order of this encoding.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:base64Binary"&gt;
        &lt;xs:attribute name="endian" use="required"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="big"/&gt;
              &lt;xs:enumeration value="little"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="US"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unsigned Short&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:unsignedShort"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unlimited Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="EXT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Extension type 
        This type does not have direct mapping to any value 
        representation (VR) types defined in Part 5 of the 
        DICOM standard.   
        It can accommodate future extensions to DICOM VR
        types without modification to the XML schema definitions.
        The VR element specifies the value representation.
        The VALUE element specifies the XML value for the
        corresponding data element. The exact XML schema 
        definition can be introduced in the future.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="VR" type="xs:token"/&gt;
      &lt;xs:element name="VALUE" type="xs:anyType" nillable="true"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="EXP"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Exception type.
        This type does not have direct mapping to any value 
        representation (VR) types defined in Part 5 of the 
        DICOM standard.   
        It indicates an error situation. It is equivalent to 
        an exception in the Java language.
        The value of this data type is the original byte 
        array of the data type in the DICOM object.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:base64Binary"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="DATASET_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The dataset type maps the DICOM concept dataset 
        into an XML schema type(See the DICOM standard P3-5) .
        A dataset may contain any number of DICOM attributes.
        Each type of attribute has a name that reflects
        the DICOM value representation of the attribute.
        Each attribute is strongly typed, and its type matches its DICOM
        VR. Note that DICOM attribute type SQ (sequence) may 
        recursively contain items that are also of the dataset type.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:choice maxOccurs="unbounded" minOccurs="0"&gt;
      &lt;xs:element name="APPLICATION_ENTITY" type="AE_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="AGE_STRING" type="AS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="AT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="CODE_STRING" type="CS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DATE" type="DA_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DATE_TIME" type="DT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DECIMAL_STRING" type="DS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="FLOAT_SINGLE" type="FL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="FLOAT_DOUBLE" type="FD_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="INTEGER_STRING" type="IS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="LONG_STRING" type="LO_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="LONG_TEXT" type="LT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_BYTE" type="OB_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_FLOAT" type="OF_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_WORD" type="OW_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="PERSON_NAME" type="PN_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SHORT_STRING" type="SH_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SIGNED_LONG" type="SL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SEQUENCE" type="SQ_ATTR_T" nillable="true" xdb:SQLType="CLOB"/&gt;
      &lt;xs:element name="SIGNED_SHORT" type="SS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SHORT_TEXT" type="ST_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="TIME" type="TM_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNIQUE_ID" type="UI_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNSIGNED_LONG" type="UL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNKNOWN" type="UN_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNSIGNED_SHORT" type="US_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNLIMITED_TEXT" type="UT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="EXTENDED_TYPE" type="EXT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="EXCEPTION_TYPE" type="EXP_ATTR_T" nillable="true"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="number" type="xs:long" use="optional" default="1"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ATTR_VALUE_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute value type (ATTR_VALUE_T) maps to a single DICOM
        attribute value. Each type of attribute has a name that reflects
        the DICOM value representation of the attribute.
        Each attribute is strongly typed, and its type matches its DICOM
        VR. Certain DICOM configuration files, such as constraint 
        documents, use ATTR_VALUE_T.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:choice&gt;
      &lt;xs:element name="APPLICATION_ENTITY" type="AE"/&gt;
      &lt;xs:element name="AGE_STRING" type="AS"/&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="AT"/&gt;
      &lt;xs:element name="CODE_STRING" type="CS"/&gt;
      &lt;xs:element name="DATE" type="DA"/&gt;
      &lt;xs:element name="DATE_TIME" type="DT"/&gt;
      &lt;xs:element name="DECIMAL_STRING" type="DS"/&gt;
      &lt;xs:element name="FLOAT_SINGLE" type="FL"/&gt;
      &lt;xs:element name="FLOAT_DOUBLE" type="FD"/&gt;
      &lt;xs:element name="INTEGER_STRING" type="IS"/&gt;
      &lt;xs:element name="LONG_STRING" type="LO"/&gt;
      &lt;xs:element name="LONG_TEXT" type="LT"/&gt;
      &lt;xs:element name="OTHER_BYTE" type="OB"/&gt;
      &lt;xs:element name="OTHER_FLOAT" type="OF"/&gt;
      &lt;xs:element name="OTHER_WORD" type="OW"/&gt;
      &lt;xs:element name="PERSON_NAME" type="PN"/&gt;
      &lt;xs:element name="SHORT_STRING" type="SH"/&gt;
      &lt;xs:element name="SIGNED_LONG" type="SL"/&gt;
      &lt;xs:element name="SEQUENCE" type="SQ"/&gt;
      &lt;xs:element name="SIGNED_SHORT" type="SS"/&gt;
      &lt;xs:element name="SHORT_TEXT" type="ST"/&gt;
      &lt;xs:element name="TIME" type="TM"/&gt;
      &lt;xs:element name="UNIQUE_ID" type="UI"/&gt;
      &lt;xs:element name="UNSIGNED_LONG" type="UL"/&gt;
      &lt;xs:element name="UNKNOWN" type="UN"/&gt;
      &lt;xs:element name="UNSIGNED_SHORT" type="US"/&gt;
      &lt;xs:element name="UNLIMITED_TEXT" type="UT"/&gt;
      &lt;xs:element name="EXTENDED_TYPE" type="EXT"/&gt;
      &lt;xs:element name="EXCEPTION_TYPE" type="EXP"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:attributeGroup name="ATTR_GRP_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute group type (ATTR_GRP_T) is used by all DICOM attribute 
        definitions. It defines XML attributes that are used by all DICOM
        attribute types.
        The "tag" attribute defines DICOM attributes in little-endian encoding.
        The "definer" attribute specifies the organization that has
        created the attribute. By default, all DICOM standard 
        attributes have the definer name "DICOM".
        The "name" attribute specifies the canonical attribute name
        as defined by the data dictionary. For example, in 
        an XML metadata schema definition, you can choose a tag
        PATIENT_DATE_OF_BIRTH or "DOB" for DICOM attribute 
        (0010,0030), but its name attribute should match that of the
        DICOM standard: "Patient's Birth Date".
        The "number" attribute is an optional attribute to indicate the
        ordering of a multivalued attributes.  Number counts from 1 up.
        The "truncated" attribute takes a Boolean value. If it is true,
        it indicates that the original length of the DICOM attribute
        exceeds the maximum length allowed for this XML value;therefore,
        it is truncated in XML. When this attribute is true, 
        xsi:nill="true" for this attribute.
        Optionally, the "rawValue" attribute can be used to store 
        values that do not conform to the DICOM standard.   The 
        associated attribute "byteOrderLE" specifies the byte order
        of the byte stream for the "rawValue" attribute.
        "offset" and "length" are Oracle-reserved attributes.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:attribute name="tag" type="AT" use="required"/&gt;
    &lt;xs:attribute name="definer" type="LO" default="DICOM"/&gt;
    &lt;xs:attribute name="name" type="SHORT_STRING_T"/&gt;
    &lt;xs:attribute name="number" type="xs:long" use="optional" default="1"/&gt;
    &lt;xs:attribute name="offset" type="xs:long"/&gt;
    &lt;xs:attribute name="length" type="xs:long"/&gt;
    &lt;xs:attribute name="truncated" type="xs:boolean" default="false"/&gt;
    &lt;xs:attribute name="rawValue" type="xs:base64Binary"/&gt;
    &lt;xs:attribute name="byteOrderLE" type="xs:boolean" default="true"/&gt;
  &lt;/xs:attributeGroup&gt;
  &lt;xs:complexType name="AE_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="AE"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="AS_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="AS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="AT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="AT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="CS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="CS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DA_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DA"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="FD_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="FD"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="FL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="FL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="IS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="IS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LO_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="LO"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="LT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OB_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OB"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OF_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OF"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OW_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OW"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PN_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="PN"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SH_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SH"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SQ_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="SQ"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ST_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="ST"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="TM_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="TM"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UI_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UI"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UN_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UN"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="US_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="US"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="EXT_ATTR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        This attribute is useful for representing attributes whose
        VR types are not supported natively by Oracle.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="EXT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="EXP_ATTR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        This attribute type is useful for representing attributes that
        are present in a DICOM object, but whose definition cannot
        be found in the data dictionary. Such
        attributes cannot be parsed or interpreted.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="EXP"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DOCUMENT_HEADER_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
         Each time the XML configuration document is modified, 
         a new element, DOCUMENT_CHANGE_LOG, is 
         added to the DOCUMENT_HEADER.
         The change log describes who made what type of change to the 
         XML document on which date. It also describes what DICOM
         standard document the modification is based upon, either
         a DICOM change proposal (CP) or a DICOM supplement. 
         
         DOCUMENT_MODIFIER identifies the modifier of the present 
         XML document. If it is generated by software, specify the name 
         and version of the software.
         DOCUMENT_MODIFICATION_DATE specifies the date when
         this XML document is modified.
         DOCUMENT_VERSION specifies the version of the document after 
         the modification.
         MODIFICATION_COMMENT briefly describes the modification.
         BASE_DOCUMENT describes the document or DICOM standard
         that the modification is based upon.
         BASE_DOCUMENT_RELEASE_DATE specifies the release date of 
         the base document.
         BASE_DOCUMENT_DESCRIPTION briefly describes the base
         document.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DOCUMENT_CHANGE_LOG" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="DOCUMENT_MODIFIER" type="SHORT_STRING_T"/&gt;
            &lt;xs:element name="DOCUMENT_MODIFICATION_DATE" type="SHORT_STRING_T"/&gt;
            &lt;xs:element name="DOCUMENT_VERSION" type="SHORT_STRING_T" minOccurs="0"/&gt;
            &lt;xs:element name="MODIFICATION_COMMENT" type="SHORT_TEXT_T" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT" type="SHORT_STRING_T" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT_RELEASE_DATE" type="xs:date" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT_DESCRIPTION" type="SHORT_TEXT_T" minOccurs="0"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ATTR_DEFINERS_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute definer is identified by its name and UID.  
        In Oracle's implementation, the DICOM standard is given the
        definer name "DICOM" and the UID "1.2.840.10008.1".  
        All DICOM standard attributes are given the definer name "DICOM".
        Users can introduce private attributes of their own and encode them
        in an XML document. These private attributes are identified
        with the definer's name and UID. Oracle recommends that all DICOM 
        private attributes be associated with a UID-qualified name.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;xs:element name="ATTR_DEFINER"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="NAME" type="LO" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="UID" type="UI" minOccurs="0"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;!-- Attribute Tag (allowing x wildcard)--&gt;
  &lt;xs:simpleType name="ATTR_TAG_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt; 
        The attribute tag type differs from DICOM VR 
        type AT in that it allows the wildcard character 'x'.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:pattern value="([0-9a-fA-FxX]{8})"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="ATTR_RANGE_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The attribute range type defines a range of DICOM attributes. 
        This data type is used in private attribute definitions.
        Certain private attributes accept a range of attribute tags.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="STARTING_TAG" type="ATTR_TAG_T"/&gt;
      &lt;xs:element name="ENDING_TAG" type="ATTR_TAG_T"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="VALUE_LOCATOR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The DICOM value locator type identifies a particular
        DICOM attribute by "xxxxxxxx(definer)", where 
        "xxxxxxxx" is the attribute tag and "definer" is the
        attribute definer, which can be the DICOM standard
        (DICOM) or other private sources. 
        A locator path can also identify a particular 
        descendent of a container type attribute (SQ).
        The n-th item of a sequence attribute is denoted by
        "xxxxxxxxx(definer)[n]".    
        By default, the definer suffix "(definer)" can be 
        omitted if the attribute is a DICOM standard tag.  
        The index "n" of an item address "[n]" must be a 
        positive integer. The item address suffix can be 
        omitted if the item it pointed to is the first item 
        of a sequence. 
        For example, 00080096.00401101.00080100 is the code 
        that identifies the first referring physician. The 
        above value locator is equivalent to:
          00080096(DICOM)[1].00401101(DICOM)[1].00080100(DICOM)
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="VALUE_LOCATOR_MACRO_T"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VALUE_LOCATOR_MACRO_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        VALUE_LOCATOR_MACRO_T is similar to the value locator
        type, except that it permits the use of a macro within
        the locator string.
        So, the macro locator string can be:
          ${TAG}(DICOM)[2].00080100
        This string indicates the code value (0008,0100) of the second 
        item of a sequence attribute identified by ${TAG}.
        The macro parameter TAG can be replaced by a 
        compatible attribute tag (code sequence attribute)
        later.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="SHORT_TEXT_T"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VM_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM value multiplicity (VM) specification. 
        This type is used in DICOM dictionary documents. 
        Patterns of valid specifications are:
        "k", "k-j", "k-n", "n", "k-kn".
        In these patterns, k and j are integers, k is less 
        than j, and n is the letter n.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="SHORT_STRING_T"&gt;
      &lt;xs:pattern value="(([0-9]+)-)?(([0-9]*n|([0-9]+)))"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM value representation types.
        In the DICOM standard, VR for certain attributes 
        is defined as "other word or byte", "US or SS", or
        "See Note". Oracle has extended the list of VR types and 
        introduced OWB (for "other word or byte"), 
        USS (for "US or SS"), and 
        EXP (where VR definition does not apply).
        When an attribute of USS type is encoded into XML, it is
        automatically encoded as a signed short type.
        When an attribute of OWB type is encoded into XML, it is
        automatically encoded into other word type.
        An example of an attribute with VR type of EXP is
        the sequence item (FFFE, E000).
        For compatibility with future DICOM releases, if a new 
        DICOM VR is introduced by the DICOM standard, 
        users can mark such attributes as type "EXT??", 
        where "??" should be replaced by the new VR name.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:pattern value="AE"/&gt;
      &lt;xs:pattern value="AS"/&gt;
      &lt;xs:pattern value="AT"/&gt;
      &lt;xs:pattern value="CS"/&gt;
      &lt;xs:pattern value="DA"/&gt;
      &lt;xs:pattern value="DS"/&gt;
      &lt;xs:pattern value="DT"/&gt;
      &lt;xs:pattern value="FL"/&gt;
      &lt;xs:pattern value="FD"/&gt;
      &lt;xs:pattern value="IS"/&gt;
      &lt;xs:pattern value="LO"/&gt;
      &lt;xs:pattern value="LT"/&gt;
      &lt;xs:pattern value="OB"/&gt;
      &lt;xs:pattern value="OF"/&gt;
      &lt;xs:pattern value="OW"/&gt;
      &lt;xs:pattern value="PN"/&gt;
      &lt;xs:pattern value="SH"/&gt;
      &lt;xs:pattern value="SL"/&gt;
      &lt;xs:pattern value="SQ"/&gt;
      &lt;xs:pattern value="SS"/&gt;
      &lt;xs:pattern value="ST"/&gt;
      &lt;xs:pattern value="TM"/&gt;
      &lt;xs:pattern value="UI"/&gt;
      &lt;xs:pattern value="UL"/&gt;
      &lt;xs:pattern value="UN"/&gt;
      &lt;xs:pattern value="US"/&gt;
      &lt;xs:pattern value="UT"/&gt;
      &lt;xs:pattern value="USS"/&gt;
      &lt;xs:pattern value="OWB"/&gt;
      &lt;xs:pattern value="EXP"/&gt;
      &lt;xs:pattern value="EXT[A-Z]{2}"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_TEXT_T"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="1999"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="MIXED_TEXT_T" mixed="true"&gt;
   &lt;xs:complexContent mixed="true"&gt;
      &lt;xs:extension base="xs:anyType"&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SHORT_STRING_T"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="128"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_NAME_T"&gt;
      &lt;xs:restriction base="xs:NCName"&gt;
         &lt;xs:maxLength value="128"/&gt;
      &lt;/xs:restriction&gt;
   &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_ID_T"&gt;
    &lt;xs:restriction base="xs:ID"&gt;
      &lt;xs:maxLength value="64"/&gt;
      &lt;xs:pattern value="[^\.]+"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABIJCHF"></a><a id="IMDCM11400"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.4</span> Default DICOM Metadata Schema</h2>
<p>The schema <code>ordcmmd.xsd</code>, shown in <a href="#BABFJDDD">Example B-4</a>, defines the <a id="sthref994"></a>default DICOM metadata schema. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/metadata_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABFJDDD"></a><a id="IMDCM13510"></a>Example B-4 Default DICOM Metadata Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcmmd.xsd - XML schema for default DICOM metadata documents
--&gt;

&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/metadata_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/metadata_1_0"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/metadata_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:include schemaLocation="http://xmlns.oracle.com/ord/dicom/mddatatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the default DICOM metadata schema used
      by the ORDDicom object attribute (XMLType metadata).
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="DICOM_OBJECT" type="dt:DATASET_T"/&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BCFIFBBD"></a><a id="IMDCM13632"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.5</span> Manifest Document Schema</h2>
<p>The manifest document schema <code>ordcmmft.xsd</code>, shown in <a href="#BCFGHGBG">Example B-5</a>, defines the structure of the <a id="sthref995"></a>manifest documents, which are created when exporting a set of configuration documents from a DICOM repository. The manifest document specifies the name of each configuration document, its document type, and the load order to be used when importing the configuration document into a DICOM repository. The default manifest document is <code>ordcmmft.xml</code>. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/manifest_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BCFGHGBG"></a><a id="IMDCM13633"></a>Example B-5 Manifest Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/manifest_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/manifest_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
 
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
      This schema defines a DICOM manifest file. This file specifies the
      document name, type, and the order in which the configuration 
      documents are loaded into the DICOM data model repository. 
      This manifest file is created by the exportDataModel procedure 
      and is used by the importDataModel procedure in the data model 
      repository (ord_dicom_admin) API.
 
      The DOCUMENT_VERSION in the DOCUMENT_HEADER represents the repository
      version. This value identifies a set of configuration documents in 
      the repository. This value is for future use when we may maintain and
      export multiple versions of the data model repository.
        
      DICOM_MANIFEST
        DOCUMENT_HEADER?
           DOCUMENT_CHANGE_LOG*
           DOCUMENT_MODIFIER
           DOCUMENT_MODIFICATION_DATE
           DOCUMENT_VERSION?
           MODIFICATION_COMMENT?
           BASE_DOCUMENT?
          BASE_DOCUMENT_RELEASE_DATE?
          BASE_DOCUMENT_DESCRIPTION?
 
        DOCUMENT_DEF+
          NAME
          TYPE
          LOAD_ORDER
        
 
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
        
  &lt;xs:simpleType name="DOCUMENT_NAME_T"&gt;
    &lt;xs:annotation&gt;
       &lt;xs:documentation&gt;
         Name of a document in the dicom data model repository.
         This is the file name of the XML document that has been 
         exported from the repository or is being loaded into 
         the repository. 
       &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;  
      &lt;xs:maxLength value="100"/&gt;     
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
 
  &lt;xs:simpleType name="DOCUMENT_TYPE_T"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
      The document types supported in the data model repository.
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
       &lt;xs:pattern value="STANDARD_DICTIONARY" /&gt;
       &lt;xs:pattern value="PRIVATE_DICTIONARY" /&gt;
       &lt;xs:pattern value="MAPPING" /&gt;
       &lt;xs:pattern value="ANONYMITY" /&gt;
       &lt;xs:pattern value="PREFERENCE" /&gt;
       &lt;xs:pattern value="CONSTRAINT" /&gt;
       &lt;xs:pattern value="UID_DEFINITION" /&gt;
       &lt;xs:pattern value="STORED_TAG_LIST" /&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
 
     
  &lt;xs:element name="DICOM_MANIFEST"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" nillable="true" minOccurs="0"/&gt;
        &lt;xs:element name="DOCUMENT_DEF" maxOccurs="unbounded"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              Each document definition defines a document that to be
              inserted into or exported from the data model repository.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="NAME" type="DOCUMENT_NAME_T"/&gt;
              &lt;xs:element name="TYPE" type="DOCUMENT_TYPE_T"/&gt;
              &lt;xs:element name="LOAD_ORDER" type="xs:integer"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
          &lt;xs:unique name="docName"&gt;
            &lt;xs:selector xpath="NAME"/&gt;
            &lt;xs:field xpath="."/&gt;
          &lt;/xs:unique&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;      
 
 
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABGBICI"></a><a id="IMDCM11500"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.6</span> Mapping Document Schema</h2>
<p>The mapping document schema <code>ordcmmp.xsd</code>, shown in <a href="#BABFDCDC">Example B-6</a>, defines the structure of the <a id="sthref996"></a>mapping documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/mapping_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABFDCDC"></a><a id="IMDCM13511"></a>Example B-6 Mapping Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcmmp.xsd - XML schema for DICOM mapping documents
--&gt;
 
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
 xmlns="http://xmlns.oracle.com/ord/dicom/mapping_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/mapping_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
      This schema defines the DICOM (XML) mapping document.
      It defines how each DICOM attribute maps to an element of the 
      DICOM metadata document.
      
      The mapping document is used by the metadata encoder to produce 
      a DICOM metadata document. Each DICOM attribute is identified by 
      a 4-byte hexadecimal attribute tag. Each DICOM attribute is mapped 
      to an element of the XML metadata document designated by the PATH 
      element. By default, a DICOM attribute can be null and is optional.
      
      XML_MAPPING_DOCUMENT
        Question mark "?" means optional items.
        Plus "+" means one or more items.
        Asterisk "*" means zero or more items.
 
      DOCUMENT_HEADER?
        DOCUMENT_CHANGE_LOG*
         DOCUMENT_MODIFIER
         DOCUMENT_MODIFICATION_DATE
         DOCUMENT_VERSION?
         MODIFICATION_COMMENT?
         BASE_DOCUMENT?
         BASE_DOCUMENT_RELEASE_DATE?
         BASE_DOCUMENT_DESCRIPTION?
      NAMESPACE?
      ROOT_ELEM_TAG
      UNMAPPED_ELEM
      MAPPED_ELEM
      MAPPED_PATH+ (occurs?, notEmpty?, writeTag?, writeDefiner?, writeName?, writeRawValue)
         {ATTRIBUTE_TAG(definer), PATH}+
       
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="XML_MAPPING_DOCUMENT"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="NAMESPACE" type="dt:SHORT_TEXT_T"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              The namespace of the XML metadata schema on which a mapping 
              document is based. Metadata from a DICOM object can be
              mapped into an XML document constrained by this XML
              metadata schema. If the value of this element is an empty string,
              the extracted XML metadata document is not 
              associated with an XML schema.
              The order of the MAPPED_PATH elements
              MUST match the sequence of the corresponding XML 
              elements in this namespace.              
              &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="ROOT_ELEM_TAG" type="dt:SHORT_STRING_T"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
              This element specifies the root element tag of 
              an XML metadata document.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="UNMAPPED_ELEM" type="dt:SHORT_STRING_T" nillable="true" minOccurs="0"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
            This element specifies the XML path (appended to 
            ROOT_ELEM_TAG) for unmapped attributes, that is, the set
            of DICOM attributes that are present in a DICOM object, 
            but whose mappings have not been defined by the
            MAPPED_PATH elements of an XML mapping document.
            This element is optional. If this element is omitted or empty, 
            the unmapped attributes are appended to ROOT_ELEM_TAG. 
            If an XML schema is used to constrain the metadata document,
            the XML schema element pointed to by this element should
            be of type dt:DATASET_T. See the DICOM data type definition
            schema "http://xmlns.oracle.com/ord/dicom/datatype_1_0"
            and dt:DATASET_T for more information.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="MAPPED_ELEM" type="dt:SHORT_STRING_T" nillable="true" minOccurs="0"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
            This element specifies the XML path for all mapped 
            attributes, that is,  the set of DICOM attributes that are 
            present in a DICOM object, and whose mappings
            are defined by the MAPPED_XPATH elements 
            of an XML mapping document. This element
            specifies a relative path from ROOT_ELEM_TAG.
            For example, to map a DICOM attribute (0010,0010) to
            the XML element at "/DICOM_METADATA/PATIENT/NAME",
            specify the following 
            The ROOT_ELEM_TAG element value is "DICOM_METADATA".
            The MAPPED_ELEM element value is "PATIENT" and 
            The MAPPED_PATH/PATH element value should be "NAME".
            Alternatively, 
            if the value of element MAPPED_ELEM is an empty string,
            then the value of the element MAPPED_PATH/PATH
            should be "PATIENT/NAME".
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="MAPPED_PATH" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:annotation&gt;
                &lt;xs:documentation&gt;
                  A MAPPED_PATH element contains attribute tag and
                  path pairs.
                  An attribute tag uniquely identifies an attribute within the
                  data dictionary. Wildcards are not allowed in an attribute
                  tag specification in this release.
                  The path consists of slash "/"-concatenated element names.
                  A path specifies the destination of an attribute in the 
                  DICOM XML metadata document. The mapped path
                  is the relative path from ROOT_ELEM_TAG and
                  MAPPED_ELEM. The absolute path is:
                  "${ROOT_ELEM_TAG} / ${MAPPED_ELEM} / 
                  ${MAPPED_PATH}".
                  The optional attribute "occurs" specifies whether the
                  attribute must exist in the original DICOM content.
                  (The attribute tag must exist, but the attribute value
                  can be an empty string, for example, a DICOM  type 2 
                  attribute.)
                  The optional attribute "notEmpty" specifies 
                  whether the attribute must have a value in 
                  the original DICOM content (type 1 in DICOM terms).
                  Depending on the run-time preferences, if the 
                  above "occurs' or "notEmpty" condition is not 
                  met, an error may be thrown at run-time.
                  The optional attribute "writeTag" specifies whether to
                  add the attribute "tag" when writing the element.
                  The tag attribute is of type "dt:AT". The value of this
                  attribute is the DICOM attribute tag in little-endian 
                  encoding.
                  The optional attribute "writeDefiner" specifies whether
                  to add the attribute "definer" when writing the element.
                  The definer attribute is of type "dt:LO". The value of
                  this attribute is the same as the definer attribute of
                  ATTRIBUTE_TAG element of the mapping document.
                  The optional attribute "writeName" specifies whether
                  to add the attribute "name" when writing the element.
                  The name attribute is of type "dt:SHORT_STRING_T".
                  The value of this element is the attribute name
                  defined by the data dictionary.
                  The optional attribute "writeRawValue" specifies whether
                  to add the attribute "rawValue" when writing the element.
                  The raw value attribute is of type "xs:hexBinary".
                  This attribute only occurs when there is a parsing error
                  for this attribute and no XML value can be extracted for
                  the element. The value of this attribute is the 
                  hexadecimal dump of the original byte stream.
                &lt;/xs:documentation&gt;
              &lt;/xs:annotation&gt;
              &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_T"/&gt;
              &lt;xs:element name="PATH" type="dt:SHORT_TEXT_T"/&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:attribute name="occurs" type="xs:boolean" default="false"/&gt;
            &lt;xs:attribute name="notEmpty" type="xs:boolean" default="false"/&gt;
            &lt;xs:attribute name="writeTag" type="xs:boolean" default="false"/&gt;
            &lt;xs:attribute name="writeDefiner" type="xs:boolean" default="false"/&gt;
            &lt;xs:attribute name="writeName" type="xs:boolean" default="false"/&gt;
            &lt;xs:attribute name="writeRawValue" type="xs:boolean" default="false"/&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABEBFCA"></a><a id="IMDCM11600"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.7</span> Metadata Data Type Definition Schema</h2>
<p>The schema <code>ordcmmddt.xsd</code>, shown in <a href="#BCFIHFCA">Example B-7</a>, defines the metadata data types that are used by DICOM metadata schemas. <a id="sthref997"></a>The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/metadata_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BCFIHFCA"></a><a id="IMDCM13634"></a>Example B-7 Data Type Definition Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, 2009, Oracle and/or its affiliates.All rights reserved. 
 
   NAME
     ordcmmddt.xsd - XML schema for metadata data types 
--&gt;
 
&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/metadata_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xdb="http://xmlns.oracle.com/xdb" 
 targetNamespace="http://xmlns.oracle.com/ord/dicom/metadata_1_0"
 elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the data types that are used 
      by DICOM metadata schemas.
      
    Naming conventions:
    All DICOM value representation (VR) types are named with a 
    2-character string, such as "AE" and "CS".
    All DICOM attribute type definitions are named as VR_ATTR_T, 
    where VR is replaced by the attribute's 2-character VR.
    
    Note that each item of a sequence type (SQ) is of DATASET_T type.
    The DATASET_T type can recursively contain more attributes.
    The element name of an attribute is its value representation (VR)
    name. Oracle uses value representation names defined
    by the DICOM standard part 5. The element
    name to VR mappings are:
      APPLICATION_ENTITY     ---   AE
      AGE_STRING     ---  AS
      ATTRIBUTE_TAG     ---  AT
      CODE_STRING     ---  CS
      DATE     ---  DA
      DECIMAL_STRING     ---  DS
      FLOAT_SINGLE     ---  FL
      FLOAT_DOUBLE     ---  FD
      INTEGER_STRING     ---  IS
      LONG_STRING     ---  LO
      LONG_TEXT     ---  LT
      OTHER_BYTE     ---  OB
      OTHER_FLOAT     ---  OF
      OTHER_WORD     ---  OW
      OTHER_WORD     ---  OWB
      PERSON_NAME     ---  PN
      SHORT_STRING     ---  SH
      SIGNED_LONG     ---  SL
      SEQUENCE     ---  SQ
      SIGNED_SHORT     ---  SS
      SHORT_TEXT     ---  ST
      TIME     ---  TM
      UNIQUE_ID     ---  UI
      UNSIGNED_LONG     ---  UL
      UNKNOWN     ---  UN
      UNSIGNED_SHORT     ---  US
      SIGNED_SHORT       ---  USS
      UNLIMITED_TEXT     ---  UT
      EXTENDED_TYPE     ---  EXT
      EXCEPTION_TYPE     ---  EXP
      The VR types "OWB', "EXT", "EXP" and "USS" are 
      Oracle-defined extensions.
      Please refer to the individual data type documentation for 
      more explanation.
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:simpleType name="AE"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Value representation Application Entity&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="AS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Value representation Age String. 
        The age string can be expressed either in DICOM string 
        format, or in number of days. When metadata is extracted 
        from a DICOM object, both elements will be populated.
        XML documents can represent age by either format.  
        Age in number of days is converted into an age string when 
        XML metadata is encoded into a DICOM object.
        To convert from age string into the number of days:  
          365 * number_of_year or 31 * number_of_month.  
        Because AGE_STRING is mandatory, it is not necessary to 
        convert from the number of days into an age string. 
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="VALUE" nillable="true"&gt;
        &lt;xs:simpleType&gt;
          &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:pattern value="[0-9]{3}(D|W|M|Y)"/&gt;
          &lt;/xs:restriction&gt;
        &lt;/xs:simpleType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="AGE_IN_DAYS" type="xs:unsignedInt" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="AT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Attribute Tag. An attribute tag is expressed as two 
        big-endian 2-byte hexadecimal number (group number followed by 
        element number with no separator).
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:hexBinary"&gt;
      &lt;xs:minLength value="4"/&gt;
      &lt;xs:maxLength value="4"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="CS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Code String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DA"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type DAte&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:date"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Decimal String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="DT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Data Time&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:dateTime"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="FL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type FLoating-point single&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="FD"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Floating-point Double&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:double"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="IS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Integer String&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="LO"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type LOng string&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="64"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="LT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Long Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="10240"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="OB"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Other Byte&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:base64Binary"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="OF"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt; VR type Other Float &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:float"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="OW"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Other Word in base64binary encoding.
        The mandatory attribute endian specifies the byte 
        order of the binary value.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:base64Binary"&gt;
        &lt;xs:attribute name="endian" use="required"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="big"/&gt;
              &lt;xs:enumeration value="little"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PN"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type Person Name. Person Name can be
        expressed either in component format or as a single 
        concatentated string. When metadata is extracted from a 
        DICOM object, the person name type is encoded with
        both formats. Users can index and search DICOM 
        metadata with either the component format or the 
        concatenated string format.
        In component format, a name has an optional "type" attribute that
        indicates its encoding type. The value of the "type" attribute 
        can be "unibyte", "ideographic" or "phonetic". A name may 
        have up to five components: "FAMILY", "GIVEN", "MIDDLE",
        "PREFIX", and "SUFFIX".
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="NAME" minOccurs="0" maxOccurs="3" nillable="true"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="FAMILY" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="GIVEN" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="MIDDLE" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="PREFIX" type="xs:string" minOccurs="0" nillable="true"/&gt;
            &lt;xs:element name="SUFFIX" type="xs:string" minOccurs="0" nillable="true"/&gt;
          &lt;/xs:sequence&gt;
          &lt;xs:attribute name="type" default="unibyte"&gt;
            &lt;xs:simpleType&gt;
              &lt;xs:restriction base="xs:token"&gt;
                &lt;xs:enumeration value="unibyte"/&gt;
                &lt;xs:enumeration value="ideographic"/&gt;
                &lt;xs:enumeration value="phonetic"/&gt;
              &lt;/xs:restriction&gt;
            &lt;/xs:simpleType&gt;
          &lt;/xs:attribute&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="VALUE" minOccurs="0" nillable="true"&gt;
        &lt;xs:simpleType&gt;
          &lt;xs:restriction base="xs:token"&gt;
            &lt;xs:maxLength value="64"/&gt;
          &lt;/xs:restriction&gt;
        &lt;/xs:simpleType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SH"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type SHort string&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="16"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Signed Long&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="SQ"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type SeQuence. 
        Note that item number can be explicitly encoded in XML. 
        Number counts from 1 up.
        Each item is a DATASET_T type, which may contain 
        any combination of DICOM attributes.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;xs:element name="ITEM" type="DATASET_T" minOccurs="0" nillable="true"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SS"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Signed Short&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:integer"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="ST"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Short Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:maxLength value="1024"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="TM"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type TiMe&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:time"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UI"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unique Identifier&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="128"/&gt;
      &lt;xs:pattern value="[0-9\.]+"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UL"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unsigned Long&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:unsignedInt"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="UN"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM VR type UNknown.
        This type contains a base64 dump of its binary content. The mandatory
        attribute "endian" specifies the byte order of this encoding.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="xs:base64Binary"&gt;
        &lt;xs:attribute name="endian" use="required"&gt;
          &lt;xs:simpleType&gt;
            &lt;xs:restriction base="xs:token"&gt;
              &lt;xs:enumeration value="big"/&gt;
              &lt;xs:enumeration value="little"/&gt;
            &lt;/xs:restriction&gt;
          &lt;/xs:simpleType&gt;
        &lt;/xs:attribute&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="US"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unsigned Short&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:unsignedShort"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="UT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM VR type Unlimited Text&lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:string"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="EXT"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Extension type 
        This type does not have direct mapping to any value 
        representation (VR) types defined in Part 5 of the 
        DICOM standard.   
        It can accommodate future extensions to DICOM VR
        types without modification to the XML schema definitions.
        The VR element specifies the value representation.
        The VALUE element specifies the XML value for the
        corresponding data element. The exact XML schema 
        definition can be introduced in the future.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="VR" type="xs:token"/&gt;
      &lt;xs:element name="VALUE" type="xs:anyType" nillable="true"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="EXP"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;DICOM Exception type.
        This type does not have direct mapping to any value 
        representation (VR) types defined in Part 5 of the 
        DICOM standard.   
        It indicates an error situation. It is equivalent to 
        an exception in the Java language.
        The value of this data type is the original byte 
        array of the data type in the DICOM object.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:base64Binary"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="DATASET_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The dataset type maps the DICOM concept dataset 
        into an XML schema type(See the DICOM standard P3-5) .
        A dataset may contain any number of DICOM attributes.
        Each type of attribute has a name that reflects
        the DICOM value representation of the attribute.
        Each attribute is strongly typed, and its type matches its DICOM
        VR. Note that DICOM attribute type SQ (sequence) may 
        recursively contain items that are also of the dataset type.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:choice maxOccurs="unbounded" minOccurs="0"&gt;
      &lt;xs:element name="APPLICATION_ENTITY" type="AE_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="AGE_STRING" type="AS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="AT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="CODE_STRING" type="CS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DATE" type="DA_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DATE_TIME" type="DT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="DECIMAL_STRING" type="DS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="FLOAT_SINGLE" type="FL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="FLOAT_DOUBLE" type="FD_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="INTEGER_STRING" type="IS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="LONG_STRING" type="LO_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="LONG_TEXT" type="LT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_BYTE" type="OB_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_FLOAT" type="OF_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="OTHER_WORD" type="OW_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="PERSON_NAME" type="PN_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SHORT_STRING" type="SH_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SIGNED_LONG" type="SL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SEQUENCE" type="SQ_ATTR_T" nillable="true" 
        xdb:SQLType="CLOB" xdb:SQLName="SEQUENCE"/&gt;
      &lt;xs:element name="SIGNED_SHORT" type="SS_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="SHORT_TEXT" type="ST_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="TIME" type="TM_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNIQUE_ID" type="UI_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNSIGNED_LONG" type="UL_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNKNOWN" type="UN_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNSIGNED_SHORT" type="US_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="UNLIMITED_TEXT" type="UT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="EXTENDED_TYPE" type="EXT_ATTR_T" nillable="true"/&gt;
      &lt;xs:element name="EXCEPTION_TYPE" type="EXP_ATTR_T" nillable="true"/&gt;
    &lt;/xs:choice&gt;
    &lt;xs:attribute name="number" type="xs:long" use="optional" default="1"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ATTR_VALUE_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute value type (ATTR_VALUE_T) maps to a single DICOM
        attribute value. Each type of attribute has a name that reflects
        the DICOM value representation of the attribute.
        Each attribute is strongly typed, and its type matches its DICOM
        VR. Certain DICOM configuration files, such as constraint 
        documents, use ATTR_VALUE_T.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:choice&gt;
      &lt;xs:element name="APPLICATION_ENTITY" type="AE"/&gt;
      &lt;xs:element name="AGE_STRING" type="AS"/&gt;
      &lt;xs:element name="ATTRIBUTE_TAG" type="AT"/&gt;
      &lt;xs:element name="CODE_STRING" type="CS"/&gt;
      &lt;xs:element name="DATE" type="DA"/&gt;
      &lt;xs:element name="DATE_TIME" type="DT"/&gt;
      &lt;xs:element name="DECIMAL_STRING" type="DS"/&gt;
      &lt;xs:element name="FLOAT_SINGLE" type="FL"/&gt;
      &lt;xs:element name="FLOAT_DOUBLE" type="FD"/&gt;
      &lt;xs:element name="INTEGER_STRING" type="IS"/&gt;
      &lt;xs:element name="LONG_STRING" type="LO"/&gt;
      &lt;xs:element name="LONG_TEXT" type="LT"/&gt;
      &lt;xs:element name="OTHER_BYTE" type="OB"/&gt;
      &lt;xs:element name="OTHER_FLOAT" type="OF"/&gt;
      &lt;xs:element name="OTHER_WORD" type="OW"/&gt;
      &lt;xs:element name="PERSON_NAME" type="PN"/&gt;
      &lt;xs:element name="SHORT_STRING" type="SH"/&gt;
      &lt;xs:element name="SIGNED_LONG" type="SL"/&gt;
      &lt;xs:element name="SEQUENCE" type="SQ"/&gt;
      &lt;xs:element name="SIGNED_SHORT" type="SS"/&gt;
      &lt;xs:element name="SHORT_TEXT" type="ST"/&gt;
      &lt;xs:element name="TIME" type="TM"/&gt;
      &lt;xs:element name="UNIQUE_ID" type="UI"/&gt;
      &lt;xs:element name="UNSIGNED_LONG" type="UL"/&gt;
      &lt;xs:element name="UNKNOWN" type="UN"/&gt;
      &lt;xs:element name="UNSIGNED_SHORT" type="US"/&gt;
      &lt;xs:element name="UNLIMITED_TEXT" type="UT"/&gt;
      &lt;xs:element name="EXTENDED_TYPE" type="EXT"/&gt;
      &lt;xs:element name="EXCEPTION_TYPE" type="EXP"/&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:attributeGroup name="ATTR_GRP_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute group type (ATTR_GRP_T) is used by all DICOM attribute 
        definitions. It defines XML attributes that are used by all DICOM
        attribute types.
        The "tag" attribute defines DICOM attributes in little-endian encoding.
        The "definer" attribute specifies the organization that has
        created the attribute. By default, all DICOM standard 
        attributes have the definer name "DICOM".
        The "name" attribute specifies the canonical attribute name
        as defined by the data dictionary. For example, in 
        an XML metadata schema definition, you can choose a tag
        PATIENT_DATE_OF_BIRTH or "DOB" for DICOM attribute 
        (0010,0030), but its name attribute should match that of the
        DICOM standard: "Patient's Birth Date".
        The "number" attribute is an optional attribute to indicate the
        ordering of a multivalued attributes.  Number counts from 1 up.
        The "truncated" attribute takes a Boolean value. If it is true,
        it indicates that the original length of the DICOM attribute
        exceeds the maximum length allowed for this XML value;therefore,
        it is truncated in XML. When this attribute is true, 
        xsi:nill="true" for this attribute.
        Optionally, the "rawValue" attribute can be used to store 
        values that do not conform to the DICOM standard. The 
        associated attribute "byteOrderLE" specifies the byte order
        of the byte stream for the "rawValue" attribute.
        "offset" and "length" are Oracle-reserved attributes.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:attribute name="tag" type="AT" use="required"/&gt;
    &lt;xs:attribute name="definer" type="LO" default="DICOM"/&gt;
    &lt;xs:attribute name="name" type="SHORT_STRING_T"/&gt;
    &lt;xs:attribute name="number" type="xs:long" use="optional" default="1"/&gt;
    &lt;xs:attribute name="offset" type="xs:long"/&gt;
    &lt;xs:attribute name="length" type="xs:long"/&gt;
    &lt;xs:attribute name="truncated" type="xs:boolean" default="false"/&gt;
    &lt;xs:attribute name="rawValue" type="xs:base64Binary"/&gt;
    &lt;xs:attribute name="byteOrderLE" type="xs:boolean" default="true"/&gt;
  &lt;/xs:attributeGroup&gt;
  &lt;xs:complexType name="AE_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="AE"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="AS_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="AS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="AT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="AT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="CS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="CS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DA_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DA"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="DT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="FD_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="FD"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="FL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="FL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="IS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="IS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LO_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="LO"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="LT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OB_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OB"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OF_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OF"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OW_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="OW"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PN_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="PN"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SH_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SH"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SQ_ATTR_T"&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="SQ"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="SS_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="SS"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ST_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="ST"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="TM_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="TM"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UI_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UI"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UL_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UL"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UN_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UN"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="US_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="US"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="UT_ATTR_T"&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="UT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="EXT_ATTR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        This attribute is useful for representing attributes whose
        VR types are not supported natively by Oracle.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:complexContent&gt;
      &lt;xs:extension base="EXT"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="EXP_ATTR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        This attribute type is useful for representing attributes that
        are present in a DICOM object, but whose definition cannot
        be found in the data dictionary. Such
        attributes cannot be parsed or interpreted.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:simpleContent&gt;
      &lt;xs:extension base="EXP"&gt;
        &lt;xs:attributeGroup ref="ATTR_GRP_T"/&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:simpleContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="DOCUMENT_HEADER_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
         Each time the XML configuration document is modified, 
         a new element, DOCUMENT_CHANGE_LOG, is 
         added to the DOCUMENT_HEADER.
         The change log describes who made what type of change to the 
         XML document on which date. It also describes what DICOM
         standard document the modification is based upon, either
         a DICOM change proposal (CP) or a DICOM supplement. 
         
         DOCUMENT_MODIFIER identifies the modifier of the present 
         XML document. If it is generated by software, specify the name 
         and version of the software.
         DOCUMENT_MODIFICATION_DATE specifies the date when
         this XML document is modified.
         DOCUMENT_VERSION specifies the version of the document after 
         the modification.
         MODIFICATION_COMMENT briefly describes the modification.
         BASE_DOCUMENT describes the document or DICOM standard
         that the modification is based upon.
         BASE_DOCUMENT_RELEASE_DATE specifies the release date of 
         the base document.
         BASE_DOCUMENT_DESCRIPTION briefly describes the base
         document.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DOCUMENT_CHANGE_LOG" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="DOCUMENT_MODIFIER" type="SHORT_STRING_T"/&gt;
            &lt;xs:element name="DOCUMENT_MODIFICATION_DATE" type="SHORT_STRING_T"/&gt;
            &lt;xs:element name="DOCUMENT_VERSION" type="SHORT_STRING_T" minOccurs="0"/&gt;
            &lt;xs:element name="MODIFICATION_COMMENT" type="SHORT_TEXT_T" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT" type="SHORT_STRING_T" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT_RELEASE_DATE" type="xs:date" minOccurs="0"/&gt;
            &lt;xs:element name="BASE_DOCUMENT_DESCRIPTION" type="SHORT_TEXT_T" minOccurs="0"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ATTR_DEFINERS_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        Attribute definer is identified by its name and UID.  
        In Oracle's implementation, the DICOM standard is given the
        definer name "DICOM" and the UID "1.2.840.10008.1".  
        All DICOM standard attributes are given the definer name "DICOM".
        Users can introduce private attributes of their own and encode them
        in an XML document. These private attributes are identified
        with the definer's name and UID. Oracle recommends that all DICOM 
        private attributes be associated with a UID-qualified name.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence maxOccurs="unbounded"&gt;
      &lt;xs:element name="ATTR_DEFINER"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="NAME" type="LO" maxOccurs="unbounded"/&gt;
            &lt;xs:element name="UID" type="UI" minOccurs="0"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;!-- Attribute Tag (allowing x wildcard)--&gt;
  &lt;xs:simpleType name="ATTR_TAG_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt; 
        The attribute tag type differs from DICOM VR 
        type AT in that it allows the wildcard character 'x'.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:pattern value="([0-9a-fA-FxX]{8})"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="ATTR_RANGE_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The attribute range type defines a range of DICOM attributes. 
        This data type is used in private attribute definitions.
        Certain private attributes accept a range of attribute tags.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="STARTING_TAG" type="ATTR_TAG_T"/&gt;
      &lt;xs:element name="ENDING_TAG" type="ATTR_TAG_T"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="VALUE_LOCATOR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        The DICOM value locator type identifies a particular
        DICOM attribute by "xxxxxxxx(definer)", where 
        "xxxxxxxx" is the attribute tag and "definer" is the
        attribute definer, which can be the DICOM standard
        (DICOM) or other private sources. 
        A locator path can also identify a particular 
        descendent of a container type attribute (SQ).
        The n-th item of a sequence attribute is denoted by
        "xxxxxxxxx(definer)[n]".    
        By default, the definer suffix "(definer)" can be 
        omitted if the attribute is a DICOM standard tag.  
        The index "n" of an item address "[n]" must be a 
        positive integer. The item address suffix can be 
        omitted if the item it pointed to is the first item 
        of a sequence. 
        For example, 00080096.00401101.00080100 is the code 
        that identifies the first referring physician. The 
        above value locator is equivalent to:
          00080096(DICOM)[1].00401101(DICOM)[1].00080100(DICOM)
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="VALUE_LOCATOR_MACRO_T"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VALUE_LOCATOR_MACRO_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        VALUE_LOCATOR_MACRO_T is similar to the value locator
        type, except that it permits the use of a macro within
        the locator string.
        So, the macro locator string can be:
          ${TAG}(DICOM)[2].00080100
        This string indicates the code value (0008,0100) of the second 
        item of a sequence attribute identified by ${TAG}.
        The macro parameter TAG can be replaced by a 
        compatible attribute tag (code sequence attribute)
        later.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="SHORT_TEXT_T"/&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VM_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM value multiplicity (VM) specification. 
        This type is used in DICOM dictionary documents. 
        Patterns of valid specifications are:
        "k", "k-j", "k-n", "n", "k-kn".
        In these patterns, k and j are integers, k is less 
        than j, and n is the letter n.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="SHORT_STRING_T"&gt;
      &lt;xs:pattern value="(([0-9]+)-)?(([0-9]*n|([0-9]+)))"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="VR_T"&gt;
    &lt;xs:annotation&gt;
      &lt;xs:documentation&gt;
        DICOM value representation types.
        In the DICOM standard, VR for certain attributes 
        is defined as "other word or byte", "US or SS", or
        "See Note". Oracle has extended the list of VR types and 
        introduced OWB (for "other word or byte"), 
        USS (for "US or SS"), and 
        EXP (where VR definition does not apply).
        When an attribute of USS type is encoded into XML, it is
        automatically encoded as a signed short type.
        When an attribute of OWB type is encoded into XML, it is
        automatically encoded into other word type.
        An example of an attribute with VR type of EXP is
        the sequence item (FFFE, E000).
        For compatibility with future DICOM releases, if a new 
        DICOM VR is introduced by the DICOM standard, 
        users can mark such attributes as type "EXT??", 
        where "??" should be replaced by the new VR name.
      &lt;/xs:documentation&gt;
    &lt;/xs:annotation&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:pattern value="AE"/&gt;
      &lt;xs:pattern value="AS"/&gt;
      &lt;xs:pattern value="AT"/&gt;
      &lt;xs:pattern value="CS"/&gt;
      &lt;xs:pattern value="DA"/&gt;
      &lt;xs:pattern value="DS"/&gt;
      &lt;xs:pattern value="DT"/&gt;
      &lt;xs:pattern value="FL"/&gt;
      &lt;xs:pattern value="FD"/&gt;
      &lt;xs:pattern value="IS"/&gt;
      &lt;xs:pattern value="LO"/&gt;
      &lt;xs:pattern value="LT"/&gt;
      &lt;xs:pattern value="OB"/&gt;
      &lt;xs:pattern value="OF"/&gt;
      &lt;xs:pattern value="OW"/&gt;
      &lt;xs:pattern value="PN"/&gt;
      &lt;xs:pattern value="SH"/&gt;
      &lt;xs:pattern value="SL"/&gt;
      &lt;xs:pattern value="SQ"/&gt;
      &lt;xs:pattern value="SS"/&gt;
      &lt;xs:pattern value="ST"/&gt;
      &lt;xs:pattern value="TM"/&gt;
      &lt;xs:pattern value="UI"/&gt;
      &lt;xs:pattern value="UL"/&gt;
      &lt;xs:pattern value="UN"/&gt;
      &lt;xs:pattern value="US"/&gt;
      &lt;xs:pattern value="UT"/&gt;
      &lt;xs:pattern value="USS"/&gt;
      &lt;xs:pattern value="OWB"/&gt;
      &lt;xs:pattern value="EXP"/&gt;
      &lt;xs:pattern value="EXT[A-Z]{2}"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_TEXT_T"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="1999"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:complexType name="MIXED_TEXT_T" mixed="true"&gt;
   &lt;xs:complexContent mixed="true"&gt;
      &lt;xs:extension base="xs:anyType"&gt;
      &lt;/xs:extension&gt;
    &lt;/xs:complexContent&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="SHORT_STRING_T"&gt;
    &lt;xs:restriction base="xs:token"&gt;
      &lt;xs:maxLength value="128"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_NAME_T"&gt;
      &lt;xs:restriction base="xs:NCName"&gt;
         &lt;xs:maxLength value="128"/&gt;
      &lt;/xs:restriction&gt;
   &lt;/xs:simpleType&gt;
  &lt;xs:simpleType name="SHORT_ID_T"&gt;
    &lt;xs:restriction base="xs:ID"&gt;
      &lt;xs:maxLength value="64"/&gt;
      &lt;xs:pattern value="[^\.]+"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABFEEEF"></a><a id="IMDCM11700"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.8</span> Preference Document Schema</h2>
<p>The preference document schema <code>ordcmpf.xsd</code>, shown in <a href="#BCFHABBB">Example B-8</a>, defines the structure of the <a id="sthref998"></a>preference documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/preference_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BCFHABBB"></a><a id="IMDCM13635"></a>Example B-8 Preference Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, 2009, Oracle and/or its affiliates.All rights reserved. 
   NAME
     ordcmpf.xsd - XML Schema for DICOM preference documents.
--&gt;

&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/preference_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/preference_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
   schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the run-time preference settings for 
      Oracle Multimedia DICOM features.
 
    Structure Overview
      Question mark "?" means optional items.
      Plus "+" means one or more items.
      Asterisk "*" means zero or more items.
 
      DICOM_RUNTIME_PREFERENCES
        DOCUMENT_HEADER?
          DOCUMENT_CHANGE_LOG*
              DOCUMENT_MODIFIER
              DOCUMENT_MODIFICATION_DATE
              DOCUMENT_VERSION?
              MODIFICATION_COMMENT?
              BASE_DOCUMENT?
              BASE_DOCUMENT_RELEASE_DATE?
              BASE_DOCUMENT_DESCRIPTION?
        PREFERENCE_DEF+
          PARAMETER
          DESCRIPTION
          VALUE
        The allowed values for the PARAMETER element of a 
        PREFERENCE_DEF entry and its corresponding 
        VALUE element are as follows:
        
        PARAMETER: XML_SKIP_ATTR
        VALUE: an integer type (default 512,  128~ 32767)
        DESCRIPTION: When encoding a DICOM attribute into XML, skip 
               attributes whose (child) XML element sizes (in bytes) are 
               larger than XML_SKIP_ATTR.
               If an attribute is of simple type, this limit applies to the
               whole attribute.
               If the attribute type is SQ, this limit applies to its child 
               items.
               For example, if an attribute is of type SQ and it contains  
               child items of type OB, the limit applies to 
               each child instance of type OB. 
               The smallest value allowed for this parameter is 128.
        
        PARAMETER: AVG_ATTR_NUM
        VALUE: an integer type (default 200, 20~2000)
        DESCRIPTION: The average number of root-level attributes per 
        DICOM object. This is a hint to the DICOM implementation.
        Finding the optimal value for a database helps improve storage 
        efficiency and performance. Too large a value may lead to wasted
        memory, and too small a value may lead to poor performance. An
        ideal value is one where most (suggested 95%) DICOM images
        have less than $VALUE number of attributes.
        The smallest value allowed for this parameter is 20.
        The largest number allowed for this parameter is 
        the total number of not retired standard attributes defined.
        
        PARAMETER: CONFORMANCE_LEVEL
        VALUE: enum { leastConform, ignoreException(default), mostConform}
        DESCRIPTION: 
        The option "leastConform" means that all functions try to 
        maximize the processing of a DICOM object and ignore
        any errors and exceptions.
        "ignoreException" means that all functions ignore the
        types of exceptions given in the parameter "IGNORED_EXP_LIST".
        The default set of ignored exceptions includes: MISSING_ATTR, 
        INVALID_LENGTH, MISSING_MAGIC, MISSING_HEADER, INVALID_VR, 
        INVALID_VM, and PARSE_ERR.
        "mostConform" means that all functions throw an exception
        if a DICOM object contains nonconformant content. This does
        not include backward compatibility cases allowed by 
        the DICOM standard.
        Note: By choosing an option other than "mostConform",
        you risk accepting invalid DICOM objects, possibly getting
        incorrect results. In this case, Oracle recommends setting the
        LOGGING_LEVEL parameter to "warning" or a more detailed level, 
        and then examining the log file for possible errors.
        
        PARAMETER: IGNORED_EXP_LIST
        VALUE: EmptySpace-separated exception names from the 
        following list:
                {MISSING_MAGIC, MISSING_HEADER, MISSING_ATTR,
                FAULTY_VALUE, INVALID_LENGTH, 
                INVALID_VM, INVALID_VR, UNSUPPORT_VALUE,
                UNDEFINED_VALUE, NOT_AN_IMAGE, PARSE_ERR}
                
        Default: {MISSING_ATTR INVALID_LENGTH MISSING_MAGIC
                 MISSING_HEADER INVALID_VR INVALID_VM PARSE_ERR}.
        DESCRIPTION: This parameter is only effective when the value of
        the CONFORMANCE_LEVEL parameter is "ignoreException". If
        this is the case, the exceptions in the ignore exception list are
        ignored at run time. However, if the LOGGING_LEVEL parameter
        is set to "warning" or a more detailed level, the exception is 
        logged. The program continues and skips the part 
        of the DICOM object that has triggered an exception.
        These exceptions are defined as follows:
        MISSING_MAGIC: a DICOM object does not contain the file 
            magic number "DICM".
        MISSING_HEADER: a DICOM object does not have the file
            meta header (not conformant to the DICOM standard part 10).
        MISSING_ATTR: a DICOM object does not have the mandatory
            attributes (type 1) required by the DICOM standard.
        FAULTY_VALUE: a DICOM object has attribute values 
            that lead to parsing errors.
        INVALID_LENGTH: a DICOM object contains a length value that 
          is not consistent with the DICOM encoding rules or a length 
          that is not permitted by the DICOM data dictionary.
        INVALID_VM: an attribute of a DICOM object has an invalid Value 
            Multiplicity value (not consistent with the dictionary definition).
        INVALID_VR: an attribute of a DICOM object has an invalid Value
            Representation value, which can either conflict with the data
            dictionary or has not been defined by the data dictionary.
        UNSUPPORTED_VALUE: a DICOM object contains attribute
            values that are outside of the supported range; 
            for example, an unsupported pixel representation value.
        UNDEFINED_VALUE: a DICOM object contains attribute
            values that are not defined by the data model; for example,
            an undefined transfer syntax UID, an undefined SOP
            class UID, and so on.
        NOT_AN_IMAGE: When an image content processing function
            is invoked on a DICOM object, if the object's SOP class UID is
            defined but its classification is not "storageClass", or its
            content type is not "image", an exception is thrown. It may
            mean that the UID definition document is not up-to-date. An 
            administrator can update the document to define the
            SOP class UID as a "storageClass" of "image" type.
        PARSE_ERR: When a DICOM object contains invalid data, a parse exception
           is thrown. This exception is ignored, and the parsing process
           continues.  
        
        PARAMETER: OUTPUT_RAW_VALUE
        VALUE: an integer value (default to 0, no output) (-1 ~ 32767)
        DESCRIPTION: What to output in an XML metadata document
        when the parsing of a DICOM object fails. The base64 encoding 
        of the attribute's byte value can be returned in the rawValue 
        attribute of a DICOM XML element. The VALUE element specifies
        the maximal length allowed for the rawValue attribute. 
        If $VALUE == -1, (not recommended), the entire attribute up to 32k
        is saved in the rawValue attribute in base64 encoding.
        If $VALUE == 0, an empty string is saved in the rawValue 
        attribute (recommended for production systems).
        If $VALUE == N &gt; 0, only the first N bytes of the attribute are
        saved in the rawValue attribute.
        A nonzero value for this parameter is useful for debugging 
        purposes. For a production system, do NOT pick a value
        larger than 64. The value -1 should never be used outside of
        a development environment.
        
        PARAMETER: LOGGING_LEVEL
        VALUE: enum {debug, conformance, warning(default), error, none }
        DESCRIPTION:   The logging level, if ordered by the level of 
        detail from the most to the least is: "debug", "conformance", 
        "warning", "error", and "none".
         "debug" means extensive logging of all steps; it should 
        only be used for debugging purposes. 
         "conformance" means to log all nonstandard conformance 
        problems that are discovered. In general, nonconformance is very 
        common for a DICOM object repository containing DICOM 
        objects from different sources, for example, a hospital or an imaging 
        center. This logging level may lead to large log files for 
        most scenarios, and lower performance. 
         "warning" means to log all recoverable messages that require 
        operator attention. For example, if a user invokes an 
        image processing function on a DICOM object and 
        Oracle does not recognize this DICOM object as an image, 
        a warning message is logged stating that this DICOM object 
        is not defined as an image. The processing of the image 
        content may continue if the CONFORMANCE_LEVEL
        parameter is set to ignore "NOT_AN_IMAGE" exception. 
        "error" means to log only irrecoverable messages. 
        "none" means that logging is disabled. 
        Note: Do not use the "debug" option for a deployed system. 
        It adds significant overhead and slows down all 
        DICOM related functions.
        
        PARAMETER: VALIDATE_METADATA
        VALUE: Boolean{true, false(default)}
        DESCRIPTION: The value of this parameter determines whether to 
        validate the XML documents used in the DICOM functions and 
        procedures. If the value of this parameter is false, the XML 
        documents are not validated. If the value is set to true, the XML 
        documents are validated against a specific XML schema that is 
        registered with Oracle XML DB.
        
        All XML documents used in the DICOM functions and procedures, 
        except those that are generated by the method extractMetadata( ), 
        are validated against the Oracle default DICOM metadata schema. 
        The XML documents generated by the method extractMetadata( ) 
        are validated against the XML schema whose namespace is defined in 
        the specified mapping document.
        
        PARAMETER: EXP_IF_NULL_ATTR_IN_CONSTRAINT
        VALUE: Boolean{true(default), false}
        DESCRIPTION: A DICOM object may not contain certain attributes
        that are used in a constraint predicate. The object may
        contain an attribute, but its value is empty. Both cases
        result to a null value attribute. So a constraint
        predicate involving this attribute has a null 
        parameter value such as (null== MY_VALUE). 
        If this preference parameter is set to true,
        an exception is thrown if the first occurrence of a 
        a null-value attribute is not guarded by the "notEmpty" 
        Boolean function. If this parameter is set to false, 
        no exception is thrown and the predicate evaluates to 
        false. To avoid confusion, it is always better to guard an 
        attribute with "notEmpty" Boolean functions before using
        the attribute value in a predicate.
        
        PARAMETER: MAX_RECURSION_DEPTH
        VALUE: an integer type (default 16, 1 ~ 32767)
        DESCRIPTION: This parameter restricts the number of levels of 
        recursions when evaluating a recursive constraint on a DICOM
        object. If the recursion level exceeds this number, an exception
        is thrown. 
        
        PARAMETER: MANDATE_ATTR_TAGS_IN_STL 
        VALUE: Boolean{false(default), true}
        DESCRIPTION: This parameter is used to enforce that all tags 
        used by the constraint and mapping documents must be listed in the
        STORED_TAG_LIST(STL) document. This rule is not enforced by default.
        If this preference parameter is set to true, the rule is enforced. 
        If an existing STL document does not satisfy this rule,
        the preference value cannot be set to true until the
        STL document is deleted. 
        
        PARAMETER: SQ_WRITE_LEN
        VALUE: boolean{true(default), false}
        DESCRIPTION: This parameter determines how the DICOM
        sequence (SQ) types are encoded by the DICOM function writeMetadata().
        If the value of this parameter is true, the SQ types are encoded
        with explicit length and without item or sequence delimitors.
        This is the default behavior and allows DICOM viewers to skip
        the sequence attributes easily.
        If the value of this parameter is false, the SQ types are encoded
        with variable (or undefined) length and terminated with
        sequence delimitors. This allows backward compatibility with some
        older DICOM viewers and Dicom applications as they only support
        undefined length for SQ types.
 
        PARAMETER: SPECIFIC_CHARACTER_SET
        VALUE: enum {ASCII(default), ISO_IR 100, ISO_IR 101, ISO_IR 109, 
                     ISO_IR 110, ISO_IR 144, ISO_IR 127, ISO_IR 126,
                     ISO_IR 138, ISO_IR 148, ISO_IR 13, ISO_IR 166,
                     ISO_IR 192, GB18030}
        DESCRIPTION: This parameter determines how data elements with value
        representations of SH (Short String), LO (Long String), ST (Short Text)
        LT (Long Text), PN (Person Name) or UT (Unlimited Text) are decoded
        when the Specific Character Set (0008,0005) Attribute is missing.
        The DICOM standard states that the default character set 
        (ISO-IR 6, or ASCII) shall be used for decoding when the Specific
        Character Set (0008,0005) Attribute is not specified. This parameter
        allows an application to specify a different character set to 
        use in these cases.
 
        PARAMETER: BINARY_SKIP_INVALID_ATTR
        VALUE: boolean{false(default), true}
        DESCRIPTION: It is possible that a DICOM object contains one or more
        attribute values that do not conform to the DICOM specification. In the 
        event that such an attribute is present in a DICOM object, this 
        parameter determines whether or not to "skip" (i.e. not include) the 
        value of that attribute in the binary output when making a copy of the
        object in question. The default behavior, specified by setting this
        parameter to "false", is to not skip these values and to include them
        as-is in the coresponding output. When an attribute is skipped, its
        value is included in the output truncated to length 0.
 
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="DICOM_RUNTIME_PREFERENCES"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="PREFERENCE_DEF" maxOccurs="unbounded"&gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
                  Each PREFERENCE_DEF entry describes one parameter
                  that a repository administrator may modify to adjust the
                  run-time behavior of the DICOM functionality.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="PARAMETER" type="dt:SHORT_ID_T"/&gt;
              &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
              &lt;xs:element name="VALUE"&gt;
                &lt;xs:simpleType&gt;
                  &lt;xs:restriction base="dt:SHORT_TEXT_T"&gt;
                    &lt;xs:pattern value="[ 0-9_a-zA-Z]+"/&gt;
                  &lt;/xs:restriction&gt;
                &lt;/xs:simpleType&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABIIBCJ"></a><a id="IMDCM11800"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.9</span> Private Dictionary Document Schema</h2>
<p>The private dictionary document schema <code>ordcmpv.xsd</code>, shown in <a href="#BABJIJED">Example B-9</a>, defines the structure of the <a id="sthref999"></a>private dictionary documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/privateDictionary_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABJIJED"></a><a id="IMDCM13514"></a>Example B-9 Private Dictionary Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcmpv.xsd - XML schema for DICOM private dictionary documents
--&gt;
 
&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/privateDictionary_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/privateDictionary_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
   schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the private attributes created by modality 
      manufacturers or organizations other than the DICOM 
      Standards Committee.
 
    Structure Overview
      Question mark "?" means optional items.
      Plus "+" means one or more items.
      Asterisk "*" means zero or more items.
 
      DICOM_PRIVATE_ATTRIBUTES
        DOCUMENT_HEADER?
      DOCUMENT_CHANGE_LOG*
        DOCUMENT_MODIFIER
        DOCUMENT_MODIFICATION_DATE
        DOCUMENT_VERSION?
        MODIFICATION_COMMENT?
            BASE_DOCUMENT?
            BASE_DOCUMENT_RELEASE_DATE?
        BASE_DOCUMENT_DESCRIPTION?
    ATTRIBUTE_DEFINERS?
      DEFINER+
        NAME
        ID?
        PRIVATE_ATTRIBUTE_DEFINITION+
      (TAG|TAG_RANGE)
      NAME
      DEFINER
      VR?
          VM?
          RETIRED?
  DOCUMENT_HEADER is an optional header to specify the
  modification history. See dt:DOCUMENT_HEADER_T
  for more information.
  ATTRIBUTE_DEFINERS specify the owner of each
  private attribute. See dt:ATTR_DEFINER_T for more
  information.
 
  A private dictionary contains one or more private attribute
  definitions.
  Each private attribute specification takes a tag specification,
  a name, a value representation type, a value multiplicity
  type, and a retired flag. See dt:VR_T dt:VM_T for the allowed
  values for the value representation and value multiplicity elements.
  
    Note: Private attribute tags allow three specification types.
    The tag can be a 4-byte hexadecimal number, a 
    wildcard type such as "0039xx01", or a range type such
    as "0039xx01~0041xx01".
    
    Multiple attribute definitions cannot be associated with
    the same definer-tag pair in a dictionary. For example, a simple 
    attribute definition ("oracle", 60100010) matches a wildcard 
    attribute ("oracle", 60xx0010), they cannot coexist in the private 
    dictionary. Similarly, a range attribute definition ("Oracle", {6000-60FF})
    overlaps a range attribute definition ("Oracle", {6010-6020}), they 
    cannot coexist in the private dictionary. As a rule, an attribute 
    must not match two entries in the dictionary.
    
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="DICOM_PRIVATE_ATTRIBUTES"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="ATTRIBUTE_DEFINERS" type="dt:ATTR_DEFINERS_T" minOccurs="0"/&gt;
        &lt;xs:element name="PRIVATE_ATTRIBUTE_DEFINITION" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:choice&gt;
                &lt;xs:element name="TAG" type="dt:ATTR_TAG_T"/&gt;
                &lt;xs:element name="TAG_RANGE" type="dt:ATTR_RANGE_T"/&gt;
              &lt;/xs:choice&gt;
              &lt;xs:element name="NAME" type="dt:SHORT_STRING_T"/&gt;
              &lt;xs:element name="DEFINER" type="dt:LO"/&gt;
              &lt;xs:element name="VR" type="dt:VR_T" minOccurs="0"/&gt;
              &lt;xs:element name="VM" type="dt:VM_T" minOccurs="0"/&gt;
              &lt;xs:element name="RETIRED" type="xs:boolean" default="false" minOccurs="0"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABGBJEJ"></a><a id="IMDCM11900"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.10</span> Standard Dictionary Document Schema</h2>
<p>The standard dictionary document schema <code>ordcmsd.xsd</code>, shown in <a href="#BABEBCCC">Example B-10</a>, defines the structure of the <a id="sthref1000"></a>standard dictionary documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/standardDictionary_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABEBCCC"></a><a id="IMDCM13515"></a>Example B-10 Standard Dictionary Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
    NAME
      ordcmsd.xsd - XML Schema for DICOM standard dictionary document. 
--&gt;

&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/standardDictionary_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/standardDictionary_1_0"
 elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
   schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines the data dictionary that lists the DICOM 
      standard attributes as published by the DICOM Standards Committee.
      No other attributes, such as those defined by a modality 
      manufacturer or an organization other than NEMA,
      should be included in the standard data dictionary.
 
    Structure Overview
      Question mark "?" means optional items.
      Plus "+" means one or more items.
      Asterisk "*" means zero or more items.
 
      DICOM_STANDARD_ATTRIBUTES
        DOCUMENT_HEADER?
      DOCUMENT_CHANGE_LOG*
        DOCUMENT_MODIFIER
        DOCUMENT_MODIFICATION_DATE
        DOCUMENT_VERSION?
        MODIFICATION_COMMENT?
            BASE_DOCUMENT?
            BASE_DOCUMENT_RELEASE_DATE?
        BASE_DOCUMENT_DESCRIPTION?
    ATTRIBUTE_DEFINERS?
      DEFINER+
        NAME
        ID?
        STANDARD_ATTRIBUTE_DEFINITION+
      TAG
      NAME
      VR?
          VM?
          RETIRED?
    
    DOCUMENT_HEADER is an optional header to specify the
    modification history. See dt:DOCUMENT_HEADER_T
    for more information.
 
    ATTRIBUTE_DEFINERS specify the owner of each
    attribute. See dt:ATTR_DEFINER_T for more
    information. All DICOM standard attributes must have
    definer name "DICOM" and UID "1.2.840.10008.1".
 
    A standard dictionary contains one or more standard attribute
    definitions.
 
    Each standard attribute specification takes a tag specification,
    a name, a value representation type, a value multiplicity
    type, and a retired flag. See DICOM P3-6 2007 for a 
    description of these elements. See dt:VR_T dt:VM_T for the allowed 
    values of value representation and value multiplicity elements.
    
    Note: Wildcard character "x" can be used to specify
    standard attribute tags (for example, 60xx0010 for overlay rows).
      
    Multiple attribute definitions must not be associated with
    the same tag in a standard dictionary. For example, the
    attribute definition 60100010 matches the wildcard 
    attribute 60xx0010, they cannot coexist in 
    the dictionary. As a rule, an attribute must not match two 
    entries in the dictionary.
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="DICOM_STANDARD_ATTRIBUTES"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="ATTRIBUTE_DEFINERS" type="dt:ATTR_DEFINERS_T" minOccurs="0"/&gt;
        &lt;xs:element name="STANDARD_ATTRIBUTE_DEFINITION" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="TAG" type="dt:ATTR_TAG_T"/&gt;
              &lt;xs:element name="NAME" type="dt:SHORT_STRING_T"/&gt;
              &lt;xs:element name="VR" type="dt:VR_T" minOccurs="0"/&gt;
              &lt;xs:element name="VM" type="dt:VM_T" minOccurs="0"/&gt;
              &lt;xs:element name="RETIRED" type="xs:boolean" minOccurs="0"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BCFFHFAE"></a><a id="IMDCM13636"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.11</span> Stored Tag List Document Schema</h2>
<p>The stored tag list document schema <code>ordcmstl.xsd</code>, shown in <a href="#BCFFCCCC">Example B-11</a>, defines the structure of the DICOM <a id="sthref1001"></a>stored tag list documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/attributeTag_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BCFFCCCC"></a><a id="IMDCM13637"></a>Example B-11 Stored Tag List Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2008, Oracle and/or its affiliates. All rights reserved. 
 
   NAME
     ordcmstl.xsd - XML schema for the DICOM STORED_TAG_LIST document
--&gt;
 
&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/attributeTag_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/attributeTag_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
   schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt; 
   &lt;xs:annotation&gt;
     &lt;xs:documentation&gt;
     Introduction
       This schema defines the STORED_TAG_LIST document. 
       This document lists the attribute tags that are
       persistently stored in the metadata attribute of the ORDDICOM object.
 
     Structure Overview:
        Question mark "?" means optional items.
        Plus "+" means one or more items.
        Asterisk "*" means zero or more items.
 
        ATTRIBUTE_TAG_LIST
          DOCUMENT_HEADER?
            DOCUMENT_CHANGE_LOG*
            DOCUMENT_MODIFIER
            DOCUMENT_MODIFICATION_DATE
            DOCUMENT_VERSION?
            MODIFICATION_COMMENT?
            BASE_DOCUMENT?
            BASE_DOCUMENT_RELEASE_DATE?
            BASE_DOCUMENT_DESCRIPTION?
          ATTRIBUTE_TAG+
    &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="ATTRIBUTE_TAG_LIST"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" minOccurs="0"/&gt;
        &lt;xs:element name="ATTRIBUTE_TAG" type="dt:VALUE_LOCATOR_T" minOccurs="1" maxOccurs="unbounded" &gt;
          &lt;xs:annotation&gt;
            &lt;xs:documentation&gt;
               Each ATTRIBUTE_TAG entry describes one locator path of a
               DICOM attribute in the list.
            &lt;/xs:documentation&gt;
          &lt;/xs:annotation&gt;
        &lt;/xs:element&gt; 
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABJDDAF"></a><a id="IMDCM11950"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">B.12</span> UID Definition Document Schema</h2>
<p>The UID definition document schema <code>ordcmui.xsd</code>, shown in <a href="#BABIGGCA">Example B-12</a>, defines the structure of the <a id="sthref1002"></a>UID definition documents. The namespace for this schema is</p>
<p><code>http://xmlns.oracle.com/ord/dicom/UIDdefinition_1_0</code></p>
<div class="example">
<p class="titleinexample"><a id="BABIGGCA"></a><a id="IMDCM13516"></a>Example B-12 UID Definition Document Schema</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!--
 Copyright (c) 2007, Oracle. All rights reserved.  
 
   NAME
     ordcmui.xsd - XML schema for DICOM UID definition documents. 
--&gt;

&lt;xs:schema xmlns="http://xmlns.oracle.com/ord/dicom/UIDdefinition_1_0"
 xmlns:dt="http://xmlns.oracle.com/ord/dicom/datatype_1_0" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 targetNamespace="http://xmlns.oracle.com/ord/dicom/UIDdefinition_1_0" elementFormDefault="qualified"
 attributeFormDefault="unqualified"&gt;
  &lt;xs:import namespace="http://xmlns.oracle.com/ord/dicom/datatype_1_0"
   schemaLocation="http://xmlns.oracle.com/ord/dicom/datatype_1_0"/&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    Introduction
      This schema defines DICOM UIDs. 
      User can update this file to support new DICOM object types.
 
    Structure Overview
      Question mark "?" means optional items.
      Plus "+" means one or more items.
      Asterisk "*" means zero or more items.
 
      DICOM_UID_DEFINITIONS
        DOCUMENT_HEADER?
          DOCUMENT_CHANGE_LOG*
            DOCUMENT_MODIFIER
            DOCUMENT_MODIFICATION_DATE
            DOCUMENT_VERSION?
            MODIFICATION_COMMENT?
                BASE_DOCUMENT?
                BASE_DOCUMENT_RELEASE_DATE?
                BASE_DOCUMENT_DESCRIPTION?
        UID_DEF (classification, isLE?, isEVR?, isCompressed?,retired?, contentType?)+
          UID
          NAME
          DESCRIPTION?
 
      A UID_DEF entry describes a UID value.
      The mandatory classification attribute specifies what
      a UID is. Its value can be "transferSyntax", "storageClass",
      "frameOfRef", "ldapOID", "entityID", or "other".
      "transferSyntax" means that the UID identifies transfer syntax.
      "storageClass" means that the UID identifies a storage class.
      "frameOfRef" means that the UID is a well-known frame of reference.
      "ldapOID" means that the UID is an LDAP OID.
      "entityID" means that the UID identifies an entity, which can be
       an organization or a device manufacturer.
      "other" means that the UID does not fall into any of the previous 
       categories.
                
      For entries that have a classification type of 
      "transferSyntax", the attributes "isLE", "isEVR", and 
      "isCompressed" further define the transfer syntax. These 
      attributes are ignored for all other classification types.
      The "isLE" attribute specifies whether the binary stream
      will be encoded with little-endian byte order(defaults to true). 
      The "isEVR" attribute specifies whether the binary stream 
      will use the explicit VR encoding rule (defaults to true). 
      The "isCompressed" attribute specifies whether the 
      transfer syntax means that the data content is compressed 
      (defaults to true).
        
      If an entry has a classification type of "storageClass", 
      the "contentType" attribute further specifies the primary
      content of a DICOM object belonging to this class. 
      The value of this attribute can be "image", "waveform",
      "report" or "other".
      "image" can be single-frame, multi-frame images, or video. 
      "waveform" can be ECG, EEG, or any other 1D signal. 
      "report" means a structured report. 
      "other" means overlay, GSPS, KO, or any other object types that 
              do not belong to the previous categories.
      For example "Ultrasound Multi-frame Image Storage" SOP
      class has a UID of "1.2.840.10008.5.1.4.1.1.3.1". Its 
      primary content is image.
    
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="DICOM_UID_DEFINITIONS"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt; 
        &lt;xs:element name="DOCUMENT_HEADER" type="dt:DOCUMENT_HEADER_T" nillable="true" minOccurs="0"/&gt;
        &lt;xs:element name="UID_DEF" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:complexContent&gt;
              &lt;xs:extension base="UID_ENTRY_T"&gt;
                &lt;xs:attribute name="classification" use="required"&gt;
                  &lt;xs:simpleType&gt;
                    &lt;xs:restriction base="xs:token"&gt;
                      &lt;xs:enumeration value="transferSyntax"/&gt;
                      &lt;xs:enumeration value="storageClass"/&gt;
                      &lt;xs:enumeration value="frameOfRef"/&gt;
                      &lt;xs:enumeration value="ldapOID"/&gt;
                      &lt;xs:enumeration value="entityID"/&gt;
                      &lt;xs:enumeration value="other"/&gt;
                    &lt;/xs:restriction&gt;
                  &lt;/xs:simpleType&gt;
                &lt;/xs:attribute&gt;
                &lt;xs:attribute name="isLE" type="xs:boolean" default="true"/&gt;
                &lt;xs:attribute name="isEVR" type="xs:boolean" default="true"/&gt;
                &lt;xs:attribute name="isCompressed" type="xs:boolean" default="true"/&gt;
                &lt;xs:attribute name="retired" type="xs:boolean" default="false"/&gt;
                &lt;xs:attribute name="contentType" default="image"&gt;
                  &lt;xs:simpleType&gt;
                    &lt;xs:restriction base="xs:token"&gt;
                      &lt;xs:enumeration value="image"/&gt;
                      &lt;xs:enumeration value="waveform"/&gt;
                      &lt;xs:enumeration value="report"/&gt;
                      &lt;xs:enumeration value="other"/&gt;
                    &lt;/xs:restriction&gt;
                  &lt;/xs:simpleType&gt;
                &lt;/xs:attribute&gt;
              &lt;/xs:extension&gt;
            &lt;/xs:complexContent&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="UID_ENTRY_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="UID" type="dt:UI"/&gt;
      &lt;xs:element name="NAME" type="dt:SHORT_STRING_T"/&gt;
      &lt;xs:element name="DESCRIPTION" type="dt:SHORT_TEXT_T" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1189">
<tr>
<td class="cellalignment1196">
<table class="cellalignment1194">
<tr>
<td class="cellalignment1193"><a href="ap_confg_docs.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1193"><a href="ap_encdg_rls.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1198">
<table class="cellalignment1192">
<tr>
<td class="cellalignment1193"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1193"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1193"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1193"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1193"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1193"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
