<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DICOM Application Development</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 009" />
<meta name="dcterms.created" content="2010-08-02T8:12:20Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Multimedia DICOM Developer's Guide" />
<meta name="dcterms.identifier" content="E10778-03" />
<meta name="dcterms.isVersionOf" content="IMDCM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="dm_glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="part_two.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch_dev_dcmdemo.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10778.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/31</span> <!-- End Header --><a id="CIHJEFFJ"></a><a id="IMDCM5000"></a>
<h1 class="chapter"><span class="secnum">5</span> DICOM Application Development</h1>
<p>This chapter describes how to develop applications using Oracle Multimedia DICOM. Oracle Multimedia DICOM provides support for Oracle Database with these application programming interfaces (APIs):</p>
<ul>
<li>
<p>ORDDicom object API</p>
</li>
<li>
<p>DICOM data model utility API</p>
</li>
<li>
<p>DICOM relational API</p>
</li>
<li>
<p>DICOM Java API</p>
</li>
</ul>
<p>Using these interfaces, you can quickly develop applications to upload to the database, retrieve from it, and manipulate DICOM content.</p>
<p>This chapter includes examples of how to import DICOM content into the database, write SQL queries based on DICOM metadata, perform basic image processing, make anonymous copies of ORDDicom objects, and check DICOM content for conformance to user-defined constraint rules. Some examples were extracted from the tutorial Managing DICOM Format Data in Oracle Database 11<span class="italic">g</span>, and adapted for this manual. See <a href="ap_dcm_demos.htm#BABHDAFB">Appendix E</a> for the location of this tutorial.<a id="sthref168"></a><a id="sthref169"></a></p>
<p>This chapter includes these sections:</p>
<ul>
<li>
<p><a href="#CIHIEBDJ">Setting Up Your Environment</a></p>
</li>
<li>
<p><a href="#CIHJAAHI">Creating a Table with an ORDDicom Column</a></p>
</li>
<li>
<p><a href="#CIHEIGBC">Loading DICOM Content Using the SQL*Loader Utility</a></p>
</li>
<li>
<p><a href="#CIHCBDFF">Developing DICOM Applications Using the PL/SQL API</a></p>
</li>
<li>
<p><a href="#CIHDGEIE">Developing DICOM Applications Using the DICOM Java API</a></p>
</li>
</ul>
<p>For additional examples, articles, and other information about Oracle Multimedia, see the Oracle Multimedia Software section of the Oracle Technology Network Web site at</p>
<p><code><a href="http://www.oracle.com/technology/products/multimedia/">http://www.oracle.com/technology/products/multimedia/</a></code></p>
<a id="CIHIEBDJ"></a><a id="IMDCM5100"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.1</span> Setting Up Your <a id="sthref170"></a>Environment</h2>
<p>The examples in this chapter use the table <code>medical_image_table</code> with these four columns:</p>
<ul>
<li>
<p><code>id</code> - an integer identifier</p>
</li>
<li>
<p><code>dicom</code> - an ORDSYS.ORDDicom object</p>
</li>
<li>
<p><code>imageThumb</code> - an ORDSYS.ORDImage object</p>
</li>
<li>
<p><code>anonDicom</code> - another ORDSYS.ORDDicom object</p>
</li>
</ul>
<p>Issue the following statements before executing the examples in this chapter, where <code>c:\mydir\work</code> is the directory where the user <code>scott</code> can find the DICOM files:</p>
<pre>
CONNECT sys as sysdba
Enter password: <span class="italic">password</span>
CREATE OR REPLACE DIRECTORY FILE_DIR as 'c:\mydir\work';
GRANT READ ON DIRECTORY FILE_DIR TO scott;
</pre>
<p>To use a different directory for your DICOM files, replace <code>c:\mydir\work</code> with the directory specification where your files are located.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
All Oracle Multimedia objects and procedures provided by Oracle are defined in the schema ORDSYS.</div>
</div>
<!-- class="sect1" -->
<a id="CIHJAAHI"></a><a id="IMDCM5200"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.2</span> Creating a Table with an ORDDicom Column</h2>
<p>This section shows how to create a table with an ORDDicom column <a id="sthref171"></a>to store DICOM content.</p>
<p>The code segment shown in <a href="#CIHDFCIH">Example 5-1</a> creates the table <code>medical_image_table</code>, with the four columns <code>id</code>, <code>dicom</code>, <code>imageThumb</code>, and <code>anonDicom</code>.</p>
<div class="example">
<p class="titleinexample"><a id="CIHDFCIH"></a><a id="IMDCM13413"></a>Example 5-1 Creating a Table for DICOM Content</p>
<pre>
CONNECT scott

Enter password: <span class="italic">password</span>

create table medical_image_table
             (id          integer primary key,
              dicom       ordsys.orddicom,
              imageThumb  ordsys.ordimage,
              anonDicom   ordsys.orddicom)
              --
              -- metadata extraction expands the ORDDicom object, allow room
              pctfree 60
              --
              -- Use SecureFile LOBS for binary content
              -- 
              lob(dicom.source.localdata) store as SecureFile
                 (nocache filesystem_like_logging),
              lob(imageThumb.source.localdata) store as SecureFile
                 (nocache filesystem_like_logging),
              lob(anonDicom.source.localdata) store as SecureFile
                 (nocache filesystem_like_logging),
              --
              -- disable in row storage for the extension
              -- so that it does not consume page space
              -- it is usually &lt; 4k in size
              --
              lob(dicom.extension) store as SecureFile
                 ( nocache disable storage in row ),
              lob(anonDicom.extension) store as SecureFile
                 ( nocache disable storage in row ),
              --
              -- store the metadata as a CLOB,
              -- disable storage in row
              --
              xmltype dicom.metadata store as SecureFile clob
                 ( nocache disable storage in row )
              xmltype anonDicom.metadata store as SecureFile clob
                 ( nocache disable storage in row )
;
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDFCIH">Example 5-1</a> uses SecureFile LOB storage<a id="sthref172"></a> for the media content. Oracle SecureFiles is a re-engineered binary large object (BLOB) that improves performance and strengthens the content management capabilities of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADLOB" href="../e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about SecureFile LOBs</p>
</li>
<li>
<p><a class="olink IMURG8000" href="../../appdev.112/e10777/ch_dba.htm#IMURG8000"><span class="italic">Oracle Multimedia User's Guide</span></a> for tuning tips with SecureFile LOBs</p>
</li>
<li>
<p><a class="olink DBSEG33223" href="../../network.112/e36292/authentication.htm#DBSEG33223"><span class="italic">Oracle Database Security Guide</span></a> for more information about creating secure passwords</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CIHEIGBC"></a><a id="IMDCM5300"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.3</span> Loading DICOM Content Using the SQL*Loader Utility</h2>
<p>This section shows how to use the SQL*Loader utility to <a id="sthref173"></a>load DICOM content into an existing table in Oracle Database. SQL*Loader is a high-performance utility for loading data from external files into tables in an Oracle database. The external data can be loaded across a network from a client system that differs from the system that is running the server for Oracle Database. The data can also be loaded locally on the same system as the database server.</p>
<p>A typical SQL*Loader session accepts a control file and one or more data files as input. The control file defines how to load the data into the database. The output of the SQL*Loader session is an Oracle database (where the data is loaded), a log file, and potentially, a discard file.</p>
<p><a href="#CIHCECBI">Example 5-2</a> shows a control file for loading DICOM data into the table <code>medical_image_table</code>, which you created in <a href="#CIHDFCIH">Example 5-1</a>. The control file contains directives that map the input data, which is specified at the end of the control file as <code>sample1.dcm</code> and <code>sample2.dcm</code>, to the columns of the table <code>medical_image_table</code>. Only the <code>id</code> and <code>dicom</code> columns are loaded with externally supplied data. The <code>imageThumb</code> and <code>anonDicom</code> columns are initialized using constant and default values that are supplied in the control file.</p>
<div class="example">
<p class="titleinexample"><a id="CIHCECBI"></a><a id="IMDCM13414"></a>Example 5-2 Loading DICOM Content</p>
<pre>
-- This file is a SQL*LDR control file to load DICOM data
-- into the table MEDICAL_IMAGE_TABLE. The control file contains directives
-- to load DICOM data into the DICOM column. It also contains directives
-- to initialize the IMAGETHUMB and ANONDICOM columns. The data to be loaded
-- is specified in this file after the BEGINDATA delimiter.
--
--  The following command invokes the SQL*Loader utility and then prompts you
--  to enter the password for the specified userid.
--
--    sqlldr userid=USER control=load_dicom.ctl
--
--
load data
-- 
-- The input data is contained in this file after the BEGINDATA delimiter.
--
infile *
into table medical_image_table
--
-- This example truncates the table. Change the following to "append"
-- if you want to add to an existing table.
--
truncate
fields terminated by whitespace optionally enclosed by '"'
(
 --
 -- The primary key column.
 --
 id                 integer external,
 --
 -- A filler field that holds the file path of the DICOM data.
 --
 dicomFilename      filler char,
 --
 -- Load the dicom column object
 --    The LOB attribute source.localData is loaded with the DICOM data.
 --    The srcType attribute is initialized to "local".
 --    The updateTime attribute is initialized to "SYSDATE".
 --    The LOB attribute extension is initalized with an empty LOB.
 --
   dicom             column object (
     source          column object (
       localData     lobfile(dicomFilename) terminated by EOF,
       srcType       constant 'local',
       updateTime    expression "SYSDATE"
     ), 
     extension       lobfile(dicomFilename) terminated by EOF
                      defaultif dicom.source.srcType='local'
   ),
 --
 -- Initialize the imageThumb column object
 --    The LOB attribute source.localData is initialized with an empty LOB.
 --    This LOB will hold the content for the thumbnail image.
 --    The local attribute is initialized to "1".
 --
   imageThumb        column object (
     source          column object (
       localData     lobfile(dicomFilename) terminated by EOF
                       defaultif imageThumb.source.local=X'1',
       local         constant 1
     )
   ),
 --
 -- Initialize the anonDicom column object
 --    The LOB attributes source.localData and extension are initialized.
 --      with empty LOBs. 
 --    The localData LOB will hold the content for the DICOM data to be
 --      made anonymous.
 --    The extension LOB is an internal field used by ORDDICOM.
 --    The srcType attribute is initialized to "local".
 --
   anonDicom         column object (
     source          column object (
       localData     lobfile(dicomFilename) terminated by EOF
                       defaultif anonDicom.source.srcType='local',
       srcType       constant 'local'
     ), 
     extension         lobfile(dicomFilename) terminated by EOF
                      defaultif dicom.source.srcType='local'
   )
)
--
-- Input data begins here
--
-- ID  DICOMFILENAME
BEGINDATA
   1   sample1.dcm
   2   sample2.dcm
</pre></div>
<!-- class="example" -->
<p>Before invoking the SQL*Loader utility, you can temporarily disable logging for the LOB data to be loaded into the <code>dicom</code> column. When logging is disabled, the data is written to the database table only, and not to the redo log. Disabling logging can reduce the amount of time needed to load the DICOM data by cutting in half the amount of I/O to be performed.</p>
<p>To disable logging for the DICOM content in the <code>dicom</code> column, use the following SQL command:</p>
<pre>
 alter table medical_image_table modify lob(dicom.source.localData) (nocache nologging);
</pre>
<p>To invoke the SQL*Loader utility, use the following command, then enter the password when prompted:</p>
<pre>
    sqlldr userid=USER control=load_dicom.ctl
</pre>
<p>After the DICOM data is loaded, use the following SQL command to re-enable logging for the DICOM content in the <code>dicom</code> column:</p>
<pre>
 alter table medical_image_table modify lob(dicom.source.localData)  (nocache logging);
</pre>
<p>After the DICOM data is loaded into the table from the external files, another program is required to complete the initialization of the <code>dicom</code> column and to generate the data to populate the <code>imageThumb</code> and <code>anonDicom</code> columns. These tasks can be performed using methods of the ORDDicom object, as shown in <a href="#CIHBFDHD">Example 5-3</a> (which includes a PL/SQL block). In this example, the <code>dicom</code> column is initialized using the setProperties( ) method. The <code>imageThumb</code> column object is created using the processCopy( ) method. And, the <code>anonDicom</code> column object is created using the makeAnonymous( ) method, which requires a unique identifier for one of its input arguments.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#CIHBFDHD">Example 5-3</a> is a complete code sample that includes a call to the setDataModel( ) procedure. Keep in mind that this procedure call might not be required in all situations.
<p>See the <a href="ch_dtmod_ref.htm#CHECBBFJ">setDataModel( ) Procedure</a> for more information about when to call this procedure.</p>
</div>
<div class="example">
<p class="titleinexample"><a id="CIHBFDHD"></a><a id="IMDCM13415"></a>Example 5-3 Finish Loading and Initializing the DICOM Table</p>
<pre>
--
-- The ORDDicom method makeAnonymous() takes a unique UID as an input parameter.
-- This utility function generates a simple UID to use in this example.
-- Replace the string value of UID_ROOT with the DICOM UID for your organization.
--
create or replace function genUID(in_id varchar2)
return varchar2
is
 -- Declare the DICOM UID root value for your organization
 -- You must replace this value.
 UID_ROOT varchar2(128) := '&lt;unique-UID root&gt;';
begin
 return UID_ROOT || '.' || in_id;
end;
/
show errors;
 

--
-- This PL/SQL block loops over all the rows in the MEDICAL_IMAGE_TABLE and:
-- 1. Calls the ORDDicom method setProperties() to initialize the dicom column
-- 2. Calls the ORDDicom method processCopy() to create a JPEG thumbnail image
--    that is stored in the imageThumb column.
-- 3. Calls the ORDDicom method makeAnonymous() to create an anonymous version
--    of the dicom column. The new version is stored in the column anonDicom.
--
declare
 dcm ordsys.orddicom;
begin
  -- load the DICOM data model
  ord_dicom.setDatamodel;
 
  -- loop over all rows in the medical image table
  for rec in (select * from medical_image_table for update) loop
 
    -- initialize the dicom column
    rec.dicom.setProperties();
 
    -- create a JPEG thumbnail 
    rec.dicom.processCopy('fileFormat=jpeg fixedScale=75,100', rec.imageThumb);
 
    -- make a new anonymous version of the ORDDicom object
    rec.dicom.makeAnonymous(genUID(rec.id), rec.anonDicom);
    -- write the objects back to the row
    update medical_image_table
    set dicom = rec.dicom,
        imageThumb = rec.imageThumb,
        anonDicom = rec.anonDicom
    where id = rec.id;
 
  end loop;
  commit;
end;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CIHBFDHD">Example 5-3</a> defines a function genUID( ) to generate a unique identifier (UID) by concatenating the value of the <code>id</code> column with a DICOM UID root value that you must define. You can replace this function with another function that generates unique UIDs, in accordance with the standards for your organization.</p>
<p>The PL/SQL block in <a href="#CIHBFDHD">Example 5-3</a> loops once over all the rows in the table <code>medical_image_table</code>. Then, it reads and accesses each DICOM image in three passes. The first pass sets the properties of the <code>dicom</code> column. The second pass creates a JPEG thumbnail image. And, the third pass creates an anonymous DICOM image to store in the <code>anonDicom</code> column. Because of these repeated read operations, you may want to alter the LOB storage property of the <code>dicom</code> column to enable caching of the DICOM content.</p>
<p>To enable caching for the DICOM content in the <code>dicom</code> column, use the following SQL command:</p>
<pre>
 alter table medical_image_table  modify lob(dicom.source.localData) (cache);
</pre>
<p>After the initialization is complete, use the following SQL command to disable caching for the DICOM content in the <code>dicom</code> column:</p>
<pre>
 alter table medical_image_table  modify lob(dicom.source.localData) (nocache logging);
</pre>
<p><a href="#CIHCBDFF">Section 5.4</a> describes this and other PL/SQL programs in more detail.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SUTIL007" href="../../server.112/e22490/ldr_loading.htm#SUTIL007"><span class="italic">Oracle Database Utilities</span></a> for more information about using the SQL*Loader utility to load objects and LOBs into Oracle Database</p>
</li>
<li>
<p><a class="olink ADLOB" href="../e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for more information about LOBs and logging</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="CIHCBDFF"></a><a id="IMDCM5400"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.4</span> Developing DICOM Applications Using the PL/SQL API</h2>
<p>This section builds on the code examples in <a href="#CIHJAAHI">Section 5.2</a> and <a href="#CIHEIGBC">Section 5.3</a>. It shows PL/SQL code examples<a id="sthref174"></a> that store and manipulate DICOM content inside a database using Oracle Multimedia DICOM.</p>
<p>Oracle Multimedia DICOM enables you to store DICOM content in database tables with columns of type ORDDicom. <a href="#CIHGEEDA">Table 5-1</a> shows some attributes that are contained within an ORDDicom object in a database table.</p>
<div class="tblformal">
<p class="titleintable"><a id="IMDCM13416"></a><a id="sthref175"></a><a id="CIHGEEDA"></a>Table 5-1 Sample Contents of an ORDDicom Object in a Database Table</p>
<table class="cellalignment1199" title="Sample Contents of an ORDDicom Object in a Database Table" summary="Sample ORDDicom object" dir="ltr">
<thead>
<tr class="cellalignment1190">
<th class="cellalignment1200" id="r1c1-t6">ORDDicom</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r2c1-t6" headers="r1c1-t6">
<p>SOP_INSTANCE_UID</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r3c1-t6" headers="r1c1-t6">
<p>SOP_CLASS_UID</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r4c1-t6" headers="r1c1-t6">
<p>STUDY_INSTANCE_UID</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r5c1-t6" headers="r1c1-t6">
<p>SERIES_INSTANCE_UID</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r6c1-t6" headers="r1c1-t6">
<p>Source (ORDDataSource)</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r7c1-t6" headers="r1c1-t6">
<p>Metadata (SYS.XMLType)</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r8c1-t6" headers="r1c1-t6">
<p>ContentLength (integer)</p>
</td>
</tr>
<tr class="cellalignment1190">
<td class="cellalignment1196" id="r9c1-t6" headers="r1c1-t6">
<p>Internal attributes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The following subsections describe sample tasks you can perform in PL/SQL using the code examples in this section:</p>
<ul>
<li>
<p><a href="#CHDCICFD">Selecting DICOM Attributes</a></p>
</li>
<li>
<p><a href="#CHDCABFB">Creating Thumbnail Images and Changing Image Formats</a></p>
</li>
<li>
<p><a href="#CHDJFCAH">Making Anonymous Copies of ORDDicom Objects</a></p>
</li>
<li>
<p><a href="#CHDHIIEG">Checking the Conformance of ORDDicom Objects</a></p>
</li>
<li>
<p><a href="#CHDJBECA">Handling Oracle Multimedia DICOM Exceptions in PL/SQL</a></p>
</li>
</ul>
<a id="CHDCICFD"></a><a id="IMDCM13417"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.1</span> Selecting DICOM Attributes</h3>
<p>This section shows how to access DICOM attributes <a id="sthref176"></a><a id="sthref177"></a>from the DICOM content that you loaded in <a href="#CIHEIGBC">Section 5.3</a>.</p>
<p>After the table <code>medical_image_table</code> is populated and metadata has been extracted, you can access metadata using SQL queries. <a href="#CIHGCCFE">Example 5-4</a> demonstrates how to select extracted DICOM metadata from the DICOM content.</p>
<div class="example">
<p class="titleinexample"><a id="CIHGCCFE"></a><a id="IMDCM13418"></a>Example 5-4 Selecting Metadata from the DICOM Content</p>
<pre>
1.     SOP_INSTANCE_UID.
2.     SOP_CLASS_UID
3.     STUDY_INSTANCE_UID
4.     SERIES_INSTANCE_UID.
5.     Content length (number of bytes of DICOM content)
6.     Patient Name, Patient ID, and Modality from DICOM metadata
 
 
select id,
       t.dicom.getSOPInstanceUID() as SOP_Instance_UID
from medical_image_table t;
 
select id,
       t.dicom.getSOPClassUID() as SOP_Class_UID
from medical_image_table t;
 
select id,
       t.dicom.getStudyInstanceUID() as Study_Instance_UID
from medical_image_table t;
 
select id,
       t.dicom.getSeriesInstanceUID() as Series_Instance_UID
from medical_image_table t;
 
select id,
       t.dicom.getcontentlength() as content_Length
from medical_image_table t;

select m.id, t.PATIENT_NAME, t.PATIENT_ID, t.MODALITY
from medical_image_table m,
  xmltable
    (xmlnamespaces
      (default 'http://xmlns.oracle.com/ord/dicom/metadata_1_0'),
           '/DICOM_OBJECT'
       passing m.dicom.metadata
       columns
         patient_name varchar2(100)
                   path './*[@name="Patient''''s Name"]/VALUE',
         patient_id   varchar2(100)
                   path './*[@name="Patient ID"]',
         modality     varchar2(100)
                   path './*[@name="Modality"]'
    ) t ;
</pre></div>
<!-- class="example" -->
<p>Running <a href="#CIHGCCFE">Example 5-4</a> generates the following output:</p>
<pre>
ID SOP_INSTANCE_UID
-- -------------------------------------------------------
 1 1.2.392.200036.9116.2.2.2.1762676206.1077529882.102147
 
ID SOP_CLASS_UID
-- -------------------------------------------------------
 1 1.2.840.10008.5.1.4.1.1.2
 
ID STUDY_INSTANCE_UID
-- -------------------------------------------------------
 1 1.2.392.200036.9116.2.2.2.1762929498.1080638122.365416
 
ID SERIES_INSTANCE_UID
-- -------------------------------------------------------
 1 1.2.392.200036.9116.2.2.2.1762929498.1080638122.503288
 
ID CONTENT_LENGTH
-- ---------------
 1   525974
 
ID PATIENT_NAME                    PATIENT_ID      MODALITY
--- ------------------------------ ----------      ----------
 1 CANCIO   2HR                    A-02-013        CT 
</pre></div>
<!-- class="sect2" -->
<a id="CHDCABFB"></a><a id="IMDCM13419"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.2</span> Creating Thumbnail Images and Changing Image Formats</h3>
<p>This section demonstrates some image processing operations<a id="sthref178"></a><a id="sthref179"></a> that can be invoked within the database.</p>
<p>As an example, to create a JPEG thumbnail image from a DICOM image, you generate a new ORDImage object from the ORDDicom object. Before you can complete this task, you must describe the desired properties of the new ORDImage object.</p>
<p>The following description generates a JPEG thumbnail image of size 75x100 pixels:</p>
<pre>
'fileFormat=jfif fixedScale=75 100'
</pre>
<p>The code segment shown in <a href="#CIHDJHBA">Example 5-5</a> defines the procedure <code>generate_thumb()</code>, which performs these tasks:</p>
<ul>
<li>
<p>Populates the column <code>imageThumb</code> of the table <code>medical_image_table</code> with the identifier <code>source_id</code>.</p>
</li>
<li>
<p>Generates an ORDImage object in the column by invoking the processCopy( ) method on the ORDDicom object in the source row.</p>
</li>
</ul>
<p>The code statements in <a href="#CIHDJHBA">Example 5-5</a> where these tasks are performed are highlighted in bold.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#CIHDJHBA">Example 5-5</a> is a complete code sample that includes a call to the setDataModel( ) procedure. Keep in mind that this procedure call might not be required in all situations.
<p>See the <a href="ch_dtmod_ref.htm#CHECBBFJ">setDataModel( ) Procedure</a> for more information about when to call this procedure.</p>
</div>
<div class="example">
<p class="titleinexample"><a id="CIHDJHBA"></a><a id="IMDCM13420"></a>Example 5-5 Generating and Processing the New ORDImage Object</p>
<pre>
-- Set Data Model Repository
execute ordsys.ord_dicom.setDataModel();
 
create or replace procedure generate_thumb(source_id number, verb varchar2) is
    dcmSrc    ordsys.orddicom;
    imgDst    ordsys.ordimage;
begin
  select dicom, imageThumb into dcmSrc, imgDst from medical_image_table
         where id = source_id for update;
  <span class="bold">dcmSrc.processCopy(verb, imgDst);</span>
 
  update medical_image_table set imageThumb = imgDst where id = source_id;
  commit;
end;
/
 
 
-- Create a JPEG thumbnail image for our test DICOM
<span class="bold">execute generate_thumb(1, 'fileFormat=jfif fixedScale=75 100');</span>
 
-- look at our handiwork
column t.imageThumb.getFileFormat() format A20;
select id, t.imageThumb.getWidth(), t.imageThumb.getHeight(), 
       t.imageThumb.getFileFormat() 
from medical_image_table t;
</pre></div>
<!-- class="example" -->
<p>Running <a href="#CIHDJHBA">Example 5-5</a> generates the following output:</p>
<pre>
ID  T.IMAGETHUMB.GETWIDTH() T.IMAGETHUMB.GETHEIGHT() T.IMAGETHUMB.GETFILE
--- ----------------------- ------------------------ ----------------------
 1              75                      100            JFIF
</pre></div>
<!-- class="sect2" -->
<a id="CHDJFCAH"></a><a id="IMDCM13421"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.3</span> Making Anonymous Copies of ORDDicom Objects</h3>
<p>This section shows how to protect patient privacy <a id="sthref180"></a><a id="sthref181"></a>by making ORDDicom objects anonymous.</p>
<p>To make ORDDicom objects anonymous, you must create a new ORDDicom object in which certain user-specifiable DICOM attributes have either been removed or overwritten in both the new DICOM content and the associated ORDDicom object metadata. An XML anonymity document specifies which DICOM attributes to remove or replace and what action to take to make each attribute anonymous.</p>
<p>The default anonymity document, <code>ordcman.xml</code>, is loaded during installation. You can create a customized anonymity document, but that topic is beyond the scope of this example. This example uses the default anonymity document.</p>
<p>The code segment in <a href="#CIHFGJJG">Example 5-6</a> defines the <a id="sthref182"></a><a id="sthref183"></a>procedure <code>generate_anon()</code>, which performs these tasks:</p>
<ul>
<li>
<p>Selects the original content <code>dicom</code> and the column <code>anonDicom</code> of the table <code>medical_image_table</code> with the identifier <code>source_id</code>.</p>
</li>
<li>
<p>Generates an ORDDicom object in the column <code>anonDicom</code> by calling the makeAnonymous( ) method on the <code>dicom</code> in the source row.</p>
</li>
</ul>
<p>If you run this code segment, replace the temporary UID for the variable <code>dest_sop_instance_uid</code> in the procedure <code>generate_anon</code> with a globally unique UID.</p>
<p>The code statement in <a href="#CIHFGJJG">Example 5-6</a> where the makeAnonymous( ) method is called is highlighted in bold.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#CIHFGJJG">Example 5-6</a> is a complete code sample that includes a call to the setDataModel( ) procedure. Keep in mind that this procedure call might not be required in all situations.
<p>See the <a href="ch_dtmod_ref.htm#CHECBBFJ">setDataModel( ) Procedure</a> for more information about when to call this procedure.</p>
</div>
<div class="example">
<p class="titleinexample"><a id="CIHFGJJG"></a><a id="IMDCM13422"></a>Example 5-6 Populating the Column and Generating an Anonymous ORDDicom Object</p>
<pre>
-- Set Data Model Repository
 
execute ordsys.ord_dicom.setDataModel();
 
create or replace procedure generate_anon(source_id number) is
    dcmSrc    ordsys.orddicom;
    anonDst   ordsys.orddicom;
    dest_sop_inst_uid varchar2(128) := '1.2.3';
 
begin
  select dicom, anonDicom into dcmSrc, anonDst from medical_image_table
         where id = source_id for update;
  <span class="bold">dcmSrc.makeAnonymous(dest_sop_inst_uid, anonDst);</span>
  update medical_image_table set anonDicom = anonDst where id = source_id;
  commit;
end;
/
 
-- Generate an Anonymous Copy of our test DICOM
execute generate_anon(1);

select m.id, t.PATIENT_NAME, t.PATIENT_ID
from medical_image_table m,
  xmltable
   (xmlnamespaces
     (default 'http://xmlns.oracle.com/ord/dicom/metadata_1_0'),
          '/DICOM_OBJECT'
      passing m.anondicom.metadata
      columns
        patient_name varchar2(100)
                  path './*[@name="Patient''''s Name"]/VALUE',
        patient_id   varchar2(100)
                  path './*[@name="Patient ID"]'
   ) t ;
</pre></div>
<!-- class="example" -->
<p>Running <a href="#CIHFGJJG">Example 5-6</a> generates the following output:</p>
<pre>
ID PATIENT_NAME                    PATIENT_ID
--- ------------------------------ ----------
 1  anonymous                      anonymous
</pre></div>
<!-- class="sect2" -->
<a id="CHDHIIEG"></a><a id="IMDCM13423"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.4</span> Checking the Conformance of ORDDicom Objects</h3>
<p>This section shows how to check the <a id="sthref184"></a><a id="sthref185"></a>conformance of ORDDicom objects against a set of user-specified constraint rules. Constraint rules are specified in one or more constraint documents. These XML documents specify attribute relationships and semantic constraints that cannot be expressed by the DICOM metadata schema.</p>
<p>A default constraint document, <code>ordcmct.xml</code>, is loaded during installation. You can create a customized constraint document, but that topic is beyond the scope of this example. This example uses the default constraint document.</p>
<p>The code segment in <a href="#CIHFHBFC">Example 5-7</a> defines the procedure check_conform(), which performs these tasks:</p>
<ul>
<li>
<p>Selects the original content <code>dicom</code> of the table <code>medical_image_table</code> with the identifier <code>source_id</code>.</p>
</li>
<li>
<p>Displays a line of output text, which indicates either of these conditions for the DICOM content:</p>
<ul>
<li>
<p>Conformance valid</p>
<p><code>isconformanceValid(OracleOrdObject): 1</code></p>
</li>
<li>
<p>Not conformance valid</p>
<p><code>isconformanceValid(OracleOrdObject): 0</code></p>
</li>
</ul>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#CIHFHBFC">Example 5-7</a> is a complete code sample that includes a call to the setDataModel( ) procedure. Keep in mind that this procedure call might not be required in all situations.
<p>See the <a href="ch_dtmod_ref.htm#CHECBBFJ">setDataModel( ) Procedure</a> for more information about when to call this procedure.</p>
</div>
<div class="example">
<p class="titleinexample"><a id="CIHFHBFC"></a><a id="IMDCM13424"></a>Example 5-7 Checking DICOM Conformance</p>
<pre>
-- Set Data Model Repository
execute ordsys.ord_dicom.setDataModel();
 
create or replace procedure check_conform(source_id number) is
    dcmSrc    ordsys.orddicom;
begin
  select dicom into dcmSrc from medical_image_table
         where id = source_id;
  dbms_output.put_line('isconformanceValid(OracleOrdObject): ' ||
    dcmSrc.isConformanceValid('OracleOrdObject'));
end;
/
show errors;
</pre></div>
<!-- class="example" -->
<p>Running <a href="#CIHFHBFC">Example 5-7</a> generates the following output:</p>
<pre>
SQL&gt; execute check_conform(1) ;
isconformanceValid(OracleOrdObject): 1
</pre>
<p>The value of <code>1</code> indicates that the DICOM content used in this example was valid because it conformed to the Oracle default constraint rules. If the DICOM content had not been valid, running the example would have returned a value of <code>0</code>. And, one or more constraint messages generated during the previous conformance validation would have been found in the view orddcm_conformance_vld_msgs.</p>
<p>The following code segment shows the description of this view:</p>
<pre>
SQL&gt; describe orddcm_conformance_vld_msgs;

 Name                         Null?          Type
 ----------------------    -------------    ---------------------
 SOP_INSTANCE_UID                            VARCHAR2(128 CHAR)
 RULE_NAME                  NOT NULL         VARCHAR2(64 CHAR)
 MESSAGE                                     VARCHAR2(1999 CHAR)
 MSG_TYPE                   NOT NULL         VARCHAR2(20 CHAR)
 MSG_TIME                   NOT NULL         TIMESTAMP(6)
</pre>
<p>You can query this view to examine any constraint messages that are generated during conformance validation. Because the DICOM content used in this example conformed with the Oracle constraint rules, there are no messages in the orddcm_conformance_vld_msgs view.</p>
<pre>
select * from orddcm_conformance_vld_msgs;
</pre>
<p>Thus, invoking the preceding select query generates the following output:</p>
<pre>
no rows selected
</pre>
<p>See <a href="ch_gen_over.htm#CHDFGCGJ">Section 3.2.8</a> for information about what to do if your DICOM content does not conform to the constraint rules defined for your organization. See <a href="ch_dtmod_ref.htm#CHDEFACC">DICOM Repository Public Views</a> for information about the view orddcm_conformance_vld_msgs.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJBECA"></a><a id="IMDCM13425"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.5</span> Handling Oracle Multimedia DICOM Exceptions in PL/SQL</h3>
<p>Possible errors that can occur during run time should always be handled in your application. This practice enables the program to continue its operation even when it encounters a run-time error. This practice also enables you to know what went wrong during program operation. Proper error handling practices ensure that, whenever possible, you are always able to recover from an error while running an application. In addition, proper error handling provides you with the information you need so you always know what went wrong.</p>
<p>When handling exceptions<a id="sthref186"></a><a id="sthref187"></a><a id="sthref188"></a><a id="sthref189"></a>, PL/SQL uses exception blocks. For example, in PL/SQL, the exception can appear as:</p>
<pre>
BEGIN
&lt;some program logic&gt;
EXCEPTION
     WHEN OTHERS THEN
     &lt;some exception logic&gt;
END;
</pre>
<p>When you design, code, and debug your application, you are aware of the places in your program where processing might stop due to a failure to anticipate an error. Those are the places in your program where you must add exception handling blocks to handle the potential errors.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information about handling PL/SQL exceptions</p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDGEIE"></a><a id="IMDCM5500"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.5</span> Developing DICOM Applications Using the DICOM Java API</h2>
<p>Developers who are familiar with Java and Java Database Connectivity (JDBC) can write DICOM applications using Oracle Multimedia DICOM Java API. The OrdDicom class in Oracle Multimedia DICOM Java API is the Java proxy class for the ORDDicom database object. This class enables developers to write Java applications using the Oracle Multimedia object designed to store Digital Imaging and Communications in Medicine (DICOM) content.<a id="sthref190"></a></p>
<p>This Java class is included in the <code>oracle.ord.dicom.*</code> package. This class is used to represent an instance of the ORDSYS.ORDDicom database object type in a Java application.</p>
<p>The following subsections describe tasks you must perform when developing DICOM applications in Java:</p>
<ul>
<li>
<p><a href="#CHDBDFFB">Setting Up Your Environment Variables</a></p>
</li>
<li>
<p><a href="#CHDGEBCE">Importing Oracle Java Classes into Your Application</a></p>
</li>
<li>
<p><a href="#CHDBDJJE">Handling Oracle Multimedia DICOM Exceptions in Java</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink IMDJC" href="../e10781/toc.htm">See <span class="italic">Oracle Multimedia DICOM Java API Reference</span></a> for more information about the available methods in this class.</p>
</div>
<a id="CHDBDFFB"></a><a id="IMDCM13426"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.5.1</span> Setting Up Your Environment Variables</h3>
<p>Before you can begin using Oracle Multimedia DICOM Java API, you must set up your environment <a id="sthref191"></a>to compile and run Java programs. First, you must specify the environment variable CLASSPATH. In addition, you must ensure that this variable includes the appropriate Oracle Java libraries for the Oracle Multimedia and other features that you intend to use.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<p><a class="olink IMURG11783" href="../../appdev.112/e10777/ch_appdev.htm#IMURG11783"><span class="italic">Oracle Multimedia User's Guide</span></a> for complete details about this setup</p>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGEBCE"></a><a id="IMDCM13427"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.5.2</span> Importing Oracle Java Classes into Your Application</h3>
<p>After setting up your environment variables and including the appropriate Oracle Java libraries, you must include the appropriate import statements in your Java application before using Oracle Multimedia DICOM Java API.</p>
<p>Execute the following statements to import <a id="sthref192"></a>the required classes from the <code>oracle.ord.dicom.*</code> package and the <code>oracle.ord.im.*</code> package:</p>
<pre>
import oracle.ord.dicom.OrdDicom;
import oracle.ord.im.OrdImage;
</pre>
<p>Along with the standard JDBC classes included in the <code>java.sql</code> package, you must also import the Oracle JDBC extension class<a id="sthref193"></a><a id="sthref194"></a> <code>oracle.jdbc.OracleResultSet</code>, with the following statement:</p>
<pre>
import oracle.jdbc.OracleResultSet;
</pre></div>
<!-- class="sect2" -->
<a id="CHDBDJJE"></a><a id="IMDCM13428"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.5.3</span> Handling Oracle Multimedia DICOM Exceptions in Java</h3>
<p>Possible errors that can occur during run time should always be handled in your application. This practice enables the program to continue its operation even when it encounters a run-time error. This practice also enables you to know what went wrong during program operation. Proper error handling practices ensure that, whenever possible, you are always able to recover from an error while running an application. In addition, proper error handling provides you with the information you need so you always know what went wrong.<a id="sthref195"></a><a id="sthref196"></a><a id="sthref197"></a><a id="sthref198"></a></p>
<p>When handling exceptions<a id="sthref199"></a><a id="sthref200"></a>, Java uses the try/catch block. For example, in Java, the exception can appear as:</p>
<pre>
try {
    //&lt;some program logic&gt;)
}
catch (exceptionName a) {
//Exception logic
}
finally {
//Execute logic if try block is executed even if an exception is caught
}
</pre>
<p>When you design, code, and debug your application, you are aware of the places in your program where processing might stop due to a failure to anticipate an error. Those are the places in your program where you must add exception handling blocks to handle the potential errors.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDEV" href="../../java.112/e10588/toc.htm"><span class="italic">Oracle Database Java Developer's Guide</span></a> for more information about handling Java exceptions</p>
</li>
<li>
<p><a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a> for more information about handling Java exceptions using JDBC</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1189">
<tr>
<td class="cellalignment1196">
<table class="cellalignment1194">
<tr>
<td class="cellalignment1193"><a href="part_two.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1193"><a href="ch_dev_dcmdemo.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2010,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1198">
<table class="cellalignment1192">
<tr>
<td class="cellalignment1193"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1193"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1193"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1193"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1193"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1193"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
