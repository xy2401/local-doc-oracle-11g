<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Precompiler Options</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2009-08-01T13:30:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Pro*C/C++ Programmer's Guide" />
<meta name="dcterms.identifier" content="E10825-01" />
<meta name="dcterms.isVersionOf" content="LNPCC" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="pc_09err.htm" title="Previous" type="text/html" />
<link rel="Next" href="pc_11thr.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10825.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/36</span> <!-- End Header --><a id="g30455"></a><a id="i12677"></a>
<h1 class="chapter"><span class="secnum">10</span> Precompiler Options</h1>
<p>This chapter tells you how to run the Pro*C/C++ precompiler, and describes the extensive set of precompiler options in detail. This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#i5700">The Precompiler Command</a></p>
</li>
<li>
<p><a href="#i5749">Precompiler Options</a></p>
</li>
<li>
<p><a href="#i9852">Quick Reference</a></p>
</li>
<li>
<p><a href="#i5764">Entering Options</a></p>
</li>
<li>
<p><a href="#i5560">Using the Precompiler Options</a></p>
</li>
</ul>
<a id="i5700"></a>
<div class="sect1">
<h2 class="sect1">The Precompiler Command</h2>
<p>The location of the precompiler differs from system to system. The system or database administrator usually defines logicals or aliases, or uses other system-specific means to make the Pro*C/C++ executable accessible.</p>
<p>To run the Pro*C/C++ precompiler, you issue the following command:</p>
<pre>
proc <span class="italic">option</span>=<span class="italic">value</span>... 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The option value is always separated from the option name by an equals sign, with no whitespace around the equals sign.</div>
<p>For example, the command</p>
<pre>
proc INAME=test_proc
</pre>
<p>precompiles the file <code>test_proc.pc</code> in the current directory, since the precompiler assumes that the filename extension is <code>pc</code>. The INAME=<span class="italic">argument</span> specifies the source file to be precompiled. The INAME option does not have to be the first option on the command line, but if it is, you can omit the option specification. So, the command</p>
<pre>
proc myfile 
</pre>
<p>is equivalent to</p>
<pre>
proc INAME=myfile 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The option names, and option values that do not name specific operating system objects, such as filenames, are not case-sensitive. In the examples in this guide, option names are written in upper case, and option values are usually in lower case. When you enter filenames, including the name of the Pro*C/C++ precompiler executable itself, always follow the case conventions used by your operating system.
<p>Some platforms, such as UNIX, require "escape characters" before certain characters in value strings. Consult your platform-specific documentation.</p>
</div>
<div class="sect2"><a id="sthref1340"></a>
<h3 class="sect2">Case Sensitivity<a id="sthref1341"></a><a id="sthref1342"></a></h3>
<p>In general, you can use either uppercase or lowercase for precompiler option names and values. However, if your operating system is case sensitive, like UNIX, you must specify filename values, including the name of the Pro*C/C++ executable, using the correct combination of uppercase and lowercase letters. <a id="sthref1343"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i5749"></a>
<div class="sect1">
<h2 class="sect1">Precompiler Options</h2>
<p>Precompiler options enable you to control how resources are used, how errors are reported, how input and output are formatted, and how cursors are managed.</p>
<p>The value of an option is a literal, which represents text or numeric values. For example, for the option</p>
<pre>
...  INAME=my_test 
</pre>
<p>the value is a string literal that specifies a filename.</p>
<p>For the option MAXOPENCURSORS</p>
<pre>
...MAXOPENCURSORS=20 
</pre>
<p>the value is numeric.</p>
<p>Some options take Boolean values, and you can represent these with the strings <span class="italic">yes</span> or <span class="italic">no</span>, <span class="italic">true</span> or <span class="italic">false</span>, or with the integer literals 1 or 0 respectively. For example, the option</p>
<pre>
...  SELECT_ERROR=yes 
</pre>
<p>is equivalent to</p>
<pre>
...  SELECT_ERROR=true
</pre>
<p>or</p>
<pre>
...  SELECT_ERROR=1 
</pre>
<p>all of which mean that SELECT errors should be flagged at run time.</p>
<a id="BCEFJIEH"></a>
<div class="sect2">
<h3 class="sect2">Environment Variables</h3>
<p>You can use environment variables<a id="sthref1344"></a><a id="sthref1345"></a><a id="sthref1346"></a><a id="sthref1347"></a> in SYS_INCLUDE and INCLUDE precompiler options. Environment variables like <code>ORACLE_HOME</code> can be used in SYS_INCLUDE and INCLUDE directory paths while precompiling a PROC application. SYS_INCLUDE and INCLUDE option values can also come from the config file, <code>pcscfg.cfg</code>. The following usages of environment variables are supported.</p>
<p>In Linux</p>
<pre>
$ENV_VAR 
sys_include=$ORACLE_HOME/precomp/public
include=$ORACLE_HOME/precomp/public
 
$(ENV_VAR)
sys_include=$(ORACLE_HOME)/precomp/public
include=$(ORACLE_HOME)/precomp/public

${ENV_VAR}
sys_include=${ORACLE_HOME}/precomp/public
include=${ORACLE_HOME}/precomp/public
</pre>
<p>In Windows</p>
<pre>
%ENV_VAR% 
sys_include=%ORACLE_HOME%\precomp\public
include=%ORACLE_HOME%\precomp\public
 
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1348"></a>
<h3 class="sect2">Configuration Files<a id="sthref1349"></a><a id="sthref1350"></a></h3>
<p>A configuration file is a text file that contains precompiler options. Each record (line) in the file contains only one option, with its associated value or values. <span class="italic">Any options entered on a line after the first option are ignored.</span> For example, the following configuration file contains the lines:</p>
<pre>
FIPS=YES 
MODE=ANSI 
CODE=ANSI_C
</pre>
<p>to set defaults for the FIPS, MODE, and CODE options.</p>
<p>There is a restriction of 300 characters per line for each entry in <code>pcscfg.cfg</code>. To set a value longer than 300 characters, for example, the SYS_INCLUDE path), create entries in multiple lines. For example,</p>
<pre>
sys_include=/ade/aime_rdbms_9819/oracle/precomp/public 
sys_include=/usr/include,/usr/lib/gcc-lib/i486-suse-linux/2.95.3/include 
sys_include=/usr/lib/gcc-lib/i386-redhat-linux/3.2.3/include
sys_include=/usr/lib/gcc-lib/i386-redhat-linux7/2.96/include
sys_include=/usr/include
</pre>
<p>Do not use brackets at the end of a line. A bracket at the right hand end of a line nullifies all previous lines. For example, a bracket at the end of the third line,</p>
<pre>
sys_include=/ade/aime_rdbms_9819/oracle/precomp/public 
sys_include=/usr/include,/usr/lib/gcc-lib/i486-suse-linux/2.95.3/include 
sys_include=/usr/lib/gcc-lib/i386-redhat-linux/3.2.3/include)
sys_include=/usr/lib/gcc-lib/i386-redhat-linux7/2.96/include
sys_include=/usr/include
</pre>
<p>sets SYS_INCLUDE to</p>
<pre>
/usr/lib/gcc-lib/i386-redhat-linux/3.2.3/include, /usr/lib/gcc-lib/i386-redhat-linux7/2.96/include,/usr/include
</pre>
<p><a id="sthref1351"></a>There is a single system configuration file for each installation. The name of the system configuration file is <code>pcscfg.cfg</code>. The location of the file is system specific. <a id="sthref1352"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the <code>pcscfg.cfg</code> file, you cannot use spaces. For example, if the file contains the following line:
<p><code>include="D:\Program Files\Microsoft Visual Studio\VC98\include"</code></p>
<p>the precompilation will fail. You can replace it with the following:</p>
<p><code>include=D:\Progra~1\Microa~4\VC98\include</code></p>
</div>
<p>Each Pro*C/C++ user can have one or more private configuration files. The name of the configuration file must be specified using the CONFIG= precompiler option.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i5560">"Using the Precompiler Options"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot nest configuration files. This means that CONFIG= is not a valid option inside a configuration file.</div>
</div>
<!-- class="sect2" -->
<a id="i9362"></a>
<div class="sect2">
<h3 class="sect2">Precedence of Option Values<a id="sthref1353"></a><a id="sthref1354"></a></h3>
<p>The value of an option is determined, in increasing precedence, by: <a id="sthref1355"></a></p>
<ul>
<li>
<p>A value built in to the precompiler</p>
</li>
<li>
<p>A value set in the Pro*C/C++ system configuration file<a id="sthref1356"></a><a id="sthref1357"></a></p>
</li>
<li>
<p>A value set in a Pro*C/C++ user configuration file <a id="sthref1358"></a><a id="sthref1359"></a></p>
</li>
<li>
<p>A value set in the command line</p>
</li>
<li>
<p>A value set inline</p>
</li>
</ul>
<p>For example, the option MAXOPENCURSORS specifies the maximum number of cached open cursors. The built-in precompiler default value for this option is 10. However, if MAXOPENCURSORS=32 is specified in the system configuration file, the default now becomes 32. The user configuration file could set it to yet another value, which then overrides the system configuration value. Finally, an inline specification takes precedence over all preceding defaults.</p>
<p>If a PROC command-line option is used a multiple number of times, the last value assigned in the last occurence is the value used by PROC for precompilation. For example,</p>
<pre>
$ proc iname=sample.pc ... oname=output1.c ... oname=output2.c ... oname=output3.c
</pre>
<p>In the example, <code>output3.c</code> is the ONAME value used by PROC and the generated output filename is <code>output3.c</code>.</p>
<p>If an option is specified both inside the config file (system default or user specified) and on the command line, then the value specified in the command line takes precedence.</p>
<p>In the case of SYS_INCLUDE and INCLUDE options, the behavior is as defined in <a href="#BCEFJIEH">Environment Variables</a>. The values are appended unless interrupted by a bracket at the end of a line.</p>
<p>If you specify a private configuration file with CONFIG=<span class="italic">filename</span>, then the first value takes precedence and subsequent occurences in the command line are ignored. This is an exception to command-line last-value precedence.</p>
<p>Some options, such as USERID, do not have a precompiler default value. The built-in default values for options that do have them are listed in <a href="#CIHIGBEF">Table 10-2</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Check your system-specific documentation for the precompiler default values; they may have been changed from the values in this chapter for your platform.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i5754">"What Occurs During Precompilation?"</a> for more information about configuration files.</p>
</li>
<li>
<p><a href="#i5560">"Using the Precompiler Options"</a>.</p>
</li>
</ul>
</div>
<p class="subhead1"><a id="sthref1360"></a>Determining Current Values<a id="sthref1361"></a><a id="sthref1362"></a></p>
<p>You can interactively determine the current value for one or more options by using a question mark on the command line. For example, if you issue the command</p>
<pre>
proc ? 
</pre>
<p>the complete set of options, along with their current values, is printed to your terminal. (On a UNIX system running the C shell, escape the '?' with a backslash.) In this case, the values are those built into the precompiler, overridden by any values in the system configuration file. But if you issue the command</p>
<pre>
proc config=my_config_file.h ?
 
</pre>
<p>and there is a file named <code>my_config_file.h</code> in the current directory, all options are listed. Values in the user configuration file supply missing values, and supersede values built-in to the Pro*C/C++ precompiler, or values specified in the system configuration file.</p>
<p>You can also determine the current value of a single option, by simply specifying that option name, followed by =?. For example:</p>
<pre>
proc maxopencursors=? 
</pre>
<p>prints the current default value for the MAXOPENCURSORS option.</p>
<p>Entering:</p>
<pre>
proc
</pre>
<p>will give a short summary that resembles <a href="#CIHIGBEF">"Precompiler Options"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i9359"></a>
<div class="sect2">
<h3 class="sect2">Macro and Micro Options<a id="sthref1363"></a><a id="sthref1364"></a><a id="sthref1365"></a></h3>
<p>The option MODE controls several options at once. MODE is known as a <span class="italic">macro</span> option. Some newer options such as CLOSE_ON_COMMIT, DYNAMIC and TYPE_CODE control only one function and are known as <span class="italic">micro</span> options. A macro option has precedence over micro options only if the macro option is at a higher level of precedence. See <a href="#i9362">"Precedence of Option Values"</a>.</p>
<p>The following table lists the values of micro options set by the macro option values:</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1366"></a><a id="sthref1367"></a>Table 10-1 How Macro Option Values Set Micro Option Values</p>
<table class="cellalignment830" title="How Macro Option Values Set Micro Option Values" summary="Micro and Macro Option values" dir="ltr">
<thead>
<tr class="cellalignment824">
<th class="cellalignment831" id="r1c1-t9">Macro Option</th>
<th class="cellalignment831" id="r1c2-t9">Micro Option</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment824">
<td class="cellalignment832" id="r2c1-t9" headers="r1c1-t9">
<p>MODE=ANSI | ISO</p>
</td>
<td class="cellalignment832" headers="r2c1-t9 r1c2-t9">
<p>CLOSE_ON_COMMIT=YES</p>
<p>DYNAMIC=ANSI</p>
<p>TYPE_CODE=ANSI</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r3c1-t9" headers="r1c1-t9">
<p>MODE=ORACLE</p>
</td>
<td class="cellalignment832" headers="r3c1-t9 r1c2-t9">
<p>CLOSE_ON_COMMIT=NO</p>
<p>DYNAMIC=ORACLE</p>
<p>TYPE_CODE=ORACLE</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If you specify both MODE=ANSI and CLOSE_ON_COMMIT=NO in the user configuration file, then cursors will not be closed after a COMMIT. If you specify MODE=ORACLE in your configuration file and CLOSE_ON_COMMIT=YES on the command line, then the cursors will be closed.</p>
</div>
<!-- class="sect2" -->
<a id="i5754"></a>
<div class="sect2">
<h3 class="sect2">What Occurs During Precompilation?</h3>
<p>During precompilation, Pro*C/C++ generates C or C++ code that replaces the SQL statements embedded in your host program. The generated code contains data structures that indicate the datatype, length, and address of host variables, as well as other information required by the runtime library, SQLLIB. The generated code also contains the calls to SQLLIB routines that perform the embedded SQL operations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The precompiler does <span class="italic">not</span> generate calls to Oracle Call Interface (OCI) routines.</div>
<p><a href="#CIHIGBEF">Table 10-2</a> is a quick reference to the major precompiler options. The options that are accepted, but do not have any affect, are not included in this table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><span class="italic"><a class="olink ERRMG" href="../../server.112/e17766/toc.htm">Oracle Database Error Messages</a></span> for messages.</p>
</li>
<li>
<p><a href="#i5560">"Using the Precompiler Options"</a>.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i5759"></a>
<div class="sect2">
<h3 class="sect2">Scope of Options<a id="sthref1368"></a></h3>
<p>A precompilation unit is a file containing C code and one or more embedded SQL statements. The options specified for a given precompilation unit affect only that unit; they have no effect on other units. For example, if you specify HOLD_CURSOR=YES and RELEASE_CURSOR=YES for unit A, but not for unit B, SQL statements in unit A run with these HOLD_CURSOR and RELEASE_CURSOR values, but SQL statements in unit B run with the default values.</p>
</div>
<!-- class="sect2" -->
<a id="i1006107"></a>
<div class="sect2">
<h3 class="sect2">Pro*C/C++ Precompiler Issues for Windows Platforms<a id="sthref1369"></a></h3>
<p>This section highlights issues related to Pro*C/C++ for Windows platforms.</p>
<div class="sect3"><a id="sthref1370"></a>
<h4 class="sect3">Configuration <a id="sthref1371"></a><a id="sthref1372"></a><a id="sthref1373"></a>File</h4>
<p>For this release, the system configuration file is called <a id="sthref1374"></a><code>pcscfg.cfg</code>. This file is located in the <code><span class="codeinlineitalic">ORACLE_HOME\</span></code><code>precomp\admin</code> directory.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1375"></a>
<h4 class="sect3">CODE<a id="sthref1376"></a></h4>
<p>The <code>CODE</code> option has a default setting of <code>ANSI_C</code>. Pro*C/C++ for other operating systems may have a default setting of <code>KR_C</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1377"></a>
<h4 class="sect3">DBMS<a id="sthref1378"></a></h4>
<p><code>DBMS=V6_CHAR</code> is not supported when using <code>CHAR_MAP=VARCHAR2</code>. Instead, use <code>DBMS=V7</code>.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1379"></a>
<h4 class="sect3">INCLUDE<a id="sthref1380"></a></h4>
<p>For sample programs that precompile with <code>PARSE=PARTIAL</code> or <code>PARSE=FULL</code>, an include path of <code>c:\program files\devstudio\vc\include</code> has been added. If Microsoft Visual Studio has been installed in a different location, modify the Include Directories field accordingly for the sample programs to precompile correctly.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1381"></a>
<h4 class="sect3">PARSE<a id="sthref1382"></a></h4>
<p>The <code>PARSE</code> option has a default setting of <code>NONE</code>. Pro*C/C++ for other operating systems may have a default setting of <code>FULL</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i9852"></a>
<div class="sect1">
<h2 class="sect1">Quick Reference<a id="sthref1383"></a></h2>
<p><a href="#CIHIGBEF">Table 10-2</a> is a quick reference to the Pro*C/C++ options. Options marked with an asterisk can be entered inline.<a id="sthref1384"></a><a id="sthref1385"></a><a id="sthref1386"></a></p>
<div class="tblformalwide">
<p class="titleintable"><a id="sthref1387"></a><a id="CIHIGBEF"></a>Table 10-2 Precompiler Options</p>
<table class="cellalignment833" title="Precompiler Options" summary="Precompiler Options" dir="ltr">
<thead>
<tr class="cellalignment824">
<th class="cellalignment831" id="r1c1-t12">Syntax</th>
<th class="cellalignment831" id="r1c2-t12">Default</th>
<th class="cellalignment831" id="r1c3-t12">Specifics</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment824">
<td class="cellalignment832" id="r2c1-t12" headers="r1c1-t12">
<p>AUTO_CONNECT={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r2c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r2c1-t12 r1c3-t12">
<p>Automatic CLUSTER$ account connection before the first executable statement.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r3c1-t12" headers="r1c1-t12">
<p>CHAR_MAP={VARCHAR2 | CHARZ | STRING | CHARF} *</p>
</td>
<td class="cellalignment832" headers="r3c1-t12 r1c2-t12">
<p>CHARZ</p>
</td>
<td class="cellalignment832" headers="r3c1-t12 r1c3-t12">
<p>Mapping of character arrays and strings.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r4c1-t12" headers="r1c1-t12">
<p>CINCR</p>
</td>
<td class="cellalignment832" headers="r4c1-t12 r1c2-t12">
<p>1</p>
</td>
<td class="cellalignment832" headers="r4c1-t12 r1c3-t12">
<p>Allows the application to set the next increment for physical connections to be opened to the database, if the current number of physical connections is less than CMAX.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r5c1-t12" headers="r1c1-t12">
<p>CLOSE_ON_COMMIT={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r5c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r5c1-t12 r1c3-t12">
<p>Close all cursors on COMMIT.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r6c1-t12" headers="r1c1-t12">
<p>CODE={ANSI_C | KR_C | CPP}</p>
</td>
<td class="cellalignment832" headers="r6c1-t12 r1c2-t12">
<p>KR_C</p>
</td>
<td class="cellalignment832" headers="r6c1-t12 r1c3-t12">
<p>Kind of C code generated.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r7c1-t12" headers="r1c1-t12">
<p>COMP_CHARSET={MULTI_BYTE | SINGLE_BYTE}</p>
</td>
<td class="cellalignment832" headers="r7c1-t12 r1c2-t12">
<p>MULTI_BYTE</p>
</td>
<td class="cellalignment832" headers="r7c1-t12 r1c3-t12">
<p>The character set type the C/C++ compiler supports.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r8c1-t12" headers="r1c1-t12">
<p>CONFIG=<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r8c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r8c1-t12 r1c3-t12">
<p>User's private configuration file.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r9c1-t12" headers="r1c1-t12">
<p>CMIN</p>
</td>
<td class="cellalignment832" headers="r9c1-t12 r1c2-t12">
<p>2</p>
</td>
<td class="cellalignment832" headers="r9c1-t12 r1c3-t12">
<p>Specifies the minimum number of physical connections in the connection pool.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r10c1-t12" headers="r1c1-t12">
<p>CMAX</p>
</td>
<td class="cellalignment832" headers="r10c1-t12 r1c2-t12">
<p>100</p>
</td>
<td class="cellalignment832" headers="r10c1-t12 r1c3-t12">
<p>Specifies the maximum number of physical connections that can be opened for the database.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r11c1-t12" headers="r1c1-t12">
<p>CNOWAIT</p>
</td>
<td class="cellalignment832" headers="r11c1-t12 r1c2-t12">
<p>0 which means not set.</p>
</td>
<td class="cellalignment832" headers="r11c1-t12 r1c3-t12">
<p>This attribute determines if the application must repeatedly try for a physical connection when all other physical connections in the pool are busy, and the total number of physical connections has already reached its maximum.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r12c1-t12" headers="r1c1-t12">
<p>CPOOL</p>
</td>
<td class="cellalignment832" headers="r12c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r12c1-t12 r1c3-t12">
<p>Based on this option, the precompiler generates the appropriate code that directs SQLLIB to enable or disable the connection pool feature.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r13c1-t12" headers="r1c1-t12">
<p>CPP_SUFFIX=<span class="italic">extension</span></p>
</td>
<td class="cellalignment832" headers="r13c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r13c1-t12 r1c3-t12">
<p>Specify the default filename extension for C++ output files.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r14c1-t12" headers="r1c1-t12">
<p>CTIMEOUT</p>
</td>
<td class="cellalignment832" headers="r14c1-t12 r1c2-t12">
<p>0 which means not set.</p>
</td>
<td class="cellalignment832" headers="r14c1-t12 r1c3-t12">
<p>Physical connections that are idle for more than the specified time (in seconds) are terminated to maintain an optimum number of open physical connections.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r15c1-t12" headers="r1c1-t12">
<p>DBMS={V7 | NATIVE | V8}</p>
</td>
<td class="cellalignment832" headers="r15c1-t12 r1c2-t12">
<p>NATIVE</p>
</td>
<td class="cellalignment832" headers="r15c1-t12 r1c3-t12">
<p>Compatibility (Oracle7, Oracle8, Oracle8<span class="italic">i</span>, Oracle9<span class="italic">i</span>, or the database version to which you are connected at precompile time).</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r16c1-t12" headers="r1c1-t12">
<p>DEF_SQLCODE={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r16c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r16c1-t12 r1c3-t12">
<p>Generate a macro to #define SQLCODE.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r17c1-t12" headers="r1c1-t12">
<p>DEFINE=<span class="italic">name</span> *</p>
</td>
<td class="cellalignment832" headers="r17c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r17c1-t12 r1c3-t12">
<p>Define a name for use by the Pro*C/C++ precompiler.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r18c1-t12" headers="r1c1-t12">
<p>DURATION={TRANSACTION | SESSION}</p>
</td>
<td class="cellalignment832" headers="r18c1-t12 r1c2-t12">
<p>TRANSACTION</p>
</td>
<td class="cellalignment832" headers="r18c1-t12 r1c3-t12">
<p>Set pin duration for objects in the cache.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r19c1-t12" headers="r1c1-t12">
<p>DYNAMIC={ANSI | ORACLE}</p>
</td>
<td class="cellalignment832" headers="r19c1-t12 r1c2-t12">
<p>ORACLE</p>
</td>
<td class="cellalignment832" headers="r19c1-t12 r1c3-t12">
<p>Specifies Oracle or ANSI SQL semantics.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r20c1-t12" headers="r1c1-t12">
<p>ERRORS={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r20c1-t12 r1c2-t12">
<p>YES</p>
</td>
<td class="cellalignment832" headers="r20c1-t12 r1c3-t12">
<p>Where to direct error messages (NO means only to listing file, and not to terminal).</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r21c1-t12" headers="r1c1-t12">
<p>ERRTYPE=<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r21c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r21c1-t12 r1c3-t12">
<p>Name of the listing file for intype file error messages.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r22c1-t12" headers="r1c1-t12">
<p>FIPS={NO | SQL89 | SQL2 | YES} *</p>
</td>
<td class="cellalignment832" headers="r22c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r22c1-t12 r1c3-t12">
<p>Whether to flag ANSI/ISO non-compliance.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r23c1-t12" headers="r1c1-t12">
<p>HEADER=<span class="italic">extension</span></p>
</td>
<td class="cellalignment832" headers="r23c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r23c1-t12 r1c3-t12">
<p>Specify file extension for precompiled header files.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r24c1-t12" headers="r1c1-t12">
<p>HOLD_CURSOR={YES | NO} *</p>
</td>
<td class="cellalignment832" headers="r24c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r24c1-t12 r1c3-t12">
<p>How cursor cache handles SQL statement.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r25c1-t12" headers="r1c1-t12">
<p>INAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r25c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r25c1-t12 r1c3-t12">
<p>Name of the input file.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r26c1-t12" headers="r1c1-t12">
<p>INCLUDE=<span class="italic">pathname</span> *</p>
</td>
<td class="cellalignment832" headers="r26c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r26c1-t12 r1c3-t12">
<p>Directory path for EXEC SQL INCLUDE or #include statements.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r27c1-t12" headers="r1c1-t12">
<p>INTYPE=<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r27c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r27c1-t12 r1c3-t12">
<p>Name of the input file for type information.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r28c1-t12" headers="r1c1-t12">
<p>LINES={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r28c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r28c1-t12 r1c3-t12">
<p>Whether #line directives are generated.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r29c1-t12" headers="r1c1-t12">
<p>LNAME=<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r29c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r29c1-t12 r1c3-t12">
<p>Name of listing file.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r30c1-t12" headers="r1c1-t12">
<p>LTYPE={NONE | SHORT | LONG}</p>
</td>
<td class="cellalignment832" headers="r30c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r30c1-t12 r1c3-t12">
<p>Type of listing file to be generated, if any.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r31c1-t12" headers="r1c1-t12">
<p>MAXLITERAL=10..1024</p>
</td>
<td class="cellalignment832" headers="r31c1-t12 r1c2-t12">
<p>1024</p>
</td>
<td class="cellalignment832" headers="r31c1-t12 r1c3-t12">
<p>Maximum length (bytes) of string literals in generated C code.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r32c1-t12" headers="r1c1-t12">
<p>MAXOPENCURSORS=5..255 *</p>
</td>
<td class="cellalignment832" headers="r32c1-t12 r1c2-t12">
<p>10</p>
</td>
<td class="cellalignment832" headers="r32c1-t12 r1c3-t12">
<p>Maximum number of concurrent cached open cursors.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r33c1-t12" headers="r1c1-t12">
<p>MODE={ANSI | ISO | ORACLE}</p>
</td>
<td class="cellalignment832" headers="r33c1-t12 r1c2-t12">
<p>ORACLE</p>
</td>
<td class="cellalignment832" headers="r33c1-t12 r1c3-t12">
<p>ANSI/ISO or Oracle behavior.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r34c1-t12" headers="r1c1-t12">
<p>NATIVE_TYPES</p>
</td>
<td class="cellalignment832" headers="r34c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r34c1-t12 r1c3-t12">
<p>Support for native float/double.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r35c1-t12" headers="r1c1-t12">
<p>NLS_CHAR=(<span class="italic">var1</span>, ..., <span class="italic">varn</span>)</p>
</td>
<td class="cellalignment832" headers="r35c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r35c1-t12 r1c3-t12">
<p>Specify multibyte character variables.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r36c1-t12" headers="r1c1-t12">
<p>NLS_LOCAL={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r36c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r36c1-t12 r1c3-t12">
<p>Control multibyte character semantics.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r37c1-t12" headers="r1c1-t12">
<p>OBJECTS={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r37c1-t12 r1c2-t12">
<p>YES</p>
</td>
<td class="cellalignment832" headers="r37c1-t12 r1c3-t12">
<p>Support of object types.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r38c1-t12" headers="r1c1-t12">
<p>ONAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment832" headers="r38c1-t12 r1c2-t12">
<p><span class="italic">iname</span>.c</p>
</td>
<td class="cellalignment832" headers="r38c1-t12 r1c3-t12">
<p>Name of the output (code) file.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r39c1-t12" headers="r1c1-t12">
<p>ORACA={YES | NO} *</p>
</td>
<td class="cellalignment832" headers="r39c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r39c1-t12 r1c3-t12">
<p>Whether to use the ORACA.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r40c1-t12" headers="r1c1-t12">
<p>PAGELEN=30..256</p>
</td>
<td class="cellalignment832" headers="r40c1-t12 r1c2-t12">
<p>80</p>
</td>
<td class="cellalignment832" headers="r40c1-t12 r1c3-t12">
<p>Page length of the listing file.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r41c1-t12" headers="r1c1-t12">
<p>PARSE={NONE | PARTIAL | FULL}</p>
</td>
<td class="cellalignment832" headers="r41c1-t12 r1c2-t12">
<p>FULL</p>
</td>
<td class="cellalignment832" headers="r41c1-t12 r1c3-t12">
<p>Whether Pro*C/C++ parses (with a C parser) the.pc source.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r42c1-t12" headers="r1c1-t12">
<p>PREFETCH=0..65535</p>
</td>
<td class="cellalignment832" headers="r42c1-t12 r1c2-t12">
<p>1</p>
</td>
<td class="cellalignment832" headers="r42c1-t12 r1c3-t12">
<p>Speed up queries by pre-fetching a given number of rows.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r43c1-t12" headers="r1c1-t12">
<p>RELEASE_CURSOR={YES | NO} *</p>
</td>
<td class="cellalignment832" headers="r43c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r43c1-t12 r1c3-t12">
<p>Control release of cursors from cursor cache.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r44c1-t12" headers="r1c1-t12">
<p>SELECT_ERROR={YES | NO} *</p>
</td>
<td class="cellalignment832" headers="r44c1-t12 r1c2-t12">
<p>YES</p>
</td>
<td class="cellalignment832" headers="r44c1-t12 r1c3-t12">
<p>Flagging of SELECT errors.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r45c1-t12" headers="r1c1-t12">
<p>SQLCHECK={SEMANTICS | SYNTAX} *</p>
</td>
<td class="cellalignment832" headers="r45c1-t12 r1c2-t12">
<p>SYNTAX</p>
</td>
<td class="cellalignment832" headers="r45c1-t12 r1c3-t12">
<p>Amount of precompile time SQL checking.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r46c1-t12" headers="r1c1-t12">
<p>SYS_INCLUDE=pathname</p>
</td>
<td class="cellalignment832" headers="r46c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r46c1-t12 r1c3-t12">
<p>Directory where system header files, such as iostream.h, are found.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r47c1-t12" headers="r1c1-t12">
<p>THREADS={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r47c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r47c1-t12 r1c3-t12">
<p>Indicates a shared server application.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r48c1-t12" headers="r1c1-t12">
<p>TYPE_CODE={ORACLE | ANSI}</p>
</td>
<td class="cellalignment832" headers="r48c1-t12 r1c2-t12">
<p>ORACLE</p>
</td>
<td class="cellalignment832" headers="r48c1-t12 r1c3-t12">
<p>Use of Oracle or ANSI type codes for dynamic SQL.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r49c1-t12" headers="r1c1-t12">
<p>UNSAFE_NULL={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r49c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r49c1-t12 r1c3-t12">
<p>UNSAFE_NULL=YES disables the ORA-01405 message.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r50c1-t12" headers="r1c1-t12">
<p>USERID=<span class="italic">username</span>/<span class="italic">password[@dbname]</span></p>
</td>
<td class="cellalignment832" headers="r50c1-t12 r1c2-t12">
<p>none</p>
</td>
<td class="cellalignment832" headers="r50c1-t12 r1c3-t12">
<p>Username/password[@dbname] connect string.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r51c1-t12" headers="r1c1-t12">
<p>UTF16_CHARSET={NCHAR_CHARSET | DB_CHARSET}</p>
</td>
<td class="cellalignment832" headers="r51c1-t12 r1c2-t12">
<p>NCHAR_CHARSET</p>
</td>
<td class="cellalignment832" headers="r51c1-t12 r1c3-t12">
<p>Specify the character set form used by UNICODE(UTF16).</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r52c1-t12" headers="r1c1-t12">
<p>VARCHAR={YES | NO}</p>
</td>
<td class="cellalignment832" headers="r52c1-t12 r1c2-t12">
<p>NO</p>
</td>
<td class="cellalignment832" headers="r52c1-t12 r1c3-t12">
<p>Allow the use of implicit VARCHAR structures.</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r53c1-t12" headers="r1c1-t12">
<p>VERSION={ANY | LATEST | RECENT} *</p>
</td>
<td class="cellalignment832" headers="r53c1-t12 r1c2-t12">
<p>RECENT</p>
</td>
<td class="cellalignment832" headers="r53c1-t12 r1c3-t12">
<p>Which version of an object is to be returned.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect1" -->
<a id="i5764"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref1388"></a>Entering Options</h2>
<p>You can enter any precompiler option in the command line. Many can also be entered inline in the precompiler program source file, using the EXEC ORACLE OPTION statement.<a id="sthref1389"></a><a id="sthref1390"></a></p>
<div class="sect2"><a id="sthref1391"></a>
<h3 class="sect2">On the Command Line</h3>
<p>You enter precompiler options in the command line using the following syntax:<a id="sthref1392"></a><a id="sthref1393"></a><a id="sthref1394"></a></p>
<pre>
... [OPTION_NAME=value] [OPTION_NAME=value] ... 
</pre>
<p>Separate each option=value specification with one or more spaces. For example, you might enter the following:</p>
<pre>
... CODE=ANSI_C MODE=ANSI 
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1395"></a>
<h3 class="sect2">Inline</h3>
<p>You enter options inline by coding EXEC ORACLE statements, using the following syntax:<a id="sthref1396"></a></p>
<pre>
EXEC ORACLE OPTION (OPTION_NAME=value); 
</pre>
<p>For example, you might code the following:</p>
<pre>
EXEC ORACLE OPTION (RELEASE_CURSOR=yes); 
</pre>
<div class="sect3"><a id="sthref1397"></a>
<h4 class="sect3">Uses for EXEC ORACLE</h4>
<p>The EXEC ORACLE feature is especially useful for changing option values during precompilation. For example, you might want to change HOLD_CURSOR and RELEASE_CURSOR on a statement-by-statement basis.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_actun.htm#CHEBGDGB">Appendix C, " Performance Tuning"</a> shows you how to optimize runtime performance using inline options.<a id="sthref1398"></a></div>
<p>Specifying options inline or in a configuration file is also helpful if your operating system limits the number of characters you can enter on the command line.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1399"></a>
<h4 class="sect3">Scope of EXEC ORACLE</h4>
<p>An EXEC ORACLE statement stays in effect until textually superseded by another EXEC ORACLE statement specifying the same option. In the following example, HOLD_CURSOR=NO stays in effect until superseded by HOLD_CURSOR=YES:<a id="sthref1400"></a><a id="sthref1401"></a></p>
<pre>
char emp_name[20]; 
int  emp_number, dept_number; 
float salary; 
 
EXEC SQL WHENEVER NOT FOUND DO break; 
EXEC ORACLE OPTION (HOLD_CURSOR=NO); 
 
EXEC SQL DECLARE emp_cursor CURSOR FOR 
SELECT empno, deptno FROM emp; 
 
EXEC SQL OPEN emp_cursor; 
printf( 
"Employee Number  Department\n--------------------------\n"); 
for (;;) 
{ 
   EXEC SQL FETCH emp_cursor INTO :emp_number, :dept_number; 
   printf("%d\t%d\n", emp_number, dept_number); 
} 
 
EXEC SQL WHENEVER NOT FOUND CONTINUE; 
for (;;) 
{ 
   printf("Employee number: "); 
   scanf("%d", &amp;emp_number); 
   if (emp_number == 0) 
      break; 
   EXEC ORACLE OPTION (HOLD_CURSOR=YES); 
   EXEC SQL SELECT ename, sal 
      INTO :emp_name, :salary 
      FROM emp WHERE empno = :emp_number; 
   printf("Salary for %s is %6.2f.\n", emp_name, salary); 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i5560"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref1402"></a>Using the Precompiler Options <a id="ABC23831"></a></h2>
<p>This section is organized for easy reference. It lists the precompiler options alphabetically, and for each option gives its purpose, syntax, and default value. Usage notes that help you understand how the option works are also provided.<a id="sthref1403"></a></p>
<div class="sect2"><a id="sthref1404"></a>
<h3 class="sect2"><a id="sthref1405"></a>AUTO_CONNECT</h3>
<p class="subhead1"><a id="sthref1406"></a><a id="sthref1407"></a><a id="sthref1408"></a>Purpose</p>
<p>Allows automatic connection to the CLUSTER$ account.</p>
<p class="subhead1"><a id="sthref1409"></a>Syntax</p>
<p>AUTO_CONNECT={YES | NO}</p>
<p class="subhead1"><a id="sthref1410"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1411"></a>Usage Notes</p>
<p>Can be entered only on the command line or in a configuration file.</p>
<p>If AUTO_CONNECT=YES, and the application is not already connected to a database when it processes the first executable SQL statement, it attempts to connect using the userid</p>
<pre>
CLUSTER$<span class="italic">username</span>
</pre>
<p>where <span class="italic">username</span> is your current operating system user or task name and CLUSTER$username is a valid Oracle userid.</p>
<p>When AUTO_CONNECT=NO, you must use the CONNECT statement in your program to connect to Oracle.</p>
</div>
<!-- class="sect2" -->
<a id="i5282"></a>
<div class="sect2">
<h3 class="sect2">CHAR_MAP<a id="sthref1412"></a><a id="sthref1413"></a></h3>
<p class="subhead1"><a id="sthref1414"></a>Purpose</p>
<p>Specifies the default mapping of C host variables of type char or char[n], and pointers to them, into SQL.</p>
<p class="subhead1"><a id="sthref1415"></a>Syntax</p>
<p>CHAR_MAP={VARCHAR2 | CHARZ | STRING | CHARF}</p>
<p class="subhead1"><a id="sthref1416"></a>Default</p>
<p>CHARZ</p>
<p class="subhead1"><a id="sthref1417"></a>Usage Note</p>
<p>Before release 8.0, you had to declare char or char[n] host variables as CHAR, using the SQL DECLARE statement. The external datatypes VARCHAR2 and CHARZ were the default character mappings of Oracle7.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_04dat.htm#i23767">"VARCHAR Variables"</a> for a table of CHAR_MAP settings, descriptions of the datatype, and where they are the default.</p>
</li>
<li>
<p><a href="pc_05adv.htm#i429905">"Inline Usage of the CHAR_MAP Option"</a> for an example of usage of CHAR_MAP in Pro*C/C++.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1418"></a>
<h3 class="sect2">CINCR</h3>
<p class="subhead1"><a id="sthref1419"></a><a id="sthref1420"></a><a id="sthref1421"></a>Purpose</p>
<p>Allows the application to set the next increment for physical connections to be opened to the database.</p>
<p class="subhead1"><a id="sthref1422"></a>Syntax</p>
<p>CINCR = Range is 1 to (CMAX-CMIN).</p>
<p class="subhead1"><a id="sthref1423"></a>Default</p>
<p>1</p>
<p class="subhead1"><a id="sthref1424"></a>Usage Notes</p>
<p>Initially, all physical connections as specified through CMIN are opened to the server. Subsequently, physical connections are opened only when necessary. Users should set CMIN to the total number of planned or expected concurrent statements to be run by the application to get optimum performance. The default value is set to 2.</p>
</div>
<!-- class="sect2" -->
<a id="i9360"></a>
<div class="sect2">
<h3 class="sect2">CLOSE_ON_COMMIT<a id="sthref1425"></a><a id="sthref1426"></a></h3>
<p class="subhead1"><a id="sthref1427"></a>Purpose</p>
<p><a id="sthref1428"></a>Specifies whether or not all cursors declared without the WITH HOLD clause are closed on commit.</p>
<p class="subhead1"><a id="sthref1429"></a>Syntax</p>
<p>CLOSE_ON_COMMIT={YES | NO}</p>
<p class="subhead1"><a id="sthref1430"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1431"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file.</p>
<p>This option will only have an effect when a cursor is not coded using the WITH HOLD clause in a DECLARE CURSOR statement, since that will override both the new option and the existing behavior which is associated with the MODE option. If MODE is specified at a higher level than CLOSE_ON_COMMIT, then MODE takes precedence. For example, the defaults are MODE=ORACLE and CLOSE_ON_COMMIT=NO. If the user specifies MODE=ANSI on the command line, then any cursors not using the WITH HOLD clause will be closed on commit.</p>
<p>When CLOSE_ON_COMMIT=NO (when MODE=ORACLE), issuing a COMMIT or ROLLBACK will close only cursors that are declared using the FOR UPDATE clause or are referenced in a CURRENT OF clause. Other cursors that are not affected by the COMMIT or ROLLBACK statement, remain open, if they are open already. However, when CLOSE_ON_COMMIT=YES (when MODE=ANSI), issuing a COMMIT or ROLLBACK closes all cursors.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_06sql.htm#i13177">"Scrollable Cursors"</a></p>
</li>
<li>
<p><a href="#i9359">"Macro and Micro Options"</a> for a further discussion of the precedence of this option.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1432"></a>
<h3 class="sect2">CMAX</h3>
<p class="subhead1"><a id="sthref1433"></a><a id="sthref1434"></a><a id="sthref1435"></a>Purpose</p>
<p>Specifies the maximum number of physical connections that can be opened for the database.</p>
<p class="subhead1"><a id="sthref1436"></a>Syntax</p>
<p>CINCR = Range is 1 to 65535</p>
<p class="subhead1"><a id="sthref1437"></a>Default</p>
<p>100</p>
<p class="subhead1"><a id="sthref1438"></a>Usage Notes</p>
<p>CMAX value must be at least CMIN+CINCR.Once this value is reached, more physical connections cannot be opened.In a typical application, running 100 concurrent database operations is more than sufficient. The user can set an appropriate value.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1439"></a>
<h3 class="sect2">CMIN</h3>
<p class="subhead1"><a id="sthref1440"></a><a id="sthref1441"></a><a id="sthref1442"></a>Purpose</p>
<p>Specifies the minimum number of physical connections that can be opened for the database.</p>
<p class="subhead1"><a id="sthref1443"></a>Syntax</p>
<p>CINCR = Range is 1 to (CMAX-CINCR).</p>
<p class="subhead1"><a id="sthref1444"></a>Default</p>
<p>2</p>
<p class="subhead1"><a id="sthref1445"></a>Usage Notes</p>
<p>CMAX value must be at least CMIN+CINCR.Once this value is reached, more physical connections cannot be opened.In a typical application, running 100 concurrent database operations is more than sufficient. The user can set an appropriate value.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1446"></a>
<h3 class="sect2">CNOWAIT</h3>
<p class="subhead1"><a id="sthref1447"></a><a id="sthref1448"></a><a id="sthref1449"></a>Purpose</p>
<p>This attribute determines if the application must repeatedly try for a physical connection when all other physical connections in the pool are busy, and the total number of physical connections has already reached its maximum.</p>
<p class="subhead1"><a id="sthref1450"></a>Syntax</p>
<p>CNOWAIT = Range is 1 to 65535.</p>
<p class="subhead1"><a id="sthref1451"></a>Default</p>
<p>0 which means not set.</p>
<p class="subhead1"><a id="sthref1452"></a>Usage Notes</p>
<p>If physical connections are not available and no more physical connections can be opened, an error is thrown when this attribute is set. Otherwise, the call waits until it acquires another connection. By default, CNOWAIT is not to be set so a thread will wait until it can acquire a free connection, instead of returning an error.</p>
</div>
<!-- class="sect2" -->
<a id="i10030"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref1453"></a>CODE</h3>
<p class="subhead1"><a id="sthref1454"></a><a id="sthref1455"></a><a id="sthref1456"></a><a id="sthref1457"></a>Purpose</p>
<p>Specifies the format of C function prototypes generated by the Pro*C/C++ precompiler. (A <span class="italic">function prototype</span> declares a function and the datatypes of its arguments.) The precompiler generates function prototypes for SQL library routines, so that your C compiler can resolve external references. The CODE option lets you control the prototyping.<a id="sthref1458"></a></p>
<p class="subhead1"><a id="sthref1459"></a>Syntax</p>
<p>CODE={ANSI_C | KR_C | CPP}</p>
<p class="subhead1"><a id="sthref1460"></a>Default</p>
<p>KR_C</p>
<p class="subhead1"><a id="sthref1461"></a>Usage Notes</p>
<p>Can be entered on the command line, but not inline.</p>
<p>ANSI C standard X3.159-1989 provides for function prototyping. When CODE=ANSI_C, Pro*C/C++ generates full function prototypes, which conform to the ANSI C standard. An example follows:</p>
<pre>
extern void sqlora(long *, void *); 
</pre>
<p>The precompiler can also generate other ANSI-approved constructs such as the <span class="bold">const</span> type qualifier.</p>
<p>When CODE=KR_C (the default), the precompiler comments out the argument lists of generated function prototypes, as shown here:</p>
<pre>
extern void sqlora(/*_ long *, void * _*/); 
</pre>
<p>Specify CODE=KR_C if your C compiler is not compliant with the X3.159 standard.</p>
<p>When CODE=CPP, the precompiler generates C++ compatible code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_12cpl.htm#i3860">"Code Generation"</a> for all of the consequences of using this option value.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1462"></a>
<h3 class="sect2">COMMON_PARSER</h3>
<p class="subhead1"><a id="sthref1463"></a><a id="sthref1464"></a><a id="sthref1465"></a><a id="sthref1466"></a>Purpose</p>
<p>Specifies that the SQL99 syntax for SELECT, INSERT, DELETE, UPDATE and body of the cursor in a DECLARE CURSOR statement will be supported.</p>
<p class="subhead1"><a id="sthref1467"></a>Syntax</p>
<p>COMMON_PARSER={YES | NO}</p>
<p class="subhead1"><a id="sthref1468"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1469"></a>Usage Notes</p>
<p>Can be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1470"></a>
<h3 class="sect2"><a id="sthref1471"></a>COMP_CHARSET</h3>
<p class="subhead1"><a id="sthref1472"></a><a id="sthref1473"></a><a id="sthref1474"></a><a id="sthref1475"></a>Purpose</p>
<p>Indicates to the Pro*C/C++ Precompiler whether multibyte character sets are (or are not) supported by the compiler to be used. It is intended for use by developers working in a multibyte client-side environment (for example, when NLS_LANG is set to a multibyte character set).</p>
<p class="subhead1"><a id="sthref1476"></a>Syntax</p>
<p>COMP_CHARSET={MULTI_BYTE | SINGLE_BYTE}</p>
<p class="subhead1"><a id="sthref1477"></a>Default</p>
<p>MULTI_BYTE</p>
<p class="subhead1"><a id="sthref1478"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>With COMP_CHARSET=MULTI_BYTE (default), Pro*C/C++ generates C code that is to be compiled by a compiler that supports multibyte character sets.</p>
<p>With COMP_CHARSET=SINGLE_BYTE, Pro*C/C++ generates C code for single-byte compilers that addresses a complication that <span class="italic">may</span> arise from the ASCII equivalent of a backslash (\) character in the second byte of a double-byte character in a multibyte string. In this case, the backslash (\) character is "escaped" with another backslash character preceding it.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The need for this feature is common when developing in a Shift-JIS environment with older C compilers.</div>
<p>This option has no effect when NLS_LANG is set to a single-byte character set.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1479"></a>
<h3 class="sect2"><a id="sthref1480"></a>CONFIG</h3>
<p class="subhead1"><a id="sthref1481"></a><a id="sthref1482"></a><a id="sthref1483"></a>Purpose</p>
<p>Specifies the name of a user configuration file.</p>
<p class="subhead1"><a id="sthref1484"></a>Syntax</p>
<p>CONFIG=<span class="italic">filename</span></p>
<p class="subhead1"><a id="sthref1485"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1486"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>This option is the only way you can inform Pro*C/C++ of the name and location of user configuration files.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1487"></a>
<h3 class="sect2">CPOOL</h3>
<p class="subhead1"><a id="sthref1488"></a><a id="sthref1489"></a><a id="sthref1490"></a>Purpose</p>
<p>Based on this option, the precompiler generates the appropriate code that directs SQLLIB to enable or disable the connection pool feature.</p>
<p class="subhead1"><a id="sthref1491"></a>Syntax</p>
<p>CPOOL = {YES|NO}</p>
<p class="subhead1"><a id="sthref1492"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1493"></a>Usage Notes</p>
<p>If this option is set to NO, other connection pooling options will be ignored by the precompiler.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1494"></a>
<h3 class="sect2"><a id="sthref1495"></a>CPP_SUFFIX</h3>
<p class="subhead1"><a id="sthref1496"></a><a id="sthref1497"></a><a id="sthref1498"></a><a id="sthref1499"></a>Purpose</p>
<p>The CPP_SUFFIX option provides the ability to specify the filename extension that the precompiler appends to the C++ output file generated when the CODE=CPP option is specified.</p>
<p class="subhead1"><a id="sthref1500"></a>Syntax</p>
<p>CPP_SUFFIX=<span class="italic">filename_extension</span></p>
<p class="subhead1"><a id="sthref1501"></a>Default</p>
<p>System-specific.</p>
<p class="subhead1"><a id="sthref1502"></a>Usage Notes</p>
<p>Most C compilers expect a default extension of ".c" for their input files. Different C++ compilers, however, can expect different filename extensions. The CPP_SUFFIX option provides the ability to specify the filename extension that the precompiler generates. The value of this option is a string, without the quotes or the period. For example, CPP_SUFFIX=cc, or CPP_SUFFIX=C.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1503"></a>
<h3 class="sect2">CTIMEOUT</h3>
<p class="subhead1"><a id="sthref1504"></a><a id="sthref1505"></a><a id="sthref1506"></a>Purpose</p>
<p>Physical connections that are idle for more than the specified time (in seconds) are terminated to maintain an optimum number of open physical connections</p>
<p class="subhead1"><a id="sthref1507"></a>Syntax</p>
<p>CTIMEOUT = Range is 1 to 65535.</p>
<p class="subhead1"><a id="sthref1508"></a>Default</p>
<p>0 which means not set.</p>
<p class="subhead1"><a id="sthref1509"></a>Usage Notes</p>
<p>Physical connections will not be closed until the connection pool is terminated.Creating a new physical connection will cost a round trip to the server.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1510"></a>
<h3 class="sect2">DB2_ARRAY</h3>
<p class="subhead1"><a id="sthref1511"></a><a id="sthref1512"></a><a id="sthref1513"></a>Purpose</p>
<p>Based on this option, the precompiler activates the additional array insert/select syntax.</p>
<p class="subhead1"><a id="sthref1514"></a>Syntax</p>
<p>DB2_ARRAY={YES |NO} <a id="sthref1515"></a><span class="bold"><a id="sthref1516"></a></span></p>
<p class="subhead1"><a id="sthref1517"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1518"></a>Usage Notes</p>
<p>If this option is set to NO, the Oracle precompiler syntax is supported, otherwise the DB2 insert/select array syntax is supported.</p>
</div>
<!-- class="sect2" -->
<a id="i4752"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref1519"></a>DBMS</h3>
<p class="subhead1"><a id="sthref1520"></a><a id="sthref1521"></a><a id="sthref1522"></a>Purpose</p>
<p>Specifies whether Oracle follows the semantic and syntactic rules of Oracle9<span class="italic">i</span>, Oracle8<span class="italic">i</span>, Oracle8, Oracle7, or the native version of Oracle (that is, the version to which the application is connected).</p>
<p class="subhead1"><a id="sthref1523"></a>Syntax</p>
<p>DBMS={NATIVE | V7 | V8} <a id="sthref1524"></a><span class="bold"><a id="sthref1525"></a></span></p>
<p class="subhead1"><a id="sthref1526"></a>Default</p>
<p>NATIVE</p>
<p class="subhead1"><a id="sthref1527"></a>Usage Notes</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
<p>The DBMS option lets you control the version-specific behavior of Oracle. When DBMS=NATIVE (the default), Oracle follows the semantic and syntactic rules of the database version to which the application is connected.</p>
<p>When DBMS=V8, or DBMS=V7, Oracle follows the respective rules for Oracle9<span class="italic">i</span> (which remain the same as for Oracle7, Oracle8, and Oracle8<span class="italic">i</span>).</p>
<p>V6_CHAR is not supported in Oracle and its functionality is provided by the precompiler option CHAR_MAP.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i5282">"CHAR_MAP"</a></div>
<div class="tblformalwide">
<p class="titleintable"><a id="sthref1528"></a><a id="sthref1529"></a>Table 10-3 DBMS and MODE Interaction<a id="sthref1530"></a><a id="sthref1531"></a></p>
<table class="cellalignment833" title=" DBMS and MODE Interaction" summary="DBMS and Mode Interaction" dir="ltr">
<thead>
<tr class="cellalignment824">
<th class="cellalignment831" id="r1c1-t19">Situation</th>
<th class="cellalignment831" id="r1c2-t19">DBMS=V7 | V8MODE=ANSI</th>
<th class="cellalignment831" id="r1c3-t19">DBMS=V7 | V8MODE=ORACLE</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment824">
<td class="cellalignment832" id="r2c1-t19" headers="r1c1-t19">
<p>"no data found" warning code</p>
</td>
<td class="cellalignment832" headers="r2c1-t19 r1c2-t19">
<p>+100</p>
</td>
<td class="cellalignment832" headers="r2c1-t19 r1c3-t19">
<p>+1403</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r3c1-t19" headers="r1c1-t19">
<p>fetch NULLs without using indicator variables</p>
</td>
<td class="cellalignment832" headers="r3c1-t19 r1c2-t19">
<p>error -1405</p>
</td>
<td class="cellalignment832" headers="r3c1-t19 r1c3-t19">
<p>error -1405</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r4c1-t19" headers="r1c1-t19">
<p>fetch truncated values without using indicator variables</p>
</td>
<td class="cellalignment832" headers="r4c1-t19 r1c2-t19">
<p>no error but sqlwarn[1] is set</p>
</td>
<td class="cellalignment832" headers="r4c1-t19 r1c3-t19">
<p>no error but sqlwarn[1]) is set</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r5c1-t19" headers="r1c1-t19">
<p>cursors closed by COMMIT or ROLLBACK</p>
</td>
<td class="cellalignment832" headers="r5c1-t19 r1c2-t19">
<p>all explicit</p>
</td>
<td class="cellalignment832" headers="r5c1-t19 r1c3-t19">
<p>CURRENT OF only</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r6c1-t19" headers="r1c1-t19">
<p>open an already OPENed cursor</p>
</td>
<td class="cellalignment832" headers="r6c1-t19 r1c2-t19">
<p>error -2117</p>
</td>
<td class="cellalignment832" headers="r6c1-t19 r1c3-t19">
<p>no error</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r7c1-t19" headers="r1c1-t19">
<p>close an already CLOSEd cursor</p>
</td>
<td class="cellalignment832" headers="r7c1-t19 r1c2-t19">
<p>error -2114</p>
</td>
<td class="cellalignment832" headers="r7c1-t19 r1c3-t19">
<p>no error</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r8c1-t19" headers="r1c1-t19">
<p>SQL group function ignores NULLs</p>
</td>
<td class="cellalignment832" headers="r8c1-t19 r1c2-t19">
<p>no warning</p>
</td>
<td class="cellalignment832" headers="r8c1-t19 r1c3-t19">
<p>no warning</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r9c1-t19" headers="r1c1-t19">
<p>when SQL group function in multirow query is called</p>
</td>
<td class="cellalignment832" headers="r9c1-t19 r1c2-t19">
<p>FETCH time</p>
</td>
<td class="cellalignment832" headers="r9c1-t19 r1c3-t19">
<p>FETCH time</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r10c1-t19" headers="r1c1-t19">
<p>declare SQLCA structure</p>
</td>
<td class="cellalignment832" headers="r10c1-t19 r1c2-t19">
<p>optional</p>
</td>
<td class="cellalignment832" headers="r10c1-t19 r1c3-t19">
<p>required</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r11c1-t19" headers="r1c1-t19">
<p>declare SQLCODE or SQLSTATE status variable</p>
</td>
<td class="cellalignment832" headers="r11c1-t19 r1c2-t19">
<p>required</p>
</td>
<td class="cellalignment832" headers="r11c1-t19 r1c3-t19">
<p>optional, but Oracle ignores</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r12c1-t19" headers="r1c1-t19">
<p>integrity constraints</p>
</td>
<td class="cellalignment832" headers="r12c1-t19 r1c2-t19">
<p>enabled</p>
</td>
<td class="cellalignment832" headers="r12c1-t19 r1c3-t19">
<p>enabled</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r13c1-t19" headers="r1c1-t19">
<p>PCTINCREASE for rollback segments</p>
</td>
<td class="cellalignment832" headers="r13c1-t19 r1c2-t19">
<p>not allowed</p>
</td>
<td class="cellalignment832" headers="r13c1-t19 r1c3-t19">
<p>not allowed</p>
</td>
</tr>
<tr class="cellalignment824">
<td class="cellalignment832" id="r14c1-t19" headers="r1c1-t19">
<p>MAXEXTENTS storage parameters</p>
</td>
<td class="cellalignment832" headers="r14c1-t19 r1c2-t19">
<p>not allowed</p>
</td>
<td class="cellalignment832" headers="r14c1-t19 r1c3-t19">
<p>not allowed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1532"></a>
<h3 class="sect2">DEF_SQLCODE</h3>
<p class="subhead1"><a id="sthref1533"></a><a id="sthref1534"></a><a id="sthref1535"></a>Purpose</p>
<p>Controls whether the Pro*C/C++ precompiler generates <span class="bold">#define</span>'s for SQLCODE.</p>
<p class="subhead1"><a id="sthref1536"></a>Syntax</p>
<p>DEF_SQLCODE={NO | YES}</p>
<p class="subhead1"><a id="sthref1537"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1538"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file.</p>
<p>When DEF_SQLCODE=YES, the precompiler defines SQLCODE in the generated source code as follows:</p>
<pre>
#define SQLCODE sqlca.sqlcode
</pre>
<p>You can then use SQLCODE to check the results of executable SQL statement. The DEF_SQLCODE option is supplied for compliance with standards that require the use of SQLCODE.</p>
<p>In addition, you must also include the SQLCA using one of the following entries in your source code:</p>
<pre>
#include &lt;sqlca.h&gt;
</pre>
<p>or</p>
<pre>
EXEC SQL INCLUDE SQLCA;
</pre>
<p>If the SQLCA is not included, using this option causes a precompile time error.</p>
</div>
<!-- class="sect2" -->
<a id="i10027"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref1539"></a>DEFINE</h3>
<p class="subhead1"><a id="sthref1540"></a><a id="sthref1541"></a>Purpose</p>
<p>Defines a name that can be used in <span class="bold">#ifdef</span> and <span class="bold">#ifndef</span> Pro*C/C++ precompiler directives. The defined name can also be used by the EXEC ORACLE IFDEF and EXEC ORACLE IFNDEF statements.</p>
<p class="subhead1"><a id="sthref1542"></a>Syntax</p>
<p>DEFINE=<span class="italic">name</span></p>
<p class="subhead1"><a id="sthref1543"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1544"></a>Usage Notes</p>
<p>Can be entered on the command line or inline. You can only use DEFINE to define a name&mdash;you cannot define macros with it. For example, the following use of define is not valid:</p>
<pre>
proc my_prog DEFINE=LEN=20 
</pre>
<p>Using DEFINE in the correct way, you could do</p>
<pre>
proc my_prog DEFINE=XYZZY 
</pre>
<p>And then in <span class="italic">my_prog.pc</span>, code</p>
<pre>
#ifdef XYZZY 
... 
#else 
... 
#endif 
</pre>
<p>Or, you could just as well code</p>
<pre>
EXEC ORACLE IFDEF XYZZY; 
... 
EXEC ORACLE ELSE; 
... 
EXEC ORACLE ENDIF; 
</pre>
<p>The following example is <span class="italic">invalid</span>:</p>
<pre>
#define XYZZY
...
EXEC ORACLE IFDEF XYZZY
...
EXEC ORACLE ENDIF;
</pre>
<p>EXEC ORACLE conditional statements are <span class="italic">valid</span> only if the macro is defined using EXEC ORACLE DEFINE or the DEFINE option.</p>
<p>If you define a name using DEFINE=, and then conditionally include (or exclude) a code section using the Pro*C/C++ precompiler <span class="bold">#ifdef</span> (or <span class="bold">#ifndef</span>) directives, you must also make sure that the name is defined when you run the C compiler. For example, for UNIX <code>cc</code>, you must use the -D option to define the name.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1545"></a>
<h3 class="sect2">DURATION</h3>
<p class="subhead1"><a id="sthref1546"></a>Purpose</p>
<p>Sets the pin duration used by subsequent EXEC SQL OBJECT CREATE and EXEC SQL OBJECT DEREF statements. Objects in the cache are implicitly unpinned at the end of the duration.</p>
<p class="subhead1"><a id="sthref1547"></a>Syntax</p>
<p>DURATION={TRANSACTION | SESSION}</p>
<p class="subhead1"><a id="sthref1548"></a>Default</p>
<p>TRANSACTION</p>
<p class="subhead1"><a id="sthref1549"></a>Usage Notes</p>
<p>Can be entered inline by use of the EXEC ORACLE OPTION statement.</p>
<p>TRANSACTION means that objects are implicitly unpinned when the transaction completes.</p>
<p>SESSION means that objects are implicitly unpinned when the connection is terminated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1550"></a>
<h3 class="sect2"><a id="sthref1551"></a><a id="sthref1552"></a>DYNAMIC</h3>
<p class="subhead1"><a id="sthref1553"></a>Purpose</p>
<p>This micro option specifies the descriptor behavior in dynamic SQL Method 4. The setting of MODE determines the setting of DYNAMIC.</p>
<p class="subhead1"><a id="sthref1554"></a>Syntax</p>
<p>DYNAMIC={ORACLE | ANSI}</p>
<p class="subhead1"><a id="sthref1555"></a>Default</p>
<p>ORACLE</p>
<p class="subhead1"><a id="sthref1556"></a>Usage Notes</p>
<p>Cannot be entered inline by use of the EXEC ORACLE OPTION statement.</p>
<p>See the DYNAMIC option settings in <a href="pc_14ady.htm#g1022849">Table 14-2</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1557"></a>
<h3 class="sect2"><a id="sthref1558"></a>ERRORS</h3>
<p class="subhead1"><a id="sthref1559"></a><a id="sthref1560"></a>Purpose</p>
<p>Specifies whether error messages are sent to the terminal as well as the listing file (YES), or just to the listing file (NO).</p>
<p class="subhead1"><a id="sthref1561"></a>Syntax</p>
<p>ERRORS={YES | NO}</p>
<p class="subhead1"><a id="sthref1562"></a>Default</p>
<p>YES</p>
<p class="subhead1"><a id="sthref1563"></a>Usage Notes</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1564"></a>
<h3 class="sect2"><a id="sthref1565"></a>ERRTYPE</h3>
<p class="subhead1"><a id="sthref1566"></a><a id="sthref1567"></a>Purpose</p>
<p>Specifies an output file in which errors generated in processing type files are written. If omitted, errors are output to the screen. See also <a href="#i5331">"INTYPE"</a>.</p>
<p class="subhead1"><a id="sthref1568"></a>Syntax</p>
<p>ERRTYPE=<span class="italic">filename</span></p>
<p class="subhead1"><a id="sthref1569"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1570"></a>Usage Notes</p>
<p>Only one error file will be produced. If multiple values are entered, the last one is used by the precompiler.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1571"></a>
<h3 class="sect2">EVENTS</h3>
<p class="subhead1"><a id="sthref1572"></a><a id="sthref1573"></a><a id="sthref1574"></a>Purpose</p>
<p>Specifies that the application is interested in registering for and receiving notifications.</p>
<p class="subhead1"><a id="sthref1575"></a>Syntax</p>
<p>EVENTS={YES | NO}</p>
<p class="subhead1"><a id="sthref1576"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1577"></a>Usage Notes</p>
<p>Can only be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1578"></a>
<h3 class="sect2">FIPS</h3>
<p class="subhead1"><a id="sthref1579"></a><a id="sthref1580"></a><a id="sthref1581"></a>Purpose</p>
<p>Specifies whether extensions to ANSI SQL are flagged (by the FIPS Flagger). An extension is any SQL element that violates ANSI format or syntax rules, except privilege enforcement rules.</p>
<p class="subhead1"><a id="sthref1582"></a>Syntax</p>
<p>FIPS={SQL89 | SQL2 | YES | NO}</p>
<p class="subhead1"><a id="sthref1583"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1584"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>When FIPS=YES, the FIPS Flagger is enabled, and warning (not error) messages are issued if you use an Oracle extension to ANSI SQL, or use an ANSI SQL feature in a nonconforming manner. Extensions to ANSI SQL that are flagged at precompile time include the following:</p>
<ul>
<li>
<p>Array interface including the FOR clause</p>
</li>
<li>
<p>SQLCA, ORACA, and SQLDA data structures</p>
</li>
<li>
<p>Dynamic SQL including the DESCRIBE statement</p>
</li>
<li>
<p>Embedded PL/SQL blocks</p>
</li>
<li>
<p>Automatic datatype conversion</p>
</li>
<li>
<p>DATE, NUMBER, RAW, LONGRAW, VARRAW, ROWID, VARCHAR2, and VARCHAR datatypes</p>
</li>
<li>
<p>Pointer host variables</p>
</li>
<li>
<p>Oracle OPTION statement for specifying runtime options</p>
</li>
<li>
<p>TOOLS statements in user exits</p>
</li>
<li>
<p>CONNECT statement</p>
</li>
<li>
<p>TYPE and VAR datatype equivalence statements</p>
</li>
<li>
<p>AT <span class="italic">db_name</span> clause</p>
</li>
<li>
<p>DECLARE...DATABASE, ...STATEMENT, and ...TABLE statements</p>
</li>
<li>
<p>SQLWARNING condition in WHENEVER statement</p>
</li>
<li>
<p>DO <span class="italic">function_name()</span> and "do break<span class="bold">"</span> and "do continue"actions in WHENEVER statement</p>
</li>
<li>
<p>COMMENT and FORCE TRANSACTION clauses in COMMIT statement</p>
</li>
<li>
<p>FORCE TRANSACTION and TO SAVEPOINT clauses in ROLLBACK statement</p>
</li>
<li>
<p>RELEASE parameter in COMMIT and ROLLBACK statements</p>
</li>
<li>
<p>Optional colon-prefixing of WHENEVER...GOTO labels, and of host variables in the INTO clause</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1585"></a>
<h3 class="sect2"><a id="sthref1586"></a><a id="sthref1587"></a>HEADER</h3>
<p class="subhead1"><a id="sthref1588"></a><a id="sthref1589"></a><a id="sthref1590"></a>Purpose</p>
<p>Permits precompiled header files. Specifies the file extension for precompiled header files.</p>
<p class="subhead1"><a id="sthref1591"></a>Syntax</p>
<p>HEADER=<span class="italic">extension</span></p>
<p class="subhead1"><a id="sthref1592"></a>Default</p>
<p>NONE</p>
<p class="subhead1"><a id="sthref1593"></a>Usage Notes</p>
<p>When precompiling a header file, this option is required and is used to specify the file extension for the output file that is created by precompiling that header file.</p>
<p>When precompiling an ordinary Pro*C/C++ program this option is optional. When given, it enables the use of the precompiled header mechanism during the precompilation of that Pro*C/C++ program.</p>
<p>In both cases, this option also specifies the file extension to use when processing a #include directive. If an #include file exists with the specified extension, Pro*C/C++ assumes the file is a precompiled header file previously generated by Pro*C/C++. Pro*C/C++ will then instantiate the data from that file rather than process the #include directive and precompile the included header file.</p>
<p>This option is only allowed on the command line or in a configuration file. It is not allowed inline. When using this option, specify the file extension only. Do not include any file separators. For example, do not include a period '.' in the extension.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_05adv.htm#i433802">"Precompiled Header Files"</a></div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1594"></a>
<h3 class="sect2">HOLD_CURSOR</h3>
<p class="subhead1"><a id="sthref1595"></a><a id="sthref1596"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.</p>
<p class="subhead1"><a id="sthref1597"></a>Syntax</p>
<p>HOLD_CURSOR={YES | NO}</p>
<p class="subhead1"><a id="sthref1598"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1599"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>You can use HOLD_CURSOR to improve the performance of your program. See also <a href="pc_actun.htm#CHEBGDGB">Appendix C, " Performance Tuning"</a></p>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. HOLD_CURSOR controls what happens to the link between the cursor and cursor cache.</p>
<p>When HOLD_CURSOR=NO, after Oracle executes the SQL statement and the cursor is closed, the precompiler marks the link as reusable. The link is reused as soon as the cursor cache entry to which it points is needed for another SQL statement. This frees memory allocated to the private SQL area and releases parse locks.</p>
<p>When HOLD_CURSOR=YES, the link is maintained; the precompiler does not reuse it. This is useful for SQL statements that are often executed because it speeds up subsequent executions and there is no need to re-parse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set HOLD_CURSOR before executing the SQL statement. For inline use with explicit cursors, set HOLD_CURSOR before CLOSEing the cursor.</p>
<p>RELEASE_CURSOR=YES overrides HOLD_CURSOR=YES and HOLD_CURSOR=NO overrides RELEASE_CURSOR=NO. For information showing how these two options interact, see <a href="pc_actun.htm#CHEDAEHH">Table C-1</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1600"></a>
<h3 class="sect2">IMPLICIT_SVPT</h3>
<p class="subhead1"><a id="sthref1601"></a><a id="sthref1602"></a><a id="sthref1603"></a>Purpose</p>
<p>Controls whether an implicit savepoint is taken prior to the start of a new batched insert.</p>
<p class="subhead1"><a id="sthref1604"></a>Syntax</p>
<p>implicit_svpt={YES|NO}</p>
<p class="subhead1"><a id="sthref1605"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1606"></a>Usage Notes</p>
<p>If implict_svpt=yes, a savepoint is taken prior to the start of a new batch of rows. If an error occurs on the insert, an implicit "rollback to savepoint" is executed. This option exists for DB2 compatibility, the obvious downside being the extra round-trip.</p>
<p>If implict_svpt=no, there is no implicit savepoint taken. If an error occurs on the buffered insert, then it is reported back to the application, but no rollback is executed.</p>
</div>
<!-- class="sect2" -->
<a id="i10028"></a>
<div class="sect2">
<h3 class="sect2">INAME</h3>
<p class="subhead1"><a id="sthref1607"></a><a id="sthref1608"></a><a id="sthref1609"></a>Purpose</p>
<p>Specifies the name of the input file.</p>
<p class="subhead1"><a id="sthref1610"></a>Syntax</p>
<p>INAME=<span class="italic">path_and_filename</span></p>
<p class="subhead1"><a id="sthref1611"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1612"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>All input file names must be unique at precompilation time.</p>
<p>You can omit the filename extension if it is <code>.pc</code>. If the input filename is the first option on the command line, you can omit the INAME= part of the option. For example:</p>
<pre>
proc sample1 MODE=ansi 
</pre>
<p>to precompile the file <code>sample1.pc</code>, using ANSI mode. This command is the same as</p>
<pre>
proc INAME=sample1 MODE=ansi
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>sqlctx</code> hash value is generated based on the <code>INAME</code> parameter passed to the Pro*C/C++ command. This can cause issues in the applications where files having the same name are stored in different directories containing different functions and the build scripts are sent to the physical directory to precompile the program. As a result, there is no need to place the makefiles at a higher level and precompile files using their pathnames.</div>
</div>
<!-- class="sect2" -->
<a id="i4754"></a>
<div class="sect2">
<h3 class="sect2">INCLUDE</h3>
<p class="subhead1"><a id="sthref1613"></a><a id="sthref1614"></a><a id="sthref1615"></a>Purpose</p>
<p>Specifies a directory path for files included using the <span class="bold">#include</span> or EXEC SQL INCLUDE directives.</p>
<p class="subhead1"><a id="sthref1616"></a>Syntax</p>
<p>INCLUDE=<span class="italic">pathname</span> or INCLUDE=(<span class="italic">path_1</span>,<span class="italic">path_2</span>,...,<span class="italic">path_n</span>)</p>
<p class="subhead1"><a id="sthref1617"></a>Default</p>
<p>Current directory and paths built into Pro*C/C++.</p>
<p class="subhead1"><a id="sthref1618"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>You use INCLUDE to specify a directory path for included files. The precompiler searches directories in the following order:</p>
<ol>
<li>
<p>the current directory</p>
</li>
<li>
<p>the system directory specified in a SYS_INCLUDE precompiler option</p>
</li>
<li>
<p>the directories specified by the INCLUDE option, in the order they are entered</p>
</li>
<li>
<p>the built-in directories for standard header files</p>
</li>
</ol>
<p>You normally do not need to specify a directory path for Oracle-specific header files such as <code>sqlca.h</code> and <code>sqlda.h</code>. <a id="sthref1619"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify an Oracle-specific filename without an extension for inclusion, Pro*C/C++ assumes an extension of <code>.h</code>. So, included files should have an extension, even if it is not <code>.h</code>.</div>
<p>For all other header files, the precompiler does <span class="italic">not</span> assume a <code>.h</code> extension.</p>
<p>You must still use INCLUDE to specify directory paths for non-standard files, unless they are stored in the current directory. You can specify more than one path on the command line, as follows:</p>
<pre>
... INCLUDE=<span class="italic">path_1</span> INCLUDE=<span class="italic">path_2</span> ...
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
&thinsp;If the file you want to include resides in another directory, make sure that there is no file with the same name in the current directory.</div>
<p>The syntax for specifying a directory path using the INCLUDE option is system specific. Follow the conventions used for your operating system</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For the INCLUDE option, the precedence of option values gets reversed. Unlike other options in which the values get overwritten, INCLUDE appends all the directory files that are mentioned in:
<ul>
<li>
<p>Precompiler</p>
</li>
<li>
<p>Pro*C/C++ system configuration file</p>
</li>
<li>
<p>Pro*C/C++ user configuration file</p>
</li>
<li>
<p>Command line</p>
</li>
<li>
<p>Inline</p>
</li>
</ul>
<p>However, there is a difference between passing values within or without brackets. If you pass a single value or directory list within brackets, then the existing value of INCLUDE is overwritten. If you pass the list as a simple value without brackets, it will supplement any existing value.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="i5331"></a>
<div class="sect2">
<h3 class="sect2">INTYPE</h3>
<p class="subhead1"><a id="sthref1620"></a><a id="sthref1621"></a><a id="sthref1622"></a>Purpose</p>
<p>Specifies one or more OTT-generated type files (only needed if Object types are used in the application).</p>
<p class="subhead1"><a id="sthref1623"></a>Syntax</p>
<p>INTYPE=(<span class="italic">file_1</span>,<span class="italic">file_2</span>,...,<span class="italic">file_n</span>)</p>
<p class="subhead1"><a id="sthref1624"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1625"></a>Usage Notes</p>
<p>There will be one type file for each Object type in the Pro*C/C++ code.</p>
</div>
<!-- class="sect2" -->
<a id="i10983"></a>
<div class="sect2">
<h3 class="sect2">LINES</h3>
<p class="subhead1"><a id="sthref1626"></a><a id="sthref1627"></a><a id="sthref1628"></a>Purpose</p>
<p>Specifies whether the Pro*C/C++ precompiler adds <span class="bold">#line</span> preprocessor directives to its output file.</p>
<p class="subhead1"><a id="sthref1629"></a>Syntax</p>
<p>LINES={YES | NO}</p>
<p class="subhead1"><a id="sthref1630"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1631"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>The LINES option helps with debugging.</p>
<p>When LINES=YES, the Pro*C/C++ precompiler adds <span class="bold">#line</span> preprocessor directives to its output file.</p>
<p>Normally, your C compiler increments its line count after each input line is processed. The <span class="bold">#line</span> directives force the compiler to reset its input line counter so that lines of precompiler-generated code are not counted. Moreover, when the name of the input file changes, the next <span class="bold">#line</span> directive specifies the new filename.</p>
<p>The C compiler uses the line numbers and filenames to show the location of errors. Thus, error messages issued by the C compiler always refer to your original source files, not the modified (precompiled) source file. This also enables stepping through the original source code using most debuggers.</p>
<p>When LINES=NO (the default), the precompiler adds no <span class="bold">#line</span> directives to its output file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Pro*C/C++ precompiler does not support the <span class="bold">#line</span> directive. This means that you cannot directly code <span class="bold">#line</span> directives in the precompiler source. But you can still use the LINES= option to have the precompiler insert <span class="bold">#line</span> directives for you. See also <a href="pc_05adv.htm#i429549">"Directives Ignored"</a>.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1632"></a>
<h3 class="sect2">LNAME</h3>
<p class="subhead1"><a id="sthref1633"></a><a id="sthref1634"></a><a id="sthref1635"></a>Purpose</p>
<p>Specifies the name of the listing file.</p>
<p class="subhead1"><a id="sthref1636"></a>Syntax</p>
<p>LNAME=<span class="italic">filename</span></p>
<p class="subhead1"><a id="sthref1637"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1638"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>The default filename extension for the listing file is <code>.lis</code>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1639"></a>
<h3 class="sect2">LTYPE</h3>
<p class="subhead1"><a id="sthref1640"></a><a id="sthref1641"></a><a id="sthref1642"></a>Purpose</p>
<p>Specifies the type of listing file generated.</p>
<p class="subhead1"><a id="sthref1643"></a>Syntax</p>
<p>LTYPE={NONE | SHORT | LONG}</p>
<p class="subhead1"><a id="sthref1644"></a>Default</p>
<p>SHORT</p>
<p class="subhead1"><a id="sthref1645"></a>Usage Notes</p>
<p>Can be entered on the command line or in a configuration file.</p>
<p>When a listing file is generated, the LONG format is the default. With LTYPE=LONG specified, all of the source code is listed as it is parsed and messages listed as they are generated. In addition, the Pro*C/C++ options currently in effect are listed.</p>
<p>With LTYPE=SHORT specified, only the generated messages are listed&mdash;no source code&mdash;with line references to the source file to help you locate the code that generated the message condition.</p>
<p>With LTYPE=NONE specified, no list file is produced <span class="italic">unless</span> the LNAME option explicitly specifies a name for a list file. Under the latter condition, the list file <span class="italic">is</span> generated with LTYPE=LONG assumed.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1646"></a>
<h3 class="sect2">MAX_ROW_INSERT</h3>
<p class="subhead1"><a id="sthref1647"></a><a id="sthref1648"></a><a id="sthref1649"></a>Purpose</p>
<p>Controls the number of rows that need to be buffered before executing the INSERT statement.</p>
<p class="subhead1"><a id="sthref1650"></a>Syntax</p>
<p>max_row_insert={0...1000}</p>
<p class="subhead1"><a id="sthref1651"></a>Default</p>
<p>0</p>
<p class="subhead1"><a id="sthref1652"></a>Usage Notes</p>
<p>Any number greater than zero enables buffered insert feature and buffers that many rows before executing the INSERT statement.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1653"></a>
<h3 class="sect2">MAXLITERAL</h3>
<p class="subhead1"><a id="sthref1654"></a><a id="sthref1655"></a><a id="sthref1656"></a>Purpose</p>
<p>Specifies the maximum length of string literals generated by the precompiler, so that compiler limits are not exceeded.</p>
<p class="subhead1"><a id="sthref1657"></a>Syntax</p>
<p>MAXLITERAL=<span class="italic">integer</span>, range is 10 to 1024</p>
<p class="subhead1"><a id="sthref1658"></a>Default</p>
<p>1024</p>
<p class="subhead1"><a id="sthref1659"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The maximum value of MAXLITERAL is compiler dependent. For example, some C compilers cannot handle string literals longer than 512 characters, so you would specify MAXLITERAL=512.</p>
<p>Strings that exceed the length specified by MAXLITERAL are divided during precompilation, then recombined (concatenated) at run time.</p>
<p>You can enter MAXLITERAL inline but your program can set its value only once, and the EXEC ORACLE statement must precede the first EXEC SQL statement. Otherwise, Pro*C/C++ issues a warning message, ignores the extra or misplaced EXEC ORACLE statement, and continues processing.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1660"></a>
<h3 class="sect2">MAXOPENCURSORS</h3>
<p class="subhead1"><a id="sthref1661"></a><a id="sthref1662"></a><a id="sthref1663"></a>Purpose</p>
<p>Specifies the number of concurrently open cursors that the precompiler tries to keep cached.</p>
<p class="subhead1"><a id="sthref1664"></a>Syntax</p>
<p>MAXOPENCURSORS=<span class="italic">integer</span></p>
<p class="subhead1"><a id="sthref1665"></a>Default</p>
<p>10</p>
<p class="subhead1"><a id="sthref1666"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>You can use MAXOPENCURSORS to improve the performance of your program. When precompiling separately, use MAXOPENCURSORS. MAXOPENCURSORS specifies the <span class="italic">initial</span> size of the SQLLIB cursor cache.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_actun.htm#CHEBGDGB">Appendix C, " Performance Tuning"</a></p>
</li>
<li>
<p><a href="pc_02prc.htm#i4944">"Guidelines for Programming"</a></p>
</li>
</ul>
</div>
<p>When an implicit statement is executed and HOLD_CURSOR=NO, or an explicit cursor is closed, the cursor entry is marked as reusable. If this statement is issued again and the cursor entry has not been used for another statement, it is reused.</p>
<p>If a new cursor is needed and the number of cursors allocated is less than MAXOPENCURSORS, then the next one in the cache is allocated. Once MAXOPENCCURSORS has been exceeded Oracle first tries to reuse a previous entry. If there are no free entries, then an additional cache entry will be allocated. Oracle will continue to do this until the program runs out of memory or the database parameter OPEN_CURSORS is exceeded.</p>
<p>During normal processing, when using HOLD_CURSOR=NO and RELEASE_CURSOR=NO (the default), it is advisable to set MAXOPENCURSORS to no more than 6 less than the database parameter OPEN_CURSORS to allow for the cursors used by the data dictionary to process statements.</p>
<p>As your program's need for concurrently open cursors grows, you might want to respecify MAXOPENCURSORS to match the need. A value of 45 to 50 is not uncommon, but remember that each cursor requires another private SQL area in the user process memory space. The default value of 10 is adequate for most programs.</p>
</div>
<!-- class="sect2" -->
<a id="i8247"></a>
<div class="sect2">
<h3 class="sect2">MODE</h3>
<p class="subhead1"><a id="sthref1667"></a><a id="sthref1668"></a><a id="sthref1669"></a>Purpose</p>
<p>Specifies whether your program observes Oracle practices or complies with the current ANSI/ISO SQL standards.</p>
<p class="subhead1"><a id="sthref1670"></a>Syntax</p>
<p>MODE={ANSI | ISO | ORACLE}</p>
<p class="subhead1"><a id="sthref1671"></a>Default</p>
<p>ORACLE</p>
<p class="subhead1"><a id="sthref1672"></a>Usage Notes</p>
<p>Can be entered only on the command line or in a configuration file.</p>
<p>In the context of this option ISO is equivalent to ANSI.</p>
<p>When MODE=ORACLE (the default), your embedded SQL program observes Oracle practices. For example, a Declare Section is optional, and blanks are stripped.</p>
<p>When MODE=ANSI, your program complies <span class="italic">fully</span> with the ANSI SQL standard, and the following changes go into effect:</p>
<ul>
<li>
<p>Issuing a COMMIT or ROLLBACK closes all explicit cursors.</p>
</li>
<li>
<p>You cannot OPEN an already open cursor or CLOSE an already closed cursor. (When MODE=ORACLE, you can reOPEN an open cursor to avoid re-parsing.)</p>
</li>
<li>
<p>You must declare a either a <span class="bold">long</span> variable named <span class="italic">SQLCODE</span> or a <span class="bold">char</span> SQLSTATE[6] variable (uppercase is required for both variables) that is in the scope of every EXEC SQL statement. The same <span class="italic">SQLCODE</span> or <span class="italic">SQLSTATE</span> variable need not be used in each case; that is, the variable need not be global. <a id="sthref1673"></a><a id="sthref1674"></a></p>
</li>
<li>
<p>Declaring the SQLCA is optional. You need not include the SQLCA.</p>
</li>
<li>
<p>The "no data found" Oracle warning code returned to SQLCODE becomes +100 instead of +1403. The message text does not change.</p>
</li>
<li>
<p>You must have a Declare Section for host variables.<a id="sthref1675"></a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1676"></a>
<h3 class="sect2">NATIVE_TYPES</h3>
<p class="subhead1"><a id="sthref1677"></a><a id="sthref1678"></a><a id="sthref1679"></a>Purpose</p>
<p>Support for native float/double.</p>
<p class="subhead1"><a id="sthref1680"></a>Syntax</p>
<p>NATIVE_TYPES = {YES|NO}</p>
<p class="subhead1"><a id="sthref1681"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1682"></a>Usage Notes</p>
<p>The native float and native double datatypes represent the single-precision and double-precision floating point values. They are represented natively, that is, in the host system's floating point format.</p>
</div>
<!-- class="sect2" -->
<a id="i8234"></a>
<div class="sect2">
<h3 class="sect2">NLS_CHAR</h3>
<p class="subhead1"><a id="sthref1683"></a><a id="sthref1684"></a><a id="sthref1685"></a>Purpose</p>
<p>Specifies which C host character variables are treated by the precompiler as multibyte character variables.</p>
<p class="subhead1"><a id="sthref1686"></a>Syntax</p>
<p>NLS_CHAR=<span class="italic">varname</span> or NLS_CHAR=(<span class="italic">var_1</span>,<span class="italic">var_2</span>,...,<span class="italic">var_n</span>)</p>
<p class="subhead1"><a id="sthref1687"></a>Default</p>
<p>None.</p>
<p class="subhead1"><a id="sthref1688"></a>Usage Notes</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
<p>This option provides the ability to specify at precompile time a list of the names of one or more host variables that the precompiler must treat as multibyte character variables. You can specify only C <span class="italic">char</span> variables or Pro*C/C++ VARCHARs using this option.</p>
<p>If you specify in the option list a variable that is not declared in your program, then the precompiler generates no error.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1689"></a>
<h3 class="sect2">NLS_LOCAL</h3>
<p class="subhead1"><a id="sthref1690"></a><a id="sthref1691"></a><a id="sthref1692"></a>Purpose</p>
<p>Determines whether multibyte character set conversions are performed by the precompiler runtime library, SQLLIB, or by the database server.</p>
<p class="subhead1"><a id="sthref1693"></a>Syntax</p>
<p>NLS_LOCAL={NO | YES}</p>
<p class="subhead1"><a id="sthref1694"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1695"></a>Usage Notes</p>
<p>When set to YES, local multibyte support is provided by Pro*C/C++ and the SQLLIB library. The option NLS_CHAR must be used to indicate which C host variables are multibyte.</p>
<p>When set to NO, Pro*C/C++ will use the database server support for multibyte objects. Set NLS_LOCAL to NO for all new applications.</p>
<p>Environment variable NLS_NCHAR must be set to a valid fixed-width National Character Set. Variable-width National Character Sets are not supported.</p>
<p>Can be entered only on the command line, or in a configuration file.</p>
</div>
<!-- class="sect2" -->
<a id="i5481"></a>
<div class="sect2">
<h3 class="sect2">OBJECTS</h3>
<p class="subhead1"><a id="sthref1696"></a><a id="sthref1697"></a><a id="sthref1698"></a>Purpose</p>
<p>Requests support for object types.</p>
<p class="subhead1"><a id="sthref1699"></a>Syntax</p>
<p>OBJECTS={YES | NO}</p>
<p class="subhead1"><a id="sthref1700"></a>Default</p>
<p>YES</p>
<p class="subhead1"><a id="sthref1701"></a>Usage Notes</p>
<p>Can only be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<a id="i4868"></a>
<div class="sect2">
<h3 class="sect2">ONAME</h3>
<p class="subhead1"><a id="sthref1702"></a><a id="sthref1703"></a><a id="sthref1704"></a>Purpose</p>
<p>Specifies the name of the output file. The output file is the C code file that the precompiler generates.</p>
<p class="subhead1"><a id="sthref1705"></a>Syntax</p>
<p>ONAME=<span class="italic">path_and_filename</span></p>
<p class="subhead1"><a id="sthref1706"></a>Default</p>
<p>INAME with a .c extension.</p>
<p class="subhead1"><a id="sthref1707"></a>Usage Notes</p>
<p>Can be entered only on the command line. Use this option to specify the full path name of the output file, where the path name differs from that of the input (<code>.pc</code>) file. For example, if you issue the command:</p>
<pre>
proc iname=my_test 
</pre>
<p>the default output filename is <code>my_test.c</code>. If you want the output filename to be <code>my_test_1.c</code>, issue the command</p>
<pre>
proc iname=my_test oname=my_test_1.c 
</pre>
<p>You should add the <code>.c</code> extension to files specified using ONAME because one is not added by default.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you not let the output filename default, but rather name it explicitly using ONAME. If you specify an ONAME value without an extension, the name of the generated file will not have one.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1708"></a>
<h3 class="sect2">ORACA</h3>
<p class="subhead1"><a id="sthref1709"></a><a id="sthref1710"></a><a id="sthref1711"></a>Purpose</p>
<p>Specifies whether a program can use the Oracle Communications Area (ORACA).</p>
<p class="subhead1"><a id="sthref1712"></a>Syntax</p>
<p>ORACA={YES | NO}</p>
<p class="subhead1"><a id="sthref1713"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1714"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>When ORACA=YES, you must place either the EXEC SQL INCLUDE ORACA or <span class="bold">#include</span> <code>oraca.h</code> statement in your program.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1715"></a>
<h3 class="sect2">OUTLINE</h3>
<p class="subhead1"><a id="sthref1716"></a><a id="sthref1717"></a><a id="sthref1718"></a>Purpose</p>
<p>Indicates that the outline SQL file needs to be generated for the SQL statements.</p>
<p class="subhead1"><a id="sthref1719"></a>Syntax</p>
<p>outline={yes | no | category_name}</p>
<p class="subhead1"><a id="sthref1720"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref1721"></a>Usage Notes</p>
<p>The outline SQL file should be in the DEFAULT category if the value is <code>yes</code> and the generated outline format is</p>
<pre>
DEFAULT_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>If the category name is mentioned, then the SQL file should be generated in the category mentioned. The generated outline format for this is</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>The outline SQL file is not generated if the value is <code>no</code>.</p>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1722"></a>
<h3 class="sect2">OUTLNPREFIX</h3>
<p class="subhead1"><a id="sthref1723"></a><a id="sthref1724"></a><a id="sthref1725"></a>Purpose</p>
<p>Controls the generation of the outline names.</p>
<p class="subhead1"><a id="sthref1726"></a>Syntax</p>
<p>outlnprefix={none | prefix_name}</p>
<p class="subhead1"><a id="sthref1727"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref1728"></a>Usage Notes</p>
<p>If outlnprefix=prefix_name, then the outline format</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;
</pre>
<p>is replaced with <code>&lt;prefix_name&gt;</code> for the outline names.</p>
<p>If the length of the outline name exceeds 30 bytes, then this option is helpful for the user who can just specify the prefix name.</p>
<p>If outlnprefix=none, then the outline names are generated by the system. The generated format is</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, and/or outline=false, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1729"></a>
<h3 class="sect2">PAGELEN<a id="sthref1730"></a><a id="sthref1731"></a></h3>
<p class="subhead1"><a id="sthref1732"></a>Purpose</p>
<p>Specifies the number of lines for each physical page of the listing file.</p>
<p class="subhead1"><a id="sthref1733"></a>Syntax</p>
<p>PAGELEN=<span class="italic">integer</span></p>
<p class="subhead1"><a id="sthref1734"></a>Default</p>
<p>80</p>
<p class="subhead1"><a id="sthref1735"></a>Usage Notes</p>
<p>Cannot be entered inline. The value range allowed is 30..256..</p>
</div>
<!-- class="sect2" -->
<a id="i10029"></a>
<div class="sect2">
<h3 class="sect2">PARSE</h3>
<p class="subhead1"><a id="sthref1736"></a><a id="sthref1737"></a><a id="sthref1738"></a>Purpose</p>
<p>Specifies the way that the Pro*C/C++ precompiler parses the source file.</p>
<p class="subhead1"><a id="sthref1739"></a>Syntax</p>
<p>PARSE={FULL | PARTIAL | NONE}</p>
<p class="subhead1"><a id="sthref1740"></a>Default</p>
<p>FULL</p>
<p class="subhead1"><a id="sthref1741"></a>Usage Notes</p>
<p>To generate C++ compatible code, the PARSE option must be either NONE or PARTIAL.</p>
<p>If PARSE=NONE or PARSE=PARTIAL, all host variables must be declared inside a Declare Section.</p>
<p>The variable SQLCODE must also be declared inside a declare section, or it cannot be relied on to detect errors. Check the default value of PARSE for your platform.</p>
<p>If PARSE=FULL, the C parser is used, and it does not understand C++ constructs, such as classes, in your code.</p>
<p>With PARSE=FULL or PARSE=PARTIAL Pro*C/C++ fully supports C preprocessor directives, such as <span class="bold">#define</span>, <span class="bold">#ifdef</span>, and so on. However, with PARSE=NONE conditional preprocessing is supported by EXEC ORACLE statements.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Some platforms have the default value of PARSE as other than FULL. See your system-dependent documentation.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="pc_12cpl.htm#i864">"Parsing Code"</a> for more information on the PARSE option.</p>
</li>
<li>
<p><a href="pc_02prc.htm#i5480">"Declare Section"</a></p>
</li>
<li>
<p><a href="pc_02prc.htm#i5283">"Conditional Precompilation"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1742"></a>
<h3 class="sect2">PREFETCH<a id="sthref1743"></a><a id="sthref1744"></a></h3>
<p class="subhead1"><a id="sthref1745"></a>Purpose</p>
<p>Use this option to speed up queries by pre-fetching a number of rows.</p>
<p class="subhead1"><a id="sthref1746"></a>Syntax</p>
<p>PREFETCH=<span class="italic">integer</span></p>
<p class="subhead1"><a id="sthref1747"></a>Default</p>
<p>1</p>
<p class="subhead1"><a id="sthref1748"></a>Usage Notes</p>
<p>Can be used in a configuration file or on the command-line. The value of the integer is used for execution of all queries using explicit cursors, subject to the rules of precedence.</p>
<p>When used in-line it must placed before OPEN statements with explicit cursors. Then the number of rows pre-fetched when that OPEN is done is determined by the last in-line PREFETCH option in effect.</p>
<p>The value range allowed is 0.. 65535.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1749"></a>
<h3 class="sect2">RELEASE_CURSOR</h3>
<p class="subhead1"><a id="sthref1750"></a><a id="sthref1751"></a><a id="sthref1752"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.</p>
<p class="subhead1"><a id="sthref1753"></a>Syntax</p>
<p>RELEASE_CURSOR={YES | NO}</p>
<p class="subhead1"><a id="sthref1754"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1755"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>You can use RELEASE_CURSOR to improve the performance of your program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_actun.htm#CHEBGDGB">Appendix C, " Performance Tuning"</a></div>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. RELEASE_CURSOR controls what happens to the link between the cursor cache and private SQL area.</p>
<p>When RELEASE_CURSOR=YES, after Oracle executes the SQL statement and the cursor is closed, the precompiler immediately removes the link. This frees memory allocated to the private SQL area and releases parse locks. To make sure that associated resources are freed when you CLOSE a cursor, you must specify RELEASE_CURSOR=YES.</p>
<p>When RELEASE_CURSOR=NO, the link is maintained. The precompiler does not reuse the link unless the number of open cursors exceeds the value of MAXOPENCURSORS. This is useful for SQL statements that are often executed because it speeds up subsequent executions. There is no need to re-parse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set RELEASE_CURSOR before executing the SQL statement. For inline use with explicit cursors, set RELEASE_CURSOR before CLOSEing the cursor.</p>
<p>RELEASE_CURSOR=YES overrides HOLD_CURSOR=YES. For a table showing how these two options interact, see <a href="pc_actun.htm#CHEBGDGB">Appendix C, " Performance Tuning"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1756"></a>
<h3 class="sect2">RUNOUTLINE</h3>
<p class="subhead1"><a id="sthref1757"></a><a id="sthref1758"></a><a id="sthref1759"></a>Purpose</p>
<p>Provides the developer with the option of executing "create outline" statements either by using precompiler or by the developer manually at a later time.</p>
<p class="subhead1"><a id="sthref1760"></a>Syntax</p>
<p>runoutline={yes | no}</p>
<p class="subhead1"><a id="sthref1761"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref1762"></a>Usage Notes</p>
<p>If runoutline=yes, then the generated 'create outline' statements are executed by the precompiler/translator at the end of a successful precompilation.</p>
<p>The outline option should be set to true or category_name when runoutline is used. Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1763"></a>
<h3 class="sect2">SELECT_ERROR</h3>
<p class="subhead1"><a id="sthref1764"></a><a id="sthref1765"></a><a id="sthref1766"></a>Purpose</p>
<p>Specifies whether your program generates an error when a SELECT statement returns more than one row, or more rows than a host array can accommodate.</p>
<p class="subhead1"><a id="sthref1767"></a>Syntax</p>
<p>SELECT_ERROR={YES | NO}</p>
<p class="subhead1"><a id="sthref1768"></a>Default</p>
<p>YES</p>
<p class="subhead1"><a id="sthref1769"></a>Usage Notes</p>
<p>Can be entered inline or on the command line.</p>
<p>When SELECT_ERROR=YES, an error is generated when a single-row SELECT returns too many rows, or when an array SELECT returns more rows than the host array can accommodate. The result of the SELECT is indeterminate.</p>
<p>When SELECT_ERROR=NO, no error is generated when a single-row SELECT returns too many rows, or when an array SELECT returns more rows than the host array can accommodate.</p>
<p>Whether you specify YES or NO, a random row is selected from the table. The only way to ensure a specific ordering of rows is to use the ORDER BY clause in your SELECT statement. When SELECT_ERROR=NO and you use ORDER BY, Oracle returns the first row, or the first <span class="italic">n</span> rows when you are SELECTing into an array. When SELECT_ERROR=YES, whether or not you use ORDER BY, an error is generated when too many rows are returned.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1770"></a>
<h3 class="sect2">STMT_CACHE</h3>
<p class="subhead1"><a id="sthref1771"></a><a id="sthref1772"></a><a id="sthref1773"></a>Purpose</p>
<p>Denotes the Statement cache size for the dynamic SQL statements.</p>
<p class="subhead1"><a id="sthref1774"></a>Syntax</p>
<p>STMT_CACHE = Range is 0 to 65535</p>
<p class="subhead1"><a id="sthref1775"></a>Default</p>
<p>0</p>
<p class="subhead1"><a id="sthref1776"></a>Usage Notes</p>
<p>The stmt_cache option can be set to hold the anticipated number of distinct dynamic SQL statements in the application.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1777"></a>
<h3 class="sect2">SYS_INCLUDE</h3>
<p class="subhead1"><a id="sthref1778"></a><a id="sthref1779"></a><a id="sthref1780"></a>Purpose</p>
<p>Specifies the location of system header files.</p>
<p class="subhead1"><a id="sthref1781"></a>Syntax</p>
<p>SYS_INCLUDE=<span class="italic">pathname</span> | <span class="italic">(path1</span>, ..., <span class="italic">pathn</span><code>)</code></p>
<p class="subhead1"><a id="sthref1782"></a>Default</p>
<p>System-specific.</p>
<p class="subhead1"><a id="sthref1783"></a>Usage Notes</p>
<p>Pro*C/C++ searches for standard system header files, such as <code>stdio.h</code>, in standard locations that are platform specific. For example, on almost all UNIX systems, the file <code>stdio.h</code> has the full path name <code>/usr/include/stdio.h.</code></p>
<p>But C++ compilers can have system header files, such as <code>stdio.h</code>, that are not in the standard system locations. You can use the SYS_INCLUDE command line option to specify a list of directory paths that Pro*C/C++ searches to look for system header files. For example:</p>
<pre>
SYS_INCLUDE=(/usr/lang/SC2.0.1/include,/usr/lang/SC2.1.1/include)
</pre>
<p>The search path that you specify using SYS_INCLUDE overrides the default header location.</p>
<p>If PARSE=NONE, the value specified in SYS_INCLUDE is irrelevant for the precompilation, since there is no need for Pro*C/C++ to include system header files in the precompilation. (You must, of course, still include Oracle-specific headers, such as <code>sqlca.h</code>. and system header files, with #include directives for pre-processing by the compiler.)</p>
<p>The precompiler searches directories in the following order:</p>
<ol>
<li>
<p>The current directory</p>
</li>
<li>
<p>The system directory specified in the SYS_INCLUDE precompiler option</p>
</li>
<li>
<p>The directories specified by the INCLUDE option, in the order entered</p>
</li>
<li>
<p>The built-in directory for standard header files</p>
</li>
</ol>
<p>Because of step 3, you normally do not need to specify a directory path for standard header files such as <code>sqlca.h</code> and <code>sqlda.h</code>. <a id="sthref1784"></a></p>
<p>The syntax for specifying a directory path using the SYS_INCLUDE option is system specific. Follow the conventions used for your operating system</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For the SYS_INCLUDE option, the precedence of option values gets reversed. Unlike other options in which the values get overwritten, SYS_INCLUDE appends all the directory files that are mentioned in:
<ul>
<li>
<p>Precompiler</p>
</li>
<li>
<p>Pro*C/C++ system configuration file</p>
</li>
<li>
<p>Pro*C/C++ user configuration file</p>
</li>
<li>
<p>Command line</p>
</li>
<li>
<p>Inline</p>
</li>
</ul>
<p>However, there is a difference between passing values within or without brackets. If you pass a single value or directory list within brackets, then the existing value of SYS_INCLUDE is overwritten. If you pass the list as a simple value without brackets, it will supplement any existing value.</p>
</div>
</div>
<!-- class="sect2" -->
<a id="i10832"></a>
<div class="sect2">
<h3 class="sect2">THREADS</h3>
<p class="subhead1"><a id="sthref1785"></a><a id="sthref1786"></a><a id="sthref1787"></a>Purpose</p>
<p>When THREADS=YES, the precompiler searches for context declarations.</p>
<p class="subhead1"><a id="sthref1788"></a>Syntax</p>
<p>THREADS={YES | NO}</p>
<p class="subhead1"><a id="sthref1789"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1790"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>This precompiler option is required for any program that requires multithreading support.</p>
<p>With THREADS=YES, the precompiler generates an error if no EXEC SQL CONTEXT USE directive is encountered before the first context is visible and an executable SQL statement is found.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="pc_11thr.htm#g1021123">Chapter 11, "Multithreaded Applications"</a></div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1791"></a>
<h3 class="sect2">TYPE_CODE<a id="sthref1792"></a></h3>
<p class="subhead1"><a id="sthref1793"></a><a id="sthref1794"></a>Purpose</p>
<p>This micro option specifies whether ANSI or Oracle datatype codes are used in dynamic SQL Method 4. Its setting is the same as the setting of MODE option.</p>
<p class="subhead1"><a id="sthref1795"></a>Syntax</p>
<p>TYPE_CODE={ORACLE | ANSI}</p>
<p class="subhead1"><a id="sthref1796"></a>Default</p>
<p>ORACLE</p>
<p class="subhead1"><a id="sthref1797"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>See the possible option settings in <a href="pc_14ady.htm#g1022881">Table 14-3</a></p>
<p>.</p>
</div>
<!-- class="sect2" -->
<a id="i8679"></a>
<div class="sect2">
<h3 class="sect2">UNSAFE_NULL</h3>
<p class="subhead1"><a id="sthref1798"></a><a id="sthref1799"></a><a id="sthref1800"></a>Purpose</p>
<p>Specifying UNSAFE_NULL=YES prevents generation of ORA-01405 messages when fetching NULLs without using indicator variables.</p>
<p class="subhead1"><a id="sthref1801"></a>Syntax</p>
<p>UNSAFE_NULL={YES | NO}</p>
<p class="subhead1"><a id="sthref1802"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1803"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The UNSAFE_NULL=YES is allowed only when MODE=ORACLE.</p>
<p>The UNSAFE_NULL option has no effect on host variables in an embedded PL/SQL block. You <span class="italic">must</span> use indicator variables to avoid ORA-01405 errors.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1804"></a>
<h3 class="sect2">USERID</h3>
<p class="subhead1"><a id="sthref1805"></a><a id="sthref1806"></a><a id="sthref1807"></a>Purpose</p>
<p>Specifies an Oracle username and password.</p>
<p class="subhead1"><a id="sthref1808"></a>Syntax</p>
<p>USERID=<span class="italic">username</span>/<span class="italic">password</span>[@<span class="italic">dbname</span>]</p>
<p class="subhead1"><a id="sthref1809"></a>Default</p>
<p>None</p>
<p class="subhead1"><a id="sthref1810"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>Do not specify this option when using the automatic connect feature, which accepts your Oracle username prefixed with CLUSTER$. The actual value of the "CLUSTER$" string is set as a parameter in the INIT.ORA file.</p>
<p>When SQLCHECK=SEMANTICS, if you want the precompiler to get needed information by connecting to Oracle and accessing the data dictionary, you must also specify USERID.<a id="sthref1811"></a></p>
</div>
<!-- class="sect2" -->
<a id="i11933"></a>
<div class="sect2">
<h3 class="sect2">UTF16_CHARSET</h3>
<p class="subhead1"><a id="sthref1812"></a>Purpose</p>
<p>Specify the character set form used by UNICODE(UTF16) variables.</p>
<p class="subhead1"><a id="sthref1813"></a>Syntax</p>
<pre>
UTF16_CHARSET={NCHAR_CHARSET | DB_CHARSET}
</pre>
<p class="subhead1"><a id="sthref1814"></a>Default</p>
<pre>
NCHAR_CHARSET
</pre>
<p class="subhead1"><a id="sthref1815"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file, but not inline.</p>
<p>If UTF16_CHARSET=NCHAR_CHARSET (the default), the UNICODE(UTF16) bind / define buffer is converted according to the server side National Character Set. There may be a performance impact when the target column is CHAR.</p>
<p>If UTF16_CHAR=DB_CHARSET, the UNICODE(UTF16) bind / define buffer is converted according to the database character set.</p>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
<p class="warnsp">There may be data loss when the target column is NCHAR.</p>
</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1816"></a>
<h3 class="sect2">VARCHAR</h3>
<p class="subhead1"><a id="sthref1817"></a><a id="sthref1818"></a><a id="sthref1819"></a>Purpose</p>
<p>Instructs the Pro*C/C++ precompiler to interpret some structs as VARCHAR host variables.</p>
<p class="subhead1"><a id="sthref1820"></a>Syntax</p>
<p>VARCHAR={NO | YES}</p>
<p class="subhead1"><a id="sthref1821"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1822"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>When VARCHAR=YES, a C struct that you code as</p>
<pre>
struct {
    short len;
    char  arr[n];
} name;
</pre>
<p>is interpreted by the precompiler as a VARCHAR[n] host variable.</p>
<p>VARCHAR can be used in conjunction with the NLS_CHAR option to designate a multibyte character variable.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1823"></a>
<h3 class="sect2"><a id="sthref1824"></a><a id="sthref1825"></a>VERSION</h3>
<p class="subhead1"><a id="sthref1826"></a>Purpose</p>
<p>Determines which version of the object will be returned by the EXEC SQL OBJECT DEREF statement.</p>
<p class="subhead1"><a id="sthref1827"></a>Syntax</p>
<p>VERSION={RECENT | LATEST | ANY}</p>
<p class="subhead1"><a id="sthref1828"></a>Default</p>
<p>RECENT</p>
<p class="subhead1"><a id="sthref1829"></a>Usage Notes</p>
<p>Can be entered inline by use of the EXEC ORACLE OPTION statement.</p>
<p>RECENT means that if the object has been selected into the object cache in the current transaction, then that object is returned. For transactions running in serializable mode, this option has the same effect as LATEST without incurring as many network round trips. Most applications should use RECENT.</p>
<p>LATEST means that if the object does not reside in the object cache, it is retrieved from the database. If It does reside in the object cache, it is refreshed from the server. Use LATEST with caution because it incurs the greatest number of network round trips. Use LATEST only when it is imperative that the object cache is kept as coherent as possible with the server buffer cache</p>
<p>ANY means that if the object already resides in the object cache, return that object. If not, retrieve the object from the server. ANY incurs the fewest network round trips. Use in applications that access read-only objects or when a user will have exclusive access to the objects.<a id="sthref1830"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment823">
<tr>
<td class="cellalignment832">
<table class="cellalignment828">
<tr>
<td class="cellalignment827"><a href="pc_09err.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment827"><a href="pc_11thr.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment835">
<table class="cellalignment826">
<tr>
<td class="cellalignment827"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment827"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment827"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment827"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment827"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment827"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
