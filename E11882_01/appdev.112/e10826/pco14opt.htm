<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Precompiler Options</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2009-08-01T5:8:34Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Pro*COBOL&reg; Programmer's Guide" />
<meta name="dcterms.identifier" content="E10826-01" />
<meta name="dcterms.isVersionOf" content="LNPCB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="pco13lob.htm" title="Previous" type="text/html" />
<link rel="Next" href="pcoabops.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10826.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/27</span> <!-- End Header --><a id="g27880"></a><a id="i13244"></a>
<h1 class="chapter"><span class="secnum">14</span> <a id="LNPCB014"></a>Precompiler Options</h1>
<p>This chapter describes the precompiler options of Pro*COBOL. This chapter includes:</p>
<ul>
<li>
<p><a href="#i11956">The procob Command</a></p>
</li>
<li>
<p><a href="#i8682">Actions During Precompilation</a></p>
</li>
<li>
<p><a href="#i8687">About the Options</a></p>
</li>
<li>
<p><a href="#i7573">Entering Precompiler Options</a></p>
</li>
<li>
<p><a href="#i8696">Scope of Precompiler Options</a></p>
</li>
<li>
<p><a href="#i8701">Quick Reference</a></p>
</li>
<li>
<p><a href="#i12295">Using Pro*COBOL Precompiler Options</a><a id="sthref1894"></a></p>
</li>
</ul>
<a id="i11956"></a>
<div class="sect1">
<h2 class="sect1">The procob Command</h2>
<p>The location of Pro*COBOL differs from system to system. Typically, your system manager or DBA defines environment variables or aliases or uses other operating system-specific means to make the Pro*COBOL executable accessible.</p>
<p><a id="sthref1895"></a><a id="sthref1896"></a><a id="sthref1897"></a><a id="sthref1898"></a>To run the Oracle Pro*COBOL Precompiler, you issue the command</p>
<pre>
procob [<span class="italic">option_name</span>=<span class="italic">value</span>] [<span class="italic">option_name</span>=<span class="italic">value</span>] ... 
</pre>
<p>The option value is always separated from the option name by an equals sign (=), with no white space around the equals sign.</p>
<p>For example, the INAME option specifies the source file to be precompiled. The command:<a id="sthref1899"></a></p>
<pre>
procob INAME=test
</pre>
<p>precompiles the file <span class="italic">test.pco</span> in the current directory, since Pro*COBOL assumes that the filename extension is <span class="italic">.pco</span>.</p>
<p>You need not use a file extension when specifying INAME unless the extension is nonstandard.<a id="sthref1900"></a></p>
<p>Input and output filenames need not be accompanied by their respective option names, INAME and ONAME. When the option names are not specified, Pro*COBOL assumes that the first filename specified on the command line is the input filename and that the second filename is the output filename.</p>
<p>Thus, the command</p>
<pre>
procob MODE=ANSI myfile myfile.cob
</pre>
<p>is equivalent to</p>
<pre>
procob MODE=ANSI INAME=myfile.pco ONAME=myfile.cob
</pre>
<div class="sect2"><a id="sthref1901"></a>
<h3 class="sect2">Case-Sensitivity</h3>
<p>In general, you can use either uppercase or lowercase for command-line option names and values. However, if your operating system is case-sensitive (as in UNIX for example) you must specify filename values, including the name of Pro*COBOL executable, using the correct combination of upper and lowercase letters.</p>
<p><span class="bold">Note:</span> Option names and option values that do not name specific operating system objects, such as filenames, are not case-sensitive. In the examples in this guide, option names are written in upper case or lower case, and option values are usually in lower case. Filenames, including the name of the Pro*COBOL executable itself, always follow the case conventions used by the operating system on which it is executed.</p>
<p>With some operating systems and user shells, such as UNIX C shell, the <code>?</code> may need to be preceded by an "escape" character, such as a back-slash (\). For example, instead of <code>procob ?</code>, you might need to use <code>procob \?</code> to list the Pro*COBOL option settings.</p>
<p>Consult your platform-specific documentation.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i8682"></a>
<div class="sect1">
<h2 class="sect1">Actions During Precompilation</h2>
<p>During precompilation, Pro*COBOL generates COBOL code that replaces the SQL statements embedded in your host program. The generated code includes data structures that contain the datatype, length, and address of each host variable, as well as other information required by the Oracle runtime library, SQLLIB. The generated code also contains the calls to SQLLIB routines that perform the embedded SQL operations. <a id="sthref1902"></a></p>
<p>Pro*COBOL can issue warnings and error messages. These messages are described in <a class="olink ERRMG" href="../../server.112/e17766/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="i8687"></a>
<div class="sect1">
<h2 class="sect1">About the Options</h2>
<p><a id="sthref1903"></a>Many useful options are available at precompile time. They let you control how resources are used, how errors are reported, how input and output are formatted, and how cursors are managed.</p>
<p>The <span class="italic">value</span> of an option is a literal, which represents text or numeric values. For example, for the option</p>
<pre>
... INAME=my_test
</pre>
<p>the value is a string literal that specifies a filename.</p>
<p>For the option</p>
<pre>
... PREFETCH=100
</pre>
<p>the value is numeric.</p>
<p>Some options take Boolean values, which you can represent with the strings YES or NO, TRUE or FALSE, or with the integer literals 1 or 0, respectively. For example, the option</p>
<pre>
... SELECT_ERROR=YES
</pre>
<p>is equivalent to</p>
<pre>
... SELECT_ERROR=TRUE
</pre>
<p>or</p>
<pre>
... SELECT_ERROR=1
</pre>
<p>You leave no white space around the equals (=) sign. This is because spaces delimit individual options. For example, you might specify the option AUTO_CONNECT on the command line as follows:</p>
<pre>
... AUTO_CONNECT=YES
</pre>
<p>You can abbreviate the names of options unless the abbreviation is ambiguous. For example, you cannot use the abbreviation MAX because it might stand for MAXLITERAL or MAXOPENCURSORS.<a id="sthref1904"></a></p>
<p>A handy reference to the Pro*COBOL options is available online. To see the online display, enter the Pro*COBOL command, with no arguments, at your operating system prompt:</p>
<pre>
procob
</pre>
<p>The display gives the name, syntax, default value, and purpose of each option. Options marked with an asterisk (*) can be specified inline as well as on the command line.<a id="sthref1905"></a></p>
<a id="i7608"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref1906"></a>Precedence of Option Values</h3>
<p>Option values are determined by the following, in order of increasing precedence:</p>
<ul>
<li>
<p>A default built in to Pro*COBOL</p>
</li>
<li>
<p>A value set in the system configuration file</p>
</li>
<li>
<p>A value set in a user configuration file</p>
</li>
<li>
<p>A value entered in the command line</p>
</li>
<li>
<p>A value set in an inline specification</p>
</li>
</ul>
<p>For example, the option MAXOPENCURSORS specifies the maximum number of cached open cursors. The built-in Pro*COBOL default value for this option is 10. However, if MAXOPENCURSORS=32 is specified in the system configuration file, the value becomes 32. The user configuration file could set it to yet another value, which then overrides the system configuration value.</p>
<p>If the MAXOPNCURSORS option is set on the command line, the new command-line value takes precedence. Finally, an inline specification takes precedence over all preceding defaults. For more information, see <a href="#i7573">"Entering Precompiler Options"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i8395"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref1907"></a>Macro and Micro Options</h3>
<p>Option MODE is known as a <span class="italic">macro</span> option. Some newer options, such as END_OF_FETCH, control only one function and are known as <span class="italic">micro</span> options. When setting a macro and a micro option, you must remember that the macro option has precedence over micro options. This is the case if, and only if, the macro option is at a higher level of precedence than the micro option. (As described in the section <a href="#i7608">"Precedence of Option Values"</a>.) This behavior is a change from releases of Pro*COBOL prior to 8.0.</p>
<p>For example, the default for MODE is ORACLE, and for END_OF_FETCH is 1403. If you specify MODE=ANSI in the user configuration file, Pro*COBOL will return a value of 100 at the end of fetch, overriding the default END_OF_FETCH value of 1403. If you specify both MODE=ANSI and END_OF_FETCH=1403 in the configuration file, then 1403 will be returned. If you specify END_OF_FETCH=1403 in your configuration file and MODE=ANSI on the command line, then 100 will be returned.</p>
<p><a id="sthref1908"></a>The following table lists the values of micro options set by the macro option values:</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1909"></a><a id="sthref1910"></a>Table 14-1 How Macro Option Values Set Micro Option Values</p>
<table class="cellalignment801" title="How Macro Option Values Set Micro Option Values " summary="q" dir="ltr">
<thead>
<tr class="cellalignment795">
<th class="cellalignment802" id="r1c1-t2">Macro Option</th>
<th class="cellalignment802" id="r1c2-t2">Micro Option</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment795">
<td class="cellalignment803" id="r2c1-t2" headers="r1c1-t2">
<p>MODE=ANSI | ISO</p>
</td>
<td class="cellalignment803" headers="r2c1-t2 r1c2-t2">
<p>CLOSE_ON_COMMIT=YES</p>
<p>DECLARE_SECTION=YES</p>
<p>END_OF_FETCH=100</p>
<p>DYNAMIC=ANSI</p>
<p>TYPE_CODE=ANSI</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r3c1-t2" headers="r1c1-t2">
<p>MODE=ANSI14 | ANSI13 | ISO14 | ISO13</p>
</td>
<td class="cellalignment803" headers="r3c1-t2 r1c2-t2">
<p>CLOSE_ON_COMMIT=NO</p>
<p>DECLARE_SECTION=YES</p>
<p>END_OF_FETCH=100</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r4c1-t2" headers="r1c1-t2">
<p>MODE=ORACLE</p>
</td>
<td class="cellalignment803" headers="r4c1-t2 r1c2-t2">
<p>CLOSE_ON_COMMIT=NO</p>
<p>DECLARE_SECTION=NO</p>
<p>END_OF_FETCH=1403</p>
<p>DYNAMIC=ORACLE</p>
<p>TYPE_CODE=ORACLE</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i7596"></a>
<div class="sect2">
<h3 class="sect2">Determining Current Values<a id="sthref1911"></a></h3>
<p>You can interactively determine the current value for one or more options by using a question mark on the command line. For example, if you issue the command</p>
<pre>
procob ?
</pre>
<p>the complete option set, along with current values, is displayed on your terminal. In this case, the values are those built into Pro*COBOL, overridden by any values in the system configuration file. But if you issue the following command</p>
<pre>
procob CONFIG=my_config_file.cfg ?
</pre>
<p>and there is a file named <code><span class="codeinlineitalic">my_config_file.cfg</span></code> in the current directory, the options from the <code><span class="codeinlineitalic">my_config_file.cfg</span></code> file are listed with the other default values. Values in the user configuration file supply missing values, and they supersede values built into Pro*COBOL and values specified in the system configuration file.</p>
<p>You can also determine the current value of a single option by simply specifying the option name followed by <code>=?</code> as in</p>
<pre>
procob MAXOPENCURSORS=?
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i7573"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref1912"></a>Entering Precompiler Options</h2>
<p>All Pro*COBOL options (except CONFIG) can be entered on the command line or from a configuration file. Many options can also be entered inline. During a given run, Pro*COBOL can accept options from all three sources.</p>
<div class="sect2"><a id="sthref1913"></a>
<h3 class="sect2">On the Command Line</h3>
<p>You enter precompiler options on the command line using <code>... [option_name=value] [option_name=value] ...</code></p>
<pre>
</pre>
<p>Separate each option with one or more spaces. For example, you might enter the following options:</p>
<pre>
... ERRORS=no LTYPE=short 
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1914"></a>
<h3 class="sect2">Inline</h3>
<p>Enter options inline by coding EXEC ORACLE OPTION statements, using the following syntax: <a id="sthref1915"></a><a id="sthref1916"></a><a id="sthref1917"></a></p>
<pre>
     EXEC ORACLE OPTION (option_name=value) END-EXEC. 
</pre>
<p>For example, you might code the following statement:</p>
<pre>
     EXEC ORACLE OPTION (RELEASE_CURSOR=YES) END-EXEC. 
</pre>
<p>An option entered inline overrides the same option entered on the command line.</p>
<div class="sect3"><a id="sthref1918"></a>
<h4 class="sect3">Advantages</h4>
<p>The EXEC ORACLE feature is especially useful for changing option values during precompilation. For example, you might want to change the HOLD_CURSOR and RELEASE_CURSOR values on a statement-by-statement basis. <a href="pcoadtun.htm#g26568">Appendix C, "Performance Tuning"</a> shows you how to use inline options to optimize runtime performance.<a id="sthref1919"></a></p>
<p>Specifying options inline is also helpful if your operating system limits the number of characters you can enter on the command line, and you can store inline options in configuration files. These are discussed in the next section.</p>
</div>
<!-- class="sect3" -->
<div class="sect3"><a id="sthref1920"></a>
<h4 class="sect3">Scope of EXEC ORACLE</h4>
<p>An EXEC ORACLE statement stays in effect until textually superseded by another EXEC ORACLE statement specifying the same option. In the following example, HOLD_CURSOR=NO stays in effect until superseded by HOLD_CURSOR=YES:<a id="sthref1921"></a><a id="sthref1922"></a><a id="sthref1923"></a></p>
<pre>
     EXEC SQL BEGIN DECLARE SECTION END-EXEC. 
 01  EMP-NAME    PIC X(20) VARYING.
 01  EMP-NUMBER  PIC S9(4) COMP VALUE ZERO.
 01  SALARY      PIC S9(5)V99 COMP-3 VALUE ZERO.
 01  DEPT-NUMBER PIC S9(4) COMP VALUE ZERO.
     EXEC SQL END DECLARE SECTION END-EXEC. 
     ... 
     EXEC SQL WHENEVER NOT FOUND GOTO NO-MORE END-EXEC. 
     ...
     EXEC ORACLE OPTION (HOLD_CURSOR=NO)END-EXEC. 
     ...
     EXEC SQL DECLARE emp_cursor CURSOR FOR 
<span class="bold">        </span>SELECT EMPNO, DEPTNO FROM EMP 
     END-EXEC.
     EXEC SQL OPEN emp_cursor END-EXEC.
  
     DISPLAY 'Employee Number  Dept'.
     DISPLAY '---------------  ----'.
     PERFORM
         EXEC SQL
           FETCH emp_cursor INTO :EMP-NUMBER, :DEPT-NUMBER
         END-EXEC<span class="bold"> </span>
         DISPLAY EMP-NUMBER, DEPT-NUMBER END-EXEC
     END-PERFORM. 

 NO-MORE.
         EXEC SQL WHENEVER NOT FOUND CONTINUE END-EXEC.<span class="bold"> </span>
     PERFORM
         DISPLAY 'Employee number? ' 
         ACCEPT EMP-NUMBER 
         IF EMP-NUMBER IS NOT = 0 
             EXEC ORACLE OPTION (HOLD_CURSOR=YES) END-EXEC 
             EXEC SQL SELECT ENAME, SAL 
                 INTO :EMP-NAME, :SALARY 
                 FROM EMP 
                 WHERE EMPNO = :EMP-NUMBER<span class="bold"> </span>
                 DISPLAY 'Salary for ', EMP-NAME, ' is ', SALARY
             END-EXEC 
         END-IF
     END-PERFORM. 
  NEXT-PARA.
     ... 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1924"></a>
<h3 class="sect2">Configuration Files</h3>
<p>A configuration file is a text file that contains precompiler options. Each record (line) in the file contains one option, with its associated value or values. For example, a configuration file might contain the lines</p>
<pre>
FIPS=YES
MODE=ANSI
</pre>
<p>to set values for the FIPS and MODE options.</p>
<p><a id="sthref1925"></a>There is a single system configuration file for each system. The name of the system configuration file is</p>
<pre>
pcbcfg.cfg
</pre>
<p>The location of the file is operating system-specific. On most UNIX systems, the Pro*COBOL configuration file is usually located in the <span class="italic">$ORACLE_HOME/precomp/admin</span> directory, where <span class="italic">$ORACLE_HOME</span> is the environment variable for the database software.</p>
<p>Note that before release 8.0 of Pro*COBOL, the configuration file was called <span class="italic">pccob.cfg</span>.</p>
<p>The Pro*COBOL user can have one or more user configuration files. The name of the configuration file must be specified using the CONFIG command-line option. For more information, see <a href="#i7596">"Determining Current Values"</a>.</p>
<p><span class="bold">Note:</span> You cannot nest configuration files. This means that CONFIG is not a valid option inside a configuration file.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i8696"></a>
<div class="sect1">
<h2 class="sect1">Scope of Precompiler Options</h2>
<p>A precompilation unit is a file containing COBOL code and one or more embedded SQL statements. The options specified for a given precompilation unit affect only that unit; they have no effect on other units.</p>
<p>For example, if you specify HOLD_CURSOR=YES and RELEASE_CURSOR=YES for unit A but not unit B, SQL statements in unit A run with these HOLD_CURSOR and RELEASE_CURSOR values, but SQL statements in unit B run with the default values. However, the MAXOPENCURSORS setting that is in effect when you connect to Oracle stays in effect for the life of that connection. <a id="sthref1926"></a><a id="sthref1927"></a><a id="sthref1928"></a></p>
<p>The scope of an inline option is positional, not logical. That is, an inline option affects SQL statements that follow it in the source file, not in the flow of program logic. An option setting stays in effect until the end-of-file unless you re-specify the option.<a id="sthref1929"></a><a id="sthref1930"></a><a id="sthref1931"></a></p>
</div>
<!-- class="sect1" -->
<a id="i8701"></a>
<div class="sect1">
<h2 class="sect1">Quick Reference<a id="sthref1932"></a></h2>
<p><a href="#g20276">Table 14-2</a> is a quick reference to the Pro*COBOL options. Options marked with an asterisk can be entered inline.</p>
<p>Another handy reference is available online. To see the online display, just enter the Pro*COBOL command without options at your operating system prompt. The display gives the name, syntax, default value, and purpose of each option.<a id="sthref1933"></a></p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<p>There are some platform-specific options. For example, on byte-swapped platforms the option COMP5 governs the use of certain COMPUTATIONAL items. Check your system-specific Oracle manuals.</p>
<p>COMP5 is not supported on SPARC Solaris 64 bit Computers. Use COMP instead.</p>
</div>
<div class="tblformal">
<p class="titleintable"><a id="sthref1934"></a><a id="g20276"></a>Table 14-2 Option List</p>
<table class="cellalignment801" title="Option List " summary="q" dir="ltr">
<thead>
<tr class="cellalignment795">
<th class="cellalignment802" id="r1c1-t4">Syntax</th>
<th class="cellalignment802" id="r1c2-t4">Default</th>
<th class="cellalignment802" id="r1c3-t4">Specifies</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment795">
<td class="cellalignment803" id="r2c1-t4" headers="r1c1-t4">
<p>ASACC={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r2c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r2c1-t4 r1c3-t4">
<p>If YES, use ASA carriage control for listing.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r3c1-t4" headers="r1c1-t4">
<p>ASSUME_SQLCODE={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r3c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r3c1-t4 r1c3-t4">
<p>If YES, assume SQLCODE variable exists.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r4c1-t4" headers="r1c1-t4">
<p>AUTO_CONNECT={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r4c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r4c1-t4 r1c3-t4">
<p>If YES, allow automatic connect to ops$ accounts before the first executable statement.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r5c1-t4" headers="r1c1-t4">
<p>CLOSE_ON_COMMIT*</p>
</td>
<td class="cellalignment803" headers="r5c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r5c1-t4 r1c3-t4">
<p>If YES, close all cursors on COMMIT.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r6c1-t4" headers="r1c1-t4">
<p>CONFIG=<span class="italic">filename</span></p>
</td>
<td class="cellalignment803" headers="r6c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r6c1-t4 r1c3-t4">
<p>Specifies name of user-defined configuration file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r7c1-t4" headers="r1c1-t4">
<p>CWH_SQL99={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r7c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment803" headers="r7c1-t4 r1c3-t4">
<p>If YES, close held cursors on ROLLBACK (SQL standard behavior.)</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r8c1-t4" headers="r1c1-t4">
<p>DATE_FORMAT</p>
</td>
<td class="cellalignment803" headers="r8c1-t4 r1c2-t4">
<p>LOCAL</p>
</td>
<td class="cellalignment803" headers="r8c1-t4 r1c3-t4">
<p>Specifies date string format.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r9c1-t4" headers="r1c1-t4">
<p>DBMS={NATIVE | V7 | V8}</p>
</td>
<td class="cellalignment803" headers="r9c1-t4 r1c2-t4">
<p>NATIVE</p>
</td>
<td class="cellalignment803" headers="r9c1-t4 r1c3-t4">
<p>Version-specific behavior of Oracle at precompile time.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r10c1-t4" headers="r1c1-t4">
<p>DECLARE_SECTION</p>
</td>
<td class="cellalignment803" headers="r10c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r10c1-t4 r1c3-t4">
<p>If YES, DECLARE SECTION is required.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r11c1-t4" headers="r1c1-t4">
<p>DEFINE=<span class="italic">symbol</span> *</p>
</td>
<td class="cellalignment803" headers="r11c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r11c1-t4 r1c3-t4">
<p>Define a symbol used in conditional precompilation.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r12c1-t4" headers="r1c1-t4">
<p>DYNAMIC</p>
</td>
<td class="cellalignment803" headers="r12c1-t4 r1c2-t4">
<p>ORACLE</p>
</td>
<td class="cellalignment803" headers="r12c1-t4 r1c3-t4">
<p>Specifies Oracle or ANSI dynamic semantics in SQL Method 4.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r13c1-t4" headers="r1c1-t4">
<p>END_OF_FETCH</p>
</td>
<td class="cellalignment803" headers="r13c1-t4 r1c2-t4">
<p>1403</p>
</td>
<td class="cellalignment803" headers="r13c1-t4 r1c3-t4">
<p>End-of-fetch SQLCODE value.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r14c1-t4" headers="r1c1-t4">
<p>ERRORS={YES | NO} *</p>
</td>
<td class="cellalignment803" headers="r14c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment803" headers="r14c1-t4 r1c3-t4">
<p>If YES, display errors on the terminal.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r15c1-t4" headers="r1c1-t4">
<p>FIPS={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r15c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r15c1-t4 r1c3-t4">
<p>If YES, ANSI/ISO extensions are flagged.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r16c1-t4" headers="r1c1-t4">
<p>FORMAT={ANSI | TERMINAL | VARIABLE}</p>
</td>
<td class="cellalignment803" headers="r16c1-t4 r1c2-t4">
<p>ANSI</p>
</td>
<td class="cellalignment803" headers="r16c1-t4 r1c3-t4">
<p>Format of input file COBOL statements.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r17c1-t4" headers="r1c1-t4">
<p>HOLD_CURSOR={YES | NO}*</p>
</td>
<td class="cellalignment803" headers="r17c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r17c1-t4 r1c3-t4">
<p>If YES, hold OraCursor (do not re-assign).</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r18c1-t4" headers="r1c1-t4">
<p>HOST={COBOL | COB74}</p>
</td>
<td class="cellalignment803" headers="r18c1-t4 r1c2-t4">
<p>COBOL</p>
</td>
<td class="cellalignment803" headers="r18c1-t4 r1c3-t4">
<p>COBOL version used in input file (COBOL 85 or COBOL 74).</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r19c1-t4" headers="r1c1-t4">
<p>[INAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment803" headers="r19c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r19c1-t4 r1c3-t4">
<p>Name of input file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r20c1-t4" headers="r1c1-t4">
<p>INCLUDE=<span class="italic">path</span>*</p>
</td>
<td class="cellalignment803" headers="r20c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r20c1-t4 r1c3-t4">
<p>Pathname for EXEC SQL INCLUDE files.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r21c1-t4" headers="r1c1-t4">
<p>IRECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment803" headers="r21c1-t4 r1c2-t4">
<p>80</p>
</td>
<td class="cellalignment803" headers="r21c1-t4 r1c3-t4">
<p>Record length of input file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r22c1-t4" headers="r1c1-t4">
<p>LITDELIM={APOST | QUOTE}</p>
</td>
<td class="cellalignment803" headers="r22c1-t4 r1c2-t4">
<p>QUOTE</p>
</td>
<td class="cellalignment803" headers="r22c1-t4 r1c3-t4">
<p>Delimiters for COBOL strings.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r23c1-t4" headers="r1c1-t4">
<p>LNAME=<span class="italic">filename</span></p>
</td>
<td class="cellalignment803" headers="r23c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r23c1-t4 r1c3-t4">
<p>Name of listing file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r24c1-t4" headers="r1c1-t4">
<p>LRECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment803" headers="r24c1-t4 r1c2-t4">
<p>132</p>
</td>
<td class="cellalignment803" headers="r24c1-t4 r1c3-t4">
<p>Record length of listing file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r25c1-t4" headers="r1c1-t4">
<p>LTYPE={LONG | SHORT | NONE} *</p>
</td>
<td class="cellalignment803" headers="r25c1-t4 r1c2-t4">
<p>LONG</p>
</td>
<td class="cellalignment803" headers="r25c1-t4 r1c3-t4">
<p>Type of listing.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r26c1-t4" headers="r1c1-t4">
<p>MAXLITERAL=<span class="italic">integer</span> *</p>
</td>
<td class="cellalignment803" headers="r26c1-t4 r1c2-t4">
<p>256</p>
</td>
<td class="cellalignment803" headers="r26c1-t4 r1c3-t4">
<p>Maximum length of strings. (120 on IBM-proprietary S370 OS)</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r27c1-t4" headers="r1c1-t4">
<p>MAXOPENCURSORS=<span class="italic">integer</span> *</p>
</td>
<td class="cellalignment803" headers="r27c1-t4 r1c2-t4">
<p>10</p>
</td>
<td class="cellalignment803" headers="r27c1-t4 r1c3-t4">
<p>Maximum number of OraCursors cached (1).</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r28c1-t4" headers="r1c1-t4">
<p>MODE={ORACLE | ANSI}</p>
</td>
<td class="cellalignment803" headers="r28c1-t4 r1c2-t4">
<p>ORACLE</p>
</td>
<td class="cellalignment803" headers="r28c1-t4 r1c3-t4">
<p>If ANSI, follow the ANSI/ISO SQL standard.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r29c1-t4" headers="r1c1-t4">
<p>NESTED={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r29c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment803" headers="r29c1-t4 r1c3-t4">
<p>If YES, nested programs are supported.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r30c1-t4" headers="r1c1-t4">
<p>NLS_LOCAL={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r30c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r30c1-t4 r1c3-t4">
<p>If YES, use NCHAR semantics of previous Pro*COBOL releases.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r31c1-t4" headers="r1c1-t4">
<p>[ONAME=]<span class="italic">filename</span></p>
</td>
<td class="cellalignment803" headers="r31c1-t4 r1c2-t4">
<p><span class="italic">iname</span>.cob</p>
</td>
<td class="cellalignment803" headers="r31c1-t4 r1c3-t4">
<p>Name of output file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r32c1-t4" headers="r1c1-t4">
<p>ORACA={YES | NO}*</p>
</td>
<td class="cellalignment803" headers="r32c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r32c1-t4 r1c3-t4">
<p>If YES, use ORACA communications area.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r33c1-t4" headers="r1c1-t4">
<p>ORECLEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment803" headers="r33c1-t4 r1c2-t4">
<p>80</p>
</td>
<td class="cellalignment803" headers="r33c1-t4 r1c3-t4">
<p>Record length of output file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r34c1-t4" headers="r1c1-t4">
<p>PAGELEN=<span class="italic">integer</span></p>
</td>
<td class="cellalignment803" headers="r34c1-t4 r1c2-t4">
<p>66</p>
</td>
<td class="cellalignment803" headers="r34c1-t4 r1c3-t4">
<p>Lines for each page in listing.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r35c1-t4" headers="r1c1-t4">
<p>PICX</p>
</td>
<td class="cellalignment803" headers="r35c1-t4 r1c2-t4">
<p>CHARF</p>
</td>
<td class="cellalignment803" headers="r35c1-t4 r1c3-t4">
<p>Datatype of PIC X COBOL variables.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r36c1-t4" headers="r1c1-t4">
<p>PREFETCH</p>
</td>
<td class="cellalignment803" headers="r36c1-t4 r1c2-t4">
<p>1</p>
</td>
<td class="cellalignment803" headers="r36c1-t4 r1c3-t4">
<p>Speed up queries by pre-fetching a given number of rows.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r37c1-t4" headers="r1c1-t4">
<p>RELEASE_CURSOR={YES | NO} *</p>
</td>
<td class="cellalignment803" headers="r37c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r37c1-t4 r1c3-t4">
<p>If YES, release OraCursor after execute.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r38c1-t4" headers="r1c1-t4">
<p>SELECT_ERROR={YES | NO}*</p>
</td>
<td class="cellalignment803" headers="r38c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment803" headers="r38c1-t4 r1c3-t4">
<p>If YES, generate FOUND error on SELECT.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r39c1-t4" headers="r1c1-t4">
<p>SQLCHECK={SEMANTICS | SYNTAX}*</p>
</td>
<td class="cellalignment803" headers="r39c1-t4 r1c2-t4">
<p>SYNTAX</p>
</td>
<td class="cellalignment803" headers="r39c1-t4 r1c3-t4">
<p>SQL checking level.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r40c1-t4" headers="r1c1-t4">
<p>THREADS={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r40c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r40c1-t4 r1c3-t4">
<p>Indicates a multithreaded application.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r41c1-t4" headers="r1c1-t4">
<p>TYPE_CODE</p>
</td>
<td class="cellalignment803" headers="r41c1-t4 r1c2-t4">
<p>ORACLE</p>
</td>
<td class="cellalignment803" headers="r41c1-t4 r1c3-t4">
<p>Use Oracle or ANSI type codes for dynamic SQL method 4.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r42c1-t4" headers="r1c1-t4">
<p>UNSAFE_NULL={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r42c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r42c1-t4 r1c3-t4">
<p>If YES, unsafe null fetches are allowed (disables the ORA-01405 message).</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r43c1-t4" headers="r1c1-t4">
<p>USERID=<span class="italic">username</span>/<span class="italic">password[@dbname]</span></p>
</td>
<td class="cellalignment803" headers="r43c1-t4 r1c2-t4">
<p>(none)</p>
</td>
<td class="cellalignment803" headers="r43c1-t4 r1c3-t4">
<p>Oracle username, password, and optional database.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r44c1-t4" headers="r1c1-t4">
<p>VARCHAR={YES | NO}</p>
</td>
<td class="cellalignment803" headers="r44c1-t4 r1c2-t4">
<p>NO</p>
</td>
<td class="cellalignment803" headers="r44c1-t4 r1c3-t4">
<p>If YES, accept user-defined VARCHAR group items.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r45c1-t4" headers="r1c1-t4">
<p>XREF={YES | NO}*</p>
</td>
<td class="cellalignment803" headers="r45c1-t4 r1c2-t4">
<p>YES</p>
</td>
<td class="cellalignment803" headers="r45c1-t4 r1c3-t4">
<p>If YES, generate symbol cross references in listing.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="i12295"></a>
<div class="sect1">
<h2 class="sect1">Using Pro*COBOL Precompiler Options</h2>
<p>This section is organized for easy reference. It lists the Pro*COBOL precompiler options alphabetically and for each option gives its purpose, syntax, and default value. Usage notes that help you understand how the option works are also provided. Unless the usage notes say otherwise, the option can be entered on the command line, inline, or from a configuration file.</p>
<div class="sect2"><a id="sthref1935"></a>
<h3 class="sect2">ASACC</h3>
<p class="subhead2"><a id="sthref1936"></a>Purpose</p>
<p>Specifies whether the listing file follows the ASA convention of using the first column in each line for carriage control.<a id="sthref1937"></a><a id="sthref1938"></a></p>
<p class="subhead2"><a id="sthref1939"></a>Syntax</p>
<p>ASACC={YES | NO}</p>
<p class="subhead2"><a id="sthref1940"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref1941"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
</div>
<!-- class="sect2" -->
<a id="i5832"></a>
<div class="sect2">
<h3 class="sect2">ASSUME_SQLCODE</h3>
<p class="subhead2"><a id="sthref1942"></a>Purpose</p>
<p>Instructs Pro*COBOL to presume that SQLCODE is declared whether or not it is declared in the program, or of the proper type.<a id="sthref1943"></a><a id="sthref1944"></a></p>
<p class="subhead2"><a id="sthref1945"></a>Syntax</p>
<p>ASSUME_SQLCODE={YES | NO}</p>
<p class="subhead2"><a id="sthref1946"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref1947"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When DECLARE_SECTION=YES and ASSUME_SQLCODE=YES, SQLCODE can be declared outside a Declare Section.</p>
<p>When DECLARE_SECTION=YES and ASSUME_SQLCODE=NO, SQLCODE is recognized as the status variable if and only if at least one of the following criteria is satisfied:</p>
<ul>
<li>
<p>It is declared with <span class="italic">exactly</span> the right datatype.</p>
</li>
<li>
<p>Pro*COBOL finds no other status variable. If Pro*COBOL finds a SQLSTATE declaration (of <span class="italic">exactly</span> the right type of course), or finds an include of a SQLCA, then it will <span class="italic">not</span> presume SQLCODE is declared.</p>
</li>
</ul>
<p>When ASSUME_SQLCODE=YES, and when SQLSTATE and/or SQLCA are declared as status variables, Pro*COBOL presumes SQLCODE is declared whether or not it is declared or of the proper type.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1948"></a>
<h3 class="sect2">AUTO_CONNECT</h3>
<p class="subhead2"><a id="sthref1949"></a>Purpose</p>
<p>Specifies whether your program connects automatically to the default user account.<a id="sthref1950"></a><a id="sthref1951"></a></p>
<p class="subhead2"><a id="sthref1952"></a>Syntax</p>
<p>AUTO_CONNECT={YES | NO}</p>
<p class="subhead2"><a id="sthref1953"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref1954"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When AUTO_CONNECT=YES, as soon as Pro*COBOL encounters an executable SQL statement, your program tries to log on to Oracle automatically with the userid</p>
<pre>
<span class="italic">&lt;prefix&gt;&lt;username&gt;</span>
</pre>
<p>where &lt;<span class="italic">prefix&gt;</span> is the value of the Oracle initialization parameter OS_AUTHENT_PREFIX (the default value is OPS$) and &lt;<span class="italic">username&gt;</span> is your operating system user or task name. In this case, you cannot override the default value for MAXOPENCURORS (10), even if you specify a different value on the command line.</p>
<p>When AUTO_CONNECT=NO (the default), you must use the CONNECT statement to logon to Oracle.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1955"></a>
<h3 class="sect2">CHARSET_PICX</h3>
<p class="subhead2"><a id="sthref1956"></a>Purpose</p>
<p>Specifies the character set form used by PIC X variables used in select, insert, or update statements.</p>
<p class="subhead2"><a id="sthref1957"></a>Syntax</p>
<p>CHARSET_PICX={NCHAR_CHARSET | DB_CHARSET }</p>
<p class="subhead2"><a id="sthref1958"></a>Default</p>
<p>DB_CHARSET</p>
<p class="subhead2"><a id="sthref1959"></a>Usage Notes</p>
<p>Can be used on the command line or in a configuration file, but not inline.</p>
<p>If CHARSET_PICX = NCHAR_CHARSET, the PIC X bind or define buffer is converted according to the server-side National Character Set. Possible performance impact might be seen when target column is CHAR. Similarly, if CHARSET_PICX = DB_CHARSET, the PIC X bind or define buffer is converted according to server-side Database Character Set. There can be some data loss when target column is NCHAR.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1960"></a>
<h3 class="sect2">CHARSET_PICN</h3>
<p class="subhead2"><a id="sthref1961"></a>Purpose</p>
<p>Specifies the character set form used by PIC N variables used in select, insert, or update statements.</p>
<p class="subhead2"><a id="sthref1962"></a>Syntax</p>
<p>CHARSET_PICN={NCHAR_CHARSET | DB_CHARSET }</p>
<p class="subhead2"><a id="sthref1963"></a>Default</p>
<p>NCHAR_CHARSET</p>
<p class="subhead2"><a id="sthref1964"></a>Usage Notes</p>
<p>Can be used on the command line or in a configuration file, but not inline.</p>
<p>If CHARSET_PICN = DB_CHARSET, the PIC N bind or define buffer is converted according to the server-side Database Character Set. There can be some data loss when target column is NCHAR. Similarly, if CHARSET_PICN = NCHAR_CHARSET, the PIC N bind or define buffer is converted according to server-side National Character Set. Possible performance impact might be seen when target column is CHAR.</p>
</div>
<!-- class="sect2" -->
<a id="i8871"></a>
<div class="sect2">
<h3 class="sect2">CLOSE_ON_COMMIT<a id="sthref1965"></a><a id="sthref1966"></a></h3>
<p class="subhead2"><a id="sthref1967"></a>Purpose</p>
<p><a id="sthref1968"></a>Specifies whether or not all cursors declared without the WITH HOLD clause are closed on commit.</p>
<p class="subhead2"><a id="sthref1969"></a>Syntax</p>
<p>CLOSE_ON_COMMIT={YES | NO}</p>
<p class="subhead2"><a id="sthref1970"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref1971"></a>Usage Notes</p>
<p>Can be used only on the command line or in a configuration file.</p>
<p>This option will only have an effect when a cursor is not coded using the WITH HOLD clause in a DECLARE CURSOR statement, since that will override both the new option and the existing behavior which is associated with the MODE option. If MODE is specified at a higher level than CLOSE_ON_COMMIT, then MODE takes precedence. For example, the defaults are MODE=ORACLE and CLOSE_ON_COMMIT=NO. If the user specifies MODE=ANSI on the command line, then any cursors not using the WITH HOLD clause will be closed on commit.</p>
<p>When CLOSE_ON_COMMIT=NO (when MODE=ORACLE), issuing a COMMIT or ROLLBACK will close only cursors that are declared using the FOR UPDATE clause or are referenced in a CURRENT OF clause. Other cursors are not affected by the COMMIT or ROLLBACK statement, remain open, if they are open already. However, when CLOSE_ON_COMMIT=YES (when MODE=ANSI), issuing a COMMIT or ROLLBACK closes all cursors.</p>
<p>For a further discussion of the precedence of this option see <a href="#i8395">"Macro and Micro Options"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1972"></a>
<h3 class="sect2">COMMON_PARSER</h3>
<p class="subhead1"><a id="sthref1973"></a><a id="sthref1974"></a><a id="sthref1975"></a><a id="sthref1976"></a>Purpose</p>
<p>Specifies that the SQL99 syntax for SELECT, INSERT, DELETE, UPDATE and body of the cursor in a DECLARE CURSOR statement will be supported.</p>
<p class="subhead1"><a id="sthref1977"></a>Syntax</p>
<p>COMMON_PARSER={YES | NO}</p>
<p class="subhead1"><a id="sthref1978"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref1979"></a>Usage Notes</p>
<p>Can be entered in the command line.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1980"></a>
<h3 class="sect2">CONFIG</h3>
<p class="subhead2"><a id="sthref1981"></a>Purpose</p>
<p>Specifies the name of a user configuration file.<a id="sthref1982"></a><a id="sthref1983"></a></p>
<p class="subhead2"><a id="sthref1984"></a>Syntax</p>
<p>CONFIG=<span class="italic">filename</span></p>
<p class="subhead2"><a id="sthref1985"></a>Default</p>
<p>None</p>
<p class="subhead2"><a id="sthref1986"></a>Usage Notes</p>
<p>Can be entered only on the command line.</p>
<p>Pro*COBOL can use a configuration file containing preset command-line options. However, you can specify any of several alternative files, called <span class="italic">user configuration files</span>. For more information, see <a href="#i7573">"Entering Precompiler Options"</a>.<a id="sthref1987"></a></p>
<p>You cannot nest configuration files. Therefore, you cannot specify the option CONFIG in a configuration file.</p>
</div>
<!-- class="sect2" -->
<a id="i8969"></a>
<div class="sect2">
<h3 class="sect2">DATE_FORMAT<a id="sthref1988"></a><a id="sthref1989"></a></h3>
<p class="subhead2"><a id="sthref1990"></a>Purpose</p>
<p><a id="sthref1991"></a>Species the string format in which dates are returned.</p>
<p class="subhead2"><a id="sthref1992"></a>Syntax</p>
<p>DATE_FORMAT={ISO | USA | EUR | JIS | LOCAL | '<span class="italic">fmt</span>' (default LOCAL)</p>
<p class="subhead2"><a id="sthref1993"></a>Default</p>
<p>LOCAL</p>
<p class="subhead2"><a id="sthref1994"></a>Usage Notes</p>
<p>Can only be entered on the command line or in a configuration file. The date strings are shown in the following table:</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref1995"></a><a id="sthref1996"></a>Table 14-3 <span class="bold">Formats for Date Strings</span></p>
<table class="cellalignment801" title="Formats for Date Strings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment795">
<th class="cellalignment802" id="r1c1-t5">Format Name</th>
<th class="cellalignment802" id="r1c2-t5">Abbreviation</th>
<th class="cellalignment802" id="r1c3-t5">Date Format</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment795">
<td class="cellalignment803" id="r2c1-t5" headers="r1c1-t5">
<p>International Standards Organization</p>
</td>
<td class="cellalignment803" headers="r2c1-t5 r1c2-t5">
<p>ISO</p>
</td>
<td class="cellalignment803" headers="r2c1-t5 r1c3-t5">
<p>yyyy-mm-dd</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r3c1-t5" headers="r1c1-t5">
<p>USA standard</p>
</td>
<td class="cellalignment803" headers="r3c1-t5 r1c2-t5">
<p>USA</p>
</td>
<td class="cellalignment803" headers="r3c1-t5 r1c3-t5">
<p>mm/dd/yyyy</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r4c1-t5" headers="r1c1-t5">
<p>European standard</p>
</td>
<td class="cellalignment803" headers="r4c1-t5 r1c2-t5">
<p>EUR</p>
</td>
<td class="cellalignment803" headers="r4c1-t5 r1c3-t5">
<p>dd.mm.yyyy</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r5c1-t5" headers="r1c1-t5">
<p>Japanese Industrial Standard</p>
</td>
<td class="cellalignment803" headers="r5c1-t5 r1c2-t5">
<p>JIS</p>
</td>
<td class="cellalignment803" headers="r5c1-t5 r1c3-t5">
<p>yyyy-mm-dd</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r6c1-t5" headers="r1c1-t5">
<p>installation-defined</p>
</td>
<td class="cellalignment803" headers="r6c1-t5 r1c2-t5">
<p>LOCAL</p>
</td>
<td class="cellalignment803" headers="r6c1-t5 r1c3-t5">
<p>Any installation-defined form.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>'<span class="italic">fmt</span>' is a date format model, such as "Month dd, yyyy". See <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for the list of date format model elements.</p>
<p>There is one restriction on the use of the DATE_FORMAT option: All compilation units to be linked together must use the same DATE_FORMAT value. An error occurs when there is a mismatch in the values of DATE_FORMAT across compilation units</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref1997"></a>
<h3 class="sect2">DB2_ARRAY</h3>
<p class="subhead1"><a id="sthref1998"></a><a id="sthref1999"></a><a id="sthref2000"></a>Purpose</p>
<p>Based on this option, the precompiler activates the additional array insert/select syntax.</p>
<p class="subhead1"><a id="sthref2001"></a>Syntax</p>
<p>DB2_ARRAY={YES |NO} <a id="sthref2002"></a><span class="bold"><a id="sthref2003"></a></span></p>
<p class="subhead1"><a id="sthref2004"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref2005"></a>Usage Notes</p>
<p>If this option is set to NO, the Oracle precompiler syntax is supported, otherwise the DB2 insert/select array syntax is supported.</p>
</div>
<!-- class="sect2" -->
<a id="i5411"></a>
<div class="sect2">
<h3 class="sect2">DBMS</h3>
<p class="subhead2"><a id="sthref2006"></a>Purpose</p>
<p>Specifies whether Oracle follows the semantic and syntactic rules of Oracle7 Database, Oracle8<span class="italic">i</span>, or the native version of Oracle (that is, the version to which your application is connected).<a id="sthref2007"></a><a id="sthref2008"></a></p>
<p class="subhead2"><a id="sthref2009"></a>Syntax</p>
<p>DBMS={V7 | V8 | NATIVE}</p>
<p class="subhead2"><a id="sthref2010"></a>Default</p>
<p>NATIVE</p>
<p class="subhead2"><a id="sthref2011"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>With the DBMS option you control the version-specific behavior of Oracle. When DBMS=NATIVE (the default), Oracle follows the semantic and syntactic rules of the native version of Oracle.</p>
</div>
<!-- class="sect2" -->
<a id="i7346"></a>
<div class="sect2">
<h3 class="sect2">DECLARE_SECTION<a id="sthref2012"></a><a id="sthref2013"></a></h3>
<p class="subhead2"><a id="sthref2014"></a>Purpose</p>
<p>Specifies whether or not <span class="italic">only</span> declarations in a Declare Section are allowed as host variables.</p>
<p class="subhead2"><a id="sthref2015"></a>Syntax</p>
<p>DECLARE_SECTION={YES | NO}</p>
<p class="subhead2"><a id="sthref2016"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2017"></a>Usage Notes</p>
<p>Can be entered only on the command line or in a configuration file.</p>
<p>When MODE=ORACLE, use of the BEGIN DECLARE SECTION and END DECLARE SECTION statements are optional, starting with release 8.0 of Pro*COBOL. The DECLARE_SECTION option is provided for backward compatibility with previous releases. DECLARE_SECTION is a micro option of MODE.</p>
<p>This option allows the user to specify MODE=ORACLE together with DECLARE_SECTION=YES to get the same effect that previous releases provided when using MODE=ORACLE alone. (Only variables declared inside the DECLARE statements are allowed as host variables.) For a discussion of precedence of this option, see <a href="#i7608">"Precedence of Option Values"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2018"></a>
<h3 class="sect2">DEFINE</h3>
<p class="subhead2"><a id="sthref2019"></a>Purpose</p>
<p>Specifies a user-defined symbol that is used to include or exclude portions of source code during a conditional precompilation. For more information, see <a href="pco02prc.htm#i6391">"Conditional Precompilations"</a>.<a id="sthref2020"></a><a id="sthref2021"></a></p>
<p class="subhead2"><a id="sthref2022"></a>Syntax</p>
<p>DEFINE=<span class="italic">symbol</span></p>
<p class="subhead2"><a id="sthref2023"></a>Default</p>
<p>None</p>
<p class="subhead2"><a id="sthref2024"></a>Usage Notes</p>
<p>If you enter DEFINE inline, the EXEC ORACLE statement takes the following form:</p>
<pre>
EXEC ORACLE DEFINE <span class="italic">symbol</span> END-EXEC.
</pre></div>
<!-- class="sect2" -->
<a id="i12604"></a>
<div class="sect2">
<h3 class="sect2">DYNAMIC</h3>
<p class="subhead2"><a id="sthref2025"></a>Purpose</p>
<p>This micro option of MODE specifies the descriptor behavior in dynamic SQL Method 4. <a id="sthref2026"></a></p>
<p class="subhead2"><a id="sthref2027"></a>Syntax</p>
<p>DYNAMIC={ORACLE | ANSI}</p>
<p class="subhead2"><a id="sthref2028"></a>Default</p>
<p>ORACLE</p>
<p class="subhead2"><a id="sthref2029"></a>Usage Notes</p>
<p>Cannot be entered inline by use of the EXEC ORACLE OPTION statement.</p>
<p>See the DYNAMIC option settings in <a href="pco10ady.htm#i1001093">"ANSI Dynamic SQL Precompiler Options"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i6859"></a>
<div class="sect2">
<h3 class="sect2"><a id="sthref2030"></a><a id="sthref2031"></a>END_OF_FETCH<a id="sthref2032"></a><a id="sthref2033"></a></h3>
<p class="subhead2"><a id="sthref2034"></a>Purpose</p>
<p>This micro option of MODE specifies which SQLCODE value is returned when an END-OF-FETCH condition occurs after execution of a SQL statement.</p>
<p class="subhead2"><a id="sthref2035"></a>Syntax</p>
<p>END_OF_FETCH={100 | 1403}</p>
<p class="subhead2"><a id="sthref2036"></a>Default</p>
<p>1403</p>
<p class="subhead2"><a id="sthref2037"></a>Usage Notes</p>
<p>Can be entered only on the command line or in a configuration file.</p>
<p>END_OF_FETCH is a micro option of MODE. For further discussion, see <a href="#i8395">"Macro and Micro Options"</a>.</p>
<p>If you specify MODE=ANSI in a configuration file, Pro*COBOL returns the SQLCODE value 100 at the END_OF_FETCH, overriding the default END_OF_FETCH=1403.</p>
<p>If you specify MODE=ANSI and END_OF_FETCH=1403 in the configuration file, then Pro*COBOL will return the SQLCODE value 1403 at the END_OF_FETCH.</p>
<p>If you specify MODE=ANSI in the configuration file and END_OF_FETCH=1403 on the command line, which has a higher precedence than your configuration file, Pro*COBOL will again return the SQLCODE value 1403 at the END_OF_FETCH.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2038"></a>
<h3 class="sect2">ERRORS</h3>
<p class="subhead2"><a id="sthref2039"></a>Purpose</p>
<p>Specifies whether Pro*COBOL error messages are sent to the terminal and listing file or only to the listing file.<a id="sthref2040"></a><a id="sthref2041"></a></p>
<p class="subhead2"><a id="sthref2042"></a>Syntax</p>
<p>ERRORS={YES | NO}</p>
<p class="subhead2"><a id="sthref2043"></a>Default</p>
<p>YES</p>
<p class="subhead2"><a id="sthref2044"></a>Usage Notes</p>
<p>When ERRORS=YES, error messages are sent to the terminal and listing file.</p>
<p>When ERRORS=NO, error messages are sent only to the listing file.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref2045"></a>
<h3 class="sect2">File_ID</h3>
<p class="subhead2"><a id="sthref2046"></a>Purpose</p>
<p>Denotes the unique identifier for the generated Cobol file. The generated files contain a unique number associated with the "SQLCTX" variable. The file_id option can be used to set the value of the SQLCTX variable. The option is useful while precompiling multiple source files, so that the user can ensure unique SQLCTX values associated with the different generated files.</p>
<p class="subhead2"><a id="sthref2047"></a>Syntax</p>
<p>FILE_ID=Range is 0 to 65535</p>
<p class="subhead2"><a id="sthref2048"></a>Default</p>
<p>0</p>
<p class="subhead2"><a id="sthref2049"></a>Usage Notes</p>
<p>The file_id option can be used to directly assign values to "SQLCTX" variable in the generated Cobol file.</p>
</div>
<!-- class="sect2" -->
<a id="i5408"></a>
<div class="sect2">
<h3 class="sect2">FIPS</h3>
<p class="subhead2"><a id="sthref2050"></a>Purpose</p>
<p>Specifies whether extensions to ANSI/ISO SQL are flagged (by the FIPS Flagger). An extension is any SQL element that violates ANSI/ISO format or syntax rules, except privilege enforcement rules.<a id="sthref2051"></a><a id="sthref2052"></a></p>
<p class="subhead2"><a id="sthref2053"></a>Syntax</p>
<p>FIPS={YES | NO}</p>
<p class="subhead2"><a id="sthref2054"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2055"></a>Usage Notes</p>
<p>When FIPS=YES, the FIPS Flagger issues warning (not error) messages if you use an Oracle extension to the Entry level of SQL-92 or use a feature of Entry level SQL-92 in a nonconforming manner.</p>
<p>The following extensions to ANSI/ISO SQL are flagged at precompile time:<a id="sthref2056"></a></p>
<ul>
<li>
<p>Array interface including the FOR clause</p>
</li>
<li>
<p>SQLCA, ORACA, and SQLDA data structures</p>
</li>
<li>
<p>Dynamic SQL including the DESCRIBE statement</p>
</li>
<li>
<p>Embedded PL/SQL blocks</p>
</li>
<li>
<p>Automatic datatype conversion</p>
</li>
<li>
<p>DATE, COMP-3, NUMBER, RAW, LONG RAW, VARRAW, ROWID, and VARCHAR datatypes</p>
</li>
<li>
<p>ORACLE OPTION statement for specifying runtime options</p>
</li>
<li>
<p>EXEC TOOLS statements in user exits</p>
</li>
<li>
<p>CONNECT statement</p>
</li>
<li>
<p>TYPE and VAR datatype equivalencing statements</p>
</li>
<li>
<p>AT <span class="italic">db_name</span> clause</p>
</li>
<li>
<p>DECLARE...DATABASE, ...STATEMENT, and ...TABLE statements</p>
</li>
<li>
<p>SQLWARNING condition in WHENEVER statement</p>
</li>
<li>
<p>DO and STOP actions in WHENEVER statement</p>
</li>
<li>
<p>COMMENT and FORCE TRANSACTION clauses in COMMIT statement</p>
</li>
<li>
<p>FORCE TRANSACTION and TO SAVEPOINT clauses in ROLLBACK statement</p>
</li>
<li>
<p>RELEASE parameter in COMMIT and ROLLBACK statements</p>
</li>
<li>
<p>Optional colon-prefixing of WHENEVER...DO labels and of host variables in the INTO clause</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2057"></a>
<h3 class="sect2">FORMAT</h3>
<p class="subhead2"><a id="sthref2058"></a>Purpose</p>
<p>Specifies the format of COBOL statements.<a id="sthref2059"></a><a id="sthref2060"></a></p>
<p class="subhead2"><a id="sthref2061"></a>Syntax</p>
<p>FORMAT={ANSI | TERMINAL | VARIABLE}</p>
<p class="subhead2"><a id="sthref2062"></a>Default</p>
<p>ANSI</p>
<p class="subhead2"><a id="sthref2063"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The format of input lines is system-dependent. Check your system-specific Oracle manuals, or your COBOL compiler.</p>
<p>When FORMAT=ANSI, the format of input lines conforms as much as possible to the current ANSI standard for COBOL. When FORMAT=TERMINAL, input lines can start in column 1. Example code in this book is in TERMINAL format. Use FORMAT=VARIABLE to allow Flexible B Area Length. See <a href="pco02prc.htm#i5700">"Coding Areas"</a> for a more complete description.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2064"></a>
<h3 class="sect2">HOLD_CURSOR</h3>
<p class="subhead2"><a id="sthref2065"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.<a id="sthref2066"></a><a id="sthref2067"></a></p>
<p class="subhead2"><a id="sthref2068"></a>Syntax</p>
<p>HOLD_CURSOR={YES | NO}</p>
<p class="subhead2"><a id="sthref2069"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2070"></a>Usage Notes</p>
<p>You can use HOLD_CURSOR to improve the performance of your program. For more information, see <a href="pcoadtun.htm#g26568">Appendix C, "Performance Tuning"</a>.</p>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. HOLD_CURSOR controls what happens to the link between the cursor and cursor cache.</p>
<p>When HOLD_CURSOR=NO, after Oracle executes the SQL statement and the cursor is closed, Pro*COBOL marks the link as reusable. The link is reused as soon as the cursor cache entry to which it points is needed for another SQL statement. This frees memory allocated to the private SQL area and releases parse locks.</p>
<p>When HOLD_CURSOR=YES, the link is maintained; Pro*COBOL does not reuse it. This is useful for SQL statements that are executed often because it speeds up subsequent executions and there is no need to re-parse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set HOLD_CURSOR before executing the SQL statement. For inline use with explicit cursors, set HOLD_CURSOR before opening the cursor.</p>
<p>For information showing how the HOLD_CURSOR and RELEASE_CURSOR options interact, see <a href="pcoadtun.htm#g26568">Appendix C, "Performance Tuning"</a>, specifically <a href="pcoadtun.htm#CHEHJFCA">Table C-1, "<span class="bolditalic">HOLD_CURSOR and RELEASE _CURSOR Interactions</span>"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2071"></a>
<h3 class="sect2">HOST</h3>
<p class="subhead2"><a id="sthref2072"></a>Purpose</p>
<p>Specifies the host language to be used.<a id="sthref2073"></a><a id="sthref2074"></a></p>
<p class="subhead2"><a id="sthref2075"></a>Syntax</p>
<p>HOST={COB74 | COBOL}</p>
<p class="subhead2"><a id="sthref2076"></a>Default</p>
<p>COBOL</p>
<p class="subhead2"><a id="sthref2077"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>COB74 refers to the 1974 version of ANSI-approved COBOL. COBOL refers to the 1985 version. Other values might be available on your platform.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2078"></a>
<h3 class="sect2">IMPLICIT_SVPT</h3>
<p class="subhead1"><a id="sthref2079"></a><a id="sthref2080"></a><a id="sthref2081"></a>Purpose</p>
<p>Controls whether an implicit savepoint is taken prior to the start of a new batched insert.</p>
<p class="subhead1"><a id="sthref2082"></a>Syntax</p>
<p>implicit_svpt={YES|NO}</p>
<p class="subhead1"><a id="sthref2083"></a>Default</p>
<p>NO</p>
<p class="subhead1"><a id="sthref2084"></a>Usage Notes</p>
<p>If yes, a savepoint is taken prior to the start of a new batch of rows. If an error occurs on the insert, an implicit "rollback to savepoint" is executed. This option exists for DB2 compatibility, the obvious downside being the extra round-trip.</p>
<p>If no, there is no implicit savepoint taken. If an error occurs on the buffered insert, then it is reported back to the application, but no rollback is executed.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2085"></a>
<h3 class="sect2">INAME</h3>
<p class="subhead2"><a id="sthref2086"></a>Purpose</p>
<p>Specifies the name of the input file.<a id="sthref2087"></a><a id="sthref2088"></a></p>
<p class="subhead2"><a id="sthref2089"></a>Syntax</p>
<p>INAME=<span class="italic">filename</span></p>
<p class="subhead2"><a id="sthref2090"></a>Default</p>
<p>None</p>
<p class="subhead2"><a id="sthref2091"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>All input file names must be unique at precompilation time.</p>
<p>When specifying the name of your input file on the command line, the keyword INAME is optional. For example, in Pro*COBOL, you can specify <span class="italic">myprog.pco</span> instead of INAME=<span class="italic">myprog.pco</span>.</p>
<p>You need not use a file extension when specifying INAME unless the extension is nonstandard. On the UNIX platform, Pro*COBOL assumes the default input file extension <span class="italic">pco</span>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2092"></a>
<h3 class="sect2">INCLUDE</h3>
<p class="subhead2"><a id="sthref2093"></a>Purpose</p>
<p>Specifies a directory path for EXEC SQL INCLUDE files. It only applies to operating systems that use directories.<a id="sthref2094"></a><a id="sthref2095"></a></p>
<p class="subhead2"><a id="sthref2096"></a>Syntax</p>
<p>INCLUDE=<span class="italic">path</span></p>
<p class="subhead2"><a id="sthref2097"></a>Default</p>
<p>Current directory</p>
<p class="subhead2"><a id="sthref2098"></a>Usage Notes</p>
<p>Typically, you use INCLUDE to specify a directory path for the SQLCA and ORACA files. Pro*COBOL searches first in the current directory, then in the directory specified by INCLUDE, and finally in a directory for standard INCLUDE files. Hence, you need not specify a directory path for standard files such as the SQLCA and ORACA.</p>
<p>You must still use INCLUDE to specify a directory path for nonstandard files unless they are stored in the current directory. You can specify more than one path on the command line, as follows:</p>
<pre>
... INCLUDE=<span class="italic">path1</span> INCLUDE=<span class="italic">path2</span> ... 
</pre>
<p>Pro*COBOL searches first in the current directory, then in the directory named by <span class="italic">path1</span>, then in the directory named by <span class="italic">path2</span>, and finally in the directory for standard INCLUDE files.</p>
<p><span class="bold">Note:</span> Pro*COBOL looks for a file in the current directory first&mdash;even if you specify a directory path. Therefore, if the file you want to INCLUDE resides in another directory, make sure no file with the same name resides in the current directory.</p>
<p>The syntax for specifying a directory path is system-specific. Follow the conventions of your operating system.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2099"></a>
<h3 class="sect2">IRECLEN</h3>
<p class="subhead2"><a id="sthref2100"></a>Purpose</p>
<p>Specifies the record length of the input file.<a id="sthref2101"></a><a id="sthref2102"></a></p>
<p class="subhead2"><a id="sthref2103"></a>Syntax</p>
<p>IRECLEN=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2104"></a>Default</p>
<p>80</p>
<p class="subhead2"><a id="sthref2105"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value you specify for IRECLEN should not exceed the value of ORECLEN. The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2106"></a>
<h3 class="sect2">LITDELIM</h3>
<p class="subhead2"><a id="sthref2107"></a>Purpose</p>
<p>The LITDELIM option specifies the delimiters for string constants and literals in the COBOL code generated by Pro*COBOL.<a id="sthref2108"></a></p>
<p class="subhead2"><a id="sthref2109"></a>Syntax</p>
<p>LITDELIM={APOST | QUOTE}</p>
<p class="subhead2"><a id="sthref2110"></a>Default</p>
<p>QUOTE</p>
<p class="subhead2"><a id="sthref2111"></a>Usage Notes</p>
<p>When LITDELIM=APOST, Pro*COBOL uses apostrophes when generating COBOL code. If you specify LITDELIM=QUOTE, quotation marks are used, as in <a id="sthref2112"></a><a id="sthref2113"></a><a id="sthref2114"></a></p>
<pre>
     CALL "SQLROL" USING SQL-TMP0. 
</pre>
<p>In SQL statements, you must use quotation marks to delimit identifiers containing special or lowercase characters, as in</p>
<pre>
     EXEC SQL CREATE TABLE "Emp2" END-EXEC. 
</pre>
<p>but you must use apostrophes to delimit string constants, as in</p>
<pre>
     EXEC SQL SELECT ENAME FROM EMP WHERE JOB = 'CLERK' END-EXEC.
</pre>
<p>Regardless of which delimiters are used in the Pro*COBOL source file, Pro*COBOL generates the delimiters specified by the LITDELIM value.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2115"></a>
<h3 class="sect2">LNAME</h3>
<p class="subhead2"><a id="sthref2116"></a>Purpose</p>
<p>Specifies a nondefault name for the listing file.<a id="sthref2117"></a><a id="sthref2118"></a></p>
<p class="subhead2"><a id="sthref2119"></a>Syntax</p>
<p>LNAME=<span class="italic">filename</span></p>
<p class="subhead2"><a id="sthref2120"></a>Default</p>
<p>Input</p>
<p class="subhead2"><a id="sthref2121"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>By default, the listing file is written to the current directory.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2122"></a>
<h3 class="sect2">LRECLEN</h3>
<p class="subhead2"><a id="sthref2123"></a>Purpose</p>
<p>Specifies the record length of the listing file.<a id="sthref2124"></a><a id="sthref2125"></a></p>
<p class="subhead2"><a id="sthref2126"></a>Syntax</p>
<p>LRECLEN=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2127"></a>Default</p>
<p>132</p>
<p class="subhead2"><a id="sthref2128"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value of LRECLEN can range from 80 through 132. If you specify a value below the range, 80 is used instead. If you specify a value above the range, an error occurs. LRECLEN should exceed IRECLEN by at least 8 to allow for the insertion of line numbers.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2129"></a>
<h3 class="sect2">LTYPE</h3>
<p class="subhead2"><a id="sthref2130"></a>Purpose</p>
<p>Specifies the listing type.<a id="sthref2131"></a><a id="sthref2132"></a></p>
<p class="subhead2"><a id="sthref2133"></a>Syntax</p>
<p>LTYPE={LONG | SHORT | NONE}</p>
<p class="subhead2"><a id="sthref2134"></a>Default</p>
<p>LONG</p>
<p class="subhead2"><a id="sthref2135"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2136"></a><a id="sthref2137"></a>Table 14-4 Types of Listings</p>
<table class="cellalignment801" title="Types of Listings" summary="q" dir="ltr">
<thead>
<tr class="cellalignment795">
<th class="cellalignment802" id="r1c1-t6">Listing Types</th>
<th class="cellalignment802" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment795">
<td class="cellalignment803" id="r2c1-t6" headers="r1c1-t6">
<p>LTYPE=LONG</p>
</td>
<td class="cellalignment803" headers="r2c1-t6 r1c2-t6">
<p>input lines appear in the listing file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r3c1-t6" headers="r1c1-t6">
<p>LTYPE=SHORT</p>
</td>
<td class="cellalignment803" headers="r3c1-t6 r1c2-t6">
<p>input lines do <span class="italic">not</span> appear in the listing file.</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r4c1-t6" headers="r1c1-t6">
<p>LTYPE=NONE</p>
</td>
<td class="cellalignment803" headers="r4c1-t6 r1c2-t6">
<p>no listing file is created.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2138"></a>
<h3 class="sect2">MAX_ROW_INSERT</h3>
<p class="subhead1"><a id="sthref2139"></a><a id="sthref2140"></a><a id="sthref2141"></a>Purpose</p>
<p>Controls the number of rows that need to be buffered before executing the INSERT statement.</p>
<p class="subhead1"><a id="sthref2142"></a>Syntax</p>
<p>max_row_insert={0...1000}</p>
<p class="subhead1"><a id="sthref2143"></a>Default</p>
<p>0</p>
<p class="subhead1"><a id="sthref2144"></a>Usage Notes</p>
<p>Any number greater than zero enables buffered insert feature and buffers that many rows before executing the INSERT statement.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2145"></a>
<h3 class="sect2">MAXLITERAL</h3>
<p class="subhead2"><a id="sthref2146"></a>Purpose</p>
<p>Specifies the maximum length of string literals generated by Pro*COBOL so that compiler limits are not exceeded. For example, if your compiler cannot handle string literals longer than 132 characters, you can specify MAXLITERAL=132 on the command line.<a id="sthref2147"></a><a id="sthref2148"></a></p>
<p class="subhead2"><a id="sthref2149"></a>Syntax</p>
<p>MAXLITERAL=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2150"></a>Default</p>
<p>1024</p>
<p class="subhead2"><a id="sthref2151"></a>Usage Notes</p>
<p>The maximum value of MAXLITERAL is compiler-dependent. The default value is language-dependent, but you may have to specify a lower value. For example, some COBOL compilers cannot handle string literals longer than 132 characters, so you would specify MAXLITERAL=132.</p>
<p>Strings that exceed the length specified by MAXLITERAL are divided during precompilation, then recombined (concatenated) at run time.</p>
<p>You can enter MAXLITERAL inline but your program can set its value just once, and the EXEC ORACLE statement must precede the first EXEC SQL statement. Otherwise, Pro*COBOL issues a warning message, ignores the extra or misplaced EXEC ORACLE statement, and continues processing.</p>
</div>
<!-- class="sect2" -->
<a id="i5412"></a>
<div class="sect2">
<h3 class="sect2">MAXOPENCURSORS</h3>
<p class="subhead2"><a id="sthref2152"></a>Purpose</p>
<p>Specifies the number of concurrently open cursors that Pro*COBOL tries to keep cached.<a id="sthref2153"></a><a id="sthref2154"></a></p>
<p class="subhead2"><a id="sthref2155"></a>Syntax</p>
<p>MAXOPENCURSORS=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2156"></a>Default</p>
<p>10</p>
<p class="subhead2"><a id="sthref2157"></a>Usage Notes</p>
<p>You can use MAXOPENCURSORS to improve the performance of your program. For more information, see <a href="pcoadtun.htm#g26568">Appendix C, "Performance Tuning"</a>.</p>
<p>When precompiling separately, use MAXOPENCURSORS as described in <a href="pco02prc.htm#i6313">"Separate Precompilations"</a>.</p>
<p>MAXOPENCURSORS specifies the <span class="italic">initial</span> size of the SQLLIB cursor cache.</p>
<p>When an implicit statement is executed and HOLD_CURSOR=NO, or an explicit cursor is closed, the cursor entry is marked as reusable. If this statement is issued again and the cursor entry has not been used for another statement, it is reused.</p>
<p>If a new cursor is needed and the number of cursors allocated is less than MAXOPENCURSORS, then the next one in the cache is allocated. Once MAXOPENCCURSORS has been exceeded, Oracle first tries to reuse a previous entry. If there are no free entries, then an additional cache entry is allocated. Oracle continues to do this until the program runs out of memory or the database parameter OPEN_CURSORS is exceeded.</p>
<p>During normal processing, when using HOLD_CURSOR=NO and RELEASE_CURSOR=NO (the default), it is advisable to set MAXOPENCURSORS to no more than 6 less than the database parameter OPEN_CURSORS to allow for the cursors used by the data dictionary to process statements.</p>
<p>As your program's need for concurrently open cursors grows, you might want to re-specify MAXOPENCURSORS to match the need. A value of 45 to 50 is not uncommon, but remember that each cursor requires another private SQL area in the user process memory space. The default value of 10 is adequate for most programs.</p>
</div>
<!-- class="sect2" -->
<a id="i5831"></a>
<div class="sect2">
<h3 class="sect2">MODE</h3>
<p class="subhead2"><a id="sthref2158"></a>Purpose</p>
<p>This macro option specifies whether your program observes Oracle practices or complies with the current ANSI SQL standard.<a id="sthref2159"></a><a id="sthref2160"></a></p>
<p class="subhead2"><a id="sthref2161"></a>Syntax</p>
<p>MODE={ANSI | ISO | ANSI14 | ISO14 | ANSI13 | ISO13 | ORACLE}</p>
<p class="subhead2"><a id="sthref2162"></a>Default</p>
<p>ORACLE</p>
<p class="subhead2"><a id="sthref2163"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p><a id="sthref2164"></a>The following pairs of MODE values are equivalent: ANSI and ISO, ANSI14 and ISO14, ANSI13 and ISO13.</p>
<p>When MODE=ORACLE (the default), your embedded SQL program observes Oracle practices.</p>
<p>When MODE={ANSI14 | ANSI13}, your program complies closely with the current ANSI SQL standard.</p>
<p>When MODE=ANSI, your program complies <span class="italic">fully</span> with the ANSI standard and the following changes go into effect:</p>
<ul>
<li>
<p>You cannot open a cursor that is already open or CLOSE a cursor that is already closed. (When MODE=ORACLE, you can reOPEN an open cursor to avoid re-parsing.)</p>
</li>
<li>
<p>No error message is issued if Oracle assigns a truncated column value to an output host variable.</p>
</li>
</ul>
<p>When MODE={ANSI | ANSI14}, a 4-byte integer variable named SQLCODE or a 5-byte character variable named SQLSTATE must be declared. For more information, see <a href="pco08err.htm#i8677">"Error Handling Alternatives"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i11881"></a>
<div class="sect2">
<h3 class="sect2">NESTED<a id="sthref2165"></a><a id="sthref2166"></a></h3>
<p class="subhead2"><a id="sthref2167"></a>Purpose</p>
<p>Indicates whether GLOBAL clauses in nested programs are to be generated. If the compiler supports nested programs, use YES as the value of NESTED.</p>
<p class="subhead2"><a id="sthref2168"></a>Syntax</p>
<p>NESTED={YES | NO}</p>
<p class="subhead2"><a id="sthref2169"></a>Default</p>
<p>YES</p>
<p class="subhead2"><a id="sthref2170"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
</div>
<!-- class="sect2" -->
<a id="i11884"></a>
<div class="sect2">
<h3 class="sect2">NLS_LOCAL</h3>
<p class="subhead2"><a id="sthref2171"></a>Purpose</p>
<p>The NLS_LOCAL option determines whether <a id="sthref2172"></a>Globalization Support (formerly called NLS) character conversions are performed by the Pro*COBOL runtime library or by the Oracle Server.<a id="sthref2173"></a><a id="sthref2174"></a></p>
<p class="subhead2"><a id="sthref2175"></a>Syntax</p>
<p>NLS_LOCAL={YES | NO}</p>
<p class="subhead2"><a id="sthref2176"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2177"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>This option is for use when passing National Character Set variables to and from the server.</p>
<p>When NLS_LOCAL=YES, the runtime library (SQLLIB) locally performs blank-padding and blank-stripping for host variables that have multibyte Globalization Support datatypes. Continue to use this value only for Pro*COBOL applications written for releases before releases 8.0.</p>
<p>When NLS_LOCAL=YES, because dynamic SQL statements are not processed at precompile time, this option has no effect on dynamic SQL statements.<a id="sthref2178"></a><a id="sthref2179"></a></p>
<p>Also, when NLS_LOCAL=YES, columns storing multibyte Globalization Support data cannot be used in embedded data definition language (DDL) statements. This restriction cannot be enforced when precompiling, so the use of these column types within embedded DDL statements results in an execution error rather than a precompile error.<a id="sthref2180"></a><a id="sthref2181"></a><a id="sthref2182"></a></p>
<p>When NLS_LOCAL=NO, blank-padding and blank-stripping operations are performed by the Oracle Server for host variables that have multibyte Globalization Support datatypes. Use for all new release 8.0, or later, applications.</p>
<p>The environment variable NLS_NCHAR specifies the character set used for National Character Set data. (NCHAR, NVARCHAR2, NCLOB). If it is not specified, the character set defined or defined indirectly by NLS_LANG will be used. See: the NLS_LANG section in the <a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for details.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2183"></a>
<h3 class="sect2">ONAME</h3>
<p class="subhead2"><a id="sthref2184"></a>Purpose</p>
<p>Specifies the name of the output file.<a id="sthref2185"></a><a id="sthref2186"></a></p>
<p class="subhead2"><a id="sthref2187"></a>Syntax</p>
<p>ONAME=<span class="italic">filename</span></p>
<p class="subhead2"><a id="sthref2188"></a>Default</p>
<p>System dependent</p>
<p class="subhead2"><a id="sthref2189"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>Use this option to specify the name of the output file, where the name differs from that of the input file. For example, if you issue</p>
<pre>
procob INAME=my_test
</pre>
<p>the default output filename is <code><span class="codeinlineitalic">my_test.cob</span></code>. If you want the output filename to be <code><span class="codeinlineitalic">my_test_1.cob</span></code>, issue the command</p>
<pre>
procob INAME=my_test ONAME=my_test_1.cob 
</pre>
<p>Note that you should add the <span class="italic">.cob</span> extension to files specified using ONAME. There is no default extension with the ONAME option.</p>
<p><span class="bold">Attention:</span> Oracle recommends that you not let the output filename default, but rather name it explicitly using ONAME.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2190"></a>
<h3 class="sect2">ORACA</h3>
<p class="subhead2"><a id="sthref2191"></a>Purpose</p>
<p>Specifies whether a program can use the Oracle Communications Area (ORACA).<a id="sthref2192"></a><a id="sthref2193"></a></p>
<p class="subhead2"><a id="sthref2194"></a>Syntax</p>
<p>ORACA={YES | NO}</p>
<p class="subhead2"><a id="sthref2195"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2196"></a>Usage Notes</p>
<p>When ORACA=YES, you must place the INCLUDE ORACA statement in your program.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2197"></a>
<h3 class="sect2">ORECLEN</h3>
<p class="subhead2"><a id="sthref2198"></a>Purpose</p>
<p>Specifies the record length of the output file.<a id="sthref2199"></a><a id="sthref2200"></a></p>
<p class="subhead2"><a id="sthref2201"></a>Syntax</p>
<p>ORECLEN=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2202"></a>Default</p>
<p>80</p>
<p class="subhead2"><a id="sthref2203"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The value you specify for ORECLEN should equal or exceed the value of IRECLEN. The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2204"></a>
<h3 class="sect2">OUTLINE</h3>
<p class="subhead1"><a id="sthref2205"></a><a id="sthref2206"></a><a id="sthref2207"></a>Purpose</p>
<p>Indicates that the outline SQL file needs to be generated for the SQL statements.</p>
<p class="subhead1"><a id="sthref2208"></a>Syntax</p>
<p>outline={yes | no | category_name}</p>
<p class="subhead1"><a id="sthref2209"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref2210"></a>Usage Notes</p>
<p>The outline SQL file should be in the DEFAULT category if the value is <code>yes</code> and the generated outline format is</p>
<pre>
DEFAULT_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>If the category name is mentioned, then the SQL file should be generated in the category mentioned. The generated outline format for this is</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>The outline SQL file is not generated if the value is <code>no</code>.</p>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2211"></a>
<h3 class="sect2">OUTLNPREFIX</h3>
<p class="subhead1"><a id="sthref2212"></a><a id="sthref2213"></a><a id="sthref2214"></a>Purpose</p>
<p>Controls the generation of the outline names.</p>
<p class="subhead1"><a id="sthref2215"></a>Syntax</p>
<p>outlnprefix={none | prefix_name}</p>
<p class="subhead1"><a id="sthref2216"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref2217"></a>Usage Notes</p>
<p>If outlnprefix=prefix_name, then the outline format</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;
</pre>
<p>is replaced with <code>&lt;prefix_name&gt;</code> for the outline names.</p>
<p>If the length of the outline name exceeds 30 bytes, then this option is helpful for the user who can just specify the prefix name.</p>
<p>If outlnprefix=none, then the outline names are generated by the system. The generated format is</p>
<pre>
&lt;category_name&gt;_&lt;filename&gt;_&lt;filetype&gt;_&lt;sequence_no&gt;
</pre>
<p>Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, and/or outline=false, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2218"></a>
<h3 class="sect2">PAGELEN</h3>
<p class="subhead2"><a id="sthref2219"></a>Purpose</p>
<p>Specifies the number of lines for each physical page of the listing file.<a id="sthref2220"></a><a id="sthref2221"></a></p>
<p class="subhead2"><a id="sthref2222"></a>Syntax</p>
<p>PAGELEN=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2223"></a>Default</p>
<p>66</p>
<p class="subhead2"><a id="sthref2224"></a>Usage Notes</p>
<p>Cannot be entered inline. The maximum value allowed is system-dependent.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2225"></a>
<h3 class="sect2">PICN_ENDIAN</h3>
<p class="subhead1"><a id="sthref2226"></a><a id="sthref2227"></a><a id="sthref2228"></a>Purpose</p>
<p>Maintains platform endianness (little endian for Linux and Windows; big endian for Solaris) in PIC N variables.</p>
<p class="subhead1"><a id="sthref2229"></a>Syntax</p>
<p>picn_endian={BIG | OS}</p>
<p class="subhead1"><a id="sthref2230"></a>Default</p>
<p>BIG</p>
<p class="subhead1"><a id="sthref2231"></a>Usage Notes</p>
<p>If picn_endian=big, then PIC N variables are bound with character set ID AL16UTF16.</p>
<p>If picn_endian=os then PIC N variables are bound with character set ID UCS2.</p>
<p>The default value for this option is "big" to preserve the current behavior. This option is ignored if NLS_NCHAR is not AL16UTF16.</p>
<p>Character set form for PIC N variables can be set by using the existing Pro*Cobol command line option: charset_picn={nchar_charset | db_charset}</p>
</div>
<!-- class="sect2" -->
<a id="BCEFJFDA"></a>
<div class="sect2">
<h3 class="sect2">PICX<a id="sthref2232"></a><a id="sthref2233"></a></h3>
<p class="subhead2"><a id="sthref2234"></a>Purpose</p>
<p>Specifies the default datatype of PIC X variables.</p>
<p class="subhead2"><a id="sthref2235"></a>Syntax</p>
<p>PICX={CHARF | VARCHAR2}</p>
<p class="subhead2"><a id="sthref2236"></a>Default</p>
<p>CHARF</p>
<p class="subhead2"><a id="sthref2237"></a>Usage Notes</p>
<p>Can be entered only on the command line or in a configuration file.</p>
<p>Starting in Pro*COBOL 8.0, the default datatype of PIC X, N, or G variables was changed from VARCHAR2 to CHARF. PICX is provided for backward compatibility.</p>
<p>This new default behavior is consistent with the normal COBOL move semantics. Note that this is a change in behavior for the case where you are inserting a PIC X variable (with MODE=ORACLE) into a VARCHAR2 column. Any trailing blanks which had formerly been trimmed will be preserved. Note also, that the new default lessens the occurrence of the following anomaly: Using a PIC X bind variable initialized with trailing blanks in a WHERE clause would never match a value with the same number of trailing blanks which was stored in a char column because the bind variable's trailing blanks were stripped before the comparison.</p>
<p>When PICX=VARCHAR2, Oracle treats local CHAR variables in a PL/SQL block like variable-length character values. When PICX=CHARF, however, Oracle treats the CHAR variables like ANSI-compliant, fixed-length character values. See <a href="pco04dat.htm#i24085">"Default for PIC X"</a> for an extensive discussion.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2238"></a>
<h3 class="sect2">PREFETCH</h3>
<p class="subhead2"><a id="sthref2239"></a>Purpose</p>
<p>Use this option to speed up queries by pre-fetching a given number of rows.<a id="sthref2240"></a><a id="sthref2241"></a></p>
<p class="subhead2"><a id="sthref2242"></a>Syntax</p>
<p>PREFETCH=<span class="italic">integer</span></p>
<p class="subhead2"><a id="sthref2243"></a>Default</p>
<p>1</p>
<p class="subhead2"><a id="sthref2244"></a>Usage Notes</p>
<p>Can be used in a configuration file or on the command-line. The value of the integer is used for execution of all queries using explicit cursors, subject to the rules of precedence.</p>
<p>When used in-line it must be placed before OPEN statements with explicit cursors. Then the number of rows pre-fetched when that OPEN is done is determined by the last in-line PREFETCH option in effect.</p>
<p>The PREFETCH default is 1. To turn off prefetching, use PREFETCH=0 on the command line.</p>
<p>Prefetching is turned off when LONG or LOB columns are being accessed. PREFETCH is used to enhance the performance of single row fetches. PREFETCH values have no effect when doing array fetches, regardless of which value is assigned.</p>
<p>There is no single <span class="italic">perfect</span> prefetch number that can be used to assist all the fetches in an application.</p>
<p>Therefore, when using the PREFETCH option, you should test different values to give a general improvement across all statements in the program. Note that if certain statements need to be tuned individually, the PREFETCH option can be specified in line using EXEC ORACLE OPTION. Note that this will affect <span class="italic">all</span> fetch statements that follow the command in your program. Select the appropriate prefetch number to enhance the performance of any particular FETCH statement. To achieve this individual prefetch count, you should use the inline prefetch option. (Rather than from the command line.)</p>
<p>The maximum value is 9999. See <a href="pco05sql.htm#i6941">"The PREFETCH Precompiler Option"</a> for further discussion.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2245"></a>
<h3 class="sect2">RELEASE_CURSOR</h3>
<p class="subhead2"><a id="sthref2246"></a>Purpose</p>
<p>Specifies how the cursors for SQL statements and PL/SQL blocks are handled in the cursor cache.<a id="sthref2247"></a><a id="sthref2248"></a></p>
<p class="subhead2"><a id="sthref2249"></a>Syntax</p>
<p>RELEASE_CURSOR={YES | NO}</p>
<p class="subhead2"><a id="sthref2250"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2251"></a>Usage Notes</p>
<p>You can use RELEASE_CURSOR to improve the performance of your program. For more information, see .</p>
<p>When a SQL data manipulation statement is executed, its associated cursor is linked to an entry in the cursor cache. The cursor cache entry is in turn linked to an Oracle private SQL area, which stores information needed to process the statement. RELEASE_CURSOR controls what happens to the link between the cursor cache and private SQL area.</p>
<p>When RELEASE_CURSOR=YES, after Oracle executes the SQL statement and the cursor is closed, Pro*COBOL immediately removes the link. This frees memory allocated to the private SQL area and releases parse locks. To make sure that associated resources are freed when you CLOSE a cursor, you must specify RELEASE_CURSOR=YES.</p>
<p>When RELEASE_CURSOR=NO, the link is maintained. Pro*COBOL does not reuse the link unless the number of open cursors exceeds the value of MAXOPENCURSORS. This is useful for SQL statements that are executed often because it speeds up subsequent executions. There is no need to re-parse the statement or allocate memory for an Oracle private SQL area.</p>
<p>For inline use with implicit cursors, set RELEASE_CURSOR before executing the SQL statement. For inline use with explicit cursors, set RELEASE_CURSOR before opening the cursor.</p>
<p>Note that RELEASE_CURSOR=YES overrides HOLD_CURSOR=YES. For information showing how these two options interact, see <a href="pcoadtun.htm#g26568">Appendix C, "Performance Tuning"</a>, specifically <a href="pcoadtun.htm#CHEHJFCA">Table C-1, "<span class="bolditalic">HOLD_CURSOR and RELEASE _CURSOR Interactions</span>"</a>.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2252"></a>
<h3 class="sect2">RUNOUTLINE</h3>
<p class="subhead1"><a id="sthref2253"></a><a id="sthref2254"></a><a id="sthref2255"></a>Purpose</p>
<p>Provides the developer with the option of executing "create outline" statements either by using precompiler or by the developer manually at a later time.</p>
<p class="subhead1"><a id="sthref2256"></a>Syntax</p>
<p>runoutline={yes | no}</p>
<p class="subhead1"><a id="sthref2257"></a>Default</p>
<p>no</p>
<p class="subhead1"><a id="sthref2258"></a>Usage Notes</p>
<p>If runoutline=yes, then the generated 'create outline' statements are executed by the precompiler/translator at the end of a successful precompilation.</p>
<p>The outline option should be set to true or category_name when runoutline is used. Semantic check should be full when this option is turned on, which means option sqlcheck=full/semantics. If sqlcheck=syntax/limited/none, then error will be generated.</p>
</div>
<!-- class="sect2" -->
<a id="i5833"></a>
<div class="sect2">
<h3 class="sect2">SELECT_ERROR</h3>
<p class="subhead2"><a id="sthref2259"></a>Purpose</p>
<p>Specifies whether your program generates an error when a SELECT statement returns more than one row or more rows than a host array can accommodate.<a id="sthref2260"></a><a id="sthref2261"></a></p>
<p class="subhead2"><a id="sthref2262"></a>Syntax</p>
<p>SELECT_ERROR={YES | NO}</p>
<p class="subhead2"><a id="sthref2263"></a>Default</p>
<p>YES</p>
<p class="subhead2"><a id="sthref2264"></a>Usage Notes</p>
<p>When SELECT_ERROR=YES, an error is generated if a single-row select returns too many rows or an array select returns more rows than the host array can accommodate.</p>
<p>When SELECT_ERROR=NO, no error is generated when a single-row select returns too many rows or when an array select returns more rows than the host array can accommodate.</p>
<p>Whether you specify YES or NO, a random row is selected from the table. To ensure a specific ordering of rows, use the ORDER BY clause in your SELECT statement. When SELECT_ERROR=NO and you use ORDER BY, Oracle returns the first row, or the first <span class="italic">n</span> rows if you are selecting into an array. When SELECT_ERROR=YES, whether or not you use ORDER BY, an error is generated if too many rows are returned.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2265"></a>
<h3 class="sect2">SQLCHECK</h3>
<p class="subhead2"><a id="sthref2266"></a>Purpose</p>
<p>Specifies the type and extent of syntactic and semantic checking.<a id="sthref2267"></a><a id="sthref2268"></a>.</p>
<p>When SQLCHECK=SEMANTICS or FULL, the SQL statements are packaged/bundled into an IDL objects using a generic grammar during parsing. The generic grammar will not try to understand the SQL syntax, it can only identify the host variables, indicator variables, and the possible SQL identifiers. During the semantic phase, the validity of the host and indicator variables are checked in the same manner it is now being done for SQL. The semantics like the table name ,column names,types will be checked in the same way it is now being handled for SQL.</p>
<p>The new unified parser:</p>
<ol>
<li>
<p>Precompiles all the existing precompiler applications.</p>
</li>
<li>
<p>Supports the following SQL statements completely (all clauses of these SQL statements):</p>
<ol>
<li>
<p>SELELCT statement</p>
</li>
<li>
<p>INSERT statement</p>
</li>
<li>
<p>DELETE statement</p>
</li>
<li>
<p>UPDATE statement</p>
</li>
<li>
<p>Body of the cursor in a DECLARE CURSOR statement</p>
</li>
</ol>
</li>
</ol>
<p class="subhead2"><a id="sthref2269"></a>Syntax</p>
<p>SQLCHECK={SEMANTICS | FULL | SYNTAX | LIMITED}</p>
<p class="subhead2"><a id="sthref2270"></a>Default</p>
<p>SYNTAX</p>
<p class="subhead2"><a id="sthref2271"></a>Usage Notes</p>
<p>The values SEMANTICS and FULL are equivalent, as are the values SYNTAX and LIMITED.</p>
<p>Pro*COBOL can help you debug a program by checking the syntax and semantics of embedded SQL statements and PL/SQL blocks. Any errors found are reported at precompile time.</p>
<p>You control the level of checking by entering the SQLCHECK option inline or on the command line, or both inline and on the command line. However, the level of checking you specify inline cannot be higher than the level you specify (or accept by default) on the command line.</p>
<p>Pro*COBOL generates an error when PL/SQL reserved words are used in SQL statements, even though the SQL statements are not themselves PL/SQL. If a PL/SQL reserved word must be used as an identifier, you can enclose it in double-quotes (").</p>
<p>When SQLCHECK=SEMANTICS, Pro*COBOL checks the syntax and semantics of</p>
<ul>
<li>
<p>Data manipulation statements such as INSERT and UPDATE</p>
</li>
<li>
<p>PL/SQL blocks</p>
</li>
</ul>
<p>However, Pro*COBOL checks only the syntax of remote data manipulation statements (those using the AT <span class="italic">db_name</span> clause).</p>
<p>Pro*COBOL gets the information for a semantic check from embedded DECLARE TABLE statements or, if you specify the option USERID, by connecting to Oracle and accessing the data dictionary. You need not connect to Oracle if every table referenced in a data manipulation statement or PL/SQL block is defined in a DECLARE TABLE statement.</p>
<p>If you connect to Oracle but some information cannot be found in the data dictionary, you must use DECLARE TABLE statements to supply the missing information. During precompilation, a DECLARE TABLE definition overrides a data dictionary definition if they conflict.</p>
<p>Specify SQLCHECK=SEMANTICS when precompiling new programs. If you embed PL/SQL blocks in a host program, you <span class="italic">must</span> specify SQLCHECK=SEMANTICS and the option USERID.</p>
<p>When SQLCHECK=SEMANTICS or FULL, the SQL statements are first locally parsed. The verification of the host and indicator variables, and checking for the validity of SQL identifiers is done by using embedded DECLARE TABLE statement or by connecting to server when userid is specified in command line. Now the parsing is done twice when SQLCHECK = SEMANTICS or FULL once by the precompiler and once by the PL/SQL. When a new syntax is made available by SQL, the precompiler fails on the new syntax before calling PL/SQL interfaces if the local SQL grammar is not updated to accept the new syntax.</p>
<p>When SQLCHECK=SYNTAX, Pro*COBOL checks the syntax of data manipulation statements. The SQL statements are locally parsed. With this command line option, the precompiler does not verify the table name or column names. When SQLCHECK=SYNTAX, the syntax of the SQL statements is checked by using the client side SQL interface.</p>
<p>No semantic checking is done. DECLARE TABLE statements are ignored and PL/SQL blocks are not allowed. When checking data manipulation statements, Pro*COBOL uses Oracle syntax rules, which are downwardly compatible. Specify SQLCHECK=SYNTAX when migrating your precompiled programs.</p>
<p><a href="#g33513">Table 14-5</a> summarizes the checking done by SQLCHECK. For more information about syntactic and semantic checking, see <a href="pcoaechk.htm#g4515">Appendix D, "Syntactic and Semantic Checking"</a>.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref2272"></a><a id="g33513"></a>Table 14-5 Checking Done by SQLCHECK</p>
<table class="cellalignment801" title="Checking Done by SQLCHECK" summary="q" dir="ltr">
<thead>
<tr class="cellalignment795">
<th class="cellalignment802" id="r1c1-t7">-</th>
<th class="cellalignment802" id="r1c2-t7">SQLCHECK=SEMANTICS</th>
<th class="cellalignment802" id="r1c3-t7">-</th>
<th class="cellalignment802" id="r1c4-t7">SQLCHECK=SYNTAX</th>
<th class="cellalignment802" id="r1c5-t7">-</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment795">
<td class="cellalignment803" id="r2c1-t7" headers="r1c1-t7">
<p>-</p>
</td>
<td class="cellalignment803" headers="r2c1-t7 r1c2-t7">
<p>Syntax</p>
</td>
<td class="cellalignment803" headers="r2c1-t7 r1c3-t7">
<p>Semantics</p>
</td>
<td class="cellalignment803" headers="r2c1-t7 r1c4-t7">
<p>Syntax</p>
</td>
<td class="cellalignment803" headers="r2c1-t7 r1c5-t7">
<p>Semantics</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r3c1-t7" headers="r1c1-t7">
<p>DML</p>
</td>
<td class="cellalignment803" headers="r3c1-t7 r1c2-t7">
<p><span class="bold">X</span></p>
</td>
<td class="cellalignment803" headers="r3c1-t7 r1c3-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r3c1-t7 r1c4-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r3c1-t7 r1c5-t7">
<p>-</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r4c1-t7" headers="r1c1-t7">
<p>Remote DML</p>
</td>
<td class="cellalignment803" headers="r4c1-t7 r1c2-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r4c1-t7 r1c3-t7">
<p>-</p>
</td>
<td class="cellalignment803" headers="r4c1-t7 r1c4-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r4c1-t7 r1c5-t7">
<p>-</p>
</td>
</tr>
<tr class="cellalignment795">
<td class="cellalignment803" id="r5c1-t7" headers="r1c1-t7">
<p>PL/SQL</p>
</td>
<td class="cellalignment803" headers="r5c1-t7 r1c2-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r5c1-t7 r1c3-t7">
<p>X</p>
</td>
<td class="cellalignment803" headers="r5c1-t7 r1c4-t7">
<p>-</p>
</td>
<td class="cellalignment803" headers="r5c1-t7 r1c5-t7">
<p>-</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="sthref2273"></a>Restrictions of Unified Parser</p>
<p>The restrictions of unified parser for Pro*COBOL are:</p>
<ul>
<li>
<p>Pro*COBOL does not support variables without a ':' (colon).</p>
</li>
<li>
<p>Define tables cannot be used. In CSF mode, plsql fails when <code>declare table</code> statement is passed to plsql.</p>
</li>
<li>
<p>The following example fails if <code>sqlcheck=syntax</code> and <code>common_parser=yes</code> is used:</p>
<pre>
select ename into :empname from emp@dblink;
</pre>
<p>In earlier versions, only local parsing is done when sqlcheck=syntax is used. But now when <code>sqlcheck=syntax</code> and <code>common_parser=yes</code>, the statement is just bundled and sent to pcisyn(). PLSQL fails if connection is not there when dblinks are used.</p>
<p>The above statement can be precompiled with:</p>
<pre>
sqlcheck=full userid=&lt;userid&gt; common_parser=yes
</pre></li>
<li>
<p>Error handling for insert does not follow the usual sequence. Consider the following statement where XYZ is a group item.</p>
<pre>
insert into emp (empno, ename) values (:XYZ)
</pre>
<p>PLSQL does not allow group items or structures while doing syntax check for insert statements (restriction from PLSQL.). It expects that the group item be broken into the individual elements for inserts. So the precompiler should expand the above statement to <code>insert into emp (empno, ename) values (:b1,:b2)</code> in the syntax phase itself.</p>
<p>This expansion is not possible in syntax phase. Therefore, <code>pcisyn()</code> is not called in syntax phase of precompiler the way it is done for other statements. The statement is deferred till semantic phase of precompiler for insert statement only. The net effect is that the error messages might not be following the usual sequence. For example:</p>
<pre>
EXEC SQL insert into emp (empno, ename) alues (:XYZ) END-EXEC.
                                         ^^^^^ syntax error at 'alues'
 EXEC SQL select ename into :empname fro emp END-EXEC.  
                                     ^^^ syntax error at 'fro'
</pre>
<p>Ideally error sequence should be as follows:</p>
<pre>
syntax error at 'alues' in INSERT
syntax error at 'fro' in SELECT
</pre>
<p>Because of the restrictions discussed earlier, the error sequence will be:</p>
<pre>
syntax error at 'fro' in SELECT
syntax error at 'alues' in INSERT
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The line numbers will be there in the reported errors. Therefore, Pro*Cobol programmers can identify the line very easily, even though it is not in the order used in the program.</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2274"></a>
<h3 class="sect2">STMT_CACHE</h3>
<p class="subhead2"><a id="sthref2275"></a>Purpose</p>
<p>Denotes the Statement cache size for the dynamic SQL statements.<a id="sthref2276"></a><a id="sthref2277"></a></p>
<p class="subhead2"><a id="sthref2278"></a>Syntax</p>
<p>STMT_CACHE = Range is 0 to 65535</p>
<p class="subhead2"><a id="sthref2279"></a>Default</p>
<p>0</p>
<p class="subhead2"><a id="sthref2280"></a>Usage Notes</p>
<p>The stmt_cache option can be set to hold the anticipated number of distinct dynamic SQL statements in the application.</p>
</div>
<!-- class="sect2" -->
<a id="i12603"></a>
<div class="sect2">
<h3 class="sect2">TYPE_CODE</h3>
<p class="subhead2"><a id="sthref2281"></a>Purpose</p>
<p>This micro option of MODE specifies whether ANSI or Oracle datatype codes are used in ANSI dynamic SQL method 4. Its setting is the same as the setting of MODE option.<a id="sthref2282"></a><a id="sthref2283"></a></p>
<p class="subhead2"><a id="sthref2284"></a>Syntax</p>
<p>TYPE_CODE={ORACLE | ANSI}</p>
<p class="subhead2"><a id="sthref2285"></a>Default</p>
<p>ORACLE</p>
<p class="subhead2"><a id="sthref2286"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>See the possible option settings in<a href="pco10ady.htm#g1016234">Table 10-3</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i10781"></a>
<div class="sect2">
<h3 class="sect2">UNSAFE_NULL</h3>
<p class="subhead2"><a id="sthref2287"></a>Purpose</p>
<p>Specifying UNSAFE_NULL=YES prevents generation of ORA-01405 messages when fetching NULLs without using indicator variables.<a id="sthref2288"></a><a id="sthref2289"></a></p>
<p class="subhead2"><a id="sthref2290"></a>Syntax</p>
<p>UNSAFE_NULL={YES | NO}</p>
<p class="subhead2"><a id="sthref2291"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2292"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>The UNSAFE_NULL=YES is allowed only when MODE=ORACLE.</p>
<p>The UNSAFE_NULL option has no effect on host variables in an embedded PL/SQL block. You <span class="italic">must</span> use indicator variables to avoid ORA-01405 errors.</p>
<p>When UNSAFE_NULL=YES, no error is returned if a SELECT or FETCH statement selects a NULL, and there is no indicator variable associated with the output host variable. When UNSAFE_NULL=NO, selecting or fetching a NULL column or expression into a host variable that has no associated indicator variable causes an error (SQLSTATE is <code>22002</code>; SQLCODE is ORA-01405).</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2293"></a>
<h3 class="sect2">USERID</h3>
<p class="subhead2"><a id="sthref2294"></a>Purpose</p>
<p>Specifies an Oracle username and password.<a id="sthref2295"></a><a id="sthref2296"></a></p>
<p class="subhead2"><a id="sthref2297"></a>Syntax</p>
<p>USERID=<span class="italic">username/password[@dbname]</span></p>
<p class="subhead2"><a id="sthref2298"></a>Default</p>
<p>None</p>
<p class="subhead2"><a id="sthref2299"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When SQLCHECK=SEMANTICS, if you want Pro*COBOL to get needed information by connecting to Oracle and accessing the data dictionary, you must also specify USERID. The database alias is optional. Do not enter the brackets.</p>
</div>
<!-- class="sect2" -->
<a id="i7627"></a>
<div class="sect2">
<h3 class="sect2">VARCHAR<a id="sthref2300"></a></h3>
<p class="subhead2"><a id="sthref2301"></a>Purpose</p>
<p>The VARCHAR option instructs Pro*COBOL to treat the COBOL group item described in <a href="pco05sql.htm#g16518">Chapter 5, "Embedded SQL"</a> as a VARCHAR datatype.<a id="sthref2302"></a></p>
<p class="subhead2"><a id="sthref2303"></a>Syntax</p>
<p>VARCHAR={YES | NO}</p>
<p class="subhead2"><a id="sthref2304"></a>Default</p>
<p>NO</p>
<p class="subhead2"><a id="sthref2305"></a>Usage Notes</p>
<p>Cannot be entered inline.</p>
<p>When VARCHAR=YES, the implicit group item described in <a href="pco05sql.htm#g16518">Chapter 5, "Embedded SQL"</a> is accepted as a VARCHAR external datatype with a length field and a string field.</p>
<p>When VARCHAR=NO, Pro*COBOL does not accept the implicit group items as VARCHAR external datatypes.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref2306"></a>
<h3 class="sect2">XREF</h3>
<p class="subhead2"><a id="sthref2307"></a>Purpose</p>
<p>Specifies whether a cross-reference section is included in the listing file.<a id="sthref2308"></a><a id="sthref2309"></a></p>
<p class="subhead2"><a id="sthref2310"></a>Syntax</p>
<p>XREF={YES | NO}</p>
<p class="subhead2"><a id="sthref2311"></a>Default</p>
<p>YES</p>
<p class="subhead2"><a id="sthref2312"></a>Usage Notes</p>
<p>When XREF=YES, cross references are included for host variables, cursor names, and statement names. The cross references show where each object is defined and referenced in your program.</p>
<p>When XREF=NO, the cross-reference section is not included.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment794">
<tr>
<td class="cellalignment803">
<table class="cellalignment799">
<tr>
<td class="cellalignment798"><a href="pco13lob.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment798"><a href="pcoabops.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment806">
<table class="cellalignment797">
<tr>
<td class="cellalignment798"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment798"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment798"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment798"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment798"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment798"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
