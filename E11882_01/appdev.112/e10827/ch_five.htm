<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Running SQL*Module</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2009-08-02T18:45:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="SQL*Module for Ada Programmer's Guide" />
<meta name="dcterms.identifier" content="E10827-01" />
<meta name="dcterms.isVersionOf" content="ZZMOD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ch_four.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch_six.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10827.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/15</span> <!-- End Header --><a id="g1018019"></a><a id="i1012165"></a>
<h1 class="chapter"><span class="secnum">5</span> Running SQL*Module</h1>
<p>This chapter describes</p>
<ul>
<li>
<p><a href="#i1012200">SQL*Module Input and Output</a></p>
</li>
<li>
<p><a href="#i1012332">Invoking SQL*Module</a></p>
</li>
<li>
<p><a href="#i1012354">Case Sensitivity in Program Names, Option Names, and Values</a></p>
</li>
<li>
<p><a href="#i1012380">How to Specify Command-Line Options</a></p>
</li>
<li>
<p><a href="#i1012460">Input Files</a></p>
</li>
<li>
<p><a href="#i1012471">Output Files</a></p>
</li>
<li>
<p><a href="#i1012524">Command-Line Options</a></p>
</li>
<li>
<p><a href="#i1012894">Compiling and Linking</a></p>
</li>
</ul>
<a id="i1012200"></a>
<div class="sect1">
<h2 class="sect1">SQL*Module Input and Output</h2>
<p>This section reviews the different ways that you can use the SQL*Module compiler. This material was discussed in detail in <a href="ch_two.htm#g1019029">Chapter 2, "Module Language"</a> and <a href="ch_three.htm#g1011747">Chapter 3, "Accessing Stored Procedures"</a>; here it is presented in terms of the ways that you run the compiler, using the command-line options to get different SQL*Module functionality.</p>
<div class="sect2"><a id="sthref217"></a>
<h3 class="sect2">Input sources</h3>
<p>Input to the compiler can come from two sources:</p>
<ul>
<li>
<p>module files written according to the SQL standard Module Language specifications, as described in <a href="ch_two.htm#g1019029">Chapter 2, "Module Language"</a> of this Guide</p>
</li>
<li>
<p>stored packages and procedures in an Oracle database (see <a href="ch_three.htm#g1011747">Chapter 3, "Accessing Stored Procedures"</a>)</p>
</li>
</ul>
<p>You use a standard text editor to create module files, just as you would create a host language application.</p>
<p>Stored procedures can be standalone procedures, or they can be encapsulated in a stored package. You normally create PL/SQL code for stored packages and procedures using a text editor, and then store it in a database using an Oracle tool such as SQL*Plus. You can also use SQL*Module to encapsulate Module Language procedures in a package, and store them in the database.<a id="sthref218"></a></p>
</div>
<!-- class="sect2" -->
<a id="i1012222"></a>
<div class="sect2">
<h3 class="sect2">Output Files</h3>
<p>The <span class="italic">output source file</span> is always the host language code file that SQL*Module generates from the input source. There are also other output files, such as the <span class="italic">listing file</span> and <span class="italic">specification file</span>. You can run SQL*Module and generate <span class="italic">no</span> output source file, for example if you just want to store procedures in the database from a Module Language input file, or you just want to generate a listing file.</p>
<p>You compile output source files using the host language compiler, and link the resulting object files together with the host application's object files to produce the executable program. See the section <a href="#i1012894">"Compiling and Linking"</a> for more information about handling output files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
While many of the examples in this chapter assume, for simplicity, that the input and output files are in the same directory, this does not have to be the case. Input and output files can be in separate directories, and you can use the various NAME options to specify the source of input, or the destination of output.</div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref219"></a>
<h3 class="sect2">Determining the Input Source</h3>
<p>There are three sources of input for SQL*Module, and four ways to determine the input:</p>
<ol>
<li>
<p>When compiling a module written in Module Language, the source is the Module Language code file.</p>
</li>
<li>
<p>When generating RPC stubs from stored procedures, there is no input file. The source of the input is the stored package in the database.</p>
</li>
<li>
<p>When creating a stored package in the database from a Module Language module file, the source is the Module Language file.</p>
</li>
<li>
<p>You can combine methods 1 and 2 in one invocation of SQL*Module. A package in the database is created from the Module Language module file, and an output file that contains RPC stubs to call the database package procedures is produced.</p>
</li>
</ol>
<p>Methods 1 and 4 are the most common ways to use SQL*Module. Method 1 is described in <a href="ch_two.htm#g1019029">Chapter 2, "Module Language"</a> of this Guide, method 2 in <a href="ch_three.htm#g1011747">Chapter 3, "Accessing Stored Procedures"</a>. Methods 3 and 4 are much more specialized, and are described in <a href="ch_three.htm#g1011747">Chapter 3, "Accessing Stored Procedures"</a>.</p>
<p>STORE_PACKAGE</p>
<p>Determines whether SQL*Module should store a package in the database.</p>
<p>RPC_GENERATE</p>
<p>Determines whether an interface procedure output file is produced. When you specify the option RPC_GENERATE as YES, the option PNAME specifies the name of the package in the database that provides the input source.</p>
<p><a href="#CACEEJJG">Table 5-1</a> shows the how the command-line option values for STORE_PACKAGE and RPC_GENERATE, together with the values for INAME and PNAME, determine the input source.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref220"></a><a id="CACEEJJG"></a>Table 5-1 Datatypes</p>
<table class="cellalignment845" title="Datatypes" summary="table" dir="ltr">
<thead>
<tr class="cellalignment839">
<th class="cellalignment846" id="r1c1-t3">Input Source</th>
<th class="cellalignment846" id="r1c2-t3" colspan="4">Options</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment839">
<td class="cellalignment847" id="r2c1-t3" headers="r1c1-t3">&nbsp;</td>
<td class="cellalignment847" headers="r2c1-t3 r1c2-t3">
<p>STORE_</p>
<p>PACKAGE</p>
</td>
<td class="cellalignment847" headers="r2c1-t3 r1c2-t3">
<p>RPC_</p>
<p>GENERATE</p>
</td>
<td class="cellalignment847" headers="r2c1-t3 r1c2-t3">
<p>INAME</p>
</td>
<td class="cellalignment847" headers="r2c1-t3 r1c2-t3">
<p>PNAME</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r3c1-t3" headers="r1c1-t3">
<p>(1) Module source file</p>
</td>
<td class="cellalignment847" headers="r3c1-t3 r1c2-t3">
<p>=NO</p>
</td>
<td class="cellalignment847" headers="r3c1-t3 r1c2-t3">
<p>=NO</p>
</td>
<td class="cellalignment847" headers="r3c1-t3 r1c2-t3">
<p>Module file name</p>
</td>
<td class="cellalignment847" headers="r3c1-t3 r1c2-t3">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r4c1-t3" headers="r1c1-t3">
<p>(2) Procedure already stored in database</p>
</td>
<td class="cellalignment847" headers="r4c1-t3 r1c2-t3">
<p>=NO</p>
</td>
<td class="cellalignment847" headers="r4c1-t3 r1c2-t3">
<p>=YES</p>
</td>
<td class="cellalignment847" headers="r4c1-t3 r1c2-t3">
<p>N/A</p>
</td>
<td class="cellalignment847" headers="r4c1-t3 r1c2-t3">
<p>Stored package or procedure name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r5c1-t3" headers="r1c1-t3">
<p>(3) Module file to create SPs in database</p>
</td>
<td class="cellalignment847" headers="r5c1-t3 r1c2-t3">
<p>=YES</p>
</td>
<td class="cellalignment847" headers="r5c1-t3 r1c2-t3">
<p>=NO</p>
</td>
<td class="cellalignment847" headers="r5c1-t3 r1c2-t3">
<p>Module file name</p>
</td>
<td class="cellalignment847" headers="r5c1-t3 r1c2-t3">
<p>Database package name (if not specified, becomes same as module filename)</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r6c1-t3" headers="r1c1-t3">
<p>(4) Store module procedures, then do (2)</p>
</td>
<td class="cellalignment847" headers="r6c1-t3 r1c2-t3">
<p>=YES</p>
</td>
<td class="cellalignment847" headers="r6c1-t3 r1c2-t3">
<p>=YES</p>
</td>
<td class="cellalignment847" headers="r6c1-t3 r1c2-t3">
<p>Module file name</p>
</td>
<td class="cellalignment847" headers="r6c1-t3 r1c2-t3">
<p>Database package name (if not specified, becomes same as module filename)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See the section <a href="#i1012524">"Command-Line Options"</a> for a detailed description of these options. See the section <a href="#i1012894">"Compiling and Linking"</a>, for examples that show you how you can use these options. For an explanation of the default file naming conventions, see the sections <a href="#i1012460">"Input Files"</a> and <a href="#i1012471">"Output Files"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012332"></a>
<div class="sect1">
<h2 class="sect1">Invoking SQL*Module<a id="sthref221"></a><a id="sthref222"></a><a id="sthref223"></a><a id="sthref224"></a><a id="sthref225"></a></h2>
<p><a id="i1012339"></a>You can run the SQL*Module compiler interactively from the operating system command line, from a command in a batch file, or for some operating systems, a <span class="italic">makefile</span>. The way you invoke the compiler can be system dependent. See your system-specific Oracle documentation to find out the location on your system of the compiler and associated files, such as configuration files and the SQL runtime library.</p>
<div class="sect2"><a id="sthref226"></a>
<h3 class="sect2">Running the Compiler<a id="sthref227"></a></h3>
<p>The name of the SQL*Module compiler itself is <span class="italic">modada</span> for Ada. The SQL*Module compiler can be invoked from the operating system command line as follows:</p>
<pre>
modada  &lt;option=value&gt; ... 
</pre>
<p>where &lt;option=value&gt; is a command-line argument. For example, the command</p>
<pre>
modada iname=my_test1.mad oname=my_test1_mod.a userid=modtest 
</pre>
<p>compiles the module file <span class="italic">my_test1.mad</span> to produce an output file called <span class="italic">my_test1_mod.a</span>. The username is <span class="italic">modtest</span>. In this example no password was provided on the command line. As a result, SQL*Module prompts you for one when it starts. SQL*Module requires a valid username and password to compile a Module Language file. The objects referenced in the cursors and procedures in the Module file must be available in the schema named (MODTEST in this example) when you run SQL*Module. <a id="sthref228"></a><a id="sthref229"></a></p>
<p>When you use SQL*Module to generate interface procedure files that call stored procedures in the database, you must specify the same USERID as the schema that owns the stored procedures.<a id="sthref230"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012354"></a>
<div class="sect1">
<h2 class="sect1">Case Sensitivity in Program Names, Option Names, and Values<a id="sthref231"></a></h2>
<p>For operating systems that are case sensitive, such as UNIX, the names of the executables are normally in lowercase. For all systems, the names of the options and their values are not case sensitive. In this Guide, the option name is in uppercase, and the value is in lower case. However, when the option value is a filename, and your operating system is case-sensitive, you must enter the filename using the correct combination of upper and lowercase<a id="sthref232"></a><a id="sthref233"></a></p>
<div class="sect2"><a id="sthref234"></a>
<h3 class="sect2">Listing Options and Default Values<a id="sthref235"></a></h3>
<p>If you provide no command-line arguments, or the only argument is '?', the compiler prints a list of all the options available, with their current default values. For example, the command</p>
<pre>
modada ?
</pre>
<p>runs the SQL*Module compiler for Ada and lists each option with its default value. See <a href="#i1012422">"Default Values"</a> for information on what determines the defaults. (Be sure to escape the '?' using '\' if you are running on a UNIX system and you are using the C shell.)</p>
<p>If you just want to see the default value for a single option, you can issue the command:</p>
<pre>
modada &lt;OPTION&gt;=?
</pre>
<p>For example, the command</p>
<pre>
modada OUTPUT=? 
</pre>
<p>shows the default values for the OUTPUT option for the SQL*Module compiler for Ada.</p>
<pre>
modada
</pre>
<p>produces a short help display.</p>
<p>A complete description of each option is given later in this chapter.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012380"></a>
<div class="sect1">
<h2 class="sect1">How to Specify Command-Line Options<a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a></h2>
<p>The value of an option is a string literal, which can represent text or numeric values. For example, for the option</p>
<pre>
INAME=my_test 
</pre>
<p>the value is a string literal that specifies a filename. But for the option</p>
<pre>
MAXLITERAL=400 
</pre>
<p>the value is numeric.</p>
<p>Some options take Boolean values, and these may be represented with the strings "yes" or "no", or "true" or "false" (in upper or lowercase). For example:</p>
<pre>
...  STORE_PACKAGE=YES 
</pre>
<p>is equivalent to</p>
<pre>
...  STORE_PACKAGE=true 
</pre>
<p>both of which mean that the results of the compilation should be stored as a package in the database.</p>
<p>The option value is always separated from the option name by an equals sign, with <span class="italic">no whitespace</span> between the name or the value and the equals sign.</p>
<div class="sect2"><a id="sthref239"></a>
<h3 class="sect2">Value Lists<a id="sthref240"></a></h3>
<p>Some options can take multiple values. Multiple option values are specified in a list. The list is a comma-delimited list of values with surrounding parentheses. Do <span class="italic">not</span> put any whitespace in the list. The following option specifies that SQL*Module should generate source code and specification output files, but not listing files:</p>
<pre>
...  OUTPUT=(CODE,SPECIFICATION) 
</pre>
<p>A value list completely supersedes the value list specified by a previous default or option value list. For example, if the system configuration file contains the line</p>
<pre>
OUTPUT=(CODE,SPECIFICATION,LIST) 
</pre>
<p>and there is no user configuration file, and the command line contains the option</p>
<pre>
...  OUTPUT=(CODE,LIST) 
</pre>
<p>then the value of OUTPUT is (CODE,LIST). See the section <a href="#i1012438">"Configuration Files"</a> for how default values are determined.</p>
<p>If a list-valued option is specified with a single value, that is not in parentheses, the single value is <span class="italic">added</span> to the current default list. For example, if the system configuration file contains the line</p>
<pre>
OUTPUT=(CODE,SPECIFICATION) 
</pre>
<p>there is no user configuration file that has an OUTPUT= option, and the command line contains the option</p>
<pre>
...  OUTPUT=LIST 
</pre>
<p>then "LIST" is appended to the default list, so the value of OUTPUT is (CODE,SPECIFICATION,LIST).</p>
<p>Note: If NONE is a member of the OUTPUT list, then nothing would be generated, regardless of other entries in the list.</p>
</div>
<!-- class="sect2" -->
<a id="i1012422"></a>
<div class="sect2">
<h3 class="sect2">Default Values<a id="sthref241"></a></h3>
<p>Most of the options have default values. Three things determine the default value:</p>
<ul>
<li>
<p>values built into the SQL*Module compiler</p>
</li>
<li>
<p>values set in the <span class="italic">system configuration file</span><a id="sthref242"></a><a id="sthref243"></a></p>
</li>
<li>
<p>values set in a <span class="italic">user configuration file</span><a id="sthref244"></a><a id="sthref245"></a></p>
</li>
</ul>
<p>For example, the option MAXLITERAL specifies the maximum length of strings generated by SQL*Module. The built-in SQL*Module default value for this option is 255 bytes. However, if MAXLITERAL=512 is specified in the system configuration file, the default now becomes 512. The user configuration file could set it to yet another value, which then overrides the system configuration value. Finally, if this option is set on the command line, that value will take precedence over the SQL*Module default, the system configuration file specification, and the user configuration file specification. See "Configuration Files" for more information about these files.</p>
<p>Some options, such as USERID, do not have a built-in default value. The built-in default values for options that have them are listed in the section <a href="#i1012524">"Command-Line Options"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012438"></a>
<div class="sect1">
<h2 class="sect1">Configuration Files<a id="sthref246"></a><a id="sthref247"></a></h2>
<p>A configuration file is a text file that contains SQL*Module options. Each record or line in the file contains one option, with its associated value or list of values. For example, a configuration file might contain the lines</p>
<pre>
BINDING=LATE
USERID=MODTEST 
</pre>
<p>to set defaults for the BINDING and USERID options.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot put comments in a configuration file; there is no character or character combination that lets you comment out a line. <a id="sthref248"></a></div>
<p><a id="i1012449"></a>There is one systemwide configuration file associated with each system. The system configuration file is usually maintained by the project or group leader, or the database administrator. The location of this file is system specific. For more information, see your project leader, or your system-specific Oracle documentation. <a id="sthref249"></a></p>
<p>If there is no system configuration file, the compiler prints a warning message, but compilation continues normally.</p>
<p>In addition, each SQL*Module user can have one or more user (or local) configuration files. To activate the user configuration file, its name and path must be specified using the CONFIG= command-line option. See <a href="#i1012524">"Command-Line Options"</a>. The user configuration file is optional.</p>
<p>The CONFIG= option never specifies the system configuration file. The location of the system configuration file is built into the SQL*Module compiler, and can vary from system to system.<a id="sthref250"></a><a id="sthref251"></a></p>
</div>
<!-- class="sect1" -->
<a id="i1012460"></a>
<div class="sect1">
<h2 class="sect1">Input Files<a id="sthref252"></a><a id="sthref253"></a></h2>
<p>A SQL*Module input file is a text file containing Module Language statements. You specify the input filename using the INAME= command-line option.</p>
<p><a id="i1012465"></a>Input files have default file <span class="italic">extensions</span>, also referred to as <span class="italic">filetypes</span> in some operating systems. However, not all operating systems support file extensions. If your system does not support file extensions, the last few characters of the filename might serve as the extension. Refer to your operating system documentation and to your system-specific Oracle documentation for more information about filenames and file extensions.<a id="sthref254"></a><a id="sthref255"></a><a id="sthref256"></a></p>
<p>If you do not specify an extension for the module input file, and your operating system uses file extensions, the compiler assumes a default extension, .<span class="italic">mad</span>.</p>
</div>
<!-- class="sect1" -->
<a id="i1012471"></a>
<div class="sect1">
<h2 class="sect1">Output Files<a id="sthref257"></a><a id="sthref258"></a></h2>
<p>SQL*Module can generate four types of output files:</p>
<ul>
<li>
<p>a source code file</p>
</li>
<li>
<p>a specification (or header) file</p>
</li>
<li>
<p>a listing file</p>
</li>
<li>
<p>a PL/SQL source file for a stored procedure or a package</p>
</li>
</ul>
<p>Source code files contain generated code in the host language. <span class="italic">modada</span> generates Ada code. Specification or header files contain declarations for the procedures in the code files</p>
<a id="i1012481"></a>
<div class="sect2">
<h3 class="sect2">Source Code Output File<a id="sthref259"></a></h3>
<p>This file contains the host language code produced by the compiler. It is a source file in the host language, and you must compile it using your host language compiler to produce an object module. The object modules are in turn linked with the application's object modules and the SQL runtime library to form the executable program.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you name output files explicitly, either in a configuration file or on the command line.</div>
<div class="sect3"><a id="sthref260"></a>
<h4 class="sect3">Default File Names for Ada<a id="sthref261"></a></h4>
<p>If you do not specify an output code filename when you run <span class="italic">modada</span>, the output code filename defaults to a system-specific name. For example, on Sun workstations running the Solaris 1.0 Sun Ada compiler, the command</p>
<pre>
modada iname=my_test1.mad
</pre>
<p><a id="i1012491"></a>generates an output code file named <span class="italic">my_test1.a</span>. On other platforms, a different name might be generated. See your system-specific Oracle documentation for complete information. <a id="sthref262"></a></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1012494"></a>
<div class="sect2">
<h3 class="sect2">Specification File</h3>
<p>By default, <span class="italic">modada</span> generates a specification or header file. The specification file contains declarations for the procedures in the generated output file.</p>
<div class="sect3"><a id="sthref263"></a>
<h4 class="sect3">Default Specification Filenames for Ada</h4>
<p>The default specification filename is the name of the input file, or the package name, followed by a system-dependent appendix, followed by a system-dependent file extension. For example, on a Sun workstation running Solaris 1.0, the command</p>
<pre>
modada iname=my_test1.mad
</pre>
<p><a id="i1012501"></a>generates a default specification output file with the name <span class="italic">my_test1s.a</span>. This is the value of <span class="italic">iname</span> minus the extension, with "s" appended.</p>
<p>On other platforms, the filename appendix and the filename extension might be different. See your system-specific Oracle documentation for complete information.<a id="sthref264"></a></p>
<p>See <a href="ch_six.htm#i1009402">Chapter 6, "Demonstration Programs"</a> for language-dependent information about the content of specification files.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1012509"></a>
<div class="sect2">
<h3 class="sect2">Listing File<a id="sthref265"></a></h3>
<p>If OUTPUT=LIST, SQL*Module produces a listing of the Module Language source code, with errors, if any, flagged. Error codes and messages are interspersed in the list file, at the point where the SQL*Module parser first detected the error. The line length in the listing file defaults to 255 characters. If no end-of-line character is received before 255 characters are received, a system-specific end-of-line character or character sequence is output.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref266"></a>
<h3 class="sect2">PL/SQL Source Files<a id="sthref267"></a></h3>
<p>When you are generating interface procedure files from a stored package or procedure, and you specify the option OUTPUT=PACKAGE, SQL*Module generates PL/SQL source code output files. If the output is from a package, two files are generated. One file has the default file extension <span class="italic">.pks</span>, and contains the package specification code. The second file has the default extension .<span class="italic">pkb</span>, and contains the package body code. See the <a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for more information on package specifications and package bodies.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref268"></a>
<h3 class="sect2">Avoid Default Output Filenames</h3>
<p>Use the ONAME and SNAME options to generate nondefault output filenames. They are described later.</p>
<p>Oracle strongly recommends that you use these options, rather than letting the output filenames be generated by default.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012524"></a>
<div class="sect1">
<h2 class="sect1">Command-Line Options<a id="sthref269"></a></h2>
<p>When an option is entered on the command line, its value overrides SQL*Module defaults, any values specified in a configuration file, or values specified in a module file (for example, the AUTHORIZATION clause). The order of precedence is</p>
<ul>
<li>
<p>command-line options</p>
</li>
<li>
<p>statements in the module file preamble</p>
</li>
<li>
<p>user configuration file options</p>
</li>
<li>
<p>system configuration file options</p>
</li>
<li>
<p>default options built into the compiler</p>
</li>
</ul>
<p>The format of a command-line option is:</p>
<pre>
OPTION_NAME=VALUE 
</pre>
<p>There should be no whitespace around the equals sign. For example:</p>
<pre>
modada INAME=my_app3_mod ONAME=my_app3_mod SNAME=my_app3_pkg<a id="sthref270"></a><a id="sthref271"></a> 
</pre>
<p>compiles the input file <span class="italic">my_app3_mod.mad</span> to produce an output file named <span class="italic">my_app3_mod.a</span>, and a specification file named <span class="italic">my_app3_mod_pkgs.a</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The actual filename extensions are system specific. See your system-specific Oracle documentation for more information.<a id="sthref272"></a></div>
<p>If the option can take a list of values and more than one value is being supplied, a comma-delimited list of values is placed inside parentheses. For example:</p>
<pre>
OUTPUT=(CODE,SPECIFICATION) 
</pre>
<p>There should be no whitespace anywhere in the list. <a id="sthref273"></a></p>
<p>The names as well as arguments of the command-line options can be abbreviated. Instead of</p>
<pre>
OUTPUT=SPECIFICATION 
</pre>
<p>you could enter</p>
<pre>
OUT=SPEC 
</pre>
<p>or even</p>
<pre>
OU=SP 
</pre>
<p>since neither "OU", "SPEC", nor "SP" is ambiguous. Filenames and package names cannot be abbreviated.</p>
<p>The command-line options, together with their default values, are listed in <a href="#g1014276">Table 5-2</a>, and are described in the remainder of this chapter.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref274"></a><a id="g1014276"></a>Table 5-2 The Command-line options</p>
<table class="cellalignment845" title="The Command-line options" summary="table" dir="ltr">
<thead>
<tr class="cellalignment839">
<th class="cellalignment846" id="r1c1-t7">Option Name</th>
<th class="cellalignment846" id="r1c2-t7">Option Purpose</th>
<th class="cellalignment846" id="r1c3-t7">Values</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment839">
<td class="cellalignment847" id="r2c1-t7" headers="r1c1-t7">
<p>AUTO_CONNECT</p>
</td>
<td class="cellalignment847" headers="r2c1-t7 r1c2-t7">
<p>Connect on first SQL statement if not already connected</p>
</td>
<td class="cellalignment847" headers="r2c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r3c1-t7" headers="r1c1-t7">
<p>BINDING</p>
</td>
<td class="cellalignment847" headers="r3c1-t7 r1c2-t7">
<p>Early or late binding?</p>
</td>
<td class="cellalignment847" headers="r3c1-t7 r1c3-t7">
<p>EARLY | LATE</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r4c1-t7" headers="r1c1-t7">
<p>CONFIG</p>
</td>
<td class="cellalignment847" headers="r4c1-t7 r1c2-t7">
<p>Name of a user configuration file</p>
</td>
<td class="cellalignment847" headers="r4c1-t7 r1c3-t7">
<p>&lt;filename&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r5c1-t7" headers="r1c1-t7">
<p>ERRORS</p>
</td>
<td class="cellalignment847" headers="r5c1-t7 r1c2-t7">
<p>Destination of error messages</p>
</td>
<td class="cellalignment847" headers="r5c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r6c1-t7" headers="r1c1-t7">
<p>FIPS</p>
</td>
<td class="cellalignment847" headers="r6c1-t7 r1c2-t7">
<p>Turns on FIPS flagger</p>
</td>
<td class="cellalignment847" headers="r6c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r7c1-t7" headers="r1c1-t7">
<p>INAME</p>
</td>
<td class="cellalignment847" headers="r7c1-t7 r1c2-t7">
<p>Name of input file</p>
</td>
<td class="cellalignment847" headers="r7c1-t7 r1c3-t7">
<p>&lt;filename&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r8c1-t7" headers="r1c1-t7">
<p>LNAME</p>
</td>
<td class="cellalignment847" headers="r8c1-t7 r1c2-t7">
<p>Name of listing file</p>
</td>
<td class="cellalignment847" headers="r8c1-t7 r1c3-t7">
<p>&lt;filename&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r9c1-t7" headers="r1c1-t7">
<p>LTYPE</p>
</td>
<td class="cellalignment847" headers="r9c1-t7 r1c2-t7">
<p>Kind of listing file</p>
</td>
<td class="cellalignment847" headers="r9c1-t7 r1c3-t7">
<p>NONE | SHORT | LONG</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r10c1-t7" headers="r1c1-t7">
<p>MAPPING</p>
</td>
<td class="cellalignment847" headers="r10c1-t7 r1c2-t7">
<p>Resolves overloaded procedure names for the default WITH INTERFACE PROCEDURE clause</p>
</td>
<td class="cellalignment847" headers="r10c1-t7 r1c3-t7">
<p>( ) | OVERLOAD</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r11c1-t7" headers="r1c1-t7">
<p>MAXLITERAL</p>
</td>
<td class="cellalignment847" headers="r11c1-t7 r1c2-t7">
<p>Maximum length of string literal in generated host language code</p>
</td>
<td class="cellalignment847" headers="r11c1-t7 r1c3-t7">
<p>10..1024</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r12c1-t7" headers="r1c1-t7">
<p>ONAME</p>
</td>
<td class="cellalignment847" headers="r12c1-t7 r1c2-t7">
<p>Name of source code output file</p>
</td>
<td class="cellalignment847" headers="r12c1-t7 r1c3-t7">
<p>&lt;filename&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r13c1-t7" headers="r1c1-t7">
<p>OUTPUT</p>
</td>
<td class="cellalignment847" headers="r13c1-t7 r1c2-t7">
<p>Kinds of output files generated</p>
</td>
<td class="cellalignment847" headers="r13c1-t7 r1c3-t7">
<p>One of, or list of two or more of (NONE | CODE | SPECIFICATION | LIST | PACKAGE</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r14c1-t7" headers="r1c1-t7">
<p>PNAME</p>
</td>
<td class="cellalignment847" headers="r14c1-t7 r1c2-t7">
<p>Name of package in the database</p>
</td>
<td class="cellalignment847" headers="r14c1-t7 r1c3-t7">
<p>&lt;package_name&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r15c1-t7" headers="r1c1-t7">
<p>RPC_GENERATE</p>
</td>
<td class="cellalignment847" headers="r15c1-t7 r1c2-t7">
<p>Generate stubs from stored package or procedure?</p>
</td>
<td class="cellalignment847" headers="r15c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r16c1-t7" headers="r1c1-t7">
<p>SELECT_ERROR</p>
</td>
<td class="cellalignment847" headers="r16c1-t7 r1c2-t7">
<p>Should a query returning more than one row generate a runtime error?</p>
</td>
<td class="cellalignment847" headers="r16c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r17c1-t7" headers="r1c1-t7">
<p>SNAME<a id="sthref275"></a></p>
</td>
<td class="cellalignment847" headers="r17c1-t7 r1c2-t7">
<p>Name of specification output file</p>
</td>
<td class="cellalignment847" headers="r17c1-t7 r1c3-t7">
<p>&lt;filename&gt;</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r18c1-t7" headers="r1c1-t7">
<p>SQLCHECK</p>
</td>
<td class="cellalignment847" headers="r18c1-t7 r1c2-t7">
<p>Kind of compile-time checking done</p>
</td>
<td class="cellalignment847" headers="r18c1-t7 r1c3-t7">
<p>NONE | SYNTAX | SEMANTICS</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r19c1-t7" headers="r1c1-t7">
<p>STORE_PACKAGE</p>
</td>
<td class="cellalignment847" headers="r19c1-t7 r1c2-t7">
<p>Store module as a package in the database</p>
</td>
<td class="cellalignment847" headers="r19c1-t7 r1c3-t7">
<p>YES | NO</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r20c1-t7" headers="r1c1-t7">
<p>USERID</p>
</td>
<td class="cellalignment847" headers="r20c1-t7 r1c2-t7">
<p>Username and password</p>
</td>
<td class="cellalignment847" headers="r20c1-t7 r1c3-t7">
<p>&lt;string&gt;</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="sect2"><a id="sthref276"></a>
<h3 class="sect2">AUTO_CONNECT<a id="sthref277"></a></h3>
<p class="subhead2"><a id="sthref278"></a>Values</p>
<p>{YES | NO}</p>
<p class="subhead2"><a id="sthref279"></a>Default Value</p>
<p>NO</p>
<p class="subhead2"><a id="sthref280"></a>Meaning</p>
<p>If AUTO_CONNECT=YES, and you are not already connected to a database, when SQLLIB processes the first executable SQL statement, it attempts to connect using the userid</p>
<pre>
OPS$&lt;username&gt;
</pre>
<p>where username is your current operating system user or task name and nullusername is a valid Oracle userid.</p>
<p>When AUTO_CONNECT=NO, you must use the CONNECT statement to connect to Oracle.</p>
<p>Can be entered only on the command line or in a configuration file.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref281"></a>
<h3 class="sect2">BINDING<a id="sthref282"></a></h3>
<p class="subhead2"><a id="sthref283"></a>Values</p>
<p>{EARLY | LATE}</p>
<p class="subhead2"><a id="sthref284"></a>Default Value</p>
<p>EARLY</p>
<p class="subhead2"><a id="sthref285"></a>Meaning</p>
<p>The BINDING option is used when generating interface procedure files, that is, when RPC_GENERATE=YES. Early binding means that a time stamp is derived from the time of compilation of the stored procedure, and the time stamp is saved in the interface procedures file.<a id="sthref286"></a></p>
<p>When a stored procedure is called through a stub (specified in the interface procedures file), if the current time stamp on the procedure in the database is later than that specified in the stub, the message "time stamp of &lt;stored procedure name&gt; has been changed" (ORA-04062) is returned.</p>
<p>The stored package must have WITH INTERFACE clauses specified for each procedure when RPC_GENERATE=YES, regardless of whether you choose early or late binding using the BINDING option. See the section <a href="ch_three.htm#i1007434">"Early and Late Binding"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref287"></a>
<h3 class="sect2">CONFIG<a id="sthref288"></a></h3>
<p class="subhead2"><a id="sthref289"></a>Values</p>
<p>&lt;filename&gt;</p>
<p class="subhead2"><a id="sthref290"></a>Default Value</p>
<p>None.</p>
<p class="subhead2"><a id="sthref291"></a>Meaning</p>
<p>Specifies the name of a user configuration file that contains options. The user configuration file is a text file. Each option in the file must be on a separate line (record).</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref292"></a>
<h3 class="sect2">ERRORS<a id="sthref293"></a></h3>
<p class="subhead2"><a id="sthref294"></a>Values</p>
<p>{YES | NO}</p>
<p class="subhead2"><a id="sthref295"></a>Default Value</p>
<p>YES</p>
<p class="subhead2"><a id="sthref296"></a>Meaning</p>
<p>Specifies the destination for error message output. If ERRORS=YES, the output is both to the terminal and to the listing (<span class="italic">.lis</span>) file. If ERRORS=NO, error messages are sent only to the listing file.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref297"></a>
<h3 class="sect2">FIPS<a id="sthref298"></a></h3>
<p class="subhead2"><a id="sthref299"></a>Values</p>
<p>{YES | NO}</p>
<p class="subhead2"><a id="sthref300"></a>Default Value</p>
<p>NO</p>
<p class="subhead2"><a id="sthref301"></a>Meaning</p>
<p>Specifies whether instances of non-compliance with the ANSI/ISO SQL standards will be flagged at compile time. If FIPS=YES, Oracle extensions to standard Module Language and standard SQL, as well as use of standard constructs in ways that violate the SQL standard format or syntax rules, are flagged by the FIPS flagger.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref302"></a>
<h3 class="sect2">INAME<a id="sthref303"></a></h3>
<p class="subhead2"><a id="sthref304"></a>Values</p>
<p>&lt;filename&gt;</p>
<p class="subhead2"><a id="sthref305"></a>Default Value</p>
<p>None.</p>
<p class="subhead2"><a id="sthref306"></a>Meaning</p>
<p>Specifies the name of the input file. If the specified filename does not contain an extension, the compiler supplies the default extension for the host language. Only one input file is allowed. If more than one INAME option is specified, the last one prevails, and the earlier ones are ignored.</p>
<p>If STORE_PACKAGE=NO and the PNAME option is specified, the INAME option cannot be specified. In this case, there is no input file, since the input comes from the stored package. If INAME is specified under these circumstances, SQL*Module generates a warning message and continues, if possible.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref307"></a>
<h3 class="sect2">LNAME<a id="sthref308"></a></h3>
<p class="subhead2"><a id="sthref309"></a>Values</p>
<p>&lt;filename&gt;</p>
<p class="subhead2"><a id="sthref310"></a>Default Value</p>
<p>The base name of the listing file first defaults to the base name of INAME or, if INAME is not specified, it defaults to the name of the package specified in the PNAME option. The default file extension is <span class="italic">.lis</span>.</p>
<p class="subhead2"><a id="sthref311"></a>Meaning</p>
<p>Specifies the name of the listing file. This option is valid only if the LTYPE option is <span class="italic">not</span> NONE.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref312"></a>
<h3 class="sect2">LTYPE<a id="sthref313"></a></h3>
<p class="subhead2"><a id="sthref314"></a>Values</p>
<p>{NONE | SHORT | LONG}</p>
<p class="subhead2"><a id="sthref315"></a>Default Value</p>
<p>LONG</p>
<p class="subhead2"><a id="sthref316"></a>Meaning</p>
<p>Specifies the listing type. The OUTPUT option list must contain the VALUE LIST, otherwise this option has no effect.</p>
<p>If the LTYPE value is NONE, no list file is generated, regardless of the setting of the OUTPUT option. If the LTYPE value is SHORT, the list file contains no code, only error messages. LTYPE=LONG generates a complete listing file, with errors and code.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When INAME is specified, the listing file shows Module Language code, not the generated host language code. When compiling an interface procedure, the listing output contains only error messages, regardless of the LTYPE specification. See the OUTPUT option for more information on how to generate PL/SQL output source.</div>
</div>
<!-- class="sect2" -->
<a id="i1012769"></a>
<div class="sect2">
<h3 class="sect2">MAPPING<a id="sthref317"></a></h3>
<p class="subhead2"><a id="sthref318"></a>Values</p>
<p>( ) | OVERLOAD</p>
<p>where ( ) indicates an empty string.</p>
<p class="subhead2"><a id="sthref319"></a>Default Value</p>
<p>Empty string.</p>
<p class="subhead2"><a id="sthref320"></a>Meaning</p>
<p>The MAPPING option is used when generating prototypes for the default WITH INTERFACE PROCEDURE clause. See <a href="ch_three.htm#i1007787">"The Default WITH INTERFACE Clause"</a> for more information.</p>
<p>When MAPPING=OVERLOAD, SQL*Module resolves overloaded stored procedure and function names when generating stubs. It does this by prefixing <span class="italic">MODn_</span> to the second and subsequent procedure names, where <span class="italic">n</span> starts with 2, and increments by 1 until all stubs for all overloaded procedures of that name have been resolved.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref321"></a>
<h3 class="sect2">MAXLITERAL<a id="sthref322"></a></h3>
<p class="subhead2"><a id="sthref323"></a>Values</p>
<p>Numeric literal, range 10 to 1024 bytes</p>
<p class="subhead2"><a id="sthref324"></a>Default Value</p>
<p>255 bytes</p>
<p class="subhead2"><a id="sthref325"></a>Meaning</p>
<p>Specifies the maximum length of string literals generated by the SQL*Module compiler, so that host language compiler limits are not exceeded. For example, if your system's compiler cannot handle string literals longer than 512 bytes, specify MAXLITERAL=512 in the system configuration file.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref326"></a>
<h3 class="sect2">ONAME<a id="sthref327"></a></h3>
<p class="subhead2"><a id="sthref328"></a>Values</p>
<p>&lt;filename&gt;</p>
<p class="subhead2"><a id="sthref329"></a>Default Value</p>
<p>The base name of the output file first defaults to the base name of INAME. If INAME is not specified, then ONAME defaults to the name of the package specified in the PNAME option, if present. The default file extension is system dependent, but is generally .a. The default output directory is the current directory.</p>
<p class="subhead2"><a id="sthref330"></a>Meaning</p>
<p>Specifies the name of the code output file. Whether an output file is actually generated depends on the values of the OUTPUT option. The OUTPUT list must contain the value CODE.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref331"></a>
<h3 class="sect2">OUTPUT<a id="sthref332"></a></h3>
<p class="subhead2"><a id="sthref333"></a>Values</p>
<p>Any one or more of CODE, LIST, NONE, PACKAGE, SPECIFICATION</p>
<p class="subhead2"><a id="sthref334"></a>Default Values</p>
<p>CODE, SPECIFICATION</p>
<p class="subhead2"><a id="sthref335"></a>Meaning</p>
<p>Specifies what output files SQL*Module generates. The values are</p>
<p><a id="sthref336"></a><span class="subhead3">CODE&nbsp;</span>An interface procedures file is generated.</p>
<p><a id="sthref337"></a><span class="subhead3">LIST&nbsp;</span>A listing file is generated. See the LNAME and LTYPE options for more information.</p>
<p><a id="sthref338"></a><span class="subhead3">NONE&nbsp;</span>No files are generated. This option is used to do syntactic and semantic checking of the input file, as error output is always generated.</p>
<p><a id="sthref339"></a><span class="subhead3">PACKAGE&nbsp;</span>PL/SQL source files are generated. These files contain the PL/SQL package generated by SQL*Module. The default base filename is the same as the name specified in either the INAME or the PNAME option. If both are specified, the default is taken from INAME.</p>
<p>The default extensions are .<span class="italic">pks</span> (package specification) and .<span class="italic">pkb</span> (package body).</p>
<p><a id="sthref340"></a><span class="subhead3">SPECIFICATION&nbsp;</span>A specification file containing procedure declarations is generated. The filename extension is language specific. See <a href="#i1012222">"Output Files"</a> for more information.</p>
<p>Note: If the value NONE is included in the list, then no output of any kind is generated, regardless of any other values that might be in the list.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref341"></a>
<h3 class="sect2">PNAME<a id="sthref342"></a></h3>
<p class="subhead2"><a id="sthref343"></a>Values</p>
<p>Name of a stored package or a standalone stored procedure in the Oracle database, or the name to be given to a stored package to be created in the database when STORE_PACKAGE=YES.</p>
<p class="subhead2"><a id="sthref344"></a>Default Value</p>
<p><a id="sthref345"></a><span class="subhead3">For Output (when RPC_GENERATE=YES)&nbsp;</span>There is no default value. You must specify the name of a package in the database. However, you can specify a complete path name, including an extension, to serve as a default for ONAME. In this case, the directory hierarchy and the filename extension are ignored, and the basename is taken as the package name for database lookup.</p>
<p><a id="sthref346"></a><span class="subhead3">For Input (when STORE_PACKAGE=YES)&nbsp;</span>The default value is the module name in the MODULE clause of the input file. If there is no module name, the default is taken from the INAME value.</p>
<p class="subhead2"><a id="sthref347"></a>Meaning</p>
<p>Specifies the name of the package stored in the database (if STORE_PACKAGE=NO), or the name of a package to be created by SQL*Module (if STORE_PACKAGE=YES). The name must be a valid database object name.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref348"></a>
<h3 class="sect2">RPC_GENERATE<a id="sthref349"></a></h3>
<p class="subhead2"><a id="sthref350"></a>Values</p>
<p>{YES |NO}</p>
<p class="subhead2"><a id="sthref351"></a>Default Value</p>
<p>NO</p>
<p class="subhead2"><a id="sthref352"></a>Meaning</p>
<p>Specifies whether SQL*Module should produce an interface procedures file so that a host program can call stored procedures. You can use this option with STORE_PACKAGE=NO and PNAME=&lt;package_name&gt; to generate interface procedures for standalone or packaged procedures that are already stored in the database. You can also use this option with INAME=&lt;filename&gt; and STORE_PACKAGE=YES to store procedures in a module file in the database, <span class="italic">and</span> generate an interface procedures file to access them.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref353"></a>
<h3 class="sect2">SELECT_ERROR<a id="sthref354"></a></h3>
<p class="subhead2"><a id="sthref355"></a>Values</p>
<p>{YES | NO}</p>
<p class="subhead2"><a id="sthref356"></a>Default Value</p>
<p>YES</p>
<p class="subhead2"><a id="sthref357"></a>Meaning</p>
<p>Specifies whether an error is generated at runtime when a SELECT or FETCH statement returns more than one row.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref358"></a>
<h3 class="sect2">SNAME<a id="sthref359"></a></h3>
<p class="subhead2"><a id="sthref360"></a>Values</p>
<p>&lt;filename&gt;</p>
<p class="subhead2"><a id="sthref361"></a>Default Value</p>
<p>The base name of the input file, if specified, plus the appropriate extension for a specification file for the host language. For Ada, a system-specific filename addition and extension is used, such as <span class="italic">ora_dcl</span> for VAX/OPEN VMS Ada, or <span class="italic">*s.a</span> for Verdix Ada.</p>
<p class="subhead2"><a id="sthref362"></a>Meaning</p>
<p>Specifies the name of the specification or header file. If INAME is not specified, SNAME must be specified to get a specification file. The file is not generated if the OUTPUT option does not include SPECIFICATION in its list of values.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref363"></a>
<h3 class="sect2">STORE_PACKAGE<a id="sthref364"></a></h3>
<p class="subhead2"><a id="sthref365"></a>Values</p>
<p>{YES | NO}</p>
<p class="subhead2"><a id="sthref366"></a>Default Value</p>
<p>NO</p>
<p class="subhead2"><a id="sthref367"></a>Meaning</p>
<p>If STORE_PACKAGE=YES, SQL*Module compiles the module file specified in the mandatory INAME option, and stores the packaged procedures in the database schema specified by the USERID option. The name of the package is specified by the PNAME option.</p>
<p>If you do not specify a PNAME option, the default package name becomes the name of the module, as specified in the MODULE clause of the module file. If neither the PNAME option nor the MODULE clause is specified, the package name is the base name (omitting any path specification or file extension) of the input file specified in the INAME option.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When STORE_PACKAGE=YES, SQL*Module performs a CREATE OR REPLACE PACKAGE statement. This statement overwrites, without any warning any package of that name in the schema. <a id="sthref368"></a></div>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref369"></a>
<h3 class="sect2"><a id="sthref370"></a>SQLCHECK</h3>
<p class="subhead2"><a id="sthref371"></a>Values</p>
<p>{NONE | SYNTAX | SEMANTICS}</p>
<p>Default Value</p>
<p>SEMANTICS</p>
<p class="subhead2"><a id="sthref372"></a>Meaning</p>
<p>Determines the way SQL*Module processes the input file when INAME is specified. This option has no meaning if there is no input file.</p>
<p><a id="sthref373"></a><span class="subhead3">NONE&nbsp;</span>SQL*Module processes the command line, issues any error messages produced by configuration file or command-line options, then exits without compiling any input and does not produce any output files.</p>
<p><a id="sthref374"></a><span class="subhead3">SYNTAX&nbsp;</span>SQL*Module compiles the input file specified in the INAME option, using its own SQL parser. Errors detected are flagged, but no source code, specification, or listing output files are produced.</p>
<p><a id="sthref375"></a><span class="subhead3">SEMANTICS&nbsp;</span>The input file is compiled on the server side, all syntactic and semantic errors are flagged, and all appropriate output files are generated.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref376"></a>
<h3 class="sect2">USERID<a id="sthref377"></a></h3>
<p class="subhead2"><a id="sthref378"></a>Values</p>
<p>&lt;string&gt;</p>
<p>Default Value</p>
<p>None</p>
<p class="subhead2"><a id="sthref379"></a>Meaning</p>
<p>Specifies an Oracle username and, optionally, a password and a database to connect to. The syntax of this option is</p>
<pre>
USERID=USER_NAME[/PASSWORD][@DATABASE_NAME] 
</pre>
<p>SQL*Module must be able to connect to a server when compiling an input file, to parse the SQL and PL/SQL statements, do syntactic and semantic checking, and to store packages if required. If the password is omitted, SQL*Module prompts for one. If a database is not specified, the default (local) database for the user is used.</p>
<p>If you do not specify the USERID option, the default becomes the user name (and possibly the password) specified in the AUTHORIZATION clause of the Module Language input file, or the USERID value specified in a configuration file.</p>
<p>Note: SQL*Module always prompts for a password if one has not been supplied in a configuration file, in an AUTHORIZATION clause in the module file, or on the command line. So, there is no need to hard code passwords into text files.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1012894"></a>
<div class="sect1">
<h2 class="sect1">Compiling and Linking <a id="sthref380"></a><a id="sthref381"></a></h2>
<p>To produce an executable program, you must compile source code output files that SQL*Module generates, then link these together with the compiled object files of any sources that call modules or interface procedures, with SQLLIB, and with other Oracle libraries. The details are necessarily both system and language dependent. The tables in the next three sections show a few examples.<a id="sthref382"></a></p>
<div class="sect2"><a id="sthref383"></a>
<h3 class="sect2">An Example (Module Language)<a id="sthref384"></a></h3>
<p>There is a Module Language file to be compiled. No stored database packages are involved. The steps to take are shown in <a href="#g1014360">Table 5-3</a>.</p>
<p>Note: This example is specific to VAX/OPEN VMS. For other Ada implementations, using a linker for all Ada files might be required.</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref385"></a><a id="g1014360"></a>Table 5-3 Development Scenario</p>
<table class="cellalignment845" title="Development Scenario" summary="table" dir="ltr">
<thead>
<tr class="cellalignment839">
<th class="cellalignment846" id="r1c1-t10">Step</th>
<th class="cellalignment846" id="r1c2-t10">File Name</th>
<th class="cellalignment846" id="r1c3-t10">How Developed</th>
<th class="cellalignment846" id="r1c4-t10">Action to Take</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment839">
<td class="cellalignment847" id="r2c1-t10" headers="r1c1-t10">
<p>1</p>
</td>
<td class="cellalignment847" headers="r2c1-t10 r1c2-t10">
<p>tst_app_drv.ada</p>
</td>
<td class="cellalignment847" headers="r2c1-t10 r1c3-t10">
<p>by Ada developer</p>
</td>
<td class="cellalignment847" headers="r2c1-t10 r1c4-t10">
<p>compile into Ada library using host Ada compiler</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r3c1-t10" headers="r1c1-t10">
<p>2</p>
</td>
<td class="cellalignment847" headers="r3c1-t10 r1c2-t10">
<p>tst_app_mod.mad</p>
</td>
<td class="cellalignment847" headers="r3c1-t10 r1c3-t10">
<p>by SQL developer</p>
</td>
<td class="cellalignment847" headers="r3c1-t10 r1c4-t10">
<p>compile using SQL*Module</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r4c1-t10" headers="r1c1-t10">
<p>3</p>
</td>
<td class="cellalignment847" headers="r4c1-t10 r1c2-t10">
<p>tst_app_mod.ora_dd</p>
</td>
<td class="cellalignment847" headers="r4c1-t10 r1c3-t10">
<p>generated by SQL*module in Step 2</p>
</td>
<td class="cellalignment847" headers="r4c1-t10 r1c4-t10">
<p>compile into Ada library using host Ada compiler</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r5c1-t10" headers="r1c1-t10">
<p>4</p>
</td>
<td class="cellalignment847" headers="r5c1-t10 r1c2-t10">
<p>tst_app_mod.ada</p>
</td>
<td class="cellalignment847" headers="r5c1-t10 r1c3-t10">
<p>generated by module from Step 2</p>
</td>
<td class="cellalignment847" headers="r5c1-t10 r1c4-t10">
<p>compile into Ada library using host Ada compiler; make sure to with this package in <span class="italic">tst_app_drv.ada</span></p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r6c1-t10" headers="r1c1-t10">
<p>5</p>
</td>
<td class="cellalignment847" headers="r6c1-t10 r1c2-t10">
<p>tst_app_drv.o</p>
</td>
<td class="cellalignment847" headers="r6c1-t10 r1c3-t10">
<p>extracted from Adalib</p>
</td>
<td class="cellalignment847" headers="r6c1-t10 r1c4-t10">
<p>link (with SQLLIB)</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r7c1-t10" headers="r1c1-t10">
<p>6</p>
</td>
<td class="cellalignment847" headers="r7c1-t10 r1c2-t10">
<p>tst_app_drv</p>
</td>
<td class="cellalignment847" headers="r7c1-t10 r1c3-t10">
<p>linked from step 5</p>
</td>
<td class="cellalignment847" headers="r7c1-t10 r1c4-t10">
<p>run and test</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<pre>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment838">
<tr>
<td class="cellalignment847">
<table class="cellalignment843">
<tr>
<td class="cellalignment842"><a href="ch_four.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment842"><a href="ch_six.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment849">
<table class="cellalignment841">
<tr>
<td class="cellalignment842"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment842"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment842"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment842"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment842"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment842"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
