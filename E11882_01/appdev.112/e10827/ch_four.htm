<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Developing the Ada Application</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2009-08-02T18:45:30Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="SQL*Module for Ada Programmer's Guide" />
<meta name="dcterms.identifier" content="E10827-01" />
<meta name="dcterms.isVersionOf" content="ZZMOD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="ch_three.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch_five.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10827.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/15</span> <!-- End Header --><a id="g1011716"></a><a id="i1008008"></a>
<h1 class="chapter"><span class="secnum">4</span> Developing the Ada Application</h1>
<p>This chapter describes the criteria that an Ada application must meet when accessing module procedures, or when calling RPC stubs generated by SQL*Module. Topics covered include</p>
<ul>
<li>
<p><a href="#i1008051">Program Structure</a></p>
</li>
<li>
<p><a href="#i1008067">Error Handling</a></p>
</li>
<li>
<p><a href="#i1008293">Obtaining the Number of Rows Processed</a></p>
</li>
<li>
<p><a href="#i1008305">Handling Nulls</a></p>
</li>
<li>
<p><a href="#i1008351">Cursors</a></p>
</li>
<li>
<p><a href="#i1008366">Specification Files</a></p>
</li>
<li>
<p><a href="#i1008379">Calling a Procedure</a></p>
</li>
<li>
<p><a href="#i1008382">Arrays as Procedure Arguments</a></p>
</li>
<li>
<p><a href="#i1008407">Globalization Support</a></p>
</li>
</ul>
<p>The sample programs in this chapter are source code listings for the Module Language procedures that are called by the sample programs in <a href="ch_six.htm#i1009402">Chapter 6, "Demonstration Programs"</a>, and a set of SQL statements that create and partially populate the example tables. These sources are also available online, in the <span class="italic">demo</span> directory.</p>
<a id="i1008051"></a>
<div class="sect1">
<h2 class="sect1">Program Structure <a id="sthref183"></a></h2>
<p>The developer determines the structure of an application program that uses SQL*Module. A significant advantage that you obtain from using SQL*Module is that it imposes very few special requirements or constraints on the program design, unlike some other SQL programmatic interfaces.<a id="sthref184"></a></p>
<p>The code that you write is purely in the language of the host application program. There is no need for special declare sections, embedded SQL statements, and special error handling and recovery. Database operations are mostly transparent to the application program developer, being taken care of by the Module Language or PL/SQL stored procedures.</p>
<p>There are, however, some SQL concepts of which the host application developer must be aware <a id="sthref185"></a></p>
<ul>
<li>
<p>error handling, and the use of the SQLSTATE or SQLCODE status parameter.<a id="sthref186"></a><a id="sthref187"></a></p>
</li>
<li>
<p>the concept of <span class="italic">null</span>, and how to use indicator variables to handle it<a id="sthref188"></a><a id="sthref189"></a></p>
</li>
<li>
<p>the concept of a cursor<a id="sthref190"></a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1008067"></a>
<div class="sect1">
<h2 class="sect1">Error Handling<a id="sthref191"></a></h2>
<p>Each Module Language procedure that is called from the host application must contain a parameter that returns status information to the application. There are two status parameters that you can use: SQLCODE and SQLSTATE. SQLCODE returns an integer value, while SQLSTATE returns a five-character string that contains an alphanumeric code.</p>
<p>SQLCODE is provided for compatibility with applications written to the 1989 SQL standards; new applications should use the SQLSTATE parameter.</p>
<p>When calling stored database procedures through an RPC stub, you include SQLCODE or SQLSTATE in the parameter list of the WITH INTERFACE clause in the procedure's package specification. See <a href="ch_three.htm#i1007621">"The WITH INTERFACE Clause"</a>.</p>
<div class="sect2"><a id="sthref192"></a>
<h3 class="sect2">SQLCODE<a id="sthref193"></a></h3>
<p>SQLCODE is an output parameter that can be included in a module procedure, and in the WITH INTERFACE clause in PL/SQL stored package specifications. SQLCODE returns a value that indicates whether a procedure completed successfully, completed with warnings, or did not complete due to an error.</p>
<p>SQLCODE returns three kinds of values:</p>
<p>0</p>
<p>Indicates that the procedure completed with no errors or warnings.</p>
<p>&lt; 0</p>
<p>Indicates that an error occurred during execution of the procedure.</p>
<p>+100</p>
<p>Indicates that a SQL statement did not find a row on which to operate.</p>
<p>Negative SQLCODE values are Oracle message numbers. See the <a class="olink ERRMG" href="../../server.112/e17766/toc.htm"><span class="italic">Oracle Database Error Messages</span></a> manual for a complete list of Oracle codes and their accompanying messages. See the next section, "SQLSTATE", for mappings between Oracle error numbers and SQLSTATE values.<a id="sthref194"></a></p>
</div>
<!-- class="sect2" -->
<a id="i1008093"></a>
<div class="sect2">
<h3 class="sect2">Obtaining Error Message Text</h3>
<p>The procedure <span class="italic">error_message</span> in the public package <span class="italic">oracle_sqllib</span> was introduced in release 8.0. This procedure obtains the text associated with the SQLCODE of the latest error returned. The prototypes are (with and without a runtime context):</p>
<pre>
procedure ERROR_MESSAGE (ctx oracle_sqllib.sql_context,
                         msg_buf system.address,
                         msg_buf_len sql_standard.int);
</pre>
<p>and:</p>
<pre>
procedure ERROR_MESSAGE (msg_buf:out     system.address,
                         msg_buf_len:out sql_standard.int);
</pre></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref195"></a>
<h3 class="sect2">SQLSTATE<a id="sthref196"></a></h3>
<p>SQLSTATE is a five-character alphanumeric output parameter that indicates the completion status of the procedure. It is declared as SQL_STANDARD.SQLSTATE_TYPE.<a id="sthref197"></a></p>
<p>SQLSTATE status codes consist of a two-character class code followed by a three-character subclass code. Aside from the class code 00 ("successful completion"), the class code denotes the category of the exception. Also, aside from the subclass code 000 ("not applicable"), the subclass code denotes a specific exception within that category. For example, the SQLSTATE value '22012' consists of class code 22 ("data exception") and subclass code 012 ("division by zero").</p>
<p>Each of the five characters in a SQLSTATE value is a digit (0..9) or an uppercase Latin letter (A..Z). Class codes that begin with a digit in the range 0..4 or a letter in the range A..H are reserved for the predefined conditions (those defined in the SQL92 specification). All other class codes are reserved for implementation-defined sub-conditions. All other subclass codes are reserved for implementation-defined sub-conditions. <a href="#CIHGHDCF">Table 4-1</a> shows the coding scheme.</p>
<div class="figure">
<p class="titleinfigure"><a id="sthref198"></a>Figure 4-1 SQLSTATE</p>
<img width="455" height="291" src="img/sqlstate.gif" alt="SQLSTATE" title="SQLSTATE" /><br />
<a id="sthref199" href="img_text/sqlstate.htm">Description of "Figure 4-1 SQLSTATE"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="tblformal">
<p class="titleintable"><a id="sthref200"></a><a id="CIHGHDCF"></a>Table 4-1 Predetermined Classes</p>
<table class="cellalignment845" title="Predetermined Classes" summary="table" dir="ltr">
<thead>
<tr class="cellalignment839">
<th class="cellalignment846" id="r1c1-t2">Class</th>
<th class="cellalignment846" id="r1c2-t2">Condition</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment839">
<td class="cellalignment847" id="r2c1-t2" headers="r1c1-t2">
<p>02</p>
</td>
<td class="cellalignment847" headers="r2c1-t2 r1c2-t2">
<p>no data</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r3c1-t2" headers="r1c1-t2">
<p>07</p>
</td>
<td class="cellalignment847" headers="r3c1-t2 r1c2-t2">
<p>dynamic SQL error</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r4c1-t2" headers="r1c1-t2">
<p>08</p>
</td>
<td class="cellalignment847" headers="r4c1-t2 r1c2-t2">
<p>connection exception</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r5c1-t2" headers="r1c1-t2">
<p>0A</p>
</td>
<td class="cellalignment847" headers="r5c1-t2 r1c2-t2">
<p>feature not supported</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r6c1-t2" headers="r1c1-t2">
<p>21</p>
</td>
<td class="cellalignment847" headers="r6c1-t2 r1c2-t2">
<p>cardinality violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r7c1-t2" headers="r1c1-t2">
<p>22</p>
</td>
<td class="cellalignment847" headers="r7c1-t2 r1c2-t2">
<p>data exception</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r8c1-t2" headers="r1c1-t2">
<p>23</p>
</td>
<td class="cellalignment847" headers="r8c1-t2 r1c2-t2">
<p>integrity constraint violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r9c1-t2" headers="r1c1-t2">
<p>24</p>
</td>
<td class="cellalignment847" headers="r9c1-t2 r1c2-t2">
<p>invalid cursor state</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r10c1-t2" headers="r1c1-t2">
<p>25</p>
</td>
<td class="cellalignment847" headers="r10c1-t2 r1c2-t2">
<p>invalid transaction state</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r11c1-t2" headers="r1c1-t2">
<p>26</p>
</td>
<td class="cellalignment847" headers="r11c1-t2 r1c2-t2">
<p>invalid SQL statement name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r12c1-t2" headers="r1c1-t2">
<p>27</p>
</td>
<td class="cellalignment847" headers="r12c1-t2 r1c2-t2">
<p>triggered data change violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r13c1-t2" headers="r1c1-t2">
<p>28</p>
</td>
<td class="cellalignment847" headers="r13c1-t2 r1c2-t2">
<p>invalid authorization specification</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r14c1-t2" headers="r1c1-t2">
<p>2A</p>
</td>
<td class="cellalignment847" headers="r14c1-t2 r1c2-t2">
<p>direct SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r15c1-t2" headers="r1c1-t2">
<p>2B</p>
</td>
<td class="cellalignment847" headers="r15c1-t2 r1c2-t2">
<p>dependent privilege descriptors still exist</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r16c1-t2" headers="r1c1-t2">
<p>2C</p>
</td>
<td class="cellalignment847" headers="r16c1-t2 r1c2-t2">
<p>invalid character set name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r17c1-t2" headers="r1c1-t2">
<p>2D</p>
</td>
<td class="cellalignment847" headers="r17c1-t2 r1c2-t2">
<p>invalid transaction termination</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r18c1-t2" headers="r1c1-t2">
<p>2E</p>
</td>
<td class="cellalignment847" headers="r18c1-t2 r1c2-t2">
<p>invalid connection name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r19c1-t2" headers="r1c1-t2">
<p>33</p>
</td>
<td class="cellalignment847" headers="r19c1-t2 r1c2-t2">
<p>invalid SQL descriptor name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r20c1-t2" headers="r1c1-t2">
<p>34</p>
</td>
<td class="cellalignment847" headers="r20c1-t2 r1c2-t2">
<p>invalid cursor name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r21c1-t2" headers="r1c1-t2">
<p>35</p>
</td>
<td class="cellalignment847" headers="r21c1-t2 r1c2-t2">
<p>invalid condition number</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r22c1-t2" headers="r1c1-t2">
<p>37</p>
</td>
<td class="cellalignment847" headers="r22c1-t2 r1c2-t2">
<p>dynamic SQL syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r23c1-t2" headers="r1c1-t2">
<p>3C</p>
</td>
<td class="cellalignment847" headers="r23c1-t2 r1c2-t2">
<p>ambiguous cursor name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r24c1-t2" headers="r1c1-t2">
<p>3D</p>
</td>
<td class="cellalignment847" headers="r24c1-t2 r1c2-t2">
<p>invalid catalog name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r25c1-t2" headers="r1c1-t2">
<p>3F</p>
</td>
<td class="cellalignment847" headers="r25c1-t2 r1c2-t2">
<p>invalid schema name</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r26c1-t2" headers="r1c1-t2">
<p>40</p>
</td>
<td class="cellalignment847" headers="r26c1-t2 r1c2-t2">
<p>transaction rollback</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r27c1-t2" headers="r1c1-t2">
<p>42</p>
</td>
<td class="cellalignment847" headers="r27c1-t2 r1c2-t2">
<p>syntax error or access rule violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r28c1-t2" headers="r1c1-t2">
<p>44</p>
</td>
<td class="cellalignment847" headers="r28c1-t2 r1c2-t2">
<p>with check option violation</p>
</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r29c1-t2" headers="r1c1-t2">
<p>HZ</p>
</td>
<td class="cellalignment847" headers="r29c1-t2 r1c2-t2">
<p>remote database access</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The class code HZ is reserved for conditions defined in International Standard ISO/IEC DIS 9579-2, <span class="italic">Remote Database Access.</span></div>
<p><a href="appd.htm#g642406">Appendix D, "SQLSTATE Codes"</a> shows how Oracle errors map to SQLSTATE status codes. In some cases, several Oracle errors map to a status code. In other cases, no Oracle error maps to a status code (so the last column is empty). Status codes in the range 60000 .. 99999 are implementation-defined. <a id="sthref201"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008293"></a>
<div class="sect1">
<h2 class="sect1">Obtaining the <a id="sthref202"></a>Number of Rows Processed</h2>
<p>Starting with release 8.0, the function <span class="italic"><a id="sthref203"></a>rows_processed</span>, in the public package oracle_sqllib, returns the number of rows processed by the last SQL statement.</p>
<p>The prototypes are:</p>
<pre>
function ROWS_PROCESSED return integer;
</pre>
<p>and</p>
<pre>
function ROWS_PROCESSED (ctx oracle_sqllib.sql_context) return integer;
</pre>
<p>where the context, <span class="italic">ctx,</span> has been allocated previously.</p>
</div>
<!-- class="sect1" -->
<a id="i1008305"></a>
<div class="sect1">
<h2 class="sect1">Handling Nulls<a id="sthref204"></a></h2>
<p>A database column or a SQL expression can have a value, or it can have a special status called <span class="italic">null</span>. A null means the absence of a value. A numeric value or a special string encoding cannot be used to indicate a null, since all allowable numeric or string values are reserved for actual data. In a SQL*Module application, you must use an <span class="italic">indicator variable</span> to test a returned value for a null, or to insert a null into a database column.<a id="sthref205"></a></p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The term <span class="italic">indicator variable</span> is also referred to as an <span class="italic">indicator parameter</span> when discussing a variable being passed to or retrieved from a procedure.</div>
<div class="sect2"><a id="sthref206"></a>
<h3 class="sect2">Indicator Variables<a id="sthref207"></a></h3>
<p>From the host language point of view, an indicator variable is a small integer that is passed to a procedure. In the SQL statement of the procedure, the indicator is associated with the corresponding host parameter. For example, the Module Language procedure performs a simple one-row SELECT (the host parameter in the WHERE clause is assumed to be a primary key):</p>
<pre>
PROCEDURE get_commission ( 
                      :commission   REAL, 
                      :comm_ind     SMALLINT, 
                      :emp_number   INTEGER, 
                       SQLSTATE); 
   SELECT comm INTO :commission INDICATOR :comm_ind 
      FROM emp WHERE empno = :emp_number; 
</pre>
<p>In an Ada application, you call this procedure and test for a possible null in the returned COMMISSION as follows:</p>
<pre>
EMPNO := 7499; 
GET_COMMISSION (COMMISSION, COMM_INDICATOR, EMPNO, SQLSTATE); 
if COMM_INDICATOR &lt; 0 then 
    PUT_LINE("Commission is null."); 
else 
    PUT("Commission is "); 
    PUT(COMMISSION); 
    NEW_LINE; 
end if; 
</pre>
<p>So if an indicator variable is less than zero when a procedure returns, the associated host parameter has an undefined value.</p>
<p>You can also associate indicator variables with input parameters, for column values that are used to insert a new row into a table, or update an existing row. If the value in the indicator variable is greater than or equal to zero, the value in the associated parameter is used as the input value. If the indicator variable is set to -1, the value in the associated parameter is ignored, and a null is inserted as the column value.</p>
<p>For example, the following module procedure inserts a new row into an inventory table:</p>
<pre>
PROCEDURE new_part ( 
        :part_no     INTEGER, 
        :description CHAR(200), 
        :bin_number  INTEGER, 
        :bin_no_ind  SMALLINT, 
         SQLSTATE); 
 
   INSERT INTO inventory (part_number, description, bin_no) 
       VALUES (:part_no, :description, 
               :bin_number INDICATOR :bin_no_ind); 
</pre>
<p>When you call this procedure with the parameter <span class="italic">bin_no_ind</span> set to -1, any value in the parameter <span class="italic">bin_number</span> is ignored, and a null is inserted into the BIN_NO column of the table.</p>
<p>If the host language parameter is a character type, and has an associated indicator variable, a returned indicator value greater than zero indicates that the returned value was truncated. The value of the indicator is the original (un-truncated) length, in bytes, of the column or expression value.<a id="sthref208"></a></p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008351"></a>
<div class="sect1">
<h2 class="sect1">Cursors<a id="sthref209"></a></h2>
<p>Programs that retrieve data from a table can work in two different ways. In one case, a query might be constructed that expects either one row of data to be returned, or no row. For example, if the program performs a request such as ''give me the name of the employee whose employee number is 7499", where the employee number is a primary key of the table (and hence, by definition, unique), the request either returns the name of the employee whose employee number is 7499, or returns an indication that no such employee exists in the table.</p>
<p>If no employee exists with that number, the query procedure returns a ''no data found" indication in the SQLCODE or SQLSTATE parameter.</p>
<p>For Oracle to process any SQL statement, a cursor is required. However, SQL*Module <span class="italic">implicitly</span> defines a cursor for INSERT, UPDATE, and DELETE statements, as well as SELECT statements.</p>
<p>However for queries that can return multiple rows, an explicit cursor must be defined in the module or stored package to fetch all the rows. You can use static cursors, or cursor variables. See <a href="#i1008351">"Cursors"</a> for a description of cursor variables. <a id="sthref210"></a></p>
<p>See the code in <a href="ch_six.htm#i1009763">"Module Language Sample Program"</a> for several examples that use explicit cursors.</p>
</div>
<!-- class="sect1" -->
<a id="i1008366"></a>
<div class="sect1">
<h2 class="sect1">Specification Files<a id="sthref211"></a></h2>
<p>The SQL*Module compiler generates specification files. These are text files that contain declarations for the module or interface procedures that SQL*Module generates.</p>
<p>You must include the specification file directly in the source of your host application. The name of the specification file is the base name of the Module Language output file for SQL*Module, with a system-specific extension. These extensions are documented in <a href="ch_five.htm#i1012494">"Specification File"</a>.</p>
<p>In Ada applications, you must compile the specification file (or files) that SQL*Module generates. You then include the specification for the module procedures or stubs in each application that calls module procedures or stubs using the with context clause.</p>
<p>The naming of specification files is discussed in detail in <a href="ch_six.htm#i1009402">Chapter 6, "Demonstration Programs"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="i1008379"></a>
<div class="sect1">
<h2 class="sect1">Calling a Procedure</h2>
<p>You call procedures generated by SQL*Module using the normal procedure call format of the host language. Procedures can only return values in parameters, including the SQLCODE and SQLSTATE parameters. The generated procedures are not functions.</p>
</div>
<!-- class="sect1" -->
<a id="i1008382"></a>
<div class="sect1">
<h2 class="sect1"><a id="sthref212"></a>Arrays as Procedure Arguments</h2>
<p>SQL*Module supports array bind and define variables as arguments to procedures and functions:</p>
<pre>
PROCEDURE foo (:arrname ARRAY(n) OF type, SQLCODE);
</pre>
<p>where n is the size of arrname, and type is listed in <a href="#i1008407">"Globalization Support"</a>.</p>
<p>For example:</p>
<pre>
PROCEDURE selempno (:eno ARRAY(14) of INTEGER, SQLCODE);
   SELECT empno INTO :eno FROM emp;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Host arrays are allowed in SELECT, FETCH, INSERT, UPDATE and DELETE statements only.</div>
<p>Restrictions:</p>
<p>1. Arrays may not be specified when RPC_GENERATE=yes or STORE_PACKAGE=yes. See <a href="ch_three.htm#i1007379">"Stored Packages"</a> for more information. See both these command-line options in <a href="ch_five.htm#g1018019">Chapter 5, "Running SQL*Module"</a>.</p>
<p>2. The maximum dimension of an array is 32000</p>
<p>3. SQL*Module does not allow multi-dimension arrays.</p>
</div>
<!-- class="sect1" -->
<a id="i1008407"></a>
<div class="sect1">
<h2 class="sect1">Globalization Support</h2>
<p>Not all writing systems can be represented using the 7-bit or 8-bit ASCII character set. Some languages require multibyte character sets. Also, countries have different ways of punctuating numbers, and representing dates and currency symbols.</p>
<p>Oracle provides Globalization Support, which lets you process single-byte and multibyte character data and convert between character sets. It also lets your applications run in different language environments. With Globalization Support, number and date formats adapt automatically to the language conventions specified for a user session. Thus, Globalization Support allows users around the world to interact with Oracle in their native languages.</p>
<p>You control the operation of language-dependent features by specifying various Globalization Support parameters. Default values for these parameters can be set in the Oracle initialization file. The following table shows what each Globalization Support parameter specifies:</p>
<div class="inftblinformal">
<table class="cellalignment852" title="NLS Parameters" summary="NLS Parameters" dir="ltr">
<thead>
<tr class="cellalignment839">
<th class="cellalignment846" id="r1c1-t6">Globalization Support Parameter</th>
<th class="cellalignment846" id="r1c2-t6">Specifies ...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment839">
<td class="cellalignment847" id="r2c1-t6" headers="r1c1-t6">NLS_LANGUAGE</td>
<td class="cellalignment847" headers="r2c1-t6 r1c2-t6">language-dependent conventions</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r3c1-t6" headers="r1c1-t6">NLS_TERRITORY</td>
<td class="cellalignment847" headers="r3c1-t6 r1c2-t6">territory-dependent conventions</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r4c1-t6" headers="r1c1-t6">NLS_DATE_FORMAT</td>
<td class="cellalignment847" headers="r4c1-t6 r1c2-t6">date format</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r5c1-t6" headers="r1c1-t6">NLS_DATE_LANGUAGE</td>
<td class="cellalignment847" headers="r5c1-t6 r1c2-t6">language for day and month names</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r6c1-t6" headers="r1c1-t6">NLS_NUMERIC_CHARACTERS</td>
<td class="cellalignment847" headers="r6c1-t6 r1c2-t6">decimal character and group separator</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r7c1-t6" headers="r1c1-t6">NLS_CURRENCY</td>
<td class="cellalignment847" headers="r7c1-t6 r1c2-t6">local currency symbol</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r8c1-t6" headers="r1c1-t6">NLS_ISO_CURRENCY</td>
<td class="cellalignment847" headers="r8c1-t6 r1c2-t6">ISO currency symbol</td>
</tr>
<tr class="cellalignment839">
<td class="cellalignment847" id="r9c1-t6" headers="r1c1-t6">NLS_SORT</td>
<td class="cellalignment847" headers="r9c1-t6 r1c2-t6">sort sequence</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>The main parameters are NLS_LANGUAGE and NLS_TERRITORY. NLS_LANGUAGE specifies the default values for language-dependent features, which include</p>
<ul>
<li>
<p>language for Server messages</p>
</li>
<li>
<p>language for day and month names</p>
</li>
<li>
<p>sort sequence</p>
</li>
</ul>
<p>NLS_TERRITORY specifies the default values for territory-dependent features, which include</p>
<ul>
<li>
<p>date format</p>
</li>
<li>
<p>decimal character</p>
</li>
<li>
<p>group separator</p>
</li>
<li>
<p>local currency symbol</p>
</li>
<li>
<p>ISO currency symbol</p>
</li>
</ul>
<p>You can control the operation of language-dependent Globalization Support features for a user session by specifying the parameter NLS_LANG as follows:<a id="sthref213"></a></p>
<pre>
NLS_LANG = &lt;language&gt;_&lt;territory&gt;.&lt;character set&gt; 
</pre>
<p>where <span class="italic">language</span> specifies the value of NLS_LANGUAGE for the user session, <span class="italic">territory</span> specifies the value of NLS_TERRITORY, and <span class="italic">character set</span> specifies the encoding scheme used for the terminal. An <span class="italic">encoding scheme</span> (usually called a character set or code page) is a range of numeric codes that corresponds to the set of characters a terminal can display. It also includes codes that control communication with the terminal.<a id="sthref214"></a><a id="sthref215"></a><a id="sthref216"></a></p>
<p>You define NLS_LANG as an environment variable (or the equivalent on your system). For example, on UNIX using the C shell, you might define NLS_LANG as follows:</p>
<pre>
setenv NLS_LANG French_Canadian.WE8ISO8859P1 
</pre>
<p>SQL*Module fully supports all the Globalization Support features that allow your applications to process multilingual data stored in an Oracle Database version 8 database. For example, you can run a SQL*Module-derived client application that interacts with a remote server, where the client and the server are using different character sets, possibly with a different number of bytes each character. In these contexts, remember that specification of the lengths of string types, such as the SQL datatype CHARACTER(N), is always specified in <span class="italic">bytes</span>, not characters.</p>
<p>You can even pass Globalization Support parameters to the TO_CHAR, TO_DATE, and TO_NUMBER functions. For more information about Globalization Support, see the <a class="olink ADFNS" href="../e41502/toc.htm"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>.</p>
<pre>
</pre></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment838">
<tr>
<td class="cellalignment847">
<table class="cellalignment843">
<tr>
<td class="cellalignment842"><a href="ch_three.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment842"><a href="ch_five.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment849">
<table class="cellalignment841">
<tr>
<td class="cellalignment842"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment842"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment842"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment842"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment842"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment842"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
