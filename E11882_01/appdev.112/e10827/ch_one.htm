<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Introduction to SQL*Module</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1" />
<meta name="dcterms.created" content="2009-08-02T18:45:28Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="SQL*Module for Ada Programmer's Guide" />
<meta name="dcterms.identifier" content="E10827-01" />
<meta name="dcterms.isVersionOf" content="ZZMOD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="preface.htm" title="Previous" type="text/html" />
<link rel="Next" href="ch_two.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e10827.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">4/15</span> <!-- End Header --><a id="g1007096"></a><a id="i1006171"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to SQL*Module</h1>
<p>This chapter introduces you to SQL*Module and answers the following questions:</p>
<ul>
<li>
<p><a href="#i1006190">What Is SQL*Module?</a></p>
</li>
<li>
<p><a href="#i1006264">SQL*Module as an Interface Builder</a></p>
</li>
<li>
<p><a href="#i1006290">What Is Supported by SQL*Module?</a></p>
</li>
<li>
<p><a href="#i1006300">What SQL Statements are Not Supported by SQL*Module?</a></p>
</li>
</ul>
<a id="i1006190"></a>
<div class="sect1">
<h2 class="sect1">What Is SQL*Module?<a id="sthref10"></a></h2>
<p>You use SQL*Module to develop and manage Ada applications that access data in an Oracle database. It allows an Ada application to access relational databases without using embedded SQL, and without using a proprietary application programming interface.</p>
<p>SQL*Module fulfills three roles in application development:</p>
<ul>
<li>
<p>It compiles SQL standard Module Language files. A Module Language file contains parameterized procedures that encapsulate SQL statements. These procedures are translated by the SQL*Module compiler into calls to a SQL runtime library that interacts with the Oracle server.</p>
</li>
<li>
<p>It builds Ada code files that contain interface procedures (often called <span class="italic">stubs</span>). This allows your application to call stored procedures in an Oracle database directly, without requiring an anonymous PL/SQL block. The interface procedures can be time-stamped, so if the stored procedure is recompiled after the interface procedure was generated, a runtime error occurs.</p>
</li>
<li>
<p>SQL*Module can also <span class="italic">generate</span> stored procedures in a database, by compiling Module Language files, and storing the procedures as part of stored packages, with the appropriate interface mechanism automatically provided in the package's procedure declarations.</p>
</li>
</ul>
<div class="sect2"><a id="sthref11"></a>
<h3 class="sect2">Background</h3>
<p>The SQL language was designed to operate on entities in a relational database. SQL was not designed to be a general-purpose programming language, and, in fact, it is conceptually very different from 3GLs such as Ada or C. Some of these differences are:</p>
<ul>
<li>
<p>SQL is a non-procedural database manipulation language, hence it deals with database objects, such as tables, rows, columns, and cursors. A third-generation language deals with data structures such as scalar variables, arrays, records, and lists.</p>
</li>
<li>
<p>SQL has a limited ability to express complicated computational operations.</p>
</li>
<li>
<p>SQL does not provide the procedural capabilities (such as flow of control statements) that are required to implement efficient programs.</p>
</li>
</ul>
<p>To achieve maximum flexibility when creating large applications, you must combine SQL with host procedural programming language statements. There are several ways to do this, and these are discussed briefly in the next section.</p>
</div>
<!-- class="sect2" -->
<a id="i1006204"></a>
<div class="sect2">
<h3 class="sect2">Precompilers</h3>
<p>One way to use a procedural language to access data in a relational database is to embed SQL statements directly in a program written in a host 3GL such as C or C++. After the program is coded, you use a precompiler to translate the SQL statements into calls to a runtime library that processes the SQL, and submits the SQL statements to the database.</p>
<p>See <a href="#i1006221">Figure 1-1, "Developing with the Precompilers"</a> for details of this process.</p>
<p>While embedded SQL is very useful, it can have drawbacks when very large applications are being developed. There are several reasons for this:</p>
<ul>
<li>
<p>Use of embedded SQL requires study of the technical details of the precompiler.</p>
</li>
<li>
<p>SQL code does not follow the syntactic and semantic constraints of the host language, and can confuse specialized tools, such as syntax-directed editors and "lint" programs.</p>
</li>
<li>
<p>When the precompiler processes code that contains embedded SQL, it introduces extra data structures and code in the generated output code, making source-level debugging more difficult.</p>
</li>
<li>
<p>Techniques for error handling and recovery in embedded SQL programs can be difficult to understand and apply, and subtle bugs can arise when developers do not appreciate all the problems involved in embedded SQL error handling.<a id="sthref12"></a></p>
</li>
</ul>
<p>shows how you develop applications using the Oracle precompilers.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006221"></a>Figure 1-1 Developing with the Precompilers</p>
<img width="600" height="578" src="img/smd80002.gif" alt="Description of Figure 1-1 follows" title="Description of Figure 1-1 follows" /><br />
<a id="sthref13" href="img_text/smd80002.htm">Description of "Figure 1-1 Developing with the Precompilers"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div class="sect2"><a id="sthref14"></a>
<h3 class="sect2">The Module Language Concept</h3>
<p>The ANSI SQL standards committee defined the embedded SQL standard in two steps. A formalism called Module Language was defined, then the embedded SQL standard was derived from Module Language.<a id="sthref15"></a></p>
<p>Using Module Language is very straightforward: place all SQL code in a separate module, and define an interface between the module containing the SQL code and the host program written in Ada. At the most concrete level, the interface simply consists of</p>
<ul>
<li>
<p>a standard way of calling Module Language procedures from Ada.</p>
</li>
<li>
<p>a standard way to return error and warning information</p>
</li>
<li>
<p>specification of conversions between SQL datatypes (such as DOUBLE PRECISION or SMALLINT) and host language datatypes or derived types defined in a standard package in Ada<a id="sthref16"></a></p>
</li>
</ul>
<p>It is also possible to develop more abstract interfaces between the host language and Module Language. One example of this is the SAMeDL (SQL Ada Module Description Language) developed at Carnegie Mellon and the Software Engineering Institute.<a id="sthref17"></a><a id="sthref18"></a></p>
<p>shows how you would develop an application using SQL standard Module Language.<a id="sthref19"></a></p>
<div class="figure">
<p class="titleinfigure"><a id="i1006243"></a>Figure 1-2 Developing with Module Language</p>
<img width="600" height="627" src="img/amd80001.gif" alt="Description of Figure 1-2 follows" title="Description of Figure 1-2 follows" /><br />
<a id="sthref20" href="img_text/amd80001.htm">Description of "Figure 1-2 Developing with Module Language"</a><br />
<br /></div>
<!-- class="figure" -->
<p>A Module Language compiler such as SQL*Module generates a call-level interface to procedures defined within a module, allowing them to be called like any other host language procedure. Details of the implementation of these procedures are hidden from the application.</p>
<p>The most immediate benefit of this approach is specialization. By separating SQL and the host language, an application developer can focus on using the host language to perform application tasks, and a database developer can focus on using SQL to perform database tasks.</p>
<p>The developer of the application does not need to know SQL. The procedures to be called can be treated as canned routines that return variables of well defined datatypes in the host language. Error handling becomes straightforward, since all module procedures can return a single error indicator.</p>
<p>shows the operation of SQL*Module when it is used to compile SQL standard modules. The module file contains a preamble, defining the host 3GL to be Ada, and two simple procedures in Module Language. When SQL*Module compiles this module, it produces two output files: a <span class="italic">source code output file</span>, that contains calls to the runtime library SQLLIB that do the work of accessing the database, and a <span class="italic">specification file</span> that declares the procedures in the source code file.</p>
<p>You include the specification files in the host application code that calls the module procedures, using the appropriate language-specific mechanism.<a id="sthref21"></a></p>
<div class="figure">
<p class="titleinfigure"><a id="i1006258"></a>Figure 1-3 Compiling a Module</p>
<img width="600" height="572" src="img/amd80003.gif" alt="Description of Figure 1-3 follows" title="Description of Figure 1-3 follows" /><br />
<a id="sthref22" href="img_text/amd80003.htm">Description of "Figure 1-3 Compiling a Module"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006264"></a>
<div class="sect1">
<h2 class="sect1">SQL*Module as an Interface Builder <a id="sthref23"></a><a id="sthref24"></a><a id="sthref25"></a></h2>
<p>In addition to its role as a Module Language compiler, SQL*Module can also build host language interfaces to procedures that are stored in an Oracle database.</p>
<p>shows schematically how SQL*Module functions as an interface builder. The compiler extracts the interfaces to stored procedures, and creates an Ada output file that contains calls to the procedures. Your Ada application then accesses the stored procedures in the database by calling these interface procedures.</p>
<p>When you create interface procedure files (output files that contain interface procedures for calling stored procedures), you can choose either <span class="italic">early binding</span> or <span class="italic">late binding</span>. <a id="sthref26"></a><a id="sthref27"></a><a id="sthref28"></a><a id="sthref29"></a></p>
<p>The early binding option creates a time stamp in the interface procedure for the time that the stored procedure was last compiled. If the stored procedure has been recompiled after the interface procedure was generated, a runtime error is generated when the interface procedure is called from the host application.</p>
<p>The late binding option calls the stored procedure through an anonymous PL/SQL block, and no time stamp is used. See <a href="ch_three.htm#i1007434">"Early and Late Binding"</a> for more information about binding.</p>
<div class="figure">
<p class="titleinfigure"><a id="i1006284"></a>Figure 1-4 SQL*Module as an Interface Builder</p>
<img width="600" height="621" src="img/amd80002.gif" alt="Description of Figure 1-4 follows" title="Description of Figure 1-4 follows" /><br />
<a id="sthref30" href="img_text/amd80002.htm">Description of "Figure 1-4 SQL*Module as an Interface Builder"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i1006290"></a>
<div class="sect1">
<h2 class="sect1">What Is Supported by SQL*Module? <a id="sthref31"></a></h2>
<p>SQL*Module supports international standards for Module Language. Refer to the Preface to this Guide for more information about supported standards. In addition, Oracle has extended the current standard in several ways. For example, datatype conversions between Oracle datatypes and Ada datatypes are defined, comments can be used in a module, and so forth. <a href="ch_two.htm#g1019029">Chapter 2, "Module Language"</a> describes the Module Language capabilities of SQL*Module in detail. A compile time option, the <span class="italic">FIPS flagger</span>, is available to flag use of non-standard extensions to Module Language and to SQL.</p>
<p>In addition to the complete Module Language standard, SQL*Module also provides a way for a host application to access PL/SQL stored procedures in an Oracle database. If a package exists in an Oracle database that contains procedures, you can use SQL*Module to build interface procedures corresponding to the PL/SQL procedures in the package. Thus the application can call the stored procedures directly.</p>
<p>SQL*Module generates code and specification files that can be compiled with the Ada compiler.</p>
<p>You can compile your stored procedures or modules to get an interface procedures file and call the modules directly from an Ada host program.</p>
</div>
<!-- class="sect1" -->
<a id="i1006300"></a>
<div class="sect1">
<h2 class="sect1">What SQL Statements are Not Supported by SQL*Module?</h2>
<ul>
<li>
<p>DDL (data definition language) is not supported.</p>
</li>
<li>
<p>DML (Data Manipulation Language) statements other than SELECT, UPDATE, DELETE, and INSERT are not supported.</p>
</li>
<li>
<p>Transaction control statements other than COMMIT and ROLLBACK, and CONNECT and DISCONNECT are not supported.</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment838">
<tr>
<td class="cellalignment847">
<table class="cellalignment843">
<tr>
<td class="cellalignment842"><a href="preface.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment842"><a href="ch_two.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2009,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment849">
<table class="cellalignment841">
<tr>
<td class="cellalignment842"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment842"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment842"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment842"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment842"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment842"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
