<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>GeoRaster Overview and Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information for the GeoRaster feature of Oracle Spatial and Graph, which lets you store, index, query, analyze, and deliver raster data (raster image and gridded data and its associated metadata)." />
<meta name="dcterms.created" content="2013-11-18T18:24:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial GeoRaster Developer's Guide" />
<meta name="dcterms.identifier" content="E11827-09" />
<meta name="dcterms.isVersionOf" content="GEORS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="geor_newfeat.htm" title="Previous" type="text/html" />
<link rel="Next" href="geor_datatypes_metadata.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11827.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/15</span> <!-- End Header -->
<div id="GEORS100" class="chapter"><a id="CHDHBEJH"></a>
<h1 class="chapter"><span class="secnum">1</span> GeoRaster Overview and Concepts</h1>
<p>GeoRaster is a feature of Oracle Spatial that lets you store, index, query, analyze, and deliver raster image and gridded data and its associated metadata. GeoRaster provides Oracle spatial data types and an object-relational schema. You can use these data types and schema objects to store multidimensional grid layers and digital images that can be referenced to positions on the Earth's surface or in a local coordinate system. If the data is georeferenced, you can find the location on Earth for a cell in an image; or given a location on Earth, you can find the cell in an image associated with that location.</p>
<p>GeoRaster can be used with data from any technology that captures or generates images, such as remote sensing, photogrammetry, and thematic mapping. It can be used in a wide variety of application areas, including location based services, geoimagery archiving, environmental monitoring and assessment, geological engineering and exploration, natural resource management, defense, emergency response, telecommunications, transportation, urban planning, and homeland security.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To use GeoRaster, you must understand the main concepts, data types, techniques, operators, procedures, and functions of Oracle Spatial, which are documented in <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.
<p>You should also be familiar with raster and image concepts and terminology, techniques for capturing or creating raster data, and techniques for processing raster data.</p>
</div>
<p><a id="sthref22"></a><a id="sthref23"></a>GeoRaster uses and depends upon several components that are included with Oracle Database, including the Java virtual machine (JVM) and Oracle XML DB.</p>
<div class="infobox-note">
<p class="notep1">Installation and Upgrade Notes:</p>
<a id="sthref24"></a><a id="sthref25"></a><a id="sthref26"></a>You must ensure that Oracle XML DB Repository is properly installed and that the value of the <code>COMPATIBILITY</code> database initialization parameter is <code>10.0</code> or greater. For more information, see the appendix about installation, compatibility, and upgrade issues in <a class="olink SPATL330" href="../../appdev.112/e11830/sdo_migrat.htm#SPATL330"><span class="italic">Oracle Spatial Developer's Guide</span></a>.
<p>After a database upgrade, you should call the <a href="geor_admin_ref.htm#CHDDAAGJ">SDO_GEOR_ADMIN.isUpgradeNeeded</a> function to check for any invalid GeoRaster objects and invalid system data for the current version. For more information, see <a href="geor_operations.htm#CHDEEBDE">Section 3.20</a>.</p>
</div>
<p>This chapter contains the following major sections:</p>
<ul>
<li>
<p><a href="#CHDBCFFB">Section 1.1, "Vector and Raster Data"</a></p>
</li>
<li>
<p><a href="#CHDDHFBE">Section 1.2, "Raster Data Sources"</a></p>
</li>
<li>
<p><a href="#CHDDIDAF">Section 1.3, "GeoRaster Data Model"</a></p>
</li>
<li>
<p><a href="#CHDHHBAH">Section 1.4, "GeoRaster Physical Storage"</a></p>
</li>
<li>
<p><a href="#CHDGCCJH">Section 1.5, "Bands, Layers, and Metadata"</a></p>
</li>
<li>
<p><a href="#CHDGCAIA">Section 1.6, "Georeferencing"</a></p>
</li>
<li>
<p><a href="#CHDDEGJJ">Section 1.7, "Pyramids"</a></p>
</li>
<li>
<p><a href="#CHDEIJCI">Section 1.8, "Bitmap Masks"</a></p>
</li>
<li>
<p><a href="#BABJCCBA">Section 1.9, "NODATA Values and Value Ranges"</a></p>
</li>
<li>
<p><a href="#CHDBEEJI">Section 1.10, "Compression and Decompression"</a></p>
</li>
<li>
<p><a href="#CHDGAIDI">Section 1.11, "GeoRaster and Database Management"</a></p>
</li>
<li>
<p><a href="#CHDJCAEA">Section 1.12, "GeoRaster PL/SQL API"</a></p>
</li>
<li>
<p><a href="#BABDIGCD">Section 1.13, "GeoRaster Java API"</a></p>
</li>
<li>
<p><a href="#CHDHHFHJ">Section 1.14, "GeoRaster Tools: Viewer, Loader, Exporter"</a></p>
</li>
<li>
<p><a href="#CHDBEFHC">Section 1.15, "GeoRaster PL/SQL and Java Demo Files"</a></p>
</li>
<li>
<p><a href="#CHDDDFJG">Section 1.16, "README File for Spatial and Related Features"</a></p>
</li>
</ul>
<a id="CHDBCFFB"></a>
<div id="GEORS912" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.1</span> <a id="sthref27"></a><a id="sthref28"></a><a id="sthref29"></a>Vector and Raster Data</h2>
<p>Geographic features can be represented in vector or raster format, or both. With vector data, points are represented by their explicit x,y,z coordinates, lines are strings of points, and areas are represented as polygons whose borders are lines. This kind of vector format can be used to record precisely the location and shape of spatial objects. With raster data, you can represent spatial objects by assigning values to the cells that cover the objects, and you can represent the cells as arrays. This kind of raster format has less precision than vector format, but it is ideal for many types of spatial analysis.</p>
<p>In the raster geographic information systems (GIS) world, this kind of raster data is normally called <a id="sthref30"></a>gridded data. In image processing systems, the raster data representations are typically called <span class="italic">images</span> instead of grids. Despite any differences between grids and images, both forms of spatial information are usually represented as matrix structures (that is, arrays of cells), and each cell is usually regularly aligned in the space.</p>
</div>
<!-- class="sect1" -->
<a id="CHDDHFBE"></a>
<div id="GEORS913" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.2</span> Raster Data Sources</h2>
<p>Raster data is collected and used by a variety of geographic information technologies, including remote sensing, airborne photogrammetry, cartography, and global positioning systems. The collected data is then analyzed by digital image processing systems, computer graphics applications, and computer vision technologies. These technologies use several data formats and create a variety of products.</p>
<p>This section briefly describes some of the main data sources and uses for GeoRaster, focusing on concepts and techniques you need to be aware of in developing applications. It does not present detailed explanations of the technologies; you should consult standard textbooks and reference materials for that information.</p>
<div id="GEORS914" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref31"></a>
<h3 class="sect2"><span class="secnum">1.2.1</span> <a id="sthref32"></a>Remote Sensing</h3>
<p>Remote sensing obtains information about an area or object through a device that is not physically connected to the area or object. For example, the sensor might be in a satellite, balloon, airplane, boat, or ground station. The sensor device can be any of a variety of devices, including a frame camera, pushbroom (swath) imager, synthetic aperture radar (SAR), hydrographic sonar, or paper or film scanner. Remote sensing applications include environmental assessment and monitoring, global change detection and monitoring, and natural resource surveying.</p>
<p>The data collected by remote sensing is often called <span class="bold">geoimagery</span>. The wavelength, number of bands, and other factors determine the radiometric characteristics of the geoimages. The geoimages can be single-band, multiband, or hyperspectral, all of which can be managed by GeoRaster. These geoimages can cover any area of the Earth (especially for images sensed by satellite). The temporal resolution can be high, such as with meteorological satellites, making it easier to detect changes. For remote sensing applications, various types of resolution (temporal, spatial, spectral, and radiometric) are often important.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS915" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref33"></a>
<h3 class="sect2"><span class="secnum">1.2.2</span> <a id="sthref34"></a>Photogrammetry</h3>
<p>Photogrammetry derives metric information from measurements made on photographs. Most photogrammetry applications use airborne photos or high-resolution images collected by satellite remote sensing. In traditional photogrammetry, the main data includes images such as black and white photographs, color photographs, and stereo photograph pairs.</p>
<p>Photogrammetry rigorously establishes the geometric relationship between the image and the object as it existed at the time of the imaging event, and enables you to derive information about the object from its imagery. The relationship between image and object can be established by several means, which can be grouped in two categories: analog (using optical, mechanical, and electronic components) or analytical (where the modeling is mathematical and the processing is digital). Analog solutions are increasingly being replaced by analytical/digital solutions, which are also referred to as <span class="italic">softcopy photogrammetry</span>.</p>
<p>The main product from a softcopy photogrammetry system may include digital elevation models (DEMs) and orthoimagery. GeoRaster can manage all this raster data, together with its georeferencing information.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDGFII"></a>
<div id="GEORS916" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.2.3</span> <a id="sthref35"></a>Geographic Information Systems</h3>
<p>A geographic information system (GIS) captures, stores, and processes geographically referenced information. GIS software has traditionally been either vector-based or raster-based; however, with the GeoRaster feature, Oracle Spatial handles both raster and vector data.</p>
<p>Raster-based GIS systems typically process georectified gridded data. Gridded data can be discrete or continuous. Discrete data, such as political subdivisions, land use and cover, bus routes, and oil wells, is usually stored as integer grids. Continuous data, such as elevation, aspect, pollution concentration, ambient noise level, and wind speed, is usually stored as floating-point grids. GeoRaster can store all this data.</p>
<p>The attributes of a discrete grid layer are stored in a relational table called a <a id="sthref36"></a>value attribute table (VAT). A VAT contains columns specified by the GIS vendor, and may also contain user-defined columns. The VAT can be stored in the Oracle database as a plain table. The VAT name can be registered within the corresponding GeoRaster object so that raster GIS applications can use the table.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS917" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref37"></a>
<h3 class="sect2"><span class="secnum">1.2.4</span> <a id="sthref38"></a><a id="sthref39"></a>Cartography</h3>
<p><span class="bold">Cartography</span> is the science of creating maps, which are two-dimensional representations of the three-dimensional Earth (or of a non-Earth space using a local coordinate system). Today, maps are digitized or scanned into digital forms, and map production is largely automated. Maps stored on a computer can be queried, analyzed, and updated quickly.</p>
<p>There are many types of maps, corresponding to a variety of uses or purposes. Examples of map types include base (background), thematic, relief (three-dimensional), aspect, cadastral (land use), and inset. Maps usually contain several annotation elements to help explain the map, such as scale bars, legends, symbols (such as the north arrow), and labels (names of cities, rivers, and so on).</p>
<p>Maps can be stored in raster format (and thus can be managed by GeoRaster), in vector format, or in a hybrid format.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS918" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref40"></a>
<h3 class="sect2"><span class="secnum">1.2.5</span> <a id="sthref41"></a>Digital Image Processing</h3>
<p>Digital image processing is used to process raster data in standard image formats, such as TIFF, GIF, JFIF (JPEG), and Sun Raster, as well as in many geoimage formats, such as NITF, GeoTIFF, ERDAS IMG, and PCI PIX. Image processing techniques are widely used in remote sensing and photogrammetry applications. These techniques are used as needed to enhance, correct, and restore images to facilitate interpretation; to correct for any blurring, distortion, or other degradation that may have occurred; and to classify geo-objects automatically and identify targets. The source, intermediate, and result imagery can be loaded and managed by GeoRaster.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS919" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref42"></a>
<h3 class="sect2"><span class="secnum">1.2.6</span> <a id="sthref43"></a><a id="sthref44"></a><a id="sthref45"></a>Geology, Geophysics, and Geochemistry</h3>
<p>Geology, geophysics, and geochemistry all use digital data and produce some digital raster maps that can be managed by GeoRaster.</p>
<ul>
<li>
<p>In geology, the data includes regional geological maps, stratum maps, and rock slide pictures. In geological exploration and petroleum geology, computerized geostratum simulation, synthetic mineral prediction, and 3-D oil field characterization, all of which involve raster data, are widely used.</p>
</li>
<li>
<p>In geophysics, data about gravity, the magnetic field, seismic wave transportation, and other subjects is saved, along with georeferencing information.</p>
</li>
<li>
<p>In geochemistry, the contents of multiple chemical elements can be analyzed and measured. The triangulated irregular network (TIN) technique is often used to produce raster maps for further analysis, and image processing is widely used.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDIDAF"></a>
<div id="GEORS920" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.3</span> <a id="sthref46"></a><a id="sthref47"></a>GeoRaster Data Model</h2>
<p>Raster data can have some or all of the following elements:</p>
<ul>
<li>
<p>Cells or pixels</p>
</li>
<li>
<p>Spatial domain (footprint)</p>
</li>
<li>
<p>Spatial, temporal, and band reference information</p>
</li>
<li>
<p>Cell attributes</p>
</li>
<li>
<p>Metadata</p>
</li>
<li>
<p>Processing data and map support data</p>
</li>
</ul>
<p>GeoRaster uses a generic raster data model that is component-based, logically layered, and multidimensional. The core data in a raster is a multidimensional matrix of raster cells. Each cell is one element of the matrix, and its value is called the cell value, which is sampled at the center of the cell. If the GeoRaster object represents an image, a cell can also be called a pixel, which has only one value. (In GeoRaster, the terms <span class="italic">cell</span> and <span class="italic">pixel</span> are interchangeable.) The matrix has a number of dimensions, a cell depth, and a size for each dimension. The cell depth is the data size of the value of each cell. The cell depth defines the range of all cell values, and it applies to each single cell, not to an array of cells. This core raster data set can be blocked for optimal storage and retrieval.</p>
<p>The data model has a logically layered structure. The core data consists of one or more logical layers. For example, for multichannel remote sensing imagery, the layers are used to model the channels of the imagery. (Bands and layers are explained in <a href="#CHDGCCJH">Section 1.5</a>.) In the current release, each layer is a two-dimensional matrix of cells that consists of the row dimension and the column dimension.</p>
<p>GeoRaster data has metadata and attributes, and each layer of the GeoRaster data can have its own metadata and attributes. In the GeoRaster data model, all data other than the core cell matrix is the GeoRaster metadata. The GeoRaster metadata is further divided into different components (and is thus called component-based), which contain the following kinds of information:</p>
<ul>
<li>
<p>Object information</p>
</li>
<li>
<p>Raster information</p>
</li>
<li>
<p>Spatial reference system information</p>
</li>
<li>
<p>Date and time (temporal reference system) information</p>
</li>
<li>
<p>Band reference system information</p>
</li>
<li>
<p>Layer information for each layer</p>
</li>
</ul>
<p>Based on this data model, GeoRaster objects are described by the GeoRaster metadata XML schema (described in <a href="geor_xml_metadata.htm#CIAHFABB">Appendix A</a>), which is used to organize the metadata. Some schema components and subcomponents are required and others are optional. You must understand this XML schema if you develop GeoRaster loaders, exporters, or other applications. Some restrictions on the metadata exist for the current release, and these are described in the Usage Notes for the <a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> function (documented in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>), which checks the validity of the metadata for a GeoRaster object.</p>
<p>The GeoRaster object data types, described in <a href="geor_datatypes_metadata.htm#BGBEJEIJ">Chapter 2</a>, are based on the GeoRaster data model.</p>
<p>In this data model, two different types of coordinates need to be considered: the coordinates of each pixel (cell) in the raster matrix and the coordinates on the Earth that they represent. Consequently, two types of coordinate systems or spaces are defined: the cell coordinate system and the model coordinate system.</p>
<p>The <span class="bold"><a id="sthref48"></a><a id="sthref49"></a>cell coordinate system</span> (also called the <span class="italic">raster space</span>) is used to describe cells in the raster matrix and their spacing, and its dimensions are (in this order) row, column, and band. The <span class="bold"><a id="sthref50"></a><a id="sthref51"></a><a id="sthref52"></a>model coordinate system</span> (also called the <span class="italic">ground coordinate system</span> or the <span class="italic">model space</span>) is used to describe points on the Earth or any other coordinate system associated with an Oracle SRID value. The spatial dimensions of the model coordinate system are (in this order) X and Y, corresponding to the column and row dimensions, respectively, in the cell coordinate system. The logical layers correspond to the band dimension in the cell space.</p>
<p><a href="#CHDJDACF">Figure 1-1</a> shows the relationship between a raster image and its associated geographical (spatial) extent, and between parts of the image and their associated geographical entities.</p>
<div id="GEORS921" class="figure">
<p class="titleinfigure"><a id="CHDJDACF"></a>Figure 1-1 Raster Space and Model Space</p>
<img width="468" height="368" src="img/raster_model.gif" alt="Description of Figure 1-1 follows" /><br />
<a id="sthref53" href="img_text/raster_model.htm">Description of "Figure 1-1 Raster Space and Model Space"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#CHDJDACF">Figure 1-1</a>:</p>
<ul>
<li>
<p>In the objects on the left, the medium-size rectangle represents a raster image, and within it are a rectangular area showing a national park and a point identifying the location of a specific restaurant. Each pixel in the image can be identified by its coordinates in a cell coordinate system (the coordinate system associated with the raster image). The upper-left corner of the medium-size rectangle has the coordinate values associated with the <code>ULTCoordinate</code> value of the cell space for the GeoRaster object.</p>
</li>
<li>
<p>In the objects on the right, the large rectangle represents the geographical area (in the model, or ground, space) that is shown in the raster image, and within it are spatial geometries for the national park and the specific restaurant. Each entire geographical area and geometries within it can be identified using coordinates in its model (or, ground) coordinate system, such as WGS 84 for longitude/latitude data.</p>
</li>
</ul>
<p>For two-dimensional single-layer GeoRaster data, the cell coordinate system has a row dimension pointing downward and a column dimension pointing to the right, as shown in <a href="#CHDJDACF">Figure 1-1</a>. The origin of the cell space is always (0,0). The spacing is 1 cell or 1 pixel, and in most cases the cell coordinates are identified by integer row and column numbers. For a multiband image, the axis along bands is called the band dimension. For a time series multilayer image (where each layer has a different date or timestamp), the axis along layers is called the temporal dimension. Three-dimensional GeoRaster data includes the vertical dimension, which is vertical to both the row and column dimensions.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1065">
<tbody>
<tr class="cellalignment1051">
<td class="cellalignment1057">
<p class="notep1">Note:</p>
Only row, column, and band dimensions in the cell coordinate system are currently supported. The row and column dimensions are used to model two-dimensional spatial coordinates. The band dimension can be used to model multichannel remote sensing imagery or photographs and any other types of layers, such as temporal layers and multiple-grid themes.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<p>When the raster data is treated and processed as an array of numbers, integer addressing using row and column numbers is sufficient in most applications. However, the raster data array is generally a discretized representation of a continuous space, and so a one-to-one mapping of coordinates between the cell space and the model space is required, regardless of whether the value of a cell represents a collective value of an area or a single value of a point.</p>
<p>In other words, sub-cell (sub-pixel) addressing in the cell space is necessary. To support sub-cell addressing, GeoRaster defines two types of cell coordinate systems, depending on where the origin (0,0) of cells is defined. <a href="#BABDDDBD">Figure 1-2</a>, where each square represents one cell, shows the two types of cell coordinate systems: center-based and upperleft-based.</p>
<div id="GEORS922" class="figure">
<p class="titleinfigure"><a id="BABDDDBD"></a>Figure 1-2 Two Types of Cell Coordinate Systems</p>
<img width="449" height="228" src="img/cell_cs_types.gif" alt="Description of Figure 1-2 follows" /><br />
<a id="sthref54" href="img_text/cell_cs_types.htm">Description of "Figure 1-2 Two Types of Cell Coordinate Systems "</a><br />
<br /></div>
<!-- class="figure" -->
<p>The default cell coordinate system has its origin at the <span class="italic">center</span> of a cell, and is called the center-based cell coordinate system. The other cell coordinate system has its origin at the upper-left corner of a cell, and is called the upperleft-based cell coordinate system. In both systems, the cells are squares with equal size and the unit is 1 cell. Assuming that I and J are integers, and x and y are floating numbers:</p>
<ul>
<li>
<p>In center-based cell space, coordinate (x, y) is mapped to (I,J) as long as I-0.5 &lt;= x &lt; I+0.5 and J-0.5 &lt;= y &lt; J+0.5.</p>
</li>
<li>
<p>In upperleft-based cell space, coordinate (x, y) is mapped to cell (I,J) as long as I &lt;= x &lt; I+1.0 and J &lt;= y &lt; J+1.0.</p>
</li>
</ul>
<p>For example, sub-cell coordinate (0.3, 0.3) has the same integer cell coordinate (0,0) in both coordinate systems, while (0.3,0.6) means (0,1) in center-based cell space but means (0,0) in upperleft-based cell space. This two types of cell coordinate systems are defined by the <code>modelCoordinateLocation</code> element in the <code>spatialReferenceInfo</code> metadata; otherwise, the default type is center-based. GeoRaster supports both cell coordinate systems, and effective with Oracle Database 11<span class="italic">g</span>, sub-cell addresses are supported in the GeoRaster PL/SQL API. (Sub-cell addresses were internally supported in previous releases.)</p>
<p>In GeoRaster, while the origin of the cell space is always at (0,0), the upper-left corner cell of the raster data itself can have a different coordinate in its cell space from the coordinate of the origin of the cell space. In other words, the integer (row, column) coordinate of the upper-left corner cell is not necessarily (0,0). The upper-left corner is called the <span class="bold"><a id="sthref55"></a>ULTCoordinate</span>, and its value is registered in the metadata. It basically defines the relative location of the data in the cell space. If there is a band dimension, the ULTCoordinate value is always (row,column,0). The coordinate of each cell is relative to the origin of the cell space, not to the ULTCoordinate value. The origin of the cell coordinate system might not be exactly at the ULTCoordinate value.</p>
<p>The model coordinate system consists of spatial dimensions, and other dimensions if there are any. The spatial dimensions are called the <span class="italic">x</span>, <span class="italic">y</span>, and <span class="italic">z</span> dimensions, and values in these dimensions can be associated with a geodetic, projected, or local coordinate system. Other dimensions include spectral and temporal dimensions (called the <span class="italic">s</span> dimension and <span class="italic">t</span> dimension, respectively). GeoRaster SRS currently supports two spatial dimensions (X,Y) and three spatial dimensions (X, Y, Z) in the model coordinate system. (For information about coordinate systems, including the different types of coordinate systems, see <a class="olink SPATL050" href="../../appdev.112/e11830/sdo_cs_concepts.htm#SPATL050"><span class="italic">Oracle Spatial Developer's Guide</span></a>.)</p>
<p>The GeoRaster model coordinate system is defined by an Oracle Spatial SRID. The model coordinates have the same unit as that of the specified SRID and should be in the value range defined by the model coordinate system. For example, if the GeoRaster object is georeferenced to a geodetic coordinate system such as 8307, the unit of the model coordinates derived from the spatial reference system (SRS) must be decimal degrees, and values should be in the ranges of -180.0 to +180.0 for longitude and -90.0 to +90.0 for latitude.</p>
<p><a id="sthref56"></a><a id="sthref57"></a>The relationships between cell coordinates and model coordinates are modeled by GeoRaster reference systems (mapping schemes). The following GeoRaster reference systems are defined:</p>
<ul>
<li>
<p><span class="bold">Spatial <a id="sthref58"></a><a id="sthref59"></a><a id="sthref60"></a>reference system</span>, also called <span class="italic">GeoRaster SRS</span>, which maps cell coordinates (row,column,vertical) to model coordinates (X,Y,Z). Using the spatial reference system with GeoRaster data is referred to as <span class="italic">georeferencing</span> the data. (Georeferencing is discussed in <a href="#CHDGCAIA">Section 1.6</a>.)</p>
</li>
<li>
<p><span class="bold">Temporal <a id="sthref61"></a><a id="sthref62"></a><a id="sthref63"></a>reference system</span>, also called <span class="italic">GeoRaster TRS</span>, which maps cell coordinates (temporal) to model coordinates (T).</p>
</li>
<li>
<p><span class="bold">Band <a id="sthref64"></a><a id="sthref65"></a><a id="sthref66"></a>reference system</span>, also called <span class="italic">GeoRaster BRS</span>, which maps cell coordinates (band) to model coordinates (S, for Spectral).</p>
</li>
</ul>
<p>Each of these reference systems is currently defined, at least partially, in the GeoRaster XML schema. However, for the current release, only the spatial reference system is supported. This means that only the relationship between (row,column) and (X,Y) or (X, Y, Z) coordinates can be mapped. If the model coordinate system is geodetic, (X,Y) means (longitude,latitude). The temporal and band reference systems can be used, however, to store useful temporal and spectral information, such as the spectral resolution and when the raster data was collected.</p>
<p>Other metadata is stored in the <code>&lt;layerInfo&gt;</code> element in the GeoRaster XML metadata, as explained in <a href="#CHDGCCJH">Section 1.5</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDHHBAH"></a>
<div id="GEORS923" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.4</span> <a id="sthref67"></a><a id="sthref68"></a>GeoRaster Physical Storage</h2>
<p>As mentioned in <a href="#CHDDIDAF">Section 1.3</a>, GeoRaster data consists of a multidimensional matrix of cells and the GeoRaster metadata. Most metadata is stored as an XML document using the Oracle XMLType data type. The metadata is defined according to the GeoRaster metadata XML schema, which is described in <a href="geor_xml_metadata.htm#CIAHFABB">Appendix A</a>. The spatial extent (footprint) of a GeoRaster object is part of the metadata, but it is stored separately as an attribute of the GeoRaster object. This approach allows GeoRaster to take advantage of the spatial geometry type and related capabilities, such as using R-tree indexing on GeoRaster objects. The spatial extent is described in <a href="geor_datatypes_metadata.htm#BGBCHJDG">Section 2.1.2</a>.</p>
<p>The multidimensional matrix of cells is blocked into small subsets for large-scale GeoRaster object storage and optimal retrieval and processing. Each block is stored in a table as a binary large object (BLOB), and a geometry object (of type SDO_GEOMETRY) is used to define the precise extent of the block. Each row of the table stores only one block and the blocking information related to that block. (This blocking scheme applies to pyramids also.)</p>
<p><a id="sthref69"></a>The dimension sizes (along row, column, and band dimensions) may not be evenly divided by their respective block sizes. GeoRaster adds <span class="bold">padding</span> to the boundary blocks that do not have enough original cells to be completely filled. The boundary blocks are the end blocks along the positive direction of each dimension. The padding cells have the same cell depth as other cells and have values equal to zero. Padding makes each block have the same BLOB size. Padding mainly applies to row and column blocks, but for multiband and hyperspectral imagery, padding can be applied to the band dimension also. For example, assume the following specification: band interleaved by line, blocking as (64,64,3), and 8 bands, each with 64 rows and 64 columns. In this case:</p>
<ol>
<li>
<p>Bands 0, 1, and 2 are stored interleaved by line in the first block.</p>
</li>
<li>
<p>Bands 3, 4, and 5 are stored interleaved by line in the second block.</p>
</li>
<li>
<p>The third block holds the following in this order: line 1 of band 6, line 1 of band 7, 64 column values that are padding, line 2 of band 6, line 2 of band 7, 64 column values that are padding, and so on, until all 64 rows are stored.</p>
</li>
</ol>
<p>However, the top-level pyramids are not padded if both the row and column dimension sizes of the pyramid level are less than or equal to one-half the row block size and column block size, respectively. See <a href="#CHDDEGJJ">Section 1.7</a> for information about the physical storage of pyramids.</p>
<p>Each GeoRaster block has the same size. The dimension sizes of the blocks do not need to be a power of 2. They can be random integer values. The block sizes can be optimized automatically based on the dimension sizes of the GeoRaster object, so that each GeoRaster object uses only minimum padding space. See <a href="#CHDHJCBF">Table 1-1</a> in <a href="#CHDIJFCD">Section 1.4.1</a> for more information.</p>
<p>The raster blocks (BLOBs) contain the binary representation of the raster cell values. Specifically, floating-point cell values are represented in the IEEE 754 standard formats on supported platforms. If the cell depth is greater than 8 bits, GeoRaster cell data is stored in big-endian format in raster blocks. If the cell depth is less than 8 bits, each byte in the raster blocks contains two or more cells, so that the bits of a byte are fully filled with cell data. The cells are always filled into the byte from left to right. For example, if the cell depth is 4 bits, one byte contains two cells: the first four bits of the byte contain the value of a cell, and the second four bits contain the value of its following cell, which is determined by the interleaving type.</p>
<p>Based on this physical storage model, two object types are provided: SDO_GEORASTER for the raster data set and related metadata, and SDO_RASTER for each block in a raster image.</p>
<ul>
<li>
<p>The SDO_GEORASTER object contains a spatial extent geometry (footprint or coverage extent) and relevant metadata. A table containing one or more columns of this object type is called a <span class="bold"><a id="sthref70"></a>GeoRaster table</span>.</p>
</li>
<li>
<p>The SDO_RASTER object contains information about a block (tile) of a GeoRaster object, and it uses a BLOB object to store the raster cell data for the block. An object table of this object type is called a <span class="bold"><a id="sthref71"></a>raster data table</span> (<span class="bold">RDT</span>).</p>
</li>
</ul>
<p>Each SDO_GEORASTER object has a pair of attributes (<code>rasterDataTable</code>, <code>rasterID</code>) that uniquely identify the RDT and the rows within the RDT that are used to store the raster cell data for the GeoRaster object.</p>
<p><a href="#CHDECAIC">Figure 1-3</a> shows the storage of GeoRaster objects, using as an example an image of Boston, Massachusetts in a table that contains rows with images of various cities.</p>
<div id="GEORS924" class="figure">
<p class="titleinfigure"><a id="CHDECAIC"></a>Figure 1-3 Physical Storage of GeoRaster Data</p>
<img width="586" height="372" src="img/physical_storage.gif" alt="Description of Figure 1-3 follows" /><br />
<a id="sthref72" href="img_text/physical_storage.htm">Description of "Figure 1-3 Physical Storage of GeoRaster Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p>As shown in <a href="#CHDECAIC">Figure 1-3</a>:</p>
<ul>
<li>
<p>Each row in the table of city images contains information about the image for a specific city (such as Boston), including an SDO_GEORASTER object.</p>
</li>
<li>
<p>The SDO_GEORASTER object includes the spatial extent geometry covering the entire area of the image, the metadata, the raster ID, and the name of the raster data table associated with this image.</p>
</li>
<li>
<p>Each row in the raster data table contains information about a block (or tile) of the image, including the block's minimum bounding rectangle (MBR) and image data (stored as a BLOB). The raster data table is described in <a href="#CHDFEAAC">Section 1.4.2</a>.</p>
</li>
</ul>
<p>The SDO_GEORASTER and SDO_RASTER object types are described in detail in <a href="geor_datatypes_metadata.htm#BGBEJEIJ">Chapter 2</a>.</p>
<p><a href="#CHDIIIJH">Figure 1-4</a> shows the physical storage of GeoRaster data and several related objects in a database.</p>
<div id="GEORS925" class="figure">
<p class="titleinfigure"><a id="CHDIIIJH"></a>Figure 1-4 GeoRaster Data in an Oracle Database</p>
<img width="529" height="399" src="img/georaster_db.gif" alt="Description of Figure 1-4 follows" /><br />
<a id="sthref73" href="img_text/georaster_db.htm">Description of "Figure 1-4 GeoRaster Data in an Oracle Database"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#CHDIIIJH">Figure 1-4</a>:</p>
<ul>
<li>
<p>Each GeoRaster object in the GeoRaster table has an associated raster data table, which has an entry for each block of the raster image.</p>
</li>
<li>
<p>The BLOB with image data for each raster image block is stored separately from the raster table data. You can specify storage parameters (described in <a href="#CHDIJFCD">Section 1.4.1</a>) for the BLOBs.</p>
</li>
<li>
<p>Each GeoRaster object has a raster data table associated with it. However, a raster data table can store blocks of multiple GeoRaster objects, and GeoRaster objects in a GeoRaster table can be associated with one or multiple raster data tables.</p>
</li>
<li>
<p>GeoRaster system data (described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>) maintains the relationship between the GeoRaster tables and the raster data tables.</p>
</li>
<li>
<p>Indexes (standard and Spatial) can be built on the GeoRaster table and raster data tables. For information about indexing GeoRaster data, see <a href="geor_operations.htm#CIHEHBJB">Section 3.7</a>.</p>
</li>
<li>
<p>Additional information, such as ground control points (GCPs) and value attribute tables (VATs), can be related to the GeoRaster objects.</p>
</li>
</ul>
<p>You should maintain a one-to-many relationship between a GeoRaster table and its associated raster data tables. That is, you should let a raster data table only contain cell data of GeoRaster objects that belong to the same GeoRaster table.</p>
<p><a id="sthref74"></a>The following considerations apply to schema, table, and column names that are stored in any Oracle Spatial metadata views. For example, these considerations apply to geometry tables, GeoRaster tables, raster data tables, and geometry and GeoRaster columns.</p>
<ul>
<li>
<p>The name must contain only letters, numbers, and underscores. For example, the name cannot contain a space ( ), an apostrophe (<code>'</code>), a quotation mark (<code>"</code>), or a comma (<code>,</code>).</p>
</li>
<li>
<p>All letters in the names are converted to uppercase before the names are stored in geometry metadata views or GeoRaster system data (xxx_SDO_GEOR_SYSDATA) views or before the tables are accessed. This conversion also applies to any schema name specified with the table name.</p>
</li>
</ul>
<p>For more information about raster data tables, see <a href="#CHDFEAAC">Section 1.4.2</a>.</p>
<p>For information about cross-schema support with GeoRaster tables and raster data tables, see <a href="#CHDBFGFC">Section 1.4.5</a>.</p>
<a id="CHDIJFCD"></a>
<div id="GEORS926" class="sect2">
<h3 class="sect2"><span class="secnum">1.4.1</span> <a id="sthref75"></a><a id="sthref76"></a>Storage Parameters</h3>
<p>Several GeoRaster operations let you specify or change aspects of the storage. The relevant subprograms contain a parameter named <code>storageParam</code>, which is a quoted string of keywords and their values. The <code>storageParam</code> parameter keywords apply to characteristics of the raster data (see <a href="#CHDHJCBF">Table 1-1</a>).</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1065">
<tbody>
<tr class="cellalignment1051">
<td class="cellalignment1057">
<p class="notep1">Note:</p>
The keywords in this section either do not apply or only partially apply to the <code>storageParam</code> parameter of the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure and the <code>subsetParam</code> parameter of the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure. See the reference information about the relevant parameters for each of these procedures in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
For any numbers in string (VARCHAR2) parameters to GeoRaster subprograms, the period (.) must be used for any decimal points regardless of the locale.</div>
<div id="GEORS927" class="tblformal">
<p class="titleintable"><a id="sthref77"></a><a id="CHDHJCBF"></a>Table 1-1 storageParam Keywords for Raster Data</p>
<table class="cellalignment1062" title="storageParam Keywords for Raster Data" summary="storageParam Keywords for Raster Data" dir="ltr">
<thead>
<tr class="cellalignment1051">
<th class="cellalignment1061" id="r1c1-t7">Keyword</th>
<th class="cellalignment1061" id="r1c2-t7">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r2c1-t7" headers="r1c1-t7">
<p><a id="sthref78"></a>bitmapmask</p>
</td>
<td class="cellalignment1057" headers="r2c1-t7 r1c2-t7">
<p>Specifies whether or not bitmap masks are considered. <code>TRUE</code> specifies to consider any associated bitmap masks; <code>FALSE</code> specifies not to consider the bitmap masks. The default is <code>TRUE</code> for <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a>, <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a>, <a href="geor_ref.htm#CACCIGJA">SDO_GEOR.mergeLayers</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, and <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>; the default is <code>FALSE</code> for <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a> (A value of <code>TRUE</code> is invalid and is ignored for <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>.)</p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r3c1-t7" headers="r1c1-t7">
<p><a id="sthref79"></a>blocking</p>
</td>
<td class="cellalignment1057" headers="r3c1-t7 r1c2-t7">
<p>Specifies whether or not raster data is blocked. <code>TRUE</code> causes raster data to be blocked using the blocks of the specified or default <code>blockSize</code> value; <code>OPTIMALPADDING</code> is the same as TRUE except that the specified <code>blockSize</code> value will be adjusted to an optimal value to reduce padding space; <code>FALSE</code> causes raster data not to be blocked (that is, only one block will be used for the entire image). Specifying <code>OPTIMALPADDING</code> causes GeoRaster to call the <a href="geor_util_ref.htm#CHEHHBAH">SDO_GEOR_UTL.calcOptimizedBlockSize</a> procedure internally.</p>
<p>The default value for <code>blocking</code> is <code>TRUE</code> if you specify the <code>blockSize</code> keyword. If you specify <code>blocking=TRUE</code> but do not specify the <code>blockSize</code> keyword, the default <code>blockSize</code> is (256,256,<span class="italic">B</span>), where <span class="italic">B</span> is the number of bands in the output GeoRaster object. If you specify neither <code>blocking</code> nor <code>blockSize</code>, default values are derived from the source GeoRaster object: that is, if the original data is not blocked, the data in the output GeoRaster object is by default not blocked; and if the original data is blocked, the data in the output GeoRaster object is blocked with the same blocking scheme.</p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r4c1-t7" headers="r1c1-t7">
<p><a id="sthref80"></a>blockSize</p>
</td>
<td class="cellalignment1057" headers="r4c1-t7 r1c2-t7">
<p>Specifies the block size, that is, the number of cells per block. You must specify a value for each dimension of the output GeoRaster object. For example, <code>blocksize=(512,512,3)</code> specifies 512 for the row dimension, 512 for the column dimension, and 3 for the band dimension; and <code>blocksize=(256,256)</code> specifies row and column block sizes of 256 for a GeoRaster object that has no band dimension. The values must be non-negative integers. If a value is 0, it means the block size is the corresponding dimension size. If a value is greater than the corresponding dimension size, padding is applied. See also the explanation of the <code>blocking</code> keyword in this table and of the <a href="geor_util_ref.htm#CHEHHBAH">SDO_GEOR_UTL.calcOptimizedBlockSize</a> procedure in <a href="geor_util_ref.htm#CHEGCDBB">Chapter 6</a>.</p>
<p>Only regular blocking is supported; that is, all blocks must be the same size and be aligned with each other, except for some top-level pyramids. However, the dimension sizes of the blocks do not need to be a power of 2. They can be random integer values. For example, the <code>blockSize</code> value can be <code>(</code><code>589,1236,7)</code>.</p>
<p>The physical storage size of a raster block must be less than or equal to 4GB.</p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r5c1-t7" headers="r1c1-t7">
<p><a id="sthref81"></a>cellDepth</p>
</td>
<td class="cellalignment1057" headers="r5c1-t7 r1c2-t7">
<p>Specifies the cell depth of the raster data set, which indicates the number of bits and the sign for the data type of all cells. Note, however, that changing the cell depth can cause loss of data and a reduction in precision and image quality. Must be one of the following values (<code>_U</code> indicating unsigned and <code>_S</code> indicating signed): <code>1BIT</code>, <code>2BIT</code>, <code>4BIT</code>, <code>8BIT_U</code>, <code>8BIT_S</code>, <code>16BIT_U</code>, <code>16BIT_S</code>, <code>32BIT_U</code>, <code>32BIT_S</code>, <code>32BIT_REAL</code>, or <code>64BIT_REAL</code>. (Complex <code>cellDepth</code> types are not supported.) If <code>cellDepth</code> is not specified, the value from the source GeoRaster object is used by default. Example: <code>celldepth=16BIT_U</code></p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r6c1-t7" headers="r1c1-t7">
<p><a id="sthref82"></a>compression</p>
</td>
<td class="cellalignment1057" headers="r6c1-t7 r1c2-t7">
<p>Specifies the compression type to be applied to the GeoRaster object. Must be one of the following values: <code>JPEG-B</code>, <code>JPEG-F</code>, <code>DEFLATE</code>, or <code>NONE</code>. (You can use <code>NONE</code> to decompress a compressed GeoRaster object.) If <code>compression</code> is not specified, the compression type of the source GeoRaster object is used. For more information about compression and decompression, see <a href="#CHDBEEJI">Section 1.10</a>. Example: <code>compression=JPEG-F</code></p>
<p>If the source GeoRaster object is blank, the <code>compression</code> keyword is ignored, except for the <a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a> and <a href="geor_ref.htm#CHEBDCDJ">SDO_GEOR.getRasterData</a> functions. (Blank GeoRaster objects are explained in <a href="#CHDIHJJE">Section 1.4.3</a>.)</p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r7c1-t7" headers="r1c1-t7">
<p><a id="sthref83"></a>interleaving</p>
</td>
<td class="cellalignment1057" headers="r7c1-t7 r1c2-t7">
<p>Specifies the interleaving type. (Interleaving is explained in <a href="#CHDGCCJH">Section 1.5</a>.) Must be one of the following values: <code>BSQ</code> (band sequential), <code>BIL</code> (band interleaved by line), or <code>BIP</code> (band interleaved by pixel). Example: <code>interleaving=BSQ</code></p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r8c1-t7" headers="r1c1-t7">
<p><a id="sthref84"></a>pyramid</p>
</td>
<td class="cellalignment1057" headers="r8c1-t7 r1c2-t7">
<p><code>TRUE</code> specifies to keep the original pyramid data; <code>FALSE</code> specifies not to keep the original pyramid data. The default value depends on the specific procedure: the default is <code>TRUE</code> for <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a> and <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a>; the default is <code>FALSE</code> for <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, and <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>. (A value of <code>TRUE</code> is invalid and is ignored for <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, or <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>.)</p>
<p>You cannot generate pyramid data through the use of storage parameters; instead, you must use the <a href="geor_ref.htm#CHEDFEAI">SDO_GEOR.generatePyramid</a> procedure after creating the GeoRaster object.</p>
</td>
</tr>
<tr class="cellalignment1051">
<td class="cellalignment1057" id="r9c1-t7" headers="r1c1-t7">
<p><a id="sthref85"></a><a id="sthref86"></a><a id="sthref87"></a>quality</p>
</td>
<td class="cellalignment1057" headers="r9c1-t7 r1c2-t7">
<p>Specifies the JPEG compression quality, which is the degree of lossiness caused by the compression. Must be an integer from 0 (lowest quality) through 100 (highest quality) to be applied to the GeoRaster object. The default value is 75. For more information about compression quality, see <a href="#CHDEIJBB">Section 1.10.1</a>. Example: <code>quality=80</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CHDGDCEC">Example 1-1</a> shows a GeoRaster object being copied, with its block size changed and any pyramid data from the original object not copied.</p>
<div id="GEORS928" class="example">
<p class="titleinexample"><a id="CHDGDCEC"></a>Example 1-1 Using storageParam Keywords</p>
<pre>
DECLARE
   gr1 sdo_georaster;
   gr2 sdo_georaster;
BEGIN
INSERT INTO georaster_table (georid, georaster) VALUES (2, sdo_geor.init('RDT_1'))
       RETURNING georaster INTO gr2;
SELECT georaster INTO gr1 FROM georaster_table WHERE georid=1;
sdo_geor.changeFormatCopy(gr1, 'blocksize=(128,128) pyramid=FALSE', gr2);
UPDATE georaster_table SET georaster=gr2 WHERE georid=2;
COMMIT;
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGDCEC">Example 1-1</a>, the raster data table for GeoRaster object <code>gr2</code> is RDT_1. If raster data is to be written into table RDT_1, that table must exist before the PL/SQL block is run; otherwise, an error is generated by the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you insert, update, or delete GeoRaster cell data or metadata, update the GeoRaster object before committing the transaction, as shown in <a href="#CHDGDCEC">Example 1-1</a> and as explained in <a href="geor_operations.htm#CIHBFGDB">Section 3.16</a>.</div>
<p><a href="#CHDGDCEC">Example 1-1</a> and many examples in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a> refer to a table named GEORASTER_TABLE, which has the following definition:</p>
<pre>
CREATE TABLE georaster_table
( georid    NUMBER PRIMARY KEY,
  name      VARCHAR2(32),
  georaster SDO_GEORASTER );
</pre></div>
<!-- class="sect2" -->
<a id="CHDFEAAC"></a>
<div id="GEORS929" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.4.2</span> Raster Data Table</h3>
<p>A raster data table must be an object table of SDO_RASTER type, and it must have the primary key defined on the columns <code>(rasterID, pyramidLevel, bandBlockNumber, rowBlockNumber, columnBlockNumber)</code>.</p>
<p>Each raster data table name must be or equivalent to a valid nonquoted identifier, and it will be stored in the GeoRaster metadata views and in the SDO_GEORASTER objects in all uppercase characters, without any schema prefix. (Each GeoRaster column name must be or equivalent to a valid nonquoted identifier, and it is stored in the GeoRaster metadata views in all uppercase characters.) Each raster data table name must also be unique in the database. To resolve any duplication in raster data table names, you can use <a href="geor_admin_ref.htm#CHDFJIAB">SDO_GEOR_ADMIN.maintainSysdataEntries</a> function, which is documented in <a href="geor_admin_ref.htm#BABDDFEI">Chapter 5</a>.</p>
<p>You can control the placement and storage characteristics of the raster data table (for example, if the table should be partitioned for better performance). For a large GeoRaster object, consider putting its raster data in a separate raster data table and partitioning the raster data table by pyramid level or block numbers, or both. Do not use the SYSTEM tablespace for storing GeoRaster tables and raster data tables. Instead, create separate locally managed (the default) tablespaces for GeoRaster tables.</p>
<p>Never insert or delete any rows directly in a raster data table. The rows in the appropriate RDTs are automatically inserted or deleted when GeoRaster objects are created with raster data or deleted from a GeoRaster table.</p>
<p>In choosing block sizes for raster data, consider the following:</p>
<ul>
<li>
<p>The maximum length of a raster block is 4 GB; therefore, do not specify a block size greater than 4 GB.</p>
</li>
<li>
<p>Consider the <code>cellDepth</code> value of the GeoRaster object when you calculate the desired size for a raster block.</p>
</li>
<li>
<p>Choosing an appropriate block size is a trade-off between the size of a raster block and the number of blocks needed for a GeoRaster object. For raster data of a large size, Oracle recommends at least 512 by 512 for the row and column dimension sizes. A blocking size value that results in a raster block close to 4 KB is usually a bad choice, because 4 KB is the threshold for storing an Oracle BLOB out-of-line.</p>
</li>
</ul>
<p>For information about creating raster data tables, including examples using BasicFile LOBs (BasicFiles) and SecureFile LOBs (SecureFiles), see <a href="geor_operations.htm#CHDGHAIH">Section 3.1.2</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIHJJE"></a>
<div id="GEORS930" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.4.3</span> <a id="sthref88"></a><a id="sthref89"></a><a id="sthref90"></a><a id="sthref91"></a>Blank and Empty GeoRaster Objects</h3>
<p>A <span class="bold">blank GeoRaster object</span> is a special type of GeoRaster object in which all cells have the same value. There is no need to store its cells in any SDO_RASTER block; instead, the cell value is registered in the metadata in the <code>blankCellValue</code> element. Otherwise, blank GeoRaster objects are treated in the same way as other GeoRaster objects. Use the <a href="geor_ref.htm#CHEFDECA">SDO_GEOR.createBlank</a> function to create a blank GeoRaster object, the <a href="geor_ref.htm#CHECHDDI">SDO_GEOR.isBlank</a> function to check if a GeoRaster object is a blank GeoRaster object, and the <a href="geor_ref.htm#CHEDFHJC">SDO_GEOR.getBlankCellValue</a> function to return the value of the cells in a blank GeoRaster object.</p>
<p>An <span class="bold">empty GeoRaster object</span> contains only a rasterDataTable name and a rasterID. To create an empty GeoRaster object, use the <a href="geor_ref.htm#CHEBCACB">SDO_GEOR.init</a> function. You must create an empty GeoRaster object before you perform an action that outputs a new GeoRaster object, so that the output can be stored in the previously initialized empty GeoRaster object.</p>
</div>
<!-- class="sect2" -->
<a id="BABHJFEH"></a>
<div id="GEORS931" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.4.4</span> Empty Raster Blocks</h3>
<p>GeoRaster supports empty raster blocks to save storage space with large mosaic objects and to improve raster processing speed. Empty raster blocks are used when there is no raster data available for a specific raster block of a large GeoRaster object. Such GeoRaster data is of a special <span class="italic">sparse</span> data type. There is still an entry in the raster data table for each empty raster block, but the length of the BLOB is zero (indicating empty).</p>
<p>When a GeoRaster operation (for example, <a href="geor_ref.htm#CHEIDDBE">SDO_GEOR.changeCellValue</a>, <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a>, <a href="geor_ref.htm#CHEDFEAI">SDO_GEOR.generatePyramid</a>, <a href="geor_ref.htm#CHEBDCDJ">SDO_GEOR.getRasterData</a>, <a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a>, <a href="geor_ref.htm#CACCIGJA">SDO_GEOR.mergeLayers</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>, or <a href="geor_ref.htm#CACHBIAE">SDO_GEOR.updateRaster</a>) is applied to a source GeoRaster object with empty raster blocks, it may lead to empty or partially empty result raster blocks.</p>
<p>A resulting raster block is empty if all the cells in it are derived from empty source raster blocks. A resulting raster block is partially empty if only some of the cells in it are derived from empty source raster blocks. Any cells in a partially empty result raster block that are derived from an empty source raster block are either set to certain background values (as specified in the <code>bgValues</code> parameter) or set to 0 (if the <code>bgValues</code> parameter is not specified). Once this is done, a partially empty raster block becomes just like a normal non-empty raster block; and after the operation is finished, each raster block in the resulting GeoRaster object is either empty or non-empty.</p>
<p>Because the filling of partially empty raster blocks changes the raster data permanently, you should carefully choose consistent background values when manipulating a GeoRaster object. The NODATA values stored in the GeoRaster metadata, if present, are good choices for background values, although you can also select other background values as long as they are used consistently.</p>
<p>If a GeoRaster object has empty raster blocks, its pyramid data may not contain any empty raster blocks at all because partially empty raster blocks are filled with background values or 0 during the <a href="geor_ref.htm#CHEDFEAI">SDO_GEOR.generatePyramid</a> operation. When you call this function to generate the pyramid, be careful in choosing a consistent background value, as explained in this section.</p>
<p>A bitmap mask (see <a href="#CHDEIJCI">Section 1.8</a>) can also have empty raster blocks, with the missing cell values indicating 0. If filling is required, the missing cells are always filled with the value 0.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBFGFC"></a>
<div id="GEORS932" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.4.5</span> <a id="sthref92"></a><a id="sthref93"></a><a id="sthref94"></a>Cross-Schema Support with GeoRaster</h3>
<p>A GeoRaster table and its associated raster data table or tables must have the same owner. However, users with appropriate privileges can create GeoRaster tables and associated raster data tables owned by other schemas, and they can also create, query, update, and delete GeoRaster objects owned by other schemas. For cross-schema query of GeoRaster objects, you must have the SELECT privilege on the GeoRaster tables and their associated raster data tables. For cross-schema update of GeoRaster objects, you must have the SELECT, INSERT, UPDATE, and DELETE privileges on the GeoRaster tables and their associated raster data tables.</p>
<p>The ALL_SDO_GEOR_SYSDATA view (described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>) contains information about all GeoRaster objects accessible to the current user. For each object listed, the GeoRaster table must be accessible by the current user. If the current user also needs to access the raster data, that user must also have the appropriate privileges on the associated raster data table.</p>
<p>All SDO_GEOR subprograms can work on GeoRaster objects defined in schemas other than the current connection schema.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGCCJH"></a>
<div id="GEORS933" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.5</span> <a id="sthref95"></a><a id="sthref96"></a><a id="sthref97"></a><a id="sthref98"></a>Bands, Layers, and Metadata</h2>
<p>In GeoRaster, <span class="italic">band</span> and <span class="italic">layer</span> are different concepts. <span class="bold">Band</span> is a physical dimension of the multidimensional raster data set; that is, it is one ordinate in the cell space. For example, the cell space might have the ordinates row, column, and band. Bands are numbered from 0 to <span class="italic">n</span>-1, where <span class="italic">n</span> is the highest layer number. <span class="bold">Layer</span> is a logical concept in the GeoRaster data model. Layers are mapped to bands. Typically, one layer corresponds to one band, and it consists of a two-dimensional matrix of size <code>rowDimensionSize</code> and <code>columnDimensionSize</code>. Layers are numbered from 1 to <span class="italic">n</span>; that is, <code>layerNumber = bandNumber + 1</code>.</p>
<p>A GeoRaster object can contain multiple bands, which can also be called multiple layers. For example, electromagnetic wave data from remote sensing devices is grouped into a certain number of channels, where the number of possible channels depends on the capabilities of the sensing device. <span class="italic">Multispectral</span> images contain multiple channels, and <span class="italic">hyperspectral</span> images contain a very large number (say, 50 or more) of channels. The channels are all mapped into GeoRaster bands, which are associated with layers.</p>
<p>In raster GIS applications, a data set can contain multiple raster layers, and each layer is called a <a id="sthref99"></a><span class="bold">theme</span>. For example, a raster may have a population density layer, where different cell values are used to depict neighborhoods or counties depending on their average number of inhabitants per square mile or kilometer. Other examples of themes might be average income levels, land use (agricultural, residential, industrial, and so on), and elevation above sea level. The raster GIS themes can be stored in different GeoRaster objects or in one GeoRaster object, and each theme is modeled as one layer. The raster themes and multispectral image channels can also be stored together in one GeoRaster object as different layers, as long as they have the same dimensions.</p>
<p><a href="#CHDDICBC">Figure 1-5</a> shows an image with multiple layers and a single raster data table. Each layer contains multiple blocks, each of which typically contains many cells. Each block has an entry in the raster data table. Note that GeoRaster starts layer numbering at 1 and band numbering at 0 (zero), as shown in <a href="#CHDDICBC">Figure 1-5</a>.</p>
<div id="GEORS934" class="figure">
<p class="titleinfigure"><a id="CHDDICBC"></a>Figure 1-5 Layers, Bands, and the Raster Data Table</p>
<img width="595" height="292" src="img/bands.gif" alt="Description of Figure 1-5 follows" /><br />
<a id="sthref100" href="img_text/bands.htm">Description of "Figure 1-5 Layers, Bands, and the Raster Data Table"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref101"></a>The GeoRaster XML metadata refers to the object layer and to layers. The <span class="bold">object layer</span> refers to the whole GeoRaster object, which may or may not contain multiple layers. If the GeoRaster object contains multiple layers, each layer is a sublayer of the object layer, and it refers to a single band.</p>
<p>Each layer can have an optional set of metadata associated with it. The metadata items for a layer include the user-defined layer ID, description, bitmap mask, NODATA values and value ranges, scaling function, bin function, statistical data set (including histogram), grayscale lookup table, and colormap (or, pseudocolor lookup table, also called a PCT). The metadata items are defined in the GeoRaster metadata XML schema, which is presented in <a href="geor_xml_metadata.htm#CIAHFABB">Appendix A</a>. the SDO_GEOR_HISTOGRAM object type in <a href="geor_datatypes_metadata.htm#BGBCHBIC">Section 2.3.1</a>, the SDO_GEOR_COLORMAP object type in <a href="geor_datatypes_metadata.htm#BGBDBJCG">Section 2.3.2</a>, SDO_GEOR_GRAYSCALE object type in <a href="geor_datatypes_metadata.htm#BGBDBDGJ">Section 2.3.3</a>, and the SDO_GEOR_SRS object type in <a href="geor_datatypes_metadata.htm#BGBHEHHA">Section 2.3.5</a>.</p>
<p>The metadata associated with the object layer applies to the whole GeoRaster object. The metadata associated with a layer applies only to that layer. For example, the statistical data set for the object layer is calculated based on all cells of the GeoRaster object, regardless of how many layers the object has; but the statistical data for a layer is calculated based only on the cells in that layer.</p>
<p><a id="sthref102"></a><a id="sthref103"></a>The metadata for the object layer and other layers is stored using <code>&lt;layerInfo&gt;</code> elements in the GeoRaster XML metadata and sometimes in separate tables, such as a colormap table or a histogram table. Metadata stored in the GeoRaster XML metadata is managed by GeoRaster, and you can use the GeoRaster API to retrieve and modify this metadata. For metadata stored in separate tables, the table name can be registered in the GeoRaster XML schema, in which case applications can retrieve the name of the table. However, GeoRaster does not check the existence or validity of that table or provide any operations on that table.</p>
<p><a id="sthref104"></a>Three types of <span class="bold">interleaving</span> are supported: BSQ (band sequential), BIL (band interleaved by line), and BIP (band interleaved by pixel). Interleaving applies between bands or layers only. Interleaving is limited to the interleaving of cells inside each block of a GeoRaster object. This means GeoRaster always applies blocking on a GeoRaster object first, and then it applies interleaving inside each block independently. However, each block of the same GeoRaster object has the same interleaving type. You can change the interleaving type of a copy of a GeoRaster object by calling <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure, so that the data can be more efficiently processed and used.</p>
</div>
<!-- class="sect1" -->
<a id="CHDGCAIA"></a>
<div id="GEORS935" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.6</span> <a id="sthref105"></a>Georeferencing</h2>
<p>The GeoRaster spatial reference system (SRS), a metadata component of the GeoRaster object, includes information related to georeferencing. <span class="bold">Georeferencing</span> establishes the relationship between cell coordinates of GeoRaster data and real-world ground coordinates (or some local coordinates). Georeferencing assigns ground coordinates to cell coordinates, and cell coordinates to ground coordinates.</p>
<p>In GeoRaster, georeferencing is different from geocorrection, rectification, or orthorectification. In these three latter processes, cell resampling is often performed on the raster data, and the resulting GeoRaster data might have a different model coordinate system and dimension sizes. Georeferencing establishes the relationship between cell coordinates and real-world coordinates or some local coordinates. Georeferencing can be accomplished by providing an appropriate mathematical formula, enough ground control point (GCP) coordinates, or rigorous model data from the remote sensing system. Georeferencing does not change the GeoRaster cell data or other metadata, except as needed to facilitate the transformation of coordinates between the cell coordinate system and the model coordinate system.</p>
<p>GeoRaster supports both the functional fitting model (explained in <a href="#CHDEFCJB">Section 1.6.1</a>) and the stored function model (explained in <a href="#BABDIHCH">Section 1.6.2</a>) for georeferencing. Rigorous models are not supported. When a GeoRaster object is georeferenced with the functional fitting model, the <code>isReferenced</code> value in the SRS metadata will be <code>TRUE</code>; otherwise, it should be <code>FALSE</code>.</p>
<p><a id="sthref106"></a><span class="bold">Rectification</span> can be done with horizontal coordinates, so that cells of a GeoRaster data set can be mapped to a projection map coordinate system. After rectification, each cell is regularly sized in the map units and is aligned with the model coordinate system, that is, with the East-West dimension and the North-South dimension. If elevation data (DEM) is used in rectification, it is called <a id="sthref107"></a><span class="bold">orthorectification</span>, a special form of rectification that corrects terrain displacement. If a GeoRaster object is rectified and georeferenced with the functional fitting model, the <code>isRectified</code> value in its metadata will be <code>TRUE</code>; otherwise, it should be <code>FALSE</code>. If a GeoRaster object is orthorectified and georeferenced with the functional fitting model, the <code>isOrthoRectified</code> value in its metadata will be <code>TRUE</code>; otherwise, it should be <code>FALSE</code>.</p>
<p>To georeference a GeoRaster object, see <a href="geor_operations.htm#CIHIGBAA">Section 3.5</a>.</p>
<a id="CHDEFCJB"></a>
<div id="GEORS936" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.1</span> <a id="sthref108"></a><a id="sthref109"></a>Functional Fitting Georeferencing Model</h3>
<p>GeoRaster defines a generic functional fitting georeferencing model that is stored in the GeoRaster metadata. It includes several widely used geometric models, and it enables many non-rectified GeoRaster objects to be georeferenced.</p>
<p>This model supports transformations between two-dimensional or three-dimensional ground coordinates and two-dimensional cell coordinates, or between two-dimensional cell coordinates and two-dimensional or three-dimensional ground coordinates. The following equations describe the model:</p>
<p>r<sub>n</sub> = p(X<sub>n</sub>,Y<sub>n</sub>,Z<sub>n</sub>) / q(X<sub>n</sub>,Y<sub>n</sub>,Z<sub>n</sub>)</p>
<p>c<sub>n</sub> = r(X<sub>n</sub>,Y<sub>n</sub>,Z<sub>n</sub>) / s(X<sub>n</sub>,Y<sub>n</sub>,Z<sub>n</sub>)</p>
<p>In these equations:</p>
<ul>
<li>
<p>r<sub>n</sub> = Normalized row index of the cell in the raster</p>
</li>
<li>
<p>c<sub>n</sub> = Normalized column index of the cell in the raster</p>
</li>
<li>
<p>X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub> = Normalized ground coordinate values</p>
</li>
</ul>
<p>The polynomials p(X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub>), q(X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub>), r(X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub>), and s(X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub>) have the form shown in <a href="#CHDGAGHD">Figure 1-6</a>:</p>
<div id="GEORS937" class="figure">
<p class="titleinfigure"><a id="CHDGAGHD"></a>Figure 1-6 Polynomials Used for Georeferencing</p>
<img width="202" height="64" src="img/georef_polynomials.gif" alt="Description of Figure 1-6 follows" /><br />
<a id="sthref110" href="img_text/georef_polynomials.htm">Description of "Figure 1-6 Polynomials Used for Georeferencing"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the polynomial form shown in <a href="#CHDGAGHD">Figure 1-6</a>, a<sub>ijk</sub> are the coefficients for the polynomial.</p>
<p>Each of the four polynomials can be different, and each polynomial is described independently by the following:</p>
<ul>
<li>
<p><code>pType</code> = Polynomial type (1 or 2)</p>
</li>
<li>
<p><code>nVars</code> = Total number of variables (ground coordinate dimensions; 0, 2, or 3)</p>
</li>
<li>
<p><code>order</code> = Maximum order of power for each variable or maximum total order of power for each polynomial term (up to 5)</p>
</li>
<li>
<p><code>nCoefficients</code> = Total number of coefficients (must be derived from the preceding three numbers)</p>
</li>
</ul>
<p>The <code>pType</code> indicates the meaning of the maximum total order of the polynomial, and thus affects the total number of terms in the polynomial. <code>pType = 1</code> indicates that the maximum order is the maximum total order of all variables in each polynomial term. <code>pType = 2</code> indicates that the maximum order is the maximum order of each variable in all polynomial term. The <code>nVars</code> indicates whether or not the ground coordinate system is 2D (X, Y) or 3D (X,Y,Z). The cell coordinate systems are always 2D. For example, it supports 2D-to-2D affine transformation and 3D-to-2D DLT and RPC models.</p>
<p>The total number and sequential ordering of the polynomial terms and their coefficients are determined by the logic in the following looping pseudocode:</p>
<pre>
         n = 0;
         For (k = 0; k &lt;= order; k++)
            For (j = 0; j &lt;= order; j++)
               For (i = 0; i &lt;= order; i++)
                 {
                       if (pType == 1 &amp; (i+j+k) &gt; order )
                            break;
                        polynomialCoefficients[n]=COEF[ijk];
                        n++;
                  }
</pre>
<p>In the preceding pseudocode, assume <code>i</code> is the order of X, <code>j</code> is the order of Y and <code>k</code> is the order of Z, and <code>n</code> is the index of the coefficients inside the GeoRaster metadata element <code>&lt;polynomialCoefficients&gt;</code>. Thus, <code>COEF[ijk]</code> is the coefficient of the term <code>x(i)y(j)z(k)</code> of numerator <code>p</code> or denominator <code>q</code>; <code>polynomialCoefficients[n]</code> is the <span class="italic">n</span>th double number of the <code>&lt;polynomialCoefficients&gt;</code> element (a list type of doubles) inside the XML metadata; and <code>COEF[ijk]</code> and <code>polynomialCoefficients[n]</code> have a one-to-one match.</p>
<p>Normalized values, rather than actual values, may or may not be stored and used in order to minimize introduction of errors during the calculations, depending on the data itself. The transformation between row and column values (row,column) and normalized row and column values (r<sub>n</sub>, c<sub>n</sub>), and between the model coordinate (x,y,z) and normalized model coordinate (X<sub>n</sub> , Y<sub>n</sub> , Z<sub>n</sub>), is defined by a set of normalizing translations (offsets) and scales:</p>
<ul>
<li>
<p>r<sub>n</sub> = (row - rowOff) / rowScale</p>
</li>
<li>
<p>c<sub>n</sub> = (column - columnOff) / columnScale</p>
</li>
<li>
<p>X<sub>n</sub> = (x - xOff) / xScale</p>
</li>
<li>
<p>Y<sub>n</sub> = (y - yOff) / yScale</p>
</li>
<li>
<p>Z<sub>n</sub> = (z - zOff) / zScale</p>
</li>
</ul>
<p>The coefficients, scales, and offsets are stored in the GeoRaster SRS metadata, and are described in <a href="geor_datatypes_metadata.htm#BGBHEHHA">Section 2.3.5</a>.</p>
<p>This functional fitting model is generic. It includes specific geometric models, such as Affine Transformation, Quadratic Polynomial, Cubic Polynomial, Direct Linear Transformation (DLT), Quadratic Rational, and Rational Polynomial Coefficients (RPC, also called Rapid Positioning Coefficients). The coefficients of those standard models are converted to the sequential ordering described in this section, for storage in GeoRaster.</p>
<p>You can use the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure to directly set the spatial reference information of a GeoRaster object, and the <a href="geor_ref.htm#CHEIDBJD">SDO_GEOR.getGeoreferenceType</a> function to find out the specific georeferencing model type in a GeoRaster object.</p>
<p>The simplest georeferencing model type is a special affine transformation, as follows:</p>
<pre>
row    = a + c * y
column = d - c * x
</pre>
<p>In the preceding formulas, if <code>c</code> is not zero, the raster data is considered rectified, and the <code>isRectified</code> value in its metadata will be <code>TRUE</code>.</p>
<p>For the Affine Transformation, <code>pType</code> can be either 1 or 2. <code>nVars</code> is 2, <code>order</code> is 1, and <code>nCoefficients</code> is 3 for the <code>p</code> and <code>r</code> polynomials; and <code>nVars</code> is 0, <code>order</code> is 0, and <code>nCoefficients</code> is 1 for the <code>q</code> and <code>s</code> polynomials.</p>
<p>For the Quadratic Polynomial model, <code>pType</code> is 1. <code>nVars</code> is 2, <code>order</code> is 2, and <code>nCoefficients</code> is 6 for the <code>p</code> and <code>r</code> polynomials; and <code>nVars</code> is 0, <code>order</code> is 0, and <code>nCoefficients</code> is 1 for the <code>q</code> and <code>s</code> polynomials.</p>
<p>For the Cubic Polynomial model, <code>pType</code> is 1. <code>nVars</code> is 2, <code>order</code> is 3, and <code>nCoefficients</code> is 10 for the <code>p</code> and <code>r</code> polynomials; and <code>nVars</code> is 0, <code>order</code> is 0, and <code>nCoefficients</code> is 1 for the <code>q</code> and <code>s</code> polynomials.</p>
<p>For the DLT model, <code>pType</code> can be either 1 or 2. <code>nVars</code> is 3, <code>order</code> is 1, and <code>nCoefficients</code> is 4 for all polynomials. In addition, the q and s polynomials must be identical.</p>
<p>For the Quadratic Rational model, <code>pType</code> is 1. <code>nVars</code> is 3, <code>order</code> is 2, and <code>nCoefficients</code> is 10 for all polynomials.</p>
<p>For the RPC model, <code>pType</code> is 1. <code>nVars</code> is 3, <code>order</code> is 3, and <code>nCoefficients</code> is 20 for all polynomials.</p>
<p>For detailed information about the DLT, RPC, and other geometric models, see any relevant third-party documentation.</p>
</div>
<!-- class="sect2" -->
<a id="BABDIHCH"></a>
<div id="GEORS1173" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.2</span> <a id="sthref111"></a>Georeferencing Using GCPs</h3>
<p>GeoRaster supports ground control point (GCP) storage and georeferencing. A <span class="bold">ground control point</span> (GCP), or simply a <span class="bold">control point</span>, is a point for which you know its coordinates (X,Y or X,Y,Z) in some reference coordinate system, as well as its corresponding location (row, column) in cell space in the GeoRaster object. The reference coordinate system can be any valid Oracle Spatial coordinate system, including SRID 999999 for an "unknown" coordinate system. A collection of GCPs and its associated geometric model (functional fitting method) are also referred to as (called) the <span class="bold">stored function</span> georeferencing model in GeoRaster.</p>
<p>You can use GCPs that are either stored in the GeoRaster SRS or specified in parameters to generate the Functional Fitting model. For more information, see the <a href="geor_ref.htm#CHEFIFIA">SDO_GEOR.georeference</a> function.</p>
<p>The guidelines for selecting GCPs include the following:</p>
<ul>
<li>
<p>The points should be easy to identify both in the GeoRaster object and in the reference coordinate system.</p>
</li>
<li>
<p>The points should be evenly distributed within the area covered by the GeoRaster object, to ensure that results are not skewed.</p>
</li>
<li>
<p>The points should not be on a line, so that the results can be stable.</p>
</li>
</ul>
<p>GCPs or the stored function are specified using the SDO_GEOR_GCP object type (see <a href="geor_datatypes_metadata.htm#BABEEBBD">Section 2.3.6</a>), the SDO_GEOR_GCP_ COLLECTION collection type (see <a href="geor_datatypes_metadata.htm#BABGAGHB">Section 2.3.7</a>), and the SDO_GEOR_GCPGEOREFTYPE object type (see <a href="geor_datatypes_metadata.htm#BABJEABH">Section 2.3.8</a>).</p>
<p>To georeference using GCPs, you must also select the geometric model, that is, how the relationship between the GeoRaster object's cell space and the reference coordinate system should be mathematically modeled. In GeoRaster, the following geometric models are supported with GCP georeferencing: Affine (the default model), Quadratic Polynomial, Cubic Polynomial, DLT, Quadratic Rational, and RPC. Affine, Quadratic Polynomial, and Cubic Polynomial are two-dimensional polynomial models with polynomial order 1, 2, and 3, respectively; DLT, Quadratic Rational, and RPC are three-dimensional rational polynomial models with polynomial order 1, 2, and 3, respectively. All the polynomials have polynomial type <code>pType=1</code>. (See <a href="#CHDEFCJB">Section 1.6.1</a> for more information about the georeferencing model types.)</p>
<p>In georeferencing using GCPs, the cell and model coordinates of the GCPs are used in the formula of the polynomial or rational polynomial model, and then a linear equation system is formed. No weight is used in the formula, that is, all points have equal weight 1.0. The linear equation system is solved by the least square method, which generates the coefficients for the model that best fits the given control points. Only GCPs with type Control Point are involved in the solution calculation; the GCP with type Check Point is used to check the positioning accuracy of the solved model. The solution accuracy is evaluated based on the residuals of the cell coordinates of those control points involved in the solution.</p>
<p>Different geometric models require different model coordinate dimensions and a different minimum number of GCPs. For two-dimensional geometric models, the model coordinates must be 2D (X,Y); and for three-dimensional geometric models, the model coordinates must be 3D (X, Y, Z). The minimum number of GCPs required for the geometric models are as follows: Affine: 3, Quadratic Polynomial: 6, Cubic Polynomial: 10, DLT: 7, Quadratic Rational: 19, and RPC: 39. However, you should generally use more than the minimum number of GCPs to do georeferencing.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS938" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref112"></a>
<h3 class="sect2"><span class="secnum">1.6.3</span> <a id="sthref113"></a>Cell Coordinate and Model Coordinate Transformation</h3>
<p>Through the functional fitting georeferencing model, GeoRaster assigns ground coordinates to cell coordinates, and cell coordinates to ground coordinates. As a special case, a cell's integer coordinate (the array index of a cell in the cell matrix) can be transformed into a model coordinate, which identifies an exact location of a point in the model space. This point or model coordinate may be either the upper-left corner or the center of the area represented by the cell in the model space.</p>
<p>Similarly, a model coordinate can be transformed into a cell coordinate through georeferencing. However, the resulting cell coordinate from the direct solution of the functional fitting georeferencing model is mostly in floating numbers. The type of the cell space coordinate system, which is decided by the modelCoordinateLocation element, determines which cell the floating coordinate refers to, as described in <a href="#CHDDIDAF">Section 1.3</a>. Effective with Oracle Spatial 11<span class="italic">g</span>, GeoRaster supports both floating (subcell) cell coordinates and integer cell coordinates in all parts of its API.</p>
<p>Cell coordinate and model coordinate transformations are based on the functional fitting model of the GeoRaster spatial reference system (SRS). Both before and after transformation using the GeoRaster SRS, the (row, column) coordinate values of a cell are relative to the GeoRaster cell space, not necessarily relative to the upper-left corner of the raster data itself. The ULTCoordinate can have a different coordinate (row and column values) from the coordinate of the origin of the cell space. That is, the (row, column) coordinate of the upper-left corner is not necessarily (0,0).</p>
<p>Any application that defines the upper-left corner of a raster data as the origin (0, 0) of its own cell space, as in many image file formats, must convert the (row, column) derived from the GeoRaster SRS to be relative to that origin, if the value of GeoRaster ULTCoordinate (row0, column0) is not (0, 0). This conversion must take the GeoRaster ULTCoordinate into consideration, as shown in the following formulas:</p>
<pre>
row = row0 + m
column = column0 + n
</pre>
<p>In these formulas:</p>
<ul>
<li>
<p>row = Row index of the cell relative to the origin of the GeoRaster cell space.</p>
</li>
<li>
<p>column = Column index of the cell relative to the origin of the GeoRaster cell space.</p>
</li>
<li>
<p>row0 = Row index of the ULTCoordinate relative to the origin of the GeoRaster cell space.</p>
</li>
<li>
<p>column0 = Column index of the ULTCoordinate relative to the origin of the GeoRaster cell space.</p>
</li>
<li>
<p>m = Row index (that is, the <span class="italic">m</span>th row, starting at 0 for the first row) of the cell relative to the ULTCoordinate.</p>
</li>
<li>
<p>n = Column index (that is, the <span class="italic">n</span>th column, starting at 0 for the first column) of the cell relative to the ULTCoordinate.</p>
</li>
</ul>
<p>In most applications, the ULTCoordinate and the origin of cell space are the same (that is, row0 = 0 and column0 = 0), in which case m = row and n = column.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDEGJJ"></a>
<div id="GEORS939" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.7</span> <a id="sthref114"></a><a id="sthref115"></a>Pyramids</h2>
<p><span class="bold">Pyramids</span> are subobjects of a GeoRaster object that represent the raster image or raster data at differing sizes and degrees of resolution. The size is usually related to the amount of time that an application needs to retrieve and display an image, particularly over the Web. That is, the smaller the image size, the faster it can be displayed; and as long as detailed resolution is not needed (for example, if the user has "zoomed out" considerably), the display quality for the smaller image is adequate.</p>
<p><a id="sthref116"></a><span class="bold">Pyramid levels</span> represent reduced or increased resolution images that require less or more storage space, respectively. (GeoRaster currently supports only reduced resolution pyramids.) A pyramid level of 0 indicates the original raster data; that is, there is no reduction in the image resolution and no change in the storage space required. Values greater than 0 (zero) indicate increasingly reduced levels of image resolution and reduced storage space requirements.</p>
<p><a id="sthref117"></a><span class="bold">Pyramid type</span> indicates the type of pyramid, and can be one of the following values:</p>
<ul>
<li>
<p><code>DECREASE</code> means that pyramids decrease in size as the pyramid level increases.</p>
</li>
<li>
<p><code>NONE</code> means that there are no pyramids associated with the GeoRaster object.</p>
</li>
</ul>
<p><a href="#CHDIEEBJ">Figure 1-7</a> <a id="sthref118"></a>shows the concept of pyramid levels with a pyramid type of <code>DECREASE</code>. It conveys the idea that as the pyramid level number increases, the file size decreases, but the resolution also decreases because fewer pixels are used to represent the image.</p>
<div id="GEORS940" class="figure">
<p class="titleinfigure"><a id="CHDIEEBJ"></a>Figure 1-7 Pyramid Levels</p>
<img width="240" height="326" src="img/pyramid.gif" alt="Description of Figure 1-7 follows" /><br />
<a id="sthref119" href="img_text/pyramid.htm">Description of "Figure 1-7 Pyramid Levels"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref120"></a>The size of the pyramid image at each level is determined by the original image size and the pyramid level, according to the following formulas:</p>
<pre>
r(n) = (int)(r(0) / 2^n)
c(n) = (int)(c(0) / 2^n)
</pre>
<p>In the preceding formulas:</p>
<ul>
<li>
<p><code>r(0)</code> and <code>c(0)</code> are the original row and column dimension size.</p>
</li>
<li>
<p><code>r(n)</code> and <code>c(n)</code> are the row and column dimension size of pyramid level <span class="italic">n</span>.</p>
</li>
<li>
<p><code>int</code> rounds off a number to the integer value that is less than but closest to that number.</p>
</li>
<li>
<p><code>2^n</code> means 2 to the power of <span class="italic">n</span>.</p>
</li>
</ul>
<p>The smaller of the row and column dimension sizes of the top-level overview (the smallest top-level pyramid) is 1. This determines the maximum reduced-resolution pyramid level, which is calculated as follows: <code>(int)(log2(a))</code></p>
<p>In the preceding calculation:</p>
<ul>
<li>
<p><code>log2</code> is a logarithmic function with 2 as its base.</p>
</li>
<li>
<p><code>a</code> is the smaller of the original row and column dimension size.</p>
</li>
</ul>
<p>The addressing of cells in the pyramid uses the same type of cell addressing as that defined for the original raster data, as described in <a href="#CHDDIDAF">Section 1.3</a>. Each pyramid level has its own cell space; however, all cell spaces of the pyramid levels have the same type of cell coordinate system (either center-based or upper-left based) as that of the original level (level zero). The cells are squares with equal size and the unit is 1 cell. The upper-left corner cell in each pyramid level has the same ULTCoordinate as that of the original raster data, registered in the metadata. Based on this cell space definition and the pyramid levels, the cell coordinates in one pyramid level can be converted to another.</p>
<p>There is no separate SRS defined for each pyramid level in the GeoRaster metadata. The model coordinates of the cells in the pyramid are derived by first converting the cell coordinates of different pyramid level into cell coordinates of pyramid level zero and then applying the GeoRaster SRS. Conversely, the cell coordinates of ground points in the pyramid are derived by first obtaining the cell coordinates of those ground points in pyramid level zero using the GeoRaster SRS, and then converting them into a specific pyramid level. Effective with Oracle Spatial 11<span class="italic">g</span>, GeoRaster supports subcell addressing of pyramids in all parts of its API.</p>
<p>The pyramids are stored in the same raster data table as the GeoRaster object. The pyramidLevel attribute in the raster data table identifies all the blocks related to a specific pyramid level. In general, the blocking scheme for each pyramid level is the same as that for the original level (which is defined in the GeoRaster object metadata), except in the following cases:</p>
<ul>
<li>
<p>If the original GeoRaster object is not blocked, that is, if the original cell data is stored in one block (BLOB) of the exact size of the object, the cell data of each pyramid level is stored in one block, and its size is the same as that of the actual pyramid level image.</p>
</li>
<li>
<p>If the original GeoRaster object is blocked (even if blocked as one block), the cell data of each pyramid level is blocked in the same way as for the original level data, and each block is stored in a different BLOB object as long as the maximum dimension size of the actual pyramid level image is larger than the block sizes. However, if lower-resolution pyramids are generated (that is, if both the row and column dimension sizes of the pyramid level are less than or equal to one-half the row block size and column block size, respectively), the cell data of each such pyramid level is stored in one BLOB object and its size is the same as that of the actual pyramid level image.</p>
</li>
</ul>
<p>When pyramids are generated on a GeoRaster object or when a GeoRaster object is scaled, resampling of cell data is required. GeoRaster provides the following standard resampling methods:</p>
<ul>
<li>
<p>Nearest neighbor</p>
</li>
<li>
<p>Bilinear interpolation using 4 neighboring cells</p>
</li>
<li>
<p>Cubic convolution using 16 neighboring cells</p>
</li>
<li>
<p>Average4 using 4 neighboring cells</p>
</li>
<li>
<p>Average16 using 16 neighboring cells</p>
</li>
</ul>
<p>The following subprograms (described in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>) are associated with GeoRaster support for pyramids:</p>
<ul>
<li>
<p><a href="geor_ref.htm#CHEDFEAI">SDO_GEOR.generatePyramid</a> generates pyramid data for a GeoRaster object.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEIDJHH">SDO_GEOR.deletePyramid</a> deletes pyramid data for a GeoRaster object.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHECHFCB">SDO_GEOR.getPyramidMaxLevel</a> returns the maximum pyramid level of a GeoRaster object.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEFAJFF">SDO_GEOR.getPyramidType</a> returns the pyramid type for a GeoRaster object.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDEIJCI"></a>
<div id="GEORS941" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.8</span> <a id="sthref121"></a><a id="sthref122"></a>Bitmap Masks</h2>
<p>A <span class="bold">bitmap mask</span> is a special one-bit deep rectangular raster grid with each pixel having either the value of 0 or 1. It is used to define an irregularly shaped region inside another image. The 1-bits define the interior of the region, and the 0-bits define the exterior of the region.</p>
<p>A bitmap mask can be attached to or removed from a nonblank GeoRaster object. Each band or layer of a nonblank GeoRaster object can also have a separate bitmap mask associated with it. Thus, there can be at most <span class="italic">n</span>+1 bitmap masks associated with a nonblank GeoRaster object, where <span class="italic">n</span> is the total number of sublayers of the GeoRaster object. A bitmap mask can also be edited or updated independently.</p>
<p>If a bitmap mask is associated with the object layer, it also becomes the default bitmap mask for all sublayers. A bitmap mask associated with a sublayer overrides the default bitmap mask associated with the object layer.</p>
<p>A bitmap mask attached to a raster layer must have the same number of rows and columns as any other raster layers in the image, and must precisely cover the same area. It uses the same ULTCoordinate and SRS as that of the GeoRaster object itself. Logically, it is not an integral part of the raster image itself, but rather an ancillary piece of information; however, physically, it is stored inside the GeoRaster object.</p>
<p>The physical storage of bitmap masks is similar to that of a GeoRaster object's raster data. Bitmap masks are stored in the raster data table of the associated GeoRaster object, with exactly the same blocking attributes. However, the <code>bandBlockNumber</code> of a bitmap mask entry is always set to the layer number with which the bitmap mask is associated. For information about the relationship between bands and layers, see <a href="#CHDGCCJH">Section 1.5</a>.</p>
<p>The <code>pyramidLevel</code> value starts with the value -99999 instead of 0, and it increases by 1 for each upper pyramid level. Pyramids are built on bitmap masks along with pyramids on the regular raster data, and bitmap masks can be scaled together with the associated GeoRaster object with the <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a> procedure, but the resampling method used for bitmap masks is always NN (Nearest Neighbor). Bitmap masks are compressed or decompressed when its associated GeoRaster object is compressed or decompressed, and bitmap masks are always compressed with the DEFLATE method (lossless). A bitmap mask can also be sparse and thus can contain empty blocks, with the missing cell values indicating 0.</p>
<p>Bitmap masks are generally used by applications in either or both of the following ways:</p>
<ul>
<li>
<p>When used as a transparency mask, a bitmap mask can be used by a display application to determine which part of the image to display. For example, main image pixels that correspond to 1-bits in the bitmap mask are imaged to the screen or printer, but main image pixels that correspond to 0-bits in the mask are not displayed or printed. It can also be used as the alpha channel of the image, and so the 0 and 1 values can be mapped to different transparency values for display.</p>
</li>
<li>
<p>When used as a NODATA mask in a GIS application, a bitmap mask tells the application to treat pixels that correspond to the exterior (0-bits) of the mask as NODATA. For this purpose, it can be registered as a special type of NODATA in the GeoRaster metadata, as explained in <a href="#BABJCCBA">Section 1.9</a>.</p>
</li>
</ul>
<p>Several PL/SQL subprograms perform operations on bitmap masks such as attaching a bitmap mask to a GeoRaster object, replacing an existing bitmap mask, removing a bitmap mask, checking whether a GeoRaster object has a certain bitmap mask, and extracting an entire bitmap mask, a subset of it, or a single cell value of it.</p>
</div>
<!-- class="sect1" -->
<a id="BABJCCBA"></a>
<div id="GEORS942" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.9</span> NODATA Values and Value Ranges</h2>
<p>A NODATA value is used for cells whose values are either not known or meaningless. Each individual raster layer can have multiple NODATA values or NODATA value ranges, or both, associated with it. The GeoRaster metadata schema stores the NODATA information with each raster layer. Specifically, the NODATA values and value ranges associated with the object layer apply to any other sublayers. The NODATA values and value ranges for a sublayer is the union of those for the object layer and any NODATA metadata present in the sublayer. When you delete NODATA values or value ranges from a sublayer, any values or value ranges present in the object layer cannot be removed.</p>
<p>NODATA values and value ranges can be considered during resampling, for example, when pyramids are generated or when an image is generated by scaling. NODATA cells are by default treated as regular cells in those processes, to avoid dilations or erosions. However, when NODATA values or value ranges are chosen to be considered and the resampling method is <code>BILINEAR</code>, <code>AVERAGE4</code>, <code>AVERAGE16</code> or <code>CUBIC</code>, then whenever a cell value involved in the resampling calculation is a NODATA value, the result of the resampling is also a NODATA value. The resulting NODATA value is the first NODATA value inside each resampling window, where the cell values are ordered row by row from the upper-left corner to the lower-right corner.</p>
<p>If you have GeoRaster objects from before release 11<span class="italic">g</span> with NODATA metadata stored in the raster description, that metadata is still valid for backward compatibility. The old NODATA value is considered to be object-wide, and it is moved to the object layer when you call the <a href="geor_ref.htm#CHEGGHIC">SDO_GEOR.addNODATA</a> procedure on the object layer or when you call the <a href="geor_ref.htm#CHEGCGHE">SDO_GEOR.deleteNODATA</a> procedure on the object layer without deleting the old NODATA value.</p>
<p>A NODATA value or value range is described using the SDO_RANGE_ARRAY type, which is defined as <code>VARRAY(1048576) OF SDO_RANGE</code>; the SDO_RANGE type specifies a lower and upper bound and is defined as (<code>LB NUMBER, UB NUMBER)</code>.</p>
<ul>
<li>
<p>To specify a single number in an SDO_RANGE definition, specify LB as the number and UB as null. The following example specifies 2 as the NODATA value: <code>SDO_RANGE_ARRAY(SDO_RANGE(2,NULL))</code></p>
</li>
<li>
<p>SDO_RANGE(<span class="italic">LB, UB</span>) where <span class="italic">LB</span>=<span class="italic">UB</span> is considered the same as SDO_RANGE(<span class="italic">LB</span>, NULL).</p>
</li>
<li>
<p>A real NODATA value range (where UB is not NULL and LB is less than UB) is inclusive at the lower bound and exclusive at the upper bound.</p>
</li>
<li>
<p>You can specify multiple NODATA value ranges and individual NODATA values. The following example specifies one single NODATA value (5) and two NODATA value ranges (1,3) and (7,8): <code>SDO_RANGE_ARRAY(SDO_RANGE(1,3), SDO_RANGE(5,NULL), SDO_RANGE(7,8))</code></p>
</li>
</ul>
<p>Several PL/SQL subprograms perform operations (such as adding, removing, and querying) on NODATA values and value ranges associated with a GeoRaster layer.</p>
<p>In GeoRaster, a bitmap mask can be treated as a special type of NODATA, that is, a NODATA mask specifying one or more irregular areas as NODATA areas. In this case, the bitmap mask is not only identified in the <code>bitmapMask</code> element of the <code>layerInfo</code> metadata, but is also registered with the <code>NODATA</code> element of the <code>layerInfo</code> metadata. However, bitmap mask NODATA values are not considered during any resampling processing and statistical analysis.</p>
</div>
<!-- class="sect1" -->
<a id="CHDBEEJI"></a>
<div id="GEORS180" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.10</span> <a id="sthref123"></a>Compression and Decompression</h2>
<p>GeoRaster provides two types of native compression to reduce storage space requirements for GeoRaster objects: JPEG (JPEG-B or JPEG-F) and DEFLATE. With both types, each block is compressed individually, as a distinct raster representation; and when a compressed GeoRaster object is decompressed, each block is decompressed individually.</p>
<p><a id="sthref124"></a><a id="sthref125"></a>Any GeoRaster operation that can be performed on a decompressed (uncompressed) GeoRaster object can also be performed on a compressed GeoRaster object. When GeoRaster performs an operation, if the source GeoRaster object is compressed, GeoRaster internally decompresses blocks of the source object as needed, performs the specified operation, and then compresses the resulting object in the format specified by the <code>compression</code> keyword or, if the <code>compression</code> keyword is not specified, in the source object's compression format. Therefore, you do not need to decompress compressed GeoRaster objects before performing certain operations, but you might gain some overall performance benefit if you decompress the objects before performing other operations.</p>
<p>Before a database user compresses or decompresses a GeoRaster object, ensure that the database has been created with a default temporary tablespace or that the user has been assigned a temporary tablespace or tablespace group. Otherwise, by default the <code>SYSTEM</code> tablespace is used for the temporary tablespace, and large temporary LOB data generated during GeoRaster operations are put in the <code>SYSTEM</code> tablespace, possibly affecting overall database performance. For information about managing temporary tablespaces, see <a class="olink ADMIN011" href="../../server.112/e25494/tspaces.htm#ADMIN011"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
<p>To specify compression or decompression of a GeoRaster object, use the <code>compression</code> keyword in the <code>storageParam</code> parameter, which is described in <a href="#CHDIJFCD">Section 1.4.1</a>. You can use the <code>compression</code> keyword in the <code>storageParam</code> parameter with several GeoRaster procedures, including <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a>, <a href="geor_ref.htm#CHEBDCDJ">SDO_GEOR.getRasterData</a>, <a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a>, <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, and <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>. (There are no separate procedures for compressing and decompressing a GeoRaster object.)</p>
<p>If the source GeoRaster object is blank, the <code>compression</code> keyword is ignored, except for the <a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a> and <a href="geor_ref.htm#CHEBDCDJ">SDO_GEOR.getRasterData</a> functions. That is, a blank GeoRaster object is never compressed, and the compression type in the metadata is always <code>NONE</code>. (Blank GeoRaster objects are explained in <a href="#CHDIHJJE">Section 1.4.3</a>.)</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p>JPEG compression of GeoRaster objects (<a href="#CHDEIJBB">Section 1.10.1</a>)</p>
</li>
<li>
<p>DEFLATE compression of GeoRaster objects (<a href="#CHDFBGHH">Section 1.10.2</a>)</p>
</li>
<li>
<p>Decompression of GeoRaster objects (<a href="#CHDDJFGJ">Section 1.10.3</a>)</p>
</li>
<li>
<p>Third-party plug-ins for compression of GeoRaster objects (<a href="#BABCCDAF">Section 1.10.4</a>)</p>
</li>
<li>
<p>SecureFiles Compression (<a href="#BABIHAJH">Section 1.10.5</a>)</p>
</li>
</ul>
<a id="CHDEIJBB"></a>
<div id="GEORS1174" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.10.1</span> <a id="sthref126"></a><a id="sthref127"></a>JPEG Compression of GeoRaster Objects</h3>
<p>JPEG compression is supported only for GeoRaster objects with a <code>cellDepth</code> value of <code>8BIT_U</code> and no more than 4 bands per block, and each block must have 1 band, 3 bands, or 4 bands. (2 bands per block is not supported for JPEG compression.) You can JPEG compress GeoRaster objects of more than 4 bands by reblocking the GeoRaster object with a band block size of 1, 3, or 4 bands. JPEG compression is not supported for GeoRaster objects with a colormap.</p>
<p>Although JPEG compression is supported for GeoRaster objects of any size, the total size (<code>columnsPerBlock * rowsPerBlock * bandsPerBlock * cellDepth / 8</code>) of each block of the GeoRaster object must not exceed 50 megabytes (MB). For large GeoRaster objects, you can call the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure to block the GeoRaster object into blocks smaller than 50 MB, and then compress the GeoRaster object; or you can perform the blocking and compression in the same call to the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure.</p>
<p><a id="sthref128"></a><a id="sthref129"></a>GeoRaster supports the JPEG-B and JPEG-F compression modes:</p>
<ul>
<li>
<p>JPEG-B mode compresses objects in the abbreviated baseline JPEG format.</p>
</li>
<li>
<p>JPEG-F mode compresses objects in the full-format baseline JPEG format.</p>
</li>
</ul>
<p>Both modes are described in the CCITT Rec. T.81 JPEG specification (or ICO/IEC IS 10918-1). For both modes, GeoRaster uses the quantization table in Table K.2 of the CCITT Rec. T.81 JPEG specification and (for the Huffman tables) standard chrominance tables in Tables K.4 and K.6 of that specification. The quantization table is scaled by the compression quality before the table is applied to data during the compression process.</p>
<p>Because JPEG-B mode compression is an abbreviated format, the quantization and Huffman tables (which are required for decoding) are not included in the JPEG-B compressed data. These tables are included in JPEG-F compressed data.</p>
<p>The JPEG-B abbreviated format provides better compression than the JPEG-F format, and thus significantly reduces the storage space required if a large GeoRaster object is blocked into many smaller blocks. For example, for a remote sensing image compressed with a quality of 75, the average JPEG-B compression ratio might be about 20:1, while the average JPEG-F compression ratio might be about 2.5:1.</p>
<p><a id="sthref130"></a><a id="sthref131"></a>Both JPEG-B and JPEG-F are lossy compression formats. You can control the degree of loss with the <code>quality</code> keyword to the <code>storageParam</code> parameter. The <code>quality</code> keyword takes an integer value from 0 to 100. A value of 0 (zero) provides maximum compression, but causes substantial loss of data. A value of 75 (the GeoRaster default) provides an image that most people perceive as having no loss of quality, but that provides significant compression. A value of 100 provides the least compression, but the best quality.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFBGHH"></a>
<div id="GEORS1175" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.10.2</span> <a id="sthref132"></a><a id="sthref133"></a><a id="sthref134"></a>DEFLATE Compression of GeoRaster Objects</h3>
<p>DEFLATE compression compresses objects according to the Deflate Compressed Data Format Specification (Network Working Group RFC 1951), and it stores the compressed data in ZLIB format, as described in the ZLIB Compressed Data Format Specification (Network Working Group RFC 1950). The ZLIB header and checksum fields are included in the compressed GeoRaster object.</p>
<p>Although DEFLATE compression is supported for GeoRaster objects of any size, the total size (<code>columnsPerBlock * rowsPerBlock * bandsPerBlock * cellDepth / 8</code>) of each block of the GeoRaster object must not exceed 1 gigabyte (GB). For large GeoRaster objects, you can call the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure to block the GeoRaster object into blocks smaller than1 GB, and then compress the GeoRaster object; or you can perform the blocking and compression in the same call to the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure.</p>
<p>Because DEFLATE compression is lossless, compression quality does not apply, and is ignored if it is specified.</p>
</div>
<!-- class="sect2" -->
<a id="CHDDJFGJ"></a>
<div id="GEORS1176" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.10.3</span> <a id="sthref135"></a><a id="sthref136"></a>Decompression of GeoRaster Objects</h3>
<p>You can decompress a compressed GeoRaster object in the database by specifying <code>compression=NONE</code> in the <code>storageParam</code> parameter. In this case, compression quality (if applicable) is derived from the metadata for JPEG-B compression or from the header data for JPEG-F compression; you should not specify compression quality as a storage parameter.</p>
<p>You can decompress a compressed GeoRaster object outside the database (that is, on the client side) by using an existing application programming interface (API), such as PL/SQL or the Oracle Call Interface (OCI), to retrieve the BLOB objects corresponding to the GeoRaster object's blocks, and decoding each compressed block individually according to the specifications of the relevant compression format. For example, if a GeoRaster object is compressed in JPEG-F mode, the decoding process should first parse the JPEG headers to retrieve the tables and block dimensions, and then apply Huffman decoding and dequantization to the image data.</p>
<p>Implementing JPEG decompression completely on your own is a complex, detail-oriented process. Depending on the application, it may be better to use an existing implementation. Libraries such as <code>jpeglib</code> in C and several imaging APIs in Java (for example, Sun J2SE and JAI) already implement JPEG decompression, and you can adapt them to perform the decoding process on JPEG-compressed GeoRaster objects. You can apply essentially the same approach for DEFLATE compression using a ZLIB C library or Java API.</p>
</div>
<!-- class="sect2" -->
<a id="BABCCDAF"></a>
<div id="GEORS1177" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.10.4</span> <a id="sthref137"></a><a id="sthref138"></a><a id="sthref139"></a><a id="sthref140"></a>Third-Party Plug-ins for Compression</h3>
<p>GeoRaster provides a plug-in architecture for third-party compression solutions. LizardTech Corporation provides a plug-in that enables users to compress and store raster imagery, in MrSID and JPEG 2000 compression types, natively in Oracle Spatial and Graph GeoRaster. For information, contact LizardTech Corporation.</p>
</div>
<!-- class="sect2" -->
<a id="BABIHAJH"></a>
<div id="GEORS1178" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.10.5</span> <a id="sthref141"></a><a id="sthref142"></a>SecureFiles Compression</h3>
<p>You can use Oracle Database SecureFiles Compression (described briefly in <a class="olink ADLOB46109" href="../../appdev.112/e18294/adlob_smart.htm#ADLOB46109"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a>) to achieve lossless compression of GeoRaster raster data tables (RDTs), thus compressing the GeoRaster objects. If you specify SecureFiles Compression for LOB storage when you create a table (such as the rasterBlock column of an RDT), then the SecureFile LOBs in all rows of that table are compressed using SecureFiles Compression. The compression is transparent to GeoRaster, and thus no application changes are required. However, you should avoid using SecureFiles Compression on the RDT raster blocks if you are also using any GeoRaster-specific compression types (such as JPEG, DEFLATE, or a third-party plug-in) on these blocks.</p>
<p>The use of SecureFiles Compression requires licensing for the Oracle Database Advanced Compression Option, which is described in <a class="olink DBLIC142" href="../../license.112/e47877/options.htm#DBLIC142"><span class="italic">Oracle Database Licensing Information</span></a>. Note that the Oracle Database Advanced Compression Option is <span class="bolditalic">not</span> required for GeoRaster compression operations that do not involve SecureFiles Compression.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGAIDI"></a>
<div id="GEORS947" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.11</span> <a id="sthref143"></a><a id="sthref144"></a>GeoRaster and Database Management</h2>
<p>GeoRaster enables you to perform database management tasks. It also performs many management tasks automatically, and enforces several guidelines to facilitate its automatic management operations.</p>
<p>GeoRaster provides several subprograms for users who need to perform specialized management tasks:</p>
<ul>
<li>
<p><a href="geor_admin_ref.htm#CHEDDIAA">SDO_GEOR_ADMIN.isRDTNameUnique</a> checks for the uniqueness of an RDT name, and <a href="geor_util_ref.htm#CHEICIEB">SDO_GEOR_UTL.renameRDT</a> renames the RDT in the database to solve conflicts, which might happen during data migration.</p>
</li>
<li>
<p><a href="geor_admin_ref.htm#CHDCIGDI">SDO_GEOR_ADMIN.checkSysdataEntries</a> and <a href="geor_admin_ref.htm#CHDFJIAB">SDO_GEOR_ADMIN.maintainSysdataEntries</a> check for and fix corrupt SYSDATA entries in the current schema or the database, depending on the privileges associated with the database connection.</p>
</li>
<li>
<p>The following subprograms check the status of existing GeoRaster objects and related objects in the current schema or the database, depending on the privileges associated with the database connection: <a href="geor_admin_ref.htm#CHDHDBIJ">SDO_GEOR_ADMIN.listGeoRasterObjects</a>, <a href="geor_admin_ref.htm#CHDHGBAB">SDO_GEOR_ADMIN.listGeoRasterColumns</a>, <a href="geor_admin_ref.htm#CHDCDEIC">SDO_GEOR_ADMIN.listGeoRasterTables</a>, <a href="geor_admin_ref.htm#CHDBGBHG">SDO_GEOR_ADMIN.listRDT</a>, <a href="geor_admin_ref.htm#CHDGBHHC">SDO_GEOR_ADMIN.listRegisteredRDT</a>, and <a href="geor_admin_ref.htm#CHDHCHJF">SDO_GEOR_ADMIN.listUnregisteredRDT</a>.</p>
</li>
<li>
<p>The following subprograms enable you to register existing GeoRaster objects in the current schema or the database, depending on the privileges associated with the database connection: <a href="geor_admin_ref.htm#CHDIJIFI">SDO_GEOR_ADMIN.registerGeoRasterObjects</a> and <a href="geor_admin_ref.htm#BABBFAEC">SDO_GEOR_ADMIN.registerGeoRasterColumns</a>.</p>
</li>
<li>
<p><a href="geor_admin_ref.htm#CHDFGEGE">SDO_GEOR_ADMIN.upgradeGeoRaster</a> checks for and corrects errors after a database upgrade.</p>
</li>
</ul>
<p>To ensure the reliability of GeoRaster data and metadata, the following actions are performed and the following guidelines are enforced:</p>
<ul>
<li>
<p>GeoRaster triggers are maintained by GeoRaster, and they cannot be dropped or altered by SQL statements issued by users directly.</p>
</li>
<li>
<p><a id="sthref145"></a>The name pattern <code>GRDMLTR_*</code> is reserved for GeoRaster triggers. Users must not create any triggers whose names start with <code>GRDMLTR_</code>.</p>
</li>
<li>
<p>The associated GeoRaster metadata entries are updated automatically in all of the following cases: if a GeoRaster table is dropped, truncated, renamed, or altered; if a GeoRaster column is dropped; or if a schema is dropped. (However, if you use the ALTER TABLE statement to add one or more GeoRaster columns, you must call the <a href="geor_util_ref.htm#CHEDAGGC">SDO_GEOR_UTL.createDMLTrigger</a> procedure to create the DML trigger on each added GeoRaster column.)</p>
</li>
<li>
<p>A raster data table (RDT) cannot be dropped or directly renamed using standard SQL statement as long as any GeoRaster object references that RDT. To rename RDT, call the <a href="geor_util_ref.htm#CHEICIEB">SDO_GEOR_UTL.renameRDT</a> procedure.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CHDJCAEA"></a>
<div id="GEORS948" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.12</span> GeoRaster PL/SQL API</h2>
<p>GeoRaster provides the SDO_GEOR, SDO_GEOR_UTL, and SDO_GEOR_ADMIN PL/SQL packages, which contain subprograms (functions and procedures) to work with GeoRaster data and metadata. Most of these subprograms fit into one of the following logical categories reflecting the purpose of the subprogram:</p>
<ul>
<li>
<p>Create, load, and export GeoRaster data</p>
</li>
<li>
<p>Georeference and validate GeoRaster objects</p>
</li>
<li>
<p>Query and update GeoRaster metadata</p>
</li>
<li>
<p>Query and update GeoRaster cell data</p>
</li>
<li>
<p>Process GeoRaster objects</p>
</li>
<li>
<p>Perform GeoRaster administrative functions</p>
</li>
</ul>
<p>GeoRaster automatically validates the GeoRaster object after any <span class="italic">set</span> or <span class="italic">process</span> procedure completes.</p>
<p>Reference chapters provide detailed information about the subprograms in the SDO_GEOR (<a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>), SDO_GEOR_ADMIN (<a href="geor_admin_ref.htm#BABDDFEI">Chapter 5</a>), and SDO_GEOR_UTL (<a href="geor_util_ref.htm#CHEGCDBB">Chapter 6</a>) PL/SQL packages. The subprograms are presented in alphabetical order in those chapters. <a href="geor_operations.htm#CIHGCJJE">Chapter 3</a> describes operations that involve the use of many of those subprograms, including the general steps for calling them.</p>
</div>
<!-- class="sect1" -->
<a id="BABDIGCD"></a>
<div id="GEORS1179" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.13</span> GeoRaster Java API</h2>
<p>The Oracle Spatial GeoRaster Java API consists of interfaces and classes that support features available with the GeoRaster feature of Oracle Spatial. This API provides a complete mapping of the SDO_GEORASTER object type and its metadata to Java objects, and it offers Java methods to manipulate GeoRaster objects.</p>
<p>This API includes the following packages:</p>
<ul>
<li>
<p>The <code>oracle.spatial.georaster</code> package is the core of this API. It provides a complete mapping of the SDO_GEORASTER object type and its metadata to Java objects, and it offers Java methods to manipulate GeoRaster objects. It is in pure Java and does not depend upon JAI.</p>
</li>
<li>
<p>The <code>oracle.spatial.georaster.sql</code> package provides support for wrapping some of the GeoRaster PL/SQL subprograms that do not have support included in the <code>oracle.spatial.georaster</code> package.</p>
</li>
<li>
<p>The <code>oracle.spatial.georaster.image</code> package provides support for generating Java images from a GeoRaster object or a subset of a GeoRaster object, and for processing the images. This package depends upon and leverages JAI.</p>
</li>
</ul>
<p>For detailed information about these packages, see <a class="olink SPAJV" href="../e11829/toc.htm"><span class="italic">Oracle Spatial Java API Reference</span></a> (Javadoc).</p>
<p>The Spatial Java class libraries are in .jar files under the <code>&lt;ORACLE_HOME&gt;/md/jlib/</code> directory. The GeoRaster Java API .jar file is <code>$ORACLE_HOME/md/jlib/georasterapi.jar</code>.</p>
<p>The support for GeoRaster themes in Oracle MapViewer is based on the GeoRaster Java API. You can use the MapViewer Java and XML APIs to access GeoRaster data. MapViewer is documented in <a class="olink JIMPV" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=JIMPV"><span class="italic">Oracle Fusion Middleware User's Guide for Oracle MapViewer</span></a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDHHFHJ"></a>
<div id="GEORS950" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.14</span> <a id="sthref146"></a><a id="sthref147"></a><a id="sthref148"></a><a id="sthref149"></a><a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a>GeoRaster Tools: <a id="sthref153"></a><a id="sthref154"></a><a id="sthref155"></a><a id="sthref156"></a>Viewer, <a id="sthref157"></a><a id="sthref158"></a><a id="sthref159"></a>Loader, <a id="sthref160"></a><a id="sthref161"></a><a id="sthref162"></a>Exporter</h2>
<p>Oracle works closely with third parties to provide comprehensive <a id="sthref163"></a><a id="sthref164"></a>ETL (extract, transform, load) tools for loading and exporting various raster data formats and to provide visualization clients to display GeoRaster objects. See the Spatial and Graph partner solutions information at <code><a href="http://www.oracle.com/technetwork/database-options/spatialandgraph/learnmore/">http://www.oracle.com/technetwork/database-options/spatialandgraph/learnmore/</a></code> and the open source components for Spatial and Graph at <code><a href="http://www.oracle.com/technetwork/database-options/spatialandgraph/documentation/">http://www.oracle.com/technetwork/database-options/spatialandgraph/documentation/</a></code>; see also the <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md/demo/georaster/java/README</code> file, including any limitations</p>
<p>GeoRaster also includes the following client-side tools:</p>
<ul>
<li>
<p>JAI-based GeoRaster viewer, loader and exporter (described in <a href="#BABBJBBJ">Section 1.14.1</a>)</p>
</li>
<li>
<p>GDAL-based ETL wizard for concurrent batch loading and exporting of large numbers of image and raster files (described in <a href="#BABDJFGB">Section 1.14.2</a>)</p>
</li>
</ul>
<p>To use these client-side tools, you must install the demo files from the Oracle Database Examples media (see <a class="olink EXMPL" href="../../install.112/e24501/toc.htm"><span class="italic">Oracle Database Examples Installation Guide</span></a>). After the installation, these tools are in <a id="sthref165"></a>the following two <code>.jar</code> files (assuming the default Spatial and Graph installation directory of <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md</code>):</p>
<pre>
$ORACLE_HOME/md/demo/georaster/java/georaster_tools.jar
$ORACLE_HOME/md/demo/georaster/etl/georaster_etl.jar
</pre>
<a id="BABBJBBJ"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.14.1</span> JAI-Based Viewer, Loader, and Exporter</h3>
<p>The GeoRaster JAI-based tools include a viewer, a loader, and an exporter. These tools are intended for DBAs and application developers. The viewer is especially useful for examining all types of GeoRaster objects and their metadata. It can also display a virtual mosaic defined as one or a list of GeoRaster tables or views. The loader and exporter are lightweight tools for conveniently load and export a limited number of image and raster files one at a time. <a id="sthref166"></a>The <code>$ORACLE_HOME/md/demo/georaster/java/README</code> file includes helpful usage information and instructions for using the following tools:</p>
<ul>
<li>
<p>GeoRaster viewer displays GeoRaster objects and metadata, as well as virtual mosaics. You can connect to multiple databases simultaneously, and see the GeoRaster objects from each database listed in the left pane. You can quickly switch among views at various resolutions, from the original image (pyramid level 0) to the overview (highest pyramid level). You can perform image enhancement, such as linear stretch (automatic, manual, or piecewise), normalization, equalization, and controls for brightness, contrast, and threshold. (For more information about viewing GeoRaster objects, see <a href="geor_operations.htm#CIHIEIDE">Section 3.14</a>.)</p>
<p>In the viewer, you can call the GeoRaster loader and exporter tools, thus enabling you to use a single tool as an interface to the capabilities of all the GeoRaster tools. The loader and exporter tools are described in this section and in the <code>README</code> file.</p>
</li>
<li>
<p>GeoRaster loader, which loads raster data into the GeoRaster objects. It can load the following image formats: TIFF, GeoTIFF, JPEG, BMP, GIF, PNG, and JP2. Georeferencing information can be loaded from ESRI world files, GeoTIFF files and Digital Globe RPC text files.</p>
<p>You can use the GeoRaster loader as an alternative to the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure, which is documented in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>. However, on non-Windows systems this loader tool does not support the BMP or GIF image formats, so you must use the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure with these formats on non-Windows systems. This tool does not support raster data that has a cell depth value of <code>2BIT</code>, or source multiband raster data with BIL or BSQ interleaving types. The imported GeoRaster object has the BIP interleaving type. The loading operation of this tool cannot be rolled back.</p>
<p>When an image in JPEG file format is loaded, the amount of memory required for the operation depends on the size of the uncompressed image, and can be specified as a command line parameter using the <code>-Xmx</code> option (for example, <code>java -Xmx256M oracle.spatial.georaster.tools.GeoRasterLoader ...</code>).</p>
</li>
<li>
<p>GeoRaster exporter, which exports GeoRaster objects to image files. The GeoRaster exporter tool supports the following destination image file formats: TIFF, GeoTIFF, JPEG, BMP, GIF, PNG, and JP2. Georeferencing information can be exported to ESRI world files, GeoTIFF files and Digital Globe RPC text files.</p>
<p>You can use this as an alternative to the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure, which is documented in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>. Note, however, that the GeoRaster exporter tool does not support GIF as a destination file format; the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure does not support GIF, JPEG, or JP2 as a destination file format. The GeoRaster exporter tool does not support GeoRaster objects that have a <code>cellDepth</code> value of <code>2BIT</code>. GeoRaster objects with a cell depth of 8 bits or greater that have a BSQ or BIL interleaving are exported in BIP interleaved format.</p>
<p>For information about limits on the amount of GeoRaster data that can be exported in a single operation, see the Usage Notes for the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure.</p>
</li>
</ul>
<p>Some restrictions on load and export operations may apply regarding image size and type; see the <code>README</code> file for the GeoRaster tools.</p>
<p>These tools are developed in Java, so you can run them anywhere through an intranet or the Internet, as long as you establish a network connection with the Oracle database.</p>
<p>To load or export GeoTIFF images with the GeoRaster client-side tools, add the following libraries to your CLASSPATH definition:</p>
<ul>
<li>
<p><code>xtiff-jai.jar</code> (available from the SourceForge Extensible-TIFF-JAI group)</p>
</li>
<li>
<p><code>geotiff-jai.jar</code> (available from the SourceForge GeoTIFF-JAI group)</p>
</li>
</ul>
<p>To load or export JP2 images, add the following library to your CLASSPATH definition: <code>jai-imageio.jar</code> (available from the Oracle Java Advanced Imaging Image I/O Tools download page).</p>
<p>After raster or image files are loaded into GeoRaster objects, the data is completely stored in the native GeoRaster object data type and is independent from any specific file formats.</p>
<p>If you want to create your own GeoRaster loader and exporter tools, you can develop them using OCI, Oracle C++ Call Interface (OCCI), or Java, and you can implement them as client-side commands or server-side SQL procedures or functions.</p>
</div>
<!-- class="sect2" -->
<a id="BABDJFGB"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">1.14.2</span> GDAL-Based ETL Wizard for Concurrent Batch Loading and Exporting</h3>
<p>GeoRaster includes an ETL wizard tool to automate and enable concurrent batch loading and exporting of various image and raster files using GDAL. This powerful tool can load and export large numbers of raster and image files in batches and concurrently.</p>
<p>It defines an XML schema and provides a graphical user interface to create loading and exporting description files in XML. Each description file describes how to load or export a series of raster files into or from GeoRaster in a batch. After the XML description files are created, you can use the same wizard tool to invoke multiple description files to concurrently load and export raster files in batches. Any runtime failures are caught and logged, but they do not stop the batch loading or exporting processes. This tool supports all raster formats supported by GDAL.</p>
<p>To use this wizard, you must install the demo files from the Oracle Database Examples media (see <a class="olink EXMPL" href="../../install.112/e24501/toc.htm"><span class="italic">Oracle Database Examples Installation Guide</span></a>). After the installation, this wizard is in <a id="sthref167"></a>the following <code>.jar</code> file (assuming the default Spatial and Graph installation directory of <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md</code>):</p>
<pre>
$ORACLE_HOME/md/demo/georaster/etl/georaster_etl.jar
</pre>
<p>The <code>$ORACLE_HOME/md/demo/georaster/etl/README</code> file describes how to set up GDAL and launch the wizard.</p>
<p>The <code>$ORACLE_HOME/md/demo/georaster/etl/georaster_etl_user_guide.pdf</code> file describes the usage in detail.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDBEFHC"></a>
<div id="GEORS951" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.15</span> <a id="sthref168"></a><a id="sthref169"></a><a id="sthref170"></a>GeoRaster PL/SQL and Java Demo Files</h2>
<p>GeoRaster includes several PL/SQL and Java demo files that show common operations. If you installed the demo files from the Oracle Database Examples media (see <a class="olink EXMPL" href="../../install.112/e24501/toc.htm"><span class="italic">Oracle Database Examples Installation Guide</span></a>), these files are in the following directories under the Spatial installation directory (which by default is <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md</code>):</p>
<pre>
/demo/georaster/plsql
/demo/georaster/java
</pre>
<p>The PL/SQL examples demonstrate basic operations using the GeoRaster PL/SQL API to initialize, import, insert, delete, query, process, update, and export GeoRaster objects.</p>
<p><a id="sthref171"></a><a id="sthref172"></a>The Java examples demonstrate how to use the GeoRaster Java API to develop GeoRaster ETL (extract, transform, load) tools and applications.</p>
</div>
<!-- class="sect1" -->
<a id="CHDDDFJG"></a>
<div id="GEORS952" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.16</span> README File for Spatial and Related Features</h2>
<p><a id="sthref173"></a>A <code>README.txt</code> file supplements the information in the following manuals: <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>, <span class="italic">Oracle Spatial GeoRaster Developer's Guide</span> (this manual), and <a class="olink TOPOL" href="../e11831/toc.htm"><span class="italic">Oracle Spatial Topology and Network Data Models Developer's Guide</span></a>. This file is located at:</p>
<pre>
<span class="italic">$ORACLE_HOME</span>/md/doc/README.txt
</pre>
<p>For GeoRaster, see also the <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md/demo/georaster/java/README</code> file.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1050">
<tr>
<td class="cellalignment1057">
<table class="cellalignment1055">
<tr>
<td class="cellalignment1054"><a href="geor_newfeat.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1054"><a href="geor_datatypes_metadata.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1059">
<table class="cellalignment1053">
<tr>
<td class="cellalignment1054"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1054"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1054"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1054"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1054"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1054"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
