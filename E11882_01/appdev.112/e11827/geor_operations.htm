<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>GeoRaster Operations</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information for the GeoRaster feature of Oracle Spatial and Graph, which lets you store, index, query, analyze, and deliver raster data (raster image and gridded data and its associated metadata)." />
<meta name="dcterms.created" content="2013-11-18T18:24:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial GeoRaster Developer's Guide" />
<meta name="dcterms.identifier" content="E11827-09" />
<meta name="dcterms.isVersionOf" content="GEORS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="geor_datatypes_metadata.htm" title="Previous" type="text/html" />
<link rel="Next" href="geor_ref.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11827.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/15</span> <!-- End Header -->
<div id="GEORS300" class="chapter"><a id="CIHGCJJE"></a>
<h1 class="chapter"><span class="secnum">3</span> GeoRaster Operations</h1>
<p>This chapter describes how to perform the main kinds of GeoRaster operations. A typical GeoRaster workflow consists of most or all of the following steps:</p>
<ol>
<li>
<p>Create the GeoRaster table and raster data table (see <a href="#CIHCHDFF">Section 3.1</a>).</p>
</li>
<li>
<p>Initialize or create GeoRaster objects (see <a href="#CIHBBCEI">Section 3.2</a>).</p>
</li>
<li>
<p>Load raster imagery or grids (see <a href="#CIHFJFFJ">Section 3.3</a>).</p>
</li>
<li>
<p>Validate GeoRaster objects, if they have not already been validated (see <a href="#CIHDGGCG">Section 3.4</a>).</p>
</li>
<li>
<p>Georeference the GeoRaster objects, if necessary (see <a href="#CIHIGBAA">Section 3.5</a>).</p>
</li>
<li>
<p>Set the spatial extents of the GeoRaster objects (see <a href="#CIHGGAIG">Section 3.6</a>).</p>
</li>
<li>
<p>Create spatial indexes or other indexes, or both (see <a href="#CIHEHBJB">Section 3.7</a>).</p>
</li>
<li>
<p>Change and optimize the GeoRaster storage format, if necessary (see <a href="#CIHFCAEG">Section 3.8</a>).</p>
</li>
<li>
<p>Copy GeoRaster objects (see <a href="#CIHHHCCC">Section 3.9</a>).</p>
</li>
<li>
<p>Query and update the GeoRaster metadata (see <a href="#CIHCIEID">Section 3.10</a>).</p>
</li>
<li>
<p>Query and update cell data (see <a href="#CIHIICDF">Section 3.11</a>).</p>
</li>
<li>
<p>Process GeoRaster objects (see <a href="#CIHJJHEI">Section 3.12</a>).</p>
</li>
<li>
<p>Compress GeoRaster objects, if appropriate (see <a href="#CIHHGCCE">Section 3.13</a>).</p>
</li>
<li>
<p>View GeoRaster objects (see <a href="#CIHIEIDE">Section 3.14</a>).</p>
</li>
<li>
<p>Export GeoRaster objects (see <a href="#CIHJEEEA">Section 3.15</a>).</p>
</li>
<li>
<p>Update GeoRaster objects before committing the transaction (see <a href="#CIHBFGDB">Section 3.16</a>).</p>
</li>
<li>
<p>Use template-related subprograms to develop GeoRaster applications (see <a href="#CHDIGJDE">Section 3.17</a>).</p>
</li>
<li>
<p>Use GeoRaster with Workspace Manager and Label Security (see <a href="#CHDEFJAB">Section 3.18</a>).</p>
</li>
<li>
<p>Maintain efficient tablespace use by GeoRaster objects (see <a href="#CHDDJBHE">Section 3.19</a>).</p>
</li>
<li>
<p>Maintain GeoRaster objects and system data in the database (see <a href="#CHDEEBDE">Section 3.20</a>).</p>
</li>
<li>
<p>Transfer GeoRaster data between databases (see <a href="#CIHECFGC">Section 3.21</a>).</p>
</li>
<li>
<p>Use the Oracle Database transportable tablespaces feature with GeoRaster data (see <a href="#CHDGEGHB">Section 3.22</a>).</p>
</li>
</ol>
<p>After you create the GeoRaster objects, load the data, and validate the GeoRaster objects, you can perform the remaining operations in any order, depending on your application needs. You may also be able to skip certain operations.</p>
<p>Some operations can be performed using SQL, and some operations must be performed using PL/SQL blocks. You must update the GeoRaster object after you delete or edit the metadata or cell data of the GeoRaster object and before you commit the changes (see <a href="#CIHBFGDB">Section 3.16</a>). For some examples of these operations, see the demo files described in <a href="geor_intro.htm#CHDBEFHC">Section 1.15</a> and the examples in <a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>.</p>
<p>This chapter contains the sections that explain the main kinds of GeoRaster operations.</p>
<p>Subsequent chapters contain detailed reference information about the SDO_GEOR, SDO_GEOR_ADMIN, and SDO_GEOR_UTL packages, which contains subprograms (functions and procedures) to work with GeoRaster data and metadata.</p>
<a id="CIHCHDFF"></a>
<div id="GEORS986" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.1</span> <a id="sthref273"></a><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a>Creating the GeoRaster Table and Raster Data Tables</h2>
<p>Before you can work with GeoRaster objects, you must create a GeoRaster table and one or more raster data tables, if they do not already exist.</p>
<a id="CHDCGGHE"></a>
<div id="GEORS987" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.1.1</span> Creating a GeoRaster Table</h3>
<p>A GeoRaster table is any table that includes a column of type SDO_GEORASTER. This column can be an attribute column of another user-defined object type. <a href="#CHDEJAIF">Example 3-1</a> creates a GeoRaster table named CITY_IMAGES, which contains a column named IMAGE for storing GeoRaster objects.</p>
<div id="GEORS988" class="example">
<p class="titleinexample"><a id="CHDEJAIF"></a>Example 3-1 Creating a GeoRaster Table for City Images</p>
<pre>
CREATE TABLE city_images (image_id NUMBER PRIMARY KEY, image_description VARCHAR2(50), image SDO_GEORASTER);
</pre></div>
<!-- class="example" -->
<p>For more information about GeoRaster tables, see <a href="geor_intro.htm#CHDHHBAH">Section 1.4</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGHAIH"></a>
<div id="GEORS989" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.1.2</span> Creating Raster Data Tables</h3>
<p><a id="sthref277"></a><a id="sthref278"></a>After creating a GeoRaster table, you should create one or more raster data tables (RDTs) to be used with the objects in the GeoRaster table. You can create a raster data table using the original LOB storage paradigm BasicFile Lobs (BasicFiles) or using the LOB storage format SecureFile LOBs (SecureFiles) introduced in Release 11.1. Using SecureFiles significantly improves the performance of GeoRaster operations.</p>
<p><a href="#CHDBJEEF">Example 3-2</a> creates a raster data table named CITY_IMAGES_RDT using BasicFiles. The RDT will be used to store information about each block of each GeoRaster object in the CITY_IMAGES table. (The association between a GeoRaster table and a raster table is not made until you create a GeoRaster object, as explained in <a href="#CIHBBCEI">Section 3.2</a>.)</p>
<div id="GEORS990" class="example">
<p class="titleinexample"><a id="CHDBJEEF"></a>Example 3-2 Creating a Raster Data Table Using BasicFiles</p>
<pre>
CREATE TABLE city_images_rdt OF SDO_RASTER
  (PRIMARY KEY (rasterID, pyramidLevel, bandBlockNumber,
    rowBlockNumber, columnBlockNumber))
  TABLESPACE im_tbs_1
  LOB(rasterBlock) STORE AS 
    (
     CHUNK 32768
     CACHE READS
     PCTVERSION 0
     STORAGE (PCTINCREASE 0)
    );
</pre></div>
<!-- class="example" -->
<p><a href="#CHDEEBGE">Example 3-3</a> creates a raster data table with the same name as in <a href="#CHDBJEEF">Example 3-2</a>, but using SecureFiles.</p>
<div id="GEORS991" class="example">
<p class="titleinexample"><a id="CHDEEBGE"></a>Example 3-3 Creating a Raster Data Table Using SecureFiles</p>
<pre>
CREATE TABLE city_images_rdt OF SDO_RASTER
  (PRIMARY KEY (rasterID, pyramidLevel, bandBlockNumber,
    rowBlockNumber, columnBlockNumber))
  TABLESPACE im_tbs_2
  LOB(rasterBlock) STORE AS SECUREFILE 
    (CACHE);
</pre></div>
<!-- class="example" -->
<p><a href="#CHDCEIAC">Example 3-4</a> creates a raster data table with the same name as in <a href="#CHDBJEEF">Example 3-2</a> and <a href="#CHDEEBGE">Example 3-3</a>, also using SecureFiles as in <a href="#CHDEEBGE">Example 3-3</a>, but creating it as a relational table instead of an object table.</p>
<div class="example">
<p class="titleinexample"><a id="CHDCEIAC"></a>Example 3-4 Creating a Raster Data Table (Relational) Using SecureFiles</p>
<pre>
CREATE TABLE city_images_rdt
  (rasterID NUMBER,
  pyramidLevel NUMBER,
  bandBlockNumber NUMBER,
  rowBlockNumber NUMBER,
  columnBlockNumber NUMBER,
  blockMBR SDO_GEOMETRY,
  rasterBlock BLOB,
  CONSTRAINT pkey PRIMARY KEY (rasterId, pyramidLevel, bandBlockNumber,
    rowBlockNumber, columnBlockNumber))
  LOB (rasterblock) STORE AS SECUREFILE(cache);
</pre></div>
<!-- class="example" -->
<p>The CREATE TABLE statement for a raster data table must include the following clause (which is included in the preceding examples):</p>
<pre>
  (PRIMARY KEY (rasterID, pyramidLevel, bandBlockNumber,
    rowBlockNumber, columnBlockNumber))
</pre>
<p>This PRIMARY KEY clause creates a B-tree index on the raster data table, and this index is essential for optimal query performance.</p>
<p>When you use BasicFiles, you can specify a larger CHUNK size (16 or 32 KB) for the LOB storage to improve performance. With SecureFiles, there is no need to specify the CHUNK size parameter, and there are few other storage parameters to consider. Raster data tables using SecureFile LOBs must be created in a tablespace with the automatic segment space management option. For information about using Oracle SecureFiles and performance considerations for BasicFile LOBs, see <a class="olink ADLOB" href="../e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a>.</p>
<p>For reference information about creating tables, including specifying LOB storage, see the section about the CREATE TABLE statement in <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For more information about the keywords and options when creating a raster data table, see <a href="geor_intro.htm#CHDFEAAC">Section 1.4.2</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFIJHI"></a>
<div id="GEORS992" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.1.3</span> <a id="sthref279"></a><a id="sthref280"></a>GeoRaster DML Trigger</h3>
<p>To ensure the consistency and integrity of internal GeoRaster tables and data structures, GeoRaster automatically creates a unique DML trigger for each GeoRaster column whenever a user creates a GeoRaster table (that is, a table with at least one GeoRaster column), with the following exception: if you use the ALTER TABLE statement to add one or more GeoRaster columns, you must call the <a href="geor_util_ref.htm#CHEDAGGC">SDO_GEOR_UTL.createDMLTrigger</a> procedure to create the DML trigger on each added GeoRaster column.</p>
<p>The trigger is fired after each of the following data manipulation language (DML) operations affecting a GeoRaster object: insertion of a row, update of a GeoRaster object, and deletion of a row.</p>
<p>GeoRaster automatically performs the following actions when the trigger is fired:</p>
<ul>
<li>
<p>After an insert operation, the trigger inserts a row with the GeoRaster table name, GeoRaster column name, raster data table name, and <code>rasterID</code> value into the USER_SDO_GEOR_SYSDATA view (described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>). If an identical entry already exists, an exception is raised.</p>
</li>
<li>
<p>After an update operation, if the new GeoRaster object is null or empty, the trigger deletes the old GeoRaster object. If there is no entry in the USER_SDO_GEOR_SYSDATA view for the old GeoRaster object (that is, if the old GeoRaster object is null), the trigger inserts a row into that view for the new GeoRaster object. If there is an entry in the USER_SDO_GEOR_SYSDATA view for the old GeoRaster object, the trigger updates the information to reflect the new GeoRaster object.</p>
</li>
<li>
<p>After a delete operation, the trigger deletes raster data blocks for the GeoRaster object in its raster data table, and it deletes the row in the USER_SDO_GEOR_SYSDATA view for the GeoRaster object.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBBCEI"></a>
<div id="GEORS993" class="sect1">
<h2 class="sect1"><span class="secnum">3.2</span> <a id="sthref281"></a>Creating New GeoRaster Objects</h2>
<p>Before you can store a GeoRaster image in a GeoRaster table, you must create the GeoRaster object and insert it into a GeoRaster table before you start working on it. To create a new GeoRaster object, you have the following options:</p>
<ul>
<li>
<p>Initialize an empty GeoRaster object, using the <a href="geor_ref.htm#CHEBCACB">SDO_GEOR.init</a> function.</p>
</li>
<li>
<p>Create a blank GeoRaster object, using the <a href="geor_ref.htm#CHEFDECA">SDO_GEOR.createBlank</a> function.</p>
</li>
</ul>
<p>You cannot perform any GeoRaster operations if the object has not been properly created (that is, if the object is an atomic null). The <a href="geor_ref.htm#CHEBCACB">SDO_GEOR.init</a> and <a href="geor_ref.htm#CHEFDECA">SDO_GEOR.createBlank</a> functions initialize GeoRaster objects with their raster data table and raster ID values if these are not already specified, and the GeoRaster DML trigger ensures that the raster data table name and raster ID value pair is unique for the current user.</p>
<p>If the new GeoRaster object will hold raster cell data (resulting from another GeoRaster procedure, such as <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a>, <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>, or <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a>), and if the raster data table for this new GeoRaster object does not exist, you must first create the raster data table. For information about creating a raster data table, including examples, see <a href="#CHDGHAIH">Section 3.1.2</a>.</p>
<p><a id="sthref282"></a><a id="sthref283"></a>To avoid potential GeoRaster data problems (some of which are described in <a href="#CHDEEBDE">Section 3.20</a>), an initialized GeoRaster object must be <span class="bold">registered</span> in the GeoRaster system views, which is done automatically when you insert the GeoRaster object into a GeoRaster table. This should be done before you perform any other operations on the GeoRaster object. Any GeoRaster operations that need to manipulate the raster data table raise an exception if the source or target GeoRaster object is not registered.</p>
</div>
<!-- class="sect1" -->
<a id="CIHFJFFJ"></a>
<div id="GEORS994" class="sect1">
<h2 class="sect1"><span class="secnum">3.3</span> <a id="sthref284"></a><a id="sthref285"></a>Loading Raster Data</h2>
<p>To load and export imagery or raster data, always consider third-party ETL tools (see the note in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>)</p>
<p>If you use features in GeoRaster to load raster data, you have the following options:</p>
<ul>
<li>
<p>Call the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure to load images into GeoRaster objects.</p>
</li>
<li>
<p>Use the GeoRaster loader tool or viewer tool, which are described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>.</p>
</li>
</ul>
<p>With both options, you can do the following:</p>
<ul>
<li>
<p>Compress raster data and store the data in JPEG-compressed or DEFLATE-compressed GeoRaster objects.</p>
</li>
<li>
<p>Load an ESRI world file or a Digital Globe RPC text file (.rpb) into an existing GeoRaster object, and georeference the raster data without reloading it. You can also specify an SRID with the world file and generate the spatial extent of the data.</p>
</li>
<li>
<p>Load a GeoTIFF format file with georeferencing, with or without raster data.</p>
</li>
</ul>
<p>After loading raster data into a GeoRaster object, you must ensure that the object is valid by calling the <a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> function, as explained in <a href="#CIHDGGCG">Section 3.4</a>.</p>
<p>Because an ESRI world file or .<code>rpb</code> file does not contain coordinate system information, you can specify the SRID value of a coordinate reference system for the load operation. However, if you do not specify an SRID, the model SRID of the GeoRaster objects is set to 0 (zero) by the loader, which means that the GeoRaster object is invalid, and therefore you must use the <a href="geor_ref.htm#CHEFJEFG">SDO_GEOR.setModelSRID</a> procedure to specify a valid model space for this object. If you do not yet know the coordinate system of the model space, <a id="sthref286"></a><a id="sthref287"></a>you can specify the SRID value as 999999, which means that the coordinate reference system is unknown. (Specifically, SRID 999999 is associated with a coordinate reference system named <code>unknown CRS</code>.) Later, when you know the actual coordinate reference system of the model space, you can set the SRID value accordingly.</p>
<p>For more information about the <code>unknown CRS</code> (SRID 999999) coordinate reference system, see <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
<a id="CHDIGEHG"></a>
<div id="GEORS995" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.3.1</span> Reformatting the Source Raster Before Loading</h3>
<p>The GeoRaster loader does not support source raster files in BSQ interleaving, and it might raise an "insufficient memory" error if the files are too big, and it might have other restrictions. To avoid such problems, you can reformat and reblock the source files so that they can be properly loaded.</p>
<p>As an example, one way to do this is to use GDAL, an Open Source raster transformation library available from <code><a href="http://www.gdal.org">http://www.gdal.org</a></code>, to reformat or reblock the image or raster file so that JAI (Java Advanced Imaging) can handle it. GDAL supports GeoRaster natively and can import and export GeoRaster objects directly, and can also process GeoRaster objects; for more information, see <code><a href="http://www.oracle.com/technetwork/database/enterprise-edition/getting-started-with-gdal-133874.pdf">http://www.oracle.com/technetwork/database/enterprise-edition/getting-started-with-gdal-133874.pdf</a></code>. You can also use GDAL to generate TFW files. For example, execute commands such as the following two (each command on a single line) using the GDAL command line or (for batch conversion) shell:</p>
<pre>
gdal_translate -of GTiff -co "TFW=YES" -co "INTERLEAVE=PIXEL" -co "TILED=YES" D:\my_image.tif D:\my_new_image.tif
 
gdal_translate -of GTiff -co "TILED=YES" -co "TFW=YES" D:\my_image.ecw D:\my_new_image.tif
</pre>
<p>In the preceding example, the first command generates a TFW file, changes the interleaving to BIP (which is supported by JAI), and reblocks the image to 256x256. The second command converts ECW to TIFF, generates TFW, and reblocks the image.</p>
<p>Then use the GeoRaster loader tool (described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>) , specifying reblocking so that the image can be loaded successfully and later retrieved from the database efficiently, as in the following example (a single command):</p>
<pre>
java -Xmx1024m oracle.spatial.georaster.tools.GeoRasterLoader mymachine db11 6521 georaster georaster thin 32 T globe image "blocking=true, blocksize=(512,512,3)" "D:my_image.tif,2,RDT_15, D:\my_image.tfw,82213"
</pre>
<p>If you receive an "insufficient memory" error when calling <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> to load a very large image, try loading the image with a different blocking size parameter or reblock the image into smaller internal tile sizes using GDAL before loading. For extremely large images, you can also use GDAL to tile the image into multiple smaller image files with sizes that JAI can handle, or you use GDAL to load and export the images directly.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDGGCG"></a>
<div id="GEORS996" class="sect1">
<h2 class="sect1"><span class="secnum">3.4</span> <a id="sthref288"></a><a id="sthref289"></a>Validating GeoRaster Objects</h2>
<p>Before you use a GeoRaster object or after you manually edit the raster data and metadata of a GeoRaster object, you should ensure that the object is valid. Validation for a GeoRaster object includes checking the registration of the GeoRaster object, checking the metadata and the raster cell data, and making sure that the metadata and data are consistent. For example, validation checks the raster type, dimension information, and the actual sizes of cell blocks, and it performs other checks.</p>
<p>If you used the GeoRaster loader tool described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>, the GeoRaster objects were validated during the load operation.</p>
<p>GeoRaster provides the following validation subprograms:</p>
<ul>
<li>
<p><a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> validates the GeoRaster object, including cell data and metadata. It returns <code>TRUE</code> if the object is valid; otherwise, it returns one of the following: an Oracle error code indicating why the GeoRaster object is invalid, <code>FALSE</code> if validation fails for an unknown reason, or <code>NULL</code> if the GeoRaster object is null. You should always use this function after you create a GeoRaster object.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEBHBAG">SDO_GEOR.schemaValidate</a> validates the metadata against the GeoRaster XML schema. You can use this function to locate errors if the <a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> function returned the error code 13454. The <a href="geor_ref.htm#CHEBHBAG">SDO_GEOR.schemaValidate</a> and <a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> functions do not validate the spatial extent geometry.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEFADBE">SDO_GEOR.validateBlockMBR</a> validates the <code>blockMBR</code> geometry associated with each raster block stored in the raster data table. If there are any invalid <code>blockMBR</code> geometries, call the <a href="geor_ref.htm#CHEGJGCE">SDO_GEOR.generateBlockMBR</a> procedure to regenerate them.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHIGBAA"></a>
<div id="GEORS997" class="sect1">
<h2 class="sect1"><span class="secnum">3.5</span> <a id="sthref290"></a><a id="sthref291"></a>Georeferencing GeoRaster Objects</h2>
<p>Georeferencing, as explained in <a href="geor_intro.htm#CHDGCAIA">Section 1.6</a>, establishes the relationship between cell coordinates of GeoRaster data and real-world ground coordinates (or some local coordinates). If you need to georeference GeoRaster objects, the following approaches are available:</p>
<ul>
<li>
<p>If the original image is already georeferenced and if the georeferencing information is stored in an ESRI world file or .<code>rpb</code> file containing RPC coefficients you can use the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure to load an ESRI world file or .<code>rpb</code> file from a file or from a CLOB object, along with the image data itself (in either FILE or BLOB format). You can also use the GeoRaster client-side loader tool (described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>) to load an ESRI world file or .<code>rpb</code> file from a file, along with the image file itself.</p>
<p>Because an ESRI world file or .<code>rpb</code> file does not specify the model coordinate system, you can set the model space of the georeferenced GeoRaster object using an Oracle SRID in either of the following ways: specify the SRID along with the world file as a parameter to the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure or the GeoRaster client-side loader (described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>); or, after loading the world file, call the <a href="geor_ref.htm#CHEFJEFG">SDO_GEOR.setModelSRID</a> procedure. You can also call the <a href="geor_ref.htm#CHEFJEFG">SDO_GEOR.setModelSRID</a> procedure to change the model space of a georeferenced GeoRaster object.</p>
</li>
<li>
<p>If the original image is a georeferenced GeoTIFF image, you can use the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure to load the image with georeferencing, by specifying <code>GEOTIFF</code> as the input format. To load only the georeferencing information from a GeoTIFF image, without the raster image data, into an existing GeoRaster object, add the <code>raster=false</code> storage parameter. You can specify a backup SRID with the <code>srid</code> storage parameter, in case the GeoTIFF configuration values do not match any SRID recognized by Oracle Spatial.</p>
<p>The GeoTIFF <code>PixelIsArea</code> raster space is equivalent to the GeoRaster upperleft-based cell coordinate system. An export to GeoTiff is always in <code>PixelIsArea</code> raster space, with a half-pixel adjustment of the affine transformation if the GeoRaster object is in center-based cell coordinate system. An import from GeoTIFF is always to the GeoRaster center-based cell coordinate system, with a half-pixel adjustment of the affine transformation if the GeoTIFF file is specified in <code>PixelIsArea</code> raster space.</p>
<p>You can also use the GeoRaster client-side loader tool (described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>) to load GeoTIFF images with georeferencing, using the storage parameter <code>geotiff=true</code>. If you omit this parameter or specify <code>geotiff=false</code>, the image is loaded as a simple TIFF image without georeferencing. The <code>raster</code> and <code>srid</code> storage parameters also apply to the client-side loader tool.</p>
<p>To load or export GeoTIFF images with the GeoRaster client-side tools, add the following GeoTIFF libraries to your CLASSPATH definition:</p>
<ul>
<li>
<p><code>xtiff-jai.jar</code> (available from the SourceForge Extensible-TIFF-JAI group)</p>
</li>
<li>
<p><code>geotiff-jai.jar</code> (available from the SourceForge GeoTIFF-JAI group)</p>
</li>
</ul>
<p><a id="sthref292"></a><a id="sthref293"></a>To load or export GeoTIFF images with the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> or <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure, load these libraries into the MDSYS schema by connecting to the database as the SYSTEM user, editing <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md/admin/sdoldgtf.sql</code> as needed to reflect the paths to the <code>xtiff-jai.jar</code> and <code>geotiff-jai.jar</code> files, and running the <code>sdoldgtf.sql</code> SQL*Plus script. As an alternative to using the <code>sdoldgtf.sql</code> script, you can enter the following commands:</p>
<pre>
loadjava -user system/<span class="italic">password@database</span> -resolve -force -synonym -schema MDSYS -grant PUBLIC xtiff-jai.jar

loadjava -user system/<span class="italic">password@database</span> -resolve -force -synonym -schema MDSYS -grant PUBLIC geotiff-jai.jar
</pre>
<p>If the database is downgraded to a release before Oracle Database 11<span class="italic">g</span>, these libraries should be uninstalled according to the script in <code><span class="codeinlineitalic">$ORACLE_HOME</span></code><code>/md/admin/sdormgtf.sql</code>, editing it as needed to reflect the paths to the <code>xtiff-jai.jar</code> and <code>geotiff-jai.jar</code> files, and either running the <code>sdormgtf.sql</code> script or entering the following commands:</p>
<pre>
dropjava -user system/<span class="italic">password@database</span> -resolve -force -synonym -schema MDSYS -grant PUBLIC xtiff-jai.jar

dropjava -user system/<span class="italic">password@database</span> -resolve -force -synonym -schema MDSYS -grant PUBLIC geotiff-jai.jar
</pre></li>
<li>
<p>You can use the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure to add, modify, and delete georeferencing information by directly accessing the GeoRaster SRS metadata. For example, you can create an SDO_GEOR_SRS object and assign the coefficients and related georeferencing information, and then call the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure to add or update the spatial reference information of any GeoRaster object. You can use the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure to set up the spatial reference information for all supported functional fitting georeferencing models. Examples of setting up the SRS information from an existing DLT model and from an existing RPC model are included in reference section for the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure.</p>
<p>If you know that one GeoRaster object has the same SRS information as another GeoRaster object, you can call the <a href="geor_ref.htm#CHEGGDIF">SDO_GEOR.getSRS</a> function to retrieve an SDO_GEOR_SRS object from this GeoRaster object, and then call the <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> procedure to georeference the first GeoRaster object.</p>
</li>
<li>
<p>If the GeoRaster object can be georeferenced using an affine transformation, you can call the <a href="geor_ref.htm#CHEFIFIA">SDO_GEOR.georeference</a> procedure to georeference a GeoRaster object directly. As described in the reference information for the <a href="geor_ref.htm#CHEFIFIA">SDO_GEOR.georeference</a>, this procedure takes the coefficients <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, <code>E</code>, <code>F</code> and other information, converts them into the coefficients <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>e</code>, <code>f</code>, and stores them in the spatial reference information of a GeoRaster object. If the original raster data is rectified and if the model coordinate of its origin (upper-left corner) is (x0, y0) and its spatial resolution or scale is <code>s</code>, then the following are true: A = s, B = 0, C = x0, D = 0, E = -s, F = y0.</p>
</li>
<li>
<p>If you have ground control points (GCPs) and want to calculate georeferencing information using a geometric model, you can call the <a href="geor_ref.htm#CHEFIFIA">SDO_GEOR.georeference</a> procedure to find the solution. To get and set the GCP-based georeferencing model, use the <a href="geor_ref.htm#CACEBIJH">SDO_GEOR.getGCPGeorefModel</a> function and the <a href="geor_ref.htm#CACEHCGE">SDO_GEOR.setGCPGeorefModel</a> procedure. To get and set only the geometric model, use the <a href="geor_ref.htm#CACEAFFE">SDO_GEOR.getGCPGeorefMethod</a> function and the <a href="geor_ref.htm#CACJHHDI">SDO_GEOR.setGCPGeorefMethod</a> procedure. To manipulate GCPs, use the <a href="geor_ref.htm#CACEFHAI">SDO_GEOR.getControlPoint</a> function and the <a href="geor_ref.htm#CACHDHEC">SDO_GEOR.setControlPoint</a> and <a href="geor_ref.htm#CACGIJJG">SDO_GEOR.deleteControlPoint</a> procedures.</p>
</li>
</ul>
<p><a id="sthref294"></a><a id="sthref295"></a>Based on the SRS information of a georeferenced GeoRaster object, transforming GeoRaster coordinate information means finding the model (ground) coordinate associated with a specific cell (raster) coordinate, and the reverse. That is, you can do the following:</p>
<ul>
<li>
<p>Given a specific cell coordinate, you can find the associated model space coordinate using the <a href="geor_ref.htm#CHEGGJBA">SDO_GEOR.getModelCoordinate</a> function. For example, if you identify a point in an image, you can find the longitude and latitude coordinates associated with that point.</p>
</li>
<li>
<p>Given a model space coordinate, you can find the associated cell coordinate using the <a href="geor_ref.htm#CHEFAGJE">SDO_GEOR.getCellCoordinate</a> function. For example, if you identify longitude and latitude coordinates, you can find the cell in an image associated with those coordinates.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHGGAIG"></a>
<div id="GEORS998" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.6</span> <a id="sthref296"></a><a id="sthref297"></a>Generating and Setting Spatial Extents</h2>
<p>When a GeoRaster object is created, its spatial extent (<code>spatialExtent</code> attribute, described in <a href="geor_datatypes_metadata.htm#BGBCHJDG">Section 2.1.2</a>) is not necessarily the enclosing geometry in its model space coordinate system. The spatial extent (footprint) geometry might initially be null, or it might reflect the cell space coordinate system or some other coordinate system. The ability to generate and set spatial extents is useful for building large GeoRaster databases of a global or large regional scope, in which the spatial extents are in one global geodetic coordinate system while the GeoRaster objects (imagery, DEMs, and so on) are in different projected coordinate systems. In such a case, you can create a spatial (R-tree) index on the spatial extents, which requires that all spatial extent geometries have the same SRID value.</p>
<p>To ensure that the spatial extent geometry of each GeoRaster object in a table is correct for its model space coordinate system (or for any other coordinate system that you may want to use), you must set the spatial extent. Moreover, to use a spatial index on the spatial extent geometries (described in <a href="#CIHEHBJB">Section 3.7</a>), all indexed geometries must be based on the same coordinate system (that is, have the same SRID value).</p>
<p>You can set the spatial extent in either of the following ways: specify <code>spatialExtent=TRUE</code> as a storage parameter to the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure or the GeoRaster client-side loader (described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>), or use the SQL UPDATE statement. If you use the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure or the loader, the SRID cannot be null or 0 (zero), and if there is an R-tree index on the GeoRaster spatial extent, the SRID of the spatial extent must match the SRID of the existing spatial index; otherwise, the spatial extent is set to a null value.</p>
<p>In addition, if you do not already have the spatial extent geometry, you can generate it using the <a href="geor_ref.htm#CHEGDBJC">SDO_GEOR.generateSpatialExtent</a> function, and use that geometry to update the GeoRaster object. The following example updates the spatial extent geometry of a specified GeoRaster object in the CITY_IMAGES table (created in <a href="#CHDEJAIF">Example 3-1</a> in <a href="#CHDCGGHE">Section 3.1.1</a>) to the generated spatial extent (reflecting the model coordinate system) of that object:</p>
<pre>
UPDATE city_images c
  SET c.image.spatialExtent = sdo_geor.generateSpatialExtent(image)
    WHERE c.image_id = 100;
COMMIT;
</pre>
<p>If you already know the spatial extent geometry for a GeoRaster object, or if you want the spatial extent geometry to be based on a coordinate system other than the one for the model space, construct the SDO_GEOMETRY object or select it from a table, and then update the GeoRaster object to set its spatial extent attribute to that geometry, as shown in the following example:</p>
<pre>
DECLARE
 geom sdo_geometry;
BEGIN
-- Set geom to an SDO_GEOMETRY object that covers the spatial extent
-- of the desired GeoRaster object. If necessary, perform coordinate
-- system transformation before setting geom.
-- geom := sdo_geometry(...);
  UPDATE city_images c
    SET c.image.spatialExtent = geom WHERE c.image_id = 100;
  COMMIT;
END;
</pre>
<a id="CHDFGCFC"></a>
<div id="GEORS1194" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.6.1</span> Special Considerations if the GeoRaster Table Has a Spatial Index</h3>
<p>If you create a spatial R-tree index on the GeoRaster spatial extents (as described in <a href="#CIHEHBJB">Section 3.7</a>), all spatial extent geometries must have the same SRID value. However, the GeoRaster objects may have different model SRIDs, and most GeoRaster operations automatically generate a spatial extent for the output GeoRaster objects based on the model SRID of the source GeoRaster object or objects. This can cause problems when the resulting GeoRaster object with a spatial extent is updated into a GeoRaster table, which might already have a spatial index built on its <code>spatialExtent</code> attribute but using a different SRID.</p>
<p>In such cases, you must transform the spatial extent to the same SRID as that of the spatial index before the insert or update operation. The following example performs a mosaic operation, but then transforms the spatial extent of the resulting GeoRaster object to SRID 8307 before updating the GeoRaster table with that object.</p>
<pre>
DECLARE
  gr sdo_georaster;
BEGIN
  SELECT georaster INTO gr FROM mosaic_test WHERE georid=1 FOR UPDATE;
  sdo_geor.mosaic('mosaic_data', 'georaster', gr, 'blocksize=(512,512)');
  -- Transform the spatial extent geometry, if ncessary.
  -- In this example example, the modelSRID of the mosaic is 27302,
  -- but the SRID of the spatial index on mosaic_test is 8307.
  <span class="bold">gr.spatialExtent := sdo_cs.transform(gr.spatialExtent, 8307);</span>
  UPDATE mosaic_test SET georaster=gr WHERE georid=1;
END;
/
</pre>
<p>If a spatial R-tree index exists, a commit operation after an insert or update operation causes the index to be updated if the inserted or updated GeoRaster object has a spatial extent geometry. This could slow some operations if you perform a commit after each operation, particularly for batch jobs such as batch image loading. It is usually more efficient to balance the performance of index updates with GeoRaster operations, and to commit only in batches after the operations.</p>
<p>For example, image data loading (the <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a> procedure and the GeoRaster loader) is followed by an internal commit operation, so it would be inefficient to load while generating spatial extents by specifying <code>spatialExtent=TRUE</code>. Instead, you should probably specify <code>spatialExtent=FALSE</code>, and then update the <code>spatialExtent</code> attribute afterward, to speed the loading process.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEHBJB"></a>
<div id="GEORS999" class="sect1">
<h2 class="sect1"><span class="secnum">3.7</span> <a id="sthref298"></a><a id="sthref299"></a>Indexing GeoRaster Data</h2>
<p>GeoRaster data can be indexed in various ways. The most important index you can create on a GeoRaster object is a spatial index on the spatial extent (footprint) geometry of the GeoRaster object (<code>spatialExtent</code> attribute, described in <a href="geor_datatypes_metadata.htm#BGBCHJDG">Section 2.1.2</a>); however, see <a href="#CHDFGCFC">Section 3.6.1</a> for special considerations if the GeoRaster table has a spatial index. For information about creating spatial indexes, see <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
<p>You can also create one or more other indexes, such as:</p>
<ul>
<li>
<p>Function-based indexes on metadata objects using the Oracle XMLType or Oracle Text document indexing functionality</p>
</li>
<li>
<p>Standard indexes on other user-defined columns of the GeoRaster table, such as cloud coverage, water coverage, or vegetation</p>
</li>
</ul>
<p>You should also create a single B-tree index on the <code>rasterId</code>, <code>pyramidLevel</code>, <code>bandBlockNumber</code>, <code>rowBlockNumber</code>, and <code>columnBlockNumber</code> columns of each raster data table.</p>
</div>
<!-- class="sect1" -->
<a id="CIHFCAEG"></a>
<div id="GEORS1000" class="sect1">
<h2 class="sect1"><span class="secnum">3.8</span> <a id="sthref300"></a><a id="sthref301"></a><a id="sthref302"></a><a id="sthref303"></a>Changing and Optimizing Raster Storage</h2>
<p>You can change or specify some aspects of the way raster image data is or will be stored: the raster blocking size, cell depth, interleaving type, and other aspects. To make such changes on an existing GeoRaster object, use the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure, and specify the desired storage parameter values with the <code>storageParam</code> parameter. You can specify storage parameters with most subprograms that load and process a GeoRaster object to create another GeoRaster object. That is, you can specify the output format when you call functions or procedures such as <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a>, <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, <a href="geor_ref.htm#CACGDJFA">SDO_GEOR.reproject</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, <a href="geor_ref.htm#CACCIGJA">SDO_GEOR.mergeLayers</a>, and <a href="geor_ref.htm#CACEDFBD">SDO_GEOR.createTemplate</a>.</p>
<p>The storageParam parameter for the resulting GeoRaster objects should be based on factors such as the data size, dimension sizes, and application needs, as you determine them. However, the block sizes can also be optimized automatically based on the dimension sizes of the GeoRaster object and the desired output required by users, so that each GeoRaster object uses only minimum padding space but still meets the application requirements.</p>
<p>For more information, see <a href="geor_intro.htm#CHDIJFCD">Section 1.4.1</a>, especially <a href="geor_intro.htm#CHDHJCBF">Table 1-1, "storageParam Keywords for Raster Data"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHHHCCC"></a>
<div id="GEORS1001" class="sect1">
<h2 class="sect1"><span class="secnum">3.9</span> <a id="sthref304"></a>Copying GeoRaster Objects</h2>
<p>To copy a GeoRaster object, you must either copy it into an empty GeoRaster object or overwrite an existing valid GeoRaster object. (Empty GeoRaster objects are explained in <a href="geor_intro.htm#CHDIHJJE">Section 1.4.3</a>.) To make an identical copy of the source GeoRaster object, use the <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a> procedure; to make a copy that includes storage format changes, use the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure (see <a href="#CIHFCAEG">Section 3.8</a>).</p>
<p>To copy a GeoRaster object using an empty GeoRaster object, follow these steps:</p>
<ol>
<li>
<p>Initialize an empty GeoRaster object while inserting it into the destination table, returning the empty GeoRaster object.</p>
</li>
<li>
<p>Use the <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a> or <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure to copy the GeoRaster object into the returned empty GeoRaster object.</p>
</li>
<li>
<p>Use UPDATE statement to update the desired row in the destination table so that its GeoRaster column contains the copied GeoRaster object.</p>
</li>
<li>
<p>When you are ready to commit the transaction, use the COMMIT statement.</p>
</li>
</ol>
<p>For an example of copying using an empty GeoRaster object, see the example for the <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a> procedure in<a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>.</p>
<p>To copy a GeoRaster object so that it overwrites (replaces) an existing GeoRaster object, follow these steps:</p>
<ol>
<li>
<p>Select the existing GeoRaster object for update.</p>
</li>
<li>
<p>Use the <a href="geor_ref.htm#CHEEICAF">SDO_GEOR.copy</a> or <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure to copy the selected GeoRaster object into either a valid existing GeoRaster object or an empty GeoRaster object.</p>
</li>
<li>
<p>Use UPDATE statement to update the desired row in the destination table so that its GeoRaster column contains the copied GeoRaster object.</p>
</li>
<li>
<p>When you are ready to commit the transaction, use the COMMIT statement.</p>
</li>
</ol>
<p>For an example of copying to replace an existing GeoRaster object and to change its storage format, see the example for the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure in<a href="geor_ref.htm#CHEEAJHB">Chapter 4</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHCIEID"></a>
<div id="GEORS1002" class="sect1">
<h2 class="sect1"><span class="secnum">3.10</span> <a id="sthref305"></a>Querying and Updating GeoRaster Metadata</h2>
<p>You can query metadata for a GeoRaster object, and you can update many attributes of the metadata.</p>
<p>You can use many functions, most of whose names start with <span class="italic">get</span>, to query the metadata and ancillary information (for example, <a href="geor_ref.htm#CHEFFBIE">SDO_GEOR.getTotalLayerNumber</a> and <a href="geor_ref.htm#CHEFGBEG">SDO_GEOR.hasPseudoColor</a>).</p>
<p>You can use several subprograms, most of whose names start with <span class="italic">set</span>, to update metadata and ancillary data (for example, <a href="geor_ref.htm#CHEFGCEE">SDO_GEOR.setSRS</a> and <a href="geor_ref.htm#CHEHBGCD">SDO_GEOR.setColorMap</a>).</p>
<p>For many of the <span class="italic">get</span> functions, there is a corresponding procedure, whose name starts with <span class="italic">set</span>, to set, modify, or delete the value of a metadata attribute. For most <span class="italic">set</span> procedures, to delete the value of the metadata attribute that the procedure is designed to modify, specify a null value for the attribute. For example, to delete the bin table for a layer of a GeoRaster object, call the <a href="geor_ref.htm#CHEEBAFF">SDO_GEOR.setBinTable</a> procedure and specify a null <code>tableName</code> parameter. However, in most cases you cannot specify a null value for other related attributes. For example, you cannot specify a null <code>layerNumber</code> parameter in a call to the <a href="geor_ref.htm#CHEEBAFF">SDO_GEOR.setBinTable</a> procedure.</p>
<p>Note the following recommendations, requirements, and restrictions:</p>
<ul>
<li>
<p>Most GeoRaster metadata can also be retrieved and modified using XMLType methods or XML-specific SQL functions, such as <code>extract</code> and <code>updateXML</code>. However, if a GeoRaster <span class="italic">get</span> or <span class="italic">set</span> subprogram exists for the metadata attribute you want to retrieve or change, use the GeoRaster subprogram instead of an XMLType interface, because the GeoRaster subprograms validate any changes before they are made. If you do call XMLType methods or XML-specific SQL functions to update metadata, you should validate the GeoRaster object before you commit the transaction.</p>
</li>
<li>
<p>Never directly set the metadata to be null.</p>
</li>
<li>
<p>Do not directly update the rasterType attribute of a GeoRaster object; instead, call the <a href="geor_ref.htm#CHEFAADE">SDO_GEOR.setRasterType</a> procedure.</p>
</li>
<li>
<p>To change the raster data table name, use the <a href="geor_util_ref.htm#CHEICIEB">SDO_GEOR_UTL.renameRDT</a> procedure.</p>
</li>
<li>
<p>In general, you should not directly update the attributes of a GeoRaster object, except for the <code>spatialExtent</code> attribute.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHIICDF"></a>
<div id="GEORS1003" class="sect1">
<h2 class="sect1"><span class="secnum">3.11</span> <a id="sthref306"></a><a id="sthref307"></a>Querying and Updating GeoRaster Cell Data</h2>
<p>To display part or all of a raster image, you can query the data for a cell (pixel), a range of cells, or the entire image associated with a GeoRaster object:</p>
<ul>
<li>
<p><a href="geor_ref.htm#CHEIDJCI">SDO_GEOR.getCellValue</a> returns cell values of one or multiple layers or bands for a specified location.</p>
</li>
<li>
<p><a href="geor_ref.htm#CACDIEHC">SDO_GEOR.evaluateDouble</a> evaluates a direct location based on neighboring cell values by using a specified interpolation method, and returns the raster values (double precision numbers) for the specified bands or layers for that location.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a> creates a single BLOB object containing all cells of a precise subset of the GeoRaster object (as specified by a rectangular window or a clipping polygon geometry, layer or band numbers, and pyramid level). This BLOB object contains only raster cells and no related metadata.</p>
</li>
<li>
<p><a href="geor_ref.htm#CACGDJFA">SDO_GEOR.reproject</a> not only transforms a whole GeoRaster object from one projected coordinate system to another, but can also include the same capability as <a href="geor_ref.htm#CHEFEFCG">SDO_GEOR.getRasterSubset</a> by directly transforming the query result (a single BLOB) into a different coordinate system.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEBDCDJ">SDO_GEOR.getRasterData</a> creates a single BLOB object containing all cells of the GeoRaster object at a specified pyramid level. This BLOB object contains only raster cells and no related metadata.</p>
</li>
<li>
<p><a href="geor_ref.htm#CHEHCBEC">SDO_GEOR.getRasterBlocks</a> returns an object that includes all image data inside or touching a specified window. Specifically, it returns an object of the SDO_RASTERSET collection type that identifies all blocks of a specified pyramid level that are inside or touch a specified window.</p>
</li>
</ul>
<p>You can also use the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure to export all or part of a raster image to a BLOB object (binary image format) or to a file of a specified file format type.</p>
<p>To update or change the value of raster cells in a specified window to a single value, you can use the <a href="geor_ref.htm#CHEIDDBE">SDO_GEOR.changeCellValue</a> procedure. You can call the <a href="geor_ref.htm#CACHBIAE">SDO_GEOR.updateRaster</a> procedure to update a specified pyramid of a specified area, or the overlapping parts of one GeoRaster object, with a specified pyramid and specified bands or layers of another GeoRaster object. Both the <a href="geor_ref.htm#CHEIDDBE">SDO_GEOR.changeCellValue</a> and the <a href="geor_ref.htm#CACHBIAE">SDO_GEOR.updateRaster</a> procedures support all pyramid levels, including the original raster data (that is, pyramid level 0).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use any procedure that adds or overwrites data in the input GeoRaster object, you should make a copy of the original GeoRaster object and use the procedure on the copied object. After you are satisfied with the result of the procedure, you can discard the original GeoRaster object if you wish.</div>
<p>If you want to change the raster data table name, the attributes of a GeoRaster object, or any other metadata, see the recommendations, requirements, and restrictions noted in <a href="#CIHCIEID">Section 3.10, "Querying and Updating GeoRaster Metadata"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHJJHEI"></a>
<div id="GEORS1004" class="sect1">
<h2 class="sect1"><span class="secnum">3.12</span> <a id="sthref308"></a><a id="sthref309"></a>Processing GeoRaster Objects</h2>
<p>You can perform a variety of processing operations on GeoRaster data, including changing the format, subsetting (cropping), scaling, reprojecting (from one coordinate system to another), generating pyramids, and generating statistics and histograms. Some relevant subprograms are <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a>, <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, <a href="geor_ref.htm#CACGDJFA">SDO_GEOR.reproject</a>, <a href="geor_ref.htm#CHEDFEAI">SDO_GEOR.generatePyramid</a>, <a href="geor_ref.htm#CHEIDJHH">SDO_GEOR.deletePyramid</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, <a href="geor_ref.htm#CACCIGJA">SDO_GEOR.mergeLayers</a>, and <a href="geor_ref.htm#CHEDCICI">SDO_GEOR.generateStatistics</a>.</p>
<p>See also the GeoRaster PL/SQL demo files, described in <a href="geor_intro.htm#CHDBEFHC">Section 1.15</a>, for examples and explanatory comments.</p>
</div>
<!-- class="sect1" -->
<a id="CIHHGCCE"></a>
<div id="GEORS1005" class="sect1">
<h2 class="sect1"><span class="secnum">3.13</span> <a id="sthref310"></a><a id="sthref311"></a><a id="sthref312"></a><a id="sthref313"></a>Compressing and Decompressing GeoRaster Objects</h2>
<p>You can reduce the storage space requirements for GeoRaster objects by compressing them using JPEG-B, JPEG-F, or DEFLATE compression. You can decompress any compressed GeoRaster object, although this is not required for any GeoRaster operations, because any GeoRaster operation that can be performed on an uncompressed (decompressed) GeoRaster object can be performed on a compressed GeoRaster object.</p>
<p>To compress or decompress a GeoRaster object, use the compression keyword in the <code>storageParam</code> parameter with the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure, or with several other procedures that load and process a GeoRaster object to create another GeoRaster object, including <a href="geor_ref.htm#CHECBJCD">SDO_GEOR.importFrom</a>, <a href="geor_ref.htm#CHEJFBBD">SDO_GEOR.mosaic</a>, <a href="geor_ref.htm#CHECJJDI">SDO_GEOR.scaleCopy</a>, and <a href="geor_ref.htm#CHEGFEDF">SDO_GEOR.subset</a>. (There are no separate procedures for compressing and decompressing a GeoRaster object.)</p>
<p>For more information about GeoRaster compression and decompression, see <a href="geor_intro.htm#CHDBEEJI">Section 1.10</a>, including information about support for third-party compression solutions in <a href="geor_intro.htm#BABCCDAF">Section 1.10.4</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHIEIDE"></a>
<div id="GEORS1006" class="sect1">
<h2 class="sect1"><span class="secnum">3.14</span> <a id="sthref314"></a>Viewing GeoRaster Objects</h2>
<p>To view GeoRaster objects, you have the following options:</p>
<ul>
<li>
<p>Call the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure to export GeoRaster objects to image files, and then display the images using image tools or a Web browser.</p>
</li>
<li>
<p>Use the standalone GeoRaster viewer tool (one of the tools described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>).</p>
</li>
</ul>
<p>With the GeoRaster viewer tool, you can select a GeoRaster object of a database schema (user), query and display the whole or a subset of a GeoRaster object, zoom in and zoom out, scroll, and perform other basic operations. The pyramid level, cell coordinates, and model coordinates (if the object is georeferenced) are displayed for the point at the mouse pointer location. You can display individual cell values and choose different layers of a multiband or hyperspectral image for RGB full color display. The blocking boundaries can be overlapped on the top of the display. Depending on the data and your requests, the viewer can display the raster data in grayscale, pseudocolor, and 24-bit true color over an intranet or the Internet. Some of the basic GeoRaster metadata is also displayed.</p>
<p>The GeoRaster viewer tool provides a set of image processing operators for enhanced display of the GeoRaster objects, especially for those whose cell depth is greater than 8 or is a floating-point number. It can also display and apply bitmap masks on the GeoRaster objects if they have bitmap masks.</p>
<p>The GeoRaster viewer tool also includes menu commands to call the GeoRaster loader and exporter tools, thus enabling you to use a single tool as an interface to the capabilities of all the GeoRaster tools.</p>
</div>
<!-- class="sect1" -->
<a id="CIHJEEEA"></a>
<div id="GEORS1007" class="sect1">
<h2 class="sect1"><span class="secnum">3.15</span> <a id="sthref315"></a><a id="sthref316"></a>Exporting GeoRaster Objects</h2>
<p>To load and export imagery or raster data, always consider third-party ETL tools (see the note in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>)</p>
<p>If you use features in GeoRaster to export GeoRaster objects to image files, you have the following options:</p>
<ul>
<li>
<p>Call the <a href="geor_ref.htm#CHEDHBII">SDO_GEOR.exportTo</a> procedure (which can export either to a file or to a BLOB object).</p>
</li>
<li>
<p>Use the GeoRaster exporter tool or viewer tool, which are described in <a href="geor_intro.htm#CHDHHFHJ">Section 1.14</a>.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHBFGDB"></a>
<div id="GEORS1008" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.16</span> <a id="sthref317"></a><a id="sthref318"></a>Updating GeoRaster Objects Before Committing</h2>
<p>Before you commit a database transaction that inserts, updates, or deletes GeoRaster cell data or metadata, you should update the GeoRaster object. If you do not update the GeoRaster object after changing cell data, one or more of the following can result: an invalid GeoRaster object, dangling raster data, and inconsistent metadata. If you do not update the GeoRaster object after changing GeoRaster metadata, the metadata changes will not take effect.</p>
<p>If you decide to roll back the transaction instead of committing it, an UPDATE statement is not needed.</p>
<p>In <a href="#CIHIIFDE">Example 3-5</a>, the UPDATE statement is required after the call to the <a href="geor_ref.htm#CHEJCEBJ">SDO_GEOR.changeFormatCopy</a> procedure and before the COMMIT statement.</p>
<div id="GEORS1009" class="example">
<p class="titleinexample"><a id="CIHIIFDE"></a>Example 3-5 Updating a GeoRaster Object Before Committing</p>
<pre>
DECLARE
    gr1 sdo_georaster;
    gr2 sdo_georaster;
BEGIN
    SELECT georaster INTO gr2 from georaster_table WHERE georid=11 FOR UPDATE;
    SELECT georaster INTO gr1 from georaster_table WHERE georid=1;
    sdo_geor.changeFormatCopy(gr1, 'blocksize=(2048,2048)', gr2);
    UPDATE georaster_table SET georaster=gr2 WHERE georid=11;
    COMMIT;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDIGJDE"></a>
<div id="GEORS1010" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.17</span> <a id="sthref319"></a>Using Template-Related Subprograms to Develop GeoRaster Applications</h2>
<p>The <a href="geor_ref.htm#CACEDFBD">SDO_GEOR.createTemplate</a> and <a href="geor_ref.htm#CACBGFAE">SDO_GEOR.getRasterBlockLocator</a> subprograms enable you to develop GeoRaster applications, such as ETL tools and image processing systems that work with GeoRaster objects, by reading and writing GeoRaster metadata and binary raster data without dealing directly with the Oracle XMLType, the GeoRaster XML schema, and Oracle BLOBs.</p>
<p>After you create a new GeoRaster object (explained in <a href="#CIHBBCEI">Section 3.2</a>), you can use the <a href="geor_ref.htm#CACEDFBD">SDO_GEOR.createTemplate</a> function to populate the metadata of the GeoRaster object with basic information, such as raster type, dimension sizes, ultCoordinates, cell depth, interleaving type, blocking and block size, pyramid resampling method and reducing level, and compression method and quality. This function can optionally populate the raster data table with the correct number of rows and row data consisting of raster blocks containing empty BLOBs.</p>
<p>The XML metadata generated by the <a href="geor_ref.htm#CACEDFBD">SDO_GEOR.createTemplate</a> function conforms to the GeoRaster metadata schema. You can then use other GeoRaster subprogams to query or update the metadata (see <a href="#CIHCIEID">Section 3.10</a>).</p>
<p>You can use the <a href="geor_ref.htm#CACBGFAE">SDO_GEOR.getRasterBlockLocator</a> procedure to get the raster block locator by specifying the pyramid level and block number. If you have the raster block locator, you can then use the OCI or Java JDBC LOB interfaces to read and write the binary raster data. (The <a href="geor_ref.htm#CACBGFAE">SDO_GEOR.getRasterBlockLocator</a> procedure does not itself read or process LOB data.) To use this approach, you must understand the physical storage of the raster data (explained in <a href="geor_intro.htm#CHDHHBAH">Section 1.4</a>), and you must compress and decompress the data as necessary before reading from or writing to the BLOB.</p>
</div>
<!-- class="sect1" -->
<a id="CHDEFJAB"></a>
<div id="GEORS1011" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.18</span> Using GeoRaster with Workspace Manager and Label Security</h2>
<p>To use GeoRaster with Oracle Workspace Manager or Oracle Label Security, you must define an object view of SDO_RASTER type and use the object view as the raster storage. The object view must be defined on a single relational table (the base raster data table) that has all the necessary columns and the necessary primary key definition. The following example shows the general form of statements to create the table and the view:</p>
<pre>
CREATE TABLE &lt;rdt_base_table&gt; 
(  RASTERID NUMBER,
   PYRAMIDLEVEL NUMBER, 
   BANDBLOCKNUMBER NUMBER,
   ROWBLOCKNUMBER NUMBER,
   COLUMNBLOCKNUMBER NUMBER,
   BLOCKMBR SDO_GEOMETRY,
   RASTERBLOCK BLOB,
   PRIMARY KEY (RASTERID,PYRAMIDLEVEL,BANDBLOCKNUMBER,
                ROWBLOCKNUMBER,COLUMNBLOCKNUMBER)
) LOB (RASTERBLOCK) STORE AS SECUREFILE(CACHE);
 
CREATE VIEW &lt;rdt_view&gt; OF SDO_RASTER
 WITH OBJECT OID (RASTERID,PYRAMIDLEVEL,BANDBLOCKNUMBER,
                ROWBLOCKNUMBER,COLUMNBLOCKNUMBER)
 AS SELECT RASTERID,PYRAMIDLEVEL,BANDBLOCKNUMBER,ROWBLOCKNUMBER,COLUMNBLOCKNUMBER,
           BLOCKMBR,RASTRBLOCK 
      FROM &lt;rdt_base_table&gt;;
</pre>
<p>Use the name of the object view to create GeoRaster objects. For example (general format):</p>
<pre>
INSERT INTO georaster_table (georid, georaster)
  VALUES (0, SDO_GEOR.init(&lt;rdt_view&gt;));
</pre>
<p>The name of the object view is used in the RDT_TABLE_NAME column of the GeoRaster system data views (see <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>). Grant the same privileges on the object view as you would for a raster object table. For example (general format)</p>
<pre>
GRANT SELECT,INSERT,UPDATE,DELETE on &lt;rdt_view&gt; TO SCOTT;
</pre>
<div id="GEORS1012" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref320"></a>
<h3 class="sect2"><span class="secnum">3.18.1</span> Using GeoRaster with Workspace Manager</h3>
<p>With Workspace Manager, you can conveniently manage changes to the raster data by saving different raster data versions and making modifications in different workspaces. To use GeoRaster with Workspace Manager, you must use raster data views for raster storage and version-enable the underlying base raster data tables. For example (general format):</p>
<pre>
EXECUTE DBMS_WM.EnableVersioning (&lt;rdt_base_table&gt;, 'VIEW_WO_OVERWRITE');
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can version-enable only raster data tables. Do not version-enable any GeoRaster tables, where GeoRaster objects are stored, and do not perform any operations that will require a GeoRaster table to be modified while you are in a workspace.</div>
<p>After you version-enable a base RDT, you can use the subprograms in the DBMS_WM package to manage changes to the raster data. If you need to directly modify a raster block, call the DBMS_WM.copyForUpdate procedure before the operation, as shown in the following example:</p>
<pre>
declare
  geor sdo_georaster;
  cond varchar2(1000);
  lb   blob;
  r1   raw(1024);
  amt  number;
begin
  r1 := utl_raw.copies(utl_raw.cast_to_raw('0'),1024);
 
  select georaster into geor from georaster_table where georid=1;
  cond := 'rasterId=' || geor.rasterId || ' AND pyramidLevel=0 AND ' ||
          ' bandBlockNumber=0 AND rowBlockNumber=0 AND columnBlockNumber=0';
  dbms_wm.copyForUpdate(geor.rasterDataTable, cond);
  sdo_geor.getRasterBlockLocator(geor, 0, 0, 0, 0, lb, null, 'TRUE');
  amt := 1024;
  dbms_lob.write(lb, amt, 1, r1);
end;
/
</pre>
<p>However, if you modify raster data using GeoRaster subprograms, you do <span class="italic">not</span> need to call the DBMS_WM.copyForUpdate procedure beforehand.</p>
<p>For information about Workspace Manager, see <a class="olink ADWSM" href="../e11826/toc.htm"><span class="italic">Oracle Database Workspace Manager Developer's Guide</span></a>.</p>
</div>
<!-- class="sect2" -->
<div id="GEORS1013" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref321"></a>
<h3 class="sect2"><span class="secnum">3.18.2</span> Using GeoRaster with Label Security</h3>
<p>Oracle Label Security provides row-level access control for sensitive data based on a user's level of security clearance. To use GeoRaster with Label Security, follow these basic steps:</p>
<ol>
<li>
<p>Create the GeoRaster table, RDT base table or tables, and an object view of SDO_RASTER type for each RDT.</p>
</li>
<li>
<p>Create an Oracle Label Security policy and define the label components.</p>
</li>
<li>
<p>Create labeling functions for the GeoRaster table and the RDT base table or tables.</p>
<p>The labels for rows in a GeoRaster table should be generated according to the application's requirements. Use the same label for both the row that stores a GeoRaster object and for the GeoRaster object's raster rows in the associated RDT base table; otherwise, the GeoRaster objects might be invalid or have an inconsistent status.</p>
<p>The following example creates the labeling function for an RDT base table:</p>
<pre>
CREATE OR REPLACE FUNCTION gen_rdt_label(rdt_view_name varchar2, rid number)
  RETURN LBACSYS.LBAC_LABEL
AS
  tabname varchar2(80);
  schema  varchar2(32);
  grcol   varchar2(1024);
  colname varchar2(30);
  label   NUMBER;
BEGIN
  EXECUTE IMMEDIATE
   'SELECT v.owner, v.table_name, v.column_name grcol, p.column_name ' ||
   '  FROM all_sdo_geor_sysdata v, all_sa_policies p, all_sa_table_policies t '
   || ' WHERE v.rdt_table_name=:1 AND v.raster_id=:2 AND ' ||
   ' v.owner=t.schema_name AND v.table_name=t.table_name AND ' ||
   ' p.policy_name=t.policy_name ' 
   INTO schema, tabname, grcol, colname
   USING upper(rdt_view_name), rid;
  EXECUTE IMMEDIATE
    'SELECT t.' || colname  ||
     ' FROM ' || schema || '.' || tabname || ' t ' ||
     ' WHERE t.' || grcol || '.rasterdatatable=:1 AND ' ||
     '       t.' || grcol || '.rasterid=:2' 
    INTO label
    USING upper(rdt), rid;
  RETURN LBACSYS.LBAC_LABEL.NEW_LBAC_LABEL(label);
END;
/
</pre></li>
<li>
<p>Apply the Label Security policy to a GeoRaster table and its associated RDT base table or tables.</p>
<p>The following example (general format) applies a Label Security policy to an RDT base table using the labeling function example from the preceding step.</p>
<pre>
BEGIN
  SA_POLICY_ADMIN.REMOVE_TABLE_POLICY(&lt;policy_name&gt;,&lt;schema_name&gt;,&lt;rdt_base_table&gt;);
  SA_POLICY_ADMIN.APPLY_TABLE_POLICY(
    POLICY_NAME =&gt; &lt;policy_name&gt;,
    SCHEMA_NAME =&gt; &lt;schema_name&gt;,
    TABLE_NAME  =&gt; &lt;rdt_base_table&gt;,
    TABLE_OPTIONS =&gt; 'READ_CONTROL,WRITE_CONTROL,CHECK_CONTROL',
    LABEL_FUNCTION =&gt; '&lt;schema_name&gt;.gen_rdt_label(&lt;rdt_view&gt;,:new.rasterid)',
    PREDICATE =&gt; NULL);
END;
/
</pre></li>
<li>
<p>Create and authorize users, and complete other administrative tasks related to Label Security.</p>
</li>
</ol>
<p>You can load GeoRaster data before or after applying the policy to the tables.</p>
<p>The ALL_SDO_GEOR_SYSDATA view (described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>) contains system data for all GeoRaster objects accessible by the current user, and accessibility in this case is determined by the user's privileges as defined in the context of discretionary access control (DAC).</p>
<p>After the label for a GeoRaster table row is updated, ensure that the related data labels in the base RDT are updated, so that the labels are synchronized.</p>
<p>For information about Label Security, see <a class="olink OLSAG" href="../../network.112/e10745/toc.htm"><span class="italic">Oracle Label Security Administrator's Guide</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDJBHE"></a>
<div id="GEORS1014" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.19</span> Maintaining Efficient Tablespace Use by GeoRaster Objects</h2>
<p>After delete or rollback operations, unused space allocated to a raster data table might not be promptly returned to the underlying tablespace. This could result in wasted tablespace area, and it can be a significant issue if the amount of raster data is large. If the raster data table is created using BasicFile LOBs in an automatic segment space management tablespace, you can explicitly shrink the <code>rasterBlock</code> LOB segment or the raster data table by altering the raster data table, as shown in <a href="#CHDCJDDI">Example 3-6</a> and <a href="#CHDFHADH">Example 3-7</a>.</p>
<div id="GEORS1015" class="example">
<p class="titleinexample"><a id="CHDCJDDI"></a>Example 3-6 Shrinking a BasicFile RasterBlock LOB Segment</p>
<pre>
ALTER TABLE city_images_rdt MODIFY LOB (rasterBlock) (SHRINK SPACE);
</pre></div>
<!-- class="example" -->
<div id="GEORS1016" class="example">
<p class="titleinexample"><a id="CHDFHADH"></a>Example 3-7 Shrinking a Raster Data Table</p>
<pre>
ALTER TABLE city_images_rdt ENABLE ROW MOVEMENT;
ALTER TABLE city_images_rdt SHRINK SPACE CASCADE;
</pre></div>
<!-- class="example" -->
<p>If you are using SecureFiles, or if you are using BasicFiles allocated in a manual segment space management tablespace, you cannot reclaim unused space using the ALTER TABLE statements as shown in the preceding examples. Instead, you should create some working (for temporary use) raster data tables and try to put any intermittent results in these RDTs, and then drop these working RDTs after they are no longer needed.</p>
</div>
<!-- class="sect1" -->
<a id="CHDEEBDE"></a>
<div id="GEORS1017" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.20</span> Maintaining GeoRaster Objects and System Data in the Database</h2>
<p>Although GeoRaster provides internal database mechanism to prevent the creation of invalid GeoRaster objects and system data, sometimes such GeoRaster objects and system data might exist in the database, especially after an upgrade from a previous release, or after some user errors in operations on GeoRaster system data. Examples of such invalid objects and system data include the following:</p>
<ul>
<li>
<p>An entry in the GeoRaster system data views (<span class="italic">xxx</span>_SDO_GEOR_SYSDATA, described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>) refers to a nonexistent GeoRaster table or column.</p>
</li>
<li>
<p>Two or more GeoRaster objects have the same pair of RDT name and raster ID values.</p>
</li>
<li>
<p>Some GeoRaster objects, tables, columns, or RDTs not registered.</p>
</li>
<li>
<p>An RDT name is not unique.</p>
</li>
<li>
<p>A GeoRaster object is non-empty or nonblank, but an associated RDT does not exist.</p>
</li>
</ul>
<p>After a database upgrade, you should call the <a href="geor_admin_ref.htm#CHDDAAGJ">SDO_GEOR_ADMIN.isUpgradeNeeded</a> function to check for any invalid GeoRaster objects and invalid system data for the current version. If there are any errors or invalid data, call the <a href="geor_admin_ref.htm#CHDFGEGE">SDO_GEOR_ADMIN.upgradeGeoRaster</a> function to have the problems automatically corrected. If you connect as user MDSYS, the <a href="geor_admin_ref.htm#CHDFGEGE">SDO_GEOR_ADMIN.upgradeGeoRaster</a> function upgrades all GeoRaster objects in the database; otherwise, it upgrades only GeoRaster objects in the schema of the current user. (See the reference and usage information about <a href="geor_admin_ref.htm#CHDFGEGE">SDO_GEOR_ADMIN.upgradeGeoRaster</a> in <a href="geor_admin_ref.htm#BABDDFEI">Chapter 5</a>.)</p>
<p>For regular maintenance due to possible user errors, several functions and procedures will be helpful in checking for and correcting invalid GeoRaster objects and system data entries:</p>
<ul>
<li>
<p>To check for errors, call <a href="geor_admin_ref.htm#CHDCIGDI">SDO_GEOR_ADMIN.checkSysdataEntries</a> and <a href="geor_admin_ref.htm#CHDHCHJF">SDO_GEOR_ADMIN.listUnregisteredRDT</a>.</p>
</li>
<li>
<p>To check for dangling raster data, call <a href="geor_admin_ref.htm#CHEGDFGG">SDO_GEOR_ADMIN.listDanglingRasterData</a>.</p>
</li>
<li>
<p>To correct all invalid system data entries, call <a href="geor_admin_ref.htm#CHDFJIAB">SDO_GEOR_ADMIN.maintainSysdataEntries</a>.</p>
</li>
<li>
<p>To create correct DML triggers for all GeoRaster columns, call <a href="geor_admin_ref.htm#BABBFAEC">SDO_GEOR_ADMIN.registerGeoRasterColumns</a>.</p>
</li>
<li>
<p>To register all existing GeoRaster objects in the sysdata table, call <a href="geor_admin_ref.htm#CHDIJIFI">SDO_GEOR_ADMIN.registerGeoRasterObjects</a>.</p>
</li>
</ul>
<p>See the reference and usage information about these procedures and functions in <a href="geor_admin_ref.htm#BABDDFEI">Chapter 5</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHECFGC"></a>
<div id="GEORS1018" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.21</span> <a id="sthref322"></a><a id="sthref323"></a>Transferring GeoRaster Data Between Databases</h2>
<p>You can use either the Data Pump Export and Import utilities or the original Export and Import utilities to transfer GeoRaster data between databases. You must export and import rows from both the GeoRaster table and its related raster data table or tables. After the transfer, you do not need to insert the GeoRaster system data for the imported GeoRaster objects into the USER_SDO_GEOR_SYSDATA view (described in <a href="geor_datatypes_metadata.htm#BGBEBHDD">Section 2.4</a>) in the target schema; however, you should use the <a href="geor_ref.htm#CHEHDGCH">SDO_GEOR.validateGeoRaster</a> function to check the validity of imported GeoRaster objects before you perform any operations on these objects.</p>
<p>For information about the Data Pump Export and Import utilities and the original Export and Import utilities, see <a class="olink SUTIL" href="../../server.112/e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
<p>To transfer GeoRaster data between databases, follow these general steps:</p>
<ol>
<li>
<p>Check for and resolve any conflicts, as explained in <a href="#CIHEGGCA">Section 3.21.1</a>.</p>
</li>
<li>
<p>Perform the data transfer, as explained in <a href="#CIHHDHEC">Section 3.21.2</a>.</p>
</li>
</ol>
<a id="CIHEGGCA"></a>
<div id="GEORS1019" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.21.1</span> Checking for and Resolving Conflicts</h3>
<p>For a successful import of GeoRaster data into a target database, there must be no conflicts in the target schema's GeoRaster system data. The following conditions can cause a conflict:</p>
<ul>
<li>
<p>A raster data table with the same name is already defined in another schema in the target database.</p>
<p>For example, you might plan to import a GeoRaster object by creating its raster data table (RDT) in the target schema, but an existing RDT in the target schema might already have the same name. In this case, you should use the <a href="geor_admin_ref.htm#CHDBGBHG">SDO_GEOR_ADMIN.listRDT</a> or <a href="geor_admin_ref.htm#CHEDDIAA">SDO_GEOR_ADMIN.isRDTNameUnique</a> function to check both source database and target database to see if there are RDT name conflicts; and if there are any conflicts, use the <a href="geor_util_ref.htm#CHEICIEB">SDO_GEOR_UTL.renameRDT</a> procedure to rename the RDT to a different name in the target database to solve the conflicts before you import the GeoRaster objects.</p>
</li>
<li>
<p>Any pairs of raster data table name and raster ID to be inserted into the target schema's USER_SDO_GEOR_SYSDATA view are not unique.</p>
<p>For example, if you import RDT data by appending to an existing RDT in the target database, this conflict might occur. In this case, before importing the data into the target database, use the <a href="geor_admin_ref.htm#CHDHDBIJ">SDO_GEOR_ADMIN.listGeoRasterObjects</a> function to list all GeoRaster objects defined in the target schema, and make sure that there are no conflicts in the combination of RDT name and raster ID between existing GeoRaster data and the GeoRaster data to be imported. If there are any conflicts, change the raster ID of the GeoRaster object in the target schema to resolve the conflicts; otherwise, those GeoRaster objects with conflicts in the dump file will get rejected when you perform import process.</p>
</li>
</ul>
<p>If you need to check the raster data table (RDT) name and raster ID (RID) information in the dump file, you have the following options: check the information in the source database; request the information from the provider of the dump file; load the dump file into a separate test database and check the information there; or (if you cannot use a separate database for testing) load the dump file into a test schema in the current database and check the information. To load the dump file into a test schema in the current database and check the information, follow these steps:</p>
<ol>
<li>
<p>Create a test schema in the target database.</p>
</li>
<li>
<p>Load all GeoRaster tables into this test schema from the dump file, using the Data Pump Import utility with the <code>CONTENT = METADATA_ONLY</code> parameter.</p>
</li>
<li>
<p>Connect to the database as the MDSYS user, and disable all DML triggers on the GeoRaster tables that were loaded in the preceding step.</p>
</li>
<li>
<p>Load the data into the GeoRaster tables, using the Data Pump Import utility with the <code>CONTENT = DATA_ONLY</code> parameter.</p>
</li>
<li>
<p>Retrieve the RDT/RID (raster data table name and raster ID) pairs directly from the GeoRaster tables in the test schema.</p>
</li>
</ol>
<p>After you resolve conflicts, you should ensure the integrity of GeoRaster metadata and data (see <a href="#CHDEEBDE">Section 3.20</a>). You should also validate any fixed GeoRaster objects before performing a commit or any other operation.</p>
<p>For general information about resolving conflicts during import operations, see the description of the <code>TABLE_EXISTS_ACTION</code> parameter in the Data Pump Import chapter of <a class="olink SUTIL300" href="../../server.112/e22490/dp_import.htm#SUTIL300"><span class="italic">Oracle Database Utilities</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHHDHEC"></a>
<div id="GEORS1020" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">3.21.2</span> Performing the GeoRaster Data Transfer</h3>
<p>When you export GeoRaster data from one database and import it into another, the GeoRaster database management system ensures that the necessary DML triggers and system data entries are automatically generated after the GeoRaster tables and objects are imported into the target database.</p>
<p>To export GeoRaster data, do as you would for other types of data. For example:</p>
<pre>
expdp scott schemas=scott directory=dump_dir dumpfile=exp.dmp
Enter password: <span class="italic">password</span>
</pre>
<p>To import GeoRaster data, do as you would for other types of data, but exclude the GeoRaster internal DML triggers. For example:</p>
<ol>
<li>
<p>Ensure that no conflicts exist between the GeoRaster data to be imported and the existing GeoRaster data in the target database, as explained in <a href="#CIHEGGCA">Section 3.21.1</a>.</p>
<p>If any conflicts are not resolved, some exceptions will be raised and only non-conflicted GeoRaster data will be imported into the target database.</p>
</li>
<li>
<p>Import GeoRaster data as you would for other types of data, but exclude the GeoRaster internal DML triggers (whose names start with <code>GRDMLTR_</code>). For example:</p>
<pre>
impdp scott schemas=scott directory=dump_dir dumpfile=exp.dmp parfile=exclude.par
Enter password: <span class="italic">password</span>
</pre>
<p>where the <code>exclude.par</code> file contains the following:</p>
<pre>
exclude=trigger:"like 'GRDMLTR_%'"
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDGEGHB"></a>
<div id="GEORS1195" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.22</span> <a id="sthref324"></a>Using Transportable Tablespaces with GeoRaster Data</h2>
<p>You can use the Oracle Database transportable tablespaces feature with GeoRaster data.</p>
<p>If a tablespace to be transported contains any spatial indexes on the GeoRaster tables or raster data tables (RDTs), you may have to take some preparatory steps. See the Usage Notes for the SDO_UTIL.PREPARE_FOR_TTS and SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS procedures in <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a> for more information about using the transportable tablespace feature with spatial data.</p>
<p>For a successful import of GeoRaster data into a target database, there must be no conflicts in the target schema's GeoRaster system data. Before you transport the tablespace to another database or schema, it is recommended (but not required) that you check for and resolve such conflicts by following the procedure described in <a href="#CIHEGGCA">Section 3.21.1</a>. For this reason, you should design GeoRaster tables and RDT tables so as to avoid such foreseeable conflicts before you use such transportable tablespaces in the source database.</p>
<p>Regardless or whether a transported tablespace has any spatial indexes, after transporting the tablespace that contains GeoRaster objects, do the following:</p>
<ol>
<li>
<p>Call the <a href="geor_admin_ref.htm#CHDIJIFI">SDO_GEOR_ADMIN.registerGeoRasterObjects</a> procedure (described in <a href="geor_admin_ref.htm#BABDDFEI">Chapter 5</a>) to register all GeoRaster objects in the current schema or new database.</p>
</li>
<li>
<p>Before you use the transported GeoRaster data, perform the "regular maintenance" operations described in <a href="#CHDEEBDE">Section 3.20</a>, to maintain GeoRaster objects and system data and to ensure all GeoRaster objects are correctly transported and properly registered.</p>
</li>
<li>
<p>If you find any conflicts, call the <a href="geor_util_ref.htm#CHEICIEB">SDO_GEOR_UTL.renameRDT</a> or <a href="geor_util_ref.htm#CHEBCAIA">SDO_GEOR_UTL.makeRDTNamesUnique</a> procedure to solve such conflicts, and validate again.</p>
</li>
</ol>
<p>For detailed information about transportable tablespaces and transporting tablespaces to other databases, see <a class="olink ADMIN11394" href="../../server.112/e25494/tspaces.htm#ADMIN11394"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1050">
<tr>
<td class="cellalignment1057">
<table class="cellalignment1055">
<tr>
<td class="cellalignment1054"><a href="geor_datatypes_metadata.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1054"><a href="geor_ref.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1059">
<table class="cellalignment1053">
<tr>
<td class="cellalignment1054"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1054"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1054"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1054"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1054"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1054"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
