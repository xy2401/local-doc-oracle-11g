<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Spatial Data Types and Metadata</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information for indexing and storing spatial data and for developing spatial applications using Oracle Spatial and Graph and Oracle Locator." />
<meta name="dcterms.created" content="2013-11-26T3:11:43Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial Developer's Guide" />
<meta name="dcterms.identifier" content="E11830-15" />
<meta name="dcterms.isVersionOf" content="SPATL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sdo_intro.htm" title="Previous" type="text/html" />
<link rel="Next" href="sdo_sql_mm.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11830.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/51</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='sdo_objrelschema'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="SPATL020" class="chapter"><a id="BGHFECGD"></a> <a id="i1009746"></a>
<h1 class="chapter"><span class="secnum">2</span> Spatial <a id="sthref173"></a><a id="sthref174"></a><a id="sthref175"></a>Data Types and Metadata</h1>
<p>Oracle Spatial consists of a set of object data types, type methods, and operators, functions, and procedures that use these types. A geometry is stored as an object, in a single row, in a column of type SDO_GEOMETRY. Spatial index creation and maintenance is done using basic DDL (CREATE, ALTER, DROP) and DML (INSERT, UPDATE, DELETE) statements.</p>
<p>This chapter starts with a simple example that inserts, indexes, and queries spatial data. You may find it helpful to read this example quickly before you examine the detailed data type and metadata information later in the chapter.</p>
<p>This chapter contains the following major sections:</p>
<ul>
<li>
<p><a href="#i1004750">Section 2.1, "Simple Example: Inserting, Indexing, and Querying Spatial Data"</a></p>
</li>
<li>
<p><a href="#i1004087">Section 2.2, "SDO_GEOMETRY Object Type"</a></p>
</li>
<li>
<p><a href="#CBBDAFFA">Section 2.3, "SDO_GEOMETRY Methods"</a></p>
</li>
<li>
<p><a href="#CBBFGHAE">Section 2.4, "SDO_GEOMETRY Constructors"</a></p>
</li>
<li>
<p><a href="#CBBFDFCJ">Section 2.5, "TIN-Related Object Types"</a></p>
</li>
<li>
<p><a href="#CBBIHIIE">Section 2.6, "Point Cloud-Related Object Types"</a></p>
</li>
<li>
<p><a href="#i1001898">Section 2.7, "Geometry Examples"</a></p>
</li>
<li>
<p><a href="#i1001937">Section 2.8, "Geometry Metadata Views"</a></p>
</li>
<li>
<p><a href="#i1001420">Section 2.9, "Spatial Index-Related Structures"</a></p>
</li>
<li>
<p><a href="#i1010145">Section 2.10, "Unit of Measurement Support"</a></p>
</li>
</ul>
<a id="i1004750"></a>
<div id="SPATL486" class="sect1">
<h2 class="sect1"><span class="secnum">2.1</span> Simple Example: Inserting, Indexing, and Querying Spatial Data</h2>
<p><a id="sthref176"></a>This section presents a simple example of creating a spatial table, inserting data, creating the spatial index, and performing spatial queries. It refers to concepts that were explained in <a href="sdo_intro.htm#BGEBIHIH">Chapter 1</a> and that will be explained in other sections of this chapter.</p>
<p>The scenario is a soft drink manufacturer that has identified geographical areas of marketing interest for several products (colas). The colas could be those produced by the company or by its competitors, or some combination. Each area of interest could represent any user-defined criterion: for example, an area where that cola has the majority market share, or where the cola is under competitive pressure, or where the cola is believed to have significant growth potential. Each area could be a neighborhood in a city, or a part of a state, province, or country.</p>
<p><a href="#i1004467">Figure 2-1</a> shows the areas of interest for four colas.</p>
<div id="SPATL487" class="figure">
<p class="titleinfigure"><a id="i1004467"></a>Figure 2-1 Areas of Interest for the Simple Example</p>
<img width="304" height="303" src="img/cola_mkt.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref177" href="img_text/cola_mkt.htm">Description of "Figure 2-1 Areas of Interest for the Simple Example"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#i1004730">Example 2-1</a> performs the following operations:</p>
<ul>
<li>
<p>Creates a table (COLA_MARKETS) to hold the spatial data</p>
</li>
<li>
<p>Inserts rows for four areas of interest (<code>cola_a</code>, <code>cola_b</code>, <code>cola_c</code>, <code>cola_d</code>)</p>
</li>
<li>
<p>Updates the USER_SDO_GEOM_METADATA view to reflect the dimensional information for the areas</p>
</li>
<li>
<p>Creates a spatial index (COLA_SPATIAL_IDX)</p>
</li>
<li>
<p>Performs some spatial queries</p>
</li>
</ul>
<p>Many concepts and techniques in <a href="#i1004730">Example 2-1</a> are explained in detail in other sections of this chapter.</p>
<div id="SPATL488" class="example">
<p class="titleinexample"><a id="i1004730"></a>Example 2-1 Simple Example: Inserting, Indexing, and Querying Spatial Data</p>
<pre>
-- Create a table for cola (soft drink) markets in a
-- given geography (such as city or state).
-- Each row will be an area of interest for a specific
-- cola (for example, where the cola is most preferred
-- by residents, where the manufacturer believes the
-- cola has growth potential, and so on).
-- (For restrictions on spatial table and column names, see 
-- <a href="#BGHJBAII">Section 2.8.1</a> and <a href="#i1010466">Section 2.8.2</a>.)

CREATE TABLE cola_markets (
  mkt_id NUMBER PRIMARY KEY,
  name VARCHAR2(32),
  shape SDO_GEOMETRY);

-- The next INSERT statement creates an area of interest for 
-- Cola A. This area happens to be a rectangle.
-- The area could represent any user-defined criterion: for
-- example, where Cola A is the preferred drink, where
-- Cola A is under competitive pressure, where Cola A
-- has strong growth potential, and so on.
 
INSERT INTO cola_markets VALUES(
  1,
  'cola_a',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,3), -- one rectangle (1003 = exterior)
    SDO_ORDINATE_ARRAY(1,1, 5,7) -- only 2 points needed to
          -- define rectangle (lower left and upper right) with
          -- Cartesian-coordinate data
  )
);

-- The next two INSERT statements create areas of interest for 
-- Cola B and Cola C. These areas are simple polygons (but not
-- rectangles).

INSERT INTO cola_markets VALUES(
  2,
  'cola_b',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
    SDO_ORDINATE_ARRAY(5,1, 8,1, 8,6, 5,7, 5,1)
  )
);

INSERT INTO cola_markets VALUES(
  3,
  'cola_c',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
    SDO_ORDINATE_ARRAY(3,3, 6,3, 6,5, 4,5, 3,3)
  )
);

-- Now insert an area of interest for Cola D. This is a
-- circle with a radius of 2. It is completely outside the
-- first three areas of interest.

INSERT INTO cola_markets VALUES(
  4,
  'cola_d',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,4), -- one circle
    SDO_ORDINATE_ARRAY(8,7, 10,9, 8,11)
  )
);

---------------------------------------------------------------------------
-- UPDATE METADATA VIEW --
---------------------------------------------------------------------------
-- Update the USER_SDO_GEOM_METADATA view. This is required
-- before the Spatial index can be created. Do this only once for each
-- layer (that is, table-column combination; here: COLA_MARKETS and SHAPE).

INSERT INTO user_sdo_geom_metadata
    (TABLE_NAME,
     COLUMN_NAME,
     DIMINFO,
     SRID)
  VALUES (
  'cola_markets',
  'shape',
  SDO_DIM_ARRAY(   -- 20X20 grid
    SDO_DIM_ELEMENT('X', 0, 20, 0.005),
    SDO_DIM_ELEMENT('Y', 0, 20, 0.005)
     ),
  NULL   -- SRID
);

-------------------------------------------------------------------
-- CREATE THE SPATIAL INDEX --
-------------------------------------------------------------------
CREATE INDEX cola_spatial_idx
   ON cola_markets(shape)
   INDEXTYPE IS MDSYS.SPATIAL_INDEX;
-- Preceding statement created an R-tree index.

-------------------------------------------------------------------
-- PERFORM SOME SPATIAL QUERIES --
-------------------------------------------------------------------
-- Return the topological intersection of two geometries.
SELECT SDO_GEOM.SDO_INTERSECTION(c_a.shape, c_c.shape, 0.005)
   FROM cola_markets c_a, cola_markets c_c 
   WHERE c_a.name = 'cola_a' AND c_c.name = 'cola_c';

-- Do two geometries have any spatial relationship?
SELECT SDO_GEOM.RELATE(c_b.shape, 'anyinteract', c_d.shape, 0.005)
  FROM cola_markets c_b, cola_markets c_d
  WHERE c_b.name = 'cola_b' AND c_d.name = 'cola_d';

-- Return the areas of all cola markets.
SELECT name, SDO_GEOM.SDO_AREA(shape, 0.005) FROM cola_markets;

-- Return the area of just cola_a.
SELECT c.name, SDO_GEOM.SDO_AREA(c.shape, 0.005) FROM cola_markets c 
   WHERE c.name = 'cola_a';

-- Return the distance between two geometries.
SELECT SDO_GEOM.SDO_DISTANCE(c_b.shape, c_d.shape, 0.005)
   FROM cola_markets c_b, cola_markets c_d
   WHERE c_b.name = 'cola_b' AND c_d.name = 'cola_d';

-- Is a geometry valid?
SELECT c.name, SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(c.shape, 0.005)
   FROM cola_markets c WHERE c.name = 'cola_c';

-- Is a layer valid? (First, create the results table.)
CREATE TABLE val_results (sdo_rowid ROWID, result VARCHAR2(2000));
CALL SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT('COLA_MARKETS', 'SHAPE', 
  'VAL_RESULTS', 2);
SELECT * from val_results;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1004087"></a>
<div id="SPATL489" class="sect1">
<h2 class="sect1"><span class="secnum">2.2</span> SDO_GEOMETRY <a id="sthref178"></a>Object Type</h2>
<p>With Spatial, the geometric description of a spatial object is stored in a single row, in a single column of object type SDO_GEOMETRY in a user-defined table. Any table that has a column of type SDO_GEOMETRY must have another column, or set of columns, that defines a unique primary key for that table. Tables of this sort are sometimes referred to as spatial tables or spatial geometry tables.</p>
<p>Oracle Spatial defines the object type SDO_GEOMETRY as:</p>
<pre>
CREATE TYPE sdo_geometry AS OBJECT (
 SDO_GTYPE NUMBER, 
 SDO_SRID NUMBER,
 SDO_POINT SDO_POINT_TYPE,
 SDO_ELEM_INFO SDO_ELEM_INFO_ARRAY,
 SDO_ORDINATES SDO_ORDINATE_ARRAY);
</pre>
<p><a id="sthref179"></a><a id="sthref180"></a><a id="sthref181"></a>Oracle Spatial also defines the SDO_POINT_TYPE, SDO_ELEM_INFO_ARRAY, and SDO_ORDINATE_ARRAY types, which are used in the SDO_GEOMETRY type definition, as follows:</p>
<pre>
CREATE TYPE sdo_point_type AS OBJECT (
   X NUMBER,
   Y NUMBER,
   Z NUMBER);
CREATE TYPE sdo_elem_info_array AS VARRAY (1048576) of NUMBER;
CREATE TYPE sdo_ordinate_array AS VARRAY (1048576) of NUMBER;
</pre>
<p><a id="sthref182"></a>Because the maximum SDO_ORDINATE_ARRAY size is 1,048,576 numbers, the maximum number of vertices in an SDO_GEOMETRY object depends on the number of dimensions per vertex: 524,288 for two dimensions, 349,525 for three dimensions, and 262,144 for four dimensions.</p>
<p>The sections that follow describe the semantics of each SDO_GEOMETRY attribute, and then describe some usage considerations (<a href="#i1005610">Section 2.2.6</a>).</p>
<p>The SDO_GEOMETRY object type has methods that provide convenient access to some of the attributes. These methods are described in <a href="#CBBDAFFA">Section 2.3</a>.</p>
<p>Some Spatial data types are described in locations other than this section:</p>
<ul>
<li>
<p><a href="sdo_geocode_concepts.htm#CIHDHEHA">Section 11.2</a> describes data types for geocoding.</p>
</li>
<li>
<p><a class="olink GEORS200" href="../../appdev.112/e11827/geor_datatypes_metadata.htm#GEORS200"><span class="italic">Oracle Spatial GeoRaster Developer's Guide</span></a> describes data types for Oracle Spatial GeoRaster.</p>
</li>
<li>
<p><a class="olink TOPOL120" href="../../appdev.112/e11831/sdo_topo_concepts.htm#TOPOL120"><span class="italic">Oracle Spatial Topology and Network Data Models Developer's Guide</span></a> describes data types for the Oracle Spatial topology data model.</p>
</li>
</ul>
<a id="i1005614"></a>
<div id="SPATL490" class="sect2">
<h3 class="sect2"><span class="secnum">2.2.1</span> SDO_GTYPE</h3>
<p>The <a id="sthref183"></a><a id="sthref184"></a><a id="sthref185"></a>SDO_GTYPE attribute indicates the type of the geometry. Valid geometry types correspond to those specified in the <span class="italic">Geometry Object Model for the OGIS Simple Features for SQL</span> specification (with the exception of Surfaces). The numeric values differ from those given in the OGIS specification, but there is a direct correspondence between the names and semantics where applicable.</p>
<p><a id="sthref186"></a>The SDO_GTYPE value is 4 digits in the format <span class="italic">DLTT</span>, where:</p>
<ul>
<li>
<p><span class="italic">D</span> identifies the number of dimensions (2, 3, or 4)</p>
</li>
<li>
<p><span class="italic">L</span> identifies the linear referencing measure dimension for a three-dimensional linear referencing system (LRS) geometry, that is, which dimension (3 or 4) contains the measure value. For a non-LRS geometry, or to accept the Spatial default of the last dimension as the measure for an LRS geometry, specify 0. For information about the linear referencing system (LRS), see <a href="sdo_lrs_concepts.htm#BABIIFFH">Chapter 7</a>.</p>
</li>
<li>
<p><span class="italic">TT</span> identifies the geometry type (00 through 09, with 10 through 99 reserved for future use).</p>
</li>
</ul>
<p><a href="#g1013735">Table 2-1</a> shows the valid SDO_GTYPE values. The Geometry Type and Description values reflect the OGIS specification.</p>
<div id="SPATL491" class="tblformal">
<p class="titleintable"><a id="sthref187"></a><a id="g1013735"></a>Table 2-1 Valid SDO_GTYPE Values</p>
<table class="cellalignment740" title="Valid SDO_GTYPE Values" summary="Valid SDO_GTYPE Values" >
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t2">Value</th>
<th class="cellalignment741" id="r1c2-t2">Geometry Type</th>
<th class="cellalignment741" id="r1c3-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>00</p>
</td>
<td class="cellalignment742" headers="r2c1-t2 r1c2-t2">
<p>UNKNOWN_GEOMETRY</p>
</td>
<td class="cellalignment742" headers="r2c1-t2 r1c3-t2">
<p>Spatial ignores this geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>01</p>
</td>
<td class="cellalignment742" headers="r3c1-t2 r1c2-t2">
<p>POINT</p>
</td>
<td class="cellalignment742" headers="r3c1-t2 r1c3-t2">
<p>Geometry contains one point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>02</p>
</td>
<td class="cellalignment742" headers="r4c1-t2 r1c2-t2">
<p>LINE or CURVE</p>
</td>
<td class="cellalignment742" headers="r4c1-t2 r1c3-t2">
<p>Geometry contains one line string that can contain straight or circular arc segments, or both. (LINE and CURVE are synonymous in this context.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>03</p>
</td>
<td class="cellalignment742" headers="r5c1-t2 r1c2-t2">
<p>POLYGON or SURFACE</p>
</td>
<td class="cellalignment742" headers="r5c1-t2 r1c3-t2">
<p>Geometry contains one polygon with or without holes,<a id="sthref188" href="#sthref188" onclick='footdisplay(1,"For a polygon with holes, enter the exterior boundary first, followed by any interior boundaries.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a> or one surface consisting of one or more polygons. In a three-dimensional polygon, all points must be on the same plane.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>04</p>
</td>
<td class="cellalignment742" headers="r6c1-t2 r1c2-t2">
<p>COLLECTION</p>
</td>
<td class="cellalignment742" headers="r6c1-t2 r1c3-t2">
<p>Geometry is a heterogeneous collection of elements. COLLECTION is a superset that includes all other types.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>05</p>
</td>
<td class="cellalignment742" headers="r7c1-t2 r1c2-t2">
<p>MULTIPOINT</p>
</td>
<td class="cellalignment742" headers="r7c1-t2 r1c3-t2">
<p>Geometry has one or more points. (MULTIPOINT is a superset of POINT.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>06</p>
</td>
<td class="cellalignment742" headers="r8c1-t2 r1c2-t2">
<p>MULTILINE or MULTICURVE</p>
</td>
<td class="cellalignment742" headers="r8c1-t2 r1c3-t2">
<p>Geometry has one or more line strings. (MULTILINE and MULTICURVE are synonymous in this context, and each is a superset of both LINE and CURVE.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>07</p>
</td>
<td class="cellalignment742" headers="r9c1-t2 r1c2-t2">
<p>MULTIPOLYGON or MULTISURFACE</p>
</td>
<td class="cellalignment742" headers="r9c1-t2 r1c3-t2">
<p>Geometry can have multiple, disjoint polygons (more than one exterior boundary). or surfaces (MULTIPOLYGON is a superset of POLYGON, and MULTISURFACE is a superset of SURFACE.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>08</p>
</td>
<td class="cellalignment742" headers="r10c1-t2 r1c2-t2">
<p>SOLID</p>
</td>
<td class="cellalignment742" headers="r10c1-t2 r1c3-t2">
<p>Geometry consists of multiple surfaces and is completely enclosed in a three-dimensional space. Can be a cuboid or a frustum.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t2" headers="r1c1-t2">
<p><span class="italic">DL</span>09</p>
</td>
<td class="cellalignment742" headers="r11c1-t2 r1c2-t2">
<p>MULTISOLID</p>
</td>
<td class="cellalignment742" headers="r11c1-t2 r1c3-t2">
<p>Geometry can have multiple, disjoint solids (more than one exterior boundary). (MULTISOLID is a superset of SOLID.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>For a polygon with holes, enter the exterior boundary first, followed by any interior boundaries.</p>
<p><a id="sthref189"></a>The <span class="italic">D</span> in the Value column of <a href="#g1013735">Table 2-1</a> is the number of dimensions: 2, 3, or 4. For example, an SDO_GTYPE value of 2003 indicates a two-dimensional polygon. The number of dimensions reflects the number of ordinates used to represent each vertex (for example, <span class="italic">X,Y</span> for two-dimensional objects).</p>
<p>In any given layer (column), all geometries must have the same number of dimensions. For example, you cannot mix two-dimensional and three-dimensional data in the same layer.</p>
<p>The following methods are available for returning the individual <span class="italic">DLTT</span> components of the SDO_GTYPE for a geometry object: Get_Dims, Get_LRS_Dim, and Get_Gtype. These methods are described in <a href="#CBBDAFFA">Section 2.3</a>.</p>
<p>For more information about SDO_GTYPE values for three-dimensional geometries, see <a href="sdo_intro.htm#BABFDHDH">Table 1-1</a> in <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="sect2" -->
<div id="SPATL492" class="sect2"><a id="sthref190"></a>
<h3 class="sect2"><span class="secnum">2.2.2</span> SDO_SRID</h3>
<p>The <a id="sthref191"></a><a id="sthref192"></a>SDO_SRID attribute can be used to identify a coordinate system (spatial reference system) to be associated with the geometry. If SDO_SRID is null, no coordinate system is associated with the geometry. If SDO_SRID is not null, it must contain a value from the SRID column of the SDO_COORD_REF_SYS table (described in <a href="sdo_cs_concepts.htm#CIHFBGGA">Section 6.7.9</a>), and this value must be inserted into the SRID column of the USER_SDO_GEOM_METADATA view (described in <a href="#i1001937">Section 2.8</a>).</p>
<p>All geometries in a geometry column must have the same SDO_SRID value if a spatial index will be built on that column.</p>
<p>For information about coordinate systems, see <a href="sdo_cs_concepts.htm#g1002522">Chapter 6</a>.</p>
</div>
<!-- class="sect2" -->
<a id="g1019115"></a>
<div id="SPATL493" class="sect2">
<h3 class="sect2"><span class="secnum">2.2.3</span> SDO_POINT</h3>
<p>The <a id="sthref193"></a>SDO_POINT attribute is defined using the SDO_POINT_TYPE object type, which has the attributes X, Y, and Z, all of type NUMBER. (The SDO_POINT_TYPE definition is shown in <a href="#i1004087">Section 2.2</a>.) If the SDO_ELEM_INFO and SDO_ORDINATES arrays are both null, and the SDO_POINT attribute is non-null, then the X, Y, and Z values are considered to be the coordinates for a point geometry. Otherwise, the SDO_POINT attribute is ignored by Spatial. You should store point geometries in the SDO_POINT attribute for optimal storage; and if you have only point geometries in a layer, it is strongly recommended that you store the point geometries in the SDO_POINT attribute.</p>
<p><a href="#BGHIFACF">Section 2.7.5</a> illustrates a point geometry and provides examples of inserting and querying point geometries.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do not use the SDO_POINT attribute in defining a linear referencing system (LRS) point or an oriented point. For information about LRS, see <a href="sdo_lrs_concepts.htm#BABIIFFH">Chapter 7</a>. For information about oriented points, see <a href="#CBBIGEFH">Section 2.7.6</a>.</div>
</div>
<!-- class="sect2" -->
<a id="i1006226"></a>
<div id="SPATL494" class="sect2">
<h3 class="sect2"><span class="secnum">2.2.4</span> SDO_ELEM_INFO</h3>
<p>The <a id="sthref194"></a><a id="sthref195"></a>SDO_ELEM_INFO attribute is defined using a varying length array of numbers. This attribute lets you know how to interpret the ordinates stored in the SDO_ORDINATES attribute (described in <a href="#i1013373">Section 2.2.5</a>).</p>
<p>Each triplet set of numbers is interpreted as follows:</p>
<ul>
<li>
<p><a id="sthref196"></a>SDO_STARTING_OFFSET -- Indicates the offset within the SDO_ORDINATES array where the first ordinate for this element is stored. Offset values start at 1 and not at 0. Thus, the first ordinate for the first element will be at SDO_GEOMETRY.SDO_ORDINATES(1). If there is a second element, its first ordinate will be at SDO_GEOMETRY.SDO_ORDINATES(<span class="italic">n</span>), where <span class="italic">n</span> reflects the position within the SDO_ORDINATE_ARRAY definition (for example, 19 for the 19th number, as in <a href="#i1012271">Figure 2-4</a> in <a href="#BGHGAHHG">Section 2.7.2</a>).</p>
</li>
<li>
<p><a id="sthref197"></a><a id="sthref198"></a>SDO_ETYPE -- Indicates the type of the element. Valid values are shown in <a href="#BGHDGCCE">Table 2-2</a>.</p>
<p><a id="sthref199"></a>SDO_ETYPE values 1, 2, 1003, and 2003 are considered <span class="italic">simple elements</span>. They are defined by a single triplet entry in the SDO_ELEM_INFO array. For SDO_ETYPE values 1003 and 2003, the first digit indicates <span class="italic">exterior</span> (1) or <span class="italic">interior</span> (2):</p>
<p><a id="sthref200"></a><a id="sthref201"></a><a id="sthref202"></a><a id="sthref203"></a>1003: exterior polygon ring (must be specified in counterclockwise order)</p>
<p>2003: interior polygon ring (must be specified in clockwise order)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The use of 3 as an SDO_ETYPE value for polygon ring elements in a single geometry is discouraged. You should specify 3 only if you do not know if the simple polygon is exterior or interior, and you should then upgrade the table or layer to the current format using the <a href="sdo_objmigr.htm#i856634">SDO_MIGRATE.TO_CURRENT</a> procedure, described in <a href="sdo_objmigr.htm#g999102">Chapter 26</a>.
<p>You cannot mix 1-digit and 4-digit SDO_ETYPE values in a single geometry.</p>
</div>
<p><a id="sthref204"></a>SDO_ETYPE values 4, 1005, 2005, 1006, and 2006 are considered <span class="italic">compound elements</span>. They contain at least one header triplet with a series of triplet values that belong to the compound element. For 4-digit SDO_ETYPE values, the first digit indicates <span class="italic">exterior</span> (1) or <span class="italic">interior</span> (2):</p>
<p><a id="sthref205"></a><a id="sthref206"></a><a id="sthref207"></a>1005: exterior polygon ring (must be specified in counterclockwise order)</p>
<p>2005: interior polygon ring (must be specified in clockwise order)</p>
<p><a id="sthref208"></a>1006: exterior surface consisting of one or more polygon rings</p>
<p>2006: interior surface in a solid element</p>
<p><a id="sthref209"></a><a id="sthref210"></a><a id="sthref211"></a>1007: solid element</p>
<p>The elements of a compound element are contiguous. The last point of a subelement in a compound element is the first point of the next subelement. The point is not repeated.</p>
</li>
<li>
<p><a id="sthref212"></a><a id="sthref213"></a>SDO_INTERPRETATION -- Means one of two things, depending on whether or not SDO_ETYPE is a compound element.</p>
<p>If SDO_ETYPE is a compound element (4, 1005, or 2005), this field specifies how many subsequent triplet values are part of the element.</p>
<p>If the SDO_ETYPE is not a compound element (1, 2, 1003, or 2003), the interpretation attribute determines how the sequence of ordinates for this element is interpreted. For example, a line string or polygon boundary may be made up of a sequence of connected straight line segments or circular arcs.</p>
<p>Descriptions of valid SDO_ETYPE and SDO_INTERPRETATION value pairs are given in <a href="#BGHDGCCE">Table 2-2</a>.</p>
</li>
</ul>
<p>If a geometry consists of more than one element, then the last ordinate for an element is always one less than the starting offset for the next element. The last element in the geometry is described by the ordinates from its starting offset to the end of the SDO_ORDINATES varying length array.</p>
<p>For compound elements (SDO_ETYPE values 4, 1005, or 2005), a set of <span class="italic">n</span> triplets (one for each subelement) is used to describe the element. It is important to remember that subelements of a compound element are contiguous. The last point of a subelement is the first point of the next subelement. For subelements 1 through <span class="italic">n</span>-1, the end point of one subelement is the same as the starting point of the next subelement. The starting point for subelements 2...<span class="italic">n</span>-2 is the same as the end point of subelement 1...<span class="italic">n</span>-1. The last ordinate of subelement <span class="italic">n</span> is either the starting offset minus 1 of the next element in the geometry, or the last ordinate in the SDO_ORDINATES varying length array.</p>
<p>The current size of a varying length array can be determined by using the function varray_variable.Count in PL/SQL or OCICollSize in the Oracle Call Interface (OCI).</p>
<p><a id="sthref214"></a><a id="sthref215"></a>The semantics of each SDO_ETYPE element and the relationship between the SDO_ELEM_INFO and SDO_ORDINATES varying length arrays for each of these SDO_ETYPE elements are given in <a href="#BGHDGCCE">Table 2-2</a>.</p>
<div id="SPATL495" class="tblformal">
<p class="titleintable"><a id="sthref216"></a><a id="BGHDGCCE"></a>Table 2-2 Values and Semantics in SDO_ELEM_INFO</p>
<table class="cellalignment740" title="Values and Semantics in SDO_ELEM_INFO" summary="Values and Semantics in SDO_ELEM_INFO" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t5">SDO_ETYPE</th>
<th class="cellalignment741" id="r1c2-t5">SDO_INTERPRETATION</th>
<th class="cellalignment741" id="r1c3-t5">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t5" headers="r1c1-t5">
<p>0</p>
</td>
<td class="cellalignment742" headers="r2c1-t5 r1c2-t5">
<p>(any numeric value)</p>
</td>
<td class="cellalignment742" headers="r2c1-t5 r1c3-t5">
<p>Type 0 (zero) element. Used to model geometry types not supported by Oracle Spatial. For more information, see <a href="#BGHBAIDC">Section 2.7.7</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t5" headers="r1c1-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r3c1-t5 r1c2-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r3c1-t5 r1c3-t5">
<p>Point type.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t5" headers="r1c1-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r4c1-t5 r1c2-t5">
<p>0</p>
</td>
<td class="cellalignment742" headers="r4c1-t5 r1c3-t5">
<p>Orientation for an oriented point. For more information, see <a href="#CBBIGEFH">Section 2.7.6</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t5" headers="r1c1-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r5c1-t5 r1c2-t5">
<p><span class="italic">n</span> &gt; 1</p>
</td>
<td class="cellalignment742" headers="r5c1-t5 r1c3-t5">
<p>Point cluster with <span class="italic">n</span> points.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t5" headers="r1c1-t5">
<p>2</p>
</td>
<td class="cellalignment742" headers="r6c1-t5 r1c2-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r6c1-t5 r1c3-t5">
<p>Line string whose vertices are connected by straight line segments.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t5" headers="r1c1-t5">
<p>2</p>
</td>
<td class="cellalignment742" headers="r7c1-t5 r1c2-t5">
<p>2</p>
</td>
<td class="cellalignment742" headers="r7c1-t5 r1c3-t5">
<p>Line string made up of a connected sequence of circular arcs.</p>
<p>Each circular arc is described using three coordinates: the start point of the arc, any point on the arc, and the end point of the arc. The coordinates for a point designating the end of one arc and the start of the next arc are not repeated. For example, five coordinates are used to describe a line string made up of two connected circular arcs. Points 1, 2, and 3 define the first arc, and points 3, 4, and 5 define the second arc, where point 3 is only stored once.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t5" headers="r1c1-t5">
<p>1003 or 2003</p>
</td>
<td class="cellalignment742" headers="r8c1-t5 r1c2-t5">
<p>1</p>
</td>
<td class="cellalignment742" headers="r8c1-t5 r1c3-t5">
<p>Simple polygon whose vertices are connected by straight line segments. You must specify a point for each vertex; and the last point specified must be exactly the same point as the first (within the tolerance value), to close the polygon. For example, for a 4-sided polygon, specify 5 points, with point 5 the same as point 1.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t5" headers="r1c1-t5">
<p>1003 or 2003</p>
</td>
<td class="cellalignment742" headers="r9c1-t5 r1c2-t5">
<p>2</p>
</td>
<td class="cellalignment742" headers="r9c1-t5 r1c3-t5">
<p>Polygon made up of a connected sequence of circular arcs that closes on itself. The end point of the last arc is the same as the start point of the first arc.</p>
<p>Each circular arc is described using three coordinates: the start point of the arc, any point on the arc, and the end point of the arc. The coordinates for a point designating the end of one arc and the start of the next arc are not repeated. For example, five coordinates are used to describe a polygon made up of two connected circular arcs. Points 1, 2, and 3 define the first arc, and points 3, 4, and 5 define the second arc. The coordinates for points 1 and 5 must be the same (tolerance is not considered), and point 3 is not repeated.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t5" headers="r1c1-t5">
<p>1003 or 2003</p>
</td>
<td class="cellalignment742" headers="r10c1-t5 r1c2-t5">
<p>3</p>
</td>
<td class="cellalignment742" headers="r10c1-t5 r1c3-t5">
<p><a id="sthref217"></a><a id="sthref218"></a>Rectangle type (sometimes called <span class="italic">optimized rectangle</span>). A bounding rectangle such that only two points, the lower-left and the upper-right, are required to describe it. The rectangle type can be used with geodetic or non-geodetic data. However, with geodetic data, use this type only to create a query window (not for storing objects in the database).</p>
<p>For information about using this type with geodetic data, including examples, see <a href="sdo_cs_concepts.htm#CIHHGHFH">Section 6.2.4</a>. For information about creating three-dimensional optimized rectangles, see <a href="sdo_intro.htm#BABIIGCD">Section 1.11.3</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t5" headers="r1c1-t5">
<p>1003 or 2003</p>
</td>
<td class="cellalignment742" headers="r11c1-t5 r1c2-t5">
<p>4</p>
</td>
<td class="cellalignment742" headers="r11c1-t5 r1c3-t5">
<p><a id="sthref219"></a>Circle type. Described by three distinct non-colinear points, all on the circumference of the circle.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t5" headers="r1c1-t5">
<p>4</p>
</td>
<td class="cellalignment742" headers="r12c1-t5 r1c2-t5">
<p><span class="italic">n</span> &gt; 1</p>
</td>
<td class="cellalignment742" headers="r12c1-t5 r1c3-t5">
<p><a id="sthref220"></a><a id="sthref221"></a>Compound line string with some vertices connected by straight line segments and some by circular arcs. The value <span class="italic">n</span> in the Interpretation column specifies the number of contiguous subelements that make up the line string.</p>
<p>The next <span class="italic">n</span> triplets in the SDO_ELEM_INFO array describe each of these subelements. The subelements can only be of SDO_ETYPE 2. The last point of a subelement is the first point of the next subelement, and must not be repeated.</p>
<p>See <a href="#i1011939">Section 2.7.3</a> and <a href="#i1006698">Figure 2-5</a> for an example of a compound line string geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r13c1-t5" headers="r1c1-t5">
<p>1005 or 2005</p>
</td>
<td class="cellalignment742" headers="r13c1-t5 r1c2-t5">
<p><span class="italic">n</span> &gt; 1</p>
</td>
<td class="cellalignment742" headers="r13c1-t5 r1c3-t5">
<p><a id="sthref222"></a><a id="sthref223"></a>Compound polygon with some vertices connected by straight line segments and some by circular arcs. The value <span class="italic">n</span> in the Interpretation column specifies the number of contiguous subelements that make up the polygon.</p>
<p>The next <span class="italic">n</span> triplets in the SDO_ELEM_INFO array describe each of these subelements. The subelements can only be of SDO_ETYPE 2. The end point of a subelement is the start point of the next subelement, and it must not be repeated. The start and end points of the polygon must be exactly the same point (tolerance is ignored).</p>
<p>See <a href="#i1005726">Section 2.7.4</a> and <a href="#i1008220">Figure 2-6</a> for an example of a compound polygon geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r14c1-t5" headers="r1c1-t5">
<p>1006 or 2006</p>
</td>
<td class="cellalignment742" headers="r14c1-t5 r1c2-t5">
<p><span class="italic">n</span> &gt; 1</p>
</td>
<td class="cellalignment742" headers="r14c1-t5 r1c3-t5">
<p><a id="sthref224"></a>Surface consisting of one or more polygons, with each edge shared by no more than two polygons. A surface contains an area but not a volume. The value <span class="italic">n</span> in the Interpretation column specifies the number of polygons that make up the surface.</p>
<p>The next <span class="italic">n</span> triplets in the SDO_ELEM_INFO array describe each of these polygon subelements.</p>
<p>A surface must be three-dimensional. For an explanation of three-dimensional support in Spatial, see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r15c1-t5" headers="r1c1-t5">
<p>1007</p>
</td>
<td class="cellalignment742" headers="r15c1-t5 r1c2-t5">
<p><span class="italic">n</span> = 1 or 3</p>
</td>
<td class="cellalignment742" headers="r15c1-t5 r1c3-t5">
<p><a id="sthref225"></a>Solid consisting of multiple surfaces that are completely enclosed in a three-dimensional space, so that the solid has an interior volume. A solid element can have one exterior surface defined by the 1006 elements and zero or more interior boundaries defined by the 2006 elements. The value <span class="italic">n</span> in the Interpretation column must be 1 or 3.</p>
<p>Subsequent triplets in the SDO_ELEM_INFO array describe the exterior 1006 and optional interior 2006 surfaces that make up the solid element.</p>
<p><a id="sthref226"></a><a id="sthref227"></a>If <span class="italic">n</span> is 3, the solid is an <span class="italic">optimized box</span>, such that only two three-dimensional points are required to define it: one with minimum values for the box in the X, Y, and Z dimensions and another with maximum values for the box in the X, Y, and Z dimensions. For example: <code>SDO_GEOMETRY(3008, NULL, NULL, SDO_ELEM_INFO_ARRAY(1,1007,3), SDO_ORDINATE_ARRAY(1,1,1, 3,3,3))</code></p>
<p>For an explanation of three-dimensional support in Spatial, see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i1013373"></a>
<div id="SPATL496" class="sect2">
<h3 class="sect2"><span class="secnum">2.2.5</span> SDO_ORDINATES</h3>
<p>The <a id="sthref228"></a>SDO_ORDINATES attribute is defined using a varying length array (1048576) of NUMBER type that stores the coordinate values that make up the boundary of a spatial object. This array must always be used in conjunction with the SDO_ELEM_INFO varying length array. The values in the array are ordered by dimension. For example, a polygon whose boundary has four two-dimensional points is stored as {X1, Y1, X2, Y2, X3, Y3, X4, Y4, X1, Y1}. If the points are three-dimensional, then they are stored as {X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, X4, Y4, Z4, X1, Y1, Z1}. The number of dimensions associated with each point is stored as metadata in the xxx_SDO_GEOM_METADATA views, described in <a href="#i1001937">Section 2.8</a>.</p>
<p>The values in the SDO_ORDINATES array must all be valid and non-null. There are no special values used to delimit elements in a multielement geometry. The start and end points for the sequence describing a specific element are determined by the STARTING_OFFSET values for that element and the next element in the SDO_ELEM_INFO array, as explained in <a href="#i1006226">Section 2.2.4</a>. The offset values start at 1. SDO_ORDINATES(1) is the first ordinate of the first point of the first element.</p>
</div>
<!-- class="sect2" -->
<a id="i1005610"></a>
<div id="SPATL497" class="sect2">
<h3 class="sect2"><span class="secnum">2.2.6</span> Usage Considerations</h3>
<p>You should use the SDO_GTYPE values as shown in <a href="#g1013735">Table 2-1</a>; however, Spatial does not check or enforce all geometry consistency constraints. Spatial does check the following:</p>
<ul>
<li>
<p>For SDO_GTYPE values <span class="italic">d</span>001 and <span class="italic">d</span>005, any subelement not of SDO_ETYPE 1 is ignored.</p>
</li>
<li>
<p>For SDO_GTYPE values <span class="italic">d</span>002 and <span class="italic">d</span>006, any subelement not of SDO_ETYPE 2 or 4 is ignored.</p>
</li>
<li>
<p>For SDO_GTYPE values <span class="italic">d</span>003 and <span class="italic">d</span>007, any subelement not of SDO_ETYPE 3 or 5 is ignored. (This includes SDO_ETYPE variants 1003, 2003, 1005, and 2005, which are explained in <a href="#i1006226">Section 2.2.4</a>).</p>
</li>
</ul>
<p>The <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function can be used to evaluate the consistency of a single geometry object or of all geometry objects in a specified feature table.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBDAFFA"></a>
<div id="SPATL498" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.3</span> <a id="sthref229"></a><a id="sthref230"></a>SDO_GEOMETRY Methods</h2>
<p>The SDO_GEOMETRY object type (described in <a href="#i1004087">Section 2.2</a>) has methods (member functions) that retrieve information about a geometry object. <a href="#CBBCCIIA">Table 2-3</a> lists these methods.</p>
<div id="SPATL499" class="tblformal">
<p class="titleintable"><a id="sthref231"></a><a id="CBBCCIIA"></a>Table 2-3 SDO_GEOMETRY Methods</p>
<table class="cellalignment740" title="SDO_GEOMETRY Methods" summary="SDO_GEOMETRY Methods (member functions)" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t6">Name</th>
<th class="cellalignment741" id="r1c2-t6">Returns</th>
<th class="cellalignment741" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t6" headers="r1c1-t6">
<p><a id="sthref232"></a><a id="sthref233"></a><a id="sthref234"></a><a id="sthref235"></a>Get_Dims</p>
</td>
<td class="cellalignment742" headers="r2c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r2c1-t6 r1c3-t6">
<p>Returns the number of dimensions of a geometry object, as specified in its SDO_GTYPE value. In Oracle Spatial, the Get_Dims and ST_CoordDim methods return the same result.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t6" headers="r1c1-t6">
<p><a id="sthref236"></a><a id="sthref237"></a><a id="sthref238"></a><a id="sthref239"></a>Get_GType</p>
</td>
<td class="cellalignment742" headers="r3c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r3c1-t6 r1c3-t6">
<p>Returns the geometry type of a geometry object, as specified in its SDO_GTYPE value.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t6" headers="r1c1-t6">
<p><a id="sthref240"></a><a id="sthref241"></a><a id="sthref242"></a><a id="sthref243"></a><a id="sthref244"></a>Get_LRS_Dim</p>
</td>
<td class="cellalignment742" headers="r4c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r4c1-t6 r1c3-t6">
<p>Returns the measure dimension of an LRS geometry object, as specified in its SDO_GTYPE value.</p>
<p>A return value of 0 indicates that the geometry is a standard (non-LRS) geometry, or is an LRS geometry in the format before release 9.0.1 and with measure as the default (last) dimension; 3 indicates that the third dimension contains the measure information; 4 indicates that the fourth dimension contains the measure information.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t6" headers="r1c1-t6">
<p><a id="sthref245"></a><a id="sthref246"></a>Get_WKB</p>
</td>
<td class="cellalignment742" headers="r5c1-t6 r1c2-t6">
<p>BLOB</p>
</td>
<td class="cellalignment742" headers="r5c1-t6 r1c3-t6">
<p>Returns the well-known binary (WKB) format of a geometry object. (The returned object does not include any SRID information.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t6" headers="r1c1-t6">
<p><a id="sthref247"></a><a id="sthref248"></a>Get_WKT</p>
</td>
<td class="cellalignment742" headers="r6c1-t6 r1c2-t6">
<p>CLOB</p>
</td>
<td class="cellalignment742" headers="r6c1-t6 r1c3-t6">
<p>Returns the well-known text (WKT) format (explained in <a href="sdo_cs_concepts.htm#i890447">Section 6.8.1.1</a>) of a geometry object. (The returned object does not include any SRID information.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t6" headers="r1c1-t6">
<p><a id="sthref249"></a><a id="sthref250"></a><a id="sthref251"></a>ST_CoordDim</p>
</td>
<td class="cellalignment742" headers="r7c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r7c1-t6 r1c3-t6">
<p>Returns the coordinate dimension (as defined by the ISO/IEC SQL Multimedia standard) of a geometry object. In Oracle Spatial, the Get_Dims and ST_CoordDim methods return the same result.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t6" headers="r1c1-t6">
<p><a id="sthref252"></a><a id="sthref253"></a>ST_IsValid</p>
</td>
<td class="cellalignment742" headers="r8c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r8c1-t6 r1c3-t6">
<p>Returns 0 if a geometry object is invalid or 1 if it is valid. (The ISO/IEC SQL Multimedia standard uses the term <span class="italic">well formed</span> for <span class="italic">valid</span> in this context.)</p>
<p>This method uses 0.001 as the tolerance value. (Tolerance is explained in <a href="sdo_intro.htm#i884589">Section 1.5.5</a>.) To specify a different tolerance value or to learn more about why a geometry is invalid, use the <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function, which is documented in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CBBECBJF">Example 2-2</a> shows most of the SDO_GEOMETRY methods. (The Get_WKB method is not included because its output cannot be displayed by SQL*Plus.)</p>
<div id="SPATL500" class="example">
<p class="titleinexample"><a id="CBBECBJF"></a>Example 2-2 SDO_GEOMETRY Methods</p>
<pre>
SELECT c.shape.Get_Dims()
  FROM cola_markets c WHERE c.name = 'cola_b';
 
C.SHAPE.GET_DIMS()                                                              
------------------                                                              
                 2                                                              
 
SELECT c.shape.Get_GType()
  FROM cola_markets c WHERE c.name = 'cola_b';
 
C.SHAPE.GET_GTYPE()                                                             
-------------------                                                             
                  3                                                             
 
SELECT a.route_geometry.Get_LRS_Dim()
  FROM lrs_routes a WHERE  a.route_id = 1;
 
A.ROUTE_GEOMETRY.GET_LRS_DIM()                                                  
------------------------------                                                  
                             3 

SELECT c.shape.Get_WKT()
  FROM cola_markets c WHERE c.name = 'cola_b';
 
C.SHAPE.GET_WKT()                                                               
--------------------------------------------------------------------------------
POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))                         
 
SELECT c.shape.ST_CoordDim()
  FROM cola_markets c WHERE c.name = 'cola_b';
 
C.SHAPE.ST_COORDDIM()                                                           
---------------------                                                           
                    2                                                           
 
SELECT c.shape.ST_IsValid()
  FROM cola_markets c WHERE c.name = 'cola_b';
 
C.SHAPE.ST_ISVALID()                                                            
--------------------                                                            
                   1 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CBBFGHAE"></a>
<div id="SPATL501" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.4</span> <a id="sthref254"></a><a id="sthref255"></a>SDO_GEOMETRY Constructors</h2>
<p>The SDO_GEOMETRY object type (described in <a href="#i1004087">Section 2.2</a>) has constructors that create a geometry object from a well-known text (WKT) string in CLOB or VARCHAR2 format, or from a well-known binary (WKB) object in BLOB format. The following constructor formats are available:</p>
<pre>
SDO_GEOMETRY(wkt CLOB, srid NUMBER DEFAULT NULL);
SDO_GEOMETRY(wkt VARCHAR2, srid NUMBER DEFAULT NULL);
SDO_GEOMETRY(wkb BLOB, srid NUMBER DEFAULT NULL);
</pre>
<p>If the created geometry is inserted into a table, the SRID value used with the constructor must match the SDO_SRID value of the geometries in the table.</p>
<p>The following simple example constructs a point geometry using a well-known text string. (In a WKT, spaces separate ordinates of a vertex, and commas separate vertices.)</p>
<pre>
SELECT SDO_GEOMETRY('POINT(-79 37)') FROM DUAL;
 
SDO_GEOMETRY('POINT(-7937)')(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SDO_ELEM_I
--------------------------------------------------------------------------------
SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(-79, 37, NULL), NULL, NULL)
</pre>
<p><a href="#CBBJDHAB">Example 2-3</a> shows SDO_GEOMETRY constructors that create geometry objects, insert the objects into a table, and display the objects that were added to the table.</p>
<div id="SPATL502" class="example">
<p class="titleinexample"><a id="CBBJDHAB"></a>Example 2-3 SDO_GEOMETRY Constructors to Create Geometries</p>
<pre>
DECLARE
  cola_b_wkb  BLOB;
  cola_b_wkt_clob  CLOB;
  cola_b_wkt_varchar  VARCHAR2(255);
  cola_b_geom  SDO_GEOMETRY;

BEGIN
-- Get cola_b geometry into CLOB, VARCHAR2, and BLOB objects,
-- for use by the constructor.
SELECT c.shape.Get_WKT() INTO cola_b_wkt_clob
  FROM cola_markets c WHERE c.name = 'cola_b';
cola_b_wkt_varchar := cola_b_wkt_clob;
SELECT c.shape.Get_WKB() INTO cola_b_wkb
  FROM cola_markets c WHERE c.name = 'cola_b';

-- Use some SDO_GEOMETRY constructors;
-- insert 3 geometries into the table; display the geometries later.
cola_b_geom := SDO_GEOMETRY(cola_b_wkt_clob);
INSERT INTO cola_markets VALUES (101, 'cola_b_from_clob', cola_b_geom);
cola_b_geom := SDO_GEOMETRY(cola_b_wkt_varchar);
INSERT INTO cola_markets VALUES (102, 'cola_b_from_varchar', cola_b_geom);
cola_b_geom := SDO_GEOMETRY(cola_b_wkb);
INSERT INTO cola_markets VALUES (103, 'cola_b_from_wkb', cola_b_geom);
END;
/
 
PL/SQL procedure successfully completed.
 
-- Display the geometries created using SDO_GEOMETRY constructors.
-- All three geometries are identical.
SELECT name, shape FROM cola_markets WHERE mkt_id &gt; 100;
 
NAME                                                                            
--------------------------------                                                
SHAPE(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SDO_ELEM_INFO, SDO_ORDINATES)    
--------------------------------------------------------------------------------
cola_b_from_clob                                                                
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1))                                               
                                                                                
cola_b_from_varchar                                                             
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1))                                               
                                                                                
cola_b_from_wkb                                                                 
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1))
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CBBFDFCJ"></a>
<div id="SPATL503" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.5</span> TIN-Related Object Types</h2>
<p>This section describes the following object types related to support for triangulated irregular networks (TINs):</p>
<ul>
<li>
<p>SDO_TIN</p>
</li>
<li>
<p>SDO_TIN_BLK_TYPE</p>
</li>
<li>
<p>SDO_TIN_BLK</p>
</li>
</ul>
<div id="SPATL504" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref256"></a>
<h3 class="sect2"><span class="secnum">2.5.1</span> <a id="sthref257"></a>SDO_TIN Object Type</h3>
<p>The description of a TIN is stored in a single row, in a single column of object type SDO_TIN in a user-defined table. The object type SDO_TIN is defined as:</p>
<pre>
CREATE TYPE sdo_tin AS OBJECT
  (base_table          VARCHAR2(70),
   base_table_col      VARCHAR2(1024),
   tin_id              NUMBER.
   blk_table           VARCHAR2(70),
   ptn_params          VARCHAR2(1024),
   tin_extent          SDO_GEOMETRY,
   tin_tol             NUMBER,
   tin_tot_dimensions  NUMBER,
   tin_domain          SDO_ORGSCL_TYPE,
   tin_break_lines     SDO_GEOMETRY,
   tin_stop_lines      SDO_GEOMETRY,
   tin_void_rgns       SDO_GEOMETRY,
   tin_val_attr_tables SDO_STRING_ARRAY,
   tin_other_attrs     XMLTYPE);
</pre>
<p>The SDO_TIN type has the attributes shown in <a href="#BABEFGAJ">Table 2-4</a>.</p>
<div id="SPATL505" class="tblformal">
<p class="titleintable"><a id="sthref258"></a><a id="BABEFGAJ"></a>Table 2-4 SDO_TIN Type Attributes</p>
<table class="cellalignment740" title="SDO_TIN Type Attributes" summary="SDO_TIN Type Attributes" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t7">Attribute</th>
<th class="cellalignment741" id="r1c2-t7">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t7" headers="r1c1-t7">
<p>BASE_TABLE</p>
</td>
<td class="cellalignment742" headers="r2c1-t7 r1c2-t7">
<p>Name of the base table containing a column of type SDO_TIN</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t7" headers="r1c1-t7">
<p>BASE_TABLE_COL</p>
</td>
<td class="cellalignment742" headers="r3c1-t7 r1c2-t7">
<p>Name of the column of type SDO_TIN in the base table</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t7" headers="r1c1-t7">
<p>TIN_ID</p>
</td>
<td class="cellalignment742" headers="r4c1-t7 r1c2-t7">
<p>ID number for the TIN. (This unique ID number is generated by Spatial. It is unique within the schema for base tables containing a column of type SDO_TIN.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t7" headers="r1c1-t7">
<p>BLK_TABLE</p>
</td>
<td class="cellalignment742" headers="r5c1-t7 r1c2-t7">
<p>Name of the table that contains information about each block in the TIN. This table contains the columns shown in <a href="#CBBCIECB">Table 2-5</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t7" headers="r1c1-t7">
<p>PTN_PARAMS</p>
</td>
<td class="cellalignment742" headers="r6c1-t7 r1c2-t7">
<p>Parameters for partitioning the TIN</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t7" headers="r1c1-t7">
<p>TIN_EXTENT</p>
</td>
<td class="cellalignment742" headers="r7c1-t7 r1c2-t7">
<p>SDO_GEOMETRY object representing the spatial extent of the TIN (the minimum bounding object enclosing all objects in the TIN)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t7" headers="r1c1-t7">
<p>TIN_TOL</p>
</td>
<td class="cellalignment742" headers="r8c1-t7 r1c2-t7">
<p>Tolerance value for objects in the TIN. (For information about spatial tolerance, see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t7" headers="r1c1-t7">
<p>TIN_TOT_DIMENSIONS</p>
</td>
<td class="cellalignment742" headers="r9c1-t7 r1c2-t7">
<p>Total number of dimensions in the TIN. Includes spatial dimensions and any nonspatial dimensions, up to a maximum total of 9.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t7" headers="r1c1-t7">
<p>TIN_DOMAIN</p>
</td>
<td class="cellalignment742" headers="r10c1-t7 r1c2-t7">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t7" headers="r1c1-t7">
<p>TIN_BREAK_LINES</p>
</td>
<td class="cellalignment742" headers="r11c1-t7 r1c2-t7">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t7" headers="r1c1-t7">
<p>TIN_STOP_LINES</p>
</td>
<td class="cellalignment742" headers="r12c1-t7 r1c2-t7">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r13c1-t7" headers="r1c1-t7">
<p>TIN_VOID_RGNS</p>
</td>
<td class="cellalignment742" headers="r13c1-t7 r1c2-t7">
<p>(Not currently used.).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r14c1-t7" headers="r1c1-t7">
<p>TIN_VAL_ATTR_TABLES</p>
</td>
<td class="cellalignment742" headers="r14c1-t7 r1c2-t7">
<p>SDO_STRING_ARRAY object specifying the names of any value attribute tables for the TIN. Type SDO_STRING_ARRAY is defined as <code>VARRAY(1048576) OF VARCHAR2(32)</code>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r15c1-t7" headers="r1c1-t7">
<p>TIN_OTHER_ATTRS</p>
</td>
<td class="cellalignment742" headers="r15c1-t7 r1c2-t7">
<p>XMLTYPE object specifying any other attributes of the TIN</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CBBHHHHC">Figure 2-2</a> shows the storage model for TIN data, in which the TIN block table (specified in the BLK_TABLE attribute of the SDO_TIN type) stores the blocks associated with the SDO_TIN object.</p>
<div id="SPATL506" class="figure">
<p class="titleinfigure"><a id="CBBHHHHC"></a>Figure 2-2 Storage of TIN Data</p>
<img width="508" height="407" src="img/tin_storage.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref259" href="img_text/tin_storage.htm">Description of "Figure 2-2 Storage of TIN Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The TIN block table contains the columns shown in <a href="#CBBCIECB">Table 2-5</a>.</p>
<div id="SPATL507" class="tblformal">
<p class="titleintable"><a id="sthref260"></a><a id="CBBCIECB"></a>Table 2-5 Columns in the TIN Block Table</p>
<table class="cellalignment740" title="Columns in the TIN Block Table" summary="Columns in the xxx_SDO_INDEX_INFO Views" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t8">Column Name</th>
<th class="cellalignment741" id="r1c2-t8">Data Type</th>
<th class="cellalignment741" id="r1c3-t8">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t8" headers="r1c1-t8">
<p>BLK_ID</p>
</td>
<td class="cellalignment742" headers="r2c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r2c1-t8 r1c3-t8">
<p>ID number of the block.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t8" headers="r1c1-t8">
<p>BLK_EXTENT</p>
</td>
<td class="cellalignment742" headers="r3c1-t8 r1c2-t8">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment742" headers="r3c1-t8 r1c3-t8">
<p>Spatial extent of the block.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t8" headers="r1c1-t8">
<p>BLK_DOMAIN</p>
</td>
<td class="cellalignment742" headers="r4c1-t8 r1c2-t8">
<p>SDO_ORGSCL_TYPE</p>
</td>
<td class="cellalignment742" headers="r4c1-t8 r1c3-t8">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t8" headers="r1c1-t8">
<p>PCBLK_MIN_RES</p>
</td>
<td class="cellalignment742" headers="r5c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r5c1-t8 r1c3-t8">
<p>For point cloud data, the minimum resolution level at which the block is visible in a query. The block is retrieved only if the query window intersects the spatial extent of the block and if the minimum - maximum resolution interval of the block intersects the minimum - maximum resolution interval of the query. Usually, lower values mean farther from the view point, and higher values mean closer to the view point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t8" headers="r1c1-t8">
<p>PCBLK_MAX_RES</p>
</td>
<td class="cellalignment742" headers="r6c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r6c1-t8 r1c3-t8">
<p>For point cloud data, the maximum resolution level at which the block is visible in a query. The block is retrieved only if the query window intersects the spatial extent of the block and if the minimum - maximum resolution interval of the block intersects the minimum - maximum resolution interval of the query. Usually, lower values mean farther from the view point, and higher values mean closer to the view point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t8" headers="r1c1-t8">
<p>NUM_POINTS</p>
</td>
<td class="cellalignment742" headers="r7c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r7c1-t8 r1c3-t8">
<p>For point cloud data, the total number of points in the POINTS BLOB</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t8" headers="r1c1-t8">
<p>NUM_UNSORTED_POINTS</p>
</td>
<td class="cellalignment742" headers="r8c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r8c1-t8 r1c3-t8">
<p>For point cloud data, the number of unsorted points in the POINTS BLOB</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t8" headers="r1c1-t8">
<p>PT_SORT_DIM</p>
</td>
<td class="cellalignment742" headers="r9c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r9c1-t8 r1c3-t8">
<p>For point cloud data, the number of spatial dimensions for the points (2 or 3)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t8" headers="r1c1-t8">
<p>POINTS</p>
</td>
<td class="cellalignment742" headers="r10c1-t8 r1c2-t8">
<p>BLOB</p>
</td>
<td class="cellalignment742" headers="r10c1-t8 r1c3-t8">
<p>For point cloud data, BLOB containing the points. Consists of an array of points, with the following information for each point:</p>
<ul>
<li>
<p><span class="italic">d</span> 8-byte IEEE doubles, where <span class="italic">d</span> is the point cloud total number of dimensions</p>
</li>
<li>
<p>4-byte big-endian integer for the BLK_ID value</p>
</li>
<li>
<p>4-byte big-endian integer for the PT_ID value</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t8" headers="r1c1-t8">
<p>TR_LVL</p>
</td>
<td class="cellalignment742" headers="r11c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r11c1-t8 r1c3-t8">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t8" headers="r1c1-t8">
<p>TR_RES</p>
</td>
<td class="cellalignment742" headers="r12c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r12c1-t8 r1c3-t8">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r13c1-t8" headers="r1c1-t8">
<p>NUM_TRIANGLES</p>
</td>
<td class="cellalignment742" headers="r13c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r13c1-t8 r1c3-t8">
<p>Number of triangles in the TRIANGLES BLOB.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r14c1-t8" headers="r1c1-t8">
<p>TR_SORT_DIM</p>
</td>
<td class="cellalignment742" headers="r14c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r14c1-t8 r1c3-t8">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r15c1-t8" headers="r1c1-t8">
<p>TRIANGLES</p>
</td>
<td class="cellalignment742" headers="r15c1-t8 r1c2-t8">
<p>BLOB</p>
</td>
<td class="cellalignment742" headers="r15c1-t8 r1c3-t8">
<p>BLOB containing the triangles. Consists of an array of triangles for the block:</p>
<ul>
<li>
<p>Each triangle is specified by three vertices.</p>
</li>
<li>
<p>Each vertex is specified by the pair (BLK_ID, PT_ID), with each value being a 4-byte big-endian integer.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For each BLOB in the POINTS column of the TIN block table:</p>
<ul>
<li>
<p>The total size is (<span class="italic">tdim</span>+1)*8, where <span class="italic">tdim</span> is the total dimensionality of each block.</p>
</li>
<li>
<p>The total size should be less than 5 MB for Oracle Database Release 11.1.0.6 or earlier; it should be less than 12 MB for Oracle Database Release 11.1.0.7 or later.</p>
</li>
</ul>
<p>You can use an attribute name in a query on an object of SDO_TIN. <a href="#CIHBHFBB">Example 2-4</a> shows part of a SELECT statement that queries the TIN_EXTENT attribute of the TERRAIN column of a hypothetical LANDSCAPES table.</p>
<div id="SPATL508" class="example">
<p class="titleinexample"><a id="CIHBHFBB"></a>Example 2-4 SDO_TIN Attribute in a Query</p>
<pre>
SELECT l.terrain.tin_extent FROM landscapes l WHERE ...;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBBIACFI"></a>
<div id="SPATL509" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.5.2</span> <a id="sthref261"></a><a id="sthref262"></a>SDO_TIN_BLK_TYPE and SDO_TIN_BLK Object Types</h3>
<p>When you perform a clip operation using the <a href="sdo_tin_pkg_ref.htm#i855810">SDO_TIN_PKG.CLIP_TIN</a> function, an object of SDO_TIN_BLK_TYPE is returned, which is defined as <code>TABLE OF SDO_TIN_BLK</code>.</p>
<p>The attributes of the SDO_TIN_BLK object type are the same as the columns in the TIN block table, which is described in <a href="#CBBCIECB">Table 2-5</a> in <a href="#CBBIACFI">Section 2.5.2</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBIHIIE"></a>
<div id="SPATL510" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">2.6</span> Point Cloud-Related Object Types</h2>
<p>This section describes the following object types related to support for point clouds:</p>
<ul>
<li>
<p>SDO_PC</p>
</li>
<li>
<p>SDO_PC_BLK</p>
</li>
</ul>
<a id="CBBCABDI"></a>
<div id="SPATL511" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.6.1</span> <a id="sthref263"></a>SDO_PC Object Type</h3>
<p>The description of a point cloud is stored in a single row, in a single column of object type SDO_PC in a user-defined table. The object type SDO_PC is defined as:</p>
<pre>
CREATE TYPE sdo_pc AS OBJECT
  (base_table         VARCHAR2(70),
   base_table_col     VARCHAR2(1024),
   pc_id              NUMBER.
   blk_table          VARCHAR2(70),
   ptn_params         VARCHAR2(1024),
   pc_extent          SDO_GEOMETRY,
   pc_tol             NUMBER,
   pc_tot_dimensions  NUMBER,
   pc_domain          SDO_ORGSCL_TYPE,
   pc_val_attr_tables SDO_STRING_ARRAY,
   pc_other_attrs     XMLTYPE);
</pre>
<p>The SDO_PC type has the attributes shown in <a href="#CBBBIBGC">Table 2-6</a>.</p>
<div id="SPATL512" class="tblformal">
<p class="titleintable"><a id="sthref264"></a><a id="CBBBIBGC"></a>Table 2-6 SDO_PC Type Attributes</p>
<table class="cellalignment740" title="SDO_PC Type Attributes" summary="SDO_PC Type Attributes" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t9">Attribute</th>
<th class="cellalignment741" id="r1c2-t9">Explanation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t9" headers="r1c1-t9">
<p>BASE_TABLE</p>
</td>
<td class="cellalignment742" headers="r2c1-t9 r1c2-t9">
<p>Name of the base table containing a column of type SDO_PC</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t9" headers="r1c1-t9">
<p>BASE_TABLE_COL</p>
</td>
<td class="cellalignment742" headers="r3c1-t9 r1c2-t9">
<p>Name of the column of type SDO_PC in the base table</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t9" headers="r1c1-t9">
<p>PC_ID</p>
</td>
<td class="cellalignment742" headers="r4c1-t9 r1c2-t9">
<p>ID number for the point cloud. (This unique ID number is generated by Spatial. It is unique within the schema for base tables containing a column of type SDO_PC.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t9" headers="r1c1-t9">
<p>BLK_TABLE</p>
</td>
<td class="cellalignment742" headers="r5c1-t9 r1c2-t9">
<p>Name of the table that contains information about each block in the point cloud. This table contains the columns shown in <a href="#CBBIHDJE">Table 2-7</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t9" headers="r1c1-t9">
<p>PTN_PARAMS</p>
</td>
<td class="cellalignment742" headers="r6c1-t9 r1c2-t9">
<p>Parameters for partitioning the point cloud</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t9" headers="r1c1-t9">
<p>PC_EXTENT</p>
</td>
<td class="cellalignment742" headers="r7c1-t9 r1c2-t9">
<p>SDO_GEOMETRY object representing the spatial extent of the point cloud (the minimum bounding object enclosing all objects in the point cloud)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t9" headers="r1c1-t9">
<p>PC_TOL</p>
</td>
<td class="cellalignment742" headers="r8c1-t9 r1c2-t9">
<p>Tolerance value for points in the point cloud. (For information about spatial tolerance, see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t9" headers="r1c1-t9">
<p>PC_TOT_DIMENSIONS</p>
</td>
<td class="cellalignment742" headers="r9c1-t9 r1c2-t9">
<p>Total number of dimensions in the point cloud. Includes spatial dimensions and any nonspatial dimensions, up to a maximum total of 9.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t9" headers="r1c1-t9">
<p>PC_DOMAINS</p>
</td>
<td class="cellalignment742" headers="r10c1-t9 r1c2-t9">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t9" headers="r1c1-t9">
<p>PC_VAL_ATTR_TABLES</p>
</td>
<td class="cellalignment742" headers="r11c1-t9 r1c2-t9">
<p>SDO_STRING_ARRAY object specifying the names of any value attribute tables for the point cloud. Type SDO_STRING_ARRAY is defined as <code>VARRAY(1048576) OF VARCHAR2(32)</code>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t9" headers="r1c1-t9">
<p>PC_OTHER_ATTRS</p>
</td>
<td class="cellalignment742" headers="r12c1-t9 r1c2-t9">
<p>XMLTYPE object specifying any other attributes of the point cloud</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The point cloud block table (specified in the BLK_TABLE attribute of the SDO_PC type) contains the columns shown in <a href="#CBBIHDJE">Table 2-7</a>.</p>
<div id="SPATL513" class="tblformal">
<p class="titleintable"><a id="sthref265"></a><a id="CBBIHDJE"></a>Table 2-7 Columns in the Point Cloud Block Table</p>
<table class="cellalignment740" title="Columns in the Point Cloud Block Table" summary="Columns in the xxx_SDO_INDEX_INFO Views" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t10">Column Name</th>
<th class="cellalignment741" id="r1c2-t10">Data Type</th>
<th class="cellalignment741" id="r1c3-t10">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t10" headers="r1c1-t10">
<p>OBJ_ID</p>
</td>
<td class="cellalignment742" headers="r2c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r2c1-t10 r1c3-t10">
<p>ID number of the point cloud object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t10" headers="r1c1-t10">
<p>BLK_ID</p>
</td>
<td class="cellalignment742" headers="r3c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r3c1-t10 r1c3-t10">
<p>ID number of the block.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t10" headers="r1c1-t10">
<p>BLK_EXTENT</p>
</td>
<td class="cellalignment742" headers="r4c1-t10 r1c2-t10">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment742" headers="r4c1-t10 r1c3-t10">
<p>Spatial extent of the block.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t10" headers="r1c1-t10">
<p>BLK_DOMAIN</p>
</td>
<td class="cellalignment742" headers="r5c1-t10 r1c2-t10">
<p>SDO_ORGSCL_TYPE</p>
</td>
<td class="cellalignment742" headers="r5c1-t10 r1c3-t10">
<p>(Not currently used.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t10" headers="r1c1-t10">
<p>PCBLK_MIN_RES</p>
</td>
<td class="cellalignment742" headers="r6c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r6c1-t10 r1c3-t10">
<p>For point cloud data, the minimum resolution level at which the block is visible in a query. The block is retrieved only if the query window intersects the spatial extent of the block and if the minimum - maximum resolution interval of the block intersects the minimum - maximum resolution interval of the query. Usually, lower values mean farther from the view point, and higher values mean closer to the view point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t10" headers="r1c1-t10">
<p>PCBLK_MAX_RES</p>
</td>
<td class="cellalignment742" headers="r7c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r7c1-t10 r1c3-t10">
<p>For point cloud data, the maximum resolution level at which the block is visible in a query. The block is retrieved only if the query window intersects the spatial extent of the block and if the minimum - maximum resolution interval of the block intersects the minimum - maximum resolution interval of the query. Usually, lower values mean farther from the view point, and higher values mean closer to the view point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t10" headers="r1c1-t10">
<p>NUM_POINTS</p>
</td>
<td class="cellalignment742" headers="r8c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r8c1-t10 r1c3-t10">
<p>For point cloud data, the total number of points in the POINTS BLOB</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t10" headers="r1c1-t10">
<p>NUM_UNSORTED_POINTS</p>
</td>
<td class="cellalignment742" headers="r9c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r9c1-t10 r1c3-t10">
<p>For point cloud data, the number of unsorted points in the POINTS BLOB</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t10" headers="r1c1-t10">
<p>PT_SORT_DIM</p>
</td>
<td class="cellalignment742" headers="r10c1-t10 r1c2-t10">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r10c1-t10 r1c3-t10">
<p>Number of the dimension (1 for the first dimension, 2 for the second dimension, and so on) on which the points are sorted.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t10" headers="r1c1-t10">
<p>POINTS</p>
</td>
<td class="cellalignment742" headers="r11c1-t10 r1c2-t10">
<p>BLOB</p>
</td>
<td class="cellalignment742" headers="r11c1-t10 r1c3-t10">
<p>BLOB containing the points. Consists of an array of points, with the following information for each point:</p>
<ul>
<li>
<p><span class="italic">d</span> 8-byte IEEE doubles, where <span class="italic">d</span> is the PC_TOT_DIMENSIONS value</p>
</li>
<li>
<p>4-byte big-endian integer for the BLK_ID value</p>
</li>
<li>
<p>4-byte big-endian integer for the PT_ID value</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You can use an attribute name in a query on an object of SDO_PC. <a href="#CBBJDIJF">Example 2-5</a> shows part of a SELECT statement that queries the PC_EXTENT attribute of the OCEAN_FLOOR column of a hypothetical OCEAN_FLOOR_MODEL table.</p>
<div id="SPATL514" class="example">
<p class="titleinexample"><a id="CBBJDIJF"></a>Example 2-5 SDO_PC Attribute in a Query</p>
<pre>
SELECT o.ocean_floor.pc_extent FROM ocean_floor_model o WHERE ...;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBBEEFAC"></a>
<div id="SPATL515" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.6.2</span> <a id="sthref266"></a><a id="sthref267"></a>SDO_PC_BLK_TYPE and SDO_PC_BLK Object Type</h3>
<p>When you perform a clip operation using the <a href="sdo_pc_pkg_ref.htm#CHDGAJDI">SDO_PC_PKG.CLIP_PC</a> function, an object of SDO_PC_BLK_TYPE is returned, which is defined as <code>TABLE OF SDO_PC_BLK</code>.</p>
<p>The attributes of the SDO_PC_BLK object type are the same as the columns in the point cloud block table, which is described in <a href="#CBBIHDJE">Table 2-7</a> in <a href="#CBBCABDI">Section 2.6.1</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1001898"></a>
<div id="SPATL516" class="sect1">
<h2 class="sect1"><span class="secnum">2.7</span> <a id="sthref268"></a>Geometry Examples</h2>
<p>This section contains examples of many geometry types:</p>
<ul>
<li>
<p><a href="#BGHHCDIB">Section 2.7.1, "Rectangle"</a></p>
</li>
<li>
<p><a href="#BGHGAHHG">Section 2.7.2, "Polygon with a Hole"</a></p>
</li>
<li>
<p><a href="#i1011939">Section 2.7.3, "Compound Line String"</a></p>
</li>
<li>
<p><a href="#i1005726">Section 2.7.4, "Compound Polygon"</a></p>
</li>
<li>
<p><a href="#BGHIFACF">Section 2.7.5, "Point"</a></p>
</li>
<li>
<p><a href="#CBBIGEFH">Section 2.7.6, "Oriented Point"</a></p>
</li>
<li>
<p><a href="#BGHBAIDC">Section 2.7.7, "Type 0 (Zero) Element"</a></p>
</li>
<li>
<p><a href="#CBBBJEAF">Section 2.7.8, "Several Two-Dimensional Geometry Types"</a></p>
</li>
</ul>
<a id="BGHHCDIB"></a>
<div id="SPATL517" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.1</span> Rectangle</h3>
<p><a href="#i1013389">Figure 2-3</a> illustrates the rectangle that represents <code>cola_a</code> in the example in <a href="#i1004750">Section 2.1</a>.</p>
<div id="SPATL518" class="figure">
<p class="titleinfigure"><a id="i1013389"></a>Figure 2-3 Rectangle</p>
<img width="102" height="143" src="img/rectangle.gif" alt="Description of Figure 2-3 follows" /><br />
<a id="sthref269" href="img_text/rectangle.htm">Description of "Figure 2-3 Rectangle"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#i1013389">Figure 2-3</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2003. The <span class="italic">2</span> indicates two-dimensional, and the <span class="italic">3</span> indicates a polygon.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = NULL.</p>
</li>
<li>
<p>SDO_ELEM_INFO = (1, 1003, 3). The final <span class="italic">3</span> in 1,1003,3 indicates that this is a rectangle. Because it is a rectangle, only two ordinates are specified in SDO_ORDINATES (lower-left and upper-right).</p>
</li>
<li>
<p>SDO_ORDINATES = (1,1, 5,7). These identify the lower-left and upper-right ordinates of the rectangle.</p>
</li>
</ul>
<p><a href="#i1012146">Example 2-6</a> shows a SQL statement that inserts the geometry illustrated in <a href="#i1013389">Figure 2-3</a> into the database.</p>
<div id="SPATL519" class="example">
<p class="titleinexample"><a id="i1012146"></a>Example 2-6 SQL Statement to Insert a Rectangle</p>
<pre>
INSERT INTO cola_markets VALUES(
  1,
  'cola_a',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,3), -- one rectangle (1003 = exterior)
    SDO_ORDINATE_ARRAY(1,1, 5,7) -- only 2 points needed to
          -- define rectangle (lower left and upper right) with
          -- Cartesian-coordinate data
  )
);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGHGAHHG"></a>
<div id="SPATL520" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.2</span> Polygon with a Hole</h3>
<p><a id="sthref270"></a><a id="sthref271"></a><a id="sthref272"></a><a href="#i1012271">Figure 2-4</a> illustrates a polygon consisting of two elements: an exterior polygon ring and an interior polygon ring. The inner element in this example is treated as a void (a hole).</p>
<div id="SPATL521" class="figure">
<p class="titleinfigure"><a id="i1012271"></a>Figure 2-4 Polygon with a Hole</p>
<img width="304" height="303" src="img/poly_hole.gif" alt="Description of Figure 2-4 follows" /><br />
<a id="sthref273" href="img_text/poly_hole.htm">Description of "Figure 2-4 Polygon with a Hole"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#i1012271">Figure 2-4</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2003. The <span class="italic">2</span> indicates two-dimensional, and the <span class="italic">3</span> indicates a polygon.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = NULL.</p>
</li>
<li>
<p>SDO_ELEM_INFO = (1,1003,1, 19,2003,1). There are two triplet elements: 1,1003,1 and 19,2003,1.</p>
<p><span class="italic">1003</span> indicates that the element is an exterior polygon ring; <span class="italic">2003</span> indicates that the element is an interior polygon ring.</p>
<p><span class="italic">19</span> indicates that the second element (the interior polygon ring) ordinate specification starts at the 19th number in the SDO_ORDINATES array (that is, 7, meaning that the first point is 7,5).</p>
</li>
<li>
<p>SDO_ORDINATES = (2,4, 4,3, 10,3, 13,5, 13,9, 11,13, 5,13, 2,11, 2,4, 7,5, 7,10, 10,10, 10,5, 7,5).</p>
</li>
<li>
<p>The area (<a href="sdo_objgeom.htm#i856247">SDO_GEOM.SDO_AREA</a> function) of the polygon is the area of the exterior polygon minus the area of the interior polygon. In this example, the area is 84 (99 - 15).</p>
</li>
<li>
<p>The perimeter (<a href="sdo_objgeom.htm#i856257">SDO_GEOM.SDO_LENGTH</a> function) of the polygon is the perimeter of the exterior polygon plus the perimeter of the interior polygon. In this example, the perimeter is 52.9193065 (36.9193065 + 16).</p>
</li>
</ul>
<p><a href="#i1012270">Example 2-7</a> shows a SQL statement that inserts the geometry illustrated in <a href="#i1012271">Figure 2-4</a> into the database.</p>
<div id="SPATL522" class="example">
<p class="titleinexample"><a id="i1012270"></a>Example 2-7 SQL Statement to Insert a Polygon with a Hole</p>
<pre>
INSERT INTO cola_markets VALUES(
  10,
  'polygon_with_hole',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1, 19,2003,1), -- polygon with hole
    SDO_ORDINATE_ARRAY(2,4, 4,3, 10,3, 13,5, 13,9, 11,13, 5,13, 2,11, 2,4,
        7,5, 7,10, 10,10, 10,5, 7,5)
  )
);
</pre>
<p>An example of such a "polygon with a hole" might be a land mass (such as a country or an island) with a lake inside it. Of course, an actual land mass might have many such interior polygons: each one would require a triplet element in SDO_ELEM_INFO, plus the necessary ordinate specification.</p>
<p><a id="sthref274"></a><a id="sthref275"></a><a id="sthref276"></a>Exterior and interior rings cannot be nested. For example, if a country has a lake and there is an island in the lake (and perhaps a lake on the island), a separate polygon must be defined for the island; the island cannot be defined as an interior polygon ring within the interior polygon ring of the lake.</p>
<p><a id="sthref277"></a><a id="sthref278"></a>In a <span class="bold">multipolygon</span> (polygon collection), rings must be grouped by polygon, and the first ring of each polygon must be the exterior ring. For example, consider a polygon collection that contains two polygons (A and B):</p>
</div>
<!-- class="example" -->
<ul>
<li>
<p>Polygon A (one interior "hole"): exterior ring A0, interior ring A1</p>
</li>
<li>
<p>Polygon B (two interior "holes"): exterior ring B0, interior ring B1, interior ring B2</p>
</li>
</ul>
<p>The elements in SDO_ELEM_INFO and SDO_ORDINATES must be in one of the following orders (depending on whether you specify Polygon A or Polygon B first):</p>
<ul>
<li>
<p>A0, A1; B0, B1, B2</p>
</li>
<li>
<p>B0, B1, B2; A0, A1</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1011939"></a>
<div id="SPATL523" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.3</span> <a id="sthref279"></a><a id="sthref280"></a>Compound Line String</h3>
<p><a href="#i1006698">Figure 2-5</a> illustrates a crescent-shaped object represented as a compound line string made up of one straight line segment and one circular arc. Four points are required to represent this shape: points (10,10) and (10,14) describe the straight line segment, and points (10,14), (6,10), and (14,10) describe the circular arc.</p>
<div id="SPATL524" class="figure">
<p class="titleinfigure"><a id="i1006698"></a>Figure 2-5 Compound Line String</p>
<img width="304" height="303" src="img/compound_line_string.gif" alt="Description of Figure 2-5 follows" /><br />
<a id="sthref281" href="img_text/compound_line_string.htm">Description of "Figure 2-5 Compound Line String"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#i1006698">Figure 2-5</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2002. The first <span class="italic">2</span> indicates two-dimensional, and the second <span class="italic">2</span> indicates one or more line segments.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = NULL.</p>
</li>
<li>
<p>SDO_ELEM_INFO = (1,4,2, 1,2,1, 3,2,2). There are three triplet elements: 1,4,2, 1,2,1, and 3,2,2.</p>
<p>The first triplet indicates that this element is a compound line string made up of two subelement line strings, which are described with the next two triplets.</p>
<p>The second triplet indicates that the line string is made up of straight line segments and that the ordinates for this line string start at offset 1. The end point of this line string is determined by the starting offset of the second line string, 3 in this instance.</p>
<p>The third triplet indicates that the second line string is made up of circular arcs with ordinates starting at offset 3. The end point of this line string is determined by the starting offset of the next element or the current length of the SDO_ORDINATES array, if this is the last element.</p>
</li>
<li>
<p>SDO_ORDINATES = (10,10, 10,14, 6,10, 14,10).</p>
</li>
</ul>
<p><a href="#i1012468">Example 2-8</a> shows a SQL statement that inserts the geometry illustrated in <a href="#i1006698">Figure 2-5</a> into the database.</p>
<div id="SPATL525" class="example">
<p class="titleinexample"><a id="i1012468"></a>Example 2-8 SQL Statement to Insert a Compound Line String</p>
<pre>
INSERT INTO cola_markets VALUES(
  11,
  'compound_line_string',
  SDO_GEOMETRY(
    2002,
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,4,2, 1,2,1, 3,2,2), -- compound line string
    SDO_ORDINATE_ARRAY(10,10, 10,14, 6,10, 14,10)
  )
);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1005726"></a>
<div id="SPATL526" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.4</span> Compound Polygon</h3>
<p><a href="#i1008220">Figure 2-6</a> illustrates an ice cream cone-shaped object represented as a compound polygon made up of one straight line segment and one circular arc. Five points are required to represent this shape: points (6,10), (10,1), and (14,10) describe one acute angle-shaped line string, and points (14,10), (10,14), and (6,10) describe the circular arc. The starting point of the line string and the ending point of the circular arc are the same point (6,10). The SDO_ELEM_INFO array contains three triplets for this compound line string. These triplets are {(1,1005,2), (1,2,1), (5,2,2)}.</p>
<div id="SPATL527" class="figure">
<p class="titleinfigure"><a id="i1008220"></a>Figure 2-6 Compound Polygon</p>
<img width="298" height="297" src="img/compound_polygon.gif" alt="Description of Figure 2-6 follows" /><br />
<a id="sthref282" href="img_text/compound_polygon.htm">Description of "Figure 2-6 Compound Polygon"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#i1008220">Figure 2-6</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2003. The <span class="italic">2</span> indicates two-dimensional, and the <span class="italic">3</span> indicates a polygon.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = NULL.</p>
</li>
<li>
<p>SDO_ELEM_INFO = (1,1005,2, 1,2,1, 5,2,2). There are three triplet elements: 1,1005,2, 1,2,1, and 5,2,2.</p>
<p>The first triplet indicates that this element is a compound polygon made up of two subelement line strings, which are described using the next two triplets.</p>
<p>The second triplet indicates that the first subelement line string is made up of straight line segments and that the ordinates for this line string start at offset 1. The end point of this line string is determined by the starting offset of the second line string, 5 in this instance. Because the vertices are two-dimensional, the coordinates for the end point of the first line string are at ordinates 5 and 6.</p>
<p>The third triplet indicates that the second subelement line string is made up of a circular arc with ordinates starting at offset 5. The end point of this line string is determined by the starting offset of the next element or the current length of the SDO_ORDINATES array, if this is the last element.</p>
</li>
<li>
<p>SDO_ORDINATES = (6,10, 10,1, 14,10, 10,14, 6,10).</p>
</li>
</ul>
<p><a href="#i1012660">Example 2-9</a> shows a SQL statement that inserts the geometry illustrated in <a href="#i1008220">Figure 2-6</a> into the database.</p>
<div id="SPATL528" class="example">
<p class="titleinexample"><a id="i1012660"></a>Example 2-9 SQL Statement to Insert a Compound Polygon</p>
<pre>
INSERT INTO cola_markets VALUES(
  12,
  'compound_polygon',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1005,2, 1,2,1, 5,2,2), -- compound polygon
    SDO_ORDINATE_ARRAY(6,10, 10,1, 14,10, 10,14, 6,10)
  )
);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGHIFACF"></a>
<div id="SPATL529" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.5</span> <a id="sthref283"></a>Point</h3>
<p><a href="#BGHEAEHD">Figure 2-7</a> illustrates a point-only geometry at coordinates (12,14).</p>
<div id="SPATL530" class="figure">
<p class="titleinfigure"><a id="BGHEAEHD"></a>Figure 2-7 Point-Only Geometry</p>
<img width="304" height="303" src="img/point_only.gif" alt="Description of Figure 2-7 follows" /><br />
<a id="sthref284" href="img_text/point_only.htm">Description of "Figure 2-7 Point-Only Geometry"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#BGHEAEHD">Figure 2-7</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2001. The <span class="italic">2</span> indicates two-dimensional, and the 1 indicates a single point.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = SDO_POINT_TYPE(12, 14, NULL). The SDO_POINT attribute is defined using the SDO_POINT_TYPE object type, because this is a point-only geometry.</p>
<p>For more information about the SDO_POINT attribute, see <a href="#g1019115">Section 2.2.3</a>.</p>
</li>
<li>
<p>SDO_ELEM_INFO and SDO_ORDINATES are both NULL, as required if the SDO_POINT attribute is specified.</p>
</li>
</ul>
<p><a href="#BGHHBAFD">Example 2-10</a> shows a SQL statement that inserts the geometry illustrated in <a href="#BGHEAEHD">Figure 2-7</a> into the database.</p>
<div id="SPATL531" class="example">
<p class="titleinexample"><a id="BGHHBAFD"></a>Example 2-10 SQL Statement to Insert a Point-Only Geometry</p>
<pre>
INSERT INTO cola_markets VALUES(
   90,
   'point_only',
   SDO_GEOMETRY(
      2001,
      NULL,
      SDO_POINT_TYPE(12, 14, NULL),
      NULL,
      NULL));
</pre></div>
<!-- class="example" -->
<p>You can search for point-only geometries based on the X, Y, and Z values in the SDO_POINT_TYPE specification. <a href="#BGHDJEDI">Example 2-11</a> is a query that asks for all points whose first coordinate (the X value) is 12, and it finds the point that was inserted in <a href="#BGHHBAFD">Example 2-10</a>.</p>
<div id="SPATL532" class="example">
<p class="titleinexample"><a id="BGHDJEDI"></a>Example 2-11 Query for Point-Only Geometry Based on a Coordinate Value</p>
<pre>
SELECT * from cola_markets c WHERE c.shape.SDO_POINT.X = 12;

    MKT_ID NAME                                                                
---------- --------------------------------                                     
SHAPE(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SDO_ELEM_INFO, SDO_ORDINATES)    
--------------------------------------------------------------------------------
        90 point_only                                                           
SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(12, 14, NULL), NULL, NULL)
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBBIGEFH"></a>
<div id="SPATL533" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.6</span> <a id="sthref285"></a><a id="sthref286"></a>Oriented Point</h3>
<p>An <span class="bold">oriented point</span> is a special type of point geometry that includes coordinates representing the locations of the point and a virtual end point, to indicate an orientation vector that can be used for rotating a symbol at the point or extending a label from the point. The main use for an oriented point is in map visualization and display applications that include symbols, such as a shield symbol to indicate a highway.</p>
<p>To specify an oriented point:</p>
<ul>
<li>
<p>Use an SDO_GTYPE value (explained in <a href="#i1005614">Section 2.2.1</a>) for a point or multipoint geometry.</p>
</li>
<li>
<p>Specify a null value for the SDO_POINT attribute.</p>
</li>
<li>
<p>In the SDO_ELEM_INFO array (explained in <a href="#i1006226">Section 2.2.4</a>), specify an additional triplet, with the second and third values (SDO_ETYPE and SDO_INTERPRETATION) as 1 and 0. For example, a triplet of 3,1,0 indicates that the point is an oriented point, with the third number in the SDO_ORDINATES array being the first coordinate, or x-axis value, of the end point reflecting the orientation vector for any symbol or label.</p>
</li>
<li>
<p>In the SDO_ORDINATES array (explained in <a href="#i1013373">Section 2.2.5</a>), specify the coordinates of the end point for the orientation vector from the point, with values between -1 and 1. The orientation start point is assumed to be (0,0), and it is translated to the location of the physical point to which it corresponds.</p>
</li>
</ul>
<p><a href="#CBBIAGFJ">Figure 2-8</a> illustrates an oriented point geometry at coordinates (12,14), with an orientation vector of approximately 34 degrees (counterclockwise from the x-axis), reflecting the orientation coordinates 0.3,0.2. (To have an orientation that more precisely matches a specific angle, refer to the cotangent or tangent values in the tables in a trigonometry textbook.) The orientation vector in this example goes from (0,0) to (0.3,0.2) and extends onward. Assuming i=0.3 and j=0.2, the angle in radians can be calculated as follows: angle in radians = arctan (j/i). The angle is then applied to the physical point associated with the orientation vector.</p>
<div id="SPATL534" class="figure">
<p class="titleinfigure"><a id="CBBIAGFJ"></a>Figure 2-8 Oriented Point Geometry</p>
<img width="304" height="303" src="img/oriented_pt.gif" alt="Description of Figure 2-8 follows" /><br />
<a id="sthref287" href="img_text/oriented_pt.htm">Description of "Figure 2-8 Oriented Point Geometry"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the SDO_GEOMETRY definition of the geometry illustrated in <a href="#CBBIAGFJ">Figure 2-8</a>:</p>
<ul>
<li>
<p>SDO_GTYPE = 2001. The <span class="italic">2</span> indicates two-dimensional, and the 1 indicates a single point.</p>
</li>
<li>
<p>SDO_SRID = NULL.</p>
</li>
<li>
<p>SDO_POINT = NULL.</p>
</li>
<li>
<p>SDO_ELEM_INFO = (1,1,1, 3,1,0). The final <span class="italic">1,0</span> in 3,1,0 indicates that this is an oriented point.</p>
</li>
<li>
<p>SDO_ORDINATES = (12,14, 0.3,0.2). The 12,14 identifies the physical coordinates of the point; and the 0.3,0.2 identifies the x and y coordinates (assuming 12,14 as the origin) of the end point of the orientation vector. The resulting orientation vector slopes upward at about a 34-degree angle.</p>
</li>
</ul>
<p><a href="#CBBEBBEE">Example 2-12</a> shows a SQL statement that inserts the geometry illustrated in <a href="#CBBIAGFJ">Figure 2-8</a> into the database.</p>
<div id="SPATL535" class="example">
<p class="titleinexample"><a id="CBBEBBEE"></a>Example 2-12 SQL Statement to Insert an Oriented Point Geometry</p>
<pre>
INSERT INTO cola_markets VALUES(
  91, 
  'oriented_point', 
  SDO_GEOMETRY(
    2001, 
    NULL, 
    NULL, 
    SDO_ELEM_INFO_ARRAY(1,1,1, 3,1,0), 
    SDO_ORDINATE_ARRAY(12,14, 0.3,0.2)));
</pre></div>
<!-- class="example" -->
<p>The following guidelines apply to the definition of an oriented point:</p>
<ul>
<li>
<p>The numbers defining the orientation vector must be between -1 and 1. (In <a href="#CBBEBBEE">Example 2-12</a>, these numbers are 0.3 and 0.2.)</p>
</li>
<li>
<p>Multipoint oriented points are allowed (see <a href="#CBBHJJCH">Example 2-13</a>), but the orientation information must follow the point being oriented.</p>
</li>
</ul>
<p>The following considerations apply to the dimensionality of the orientation vector for an oriented point:</p>
<ul>
<li>
<p>A two-dimensional point has a two-dimensional orientation vector.</p>
</li>
<li>
<p>A two-dimensional point with an LRS measure (SDO_GTYPE=3301) has a two-dimensional orientation vector.</p>
</li>
<li>
<p>A three-dimensional point (SDO_GTYPE=3001) has a three-dimensional orientation vector.</p>
</li>
<li>
<p>A three-dimensional point with an LRS measure (SDO_GTYPE=4401) has a three-dimensional orientation vector.</p>
</li>
<li>
<p>A four-dimensional point (SDO_GTYPE=4001) has a three-dimensional orientation vector.</p>
</li>
</ul>
<p><a href="#CBBHJJCH">Example 2-13</a> shows a SQL statement that inserts an oriented multipoint geometry into the database. The multipoint geometry contains two points, at coordinates (12,14) and (12, 10), with the two points having different orientation vectors. The statement is similar to the one in <a href="#CBBEBBEE">Example 2-12</a>, but in <a href="#CBBHJJCH">Example 2-13</a> the second point has an orientation vector pointing down and to the left at 45 degrees (or, 135 degrees clockwise from the x-axis), reflecting the orientation coordinates -1,-1.</p>
<div id="SPATL536" class="example">
<p class="titleinexample"><a id="CBBHJJCH"></a>Example 2-13 SQL Statement to Insert an Oriented Multipoint Geometry</p>
<pre>
-- Oriented multipoint: 2 points, different orientations
INSERT INTO cola_markets VALUES(
  92,
  'oriented_multipoint',
  SDO_GEOMETRY(
    2005, -- Multipoint
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1,1, 3,1,0, 5,1,1, 7,1,0),
    SDO_ORDINATE_ARRAY(12,14, 0.3,0.2, 12,10, -1,-1)));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGHBAIDC"></a>
<div id="SPATL537" class="sect2">
<h3 class="sect2"><span class="secnum">2.7.7</span> Type <a id="sthref288"></a><a id="sthref289"></a><a id="sthref290"></a>0 (Zero) Element</h3>
<p>Type 0 (zero) elements are used to model geometry types that are not supported by Oracle Spatial, such as curves and splines. A type 0 element has an SDO_ETYPE value of 0. (See <a href="#i1006226">Section 2.2.4</a> for information about the SDO_ETYPE.) Type 0 elements are not indexed by Oracle Spatial, and they are ignored by Spatial functions and procedures.</p>
<p>Geometries with type 0 elements must contain at least one nonzero element, that is, an element with an SDO_ETYPE value that is not 0. The nonzero element should be an approximation of the unsupported geometry, and therefore it must have both:</p>
<ul>
<li>
<p>An SDO_ETYPE value associated with a geometry type supported by Spatial</p>
</li>
<li>
<p>An SDO_INTERPRETATION value that is valid for the SDO_ETYPE value (see <a href="#BGHDGCCE">Table 2-2</a>)</p>
<p>(The SDO_INTERPRETATION value for the type 0 element can be any numeric value, and applications are responsible for determining the validity and significance of the value.)</p>
</li>
</ul>
<p>The nonzero element is indexed by Spatial, and it will be returned by the spatial index.</p>
<p>The SDO_GTYPE value for a geometry containing a type 0 element must be set to the value for the geometry type of the nonzero element.</p>
<p><a href="#BGHDAJBF">Figure 2-9</a> shows a geometry with two elements: a curve (unsupported geometry) and a rectangle (the nonzero element) that approximates the curve. The curve looks like the letter <span class="italic">S,</span> and the rectangle is represented by the dashed line.</p>
<div id="SPATL538" class="figure">
<p class="titleinfigure"><a id="BGHDAJBF"></a>Figure 2-9 Geometry with Type 0 (Zero) Element</p>
<img width="196" height="141" src="img/type0.gif" alt="Description of Figure 2-9 follows" /><br />
<a id="sthref291" href="img_text/type0.htm">Description of "Figure 2-9 Geometry with Type 0 (Zero) Element"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the example shown in <a href="#BGHDAJBF">Figure 2-9</a>:</p>
<ul>
<li>
<p>The SDO_GTYPE value for the geometry is 2003 (for a two-dimensional polygon).</p>
</li>
<li>
<p>The SDO_ELEM_INFO array contains two triplets for this compound line string. For example, the triplets might be {(1,0,57), (11,1003,3)}. That is:</p>
<div class="inftblinformal">
<table class="cellalignment745" title="SDO_ELEM_INFO array triplet values for this example" summary="SDO_ELEM_INFO array sample values" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t11">Ordinate Starting Offset (SDO_STARTING_OFFSET)</th>
<th class="cellalignment741" id="r1c2-t11">Element Type (SDO_ETYPE)</th>
<th class="cellalignment741" id="r1c3-t11">Interpretation (SDO_INTERPRETATION)</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t11" headers="r1c1-t11">1</td>
<td class="cellalignment742" headers="r2c1-t11 r1c2-t11">0</td>
<td class="cellalignment742" headers="r2c1-t11 r1c3-t11">57</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t11" headers="r1c1-t11">11</td>
<td class="cellalignment742" headers="r3c1-t11 r1c2-t11">1003</td>
<td class="cellalignment742" headers="r3c1-t11 r1c3-t11">3</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></li>
</ul>
<p>In this example:</p>
<ul>
<li>
<p>The type 0 element has an SDO_ETYPE value of 0.</p>
</li>
<li>
<p>The nonzero element (rectangle) has an SDO_ETYPE value of 1003, indicating an exterior polygon ring.</p>
</li>
<li>
<p>The nonzero element has an SDO_STARTING_OFFSET value of 11 because ordinate x6 is the eleventh ordinate in the geometry.</p>
</li>
<li>
<p>The type 0 element has an SDO_INTERPRETATION value whose significance is application-specific. In this example, the SDO_INTERPRETATION value is 57.</p>
</li>
<li>
<p>The nonzero element has an SDO_INTERPRETATION value that is valid for the SDO_ETYPE of 1003. In this example, the SDO_INTERPRETATION value is 3, indicating a rectangle defined by two points (lower-left and upper-right).</p>
</li>
</ul>
<p><a href="#BGHJAHEA">Example 2-14</a> shows a SQL statement that inserts the geometry with a type 0 element (similar to the geometry illustrated in <a href="#BGHDAJBF">Figure 2-9</a>) into the database. In the SDO_ORDINATE_ARRAY structure, the curve is defined by points (6,6), (12,6), (9,8), (6,10), and (12,10), and the rectangle is defined by points (6,4) and (12,12).</p>
<div id="SPATL539" class="example">
<p class="titleinexample"><a id="BGHJAHEA"></a>Example 2-14 SQL Statement to Insert a Geometry with a Type 0 Element</p>
<pre>
INSERT INTO cola_markets VALUES(
  13,
  'type_zero_element_geom',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,0,57, 11,1003,3), -- 1st is type 0 element
    SDO_ORDINATE_ARRAY(6,6, 12,6, 9,8, 6,10, 12,10, 6,4, 12,12)
  )
);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBBBJEAF"></a>
<div id="SPATL540" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.7.8</span> Several Two-Dimensional Geometry Types</h3>
<p><a href="#CBBJEHGI">Example 2-15</a> creates a table and inserts various two-dimensional geometries, including multipoints (point clusters), multipolygons, and collections. At the end, it calls the <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function to validate the inserted geometries. Note that some geometries are deliberately invalid, and their descriptions include the string <code>INVALID</code>.</p>
<div id="SPATL541" class="example">
<p class="titleinexample"><a id="CBBJEHGI"></a>Example 2-15 SQL Statements to Insert Various Two-Dimensional Geometries</p>
<pre>
CREATE TABLE t1 (
  i NUMBER,
  d VARCHAR2(50),
  g SDO_GEOMETRY
);
INSERT INTO t1 (i, d, g)
VALUES (
  1,
  'Point',
  sdo_geometry (2001, null, null, sdo_elem_info_array (1,1,1), 
    sdo_ordinate_array (10,5))
);
INSERT INTO t1 (i, d, g)
VALUES (
  2,
  'Line segment',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,1), 
    sdo_ordinate_array (10,10, 20,10))
);
INSERT INTO t1 (i, d, g)
VALUES (
  3,
  'Arc segment',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,2), 
    sdo_ordinate_array (10,15, 15,20, 20,15))
);
INSERT INTO t1 (i, d, g)
VALUES (
  4,
  'Line string',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,1), 
    sdo_ordinate_array (10,25, 20,30, 25,25, 30,30))
);
INSERT INTO t1 (i, d, g)
VALUES (
  5,
  'Arc string',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,2), 
    sdo_ordinate_array (10,35, 15,40, 20,35, 25,30, 30,35))
);
INSERT INTO t1 (i, d, g)
VALUES (
  6,
  'Compound line string',
  sdo_geometry (2002, null, null, 
    sdo_elem_info_array (1,4,3, 1,2,1, 3,2,2, 7,2,1), 
    sdo_ordinate_array (10,45, 20,45, 23,48, 20,51, 10,51))
);
INSERT INTO t1 (i, d, g)
VALUES (
  7,
  'Closed line string',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,1), 
    sdo_ordinate_array (10,55, 15,55, 20,60, 10,60, 10,55))
);
INSERT INTO t1 (i, d, g)
VALUES (
  8,
  'Closed arc string',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,2), 
    sdo_ordinate_array (15,65, 10,68, 15,70, 20,68, 15,65))
);
INSERT INTO t1 (i, d, g)
VALUES (
  9,
  'Closed mixed line',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,4,2, 1,2,1, 7,2,2), 
    sdo_ordinate_array (10,78, 10,75, 20,75, 20,78, 15,80, 10,78))
);
INSERT INTO t1 (i, d, g)
VALUES (
  10,
  'Self-crossing line',
  sdo_geometry (2002, null, null, sdo_elem_info_array (1,2,1), 
    sdo_ordinate_array (10,85, 20,90, 20,85, 10,90, 10,85))
);
INSERT INTO t1 (i, d, g)
VALUES (
  11,
  'Polygon',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,1), 
    sdo_ordinate_array (10,105, 15,105, 20,110, 10,110, 10,105))
);
INSERT INTO t1 (i, d, g)
VALUES (
  12,
  'Arc polygon',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,2), 
    sdo_ordinate_array (15,115, 20,118, 15,120, 10,118, 15,115))
);
INSERT INTO t1 (i, d, g)
VALUES (
  13,
  'Compound polygon',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1005,2, 1,2,1, 7,2,2), 
    sdo_ordinate_array (10,128, 10,125, 20,125, 20,128, 15,130, 10,128))
);
INSERT INTO t1 (i, d, g)
VALUES (
  14,
  'Rectangle',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,3), 
    sdo_ordinate_array (10,135, 20,140))
);
INSERT INTO t1 (i, d, g)
VALUES (
  15,
  'Circle',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,4), 
    sdo_ordinate_array (15,145, 10,150, 20,150))
);
INSERT INTO t1 (i, d, g)
VALUES (
  16,
  'Point cluster',
  sdo_geometry (2005, null, null, sdo_elem_info_array (1,1,3), 
    sdo_ordinate_array (50,5, 55,7, 60,5))
);
INSERT INTO t1 (i, d, g)
VALUES (
  17,
  'Multipoint',
  sdo_geometry (2005, null, null, sdo_elem_info_array (1,1,1, 3,1,1, 5,1,1), 
    sdo_ordinate_array (65,5, 70,7, 75,5))
);
INSERT INTO t1 (i, d, g)
VALUES (
  18,
  'Multiline',
  sdo_geometry (2006, null, null, sdo_elem_info_array (1,2,1, 5,2,1), 
    sdo_ordinate_array (50,15, 55,15, 60,15, 65,15))
);
INSERT INTO t1 (i, d, g)
VALUES (
  19,
  'Multiline - crossing',
  sdo_geometry (2006, null, null, sdo_elem_info_array (1,2,1, 5,2,1), 
    sdo_ordinate_array (50,22, 60,22, 55,20, 55,25))
);
INSERT INTO t1 (i, d, g)
VALUES (
  20,
  'Multiarc',
  sdo_geometry (2006, null, null, sdo_elem_info_array (1,2,2, 7,2,2), 
    sdo_ordinate_array (50,35, 55,40, 60,35, 65,35, 70,30, 75,35))
);
INSERT INTO t1 (i, d, g)
VALUES (
  21,
  'Multiline - closed',
  sdo_geometry (2006, null, null, sdo_elem_info_array (1,2,1, 9,2,1), 
    sdo_ordinate_array (50,55, 50,60, 55,58, 50,55, 56,58, 60,55, 60,60, 56,58))
);
INSERT INTO t1 (i, d, g)
VALUES (
  22,
  'Multiarc - touching',
  sdo_geometry (2006, null, null, sdo_elem_info_array (1,2,2, 7,2,2), 
    sdo_ordinate_array (50,65, 50,70, 55,68, 55,68, 60,65, 60,70))
);
INSERT INTO t1 (i, d, g)
VALUES (
  23,
  'Multipolygon - disjoint',
  sdo_geometry (2007, null, null, sdo_elem_info_array (1,1003,1, 11,1003,3), 
    sdo_ordinate_array (50,105, 55,105, 60,110, 50,110, 50,105, 62,108, 65,112))
);
INSERT INTO t1 (i, d, g)
VALUES (
  24,
  'Multipolygon - touching',
  sdo_geometry (2007, null, null, sdo_elem_info_array (1,1003,3, 5,1003,3), 
    sdo_ordinate_array (50,115, 55,120, 55,120, 58,122))
);
INSERT INTO t1 (i, d, g)
VALUES (
  25,
  'Multipolygon - tangent * INVALID 13351',
  sdo_geometry (2007, null, null, sdo_elem_info_array (1,1003,3, 5,1003,3), 
    sdo_ordinate_array (50,125, 55,130, 55,128, 60,132))
);
INSERT INTO t1 (i, d, g)
VALUES (
  26,
  'Multipolygon - multi-touch',
  sdo_geometry (2007, null, null, sdo_elem_info_array (1,1003,1, 17,1003,1), 
    sdo_ordinate_array (50,95, 55,95, 53,96, 55,97, 53,98, 55,99, 50,99, 50,95, 
      55,100, 55,95, 60,95, 60,100, 55,100))
);
INSERT INTO t1 (i, d, g)
VALUES (
  27,
  'Polygon with void',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,3, 5,2003,3), 
    sdo_ordinate_array (50,135, 60,140, 51,136, 59,139))
);
INSERT INTO t1 (i, d, g)
VALUES (
  28,
  'Polygon with void - reverse',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,2003,3, 5,1003,3), 
    sdo_ordinate_array (51,146, 59,149, 50,145, 60,150))
);
INSERT INTO t1 (i, d, g)
VALUES (
  29,
  'Crescent (straight lines) * INVALID 13349',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,1), 
    sdo_ordinate_array (10,175, 10,165, 20,165, 15,170, 25,170, 20,165, 
      30,165, 30,175, 10,175))
);
INSERT INTO t1 (i, d, g)
VALUES (
  30,
  'Crescent (arcs) * INVALID 13349',
  sdo_geometry (2003, null, null, sdo_elem_info_array (1,1003,2), 
    sdo_ordinate_array (14,180, 10,184, 14,188, 18,184, 14,180, 16,182, 
      14,184, 12,182, 14,180))
);
INSERT INTO t1 (i, d, g)
VALUES (
  31,
  'Heterogeneous collection',
  sdo_geometry (2004, null, null, sdo_elem_info_array (1,1,1, 3,2,1, 7,1003,1), 
    sdo_ordinate_array (10,5, 10,10, 20,10, 10,105, 15,105, 20,110, 10,110,
      10,105))
);
INSERT INTO t1 (i, d, g)
VALUES (
  32,
  'Polygon+void+island touch',
  sdo_geometry (2007, null, null, 
    sdo_elem_info_array (1,1003,1, 11,2003,1, 31,1003,1), 
    sdo_ordinate_array (50,168, 50,160, 55,160, 55,168, 50,168,  51,167,
      54,167, 54,161, 51,161, 51,162, 52,163, 51,164, 51,165, 51,166, 51,167, 
      52,166, 52,162, 53,162, 53,166, 52,166))
);
COMMIT;
SELECT i, d, SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT (g, 0.5) FROM t1;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBBGAJFH"></a>
<div id="SPATL542" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.7.9</span> Three-Dimensional Geometry Types</h3>
<p><a href="#BABHHHBE">Example 2-16</a> creates several tables (POINTS3D, LINES3D, and POLYGONS3D), and inserts three-dimensional objects into each table as appropriate (points into POINTS3D; lines into LINES3D; and polygons, surfaces, and solids into POLYGONS3D). <a href="#BABJGFJJ">Example 2-17</a> then creates the metadata and spatial indexes for the tables.</p>
<p>For information about support for three-dimensional geometries, see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
<div id="SPATL543" class="example">
<p class="titleinexample"><a id="BABHHHBE"></a>Example 2-16 SQL Statements to Insert Three-Dimensional Geometries</p>
<pre>
create table points3d(id number, geometry sdo_geometry);
insert into points3d values(1, sdo_geometry(3001,null,
             sdo_point_type(0,0,0), null, null));
insert into points3d values(2, sdo_geometry(3001,null,
             sdo_point_type(1,1,1), null, null));
insert into points3d values(3, sdo_geometry(3001,null,
             sdo_point_type(0,1,1), null, null));
insert into points3d values(4, sdo_geometry(3001,null,
             sdo_point_type(0,0,1), null, null));
insert into points3d values(5, sdo_geometry(3001,null,
             sdo_point_type(1,1,0), null, null));
insert into points3d values(6, sdo_geometry(3001,null,
             sdo_point_type(1,0,1), null, null));
insert into points3d values(7, sdo_geometry(3001,null,
             sdo_point_type(1,0,0), null, null));
insert into points3d values(8, sdo_geometry(3001,null,
             sdo_point_type(0,1,0), null, null));
insert into points3d values(9, sdo_geometry(3005,null, null,
             sdo_elem_info_array(1,1,1, 4,1,1),
             sdo_ordinate_array(1,1,1, 0,0,0)));
 
create table lines3d(id number, geometry sdo_geometry);
insert into lines3d values(1, sdo_geometry(3002,null, null,
             sdo_elem_info_array(1,2,1),
             sdo_ordinate_array(1,1,1, 0,0,0)));
insert into lines3d values(2, sdo_geometry(3002,null, null,
             sdo_elem_info_array(1,2,1),
             sdo_ordinate_array(1,0,1, 0,1,0)));
insert into lines3d values(2, sdo_geometry(3002,null, null,
             sdo_elem_info_array(1,2,1),
             sdo_ordinate_array(0,1,1, 1,0,0)));
insert into lines3d values(3, sdo_geometry(3002,null, null,
             sdo_elem_info_array(1,2,1),
             sdo_ordinate_array(0,1,1, 1,0,0)));
insert into lines3d values(4, sdo_geometry(3002,null, null,
             sdo_elem_info_array(1,2,1),
             sdo_ordinate_array(0,1,0, 1,0,1)));
 
create table polygons3d(id number, geometry sdo_geometry);
 
-- Simple Polygon
-- All points have to be on the same plane.
insert into polygons3d values(1, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0
)));
insert into polygons3d values(2, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1003,1),  
 SDO_Ordinate_Array(6.0,6.0,6.0,
5.0,6.0,10.0,
3.0,4.0,8.0,
4.0,4.0,4.0,
6.0,6.0,6.0
)));
insert into polygons3d values(3, 
SDO_Geometry (3007,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1003,1,16,1003,1),  
 SDO_Ordinate_Array(6.0,6.0,6.0,
5.0,6.0,10.0,
3.0,4.0,8.0,
4.0,4.0,4.0,
6.0,6.0,6.0,
0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0
)));
-- Polygon with a Hole (same rules as 2D) plus all points on the same plane
insert into polygons3d values(4, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1003,1,16,2003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0,
0.25,0.5,0.5,
0.15,0.5,0.7,
0.15,0.6,0.7,
0.25,0.6,0.5,
0.25,0.5,0.5
)));
-- Surface with 2 3D polygons (on same plane)
insert into polygons3d values(5, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1006,2,1,1003,1,16,1003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,0.0,
0.0,0.0,0.0,
0.5,0.0,0.0,
1.5,0.0,0.0,
2.5,1.0,0.0,
1.5,2.0,0.0,
0.5,2.0,0.0,
0.5,0.0,0.0,
1.5,0.0,0.0
)));
-- Surface with 2 3D polygons (on two planes)
insert into polygons3d values(5, 
SDO_Geometry(3003,NULL,NULL , 
 SDO_Elem_Info_Array(1,1006,2,1,1003,3,7,1003,3),  
 SDO_Ordinate_Array(2,2,2,
4,4,2,
2,2,2,
4,2,4
)));
-- Surface with 2 3D polygons
-- First polygon has one ext and one int.
insert into polygons3d values(6, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1006,2,1,1003,1,16,2003,1,31,1003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0,
0.25,0.5,0.5,
0.15,0.5,0.7,
0.15,0.6,0.7,
0.25,0.6,0.5,
0.25,0.5,0.5,
1.5,0.0,0.0,
2.5,1.0,0.0,
1.5,2.0,0.0,
0.5,2.0,0.0,
0.5,0.0,0.0,
1.5,0.0,0.0
)));
--3D Surface with 3 3D polygons
insert into polygons3d values(7, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1006,3,1,1003,1,16,1003,1,34,1003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0,
1.5,0.0,0.0,
2.5,1.0,0.0,
1.5,2.0,0.0,
0.5,2.0,0.0,
0.5,0.0,0.0,
1.5,0.0,0.0,
1.5,0.0,0.0,
2.5,0.0,0.0,
2.5,1.0,0.0,
1.5,0.0,0.0
)));
-- 3D surface with 3 3D polygons
insert into polygons3d values(8, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1006,3,1,1003,1,16,2003,1,31,1003,1,49,1003,1),  
 SDO_Ordinate_Array(0.5,0.0,0.0,
0.5,1.0,0.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
0.5,0.0,0.0,
0.25,0.5,0.5,
0.15,0.5,0.7,
0.15,0.6,0.7,
0.25,0.6,0.5,
0.25,0.5,0.5,
1.5,0.0,0.0,
2.5,1.0,0.0,
1.5,2.0,0.0,
0.5,2.0,0.0,
0.5,0.0,0.0,
1.5,0.0,0.0,
0.5,1.0,0.0,
0.5,2.0,0.0,
0.0,2.0,0.0,
0.0,1.0,0.0,
0.5,1.0,0.0
)));
-- Simple 3D polygon
insert into polygons3d values(9, 
SDO_Geometry (3003,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1003,1),  
 SDO_Ordinate_Array(0.0,-4.0,1.0,
4.0,-4.0,1.0,
5.0,-3.0,1.0,
5.0,0.0,1.0,
3.0,1.0,1.0,
-1.0,1.0,1.0,
-3.0,0.5,1.0,
0.0,0.0,1.0,
-6.0,-2.0,1.0,
-6.0,-3.5,1.0,
-2.0,-3.5,1.0,
0.0,-4.0,1.0
)));
-- SOLID with 6 polygons
insert into polygons3d values(10, 
SDO_Geometry (3008,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1007,1,1,1006,6,1,1003,1,16,1003,1,31,1003,1,46,1003,1,61,1003,1,76,1003,1),  
 SDO_Ordinate_Array(1.0,0.0,-1.0,
1.0,1.0,-1.0,
1.0,1.0,1.0,
1.0,0.0,1.0,
1.0,0.0,-1.0,
1.0,0.0,1.0,
0.0,0.0,1.0,
0.0,0.0,-1.0,
1.0,0.0,-1.0,
1.0,0.0,1.0,
0.0,1.0,1.0,
0.0,1.0,-1.0,
0.0,0.0,-1.0,
0.0,0.0,1.0,
0.0,1.0,1.0,
1.0,1.0,-1.0,
0.0,1.0,-1.0,
0.0,1.0,1.0,
1.0,1.0,1.0,
1.0,1.0,-1.0,
1.0,1.0,1.0,
0.0,1.0,1.0,
0.0,0.0,1.0,
1.0,0.0,1.0,
1.0,1.0,1.0,
1.0,1.0,-1.0,
1.0,0.0,-1.0,
0.0,0.0,-1.0,
0.0,1.0,-1.0,
1.0,1.0,-1.0
)));
-- Simple SOLID with 6 polygons
-- All polygons are described using the optimized rectangle representation.
insert into polygons3d values(11,
SDO_Geometry (3008,NULL,NULL , SDO_Elem_Info_Array(1,1007,1,1,1006,6,1,1003,3,7,1003,3,13,1003,3,19,1003,3,25,1003,3,31,1003,3), 
SDO_Ordinate_Array(1.0,0.0,-1.0,
1.0,1.0,1.0,
1.0,0.0,1.0,
0.0,0.0,-1.0,
0.0,1.0,1.0,
0.0,0.0,-1.0,
0.0,1.0,-1.0,
1.0,1.0,1.0,
0.0,0.0,1.0,
1.0,1.0,1.0,
1.0,1.0,-1.0,
0.0,0.0,-1.0
)));
-- Multi-Solid
-- Both solids use optimized representation.
insert into polygons3d values(12, 
SDO_Geometry (3009,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1007,3,7,1007,3),  
 SDO_Ordinate_Array(-2.0,1.0,3.0,
-3.0,-1.0,0.0,
0.0,0.0,0.0,
1.0,1.0,1.0
)));
-- Multi-Solid - like multi-polygon in 2D
-- disjoint solids
insert into polygons3d values(13,
SDO_Geometry (3009,NULL,NULL , SDO_Elem_Info_Array(1,1007,1,1,1006,6,1,1003,1,16,1003,1,31,1003,1,46,1003,1,61,1003,1,76,1003,1,91,1007,1,91,1006,7,91,1003,1,106,1003,1,121,1003,1,136,1003,1,151,1003,1,166,1003,1,184,1003,1), 
SDO_Ordinate_Array(1.0,0.0,4.0,
1.0,1.0,4.0,
1.0,1.0,6.0,
1.0,0.0,6.0,
1.0,0.0,4.0,
1.0,0.0,6.0,
0.0,0.0,6.0,
0.0,0.0,4.0,
1.0,0.0,4.0,
1.0,0.0,6.0,
0.0,1.0,6.0,
0.0,1.0,4.0,
0.0,0.0,4.0,
0.0,0.0,6.0,
0.0,1.0,6.0,
1.0,1.0,4.0,
0.0,1.0,4.0,
0.0,1.0,6.0,
1.0,1.0,6.0,
1.0,1.0,4.0,
1.0,1.0,6.0,
0.0,1.0,6.0,
0.0,0.0,6.0,
1.0,0.0,6.0,
1.0,1.0,6.0,
1.0,1.0,4.0,
1.0,0.0,4.0,
0.0,0.0,4.0,
0.0,1.0,4.0,
1.0,1.0,4.0,
2.0,0.0,3.0,
2.0,0.0,0.0,
4.0,2.0,0.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,0.0,
2.0,0.0,0.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,-2.0,0.0,
4.5,-2.0,0.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,2.0,3.0,
-2.0,2.0,0.0,
-2.0,-2.0,0.0,
-2.0,-2.0,3.0,
4.0,2.0,3.0,
4.0,2.0,0.0,
-2.0,2.0,0.0,
-2.0,2.0,3.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.0,2.0,3.0,
-2.0,2.0,3.0,
-2.0,-2.0,3.0,
4.5,-2.0,3.0,
2.0,0.0,3.0,
2.0,0.0,0.0,
4.5,-2.0,0.0,
-2.0,-2.0,0.0,
-2.0,2.0,0.0,
4.0,2.0,0.0,
2.0,0.0,0.0
)));
 
-- SOLID with a hole 
-- etype = 1007 exterior solid
-- etype = 2007 is interior solid
-- All polygons of etype=2007 are described as 2003's.
insert into polygons3d values(14, 
SDO_Geometry (3008,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1007,1,1,1006,7,1,1003,1,16,1003,1,31,1003,1,46,1003,1,61,1003,1,76,1003,1,94,1003,1,112,2006,6,112,2003,1,127,2003,1,142,2003,1,157,2003,1,172,2003,1,187,2003,1),  
 SDO_Ordinate_Array(2.0,0.0,3.0,
2.0,0.0,0.0,
4.0,2.0,0.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,0.0,
2.0,0.0,0.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,-2.0,0.0,
4.5,-2.0,0.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,2.0,3.0,
-2.0,2.0,0.0,
-2.0,-2.0,0.0,
-2.0,-2.0,3.0,
4.0,2.0,3.0,
4.0,2.0,0.0,
-2.0,2.0,0.0,
-2.0,2.0,3.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.0,2.0,3.0,
-2.0,2.0,3.0,
-2.0,-2.0,3.0,
4.5,-2.0,3.0,
2.0,0.0,3.0,
2.0,0.0,0.0,
4.5,-2.0,0.0,
-2.0,-2.0,0.0,
-2.0,2.0,0.0,
4.0,2.0,0.0,
2.0,0.0,0.0,
1.0,1.0,2.5,
-1.0,1.0,2.5,
-1.0,1.0,0.5,
1.0,1.0,0.5,
1.0,1.0,2.5,
-1.0,1.0,2.5,
-1.0,-1.0,2.5,
-1.0,-1.0,0.5,
-1.0,1.0,0.5,
-1.0,1.0,2.5,
-1.0,-1.0,2.5,
1.0,-1.0,2.5,
1.0,-1.0,0.5,
-1.0,-1.0,0.5,
-1.0,-1.0,2.5,
1.0,-1.0,2.5,
1.0,1.0,2.5,
1.0,1.0,0.5,
1.0,-1.0,0.5,
1.0,-1.0,2.5,
-1.0,-1.0,2.5,
-1.0,1.0,2.5,
1.0,1.0,2.5,
1.0,-1.0,2.5,
-1.0,-1.0,2.5,
1.0,1.0,0.5,
-1.0,1.0,0.5,
-1.0,-1.0,0.5,
1.0,-1.0,0.5,
1.0,1.0,0.5
)));
-- Gtype = SOLID
-- The elements make up one composite solid (non-disjoint solids) like a cube
-- on a cube on a cube.
-- This is made up of two solid elements.
-- Each solid element here is a simple solid.
insert into polygons3d values(15, 
SDO_Geometry (3008,NULL,NULL ,  
 SDO_Elem_Info_Array(1,1008,2,1,1007,1,1,1006,6,1,1003,1,16,1003,1,31,1003,1,46,1003,1,61,1003,1,76,1003,1,91,1007,1,91,1006,7,91,1003,1,106,1003,1,121,1003,1,136,1003,1,151,1003,1,166,1003,1,184,1003,1),  
 SDO_Ordinate_Array(-2.0,1.0,3.0,
-2.0,1.0,0.0,
-3.0,1.0,0.0,
-3.0,1.0,3.0,
-2.0,1.0,3.0,
-3.0,1.0,3.0,
-3.0,1.0,0.0,
-3.0,-1.0,0.0,
-3.0,-1.0,3.0,
-3.0,1.0,3.0,
-3.0,-1.0,3.0,
-3.0,-1.0,0.0,
-2.0,-1.0,0.0,
-2.0,-1.0,3.0,
-3.0,-1.0,3.0,
-2.0,-1.0,3.0,
-2.0,-1.0,0.0,
-2.0,1.0,0.0,
-2.0,1.0,3.0,
-2.0,-1.0,3.0,
-2.0,-1.0,3.0,
-2.0,1.0,3.0,
-3.0,1.0,3.0,
-3.0,-1.0,3.0,
-2.0,-1.0,3.0,
-2.0,1.0,0.0,
-2.0,-1.0,0.0,
-3.0,-1.0,0.0,
-3.0,1.0,0.0,
-2.0,1.0,0.0,
2.0,0.0,3.0,
2.0,0.0,0.0,
4.0,2.0,0.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,0.0,
2.0,0.0,0.0,
2.0,0.0,3.0,
4.5,-2.0,3.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,-2.0,0.0,
4.5,-2.0,0.0,
4.5,-2.0,3.0,
-2.0,-2.0,3.0,
-2.0,2.0,3.0,
-2.0,2.0,0.0,
-2.0,-2.0,0.0,
-2.0,-2.0,3.0,
4.0,2.0,3.0,
4.0,2.0,0.0,
-2.0,2.0,0.0,
-2.0,2.0,3.0,
4.0,2.0,3.0,
2.0,0.0,3.0,
4.0,2.0,3.0,
-2.0,2.0,3.0,
-2.0,-2.0,3.0,
4.5,-2.0,3.0,
2.0,0.0,3.0,
2.0,0.0,0.0,
4.5,-2.0,0.0,
-2.0,-2.0,0.0,
-2.0,2.0,0.0,
4.0,2.0,0.0,
2.0,0.0,0.0
)));
</pre></div>
<!-- class="example" -->
<p><a href="#BABJGFJJ">Example 2-17</a> updates the USER_SDO_GEOM_METADATA view with the necessary information about the tables created in <a href="#BABHHHBE">Example 2-16</a> (POINTS3D, LINES3D, and POLYGONS3D), and it creates a spatial index on the geometry column (named GEOMETRY) in each table. The indexes are created with the <code>PARAMETERS ('sdo_indx_dims=3')</code> clause, to ensure that all three dimensions are considered in operations that are supported on three-dimensional geometries.</p>
<div id="SPATL544" class="example">
<p class="titleinexample"><a id="BABJGFJJ"></a>Example 2-17 Updating Metadata and Creating Indexes for 3-Dimensional Geometries</p>
<pre>
INSERT INTO user_sdo_geom_metadata VALUES('POINTS3D', 'GEOMETRY',
  sdo_dim_array( sdo_dim_element('X', -100,100, 0.000005),
  sdo_dim_element('Y', -100,100, 0.000005),
  sdo_dim_element('Z', -100,100, 0.000005)), NULL);
 
CREATE INDEX points3d_sidx on points3d(geometry)
  INDEXTYPE IS mdsys.spatial_index
  PARAMETERS ('sdo_indx_dims=3');
 
INSERT INTO user_sdo_geom_metadata VALUES('LINES3D', 'GEOMETRY',
  sdo_dim_array( sdo_dim_element('X', -100,100, 0.000005),
  sdo_dim_element('Y', -100,100, 0.000005),
  sdo_dim_element('Z', -100,100, 0.000005)), NULL);
 
CREATE INDEX lines3d_sidx on lines3d(geometry)
  INDEXTYPE IS mdsys.spatial_index
  PARAMETERS ('sdo_indx_dims=3');
 
INSERT INTO user_sdo_geom_metadata VALUES('POLYGONS3D', 'GEOMETRY',
  sdo_dim_array( sdo_dim_element('X', -100,100, 0.000005),
  sdo_dim_element('Y', -100,100, 0.000005),
  sdo_dim_element('Z', -100,100, 0.000005)), NULL);
 
CREATE INDEX polygons3d_sidx on polygons3d(geometry)
  INDEXTYPE IS mdsys.spatial_index
  PARAMETERS ('sdo_indx_dims=3');
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1001937"></a>
<div id="SPATL545" class="sect1">
<h2 class="sect1"><span class="secnum">2.8</span> Geometry Metadata Views</h2>
<p>The geometry metadata describing the dimensions, lower and upper bounds, and tolerance in each dimension is stored in a global table owned by MDSYS (which users should never directly update). Each Spatial user has the following views available in the schema associated with that user:</p>
<ul>
<li>
<p><a id="sthref292"></a><a id="sthref293"></a>USER_SDO_GEOM_METADATA contains metadata information for all spatial tables owned by the user (schema). This is the only view that you can update, and it is the one in which Spatial users must insert metadata related to spatial tables.</p>
</li>
<li>
<p><a id="sthref294"></a><a id="sthref295"></a>ALL_SDO_GEOM_METADATA contains metadata information for all spatial tables on which the user has SELECT permission.</p>
</li>
</ul>
<p>Spatial users are responsible for populating these views. For each spatial column, you must insert an appropriate row into the USER_SDO_GEOM_METADATA view. Oracle Spatial ensures that the ALL_SDO_GEOM_METADATA view is also updated to reflect the rows that you insert into USER_SDO_GEOM_METADATA.</p>
<p>Each metadata view has the following definition:</p>
<pre>
(
  TABLE_NAME   VARCHAR2(32),
  COLUMN_NAME  VARCHAR2(32),
  DIMINFO      SDO_DIM_ARRAY,
  SRID         NUMBER
);
</pre>
<p>In addition, the ALL_SDO_GEOM_METADATA view has an OWNER column identifying the schema that owns the table specified in TABLE_NAME.</p>
<p><a id="sthref296"></a>The following considerations apply to schema, table, and column names, and to any SDO_DIMNAME values, that are stored in any Oracle Spatial metadata views:</p>
<ul>
<li>
<p>They must contain only letters, numbers, and underscores. For example, such a name cannot contain a space ( ), an apostrophe (<code>'</code>), a quotation mark (<code>"</code>), or a comma (<code>,</code>).</p>
</li>
<li>
<p>All letters in the names are converted to uppercase before the names are stored in geometry metadata views or before the tables are accessed. This conversion also applies to any schema name specified with the table name.</p>
</li>
</ul>
<a id="BGHJBAII"></a>
<div id="SPATL546" class="sect2">
<h3 class="sect2"><span class="secnum">2.8.1</span> <a id="sthref297"></a><a id="sthref298"></a>TABLE_NAME</h3>
<p>The TABLE_NAME column contains the name of a feature table, such as COLA_MARKETS, that has a column of type SDO_GEOMETRY.</p>
<p>The table name is stored in the spatial metadata views in all uppercase characters.</p>
<p>The table name cannot contain spaces or mixed-case letters in a quoted string when inserted into the USER_SDO_GEOM_METADATA view, and it cannot be in a quoted string when used in a query (unless it is in all uppercase characters).</p>
<p><a id="sthref299"></a>The spatial feature table cannot be an index-organized table if you plan to create a spatial index on the spatial column.</p>
</div>
<!-- class="sect2" -->
<a id="i1010466"></a>
<div id="SPATL547" class="sect2">
<h3 class="sect2"><span class="secnum">2.8.2</span> <a id="sthref300"></a><a id="sthref301"></a>COLUMN_NAME</h3>
<p>The COLUMN_NAME column contains the name of the column of type SDO_GEOMETRY. For the COLA_MARKETS table, this column is called SHAPE.</p>
<p>The column name is stored in the spatial metadata views in all uppercase characters.</p>
<p>The column name cannot contain spaces or mixed-case letters in a quoted string when inserted into the USER_SDO_GEOM_METADATA view, and it cannot be in a quoted string when used in a query (unless it is in all uppercase characters).</p>
</div>
<!-- class="sect2" -->
<a id="i1010905"></a>
<div id="SPATL548" class="sect2">
<h3 class="sect2"><span class="secnum">2.8.3</span> <a id="sthref302"></a>DIMINFO</h3>
<p>The DIMINFO column is a varying length array of an object type, ordered by dimension, and has one entry for each dimension. The SDO_DIM_ARRAY type is defined as follows:</p>
<pre>
Create Type SDO_DIM_ARRAY as VARRAY(4) of SDO_DIM_ELEMENT; 
</pre>
<p>The SDO_DIM_ELEMENT type is defined as:</p>
<pre>
Create Type SDO_DIM_ELEMENT as OBJECT (
  SDO_DIMNAME VARCHAR2(64),
  SDO_LB NUMBER,
  SDO_UB NUMBER,
  SDO_TOLERANCE NUMBER);
</pre>
<p>The SDO_DIM_ARRAY instance is of size <span class="italic">n</span> if there are <span class="italic">n</span> dimensions. That is, DIMINFO contains 2 SDO_DIM_ELEMENT instances for two-dimensional geometries, 3 instances for three-dimensional geometries, and 4 instances for four-dimensional geometries. Each SDO_DIM_ELEMENT instance in the array must have valid (not null) values for the SDO_LB, SDO_UB, and SDO_TOLERANCE attributes.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The number of dimensions reflected in the DIMINFO information must match the number of dimensions of each geometry object in the layer.</div>
<p>For an explanation of tolerance and how to determine the appropriate SDO_TOLERANCE value, see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>, especially <a href="sdo_intro.htm#i884635">Section 1.5.5.1</a>.</p>
<p>Spatial assumes that the varying length array is ordered by dimension. The DIMINFO varying length array must be ordered by dimension in the same way the ordinates for the points in SDO_ORDINATES varying length array are ordered. For example, if the SDO_ORDINATES varying length array contains {X1, Y1, ..., X<span class="italic">n</span>, Y<span class="italic">n</span>}, then the first DIMINFO entry must define the X dimension and the second DIMINFO entry must define the Y dimension.</p>
<p><a href="#i1004730">Example 2-1</a> in <a href="#i1004750">Section 2.1</a> shows the use of the SDO_GEOMETRY and SDO_DIM_ARRAY types. This example demonstrates how geometry objects (hypothetical market areas for colas) are represented, and how the COLA_MARKETS feature table and the USER_SDO_GEOM_METADATA view are populated with the data for those objects.</p>
</div>
<!-- class="sect2" -->
<div id="SPATL549" class="sect2"><a id="sthref303"></a>
<h3 class="sect2"><span class="secnum">2.8.4</span> <a id="sthref304"></a>SRID</h3>
<p>The SRID column should contain either of the following: the SRID value for the coordinate system for all geometries in the column, or NULL if no specific coordinate system should be associated with the geometries. (For information about coordinate systems, see <a href="sdo_cs_concepts.htm#g1002522">Chapter 6</a>.)</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1001420"></a>
<div id="SPATL550" class="sect1">
<h2 class="sect1"><span class="secnum">2.9</span> Spatial Index-Related Structures</h2>
<p>This section describes the structure of the tables containing the spatial index data and metadata. Concepts and usage notes for spatial indexing are explained in <a href="sdo_intro.htm#i877656">Section 1.7</a>. The spatial index data and metadata are stored in tables that are created and maintained by the Spatial indexing routines. These tables are created in the schema of the owner of the feature (underlying) table that has a spatial index created on a column of type SDO_GEOMETRY.</p>
<a id="i1003951"></a>
<div id="SPATL551" class="sect2">
<h3 class="sect2"><span class="secnum">2.9.1</span> Spatial Index Views</h3>
<p>There are two sets of spatial index metadata views for each schema (user): <span class="italic">xxx</span>_SDO_INDEX_INFO and <span class="italic">xxx</span>_SDO_INDEX_METADATA, where <span class="italic">xxx</span> can be USER or ALL. These views are read-only to users; they are created and maintained by the Spatial indexing routines.</p>
<a id="i1010900"></a>
<div id="SPATL552" class="sect3">
<h4 class="sect3"><span class="secnum">2.9.1.1</span> xxx_SDO_INDEX_INFO Views</h4>
<p>The following views contain basic information about spatial indexes:</p>
<ul>
<li>
<p><a id="sthref305"></a><a id="sthref306"></a>USER_SDO_INDEX_INFO contains index information for all spatial tables owned by the user.</p>
</li>
<li>
<p><a id="sthref307"></a><a id="sthref308"></a>ALL_SDO_INDEX_INFO contains index information for all spatial tables on which the user has SELECT permission.</p>
</li>
</ul>
<p>The USER_SDO_INDEX_INFO and ALL_SDO_INDEX_INFO views contain the same columns, as shown <a href="#g1013898">Table 2-8</a>, except that the USER_SDO_INDEX_INFO view does not contain the SDO_INDEX_OWNER column. (The columns are listed in their order in the view definition.)</p>
<div id="SPATL553" class="tblformal">
<p class="titleintable"><a id="sthref309"></a><a id="g1013898"></a>Table 2-8 Columns in the xxx_SDO_INDEX_INFO Views</p>
<table class="cellalignment740" title="Columns in the xxx_SDO_INDEX_INFO Views" summary="Columns in the xxx_SDO_INDEX_INFO Views" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t13">Column Name</th>
<th class="cellalignment741" id="r1c2-t13">Data Type</th>
<th class="cellalignment741" id="r1c3-t13">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t13" headers="r1c1-t13">
<p>SDO_INDEX_OWNER</p>
</td>
<td class="cellalignment742" headers="r2c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r2c1-t13 r1c3-t13">
<p>Owner of the index (ALL_SDO_INDEX_INFO view only).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t13" headers="r1c1-t13">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment742" headers="r3c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r3c1-t13 r1c3-t13">
<p>Name of the index.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t13" headers="r1c1-t13">
<p>TABLE_OWNER</p>
</td>
<td class="cellalignment742" headers="r4c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r4c1-t13 r1c3-t13">
<p>Name of the owner of the table containing the column on which this index is built.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t13" headers="r1c1-t13">
<p>TABLE_NAME</p>
</td>
<td class="cellalignment742" headers="r5c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r5c1-t13 r1c3-t13">
<p>Name of the table containing the column on which this index is built.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t13" headers="r1c1-t13">
<p>COLUMN_NAME</p>
</td>
<td class="cellalignment742" headers="r6c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r6c1-t13 r1c3-t13">
<p>Name of the column on which this index is built.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t13" headers="r1c1-t13">
<p>SDO_INDEX_TYPE</p>
</td>
<td class="cellalignment742" headers="r7c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r7c1-t13 r1c3-t13">
<p>Contains RTREE (for an R-tree index).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t13" headers="r1c1-t13">
<p>SDO_INDEX_TABLE</p>
</td>
<td class="cellalignment742" headers="r8c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r8c1-t13 r1c3-t13">
<p>Name of the spatial index table (described in <a href="#i1009977">Section 2.9.2</a>).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t13" headers="r1c1-t13">
<p>SDO_INDEX_STATUS</p>
</td>
<td class="cellalignment742" headers="r9c1-t13 r1c2-t13">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r9c1-t13 r1c3-t13">
<p>(Reserved for Oracle use.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" -->
<a id="CJAJADDB"></a>
<div id="SPATL554" class="sect3">
<h4 class="sect3"><span class="secnum">2.9.1.2</span> xxx_SDO_INDEX_METADATA Views</h4>
<p>The following views contain detailed information about spatial index metadata:</p>
<ul>
<li>
<p><a id="sthref310"></a><a id="sthref311"></a>USER_SDO_INDEX_METADATA contains index information for all spatial tables owned by the user.</p>
</li>
<li>
<p><a id="sthref312"></a><a id="sthref313"></a>ALL_SDO_INDEX_METADATA contains index information for all spatial tables on which the user has SELECT permission.</p>
</li>
</ul>
<p>The USER_SDO_INDEX_METADATA and ALL_SDO_INDEX_METADATA views contain the same columns, as shown <a href="#g1013603">Table 2-9</a>. (The columns are listed in their order in the view definition.)</p>
<div id="SPATL555" class="tblformal">
<p class="titleintable"><a id="sthref314"></a><a id="g1013603"></a>Table 2-9 Columns in the xxx_SDO_INDEX_METADATA Views</p>
<table class="cellalignment740" title="Columns in the xxx_SDO_INDEX_METADATA Views" summary="Columns in the xxx_SDO_INDEX_METADATA Views" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t14">Column Name</th>
<th class="cellalignment741" id="r1c2-t14">Data Type</th>
<th class="cellalignment741" id="r1c3-t14">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_OWNER</p>
</td>
<td class="cellalignment742" headers="r2c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r2c1-t14 r1c3-t14">
<p>Owner of the index.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_TYPE</p>
</td>
<td class="cellalignment742" headers="r3c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r3c1-t14 r1c3-t14">
<p>Contains RTREE (for an R-tree index).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t14" headers="r1c1-t14">
<p>SDO_LEVEL</p>
</td>
<td class="cellalignment742" headers="r4c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r4c1-t14 r1c3-t14">
<p>(No longer relevant; applies to a de-supported feature.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t14" headers="r1c1-t14">
<p>SDO_NUMTILES</p>
</td>
<td class="cellalignment742" headers="r5c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r5c1-t14 r1c3-t14">
<p>(No longer relevant; applies to a de-supported feature.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t14" headers="r1c1-t14">
<p>SDO_MAXLEVEL</p>
</td>
<td class="cellalignment742" headers="r6c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r6c1-t14 r1c3-t14">
<p>(No longer relevant; applies to a de-supported feature.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t14" headers="r1c1-t14">
<p>SDO_COMMIT_INTERVAL</p>
</td>
<td class="cellalignment742" headers="r7c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r7c1-t14 r1c3-t14">
<p>(No longer relevant; applies to a de-supported feature.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_TABLE</p>
</td>
<td class="cellalignment742" headers="r8c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r8c1-t14 r1c3-t14">
<p>Name of the spatial index table (described in <a href="#i1009977">Section 2.9.2</a>).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_NAME</p>
</td>
<td class="cellalignment742" headers="r9c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r9c1-t14 r1c3-t14">
<p>Name of the index.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_PRIMARY</p>
</td>
<td class="cellalignment742" headers="r10c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r10c1-t14 r1c3-t14">
<p>Indicates if this is a primary or secondary index. 1 = primary, 2 = secondary.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t14" headers="r1c1-t14">
<p>SDO_TSNAME</p>
</td>
<td class="cellalignment742" headers="r11c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r11c1-t14 r1c3-t14">
<p>Schema name of the SDO_INDEX_TABLE.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t14" headers="r1c1-t14">
<p>SDO_COLUMN_NAME</p>
</td>
<td class="cellalignment742" headers="r12c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r12c1-t14 r1c3-t14">
<p>Name of the column on which this index is built.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r13c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_HEIGHT</p>
</td>
<td class="cellalignment742" headers="r13c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r13c1-t14 r1c3-t14">
<p>Height of the R-tree.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r14c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_NUM_NODES</p>
</td>
<td class="cellalignment742" headers="r14c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r14c1-t14 r1c3-t14">
<p>Number of nodes in the R-tree.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r15c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_DIMENSIONALITY</p>
</td>
<td class="cellalignment742" headers="r15c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r15c1-t14 r1c3-t14">
<p>Number of dimensions used internally by Spatial. This may be different from the number of dimensions indexed, which is controlled by the <code>sdo_indx_dims</code> keyword in the <a href="sdo_objindex.htm#i78196">CREATE INDEX</a> or <a href="sdo_objindex.htm#BAJFIDIB">ALTER INDEX</a> statement, and which is stored in the SDO_INDEX_DIMS column in this view. For example, for an index on geodetic data, the SDO_RTREE_DIMENSIONALITY value is 3, but the SDO_INDEX_DIMS value is 2.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r16c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_FANOUT</p>
</td>
<td class="cellalignment742" headers="r16c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r16c1-t14 r1c3-t14">
<p>Maximum number of children in each R-tree node.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r17c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_ROOT</p>
</td>
<td class="cellalignment742" headers="r17c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r17c1-t14 r1c3-t14">
<p>Rowid corresponding to the root node of the R-tree in the index table.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r18c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_SEQ_NAME</p>
</td>
<td class="cellalignment742" headers="r18c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r18c1-t14 r1c3-t14">
<p>Sequence name associated with the R-tree.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r19c1-t14" headers="r1c1-t14">
<p>SDO_FIXED_META</p>
</td>
<td class="cellalignment742" headers="r19c1-t14 r1c2-t14">
<p>RAW</p>
</td>
<td class="cellalignment742" headers="r19c1-t14 r1c3-t14">
<p>If applicable, this column contains the metadata portion of the SDO_GROUPCODE or SDO_CODE for a fixed-level index.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r20c1-t14" headers="r1c1-t14">
<p>SDO_TABLESPACE</p>
</td>
<td class="cellalignment742" headers="r20c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r20c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement. Tablespace in which to create the SDOINDEX table.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r21c1-t14" headers="r1c1-t14">
<p>SDO_INITIAL_EXTENT</p>
</td>
<td class="cellalignment742" headers="r21c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r21c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r22c1-t14" headers="r1c1-t14">
<p>SDO_NEXT_EXTENT</p>
</td>
<td class="cellalignment742" headers="r22c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r22c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r23c1-t14" headers="r1c1-t14">
<p>SDO_PCTINCREASE</p>
</td>
<td class="cellalignment742" headers="r23c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r23c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r24c1-t14" headers="r1c1-t14">
<p>SDO_MIN_EXTENTS</p>
</td>
<td class="cellalignment742" headers="r24c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r24c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r25c1-t14" headers="r1c1-t14">
<p>SDO_MAX_EXTENTS</p>
</td>
<td class="cellalignment742" headers="r25c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r25c1-t14 r1c3-t14">
<p>Same as in the SQL CREATE TABLE statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r26c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_DIMS</p>
</td>
<td class="cellalignment742" headers="r26c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r26c1-t14 r1c3-t14">
<p>Number of dimensions of the geometry objects in the column on which this index is built, as determined by the value of the <code>sdo_indx_dims</code> keyword in the <a href="sdo_objindex.htm#i78196">CREATE INDEX</a> or <a href="sdo_objindex.htm#BAJFIDIB">ALTER INDEX</a> statement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r27c1-t14" headers="r1c1-t14">
<p>SDO_LAYER_GTYPE</p>
</td>
<td class="cellalignment742" headers="r27c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r27c1-t14 r1c3-t14">
<p>Contains DEFAULT if the layer can contain both point and polygon data, or a value from the Geometry Type column of <a href="#g1013735">Table 2-1</a> in <a href="#i1005614">Section 2.2.1</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r28c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_PCTFREE</p>
</td>
<td class="cellalignment742" headers="r28c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r28c1-t14 r1c3-t14">
<p>Minimum percentage of slots in each index tree node to be left empty when an R-tree index is created.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r29c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_PARTITION</p>
</td>
<td class="cellalignment742" headers="r29c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r29c1-t14 r1c3-t14">
<p>For a partitioned index, name of the index partition.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r30c1-t14" headers="r1c1-t14">
<p>SDO_PARTITIONED</p>
</td>
<td class="cellalignment742" headers="r30c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r30c1-t14 r1c3-t14">
<p>Contains 0 if the index is not partitioned or 1 if the index is partitioned.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r31c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_QUALITY</p>
</td>
<td class="cellalignment742" headers="r31c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r31c1-t14 r1c3-t14">
<p>Quality score for an index. See the information about R-tree quality in <a href="sdo_intro.htm#BAJIAJJC">Section 1.7.2</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r32c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_VERSION</p>
</td>
<td class="cellalignment742" headers="r32c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r32c1-t14 r1c3-t14">
<p>Internal version number of the index.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r33c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_GEODETIC</p>
</td>
<td class="cellalignment742" headers="r33c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r33c1-t14 r1c3-t14">
<p>Contains TRUE if the index is geodetic and FALSE if the index is not geodetic.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r34c1-t14" headers="r1c1-t14">
<p>SDO_INDEX_STATUS</p>
</td>
<td class="cellalignment742" headers="r34c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r34c1-t14 r1c3-t14">
<p>(Reserved for Oracle use.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r35c1-t14" headers="r1c1-t14">
<p>SDO_NL_INDEX_TABLE</p>
</td>
<td class="cellalignment742" headers="r35c1-t14 r1c2-t14">
<p>VARCHAR2</p>
</td>
<td class="cellalignment742" headers="r35c1-t14 r1c3-t14">
<p>Name of a separate index table (with a name in the form MDNT_...$) for nonleaf nodes of the index. For more information, see the description of the <code>sdo_non_leaf_tbl</code> parameter for the <a href="sdo_objindex.htm#i78196">CREATE INDEX</a> statement in <a href="sdo_objindex.htm#g999465">Chapter 18</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r36c1-t14" headers="r1c1-t14">
<p>SDO_DML_BATCH_SIZE</p>
</td>
<td class="cellalignment742" headers="r36c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r36c1-t14 r1c3-t14">
<p>Number of index updates to be processed in each batch of updates after a commit operation. For more information, see the description of the <code>sdo_dml_batch_size</code> parameter for the <a href="sdo_objindex.htm#i78196">CREATE INDEX</a> statement in <a href="sdo_objindex.htm#g999465">Chapter 18</a>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r37c1-t14" headers="r1c1-t14">
<p>SDO_RTREE_EXT_XPND</p>
</td>
<td class="cellalignment742" headers="r37c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r37c1-t14 r1c3-t14">
<p>(Reserved for future use.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment734">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r40c1-t14" headers="r1c1-t14">
<p>SDO_ROOT_MBR</p>
</td>
<td class="cellalignment742" headers="r40c1-t14 r1c2-t14">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment742" headers="r40c1-t14 r1c3-t14">
<p>Minimum bounding rectangle of the maximum extent of the spatial layer. This is greater than or equal to the MBR of the current extent, and is reset to reflect the current extent when the index is rebuilt.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009977"></a>
<div id="SPATL556" class="sect2">
<h3 class="sect2"><span class="secnum">2.9.2</span> Spatial Index Table Definition</h3>
<p>For an R-tree index, a spatial index table (each <a id="sthref315"></a>SDO_INDEX_TABLE entry as described in <a href="#g1013603">Table 2-9</a> in <a href="#CJAJADDB">Section 2.9.1.2</a>) contains the columns shown in <a href="#g1013823">Table 2-10</a>.</p>
<div id="SPATL557" class="tblformal">
<p class="titleintable"><a id="sthref316"></a><a id="g1013823"></a>Table 2-10 Columns in an R-Tree Spatial Index Data Table</p>
<table class="cellalignment740" title="Columns in an R-Tree Spatial Index Data Table" summary="Columns in an R-Tree Spatial Index Data Table" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t15">Column Name</th>
<th class="cellalignment741" id="r1c2-t15">Data Type</th>
<th class="cellalignment741" id="r1c3-t15">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t15" headers="r1c1-t15">
<p>NODE_ID</p>
</td>
<td class="cellalignment742" headers="r2c1-t15 r1c2-t15">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r2c1-t15 r1c3-t15">
<p>Unique ID number for this node of the tree.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t15" headers="r1c1-t15">
<p>NODE_LEVEL</p>
</td>
<td class="cellalignment742" headers="r3c1-t15 r1c2-t15">
<p>NUMBER</p>
</td>
<td class="cellalignment742" headers="r3c1-t15 r1c3-t15">
<p>Level of the node in the tree. Leaf nodes (nodes whose entries point to data items in the base table) are at level 1, their parent nodes are at level 2, and so on.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t15" headers="r1c1-t15">
<p>INFO</p>
</td>
<td class="cellalignment742" headers="r4c1-t15 r1c2-t15">
<p>BLOB</p>
</td>
<td class="cellalignment742" headers="r4c1-t15 r1c3-t15">
<p>Other information in a node. Includes an array of <code>&lt;child_mbr, child_rowid&gt;</code> pairs (maximum of fanout value, or number of children for such pairs in each R-tree node), where <code>child_rowid</code> is the rowid of a child node, or the rowid of a data item from the base table.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="SPATL558" class="sect2"><a id="sthref317"></a>
<h3 class="sect2"><span class="secnum">2.9.3</span> <a id="sthref318"></a><a id="sthref319"></a><a id="sthref320"></a>R-Tree Index Sequence Object</h3>
<p>Each R-tree spatial index table has an associated sequence object (SDO_RTREE_SEQ_NAME in the USER_SDO_INDEX_METADATA view, described in <a href="#g1013603">Table 2-9</a> in <a href="#CJAJADDB">Section 2.9.1.2</a>). The sequence is used to ensure that simultaneous updates can be performed to the index by multiple concurrent users.</p>
<p>The sequence name is the index table name with the letter <span class="italic">S</span> replacing the letter <span class="italic">T</span> before the underscore (for example, the sequence object MDRS_5C01$ is associated with the index table MDRT_5C01$).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010145"></a>
<div id="SPATL559" class="sect1">
<h2 class="sect1"><span class="secnum">2.10</span> <a id="sthref321"></a><a id="sthref322"></a>Unit of Measurement Support</h2>
<p>Geometry functions that involve measurement allow an optional <code>unit</code> parameter to specify the unit of measurement for a specified distance or area, if a georeferenced coordinate system (SDO_SRID value) is associated with the input geometry or geometries. The <code>unit</code> parameter is not valid for geometries with a null SDO_SRID value (that is, an orthogonal Cartesian system). For information about support for coordinate systems, see <a href="sdo_cs_concepts.htm#g1002522">Chapter 6</a>.</p>
<p>The default unit of measure is the one associated with the georeferenced coordinate system. The unit of measure for most coordinate systems is the meter, and in these cases the default unit for distances is meter and the default unit for areas is square meter. By using the <code>unit</code> parameter, however, you can have Spatial automatically convert and return results that are more meaningful to application users, for example, displaying the distance to a restaurant in miles.</p>
<p>The <code>unit</code> parameter must be enclosed in single quotation marks and contain the string <code>unit=</code> and a valid UNIT_OF_MEAS_NAME value from the SDO_UNITS_OF_MEASURE table (described in <a href="sdo_cs_concepts.htm#CIHHGJBF">Section 6.7.27</a>). For example, 'unit=KM' in the following example (using data and definitions from <a href="sdo_cs_concepts.htm#i885437">Example 6-17</a> in <a href="sdo_cs_concepts.htm#i889615">Section 6.13</a>) specifies kilometers as the unit of measurement:</p>
<pre>
SELECT c.name, SDO_GEOM.SDO_LENGTH(c.shape, m.diminfo, 'unit=KM')
  FROM cola_markets_cs c, user_sdo_geom_metadata m 
  WHERE m.table_name = 'COLA_MARKETS_CS' AND m.column_name = 'SHAPE';
</pre>
<p>Spatial uses the information in the SDO_UNITS_OF_MEASURE table (described in <a href="sdo_cs_concepts.htm#CIHHGJBF">Section 6.7.27</a>) to determine which unit names are valid and what ratios to use in comparing or converting between different units. For convenience, you can also use the following legacy views to see the angle, area, and distance units of measure:</p>
<ul>
<li>
<p>MDSYS.SDO_ANGLE_UNITS (described in <a href="sdo_cs_concepts.htm#i893912">Section 6.8.2</a>)</p>
</li>
<li>
<p>MDSYS.SSDO_AREA_UNITS (described in <a href="sdo_cs_concepts.htm#CIHIFDDH">Section 6.8.3</a>)</p>
</li>
<li>
<p>MDSYS.SSDO_DIST_UNITS (described in <a href="sdo_cs_concepts.htm#CIHICIEH">Section 6.8.5</a>)</p>
</li>
</ul>
<a id="CBBFFGIE"></a>
<div id="SPATL560" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">2.10.1</span> Creating a User-Defined Unit of Measurement</h3>
<p>If the area and distance units of measurement supplied by Oracle are not sufficient for your needs, you can create user-defined area and distance units. (You cannot create a user-defined angle unit.) To do so, you must connect to the database as a user that has been granted the DBA role, and insert a row for each desired unit to the SDO_UNITS_OF_MEASURE table (described in <a href="sdo_cs_concepts.htm#CIHHGJBF">Section 6.7.27</a>)</p>
<p><a href="#CIHECEAB">Table 2-11</a> lists the columns in the SDO_UNITS_OF_MEASURE table and the requirements and recommendations for each if you are inserting a row for a user-defined unit of measurement.</p>
<div id="SPATL561" class="tblformal">
<p class="titleintable"><a id="sthref323"></a><a id="CIHECEAB"></a>Table 2-11 SDO_UNITS_OF_MEASURE Table Entries for User-Defined Unit</p>
<table class="cellalignment740" title="SDO_UNITS_OF_MEASURE Table Entries for User-Defined Unit" summary="SDO_UNITS_OF_MEASURE Table" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t16">Column Name</th>
<th class="cellalignment741" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t16" headers="r1c1-t16">
<p>UOM_ID</p>
</td>
<td class="cellalignment742" headers="r2c1-t16 r1c2-t16">
<p>Any unit of measure ID number not currently used for an Oracle-supplied unit or another user-defined unit. Example: <code>1000001</code></p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t16" headers="r1c1-t16">
<p>UNIT_OF_MEAS_NAME</p>
</td>
<td class="cellalignment742" headers="r3c1-t16 r1c2-t16">
<p>Name of the user-defined unit of measurement. Example: <code>HALF_METER</code></p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t16" headers="r1c1-t16">
<p>SHORT_NAME</p>
</td>
<td class="cellalignment742" headers="r4c1-t16 r1c2-t16">
<p>Optional short name (if any) of the unit of measurement.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t16" headers="r1c1-t16">
<p>UNIT_OF_MEAS_TYPE</p>
</td>
<td class="cellalignment742" headers="r5c1-t16 r1c2-t16">
<p>Type of measure for which the unit is used. Must be either <code>area</code> (for an area unit) or <code>length</code> (for a distance unit).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t16" headers="r1c1-t16">
<p>TARGET_UOM_ID</p>
</td>
<td class="cellalignment742" headers="r6c1-t16 r1c2-t16">
<p>Optional, but for support purposes you should enter one of the following: <code>10008</code> for an area unit (10008 = UOM_ID for SQ_METER) or <code>10032</code> for a distance unit (10032 = UOM_ID for METER).</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t16" headers="r1c1-t16">
<p>FACTOR_B</p>
</td>
<td class="cellalignment742" headers="r7c1-t16 r1c2-t16">
<p>For a value that can be expressed as a floating point number, specify how many square meters (for an area unit) or meters (for a distance unit) are equal to one of the user-defined unit. For example, for a unit defined as one-half of a standard meter, specify: <code>.5</code></p>
<p>For a value that cannot be expressed as a simple floating point number, specify the dividend for the expression FACTOR_B/FACTOR_C that determines how many square meters (for an area unit) or meters (for a distance unit) are equal to one of the user-defined unit.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t16" headers="r1c1-t16">
<p>FACTOR_C</p>
</td>
<td class="cellalignment742" headers="r8c1-t16 r1c2-t16">
<p>For a value that can be expressed as a floating point number, specify 1.</p>
<p>For a value that cannot be expressed as a simple floating point number, specify the divisor for the expression FACTOR_B/FACTOR_C that determines how many square meters (for an area unit) or meters (for a distance unit) are equal to one of the user-defined unit.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t16" headers="r1c1-t16">
<p>INFORMATION_SOURCE</p>
</td>
<td class="cellalignment742" headers="r9c1-t16 r1c2-t16">
<p>Specify the following: <code>USER_DEFINED</code></p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t16" headers="r1c1-t16">
<p>DATA_SOURCE</p>
</td>
<td class="cellalignment742" headers="r10c1-t16 r1c2-t16">
<p>A phrase briefly describing the unit. Example: <code>User-defined half meter</code></p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t16" headers="r1c1-t16">
<p>IS_LEGACY</p>
</td>
<td class="cellalignment742" headers="r11c1-t16 r1c2-t16">
<p>Specify the following: <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t16" headers="r1c1-t16">
<p>LEGACY_CODE</p>
</td>
<td class="cellalignment742" headers="r12c1-t16 r1c2-t16">
<p>(Do not use this for a user-defined unit.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CBBJCGCE">Example 2-18</a> creates a user-defined distance unit named <code>HALF_METER</code>, and uses it in a query to find all customers within 400,000 half-meters (200 kilometers) of a specified store.</p>
<div id="SPATL562" class="example">
<p class="titleinexample"><a id="CBBJCGCE"></a>Example 2-18 Creating and Using a User-Defined Unit of Measurement</p>
<pre>
-- Distance unit: HALF_METER
-- FACTOR_B specifies how many meters = one of this unit.

INSERT INTO MDSYS.SDO_UNITS_OF_MEASURE
  (UOM_ID, UNIT_OF_MEAS_NAME, UNIT_OF_MEAS_TYPE, TARGET_UOM_ID,
   FACTOR_B, FACTOR_C, INFORMATION_SOURCE, DATA_SOURCE, IS_LEGACY)
VALUES
  (100001, 'HALF_METER', 'length', 100001,
   .5, 1, 'User-defined half meter', 'USER_DEFINED', 'FALSE');
 
. . .
-- Find all the customers within 400,000 half-meters of store_id = 101
SELECT /*+ordered*/
    c.customer_id,
    c.first_name,
    c.last_name
FROM stores s,
    customers c
WHERE s.store_id = 101
AND sdo_within_distance (c.cust_geo_location,
    s.store_geo_location,
    'distance = 400000 unit = HALF_METER') = 'TRUE';
 
CUSTOMER_ID FIRST_NAME                     LAST_NAME                           
----------- ------------------------------ ------------------------------      
       1005 Carla                          Rodriguez                           
       1004 Thomas                         Williams                            
       1003 Marian                         Chang                               
       1001 Alexandra                      Nichols
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment733">
<tr>
<td class="cellalignment742">
<table class="cellalignment738">
<tr>
<td class="cellalignment737"><a href="sdo_intro.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment737"><a href="sdo_sql_mm.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment744">
<table class="cellalignment736">
<tr>
<td class="cellalignment737"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment737"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment737"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment737"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment737"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment737"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
