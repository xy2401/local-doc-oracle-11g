<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Spatial Operators</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information for indexing and storing spatial data and for developing spatial applications using Oracle Spatial and Graph and Oracle Locator." />
<meta name="dcterms.created" content="2013-11-26T3:11:46Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial Developer's Guide" />
<meta name="dcterms.identifier" content="E11830-15" />
<meta name="dcterms.isVersionOf" content="SPATL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sdo_objindex.htm" title="Previous" type="text/html" />
<link rel="Next" href="sdo_aggr.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11830.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/51</span> <!-- End Header -->
<div id="SPATL110" class="chapter"><a id="g1001037"></a> <a id="i76448"></a>
<h1 class="chapter"><span class="secnum">19</span> Spatial Operators</h1>
<p>This chapter describes the operators that you can use when working with the spatial object data type. For an overview of spatial operators, including how they differ from spatial procedures and functions, see <a href="sdo_intro.htm#BAJDEGDH">Section 1.9</a>. <a href="#g996892">Table 19-1</a> lists the main operators.</p>
<div id="SPATL1021" class="tblformal">
<p class="titleintable"><a id="sthref1051"></a><a id="g996892"></a>Table 19-1 Main Spatial Operators</p>
<table class="cellalignment740" title="Main Spatial Operators" summary="Main Spatial Operators" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t2">Operator</th>
<th class="cellalignment741" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#BJAFBCFC">SDO_FILTER</a></p>
</td>
<td class="cellalignment742" headers="r2c1-t2 r1c2-t2">
<p>Specifies which geometries may interact with a given geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#BGEDJIBF">SDO_JOIN</a></p>
</td>
<td class="cellalignment742" headers="r3c1-t2 r1c2-t2">
<p>Performs a spatial join based on one or more topological relationships.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#i78067">SDO_NN</a></p>
</td>
<td class="cellalignment742" headers="r4c1-t2 r1c2-t2">
<p>Determines the nearest neighbor geometries to a geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#i80529">SDO_NN_DISTANCE</a></p>
</td>
<td class="cellalignment742" headers="r5c1-t2 r1c2-t2">
<p>Returns the distance of an object returned by the <a href="#i78067">SDO_NN</a> operator.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#i78531">SDO_RELATE</a></p>
</td>
<td class="cellalignment742" headers="r6c1-t2 r1c2-t2">
<p>Determines whether or not two geometries interact in a specified way. (See also <a href="#BGEBCFBE">Table 19-2</a> for convenient alternative operators for performing specific mask value operations.)</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#i77653">SDO_WITHIN_DISTANCE</a></p>
</td>
<td class="cellalignment742" headers="r7c1-t2 r1c2-t2">
<p>Determines if two geometries are within a specified distance from one another.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BGEBCFBE">Table 19-2</a> lists operators, provided for convenience, that perform an <a href="#i78531">SDO_RELATE</a> operation of a specific mask type.</p>
<div id="SPATL1022" class="tblformal">
<p class="titleintable"><a id="sthref1052"></a><a id="BGEBCFBE"></a>Table 19-2 Convenience Operators for SDO_RELATE Operations</p>
<table class="cellalignment740" title="Convenience Operators for SDO_RELATE Operations" summary="Convenience Operators for SDO_RELATE Operations" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t3">Operator</th>
<th class="cellalignment741" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#BGEJHDGD">SDO_ANYINTERACT</a></p>
</td>
<td class="cellalignment742" headers="r2c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the ANYINTERACT topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#BGEHCFDH">SDO_CONTAINS</a></p>
</td>
<td class="cellalignment742" headers="r3c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the CONTAINS topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#BGEHEAEJ">SDO_COVEREDBY</a></p>
</td>
<td class="cellalignment742" headers="r4c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the COVEREDBY topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#BGEGIJFB">SDO_COVERS</a></p>
</td>
<td class="cellalignment742" headers="r5c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the COVERS topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#BGEBCEJE">SDO_EQUAL</a></p>
</td>
<td class="cellalignment742" headers="r6c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the EQUAL topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#BGEFABDH">SDO_INSIDE</a></p>
</td>
<td class="cellalignment742" headers="r7c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the INSIDE topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#BGECFCGB">SDO_ON</a></p>
</td>
<td class="cellalignment742" headers="r8c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the ON topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#BGEGDCEI">SDO_OVERLAPBDYDISJOINT</a></p>
</td>
<td class="cellalignment742" headers="r9c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the OVERLAPBDYDISJOINT topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#BGEGBEAI">SDO_OVERLAPBDYINTERSECT</a></p>
</td>
<td class="cellalignment742" headers="r10c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the OVERLAPBDYINTERSECT topological relationship with a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#BGEDACIF">SDO_OVERLAPS</a></p>
</td>
<td class="cellalignment742" headers="r11c1-t3 r1c2-t3">
<p>Checks if any geometries in a table overlap (that is, have the OVERLAPBDYDISJOINT or OVERLAPBDYINTERSECT topological relationship with) a specified geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#BGEHHIGF">SDO_TOUCH</a></p>
</td>
<td class="cellalignment742" headers="r12c1-t3 r1c2-t3">
<p>Checks if any geometries in a table have the TOUCH topological relationship with a specified geometry.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
For any numbers in string (VARCHAR2) parameters to Spatial and Graph operators and subprograms, the period (.) must be used for any decimal points regardless of the locale. Example: <code>'distance=3.7'</code></div>
<p>The rest of this chapter provides reference information on the operators, listed in alphabetical order.</p>
<p>For information about using operators with topologies, see <a class="olink TOPOL300" href="../../appdev.112/e11831/sdo_topo_concepts.htm#TOPOL300"><span class="italic">Oracle Spatial Topology and Network Data Models Developer's Guide</span></a>.</p>
<div class="refentry"><a id="BGEJHDGD"></a>
<div id="SPATL1023" class="refsect1">
<h2 class="refsect1"><a id="sthref1053"></a><a id="sthref1054"></a><a id="sthref1055"></a>SDO_ANYINTERACT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1056"></a>Format</p>
<p class="synopsis">SDO_ANYINTERACT(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1057"></a>Description</p>
<p>Checks if any geometries in a table have the ANYINTERACT topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=ANYINTERACT'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1058"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_ANYINTERACT operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t5">Value</th>
<th class="cellalignment741" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t5" headers="r1c1-t5">geometry1</td>
<td class="cellalignment742" headers="r2c1-t5 r1c2-t5">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t5" headers="r1c1-t5">geometry2</td>
<td class="cellalignment742" headers="r3c1-t5 r1c2-t5">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1059"></a>Returns</p>
<p>The expression SDO_ANYINTERACT(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the ANYINTERACT topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1060"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1061"></a>Examples</p>
<p>The following example finds geometries that have the ANYINTERACT relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.)</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_ANYINTERACT(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(4,6, 8,8))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         2 cola_b                                                               
         1 cola_a                                                               
         4 cola_d 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEHCFDH"></a>
<div id="SPATL1024" class="refsect1">
<h2 class="refsect1"><a id="sthref1062"></a><a id="sthref1063"></a><a id="sthref1064"></a>SDO_CONTAINS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1065"></a>Format</p>
<p class="synopsis">SDO_CONTAINS(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1066"></a>Description</p>
<p>Checks if any geometries in a table have the CONTAINS topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=CONTAINS'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1067"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_CONTAINS operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t6">Value</th>
<th class="cellalignment741" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t6" headers="r1c1-t6">geometry1</td>
<td class="cellalignment742" headers="r2c1-t6 r1c2-t6">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t6" headers="r1c1-t6">geometry2</td>
<td class="cellalignment742" headers="r3c1-t6 r1c2-t6">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1068"></a>Returns</p>
<p>The expression SDO_CONTAINS(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the CONTAINS topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1069"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1070"></a>Examples</p>
<p>The following example finds geometries that have the CONTAINS relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 2,2, 4,6). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_a</code> contains the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_CONTAINS(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(2,2, 4,6))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         1 cola_a
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEHEAEJ"></a>
<div id="SPATL1025" class="refsect1">
<h2 class="refsect1"><a id="sthref1071"></a><a id="sthref1072"></a><a id="sthref1073"></a>SDO_COVEREDBY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1074"></a>Format</p>
<p class="synopsis">SDO_COVEREDBY(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1075"></a>Description</p>
<p>Checks if any geometries in a table have the COVEREDBY topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=COVEREDBY'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1076"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_COVEREDBY operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t7">Value</th>
<th class="cellalignment741" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t7" headers="r1c1-t7">geometry1</td>
<td class="cellalignment742" headers="r2c1-t7 r1c2-t7">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t7" headers="r1c1-t7">geometry2</td>
<td class="cellalignment742" headers="r3c1-t7 r1c2-t7">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1077"></a>Returns</p>
<p>The expression SDO_COVEREDBY(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the COVEREDBY topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1078"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1079"></a>Examples</p>
<p>The following example finds geometries that have the COVEREDBY relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 1,1, 5,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_a</code> is covered by the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_COVEREDBY(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(1,1, 5,8))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         1 cola_a
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEGIJFB"></a>
<div id="SPATL1026" class="refsect1">
<h2 class="refsect1"><a id="sthref1080"></a><a id="sthref1081"></a><a id="sthref1082"></a>SDO_COVERS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1083"></a>Format</p>
<p class="synopsis">SDO_COVERS(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1084"></a>Description</p>
<p>Checks if any geometries in a table have the COVERS topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=COVERS'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1085"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_COVERS operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t8">Value</th>
<th class="cellalignment741" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t8" headers="r1c1-t8">geometry1</td>
<td class="cellalignment742" headers="r2c1-t8 r1c2-t8">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t8" headers="r1c1-t8">geometry2</td>
<td class="cellalignment742" headers="r3c1-t8 r1c2-t8">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1086"></a>Returns</p>
<p>The expression SDO_COVERS(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the COVERS topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1087"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1088"></a>Examples</p>
<p>The following example finds geometries that have the COVERS relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 1,1, 4,6). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_a</code> covers the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_COVERS(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(1,1, 4,6))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         1 cola_a
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEBCEJE"></a>
<div id="SPATL1027" class="refsect1">
<h2 class="refsect1"><a id="sthref1089"></a><a id="sthref1090"></a><a id="sthref1091"></a>SDO_EQUAL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1092"></a>Format</p>
<p class="synopsis">SDO_EQUAL(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1093"></a>Description</p>
<p>Checks if any geometries in a table have the EQUAL topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=EQUAL'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1094"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_EQUAL operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t9">Value</th>
<th class="cellalignment741" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t9" headers="r1c1-t9">geometry1</td>
<td class="cellalignment742" headers="r2c1-t9 r1c2-t9">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t9" headers="r1c1-t9">geometry2</td>
<td class="cellalignment742" headers="r3c1-t9 r1c2-t9">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1095"></a>Returns</p>
<p>The expression SDO_EQUAL(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the EQUAL topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1096"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1097"></a>Examples</p>
<p>The following example finds geometries that have the EQUAL relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 1,1, 5,7). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, <code>cola_a</code> (and only <code>cola_a</code>) has the same boundary and interior as the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_EQUAL(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(1,1, 5,7))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         1 cola_a
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJAFBCFC"></a>
<div id="SPATL1028" class="refsect1">
<h2 class="refsect1"><a id="sthref1098"></a><a id="sthref1099"></a><a id="sthref1100"></a>SDO_FILTER</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1101"></a>Format</p>
<p class="synopsis">SDO_FILTER(geometry1, geometry2, param);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1102"></a>Description</p>
<p>Uses the spatial index to identify either the set of spatial objects that are likely to interact spatially with a given object (such as an area of interest), or pairs of spatial objects that are likely to interact spatially. Objects interact spatially if they are not disjoint.</p>
<p>This operator performs only a primary filter operation. The secondary filtering operation, performed by the <a href="#i78531">SDO_RELATE</a> operator, can be used to determine with certainty if objects interact spatially.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1103"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_FILTER operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t10">Value</th>
<th class="cellalignment741" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t10" headers="r1c1-t10">geometry1</td>
<td class="cellalignment742" headers="r2c1-t10 r1c2-t10">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t10" headers="r1c1-t10">geometry2</td>
<td class="cellalignment742" headers="r3c1-t10 r1c2-t10">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t10" headers="r1c1-t10">param</td>
<td class="cellalignment742" headers="r4c1-t10 r1c2-t10">Optionally specifies either or both of the <code>min_resolution</code> and <code>max_resolution</code> keywords. Data type is VARCHAR2.
<p>The <code>min_resolution</code> keyword includes only geometries for which at least one side of the geometry's MBR is equal to or greater than the specified value. For example, <code>min_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is at least 10. (This keyword can be used to exclude geometries that are too small to be of interest.)</p>
<p>The <code>max_resolution</code> keyword includes only geometries for which at least one side of the geometry's MBR is less than or equal to the specified value. For example, <code>max_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is less than or equal to 10. (This keyword can be used to exclude geometries that are too large to be of interest.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1104"></a>Returns</p>
<p>The expression SDO_FILTER(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that are non-disjoint, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1105"></a>Usage Notes</p>
<p>The SDO_FILTER operator must always be used in a WHERE clause and the condition that includes the operator should be an expression of the form SDO_FILTER(arg1, arg2) = 'TRUE'.</p>
<p><code>geometry2</code> can come from a table or be a transient SDO_GEOMETRY object, such as a bind variable or SDO_GEOMETRY constructor.</p>
<ul>
<li>
<p>If the <code>geometry2</code> column is not spatially indexed, the operator indexes the query window in memory and performance is very good.</p>
</li>
<li>
<p><a id="sthref1106"></a><a id="sthref1107"></a><a id="sthref1108"></a>If two or more geometries from <code>geometry2</code> are passed to the operator, the ORDERED optimizer hint must be specified, and the table in <code>geometry2</code> must be specified first in the FROM clause.</p>
</li>
</ul>
<p>If <code>geometry1</code> and <code>geometry2</code> are based on different coordinate systems, <code>geometry2</code> is temporarily transformed to the coordinate system of <code>geometry1</code> for the operation to be performed, as described in <a href="sdo_cs_concepts.htm#CIHBJCAG">Section 6.10.1</a>.</p>
<div class="infobox-note">
<p class="notep1"><a id="sthref1109"></a><a id="sthref1110"></a>RLS Restriction:</p>
If the DBMS_RLS.ADD_POLICY procedure has been used to add a fine-grained access control policy to a table or view, and if the specified policy function uses a spatial operator, the operator must be SDO_FILTER. No other spatial operators are supported in that context.</div>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1111"></a>Examples</p>
<p>The following example selects the geometries that are likely to interact with a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.)</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_FILTER(c.shape,
    SDO_GEOMETRY(2003, NULL, NULL,
      SDO_ELEM_INFO_ARRAY(1,1003,3),
      SDO_ORDINATE_ARRAY(4,6, 8,8))
    ) = 'TRUE';
 
    MKT_ID NAME                                                                 
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a                                                               
         4 cola_d 
</pre>
<p>The following example is the same as the preceding example, except that it includes only geometries where at least one side of the geometry's MBR is equal to or greater than 4.1. In this case, only <code>cola_a</code> and <code>cola_b</code> are returned, because their MBRs have at least one side with a length greater than or equal to 4.1. The circle <code>cola_d</code> is excluded, because its MBR is a square whose sides have a length of 4.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_FILTER(c.shape,
    SDO_GEOMETRY(2003, NULL, NULL,
      SDO_ELEM_INFO_ARRAY(1,1003,3),
      SDO_ORDINATE_ARRAY(4,6, 8,8)),
    'min_resolution=4.1'
    ) = 'TRUE';
 
    MKT_ID NAME                                                                 
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a 
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column objects are likely to interact spatially with the GEOMETRY column object in the QUERY_POLYS table that has a GID value of 1.</p>
<pre>
SELECT A.gid 
  FROM Polygons A, query_polys B 
  WHERE B.gid = 1 
  AND SDO_FILTER(A.Geometry, B.Geometry) = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object is likely to interact spatially with the geometry stored in the <code>aGeom</code> variable.</p>
<pre>
Select A.Gid
  FROM Polygons A 
  WHERE SDO_FILTER(A.Geometry, :aGeom) = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object is likely to interact spatially with the specified rectangle having the lower-left coordinates (x1,y1) and the upper-right coordinates (x2, y2).</p>
<pre>
Select A.Gid 
  FROM Polygons A 
  WHERE SDO_FILTER(A.Geometry, sdo_geometry(2003,NULL,NULL,
                                   sdo_elem_info_array(1,1003,3),
                                   sdo_ordinate_array(x1,y1,x2,y2))
                   ) = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object is likely to interact spatially with any GEOMETRY column object in the QUERY_POLYS table. In this example, the ORDERED optimizer hint is used and the QUERY_POLYS (<code>geometry2</code>) table is specified first in the FROM clause, because multiple geometries from <code>geometry2</code> are involved (see the Usage Notes).</p>
<pre>
SELECT /*+ ORDERED */
  A.gid 
  FROM query_polys B, polygons A 
  WHERE SDO_FILTER(A.Geometry, B.Geometry) = 'TRUE';
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1112"></a>Related Topics</p>
<ul>
<li>
<p><a href="#i78531">SDO_RELATE</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEFABDH"></a>
<div id="SPATL1029" class="refsect1">
<h2 class="refsect1"><a id="sthref1113"></a><a id="sthref1114"></a><a id="sthref1115"></a>SDO_INSIDE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1116"></a>Format</p>
<p class="synopsis">SDO_INSIDE(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1117"></a>Description</p>
<p>Checks if any geometries in a table have the INSIDE topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=INSIDE'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1118"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_INSIDE operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t12">Value</th>
<th class="cellalignment741" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t12" headers="r1c1-t12">geometry1</td>
<td class="cellalignment742" headers="r2c1-t12 r1c2-t12">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t12" headers="r1c1-t12">geometry2</td>
<td class="cellalignment742" headers="r3c1-t12 r1c2-t12">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1119"></a>Returns</p>
<p>The expression SDO_INSIDE(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the INSIDE topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1120"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1121"></a>Examples</p>
<p>The following example finds geometries that have the INSIDE relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 5,6, 12,12). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_d</code> (the circle) is inside the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_INSIDE(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(5,6, 12,12))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         4 cola_d
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEDJIBF"></a>
<div id="SPATL1030" class="refsect1">
<h2 class="refsect1"><a id="sthref1122"></a><a id="sthref1123"></a><a id="sthref1124"></a><a id="sthref1125"></a>SDO_JOIN</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1126"></a>Format</p>
<p class="synopsis">SDO_JOIN(table_name1, column_name1, table_name2, column_name2, params, preserve_join_order, table1_partition, table2_partition) RETURN SDO_ROWIDSET;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1127"></a>Description</p>
<p>Performs a spatial join based on one or more topological relationships.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1128"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_JOIN operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t13">Value</th>
<th class="cellalignment741" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t13" headers="r1c1-t13">table_name1</td>
<td class="cellalignment742" headers="r2c1-t13 r1c2-t13">Name of the first table to be used in the spatial join operation. The table must have a column of type SDO_GEOMETRY. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t13" headers="r1c1-t13">column_name1</td>
<td class="cellalignment742" headers="r3c1-t13 r1c2-t13">Name of the spatial column of type SDO_GEOMETRY in <code>table_name1</code>. A spatial R-tree index must be defined on this column. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t13" headers="r1c1-t13">table_name2</td>
<td class="cellalignment742" headers="r4c1-t13 r1c2-t13">Name of the second table to be used in the spatial join operation. (It can be the same as or different from <code>table_name1</code>. If <code>table_name2</code> is the same as <code>table_name1</code>, see <a href="#CHDEHJAH">"Optimizing Self-Joins"</a> in this section.) The table must have a column of type SDO_GEOMETRY. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t13" headers="r1c1-t13">column_name2</td>
<td class="cellalignment742" headers="r5c1-t13 r1c2-t13">Name of the spatial column of type SDO_GEOMETRY in <code>table_name2</code>. A spatial R-tree index must be defined on this column. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t13" headers="r1c1-t13">params</td>
<td class="cellalignment742" headers="r6c1-t13 r1c2-t13">Optional parameter string of keywords and values; available only if <code>mask=ANYINTERACT</code>. Determines the behavior of the operator. See <a href="#BGEEACJD">Table 19-3</a> in the Usage Notes for information about the available keywords. Data type is VARCHAR2. Default is NULL.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t13" headers="r1c1-t13">preserve_join_order</td>
<td class="cellalignment742" headers="r7c1-t13 r1c2-t13">Optional parameter to specify if the join order is guaranteed to be preserved during processing of the operator. If the value is <code>0</code> (the default), the order of the tables might be changed; if the value is <code>1</code>, the order of the tables is not changed. Data type is NUMBER. Default is 0.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t13" headers="r1c1-t13">table1_partition</td>
<td class="cellalignment742" headers="r8c1-t13 r1c2-t13">Name of the table partition in <code>table_name1</code>. Must be specified if the table has a partitioned spatial index; must be null if the table does not have a partitioned spatial index. (For information about using partitioned spatial indexes, see <a href="sdo_index_query.htm#i1005901">Section 5.1.3</a>.) Data type is VARCHAR2. Default is null.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t13" headers="r1c1-t13">table2_partition</td>
<td class="cellalignment742" headers="r9c1-t13 r1c2-t13">Name of the table partition in <code>table_name2</code>. Must be specified if the table has a partitioned spatial index; must be null if the table does not have a partitioned spatial index. (For information about using partitioned spatial indexes, see <a href="sdo_index_query.htm#i1005901">Section 5.1.3</a>.) Data type is VARCHAR2. Default is null.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1129"></a>Returns</p>
<p><a id="sthref1130"></a><a id="sthref1131"></a>SDO_JOIN returns an object of SDO_ROWIDSET, which consists of a table of objects of SDO_ROWIDPAIR. Oracle Spatial defines the type SDO_ROWIDSET as:</p>
<pre>
CREATE TYPE sdo_rowidset as TABLE OF sdo_rowidpair;
</pre>
<p>Oracle Spatial defines the object type SDO_ROWIDPAIR as:</p>
<pre>
CREATE TYPE sdo_rowidpair AS OBJECT
   (rowid1  VARCHAR2(24),
    rowid2  VARCHAR2(24));
</pre>
<p>In the SDO_ROWIDPAIR definition, <code>rowid1</code> refers to a rowid from <code>table_name1</code>, and <code>rowid2</code> refers to a rowid from <code>table_name2</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1132"></a>Usage Notes</p>
<p>SDO_JOIN is technically not an operator, but a table function. (For an explanation of table functions, see <a class="olink LNPLS" href="../e25519/toc.htm"><span class="italic">Oracle Database PL/SQL Language Reference</span></a>.) However, it is presented in the chapter with Spatial operators because its usage is similar to that of the operators, and because it is not part of a package with other functions and procedures.</p>
<p>This table function is recommended when you need to perform full table joins.</p>
<p>The geometries in <code>column_name1</code> and <code>column_name2</code> must have the same SRID (coordinate system) value and the same number of dimensions.</p>
<p><a id="sthref1133"></a><a id="sthref1134"></a><a id="sthref1135"></a>For best performance, use the <code>/*+ ORDERED */</code> optimizer hint, and specify the SDO_JOIN table function first in the FROM clause.</p>
<p>If a table is version-enabled (using the Workspace Manager feature), you must specify the <code><span class="codeinlineitalic">&lt;table_name&gt;</span></code><code>_LT</code> table created by Workspace Manager. For example, if the COLA_MARKETS table is version-enabled and you want to perform a spatial join operation on that table, specify COLA_MARKETS_LT (not COLA_MARKETS) with the SDO_JOIN table function. (However, for all other Spatial functions, procedures, and operators, do not use the <code><span class="codeinlineitalic">&lt;table_name&gt;</span></code><code>_LT</code> name.)</p>
<p><a href="#BGEEACJD">Table 19-3</a> shows the keywords for the <code>params</code> parameter.</p>
<div id="SPATL1031" class="tblformal">
<p class="titleintable"><a id="sthref1136"></a><a id="BGEEACJD"></a>Table 19-3 params Keywords for the SDO_JOIN Operator</p>
<table class="cellalignment740" title="params Keywords for the SDO_JOIN Operator" summary="params Keywords for the SDO_JOIN Operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t14">Keyword</th>
<th class="cellalignment741" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t14" headers="r1c1-t14">
<p>mask</p>
</td>
<td class="cellalignment742" headers="r2c1-t14 r1c2-t14">
<p><a id="sthref1137"></a>The topological relationship of interest.Valid values are 'mask=<span class="italic">&lt;value&gt;</span>' where <span class="italic">&lt;value&gt;</span> is one or more of the mask values valid for the <a href="#i78531">SDO_RELATE</a> operator (<code>TOUCH</code>, <code>OVERLAPBDYDISJOINT</code>, <code>OVERLAPBDYINTERSECT</code>, <code>EQUAL</code>, <code>INSIDE</code>, <code>COVEREDBY</code>, <code>CONTAINS</code>, <code>COVERS</code>, <code>ANYINTERACT</code>, <code>ON</code>), or <code>FILTER</code>, which checks if the MBRs (the filter-level approximations) intersect. Multiple masks are combined with the logical Boolean operator OR (for example, <code>'mask=inside+touch'</code>); however, <code>FILTER</code> cannot be combined with any other mask.</p>
<p>If this parameter is null or contains an empty string, <code>mask=FILTER</code> is assumed.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t14" headers="r1c1-t14">
<p>distance</p>
</td>
<td class="cellalignment742" headers="r3c1-t14 r1c2-t14">
<p>Specifies a numeric distance value that is added to the tolerance value (explained in <a href="sdo_intro.htm#i884589">Section 1.5.5</a>) before the relationship checks are performed. For example, if the tolerance is 10 meters and you specify <code>'distance=100 unit=meter'</code>, two objects are considered to have spatial interaction if they are within 110 meters of each other.If you specify <code>distance</code> but not <code>unit</code>, the unit of measurement associated with the data is assumed.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t14" headers="r1c1-t14">
<p>unit</p>
</td>
<td class="cellalignment742" headers="r4c1-t14 r1c2-t14">
<p>Specifies a unit of measurement to be associated with the distance value (for example, <code>'distance=100 unit=meter'</code>). See <a href="sdo_objrelschema.htm#i1010145">Section 2.10</a> for more information about unit of measurement specification. If you specify <code>unit</code>, you must also specify <code>distance</code>.Data type is VARCHAR2. Default = unit of measurement associated with the data. For geodetic data, the default is meters.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Before you call SDO_JOIN, you must commit any previous DML statements in your session. Otherwise, the following error will be returned: <code>ORA-13236: internal error in R-tree processing: [SDO_Join in active txns not supported]</code></p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDEHJAH"></a><a id="sthref1138"></a>Optimizing Self-Joins</p>
<p>If you are performing a self-join (that is, if <code>table_name1</code> and <code>table_name2</code> specify the same table), you can improve the performance by optimizing the self-join.</p>
<p>If SDO_JOIN is called without a mask (for example, <code>ANYINTERACT</code>) or distance specification, it compares only the index structure of the two geometry columns being joined. This can quickly identify geometry pairs that are "likely" to interact. If SDO_JOIN is called with a mask or distance specification, after the index is used to identify geometry pairs that are likely to interact, geometry coordinates are also compared to see if the geometry pairs actually do interact. Coordinate comparison is the most expensive part of the SDO_JOIN operation.</p>
<p>In a self-join, where the same geometry column is compared to itself, each geometry pair is returned twice in the result set. For example:</p>
<ul>
<li>
<p>For the geometry pair with ID values (1,2), the pair (2,1) is also returned. The undesired effect in SDO_JOIN is that the coordinates of the same geometry pair are compared twice, instead of once.</p>
</li>
<li>
<p>ID pairs that are equal are returned twice. For example, a table with 50,000 rows will return ID pair (1,1) twice, ID pair (2,2) twice, and so on. This is also an undesired effect.</p>
</li>
</ul>
<p>When calling SDO_JOIN in a self-join scenario, you can eliminate the undesired effects by eliminating duplicate comparison of geometry pairs and all coordinate comparisons where the ID values of the pairs match. This optimization uses SDO_JOIN for the primary filter only, and calls the <a href="sdo_objgeom.htm#BGHCDIDG">SDO_GEOM.RELATE</a> function to compare geometry coordinates. The following statement accomplishes this optimization by adding "<code>AND b.rowid &lt; c.rowid</code>" as a predicate to the <code>WHERE</code> clause.</p>
<pre>
SQL&gt; set autotrace trace explain
SQL&gt; SELECT /*+ ordered use_nl (a,b) use_nl (a,c) */ b.id, c.id
           FROM TABLE(sdo_join('GEOD_STATES','GEOM','GEOD_STATES','GEOM')) a,
                       GEOD_STATES b,
                       GEOD_STATES c
          WHERE a.rowid1 = b.rowid
               AND a.rowid2 = c.rowid
               AND b.rowid &lt; c.rowid
               AND SDO_GEOM.RELATE (b.geom, 'ANYINTERACT', c.geom, .05) = 'TRUE'
 
Execution Plan
----------------------------------------------------------
Plan hash value: 1412731386
---------------------------------------------------------------------------------------------------
| Id  | Operation                           | Name        | Rows  | Bytes | Cost (%CPU)| Time     |
---------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                    |             |     1 |  1124 | 12787   (1)| 00:02:34 |
|   1 |  NESTED LOOPS                       |             |     1 |  1124 | 12787   (1)| 00:02:34 |
|   2 |   NESTED LOOPS                      |             |  4574 |  2514K|  8206   (1)| 00:01:39 |
|   3 |    COLLECTION ITERATOR PICKLER FETCH| SDO_JOIN    |       |       ||          |
|*  4 |    TABLE ACCESS BY USER ROWID       | GEOD_STATES |     1 |   561 |1   (0)| 00:00:01 |
|*  5 |   TABLE ACCESS BY USER ROWID        | GEOD_STATES |     1 |   561 |1   (0)| 00:00:01 |
Predicate Information (identified by operation id):
---------------------------------------------------
   4 - access(CHARTOROWID(VALUE(KOKBF$)))
   5 - access(CHARTOROWID(VALUE(KOKBF$)))
       filter("B".ROWID&lt;"C".ROWID AND
               "SDO_GEOM"."RELATE"("B"."GEOM",'ANYINTERACT',"C"."GEOM",.05)='TRUE')
 
SQL&gt; set autotrace off
</pre>
<p>In the preceding example, It is very important that <code>AND b.rowid &lt; c.rowid</code> be before the call to <a href="sdo_objgeom.htm#BGHCDIDG">SDO_GEOM.RELATE</a> in the <code>WHERE</code> clause. This will omit the undesired scenarios for the invocation of the <a href="sdo_objgeom.htm#BGHCDIDG">SDO_GEOM.RELATE</a> function. Also, note that the example uses the <code>ORDERED</code> and <code>USE_NL</code> hints, and that the execution plan does not contain <code>TABLE ACCESS FULL</code> or <code>HASH JOIN</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABBFGFE"></a><a id="sthref1139"></a><a id="sthref1140"></a>Cross-Schema Invocation of SDO_JOIN</p>
<p>You can invoke the SDO_JOIN table function on an indexed table that is not in your schema, if you have been granted SELECT access to both the spatial table and to the index table for the spatial index that was created on the spatial table. To find the name of the index table for a spatial index, query the SDO_INDEX_TABLE column in the USER_SDO_INDEX_METADATA view. For example, the following statement returns the name of the index table for the COLA_MARKETS_IDX spatial index:</p>
<pre>
SELECT sdo_index_table FROM user_sdo_index_metadata
  WHERE sdo_index_name = 'COLA_SPATIAL_IDX';
</pre>
<p>Assume that user A owns spatial table T1 (with index table MDRT_F9AA$), and that user B owns spatial table T2 and wants to join geometries from both T1 and T2. Assume also that the geometry column in both tables is named GEOMETRY.</p>
<p>User A or a suitably privileged user must connect as user A and execute the following statements:</p>
<pre>
GRANT select on T1 to B;
GRANT select on MDRT_F9AA$ to B;
</pre>
<p>User B can now connect and execute an SDO_JOIN query, such as the following:</p>
<pre>
SELECT COUNT(*) FROM
  (SELECT * FROM
    TABLE(SDO_JOIN('A.T1', 'GEOMETRY',
                   'B.T2', 'GEOMETRY',
                   'mask=anyinteract')) );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1141"></a>Examples</p>
<p>The following example joins the COLA_MARKETS table with itself to find, for each geometry, all other geometries that have any spatial interaction with it. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.) In this example, <code>rowid1</code> and <code>rowid2</code> correspond to the names of the attributes in the SDO_ROWIDPAIR type definition. Note that in the output, <code>cola_d</code> (the circle in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>) interacts only with itself, and not with any of the other geometries.</p>
<pre>
SELECT /*+ ordered */ a.name, b.name
  FROM TABLE(SDO_JOIN('COLA_MARKETS', 'SHAPE',
                      'COLA_MARKETS', 'SHAPE',
                      'mask=ANYINTERACT')) c,
       cola_markets a,
       cola_markets b
  WHERE c.rowid1 = a.rowid AND c.rowid2 = b.rowid
  ORDER BY a.name;

NAME                             NAME                                           
-------------------------------- --------------------------------               
cola_a                           cola_c                                         
cola_a                           cola_b                                         
cola_a                           cola_a                                         
cola_b                           cola_c                                         
cola_b                           cola_b                                         
cola_b                           cola_a                                         
cola_c                           cola_c                                         
cola_c                           cola_b                                         
cola_c                           cola_a                                         
cola_d                           cola_d                                         
 
10 rows selected.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1142"></a>Related Topics</p>
<ul>
<li>
<p><a href="#i78531">SDO_RELATE</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78067"></a>
<div id="SPATL1032" class="refsect1">
<h2 class="refsect1"><a id="sthref1143"></a><a id="sthref1144"></a><a id="sthref1145"></a>SDO_NN</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1146"></a>Format</p>
<p class="synopsis">SDO_NN(geometry1, geometry2, param [, number]);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1147"></a>Description</p>
<p>Uses the spatial index to identify the nearest neighbors for a geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1148"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_NN operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t15">Value</th>
<th class="cellalignment741" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t15" headers="r1c1-t15">geometry1</td>
<td class="cellalignment742" headers="r2c1-t15 r1c2-t15">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t15" headers="r1c1-t15">geometry2</td>
<td class="cellalignment742" headers="r3c1-t15 r1c2-t15">Specifies either a geometry from a table or a transient instance of a geometry. The nearest neighbor or neighbors to <code>geometry2</code> will be returned from <code>geometry1</code>. (<code>geometry2</code> is specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t15" headers="r1c1-t15">param</td>
<td class="cellalignment742" headers="r4c1-t15 r1c2-t15">Determines the behavior of the operator. The available keywords are listed in <a href="#g996876">Table 19-4</a>. If you do not specify this parameter, the operator returns all rows in increasing distance order from <code>geometry2</code>. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t15" headers="r1c1-t15">number</td>
<td class="cellalignment742" headers="r5c1-t15 r1c2-t15">If the <a href="#i80529">SDO_NN_DISTANCE</a> ancillary operator is included in the call to SDO_NN, specifies the same number used in the call to <a href="#i80529">SDO_NN_DISTANCE</a>. Data type is NUMBER.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p><a href="#g996876">Table 19-4</a> lists the keywords for the <code>param</code> parameter.</p>
<div id="SPATL1033" class="tblformal">
<p class="titleintable"><a id="sthref1149"></a><a id="g996876"></a>Table 19-4 Keywords for the SDO_NN Param Parameter</p>
<table class="cellalignment740" title="Keywords for the SDO_NN Param Parameter" summary="Keywords for the SDO_NN Param Parameter" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t16">Keyword</th>
<th class="cellalignment741" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t16" headers="r1c1-t16">
<p>distance</p>
</td>
<td class="cellalignment742" headers="r2c1-t16 r1c2-t16">
<p>Specifies the number of distance units after which to stop searching for nearest neighbors. If you do not also specify the <code>unit</code> keyword, the default is the unit of measurement associated with the data. Data type is NUMBER.</p>
<p>For example: 'distance=10 unit=mile'</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t16" headers="r1c1-t16">
<p>sdo_batch_size</p>
</td>
<td class="cellalignment742" headers="r3c1-t16 r1c2-t16">
<p>Specifies the number of rows to be evaluated at a time when the SDO_NN expression may need to be evaluated multiple times in order to return the desired number of results that satisfy the WHERE clause. Available only when an R-tree index is used. If you specify <code>sdo_batch_size=0</code> (or if you omit the <code>param</code> parameter completely), Spatial calculates a batch size suited to the result set size. See the Usage Notes and Examples for more information. Data type is NUMBER.</p>
<p>For example: 'sdo_batch_size=10'</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t16" headers="r1c1-t16">
<p>sdo_num_res</p>
</td>
<td class="cellalignment742" headers="r4c1-t16 r1c2-t16">
<p>If <code>sdo_batch_size</code> is not specified, specifies the number of results (nearest neighbors) to be returned. If <code>sdo_batch_size</code> is specified, this keyword is ignored; instead, use the ROWNUM pseudocolumn to limit the number of results. If neither <code>sdo_batch_size</code> nor <code>sdo_num_res</code> is specified, this is equivalent to specifying <code>sdo_batch_size=0</code>. See the Usage Notes and Examples for more information. Data type is NUMBER.</p>
<p>For example: 'sdo_num_res=5'</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t16" headers="r1c1-t16">
<p>unit</p>
</td>
<td class="cellalignment742" headers="r5c1-t16 r1c2-t16">
<p>If the <code>distance</code> keyword or the <a href="#i80529">SDO_NN_DISTANCE</a> ancillary operator is included in the call to SDO_NN, specifies the unit of measurement: a quoted string with <code>unit=</code> and an SDO_UNIT value from the MDSYS.SDO_DIST_UNITS table. See <a href="sdo_objrelschema.htm#i1010145">Section 2.10</a> for more information about unit of measurement specification. Data type is VARCHAR2. Default = unit of measurement associated with the data. For geodetic data, the default is meters.</p>
<p>For example: 'unit=KM'</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1150"></a>Returns</p>
<p>This operator returns the <code>sdo_num_res</code> number of objects from <code>geometry1</code> that are nearest to <code>geometry2</code> in the query. In determining how near two geometry objects are, the shortest possible distance between any two points on the surface of each object is used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1151"></a>Usage Notes</p>
<p>The operator is disabled if the table does not have a spatial index or if the number of dimensions for the query window does not match the number of dimensions specified when the index was created.</p>
<p>The operator must always be used in a WHERE clause, and the condition that includes the operator should be an expression of the form SDO_NN(arg1, arg2, '&lt;some_parameter&gt;') = 'TRUE'.</p>
<p>The operator can be used in two ways:</p>
<ul>
<li>
<p>If all geometries in the layer are candidates, use the <code>sdo_num_res</code> keyword to specify the number of geometries returned.</p>
<p>The <code>sdo_num_res</code> keyword is especially useful when you are concerned only with proximity (for example, the three closest banks, regardless of bank name).</p>
</li>
<li>
<p>If any geometries in the table might be nearer than the geometries specified in the WHERE clause, use the <code>sdo_batch_size</code> keyword and use the WHERE clause (including the ROWNUM pseudocolumn) to limit the number of geometries returned.</p>
<p>The <code>sdo_batch_size</code> keyword is especially useful when you need to consider one or more columns from the <span class="bolditalic">same</span> table as the nearest neighbor search column in the WHERE clause (for example, the three closest banks whose name contains <span class="italic">MegaBank</span>).</p>
</li>
</ul>
<p>As an example of the <code>sdo_batch_size</code> keyword, assume that a RESTAURANTS table contains different types of restaurants, and you want to find the two nearest Italian restaurants to your hotel but only if they are within two miles. The query might look like the following:</p>
<pre>
SELECT r.name FROM restaurants r WHERE 
   SDO_NN(r.geometry, :my_hotel,
      'sdo_batch_size=10 distance=2 unit=mile') = 'TRUE' 
   AND r.cuisine = 'Italian' AND ROWNUM &lt;=2; 
</pre>
<p>In this example, the <code>ROWNUM &lt;=2</code> clause is necessary to limit the number of results returned to no more than 2 where CUISINE is <code>Italian</code>. However, if the <code>sdo_batch_size</code> keyword is not specified in this example, and if <code>sdo_num_res=2</code> is specified instead of <code>ROWNUM &lt;=2</code>, only the two nearest restaurants within two miles are considered, regardless of their CUISINE value; and if the CUISINE value of these two rows is not <code>Italian</code>, the query may return no rows.</p>
<p>The <code>sdo_batch_size</code> value can affect the performance of nearest neighbor queries. A good general guideline is to specify the number of candidate rows likely to satisfy the WHERE clause. Using the preceding example of a query for Italian restaurants, if approximately 20 percent of the restaurants nearest to the hotel are Italian and if you want 2 restaurants, an <code>sdo_batch_size</code> value of 10 will probably result in the best performance. On the other hand, if only approximately 5 percent of the restaurants nearest to the hotel are Italian and if you want 2 restaurants, an <code>sdo_batch_size</code> value of 40 would be better.</p>
<p>You can specify <code>sdo_batch_size=0</code>, which causes Spatial to calculate a batch size that is suitable for the result set size. However, the calculated batch size may not be optimal, and the calculation incurs some processing overhead; if you can determine a good <code>sdo_batch_size</code> value for a query, the performance will probably be better than if you specify <code>sdo_batch_size=0</code>.</p>
<p>If the <code>sdo_batch_size</code> keyword is specified, any <code>sdo_num_res</code> value is ignored. Do not specify both keywords.</p>
<p>Specify the <code>number</code> parameter only if you are using the <a href="#i80529">SDO_NN_DISTANCE</a> ancillary operator in the call to SDO_NN. See the information about the <a href="#i80529">SDO_NN_DISTANCE</a> operator in this chapter.</p>
<p>If two or more objects from <code>geometry1</code> are an equal distance from <code>geometry2</code>, any of the objects can be returned on any call to the function. For example, if <code>item_a</code>, <code>item_b</code>, and <code>item_c</code> are nearest to and equally distant from <code>geometry2,</code> and if <code>sdo_num_res=2</code>, two of those three objects are returned, but they can be any two of the three.</p>
<p>If the SDO_NN operator uses a partitioned spatial index (see <a href="sdo_index_query.htm#i1005901">Section 5.1.3</a>), the requested number of geometries is returned for <span class="italic">each</span> partition that contains candidate rows based on the query criteria. For example, if you request the 5 nearest restaurants to a point and the spatial index has 4 partitions, the operator returns up to 20 (5*4) geometries. In this case, you must use the ROWNUM pseudocolumn (here, <code>WHERE ROWNUM &lt;=5</code>) to return the 5 nearest restaurants.</p>
<p>If <code>geometry1</code> and <code>geometry2</code> are based on different coordinate systems, <code>geometry2</code> is temporarily transformed to the coordinate system of <code>geometry1</code> for the operation to be performed, as described in <a href="sdo_cs_concepts.htm#CIHBJCAG">Section 6.10.1</a>.</p>
<p>SDO_NN is not supported for spatial joins.</p>
<p><a id="sthref1152"></a>In some situations the SDO_NN operator will not use the spatial index unless an optimizer hint forces the index to be used. This can occur when a query involves a join; and if the optimizer hint is not used in such situations, an internal error occurs. To prevent such errors, you should always specify an optimizer hint to use the spatial index with the SDO_NN operator, regardless of how simple or complex the query is. For example, the following excerpt from a query specifies to use the COLA_SPATIAL_IDX index that is defined on the COLA_MARKETS table:</p>
<pre>
SELECT /*+ INDEX(c cola_spatial_idx) */ 
  c.mkt_id, c.name, ... FROM cola_markets c, ...;
</pre>
<p>However, if the column predicate in the WHERE clause specifies any nonspatial column in the table for <code>geometry1</code> that has an associated index, be sure that this index is not used by specifying the NO_INDEX hint for that index. For example, if there was an index named COLA_NAME_IDX defined on the NAME column, you would need to specify the hints in the preceding example as follows:</p>
<pre>
SELECT /*+ INDEX(c cola_spatial_idx) NO_INDEX(c cola_name_idx) */ 
  c.mkt_id, c.name, ... FROM cola_markets c, ...;
</pre>
<p>(Note, however, that there is no index named COLA_NAME_IDX in the example in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<p>If you join two or more tables with the SDO_NN operator and the <code>sdo_num_res</code> keyword, specify the LEADING hint for the outer table, USE_NL hint to have a nested loops join, and the INDEX hint for the inner table (the table with the spatial index). For example:</p>
<pre>
SELECT  /*+ LEADING(b) USE_NL(b a) INDEX(a cola_spatial_idx) */ a.gid
   FROM cola_qry  b,  cola_markets  a
      WHERE SDO_NN(a.shape, b.shape, 'sdo_num_res=1')='TRUE';
</pre>
<p>However, if you join two or more tables with the SDO_NN operator, the <code>sdo_batch_size</code> keyword, and the ROWNUM clause, the best way to implement the logic is to use a PL/SQL block. For example:</p>
<pre>
BEGIN
  FOR item IN ( SELECT b.shape FROM cola_qry b)
  LOOP 
    SELECT  /*+ INDEX(a cola_spatial_idx) */ a.gid INTO local_gid
    FROM cola_markets  a
    WHERE SDO_NN(a.shape, item.shape, 'sdo_batch_size=10')='TRUE'
      and a.name like 'cola%' and ROWNUM &lt;2;
  END LOOP;
END;
</pre>
<p>For detailed information about using optimizer hints, see <a class="olink PFGRF" href="../../server.112/e41573/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1153"></a>Examples</p>
<p>The following example finds the two objects from the SHAPE column in the COLA_MARKETS table that are nearest to a specified point (10,7). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.)</p>
<pre>
SELECT /*+ INDEX(c cola_spatial_idx) */
 c.mkt_id, c.name  FROM cola_markets c  WHERE SDO_NN(c.shape,
   sdo_geometry(2001, NULL, sdo_point_type(10,7,NULL), NULL,
   NULL),  'sdo_num_res=2') = 'TRUE';

    MKT_ID NAME
---------- --------------------------------
         2 cola_b
         4 cola_d
</pre>
<p>The following example uses the <code>sdo_batch_size</code> keyword to find the two objects (ROWNUM &lt;=2), with a NAME value less than 'cola_d', from the SHAPE column in the COLA_MARKETS table that are nearest to a specified point (10,7). The value of 3 for <code>sdo_batch_size</code> represents a best guess at the number of nearest geometries that need to be evaluated before the WHERE clause condition is satisfied. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT /*+ INDEX(c cola_spatial_idx) */ c.mkt_id, c.name
   FROM cola_markets c  
   WHERE SDO_NN(c.shape,  sdo_geometry(2001, NULL,
      sdo_point_type(10,7,NULL), NULL,  NULL),
      'sdo_batch_size=3') = 'TRUE'
   AND c.name &lt; 'cola_d' AND ROWNUM &lt;= 2; 

    MKT_ID NAME                                                                 
---------- --------------------------------                                     
         2 cola_b                                                               
         3 cola_c
</pre>
<p>See also the more complex SDO_NN examples in <a href="sdo_complex_queries.htm#CIHHIIJE">Section C.3</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1154"></a>Related Topics</p>
<ul>
<li>
<p><a href="#i80529">SDO_NN_DISTANCE</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i80529"></a>
<div id="SPATL1034" class="refsect1">
<h2 class="refsect1"><a id="sthref1155"></a><a id="sthref1156"></a><a id="sthref1157"></a><a id="sthref1158"></a>SDO_NN_DISTANCE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1159"></a>Format</p>
<p class="synopsis">SDO_NN_DISTANCE(number);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1160"></a>Description</p>
<p>Returns the distance of an object returned by the <a href="#i78067">SDO_NN</a> operator. Valid only within a call to the <a href="#i78067">SDO_NN</a> operator.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1161"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_NN_DISTANCE operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t17">Value</th>
<th class="cellalignment741" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t17" headers="r1c1-t17">number</td>
<td class="cellalignment742" headers="r2c1-t17 r1c2-t17">Specifies a number that must be the same as the last parameter passed to the <a href="#i78067">SDO_NN</a> operator. Data type is NUMBER.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1162"></a>Returns</p>
<p>This operator returns the distance of an object returned by the <a href="#i78067">SDO_NN</a> operator. In determining how near two geometry objects are, the shortest possible distance between any two points on the surface of each object is used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1163"></a>Usage Notes</p>
<p>SDO_NN_DISTANCE is an ancillary operator to the <a href="#i78067">SDO_NN</a> operator. It returns the distance between the specified geometry and a nearest neighbor object. This distance is passed as ancillary data to the <a href="#i78067">SDO_NN</a> operator. (For an explanation of how operators can use ancillary data, see the section on ancillary data in the chapter on domain indexes in <a class="olink ADDCI" href="../e10765/toc.htm"><span class="italic">Oracle Database Data Cartridge Developer's Guide</span></a>.)</p>
<p>You can choose any arbitrary number for the <code>number</code> parameter. The only requirement is that it must match the last parameter in the call to the <a href="#i78067">SDO_NN</a> operator.</p>
<p>Use a bind variable to store and operate on the distance value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1164"></a>Examples</p>
<p>The following example finds the two objects from the SHAPE column in the COLA_MARKETS table that are nearest to a specified point (10,7), and it finds the distance between each object and the point. (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.)</p>
<pre>
SELECT   /*+ INDEX(c cola_spatial_idx) */ 
   c.mkt_id, c.name, SDO_NN_DISTANCE(1) dist
   FROM cola_markets c  
   WHERE SDO_NN(c.shape,  sdo_geometry(2001, NULL, 
      sdo_point_type(10,7,NULL), NULL,  NULL),
      'sdo_num_res=2', 1) = 'TRUE' ORDER BY dist; 

    MKT_ID NAME                                   DIST                          
---------- -------------------------------- ----------                          
         4 cola_d                           .828427125                          
         2 cola_b                           2.23606798
</pre>
<p>Note the following about this example:</p>
<ul>
<li>
<p>1 is used as the <code>number</code> parameter for SDO_NN_DISTANCE, and 1 is also specified as the last parameter to <a href="#i78067">SDO_NN</a> (after <code>'sdo_num_res=2'</code>).</p>
</li>
<li>
<p>The column alias <code>dist</code> holds the distance between the object and the point. (For geodetic data, the distance unit is meters; for non-geodetic data, the distance unit is the unit associated with the data.)</p>
</li>
</ul>
<p>The following example uses the <code>sdo_batch_size</code> keyword in selecting the two closest Italian restaurants to your hotel from a YELLOW_PAGES table that contains different types of businesses:</p>
<pre>
SELECT * FROM 
 (SELECT /*+ FIRST_ROWS */ y.name FROM YELLOW_PAGES  y 
  WHERE SDO_NN(y.geometry, :my_hotel, 'sdo_batch_size=100', 1) = 'TRUE' 
   AND y.business = 'Italian Restaurant' 
  ORDER BY SDO_NN_DISTANCE(1)) 
WHERE ROWNUM &lt;=10;
</pre>
<p>In the preceding query, the FIRST_ROWS hint enables the optimizer to improve performance by pushing the ORDER BY operation into the spatial index. <code>:my_hotel</code> can be either a bind variable or a literal value.</p>
<p>The FIRST_ROWS hint is also available to a local partitioned spatial index. In the preceding example, if the YELLOW_PAGES table is partitioned by name, the query will be executed as follows:</p>
<ol>
<li>
<p>For each partition, the ORDER BY operation is processed using the spatial index until 10 rows are found.</p>
</li>
<li>
<p>After all partitions are completed, all rows found in the preceding step are sorted, and the top 10 rows are returned.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1165"></a>Related Topics</p>
<ul>
<li>
<p><a href="#i78067">SDO_NN</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGECFCGB"></a>
<div id="SPATL1035" class="refsect1">
<h2 class="refsect1"><a id="sthref1166"></a><a id="sthref1167"></a><a id="sthref1168"></a>SDO_ON</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1169"></a>Format</p>
<p class="synopsis">SDO_ON(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1170"></a>Description</p>
<p>Checks if any geometries in a table have the ON topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=ON'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1171"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_ON operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t18">Value</th>
<th class="cellalignment741" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t18" headers="r1c1-t18">geometry1</td>
<td class="cellalignment742" headers="r2c1-t18 r1c2-t18">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t18" headers="r1c1-t18">geometry2</td>
<td class="cellalignment742" headers="r3c1-t18 r1c2-t18">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1172"></a>Returns</p>
<p>The expression SDO_ON(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the ON topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1173"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1174"></a>Examples</p>
<p>The following example finds geometries that have the ON relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) This example returns no rows because there are no line string geometries in the SHAPE column.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_ON(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(4,6, 8,8))
            ) = 'TRUE';

no rows selected
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEGDCEI"></a>
<div id="SPATL1036" class="refsect1">
<h2 class="refsect1"><a id="sthref1175"></a><a id="sthref1176"></a><a id="sthref1177"></a>SDO_OVERLAPBDYDISJOINT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1178"></a>Format</p>
<p class="synopsis">SDO_OVERLAPBDYDISJOINT(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1179"></a>Description</p>
<p>Checks if any geometries in a table have the OVERLAPBDYDISJOINT topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=OVERLAPBDYDISJOINT'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1180"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_OVERLAPBDYDISJOINT operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t19">Value</th>
<th class="cellalignment741" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t19" headers="r1c1-t19">geometry1</td>
<td class="cellalignment742" headers="r2c1-t19 r1c2-t19">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t19" headers="r1c1-t19">geometry2</td>
<td class="cellalignment742" headers="r3c1-t19 r1c2-t19">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1181"></a>Returns</p>
<p>The expression SDO_OVERLAPBDYDISJOINT(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the OVERLAPBDYDISJOINT topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1182"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1183"></a>Examples</p>
<p>The following example finds geometries that have the OVERLAPBDYDISJOINT relationship with a line string geometry (here, a horizontal line from 0,6 to 2,6). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_a</code> has the OVERLAPBDYDISJOINT relationship with the line string geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_OVERLAPBDYDISJOINT(c.shape,
            SDO_GEOMETRY(2002, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,2,1),
              SDO_ORDINATE_ARRAY(0,6, 2,6))
            ) = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                             
         1 cola_a
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEGBEAI"></a>
<div id="SPATL1037" class="refsect1">
<h2 class="refsect1"><a id="sthref1184"></a><a id="sthref1185"></a><a id="sthref1186"></a>SDO_OVERLAPBDYINTERSECT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1187"></a>Format</p>
<p class="synopsis">SDO_OVERLAPBDYINTERSECT(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1188"></a>Description</p>
<p>Checks if any geometries in a table have the OVERLAPBDYINTERSECT topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=OVERLAPBDYINTERSECT'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1189"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_OVERLAPBDYINTERSECToperator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t20">Value</th>
<th class="cellalignment741" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t20" headers="r1c1-t20">geometry1</td>
<td class="cellalignment742" headers="r2c1-t20 r1c2-t20">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t20" headers="r1c1-t20">geometry2</td>
<td class="cellalignment742" headers="r3c1-t20 r1c2-t20">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1190"></a>Returns</p>
<p>The expression SDO_OVERLAPBDYINTERSECT(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the OVERLAPBDYINTERSECT topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1191"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1192"></a>Examples</p>
<p>The following example finds geometries that have the OVERLAPBDYINTERSECT relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, <code>cola_a</code>, <code>cola_b</code>, and <code>cola_d</code> have the OVERLAPBDYINTERSECT relationship with the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_OVERLAPBDYINTERSECT(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(4,6, 8,8))
            ) = 'TRUE';

    MKT_ID NAME                                                                 
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a                                                               
         4 cola_d 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEDACIF"></a>
<div id="SPATL1038" class="refsect1">
<h2 class="refsect1"><a id="sthref1193"></a><a id="sthref1194"></a><a id="sthref1195"></a>SDO_OVERLAPS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1196"></a>Format</p>
<p class="synopsis">SDO_OVERLAPS(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1197"></a>Description</p>
<p>Checks if any geometries in a table overlap (that is, have the OVERLAPBDYDISJOINT or OVERLAPBDYINTERSECT topological relationship with) a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=OVERLAPBDYDISJOINT+OVERLAPBDYINTERSECT'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1198"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_OVERLAPS operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t21">Value</th>
<th class="cellalignment741" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t21" headers="r1c1-t21">geometry1</td>
<td class="cellalignment742" headers="r2c1-t21 r1c2-t21">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t21" headers="r1c1-t21">geometry2</td>
<td class="cellalignment742" headers="r3c1-t21 r1c2-t21">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1199"></a>Returns</p>
<p>The expression SDO_OVERLAPS(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the OVERLAPBDYDISJOINT or OVERLAPBDYINTERSECT topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1200"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1201"></a>Examples</p>
<p>The following example finds geometries that overlap a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, three of the geometries in the SHAPE column overlap the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_OVERLAPS(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(4,6, 8,8))
            ) = 'TRUE';

    MKT_ID NAME                                                                 
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a                                                               
         4 cola_d 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i78531"></a>
<div id="SPATL1039" class="refsect1">
<h2 class="refsect1"><a id="sthref1202"></a><a id="sthref1203"></a>SDO_RELATE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1204"></a>Format</p>
<p class="synopsis">SDO_RELATE(geometry1, geometry2, param);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1205"></a>Description</p>
<p>Uses the spatial index to identify either the spatial objects that have a particular spatial interaction with a given object such as an area of interest, or pairs of spatial objects that have a particular spatial interaction.</p>
<p>This operator performs both primary and secondary filter operations.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1206"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_RELATE operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t22">Value</th>
<th class="cellalignment741" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t22" headers="r1c1-t22">geometry1</td>
<td class="cellalignment742" headers="r2c1-t22 r1c2-t22">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t22" headers="r1c1-t22">geometry2</td>
<td class="cellalignment742" headers="r3c1-t22 r1c2-t22">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t22" headers="r1c1-t22">param</td>
<td class="cellalignment742" headers="r4c1-t22 r1c2-t22">Specifies the <code>mask</code> keyword, and optionally either or both of the <code>min_resolution</code> and <code>max_resolution</code> keywords. The data type for this parameter is VARCHAR2.
<p>The <code>mask</code> keyword specifies the topological relationship of interest. This is a required parameter. Valid <code>mask</code> keyword values are one or more of the following in the nine-intersection pattern: <code>TOUCH</code>, <code>OVERLAPBDYDISJOINT</code>, <code>OVERLAPBDYINTERSECT</code>, <code>EQUAL</code>, <code>INSIDE</code>, <code>COVEREDBY</code>, <code>CONTAINS</code>, <code>COVERS</code>, <code>ANYINTERACT</code>, <code>ON</code>. Multiple masks are combined with the logical Boolean operator OR, for example, '<code>mask=inside+touch'</code>; however, see the Usage Notes for an alternative syntax using UNION ALL that may result in better performance. See <a href="sdo_intro.htm#i880253">Section 1.8</a> for an explanation of the nine-intersection relationship pattern.</p>
<p>The <code>min_resolution</code> keyword includes only geometries for which at least one side of the geometry's MBR is equal to or greater than the specified value. For example, <code>min_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is at least 10. (This keyword can be used to exclude geometries that are too small to be of interest.)</p>
<p>The <code>max_resolution</code> keyword includes only geometries for which at least one side of the geometry's MBR is less than or equal to the specified value. For example, <code>max_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is less than or equal to 10. (This keyword can be used to exclude geometries that are too large to be of interest.)</p>
<p>For backward compatibility, any additional keywords for the <code>param</code> parameter that were supported before release 10.1 will still work; however, the use of those keywords is discouraged and is not supported for new uses of the operator.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1207"></a>Returns</p>
<p>The expression SDO_RELATE(geometry1,geometry2, 'mask = &lt;some_mask_val&gt;') = 'TRUE' evaluates to TRUE for object pairs that have the topological relationship specified by &lt;some_mask_val&gt;, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1208"></a>Usage Notes</p>
<p>The operator is disabled if the table does not have a spatial index or if the number of dimensions for the query window does not match the number of dimensions specified when the index was created.</p>
<p>The operator must always be used in a WHERE clause, and the condition that includes the operator should be an expression of the form SDO_RELATE(arg1, arg2, 'mask = &lt;some_mask_val&gt;') = 'TRUE'.</p>
<p><code>geometry2</code> can come from a table or be a transient SDO_GEOMETRY object, such as a bind variable or SDO_GEOMETRY constructor.</p>
<ul>
<li>
<p>If the <code>geometry2</code> column is not spatially indexed, the operator indexes the query window in memory and performance is very good.</p>
</li>
<li>
<p>If two or more geometries from <code>geometry2</code> are passed to the operator, the ORDERED optimizer hint must be specified, and the table in <code>geometry2</code> must be specified first in the FROM clause.</p>
</li>
</ul>
<p>If <code>geometry1</code> and <code>geometry2</code> are based on different coordinate systems, <code>geometry2</code> is temporarily transformed to the coordinate system of <code>geometry1</code> for the operation to be performed, as described in <a href="sdo_cs_concepts.htm#CIHBJCAG">Section 6.10.1</a>.</p>
<p>Unlike with the <a href="sdo_objgeom.htm#BGHCDIDG">SDO_GEOM.RELATE</a> function, DISJOINT and DETERMINE masks are not allowed in the relationship mask with the SDO_RELATE operator. This is because SDO_RELATE uses the spatial index to find candidates that may interact, and the information to satisfy DISJOINT or DETERMINE is not present in the index.</p>
<p>Although multiple masks can be combined using the logical Boolean operator OR, for example, <code>'mask=touch+coveredby'</code>, better performance may result if the spatial query specifies each mask individually and uses the UNION ALL syntax to combine the results. This is due to internal optimizations that Spatial can apply under certain conditions when masks are specified singly rather than grouped within the same SDO_RELATE operator call. (There are two exceptions, <code>inside+coveredby</code> and <code>contains+covers</code>, where the combination performs better than the UNION ALL alternative.) For example, consider the following query using the logical Boolean operator OR to group multiple masks:</p>
<pre>
SELECT a.gid
  FROM polygons a, query_polys B
  WHERE B.gid = 1
  AND SDO_RELATE(A.Geometry, B.Geometry,
                   'mask=touch+coveredby') = 'TRUE';
</pre>
<p>The preceding query may result in better performance if it is expressed as follows, using UNION ALL to combine results of multiple SDO_RELATE operator calls, each with a single mask:</p>
<pre>
SELECT a.gid
      FROM polygons a, query_polys B
      WHERE B.gid = 1
      AND SDO_RELATE(A.Geometry, B.Geometry,
                   'mask=touch') = 'TRUE'
UNION ALL
SELECT a.gid
      FROM polygons a, query_polys B
      WHERE B.gid = 1
      AND SDO_RELATE(A.Geometry, B.Geometry,
                   'mask=coveredby') = 'TRUE';
</pre>
<p>The following considerations apply to relationships between lines and a multipoint geometry (points in a point cluster). Assume the example of a line and a multipoint geometry (for example, SDO_GTYPE = 2005) consisting of three points.</p>
<ul>
<li>
<p>If none of the points has any interaction with the line, the relationship between the line and the point cluster is DISJOINT.</p>
</li>
<li>
<p>If one of the points is on the interior of the line and the other two points are disjoint, the relationship between the line and the point cluster is OVERLAPBDYDISJOINT.</p>
</li>
<li>
<p>If one of the points is on the boundary of the line (that is, if it is on the start point or end point of the line) and the other two points are disjoint, the relationship between the line and the point cluster is TOUCH.</p>
</li>
<li>
<p>If one of the points is on the boundary of the line (that is, if it is on the start point or end point of the line), another point is on the interior of the line, and the third point is disjoint, the relationship between the line and the point cluster is OVERLAPBDYDISJOINT (not OVERLAPBDYINTERSECT).</p>
</li>
</ul>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1209"></a>Examples</p>
<p>The following examples are similar to those for the <a href="#BJAFBCFC">SDO_FILTER</a> operator; however, they identify a specific type of interaction (using the <code>mask</code> keyword), and they determine with certainty (not mere likelihood) if the spatial interaction occurs.</p>
<p>The following example selects the geometries that have any interaction with a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.)</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_RELATE(c.shape,
    SDO_GEOMETRY(2003, NULL, NULL,
      SDO_ELEM_INFO_ARRAY(1,1003,3),
      SDO_ORDINATE_ARRAY(4,6, 8,8)),
    'mask=anyinteract') = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a                                                               
         4 cola_d 
</pre>
<p>The following example is the same as the preceding example, except that it includes only geometries where at least one side of the geometry's MBR is equal to or greater than 4.1. In this case, only <code>cola_a</code> and <code>cola_b</code> are returned, because their MBRs have at least one side with a length greater than or equal to 4.1. The circle <code>cola_d</code> is excluded, because its MBR is a square whose sides have a length of 4.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_RELATE(c.shape,
    SDO_GEOMETRY(2003, NULL, NULL,
      SDO_ELEM_INFO_ARRAY(1,1003,3),
      SDO_ORDINATE_ARRAY(4,6, 8,8)),
    'mask=anyinteract min_resolution=4.1') = 'TRUE';

    MKT_ID NAME       
---------- --------------------------------                                     
         2 cola_b                                                               
         1 cola_a                                                               
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column objects have any spatial interaction with the GEOMETRY column object in the QUERY_POLYS table that has a GID value of 1.</p>
<pre>
SELECT A.gid 
  FROM Polygons A, query_polys B 
  WHERE B.gid = 1 
  AND SDO_RELATE(A.Geometry, B.Geometry, 
                   'mask=ANYINTERACT') = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where a GEOMETRY column object has any spatial interaction with the geometry stored in the <code>aGeom</code> variable.</p>
<pre>
SELECT A.Gid 
  FROM Polygons A 
  WHERE SDO_RELATE(A.Geometry, :aGeom, 'mask=ANYINTERACT') = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where a GEOMETRY column object has any spatial interaction with the specified rectangle having the lower-left coordinates (x1,y1) and the upper-right coordinates (x2, y2).</p>
<pre>
SELECT A.Gid 
  FROM Polygons A 
  WHERE SDO_RELATE(A.Geometry, sdo_geometry(2003,NULL,NULL,
                                   sdo_elem_info_array(1,1003,3),
                                   sdo_ordinate_array(x1,y1,x2,y2)),
                     'mask=ANYINTERACT') = 'TRUE'; 
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object has any spatial interaction with any GEOMETRY column object in the QUERY_POLYS table. In this example, the ORDERED optimizer hint is used and QUERY_POLYS (<code>geometry2</code>) table is specified first in the FROM clause, because multiple geometries from <code>geometry2</code> are involved (see the Usage Notes).</p>
<pre>
SELECT /*+ ORDERED */
  A.gid 
  FROM query_polys B, polygons A 
  WHERE SDO_RELATE(A.Geometry, B.Geometry, 'mask=ANYINTERACT') = 'TRUE';
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1210"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJAFBCFC">SDO_FILTER</a></p>
</li>
<li>
<p><a href="#BGEDJIBF">SDO_JOIN</a></p>
</li>
<li>
<p><a href="#i77653">SDO_WITHIN_DISTANCE</a></p>
</li>
<li>
<p><a href="sdo_objgeom.htm#BGHCDIDG">SDO_GEOM.RELATE</a> function</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BGEHHIGF"></a>
<div id="SPATL1040" class="refsect1">
<h2 class="refsect1"><a id="sthref1211"></a><a id="sthref1212"></a><a id="sthref1213"></a>SDO_TOUCH</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1214"></a>Format</p>
<p class="synopsis">SDO_TOUCH(geometry1, geometry2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1215"></a>Description</p>
<p>Checks if any geometries in a table have the TOUCH topological relationship with a specified geometry. Equivalent to specifying the <a href="#i78531">SDO_RELATE</a> operator with <code>'mask=TOUCH'</code>.</p>
<p>See the section on the <a href="#i78531">SDO_RELATE</a> operator in this chapter for information about the operations performed by this operator and for usage requirements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1216"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_TOUCH operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t23">Value</th>
<th class="cellalignment741" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t23" headers="r1c1-t23">geometry1</td>
<td class="cellalignment742" headers="r2c1-t23 r1c2-t23">Specifies a geometry column in a table. The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t23" headers="r1c1-t23">geometry2</td>
<td class="cellalignment742" headers="r3c1-t23 r1c2-t23">Specifies either a geometry from a table or a transient instance of a geometry. (Specified using a bind variable or SDO_GEOMETRY constructor.) Data type is SDO_GEOMETRY.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1217"></a>Returns</p>
<p>The expression SDO_TOUCH(geometry1,geometry2) = 'TRUE' evaluates to TRUE for object pairs that have the TOUCH topological relationship, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1218"></a>Usage Notes</p>
<p>See the Usage Notes for the <a href="#i78531">SDO_RELATE</a> operator in this chapter.</p>
<p>For an explanation of the topological relationships and the nine-intersection model used by Spatial, see <a href="sdo_intro.htm#i880253">Section 1.8</a>.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1219"></a>Examples</p>
<p>The following example finds geometries that have the TOUCH relationship with a query window (here, a rectangle with lower-left, upper-right coordinates 1,1, 5,7). (The example uses the definitions and data in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>.) In this example, only <code>cola_b</code> has the TOUCH relationship with the query window geometry.</p>
<pre>
SELECT c.mkt_id, c.name
  FROM cola_markets c
  WHERE SDO_TOUCH(c.shape,
            SDO_GEOMETRY(2003, NULL, NULL,
              SDO_ELEM_INFO_ARRAY(1,1003,3),
              SDO_ORDINATE_ARRAY(1,1, 5,7))
            ) = 'TRUE';
  FROM cola_markets c

    MKT_ID NAME       
---------- --------------------------------                             
         2 cola_b
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="i77653"></a>
<div id="SPATL1041" class="refsect1">
<h2 class="refsect1"><a id="sthref1220"></a><a id="sthref1221"></a>SDO_WITHIN_DISTANCE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1222"></a>Format</p>
<p class="synopsis">SDO_WITHIN_DISTANCE(geometry1, aGeom, params);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1223"></a>Description</p>
<p>Uses the spatial index to identify the set of spatial objects that are within some specified distance of a given object, such as an area of interest or point of interest.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1224"></a>Keywords and Parameters</p>
<div class="inftblinformal">
<table class="cellalignment745" title="Keywords and Parameters" summary="Keywords and parameters for SDO_WITHIN_DISTANCE operator" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t24">Value</th>
<th class="cellalignment741" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t24" headers="r1c1-t24">geometry1</td>
<td class="cellalignment742" headers="r2c1-t24 r1c2-t24">Specifies a geometry column in a table. The column has the set of geometry objects that will be operated on to determine if they are within the specified distance of the given object (<code>aGeom</code>). The column must be spatially indexed. Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t24" headers="r1c1-t24">aGeom</td>
<td class="cellalignment742" headers="r3c1-t24 r1c2-t24">Specifies the object to be checked for distance against the geometry objects in <code>geometry1</code>. Specify either a geometry from a table (using a bind variable) or a transient instance of a geometry (using the SDO_GEOMETRY constructor). Data type is SDO_GEOMETRY.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t24" headers="r1c1-t24">params</td>
<td class="cellalignment742" headers="r4c1-t24 r1c2-t24">A quoted string containing one or more keywords (with values) that determine the behavior of the operator. The remaining items (<code>distance</code>, <code>max_resolution</code>, <code>min_resolution</code>, <code>querytype</code>, and <code>unit</code>) are potential keywords for the <code>params</code> parameter. Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t24" headers="r1c1-t24">distance</td>
<td class="cellalignment742" headers="r5c1-t24 r1c2-t24">Specifies the distance value. If a coordinate system is associated with the geometry, the distance unit is assumed to be the unit associated with the coordinate system. This is a required keyword. Data type is NUMBER.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t24" headers="r1c1-t24">max_resolution</td>
<td class="cellalignment742" headers="r6c1-t24 r1c2-t24">Includes only geometries for which at least one side of the geometry's MBR is less than or equal to the specified value. For example, <code>max_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is less than or equal to 10. (This keyword can be used to exclude geometries that are too large to be of interest.)</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t24" headers="r1c1-t24">min_resolution</td>
<td class="cellalignment742" headers="r7c1-t24 r1c2-t24">Includes only geometries for which at least one side of the geometry's MBR is equal to or greater than the specified value. For example, <code>min_resolution=10</code> includes only geometries for which the width or the height (or both) of the geometry's MBR is at least 10. (This keyword can be used to exclude geometries that are too small to be of interest.)</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t24" headers="r1c1-t24">querytype</td>
<td class="cellalignment742" headers="r8c1-t24 r1c2-t24">Set <code>'querytype=FILTER'</code> to perform only a primary filter operation. If <code>querytype</code> is not specified, both primary and secondary filter operations are performed (default). Data type is VARCHAR2.</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t24" headers="r1c1-t24">unit</td>
<td class="cellalignment742" headers="r9c1-t24 r1c2-t24">Specifies the unit of measurement: a quoted string with <code>unit=</code> and an SDO_UNIT value from the MDSYS.SDO_DIST_UNITS table (for example, <code>'unit=KM'</code>). See <a href="sdo_objrelschema.htm#i1010145">Section 2.10</a> for more information about unit of measurement specification. Data type is NUMBER. Default = unit of measurement associated with the data. For geodetic data, the default is meters.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1225"></a>Returns</p>
<p>The expression SDO_WITHIN_DISTANCE(arg1, arg2, arg3) = 'TRUE' evaluates to TRUE for object pairs that are within the specified distance, and FALSE otherwise.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1226"></a>Usage Notes</p>
<p>The distance between two extended objects (nonpoint objects such as lines and polygons) is defined as the minimum distance between these two objects. The distance between two adjacent polygons is zero.</p>
<p>The operator is disabled if the table does not have a spatial index or if the number of dimensions for the query window does not match the number of dimensions specified when the index was created.</p>
<p>The operator must always be used in a WHERE clause and the condition that includes the operator should be an expression of the form:</p>
<pre>
SDO_WITHIN_DISTANCE(arg1, arg2, 'distance = &lt;some_dist_val&gt;') = 'TRUE'
</pre>
<p>The geometry column must have a spatial index built on it. If the data is geodetic, the spatial index must be an R-tree index.</p>
<p>SDO_WITHIN_DISTANCE is not supported for spatial joins. See <a href="sdo_index_query.htm#i1005386">Section 5.2.1.3</a> for a discussion on how to perform a spatial join within-distance operation.</p>
<p>For information about 3D support with Spatial operators (which operators do and do not consider all three dimensions in their computations), see <a href="sdo_intro.htm#BABIDJJB">Section 1.11</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1227"></a>Examples</p>
<p>The following example selects the geometries that are within a distance of 10 from a query window (here, a rectangle with lower-left, upper-right coordinates 4,6, 8,8). (The example uses the definitions and data described in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a> and illustrated in <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a>. In this case, all geometries shown in that figure are returned.)</p>
<pre>
SELECT c.name FROM cola_markets c WHERE SDO_WITHIN_DISTANCE(c.shape,
  SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3),
    SDO_ORDINATE_ARRAY(4,6, 8,8)),
  'distance=10') = 'TRUE';
 
NAME                                                                            
--------------------------------                                                
cola_b                                                                          
cola_a                                                                          
cola_c                                                                          
cola_d
</pre>
<p>The following example is the same as the preceding example, except that it includes only geometries where at least one side of the geometry's MBR is equal to or greater than 4.1. In this case, only <code>cola_a</code> and <code>cola_b</code> are returned, because their MBRs have at least one side with a length greater than or equal to 4.1. The trapezoid <code>cola_c</code> is excluded, because its MBR has sides with lengths of 3 and 2; and the circle <code>cola_d</code> is excluded, because its MBR is a square whose sides have a length of 4.</p>
<pre>
SELECT c.name FROM cola_markets c WHERE SDO_WITHIN_DISTANCE(c.shape,
  SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1,1003,3),
    SDO_ORDINATE_ARRAY(4,6, 8,8)),
  'distance=10 min_resolution=4.1') = 'TRUE';
 
NAME                                                                            
--------------------------------                                                
cola_b                                                                          
cola_a 
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object is within 10 distance units of the geometry stored in the <code>aGeom</code> variable.</p>
<pre>
SELECT A.GID    FROM POLYGONS A    WHERE      SDO_WITHIN_DISTANCE(A.Geometry, :aGeom, 'distance = 10') = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GEOMETRY column object is within 10 distance units of the specified rectangle having the lower-left coordinates (x1,y1) and the upper-right coordinates (x2, y2).</p>
<pre>
SELECT A.GID    FROM POLYGONS A    WHERE      SDO_WITHIN_DISTANCE(A.Geometry, sdo_geometry(2003,NULL,NULL,                              sdo_elem_info_array(1,1003,3),                              sdo_ordinate_array(x1,y1,x2,y2)),                      'distance = 10') = 'TRUE';
</pre>
<p>The following example selects the GID values from the POLYGONS table where the GID value in the QUERY_POINTS table is 1 and a POLYGONS.GEOMETRY object is within 10 distance units of the QUERY_POINTS.GEOMETRY object.</p>
<pre>
SELECT A.GID    FROM POLYGONS A, Query_Points B    WHERE B.GID = 1 AND      SDO_WITHIN_DISTANCE(A.Geometry, B.Geometry, 'distance = 10') = 'TRUE';
</pre>
<p>See also the more complex SDO_WITHIN_DISTANCE examples in <a href="sdo_complex_queries.htm#CIHIAIDD">Section C.2</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1228"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJAFBCFC">SDO_FILTER</a></p>
</li>
<li>
<p><a href="#i78531">SDO_RELATE</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment733">
<tr>
<td class="cellalignment742">
<table class="cellalignment738">
<tr>
<td class="cellalignment737"><a href="sdo_objindex.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment737"><a href="sdo_aggr.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment744">
<table class="cellalignment736">
<tr>
<td class="cellalignment737"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment737"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment737"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment737"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment737"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment737"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
