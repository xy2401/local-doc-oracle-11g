<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>SDO_UTIL Package (Utility)</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information for indexing and storing spatial data and for developing spatial applications using Oracle Spatial and Graph and Oracle Locator." />
<meta name="dcterms.created" content="2013-11-26T3:11:50Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial Developer's Guide" />
<meta name="dcterms.identifier" content="E11830-15" />
<meta name="dcterms.isVersionOf" content="SPATL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sdo_objtune.htm" title="Previous" type="text/html" />
<link rel="Next" href="sdo_wfs_lock_ref.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11830.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">42/51</span> <!-- End Header -->
<div id="SPATL180" class="chapter"><a id="CEGCFDED"></a>
<h1 class="chapter"><span class="secnum">32</span> SDO_UTIL Package <a id="sthref2555"></a><a id="sthref2556"></a>(Utility)</h1>
<p>This chapter contains descriptions of the spatial utility subprograms shown in <a href="#BABFFHAI">Table 32-1</a>.</p>
<div id="SPATL1219" class="tblformal">
<p class="titleintable"><a id="sthref2557"></a><a id="BABFFHAI"></a>Table 32-1 Spatial Utility Subprograms</p>
<table class="cellalignment740" title="Spatial Utility Subprograms" summary="Spatial Utility Subprograms" dir="ltr">
<thead>
<tr class="cellalignment734">
<th class="cellalignment741" id="r1c1-t2">Subprogram</th>
<th class="cellalignment741" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment734">
<td class="cellalignment742" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#BJEGCCDF">SDO_UTIL.AFFINETRANSFORMS</a></p>
</td>
<td class="cellalignment742" headers="r2c1-t2 r1c2-t2">
<p>Returns a geometry that reflects an affine transformation of the input geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#BJEDEFBA">SDO_UTIL.APPEND</a></p>
</td>
<td class="cellalignment742" headers="r3c1-t2 r1c2-t2">
<p>Appends one geometry to another geometry to create a new geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#BJEBGAFA">SDO_UTIL.BEARING_TILT_FOR_POINTS</a></p>
</td>
<td class="cellalignment742" headers="r4c1-t2 r1c2-t2">
<p>Computes the bearing and tilt from a start point to an end point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#BJEJDEJE">SDO_UTIL.CIRCLE_POLYGON</a></p>
</td>
<td class="cellalignment742" headers="r5c1-t2 r1c2-t2">
<p>Returns the polygon geometry that approximates and is covered by a specified circle.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#BJEHFCFG">SDO_UTIL.CONCAT_LINES</a></p>
</td>
<td class="cellalignment742" headers="r6c1-t2 r1c2-t2">
<p>Concatenates two line or multiline two-dimensional geometries to create a new geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a></p>
</td>
<td class="cellalignment742" headers="r7c1-t2 r1c2-t2">
<p>Converts values from one angle, area, or distance unit of measure to another.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r8c1-t2" headers="r1c1-t2">
<p><a href="#BJEIDHAG">SDO_UTIL.ELLIPSE_POLYGON</a></p>
</td>
<td class="cellalignment742" headers="r8c1-t2 r1c2-t2">
<p>Returns the polygon geometry that approximates and is covered by a specified ellipse.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r9c1-t2" headers="r1c1-t2">
<p><a href="#BABBGFIB">SDO_UTIL.EXTRACT</a></p>
</td>
<td class="cellalignment742" headers="r9c1-t2 r1c2-t2">
<p>Returns the two-dimensional geometry that represents a specified element (and optionally a ring) of the input two-dimensional geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r10c1-t2" headers="r1c1-t2">
<p><a href="#CIHGIEED">SDO_UTIL.EXTRACT_ALL</a></p>
</td>
<td class="cellalignment742" headers="r10c1-t2 r1c2-t2">
<p>Returns all elements and subelements of the input two-dimensional geometry, as an array of one or more geometries.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r11c1-t2" headers="r1c1-t2">
<p><a href="#BJEIFJHD">SDO_UTIL.EXTRACT3D</a></p>
</td>
<td class="cellalignment742" headers="r11c1-t2 r1c2-t2">
<p>Returns the three-dimensional geometry that represents a specified subset of the input three-dimensional geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r12c1-t2" headers="r1c1-t2">
<p><a href="#BJECJIIE">SDO_UTIL.EXTRUDE</a></p>
</td>
<td class="cellalignment742" headers="r12c1-t2 r1c2-t2">
<p>Returns the three-dimensional extrusion solid geometry from an input two-dimensional polygon geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r13c1-t2" headers="r1c1-t2">
<p><a href="#BJECFBEF">SDO_UTIL.FROM_GML311GEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r13c1-t2 r1c2-t2">
<p>Converts a geography markup language (GML 3.1.1) fragment to a Spatial geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r14c1-t2" headers="r1c1-t2">
<p><a href="#BJEJBCCB">SDO_UTIL.FROM_GMLGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r14c1-t2 r1c2-t2">
<p>Converts a geography markup language (GML 2.0) fragment to a Spatial geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r15c1-t2" headers="r1c1-t2">
<p><a href="#BJEIEDAF">SDO_UTIL.FROM_KMLGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r15c1-t2 r1c2-t2">
<p>Converts a KML (Keyhole Markup Language) document to a Spatial geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r16c1-t2" headers="r1c1-t2">
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r16c1-t2 r1c2-t2">
<p>Converts a geometry in the well-known binary (WKB) format to a Spatial geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r17c1-t2" headers="r1c1-t2">
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r17c1-t2 r1c2-t2">
<p>Converts a geometry in the well-known text (WKT) format to a Spatial geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r18c1-t2" headers="r1c1-t2">
<p><a href="#BJEEEJGH">SDO_UTIL.GETNUMELEM</a></p>
</td>
<td class="cellalignment742" headers="r18c1-t2 r1c2-t2">
<p>Returns the number of elements in the input geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r19c1-t2" headers="r1c1-t2">
<p><a href="#BJEGDGHI">SDO_UTIL.GETNUMVERTICES</a></p>
</td>
<td class="cellalignment742" headers="r19c1-t2 r1c2-t2">
<p>Returns the number of vertices in the input geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r20c1-t2" headers="r1c1-t2">
<p><a href="#BABDEGIA">SDO_UTIL.GETVERTICES</a></p>
</td>
<td class="cellalignment742" headers="r20c1-t2 r1c2-t2">
<p>Returns the coordinates of the vertices of the input geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r21c1-t2" headers="r1c1-t2">
<p><a href="#BJEIFEEH">SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS</a></p>
</td>
<td class="cellalignment742" headers="r21c1-t2 r1c2-t2">
<p>Initializes all spatial indexes in a tablespace that was transported to another database.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r22c1-t2" headers="r1c1-t2">
<p><a href="#BJEHCBAG">SDO_UTIL.INTERIOR_POINT</a></p>
</td>
<td class="cellalignment742" headers="r22c1-t2 r1c2-t2">
<p>Returns a point that is guaranteed to be an interior point (not on the boundary or edge) on the surface of a polygon geometry object.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r23c1-t2" headers="r1c1-t2">
<p><a href="#BJEDDBEI">SDO_UTIL.POINT_AT_BEARING</a></p>
</td>
<td class="cellalignment742" headers="r23c1-t2 r1c2-t2">
<p>Returns a point geometry that is at the specified distance and bearing from the start point.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r24c1-t2" headers="r1c1-t2">
<p><a href="#BJEIGJIE">SDO_UTIL.POLYGONTOLINE</a></p>
</td>
<td class="cellalignment742" headers="r24c1-t2 r1c2-t2">
<p>Converts all polygon-type elements in a geometry to line-type elements, and sets the SDO_GTYPE value accordingly.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r25c1-t2" headers="r1c1-t2">
<p><a href="#BJEIJDBG">SDO_UTIL.PREPARE_FOR_TTS</a></p>
</td>
<td class="cellalignment742" headers="r25c1-t2 r1c2-t2">
<p>Prepares a tablespace to be transported to another database, so that spatial indexes will be preserved during the transport operation.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r26c1-t2" headers="r1c1-t2">
<p><a href="#BJEICGGA">SDO_UTIL.RECTIFY_GEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r26c1-t2 r1c2-t2">
<p>Fixes certain problems with the input geometry, and returns a valid geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r27c1-t2" headers="r1c1-t2">
<p><a href="#BJEBHAJB">SDO_UTIL.REMOVE_DUPLICATE_VERTICES</a></p>
</td>
<td class="cellalignment742" headers="r27c1-t2 r1c2-t2">
<p>Removes duplicate (redundant) vertices from a geometry.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r28c1-t2" headers="r1c1-t2">
<p><a href="#BJEEBBAG">SDO_UTIL.REVERSE_LINESTRING</a></p>
</td>
<td class="cellalignment742" headers="r28c1-t2 r1c2-t2">
<p>Returns a line string geometry with the vertices of the input geometry in reverse order.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r29c1-t2" headers="r1c1-t2">
<p><a href="#BJEHCIBF">SDO_UTIL.SIMPLIFY</a></p>
</td>
<td class="cellalignment742" headers="r29c1-t2 r1c2-t2">
<p>Simplifies the input geometry, based on a threshold value, using the Douglas-Peucker algorithm.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r30c1-t2" headers="r1c1-t2">
<p><a href="#BJEGEJGI">SDO_UTIL.TO_GML311GEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r30c1-t2 r1c2-t2">
<p>Converts a Spatial geometry object to a geography markup language (GML 3.1.1) fragment based on the geometry types defined in the Open GIS <code>geometry.xsd</code> schema document.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r31c1-t2" headers="r1c1-t2">
<p><a href="#BJEGEEFD">SDO_UTIL.TO_GMLGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r31c1-t2 r1c2-t2">
<p>Converts a Spatial geometry object to a geography markup language (GML 2.0) fragment based on the geometry types defined in the Open GIS <code>geometry.xsd</code> schema document.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r32c1-t2" headers="r1c1-t2">
<p><a href="#BJEJIAGG">SDO_UTIL.TO_KMLGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r32c1-t2 r1c2-t2">
<p>Converts a Spatial geometry object to a KML (Keyhole Markup Language) document.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r33c1-t2" headers="r1c1-t2">
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r33c1-t2 r1c2-t2">
<p>Converts a Spatial geometry object to the well-known binary (WKB) format.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r34c1-t2" headers="r1c1-t2">
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r34c1-t2 r1c2-t2">
<p>Converts a Spatial geometry object to the well-known text (WKT) format.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r35c1-t2" headers="r1c1-t2">
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r35c1-t2 r1c2-t2">
<p>Validates the input geometry, which is in the standard well-known binary (WKB) format; returns the string <code>TRUE</code> if the geometry is valid or <code>FALSE</code> if the geometry is not valid.</p>
</td>
</tr>
<tr class="cellalignment734">
<td class="cellalignment742" id="r36c1-t2" headers="r1c1-t2">
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</td>
<td class="cellalignment742" headers="r36c1-t2 r1c2-t2">
<p>Validates the input geometry, which is of type CLOB or VARCHAR2 and in the standard well-known text (WKT) format; returns the string <code>TRUE</code> if the geometry is valid or <code>FALSE</code> if the geometry is not valid.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="refentry"><a id="BJEGCCDF"></a>
<div id="SPATL1220" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2558"></a><a id="sthref2559"></a><a id="sthref2560"></a>AFFINETRANSFORMS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2561"></a>Format</p>
<p class="synopsis">SDO_UTIL.AFFINETRANSFORMS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;translation IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ty IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tz IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scaling IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;psc1 IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sx IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sy IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sz IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1 IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line1 IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shearing IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shxy IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shyx IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shxz IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shzx IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shyz IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shzy IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reflection IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pref IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineR IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dirR IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;planeR IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n IN SDO_NUMBER_ARRAY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bigD IN SDO_NUMBER_ARRAY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2562"></a>Description</p>
<p>Returns a geometry that reflects an affine transformation of the input geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2563"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Input geometry on which to perform the affine transformation.</p>
</dd>
<dt>translation</dt>
<dd>
<p>A string value of TRUE causes translation to be performed; a string value of FALSE causes translation not to be performed. If this parameter is TRUE, translation is performed about the point at (tx,ty) or (tx,ty,tz).</p>
</dd>
<dt>tx</dt>
<dd>
<p>X-axis value for translation.</p>
</dd>
<dt>ty</dt>
<dd>
<p>Y-axis value for translation.</p>
</dd>
<dt>tz</dt>
<dd>
<p>Z-axis value for translation.</p>
</dd>
<dt>scaling</dt>
<dd>
<p>A string value of TRUE causes scaling to be performed; a string value of FALSE causes scaling not to be performed.</p>
</dd>
<dt>psc1</dt>
<dd>
<p>Point on the input geometry about which to perform the scaling. If <code>scaling</code> is <code>TRUE</code>, this geometry should be either a zero point (point geometry with 0,0 or 0,0,0 ordinates for scaling about the origin) or a nonzero point (point geometry with ordinates for scaling about a point other than the origin). If <code>scaling</code> is <code>FALSE</code>, <code>psc1</code> can be a null value.</p>
</dd>
<dt>sx</dt>
<dd>
<p>X-axis value for scaling (about either the point specified in the <code>psc1</code> parameter or the origin).</p>
</dd>
<dt>sy</dt>
<dd>
<p>Y-axis value for scaling (about either the point specified in the <code>psc1</code> parameter or the origin).</p>
</dd>
<dt>sz</dt>
<dd>
<p>Z-axis value for scaling (about either the point specified in the <code>psc1</code> parameter or the origin).</p>
</dd>
<dt>rotation</dt>
<dd>
<p>A string value of TRUE causes rotation to be performed; a string value of FALSE causes rotation not to be performed.</p>
<p>For two-dimensional geometries, rotation uses the <code>p1</code> and <code>angle</code> values. For three-dimensional geometries, rotation uses either the <code>angle</code> and <code>dir</code> values or the <code>line1</code> and <code>angle</code> values.</p>
</dd>
<dt>p1</dt>
<dd>
<p>Point for two-dimensional geometry rotation about a specified point.</p>
</dd>
<dt>line1</dt>
<dd>
<p>Line for rotation about a specified axis.</p>
</dd>
<dt>angle</dt>
<dd>
<p>Angle rotation parameter (in radians) for rotation about a specified axis or about the X, Y, or Z axis.</p>
</dd>
<dt>dir</dt>
<dd>
<p>Rotation parameter for x(0), y(1), or z(2)-axis roll. If the <code>rotation</code> parameter value is <code>TRUE</code> but the <code>dir</code> parameter is not used, specify a value of -1.</p>
</dd>
<dt>shearing</dt>
<dd>
<p>A string value of TRUE causes shearing to be performed; a string value of FALSE causes shearing not to be performed.</p>
<p>For two-dimensional geometries, shearing uses the <code>shxy</code> and <code>shyx</code> parameter values. For three-dimensional geometries, shearing uses the <code>shxy</code>, <code>shyx</code>, <code>shxz</code>, <code>shzx</code>, <code>shyz</code>, and <code>shzy</code> parameter values.</p>
</dd>
<dt>shxy</dt>
<dd>
<p>Value for shearing due to X along the Y direction.</p>
</dd>
<dt>shyx</dt>
<dd>
<p>Value for shearing due to Y along the X direction.</p>
</dd>
<dt>shxz</dt>
<dd>
<p>Value for shearing due to X along the Z direction (three-dimensional geometries only).</p>
</dd>
<dt>shzx</dt>
<dd>
<p>Value for shearing due to Z along the X direction (three-dimensional geometries only).</p>
</dd>
<dt>shyz</dt>
<dd>
<p>Value for shearing due to Y along the Z direction (three-dimensional geometries only).</p>
</dd>
<dt>shzy</dt>
<dd>
<p>Value for shearing due to Z along the Y direction (three-dimensional geometries only).</p>
</dd>
<dt>reflection</dt>
<dd>
<p>A string value of TRUE causes reflection to be performed; a string value of FALSE causes reflection not to be performed.</p>
<p>For two-dimensional geometries, reflection uses the <code>lineR</code> value for reflection about an axis and the <code>pref</code> value for the centroid for self-reflection. For three-dimensional geometries, reflection uses the <code>lineR</code> value for reflection about an axis; the <code>dirR</code> value for reflection about the yz, xz, and xy planes; the <code>planeR</code>, <code>n</code>, and <code>bigD</code> values for reflection about a specified plane; and the <code>pref</code> value for the centroid for self-reflection.</p>
</dd>
<dt>pref</dt>
<dd>
<p>Point through which to perform reflection.</p>
</dd>
<dt>lineR</dt>
<dd>
<p>Line along which to perform reflection.</p>
</dd>
<dt>dirR</dt>
<dd>
<p>Number indicating the plane about (through) which to perform reflection: 0 for the yz plane, 1 for the xz plane, or 2 for the xy plane. If the <code>reflection</code> parameter value is <code>TRUE</code> but the <code>dirR</code> parameter is not used, specify a value of -1.</p>
</dd>
<dt>planeR</dt>
<dd>
<p>A string value of TRUE causes reflection about an arbitrary plane to be performed; a string value of FALSE causes reflection about an arbitrary plane not to be performed.</p>
</dd>
<dt>n</dt>
<dd>
<p>Normal vector of the plane.</p>
</dd>
<dt>bigD</dt>
<dd>
<p>Delta value for the plane equation in three-dimensional geometries.</p>
<p>For three-dimensional geometries, bigD = delta and n = (A,B,C) where n is the normal of the plane in three-dimensional space. Thus, the plane equation is:</p>
<pre>
Ax+By+Cz+bigD = 3DDotProd(n,<span class="italic">anypointonplane</span>)+bigD = 0
</pre></dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2564"></a>Usage Notes</p>
<p>The order of affine transforms matter because these are matrix and vector multiplications.</p>
<p>You should validate the resulting geometry using the <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2565"></a>Examples</p>
<p>The following example performs an affine transformation on a two-dimensional geometry.</p>
<pre>
-- Polygon reflection in 2D about a specified line segment
SELECT SDO_UTIL.AFFINETRANSFORMS(
  geometry =&gt; MDSYS.SDO_GEOMETRY(2003, NULL, NULL, 
     MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
     MDSYS.SDO_ORDINATE_ARRAY(
       1.5,0,
       2.5,1,
       1.5,2,
       0.5,2,
       0.5,0,
       1.5,0)),
  translation =&gt; 'FALSE',
  tx =&gt; 0.0, 
  ty =&gt; 0.0, 
  tz =&gt; 0.0,
  scaling =&gt; 'FALSE', 
  psc1 =&gt; NULL, 
  sx =&gt; 0.0, 
  sy =&gt; 0.0, 
  sz =&gt; 0.0,
  rotation =&gt; 'FALSE', 
  p1 =&gt; NULL, 
  line1 =&gt; NULL,
  angle =&gt; 0.0, 
  dir =&gt; 0,
  shearing =&gt; 'FALSE', 
  shxy =&gt; 0.0, 
  shyx =&gt; 0.0, 
  shxz =&gt; 0.0, 
  shzx =&gt; 0.0, 
  shyz =&gt; 0.0, 
  shzy =&gt; 0.0,
  reflection =&gt; 'TRUE', 
  pref =&gt; NULL, 
  lineR =&gt; MDSYS.SDO_GEOMETRY(2002,0,NULL, 
    MDSYS.SDO_ELEM_INFO_ARRAY(1,2,1),
    MDSYS.SDO_ORDINATE_ARRAY(2.5,0.0,2.5,2.0)), 
  dirR =&gt; -1, 
  planeR =&gt; 'FALSE', 
  n =&gt; NULL,   
  bigD =&gt; NULL
) FROM DUAL;

SDO_UTIL.AFFINETRANSFORMS(GEOMETRY=&gt;MDSYS.SDO_GEOMETRY(2003,NULL,NULL,MDSYS.SDO_
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(3.5, 0, 2.5, 1, 3.5, 2, 4.5, 2, 4.5, 0, 3.5, 0))
</pre>
<p>The following example performs an affine transformation on a three-dimensional geometry.</p>
<pre>
-- Polygon reflection in 3D about a specified plane (z=1 plane in this example)
SELECT SDO_UTIL.AFFINETRANSFORMS(
  geometry =&gt; MDSYS.SDO_GEOMETRY(3003, 0, NULL, 
     MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1),
     MDSYS.SDO_ORDINATE_ARRAY(
     1.5,0,0,
     2.5,1,0,
     1.5,2,0,
     0.5,2,0,
     0.5,0,0,
     1.5,0,0)),
  translation =&gt; 'FALSE',
  tx =&gt; 0.0, 
  ty =&gt; 0.0, 
  tz =&gt; 0.0,
  scaling =&gt; 'FALSE', 
  psc1 =&gt; NULL, 
  sx =&gt; 0.0, 
  sy =&gt; 0.0, 
  sz =&gt; 0.0,
  rotation =&gt; 'FALSE', 
  p1 =&gt; NULL, 
  line1 =&gt; NULL,
  angle =&gt; 0.0, 
  dir =&gt; 0,
  shearing =&gt; 'FALSE', 
  shxy =&gt; 0.0, 
  shyx =&gt; 0.0, 
  shxz =&gt; 0.0, 
  shzx =&gt; 0.0, 
  shyz =&gt; 0.0, 
  shzy =&gt; 0.0,
  reflection =&gt; 'TRUE', 
  pref =&gt; NULL, 
  lineR =&gt; NULL, 
  dirR =&gt; -1, 
  planeR =&gt; 'TRUE', 
  n =&gt; SDO_NUMBER_ARRAY(0.0, 0.0, 1.0),   
  bigD =&gt; SDO_NUMBER_ARRAY(-1.0)
) FROM DUAL;

SDO_UTIL.AFFINETRANSFORMS(GEOMETRY=&gt;MDSYS.SDO_GEOMETRY(3003,0,NULL,MDSYS.SDO_ELE
--------------------------------------------------------------------------------
SDO_GEOMETRY(3003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(1.5, 0, 2, 2.5, 1, 2, 1.5, 2, 2, .5, 2, 2, .5, 0, 2, 1.5, 0, 2))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2566"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a></p>
</li>
<li>
<p><a href="#BJEDDBEI">SDO_UTIL.POINT_AT_BEARING</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEDEFBA"></a>
<div id="SPATL1221" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2567"></a><a id="sthref2568"></a>APPEND</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2569"></a>Format</p>
<p class="synopsis">SDO_UTIL.APPEND(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry1 IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry2 IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2570"></a>Description</p>
<p>Appends one geometry to another geometry to create a new geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2571"></a>Parameters</p>
<dl>
<dt>geometry1</dt>
<dd>
<p>Geometry object to which <code>geometry2</code> is to be appended.</p>
</dd>
<dt>geometry2</dt>
<dd>
<p>Geometry object to append to <code>geometry1</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2572"></a>Usage Notes</p>
<p>This function should be used only on geometries that do not have any spatial interaction (that is, on disjoint objects). If the input geometries are not disjoint, the resulting geometry might be invalid.</p>
<p>This function does not perform a union operation or any other computational geometry operation. To perform a union operation, use the <a href="sdo_objgeom.htm#i857624">SDO_GEOM.SDO_UNION</a> function, which is described in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>. The APPEND function executes faster than the <a href="sdo_objgeom.htm#i857624">SDO_GEOM.SDO_UNION</a> function.</p>
<p>The geometry type (SDO_GTYPE value) of the resulting geometry reflects the types of the input geometries and the append operation. For example, if the input geometries are two-dimensional polygons (SDO_GTYPE = 2003), the resulting geometry is a two-dimensional multipolygon (SDO_GTYPE = 2007).</p>
<p>An exception is raised if <code>geometry1</code> and <code>geometry2</code> are based on different coordinate systems.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2573"></a>Examples</p>
<p>The following example appends the <code>cola_a</code> and <code>cola_c</code> geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT SDO_UTIL.APPEND(c_a.shape, c_c.shape)
  FROM cola_markets c_a, cola_markets c_c
  WHERE c_a.name = 'cola_a' AND c_c.name = 'cola_c';
 
SDO_UTIL.APPEND(C_A.SHAPE,C_C.SHAPE)(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SD
--------------------------------------------------------------------------------
SDO_GEOMETRY(2007, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 3, 5, 1003, 1), SDO_
ORDINATE_ARRAY(1, 1, 5, 7, 3, 3, 6, 3, 6, 5, 4, 5, 3, 3)) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2574"></a>Related Topics</p>
<ul>
<li>
<p><a href="sdo_objgeom.htm#i857624">SDO_GEOM.SDO_UNION</a> (in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>)</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEBGAFA"></a>
<div id="SPATL1222" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2575"></a><a id="sthref2576"></a><a id="sthref2577"></a>BEARING_TILT_FOR_POINTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2578"></a>Format</p>
<p class="synopsis">SDO_UTIL.BEARING_TILT_FOR_POINTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_point IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_point IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tol IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bearing OUT NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tilt OUT NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2579"></a>Description</p>
<p>Computes the bearing and tilt from a start point to an end point.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2580"></a>Parameters</p>
<dl>
<dt>start_point</dt>
<dd>
<p>Starting point geometry object from which to compute the bearing and tilt. The point geometry must be based on a geodetic coordinate system.</p>
</dd>
<dt>end_point</dt>
<dd>
<p>Ending point geometry object to use in computing the bearing and tilt. The point geometry must be based on the same geodetic coordinate system as <code>start_point</code>.</p>
</dd>
<dt>tol</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>).</p>
</dd>
<dt>bearing</dt>
<dd>
<p>Number of radians, measured clockwise from North.</p>
</dd>
<dt>tilt</dt>
<dd>
<p>Number of radians, measured from the normal.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2581"></a>Usage Notes</p>
<p>The input point geometries must be based on the same geodetic coordinate system. If they are based on a non-geodetic coordinate system, the output bearing is a null value.</p>
<p>The tilt is computed as the arctangent of the difference between the height values divided by the distance between the points (with height excluded from the distance calculation). That is: <code>tilt = atan(height_difference/distance)</code></p>
<p>To convert radians to decimal degrees or decimal degrees to radians, you can use the <a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a> function. To return a point geometry that is at a specified distance and bearing from a start point, you can use the <a href="#BJEDDBEI">SDO_UTIL.POINT_AT_BEARING</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2582"></a>Examples</p>
<p>The following example computes the bearing and tilt for two longitude/latitude points, where the elevation of the start point is 0 (zero) and the elevation of the end point is 5000 meters. This example displays the bearing and tilt values in radians.</p>
<pre>
DECLARE
  bearing NUMBER;
  tilt    NUMBER;
BEGIN
  SDO_UTIL.BEARING_TILT_FOR_POINTS(
    SDO_GEOMETRY(2001, 8307,
      SDO_POINT_TYPE(-71.5, 43, 0), NULL, NULL), -- start_point
    SDO_GEOMETRY(2001, 8307,
      SDO_POINT_TYPE(-71, 43.5, 5000), NULL, NULL), -- end_point
    0.05,  --tolerance
    bearing,
    tilt);
  DBMS_OUTPUT.PUT_LINE('Bearing = ' || bearing);
  DBMS_OUTPUT.PUT_LINE('Tilt = ' || tilt);
END;
/
Bearing = .628239101930666          
Tilt = .0725397288678286910476298724869396973718
</pre>
<p>The following example is the same as the preceding one, except that it displays the bearing and tilt in decimal degrees instead of radians.</p>
<pre>
DECLARE
  bearing NUMBER;
  tilt    NUMBER;
BEGIN
  SDO_UTIL.BEARING_TILT_FOR_POINTS(
    SDO_GEOMETRY(2001, 8307,
      SDO_POINT_TYPE(-71.5, 43, 0), NULL, NULL), -- start_point
    SDO_GEOMETRY(2001, 8307,
      SDO_POINT_TYPE(-71, 43.5, 5000), NULL, NULL), -- end_point
    0.05,  --tolerance
    bearing,
    tilt);
  DBMS_OUTPUT.PUT_LINE('Bearing in degrees = '  
    || bearing * 180 / 3.1415926535897932384626433832795);
  DBMS_OUTPUT.PUT_LINE('Tilt in degrees = ' 
    || tilt * 180 / 3.1415926535897932384626433832795);
END;
/
Bearing in degrees = 35.99544906571628894295547577999851892359
Tilt in degrees = 4.15622031114988533540349823511872120415
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2583"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a></p>
</li>
<li>
<p><a href="#BJEDDBEI">SDO_UTIL.POINT_AT_BEARING</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEJDEJE"></a>
<div id="SPATL1223" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2584"></a><a id="sthref2585"></a><a id="sthref2586"></a>CIRCLE_POLYGON</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2587"></a>Format</p>
<p class="synopsis">SDO_UTIL.CIRCLE_POLYGON(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_longitude IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_latitude IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arc_tolerance IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2588"></a>Description</p>
<p>Returns the polygon geometry that approximates and is covered by a specified circle.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2589"></a>Parameters</p>
<dl>
<dt>center_longitude</dt>
<dd>
<p>Center longitude (in degrees) of the circle to be used to create the returned geometry.</p>
</dd>
<dt>center_latitude</dt>
<dd>
<p>Center latitude (in degrees) of the circle to be used to create the returned geometry.</p>
</dd>
<dt>radius</dt>
<dd>
<p>Length (in meters) of the radius of the circle to be used to create the returned geometry.</p>
</dd>
<dt>arc_tolerance</dt>
<dd>
<p>A numeric value to be used to construct the polygon geometry. The <code>arc_tolerance</code> parameter value has the same meaning and usage guidelines as the <code>arc_tolerance</code> keyword value in the <code>params</code> parameter string for the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function. The unit of measurement associated with the geometry is associated with the <code>arc_tolerance</code> parameter value. (For more information, see the Usage Notes for the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2590"></a>Usage Notes</p>
<p>This function is useful for creating a circle-like polygon around a specified center point when a true circle cannot be used (a circle is not valid for geodetic data with Oracle Spatial). The returned geometry has an SDO_SRID value of 8307 (for <code>Longitude / Latitude (WGS 84)</code>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2591"></a>Examples</p>
<p>The following example returns a circle-like polygon around a point near the center of Concord, Massachusetts. A <code>radius</code> value of 100 meters and an <code>arc_tolerance</code> value of 5 meters are used in computing the polygon vertices.</p>
<pre>
SELECT SDO_UTIL.CIRCLE_POLYGON(-71.34937, 42.46101, 100, 5)
   FROM DUAL;
 
SDO_UTIL.CIRCLE_POLYGON(-71.34937,42.46101,100,5)(SDO_GTYPE, SDO_SRID, SDO_POINT
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(-71.34937, 42.4601107, -71.348653, 42.4602824, -71.348211, 42.4607321, -71.34
8211, 42.4612879, -71.348653, 42.4617376, -71.34937, 42.4619093, -71.350087, 42.
4617376, -71.350529, 42.4612879, -71.350529, 42.4607321, -71.350087, 42.4602824,
 -71.34937, 42.4601107))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2592"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEIDHAG">SDO_UTIL.ELLIPSE_POLYGON</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEHFCFG"></a>
<div id="SPATL1224" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2593"></a><a id="sthref2594"></a>CONCAT_LINES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2595"></a>Format</p>
<p class="synopsis">SDO_UTIL.CONCAT_LINES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry1 IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry2 IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2596"></a>Description</p>
<p>Concatenates two line or multiline two-dimensional geometries to create a new geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2597"></a>Parameters</p>
<dl>
<dt>geometry1</dt>
<dd>
<p>First geometry object for the concatenation operation.</p>
</dd>
<dt>geometry2</dt>
<dd>
<p>Second geometry object for the concatenation operation.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2598"></a>Usage Notes</p>
<p>Each input geometry must be a two-dimensional line or multiline geometry (that is, the SDO_GTYPE value must be 2002 or 2006). This function is not supported for LRS geometries. To concatenate LRS geometric segments, use the <a href="sdo_lrs_ref.htm#i80091">SDO_LRS.CONCATENATE_GEOM_SEGMENTS</a> function (described in <a href="sdo_lrs_ref.htm#g1013943">Chapter 25</a>).</p>
<p>The input geometries must be line strings whose vertices are connected by straight line segments. Circular arcs and compound line strings are not supported.</p>
<p>If an input geometry is a multiline geometry, the elements of the geometry must be disjoint. If they are not disjoint, this function may return incorrect results.</p>
<p>The topological relationship between <code>geometry1</code> and <code>geometry2</code> must be DISJOINT or TOUCH; and if the relationship is TOUCH, the geometries must intersect only at two end points.</p>
<p>You can use the <a href="sdo_aggr.htm#CFAECIDC">SDO_AGGR_CONCAT_LINES</a> spatial aggregate function (described in <a href="sdo_aggr.htm#g998149">Chapter 20</a>) to concatenate multiple two-dimensional line or multiline geometries.</p>
<p>An exception is raised if <code>geometry1</code> and <code>geometry2</code> are based on different coordinate systems.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2599"></a>Examples</p>
<p>The following example concatenates two simple line string geometries.</p>
<pre>
-- Concatenate two touching lines: one from (1,1) to (5,1) and the
-- other from (5,1) to (8,1).
SELECT SDO_UTIL.CONCAT_LINES(
  SDO_GEOMETRY(2002, NULL, NULL, SDO_ELEM_INFO_ARRAY(1,2,1),
     SDO_ORDINATE_ARRAY(1,1, 5,1)),
  SDO_GEOMETRY(2002, NULL, NULL, SDO_ELEM_INFO_ARRAY(1,2,1),
     SDO_ORDINATE_ARRAY(5,1, 8,1))
  ) FROM DUAL;
 
SDO_UTIL.CONCAT_LINES(SDO_GEOMETRY(2002,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,2,1),SDO
--------------------------------------------------------------------------------
SDO_GEOMETRY(2002, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 2, 1), SDO_ORDINATE_ARRAY(
1, 1, 5, 1, 8, 1)) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2600"></a>Related Topics</p>
<ul>
<li>
<p><a href="sdo_aggr.htm#CFAECIDC">SDO_AGGR_CONCAT_LINES</a> (in <a href="sdo_aggr.htm#g998149">Chapter 20</a>)</p>
</li>
<li>
<p><a href="sdo_lrs_ref.htm#i80091">SDO_LRS.CONCATENATE_GEOM_SEGMENTS</a> (in <a href="sdo_lrs_ref.htm#g1013943">Chapter 25</a>)</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEBAIH"></a>
<div id="SPATL1225" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2601"></a><a id="sthref2602"></a>CONVERT_UNIT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2603"></a>Format</p>
<p class="synopsis">SDO_UTIL.CONVERT_UNIT(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ivalue IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in_unit IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out_unit IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2604"></a>Description</p>
<p>Converts values from one angle, area, or distance unit of measure to another.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2605"></a>Parameters</p>
<dl>
<dt>value</dt>
<dd>
<p>Number of units to be converted. For example, to convert 10 decimal degrees to radians, specify <code>10</code>.</p>
</dd>
<dt>in_unit</dt>
<dd>
<p>The unit of measure from which to convert the input value. Must be a value from the SDO_UNIT column of the MDSYS.SDO_ANGLE_UNITS table (described in <a href="sdo_cs_concepts.htm#i893912">Section 6.8.2</a>), the MDSYS.SDO_AREA_UNITS table (described in <a href="sdo_objrelschema.htm#i1010145">Section 2.10</a>), or the MDSYS.SDO_DIST_UNITS table (described in <a href="sdo_objrelschema.htm#i1010145">Section 2.10</a>). For example, to convert decimal degrees to radians, specify <code>Degree</code>.</p>
</dd>
<dt>out_unit</dt>
<dd>
<p>The unit of measure into which to convert the input value. Must be a value from the SDO_UNIT column of the same table used for <code>in_unit</code>. For example, to convert decimal degrees to radians, specify <code>Radian</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2606"></a>Usage Notes</p>
<p>The value returned by this function might not be correct at an extremely high degree of precision because of the way internal mathematical operations are performed, especially if they involve small numbers or irrational numbers (such as <span class="italic">pi</span>). For example, converting 1 decimal degree into decimal minutes results in the value 60.0000017.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2607"></a>Examples</p>
<p>The following example converts 1 radian into decimal degrees.</p>
<pre>
SQL&gt; SELECT SDO_UTIL.CONVERT_UNIT(1, 'Radian', 'Degree') FROM DUAL;
 
SDO_UTIL.CONVERT_UNIT(1,'RADIAN','DEGREE')                                      
------------------------------------------                                      
                                57.2957796 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2608"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="SPATL1226" class="refsect1"><!-- infolevel="all" infotype="General" --><a id="sthref2609"></a>
<h2 class="refsect1">SDO_UTIL.<a id="sthref2610"></a><a id="sthref2611"></a>DROP_WORK_TABLES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2612"></a>Format</p>
<p class="synopsis">SDO_UTIL.DROP_WORK_TABLES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oidstr IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2613"></a>Description</p>
<p>Drops any transient ("scratch") tables and views in the current schema that were created during the creation of a point cloud or TIN.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2614"></a>Parameters</p>
<dl>
<dt>oidstr</dt>
<dd>
<p>Object ID string representing a hexadecimal number. Use the string given in the error message that indicated that scratch tables need to be dropped.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2615"></a>Usage Notes</p>
<p>If scratch tables still exist from a previous <a href="sdo_pc_pkg_ref.htm#CHDBJJIH">SDO_PC_PKG.CREATE_PC</a> or <a href="sdo_tin_pkg_ref.htm#CACJHFFD">SDO_TIN_PKG.CREATE_TIN</a> operation when you try to create a point cloud or TIN, an error message is displayed indicating that you must first drop the scratch tables. Use the SDO_UTIL.DROP_WORK_TABLES procedure to drop these scratch tables.</p>
<p>This procedure drops all tables and views that match <code>'M%_&lt;oidstr&gt;$$%'</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2616"></a>Examples</p>
<p>The following example drops the scratch tables from a previous <a href="sdo_pc_pkg_ref.htm#CHDBJJIH">SDO_PC_PKG.CREATE_PC</a> or <a href="sdo_tin_pkg_ref.htm#CACJHFFD">SDO_TIN_PKG.CREATE_TIN</a> operation, using an OID string specified in a previous error message.</p>
<pre>
EXECXUTE SDO_UTIL.DROP_WORK_TABLES('A1B2C3');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2617"></a>Related Topics</p>
<ul>
<li>
<p><a href="sdo_pc_pkg_ref.htm#CHDBJJIH">SDO_PC_PKG.CREATE_PC</a></p>
</li>
<li>
<p><a href="sdo_tin_pkg_ref.htm#CACJHFFD">SDO_TIN_PKG.CREATE_TIN</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIDHAG"></a>
<div id="SPATL1227" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2618"></a><a id="sthref2619"></a><a id="sthref2620"></a>ELLIPSE_POLYGON</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2621"></a>Format</p>
<p class="synopsis">SDO_UTIL.ELLIPSE_POLYGON(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_longitude IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;center_latitude IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;semi_major_axis IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;semi_minor_axis IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;azimuth IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arc_tolerance IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2622"></a>Description</p>
<p>Returns the polygon geometry that approximates and is covered by a specified ellipse.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2623"></a>Parameters</p>
<dl>
<dt>center_longitude</dt>
<dd>
<p>Center longitude (in degrees) of the ellipse to be used to create the returned geometry.</p>
</dd>
<dt>center_latitude</dt>
<dd>
<p>Center latitude (in degrees) of the ellipse to be used to create the returned geometry.</p>
</dd>
<dt>semi_major_axis</dt>
<dd>
<p>Length (in meters) of the semi-major axis of the ellipse to be used to create the returned geometry.</p>
</dd>
<dt>semi_minor_axis</dt>
<dd>
<p>Length (in meters) of the semi-minor axis of the ellipse to be used to create the returned geometry.</p>
</dd>
<dt>azimuth</dt>
<dd>
<p>Number of degrees of the azimuth (clockwise rotation of the major axis from north) of the ellipse to be used to create the returned geometry. Must be from 0 to 180. The returned geometry is rotated by the specified number of degrees.</p>
</dd>
<dt>arc_tolerance</dt>
<dd>
<p>A numeric value to be used to construct the polygon geometry. The <code>arc_tolerance</code> parameter value has the same meaning and usage guidelines as the <code>arc_tolerance</code> keyword value in the <code>params</code> parameter string for the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function. The unit of measurement associated with the geometry is associated with the <code>arc_tolerance</code> parameter value. (For more information, see the Usage Notes for the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2624"></a>Usage Notes</p>
<p>This function is useful for creating an ellipse-like polygon around a specified center point when a true ellipse cannot be used (an ellipse is not valid for geodetic data with Oracle Spatial). The returned geometry has an SDO_SRID value of 8307 (for <code>Longitude / Latitude (WGS 84)</code>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2625"></a>Examples</p>
<p>The following example returns an ellipse-like polygon, oriented east-west (<code>azimuth</code> = 90), around a point near the center of Concord, Massachusetts. An <code>arc_tolerance</code> value of 5 meters is used in computing the polygon vertices.</p>
<pre>
SELECT SDO_UTIL.ELLIPSE_POLYGON(-71.34937, 42.46101, 100, 50, 90, 5)
   FROM DUAL;
 
SDO_UTIL.ELLIPSE_POLYGON(-71.34937,42.46101,100,50,90,5)(SDO_GTYPE, SDO_SRID, SD
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, 8307, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(-71.350589, 42.46101, -71.350168, 42.4606701, -71.349708, 42.460578, -71.3493
7, 42.4605603, -71.349032, 42.460578, -71.348572, 42.4606701, -71.348151, 42.461
01, -71.348572, 42.4613499, -71.349032, 42.461442, -71.34937, 42.4614597, -71.34
9708, 42.461442, -71.350168, 42.4613499, -71.350589, 42.46101))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2626"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEJDEJE">SDO_UTIL.CIRCLE_POLYGON</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABBGFIB"></a>
<div id="SPATL1228" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2627"></a><a id="sthref2628"></a><a id="sthref2629"></a><a id="sthref2630"></a>EXTRACT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2631"></a>Format</p>
<p class="synopsis">SDO_UTIL.EXTRACT(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ring IN NUMBER DEFAULT 0</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2632"></a>Description</p>
<p>Returns the two-dimensional geometry that represents a specified element (and optionally a ring) of the input two-dimensional geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2633"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry from which to extract the geometry to be returned. Must be a two-dimensional geometry.</p>
</dd>
<dt>element</dt>
<dd>
<p>Number of the element in the geometry: 1 for the first element, 2 for the second element, and so on. Geometries with SDO_GTYPE values (explained in <a href="sdo_objrelschema.htm#i1005614">Section 2.2.1</a>) ending in 1, 2, or 3 have one element; geometries with SDO_GTYPE values ending in 4, 5, 6, or 7 can have more than one element. For example, a multipolygon with an SDO_GTYPE of 2007 might contain three elements (polygons).</p>
</dd>
<dt>ring</dt>
<dd>
<p>Number of the subelement (ring) within <code>element</code>: 1 for the first subelement, 2 for the second subelement, and so on. This parameter is valid only for specifying a subelement of a polygon with one or more holes or of a point cluster:</p>
<ul>
<li>
<p>For a polygon with holes, its first subelement is its exterior ring, its second subelement is its first interior ring, its third subelement is its second interior ring, and so on. For example, in the polygon with a hole shown in <a href="sdo_objrelschema.htm#i1012271">Figure 2-4</a> in <a href="sdo_objrelschema.htm#BGHGAHHG">Section 2.7.2</a>, the exterior ring is subelement 1 and the interior ring (the hole) is subelement 2.</p>
</li>
<li>
<p>For a point cluster, its first subelement is the first point in the point cluster, its second subelement is the second point in the point cluster, and so on.</p>
</li>
</ul>
<p>The default is 0, which causes the entire element to be extracted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2634"></a>Usage Notes</p>
<p>This function applies to two-dimensional geometries only. For three-dimensional geometries, use the <a href="#BJEIFJHD">SDO_UTIL.EXTRACT3D</a> function.</p>
<p>This function is useful for extracting a specific element or subelement from a complex geometry. For example, if you have identified a geometry as invalid by using the <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function or the <a href="sdo_objgeom.htm#BGHIAAIF">SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT</a> procedure (both of which are documented in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>), you can use the EXTRACT function to extract the invalid geometry in order to examine it.</p>
<p>For a polygon with one or more holes, the returned geometry representing an extracted interior ring is reoriented so that its vertices are presented in counterclockwise order (as opposed to the clockwise order within an interior ring).</p>
<p>If <code>geometry</code> is null or has an SDO_GTYPE value ending in 0, this function returns a null geometry.</p>
<p><code>geometry</code> cannot contain a type 0 (zero) element. Type 0 elements are described in <a href="sdo_objrelschema.htm#BGHBAIDC">Section 2.7.7</a>.</p>
<p>This function is not intended for use with geometries that have any null ordinate values. Any null ordinate values in the returned geometry are replaced by 0 (zero).</p>
<p>An exception is raised if <code>element</code> or <code>ring</code> is an invalid number for <code>geometry</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2635"></a>Examples</p>
<p>The following example extracts the first (and only) element in the <code>cola_c</code> geometry. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT c.name, SDO_UTIL.EXTRACT(c.shape, 1)
   FROM cola_markets c WHERE c.name = 'cola_c';

NAME                                                                            
--------------------------------                                                
SDO_UTIL.EXTRACT(C.SHAPE,1)(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SDO_ELEM_IN
--------------------------------------------------------------------------------
cola_c                                                                          
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(3, 3, 6, 3, 6, 5, 4, 5, 3, 3))
</pre>
<p>The following example inserts a polygon with a hole (using the same INSERT statement as in <a href="sdo_objrelschema.htm#i1012270">Example 2-7</a> in <a href="sdo_objrelschema.htm#BGHGAHHG">Section 2.7.2</a>), and extracts the geometry representing the hole (the second subelement). Notice that in the geometry returned by the EXTRACT function, the vertices are in counterclockwise order, as opposed to the clockwise order in the hole (second subelement) in the input geometry.</p>
<pre>
-- Insert polygon with hole.
INSERT INTO cola_markets VALUES(
  10,
  'polygon_with_hole',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1, 19,2003,1), -- polygon with hole
    SDO_ORDINATE_ARRAY(2,4, 4,3, 10,3, 13,5, 13,9, 11,13, 5,13, 2,11, 2,4,
        7,5, 7,10, 10,10, 10,5, 7,5)
  )
);

1 row created.

-- Extract the hole geometry (second subelement).
SELECT SDO_UTIL.EXTRACT(c.shape, 1, 2)
   FROM cola_markets c WHERE c.name = 'polygon_with_hole';

SDO_UTIL.EXTRACT(C.SHAPE,1,2)(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), SDO_ELEM_
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(7, 5, 10, 5, 10, 10, 7, 10, 7, 5)) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2636"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEIFJHD">SDO_UTIL.EXTRACT3D</a></p>
</li>
<li>
<p><a href="#BABDEGIA">SDO_UTIL.GETVERTICES</a></p>
</li>
<li>
<p><a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a></p>
</li>
<li>
<p><a href="sdo_objgeom.htm#BGHIAAIF">SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CIHGIEED"></a>
<div class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2637"></a><a id="sthref2638"></a><a id="sthref2639"></a><a id="sthref2640"></a>EXTRACT_ALL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2641"></a>Format</p>
<p class="synopsis">SDO_UTIL.EXTRACT_ALL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flatten IN NUMBER DEFAULT 1</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2642"></a>Description</p>
<p>Returns all elements and subelements of the input two-dimensional geometry, as an array of one or more geometries. Returns an object of type SDO_GEOMETRY_ARRAY, which is defined as <code>VARRAY OF SDO_GEOMETRY</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2643"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry from which to extract all elements and subelements. Must be a two-dimensional geometry.</p>
</dd>
<dt>flatten</dt>
<dd>
<p>A flag indicating whether to "flatten" rings into individual geometries for geometries that contain an exterior ring and one or more interior rings:</p>
<ul>
<li>
<p><code>0</code> (zero) returns one geometry for each element, but does not flatten rings into individual geometries. (A geometry will still be returned for each element of the input geometry.)</p>
</li>
<li>
<p><code>1</code> (the default) or any other nonzero value flattens rings into individual geometries.</p>
</li>
</ul>
<p>For example, if a polygon contains an outer ring and an inner ring, a value of <code>0</code> returns a single geometry containing both rings, and a value of <code>1</code> returns two geometries, each containing a ring as a geometry.</p>
<p>This parameter is ignored for geometries that do not contain an exterior ring and one or more interior rings.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2644"></a>Usage Notes</p>
<p>This function applies to two-dimensional geometries only. For three-dimensional geometries, use the <a href="#BJEIFJHD">SDO_UTIL.EXTRACT3D</a> function.</p>
<p>This function enables you to extract all elements and subelements from a geometry, regardless of how many elements and subelements the geometry has. Geometries with SDO_GTYPE values (explained in <a href="sdo_objrelschema.htm#i1005614">Section 2.2.1</a>) ending in 1, 2, or 3 have one element; geometries with SDO_GTYPE values ending in 4, 5, 6, or 7 can have more than one element. For example, a multipolygon with an SDO_GTYPE of 2007 might contain three elements (polygons). To extract individual elements, use the <a href="#BABBGFIB">SDO_UTIL.EXTRACT</a> function instead.</p>
<p>For a polygon with one or more holes, with the default value for the <code>flatten</code> parameter, the returned geometry representing an extracted interior ring is reoriented so that its vertices are presented in counterclockwise order (as opposed to the clockwise order within an interior ring). However, if the <code>flatten</code> parameter value is 0, no reorientation is performed.</p>
<p>If <code>geometry</code> is null or has an SDO_GTYPE value ending in 0, this function returns a null geometry.</p>
<p><code>geometry</code> cannot contain a type 0 (zero) element. Type 0 elements are described in <a href="sdo_objrelschema.htm#BGHBAIDC">Section 2.7.7</a>.</p>
<p>This function is not intended for use with geometries that have any null ordinate values. Any null ordinate values in the returned geometry are replaced by 0 (zero).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2645"></a>Examples</p>
<p>The following example extracts all elements from the <code>cola_b</code> geometry. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT * FROM TABLE(
  SELECT SDO_UTIL.EXTRACT_ALL(c.shape)
    FROM cola_markets c WHERE c.name = 'cola_b');
 
 SDO_GTYPE   SDO_SRID                                                           
---------- ----------                                                           
SDO_POINT(X, Y, Z)                                                              
--------------------------------------------------------------------------------
SDO_ELEM_INFO                                                                   
--------------------------------------------------------------------------------
SDO_ORDINATES                                                                   
--------------------------------------------------------------------------------
      2003                                                                      
                                                                                
SDO_ELEM_INFO_ARRAY(1, 1003, 1)                                                 
SDO_ORDINATE_ARRAY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1)                                
</pre>
<p>The following example inserts a polygon with a hole (using the same INSERT statement as in <a href="sdo_objrelschema.htm#i1012270">Example 2-7</a> in <a href="sdo_objrelschema.htm#BGHGAHHG">Section 2.7.2</a>), and extracts all elements and subelements from the <code>polygon_with_hole</code> geometry. Notice that because the <code>flatten</code> parameter is not specified, in the second geometry returned by the EXTRACT_ALL function the vertices are in counterclockwise order, as opposed to the clockwise order in the hole (second subelement) in the input geometry.</p>
<pre>
-- Insert polygon with hole.
INSERT INTO cola_markets VALUES(
  10,
  'polygon_with_hole',
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1, 19,2003,1), -- polygon with hole
    SDO_ORDINATE_ARRAY(2,4, 4,3, 10,3, 13,5, 13,9, 11,13, 5,13, 2,11, 2,4,
        7,5, <span class="bold">7,10, 10,10, 10,5,</span> 7,5)
  )
);

1 row created.

-- Extract all, with default for flatten.
SELECT * FROM TABLE(
  SELECT SDO_UTIL.EXTRACT_ALL(c.shape)
  FROM cola_markets c WHERE c.name = 'polygon_with_hole');
 
 SDO_GTYPE   SDO_SRID                                                           
---------- ----------                                                           
SDO_POINT(X, Y, Z)                                                              
--------------------------------------------------------------------------------
SDO_ELEM_INFO                                                                   
--------------------------------------------------------------------------------
SDO_ORDINATES                                                                   
--------------------------------------------------------------------------------
      2003                                                                      
                                                                                
SDO_ELEM_INFO_ARRAY(1, 1003, 1)                                                 
SDO_ORDINATE_ARRAY(2, 4, 4, 3, 10, 3, 13, 5, 13, 9, 11, 13, 5, 13, 2, 11, 2, 4) 
                                                                                
 
 SDO_GTYPE   SDO_SRID                                                           
---------- ----------                                                           
SDO_POINT(X, Y, Z)                                                              
--------------------------------------------------------------------------------
SDO_ELEM_INFO                                                                   
--------------------------------------------------------------------------------
SDO_ORDINATES                                                                   
--------------------------------------------------------------------------------
      2003                                                                      
                                                                                
SDO_ELEM_INFO_ARRAY(1, 1003, 1)                                                 
SDO_ORDINATE_ARRAY(7, 5, <span class="bold">10, 5, 10, 10, 7, 10,</span> 7, 5)                            
</pre>
<p>The following example extracts all elements and subelements from the <code>polygon_with_hole</code> geometry (inserted in the preceding example), and it specifies the <code>flatten</code> parameter value as 0 (zero). This causes the returned array to contain a single geometry that is the same as the input geometry; thus, in the geometry returned by the EXTRACT_ALL function, the vertices are in same clockwise order in the hole (second subelement) as in the input geometry.</p>
<pre>
-- Extract all, with flatten = 0.
SELECT * FROM TABLE(
  SELECT SDO_UTIL.EXTRACT_ALL(c.shape, <span class="bold">0</span>)
    FROM cola_markets c WHERE c.name = 'polygon_with_hole');
 
 SDO_GTYPE   SDO_SRID                                                           
---------- ----------                                                           
SDO_POINT(X, Y, Z)                                                              
--------------------------------------------------------------------------------
SDO_ELEM_INFO                                                                   
--------------------------------------------------------------------------------
SDO_ORDINATES                                                                   
--------------------------------------------------------------------------------
      2003                                                                      
                                                                                
SDO_ELEM_INFO_ARRAY(1, 1003, 1, 19, 2003, 1)                                    
SDO_ORDINATE_ARRAY(2, 4, 4, 3, 10, 3, 13, 5, 13, 9, 11, 13, 5, 13, 2, 11, 2, 4, 
7, 5, <span class="bold">7, 10, 10, 10, 10, 5,</span> 7, 5)                                               
 
 SDO_GTYPE   SDO_SRID                                                           
---------- ----------                                                           
SDO_POINT(X, Y, Z)                                                              
--------------------------------------------------------------------------------
SDO_ELEM_INFO                                                                   
--------------------------------------------------------------------------------
SDO_ORDINATES                                                                   
--------------------------------------------------------------------------------
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2646"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BABBGFIB">SDO_UTIL.EXTRACT</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIFJHD"></a>
<div id="SPATL1229" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2647"></a><a id="sthref2648"></a>EXTRACT3D</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2649"></a>Format</p>
<p class="synopsis">SDO_UTIL.EXTRACT3D(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2650"></a>Description</p>
<p>Returns the three-dimensional geometry that represents a specified subset of the input three-dimensional geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2651"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry from which to extract the geometry to be returned. Must be a three-dimensional geometry</p>
</dd>
<dt>label</dt>
<dd>
<p>A comma-delimited string of numbers that identify the subset geometry to be returned. Each number identifies the relative position of a geometry item within the input geometry. The items and their positions within the <code>label</code> string are:</p>
<ul>
<li>
<p><code>pointID</code>: Point number</p>
</li>
<li>
<p><code>edgeID</code>: Edge number</p>
</li>
<li>
<p><code>ringID</code>: Ring number</p>
</li>
<li>
<p><code>polygonID</code>: Polygon number</p>
</li>
<li>
<p><code>csurfID</code>: Composite surface number</p>
</li>
<li>
<p><code>solidID</code>: Solid number</p>
</li>
<li>
<p><code>multiID</code>: Multisolid number</p>
</li>
</ul>
<p>A value of 0 (zero) means that the item does not apply, and you can omit trailing items that do not apply. For example, <code>'0,2,1,4,1'</code> means that point number does not apply, and it specifies the second edge of the first ring of the fourth polygon of the first composite surface.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2652"></a>Usage Notes</p>
<p>This function applies to three-dimensional geometries only. For two-dimensional geometries, use the <a href="#BABBGFIB">SDO_UTIL.EXTRACT</a> function.</p>
<p>This function uses the <code>getElementByLabel</code> method of the <code>oracle.spatial.geometry.ElementExtractor</code> Java class, which is described in <a class="olink SPAJV" href="../e11829/toc.htm"><span class="italic">Oracle Spatial Java API Reference</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2653"></a>Examples</p>
<p>The following example extracts, from a specified three-dimensional geometry, the subset geometry consisting of the following: edge 2 of ring 1 of polygon 4 of composite surface 1 of the input geometry.</p>
<pre>
SELECT SDO_UTIL.EXTRACT3D(
  SDO_GEOMETRY (3008,NULL,NULL ,
    SDO_ELEM_INFO_ARRAY(
      1,1007,1,
      1,1006,6,
      1,1003,1,
      16,1003,1,
      31,1003,1,
      46,1003,1,
      61,1003,1,
      76,1003,1),
    SDO_ORDINATE_ARRAY(
      1.0,0.0,-1.0,
      1.0,1.0,-1.0,
      1.0,1.0,1.0,
      1.0,0.0,1.0,
      1.0,0.0,-1.0,
      1.0,0.0,1.0,
      0.0,0.0,1.0,
      0.0,0.0,-1.0,
      1.0,0.0,-1.0,
      1.0,0.0,1.0,
      0.0,1.0,1.0,
      0.0,1.0,-1.0,
      0.0,0.0,-1.0,
      0.0,0.0,1.0,
      0.0,1.0,1.0,
      1.0,1.0,-1.0,
      0.0,1.0,-1.0,
      0.0,1.0,1.0,
      1.0,1.0,1.0,
      1.0,1.0,-1.0,
      1.0,1.0,1.0,
      0.0,1.0,1.0,
      0.0,0.0,1.0,
      1.0,0.0,1.0,
      1.0,1.0,1.0,
      1.0,1.0,-1.0,
      1.0,0.0,-1.0,
      0.0,0.0,-1.0,
      0.0,1.0,-1.0,
      1.0,1.0,-1.0
      )
    ), 
  '0,2,1,4,1') 
FROM DUAL;
 
SDO_UTIL.EXTRACT3D(SDO_GEOMETRY(3008,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1007,1,1,10
--------------------------------------------------------------------------------
SDO_GEOMETRY(3002, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 2, 1), SDO_ORDINATE_ARRAY(
0, 1, -1, 0, 1, 1))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2654"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BABBGFIB">SDO_UTIL.EXTRACT</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJECJIIE"></a>
<div id="SPATL1230" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2655"></a><a id="sthref2656"></a><a id="sthref2657"></a>EXTRUDE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2658"></a>Format</p>
<p class="synopsis">SDO_UTIL.EXTRUDE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grdheight IN SDO_NUMBER_ARRAY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height IN SDO_NUMBER_ARRAY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tol IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optional3dSrid IN NUMBER DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2659"></a>Description</p>
<p>Returns the three-dimensional extrusion solid geometry from an input two-dimensional polygon geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2660"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Two-dimensional polygon geometry from which to return the extrusion geometry. This geometry forms the "base" of the returned geometry.</p>
</dd>
<dt>grdheight</dt>
<dd>
<p>Ground heights as a set of Z (height) values at the base of the solid. The numbers in this array should be the Z (height) values at the base of each vertex in the input geometry.</p>
</dd>
<dt>height</dt>
<dd>
<p>Height values for the extrusion geometry. The numbers in this array should be the Z (height) values at the "top" of each corresponding point in the grdheight array. For example, if the ground height at the base of the first vertex is 0 and the height at that vertex is 10, the solid at that point along the base extends 10 units high.</p>
</dd>
<dt>tol</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>).</p>
</dd>
<dt>optional3dSrid</dt>
<dd>
<p>Three-dimensional coordinate system (SRID) to be assigned to the returned geometry. If you do not specify this parameter, Spatial automatically assigns a three-dimensional SRID value based on the SRID value of the input geometry.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2661"></a>Usage Notes</p>
<p>The input geometry must be a two-dimensional polygon geometry.</p>
<p>If the input geometry is a polygon with multiple inner rings, this function internally combines these inner rings to make them one inner ring, producing a new geometry that approximately represents the original appearance; the function then performs the extrusion process on this new geometry, and returns the result.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2662"></a>Examples</p>
<p>The following example returns the three-dimensional solid geometry representing an extrusion from a two-dimensional polygon geometry.</p>
<pre>
SELECT SDO_UTIL.EXTRUDE(
  SDO_GEOMETRY(
    2003, 
    null,
    null,
    SDO_ELEM_INFO_ARRAY(1,1003,1),
    SDO_ORDINATE_ARRAY(5, 1,8,1,8,6,5,7,5,1)),
  SDO_NUMBER_ARRAY(0,0,0,0,0),
  SDO_NUMBER_ARRAY(5,10,10,5,5),
  0.005) from dual;

SDO_UTIL.EXTRUDE(SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1003,1),SDO_O
--------------------------------------------------------------------------------
SDO_GEOMETRY(3008, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1007, 1, 1, 1006, 6, 1, 10
03, 1, 16, 1003, 1, 31, 1003, 1, 46, 1003, 1, 61, 1003, 1, 76, 1003, 1), SDO_ORD
INATE_ARRAY(5, 1, 0, 5, 7, 0, 8, 6, 0, 8, 1, 0, 5, 1, 0, 5, 1, 5, 8, 1, 10, 8, 6
, 10, 5, 7, 5, 5, 1, 5, 5, 1, 0, 8, 1, 0, 8, 1, 10, 5, 1, 5, 5, 1, 0, 8, 1, 0, 8
, 6, 0, 8, 6, 10, 8, 1, 10, 8, 1, 0, 8, 6, 0, 5, 7, 0, 5, 7, 5, 8, 6, 10, 8, 6,
0, 5, 7, 0, 5, 1, 0, 5, 1, 5, 5, 7, 5, 5, 7, 0))
</pre>
<p>The following example returns the three-dimensional composite solid geometry representing an extrusion from a two-dimensional polygon geometry with inner rings.</p>
<pre>
SELECT SDO_UTIL.EXTRUDE(
  SDO_GEOMETRY(
    2003, 
    null, 
    null,
    SDO_ELEM_INFO_ARRAY(1, 1003, 1, 11, 2003, 1, 
      21, 2003,1, 31,2003,1, 41, 2003, 1),
    SDO_ORDINATE_ARRAY(0,0, 8,0, 8,8, 0,8, 0,0,
      1,3, 1,4, 2,4, 2,3, 1,3, 1,1, 1,2, 2,2, 2,1, 1,1,
      1,6, 1,7, 2,7, 2,6, 1,6, 3,2, 3,4, 4,4, 4,2, 3,2)),
  SDO_NUMBER_ARRAY(-1.0), 
  SDO_NUMBER_ARRAY(1.0), 
  0.0001) from dual;
 
SDO_UTIL.EXTRUDE(SDO_GEOMETRY(2003,NULL,NULL,SDO_ELEM_INFO_ARRAY(1,1003,1,11,200
--------------------------------------------------------------------------------
SDO_GEOMETRY(3008, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1008, 4, 1, 1007, 1, 1, 10
06, 16, 1, 1003, 1, 46, 1003, 1, 91, 1003, 1, 106, 1003, 1, 121, 1003, 1, 136, 1
003, 1, 151, 1003, 1, 166, 1003, 1, 181, 1003, 1, 196, 1003, 1, 211, 1003, 1, 22
6, 1003, 1, 241, 1003, 1, 256, 1003, 1, 271, 1003, 1, 286, 1003, 1, 301, 1007, 1
, 301, 1006, 10, 301, 1003, 1, 328, 1003, 1, 355, 1003, 1, 370, 1003, 1, 385, 10
03, 1, 400, 1003, 1, 415, 1003, 1, 430, 1003, 1, 445, 1003, 1, 460, 1003, 1, 475
, 1007, 1, 475, 1006, 6, 475, 1003, 1, 490, 1003, 1, 505, 1003, 1, 520, 1003, 1,
 535, 1003, 1, 550, 1003, 1, 565, 1007, 1, 565, 1006, 10, 565, 1003, 1, 592, 100
3, 1, 619, 1003, 1, 634, 1003, 1, 649, 1003, 1, 664, 1003, 1, 679, 1003, 1, 694,
 1003, 1, 709, 1003, 1, 724, 1003, 1), SDO_ORDINATE_ARRAY(4, 0, -1, 4, 2, -1, 4,
 4, -1, 3, 4, -1, 2, 4, -1, 2, 7, -1, 1, 7, -1, 1, 6, -1, 1, 4, -1, 1, 3, -1, 0,
 3, -1, 0, 8, -1, 8, 8, -1, 8, 0, -1, 4, 0, -1, 4, 0, 1, 8, 0, 1, 8, 8, 1, 0, 8,
 1, 0, 3, 1, 1, 3, 1, 1, 4, 1, 1, 6, 1, 1, 7, 1, 2, 7, 1, 2, 4, 1, 3, 4, 1, 4, 4
, 1, 4, 2, 1, 4, 0, 1, 4, 0, -1, 8, 0, -1, 8, 0, 1, 4, 0, 1, 4, 0, -1, 8, 0, -1,
 8, 8, -1, 8, 8, 1, 8, 0, 1, 8, 0, -1, 8, 8, -1, 0, 8, -1, 0, 8, 1, 8, 8, 1, 8,
8, -1, 0, 8, -1, 0, 3, -1, 0, 3, 1, 0, 8, 1, 0, 8, -1, 0, 3, -1, 1, 3, -1, 1, 3,
 1, 0, 3, 1, 0, 3, -1, 1, 3, -1, 1, 4, -1, 1, 4, 1, 1, 3, 1, 1, 3, -1, 1, 4, -1,
 1, 6, -1, 1, 6, 1, 1, 4, 1, 1, 4, -1, 1, 6, -1, 1, 7, -1, 1, 7, 1, 1, 6, 1, 1,
6, -1, 1, 7, -1, 2, 7, -1, 2, 7, 1, 1, 7, 1, 1, 7, -1, 2, 7, -1, 2, 4, -1, 2, 4,
 1, 2, 7, 1, 2, 7, -1, 2, 4, -1, 3, 4, -1, 3, 4, 1, 2, 4, 1, 2, 4, -1, 3, 4, -1,
 4, 4, -1, 4, 4, 1, 3, 4, 1, 3, 4, -1, 4, 4, -1, 4, 2, -1, 4, 2, 1, 4, 4, 1, 4,
4, -1, 4, 2, -1, 4, 0, -1, 4, 0, 1, 4, 2, 1, 4, 2, -1, 0, 3, -1, 1, 3, -1, 1, 1,
 -1, 2, 1, -1, 3, 2, -1, 4, 2, -1, 4, 0, -1, 0, 0, -1, 0, 3, -1, 0, 3, 1, 0, 0,
1, 4, 0, 1, 4, 2, 1, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 0, 3, 1, 0, 3, -1, 0, 0
, -1, 0, 0, 1, 0, 3, 1, 0, 3, -1, 0, 0, -1, 4, 0, -1, 4, 0, 1, 0, 0, 1, 0, 0, -1
, 4, 0, -1, 4, 2, -1, 4, 2, 1, 4, 0, 1, 4, 0, -1, 4, 2, -1, 3, 2, -1, 3, 2, 1, 4
, 2, 1, 4, 2, -1, 3, 2, -1, 2, 1, -1, 2, 1, 1, 3, 2, 1, 3, 2, -1, 2, 1, -1, 1, 1
, -1, 1, 1, 1, 2, 1, 1, 2, 1, -1, 1, 1, -1, 1, 3, -1, 1, 3, 1, 1, 1, 1, 1, 1, -1
, 1, 3, -1, 0, 3, -1, 0, 3, 1, 1, 3, 1, 1, 3, -1, 1, 6, -1, 2, 6, -1, 2, 4, -1,
1, 4, -1, 1, 6, -1, 1, 6, 1, 1, 4, 1, 2, 4, 1, 2, 6, 1, 1, 6, 1, 1, 6, -1, 1, 4,
 -1, 1, 4, 1, 1, 6, 1, 1, 6, -1, 1, 4, -1, 2, 4, -1, 2, 4, 1, 1, 4, 1, 1, 4, -1,
 2, 4, -1, 2, 6, -1, 2, 6, 1, 2, 4, 1, 2, 4, -1, 2, 6, -1, 1, 6, -1, 1, 6, 1, 2,
 6, 1, 2, 6, -1, 1, 3, -1, 2, 3, -1, 2, 4, -1, 3, 4, -1, 3, 2, -1, 2, 1, -1, 2,
2, -1, 1, 2, -1, 1, 3, -1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 3, 2, 1, 3, 4, 1,
 2, 4, 1, 2, 3, 1, 1, 3, 1, 1, 3, -1, 1, 2, -1, 1, 2, 1, 1, 3, 1, 1, 3, -1, 1, 2
, -1, 2, 2, -1, 2, 2, 1, 1, 2, 1, 1, 2, -1, 2, 2, -1, 2, 1, -1, 2, 1, 1, 2, 2, 1
, 2, 2, -1, 2, 1, -1, 3, 2, -1, 3, 2, 1, 2, 1, 1, 2, 1, -1, 3, 2, -1, 3, 4, -1,
3, 4, 1, 3, 2, 1, 3, 2, -1, 3, 4, -1, 2, 4, -1, 2, 4, 1, 3, 4, 1, 3, 4, -1, 2, 4
, -1, 2, 3, -1, 2, 3, 1, 2, 4, 1, 2, 4, -1, 2, 3, -1, 1, 3, -1, 1, 3, 1, 2, 3, 1
, 2, 3, -1))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2663"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJECFBEF"></a>
<div id="SPATL1231" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2664"></a><a id="sthref2665"></a>FROM_GML311GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2666"></a>Format</p>
<p class="synopsis">SDO_UTIL.FROM_GML311GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN CLOB,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srsNamespace IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
<p>or</p>
<p class="synopsis">SDO_UTIL.FROM_GML311GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srsNamespace IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2667"></a>Description</p>
<p>Converts a geography markup language (GML 3.1.1) fragment to a Spatial geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2668"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in GML version 3.1.1 format to be converted to SDO_GEOMETRY format.</p>
</dd>
<dt>srsNamespace</dt>
<dd>
<p>(Reserved for Oracle use.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2669"></a>Usage Notes</p>
<p>The input geometry must be a valid GML fragment describing a GML version 3.1.1 geometry type defined in the Open GIS Implementation Specification.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2670"></a>Examples</p>
<p>The following example shows conversion to and from GML version 3.1.1 format. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  gmlgeom CLOB;
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;  
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To GML 3.1.1 geometry
gmlgeom := SDO_UTIL.TO_GML311GEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To GML 3.1.1 geometry result = ' || TO_CHAR(gmlgeom));
 
-- From GML 3.1.3 geometry
geom_result := SDO_UTIL.FROM_GML311GEOMETRY(gmlgeom);
 
END;
/
To GML 3.1.1 geometry result = &lt;gml:Polygon srsName="SDO:"
xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:exterior&gt;&lt;gml:LinearRing&gt;&lt;gml:posLis
t srsDimension="2"&gt;5.0 1.0 8.0 1.0 8.0 6.0 5.0 7.0 5.0 1.0
&lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;/gml:Polygon&gt;
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2671"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEJBCCB">SDO_UTIL.FROM_GMLGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGEJGI">SDO_UTIL.TO_GML311GEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGEEFD">SDO_UTIL.TO_GMLGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEJBCCB"></a>
<div id="SPATL1232" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2672"></a><a id="sthref2673"></a>FROM_GMLGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2674"></a>Format</p>
<p class="synopsis">SDO_UTIL.FROM_GMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN CLOB,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srsNamespace IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
<p>or</p>
<p class="synopsis">SDO_UTIL.FROM_GMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srsNamespace IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2675"></a>Description</p>
<p>Converts a geography markup language (GML 2.0) fragment to a Spatial geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2676"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in GML version 2.0 format to be converted to SDO_GEOMETRY format.</p>
</dd>
<dt>srsNamespace</dt>
<dd>
<p>(Reserved for Oracle use.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2677"></a>Usage Notes</p>
<p>The input geometry must be a valid GML fragment describing a GML version 2.0 geometry type defined in the Open GIS Implementation Specification.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2678"></a>Examples</p>
<p>The following example shows conversion to and from GML version 2.0 format. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  gmlgeom CLOB;
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;  
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To GML geometry
gmlgeom := SDO_UTIL.TO_GMLGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To GML geometry result = ' || TO_CHAR(gmlgeom));
 
-- From GML geometry
geom_result := SDO_UTIL.FROM_GMLGEOMETRY(gmlgeom);
 
END;
/
To GML geometry result = &lt;gml:Polygon srsName="SDO:"
xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:outerBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml
:coordinates decimal="." cs="," ts=" "&gt;5.0,1.0 8.0,1.0 8.0,6.0 5.0,7.0 5.0,1.0
&lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Polygon&gt;
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2679"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJECFBEF">SDO_UTIL.FROM_GML311GEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGEJGI">SDO_UTIL.TO_GML311GEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGEEFD">SDO_UTIL.TO_GMLGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIEDAF"></a>
<div id="SPATL1422" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2680"></a><a id="sthref2681"></a><a id="sthref2682"></a><a id="sthref2683"></a>FROM_KMLGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2684"></a>Format</p>
<p class="synopsis">SDO_UTIL.FROM_KMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN CLOB</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
<p>or</p>
<p class="synopsis">SDO_UTIL.FROM_KMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2685"></a>Description</p>
<p>Converts a KML (Keyhole Markup Language) document to a Spatial geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2686"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in KML format of type CLOB or VARCHAR2 to be converted to SDO_GEOMETRY format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2687"></a>Usage Notes</p>
<p>The input geometry must be a valid document conforming to the KML 2.1 specification.</p>
<p>This function does not process the whole KML document; it only processes the KML geometry tags.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2688"></a>Examples</p>
<p>The following example shows conversion to and from KML format. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_c</code> geometry from the COLA_MARKETS table.)</p>
<pre>
-- Convert cola_c geometry to a KML document; convert that result to
-- a spatial geometry.
DECLARE
  kmlgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_c';
 
-- To KML geometry
kmlgeom := SDO_UTIL.TO_KMLGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To KML geometry result = ' || TO_CHAR(kmlgeom));
 
-- From KML geometry
geom_result := SDO_UTIL.FROM_KMLGEOMETRY(kmlgeom);
-- Validate the returned geometry
val_result := SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(geom_result, 0.005);
DBMS_OUTPUT.PUT_LINE('Validation result = ' || val_result);
 
END;
/
To KML geometry result =
&lt;Polygon&gt;&lt;extrude&gt;0&lt;/extrude&gt;&lt;tessellate&gt;0&lt;/tessellate&gt;&lt;altitudeMode&gt;relativeToG
round&lt;/altitudeMode&gt;&lt;outerBoundaryIs&gt;&lt;LinearRing&gt;&lt;coordinates&gt;3.0,3.0 6.0,3.0
6.0,5.0 4.0,5.0 3.0,3.0 &lt;/coordinates&gt;&lt;/LinearRing&gt;&lt;/outerBoundaryIs&gt;&lt;/Polygon&gt;
Validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2689"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEJIAGG">SDO_UTIL.TO_KMLGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGAIGB"></a>
<div id="SPATL1233" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2690"></a><a id="sthref2691"></a><a id="sthref2692"></a><a id="sthref2693"></a>FROM_WKBGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2694"></a>Format</p>
<p class="synopsis">SDO_UTIL.FROM_WKBGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN BLOB</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2695"></a>Description</p>
<p>Converts a geometry in the well-known binary (WKB) format to a Spatial geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2696"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in WKB format to be converted to SDO_GEOMETRY format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2697"></a>Usage Notes</p>
<p>The input geometry must be in the well-known binary (WKB) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To convert an SDO_GEOMETRY object to WKB format, use the <a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2698"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2699"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGGIAB"></a>
<div id="SPATL1234" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2700"></a><a id="sthref2701"></a><a id="sthref2702"></a><a id="sthref2703"></a>FROM_WKTGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2704"></a>Format</p>
<p class="synopsis">SDO_UTIL.FROM_WKTGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN CLOB</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
<p>or</p>
<p class="synopsis">SDO_UTIL.FROM_WKTGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2705"></a>Description</p>
<p>Converts a geometry in the well-known text (WKT) format to a Spatial geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2706"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in WKT format to be converted to SDO_GEOMETRY format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2707"></a>Usage Notes</p>
<p>The input geometry must be in the well-known text (WKT) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To convert an SDO_GEOMETRY object to a CLOB in WKT format, use the <a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a> function. (You can use the SQL function TO_CHAR to convert the resulting CLOB to VARCHAR2 type.)</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2708"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2709"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEEJGH"></a>
<div id="SPATL1235" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2710"></a><a id="sthref2711"></a><a id="sthref2712"></a>GETNUMELEM</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2713"></a>Format</p>
<p class="synopsis">SDO_UTIL.GETNUMELEM(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2714"></a>Description</p>
<p>Returns the number of elements in the input geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2715"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the number of elements.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2716"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2717"></a>Examples</p>
<p>The following example returns the number of elements for each geometry in the SHAPE column of the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT c.name, SDO_UTIL.GETNUMELEM(c.shape)
  FROM cola_markets c;
 
NAME                             SDO_UTIL.GETNUMELEM(C.SHAPE)                   
-------------------------------- ----------------------------                   
cola_a                                                      1                   
cola_b                                                      1                   
cola_c                                                      1                   
cola_d                                                      1 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2718"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGDGHI">SDO_UTIL.GETNUMVERTICES</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGDGHI"></a>
<div id="SPATL1236" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2719"></a><a id="sthref2720"></a><a id="sthref2721"></a>GETNUMVERTICES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2722"></a>Format</p>
<p class="synopsis">SDO_UTIL.GETNUMVERTICES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2723"></a>Description</p>
<p>Returns the number of vertices in the input geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2724"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the number of vertices.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2725"></a>Usage Notes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2726"></a>Examples</p>
<p>The following example returns the number of vertices for each geometry in the SHAPE column of the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT c.name, SDO_UTIL.GETNUMVERTICES(c.shape)
  FROM cola_markets c;
 
NAME                             SDO_UTIL.GETNUMVERTICES(C.SHAPE)               
-------------------------------- --------------------------------               
cola_a                                                          2               
cola_b                                                          5               
cola_c                                                          5               
cola_d                                                          3 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2727"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BABDEGIA">SDO_UTIL.GETVERTICES</a></p>
</li>
<li>
<p><a href="#BJEEEJGH">SDO_UTIL.GETNUMELEM</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BABDEGIA"></a>
<div id="SPATL1237" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2728"></a><a id="sthref2729"></a><a id="sthref2730"></a>GETVERTICES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2731"></a>Format</p>
<p class="synopsis">SDO_UTIL.GETVERTICES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VERTEX_SET_TYPE;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2732"></a>Description</p>
<p>Returns the coordinates of the vertices of the input geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2733"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the coordinates of the vertices.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2734"></a>Usage Notes</p>
<p><a id="sthref2735"></a><a id="sthref2736"></a>This function returns an object of MDSYS.VERTEX_SET_TYPE, which consists of a table of objects of MDSYS.VERTEX_TYPE. Oracle Spatial defines the type VERTEX_SET_TYPE as:</p>
<pre>
CREATE TYPE vertex_set_type as TABLE OF vertex_type;
</pre>
<p>Oracle Spatial defines the object type VERTEX_TYPE as:</p>
<pre>
CREATE TYPE vertex_type AS OBJECT
   (x   NUMBER,
    y   NUMBER,
    z   NUMBER,
    w   NUMBER,
    v5  NUMBER,
    v6  NUMBER,
    v7  NUMBER,
    v8  NUMBER,
    v9  NUMBER,
    v10 NUMBER,
    v11 NUMBER,
    id  NUMBER);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The VERTEX_SET_TYPE and VERTEX_TYPE types are intended for use by Oracle only. Do not use these types in column definitions or functions that you create.</div>
<p>This function can be useful in finding a vertex that is causing a geometry to be invalid. For example, if you have identified a geometry as invalid by using the <a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a> function or the <a href="sdo_objgeom.htm#BGHIAAIF">SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT</a> procedure (both of which are documented in <a href="sdo_objgeom.htm#BGHCIGBI">Chapter 24</a>), you can use the GETVERTICES function to view the vertices in tabular format.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2737"></a>Examples</p>
<p>The following example returns the X and Y coordinates and <code>ID</code> values of the vertices of the geometries in the SHAPE column of the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT c.mkt_id, c.name, t.X, t.Y, t.id
   FROM cola_markets c,
   TABLE(SDO_UTIL.GETVERTICES(c.shape)) t
   ORDER BY c.mkt_id, t.id;

    MKT_ID NAME                                      X          Y         ID    
---------- -------------------------------- ---------- ---------- ----------    
         1 cola_a                                    1          1          1    
         1 cola_a                                    5          7          2    
         2 cola_b                                    5          1          1    
         2 cola_b                                    8          1          2    
         2 cola_b                                    8          6          3    
         2 cola_b                                    5          7          4    
         2 cola_b                                    5          1          5    
         3 cola_c                                    3          3          1    
         3 cola_c                                    6          3          2    
         3 cola_c                                    6          5          3    
         3 cola_c                                    4          5          4    
         3 cola_c                                    3          3          5    
         4 cola_d                                    8          7          1    
         4 cola_d                                   10          9          2    
         4 cola_d                                    8         11          3    

15 rows selected.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2738"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BABBGFIB">SDO_UTIL.EXTRACT</a></p>
</li>
<li>
<p><a href="sdo_objgeom.htm#BGHFDDBF">SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT</a></p>
</li>
<li>
<p><a href="sdo_objgeom.htm#BGHIAAIF">SDO_GEOM.VALIDATE_LAYER_WITH_CONTEXT</a></p>
</li>
<li>
<p><a href="#BJEGDGHI">SDO_UTIL.GETNUMVERTICES</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIFEEH"></a>
<div id="SPATL1238" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2739"></a><a id="sthref2740"></a><a id="sthref2741"></a>INITIALIZE_INDEXES_FOR_TTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2742"></a>Format</p>
<p class="synopsis">SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2743"></a>Description</p>
<p>Initializes all spatial indexes in a tablespace that was transported to another database.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2744"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2745"></a>Usage Notes</p>
<p>This procedure is part of the support for using the Oracle transportable tablespace feature with tablespaces that contain any spatial indexes. Use this procedure only either (A) the import operation of pre-Release 11.2 dump files is completed, or (B) after the import operation from different endian platform in Release 11.2 or later is completed. Each user that has a spatial index in the tablespace must call the procedure.</p>
<p>For pre-Release 11.2 dump files, after calling the SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS procedure, you must execute a statement in the following format for each index that is in the imported transportable tablespace:</p>
<pre>
ALTER INDEX <span class="italic">spatial-index-from-imported-tts</span> PARAMETERS ('CLEAR_TTS=TRUE');
</pre>
<p>For detailed information about transportable tablespaces and transporting tablespaces to other databases, see <a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2746"></a>Examples</p>
<p>The following example for an import of pre-Release 11.2 dump files initializes all spatial indexes in a tablespace that was transported to another database. It also includes the required ALTER INDEX statement for two hypothetical spatial indexes.</p>
<pre>
CALL SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS;
ALTER INDEX xyz1_spatial_idx PARAMETERS ('CLEAR_TTS=TRUE');
ALTER INDEX xyz2_spatial_idx PARAMETERS ('CLEAR_TTS=TRUE');
</pre>
<p>In the following example, the owner of the spatial index must call the SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS procedure only if the SELECT statement returns the string <code>Y</code>, to reflect the fact that the spatial indexes are imported from different endian platforms in Release 11.2.</p>
<pre>
SELECT DECODE(BITAND(sdo_index_version, 1024), 1024, 'Y', 'N') ENDIAN_FLAG
  FROM user_sdo_index_metadata
  WHERE sdo_index_name = :index_name;
-- If the result is 'Y', perform the next statement.
CALL SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS;
-- No ALTER INDEX statements are needed.
</pre>
<p>In this example, if you call the SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS procedure when the SELECT statement returns the string <code>N</code>, the procedure does nothing because there is no need to perform endian conversion.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2747"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEHCBAG"></a>
<div id="SPATL1239" class="refsect1">
<h2 class="refsect1">SDO_UTIL.<a id="sthref2748"></a><a id="sthref2749"></a><a id="sthref2750"></a><a id="sthref2751"></a>INTERIOR_POINT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2752"></a>Format</p>
<p class="synopsis">SDO_UTIL.INTERIOR_POINT(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tol IN NUMBER DEFAULT 0.00000000005</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2753"></a>Description</p>
<p>Returns a point that is guaranteed to be an interior point (not on the boundary or edge) on the surface of a polygon geometry object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2754"></a>Parameters</p>
<dl>
<dt>geom</dt>
<dd>
<p>Polygon geometry object. The SDO_GTYPE value of the geometry must be 2003 or 2007. (SDO_GTYPE values are explained in <a href="sdo_objrelschema.htm#i1005614">Section 2.2.1</a>.)</p>
</dd>
<dt>tol</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2755"></a>Usage Notes</p>
<p>This function returns a point geometry object representing a point that is guaranteed to be an interior point on the surface, but not on the boundary or edge, of <code>geom</code>. The returned point can be any interior point on the surface; however, if you call the function multiple times with the same <code>geom</code> and <code>tol</code> parameter values, the returned point will be the same.</p>
<p>The relationship between the returned point and the original geometry is INSIDE, which you can check using the <a href="sdo_operat.htm#i78531">SDO_RELATE</a> operator with<code>'mask=inside'</code>.</p>
<p>In most cases this function is more useful than the <a href="sdo_objgeom.htm#i860858">SDO_GEOM.SDO_POINTONSURFACE</a> function, which returns a point that is not guaranteed to be an interior point.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2756"></a>Examples</p>
<p>The following example returns a geometry object that is an interior point on the surface of <code>cola_a</code>. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
-- Return an interior point on the surface of a geometry.
SELECT SDO_UTIL.INTERIOR_POINT(c.shape, 0.005)
  FROM cola_markets c
  WHERE c.name = 'cola_a';
 
SDO_UTIL.INTERIOR_POINT(C.SHAPE,0.005)(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), 
--------------------------------------------------------------------------------
SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(2.75, 2.875, NULL), NULL, NULL)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2757"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEDDBEI"></a>
<div id="SPATL1240" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2758"></a><a id="sthref2759"></a><a id="sthref2760"></a>POINT_AT_BEARING</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2761"></a>Format</p>
<p class="synopsis">SDO_UTIL.POINT_AT_BEARING(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_point IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bearing IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;distance IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2762"></a>Description</p>
<p>Returns a point geometry that is at the specified distance and bearing from the start point.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2763"></a>Parameters</p>
<dl>
<dt>start_point</dt>
<dd>
<p>Point geometry object from which to compute the distance at the specified bearing, to locate the desired point. The point geometry must be based on a geodetic coordinate system.</p>
</dd>
<dt>bearing</dt>
<dd>
<p>Number of radians, measured clockwise from North. Must be in the range of either -<span class="italic">pi</span> to <span class="italic">pi</span> or 0 to 2*<span class="italic">pi</span>. (Either convention on ranges will work).</p>
</dd>
<dt>distance</dt>
<dd>
<p>Number of meters from <code>start_point</code> and along the initial bearing direction to the computed destination point. Must be less than one-half the circumference of the Earth.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2764"></a>Usage Notes</p>
<p>The input point geometry must be based on a geodetic coordinate system. If it is based on a non-geodetic coordinate system, this function returns a null value.</p>
<p>To convert decimal degrees to radians or nonmetric distances to meters, you can use the <a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a> function. To compute the bearing and tilt from a start point to an end point, you can use the <a href="#BJEBGAFA">SDO_UTIL.BEARING_TILT_FOR_POINTS</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2765"></a>Examples</p>
<p>The following example returns the point 100 kilometers at a bearing of 1 radian from the point with the longitude and latitude coordinates (-72, 43).</p>
<pre>
SELECT SDO_UTIL.POINT_AT_BEARING(
  SDO_GEOMETRY(2001, 8307,
    SDO_POINT_TYPE(-72, 43, NULL), NULL, NULL),
  1,  -- 1 radian (57.296 degrees clockwise from North)
  100000 -- 100 kilometers
) FROM DUAL;
 
SDO_UTIL.POINT_AT_BEARING(SDO_GEOMETRY(2001,8307,SDO_POINT_TYPE(-72,43,NULL),NUL
--------------------------------------------------------------------------------
SDO_GEOMETRY(2001, 8307, NULL, SDO_ELEM_INFO_ARRAY(1, 1, 1), SDO_ORDINATE_ARRAY(
-70.957053, 43.4811935)) 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2766"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEBGAFA">SDO_UTIL.BEARING_TILT_FOR_POINTS</a></p>
</li>
<li>
<p><a href="#BJEEBAIH">SDO_UTIL.CONVERT_UNIT</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIGJIE"></a>
<div id="SPATL1241" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2767"></a><a id="sthref2768"></a><a id="sthref2769"></a>POLYGONTOLINE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2770"></a>Format</p>
<p class="synopsis">SDO_UTIL.POLYGONTOLINE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2771"></a>Description</p>
<p>Converts all polygon-type elements in a geometry to line-type elements, and sets the SDO_GTYPE value accordingly.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2772"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry to convert.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2773"></a>Usage Notes</p>
<p>The order of the vertices of each resulting line-type element is the same as in the associated polygon-type element, and the start and end points of each line-type segment are the same point.</p>
<p>If the input geometry is a line, it is returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2774"></a>Examples</p>
<p>The following example converts the input polygon geometry, which is the same geometry as cola_b (see <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a> and <a href="sdo_objrelschema.htm#i1004730">Example 2-1</a> in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>), to a line string geometry. In the returned geometry, the SDO_GTYPE value (2002) indicates a two-dimensional LINE geometry, and the SDO_ETYPE value (2) and SDO_INTERPRETATION value (1) in the SDO_ELEM_INFO array indicate a line string whose vertices are connected by straight line segments.</p>
<pre>
SELECT SDO_UTIL.POLYGONTOLINE(
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
    SDO_ORDINATE_ARRAY(5,1, 8,1, 8,6, 5,7, 5,1)
  )
) FROM DUAL;

SDO_UTIL.POLYGONTOLINE(SDO_GEOMETRY(2003,--TWO-DIMENSIONALPOLYGONNULL,NULL,SDO_E
--------------------------------------------------------------------------------
SDO_GEOMETRY(2002, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 2, 1), SDO_ORDINATE_ARRAY(
5, 1, 8, 1, 8, 6, 5, 7, 5, 1))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2775"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIJDBG"></a>
<div id="SPATL1242" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2776"></a><a id="sthref2777"></a><a id="sthref2778"></a>PREPARE_FOR_TTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2779"></a>Format</p>
<p class="synopsis">SDO_UTIL.PREPARE_FOR_TTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table_space IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2780"></a>Description</p>
<p>(Deprecated feature. Previous usage was: "Prepares a tablespace to be transported to another database, so that spatial indexes will be preserved during the transport operation.")</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2781"></a>Parameters</p>
<dl>
<dt>table_space</dt>
<dd>
<p>Tablespace to be transported. Must be the tablespace containing the spatial table or tables. For a partitioned table, must be the tablespace of one of the partitions.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2782"></a>Usage Notes</p>
<p>Effective with Oracle Database Release 11.2, this procedure is deprecated. You do not need to call the PREPARE_FOR_TTS procedure before performing a transportable tablespace export operation.</p>
<p>For detailed information about transportable tablespaces and transporting tablespaces to other databases, see <a class="olink ADMIN" href="../../server.112/e25494/toc.htm"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2783"></a>Examples</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2784"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEIFEEH">SDO_UTIL.INITIALIZE_INDEXES_FOR_TTS</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEICGGA"></a>
<div id="SPATL1243" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2785"></a><a id="sthref2786"></a><a id="sthref2787"></a>RECTIFY_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2788"></a>Format</p>
<p class="synopsis">SDO_UTIL.RECTIFY_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2789"></a>Description</p>
<p>Fixes certain problems with the input geometry, and returns a valid geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2790"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry to be checked for problems that can be fixed.</p>
</dd>
<dt>tolerance</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2791"></a>Usage Notes</p>
<p>This function checks for the following problems that can make a geometry invalid, and fixes the problems in the returned geometry:</p>
<ul>
<li>
<p>Duplicate vertices</p>
</li>
<li>
<p>Polygon boundary intersecting itself</p>
</li>
<li>
<p>Incorrect orientation of exterior or interior rings (or both) of a polygon</p>
</li>
</ul>
<p>If the input geometry has any other problem that makes it invalid, the function raises an exception.</p>
<p>If the input geometry is valid, the function returns a geometry that is identical to the input geometry.</p>
<p>For information about using this function as part of the recommended procedure for loading and validating spatial data, see <a href="sdo_objload.htm#CIHGCAJG">Section 4.3</a>.</p>
<p>This function is used internally by the <a href="#BJEHCIBF">SDO_UTIL.SIMPLIFY</a> function as part of the geometry simplification process.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2792"></a>Examples</p>
<p>The following example checks the <code>cola_b</code> geometry to see if it has problems that can be fixed. (In this case, the geometry is valid, so the input geometry is returned. The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SELECT SDO_UTIL.RECTIFY_GEOMETRY(shape, 0.005)
  FROM COLA_MARKETS c WHERE c.name = 'cola_b';
 
SDO_UTIL.RECTIFY_GEOMETRY(SHAPE,0.005)(SDO_GTYPE, SDO_SRID, SDO_POINT(X, Y, Z), 
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2793"></a>Related Topics</p>
<p><a href="#BJEICGGA">SDO_UTIL.RECTIFY_GEOMETRY</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEBHAJB"></a>
<div id="SPATL1244" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2794"></a><a id="sthref2795"></a><a id="sthref2796"></a><a id="sthref2797"></a>REMOVE_DUPLICATE_VERTICES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2798"></a>Format</p>
<p class="synopsis">SDO_UTIL.REMOVE_DUPLICATE_VERTICES</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2799"></a>Description</p>
<p>Removes duplicate (redundant) vertices from a geometry.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2800"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry from which to remove duplicate vertices.</p>
</dd>
<dt>tolerance</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>).</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2801"></a>Usage Notes</p>
<p>When two consecutive vertices in a geometry are the same or within the tolerance value associated with the geometry, Spatial considers the geometry to be invalid. The Spatial geometry validation functions return the error ORA-13356 in these cases. You can use the REMOVE_DUPLICATE_VERTICES function to change such invalid geometries into valid geometries.</p>
<p>This function also closes polygons so that the first vertex of the ring is the same as the last vertex of the ring.</p>
<p>This function is not supported for any point geometries (including oriented points).</p>
<p>If the input geometry does not contain any duplicate vertices, it is returned.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2802"></a>Examples</p>
<p>The following example removes a duplicate vertex from the input geometry, which is the same geometry as cola_b (see <a href="sdo_objrelschema.htm#i1004467">Figure 2-1</a> and <a href="sdo_objrelschema.htm#i1004730">Example 2-1</a> in <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>) except that it has been deliberately made invalid by adding a third vertex that is the same point as the second vertex (8,1).</p>
<pre>
SELECT SDO_UTIL.REMOVE_DUPLICATE_VERTICES(
  SDO_GEOMETRY(
    2003,  -- two-dimensional polygon
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,1003,1), -- one polygon (exterior polygon ring)
    SDO_ORDINATE_ARRAY(5,1, 8,1, 8,1, 8,6, 5,7, 5,1) -- 2nd and 3rd points
                                                -- are duplicates.
  ),
  0.005 -- tolerance value
) FROM DUAL;

SDO_UTIL.REMOVE_DUPLICATE_VERTICES(SDO_GEOMETRY(2003,--TWO-DIMENSIONALPOLYGONNUL
--------------------------------------------------------------------------------
SDO_GEOMETRY(2003, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1003, 1), SDO_ORDINATE_ARR
AY(5, 1, 8, 1, 8, 6, 5, 7, 5, 1))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2803"></a>Related Topics</p>
<p>None.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEBBAG"></a>
<div id="SPATL1245" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2804"></a><a id="sthref2805"></a><a id="sthref2806"></a>REVERSE_LINESTRING</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2807"></a>Format</p>
<p class="synopsis">SDO_UTIL.REVERSE_LINESTRING(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2808"></a>Description</p>
<p>Returns a line string geometry with the vertices of the input geometry in reverse order.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2809"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Line string geometry whose vertices are to be reversed in the output geometry. The SDO_GTYPE value of the input geometry must be 2002. (<a href="sdo_objrelschema.htm#i1005614">Section 2.2.1</a> explains SDO_GTYPE values.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2810"></a>Usage Notes</p>
<p>Because the SDO_GTYPE value of the input geometry must be 2002, this function cannot be used to reverse LRS geometries. To reverse an LRS geometry, use the <a href="sdo_lrs_ref.htm#i89756">SDO_LRS.REVERSE_GEOMETRY</a> function, which is described in <a href="sdo_lrs_ref.htm#g1013943">Chapter 25</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2811"></a>Examples</p>
<p>The following example returns a line string geometry that reverses the vertices of the input geometry.</p>
<pre>
SELECT SDO_UTIL.REVERSE_LINESTRING(
  SDO_GEOMETRY(2002, 8307, NULL, SDO_ELEM_INFO_ARRAY(1,2,1),
    SDO_ORDINATE_ARRAY(-72,43, -71.5,43.5, -71,42, -70,40))
) FROM DUAL;
 
SDO_UTIL.REVERSE_LINESTRING(SDO_GEOMETRY(2002,8307,NULL,SDO_ELEM_INFO_ARRAY(1,2,
--------------------------------------------------------------------------------
SDO_GEOMETRY(2002, 8307, NULL, SDO_ELEM_INFO_ARRAY(1, 2, 1), SDO_ORDINATE_ARRAY(
-70, 40, -71, 42, -71.5, 43.5, -72, 43))
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2812"></a>Related Topics</p>
<ul>
<li>
<p><a href="sdo_lrs_ref.htm#i89756">SDO_LRS.REVERSE_GEOMETRY</a> (in <a href="sdo_lrs_ref.htm#g1013943">Chapter 25</a>)</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEHCIBF"></a>
<div id="SPATL1246" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2813"></a><a id="sthref2814"></a><a id="sthref2815"></a><a id="sthref2816"></a>SIMPLIFY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2817"></a>Format</p>
<p class="synopsis">SDO_UTIL.SIMPLIFY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;threshold IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance IN NUMBER DEFAULT 0.0000005</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2818"></a>Description</p>
<p>Simplifies the input geometry, based on a threshold value, using the Douglas-Peucker algorithm.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2819"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry to be simplified.</p>
</dd>
<dt>threshold</dt>
<dd>
<p>Threshold value to be used for the geometry simplification. Should be a positive number. (Zero causes the input geometry to be returned.) If the input geometry is geodetic, the value is the number of meters; if the input geometry is non-geodetic, the value is the number of units associated with the data.</p>
<p>As the threshold value is decreased, the returned geometry is likely to be closer to the input geometry; as the threshold value is increased, fewer points are likely to be in the returned geometry. See the Usage Notes for more information.</p>
</dd>
<dt>tolerance</dt>
<dd>
<p>Tolerance value (see <a href="sdo_intro.htm#i884589">Section 1.5.5</a>). Must not be greater than <code>threshold</code>; and for better performance, should not be the same as <code>threshold</code>. If you do not specify a value, the default value is 0.0000005.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2820"></a>Usage Notes</p>
<p>This function also converts arcs to line stings, eliminates duplicate vertices, and corrects many overlapping edge polygon problems. The reason this function sometimes fixes problems is that it internally calls the <a href="#BJEICGGA">SDO_UTIL.RECTIFY_GEOMETRY</a> function at the end of the simplification process to ensure that a valid geometry is returned.</p>
<p>This function is useful when you want a geometry with less fine resolution than the original geometry. For example, if the display resolution cannot show the hundreds or thousands of turns in the course of a river or in a political boundary, better performance might result if the geometry were simplified to show only the major turns.</p>
<p>If you use this function with geometries that have more than two dimensions, only the first two dimensions are used in processing the query, and only the first two dimensions in the returned geometry are to be considered valid and meaningful. For example, the measure values in a returned LRS geometry will probably not reflect actual measures in that geometry. In this case, depending on your application needs, you might have several options after the simplification operation, such as ignoring the new measure values or redefining the new LRS geometry to reset the measure values.</p>
<p>This function uses the Douglas-Peucker algorithm, which is explained in several cartography textbooks and reference documents. (In some explanations, the term <span class="italic">tolerance</span> is used instead of <span class="italic">threshold</span>; however, this is different from the Oracle Spatial meaning of tolerance.)</p>
<p>The returned geometry can be a polygon, line, or point, depending on the geometry definition and the threshold value. The following considerations apply:</p>
<ul>
<li>
<p>A polygon can simplify to a line or a point and a line can simplify to a point, if the threshold value associated with the geometry is sufficiently large. For example, a thin rectangle will simplify to a line if the distance between the two parallel long sides is less than the threshold value, and a line will simplify to a point if the distance between the start and end points is less than the threshold value.</p>
</li>
<li>
<p>In a polygon with a hole, if the exterior ring or the interior ring (the hole) simplifies to a line or a point, the interior ring disappears from (is not included in) the resulting geometry.</p>
</li>
<li>
<p>Topological characteristics of the input geometry might not be maintained after simplification. For a collection geometry, the number of elements might increase, to prevent overlapping of individual elements. In all cases, this function will not return an invalid geometry.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2821"></a>Examples</p>
<p>The following example simplifies the road shown in <a href="sdo_lrs_concepts.htm#i888413">Figure 7-20</a> in <a href="sdo_lrs_concepts.htm#i885918">Section 7.7</a>. Because the threshold value (6) is fairly large given the input geometry, the resulting LRS line string has only three points: the start and end points, and (12, 4,12). The measure values in the returned geometry are not meaningful, because this function considers only two dimensions.</p>
<pre>
SELECT SDO_UTIL.SIMPLIFY(
  SDO_GEOMETRY(
    3302,  -- line string, 3 dimensions (X,Y,M), 3rd is linear ref. dimension
    NULL,
    NULL,
    SDO_ELEM_INFO_ARRAY(1,2,1), -- one line string, straight segments
    SDO_ORDINATE_ARRAY(
      2,2,0,   -- Starting point - Exit1; 0 is measure from start.
      2,4,2,   -- Exit2; 2 is measure from start. 
      8,4,8,   -- Exit3; 8 is measure from start. 
      12,4,12,  -- Exit4; 12 is measure from start. 
      12,10,NULL,  -- Not an exit; measure automatically calculated and filled.
      8,10,22,  -- Exit5; 22 is measure from start.  
      5,14,27)  -- Ending point (Exit6); 27 is measure from start.
  ),
  6, -- threshold value for geometry simplification
  0.5  -- tolerance
) FROM DUAL;

SDO_UTIL.SIMPLIFY(SDO_GEOMETRY(3302,--LINESTRING,3DIMENSIONS(X,Y,M),3RDISLINEARR
--------------------------------------------------------------------------------
SDO_GEOMETRY(3302, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 2, 1), SDO_ORDINATE_ARRAY(
2, 2, 0, 12, 4, 12, 5, 14, 27)) 
</pre>
<p><a href="#BJEIGAFI">Figure 32-1</a> shows the result of this example. In <a href="#BJEIGAFI">Figure 32-1</a>, the thick solid black line is the resulting geometry, the thin solid light line between the start and end points is the input geometry, and the thin dashed line with the arrowhead at the end shows the direction of the segment.</p>
<div id="SPATL1247" class="figure">
<p class="titleinfigure"><a id="BJEIGAFI"></a>Figure 32-1 Simplification of a Geometry</p>
<img width="304" height="303" src="img/highway_simplified.gif" alt="Description of Figure 32-1 follows" /><br />
<a id="sthref2822" href="img_text/highway_simplified.htm">Description of "Figure 32-1 Simplification of a Geometry"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2823"></a>Related Topics</p>
<p><a href="#BJEICGGA">SDO_UTIL.RECTIFY_GEOMETRY</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGEJGI"></a>
<div id="SPATL1248" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2824"></a><a id="sthref2825"></a><a id="sthref2826"></a><a id="sthref2827"></a>TO_GML311GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2828"></a>Format</p>
<p class="synopsis">SDO_UTIL.TO_GML311GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN CLOB;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2829"></a>Description</p>
<p>Converts a Spatial geometry object to a geography markup language (GML version 3.1.1) fragment based on the geometry types defined in the Open GIS <code>geometry.xsd</code> schema document.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2830"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the GML version 3.1.1 fragment.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2831"></a>Usage Notes</p>
<p>This function does not convert circles, geometries containing any circular arcs, LRS geometries, or geometries with an SDO_ETYPE value of 0 (type 0 elements); it returns an empty CLOB in these cases.</p>
<p>This function converts the input geometry to a GML version 3.1.1 fragment based on some GML geometry types defined in the Open GIS Implementation Specification.</p>
<p>Polygons must be defined using the conventions for Oracle9<span class="italic">i</span> and later releases of Spatial. That is, the outer boundary is stored first (with ETYPE=1003) followed by zero or more inner boundary elements (ETYPE=2003). For a polygon with holes, the outer boundary must be stored first in the SDO_ORDINATES definition, followed by coordinates of the inner boundaries.</p>
<p>LRS geometries must be converted to standard geometries (using the <a href="sdo_lrs_ref.htm#i85411">SDO_LRS.CONVERT_TO_STD_GEOM</a> or <a href="sdo_lrs_ref.htm#i85412">SDO_LRS.CONVERT_TO_STD_LAYER</a> function) before being passed to the TO_GMLGEOMETRY function. (See the Examples section for an example that uses CONVERT_TO_STD_GEOM with the TO_GMLGEOMETRY function.)</p>
<p>Any circular arcs or circles must be densified (using the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function) or represented as polygons (using the <a href="sdo_objgeom.htm#i856140">SDO_GEOM.SDO_BUFFER</a> function) before being passed to the TO_GMLGEOMETRY function. (See the Examples section for an example that uses SDO_ARC_DENSIFY with the TO_GMLGEOMETRY function.)</p>
<p>Label points are discarded. That is, if a geometry has a value for the SDO_POINT field and values in SDO_ELEM_INFO and SDO_ORDINATES, the SDO_POINT is not output in the GML fragment.</p>
<p>The SDO_SRID value is output in the form <code>srsName="SDO:&lt;srid&gt;"</code>. For example, <code>"SDO:8307"</code> indicates SDO_SRID 8307, and <code>"SDO:"</code> indicates a null SDO_SRID value. No checks are made for the validity or consistency of the SDO_SRID value. For example, the value is not checked to see if it exists in the MDSYS.CS_SRS table or if it conflicts with the SRID value for the layer in the USER_SDO_GEOM_METADATA view.</p>
<p>Coordinates are always output using the <code>&lt;coordinates&gt;</code> tag and <code>decimal='.'</code>, <code>cs=','</code> (that is, with the comma as the coordinate separator), and <code>ts=' '</code> (that is, with a space as the tuple separator), even if the NLS_NUMERIC_CHARACTERS setting has <code>','</code> (comma) as the decimal character.</p>
<p>The GML output is not formatted; there are no line breaks or indentation of tags. To see the contents of the returned CLOB in SQL*Plus, use the TO_CHAR() function or set the SQL*Plus parameter LONG to a suitable value (for example, <code>SET LONG 40000</code>). To get formatted GML output or to use the return value of TO_GMLGEOMETRY in SQLX or Oracle XML DB functions such as XMLELEMENT, use the XMLTYPE(clobval CLOB) constructor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2832"></a>Examples</p>
<p>The following example returns the GML version 3.1.1 fragment for the <code>cola_b</code> geometry in the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
-- Convert cola_b geometry to GML 3.1.1 fragment.
SELECT TO_CHAR(SDO_UTIL.TO_GML311GEOMETRY(shape)) AS Gml311Geometry 
  FROM COLA_MARKETS c WHERE c.name = 'cola_b';

GML311GEOMETRY
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:exterior
&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;5.0 1.0 8.0 1.0 8.0 6.0 5.0 7.0 5
.0 1.0 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;/gml:Polygon&gt;
</pre>
<p>The following example returns the GML version 3.1.1 fragment for the arc densification of the <code>cola_d</code> geometry in the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SET LONG 40000
SELECT XMLTYPE(SDO_UTIL.TO_GML311GEOMETRY(
  SDO_GEOM.SDO_ARC_DENSIFY(c.shape, m.diminfo, 'arc_tolerance=0.05')))
    AS Gml311Geometry FROM cola_markets c, user_sdo_geom_metadata m 
    WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
    AND c.name = 'cola_d';

GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;             
  &lt;gml:exterior&gt;                                                                
    &lt;gml:LinearRing&gt;                                                            
      &lt;gml:posList srsDimension="2"&gt;8.0 7.0 8.76536686473018 7.15224093497743 9.
4142135623731 7.58578643762691 9.84775906502257 8.23463313526982 10.0 9.0 9.8477
5906502257 9.76536686473018 9.4142135623731 10.4142135623731 8.76536686473018 10
.8477590650226 8.0 11.0 7.23463313526982 10.8477590650226 6.58578643762691 10.41
42135623731 6.15224093497743 9.76536686473018 6.0 9.0 6.15224093497743 8.2346331
3526982 6.58578643762691 7.5857864376269 7.23463313526982 7.15224093497743 8.0 7
.0 &lt;/gml:posList&gt;                                                               
    &lt;/gml:LinearRing&gt;                                                           
  &lt;/gml:exterior&gt;                                                               
&lt;/gml:Polygon&gt;
</pre>
<p>The following example converts an LRS geometry to a standard geometry and returns the GML version 3.1.1 fragment for the geometry. (The example uses the definitions and data from <a href="sdo_lrs_concepts.htm#i885918">Section 7.7</a>.)</p>
<pre>
SET LONG 40000
-- Convert LRS grometry to standard geometry before using TO_GML311GEOMETRY.
SELECT XMLTYPE(SDO_UTIL.TO_GML311GEOMETRY(
  SDO_LRS.CONVERT_TO_STD_GEOM(route_geometry)))
  AS Gml311Geometry FROM lrs_routes a WHERE a.route_id = 1;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Curve srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;               
  &lt;gml:segments&gt;                                                                
    &lt;gml:LineStringSegment&gt;                                                     
      &lt;gml:posList srsDimension="2"&gt;2.0 2.0 2.0 4.0 8.0 4.0 12.0 4.0 12.0 10.0 8
.0 10.0 5.0 14.0 &lt;/gml:posList&gt;                                                 
    &lt;/gml:LineStringSegment&gt;                                                    
  &lt;/gml:segments&gt;                                                               
&lt;/gml:Curve&gt;
</pre>
<p>The following examples return GML version 3.1.1 fragments for a variety of geometry types.</p>
<pre>
-- Point geometry with coordinates in SDO_ORDINATES. Note the
--    coordinates in the GML are (10.0 10.0) and the values in the
--    SDO_POINT field are discarded.
SELECT TO_CHAR(
  SDO_UTIL.TO_GML311GEOMETRY(sdo_geometry(2001, 8307,
    sdo_point_type(-80, 70, null),
    sdo_elem_info_array(1,1,1), sdo_ordinate_array(10, 10)))
)
AS Gml311Geometry FROM DUAL;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Point srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:posLis
t srsDimension="2"&gt;10.0 10.0 &lt;/gml:posList&gt;&lt;/gml:Point&gt;                         
                                                                                
 
-- Multipolygon
SET LONG 40000
SELECT SDO_UTIL.TO_GML311GEOMETRY(
  sdo_geometry(2007, 8307, null,
   sdo_elem_info_array(1,1003,1, 13,1003,1, 23,1003,3),
   sdo_ordinate_array(10.10,10.20, 20.50,20.10, 30.30,30.30, 40.10,40.10,
     30.50, 30.20, 10.10, 10.20,
     5,5, 5,6, 6,6, 6,5, 5,5, 7,7, 8,8 ))
)
AS Gml311Geometry FROM DUAL;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:MultiSurface srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml
:surfaceMember&gt;&lt;gml:Polygon&gt;&lt;gml:exterior&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimens
ion="2"&gt;10.1 10.2 20.5 20.1 30.3 30.3 40.1 40.1 30.5 30.2 10.1 10.2 &lt;/gml:posLis
t&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;/gml:Polygon&gt;&lt;/gml:surfaceMember&gt;&lt;gml:surface
Member&gt;&lt;gml:Polygon&gt;&lt;gml:exterior&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;
5.0 5.0 5.0 6.0 6.0 6.0 6.0 5.0 5.0 5.0 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:ext
erior&gt;&lt;/gml:Polygon&gt;&lt;/gml:surfaceMember&gt;&lt;gml:surfaceMember&gt;&lt;gml:Polygon&gt;&lt;gml:ext
erior&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;7.0 7.0 8.0 7.0 8.0 8.0 7.0 
8.0 7.0 7.0 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;/gml:Polygon&gt;&lt;/gml:su
rfaceMember&gt;&lt;/gml:MultiSurface&gt;                                                 
                                                                                
SET LONG 80
-- Rectangle (geodetic)
SELECT TO_CHAR(
  SDO_UTIL.TO_GML311GEOMETRY(sdo_geometry(2003, 8307, null,
   sdo_elem_info_array(1,1003,3),
    sdo_ordinate_array(10.10,10.10, 20.10,20.10 )))
)
AS Gml311Geometry FROM DUAL;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:exte
rior&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;10.1 10.1 20.1 10.1 20.1 20.1
 10.1 20.1 10.1 10.1 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;/gml:Polygon
&gt;

-- Polygon with holes
SELECT TO_CHAR(
  SDO_UTIL.TO_GML311GEOMETRY(sdo_geometry(2003, 262152, null,
   sdo_elem_info_array(1,1003,3, 5, 2003, 1, 13, 2003, 1),
   sdo_ordinate_array(10.10,10.20, 40.50, 41.10, 30.30, 30.30, 30.30,
     40.10, 40.10, 40.10, 30.30, 30.30, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5 )))
)
AS Gml311Geometry FROM DUAL;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:262152" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:ex
terior&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;10.1 10.2 40.5 10.2 40.5 41
.1 10.1 41.1 10.1 10.2 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:exterior&gt;&lt;gml:interi
or&gt;&lt;gml:LinearRing&gt;&lt;gml:posList srsDimension="2"&gt;30.3 30.3 30.3 40.1 40.1 40.1 3
0.3 30.3 &lt;/gml:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:interior&gt;&lt;gml:interior&gt;&lt;gml:Linear
Ring&gt;&lt;gml:posList srsDimension="2"&gt;5.0 5.0 5.0 6.0 6.0 6.0 6.0 5.0 5.0 5.0 &lt;/gml
:posList&gt;&lt;/gml:LinearRing&gt;&lt;/gml:interior&gt;&lt;/gml:Polygon&gt;                         
                                                                                
 
-- Creating an XMLTYPE from the GML fragment. Also useful for "pretty
--  printing" the GML output.
SET LONG 40000
SELECT XMLTYPE(
  SDO_UTIL.TO_GML311GEOMETRY(sdo_geometry(2003, 262152, null,
   sdo_elem_info_array(1,1003,1, 11, 2003, 1, 21, 2003, 1),
   sdo_ordinate_array(10.10,10.20, 40.50,10.2, 40.5,41.10, 10.1,41.1,
     10.10, 10.20, 30.30,30.30, 30.30, 40.10, 40.10, 40.10, 40.10, 30.30,
     30.30, 30.30, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5 )))
)
AS Gml311Geometry FROM DUAL;
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:262152" xmlns:gml="http://www.opengis.net/gml"&gt;       
  &lt;gml:exterior&gt;                                                                
    &lt;gml:LinearRing&gt;                                                            
      &lt;gml:posList srsDimension="2"&gt;10.1 10.2 40.5 10.2 40.5 41.1 10.1 41.1 10.1
 10.2 &lt;/gml:posList&gt;                                                            
    &lt;/gml:LinearRing&gt;                                                           
  &lt;/gml:exterior&gt;                                                               
  &lt;gml:interior&gt;                                                                
    &lt;gml:LinearRing&gt;                                                            
      &lt;gml:posList srsDimension="2"&gt;30.3 30.3 30.3 40.1 40.1 40.1 40.1 30.3 30.3
 30.3 &lt;/gml:posList&gt;                                                            
 
GML311GEOMETRY                                                                  
--------------------------------------------------------------------------------
    &lt;/gml:LinearRing&gt;                                                           
  &lt;/gml:interior&gt;                                                               
  &lt;gml:interior&gt;                                                                
    &lt;gml:LinearRing&gt;                                                            
      &lt;gml:posList srsDimension="2"&gt;5.0 5.0 5.0 6.0 6.0 6.0 6.0 5.0 5.0 5.0 &lt;/gm
l:posList&gt;                                                                      
    &lt;/gml:LinearRing&gt;                                                           
  &lt;/gml:interior&gt;                                                               
&lt;/gml:Polygon&gt;                                                                  
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2833"></a>Related Topics</p>
<p><a href="#BJEGEEFD">SDO_UTIL.TO_GMLGEOMETRY</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGEEFD"></a>
<div id="SPATL1249" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2834"></a><a id="sthref2835"></a><a id="sthref2836"></a><a id="sthref2837"></a>TO_GMLGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2838"></a>Format</p>
<p class="synopsis">SDO_UTIL.TO_GMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN CLOB;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2839"></a>Description</p>
<p>Converts a Spatial geometry object to a geography markup language (GML 2.0) fragment based on the geometry types defined in the Open GIS <code>geometry.xsd</code> schema document.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2840"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the GML fragment.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2841"></a>Usage Notes</p>
<p>This function does not convert circles, geometries containing any circular arcs, LRS geometries, or geometries with an SDO_ETYPE value of 0 (type 0 elements); it returns an empty CLOB in these cases.</p>
<p>This function converts the input geometry to a GML fragment based on some GML geometry types defined in the Open GIS Implementation Specification.</p>
<p>Polygons must be defined using the conventions for Oracle9<span class="italic">i</span> and later releases of Spatial. That is, the outer boundary is stored first (with ETYPE=1003) followed by zero or more inner boundary elements (ETYPE=2003). For a polygon with holes, the outer boundary must be stored first in the SDO_ORDINATES definition, followed by coordinates of the inner boundaries.</p>
<p>LRS geometries must be converted to standard geometries (using the <a href="sdo_lrs_ref.htm#i85411">SDO_LRS.CONVERT_TO_STD_GEOM</a> or <a href="sdo_lrs_ref.htm#i85412">SDO_LRS.CONVERT_TO_STD_LAYER</a> function) before being passed to the TO_GMLGEOMETRY function. (See the Examples section for an example that uses CONVERT_TO_STD_GEOM with the TO_GMLGEOMETRY function.)</p>
<p>Any circular arcs or circles must be densified (using the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function) or represented as polygons (using the <a href="sdo_objgeom.htm#i856140">SDO_GEOM.SDO_BUFFER</a> function) before being passed to the TO_GMLGEOMETRY function. (See the Examples section for an example that uses SDO_ARC_DENSIFY with the TO_GMLGEOMETRY function.)</p>
<p>Label points are discarded. That is, if a geometry has a value for the SDO_POINT field and values in SDO_ELEM_INFO and SDO_ORDINATES, the SDO_POINT is not output in the GML fragment.</p>
<p>The SDO_SRID value is output in the form <code>srsName="SDO:&lt;srid&gt;"</code>. For example, <code>"SDO:8307"</code> indicates SDO_SRID 8307, and <code>"SDO:"</code> indicates a null SDO_SRID value. No checks are made for the validity or consistency of the SDO_SRID value. For example, the value is not checked to see if it exists in the MDSYS.CS_SRS table or if it conflicts with the SRID value for the layer in the USER_SDO_GEOM_METADATA view.</p>
<p>Coordinates are always output using the <code>&lt;coordinates&gt;</code> tag and <code>decimal='.'</code>, <code>cs=','</code> (that is, with the comma as the coordinate separator), and <code>ts=' '</code> (that is, with a space as the tuple separator), even if the NLS_NUMERIC_CHARACTERS setting has <code>','</code> (comma) as the decimal character.</p>
<p>The GML output is not formatted; there are no line breaks or indentation of tags. To see the contents of the returned CLOB in SQL*Plus, use the TO_CHAR() function or set the SQL*Plus parameter LONG to a suitable value (for example, <code>SET LONG 40000</code>). To get formatted GML output or to use the return value of TO_GMLGEOMETRY in SQLX or Oracle XML DB functions such as XMLELEMENT, use the XMLTYPE(clobval CLOB) constructor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2842"></a>Examples</p>
<p>The following example returns the GML fragment for the <code>cola_b</code> geometry in the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
-- Convert cola_b geometry to GML fragment.
SELECT TO_CHAR(SDO_UTIL.TO_GMLGEOMETRY(shape)) AS GmlGeometry 
  FROM COLA_MARKETS c WHERE c.name = 'cola_b';

GMLGEOMETRY
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:outerBou
ndaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;5,1 8,1 8,6 5
,7 5,1 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Polygon&gt;
</pre>
<p>The following example returns the GML fragment for the arc densification of the <code>cola_d</code> geometry in the COLA_MARKETS table. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>.)</p>
<pre>
SET LONG 40000
SELECT XMLTYPE(SDO_UTIL.TO_GMLGEOMETRY(
  SDO_GEOM.SDO_ARC_DENSIFY(c.shape, m.diminfo, 'arc_tolerance=0.05')))
    AS GmlGeometry FROM cola_markets c, user_sdo_geom_metadata m 
    WHERE m.table_name = 'COLA_MARKETS' AND m.column_name = 'SHAPE' 
    AND c.name = 'cola_d';

GMLGEOMETRY                                                                     
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:outerBou
ndaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;8,7 8.7653668
6473018,7.15224093497743 9.4142135623731,7.58578643762691 9.84775906502257,8.234
63313526982 10,9 9.84775906502257,9.76536686473018 9.4142135623731,10.4142135623
731 8.76536686473018,10.8477590650226 8,11 7.23463313526982,10.8477590650226 6.5
8578643762691,10.4142135623731 6.15224093497743,9.76536686473018 6,9 6.152240934
97743,8.23463313526982 6.58578643762691,7.5857864376269 7.23463313526982,7.15224
093497743 8,7 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Pol
ygon&gt;
</pre>
<p>The following example converts an LRS geometry to a standard geometry and returns the GML fragment for the geometry. (The example uses the definitions and data from <a href="sdo_lrs_concepts.htm#i885918">Section 7.7</a>.)</p>
<pre>
SET LONG 40000
-- Convert LRS geometry to standard geometry before using TO_GMLGEOMETRY.
SELECT XMLTYPE(SDO_UTIL.TO_GMLGEOMETRY(
  SDO_LRS.CONVERT_TO_STD_GEOM(route_geometry)))
  AS GmlGeometry FROM lrs_routes a WHERE a.route_id = 1;

GMLGEOMETRY
--------------------------------------------------------------------------------
&lt;gml:LineString srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;          
  &lt;gml:coordinates decimal="." cs="," ts=" "&gt;2,2 2,4 8,4 12,4 12,10 8,10 5,14 &lt;/
gml:coordinates&gt;                                                                
&lt;/gml:LineString&gt;
</pre>
<p>The following examples return GML fragments for a variety of geometry types.</p>
<pre>
-- Point geometry with coordinates in SDO_ORDINATES. Note the
-- coordinates in the GML are (10,10) and the values in the
-- SDO_POINT field are discarded.
SELECT TO_CHAR(
  SDO_UTIL.TO_GMLGEOMETRY(sdo_geometry(2001, 8307,
    sdo_point_type(-80, 70, null),
    sdo_elem_info_array(1,1,1), sdo_ordinate_array(10, 10)))
)
AS GmlGeometry FROM DUAL;

GMLGEOMETRY                                                                     
--------------------------------------------------------------------------------
&lt;gml:Point srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:coordi
nates decimal="." cs="," ts=" "&gt;10,10 &lt;/gml:coordinates&gt;&lt;/gml:Point&gt;            
                 

-- Multipolygon
SET LONG 40000
SELECT SDO_UTIL.TO_GMLGEOMETRY(
  sdo_geometry(2007, 8307, null,
    sdo_elem_info_array(1,1003,1, 13,1003,1, 23,1003,3),
    sdo_ordinate_array(10.10,10.20, 20.50,20.10, 30.30,30.30, 40.10,40.10,
      30.50, 30.20, 10.10, 10.20,
      5,5, 5,6, 6,6, 6,5, 5,5, 7,7, 8,8 ))
 )
 AS GmlGeometry FROM DUAL;
 
GMLGEOMETRY                                                                     
--------------------------------------------------------------------------------
&lt;gml:MultiPolygon srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml
:polygonMember&gt;&lt;gml:Polygon&gt;&lt;gml:outerBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinate
s decimal="." cs="," ts=" "&gt;10.1,10.2 20.5,20.1 30.3,30.3 40.1,40.1 30.5,30.2 10
.1,10.2 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Polygon&gt;&lt;
/gml:polygonMember&gt;&lt;gml:polygonMember&gt;&lt;gml:Polygon&gt;&lt;gml:outerBoundaryIs&gt;&lt;gml:Lin
earRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;5.0,5.0 5.0,6.0 6.0,6.0 6.0,5
.0 5.0,5.0 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Polygo
n&gt;&lt;/gml:polygonMember&gt;&lt;gml:polygonMember&gt;&lt;gml:Polygon&gt;&lt;gml:outerBoundaryIs&gt;&lt;gml:
LinearRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;7.0,7.0 8.0,7.0 8.0,8.0 7.
0,8.0 7.0,7.0 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:outerBoundaryIs&gt;&lt;/gml:Pol
ygon&gt;&lt;/gml:polygonMember&gt;&lt;/gml:MultiPolygon&gt;                                    

SQL&gt; SET LONG 80

-- Rectangle (geodetic)
SELECT TO_CHAR(
  SDO_UTIL.TO_GMLGEOMETRY(sdo_geometry(2003, 8307, null,
    sdo_elem_info_array(1,1003,3),
    sdo_ordinate_array(10.10,10.10, 20.10,20.10 )))
) 
AS GmlGeometry FROM DUAL;

GMLGEOMETRY                                                                     
--------------------------------------------------------------------------------
&lt;gml:Box srsName="SDO:8307" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:coordina
tes decimal="." cs="," ts=" "&gt;10.1,10.1 20.1,20.1 &lt;/gml:coordinates&gt;&lt;/gml:Box&gt;  
                                                                                

-- Polygon with holes
SELECT TO_CHAR(
  SDO_UTIL.TO_GMLGEOMETRY(sdo_geometry(2003, 262152, null,
    sdo_elem_info_array(1,1003,3, 5, 2003, 1, 13, 2003, 1),
    sdo_ordinate_array(10.10,10.20, 40.50, 41.10, 30.30, 30.30, 30.30,
      40.10, 40.10, 40.10, 30.30, 30.30, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5 )))
)
AS GmlGeometry FROM DUAL;

GMLGEOMETRY                                                                     
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:262152" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:ou
terBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;10.1,10
.2, 40.5,10.2, 40.5,41.1, 10.1,41.1, 10.1,10.2 &lt;/gml:coordinates&gt;&lt;/gml:LinearRin
g&gt;&lt;/gml:outerBoundaryIs&gt;&lt;gml:innerBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates de
cimal="." cs="," ts=" "&gt;30.3,30.3 30.3,40.1 40.1,40.1 30.3,30.3 &lt;/gml:coordinate
s&gt;&lt;/gml:LinearRing&gt;&lt;/gml:innerBoundaryIs&gt;&lt;gml:innerBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;g
ml:coordinates decimal="." cs="," ts=" "&gt;5,5 5,6 6,6 6,5 5,5 &lt;/gml:coordinates&gt;&lt;
/gml:LinearRing&gt;&lt;/gml:innerBoundaryIs&gt;&lt;/gml:Polygon&gt;                            
                                                                                

-- Creating an XMLTYPE from the GML fragment. Also useful for "pretty
-- printing" the GML output.
SET LONG 40000
SELECT XMLTYPE(
  SDO_UTIL.TO_GMLGEOMETRY(sdo_geometry(2003, 262152, null,
    sdo_elem_info_array(1,1003,1, 11, 2003, 1, 21, 2003, 1),
    sdo_ordinate_array(10.10,10.20, 40.50,10.2, 40.5,41.10, 10.1,41.1,
      10.10, 10.20, 30.30,30.30, 30.30, 40.10, 40.10, 40.10, 40.10, 30.30,
      30.30, 30.30, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5 )))
)
AS GmlGeometry FROM DUAL;

GMLGEOMETRY
--------------------------------------------------------------------------------
&lt;gml:Polygon srsName="SDO:262152" xmlns:gml="http://www.opengis.net/gml"&gt;&lt;gml:ou
terBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;10.1,10
.2 40.5,10.2 40.5,41.1 10.1,41.1 10.1,10.2 &lt;/gml:coordinates&gt;&lt;/gml:LinearRing&gt;&lt;/
gml:outerBoundaryIs&gt;&lt;gml:innerBoundaryIs&gt;&lt;gml:LinearRing&gt;&lt;gml:coordinates decima
l="." cs="," ts=" "&gt;30.3,30.3 30.3,40.1 40.1,40.1 40.1,30.3 30.3,30.3 &lt;/gml:coor
dinates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:innerBoundaryIs&gt;&lt;gml:innerBoundaryIs&gt;&lt;gml:LinearR
ing&gt;&lt;gml:coordinates decimal="." cs="," ts=" "&gt;5,5 5,6 6,6 6,5 5,5 &lt;/gml:coordin
ates&gt;&lt;/gml:LinearRing&gt;&lt;/gml:innerBoundaryIs&gt;&lt;/gml:Polygon&gt; 
</pre>
<p>The following example uses the TO_GMLGEOMETRY function with the Oracle XML DB XMLTYPE data type and the XMLELEMENT and XMLFOREST functions.</p>
<pre>
SELECT xmlelement("State", xmlattributes(
  'http://www.opengis.net/gml' as "xmlns:gml"),
  xmlforest(state as "Name", totpop as "Population",
  xmltype(sdo_util.to_gmlgeometry(geom)) as "gml:geometryProperty"))
  AS theXMLElements FROM states WHERE state_abrv in ('DE', 'UT');

THEXMLELEMENTS
--------------------------------------------------------------------------------
&lt;State xmlns:gml="http://www.opengis.net/gml"&gt;
  &lt;Name&gt;Delaware&lt;/Name&gt;
  &lt;Population&gt;666168&lt;/Population&gt;
  &lt;gml:geometryProperty&gt;
    &lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;
      &lt;gml:outerBoundaryIs&gt;
        &lt;gml:LinearRing&gt;
          &lt;gml:coordinates decimal="." cs="," ts=" "&gt;-75.788704,39.721699 -75.78
8704,39.6479 -75.767014,39.377106 -75.76033,39.296497 -75.756294,39.24585 -75.74
8016,39.143196 -75.722961,38.829895 -75.707695,38.635166 -75.701912,38.560619 -7
5.693871,38.460011 -75.500336,38.454002 -75.341614,38.451855 -75.049339,38.45165
3 -75.053841,38.538429 -75.06015,38.605465 -75.063263,38.611275 -75.065308,38.62
949 -75.065887,38.660919 -75.078697,38.732403 -75.082527,38.772045 -75.091667,38
.801208 -75.094185,38.803699 -75.097572,38.802986 -75.094116,38.793579 -75.09926
6,38.78756 -75.123619,38.781784 -75.137962,38.782703 -75.18692,38.803772 -75.215
019,38.831547 -75.23735,38.849014 -75.260498,38.875 -75.305908,38.914673 -75.316
399,38.930309 -75.317284,38.93676 -75.312851,38.945576 -75.312859,38.945618 -75.
31205,38.967804 -75.31778,38.986012 -75.341431,39.021233 -75.369606,39.041359 -7
5.389229,39.051422 -75.40181,39.06702 -75.401306,39.097713 -75.411369,39.148029
-75.407845,39.175201 -75.396271,39.187778 -75.39225,39.203377 -75.40181,39.23104
9 -75.402817,39.253189 -75.409355,39.264759 -75.434006,39.290424 -75.439041,39.3
13065 -75.453125,39.317093 -75.457657,39.326653 -75.469231,39.330677 -75.486336,
39.341743 -75.494888,39.354324 -75.504448,39.357346 -75.51284,39.366291 -75.5129
24,39.366482 -75.523773,39.392052 -75.538651,39.415707 -75.56749,39.436436 -75.5
9137,39.463696 -75.592941,39.471806 -75.590019,39.488026 -75.587311,39.496136 -7
5.5774,39.508076 -75.554192,39.506947 -75.528442,39.498005 -75.530373,39.510303
-75.527145,39.531326 -75.52803,39.535168 -75.53437,39.540592 -75.519386,39.55528
6 -75.512291,39.567505 -75.515587,39.580639 -75.528046,39.584 -75.538269,39.5935
67 -75.554016,39.601727 -75.560143,39.622578 -75.556602,39.6348 -75.549599,39.63
7699 -75.542397,39.645901 -75.535507,39.647099 -75.514999,39.668499 -75.507523,3
9.69685 -75.496597,39.701302 -75.488914,39.714722 -75.477997,39.714901 -75.47550
2,39.733501 -75.467972,39.746975 -75.463707,39.761101 -75.448494,39.773857 -75.4
38301,39.783298 -75.405701,39.796101 -75.415405,39.801678 -75.454102,39.820202 -
75.499199,39.833199 -75.539703,39.8381 -75.5802,39.838417 -75.594017,39.837345 -
75.596107,39.837044 -75.639488,39.82893 -75.680145,39.813839 -75.71096,39.796352
 -75.739716,39.772881 -75.760689,39.74712 -75.774101,39.721699 -75.788704,39.721
699 &lt;/gml:coordinates&gt;
        &lt;/gml:LinearRing&gt;
      &lt;/gml:outerBoundaryIs&gt;
    &lt;/gml:Polygon&gt;
  &lt;/gml:geometryProperty&gt;
&lt;/State&gt;

&lt;State xmlns:gml="http://www.opengis.net/gml"&gt;
  &lt;Name&gt;Utah&lt;/Name&gt;
  &lt;Population&gt;1722850&lt;/Population&gt;
  &lt;gml:geometryProperty&gt;
    &lt;gml:Polygon srsName="SDO:" xmlns:gml="http://www.opengis.net/gml"&gt;
      &lt;gml:outerBoundaryIs&gt;
        &lt;gml:LinearRing&gt;
          &lt;gml:coordinates decimal="." cs="," ts=" "&gt;-114.040871,41.993805 -114.
038803,41.884899 -114.041306,41 -114.04586,40.116997 -114.046295,39.906101 -114.
046898,39.542801 -114.049026,38.67741 -114.049339,38.572968 -114.049095,38.14864
 -114.0476,37.80946 -114.05098,37.746284 -114.051666,37.604805 -114.052025,37.10
3989 -114.049797,37.000423 -113.484375,37 -112.898598,37.000401 -112.539604,37.0
00683 -112,37.000977 -111.412048,37.001514 -111.133018,37.00079 -110.75,37.00320
1 -110.5,37.004265 -110.469505,36.998001 -110,36.997967 -109.044571,36.999088 -1
09.045143,37.375 -109.042824,37.484692 -109.040848,37.881176 -109.041405,38.1530
27 -109.041107,38.1647 -109.059402,38.275501 -109.059296,38.5 -109.058868,38.719
906 -109.051765,39 -109.050095,39.366699 -109.050697,39.4977 -109.050499,39.6605
 -109.050156,40.222694 -109.047577,40.653641 -109.0494,41.000702 -109.2313,41.00
2102 -109.534233,40.998184 -110,40.997398 -110.047768,40.997696 -110.5,40.994801
 -111.045982,40.998013 -111.045815,41.251774 -111.045097,41.579899 -111.045944,4
2.001633 -111.506493,41.999588 -112.108742,41.997677 -112.16317,41.996784 -112.1
72562,41.996643 -112.192184,42.001244 -113,41.998314 -113.875,41.988091 -114.040
871,41.993805 &lt;/gml:coordinates&gt;
        &lt;/gml:LinearRing&gt;
      &lt;/gml:outerBoundaryIs&gt;
    &lt;/gml:Polygon&gt;
  &lt;/gml:geometryProperty&gt;
&lt;/State&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2843"></a>Related Topics</p>
<p><a href="#BJEGEJGI">SDO_UTIL.TO_GML311GEOMETRY</a></p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEJIAGG"></a>
<div id="SPATL1423" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2844"></a><a id="sthref2845"></a><a id="sthref2846"></a><a id="sthref2847"></a>TO_KMLGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2848"></a>Format</p>
<p class="synopsis">SDO_UTIL.TO_KMLGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN CLOB;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2849"></a>Description</p>
<p>Converts a Spatial geometry object to a KML (Keyhole Markup Language) document.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2850"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry for which to return the KML document.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2851"></a>Usage Notes</p>
<p>This function does not convert circles, geometries containing any circular arcs, LRS geometries, or geometries with an SDO_ETYPE value of 0 (type 0 elements); it returns an empty CLOB in these cases.</p>
<p>Polygons must be defined using the conventions for Oracle9<span class="italic">i</span> and later releases of Spatial. That is, the outer boundary is stored first (with ETYPE=1003) followed by zero or more inner boundary elements (ETYPE=2003). For a polygon with holes, the outer boundary must be stored first in the SDO_ORDINATES definition, followed by coordinates of the inner boundaries.</p>
<p>LRS geometries must be converted to standard geometries (using the <a href="sdo_lrs_ref.htm#i85411">SDO_LRS.CONVERT_TO_STD_GEOM</a> or <a href="sdo_lrs_ref.htm#i85412">SDO_LRS.CONVERT_TO_STD_LAYER</a> function) before being passed to the TO_KMLGEOMETRY function.</p>
<p>Any circular arcs or circles must be densified (using the <a href="sdo_objgeom.htm#i867686">SDO_GEOM.SDO_ARC_DENSIFY</a> function) or represented as polygons (using the <a href="sdo_objgeom.htm#i856140">SDO_GEOM.SDO_BUFFER</a> function) before being passed to the TO_KMLGEOMETRY function.</p>
<p>Label points are discarded. That is, if a geometry has a value for the SDO_POINT field and values in SDO_ELEM_INFO and SDO_ORDINATES, the SDO_POINT is not output in the KML document.</p>
<p>Solid geometries are converted to KML MultiGeometry objects, because KML 2.1 does not support solids. If you then use the <a href="#BJEIEDAF">SDO_UTIL.FROM_KMLGEOMETRY</a> function on the MultiGeometry, the result is not an Oracle Spatial solid geometry (that is, its SDO_GTYPE value does not reflect a geometry type of SOLID or MULTISOLID).</p>
<p>The KML output is not formatted; there are no line breaks or indentation of tags. To see the contents of the returned CLOB in SQL*Plus, use the TO_CHAR() function or set the SQL*Plus parameter LONG to a suitable value (for example, <code>SET LONG 2000</code>). To get formatted GML output or to use the return value of TO_KMLGEOMETRY in SQLX or Oracle XML DB functions such as XMLELEMENT, use the XMLTYPE(clobval CLOB) constructor.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2852"></a>Examples</p>
<p>The following example shows conversion to and from KML format. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_c</code> geometry from the COLA_MARKETS table.)</p>
<pre>
-- Convert cola_c geometry to a KML document; convert that result to
-- a spatial geometry.
set long 2000;
DECLARE
  kmlgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_c';
 
-- To KML geometry
kmlgeom := SDO_UTIL.TO_KMLGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To KML geometry result = ' || TO_CHAR(kmlgeom));
 
-- From KML geometry
geom_result := SDO_UTIL.FROM_KMLGEOMETRY(kmlgeom);
-- Validate the returned geometry.
val_result := SDO_GEOM.VALIDATE_GEOMETRY_WITH_CONTEXT(geom_result, 0.005);
DBMS_OUTPUT.PUT_LINE('Validation result = ' || val_result);
 
END;
/
To KML geometry result =
&lt;Polygon&gt;&lt;extrude&gt;0&lt;/extrude&gt;&lt;tessellate&gt;0&lt;/tessellate&gt;&lt;altitudeMode&gt;relativeToG
round&lt;/altitudeMode&gt;&lt;outerBoundaryIs&gt;&lt;LinearRing&gt;&lt;coordinates&gt;3.0,3.0 6.0,3.0
6.0,5.0 4.0,5.0 3.0,3.0 &lt;/coordinates&gt;&lt;/LinearRing&gt;&lt;/outerBoundaryIs&gt;&lt;/Polygon&gt;
Validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2853"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEIEDAF">SDO_UTIL.FROM_KMLGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEGDAA"></a>
<div id="SPATL1250" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2854"></a><a id="sthref2855"></a><a id="sthref2856"></a><a id="sthref2857"></a>TO_WKBGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2858"></a>Format</p>
<p class="synopsis">SDO_UTIL.TO_WKBGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN BLOB;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2859"></a>Description</p>
<p>Converts a Spatial geometry object to the well-known binary (WKB) format.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2860"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>SDO_GEOMETRY object to be converted to WKB format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2861"></a>Usage Notes</p>
<p>The input geometry is converted to the well-known binary (WKB) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To convert a geometry in WKB format to an SDO_GEOMETRY object, use the <a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2862"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2863"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEBJEGJ"></a>
<div id="SPATL1251" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2864"></a><a id="sthref2865"></a><a id="sthref2866"></a><a id="sthref2867"></a>TO_WKTGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2868"></a>Format</p>
<p class="synopsis">SDO_UTIL.TO_WKTGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN SDO_GEOMETRY</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN CLOB;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2869"></a>Description</p>
<p>Converts a Spatial geometry object to the well-known text (WKT) format.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2870"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>SDO_GEOMETRY object to be converted to WKT format.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2871"></a>Usage Notes</p>
<p>The input geometry is converted to the well-known text (WKT) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To convert a geometry in WKT format to an SDO_GEOMETRY object, use the <a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2872"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2873"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEJIBCC"></a>
<div id="SPATL1252" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2874"></a><a id="sthref2875"></a><a id="sthref2876"></a><a id="sthref2877"></a>VALIDATE_WKBGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2878"></a>Format</p>
<p class="synopsis">SDO_UTIL.VALIDATE_WKBGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN BLOB</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2879"></a>Description</p>
<p>Validates the input geometry, which is in the standard well-known binary (WKB) format; returns the string <code>TRUE</code> if the geometry is valid or <code>FALSE</code> if the geometry is not valid.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2880"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in WKB format to be checked for validity.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2881"></a>Usage Notes</p>
<p>To be valid, the input geometry must be in the well-known binary (WKB) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To validate a geometry in the well-known text (WKT) format, use the <a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2882"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2883"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEIBIBG">SDO_UTIL.VALIDATE_WKTGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEIBIBG"></a>
<div id="SPATL1253" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">SDO_UTIL.<a id="sthref2884"></a><a id="sthref2885"></a><a id="sthref2886"></a><a id="sthref2887"></a>VALIDATE_WKTGEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2888"></a>Format</p>
<p class="synopsis">SDO_UTIL.VALIDATE_WKTGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN CLOB</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
<p>or</p>
<p class="synopsis">SDO_UTIL.VALIDATE_WKTGEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2889"></a>Description</p>
<p>Validates the input geometry, which is of type CLOB or VARCHAR2 and in the standard well-known text (WKT) format; returns the string <code>TRUE</code> if the geometry is valid or <code>FALSE</code> if the geometry is not valid.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2890"></a>Parameters</p>
<dl>
<dt>geometry</dt>
<dd>
<p>Geometry in WKT format to be checked for validity.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2891"></a>Usage Notes</p>
<p>To be valid, the input geometry must be in the well-known text (WKT) format, as defined by the Open Geospatial Consortium and the International Organization for Standardization (ISO).</p>
<p>This function is patterned after the SQL Multimedia recommendations in <span class="italic">ISO 13249-3, Information technology - Database languages - SQL Multimedia and Application Packages - Part 3: Spatial</span>.</p>
<p>To validate a geometry in the well-known binary (WKB) format, use the <a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2892"></a>Examples</p>
<p>The following example shows conversion to and from WKB and WKT format, and validation of WKB and WKT geometries. (The example uses the definitions and data from <a href="sdo_objrelschema.htm#i1004750">Section 2.1</a>, specifically the <code>cola_b</code> geometry from the COLA_MARKETS table.)</p>
<pre>
DECLARE
  wkbgeom BLOB;
  wktgeom CLOB;
  val_result VARCHAR2(5);
  geom_result SDO_GEOMETRY;
  geom SDO_GEOMETRY;
BEGIN
SELECT c.shape INTO geom FROM cola_markets c WHERE c.name = 'cola_b';
 
-- To WBT/WKT geometry
wkbgeom := SDO_UTIL.TO_WKBGEOMETRY(geom);
wktgeom := SDO_UTIL.TO_WKTGEOMETRY(geom);
DBMS_OUTPUT.PUT_LINE('To WKT geometry result = ' || TO_CHAR(wktgeom));
 
-- From WBT/WKT geometry
geom_result := SDO_UTIL.FROM_WKBGEOMETRY(wkbgeom);
geom_result := SDO_UTIL.FROM_WKTGEOMETRY(wktgeom);
 
-- Validate WBT/WKT geometry
val_result := SDO_UTIL.VALIDATE_WKBGEOMETRY(wkbgeom);
DBMS_OUTPUT.PUT_LINE('WKB validation result = ' || val_result);
val_result := SDO_UTIL.VALIDATE_WKTGEOMETRY(wktgeom);
DBMS_OUTPUT.PUT_LINE('WKT validation result = ' || val_result);
 
END;/
 
To WKT geometry result = POLYGON ((5.0 1.0, 8.0 1.0, 8.0 6.0, 5.0 7.0, 5.0 1.0))
WKB validation result = TRUE                                                    
WKT validation result = TRUE
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2893"></a>Related Topics</p>
<ul>
<li>
<p><a href="#BJEGAIGB">SDO_UTIL.FROM_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEGGIAB">SDO_UTIL.FROM_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEEGDAA">SDO_UTIL.TO_WKBGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEBJEGJ">SDO_UTIL.TO_WKTGEOMETRY</a></p>
</li>
<li>
<p><a href="#BJEJIBCC">SDO_UTIL.VALIDATE_WKBGEOMETRY</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment733">
<tr>
<td class="cellalignment742">
<table class="cellalignment738">
<tr>
<td class="cellalignment737"><a href="sdo_objtune.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment737"><a href="sdo_wfs_lock_ref.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1999, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment744">
<table class="cellalignment736">
<tr>
<td class="cellalignment737"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment737"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment737"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment737"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment737"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment737"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
