<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>SDO_NET_MEM Package Subprograms</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1023" />
<meta name="description" content="Provides usage and reference information about the Topology Data Model and Network Data Model Graph features of Oracle Spatial and Graph." />
<meta name="dcterms.created" content="2014-07-09T11:54:35Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Spatial Topology and Network Data Models Developer's Guide" />
<meta name="dcterms.identifier" content="E11831-07" />
<meta name="dcterms.isVersionOf" content="TOPOL" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="sdo_net_ref.htm" title="Previous" type="text/html" />
<link rel="Next" href="index.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e11831.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/17</span> <!-- End Header -->
<div id="TOPOL450" class="chapter"><a id="CHDCIHII"></a>
<h1 class="chapter"><span class="secnum">7</span> SDO_NET_MEM Package Subprograms</h1>
<p><a id="sthref1511"></a><a id="sthref1512"></a>The MDSYS.SDO_NET_MEM package contains subprograms (functions and procedures) that constitute part of the PL/SQL application programming interface (API) for the Spatial network data model. This package, which implements capabilities available through the Java API, contains subprograms related to editing and analyzing networks.</p>
<p>To use the subprograms in this chapter, you must understand the conceptual information about networks in <a href="sdo_net_concepts.htm#CIHHEDAC">Chapter 5</a>, especially <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>, which explains how to use a network memory object.</p>
<p>The SDO_NET_MEM subprograms are grouped according to their associated object-related class in the oracle.spatial.network interface or class. Except for the <a href="#CACBFEHJ">SDO_NET_MEM.SET_MAX_MEMORY_SIZE</a> procedure, you must specify a prefix after SDO_NET_MEM for each program, depending on its associated class (for example, <a href="#CHDIHJCC">SDO_NET_MEM.NETWORK_MANAGER.CREATE_LOGICAL_NETWORK</a>, <a href="#CHDDDABE">SDO_NET_MEM.NETWORK.ADD_NODE</a>, and <a href="#CHDBHIHF">SDO_NET_MEM.NODE.GET_COST</a>).</p>
<p>The SDO_NET_MEM subprogram groupings are as follows:</p>
<ul>
<li>
<p>SDO_NET_MEM.NETWORK_MANAGER subprograms are related to the <code>oracle.spatial.network.NetworkManager</code> Java class. They enable you to create and drop network memory objects and to perform network analysis.</p>
</li>
<li>
<p>SDO_NET_MEM.NETWORK subprograms are related to the <code>oracle.spatial.network.Network</code> Java interface. They enable you to add and delete nodes, links, and paths.</p>
</li>
<li>
<p>SDO_NET_MEM.NODE subprograms are related to the <code>oracle.spatial.network.Node</code> Java interface. They enable you to get and set attributes for nodes.</p>
</li>
<li>
<p>SDO_NET_MEM.LINK subprograms are related to the <code>oracle.spatial.network.Link</code> Java interface. They enable you to get and set attributes for links.</p>
</li>
<li>
<p>SDO_NET_MEM.PATH subprograms are related to the <code>oracle.spatial.network.Path</code> Java interface. They enable you to get and set attributes for paths.</p>
</li>
</ul>
<p>The associations between SDO_NET_MEM subprograms and methods of the Java API are not necessarily exact. In some cases, a PL/SQL subprogram may combine operations and options from several methods. In addition, some Java methods do not have PL/SQL counterparts. Thus, the Usage Notes for subprograms state only that the function or procedure is analogous to a specific Java method, to indicate a logical relationship between the two. For detailed information about a specific Java method and others that may be related, see the Javadoc-generated API documentation (briefly explained in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p><a id="sthref1513"></a><a id="sthref1514"></a>Note that although this manual refers to "the SDO_NET_MEM package," all subprograms except one are actually implemented as methods of several object types. Thus, they are not listed by the statement <code>DESCRIBE SDO_NET_MEM</code>. Instead, you can use the DESCRIBE statements listed in <a href="#CHDIBCCD">Table 7-1</a> to see the subprograms in each grouping; however, because they are member functions and procedures in an object type, the subprograms in each grouping will not be listed in alphabetical order in the DESCRIBE statement output.</p>
<div id="TOPOL1047" class="tblformal">
<p class="titleintable"><a id="sthref1515"></a><a id="CHDIBCCD"></a>Table 7-1 DESCRIBE Statements for SDO_NET_MEM Subprograms</p>
<table class="cellalignment789" title="DESCRIBE Statements for SDO_NET_MEM Subprograms" summary="DESCRIBE Statements for SDO_NET_MEM Subprograms" dir="ltr">
<thead>
<tr class="cellalignment779">
<th class="cellalignment790" id="r1c1-t2">Subprogram Grouping</th>
<th class="cellalignment790" id="r1c2-t2">DESCRIBE Statement</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment779">
<td class="cellalignment785" id="r2c1-t2" headers="r1c1-t2">
<p>SDO_NET_MEM.NETWORK_MANAGER</p>
</td>
<td class="cellalignment785" headers="r2c1-t2 r1c2-t2">
<p><code>DESCRIBE sdo_network_manager_t</code></p>
</td>
</tr>
<tr class="cellalignment779">
<td class="cellalignment785" id="r3c1-t2" headers="r1c1-t2">
<p>SDO_NET_MEM.NETWORK</p>
</td>
<td class="cellalignment785" headers="r3c1-t2 r1c2-t2">
<p><code>DESCRIBE sdo_network_t</code></p>
</td>
</tr>
<tr class="cellalignment779">
<td class="cellalignment785" id="r4c1-t2" headers="r1c1-t2">
<p>SDO_NET_MEM.NODE</p>
</td>
<td class="cellalignment785" headers="r4c1-t2 r1c2-t2">
<p><code>DESCRIBE sdo_node_t</code></p>
</td>
</tr>
<tr class="cellalignment779">
<td class="cellalignment785" id="r5c1-t2" headers="r1c1-t2">
<p>SDO_NET_MEM.LINK</p>
</td>
<td class="cellalignment785" headers="r5c1-t2 r1c2-t2">
<p><code>DESCRIBE sdo_link_t</code></p>
</td>
</tr>
<tr class="cellalignment779">
<td class="cellalignment785" id="r6c1-t2" headers="r1c1-t2">
<p>SDO_NET_MEM.PATH</p>
</td>
<td class="cellalignment785" headers="r6c1-t2 r1c2-t2">
<p><code>DESCRIBE sdo_path_t</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The rest of this chapter provides reference information about the SDO_NET_MEM subprograms, listed in alphabetical order (by grouping, then by name within each grouping), with the <a href="#CACBFEHJ">SDO_NET_MEM.SET_MAX_MEMORY_SIZE</a> procedure listed first because it does not fit in any grouping.</p>
<div class="refentry"><a id="CACBFEHJ"></a>
<div id="TOPOL1048" class="refsect1">
<h2 class="refsect1"><a id="sthref1516"></a><a id="sthref1517"></a><a id="sthref1518"></a><a id="sthref1519"></a><a id="sthref1520"></a>SDO_NET_MEM.SET_MAX_MEMORY_SIZE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1521"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.SET_MAX_MEMORY_SIZE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxsize IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1522"></a>Description</p>
<p>Sets the Java maximum heap size for an application to run in an Oracle Java virtual machine.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1523"></a>Parameters</p>
<dl>
<dt>maxsize</dt>
<dd>
<p>Number of bytes for the Java maximum heap size.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1524"></a>Usage Notes</p>
<p>If you encounter the <code>java.lang.OutOfMemoryError</code> exception, you can use this procedure to increase the maximum heap size.</p>
<p>If you specify a value greater than the system limit, the system limit is used.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1525"></a>Examples</p>
<p>The following example sets the Java maximum heap size to 536870912 (512 MB).</p>
<pre>
EXECUTE SDO_NET_MEM.SET_MAX_MEMORY_SIZE(536870912);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1049" class="refsect1"><a id="sthref1526"></a>
<h2 class="refsect1"><a id="sthref1527"></a><a id="sthref1528"></a><a id="sthref1529"></a><a id="sthref1530"></a>SDO_NET_MEM.LINK.GET_CHILD_LINKS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1531"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_CHILD_LINKS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1532"></a>Description</p>
<p>Returns the child links of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1533"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1534"></a>Usage Notes</p>
<p>This function returns the child links of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getChildLinks</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1535"></a>Examples</p>
<p>The following example returns the child links of the link whose link ID is 1001 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.LINK.GET_CHILD_LINKS(net_mem, 1001);
DBMS_OUTPUT.PUT('Link 1001 has the following child links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Link 1001 has the following child links: 1108 1109   
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1050" class="refsect1"><a id="sthref1536"></a>
<h2 class="refsect1"><a id="sthref1537"></a><a id="sthref1538"></a><a id="sthref1539"></a><a id="sthref1540"></a>SDO_NET_MEM.LINK.GET_CO_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1541"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_CO_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1542"></a>Description</p>
<p>Returns the co-links of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1543"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1544"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object with the co-links of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>The <span class="bold">co-link</span> of a link is that link with its direction reversed. That is, the start node of the co-link is the end node of the original link, and the end node of the co-link is the start node of the original link.</p>
<p>This function is analogous to using the <code>getCoLinks</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1545"></a>Examples</p>
<p>The following example returns the co-links of the link whose link ID is 9876 in the current network memory object. (This example assumes that a variable named res_array of type SDO_NUMBER_ARRAY has been declared, and that a variable named <code>net_mem</code> of type VARCHAR2 contains a network name associated with a network memory object.)</p>
<pre>
res_array := SDO_NET_MEM.LINK.GET_CO_LINK_IDS(net_mem, 9876);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGHBGB"></a>
<div id="TOPOL1051" class="refsect1">
<h2 class="refsect1"><a id="sthref1546"></a><a id="sthref1547"></a><a id="sthref1548"></a>SDO_NET_MEM.LINK.GET_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1549"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1550"></a>Description</p>
<p>Returns the cost value of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1551"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1552"></a>Usage Notes</p>
<p>This function returns the cost value of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getCost</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the cost value of a link, use the <a href="#CHDDFEIG">SDO_NET_MEM.LINK.SET_COST</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1553"></a>Examples</p>
<p>The following example returns the cost of the link whose link ID is 1104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_COST(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('The cost of link 1104 is: ' || res_numeric);
. . .
The cost of link 1104 is: 10
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDBDII"></a>
<div id="TOPOL1052" class="refsect1">
<h2 class="refsect1"><a id="sthref1554"></a><a id="sthref1555"></a><a id="sthref1556"></a>SDO_NET_MEM.LINK.GET_END_MEASURE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1557"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_END_MEASURE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1558"></a>Description</p>
<p>Returns the end measure value of a link in an LRS network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1559"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1560"></a>Usage Notes</p>
<p>This function returns the end measure value of a link in an LRS network in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getEndMeasure</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1561"></a>Examples</p>
<p>The following example returns the end measure of the link whose link ID is 104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_END_MEASURE(net_mem, 104);
DBMS_OUTPUT.PUT_LINE('The end measure of link 104 is: ' || res_numeric);
. . .
The end measure of link 104 is: 6
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIJEGJ"></a>
<div id="TOPOL1053" class="refsect1">
<h2 class="refsect1"><a id="sthref1562"></a><a id="sthref1563"></a><a id="sthref1564"></a>SDO_NET_MEM.LINK.GET_END_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1565"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_END_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1566"></a>Description</p>
<p>Returns the node ID of the end node of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1567"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1568"></a>Usage Notes</p>
<p>This function returns the node ID number of the end node of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getEndNode</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the end node of a link, use the <a href="#CHDBDFCA">SDO_NET_MEM.LINK.SET_END_NODE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1569"></a>Examples</p>
<p>The following example returns the end node ID of the link whose link ID is 1104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_END_NODE_ID(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('The end node of link 1104 is: ' || res_numeric);
. . .
The end node of link 1104 is: 104
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFFHEE"></a>
<div id="TOPOL1054" class="refsect1">
<h2 class="refsect1"><a id="sthref1570"></a><a id="sthref1571"></a><a id="sthref1572"></a>SDO_NET_MEM.LINK.GET_GEOM_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1573"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_GEOM_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1574"></a>Description</p>
<p>Returns the geometry ID of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1575"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1576"></a>Usage Notes</p>
<p>This function returns the geometry ID number of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getGeomID</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the geometry ID of a link, use the <a href="#CHDHJJID">SDO_NET_MEM.LINK.SET_GEOM_ID</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1577"></a>Examples</p>
<p>The following example returns the geometry ID of the link whose link ID is 104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_GEOM_ID(net_mem, 104);
DBMS_OUTPUT.PUT_LINE('The geometry ID of link 104 is: ' || res_numeric);
. . .
The geometry ID of link 104 is: 1003
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBGGJI"></a>
<div id="TOPOL1055" class="refsect1">
<h2 class="refsect1"><a id="sthref1578"></a><a id="sthref1579"></a><a id="sthref1580"></a>SDO_NET_MEM.LINK.GET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1581"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1582"></a>Description</p>
<p>Returns the spatial geometry object for a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1583"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1584"></a>Usage Notes</p>
<p>This function returns the SDO_GEOMETRY object for a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getGeometry</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the spatial geometry of a link, use the <a href="#CHDGGHIE">SDO_NET_MEM.LINK.SET_GEOMETRY</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1585"></a>Examples</p>
<p>The following example returns the spatial geometry of the link whose link ID is 9876 in the current network memory object. (This example assumes that a variable named <code>res_geom</code> of type SDO_GEOMETRY has been declared, and that a variable named <code>net_mem</code> of type VARCHAR2 contains a network name associated with a network memory object.)</p>
<pre>
res_geom := SDO_NET_MEM.LINK.GET_GEOMETRY(net_mem, 9876)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHBCIJ"></a>
<div id="TOPOL1056" class="refsect1">
<h2 class="refsect1"><a id="sthref1586"></a><a id="sthref1587"></a><a id="sthref1588"></a>SDO_NET_MEM.LINK.GET_LEVEL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1589"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_LEVEL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1590"></a>Description</p>
<p>Returns the hierarchy level of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1591"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1592"></a>Usage Notes</p>
<p>This function returns the numeric hierarchy level of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getLinkLevel</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the hierarchy level of a link, use the <a href="#CHDCBFAJ">SDO_NET_MEM.LINK.SET_LEVEL</a> procedure.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1593"></a>Examples</p>
<p>The following example returns the hierarchy level of the link whose link ID is 1001 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_LEVEL(net_mem, 1001);
DBMS_OUTPUT.PUT_LINE('The hierarchy level of link 1001 is: ' || res_numeric);
. . .
The hierarchy level of link 1001 is: 2
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEFIA"></a>
<div id="TOPOL1057" class="refsect1">
<h2 class="refsect1"><a id="sthref1594"></a><a id="sthref1595"></a><a id="sthref1596"></a><a id="sthref1597"></a>SDO_NET_MEM.LINK.GET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1598"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1599"></a>Description</p>
<p>Returns the name of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1600"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1601"></a>Usage Notes</p>
<p>This function returns the name of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getName</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the name of a link, use the <a href="#CHDBHGJI">SDO_NET_MEM.LINK.SET_NAME</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1602"></a>Examples</p>
<p>The following example returns the name of the link whose link ID is 1104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.LINK.GET_NAME(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('The name of link 1104 is: ' || res_string);
. . .
The name of link 1104 is: N3N4
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGGFGI"></a>
<div id="TOPOL1058" class="refsect1">
<h2 class="refsect1"><a id="sthref1603"></a><a id="sthref1604"></a><a id="sthref1605"></a><a id="sthref1606"></a>SDO_NET_MEM.LINK.GET_PARENT_LINK_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1607"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_PARENT_LINK_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1608"></a>Description</p>
<p>Returns the link ID number of the parent link of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1609"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1610"></a>Usage Notes</p>
<p>This function returns the link ID number of the parent link of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getParentLink</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the parent link of a link, use the <a href="#CHDDJCHI">SDO_NET_MEM.LINK.SET_PARENT_LINK</a> procedure.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1611"></a>Examples</p>
<p>The following example returns the parent link ID of the link whose link ID is 1108 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_PARENT_LINK_ID(net_mem, 1108);
DBMS_OUTPUT.PUT_LINE('The parent link of link 1108 is: ' || res_numeric);
. . .
The parent link of link 1108 is: 1001
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1059" class="refsect1"><a id="sthref1612"></a>
<h2 class="refsect1"><a id="sthref1613"></a><a id="sthref1614"></a><a id="sthref1615"></a><a id="sthref1616"></a>SDO_NET_MEM.LINK.GET_SIBLING_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1617"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_SIBLING_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1618"></a>Description</p>
<p>Returns the sibling links of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1619"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1620"></a>Usage Notes</p>
<p>This function returns the link ID numbers of the sibling links of a link in the specified network memory object. Sibling links are links that have the same parent link. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getSiblingLinkArray</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>. However, note that parent and child links can be defined without a network hierarchy or in the same level of a network hierarchy.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1621"></a>Examples</p>
<p>The following example returns the sibling links of the link whose link ID is 1108 in the current network memory object. In this case, the only sibling link is the one whose link ID is 1109. Both links are children of the link whose link ID is 1001, which is between nodes <code>HN1</code> and <code>HN2</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.LINK.GET_SIBLING_LINK_IDS(net_mem, 1108);
DBMS_OUTPUT.PUT('Link 1108 has the following sibling links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Link 1108 has the following sibling links: 1109
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCFJJC"></a>
<div id="TOPOL1060" class="refsect1">
<h2 class="refsect1"><a id="sthref1622"></a><a id="sthref1623"></a><a id="sthref1624"></a>SDO_NET_MEM.LINK.GET_START_MEASURE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1625"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_START_MEASURE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1626"></a>Description</p>
<p>Returns the start measure value of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1627"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1628"></a>Usage Notes</p>
<p>This function returns the start measure value of a link in an LRS network in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getStartMeasure</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1629"></a>Examples</p>
<p>The following example returns the start measure value of the link whose link ID is 104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_START_MEASURE(net_mem, 104);
DBMS_OUTPUT.PUT_LINE('The start measure of link 104 is: ' || res_numeric);
. . .
The start measure of link 104 is: 0
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJBCBA"></a>
<div id="TOPOL1061" class="refsect1">
<h2 class="refsect1"><a id="sthref1630"></a><a id="sthref1631"></a><a id="sthref1632"></a>SDO_NET_MEM.LINK.GET_START_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1633"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_START_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1634"></a>Description</p>
<p>Returns the node ID of the start node of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1635"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1636"></a>Usage Notes</p>
<p>This function returns the node ID value of the start node of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getStartNode</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the start node of a link, use the <a href="#CHDCHDJB">SDO_NET_MEM.LINK.SET_START_NODE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1637"></a>Examples</p>
<p>The following example returns the start node of the link whose link ID is 1004 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.LINK.GET_START_NODE_ID(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('The start node of link 1104 is: ' || res_numeric);
. . .
The start node of link 1104 is: 103
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGGDDF"></a>
<div id="TOPOL1062" class="refsect1">
<h2 class="refsect1"><a id="sthref1638"></a><a id="sthref1639"></a><a id="sthref1640"></a>SDO_NET_MEM.LINK.GET_STATE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1641"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_STATE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1642"></a>Description</p>
<p>Returns the state of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1643"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1644"></a>Usage Notes</p>
<p>This function returns the state of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>The state is one of the following string values: <code>TRUE</code> or <code>FALSE</code>. The link state determines whether or not the link is considered by network analysis functions, such as <a href="#CHDICJCD">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH</a>. If the state is <code>TRUE</code>, the link is considered by network analysis functions; if the state is <code>FALSE</code>, the link is ignored by these functions.</p>
<p>This function is analogous to using the <code>getState</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the link state, use the <a href="#CHDIGCEF">SDO_NET_MEM.LINK.SET_STATE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1645"></a>Examples</p>
<p>The following example returns the state of the link whose link ID is 1104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.LINK.GET_STATE(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('The state of link 1104 is: ' || res_string);
. . .
The state of link 1104 is: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHBBHG"></a>
<div id="TOPOL1063" class="refsect1">
<h2 class="refsect1"><a id="sthref1646"></a><a id="sthref1647"></a><a id="sthref1648"></a>SDO_NET_MEM.LINK.GET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1649"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1650"></a>Description</p>
<p>Returns the type of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1651"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1652"></a>Usage Notes</p>
<p>This function returns the type of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getType</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the type of a link, use the <a href="#CHDFJAHC">SDO_NET_MEM.LINK.SET_TYPE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1653"></a>Examples</p>
<p>The following example sets and gets the type of the link whose link ID is 1119 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_TYPE(net_mem, 1119, 'Associative');
res_string := SDO_NET_MEM.LINK.GET_TYPE(net_mem, 1119);
DBMS_OUTPUT.PUT_LINE('The type of link 1119 is: ' || res_string);
. . .
The type of link 1119 is: Associative
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1064" class="refsect1"><a id="sthref1654"></a>
<h2 class="refsect1"><a id="sthref1655"></a><a id="sthref1656"></a><a id="sthref1657"></a><a id="sthref1658"></a><a id="sthref1659"></a>SDO_NET_MEM.LINK.IS_ACTIVE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1660"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.IS_ACTIVE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1661"></a>Description</p>
<p>Checks if a link is active.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1662"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1663"></a>Usage Notes</p>
<p>This function returns the string value <code>TRUE</code> if the link in the specified network memory object is active, and the string value <code>FALSE</code> if the link is not active. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isActive</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1664"></a>Examples</p>
<p>The following example checks if the link whose link ID is 1104 in the current network memory object is active. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.LINK.IS_ACTIVE(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('Is link 1104 active?: ' || res_string);
. . .
Is link 1104 active?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1065" class="refsect1"><a id="sthref1665"></a>
<h2 class="refsect1"><a id="sthref1666"></a><a id="sthref1667"></a><a id="sthref1668"></a>SDO_NET_MEM.LINK.IS_LOGICAL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1669"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.IS_LOGICAL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1670"></a>Description</p>
<p>Checks if a link is in a logical network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1671"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1672"></a>Usage Notes</p>
<p>This function returns the string value <code>TRUE</code> if the link in the specified network memory object is in a logical network, and the string value <code>FALSE</code> if the link is not in a logical network. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isLogical</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1673"></a>Examples</p>
<p>The following example checks if the link whose link ID is 1104 in the current network memory object is in a logical network. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.LINK.IS_LOGICAL(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('Is link 1104 a logical link?: ' || res_string);
. . .
Is link 1104 a logical link?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1066" class="refsect1"><a id="sthref1674"></a>
<h2 class="refsect1"><a id="sthref1675"></a><a id="sthref1676"></a><a id="sthref1677"></a><a id="sthref1678"></a>SDO_NET_MEM.LINK.IS_TEMPORARY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1679"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.IS_TEMPORARY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1680"></a>Description</p>
<p>Checks if a link is temporary.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1681"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1682"></a>Usage Notes</p>
<p>This function returns the string value <code>TRUE</code> if the link in the specified network memory object is temporary, and the string value <code>FALSE</code> if the link is not temporary. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>Temporary links, nodes, and paths are not saved in the database when you call the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure.</p>
<p>This function is analogous to using the <code>isTemporary</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1683"></a>Examples</p>
<p>The following example checks if the link whose link ID is 1104 in the current network memory object is temporary. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.LINK.IS_TEMPORARY(net_mem, 1104);
DBMS_OUTPUT.PUT_LINE('Is link 1104 temporary?: ' || res_string);
. . .
Is link 1104 temporary?: FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDFEIG"></a>
<div id="TOPOL1067" class="refsect1">
<h2 class="refsect1"><a id="sthref1684"></a><a id="sthref1685"></a><a id="sthref1686"></a><a id="sthref1687"></a>SDO_NET_MEM.LINK.SET_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1688"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1689"></a>Description</p>
<p>Sets the cost value of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1690"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>cost</dt>
<dd>
<p>Cost value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1691"></a>Usage Notes</p>
<p>This procedure sets the cost of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setCost</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the cost value of a link, use the <a href="#CHDGHBGB">SDO_NET_MEM.LINK.GET_COST</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1692"></a>Examples</p>
<p>The following example sets the cost of the link whose link ID is 1119 in the current network memory object to 40. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_COST(net_mem, 1119, 40);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBDFCA"></a>
<div id="TOPOL1068" class="refsect1">
<h2 class="refsect1"><a id="sthref1693"></a><a id="sthref1694"></a><a id="sthref1695"></a><a id="sthref1696"></a>SDO_NET_MEM.LINK.SET_END_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1697"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_END_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1698"></a>Description</p>
<p>Sets the end node of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1699"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>end_node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1700"></a>Usage Notes</p>
<p>This procedure sets the end node of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setEndNode</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the end node of a link, use the <a href="#CHDIJEGJ">SDO_NET_MEM.LINK.GET_END_NODE_ID</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1701"></a>Examples</p>
<p>The following example sets the end node of the link whose link ID is 1119 in the current network memory object to the node with the node ID value of 109. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_END_NODE(net_mem, 1119, 109);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHJJID"></a>
<div id="TOPOL1069" class="refsect1">
<h2 class="refsect1"><a id="sthref1702"></a><a id="sthref1703"></a><a id="sthref1704"></a><a id="sthref1705"></a>SDO_NET_MEM.LINK.SET_GEOM_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1706"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_GEOM_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1707"></a>Description</p>
<p>Sets the geometry ID number of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1708"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>geom_id</dt>
<dd>
<p>Geometry ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1709"></a>Usage Notes</p>
<p>This procedure sets the geometry ID number of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setGeomID</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the geometry ID of a link, use the <a href="#CHDFFHEE">SDO_NET_MEM.LINK.GET_GEOM_ID</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1710"></a>Examples</p>
<p>The following example sets the geometry ID of the link whose link ID is 302 in the current network memory object to 9999.</p>
<pre>
SDO_NET_MEM.LINK.SET_GEOM_ID(net_mem, 302, 9999);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGGHIE"></a>
<div id="TOPOL1070" class="refsect1">
<h2 class="refsect1"><a id="sthref1711"></a><a id="sthref1712"></a><a id="sthref1713"></a><a id="sthref1714"></a>SDO_NET_MEM.LINK.SET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1715"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1716"></a>Description</p>
<p>Sets the spatial geometry of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1717"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Spatial geometry object.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1718"></a>Usage Notes</p>
<p>This procedure sets the SDO_GEOMETRY object for a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setGeometry</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the spatial geometry of a link, use the <a href="#CHDBGGJI">SDO_NET_MEM.LINK.GET_GEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1719"></a>Examples</p>
<p>The following example sets the spatial geometry of the link whose link ID is 5678 in the current network memory object to a specified line string SDO_GEOMETRY object. (This example assumes that a variable named <code>net_mem</code> of type VARCHAR2 contains a network name associated with a network memory object.)</p>
<pre>
SDO_NET_MEM.LINK.SET_GEOMETRY(net_mem, 5678,
   SDO_GEOMETRY(2002, NULL, NULL,
     SDO_ELEM_INFO_ARRAY(1,2,1),
       SDO_ORDINATE_ARRAY(9, 4, 1,1)));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCBFAJ"></a>
<div id="TOPOL1071" class="refsect1">
<h2 class="refsect1"><a id="sthref1720"></a><a id="sthref1721"></a><a id="sthref1722"></a>SDO_NET_MEM.LINK.SET_LEVEL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1723"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_LEVEL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1724"></a>Description</p>
<p>Sets the hierarchy level of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1725"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>level</dt>
<dd>
<p>Hierarchy level number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1726"></a>Usage Notes</p>
<p>This procedure sets the hierarchy level of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setLinkLevel</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the hierarchy level of a link, use the <a href="#CHDHBCIJ">SDO_NET_MEM.LINK.GET_LEVEL</a> function.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1727"></a>Examples</p>
<p>The following example sets the hierarchy level of the link whose link ID is 1119 in the current network memory object to 2. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_LEVEL(net_mem, 1119, 2);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1072" class="refsect1"><a id="sthref1728"></a>
<h2 class="refsect1"><a id="sthref1729"></a><a id="sthref1730"></a><a id="sthref1731"></a><a id="sthref1732"></a>SDO_NET_MEM.LINK.SET_MEASURE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1733"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_MEASURE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_measure IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_measure IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1734"></a>Description</p>
<p>Sets the start and end measure values of a link in an LRS network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1735"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>start_measure</dt>
<dd>
<p>Start measure value.</p>
</dd>
<dt>end_measure</dt>
<dd>
<p>End measure value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1736"></a>Usage Notes</p>
<p>This procedure sets the start and end measure values of a link in an LRS network in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setMeasure</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the start measure of a link, use the <a href="#CHDCFJJC">SDO_NET_MEM.LINK.GET_START_MEASURE</a> function. To get the end measure of a link, use the <a href="#CHDDBDII">SDO_NET_MEM.LINK.GET_END_MEASURE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1737"></a>Examples</p>
<p>The following example sets the measure values of the link whose link ID is 302 in the current network memory object, so that the start measure is 111 and the end measure is 114.16. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_MEASURE(net_mem, 302, 111, 114.16);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBHGJI"></a>
<div id="TOPOL1073" class="refsect1">
<h2 class="refsect1"><a id="sthref1738"></a><a id="sthref1739"></a><a id="sthref1740"></a><a id="sthref1741"></a>SDO_NET_MEM.LINK.SET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1742"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1743"></a>Description</p>
<p>Sets the name of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1744"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>link_name</dt>
<dd>
<p>Link name string.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1745"></a>Usage Notes</p>
<p>This procedure sets the name of a link in an LRS network in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setName</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the name of a link, use the <a href="#CHDDEFIA">SDO_NET_MEM.LINK.GET_NAME</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1746"></a>Examples</p>
<p>The following example sets the name of the link whose link ID is 1119 in the current network memory object to <code>My favorite link</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_NAME(net_mem, 1119, 'My favorite link');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDJCHI"></a>
<div id="TOPOL1074" class="refsect1">
<h2 class="refsect1"><a id="sthref1747"></a><a id="sthref1748"></a><a id="sthref1749"></a><a id="sthref1750"></a>SDO_NET_MEM.LINK.SET_PARENT_LINK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1751"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_PARENT_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent_link_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1752"></a>Description</p>
<p>Sets the parent link of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1753"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>parent_link_id</dt>
<dd>
<p>Link ID number of the parent link.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1754"></a>Usage Notes</p>
<p>This procedure sets the parent link of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setParentLink</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the parent link of a link, use the <a href="#CHDGGFGI">SDO_NET_MEM.LINK.GET_PARENT_LINK_ID</a> function.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1755"></a>Examples</p>
<p>The following example sets the parent link of the link whose link ID is 1119 in the current network memory object to the link whose link ID value is 1001. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_PARENT_LINK(net_mem, 1119, 1001);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCHDJB"></a>
<div id="TOPOL1075" class="refsect1">
<h2 class="refsect1"><a id="sthref1756"></a><a id="sthref1757"></a><a id="sthref1758"></a><a id="sthref1759"></a>SDO_NET_MEM.LINK.SET_START_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1760"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_START_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srart_node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1761"></a>Description</p>
<p>Sets the start node of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1762"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1763"></a>Usage Notes</p>
<p>This procedure sets the start node of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setStartNode</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the start node of a link, use the <a href="#CHDJBCBA">SDO_NET_MEM.LINK.GET_START_NODE_ID</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1764"></a>Examples</p>
<p>The following example sets the start of the link whose link ID is 1119 in the current network memory object to the node whose node ID is 110. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_START_NODE(net_mem, 1119, 110);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIGCEF"></a>
<div id="TOPOL1076" class="refsect1">
<h2 class="refsect1"><a id="sthref1765"></a><a id="sthref1766"></a><a id="sthref1767"></a><a id="sthref1768"></a>SDO_NET_MEM.LINK.SET_STATE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1769"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_STATE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1770"></a>Description</p>
<p>Sets the state value of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1771"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>state</dt>
<dd>
<p>State value. Must be one of the following strings: <code>TRUE</code> or <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1772"></a>Usage Notes</p>
<p>This procedure sets the state of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>The link state determines whether or not the link is considered by network analysis functions, such as <a href="#CHDICJCD">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH</a>. If the state is <code>TRUE</code>, the link is considered by network analysis functions; if the state is <code>FALSE</code>, the link is ignored by these functions.</p>
<p>This procedure is analogous to using the <code>setState</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the link state, use the <a href="#CHDGGDDF">SDO_NET_MEM.LINK.GET_STATE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1773"></a>Examples</p>
<p>The following example sets the state of the link whose link ID is 1119 in the current network memory object to <code>FALSE</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_STATE(net_mem, 1119, 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFJAHC"></a>
<div id="TOPOL1077" class="refsect1">
<h2 class="refsect1"><a id="sthref1774"></a><a id="sthref1775"></a><a id="sthref1776"></a><a id="sthref1777"></a>SDO_NET_MEM.LINK.SET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1778"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.SET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1779"></a>Description</p>
<p>Sets the type of a link.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1780"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID number.</p>
</dd>
<dt>type</dt>
<dd>
<p>String reflecting a user-determined type for the link.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1781"></a>Usage Notes</p>
<p>This procedure sets the type of a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setType</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the type of a link, use the <a href="#CHDHBBHG">SDO_NET_MEM.LINK.GET_TYPE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1782"></a>Examples</p>
<p>The following example sets the type of the link whose link ID is 302 in the current network memory object to <code>Normal street</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
SDO_NET_MEM.LINK.SET_TYPE(net_mem, 302, 'Normal street');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1078" class="refsect1"><a id="sthref1783"></a>
<h2 class="refsect1"><a id="sthref1784"></a><a id="sthref1785"></a><a id="sthref1786"></a>SDO_NET_MEM.NETWORK.ADD_LINK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1787"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_name IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost IN NUMBER);</p>
<p>or</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_name IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_measure IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_measure IN NUMBER);</p>
<p>or</p>
<p class="synopsis">SDO_NET_MEM.ADD_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_name IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1788"></a>Description</p>
<p>Adds a link to a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1789"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>ID number of the link to be added.</p>
</dd>
<dt>link_name</dt>
<dd>
<p>Name of the link to be added.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node of the link to be added.</p>
</dd>
<dt>end_node_id</dt>
<dd>
<p>Node ID of the end node of the link to be added.</p>
</dd>
<dt>cost</dt>
<dd>
<p>Cost value associated with the link.</p>
</dd>
<dt>geom_id</dt>
<dd>
<p>For an LRS geometry, the geometry ID of the geometry object.</p>
</dd>
<dt>start_measure</dt>
<dd>
<p>For an LRS geometry, the start measure value in the geometry object corresponding to the start node for this link.</p>
</dd>
<dt>end_measure</dt>
<dd>
<p>For an LRS geometry, the end measure value in the geometry object corresponding to the end node for this link.</p>
</dd>
<dt>geom</dt>
<dd>
<p>SDO_GEOMETRY object (line or contiguous line string geometry) representing the link to be added.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1790"></a>Usage Notes</p>
<p>This procedure adds a link in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>addLink</code> method of the <code>Network</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1791"></a>Examples</p>
<p>The following example adds a link whose link ID is 9901 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHJGDBF">Example 5-1</a> in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.)</p>
<pre>
-- Add a link with ID=9901, name=N901N1, cost=20 from node N901 to node N1.
sdo_net_mem.network.add_link(net_mem=&gt;'XYZ_NETWORK', link_id=&gt;9901, 
  link_name=&gt;'N901N1', start_node_id=&gt;901, end_node_id=&gt;101, cost=&gt;20);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1079" class="refsect1"><a id="sthref1792"></a>
<h2 class="refsect1"><a id="sthref1793"></a><a id="sthref1794"></a><a id="sthref1795"></a><a id="sthref1796"></a>SDO_NET_MEM.NETWORK.ADD_LRS_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1797"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_LRS_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measure IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external_network_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external_node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1798"></a>Description</p>
<p>Adds an LRS node (point geometry with measure information) to a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1799"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID of the node to be added.</p>
</dd>
<dt>node_name</dt>
<dd>
<p>Name of the node to be added.</p>
</dd>
<dt>geom_id</dt>
<dd>
<p>Geometry ID of the geometry object.</p>
</dd>
<dt>measure</dt>
<dd>
<p>Measure value of the node to be added.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Geometry object of the node to be added. Must be a linear referencing system (LRS) geometry with the measure value for the third dimension value.</p>
</dd>
<dt>external_network_id</dt>
<dd>
<p>If the node is also a node in an external network, the network ID of the external network.</p>
</dd>
<dt>external_node_id</dt>
<dd>
<p>If the node is also a node in an external network, the node ID of the node in the external network.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1800"></a>Usage Notes</p>
<p>This procedure adds an LRS node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1801"></a>Examples</p>
<p>The following example adds an LRS node whose node ID is 901 in the network memory object for a network named <code>MY_LRS_NETWORK</code>.</p>
<pre>
DECLARE
  res_string  VARCHAR2(100);
BEGIN
-- Add an LRS node with ID=901.
SDO_NET_MEM.NETWORK.ADD_LRS_NODE(net_mem=&gt;'MY_LRS_NETWORK', node_id=&gt;901,
  node_name=&gt;'N901', geom_id=&gt;9901, measure=&gt;8, 
  geom=&gt;SDO_GEOMETRY(3301, NULL, NULL, SDO_ELEM_INFO_ARRAY(1, 1, 1), 
    SDO_ORDINATE_ARRAY(8,13,9)),
  external_network_id=&gt;0, external_node_id=&gt;0);
-- GET_NAME
res_string := SDO_NET_MEM.NODE.GET_NAME('ROADS_NETWORK', 901);
DBMS_OUTPUT.PUT_LINE('The name of node 901 is: ' || res_string);
END;  
/
. . . 
The name of node 901 is: N901
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDDABE"></a>
<div id="TOPOL1080" class="refsect1">
<h2 class="refsect1"><a id="sthref1802"></a><a id="sthref1803"></a><a id="sthref1804"></a>SDO_NET_MEM.NETWORK.ADD_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1805"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external_network_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external_node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1806"></a>Description</p>
<p>Adds a node (with no associated geometry object) to a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1807"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID of the node to be added.</p>
</dd>
<dt>node_name</dt>
<dd>
<p>Name of the node to be added.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Geometry object associated with the node. If this parameter is null, no geometry object is associated with the node.</p>
</dd>
<dt>external_network_id</dt>
<dd>
<p>If the node is also a node in an external network, the network ID of the external network.</p>
</dd>
<dt>external_node_id</dt>
<dd>
<p>If the node is also a node in an external network, the node ID of the node in the external network.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1808"></a>Usage Notes</p>
<p>This procedure adds a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>addNode</code> method of the <code>Network</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1809"></a>Examples</p>
<p>The following example adds a node whose node ID is 901 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHJGDBF">Example 5-1</a> in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.)</p>
<pre>
-- Add a node with ID=901, and set its name to N901.
sdo_net_mem.network.add_node(net_mem=&gt;'XYZ_NETWORK', node_id=&gt;901,
  node_name=&gt;'N901', external_network_id=&gt;0, external_node_id=&gt;0);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1081" class="refsect1"><a id="sthref1810"></a>
<h2 class="refsect1"><a id="sthref1811"></a><a id="sthref1812"></a><a id="sthref1813"></a>SDO_NET_MEM.NETWORK.ADD_PATH</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1814"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_PATH(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER);</p>
<p>or</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_PATH(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_ids IN SDO_NUMBER_ARRAY);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1815"></a>Description</p>
<p>Adds one or more paths to a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1816"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID of the path to be added.</p>
</dd>
<dt>path_ids</dt>
<dd>
<p>SDO_NUMBER_ARRAY object specifying the path IDs of the paths to be added.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1817"></a>Usage Notes</p>
<p>This procedure adds one or more paths in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>addPath</code> method of the <code>Network</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1818"></a>Examples</p>
<p>The following example adds a path whose path ID is stored in a variable named <code>path_id</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHJGDBF">Example 5-1</a> in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.)</p>
<pre>
sdo_net_mem.network.add_path(net_mem=&gt;'XYZ_NETWORK', path_id=&gt;path_id);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1082" class="refsect1"><a id="sthref1819"></a>
<h2 class="refsect1"><a id="sthref1820"></a><a id="sthref1821"></a><a id="sthref1822"></a><a id="sthref1823"></a>SDO_NET_MEM.NETWORK.ADD_SDO_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1824"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.ADD_SDO_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srid IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1825"></a>Description</p>
<p>Adds a node (with associated spatial coordinates) to a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1826"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID of the node to be added.</p>
</dd>
<dt>node_name</dt>
<dd>
<p>Name of the node to be added.</p>
</dd>
<dt>x</dt>
<dd>
<p>X-axis coordinate value for the node to be added.</p>
</dd>
<dt>y</dt>
<dd>
<p>Y-axis coordinate value for the node to be added.</p>
</dd>
<dt>srid</dt>
<dd>
<p>Coordinate system (spatial reference system) associated with the node. Must match the SRID associated with the node table in the USER_SDO_GEOM_METADATA view.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1827"></a>Usage Notes</p>
<p>This procedure adds a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>addNode</code> method of the <code>Network</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1828"></a>Examples</p>
<p>The following example adds an SDO node whose node ID is 801 in the network memory object for a network named <code>ROADS_NETWORK</code>.</p>
<pre>
DECLARE
  res_string  VARCHAR2(100);
BEGIN
-- Add an SDO node with ID=801.
SDO_NET_MEM.NETWORK.ADD_SDO_NODE(net_mem=&gt;'ROADS_NETWORK', 
  node_id=&gt;801, node_name=&gt;'N801', x=&gt;8, y=&gt;12, srid=&gt;null);
-- GET_NAME
res_string := SDO_NET_MEM.NODE.GET_NAME('ROADS_NETWORK', 801);
DBMS_OUTPUT.PUT_LINE('The name of node 801 is: ' || res_string);
END;  
/
. . .
The name of node 801 is: N801
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1083" class="refsect1"><a id="sthref1829"></a>
<h2 class="refsect1"><a id="sthref1830"></a><a id="sthref1831"></a><a id="sthref1832"></a>SDO_NET_MEM.NETWORK.DELETE_LINK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1833"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.DELETE_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1834"></a>Description</p>
<p>Deletes a link from a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1835"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>link_id</dt>
<dd>
<p>Link ID of the link to be deleted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1836"></a>Usage Notes</p>
<p>This procedure deletes a link from the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>deleteLink</code> method of the <code>Network</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1837"></a>Examples</p>
<p>The following example deletes the link whose link ID is 302 in the network memory object for a network named <code>MY_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK.DELETE_LINK('MY_NETWORK', 302);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1084" class="refsect1"><a id="sthref1838"></a>
<h2 class="refsect1"><a id="sthref1839"></a><a id="sthref1840"></a><a id="sthref1841"></a>SDO_NET_MEM.NETWORK.DELETE_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1842"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.DELETE_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1843"></a>Description</p>
<p>Deletes a node from a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1844"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID of the node to be deleted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1845"></a>Usage Notes</p>
<p>This procedure deletes a node from the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>deleteNode</code> method of the <code>Network</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1846"></a>Examples</p>
<p>The following example deletes the node whose node ID is 8 in the network memory object for a network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK.DELETE_NODE('ROADS_NETWORK', 8);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1085" class="refsect1"><a id="sthref1847"></a>
<h2 class="refsect1"><a id="sthref1848"></a><a id="sthref1849"></a><a id="sthref1850"></a>SDO_NET_MEM.NETWORK.DELETE_PATH</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1851"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK.DELETE_PATH(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1852"></a>Description</p>
<p>Deletes a path from a network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1853"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID of the path to be deleted.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1854"></a>Usage Notes</p>
<p>This procedure deletes a path from the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>An exception is raised if the specified network memory object is read-only.</p>
<p>This procedure is analogous to using the <code>deletePath</code> method of the <code>Network</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1855"></a>Examples</p>
<p>The following example deletes the path whose path ID is 1 in the network memory object for a network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK.DELETE_PATH('ROADS_NETWORK', 1);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1086" class="refsect1"><a id="sthref1856"></a>
<h2 class="refsect1"><a id="sthref1857"></a><a id="sthref1858"></a><a id="sthref1859"></a>SDO_NET_MEM.NETWORK.GET_MAX_LINK_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1860"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_MAX_LINK_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1861"></a>Description</p>
<p>Returns the link ID with the highest numeric value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1862"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1863"></a>Usage Notes</p>
<p>This function returns the link ID with the highest numeric value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getMaxLinkId</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1864"></a>Examples</p>
<p>The following example returns the link ID with the highest numeric value in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SELECT SDO_NET_MEM.NETWORK.GET_MAX_LINK_ID(net_mem) 
  INTO res_numeric FROM DUAL;
DBMS_OUTPUT.PUT_LINE('Maximum link ID = ' || res_numeric);
. . .
Maximum link ID = 1119
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1087" class="refsect1"><a id="sthref1865"></a>
<h2 class="refsect1"><a id="sthref1866"></a><a id="sthref1867"></a><a id="sthref1868"></a>SDO_NET_MEM.NETWORK.GET_MAX_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1869"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_MAX_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1870"></a>Description</p>
<p>Returns the node ID with the highest numeric value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1871"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1872"></a>Usage Notes</p>
<p>This function returns the node ID with the highest numeric value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getMaxNodeId</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1873"></a>Examples</p>
<p>The following example returns the node ID with the highest numeric value in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SELECT SDO_NET_MEM.NETWORK.GET_MAX_NODE_ID(net_mem) 
  INTO res_numeric FROM DUAL;
DBMS_OUTPUT.PUT_LINE('Maximum node ID = ' || res_numeric);
. . .
Maximum node ID = 114
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1088" class="refsect1"><a id="sthref1874"></a>
<h2 class="refsect1"><a id="sthref1875"></a><a id="sthref1876"></a><a id="sthref1877"></a>SDO_NET_MEM.NETWORK.GET_MAX_PATH_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1878"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_MAX_PATH_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1879"></a>Description</p>
<p>Returns the path ID with the highest numeric value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1880"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1881"></a>Usage Notes</p>
<p>This function returns the path ID with the highest numeric value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getMaxPathId</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1882"></a>Examples</p>
<p>The following example returns the path ID with the highest numeric value in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SELECT SDO_NET_MEM.NETWORK.GET_MAX_PATH_ID(net_mem) 
  INTO res_numeric FROM DUAL;
DBMS_OUTPUT.PUT_LINE('Maximum path ID = ' || res_numeric);
. . .
Maximum path ID = 28
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1089" class="refsect1"><a id="sthref1883"></a>
<h2 class="refsect1"><a id="sthref1884"></a><a id="sthref1885"></a><a id="sthref1886"></a>SDO_NET_MEM.NETWORK.GET_MAX_SUBPATH_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1887"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.LINK.GET_MAX_SUBPATH_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1888"></a>Description</p>
<p>Returns the subpath ID with the highest numeric value.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1889"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1890"></a>Usage Notes</p>
<p>This function returns the subpath ID with the highest numeric value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getMaxSubpathId</code> method of the <code>Link</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1891"></a>Examples</p>
<p>The following example returns the subpath ID with the highest numeric value in the current network memory object. In this case the network has no subpaths, and so the returned value is 0 (zero). (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SELECT SDO_NET_MEM.NETWORK.GET_MAX_SUBPATH_ID(net_mem) 
  INTO res_numeric FROM DUAL;
DBMS_OUTPUT.PUT_LINE('Maximum subpath ID = ' || res_numeric);
. . .
Maximum subpath ID = 0
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIFIJJ"></a>
<div id="TOPOL1090" class="refsect1">
<h2 class="refsect1"><a id="sthref1892"></a><a id="sthref1893"></a><a id="sthref1894"></a>SDO_NET_MEM.NETWORK_MANAGER.ALL_PATHS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1895"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.ALL_PATHS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goal_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;depth_limit IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost_limit IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_solutions IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1896"></a>Description</p>
<p>Returns all paths between two nodes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1897"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node in the pair of nodes between which to find paths.</p>
</dd>
<dt>goal_node_id</dt>
<dd>
<p>Node ID of the end (goal) node in the pair of nodes between which to find paths.</p>
</dd>
<dt>depth_limit</dt>
<dd>
<p>Maximum number of links in the resultant paths. If this parameter is null, no maximum number of links is applied.</p>
<p>This parameter is ignored if a <code>constraint</code> parameter value is specified.</p>
</dd>
<dt>cost_limit</dt>
<dd>
<p>Maximum cost total value of the links in a path. If this parameter is null, no cost limit is applied.</p>
<p>This parameter is ignored if a <code>constraint</code> parameter value is specified.</p>
</dd>
<dt>no_of_solutions</dt>
<dd>
<p>Maximum number of paths to be returned. If this parameter is null, all paths that meet the other criteria for this function are returned.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
<p>If <code>constraint</code> is not null, any <code>depth_limit</code> and <code>cost_limit</code> values are ignored.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1898"></a>Usage Notes</p>
<p>This function returns paths between a start node and an end (goal) node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>allPaths</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1899"></a>Examples</p>
<p>The following example returns up to 5 paths, each up to a maximum cost value of 200, between the nodes with node ID values 101 and 105 in the current network memory object. It also displays some information about each returned path. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.ALL_PATHS(net_mem,101,105,10,200,5);
DBMS_OUTPUT.PUT_LINE('For each path from node 101 to node 105: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  res_numeric := res_array(indx);
  DBMS_OUTPUT.PUT_LINE('Path ' || res_numeric ||
                       ' has the following properties: ');
  cost := SDO_NET_MEM.PATH.GET_COST(net_mem, res_numeric);
  DBMS_OUTPUT.PUT_LINE('Path ' || res_numeric || ' cost: ' || cost);
  res_string := SDO_NET_MEM.PATH.IS_CLOSED(net_mem, res_array(indx));  
  DBMS_OUTPUT.PUT_LINE('Is path ' || res_numeric || ' closed? ' || res_string);       
END LOOP;

For each path from node 101 to node 105:                                        
Path 7 has the following properties:                                                
Path 7 cost: 50                                                                 
Is path 7 closed? FALSE                                                         
Path 8 has the following properties:                                                
Path 8 cost: 70                                                                 
Is path 8 closed? FALSE                                                         
Path 9 has the following properties:                                                
Path 9 cost: 70                                                                 
Is path 9 closed? FALSE                                                         
Path 10 has the following properties:                                               
Path 10 cost: 90                                                                
Is path 10 closed? FALSE                                                        
Path 11 has the following properties:                                               
Path 11 cost: 120                                                               
Is path 11 closed? FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIHJCC"></a>
<div id="TOPOL1091" class="refsect1">
<h2 class="refsect1"><a id="sthref1900"></a><a id="sthref1901"></a><a id="sthref1902"></a>SDO_NET_MEM.NETWORK_MANAGER.CREATE_LOGICAL_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1903"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.CREATE_LOGICAL_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_hierarchy_levels IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_directed IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_cost_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_cost_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_complex IN VARCHAR2 DEFAULT 'FALSE');</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1904"></a>Description</p>
<p>Creates a logical network, creates all necessary tables, and updates the network metadata.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1905"></a>Parameters</p>
<dl>
<dt>network_name</dt>
<dd>
<p>Name of the network.</p>
</dd>
<dt>no_of_hierarchy_levels</dt>
<dd>
<p>Number of hierarchy levels for links in the network. (For an explanation of network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.)</p>
</dd>
<dt>is_directed</dt>
<dd>
<p>A string value. <code>TRUE</code> indicates that the links are directed; <code>FALSE</code> indicates that the links are undirected (not directed).</p>
</dd>
<dt>node_table_name</dt>
<dd>
<p>Name of the node table to be created. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the node table name will be in the form <span class="italic">&lt;network-name&gt;</span>_NODE$.</p>
</dd>
<dt>node_cost_column</dt>
<dd>
<p>Name of the cost column in the node table. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>link_table_name</dt>
<dd>
<p>Name of the link table to be created. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_LINK$.</p>
</dd>
<dt>link_cost_column</dt>
<dd>
<p>Name of the cost column in the link table. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>path_table_name</dt>
<dd>
<p>Name of the path table to be created. (The path table is explained in <a href="sdo_net_concepts.htm#CIHHJIEI">Section 5.9.3</a>.) If this parameter is null, the path table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PATH$.</p>
</dd>
<dt>path_link_table_name</dt>
<dd>
<p>Name of the path-link table to be created. (The path-link table is explained in <a href="sdo_net_concepts.htm#CIHCBCJC">Section 5.9.4</a>.) If this parameter is null, the path-link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PLINK$.</p>
</dd>
<dt>sub_path_table_name</dt>
<dd>
<p>Name of the subpath table to be created. (The subpath table is explained in <a href="sdo_net_concepts.htm#CIHHIJFA">Section 5.9.5</a>.) If this parameter is null, the subpath table name will be in the form <span class="italic">&lt;network-name&gt;</span>_SPATH$.</p>
</dd>
<dt>is_complex</dt>
<dd>
<p>Reserved for future use. Ignored for the current release.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1906"></a>Usage Notes</p>
<p>This procedure creates a logical network in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure provides a convenient way to create a logical network when the node, link, and optional related tables do not already exist. The procedure creates the network in memory. When you save the network objects to the database using the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure, the node, link, path, and path-link tables for the network are created, and the appropriate information is inserted in the xxx_SDO_NETWORK_METADATA views (described in <a href="sdo_net_concepts.htm#CIHGBCAI">Section 5.10.1</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1907"></a>Examples</p>
<p>The following example creates a logical network named <code>MY_LOGICAL_NET</code>. The network has two hierarchy levels and is undirected (<code>'FALSE'</code> for <code>is_directed</code>).</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.CREATE_LOGICAL_NETWORK('MY_LOGICAL_NET', -
  2, 'FALSE', 'MY_NODE_TABLE', 'COST', 'MY_LINK_TABLE', 'COST', -
  'MY_PATH_TABLE', 'MY_PATHLINK_TABLE', 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1092" class="refsect1"><a id="sthref1908"></a>
<h2 class="refsect1"><a id="sthref1909"></a><a id="sthref1910"></a><a id="sthref1911"></a>SDO_NET_MEM.NETWORK_MANAGER.CREATE_LRS_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1912"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.CREATE_LRS_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_hierarchy_levels IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_directed IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srid IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_dims IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_cost_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_cost_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lrs_table_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lrs_geom_column IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_path_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_complex IN VARCHAR2 DEFAULT 'FALSE');</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1913"></a>Description</p>
<p>Creates a spatial network containing LRS SDO_GEOMETRY objects, creates all necessary tables, and updates the network metadata.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1914"></a>Parameters</p>
<dl>
<dt>network_name</dt>
<dd>
<p>Name of the network.</p>
</dd>
<dt>no_of_hierarchy_levels</dt>
<dd>
<p>Number of hierarchy levels for links in the network. (For an explanation of network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.)</p>
</dd>
<dt>is_directed</dt>
<dd>
<p>A string value. <code>TRUE</code> indicates that the links are directed; <code>FALSE</code> indicates that the links are undirected (not directed).</p>
</dd>
<dt>srid</dt>
<dd>
<p>Coordinate system (spatial reference system) associated with the network. Must be specified as either null (no coordinate system is associated) or a value from the SRID column of the SDO_COORD_REF_SYS table (described in <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>).</p>
</dd>
<dt>no_of_dims</dt>
<dd>
<p>Number of dimensions for the data, including the LRS measure dimension.</p>
</dd>
<dt>node_table_name</dt>
<dd>
<p>Name of the node table to be created. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the node table name will be in the form <span class="italic">&lt;network-name&gt;</span>_NODE$.</p>
</dd>
<dt>node_cost_column</dt>
<dd>
<p>Name of the cost column in the node table. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>link_table_name</dt>
<dd>
<p>Name of the link table to be created. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_LINK$.</p>
</dd>
<dt>link_cost_column</dt>
<dd>
<p>Name of the cost column in the link table. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>lrs_table_name</dt>
<dd>
<p>Name of the table to be created for the spatial LRS geometries</p>
</dd>
<dt>lrs_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the table for the spatial LRS geometries.</p>
</dd>
<dt>path_table_name</dt>
<dd>
<p>Name of the path table to be created. (The path table is explained in <a href="sdo_net_concepts.htm#CIHHJIEI">Section 5.9.3</a>.) If this parameter is null, the path table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PATH$.</p>
</dd>
<dt>path_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the path table. If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>path_link_table_name</dt>
<dd>
<p>Name of the path-link table to be created. (The path-link table is explained in <a href="sdo_net_concepts.htm#CIHCBCJC">Section 5.9.4</a>.) If this parameter is null, the path-link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PLINK$.</p>
</dd>
<dt>sub_path_table_name</dt>
<dd>
<p>Name of the subpath table to be created. (The subpath table is explained in <a href="sdo_net_concepts.htm#CIHHIJFA">Section 5.9.5</a>.) If this parameter is null, the subpath table name will be in the form <span class="italic">&lt;network-name&gt;</span>_SPATH$.</p>
</dd>
<dt>sub_path_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the subpath table. If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>is_complex</dt>
<dd>
<p>Reserved for future use. Ignored for the current release.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1915"></a>Usage Notes</p>
<p>This procedure creates a spatial LRS network in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure provides a convenient way to create a spatial LRS network when the node, link, and optional related tables do not already exist. The procedure creates the network in memory. When you save the network objects to the database using the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure, the node, link, path, and path-link tables for the network are created, and the appropriate information is inserted in the xxx_SDO_NETWORK_METADATA views (described in <a href="sdo_net_concepts.htm#CIHGBCAI">Section 5.10.1</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1916"></a>Examples</p>
<p>The following example creates an LRS network named <code>MY_LRS_NET</code>. The network has one hierarchy level, is undirected (<code>'FALSE'</code> for <code>is_directed</code>), is based on SRID 8307, and has three-dimensional geometries.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.CREATE_LRS_NETWORK('MY_LRS_NET', -
  1, 'FALSE', 8307, 3, 'MY_NODE_TABLE', 'COST', 'MY_LINK_TABLE', 'COST', -
  'MY_LRS_TABLE', 'GEOM', 'MY_PATH_TABLE', 'GEOM', -
  'MY_PATHLINK_TABLE', 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGBFIC"></a>
<div id="TOPOL1093" class="refsect1">
<h2 class="refsect1"><a id="sthref1917"></a><a id="sthref1918"></a><a id="sthref1919"></a>SDO_NET_MEM.NETWORK_MANAGER.CREATE_REF_CONSTRAINTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1920"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.CREATE_REF_CONSTRAINTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1921"></a>Description</p>
<p>Creates referential integrity constraints on the link and path tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1922"></a>Parameters</p>
<dl>
<dt>network</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1923"></a>Usage Notes</p>
<p>This procedure creates referential integrity constraints on the link and path tables in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>When the referential integrity constraints are created, they are automatically enabled. You can disable the referential integrity constrains by calling the <a href="#CHDDIAHB">SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS</a> procedure, and enable them again by calling the <a href="#CHDJDBGI">SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS</a> procedure.</p>
<p>This procedure is analogous to using the <code>createRefConstraints</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1924"></a>Examples</p>
<p>The following example creates referential integrity constraints on the link and path tables in the network memory object for the network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.CREATE_REF_CONSTRAINTS('ROADS_NETWORK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1094" class="refsect1"><a id="sthref1925"></a>
<h2 class="refsect1"><a id="sthref1926"></a><a id="sthref1927"></a><a id="sthref1928"></a>SDO_NET_MEM.NETWORK_MANAGER.CREATE_SDO_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1929"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.CREATE_SDO_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_hierarchy_levels IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_directed IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srid IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_dims IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_cost_column IN VARCHAR DEFAULT NULL2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link_cost_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_link_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_path_table_name IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_path_geom_column IN VARCHAR2 DEFAULT NULL,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_complex IN VARCHAR2 DEFAULT 'FALSE');</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1930"></a>Description</p>
<p>Creates a spatial network containing non-LRS SDO_GEOMETRY objects, creates all necessary tables, and updates the network metadata.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1931"></a>Parameters</p>
<dl>
<dt>network_name</dt>
<dd>
<p>Name of the network.</p>
</dd>
<dt>no_of_hierarchy_levels</dt>
<dd>
<p>Number of hierarchy levels for links in the network. (For an explanation of network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.)</p>
</dd>
<dt>is_directed</dt>
<dd>
<p>A string value. <code>TRUE</code> indicates that the links are directed; <code>FALSE</code> indicates that the links are undirected (not directed).</p>
</dd>
<dt>srid</dt>
<dd>
<p>Coordinate system (spatial reference system) associated with the network. Must be specified as either null (no coordinate system is associated) or a value from the SRID column of the SDO_COORD_REF_SYS table (described in <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>).</p>
</dd>
<dt>no_of_dims</dt>
<dd>
<p>Number of dimensions for the spatial data.</p>
</dd>
<dt>node_table_name</dt>
<dd>
<p>Name of the node table to be created. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the node table name will be in the form <span class="italic">&lt;network-name&gt;</span>_NODE$.</p>
</dd>
<dt>node_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the node table. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>node_cost_column</dt>
<dd>
<p>Name of the cost column in the node table. (The node table is explained in <a href="sdo_net_concepts.htm#CIHHHDJE">Section 5.9.1</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>link_table_name</dt>
<dd>
<p>Name of the link table to be created. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_LINK$.</p>
</dd>
<dt>link_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the link table. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>link_cost_column</dt>
<dd>
<p>Name of the cost column in the link table. (The link table is explained in <a href="sdo_net_concepts.htm#CIHIFBFJ">Section 5.9.2</a>.) If this parameter is null, the cost column name will be COST.</p>
</dd>
<dt>path_table_name</dt>
<dd>
<p>Name of the path table to be created. (The path table is explained in <a href="sdo_net_concepts.htm#CIHHJIEI">Section 5.9.3</a>.) If this parameter is null, the path table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PATH$.</p>
</dd>
<dt>path_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the path table. (The path table is explained in <a href="sdo_net_concepts.htm#CIHHJIEI">Section 5.9.3</a>.) If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>path_link_table_name</dt>
<dd>
<p>Name of the path-link table to be created. (The path-link table is explained in <a href="sdo_net_concepts.htm#CIHCBCJC">Section 5.9.4</a>.) If this parameter is null, the path-link table name will be in the form <span class="italic">&lt;network-name&gt;</span>_PLINK$.</p>
</dd>
<dt>sub_path_table_name</dt>
<dd>
<p>Name of the subpath table to be created. (The subpath table is explained in <a href="sdo_net_concepts.htm#CIHHIJFA">Section 5.9.5</a>.) If this parameter is null, the subpath table name will be in the form <span class="italic">&lt;network-name&gt;</span>_SPATH$.</p>
</dd>
<dt>sub_path_geom_column</dt>
<dd>
<p>Name of the column of type SDO_GEOMETRY in the path table. (The path table is explained in <a href="sdo_net_concepts.htm#CIHHJIEI">Section 5.9.3</a>.) If this parameter is null, the geometry column name will be GEOMETRY.</p>
</dd>
<dt>is_complex</dt>
<dd>
<p>Reserved for future use. Ignored for the current release.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1932"></a>Usage Notes</p>
<p>This procedure creates a spatial (SDO) network in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure provides a convenient way to create a spatial (SDO) network when the node, link, and optional related tables do not already exist. The procedure creates the network in memory. When you save the network objects to the database using the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure, the node, link, path, and path-link tables for the network are created, and the appropriate information is inserted in the xxx_SDO_NETWORK_METADATA views (described in <a href="sdo_net_concepts.htm#CIHGBCAI">Section 5.10.1</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1933"></a>Examples</p>
<p>The following example creates an SDO network named <code>MY_SDO_NET</code>. The network has one hierarchy level, is undirected (<code>'FALSE'</code> for <code>is_directed</code>), is based on SRID 8307, and has two-dimensional geometries.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.CREATE_SDO_NETWORK('MY_SDO_NET', -
  1, 'FALSE', 8307, 2, -
  'MY_NODE_TABLE', 'GEOM', 'COST', 'MY_LINK_TABLE', 'GEOM', 'COST', -
  'MY_PATH_TABLE', 'GEOM', 'MY_PATHLINK_TABLE', 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBBJAE"></a>
<div id="TOPOL1095" class="refsect1">
<h2 class="refsect1"><a id="sthref1934"></a><a id="sthref1935"></a>SDO_NET_MEM.NETWORK_MANAGER.DEREGISTER_CONSTRAINT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1936"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.DEREGISTER_CONSTRAINT(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1937"></a>Description</p>
<p>Unloads (removes) the class for the specified network constraint from the Java repository in the database, and deletes the row for that constraint from the USER_SDO_NETWORK_CONSTRAINTS view (described in <a href="sdo_net_concepts.htm#CIHJFCBA">Section 5.10.2</a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated, and it will not be supported in a future release. You are encouraged to use the <a href="sdo_net_ref.htm#CACDGBCJ">SDO_NET.DEREGISTER_CONSTRAINT</a> procedure instead.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1938"></a>Parameters</p>
<dl>
<dt>constraint_name</dt>
<dd>
<p>Name of the network constraint. Must match a value in the CONSTRAINT column of the USER_SDO_NETWORK_CONSTRAINTS view.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1939"></a>Usage Notes</p>
<p>Use this procedure if you want to disable a network constraint that you had previously enabled, such as by using the <a href="#CHDBDDEG">SDO_NET_MEM.NETWORK_MANAGER.REGISTER_CONSTRAINT</a>procedure. For more information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.</p>
<p>This procedure is analogous to using the <code>deregisterConstraint</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1940"></a>Examples</p>
<p>The following example deregisters (disables) a network constraint named <code>GivenProhibitedTurn</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.DEREGISTER_CONSTRAINT('GivenProhibitedTurn');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDIAHB"></a>
<div id="TOPOL1096" class="refsect1">
<h2 class="refsect1"><a id="sthref1941"></a><a id="sthref1942"></a><a id="sthref1943"></a>SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1944"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1945"></a>Description</p>
<p>Disables referential integrity constraints on the link and path tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1946"></a>Parameters</p>
<dl>
<dt>network</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1947"></a>Usage Notes</p>
<p>This procedure disables referential integrity constraints (created using the <a href="#CHDGBFIC">SDO_NET_MEM.NETWORK_MANAGER.CREATE_REF_CONSTRAINTS</a>) on the link and path tables in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>When the referential integrity constraints are created, they are automatically enabled. You can disable the referential integrity constrains by calling the SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS procedure, and enable them again by calling the <a href="#CHDJDBGI">SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS</a> procedure.</p>
<p>This procedure is analogous to using the <code>disableRefConstraints</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1948"></a>Examples</p>
<p>The following example disables the referential integrity constraints on the link and path tables in the network memory object for the network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS('ROADS_NETWORK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1097" class="refsect1"><a id="sthref1949"></a>
<h2 class="refsect1"><a id="sthref1950"></a><a id="sthref1951"></a><a id="sthref1952"></a>SDO_NET_MEM.NETWORK_MANAGER.DROP_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1953"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.DROP_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1954"></a>Description</p>
<p>Drops (deletes) the network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1955"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1956"></a>Usage Notes</p>
<p>This procedure deletes the network in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>dropNetwork</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1957"></a>Examples</p>
<p>The following example deletes the network in the network memory object for the network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.DROP_NETWORK('ROADS_NETWORK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJDBGI"></a>
<div id="TOPOL1098" class="refsect1">
<h2 class="refsect1"><a id="sthref1958"></a><a id="sthref1959"></a><a id="sthref1960"></a>SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1961"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1962"></a>Description</p>
<p>Enables referential integrity constraints on the link and path tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1963"></a>Parameters</p>
<dl>
<dt>network</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1964"></a>Usage Notes</p>
<p>This procedure enables referential integrity constraints (that had been disabled using the <a href="#CHDDIAHB">SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS</a> procedure) on the link and path tables in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>When the referential integrity constraints are created, they are automatically enabled. You can disable the referential integrity constrains by calling the <a href="#CHDDIAHB">SDO_NET_MEM.NETWORK_MANAGER.DISABLE_REF_CONSTRAINTS</a> procedure, and enable them again by calling the SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS procedure.</p>
<p>This procedure is analogous to using the <code>enableRefConstraints</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1965"></a>Examples</p>
<p>The following example enables the referential integrity constraints on the link and path tables in the network memory object for the network named <code>ROADS_NETWORK</code>.</p>
<pre>
EXECUTE SDO_NET_MEM.NETWORK_MANAGER.ENABLE_REF_CONSTRAINTS('ROADS_NETWORK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGIEHB"></a>
<div id="TOPOL1099" class="refsect1">
<h2 class="refsect1"><a id="sthref1966"></a><a id="sthref1967"></a><a id="sthref1968"></a>SDO_NET_MEM.NETWORK_MANAGER.FIND_CONNECTED_COMPONENTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1969"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.FIND_CONNECTED_COMPONENTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1970"></a>Description</p>
<p>Returns the number of groups of connected components.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1971"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1972"></a>Usage Notes</p>
<p>This function returns the number of connected components in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>Connected components are a group of nodes, connected by links, such that each node in the group can reach or be reached from all other nodes in the group. For example, the logical network shown in <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a> contains two groups of connected components: in one group, all nodes in hierarchy level 1 can reach or be reached by all other nodes in that level; and in the other group, the two nodes in hierarchy level 2 can reach each other.</p>
<p>Nodes that belong to the same component have the same component number. To get the component number for a node, use the <a href="#CHDCJEDI">SDO_NET_MEM.NODE.GET_COMPONENT_NO</a> function. To set the component number for a node, use the <a href="#CHDJEBJA">SDO_NET_MEM.NODE.SET_COMPONENT_NO</a> procedure.</p>
<p>This function is analogous to using the <code>findConnectedComponents</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1973"></a>Examples</p>
<p>The following example returns the child links of the link whose link ID is 1001 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NETWORK_MANAGER.FIND_CONNECTED_COMPONENTS(net_mem);
DBMS_OUTPUT.PUT_LINE('The number of connected components is: ' || res_numeric);
. . .
The number of connected components is: 2
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1100" class="refsect1"><a id="sthref1974"></a>
<h2 class="refsect1"><a id="sthref1975"></a><a id="sthref1976"></a>SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHABLE_NODES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1977"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHABLE_NODES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1978"></a>Description</p>
<p>Returns the node ID numbers of nodes that can be reached by a path from a specified source node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1979"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>source_node_id</dt>
<dd>
<p>Node ID of the source node.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1980"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of node ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>If no results can be found that match the criteria, this function returns a null value.</p>
<p>This function is analogous to using the <code>findReachableNodes</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1981"></a>Examples</p>
<p>The following example nodes that can be reached from the node whose node ID is 101 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHABLE_NODES(net_mem,101);
DBMS_OUTPUT.PUT_LINE('Reachable nodes from 101: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  res_numeric := res_array(indx);
  DBMS_OUTPUT.PUT(res_numeric || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Reachable nodes from 101:
103 102 104 106 105 107 108 109 110 113 111 112 114
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1101" class="refsect1"><a id="sthref1982"></a>
<h2 class="refsect1"><a id="sthref1983"></a><a id="sthref1984"></a>SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHING_NODES</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1985"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHING_NODES(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target_node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1986"></a>Description</p>
<p>Returns the node ID numbers of nodes that can reach (by a path) a specified target node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1987"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>target_node_id</dt>
<dd>
<p>Node ID of the target node.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1988"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of node ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>If no results can be found that match the criteria, this function returns a null value.</p>
<p>This function is analogous to using the <code>findReaching_Nodes</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1989"></a>Examples</p>
<p>The following example nodes from which the node whose node ID is 101 in the current network memory object can be reached. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.FIND_REACHING_NODES(net_mem,101);
DBMS_OUTPUT.PUT_LINE('Nodes from which 101 can be reached: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  res_numeric := res_array(indx);
  DBMS_OUTPUT.PUT(res_numeric || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Nodes from which 101 can be reached:
103 102 104 106 105 107 108 109 110 113 111 112 114
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1102" class="refsect1"><a id="sthref1990"></a>
<h2 class="refsect1"><a id="sthref1991"></a><a id="sthref1992"></a>SDO_NET_MEM.NETWORK_MANAGER.IS_REACHABLE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1993"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.IS_REACHABLE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1994"></a>Description</p>
<p>Checks if a specified target node can be reached by a path from a specified source node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1995"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>source_node_id</dt>
<dd>
<p>Node ID of the source node.</p>
</dd>
<dt>target_node_id</dt>
<dd>
<p>Node ID of the target node.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1996"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the target node can be reached from the source node, and the string <code>FALSE</code> if the target node cannot be reached from the source node. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isReachable</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1997"></a>Examples</p>
<p>The following example returns the child links of the link whose link ID is 1001 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NETWORK_MANAGER.IS_REACHABLE(net_mem,101,105);
DBMS_OUTPUT.PUT_LINE('Can node 101 reach node 105? ' || res_string);
. . .
Can node 101 reach node 105? TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1103" class="refsect1"><a id="sthref1998"></a>
<h2 class="refsect1"><a id="sthref1999"></a><a id="sthref2000"></a>SDO_NET_MEM.NETWORK_MANAGER.LIST_NETWORKS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2001"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.LIST_NETWORKS() RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2002"></a>Description</p>
<p>Returns a list of networks.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2003"></a>Parameters</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2004"></a>Usage Notes</p>
<p>This function returns a comma-delimited list of network names in the current network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2005"></a>Examples</p>
<p>The following example returns the names of all networks with network memory objects in the cache. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NETWORK_MANAGER.LIST_NETWORKS;
DBMS_OUTPUT.PUT_LINE('The current in-memory network(s) is/are: ' || res_string);
. . .
The current in-memory network(s) is/are: ROADS_NETWORK
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1104" class="refsect1"><a id="sthref2006"></a>
<h2 class="refsect1"><a id="sthref2007"></a><a id="sthref2008"></a><a id="sthref2009"></a>SDO_NET_MEM.NETWORK_MANAGER.MCST_LINK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2010"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.MCST_LINK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2011"></a>Description</p>
<p>Returns the minimum cost spanning tree.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2012"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2013"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object with the link ID values of links that make up the minimum cost spanning tree in the specified network memory object. <a id="sthref2014"></a>The minimum cost spanning tree is the path with the lowest total cost that visits all nodes in the network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p><a id="sthref2015"></a>The Kruskal algorithm is used to determine the minimum cost spanning tree.</p>
<p>This function is analogous to using the <code>mcstLinkArray</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2016"></a>Examples</p>
<p>The following example returns the links in the minimum cost spanning tree of the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.MCST_LINK(net_mem);
DBMS_OUTPUT.PUT('Network ' || net_mem || ' has the following MCST links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Network XYZ_NETWORK has the following MCST links: 1001 1101 1104 1107 1110 1114
1117 1102 1105 1108 1111 1115 1118 1113
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1105" class="refsect1"><a id="sthref2017"></a>
<h2 class="refsect1"><a id="sthref2018"></a><a id="sthref2019"></a>SDO_NET_MEM.NETWORK_MANAGER.NEAREST_NEIGHBORS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2020"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.NEAREST_NEIGHBORS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no_of_neighbors IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2021"></a>Description</p>
<p>Returns the path ID numbers of paths leading to nodes that are the nearest neighbors (determined by total cost) of a specified start node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2022"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node.</p>
</dd>
<dt>no_of_neighbors</dt>
<dd>
<p>Maximum number of path IDs to return.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2023"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of path ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>If no results can be found that match the criteria, this function returns a null value.</p>
<p>To determine the end node in each path returned, use the <a href="#CHDJBAEG">SDO_NET_MEM.PATH.GET_END_NODE_ID</a> function. To determine the links in each path returned, use the <a href="#CHDFABBH">SDO_NET_MEM.PATH.GET_LINK_IDS</a> function.</p>
<p>This function is analogous to using the <code>nearestNeighbors</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2024"></a>Examples</p>
<p>The following example returns the path IDs of the paths to the three nodes nearest to the node whose node ID is 101 in the current network memory object. It also displays the link IDs for each link in each of the returned paths. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.NEAREST_NEIGHBORS(net_mem,101,3);
DBMS_OUTPUT.PUT_LINE('Path IDs to the nearest 3 neighbors of node 101 are: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  res_numeric := res_array(indx);
  DBMS_OUTPUT.PUT(res_numeric || ', which contains links: ');
  var1_array := SDO_NET_MEM.PATH.GET_LINK_IDS(net_mem, res_numeric);
  FOR indx1 IN var1_array.FIRST..var1_array.LAST
  LOOP
    var1_numeric := var1_array(indx1);
    DBMS_OUTPUT.PUT(var1_numeric || ' ');
  END LOOP;
  DBMS_OUTPUT.PUT_LINE(' ');
END LOOP;
. . .
Path IDs to the nearest 3 neighbors of node 101 are:                            
1, which contains links: 1101                                                   
2, which contains links: 1102                                                   
3, which contains links: 1102 1104
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACBIAEI"></a>
<div id="TOPOL1106" class="refsect1">
<h2 class="refsect1"><a id="sthref2025"></a><a id="sthref2026"></a><a id="sthref2027"></a>SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2028"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow_updates IN VARCHAR2);</p>
<p>or</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;network IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmin IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymin IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmax IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ymax IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow_updates IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2029"></a>Description</p>
<p>Creates a network memory object in virtual memory cache containing all network objects in a network (first format), or those objects completely inside a specified minimum bounding rectangle (MBR) (second format).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2030"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>For the first format: name of the network, all of whose network objects (nodes, links, paths, subpaths) are to be copied into a network memory object that has the same name as the network. For the second format: user-specified name for the network memory object to contain only those network objects completely inside the MBR specified by the <code>xmin</code>, <code>xmax</code>, <code>ymin</code>, and <code>ymax</code> parameters for the network specified by the <code>network</code> parameter.</p>
</dd>
<dt>network</dt>
<dd>
<p>Name of the network from which to add network objects (nodes, links, paths) into the network memory object. Only those objects in the MBR specified by the <code>xmin</code>, <code>xmax</code>, <code>ymin</code>, and <code>ymax</code> parameters are loaded.</p>
</dd>
<dt>xmin</dt>
<dd>
<p>Minimum X coordinate value of the MBR from which objects in the specified network are to be added to the network memory object.</p>
</dd>
<dt>ymin</dt>
<dd>
<p>Minimum Y coordinate value of the MBR from which objects in the specified network are to be added to the network memory object.</p>
</dd>
<dt>xmax</dt>
<dd>
<p>Maximum X coordinate value of the MBR from which objects in the specified network are to be added to the network memory object.</p>
</dd>
<dt>ymax</dt>
<dd>
<p>Maximum Y coordinate value of the MBR from which objects in the specified network are to be added to the network memory object.</p>
</dd>
<dt>allow_updates</dt>
<dd>
<p><code>TRUE</code> specifies that the network memory object is updatable; that is, you can perform editing operations in the cache and have them written back to the database. <code>FALSE</code> specifies that the network memory object is read-only; that is, you cannot perform editing operations in the cache and have them written back to the database.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2031"></a>Usage Notes</p>
<p>This procedure creates a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>For better performance, if you only need to retrieve information or to perform network analysis operations, specify the string <code>FALSE</code> for the <code>allow_updates</code> parameter.</p>
<p>If <code>allow_updates</code> is specified as <code>TRUE</code>, rows in the network tables (node, link, path, and path-link) are locked at the database level (through <code>SELECT ... FOR UPDATE NOWAIT</code> statements). This prevents update or delete operations on the locked elements in other SQL sessions; however, insert operations in other sessions are allowed.</p>
<p>This procedure is analogous to using the <code>readNetwork</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2032"></a>Examples</p>
<p>The following example places a copy of all network objects in the network named <code>NET_LOGICAL</code> into an updatable (<code>'TRUE'</code> for <code>allow_updates</code>) network memory object.</p>
<pre>
SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK('NET_LOGICAL', 'TRUE');
</pre>
<p>The following example places a copy of all network objects inside a specified area of the network named <code>HILLSBOROUGH_NETWORK</code> into a read-only (<code>'FALSE'</code> for <code>allow_updates</code>) network memory object named <code>HILLS_PART1</code>. The objects loaded are in the rectangular area with one corner at longitude/latitude coordinates (-71.64, 43.32) and the other corner at coordinates (-71.32, 43.64). (On a traditional map, these would be the lower-left and upper-right corners, respectively.)</p>
<pre>
SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK('HILLS_PART1', 'HILLSBOROUGH_NETWORK', -71.64, 43.32, -71.32, 43.64, 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBDDEG"></a>
<div id="TOPOL1107" class="refsect1">
<h2 class="refsect1"><a id="sthref2033"></a><a id="sthref2034"></a>SDO_NET_MEM.NETWORK_MANAGER.REGISTER_CONSTRAINT</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2035"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.REGISTER_CONSTRAINT(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directory_name IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2036"></a>Description</p>
<p>Loads the compiled Java code for the specified network constraint into the Java class repository in the database, and loads the class name into the CLASS column of the USER_SDO_NETWORK_CONSTRAINTS view (described in <a href="sdo_net_concepts.htm#CIHJFCBA">Section 5.10.2</a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This procedure is deprecated, and it will not be supported in a future release. You are encouraged to use the <a href="sdo_net_ref.htm#CACCJIEB">SDO_NET.REGISTER_CONSTRAINT</a> procedure instead.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2037"></a>Parameters</p>
<dl>
<dt>constraint_name</dt>
<dd>
<p>Name of the network constraint.</p>
</dd>
</dl>
<dl>
<dt>class_name</dt>
<dd>
<p>Fully qualified name (including the name of the package) of the class that implements the network constraint.</p>
</dd>
</dl>
<dl>
<dt>directory_name</dt>
<dd>
<p>Name of the directory object (created using the SQL statement CREATE DIRECTORY) that identifies the location of the class file created when you compiled the network constraint.</p>
</dd>
</dl>
<dl>
<dt>description</dt>
<dd>
<p>Description of the network constraint.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2038"></a>Usage Notes</p>
<p>Before you call this procedure, you must insert a row into the USER_SDO_NETWORK_CONSTRAINTS view, compile the code for the Java class that implements the network constraint, and use the CREATE DIRECTORY statement to create a directory object identifying the location of the compiled class. For more information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.</p>
<p>To delete the row for the constraint from the USER_SDO_NETWORK_CONSTRAINTS view and thus disable the constraint, use the <a href="#CHDBBJAE">SDO_NET_MEM.NETWORK_MANAGER.DEREGISTER_CONSTRAINT</a> procedure.</p>
<p>This procedure is analogous to using the <code>registerConstraint</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2039"></a>Examples</p>
<p>The following example registers a network constraint named <code>GivenProhibitedTurn</code>.</p>
<pre>
-- Set up the network constraint.
REM
REM Create the geor_dir on the file system first.
REM
-- Connect as SYSTEM.
DECLARE 
  -- This is the directory that contains the CLASS file generated when you
  -- compiled the network constraint.
  geor_dir varchar2(1000) := 'C:\my_data\files81\PROTOTYPES\NETWORK_CONSTRAINT\PLSQL_EXAMPLE';
BEGIN 
  EXECUTE IMMEDIATE 'CREATE OR REPLACE DIRECTORY work_dir AS''' || geor_dir || ''''; 
END;
/
GRANT read,write on directory work_dir to net_con;
 
-- Connect as the user that will register the constraint. 
 
REM
REM Compile GivenProhibitedTurn before you register the constraint.
REM
BEGIN
  SDO_NET_MEM.NETWORK_MANAGER.REGISTER_CONSTRAINT('GivenProhibitedTurn', 
     'com/network/constraints/ProhibitedTurn',
     'WORK_DIR', 'This is a network constraint that '||
     'prohibits certain turns');
 
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDICJCD"></a>
<div id="TOPOL1108" class="refsect1">
<h2 class="refsect1"><a id="sthref2040"></a><a id="sthref2041"></a><a id="sthref2042"></a>SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2043"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goal_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2044"></a>Description</p>
<p>Returns the path ID number of the shortest path (based on the A* search algorithm, and considering costs) between a start node and a goal (end) node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2045"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node.</p>
</dd>
<dt>goal_node_id</dt>
<dd>
<p>Node ID of the goal (end) node.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2046"></a>Usage Notes</p>
<p>This function returns a path ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function returns a null value if no path can be made between the specified nodes. For example, if the state of one or more nodes or links is <code>FALSE</code>, and if this condition causes all possible paths to be ignored, the function will return a null value.</p>
<p>To determine the links in the returned path, use the <a href="#CHDFABBH">SDO_NET_MEM.PATH.GET_LINK_IDS</a> function.</p>
<p>This function is analogous to using the <code>shortestPath</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2047"></a>Examples</p>
<p>The following example returns the path ID of the shortest path between the nodes with node ID values 101 and 105 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH(net_mem,101,105);
DBMS_OUTPUT.PUT_LINE('The shortest path from node 101 to node 105 is path ID: ' || res_numeric);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1109" class="refsect1"><a id="sthref2048"></a>
<h2 class="refsect1"><a id="sthref2049"></a><a id="sthref2050"></a><a id="sthref2051"></a>SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH_DIJKSTRA</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2052"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH_DIJKSTRA(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goal_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2053"></a>Description</p>
<p>Returns the path ID number of the shortest path (based on the Dijkstra search algorithm, and considering costs) between a start node and a goal (end) node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2054"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node.</p>
</dd>
<dt>goal_node_id</dt>
<dd>
<p>Node ID of the goal (end) node.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2055"></a>Usage Notes</p>
<p>This function returns a path ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function returns a null value if no path can be made between the specified nodes. For example, if the state of one or more nodes or links is <code>FALSE</code>, and if this condition causes all possible paths to be ignored, the function will return a null value.</p>
<p>To determine the links in the returned path, use the <a href="#CHDFABBH">SDO_NET_MEM.PATH.GET_LINK_IDS</a> function.</p>
<p>This function is analogous to using the <code>shortestPathDijkstra</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2056"></a>Examples</p>
<p>The following example returns the path ID of the shortest path (based on the Dijkstra search algorithm, and considering costs) between the nodes with node ID values 101 and 105 in the current network memory object. It also displays information about the returned path. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH_DIJKSTRA(net_mem,101,105);
DBMS_OUTPUT.PUT_LINE('The shortest Dijkstra path from node 101 to node 105 is ' || res_numeric);
 
DBMS_OUTPUT.PUT_LINE('The following are characteristics of this shortest path: ');
cost := SDO_NET_MEM.PATH.GET_COST(net_mem, res_numeric);
DBMS_OUTPUT.PUT_LINE('Path ' || res_numeric || ' cost: ' || cost);
res_string := SDO_NET_MEM.PATH.IS_CLOSED(net_mem, res_numeric);  
DBMS_OUTPUT.PUT_LINE('Is path ' || res_numeric || ' closed? ' || res_string);  
    
res_array := SDO_NET_MEM.PATH.GET_LINK_IDS(net_mem, res_numeric);   
DBMS_OUTPUT.PUT('Path ' || res_numeric || ' has links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');

res_array := SDO_NET_MEM.PATH.GET_NODE_IDS(net_mem, res_numeric);   
DBMS_OUTPUT.PUT('Path ' || res_numeric || ' has nodes: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
The shortest Dijkstra path from node 101 to node 105 is 13                      
The following are characteristics of this shortest path:                        
Path 13 cost: 50                                                                
Is path 13 closed? FALSE                                                        
Path 13 has links: 1102 1104 1105                                               
Path 13 has nodes: 101 103 104 105
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1110" class="refsect1"><a id="sthref2057"></a>
<h2 class="refsect1"><a id="sthref2058"></a><a id="sthref2059"></a><a id="sthref2060"></a>SDO_NET_MEM.NETWORK_MANAGER.TSP_PATH</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2061"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.TSP_PATH(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nd_array IN SDO_NUMBER_ARRAY,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_closed IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use_exact_cost IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2062"></a>Description</p>
<p>Returns the path ID number of the most efficient (in cost or distance) path that includes all specified nodes, that is, the path that solves the TSP ("traveling salesman problem" or "traveling salesperson problem") for the specified set of nodes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2063"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>nd_array</dt>
<dd>
<p>An SDO_NUMBER_ARRAY object specifying the node ID numbers of the nodes to be included in the path. The first node specified is always the start node of the returned path. For a closed path, the first node specified is also the last node of the returned path; for an open path, the last node specified is the last node of the returned path.</p>
</dd>
<dt><a id="sthref2064"></a><a id="sthref2065"></a><a id="sthref2066"></a><a id="sthref2067"></a>is_closed</dt>
<dd>
<p>The string value <code>TRUE</code> if the path must be closed (that is, start node and end node in returned path are the same node), or the string value <code>FALSE</code> if the path must be open (that is, end node in the returned path is different from the start node).</p>
</dd>
<dt>use_exact_cost</dt>
<dd>
<p>The string value <code>TRUE</code> if the cost values of links are to be used in calculating the TSP path, or the string value <code>FALSE</code> if the Cartesian distances of links are to be used in calculating the TSP path.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2068"></a>Usage Notes</p>
<p>This function returns a path ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function returns a null value if no TSP path can be made using the specified nodes. For example, if the state of one or more nodes or links is <code>FALSE</code>, and if this condition causes all possible paths to be ignored, the function will return a null value.</p>
<p>If multiple possible paths can be constructed that meet all requirements of the request (for example, if two paths have the same lowest total cost), the returned path can be any of these possible paths.</p>
<p>To determine the links in the returned path, use the <a href="#CHDFABBH">SDO_NET_MEM.PATH.GET_LINK_IDS</a> function.</p>
<p>This function is analogous to using the <code>tspPath</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2069"></a>Examples</p>
<p>The following example returns the path ID of the open TSP path that starts at node ID 2, ends at node ID 6, and includes node ID 4 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NETWORK_MANAGER.TSP_PATH(net_mem, sdo_number_array(2, 4, 6), 'FALSE', 'TRUE');
DBMS_OUTPUT.PUT_LINE('Open TSP path ID for N2, N4, N6: ' || res_numeric);
DBMS_OUTPUT.PUT_LINE('which contains these links: ');
var1_array := SDO_NET_MEM.PATH.GET_LINK_IDS(net_mem, res_numeric);
FOR indx1 IN var1_array.FIRST..var1_array.LAST
LOOP
  var1_numeric := var1_array(indx1);
  DBMS_OUTPUT.PUT(var1_numeric || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Open TSP path ID for N2, N4, N6: 4                                        
which contains these links:                                                     
102 103 104 105  
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1111" class="refsect1"><a id="sthref2070"></a>
<h2 class="refsect1"><a id="sthref2071"></a><a id="sthref2072"></a><a id="sthref2073"></a>SDO_NET_MEM.NETWORK_MANAGER.VALIDATE_NETWORK_SCHEMA</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2074"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.VALIDATE_NETWORK_SCHEMA(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2075"></a>Description</p>
<p>Validates the network tables.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2076"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2077"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the network-related tables in the specified network memory object are valid, and it returns a specific Oracle error message if one or more tables are not valid. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>validateNetworkSchema</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2078"></a>Examples</p>
<p>The following example validates the network tables in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NETWORK_MANAGER.VALIDATE_NETWORK_SCHEMA(net_mem);
 23  DBMS_OUTPUT.PUT_LINE('Is network ' || net_mem || ' valid? ' || res_string);
. . .
Is network XYZ_NETWORK valid? TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1112" class="refsect1"><a id="sthref2079"></a>
<h2 class="refsect1"><a id="sthref2080"></a><a id="sthref2081"></a>SDO_NET_MEM.NETWORK_MANAGER.WITHIN_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2082"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.WITHIN_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start_node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost_limit IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constraint IN VARCHAR2 DEFAULT NULL</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2083"></a>Description</p>
<p>Returns an array of path IDs of the shortest path to each node that is reachable within a specified cost from a specified start node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2084"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>start_node_id</dt>
<dd>
<p>Node ID of the start node.</p>
</dd>
<dt>cost_limit</dt>
<dd>
<p>Maximum total path cost.</p>
</dd>
<dt>constraint</dt>
<dd>
<p>Name of the network constraint to be applied. If this parameter is null, no network constraint is applied. (For information about network constraints, see <a href="sdo_net_concepts.htm#CIHJFIIG">Section 5.6</a>.)</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2085"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of path ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>If no results can be found that match the criteria, this function returns a null value.</p>
<p>To determine the end node in each path returned, use the <a href="#CHDJBAEG">SDO_NET_MEM.PATH.GET_END_NODE_ID</a> function. To determine the links in each path returned, use the <a href="#CHDFABBH">SDO_NET_MEM.PATH.GET_LINK_IDS</a> function.</p>
<p>This function is analogous to using the <code>withinCost</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2086"></a>Examples</p>
<p>The following example returns the path ID values of the shortest path to each node in the current network memory object that is reachable within a cost of 100 from the node with the node ID value of 102. It also displays the end node for each returned path. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NETWORK_MANAGER.WITHIN_COST(net_mem,102,100);
DBMS_OUTPUT.PUT('Shortest path IDs to nodes within cost of 100 from node 102: ');
DBMS_OUTPUT.PUT_LINE(' ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  res_numeric := res_array(indx);
  DBMS_OUTPUT.PUT(res_numeric || ', whose end node is: ');
  var1_numeric := SDO_NET_MEM.PATH.GET_END_NODE_ID(net_mem, res_numeric);
  DBMS_OUTPUT.PUT(var1_numeric);
  DBMS_OUTPUT.PUT_LINE(' ');
END LOOP;
. . .
Shortest path IDs to nodes within cost of 100 from node 102:                             
14, whose end node is: 101                                                      
15, whose end node is: 103                                                      
16, whose end node is: 104                                                      
17, whose end node is: 105                                                      
18, whose end node is: 106                                                      
19, whose end node is: 108                                                      
20, whose end node is: 107
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDGCIC"></a>
<div id="TOPOL1113" class="refsect1">
<h2 class="refsect1"><a id="sthref2087"></a><a id="sthref2088"></a><a id="sthref2089"></a>SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2090"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2091"></a>Description</p>
<p>Saves to the database the network objects in a network memory object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2092"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2093"></a>Usage Notes</p>
<p>This procedure saves the network objects in a network memory object, the use of which is explained in <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>Temporary links, nodes, and paths are not saved in the database when you call this procedure.</p>
<p>This procedure is analogous to using the <code>writeNetwork</code> method of the <code>NetworkManager</code> class of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2094"></a>Examples</p>
<p>The following example saves to the database the network objects in the network memory object for a network named <code>XYZ_NETWORK</code>.</p>
<pre>
sdo_net_mem.network_manager.write_network(net_mem=&gt;'XYZ_NETWORK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1114" class="refsect1"><a id="sthref2095"></a>
<h2 class="refsect1"><a id="sthref2096"></a><a id="sthref2097"></a><a id="sthref2098"></a><a id="sthref2099"></a>SDO_NET_MEM.NODE.GET_ADJACENT_NODE_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2100"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_ADJACENT_NODE_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2101"></a>Description</p>
<p>Returns the node ID numbers of nodes that are adjacent to a specified node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2102"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2103"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of node ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getAdjacentNodeArray</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2104"></a>Examples</p>
<p>The following example returns the nodes adjacent to the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_ADJACENT_NODE_IDS(net_mem, 103);
DBMS_OUTPUT.PUT('Node 103 has the following adjacent nodes: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');

Node 103 has the following adjacent nodes: 102 104 101
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1115" class="refsect1"><a id="sthref2105"></a>
<h2 class="refsect1"><a id="sthref2106"></a><a id="sthref2107"></a><a id="sthref2108"></a><a id="sthref2109"></a>SDO_NET_MEM.NODE.GET_CHILD_NODE_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2110"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_CHILD_NODE_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2111"></a>Description</p>
<p>Returns the node ID numbers of nodes that are child nodes of a specified node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2112"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2113"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of node ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getChildNodeArray</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2114"></a>Examples</p>
<p>The following example returns the child nodes of the node whose node ID is 1 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_CHILD_NODE_IDS(net_mem, 1);
DBMS_OUTPUT.PUT('Node 1 has the following child nodes: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
. . .
Node 1 has the following child nodes: 104 103 105 102 106 101
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCJEDI"></a>
<div id="TOPOL1116" class="refsect1">
<h2 class="refsect1"><a id="sthref2115"></a><a id="sthref2116"></a><a id="sthref2117"></a><a id="sthref2118"></a>SDO_NET_MEM.NODE.GET_COMPONENT_NO</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2119"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_COMPONENT_NO(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2120"></a>Description</p>
<p>Returns the component number of a specified node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2121"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2122"></a>Usage Notes</p>
<p>This function returns a numeric component number for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>All nodes in a group of connected components have the same component number. For an explanation of connected components, see the Usage Notes for the <a href="#CHDGIEHB">SDO_NET_MEM.NETWORK_MANAGER.FIND_CONNECTED_COMPONENTS</a> function.</p>
<p>This function is analogous to using the <code>getComponentNo</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the component number for a node, use the <a href="#CHDJEBJA">SDO_NET_MEM.NODE.SET_COMPONENT_NO</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2123"></a>Examples</p>
<p>The following example returns the component number of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_COMPONENT_NO(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('The component number of node 103 is: ' || res_numeric);
. . .
The component number of node 103 is: 1
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBHIHF"></a>
<div id="TOPOL1117" class="refsect1">
<h2 class="refsect1"><a id="sthref2124"></a><a id="sthref2125"></a><a id="sthref2126"></a><a id="sthref2127"></a>SDO_NET_MEM.NODE.GET_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2128"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2129"></a>Description</p>
<p>Returns the cost value of a specified node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2130"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2131"></a>Usage Notes</p>
<p>This function returns a numeric cost value for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getCost</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the cost value for a node, use the <a href="#CHDDEDJI">SDO_NET_MEM.NODE.SET_COST</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2132"></a>Examples</p>
<p>The following example returns the cost of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_COST(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('The cost of node 103 is: ' || res_numeric);
. . .
The cost of node 103 is: 0
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGJCAE"></a>
<div id="TOPOL1118" class="refsect1">
<h2 class="refsect1"><a id="sthref2133"></a><a id="sthref2134"></a><a id="sthref2135"></a><a id="sthref2136"></a>SDO_NET_MEM.NODE.GET_GEOM_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2137"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_GEOM_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2138"></a>Description</p>
<p>Returns the geometry ID number of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2139"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2140"></a>Usage Notes</p>
<p>This function returns a numeric geometry ID value for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getGeomID</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the geometry ID value for a node, use the <a href="#CHDCJDDJ">SDO_NET_MEM.NODE.SET_GEOM_ID</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2141"></a>Examples</p>
<p>The following example returns the geometry ID of the node whose node ID is 3 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_GEOM_ID(net_mem, 3);
DBMS_OUTPUT.PUT_LINE('The geometry ID of node 3 is: ' || res_numeric);
. . .
The geometry ID of node 3 is: 1001
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDACEG"></a>
<div id="TOPOL1119" class="refsect1">
<h2 class="refsect1"><a id="sthref2142"></a><a id="sthref2143"></a><a id="sthref2144"></a><a id="sthref2145"></a>SDO_NET_MEM.NODE.GET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2146"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2147"></a>Description</p>
<p>Returns the spatial geometry for a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2148"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2149"></a>Usage Notes</p>
<p>This function returns an SDO_GEOMETRY object for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getGeometry</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the spatial geometry for a node, use the <a href="#CHDIEFHD">SDO_NET_MEM.NODE.SET_GEOMETRY</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2150"></a>Examples</p>
<p>The following example returns the spatial geometry of the node whose node ID is 3 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_geom := SDO_NET_MEM.NODE.GET_GEOMETRY(net_mem, 3);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBGFJH"></a>
<div id="TOPOL1120" class="refsect1">
<h2 class="refsect1"><a id="sthref2151"></a><a id="sthref2152"></a><a id="sthref2153"></a><a id="sthref2154"></a>SDO_NET_MEM.NODE.GET_HIERARCHY_LEVEL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2155"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_HIERARCHY_LEVEL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2156"></a>Description</p>
<p>Returns the hierarchy level of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2157"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2158"></a>Usage Notes</p>
<p>This function returns a numeric hierarchy level for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getHierarchyLevel</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the hierarchy level for a node, use the <a href="#CHDFGCGG">SDO_NET_MEM.NODE.SET_HIERARCHY_LEVEL</a> procedure.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2159"></a>Examples</p>
<p>The following example returns the hierarchy level of the node whose node ID is 1 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_HIERARCHY_LEVEL(net_mem, 1);
DBMS_OUTPUT.PUT_LINE('The hierarchy level of node 1 is: ' || res_numeric);
. . .
The hierarchy level of node 1 is: 2
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1121" class="refsect1"><a id="sthref2160"></a>
<h2 class="refsect1"><a id="sthref2161"></a><a id="sthref2162"></a><a id="sthref2163"></a><a id="sthref2164"></a>SDO_NET_MEM.NODE.GET_IN_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2165"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_IN_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2166"></a>Description</p>
<p>Returns the link ID numbers of links that are inbound links to a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2167"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2168"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of link ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getInLinks</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2169"></a>Examples</p>
<p>The following example returns the inbound links to the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_IN_LINK_IDS(net_mem, 103);
DBMS_OUTPUT.PUT('Node 103 has the following inbound links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
. . .
Node 103 has the following inbound links: 1102 1103
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1122" class="refsect1"><a id="sthref2170"></a>
<h2 class="refsect1"><a id="sthref2171"></a><a id="sthref2172"></a><a id="sthref2173"></a><a id="sthref2174"></a>SDO_NET_MEM.NODE.GET_INCIDENT_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2175"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_INCIDENT_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2176"></a>Description</p>
<p>Returns the link ID numbers of links that are to (that is, incident upon) a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2177"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2178"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of link ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getIncidentLinks</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2179"></a>Examples</p>
<p>The following example returns the incident links of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_INCIDENT_LINK_IDS(net_mem, 103);
DBMS_OUTPUT.PUT('Node 103 has the following incident links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
. . .
Node 103 has the following incident links: 1102 1104 1103
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHEIDH"></a>
<div id="TOPOL1123" class="refsect1">
<h2 class="refsect1"><a id="sthref2180"></a><a id="sthref2181"></a><a id="sthref2182"></a><a id="sthref2183"></a>SDO_NET_MEM.NODE.GET_MEASURE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2184"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_MEASURE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2185"></a>Description</p>
<p>Returns the measure value of a node in an LRS network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2186"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2187"></a>Usage Notes</p>
<p>This function returns a numeric measure value for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getMeasure</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the measure value for a node, use the <a href="#CHDBAABH">SDO_NET_MEM.NODE.SET_MEASURE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2188"></a>Examples</p>
<p>The following example returns the measure value of the node whose node ID is 3 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_MEASURE(net_mem, 3);
DBMS_OUTPUT.PUT_LINE('The measure value of node 3 is: ' || res_numeric);
. . .
The measure value of node 3 is: 8
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDECCC"></a>
<div id="TOPOL1124" class="refsect1">
<h2 class="refsect1"><a id="sthref2189"></a><a id="sthref2190"></a><a id="sthref2191"></a><a id="sthref2192"></a>SDO_NET_MEM.NODE.GET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2193"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2194"></a>Description</p>
<p>Returns the name of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2195"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2196"></a>Usage Notes</p>
<p>This function returns a node name string for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getName</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the name of a node, use the <a href="#CHDHDEJG">SDO_NET_MEM.NODE.SET_NAME</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2197"></a>Examples</p>
<p>The following example returns the name of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.GET_NAME(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('The name of node 103 is: ' || res_string);
. . .
The name of node 103 is: N3
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1125" class="refsect1"><a id="sthref2198"></a>
<h2 class="refsect1"><a id="sthref2199"></a><a id="sthref2200"></a><a id="sthref2201"></a><a id="sthref2202"></a>SDO_NET_MEM.NODE.GET_OUT_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2203"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_OUT_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2204"></a>Description</p>
<p>Returns the link ID numbers of links that are outbound links from a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2205"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2206"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of link ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getOutLinks</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2207"></a>Examples</p>
<p>The following example returns the outbound links from the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_OUT_LINK_IDS(net_mem, 103);
DBMS_OUTPUT.PUT('Node 103 has the following outbound links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
. . .
Node 103 has the following outbound links: 1104
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIBCJC"></a>
<div id="TOPOL1126" class="refsect1">
<h2 class="refsect1"><a id="sthref2208"></a><a id="sthref2209"></a><a id="sthref2210"></a><a id="sthref2211"></a>SDO_NET_MEM.NODE.GET_PARENT_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2212"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_PARENT_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2213"></a>Description</p>
<p>Returns the node ID number of the parent node of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2214"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2215"></a>Usage Notes</p>
<p>This function returns numeric node ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getParentNode</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the parent node of a node, use the <a href="#CHDDEECB">SDO_NET_MEM.NODE.SET_PARENT_NODE</a> procedure.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2216"></a>Examples</p>
<p>The following example returns the parent node of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_numeric := SDO_NET_MEM.NODE.GET_PARENT_NODE_ID(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('The parent node of node 103 is: ' || res_numeric);
. . .
The parent node of node 103 is: 1
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1127" class="refsect1"><a id="sthref2217"></a>
<h2 class="refsect1"><a id="sthref2218"></a><a id="sthref2219"></a><a id="sthref2220"></a><a id="sthref2221"></a>SDO_NET_MEM.NODE.GET_SIBLING_NODE_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2222"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_SIBLING_NODE_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2223"></a>Description</p>
<p>Returns the node ID numbers of nodes that are sibling nodes of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2224"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2225"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object of node ID values in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getSiblingNodeArray</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>Sibling nodes are nodes that have the same parent node in a hierarchical network. For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2226"></a>Examples</p>
<p>The following example returns the sibling nodes of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_array := SDO_NET_MEM.NODE.GET_SIBLING_NODE_IDS(net_mem, 103);
DBMS_OUTPUT.PUT('Node 103 has the following sibling nodes: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Node 103 has the following sibling nodes: 104 105 102 106 101
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDFHGH"></a>
<div id="TOPOL1128" class="refsect1">
<h2 class="refsect1"><a id="sthref2227"></a><a id="sthref2228"></a><a id="sthref2229"></a><a id="sthref2230"></a>SDO_NET_MEM.NODE.GET_STATE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2231"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_STATE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2232"></a>Description</p>
<p>Returns the state of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2233"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2234"></a>Usage Notes</p>
<p>This function returns a state name string for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>The state is one of the following string values: <code>TRUE</code> or <code>FALSE</code>. The node state determines whether or not the node is considered by network analysis functions, such as <a href="#CHDICJCD">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH</a>. If the state is <code>TRUE</code>, the node is considered by network analysis functions; if the state is <code>FALSE</code>, the node is ignored by these functions.</p>
<p>This function is analogous to using the <code>getState</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the state of a node, use the <a href="#CHDIEGJF">SDO_NET_MEM.NODE.SET_STATE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2235"></a>Examples</p>
<p>The following example returns the state of the node whose node ID is 103 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.GET_STATE(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('The state of node 103 is: ' || res_string);
. . .
The state of node 103 is: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFAEII"></a>
<div id="TOPOL1129" class="refsect1">
<h2 class="refsect1"><a id="sthref2236"></a><a id="sthref2237"></a><a id="sthref2238"></a><a id="sthref2239"></a>SDO_NET_MEM.NODE.GET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2240"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.GET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2241"></a>Description</p>
<p>Returns the type of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2242"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2243"></a>Usage Notes</p>
<p>This function returns a type name string for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getType</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the type of a node, use the <a href="#CHDCFIAE">SDO_NET_MEM.NODE.SET_TYPE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2244"></a>Examples</p>
<p>The following example sets the type of the node whose node ID is 114 in the current network memory object, and then returns the type. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
-- SET_TYPE
-- Set the type of node 114 to 'Research'.
SDO_NET_MEM.NODE.SET_TYPE(net_mem, 114, 'Research');
-- GET_TYPE
res_string := SDO_NET_MEM.NODE.GET_TYPE(net_mem, 114);
DBMS_OUTPUT.PUT_LINE('The type of node 114 is: ' || res_string);
. . .
The type of node 114 is: Research
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1130" class="refsect1"><a id="sthref2245"></a>
<h2 class="refsect1"><a id="sthref2246"></a><a id="sthref2247"></a><a id="sthref2248"></a><a id="sthref2249"></a>SDO_NET_MEM.NODE.IS_ACTIVE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2250"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.IS_ACTIVE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2251"></a>Description</p>
<p>Checks if a node is active.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2252"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2253"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the node in the specified network memory object is active, or <code>FALSE</code> if the node is not active. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isActive</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2254"></a>Examples</p>
<p>The following example checks if the node whose node ID is 103 in the current network memory object is active. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.IS_ACTIVE(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('Is node 103 active?: ' || res_string);
. . .
Is node 103 active?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1131" class="refsect1"><a id="sthref2255"></a>
<h2 class="refsect1"><a id="sthref2256"></a><a id="sthref2257"></a><a id="sthref2258"></a>SDO_NET_MEM.NODE.IS_LOGICAL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2259"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.IS_LOGICAL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2260"></a>Description</p>
<p>Checks if a node is in a logical network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2261"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2262"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the node in the specified network memory object is in a logical network, or <code>FALSE</code> if the node is not in a logical network. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isLogical</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2263"></a>Examples</p>
<p>The following example checks if the node whose node ID is 103 in the current network memory object is in a logical network. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.IS_LOGICAL(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('Is node 103 a logical node?: ' || res_string);
. . .
Is node 103 a logical node?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHIFBC"></a>
<div id="TOPOL1132" class="refsect1">
<h2 class="refsect1"><a id="sthref2264"></a><a id="sthref2265"></a><a id="sthref2266"></a><a id="sthref2267"></a>SDO_NET_MEM.NODE.IS_TEMPORARY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2268"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.IS_TEMPORARY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2269"></a>Description</p>
<p>Checks if a node is temporary.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2270"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2271"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the node in the specified network memory object is temporary, or <code>FALSE</code> if the node is not temporary. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>Temporary links, nodes, and paths are not saved in the database when you call the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure.</p>
<p>This function is analogous to using the <code>isTemporary</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2272"></a>Examples</p>
<p>The following example checks if the node whose node ID is 103 in the current network memory object is temporary. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.IS_TEMPORARY(net_mem, 103);
DBMS_OUTPUT.PUT_LINE('Is node 103 temporary?: ' || res_string);
. . .
Is node 103 temporary?: FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1133" class="refsect1"><a id="sthref2273"></a>
<h2 class="refsect1"><a id="sthref2274"></a><a id="sthref2275"></a><a id="sthref2276"></a>SDO_NET_MEM.NODE.LINK_EXISTS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2277"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.LINK_EXISTS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id1 IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id2 IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2278"></a>Description</p>
<p>Checks if a link exists between two nodes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2279"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id1</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>node_id2</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2280"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if a link exists between the two nodes in the specified network memory object, or <code>FALSE</code> if a link does not exist. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>linkExists</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2281"></a>Examples</p>
<p>The following example checks if a link exists between the nodes with node ID values 103 and 104 in the current network memory object. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
res_string := SDO_NET_MEM.NODE.LINK_EXISTS(net_mem, 103, 104);
DBMS_OUTPUT.PUT_LINE('Does a link exist between nodes 103 and 104?: ' || res_string);
. . .
Does a link exist between nodes 103 and 104?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1134" class="refsect1"><a id="sthref2282"></a>
<h2 class="refsect1"><a id="sthref2283"></a><a id="sthref2284"></a><a id="sthref2285"></a><a id="sthref2286"></a>SDO_NET_MEM.NODE.MAKE_TEMPORARY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2287"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.MAKE_TEMPORARY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2288"></a>Description</p>
<p>Makes a node temporary.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2289"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2290"></a>Usage Notes</p>
<p>This procedure makes the node in the specified network memory object temporary. (Temporary links, nodes, and paths are not saved in the database when you call the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure.) For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>makeTemporary</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To check if a node in a network memory object is temporary, use the <a href="#CHDHIFBC">SDO_NET_MEM.NODE.IS_TEMPORARY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2291"></a>Examples</p>
<p>The following example makes the node whose node ID is 114 in the current network memory object a temporary node. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.MAKE_TEMPORARY(net_mem, 114);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJEBJA"></a>
<div id="TOPOL1135" class="refsect1">
<h2 class="refsect1"><a id="sthref2292"></a><a id="sthref2293"></a><a id="sthref2294"></a><a id="sthref2295"></a>SDO_NET_MEM.NODE.SET_COMPONENT_NO</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2296"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_COMPONENT_NO(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;no IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2297"></a>Description</p>
<p>Sets the component number of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2298"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>no</dt>
<dd>
<p>Component number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2299"></a>Usage Notes</p>
<p>This procedure sets a node component number value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>All nodes in a group of connected components have the same component number. For an explanation of connected components, see the Usage Notes for the <a href="#CHDGIEHB">SDO_NET_MEM.NETWORK_MANAGER.FIND_CONNECTED_COMPONENTS</a> function.</p>
<p>This procedure is analogous to using the <code>setComponentNo</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the node component value for a node, use the <a href="#CHDCJEDI">SDO_NET_MEM.NODE.GET_COMPONENT_NO</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2300"></a>Examples</p>
<p>The following example sets the component number of the node whose node ID is 114 in the current network memory object to 987. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_COMPONENT_NO(net_mem, 114, 987);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEDJI"></a>
<div id="TOPOL1136" class="refsect1">
<h2 class="refsect1"><a id="sthref2301"></a><a id="sthref2302"></a><a id="sthref2303"></a><a id="sthref2304"></a>SDO_NET_MEM.NODE.SET_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2305"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2306"></a>Description</p>
<p>Sets the cost value of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2307"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>cost</dt>
<dd>
<p>Cost value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2308"></a>Usage Notes</p>
<p>This procedure sets a numeric node cost value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setCost</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the cost value for a node, use the <a href="#CHDBHIHF">SDO_NET_MEM.NODE.GET_COST</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2309"></a>Examples</p>
<p>The following example sets the cost of the node whose node ID is 114 in the current network memory object to 40. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_COST(net_mem, 114, 40);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCJDDJ"></a>
<div id="TOPOL1137" class="refsect1">
<h2 class="refsect1"><a id="sthref2310"></a><a id="sthref2311"></a><a id="sthref2312"></a><a id="sthref2313"></a>SDO_NET_MEM.NODE.SET_GEOM_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2314"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_GEOM_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2315"></a>Description</p>
<p>Sets the geometry ID value of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2316"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Geometry ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2317"></a>Usage Notes</p>
<p>This procedure sets a numeric node geometry ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setGeomID</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the geometry ID value for a node, use the <a href="#CHDGJCAE">SDO_NET_MEM.NODE.GET_GEOM_ID</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2318"></a>Examples</p>
<p>The following example sets the geometry ID of the node whose node ID is 7 in the current network memory object to 99. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_GEOM_ID(net_mem, 7, 99);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIEFHD"></a>
<div id="TOPOL1138" class="refsect1">
<h2 class="refsect1"><a id="sthref2319"></a><a id="sthref2320"></a><a id="sthref2321"></a><a id="sthref2322"></a>SDO_NET_MEM.NODE.SET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2323"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2324"></a>Description</p>
<p>Sets the geometry for a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2325"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Spatial geometry object.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2326"></a>Usage Notes</p>
<p>This procedure creates an SDO_GEOMETRY object for the node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setGeometry</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the geometry for a node, use the <a href="#CHDDACEG">SDO_NET_MEM.NODE.GET_GEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2327"></a>Examples</p>
<p>The following example sets the geometry of the node whose node ID is 114 in the network memory object for a network named <code>MY_NETWORK</code>.</p>
<pre>
SDO_NET_MEM.NODE.SET_GEOMETRY('MY_NETWORK', 114,
  SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(9,4,NULL), NULL, NULL));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFGCGG"></a>
<div id="TOPOL1139" class="refsect1">
<h2 class="refsect1"><a id="sthref2328"></a><a id="sthref2329"></a><a id="sthref2330"></a><a id="sthref2331"></a>SDO_NET_MEM.NODE.SET_HIERARCHY_LEVEL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2332"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_HIERARCHY_LEVEL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2333"></a>Description</p>
<p>Sets the hierarchy level of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2334"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>level</dt>
<dd>
<p>Hierarchy level number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2335"></a>Usage Notes</p>
<p>This procedure sets a numeric hierarchy level value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setHierarchyLevel</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the hierarchy level of a node, use the <a href="#CHDBGFJH">SDO_NET_MEM.NODE.GET_HIERARCHY_LEVEL</a> function.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2336"></a>Examples</p>
<p>The following example sets the hierarchy level whose node ID is 1 in the current network memory object to 2.</p>
<pre>
SDO_NET_MEM.NODE.SET_HIERARCHY_LEVEL(net_mem, 1, 2);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBAABH"></a>
<div id="TOPOL1140" class="refsect1">
<h2 class="refsect1"><a id="sthref2337"></a><a id="sthref2338"></a><a id="sthref2339"></a><a id="sthref2340"></a>SDO_NET_MEM.NODE.SET_MEASURE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2341"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_MEASURE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;measure IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2342"></a>Description</p>
<p>Sets the measure value of a node in an LRS network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2343"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>measure</dt>
<dd>
<p>Measure value.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2344"></a>Usage Notes</p>
<p>This procedure sets a numeric node measure value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setMeasure</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the measure value of a node, use the <a href="#CHDHEIDH">SDO_NET_MEM.NODE.GET_MEASURE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2345"></a>Examples</p>
<p>The following example sets the measure value of the node whose node ID is 7 in the current network memory object to 30. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHGEADB">Example 5-4</a> in <a href="sdo_net_concepts.htm#CIHHDGHI">Section 5.13.3</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_MEASURE(net_mem, 7, 30);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHDEJG"></a>
<div id="TOPOL1141" class="refsect1">
<h2 class="refsect1"><a id="sthref2346"></a><a id="sthref2347"></a><a id="sthref2348"></a><a id="sthref2349"></a>SDO_NET_MEM.NODE.SET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2350"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2351"></a>Description</p>
<p>Sets the name of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2352"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>node_name</dt>
<dd>
<p>Node name.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2353"></a>Usage Notes</p>
<p>This procedure sets a node name string value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setName</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the name of a node, use the <a href="#CHDDECCC">SDO_NET_MEM.NODE.GET_NAME</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2354"></a>Examples</p>
<p>The following example sets the name of the node whose node ID is 114 in the current network memory object to the string <code>My favorite node</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_NAME(net_mem, 114, 'My favorite node');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEECB"></a>
<div id="TOPOL1142" class="refsect1">
<h2 class="refsect1"><a id="sthref2355"></a><a id="sthref2356"></a><a id="sthref2357"></a><a id="sthref2358"></a>SDO_NET_MEM.NODE.SET_PARENT_NODE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2359"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_PARENT_NODE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent_node_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2360"></a>Description</p>
<p>Sets the parent node of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2361"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>parent_node_id</dt>
<dd>
<p>Parent node ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2362"></a>Usage Notes</p>
<p>This procedure specifies the parent node for a node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setParentNode</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the ID value for a parent node, use the <a href="#CHDIBCJC">SDO_NET_MEM.NODE.GET_PARENT_NODE_ID</a> function.</p>
<p>For information about parent and child nodes and links in a network hierarchy, see <a href="sdo_net_concepts.htm#CIHDHHGB">Section 5.5</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2363"></a>Examples</p>
<p>The following example sets the parent node of the node whose node ID is 114 in the current network memory object to the node whose node ID is 1. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_PARENT_NODE(net_mem, 114, 1);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDIEGJF"></a>
<div id="TOPOL1143" class="refsect1">
<h2 class="refsect1"><a id="sthref2364"></a><a id="sthref2365"></a><a id="sthref2366"></a><a id="sthref2367"></a>SDO_NET_MEM.NODE.SET_STATE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2368"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_STATE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2369"></a>Description</p>
<p>Sets the state of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2370"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>state</dt>
<dd>
<p>Node state. Must be one of the following string values: <code>TRUE</code> or <code>FALSE</code>.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2371"></a>Usage Notes</p>
<p>This procedure sets a node state string value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>The node state determines whether or not the node is considered by network analysis functions, such as <a href="#CHDICJCD">SDO_NET_MEM.NETWORK_MANAGER.SHORTEST_PATH</a>. If the state is <code>TRUE</code>, the node is considered by network analysis functions; if the state is <code>FALSE</code>, the node is ignored by these functions.</p>
<p>This procedure is analogous to using the <code>setState</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the node state, use the <a href="#CHDDFHGH">SDO_NET_MEM.NODE.GET_STATE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2372"></a>Examples</p>
<p>The following example sets the state of the node whose node ID is 111 in the current network memory object to the string <code>FALSE</code>. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
SDO_NET_MEM.NODE.SET_STATE(net_mem, 111, 'FALSE');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCFIAE"></a>
<div id="TOPOL1144" class="refsect1">
<h2 class="refsect1"><a id="sthref2373"></a><a id="sthref2374"></a><a id="sthref2375"></a><a id="sthref2376"></a>SDO_NET_MEM.NODE.SET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2377"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.NODE.SET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2378"></a>Description</p>
<p>Sets the type of a node.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2379"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>node_id</dt>
<dd>
<p>Node ID number.</p>
</dd>
<dt>type</dt>
<dd>
<p>Node type.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2380"></a>Usage Notes</p>
<p>This procedure sets a node type string value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setType</code> method of the <code>Node</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the type value for a node, use the <a href="#CHDFAEII">SDO_NET_MEM.NODE.GET_TYPE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2381"></a>Examples</p>
<p>The following example sets the type of the node whose node ID is 114 in the current network memory object, and then returns the type. (This example is an excerpt from <a href="sdo_net_concepts.htm#CIHCJAIG">Example 5-5</a> in <a href="sdo_net_concepts.htm#CIHIJJEA">Section 5.13.4</a>.)</p>
<pre>
-- SET_TYPE
-- Set the type of node 114 to 'Research'.
SDO_NET_MEM.NODE.SET_TYPE(net_mem, 114, 'Research');
-- GET_TYPE
res_string := SDO_NET_MEM.NODE.GET_TYPE(net_mem, 114);
DBMS_OUTPUT.PUT_LINE('The type of node 114 is: ' || res_string);
. . .
The type of node 114 is: Research
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHHBIG"></a>
<div id="TOPOL1145" class="refsect1">
<h2 class="refsect1"><a id="sthref2382"></a><a id="sthref2383"></a><a id="sthref2384"></a><a id="sthref2385"></a>SDO_NET_MEM.PATH.COMPUTE_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2386"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.COMPUTE_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tolerance IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2387"></a>Description</p>
<p>Sets the spatial geometry for a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2388"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
<dt>tolerance</dt>
<dd>
<p>Tolerance value associated with geometries in the network. (Tolerance is explained in Chapter 1 of <a class="olink SPATL" href="../e11830/toc.htm"><span class="italic">Oracle Spatial Developer's Guide</span></a>.) This value should be consistent with the tolerance values of the geometries in the link table and node table for the network.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2389"></a>Usage Notes</p>
<p>This procedure computes the SDO_GEOMETRY object for the specified path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>computeGeometry</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the computed geometry, use the <a href="#CHDHFFDJ">SDO_NET_MEM.PATH.GET_GEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2390"></a>Examples</p>
<p>The following example computes the spatial geometry of a path in the current network memory object, and then places the computed geometry in a variable (of type SDO_GEOMETRY) named <code>res_geom</code>.</p>
<pre>
-- COMPUTE_GEOMETRY
SDO_NET_MEM.PATH.COMPUTE_GEOMETRY(net_mem, path_id, 0.05);
-- GET_GEOMETRY
res_geom := SDO_NET_MEM.PATH.GET_GEOMETRY(net_mem, path_id);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1146" class="refsect1"><a id="sthref2391"></a>
<h2 class="refsect1"><a id="sthref2392"></a><a id="sthref2393"></a><a id="sthref2394"></a><a id="sthref2395"></a>SDO_NET_MEM.PATH.GET_COST</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2396"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_COST(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2397"></a>Description</p>
<p>Returns the cost value of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2398"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2399"></a>Usage Notes</p>
<p>This function returns a numeric cost value for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getCost</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2400"></a>Examples</p>
<p>The following example returns the cost of a path in the current network memory object.</p>
<pre>
res_numeric := SDO_NET_MEM.PATH.GET_COST(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The cost of path ' || path_id || ' is: ' || res_numeric);
. . .
The cost of path 21 is: 50
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDJBAEG"></a>
<div id="TOPOL1147" class="refsect1">
<h2 class="refsect1"><a id="sthref2401"></a><a id="sthref2402"></a><a id="sthref2403"></a><a id="sthref2404"></a>SDO_NET_MEM.PATH.GET_END_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2405"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_END_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2406"></a>Description</p>
<p>Returns the node ID value of the end node of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2407"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2408"></a>Usage Notes</p>
<p>This function returns a numeric end node ID value for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getEndNodeID</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2409"></a>Examples</p>
<p>The following example returns the node ID of the end node of a path in the current network memory object.</p>
<pre>
res_numeric := SDO_NET_MEM.PATH.GET_END_NODE_ID(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The end node ID of path ' || path_id || ' is: ' || res_numeric);
. . .
The end node ID of path 21 is: 105
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHFFDJ"></a>
<div id="TOPOL1148" class="refsect1">
<h2 class="refsect1"><a id="sthref2410"></a><a id="sthref2411"></a><a id="sthref2412"></a><a id="sthref2413"></a>SDO_NET_MEM.PATH.GET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2414"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_GEOMETRY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2415"></a>Description</p>
<p>Returns the spatial geometry of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2416"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2417"></a>Usage Notes</p>
<p>This function returns an SDO_GEOMETRY object for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>If you have not previously computed the geometry using the <a href="#CHDHHBIG">SDO_NET_MEM.PATH.COMPUTE_GEOMETRY</a> procedure, the GET_GEOMETRY function returns a null result. To return the actual geometry, you must first call the <a href="#CHDHHBIG">SDO_NET_MEM.PATH.COMPUTE_GEOMETRY</a> procedure.</p>
<p>This function is analogous to using the <code>getPath</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the geometry ID value for a path, use the <a href="#CACHAJEF">SDO_NET_MEM.PATH.SET_GEOMETRY</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2418"></a>Examples</p>
<p>The following example returns the spatial geometry of a path in the current network memory object.</p>
<pre>
res_geom := SDO_NET_MEM.PATH.GET_GEOMETRY(net_mem, path_id);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFABBH"></a>
<div id="TOPOL1149" class="refsect1">
<h2 class="refsect1"><a id="sthref2419"></a><a id="sthref2420"></a><a id="sthref2421"></a><a id="sthref2422"></a>SDO_NET_MEM.PATH.GET_LINK_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2423"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_LINK_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2424"></a>Description</p>
<p>Returns an array of link ID values of the links in a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2425"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2426"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object with link ID values for links in a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getLinks</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2427"></a>Examples</p>
<p>The following example returns the links in a path in the current network memory object.</p>
<pre>
res_array := SDO_NET_MEM.PATH.GET_LINK_IDS(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Path ' || path_id || ' has the following links: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
. . .
Path 21 has the following links:                                                
1102 1104 1105
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEHDIC"></a>
<div id="TOPOL1150" class="refsect1">
<h2 class="refsect1"><a id="sthref2428"></a><a id="sthref2429"></a><a id="sthref2430"></a><a id="sthref2431"></a>SDO_NET_MEM.PATH.GET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2432"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2433"></a>Description</p>
<p>Returns the name of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2434"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2435"></a>Usage Notes</p>
<p>This function returns a path name string for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getName</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the name for a path, use the <a href="#CACGFBBD">SDO_NET_MEM.PATH.SET_NAME</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2436"></a>Examples</p>
<p>The following example sets the name of a path in the current network memory object to the string <code>My favorite path</code>, and then returns the name.</p>
<pre>
-- SET_NAME
-- Set the name of path to 'My favorite path'.
SDO_NET_MEM.PATH.SET_NAME(net_mem, path_id, 'My favorite path');
-- GET_NAME
res_string := SDO_NET_MEM.PATH.GET_NAME(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The name of path ' || path_id || ' is: ' || res_string);
. . .
The name of path 21 is: My favorite path
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1151" class="refsect1"><a id="sthref2437"></a>
<h2 class="refsect1"><a id="sthref2438"></a><a id="sthref2439"></a><a id="sthref2440"></a>SDO_NET_MEM.PATH.GET_NO_OF_LINKS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2441"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_NO_OF_LINKS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2442"></a>Description</p>
<p>Returns the number of links in a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2443"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2444"></a>Usage Notes</p>
<p>This function returns the number of links in a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getNoOfLinks</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2445"></a>Examples</p>
<p>The following example returns the number of links in a path in the current network memory object.</p>
<pre>
res_numeric := SDO_NET_MEM.PATH.GET_NO_OF_LINKS(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The number of links in path ' || path_id || ' is: ' || res_numeric);
. . .
The number of links in path 21 is: 3
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1152" class="refsect1"><a id="sthref2446"></a>
<h2 class="refsect1"><a id="sthref2447"></a><a id="sthref2448"></a><a id="sthref2449"></a>SDO_NET_MEM.PATH.GET_NODE_IDS</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2450"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_NODE_IDS(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN SDO_NUMBER_ARRAY;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2451"></a>Description</p>
<p>Returns an array of node ID values of the nodes in a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2452"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2453"></a>Usage Notes</p>
<p>This function returns an SDO_NUMBER_ARRAY object with node ID values for nodes in a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getNodes</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2454"></a>Examples</p>
<p>The following example returns the node IDs of the nodes in a path in the current network memory object.</p>
<pre>
res_array := SDO_NET_MEM.PATH.GET_NODE_IDS(net_mem, path_id);
DBMS_OUTPUT.PUT('Path ' || path_id || ' has the following nodes: ');
FOR indx IN res_array.FIRST..res_array.LAST
LOOP
  DBMS_OUTPUT.PUT(res_array(indx) || ' ');
END LOOP;
DBMS_OUTPUT.PUT_LINE(' ');
. . .
Path 21 has the following nodes: 101 103 104 105
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1153" class="refsect1"><a id="sthref2455"></a>
<h2 class="refsect1"><a id="sthref2456"></a><a id="sthref2457"></a><a id="sthref2458"></a><a id="sthref2459"></a>SDO_NET_MEM.PATH.GET_START_NODE_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2460"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_START_NODE_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN NUMBER;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2461"></a>Description</p>
<p>Returns the node ID value of the start node of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2462"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2463"></a>Usage Notes</p>
<p>This function returns a numeric start node ID value for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getStartNode</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2464"></a>Examples</p>
<p>The following example returns the start node ID of a path in the current network memory object.</p>
<pre>
res_numeric := SDO_NET_MEM.PATH.GET_START_NODE_ID(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The start node ID of path ' || path_id || ' is: ' || res_numeric);
. . .
The start node ID of path 21 is: 101
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDBCGHJ"></a>
<div id="TOPOL1154" class="refsect1">
<h2 class="refsect1"><a id="sthref2465"></a><a id="sthref2466"></a><a id="sthref2467"></a><a id="sthref2468"></a>SDO_NET_MEM.PATH.GET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2469"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.GET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2470"></a>Description</p>
<p>Returns the type of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2471"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2472"></a>Usage Notes</p>
<p>This function returns a type name string for a path in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>getType</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To set the type for a path, use the <a href="#CACFJDHE">SDO_NET_MEM.PATH.SET_TYPE</a> procedure.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2473"></a>Examples</p>
<p>The following example sets the type of a path in the current network memory object to the string <code>Logical connections</code>, and then returns the type.</p>
<pre>
-- SET_TYPE
-- Set the type of the path to 'Logical connections'.
SDO_NET_MEM.PATH.SET_TYPE(net_mem, path_id, 'Logical connections');
-- GET_TYPE
res_string := SDO_NET_MEM.PATH.GET_TYPE(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The type of path ' || path_id || ' is: ' || res_string);
. . .
The type of path 21 is: Logical connections
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1155" class="refsect1"><a id="sthref2474"></a>
<h2 class="refsect1"><a id="sthref2475"></a><a id="sthref2476"></a><a id="sthref2477"></a><a id="sthref2478"></a>SDO_NET_MEM.PATH.IS_ACTIVE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2479"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_ACTIVE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2480"></a>Description</p>
<p>Checks if a path is active.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2481"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2482"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is active, or <code>FALSE</code> if the path is not active. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isActive</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2483"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is active.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_ACTIVE(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' active?: ' || res_string);
. . .
Is path 21 active?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1156" class="refsect1"><a id="sthref2484"></a>
<h2 class="refsect1"><a id="sthref2485"></a><a id="sthref2486"></a><a id="sthref2487"></a><a id="sthref2488"></a>SDO_NET_MEM.PATH.IS_CLOSED</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2489"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_CLOSED(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2490"></a>Description</p>
<p>Checks if a path is closed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2491"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2492"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is closed, or <code>FALSE</code> if the path is not closed. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isClosed</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2493"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is closed.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_CLOSED(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' closed?: ' || res_string);
. . .
Is path 21 closed?: FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1157" class="refsect1"><a id="sthref2494"></a>
<h2 class="refsect1"><a id="sthref2495"></a><a id="sthref2496"></a><a id="sthref2497"></a><a id="sthref2498"></a>SDO_NET_MEM.PATH.IS_CONNECTED</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2499"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_CONNECTED(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2500"></a>Description</p>
<p>Checks if a path is connected.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2501"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2502"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is connected, or <code>FALSE</code> if the path is not connected. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isConnected</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2503"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is connected.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_CONNECTED(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' connected?: ' || res_string);
. . .
Is path 21 connected?: FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1158" class="refsect1"><a id="sthref2504"></a>
<h2 class="refsect1"><a id="sthref2505"></a><a id="sthref2506"></a><a id="sthref2507"></a><a id="sthref2508"></a>SDO_NET_MEM.PATH.IS_LOGICAL</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2509"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_LOGICAL(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2510"></a>Description</p>
<p>Checks if a path is in a logical network.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2511"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2512"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is in a logical network, or <code>FALSE</code> if the path is not in a logical network. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isLogical</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2513"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is a logical path.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_LOGICAL(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' a logical path?: ' || res_string);
. . .
Is path 21 a logical path?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1159" class="refsect1"><a id="sthref2514"></a>
<h2 class="refsect1"><a id="sthref2515"></a><a id="sthref2516"></a><a id="sthref2517"></a><a id="sthref2518"></a><a id="sthref2519"></a>SDO_NET_MEM.PATH.IS_SIMPLE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2520"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_SIMPLE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2521"></a>Description</p>
<p>Checks if a path is simple.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2522"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2523"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is simple, or <code>FALSE</code> if the path is not simple (that is, is a complex path). In a simple path, the links form an ordered list that can be traversed from the start node to the end node with each link visited once. In a complex path, there are multiple options for going from the start node to the end node.</p>
<p>For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This function is analogous to using the <code>isSimple</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2524"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is a simple path.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_SIMPLE(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' a simple path?: ' || res_string);
. . .
Is path 21 a simple path?: TRUE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1160" class="refsect1"><a id="sthref2525"></a>
<h2 class="refsect1"><a id="sthref2526"></a><a id="sthref2527"></a><a id="sthref2528"></a><a id="sthref2529"></a>SDO_NET_MEM.PATH.IS_TEMPORARY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2530"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.IS_TEMPORARY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) RETURN VARCHAR2;</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2531"></a>Description</p>
<p>Checks if a path is temporary.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2532"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2533"></a>Usage Notes</p>
<p>This function returns the string <code>TRUE</code> if the path in the specified network memory object is temporary, or <code>FALSE</code> if the path is not temporary. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>Temporary links, nodes, and paths are not saved in the database when you call the <a href="#CHDDGCIC">SDO_NET_MEM.NETWORK_MANAGER.WRITE_NETWORK</a> procedure.</p>
<p>This function is analogous to using the <code>isTemporary</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2534"></a>Examples</p>
<p>The following example checks if a path in the current network memory object is temporary.</p>
<pre>
res_string := SDO_NET_MEM.PATH.IS_TEMPORARY(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('Is path ' || path_id || ' temporary?: ' || res_string);
. . .
Is path 21 temporary?: FALSE
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACHAJEF"></a>
<div id="TOPOL1161" class="refsect1">
<h2 class="refsect1"><a id="sthref2535"></a><a id="sthref2536"></a><a id="sthref2537"></a><a id="sthref2538"></a>SDO_NET_MEM.PATH.SET_GEOMETRY</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2539"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.SET_GEOMETRY(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom IN SDO_GEOMETRY);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2540"></a>Description</p>
<p>Sets the spatial geometry for a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2541"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
<dt>geom</dt>
<dd>
<p>Spatial geometry object.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2542"></a>Usage Notes</p>
<p>This procedure creates an SDO_GEOMETRY object for the node in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setGeometry</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the geometry for a path, use the <a href="#CHDHFFDJ">SDO_NET_MEM.PATH.GET_GEOMETRY</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2543"></a>Examples</p>
<p>The following example sets the spatial geometry of a path in the current network memory object.</p>
<pre>
SDO_NET_MEM.PATH.SET_GEOMETRY(net_mem, path_id,
  SDO_GEOMETRY(
    2002, NULL, NULL,
    SDO_ELEM_INFO_ARRAY(1,2,1),
    SDO_ORDINATE_ARRAY(2,2, 2,4, 8,4, 12,4, 12,10, 8,10, 5,14)));
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACGFBBD"></a>
<div id="TOPOL1162" class="refsect1">
<h2 class="refsect1"><a id="sthref2544"></a><a id="sthref2545"></a><a id="sthref2546"></a><a id="sthref2547"></a>SDO_NET_MEM.PATH.SET_NAME</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2548"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.SET_NAME(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_name IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2549"></a>Description</p>
<p>Sets the name of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2550"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
<dt>path_name</dt>
<dd>
<p>Path name.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2551"></a>Usage Notes</p>
<p>This procedure sets a path name string value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setName</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the name of a path, use the <a href="#CHDEHDIC">SDO_NET_MEM.PATH.GET_NAME</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2552"></a>Examples</p>
<p>The following example sets the name of a path in the current network memory object to the string <code>My favorite path</code>, and then returns the name.</p>
<pre>
-- SET_NAME
-- Set the name of path to 'My favorite path'.
SDO_NET_MEM.PATH.SET_NAME(net_mem, path_id, 'My favorite path');
-- GET_NAME
res_string := SDO_NET_MEM.PATH.GET_NAME(net_mem, path_id);
DBMS_OUTPUT.PUT_LINE('The name of path ' || path_id || ' is: ' || res_string);
. . .
The name of path 21 is: My favorite path
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<div id="TOPOL1163" class="refsect1"><a id="sthref2553"></a>
<h2 class="refsect1"><a id="sthref2554"></a><a id="sthref2555"></a><a id="sthref2556"></a><a id="sthref2557"></a>SDO_NET_MEM.PATH.SET_PATH_ID</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2558"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.SET_PATH_ID(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_path_id IN NUMBER);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2559"></a>Description</p>
<p>Sets the path ID value of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2560"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
<dt>new_path_id</dt>
<dd>
<p>New path ID number.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2561"></a>Usage Notes</p>
<p>This procedure sets a numeric path ID value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setPathID</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2562"></a>Examples</p>
<p>The following example sets the path ID of a path in the current network memory object to 6789.</p>
<pre>
SDO_NET_MEM.PATH.SET_PATH_ID(net_mem, path_id, 6789);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CACFJDHE"></a>
<div id="TOPOL1164" class="refsect1">
<h2 class="refsect1"><a id="sthref2563"></a><a id="sthref2564"></a><a id="sthref2565"></a><a id="sthref2566"></a>SDO_NET_MEM.PATH.SET_TYPE</h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2567"></a>Format</p>
<p class="synopsis">SDO_NET_MEM.PATH.SET_TYPE(</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net_mem IN VARCHAR2,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path_id IN NUMBER,</p>
<p class="synopsis">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type IN VARCHAR2);</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2568"></a>Description</p>
<p>Sets the type of a path.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2569"></a>Parameters</p>
<dl>
<dt>net_mem</dt>
<dd>
<p>Name of the network whose current network memory object (created using the <a href="#CACBIAEI">SDO_NET_MEM.NETWORK_MANAGER.READ_NETWORK</a> procedure) is to be used.</p>
</dd>
<dt>path_id</dt>
<dd>
<p>Path ID number.</p>
</dd>
<dt>type</dt>
<dd>
<p>Path type.</p>
</dd>
</dl>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2570"></a>Usage Notes</p>
<p>This procedure sets a path type string value in the specified network memory object. For information about using a network memory object for editing and network analysis operations, see <a href="sdo_net_concepts.htm#CIHBJBFI">Section 5.8</a>.</p>
<p>This procedure is analogous to using the <code>setType</code> method of the <code>Path</code> interface of the client-side Java API (described in <a href="sdo_net_concepts.htm#CIHFFBBH">Section 5.11.2</a>).</p>
<p>To get the type value for a path, use the <a href="#CHDBCGHJ">SDO_NET_MEM.PATH.GET_TYPE</a> function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2571"></a>Examples</p>
<p>The following example sets the path type of a path in the current network memory object to the string <code>Scenic</code>.</p>
<pre>
SDO_NET_MEM.PATH.SET_TYPE(net_mem, path_id, 'Scenic');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment778">
<tr>
<td class="cellalignment785">
<table class="cellalignment783">
<tr>
<td class="cellalignment782"><a href="sdo_net_ref.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment782"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment787">
<table class="cellalignment781">
<tr>
<td class="cellalignment782"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment782"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment782"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment782"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment782"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment782"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
