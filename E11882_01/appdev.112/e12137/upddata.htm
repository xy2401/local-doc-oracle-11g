<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Updating Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 041" />
<meta name="dcterms.created" content="2012-02-02T15:52:0Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database 2 Day + Java Developer's Guide" />
<meta name="dcterms.identifier" content="E12137-02" />
<meta name="dcterms.isVersionOf" content="TDPJD" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="querdata.htm" title="Previous" type="text/html" />
<link rel="Next" href="addfunc.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e12137.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/16</span> <!-- End Header --><a id="BGBBDDAE"></a><a id="TDPJD182"></a>
<h1 class="chapter"><span class="secnum">5</span> Updating Data</h1>
<p>In this chapter, you will see how you can modify the sample application and add functionality that allows users to edit, update, and delete data in Oracle Database. This chapter includes the following sections:</p>
<ul>
<li>
<p><a href="#BGBHIBEC">Creating a JavaBean</a></p>
</li>
<li>
<p><a href="#BGBCHDIF">Updating Data from a Java Class</a></p>
</li>
<li>
<p><a href="#BGBJGJIB">Inserting an Employee Record</a></p>
</li>
<li>
<p><a href="#BGBIIFEI">Deleting an Employee Record</a></p>
</li>
<li>
<p><a href="#BGBEJJIJ">Exception Handling</a></p>
</li>
<li>
<p><a href="#BGBCCDHE">Navigation in the Sample Application</a></p>
</li>
</ul>
<a id="BGBHIBEC"></a><a id="TDPJD183"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.1</span> <a id="sthref404"></a>Creating a <a id="sthref405"></a>JavaBean</h2>
<p>In outline, a bean is a Java class that has properties, events and methods. For each of its properties, the bean also includes accessors, that is <code>get</code> and <code>set</code> methods. Any object that conforms to certain basic rules can be a bean. There is no special class that has to be extended to create a bean.</p>
<p>In the steps for creating a <a id="sthref406"></a>sample application in this chapter, a JavaBean is used to hold a single employee record. When a user wants to edit an existing record or add a new one, it is used as a container to hold the changed or new values for a single row of a table to prepare the row for using to update the database.</p>
<p>The bean contains properties for each field in an employee record, and then JDeveloper creates the accessors (<code>get</code> and <code>set</code> methods) for each of those properties. You will see how to create a JavaBean for the sample application in the following subsections:</p>
<ul>
<li>
<p><a href="#BGBCGGFF">Creating a JavaBean in JDeveloper</a></p>
</li>
<li>
<p><a href="#BGBFHFJJ">Defining the JavaBean Properties and Methods</a></p>
</li>
</ul>
<a id="BGBCGGFF"></a><a id="TDPJD184"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.1.1</span> <a id="sthref407"></a>Creating a JavaBean in JDeveloper</h3>
<p><code>Employee.java</code> is the JavaBean that is used in the sample application to hold a single employee record and modify its contents. To create a JavaBean, do the following:</p>
<ol>
<li>
<p>Right-click the <span class="bold">View</span> project, and from the shortcut menu, click <span class="bold">New</span>.</p>
</li>
<li>
<p>In the New Gallery dialog box, select the <span class="bold">All Technologies</span> tab.</p>
</li>
<li>
<p>Expand the General category and select <span class="bold">JavaBeans</span> in the <span class="bold">General</span> category. From the <span class="bold">Items</span> list, select <span class="bold">Bean</span>. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In the <a id="sthref408"></a><a id="sthref409"></a><a id="sthref410"></a>Create Bean dialog box, enter <code>Employee</code> as the name, <code>hr</code> as the package, and ensure that the <span class="bold">Extends:</span> field is set to <code>java.lang.Object</code>. Click <span class="bold">OK</span> to create the bean.</p>
</li>
<li>
<p>Save the file. The <a id="sthref411"></a><code>Employee.java</code> file should now contain the following code:</p>
<pre>
package hr;
 
public class Employee {
  public Employee(){
  }
}
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBFHFJJ"></a><a id="TDPJD185"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.1.2</span> <a id="sthref412"></a><a id="sthref413"></a>Defining the JavaBean Properties and Methods</h3>
<p>In the JavaBean, you must create one field for each column in the <a id="sthref414"></a><code>Employees</code> table, and <a id="sthref415"></a>accessor methods (<code>get</code> and <code>set</code> methods) for each field.</p>
<ol>
<li>
<p>Add an import statement for <code>java.sql.Date</code>, which is the field type for one of the fields:</p>
<pre>
import java.sql.Date;
</pre></li>
<li>
<p>Add a field to the <code>Employee</code> class for each of the columns in the <code>Employees</code> table. Each field is <code>private</code>, and the field types are as follows:</p>
<pre>
  private Integer employeeId;
  private String firstName;
  private String lastName;
  private String email;
  private String phoneNumber;
  private Date hireDate;
  private String jobId;
  private Double salary;
  private Double commissionPct;
  private Integer departmentId;
</pre></li>
<li>
<p>Right-click on the Source Editor page and select <span class="bold">Generate Accessors</span> from the shortcut menu. In the Generate Accessors dialog box, select the top-level <span class="bold">Employee</span> node. A check mark is displayed for that node and for all the fields. Click <span class="bold">OK</span>. <a href="#BGBFIICA">Figure 5-1</a> shows the Generate Accessors dialog box with all the fields selected.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBFIICA"></a><a id="TDPJD324"></a>Figure 5-1 Generate Accessors Dialog Box</p>
<img width="365" height="427" src="img/genaccessors.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref416" href="img_text/genaccessors.htm">Description of "Figure 5-1 Generate Accessors Dialog Box"</a><br />
<br /></div>
<!-- class="figure" --></li>
<li>
<p>Save the file. The <code>Employee.java</code> file should now contain the following code:</p>
<div class="example">
<p class="titleinexample"><a id="TDPJD325"></a><a id="sthref417"></a>Example 5-1 Skeleton Code for a Basic Java Bean with Accessor Methods</p>
<pre>
package hr;
import java.sql.Date;
 
public class Employee {
    public Employee() {
    }
    private Integer employeeId;
    private String firstName;
    private String lastName;
    private String email;
    private String phoneNumber;
    private Date hireDate;
    private String jobId;
    private Double salary;
    private Double commissionPct;
    private Integer departmentId;

    public void setEmployeeId(Integer employeeId) {
        this.employeeId = employeeId;
    }
 
    public Integer getEmployeeId() {
        return employeeId;
    }
 
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
 
    public String getFirstName() {
        return firstName;
    }
...
...
...
...
// This list has been shortened and is not comprehensive. The actual code contains // accessor methods for all the fields declared in the bean.

    public void setDepartmentId(Integer departmentId) {
        this.departmentId = departmentId;
    }
 
    public Integer getDepartmentId() {
        return departmentId;
    }
}
</pre></div>
<!-- class="example" --></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCHDIF"></a><a id="TDPJD186"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.2</span> Updating <a id="sthref418"></a>Data from a Java Class</h2>
<p>Updating a row in a database table from a Java application requires you to do the following tasks:</p>
<ol>
<li>
<p>Create a method that finds a particular employee row. This is used to display the values for a particular employee on an edit page.</p>
</li>
<li>
<p>Create a method that takes the updated employee data from the bean and updates the database.</p>
</li>
<li>
<p>On the main application page, in every row of employee data, include a link that allows a user to edit the data for that employee. The links take the user to the <code>edit.jsp</code> file with the data for that employee displayed, ready for editing.</p>
</li>
<li>
<p>Create a JSP page called <code>edit.jsp</code>, that includes a form and a table to display all the data of a single employee and allows a user to change the values.</p>
</li>
<li>
<p>Create a JSP page that processes the form on the <code>edit.jsp</code> page, writes the updated values to the <code>Employee.java</code> bean and calls the <code>updateEmployee</code> method.</p>
</li>
</ol>
<p>You will see how to do this in the following sections:</p>
<ul>
<li>
<p><a href="#BGBFADIE">Creating a Method to Identify an Employee Record</a></p>
</li>
<li>
<p><a href="#BGBHCCIH">Creating a Method to Update Employee Data</a></p>
</li>
<li>
<p><a href="#BGBDHBFD">Adding a Link to Navigate to an Update Page</a></p>
</li>
<li>
<p><a href="#BGBJHDAH">Creating a JSP Page to Edit Employee Data</a></p>
</li>
<li>
<p><a href="#BGBFAHGC">Creating a JSP Page to Handle an Update Action</a></p>
</li>
</ul>
<a id="BGBFADIE"></a><a id="TDPJD187"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.1</span> Creating a Method to Identify an Employee Record</h3>
<p>The method you create in these steps is used to find the record for a particular employee. It is used when a user wants to edit or delete a particular employee record, and selects a link for that employee on the <code>Employee.java</code> page.</p>
<ol>
<li>
<p>If the <code>DataHandler</code> class is not already open in the Java Source Editor, double-click it in the Application Navigator to open it.</p>
</li>
<li>
<p>In the <code>DataHandler</code> class, declare a new method that identifies the employee record to be updated:</p>
<pre>
public Employee findEmployeeById(int id) throws SQLException {
 
}
</pre></li>
<li>
<p>Within the body of this method, create a new instance of the <code>Employee</code> bean called <code>selectedEmp</code>.</p>
<pre>
Employee selectedEmp = new Employee();
</pre></li>
<li>
<p>Connect to the database.</p>
<pre>
getDBConnection();
</pre></li>
<li>
<p>Create a <code>Statement</code> object, define a <code>ResultSet</code> type, and formulate the query. Add a trace message to assist with debugging.</p>
<pre>
stmt =
  conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                       ResultSet.CONCUR_READ_ONLY);
query = "SELECT * FROM Employees WHERE employee_id = " + id;
System.out.println("\nExecuting: " + query);
</pre></li>
<li>
<p>Run the query and use a ResultSet object to contain the result.</p>
<pre>
rset = stmt.executeQuery(query);
</pre></li>
<li>
<p>Use the result set returned in <code>rset</code> to populate the fields of the employee bean using the <code>set</code> methods of the bean.</p>
<pre>
while (rset.next()) {
  selectedEmp.setEmployeeId(new Integer(rset.getInt("employee_id")));
  selectedEmp.setFirstName(rset.getString("first_name"));
  selectedEmp.setLastName(rset.getString("last_name"));
  selectedEmp.setEmail(rset.getString("email"));
  selectedEmp.setPhoneNumber(rset.getString("phone_number"));
  selectedEmp.setHireDate(rset.getDate("hire_date"));
  selectedEmp.setSalary(new Double(rset.getDouble("salary")));
  selectedEmp.setJobId(rset.getString("job_id"));
}
</pre></li>
<li>
<p>Return the populated object.</p>
<pre>
return selectedEmp;
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBHCCIH"></a><a id="TDPJD188"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.2</span> Creating a Method to Update Employee Data</h3>
<p>In the following steps, you will see how to create a method to update employee data in the database:</p>
<ol>
<li>
<p>Open the <code>DataHandler</code> class.</p>
</li>
<li>
<p>Declare an <code>updateEmployee</code> method as follows:</p>
<pre>
public String updateEmployee(int employee_id, String first_name,
                             String last_name, String email,
                             String phone_number, String salary,
                             String job_id) throws SQLException {
 
}
</pre></li>
<li>
<p>Within the body of this method, create an instance of the <code>Employee</code> bean, containing details for the selected employee:</p>
<pre>
Employee oldEmployee = findEmployeeById(employee_id);
</pre></li>
<li>
<p>Connect to the database.</p>
<pre>
getDBConnection();
</pre></li>
<li>
<p>Create a <code>Statement</code> object and specify the <code>ResultSet</code> type as before.</p>
<pre>
stmt =
  conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                       ResultSet.CONCUR_READ_ONLY);
</pre></li>
<li>
<p>Create a <code>StringBuffer</code> to accumulate details of the SQL <code>UPDATE</code> statement that needs to be built:</p>
<pre>
StringBuffer columns = new StringBuffer( 255 );
</pre></li>
<li>
<p>For each field in an employee record, check whether the user has changed the value and if so, add relevant code to the <code>StringBuffer</code>. For each item added after the first one, add a comma to separate the items. The following code checks if the <code>first_name</code> variable changed, and if so, adds details to the SQL in the <code>StringBuffer</code> that will be used to update the database:</p>
<pre>
  if ( first_name != null &amp;&amp; 
     !first_name.equals(oldEmployee.getFirstName() ) )
  {
    columns.append( "first_name = '" + first_name + "'" );
  }
</pre>
<p>For the <code>last_name</code>, before appending the new last name, check to see whether there are already some changes in the <code>StringBuffer</code> and if so, append a comma to separate the new change from the previous one. Use the following code:</p>
<pre>
  if ( last_name != null &amp;&amp; 
      !last_name.equals(oldEmployee.getLastName() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "last_name = '" + last_name + "'" );
  }
</pre>
<p>Use the samecode logic to check for changes made to <code>email</code>, and <code>phone_number</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only significant parts of the code are included within this procedure. <a href="#BGBFEDJE">Example 5-2</a> contains the complete code for this method.</div>
<p>For the <code>salary</code> field, obtain a <code>String</code> value to add to the <code>StringBuffer</code> as follows:</p>
<pre>
  if ( salary != null &amp;&amp; 
      !salary.equals( oldEmployee.getSalary().toString() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "salary = '" + salary + "'" );
</pre></li>
<li>
<p>When the whole set of changes has been assembled, check to see whether there are in fact any changes, that is, whether the <code>StringBuffer</code> contains anything. If so, construct a SQL <code>UPDATE</code> statement using the information in the <code>StringBuffer</code> and execute it. If the StringBuffer does not contain any changes, output a message saying so:</p>
<pre>
  if ( columns.length() &gt; 0 )
  {
    sqlString = "update Employees SET " + columns.toString() + 
            " WHERE employee_id = " + employee_id;
    System.out.println("\nExecuting: " + sqlString);
    stmt.execute(sqlString);
  }
  else
  {
    System.out.println( "Nothing to do to update Employee Id: " + 
                        employee_id);
  }
</pre></li>
<li>
<p>Return the word "success".</p>
<pre>
return "success";
</pre></li>
<li>
<p>Save your work and make the file to check there are no syntax errors.</p>
</li>
</ol>
<p><a href="#BGBFEDJE">Example 5-2</a> contains the complete code for this method.</p>
<div class="example">
<p class="titleinexample"><a id="BGBFEDJE"></a><a id="TDPJD326"></a>Example 5-2 Method for Updating a Database Record</p>
<pre>
public String updateEmployee(int employee_id, String first_name,
                             String last_name, String email,
                             String phone_number, String salary,
                             String job_id) throws SQLException {
  
  Employee oldEmployee = findEmployeeById(employee_id);
  getDBConnection();
  stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                              ResultSet.CONCUR_READ_ONLY);
  
  StringBuffer columns = new StringBuffer( 255 );
  if ( first_name != null &amp;&amp; 
     !first_name.equals( oldEmployee.getFirstName() ) )
  {
    columns.append( "first_name = '" + first_name + "'" );
  }
  if ( last_name != null &amp;&amp; 
      !last_name.equals( oldEmployee.getLastName() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "last_name = '" + last_name + "'" );
  }
  if ( email != null &amp;&amp; 
      !email.equals( oldEmployee.getEmail() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "email = '" + email + "'" );
  }
  if ( phone_number != null &amp;&amp; 
      !phone_number.equals( oldEmployee.getPhoneNumber() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "phone_number = '" + phone_number + "'" );
  }
  if ( salary != null &amp;&amp; 
      !salary.equals( oldEmployee.getSalary().toString() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "salary = '" + salary + "'" );
  }
  if ( job_id != null &amp;&amp; 
      !job_id.equals( oldEmployee.getJobId() ) ) {
    if ( columns.length() &gt; 0 ) {
      columns.append( ", " );
    }
    columns.append( "job_id = '" + job_id + "'" );
  }
  
  if ( columns.length() &gt; 0 )
  {
  sqlString = 
    "UPDATE Employees SET " + columns.toString() + 
      " WHERE employee_id = " + employee_id;
    System.out.println("\nExecuting: " + sqlString);
    stmt.execute(sqlString);
  }
  else
  {
    System.out.println( "Nothing to do to update Employee Id: " + 
                        employee_id);
  }
  return "success";
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGBDHBFD"></a><a id="TDPJD189"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.3</span> Adding a Link to Navigate to an Update Page</h3>
<p>In the following steps, you add a link to each row of the employees table on the <code>employees.jsp</code> page, that users will click to edit that row.</p>
<ol>
<li>
<p>Open <code>employees.jsp</code> in the Visual Editor.</p>
</li>
<li>
<p>Add an extra column to the table that displays employee details. To do this, position the cursor in the last column of the table, right-click and select <span class="bold">Table</span> from the shortcut menu, then select <span class="bold">Insert Rows Or Columns</span>. In the Insert Rows or Columns dialog box, select <span class="bold">Columns</span> and <span class="bold">After Selection</span> and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>This extra column will contain the link that reads Edit for each row. Each of these links leads to a separate page where the selected employee record can be edited. To do this, double-click the scriptlet that is inside the <code>Employees</code> table, to display the Scriptlet Properties dialog box.</p>
</li>
<li>
<p>Modify the scriptlet to include a link to the <code>edit.jsp</code> page. The modified scriptlet should contain the following code:</p>
<pre>
    while (rset.next ())
    {
    out.println("&lt;tr&gt;");
      out.println("&lt;td&gt;" + 
      rset.getString("first_name") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("last_name") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("email") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("job_id") + "&lt;/td&gt;&lt;td&gt;" + 
      rset.getString("phone_number") + "&lt;/td&gt;&lt;td&gt;" + 
<span class="bold">      rset.getDouble("salary") + </span>
<span class="bold">      "&lt;/td&gt;&lt;td&gt; &lt;a href=\"edit.jsp?empid=" + rset.getInt(1) +</span>
<span class="bold">      "\"&gt;Edit&lt;/a&gt;&lt;/td&gt;");</span>
    out.println("&lt;tr&gt;");
    }
</pre>
<p>When the edit link is clicked for any employee, this code passes the employee ID to the <code>edit.jsp</code> page, which will handle the employee record updates. The <code>edit.jsp</code> page will use this to search for the record of that particular employee in the database.</p>
</li>
<li>
<p>Save <code>employees.jsp</code>. <a href="#BGBFBEEH">Figure 5-2</a> shows <code>employees.jsp</code> when it is run and displayed in a browser, illustrating the link users can click to edit employee data.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBFBEEH"></a><a id="TDPJD327"></a>Figure 5-2 Link to Edit Employees in employees.jsp</p>
<img width="571" height="556" src="img/editemplink.gif" alt="Description of Figure 5-2 follows" /><br />
<a id="sthref419" href="img_text/editemplink.htm">Description of "Figure 5-2 Link to Edit Employees in employees.jsp"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBJHDAH"></a><a id="TDPJD190"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.4</span> Creating a <a id="sthref420"></a><a id="sthref421"></a>JSP Page to Edit Employee Data</h3>
<p>In this section, you will create the <code>edit.jsp</code> file that allows users to update an employee record.</p>
<ol>
<li>
<p>Create a new JSP page and name it <code>edit.jsp</code>. Accept all other defaults.</p>
</li>
<li>
<p>Give the page the same heading as earlier, <span class="bold">AnyCo Corporation: HR Application</span>, apply the <span class="bold">Heading 2</span> style to it, and align it to the center of the page.</p>
</li>
<li>
<p>On the next line, type <span class="bold">Edit Employee Record</span>, with the <span class="bold">Heading 3</span> style applied. Align this heading to the left of the page.</p>
</li>
<li>
<p>Add the <span class="bold">JDeveloper</span> style sheet to the page.</p>
</li>
<li>
<p>Add a <code>jsp:usebean</code> tag. Enter <code>empsbean</code> as the <span class="bold">ID</span>, and <code>hr.DataHandler</code> as the <span class="bold">Class</span>. Set the <span class="bold">Scope</span> to <code>session</code>, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Position the cursor after the useBean tag and add another <code>jsp:usebean</code> tag. This time enter <code>employee</code> as the <span class="bold">ID</span>, browse to select <span class="bold">hr.Employee</span> as the class, and leave the Scope as page. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Add a <span class="bold">Scriptlet</span> to the page. The scriptlet code passes the employee ID to the <code>findEmployeeById</code> method and retrieves the data inside the <code>Employee</code> bean. Enter the following code in the Insert Scriptlet dialog box:</p>
<pre>
Integer employee_id = new Integer(request.getParameter("empid"));
employee = empsbean.findEmployeeById(employee_id.intValue());
</pre></li>
<li>
<p>Add a <span class="bold">Form</span> to the page. In the Insert Form dialog, enter <code>update_action.jsp</code> for the <span class="bold">Action</span> field. You cannot select this page from the drop down list as you have not yet created it.</p>
</li>
<li>
<p>Add a <span class="bold">Table</span> to the page. Position it inside the Form. Specify a 6-row and 2-column layout, and accept other layout defaults.</p>
</li>
<li>
<p>In the first column, enter the following headings, each on a separate row: <code>First Name</code>, <code>Last Name</code>, <code>Email</code>, <code>Phone</code>, <code>Job</code>, <code>Monthly Salary</code>.</p>
</li>
<li>
<p>Drag a <span class="bold">Hidden Field</span> component from the HTML Forms page of the Component Palette. Drop it in the second column, adjacent to the First Name heading. In the Insert Hidden Field dialog, enter <code>employee_id</code> as the <span class="bold">Name</span> property and enter <code>&lt;%= employee.getEmployeeId() %&gt;</code> as the <span class="bold">Value</span> property.</p>
</li>
<li>
<p>Drag a <span class="bold">Text Field</span> component to this column, adjacent to the First Name heading. In the Insert Text Field dialog, enter <code>first_name</code> in the <span class="bold">Name</span> field, and <code>&lt;%= employee.getFirstName() %&gt;</code> in the <span class="bold">Value</span> field. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Drag a second <span class="bold">Text Field</span> component to this column, adjacent to the Last Name heading. In the Insert Text Field dialog, enter <code>last_name</code> in the <span class="bold">Name</span> field, and <code>&lt;%= employee.getLastName() %&gt;</code> in the <code>Value</code> field. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>In a similar way, add text fields adjacent to each of the remaining column headings, using <code>email</code>, <code>phone_number</code>, <code>job_id</code>, and <code>salary</code> as the field names and the corresponding getter method for each field. These are specified in the following table.</p>
</li>
<li>
<p>Add a <span class="bold">Submit</span> button in the form, below the table. Enter <code>Update</code> as its <span class="bold">Value</span>.</p>
</li>
<li>
<p>Save the application.</p>
<p>The resultant <code>edit.jsp</code> page should look similar to the page shown in <a href="#BGBBIDJA">Figure 5-3</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBBIDJA"></a><a id="TDPJD328"></a>Figure 5-3 Creating a JSP Page to Edit Employee Details</p>
<img width="525" height="521" src="img/editempjsp.gif" alt="Description of Figure 5-3 follows" /><br />
<a id="sthref422" href="img_text/editempjsp.htm">Description of "Figure 5-3 Creating a JSP Page to Edit Employee Details"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBFAHGC"></a><a id="TDPJD191"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.2.5</span> Creating a JSP Page to Handle an <a id="sthref423"></a>Update Action</h3>
<p>In this section, you will see how to create the <code><a id="sthref424"></a>update_action.jsp</code> file. This page processes the form on the <code><a id="sthref425"></a>edit.jsp</code> page that allows users to update an employee record. There are no visual elements on this page, this page is used only to process the <code>edit.jsp</code> form and returns control to the <code>employees.jsp</code> file.</p>
<ol>
<li>
<p>Create a new JSP page and call it <code>update_action.jsp</code>. Accept all other defaults for the page in the JSP Creation Wizard.</p>
</li>
<li>
<p>Drag a <span class="bold">Page Directive</span> component from the JSP page of the Component Palette onto the page. In the Insert Page Directive dialog box, browse to import <span class="bold">java.sql.ResultSet</span>. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Add a <span class="bold">jsp:usebean</span> tag. Enter <code>empsbean</code> as the <span class="bold">ID</span>, and <code>hr.DataHandler</code> as the <span class="bold">Class</span>. Set the <span class="bold">Scope</span> to <code>session</code>, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Add a <span class="bold">Scriptlet</span> to the page. Enter the following code into the Insert Scriptlet dialog box:</p>
<pre>
Integer employee_id = new Integer(request.getParameter("employee_id"));
String first_name = request.getParameter("first_name");
String last_name = request.getParameter("last_name");
String email = request.getParameter("email");
String phone_number = request.getParameter("phone_number");
String salary = request.getParameter("salary");
String job_id = request.getParameter("job_id");
empsbean.updateEmployee(employee_id.intValue(), first_name, last_name, email, phone_number, salary, job_id );
</pre></li>
<li>
<p>Drag a <span class="bold">jsp:forward</span> tag onto the page. In the Insert Forward dialog box, enter <code>employees.jsp</code> for the <span class="bold">Page</span> property.</p>
</li>
<li>
<p>Save your work.</p>
</li>
<li>
<p>Run the project and test whether you can edit an employee record. Click <span class="bold">Edit</span> for any employee on the <code>employees.jsp</code> page, and you should be directed to the page shown in <a href="#BGBIHDEB">Figure 5-4</a>. Modify any of the employee details and check whether the change reflects in the <code>employees.jsp</code> page.<a id="sthref426"></a></p>
</li>
</ol>
<div class="figure">
<p class="titleinfigure"><a id="BGBIHDEB"></a><a id="TDPJD329"></a>Figure 5-4 Editing Employee Data</p>
<img width="477" height="507" src="img/editempdata.gif" alt="Description of Figure 5-4 follows" /><br />
<a id="sthref427" href="img_text/editempdata.htm">Description of "Figure 5-4 Editing Employee Data"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBJGJIB"></a><a id="TDPJD192"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.3</span> <a id="sthref428"></a>Inserting an Employee Record</h2>
<p>The steps for inserting a new employee record to the Employees table are similar to the process for updating an employee record:</p>
<ol>
<li>
<p>Create a method to insert a new employee row into the <code>Employees</code> table.</p>
</li>
<li>
<p>Add a link to the main application page, allowing a user to click to insert a new employee. The link takes the user to an <code>insert.jsp</code> with an empty form ready for the user to enter details for the new row.</p>
</li>
<li>
<p>Create a JSP page to process the form on the <code>insert.jsp</code> page.</p>
</li>
<li>
<p>Create a JSP page with form controls for users to enter the values for the new employee.</p>
</li>
</ol>
<p>This section covers the creation of Java application code for inserting new employee data in the following subsections:</p>
<ul>
<li>
<p><a href="#BGBCBCCJ">Creating a Method to Insert Data</a></p>
</li>
<li>
<p><a href="#BGBIAAFC">Adding a Link to Navigate to an Insert Page</a></p>
</li>
<li>
<p><a href="#BGBDDDGC">Creating a JSP Page to Handle an Insert Action</a></p>
</li>
<li>
<p><a href="#BGBBCDJG">Creating a JSP Page to Enter New Data</a></p>
</li>
</ul>
<a id="BGBCBCCJ"></a><a id="TDPJD193"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.3.1</span> Creating a <a id="sthref429"></a>Method to Insert Data</h3>
<p>In the following steps, you will create a method for inserting a new employee record.</p>
<ol>
<li>
<p>Open <code>DataHandler.java</code> in the Java Source Editor.</p>
</li>
<li>
<p>Declare a method to add a new employee record.</p>
<pre>
public String addEmployee(String first_name, 
  String last_name, String email, 
  String phone_number, String job_id, int salary) throws SQLException {
 
}
</pre></li>
<li>
<p>Add a line to connect to the database.</p>
<pre>
getDBConnection();
</pre></li>
<li>
<p>Create a <code>Statement</code> object, define a <code>ResultSet</code> type as before, and formulate the SQL statement.</p>
<pre>
stmt =
  conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                       ResultSet.CONCUR_READ_ONLY);
sqlString =
  "INSERT INTO Employees VALUES (EMPLOYEES_SEQ.nextval, '" + 
  first_name + "','" + 
  last_name + "','" + 
  email + "','" + 
  phone_number + "'," +
  "SYSDATE, '" + 
  job_id + "', " + 
  salary + ",.30,100,80)";
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The last three columns (<code>Commission</code>, <code>ManagerId</code>, and <code>DepartmentId</code>) contain hard-coded values for the sample application.</div>
</li>
<li>
<p>Add a trace message, and then run the SQL statement.</p>
</li>
<li>
<p>Return a message that says "success" if the insertion was successful.</p>
</li>
<li>
<p>Make the file to check for syntax errors.</p>
</li>
</ol>
<p><a href="#BGBGGHBF">Example 5-3</a> shows the code for the <code>addEmployee()</code> method.</p>
<div class="example">
<p class="titleinexample"><a id="BGBGGHBF"></a><a id="TDPJD330"></a>Example 5-3 Method for Adding a New Employee Record</p>
<pre>
public String addEmployee(String first_name, 
  String last_name, String email, 
  String phone_number, String job_id, int salary) throws SQLException {
  getDBConnection();
  stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                              ResultSet.CONCUR_READ_ONLY);
  sqlString =
    "INSERT INTO Employees VALUES (EMPLOYEES_SEQ.nextval, '" + 
     first_name + "','" + 
    last_name + "','" + 
    email + "','" + 
    phone_number + "'," +
    "SYSDATE, '" + 
    job_id + "', " + 
    salary + ",.30,100,80)";
    
  System.out.println("\nInserting: " + sqlString);
  stmt.execute(sqlString);
  return "success";
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGBIAAFC"></a><a id="TDPJD194"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.3.2</span> Adding a Link to Navigate to an <a id="sthref430"></a>Insert Page</h3>
<p>In these steps, you add a link to the header row of the employees table that users can click to add a new employee.</p>
<ol>
<li>
<p>Open <code>employees.jsp</code> in the Visual Editor.</p>
</li>
<li>
<p>Drag a <span class="bold">Hyper Link</span> component from the HTML Common page of the Component Palette into the empty column header cell at the end of the header row. In the Insert HyperLink dialog box, enter <code>insert.jsp</code> in the <span class="bold">HyperLink</span> field, and <code>Insert Employee</code> in the <span class="bold">Text</span> field. You cannot browse to find <code>insert.jsp</code> as you have not yet created it. Click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Save <code>employees.jsp</code>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBBCDJG"></a><a id="TDPJD195"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.3.3</span> Creating <a id="sthref431"></a>a <a id="sthref432"></a>JSP Page to Enter New Data</h3>
<p>In these steps, you create the <code>insert.jsp</code> page, which allows users to enter details of a new employee record.</p>
<ol>
<li>
<p>Create a new JSP page and call it <code>insert.jsp</code>.</p>
</li>
<li>
<p>Give the page the same heading as before, <span class="bold">AnyCo Corporation: HR Application</span>, and format it as <span class="bold">Heading 2</span>, and center it.</p>
</li>
<li>
<p>On the next line enter <span class="bold">Insert Employee Record</span>, and apply the <span class="bold">Heading 3</span> format. Align this heading to the left of the page.</p>
</li>
<li>
<p>Add the <span class="bold">JDeveloper</span> stylesheet to the page.</p>
</li>
<li>
<p>Add a <span class="bold">Form</span>. In the Insert Form dialog box, enter <a id="sthref433"></a><code>insert_action.jsp</code> for the <span class="bold">Action</span> property, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Add a <span class="bold">Table</span> inside the <span class="bold">Form</span>. Specify that you want 6 rows and 2 columns and accept all other layout defaults.</p>
</li>
<li>
<p>In the first column, enter the following headings, each on a separate row: <span class="bold">First Name</span>, <span class="bold">Last Name</span>, <span class="bold">Email</span>, <span class="bold">Phone</span>, <span class="bold">Job</span>, <span class="bold">Monthly Salary</span>.</p>
</li>
<li>
<p>Drag and drop a <span class="bold">Text Field</span> into the column to the right of the <span class="bold">First Name</span> header. In the Insert Field dialog box, type <code>first_name</code> in the <span class="bold">Name</span> property.</p>
</li>
<li>
<p>Drag a <span class="bold">Text</span> Field next to each of the <span class="bold">Last Name</span>, <span class="bold">Email</span>, <span class="bold">Phone</span>, and <span class="bold">Monthly Salary</span> headers. Specify the values for each of these text fields for the <span class="bold">Name</span> property in the Insert Field dialog box. The values are indicated in the following table:</p>
<div class="inftblhruleinformal">
<table class="cellalignment1107" title="Text field parameter values" summary="Text field parameter values" dir="ltr">
<thead>
<tr class="cellalignment1098">
<th class="cellalignment1108" id="r1c1-t4">Text Field For</th>
<th class="cellalignment1108" id="r1c2-t4">Set the Name Property To</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r2c1-t4" headers="r1c1-t4">Last Name</td>
<td class="cellalignment1104" headers="r2c1-t4 r1c2-t4"><code>last_name</code></td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r3c1-t4" headers="r1c1-t4">Email</td>
<td class="cellalignment1104" headers="r3c1-t4 r1c2-t4"><code>email</code></td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r4c1-t4" headers="r1c1-t4">Phone</td>
<td class="cellalignment1104" headers="r4c1-t4 r1c2-t4"><code>phone_number</code></td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r5c1-t4" headers="r1c1-t4">Monthly Salary</td>
<td class="cellalignment1104" headers="r5c1-t4 r1c2-t4"><code>salary</code></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>This procedure is different for the Job row.</p>
</li>
<li>
<p>Drag a <span class="bold">Combo Box</span> component from the HTML Forms page of the Component Palette to the column next to the <span class="bold">Job</span> heading.</p>
</li>
<li>
<p>In the Insert Select dialog box, enter <code>job_id</code> as the name, and <code>1</code> as the size. Click on the add (+) icon and enter <code>SA_REP</code> in the <span class="bold">Value</span> field, and in the <span class="bold">Caption</span> field, enter <code>Sales Representative</code>. Click on the add(+) sign to add each of the following job titles, then click <span class="bold">OK</span>.</p>
<div class="inftblinformal">
<table class="cellalignment1107" title="JSP values" summary="Captions and values for form on which you can enter new data" dir="ltr">
<thead>
<tr class="cellalignment1098">
<th class="cellalignment1108" id="r1c1-t5">Value</th>
<th class="cellalignment1108" id="r1c2-t5">Caption</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r2c1-t5" headers="r1c1-t5"><code>HR_REP</code></td>
<td class="cellalignment1104" headers="r2c1-t5 r1c2-t5">HR Representative</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r3c1-t5" headers="r1c1-t5"><code>PR_REP</code></td>
<td class="cellalignment1104" headers="r3c1-t5 r1c2-t5">PR Representative</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r4c1-t5" headers="r1c1-t5"><code>MK_MAN</code></td>
<td class="cellalignment1104" headers="r4c1-t5 r1c2-t5">Marketing Manager</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r5c1-t5" headers="r1c1-t5"><code>SA_MAN</code></td>
<td class="cellalignment1104" headers="r5c1-t5 r1c2-t5">Sales Manager</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r6c1-t5" headers="r1c1-t5"><code>FI_MAN</code></td>
<td class="cellalignment1104" headers="r6c1-t5 r1c2-t5">Finance Manager</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r7c1-t5" headers="r1c1-t5"><code>IT_PROG</code></td>
<td class="cellalignment1104" headers="r7c1-t5 r1c2-t5">Software Developer</td>
</tr>
<tr class="cellalignment1098">
<td class="cellalignment1104" id="r8c1-t5" headers="r1c1-t5"><code>AD_VIP</code></td>
<td class="cellalignment1104" headers="r8c1-t5 r1c2-t5">Vice President</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></li>
<li>
<p>Drag a <span class="bold">Submit</span> button to the Form below the table. In the Insert Submit Button dialog box, enter <code>Add Employee</code> for the <span class="bold">Value</span> property.</p>
</li>
<li>
<p>Save your work.</p>
</li>
</ol>
<p><a href="#BGBEFFAJ">Figure 5-5</a> shows the <a id="sthref434"></a><code>insert.jsp</code> page in the Visual Editor.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBEFFAJ"></a><a id="TDPJD331"></a>Figure 5-5 Form to Insert Employee Data</p>
<img width="602" height="542" src="img/insempdataform.gif" alt="Description of Figure 5-5 follows" /><br />
<a id="sthref435" href="img_text/insempdataform.htm">Description of "Figure 5-5 Form to Insert Employee Data"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="BGBDDDGC"></a><a id="TDPJD196"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.3.4</span> Creating a <a id="sthref436"></a>JSP Page to Handle an Insert Action</h3>
<p>In these steps, you create the <code>insert_action.jsp</code> page. This is a page that processes the form input from <code>insert.jsp</code>, which is the page on which users enter a new employee record. There are no visual elements on this page, and it is only used to process the <code>insert.jsp</code> form and return control to the <code>employees.jsp</code> file.</p>
<ol>
<li>
<p>Create a JSP page as before. Call it <code><a id="sthref437"></a>insert_action.jsp</code>.</p>
</li>
<li>
<p>Add a <span class="bold">jsp:usebean</span> tag. As before, enter <code>empsbean</code> as the <span class="bold">ID</span>, and <code>hr.DataHandler</code> as the <span class="bold">Class</span>. Set the <span class="bold">Scope</span> to <code>session</code>, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Position the cursor after the useBean tag and add a <span class="bold">Scriptlet</span> to the page. Enter the following code into the Insert Scriptlet dialog box:</p>
<pre>
String first_name = request.getParameter("first_name");
String last_name = request.getParameter("last_name");
String email = request.getParameter("email");
String phone_number = request.getParameter("phone_number");
String job_id = request.getParameter("job_id");
Integer salary = new Integer(request.getParameter("salary"));
 
empsbean.addEmployee(first_name, last_name, email, phone_number, job_id, salary.intValue());
</pre></li>
<li>
<p>Drag a <span class="bold">jsp:forward</span> tag onto the page. In the Insert Forward dialog box, enter <code>employees.jsp</code>.</p>
</li>
<li>
<p>Save your work.</p>
</li>
<li>
<p>Run the <span class="bold">View</span> project to test whether you can insert a new employee record.</p>
</li>
</ol>
<p>To insert an employee, click <code>Insert Employee</code> on the <code><a id="sthref438"></a>employees.jsp</code> page shown in <a href="#BGBFCCFE">Figure 5-6</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBFCCFE"></a><a id="TDPJD332"></a>Figure 5-6 Inserting New Employee Data</p>
<img width="610" height="479" src="img/insnewempdata.gif" alt="Description of Figure 5-6 follows" /><br />
<a id="sthref439" href="img_text/insnewempdata.htm">Description of "Figure 5-6 Inserting New Employee Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#BGBICDHB">Figure 5-7</a> shows the page where you can insert new employee data with some data filled in, and the list of jobs being used to select a job.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBICDHB"></a><a id="TDPJD333"></a>Figure 5-7 Inserting Employee Data</p>
<img width="573" height="479" src="img/insempdata.gif" alt="Description of Figure 5-7 follows" /><br />
<a id="sthref440" href="img_text/insempdata.htm">Description of "Figure 5-7 Inserting Employee Data"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBIIFEI"></a><a id="TDPJD197"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.4</span> Deleting an<a id="sthref441"></a> Employee Record</h2>
<p>The steps for deleting a record are similar to those for editing and inserting a record:</p>
<ol>
<li>
<p>Use the method created in <a href="#BGBFADIE">Creating a Method to Identify an Employee Record</a> to identify a particular employee row. This is used to identify the row to be deleted.</p>
</li>
<li>
<p>Create a method that deletes an employee record from the database.</p>
</li>
<li>
<p>Add a link to the main application page for each row, allowing a user to click to delete the employee in that row. The link takes the user to a <code>delete_action.jsp</code>, with the ID of the employee whose record is to be deleted.</p>
</li>
<li>
<p>To delete the employee from the database, create a JSP page to call the delete method created in Step 2.</p>
</li>
</ol>
<p>This section discusses the following tasks related to deleting employee data:</p>
<ul>
<li>
<p><a href="#BGBCCIAG">Creating a Method for Deleting Data</a></p>
</li>
<li>
<p><a href="#BGBBADIC">Adding a Link to Delete an Employee</a></p>
</li>
<li>
<p><a href="#BGBJCHFD">Creating a JSP Page to Handle a Delete Action</a></p>
</li>
</ul>
<a id="BGBCCIAG"></a><a id="TDPJD198"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.1</span> Creating a <a id="sthref442"></a>Method for Deleting Data</h3>
<p>The method created in the following steps is used to delete employee records by ID:</p>
<ol>
<li>
<p>Open <code><a id="sthref443"></a>DataHandler.java</code> in the Java Source Editor.</p>
</li>
<li>
<p>Declare a new method that identifies the employee record to be deleted:</p>
<pre>
public String deleteEmployeeById(int id) throws SQLException {
 
}
</pre></li>
<li>
<p>Connect to the database as before.</p>
<pre>
getDBConnection();
</pre></li>
<li>
<p>Create a <code>Statement</code> object, define a <code>ResultSet</code> type as before, and formulate the SQL statement. Add a trace message to assist with debugging.</p>
<pre>
stmt =
  conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                       ResultSet.CONCUR_READ_ONLY);
sqlString = "DELETE FROM Employees WHERE employee_id = " + id;
System.out.println("\nExecuting: " + sqlString);
</pre></li>
<li>
<p>Run the SQL statement.</p>
<pre>
stmt.execute(sqlString);
</pre></li>
<li>
<p>If the SQL statement runs without any errors, return the word, <code>Success</code>.</p>
<pre>
return "success";
</pre>
<p><a href="#BGBIAEIG">Example 5-4</a> shows the code for the <code>deleteEmployeeById()</code> method.</p>
<div class="example">
<p class="titleinexample"><a id="BGBIAEIG"></a><a id="TDPJD334"></a>Example 5-4 Method for Deleting an Employee Record</p>
<pre>
public String deleteEmployeeById(int id) throws SQLException {
        getDBConnection();
        stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                ResultSet.CONCUR_READ_ONLY);
    sqlString = "DELETE FROM Employees WHERE employee_id = " + id;
    System.out.println("\nExecuting: " + sqlString);
    stmt.execute(sqlString);
    return "success";
}
</pre></div>
<!-- class="example" --></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBBADIC"></a><a id="TDPJD199"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.2</span> Adding a Link to Delete an Employee</h3>
<p>In the following instructions, you add <a id="sthref444"></a>a link to each row of the employees table on the <code>employees.jsp</code> page. Clicking on that link will delete all employee data for that row.</p>
<ol>
<li>
<p>Open <code>employees.jsp</code> in the Visual Editor.</p>
</li>
<li>
<p>In the column you created to contain the Edit link, add another link for deleting the row. To do this, double-click the scriptlet that is inside the <code>Employees</code> table, to display the Scriptlet Properties dialog box.</p>
</li>
<li>
<p>Modify the scriptlet to include a link to a <code><a id="sthref445"></a>delete_action.jsp</code> page. The modified scriptlet should contain the following code:</p>
<pre>
    while (rset.next ())
    {
    out.println("&lt;tr&gt;");
      out.println("&lt;td&gt;" + 
      rset.getString("first_name") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("last_name") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("email") + "&lt;/td&gt;&lt;td&gt; " + 
      rset.getString("job_id") + "&lt;/td&gt;&lt;td&gt;" + 
      rset.getString("phone_number") + "&lt;/td&gt;&lt;td&gt;" + 
      rset.getDouble("salary") + 
<span class="bold">      "&lt;/td&gt;&lt;td&gt; &lt;a href=\"edit.jsp?empid=" + rset.getInt(1) +</span>
<span class="bold">      "\"&gt;Edit&lt;/a&gt;   &lt;a href=\"delete_action.jsp?empid=" + </span>
<span class="bold">      rset.getInt(1) + "\"&gt;Delete&lt;/a&gt;&lt;/td&gt;");</span>
    out.println("&lt;tr&gt;");
    }
</pre></li>
<li>
<p>Save <code>employees.jsp</code>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBJCHFD"></a><a id="TDPJD200"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.4.3</span> Creating a JSP Page to <a id="sthref446"></a>Handle a Delete Action</h3>
<p>In the following steps, you create the <code>delete_action.jsp</code> page, which is a page that only processes the delete operation. There are no visual elements on this page.</p>
<ol>
<li>
<p>Create a JSP page and call it <code><a id="sthref447"></a>delete_action.jsp</code>.</p>
</li>
<li>
<p>Add a <span class="bold">jsp:usebean</span> tag. As before, enter <code>empsbean</code> as the <span class="bold">ID</span>, and <code>hr.DataHandler</code> as the <span class="bold">Class</span>. Set the <span class="bold">Scope</span> to <code>session</code>, and click <span class="bold">OK</span>.</p>
</li>
<li>
<p>Add a <span class="bold">Scriptlet</span> to the page. Enter the following code into the Insert Scriptlet dialog box:</p>
<pre>
Integer employee_id = 
 new Integer(request.getParameter("empid"));
empsbean.deleteEmployeeById(employee_id.intValue());
</pre></li>
<li>
<p>Drag Forward from the Component Palette to add a <span class="bold">jsp:forward</span> tag to the page. In the Insert Forward dialog box, enter <span class="bold">employees.jsp</span>.</p>
</li>
<li>
<p>Save your work.</p>
</li>
<li>
<p>Run the project and try deleting an employee. <a href="#BGBFJBIF">Figure 5-8</a> shows the links for deleting employee records from the <code>employees.jsp</code>.</p>
<div class="figure">
<p class="titleinfigure"><a id="BGBFJBIF"></a><a id="TDPJD335"></a>Figure 5-8 Link for Deleting an Employee from employees.jsp</p>
<img width="630" height="452" src="img/delemplink.gif" alt="Description of Figure 5-8 follows" /><br />
<a id="sthref448" href="img_text/delemplink.htm">Description of "Figure 5-8 Link for Deleting an Employee from employees.jsp"</a><br />
<br /></div>
<!-- class="figure" --></li>
</ol>
<p>If you click <span class="bold">Delete</span> for any of the employee records, then that employee record will be deleted.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBEJJIJ"></a><a id="TDPJD201"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.5</span> <a id="sthref449"></a>Exception Handling</h2>
<p>A <code><a id="sthref450"></a><a id="sthref451"></a>SQLException</code> object instance provides information on a database access error or other errors. Each <code>SQLException</code> instance provides many types of information, including a string describing the error, which is used as the Java Exception message, available via the <code>getMessage</code> method.</p>
<p>The sample application uses <code><a id="sthref452"></a>try</code> and <a id="sthref453"></a><code>catch</code> blocks, which are the Java mechanism for handling exceptions. With Java, if a method throws an exception, there needs to be a mechanism to handle it. Generally, a <code>catch</code> block catches the exception and specifies the course of action in the event of an exception, which could simply be to display the message.</p>
<p>Each JDBC method throws a <code>SQLException</code> if a database access error occurs. For this reason, any method in an application that executes such a method must handle the exception.</p>
<p>All the methods in the sample application include code for handling exceptions. For example, the <code>getDBConnection</code>, which is used to get a connection to the database, throws SQLException, as does the <code><a id="sthref454"></a>getAllEmployees</code> method as follows:</p>
<pre>
public ResultSet getAllEmployees() throws SQLException {
}
</pre>
<p>For an example of code used to catch and handle SQLExceptions, refer to the code in the <code>authenticateUser</code> method in the <code>DataHandler.java</code> class. In this example, a <code>try</code> block contains the code for the work to be done to authenticate a user, and a <code>catch</code> block handles the case where the authentication fails.The following sections describe how to add code to the sample application to catch and handle SQLExceptions.</p>
<a id="TDPJD202"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref455"></a>
<h3 class="sect2"><span class="secnum">5.5.1</span> Adding Exception Handling to Java Methods</h3>
<p>To handle SQL exceptions in the methods in the sample application, do the following:</p>
<ol>
<li>
<p>Ensure that the method throws <code>SQLException</code>. For example, the method:</p>
<pre>
public ResultSet getAllEmployees() throws SQLException
</pre></li>
<li>
<p>Use <code><a id="sthref456"></a>try</code> and <a id="sthref457"></a><code>catch</code> blocks to catch any SQLExceptions. For example, in the <code>getAllEmployees</code> method, enclose your existing code in a <code>try</code> block, and add a <code>catch</code> block as follows:</p>
<pre>
public ResultSet getAllEmployees() throws SQLException {
  try {
    getDBConnection();
    stmt =
      conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                           ResultSet.CONCUR_READ_ONLY);
    sqlString = "SELECT * FROM Employees order by employee_id";
    System.out.println("\nExecuting: " + sqlString);
    rset = stmt.executeQuery(sqlString);
  } 
  catch (SQLException e) {
    e.printStackTrace();
  }
  return rset;
}
</pre></li>
<li>
<p>As another example, the <code><a id="sthref458"></a>deleteEmployee</code> method rewritten to use <code>try</code> and <code>catch</code> blocks would return "success" only if the method was successful, that is, the <code>return</code> statement is enclosed in the <code>try</code> block. The code could be as follows:</p>
<pre>
  public String deleteEmployeeById(int id) throws SQLException {
 
    try {
      getDBConnection();
      stmt =
        conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, 
                             ResultSet.CONCUR_READ_ONLY);
      sqlString = "delete FROM Employees where employee_id = " + id;
      System.out.println("\nExecuting: " + sqlString);
 
      stmt.execute(sqlString);
      return "success";
    }
    catch (SQLException e) {
      e.printStackTrace();
    }
  }
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="TDPJD203"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref459"></a>
<h3 class="sect2"><span class="secnum">5.5.2</span> Creating a Method for <a id="sthref460"></a>Handling Any SQLException</h3>
<p>As a refinement to the code for the sample application, you can create a method that can be used in any method that might throw a <code>SQLException</code>, to handle the exception. As an example, the following method could be called in the <code>catch</code> block of any of the methods in the sample application. This method cycles through all the exceptions that have accumulated, printing a stack trace for each.</p>
<div class="example">
<p class="titleinexample"><a id="BGBGBGDA"></a><a id="TDPJD336"></a>Example 5-5 Adding a Method to Handle Any SQLException in the Application</p>
<pre>
public void logException( SQLException ex )
{
  while ( ex != null ) {
    ex.printStackTrace();
    ex = ex.getNextException();
  }
}
</pre></div>
<!-- class="example" -->
<p>In addition, in the <code>catch</code> block, you can return text that explains why the method has failed. The <code>catch</code> block of a method could therefore be written as follows:</p>
<pre>
catch ( SQLException ex )  {
  logException( ex );
  return "failure";
}
</pre>
<p>To add this feature to your application:</p>
<ol>
<li>
<p>In the <code><a id="sthref461"></a>DataHandler.java</code>, add a <code>logException</code> method.</p>
</li>
<li>
<p>Edit each of the methods to include <code>try</code> and <code>catch</code> blocks.</p>
</li>
<li>
<p>In the <code>catch</code> block of each method, run the <code>logException</code> method.</p>
</li>
<li>
<p>For methods that have a return value of <code>String</code>, include a <code>return</code> statement to return a message indicating that the method has failed such as:</p>
<pre>
return "failure";
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCCDHE"></a><a id="TDPJD204"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">5.6</span> <a id="sthref462"></a>Navigation in the Sample Application</h2>
<p>The <a id="sthref463"></a><code>web.xml</code> file is the <a id="sthref464"></a>deployment descriptor file for a web application. One section of the <code>web.xml</code> file can be used for defining a start page for the application, for example:</p>
<pre>
&lt;web-app&gt;
...
  &lt;welcome-file&gt;
    myWelcomeFile.jsp
  &lt;/welcome-file&gt;
...
&lt;/web-app&gt;
</pre>
<p>If you do not define a welcome page in your <code>web.xml</code> file, generally a file with the name <code>index</code>, with extension <code>.html</code>, <code>.htm</code>, or <code>.jsp</code> if there is one, is used as the starting page. With JDeveloper, you can define which page is to be the default run target for the application, that is, the page of the application that is displayed first, by defining it in the properties of the project.</p>
<p>Once the application has started, and the start page has been displayed, navigation through the application is achieved using the following scheme:</p>
<ul>
<li>
<p>Links, in the form of HTML anchor tags, define a target for the link, usually identifying another JSP page to which to navigate, and some text for the link.</p>
</li>
<li>
<p><a id="sthref465"></a>HTML submit buttons, are used to submit forms on the pages, such as forms for entering new or changed data.</p>
</li>
<li>
<p><a id="sthref466"></a><code>jsp:forward</code> tags, which are executed on JSP pages that handle queries and forms, to forward to either the same JSP page again, or another JSP page.</p>
</li>
</ul>
<a id="BGBIEIAJ"></a><a id="TDPJD205"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">5.6.1</span> Creating a Starting Page for an Application</h3>
<p>In the following steps, you create the <code><a id="sthref467"></a>index.jsp</code> page, which will be the default starting page for the application. The page does not include any display elements, and simply forwards the user to the application login page, <code>login.jsp</code>. To do this you use the <code>jsp:forward</code> tag. A <code>jsp:forward</code> tag runs on JSP pages that handle queries and forms, to forward to either the same JSP page again, or another JSP page.</p>
<ol>
<li>
<p>Create a new JSP page and call it <code>index.jsp</code>.</p>
</li>
<li>
<p>For the sample application, we will not add any text to this page. From the JSP page of the Component Palette, drag <span class="bold">Forward</span> to include a <code>jsp:forward</code> tag in the page.</p>
</li>
<li>
<p>In the Insert Forward dialog box for the <code>forward</code> tag, enter <code>login.jsp</code> as the <span class="bold">Page</span>.</p>
</li>
</ol>
<p>You can now specify this new page as the default target for the application as follows:</p>
<ol>
<li>
<p>In the Application Navigator, right-click the View project and choose Project Properties.</p>
</li>
<li>
<p>In the displayed tree, select <span class="bold">Run/Debug/Profile</span>. In the Run/Debug/Profile area, ensure that Use Project Settings is selected, and in the Run Configurations area, ensure that Default Configurations is selected. Click <span class="bold">Edit</span>.</p>
</li>
<li>
<p>In the Edit Launch Settings dialog box, select <span class="bold">Launch Settings</span>. In the Launch Settings area on the right, click <span class="bold">Browse</span> next to the Default Run Target field and navigate to find the new <code>index.jsp</code> page you just created and click <span class="bold">OK</span>. Then click <span class="bold">OK</span> again to close the dialog box.</p>
</li>
</ol>
<p>You can now run your application by right-clicking in the <span class="bold">View</span> project and select <span class="bold">Run</span> from the shortcut menu. The application runs and runs <code>index.jsp</code>, which has been set as the default launch target for the application. The <code>index.jsp</code> forwards you directly to the login page, <code>login.jsp</code>, which is displayed in your browser.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1097">
<tr>
<td class="cellalignment1104">
<table class="cellalignment1102">
<tr>
<td class="cellalignment1101"><a href="querdata.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1101"><a href="addfunc.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2007, 2012,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1106">
<table class="cellalignment1100">
<tr>
<td class="cellalignment1101"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1101"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1101"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1101"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1101"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1101"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
