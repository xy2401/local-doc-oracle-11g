<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Event Management Policies</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 033" />
<meta name="dcterms.created" content="2011-08-16T11:52:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Rules Manager and Expression Filter Developer's Guide" />
<meta name="dcterms.identifier" content="E14919-04" />
<meta name="dcterms.isVersionOf" content="EXPRN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="exprn_brm_intro.htm" title="Previous" type="text/html" />
<link rel="Next" href="exprn_brm_evnt_rcconfig.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e14919.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/36</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='exprn_brm_eventpolicies'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript><a id="CIHFAJAG"></a><a id="EXPRN075"></a>
<h1 class="chapter"><span class="secnum">3</span> Event Management Policies</h1>
<p>The rule class properties you specify at the time you create the rule class include the event management policies <a id="sthref49"></a><a id="sthref50"></a>that the Rules Manager should enforce for each rules application. In the case of rules defined for composite event structures, the primitive events are added to the system one at a time. These events are later combined with other primitive events to form composite events that match one or more rule conditions. Depending on the join conditions between primitive events, a primitive event can participate in a 1 to 1, 1 to <span class="italic">N</span>, or <span class="italic">N</span>-to-<span class="italic">M</span> relationship with other events to form one or more composite events. Rules Manager supports application-specific requirements for reusing primitive events and for handling duplicate composite events using rule event management policies and they are broadly classified as follows:</p>
<ul>
<li>
<p>Consumption &mdash; determines if an event can be used for multiple rule executions or a single rule execution</p>
</li>
<li>
<p>Conflict resolution or ordering &mdash; determines the order in which matching rules with various events are to be executed</p>
</li>
<li>
<p>Duration &mdash; determines the lifetime of unconsumed primitive events</p>
</li>
<li>
<p>Auto-commit &mdash; determines if each interaction with a rule class should be committed automatically</p>
</li>
<li>
<p>Storage &mdash; determines the storage characteristics of the rule class in the database</p>
</li>
<li>
<p>Equal &mdash; specifies the common equality join predicates for all the rules in a rule class, that is, what are the lists of primitive event attributes that are equal in the composite events configured for a rule class</p>
</li>
<li>
<p>DML Events &mdash; specifies when you create an event structure with one or more table alias attributes, that you can configure the corresponding rule class to consider the DML operation (<code>INSERT, UPDATE, DELETE</code>) on the corresponding tables as the events for which the rules are evaluated. The DML Events specification uses DML events from uncommitted transactions to process the rules. Whereas, in the case of continuous query notification (formerly database change notification) (CNF) events (see <a href="exprn_brm_intro.htm#BHCDBFEH">Section 2.5</a> and <a href="#CIHCFFGF">Section 3.7</a> for more information), the rules are processed for the DML operations within a transaction after the transaction commit operation.</p>
</li>
</ul>
<p>The event management policies <code>duration</code> and <code>equal</code> are only applicable to rule classes configured for composite events. All other policies are applicable to rule classes configured for simple events as well as rule classes configured for composite events. In addition to the event management policies, the rule class properties allow the specifications for collection of events. A collection specification enables a primitive event to be used in rule conditions involving collections of events as opposed to individual events. For such events, rule conditions can compute aggregate values over a finite but potentially large number of primitive events of the same type and specify predicates on the resulting aggregates. Primitive events of a specific type are grouped based on certain event attributes and aggregate operators, such as <code>SUM</code>, <code>AVG</code>, <code>MIN</code>, <code>MAX</code>, and <code>COUNT</code> on the other event attributes are used to apply predicates.</p>
<p>The rule class properties are all specified in an XML properties document, which is used as one of the arguments (<code>rlcls_prop</code>) to the rule class creation procedure (<code>dbms_rlmgr.create_rule_class</code>). <a href="exprn_brm_evnt_rcconfig.htm#CJAGFIDJ">Section 4.8</a> discusses the rule class property for enabling collections. All other rule class properties are described in the sections that follow.</p>
<a id="CIHIFHGE"></a><a id="EXPRN076"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.1</span> Consumption of Events</h2>
<p>A primitive event <a id="sthref51"></a><a id="sthref52"></a>used to form a composite event can be combined with other primitive events to form a different composite event. For example, you can combine two instances of the <code>AddFlight</code> event with one instance of <code>AddRentalCar</code> event to form two different composite events (that could match two different rules). Some rule applications require that once a primitive event matches a rule on its own or in combination with other primitive events, it should not be used with any more rule executions. This implies that a primitive event used to form a composite event is consumed or removed from the system. The <code>consumption</code> property for a rule class determines the policy regarding the reuse of primitive events in the system. The consumption policy is applicable to both the rules defined for simple events and the rules defined for composite events. Two modes of event consumption are possible:</p>
<ul>
<li>
<p><code>EXCLUSIVE</code> &mdash; when the consumption mode is <code>EXCLUSIVE</code>, a primitive event can be used to match only one rule (which ever matches first). Once the corresponding rule action is executed, this event is removed from the system, irrespective of the event duration specification (<code>TRANSACTION</code>, <code>SESSION</code>, or <code>Elapsed time</code>).</p>
</li>
<li>
<p><code>SHARED</code> &mdash; when the consumption mode is <code>SHARED</code>, a primitive event can be used to match any number of rules and execute their actions. The primitive event is removed from the system only when its duration specification is met. The default consumption policy for a rule class created with no consumption property is <code>SHARED</code>.</p>
</li>
</ul>
<p>Following the same example used previously, if two <code>AddFlight</code> events are already added to the system, the next <code>AddRentalCar</code> event could form two composite events that could match two or more rules. If the rule class is configured for <code>EXCLUSIVE</code> consumption of events, only one of the rule actions can be executed using one of the composite events. This rule can be chosen deterministically if appropriate conflict resolution techniques are employed (see <a href="#BABHCGEA">Section 3.2</a>).</p>
<p>The <code>EXCLUSIVE</code> consumption policy for a rule class created for a simple event structure implies that, at most, one rule is executed for any event instance passed to the <code>dbms_rlmgr.process_rules</code> procedure. If the event matches more than one rule, the rule that is chosen for execution is determined using the ordering property of the rule class (see <a href="#BABHCGEA">Section 3.2</a> that describes ordering). You can configure the rule class created for a primitive event structure with the <code>EXCLUSIVE</code> event consumption policy using the following XML properties document (as the <code>rlcls_prop</code> argument to the <code>dbms_rlmgr.create_rule_class</code> procedure).</p>
<pre>
&lt;simple consumption="exclusive"/&gt;
</pre>
<p>Other valid forms of consumption specification within the rule class properties include the following:</p>
<pre>
&lt;composite consumption="exclusive"/&gt;

&lt;composite consumption="shared"/&gt;
</pre>
<p>Rule applications can have different policies regarding the reuse of primitive events for a subset of primitive events used in a composite event. For such applications, the consumption policy can be specified for each primitive event type as a child element of the <code>&lt;composite&gt;</code> element, such as the following:</p>
<pre>
&lt;composite consumption="shared"&gt;
   &lt;object type="AddFlight" consumption="shared"&gt;
   &lt;object type="AddRentalCar" consumption="exclusive"&gt;
&lt;/composite&gt;
</pre>
<p>The value for the <code>consumption</code> attribute of the <code>&lt;composite&gt;</code> element is used as the default value for all the primitive events in the composite event. This default value is overridden for a primitive event type by specifying it as the child element of the <code>&lt;composite&gt;</code> element and specifying the consumption attribute for this element.</p>
<p class="subhead2"><a id="EXPRN503"></a>Specifying Custom Logic for Event Consumption</p>
<p>In addition to <code>EXCLUSIVE</code> and <code>SHARED</code> consumption policies, a rule class for composite events can be configured with a <code>RULE</code> consumption policy, which allows individual rules in the rule class to use some custom logic for event consumption. The <code>RULE</code> consumption policy can only be specified at the composite event level and when specified, the consumption policy for the primitive event type cannot be set to <code>EXCLUSIVE</code>. When you configure the rule class for <code>RULE</code> consumption policy, the action callback procedure and the rule class results view are created to return the identifiers for the individual primitive events matching a rule. You use these identifiers to selectively consume some or all of the primitive events atomically. See the <a class="olink ARPLS181" href="../../appdev.112/e40758/d_rlmgrref.htm#ARPLS181"><code>DBMS_RLMGR.CONSUME_PRIM_EVENTS</code> function</a> for more information.</p>
</div>
<!-- class="sect1" -->
<a id="BABHCGEA"></a><a id="EXPRN077"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.2</span> Ordering of Rule Execution</h2>
<p>When an event matches<a id="sthref53"></a><a id="sthref54"></a><a id="sthref55"></a> a rule on its own or in combination with other primitive events, by default, the order of rule (action) executions is not deterministic. Some rule applications may need the matching rules to execute in a particular order, which is determined by some conflict resolution criteria. Additionally, in the case of exclusive consumption of events, only one of the matching rules is executed. Unless some conflict resolution criterion is specified, this rule is chosen randomly. One of the common techniques of conflict resolution is to order the resulting composite events and matching rules based on the event attribute values and the rule action preferences.</p>
<ul>
<li>
<p>Conflict resolution among composite events</p>
<p>The composite events resulting from the addition of a primitive event can be ordered based on the attributes of the corresponding primitive events. For example, the travel services application may decide to resolve among a set of composite events, consisting of <code>AddFlight</code> and <code>AddRentalCar</code> primitive events, based on the primitive event creation times. So, the conflict resolution criterion for this composite event structure is represented as [<code>Flt.rlm$CrtTime</code>, <code>Car.rlm$CrtTime</code>], implying that an event with earliest creation time is consumed before the others. This notation is similar to that of an <code>ORDER BY</code> clause in a SQL query. Optionally, the <code>DESC</code> keyword can be used with some of the attributes to sort the events in descending order (see information later in this section for complete syntax). When the rule class is configured for exclusive consumption of events, only the top-most event in this sorted list is chosen for rule execution.</p>
</li>
<li>
<p>Conflict resolution among matching rules for simple and composite events</p>
<p>A composite or a simple event can match one or more rules in a rule class. If more than one rule is matched, by default, their actions are executed in a non-deterministic order. If the order of the rule action executions is important, you can use the rule identifiers and the action preferences associated with the rules to sort the matching rules. For example, the travel services application can resolve among matching rules by using the conflict resolution criterion &ndash; [<code>rlm$rule.PromoType</code>, <code>rlm$rule.OfferedBy</code>, <code>rlm$rule.rlm$ruleid</code>]. In this case, sorting the matching rules is done in ascending order and ordered first by the action preference <code>PromoType</code>, then by the action preference <code>OfferedBy</code>, then by the rule identifier <code>rlm$ruleid</code>. As shown in this example, the rule identifier <code>rlm$rule</code> is used to refer to any rule-specific attribute. The notation and semantics used for specifying conflict resolution criteria are similar to that of an <code>ORDER BY</code> clause in a SQL query. Optionally, you can use the <code>DESC</code> keyword with some of the attributes to sort the rules in the descending order (see information later in this section for complete syntax). When you configure the rule class for exclusive consumption of events, only the top-most rule in the sorted list is chosen for execution.</p>
</li>
</ul>
<p>When a set of composite events matches a set of rules, the exact order of rule executions can be specified by combining the conflict resolution criterion for the composite events with that of the matching rules. The syntax for specifying the conflict resolution criteria is described using the <code>ORDERING</code> property.</p>
<p>The <code>ORDERING</code> property <a id="sthref56"></a><a id="sthref57"></a><a id="sthref58"></a>of the rule class determines the order in which a set of rules that match a set of composite events or a simple event are executed. When the consumption policy for a composite event type or for some primitive event types is set to <code>EXCLUSIVE</code>, the <code>ORDERING</code> property also determines the subset of rules that are executed. (The rest of the matching rules are ignored, because the exclusive events that are required to execute the rules are deleted after the first rule execution). The <code>ORDERING</code> property is applicable to both the rules defined for simple events and the rules defined for composite events.</p>
<p>In the case of a rule class created for a composite event structure, the addition of a primitive event to the system could form multiple composite events that could match multiple rules. So, you can specify the ordering of the resulting events and the matching rules using the attributes in the events, the action preferences associated with the rules, and the rule identifiers. For the travel services rule class example, you can specify the ordering of the events and the matching rules as follows:</p>
<pre>
&lt;composite ordering="Flt.rlm$CrtTime, Car.rlm$CrtTime, rlm$rule.PromoType, rlm$rule.OfferedBy, rlm$rule.rlm$ruleid"/&gt;
</pre>
<p>In this ascending column, attribute ranked, ordering specification, you use the rule identifier <code>rlm$rule</code> to refer to the attributes associated with the rule class (action preferences <code>PromoType</code> and <code>OfferedBy</code> and the rule identifier <code>rlm$ruleid</code>); and you use the variables declared for the primitive events in the composite event structure (<code>Flt</code> for <code>AddFlight</code> and <code>Car</code> for <code>AddRentalCar</code>) to access the primitive events' attribute values.</p>
<p>The <code>ORDERING</code> property can be combined with some other policies, such as consumption and duration. Other valid forms of ordering specification within the rule class properties include:</p>
<pre>
&lt;composite consumption="exclusive"
           ordering="Flt.rlm$CrtTime, rlm$rule.PromoType,
                                      rlm$rule.rlm$ruleid DESC"/&gt;
&lt;simple ordering="rlm$rule.PromoType, rlm$rule.OfferedBy, rlm$rule.rlm$ruleid/&gt;
</pre>
<p>In the case of a rule class created for a simple event structure, as there is only one event at any point in time, the ordering is only based on the matched rules. So Rules Manager only allows in the ordering clause, the rule identifier and action preferences associated with the rules.</p>
</div>
<!-- class="sect1" -->
<a id="CJAEGECB"></a><a id="EXPRN078"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.3</span> Duration of Events</h2>
<p>It is common for applications to generate events that will never trigger a rule firing, thus never consuming these events. The duration policy for primitive events determines the maximum lifetime of the events. When you add a primitive event<a id="sthref59"></a><a id="sthref60"></a><a id="sthref61"></a><a id="sthref62"></a> to Rules Manager for incremental evaluation of rules, the event and the evaluation results are stored in the database. These events are later combined with other matching primitive events to form a composite event that conclusively satisfies one or more rule conditions. However, there may not be a matching event to form a composite event. For example, the travel services rule discussed in <a href="exprn_brm_intro.htm#CEGJBHJB">Section 2.6</a> may detect an <code>AddFlight</code> event for a rule, but the corresponding <code>AddRentalCar</code> event may not occur (or the <code>AddRentalCar</code> event occurring may not be for a luxury car). So, the duration (or the life) of the primitive events should be set such that the incomplete (composite) events and the results from the incremental rule evaluations are deleted after a certain period.</p>
<p>The duration of a primitive event depends on the rule application and it can be classified into one of following four scenarios.</p>
<ul>
<li>
<p>TRANSACTION: In this scenario, the primitive events added to the system during a database transaction are preserved until the end of the transaction (<code>COMMIT</code> or <code>ROLLBACK</code>). So, a rule for the composite event evaluates to true only if Rules Manager detects all the required primitive events within a database transaction.</p>
</li>
<li>
<p>SESSION: In this scenario, the primitive events added during a database session are preserved until the end of the session (<code>CONNECT</code> or <code>DISCONNECT</code>). So, a rule for the composite event evaluates to true only if Rules Manager detects all the required primitive events within a database session.</p>
</li>
<li>
<p>CALL: In some rule applications, a subset of primitive events are truly transient in that an event is considered for a possible match with the rules only at the instance at which the event is added. Such events do not contribute to the event history and they are not considered for any future rule matches. Hence, these events are said to be valid only for the duration of the call (<code>PROCESS_RULES</code> or <code>ADD_EVENT</code>) that processes the rules. You can configure a subset of primitive events within a composite event for the <code>CALL</code> duration. A <code>CALL</code> duration event contributes to a rule execution only if the event, in combination with other events in the system, evaluates a rule condition to true at the time of the call. Such events are not considered for rule matches after the call regardless of any rule executions during the call.</p>
</li>
<li>
<p>Elapsed time: In this scenario, the duration of a primitive event added to the system is determined by an event timeout associated with the rule class. You specify the event timeout as elapsed time (for example 10 hours, 3 days) and this is added to the creation time (determined by its <code>rlm$CrtTime</code> attribute) to determine the exact time of event deletion.</p>
</li>
</ul>
<p>The duration policy dictates the life span of the primitive events in the system. In the case of a rule class created for simple events, Rules Manager does not store the events in the system (as the rules are evaluated conclusively for each event). So, the duration policy is applicable only for the rule classes created for composite event structures. A rule class configured to reset all the primitive events at the end of each (database) transaction uses the following XML properties document:</p>
<pre>
&lt;composite duration="transaction"/&gt;
</pre>
<p>While specifying the duration as elapsed time, the value for the <code>duration</code> attribute can be specified in {[int] minutes | hours | days} format, such as shown here:</p>
<pre>
&lt;composite duration="20 minutes"/&gt;
&lt;composite duration="2 hours"/&gt;
&lt;composite duration="10 days"/&gt;
</pre>
<p>These specifications apply to all the primitive events that constitute the composite event. If different duration specifications are required for some primitive event types, you can specify them as child elements of the <code>&lt;composite&gt;</code> element, such as shown here:</p>
<pre>
&lt;composite duration="10 days"&gt;
   &lt;object type="AddFlight" duration="3 days"/&gt;
   &lt;object type="AddRentalCar" duration="call"/&gt;
&lt;/composite&gt;
</pre>
<p>In this case, you use the value of 10 days for the <code>duration</code> attribute of the <code>&lt;composite&gt;</code> element as the default value for all the primitive events in the composite event. This default value is overridden for a primitive event type by specifying it as the child element of the <code>&lt;composite&gt;</code> element and specifying the <code>duration</code> attribute for this element, for example, as shown by the duration property <code>call</code> specified for the <code>AddRentalCar</code> event type. So these <code>AddRentalCar</code> events would be discarded if they did not match a rule during either a <code>PROCESS_RULES</code> or <code>ADD_EVENT</code> call.</p>
<p>A restriction on the duration policy is that the <code>TRANSACTION</code> or <code>SESSION</code> values for the duration policy can only be specified at the composite event level. When specified, these values cannot be overridden at the primitive events level.</p>
</div>
<!-- class="sect1" -->
<a id="CIHHIEFE"></a><a id="EXPRN080"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.4</span> Equality</h2>
<p>In the case of a rule class for composite events, identifying the most-common equality join predicates in all rule conditions and specifying those using the <code>EQUAL</code> rule class property is important for performance. All rules in a rule class use one or more common (equality) <a id="sthref63"></a><a id="sthref64"></a>join predicates to relate the primitive events that form a composite event with each other. You define these join predicates using the attributes of the corresponding primitive event types. For example, in the travel services application, the <code>AddFlight</code> and <code>AddRentalCar</code> events in a composite event are related through the customer identifiers in these primitive events (<code>Flt.CustId = Car.CustId</code>). You can configure the rule class to optimize a limited number of distinct equality join predicates used in its rule conditions using the <code>EQUAL</code> property.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use of the <code>EQUAL</code> property at the rule class level is mandatory for better performance.</div>
<p>The <code>EQUAL</code> property used for a rule class may be of two types depending on the homogeneity of the join conditions in its rules. In the case of a rule class with a homogenous set of rules using the same equality join predicate for all its rule conditions, the equal specification for the rule class can be uniquely identified and there is only a single equal specification. On the other hand, when different subsets of rules use different join predicates, you can configure the rule class with a limited number of alternate equal specifications. Each equal specification may be based on a single attribute from each contributing primitive event or it could be based on multiple attributes from each primitive event (concatenated keys) as discussed in this section.</p>
<a id="EXPRN504"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref65"></a>
<h3 class="sect2"><span class="secnum">3.4.1</span> Single Equal Specification for a Rule Class</h3>
<p>A single equal specification for a rule class identifies the equality join predicates that are used by all rules in the rule class. For example, if all the rules in the travel services applications relate the primitive events based on the customer identifiers <code>(Flt.CustId = Car.CustId)</code>, then you can configure this join predicate as a single equal specification for the rule class's <code>EQUAL</code> property.</p>
<p>In this case, you specify the <code>EQUAL</code> property as a comma-delimited list of attributes, one from each primitive event structure configured for the rule class and it is used as the join predicate for all the rules in the rule class. This list identifies the primitive event attributes that must be equal to form a composite event. For example:</p>
<pre>
&lt;composite equal="Flt.CustId, Car.CustId"/&gt;
</pre>
<p>When the composite event has more than two primitive events, the corresponding rule conditions may employ conjunctions of two of more equality join predicates. For example, if <code>reading1</code>, <code>reading2</code>, and <code>reading3</code> are three primitive events representing RFID readings, the join condition in a rule relating these three events could be <code>reading1.ReaderId = reading2.ReaderId</code> and <code>reading2.ReaderId = reading3.readingId</code> (to check for all three readings to occur at the same reader). The corresponding equal specification is a comma-delimited list of attributes from each primitive event (<code>reading1.readerId</code>, <code>reading2.readerId</code>, <code>reading3.readerId</code>).</p>
<p>In the case of single equal specification, since each rule condition is guaranteed to use the same equality join predicate, the equal specification in the rule class properties obviate the need for the same join predicate in each rule condition. Hence, the rules in the rule class may skip the equality join predicates involving the same set of attributes, as demonstrated with the following examples.</p>
<p>The following rule condition explicitly specifies the equality join predicate in conjunction with other (possible inequality) join predicates. This specification uses the SQL <code>WHERE</code> clause syntax for join predicates.</p>
<pre>
&lt;condition&gt;
  &lt;and join="<span class="codeinlinebold">Flt.CustId = Car.CustId</span> and Car.rlm$CrtTime &gt; Flt.rlm$CrtTime "&gt;
    &lt;object name="Flt"&gt; Airline='Abcair' and ToCity='Orlando' &lt;/object&gt;
    &lt;object&gt; CarType = 'Luxury' &lt;/object&gt;
  &lt;/and&gt;
&lt;/condition&gt;
</pre>
<p>The following rule condition demonstrates the use of the EQUAL clause in the place of the equality join predicate in the previous example. The EQUAL clause specification for a rule condition acts as a short representation of equality join predicates especially when the rule condition has negation (see <a href="exprn_brm_rule_cond.htm#BABBGBAJ">Section 5.3</a>) or Any <span class="italic">n</span> (see <a href="exprn_brm_rule_cond.htm#CIHIIGHD">Section 5.5</a>) constructs.</p>
<pre>
&lt;condition&gt;
  &lt;and equal="Flt.CustId, Car.CustId"  
       join="Car.rlm$CrtTime &gt; Flt.rlm$CrtTime"&gt;
    &lt;object name="Flt"&gt; Airline='Abcair' and ToCity='Orlando' &lt;/object&gt;
    &lt;object&gt; CarType = 'Luxury' &lt;/object&gt;
  &lt;/and&gt;
&lt;/condition&gt;
</pre>
<p>When the <code>EQUAL</code> property for the rule class is specified as <code>equal="Flt.CustId, Car.CustId"</code>, use of the corresponding join predicate or the EQUAL clause in a rule condition (as shown with the previous two examples) is redundant. In this case, the single equal specification associated with the rule class is enforced for all rules in the rule class. Hence, the following rule condition is equivalent to the previous two examples when the rule class is created with the previous <code>EQUAL</code> property.</p>
<pre>
&lt;condition&gt;
  &lt;and join="Car.rlm$CrtTime &gt; Flt.rlm$CrtTime"&gt;
    &lt;object name="Flt"&gt; Airline='Abcair' and ToCity='Orlando' &lt;/object&gt;
    &lt;object name="Car"&gt; CarType = 'Luxury' &lt;/object&gt;
  &lt;/and&gt;
&lt;/condition&gt;
</pre>
<p class="subhead2"><a id="EXPRN505"></a>Equal Specification with Concatenated Keys</p>
<p>Often the equality join predicates between primitive events may involve more than one attribute from each primitive event. For example, in the travel services application, the <code>AddFlight</code> and <code>AddRentalCar</code> events may be related to each other based on their itineraries (equality predicate on <code>Depart</code> and <code>CheckOut</code> dates from respective events), in addition to the equality of the customer identifiers. A sample rule using such join predicates is as follows.</p>
<pre>
    &lt;and join=<span class="codeinlinebold">"Flt.CustId = Car.CustId and Flt.Depart = Car.CheckOut"</span>&gt; 
       &lt;object name="Flt"&gt; Airline = 'Abcair' and ToCity = 'Orlando' &lt;/object&gt; 
       &lt;object name="Car"&gt; CarType = 'Luxury' &lt;/object&gt;
    &lt;/and&gt; 
</pre>
<p>If the equality predicates involving multiple attributes from each primitive event are common across all the rules in the rule class, you can configure the rule class with an <code>EQUAL</code> property specification with concatenated keys for optimal performance.</p>
<pre>
&lt;composite equal="(Flt.CustId, Car.CustId), (Flt.Depart, Car.CheckOut)"/&gt;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
A maximum of three key concatenations can be specified with the rule class's EQUAL property.</div>
<p>With the previous specification, the combination of [<code>Flt.CustId</code>, <code>Flt.Depart</code>] attributes acts as a concatenated key for each <code>Flt</code> event and it should match the concatenated key from a <code>Car</code> event for any rule in the rule class to be true. Since you enforce the previous equal specification for all rules in the rule class, a similar equal specification for each rule may be skipped.</p>
</div>
<!-- class="sect2" -->
<a id="EXPRN506"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref66"></a>
<h3 class="sect2"><span class="secnum">3.4.2</span> Alternate Equal Specifications</h3>
<p>Another form of <code>EQUAL</code> property specification for a rule class identifies a list of the most common equality join predicates in its rules. For this purpose, each single equal specification is grouped using parentheses and alternate equal specifications are separated using a vertical bar ( '|') character. For example, if you create a rule class with two primitive events of the same <code>RFIDRead</code> type, a subset of rules in the rule class may join the primitive events on their <code>ItemId</code> attributes (<code>reading1.ItemId = reading2.ItemId</code>). Another subset of the rules in the same rule class may relate the primitive events on their <code>ReaderId</code> attributes (<code>reading1.ReaderId = reading2.ReaderId</code>). You can optimize the rule class to process both types of these rules efficiently using the following <code>EQUAL</code> property:</p>
<pre>
&lt;composite equal="(reading1.ItemId, reading2.ItemId) |
                  (reading1.ReaderId, reading2.ReaderId)"/&gt;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
At most, you can define five alternate equal specifications for a rule class's <code>EQUAL</code> property.</div>
<p>The alternate equal specifications provide a means for optimizing the rule evaluation for the most common join predicates in a rule class and the rule class does not automatically enforce any equality join predicates for its rules. For optimal performance, each rule condition in the rule class must specify one of the alternate equal specifications for its EQUAL clause. For example, the following rule's EQUAL clause matches one of the alternate equal specifications at the rule class level and hence, this rule is optimized:</p>
<pre>
&lt;condition&gt;
  &lt;and equal="reading1.ItemId, reading2.ItemId"/&gt;
    &lt;object name="reading1"/&gt;
    &lt;object name="reading2"/&gt;
  &lt;/and&gt;
&lt;/condition&gt;
</pre>
<p>Hence, the EQUAL clause for individual rules in a rule class not only acts as a short representation for the equality join predicate, but also helps map it into one of the alternate <code>EQUAL</code> property specifications.</p>
<p>The alternate equal specification may include one or more specifications involving concatenated keys. For example, if the travel services application uses some rules, which just relate the <code>AddFlight</code> and <code>AddRentalCar</code> events based on their customer identifiers and some other rules on the identifiers as well as the dates in their itineraries, you can configure the rule class with the following equal property for optimal performance.</p>
<pre>
    &lt;composite equal="(Flt.CustId, Car.CustId)  | 
                       (Flt.CustId, Car.CustId), (Flt.Depart, Car.CheckOut)"/&gt;
</pre>
<p>With this specification at the rule class level, individual rules in the rule class may use either of these two alternate <code>EQUAL</code> property specifications.</p>
<pre>
&lt;condition&gt;
  &lt;and equal="(Flt.CustId, Car.CustId), (Flt.Depart, Car.CheckOut)"&gt;
    &lt;object name="Flt"&gt; Airline='Abcair' and ToCity='Orlando' &lt;/object&gt;
    &lt;object&gt; CarType = 'Luxury' &lt;/object&gt;
  &lt;/and&gt;
&lt;/condition&gt;
</pre>
<p>Note that while matching an EQUAL clause specified for a rule with one of the alternate equal specifications, the order of attributes is irrelevant.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHGBABG"></a><a id="EXPRN081"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.5</span> Storage Properties</h2>
<p>Use the <code>STORAGE</code> attribute <a id="sthref67"></a><a id="sthref68"></a><a id="sthref69"></a><a id="sthref70"></a>of the <code>&lt;simple&gt;</code> or <code>&lt;composite&gt;</code> element to specify the storage properties for the rule class table and the internal objects created for the rule class. By default, the database objects used to manage the rules in a rule class are created using user defaults for the storage properties (Example: tablespace specification). The value assigned for this attribute can be any valid storage properties that you can specify in a typical SQL <code>CREATE TABLE</code> statement. The following XML properties document shows how to use it (as the argument to the <code>dbms_rlmgr.create_rule_class</code> procedure) to create a rule class for simple events that resides in a tablespace <code>TBS_1</code> and uses exclusive consumption policy:</p>
<pre>
&lt;simple storage="tablespace TBS_1" consumption="exclusive"/&gt;
</pre>
<p>Another example of specifying storage attributes in the rule class properties is as shown:</p>
<pre>
&lt;composite storage="tablespace TBS_1"/&gt;
</pre></div>
<!-- class="sect1" -->
<a id="CIHHHAEE"></a><a id="EXPRN082"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.6</span> AUTOCOMMIT</h2>
<p>In most cases, all the Rules Manager procedures commit immediately after each add rule, delete rule, and process rule operation. You can configure the rule class to follow transaction boundaries by turning off the auto-commit functionality. For this purpose, you can specify the <code>AUTOCOMMIT</code> property <a id="sthref71"></a><a id="sthref72"></a>in the rule class properties document. For example:</p>
<pre>
&lt;simple autocommit="NO"/&gt;
</pre>
<p>You can specify the <code>AUTOCOMMIT</code> property for the rule class created for simple as well as composite events. Other valid forms of specifying the <code>AUTOCOMMIT</code> property include:</p>
<pre>
&lt;composite autocommit="NO" consumption="shared"/&gt;
&lt;composite autocommit="YES"/&gt;
</pre>
<p>When the <code>AUTOCOMMIT</code> property is set to <code>NO</code>, the set of Rules Manager operations (add rule, delete rule, and process rule) performed in a transaction can be rolled back by issuing a <code>ROLLBACK</code> statement. An exception to this rule is when the action callback procedure (implemented by the end user) performs an irreversible operation (sending a mail, performing a data definition language (DDL) operation, commit, rollback, and so forth). A DDL operation within an action callback operation automatically commits all the operations performed in that transaction. To avoid this situation, you should perform any DDL operations in an autonomous transaction.</p>
<p>Turning off the <code>AUTOCOMMIT</code> property for a rule class can limit the concurrent operations on the rule class. This is especially the case when you create the rule class for composite events that is configured for exclusive consumption policy. (In a transaction, the consumed events are locked until the transaction is committed and the other sessions may wait for these events to be released.)</p>
<p>The default value for the <code>AUTOCOMMIT</code> property is dependent on other event management policies (see <a href="#CJAGCJDG">Table 3-1</a>). The default value for this policy is <code>NO</code> for a rule class configured for simple (non-composite) rules and a composite rule class configured with the <code>SESSION</code> or <code>TRANSACTION</code> duration policy. (These configurations do not pose issues with sharing of events across sessions). For all other configurations, a default value of <code>YES</code> is used for the <code>AUTOCOMMIT</code> property. Note that the <code>AUTOCOMMIT</code> property cannot be set to <code>YES</code> when the duration policy is set to <code>TRANSACTION</code>. Also, the <code>AUTOCOMMIT</code> property cannot be set to <code>NO</code> when one or more primitive event types are configured for <code>EXCLUSIVE</code> or <code>RULE</code> consumption policy.</p>
<p>When you define the event structure with one or more table alias constructs and you configure the corresponding rule class for DML events (see <a href="#CIHCFFGF">Section 3.7</a>), the <code>AUTOCOMMIT</code> property is always set to <code>NO</code>. Note that this could result in deadlocks while working with <code>EXCLUSIVE</code> or <code>RULE</code> consumption policies.</p>
<p>A rule class with the <code>AUTOCOMMIT</code> property set to <code>NO</code> cannot contain rules involving negation and a deadline (See <a href="exprn_brm_rule_cond.htm#BABBGBAJ">Section 5.3</a>).</p>
</div>
<!-- class="sect1" -->
<a id="CIHCFFGF"></a><a id="EXPRN083"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.7</span> DML and CNF Events</h2>
<p>When you create an event structure<a id="sthref73"></a><a id="sthref74"></a><a id="sthref75"></a> with one or more table alias attributes (see <a href="exprn_brm_evnt_rcconfig.htm#CIHEIDBB">Section 4.1</a>), then you can configure the corresponding rule class to consider the SQL <code>INSERT</code> and SQL*Loader operations on the corresponding tables as the events for which the rules are evaluated. You can enable this rule class behavior using the <code>DMLEVENTS</code> or <code>CNFEVENTS</code> property for the rule class:</p>
<pre>
&lt;simple dmlevents="I"/&gt;
&lt;simple cnfevents="I"/&gt; 
</pre>
<p>You can specify either of these properties for a rule class configured for simple and composite events. Events for <code>UPDATE</code> and <code>DELETE</code> operations on the underlying tables are only applicable for the rule classes configured for composite events.</p>
<pre>
&lt;composite dmlevents="IUD"/&gt;
&lt;composite cnfevents="IUD"/&gt;
</pre>
<p>When a row in a table is deleted, the state information for the rules matching this row are marked for deletion. Similarly, when the row is updated, the existing state information is marked for deletion and the new state information is computed for the updated row. The deleted row (or the old image of the updated row) does not have an effect on the past rule states. That is, the delete operation does not cause existing rule states to automatically become true due to the retraction of the event. This scenario pertains to the rule conditions with negative constructs, in which the event matched the negative portion of the rule before it is deleted.</p>
<p>With the DMLEVENTS specification, Rules Manager uses the events generated from a DML operation to process the rules in the rule class as part of the same DML command. This is achieved with the use of row level triggers on the underlying tables. On the other hand, when you use the CNFEVENTS specification, the rules are processed after the commit of the DML transaction using the net data changes (within the transaction) as the events. In effect, if a row is inserted into a table and then updated within the same transaction, with the CNFEVENTS specification, the rules are processed once for the newly inserted row (with committed data). Whereas, when you use the DMLEVENTS specification, the rules are processed twice for the same row - once synchronously with the <code>INSERT</code> operation and again with the <code>UPDATE</code> operation. See <a href="exprn_brm_evnt_rcconfig.htm#CJAIECGJ">Section 4.7</a> for additional information on the use of CNFEVENTS.</p>
<p>When you specify the <code>DMLEVENTS</code> policy, the <code>AUTOCOMMIT</code> policy for the rule class should be <code>NO</code>. In this case, the <code>AUTOCOMMIT</code> policy of <code>NO</code> is allowed even when the consumption policy is set to <code>EXCLUSIVE</code> or <code>RULE</code> (which is considered an invalid combination when the <code>DMLEVENTS</code> policy is not used). Note that the use of the <code>EXCLUSIVE</code> or <code>RULE</code> consumption policy with the <code>DMLEVENTS</code> policy could result in application deadlocks.</p>
</div>
<!-- class="sect1" -->
<a id="CJAGGIBF"></a><a id="EXPRN084"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">3.8</span> Rule Class Property Dependencies and Defaults</h2>
<p>You can mix and match most of the rule class properties (or event management policies) described in this section while defining a rule class. However, <a href="#CJAGCJDG">Table 3-1</a> shows some of the combinations of these properties that are considered invalid. For example, if the rule classes' <code>AUTOCOMMIT</code> property is set to <code>YES</code>, setting the <code>DURATION</code> policy to <code>TRANSACTION</code> is invalid. This is because the events are deleted from the system as soon as they are added and they cannot be combined with other events to form composite events. The <code>DMLEVENTS</code> policy has no direct influence on the valid and invalid combination of event management policies. This policy only effects the default value for the <code>AUTOCOMMIT</code> policy.</p>
<div class="tblformal">
<p class="titleintable"><a id="EXPRN507"></a><a id="sthref76"></a><a id="CJAGCJDG"></a>Table 3-1 Valid and Invalid Rule Class Property Combinations</p>
<table class="cellalignment1002" title="Valid and Invalid Rule Class Property Combinations" summary="This four column table (read from right to left) lists the valid and invaiid combinations of rule class properties for the AUTOCOMMIT, CONSUMPTION, and DURATION rule class properties" >
<thead>
<tr class="cellalignment989">
<th class="cellalignment999" id="r1c1-t5"><br /></th>
<th class="cellalignment999" id="r1c2-t5">AUTOCOMMIT</th>
<th class="cellalignment999" id="r1c3-t5">CONSUMPTION</th>
<th class="cellalignment999" id="r1c4-t5">DURATION</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment989">
<td class="cellalignment995" id="r2c1-t5" headers="r1c1-t5">
<p>Invalid</p>
</td>
<td class="cellalignment995" headers="r2c1-t5 r1c2-t5">
<p>Yes</p>
</td>
<td class="cellalignment995" headers="r2c1-t5 r1c3-t5">
<p>--</p>
</td>
<td class="cellalignment995" headers="r2c1-t5 r1c4-t5">
<p>Transaction</p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r3c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r3c1-t5 r1c2-t5">
<p>Yes</p>
</td>
<td class="cellalignment995" headers="r3c1-t5 r1c3-t5">
<p>--</p>
</td>
<td class="cellalignment995" headers="r3c1-t5 r1c4-t5">
<p>Session</p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r4c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r4c1-t5 r1c2-t5">
<p>Yes</p>
</td>
<td class="cellalignment995" headers="r4c1-t5 r1c3-t5">
<p>--</p>
</td>
<td class="cellalignment995" headers="r4c1-t5 r1c4-t5">
<p>[n] Units</p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r5c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r5c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r5c1-t5 r1c3-t5">
<p>Shared</p>
</td>
<td class="cellalignment995" headers="r5c1-t5 r1c4-t5">
<p>--</p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r6c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r6c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r6c1-t5 r1c3-t5">
<p>Exclusive</p>
</td>
<td class="cellalignment995" headers="r6c1-t5 r1c4-t5">
<p>Transaction<a id="CIHEJBCG" href="#CIHEJBCG" onclick='footdisplay(1,"A rule class operating in \u003ccode\u003eSESSION\u003c/code\u003e or \u003ccode\u003eTRANSACTION\u003c/code\u003e mode has no concurrency issues across the database session, as each session gets a private copy of the events and incremental results.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r7c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r7c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r7c1-t5 r1c3-t5">
<p>Exclusive</p>
</td>
<td class="cellalignment995" headers="r7c1-t5 r1c4-t5">
<p>Session<a id="sthref77" href="#sthref77" onclick='footdisplay(1,"A rule class operating in \u003ccode\u003eSESSION\u003c/code\u003e or \u003ccode\u003eTRANSACTION\u003c/code\u003e mode has no concurrency issues across the database session, as each session gets a private copy of the events and incremental results.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r8c1-t5" headers="r1c1-t5">
<p>Invalid</p>
</td>
<td class="cellalignment995" headers="r8c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r8c1-t5 r1c3-t5">
<p>Exclusive</p>
</td>
<td class="cellalignment995" headers="r8c1-t5 r1c4-t5">
<p>[n] Units<a id="CIHGJIDB" href="#CIHGJIDB" onclick='footdisplay(2,"A rule class with the \u003ccode\u003eEXCLUSIVE\u003c/code\u003e consumption policy locks some rows in order to mark them \"consumed\" and may not actually consume the rows. Such rows are kept from being consumed by other database sessions and thus result in deadlocks. So, it is recommended that the locked rows be released with AUTOCOMMIT=\"YES\" property.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r9c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r9c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r9c1-t5 r1c3-t5">
<p>Rule<a id="sthref78" href="#sthref78" onclick='footdisplay(3,"\u003ccode\u003eRULE\u003c/code\u003e is a special form of the \u003ccode\u003eEXCLUSIVE\u003c/code\u003e consumption policy where the consumption of certain events is initiated by the end-user.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment995" headers="r9c1-t5 r1c4-t5">
<p>Transaction<a id="sthref79" href="#sthref79" onclick='footdisplay(1,"A rule class operating in \u003ccode\u003eSESSION\u003c/code\u003e or \u003ccode\u003eTRANSACTION\u003c/code\u003e mode has no concurrency issues across the database session, as each session gets a private copy of the events and incremental results.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r10c1-t5" headers="r1c1-t5">
<p>Valid</p>
</td>
<td class="cellalignment995" headers="r10c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r10c1-t5 r1c3-t5">
<p>Rule</p>
</td>
<td class="cellalignment995" headers="r10c1-t5 r1c4-t5">
<p>Session<a id="sthref80" href="#sthref80" onclick='footdisplay(1,"A rule class operating in \u003ccode\u003eSESSION\u003c/code\u003e or \u003ccode\u003eTRANSACTION\u003c/code\u003e mode has no concurrency issues across the database session, as each session gets a private copy of the events and incremental results.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment989">
<td class="cellalignment995" id="r11c1-t5" headers="r1c1-t5">
<p>Invalid</p>
</td>
<td class="cellalignment995" headers="r11c1-t5 r1c2-t5">
<p>No</p>
</td>
<td class="cellalignment995" headers="r11c1-t5 r1c3-t5">
<p>Rule</p>
</td>
<td class="cellalignment995" headers="r11c1-t5 r1c4-t5">
<p>[n] Units<a id="sthref81" href="#sthref81" onclick='footdisplay(2,"A rule class with the \u003ccode\u003eEXCLUSIVE\u003c/code\u003e consumption policy locks some rows in order to mark them \"consumed\" and may not actually consume the rows. Such rows are kept from being consumed by other database sessions and thus result in deadlocks. So, it is recommended that the locked rows be released with AUTOCOMMIT=\"YES\" property.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>A rule class operating in <code>SESSION</code> or <code>TRANSACTION</code> mode has no concurrency issues across the database session, as each session gets a private copy of the events and incremental results.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>A rule class with the <code>EXCLUSIVE</code> consumption policy locks some rows in order to mark them "consumed" and may not actually consume the rows. Such rows are kept from being consumed by other database sessions and thus result in deadlocks. So, it is recommended that the locked rows be released with AUTOCOMMIT="YES" property.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup><code>RULE</code> is a special form of the <code>EXCLUSIVE</code> consumption policy where the consumption of certain events is initiated by the end-user.</p>
<p>The default values for various event management policies for a rule class configured for simple events are as follows:</p>
<pre>
CONSUMPTION   :  Shared
DURATION      :  Infinite Duration (NULL)
AUTOCOMMIT    :  No
</pre>
<p>The default values for the event management policies for a rule class configured for a composite event is sometimes dependent on other event management policies, as follows:</p>
<pre>
CONSUMPTION   :  Shared
DURATION      :  Infinite Duration (NULL)
AUTOCOMMIT
   IF DMLEVENTS = IUD                                 : NO
   ELSE IF DURATION = TRANSACTION / SESSION           : NO
   ELSE                                               : YES
</pre></div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment988">
<tr>
<td class="cellalignment995">
<table class="cellalignment993">
<tr>
<td class="cellalignment992"><a href="exprn_brm_intro.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment992"><a href="exprn_brm_evnt_rcconfig.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment997">
<table class="cellalignment991">
<tr>
<td class="cellalignment992"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment992"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment992"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment992"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment992"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment992"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
