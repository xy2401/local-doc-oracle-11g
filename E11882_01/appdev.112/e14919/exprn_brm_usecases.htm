<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Rules Manager Use Cases</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 033" />
<meta name="dcterms.created" content="2011-08-16T11:52:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Rules Manager and Expression Filter Developer's Guide" />
<meta name="dcterms.identifier" content="E14919-04" />
<meta name="dcterms.isVersionOf" content="EXPRN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="exprn_brm_views.htm" title="Previous" type="text/html" />
<link rel="Next" href="exprn_part2.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e14919.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/36</span> <!-- End Header --><a id="CHDBBFFD"></a><a id="EXPRN103"></a>
<h1 class="chapter"><span class="secnum">10</span> Rules Manager Use Cases</h1>
<p>This chapter describes<a id="sthref151"></a> a Law Enforcement application and an Order Management application to demonstrate the use of Rules Manager in multiple configurations and to demonstrate the expressiveness of the complex rule conditions.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The complete scripts for these two applications can be found installed at: <code>$ORACLE_HOME/rdbms/demo</code> as <code>ruldemo.sql</code>.</div>
<a id="CIHBEJGC"></a><a id="EXPRN527"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">10.1</span> Law Enforcement Rules Application</h2>
<p>This Law Enforcement Rules application<a id="sthref152"></a><a id="sthref153"></a> defines rules to raise security alerts, place a person on the watch list, and so forth based on certain criteria. For this purpose, this application uses some real-world events such as bank transactions, transportation, and field reports to describe the criteria.</p>
<p>The basic steps to create the Law Enforcement rules application with composite events are as follows:</p>
<ol>
<li>
<p>Create the table <code>messagequeue</code> to hold the messages with a timestamp value:</p>
<pre>
create table messagequeue (attime timestamp, mesg varchar2(4000));
</pre></li>
<li>
<p><a id="CIHIHCCE"></a>Create the basic types that represent the event structure:</p>
<pre>
create or replace type BankTransaction as object
    (subjectId NUMBER,         --- Refer to entity such as personnel
                               --- Could be SSN and so forth
     tranType  VARCHAR2(30),   --- DEPOSIT / TRANSFER / WITHDRAW
     amount         NUMBER,         ---
     fundFrom  VARCHAR2(30));  --- Location from which it is transfered
/

create or replace type Transportation as object
    (subjectId  NUMBER,
     vesselType VARCHAR2(30),  --- TRUCK / CAR / PLANE / TRAIN
     locFrom    VARCHAR2(30),  --- Starting location
     locTo      VARCHAR2(30),  --- Ending location
     startDate  DATE,          --- start date
     endDate    DATE);         --- end date
/

create or replace type FieldReport as object
    (subjectId NUMBER,
     rptType   VARCHAR2(30),   --- Tel call / Meeting / Bg Check
     whoWith   NUMBER,         --- Identifier of the person with whom
                               --- the subject is in touch
     rptOrg    VARCHAR2(30),   --- Organization reporting it
     rptReg    VARCHAR2(30),   --- Region
     rptBody   sys.XMLType);   --- The actual report
/
</pre></li>
<li>
<p>Create a composite event type that consists of the basic types defined in Step <a href="#CIHIHCCE">2</a>:</p>
<pre>
create or replace type LawEnforcement as object
    (bank      BankTransaction,
     transport Transportation,
     fldrpt    FieldReport);
/
</pre></li>
<li>
<p>Create a database table for the rules defined on the composite event structure:</p>
<pre>
BEGIN
    DBMS_RLMGR.CREATE_RULE_CLASS(
    rule_class    =&gt; 'LawEnforcementRC',
    event_struct  =&gt; 'LawEnforcement',
    action_cbk    =&gt; 'LawEnforcementCBK',
    actprf_spec   =&gt; 'actionType VARCHAR2(40), actionParam VARCHAR2(100)',
    rslt_viewnm   =&gt; 'MatchedCriteria',
    rlcls_prop    =&gt; '&lt;composite
       equal="bank.subjectId, transport.subjectId, fldrpt.subjectId"
       ordering="rlm$rule.rlm$ruleid, bank.subjectId, transport.subjectId"/&gt;');
END;
/
</pre>
<p>The rule class <code>LawEnforcementRC</code> is a relational table that acts as the repository for rules. This table uses a set of predefined columns to store the rule identifiers, rule conditions and the descriptions. In addition to these columns, this rule class table defines two columns, <code>actionType</code> and <code>actionParam</code>, as specified through the <code>actpref_spec</code> argument. These columns capture the type of action that should be carried out for each rule. For example:</p>
<pre>
desc LawEnforcementRC;
 Name           Null?    Type
 ---------      -------- ----------------------------------------
 RLM$RULEID              VARCHAR2(100)
 ACTIONTYPE              VARCHAR2(40)
 ACTIONPARAM             VARCHAR2(100)
 RLM$RULECOND            VARCHAR2(4000)
 RLM$RULEDESC            VARCHAR2(1000)
 RLM$ENABLED             CHAR(1) DEFAULT 'Y'
</pre>
<p>This step also creates the skeleton for an action callback procedure with the specified name. For example:</p>
<pre>
select text from user_source where name = 'LAWENFORCEMENTCBK' order by line;

TEXT
-------------------------------------------------------------------------------
procedure "LAWENFORCEMENTCBK" ( "BANK"  "BANKTRANSACTION",
  "TRANSPORT"  "TRANSPORTATION", 
  "FLDRPT"  "FIELDREPORT",
   rlm$rule "LAWENFORCEMENTRC"%ROWTYPE) is
   begin
     null;
     --- The action for the matching rules can be carried here.
     --- The appropriate action can be determined from the
     --- event and action preferences associated with each rule.
   end;

10 rows selected.
</pre></li>
<li>
<p>Implement the callback procedure to perform the appropriate action for each matching rule, based on event instances that match the rule and the action preferences associated with the rule. For this use case, the callback procedure considers the action for the rules to be the insertion of a detailed message into the message queue table. For example:</p>
<pre>
CREATE OR REPLACE PROCEDURE LAWENFORCEMENTCBK (
   bank          banktransaction,
   transport     transportation,
   fldrpt        fieldreport,
   rlm$rule      LawEnforcementRC%ROWTYPE) IS
   mesg          VARCHAR2(4000);
   msgl          VARCHAR2(100);
begin
   msgl := 'Rule '||rlm$rule.rlm$ruleid||' matched following primitive events';
   dbms_output.put_line(msgl);
   mesg := msgl||chr(10);
   if (bank is not null) then
    msgl := '-&gt;Bank Transaction by subject ('||bank.subjectId||') of type
                                           ['||bank.tranType||']';
    dbms_output.put_line(msgl);
    mesg := mesg||msgl||chr(10);
   end if;
   if (transport is not null) then
    msgl :=
    '-&gt;Transportation by subject('||transport.subjectId||') use vessel
                                ['||transport.vesselType||']';
    dbms_output.put_line(msgl);
    mesg := mesg||msgl||chr(10);
   end if;
   if (fldrpt is not null) then
    msgl :=
    '-&gt;Field report refer to('||fldrpt.subjectId||' and '||fldrpt.whowith||')';
    dbms_output.put_line(msgl);
    mesg := mesg||msgl||chr(10);
   end if;
 
    msgl := '=&gt;Recommended Action : Action Type ['||rlm$rule.actionType||
                        '] Action Parameter ['||rlm$rule.actionParam||']';
    dbms_output.put_line(msgl||chr(10));
    mesg := mesg||msgl||chr(10);
    insert into messagequeue values (systimestamp, mesg);
 end;
/
</pre></li>
<li>
<p>The rules you define in the rule class can make use of user-defined functions in the database schema. The commands in the following list create some dummy functions that are later used in the rule conditions.</p>
<ol>
<li>
<p>For the value of the region passed in, query the restricted areas table and return <code>1</code> if the current region is a restricted area:</p>
<pre>
CREATE OR REPLACE FUNCTION IsRestrictedArea(region VARCHAR2)
                                            RETURN NUMBER IS
BEGIN
-- User can expand this function and implement a logic
-- that relies on other relational tables.
RETURN 1;
END;
/
</pre></li>
<li>
<p>Check to see if the subject chosen is on the watch list and return <code>1</code> if True:</p>
<pre>
CREATE OR REPLACE FUNCTION OnWatchList(subject NUMBER)
                                       RETURN NUMBER IS
BEGIN
-- User can expand this function and implement a logic
-- that relies on other relational tables.
RETURN 1;
END;
/
</pre></li>
<li>
<p>Check to see if the two parties are associates and return <code>1</code> if the two subjects passed in are associates according to the registry:</p>
<pre>
CREATE OR REPLACE FUNCTION AreAssociates(subjectA NUMBER,
                                         subjectB NUMBER)
                                         RETURN NUMBER IS
BEGIN
-- User can expand this function and implement a logic
-- that relies on other relational tables.
RETURN 1;
END;
/
</pre></li>
<li>
<p>Add all three user-defined functions to the composite event <code>LawEnforcement</code>:</p>
<pre>
EXEC DBMS_RLMGR.ADD_FUNCTIONS('LawEnforcement', 'OnWatchList');
EXEC DBMS_RLMGR.ADD_FUNCTIONS('LawEnforcement', 'IsRestrictedArea');
EXEC DBMS_RLMGR.ADD_FUNCTIONS('LawEnforcement', 'AreAssociates');
</pre></li>
</ol>
</li>
<li>
<p>Define the rules that suggest some actions:</p>
<ol>
<li>
<p>Rule: Add a person to the NYPD watch list if he receives a money transfer for more than $10,000 and he rents a truck, one way, to one of the restricted areas. Note that the rule specifies the join predicate at the rule class level.</p>
<pre>
INSERT INTO LawEnforcementRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES ('1', 'ADD2WATCHLIST','NYPD',
         '&lt;condition&gt;
           &lt;and&gt;
             &lt;object name="bank"&gt;
               tranType = ''TRANSFER'' AND amount &gt; 10000 AND 
                            fundFrom != ''USA''
             &lt;/object&gt;
             &lt;object name="transport"&gt;
               vesselType = ''TRUCK'' AND locFrom != locTo AND
                              IsRestrictedArea(locTo)=1
             &lt;/object&gt;
           &lt;/and&gt;
        &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Add a person to the NYPD watch list if the rule meets two of the following three conditions. The person gets a money transfer for over $10,000 from outside the United States, he rents a truck, one-way, into one of the restricted areas, and he makes a phone conversation with a person already on the watch list. The following rule demonstrates the use of the <code>&lt;ANY&gt;</code> element where it considers a rule condition to be true if <span class="italic">m</span> out of <span class="italic">n</span> events are detected.</p>
<pre>
INSERT INTO LawEnforcementRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES ('2', 'ADD2WATCHLIST','NYPD',
         '&lt;condition&gt;
             &lt;any count="2"&gt;
               &lt;object name="bank"&gt;
                  tranType = ''TRANSFER'' AND amount &gt; 10000 AND
                               fundFrom != ''USA''
               &lt;/object&gt;
               &lt;object name="transport"&gt;
                  vesselType = ''TRUCK'' AND locFrom != locTo AND
                                 IsRestrictedArea(locTo)=1
               &lt;/object&gt;
               &lt;object name="fldrpt"&gt;
                  rptType = ''TELCALL'' AND OnWatchList(whoWith) = 1
               &lt;/object&gt;
             &lt;/any&gt;
   &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Start a background check on a person if he receives a large sum of money from outside the United States, he rents a truck one-way into one of the restricted areas, and there is no field report with his background information. The following rule demonstrates the use of negation where it considers a rule condition to be true if some of the specified events are detected and other events are not detected:</p>
<pre>
INSERT INTO LawEnforcementRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES ('3','STARTBACKGROUNDCHECK','RENTAL_DESTINATION',
        '&lt;condition&gt;
            &lt;and&gt;
             &lt;object name="bank"&gt;
               tranType = ''TRANSFER'' AND amount &gt; 10000 AND 
                            fundFrom != ''USA''
             &lt;/object&gt;
             &lt;object name="transport"&gt;
               vesselType=''TRUCK'' AND locFrom != locTo AND
                            IsRestrictedArea(locTo)=1
             &lt;/object&gt;
             &lt;not&gt;
               &lt;object name="fldrpt"/&gt;
             &lt;/not&gt;
            &lt;/and&gt;
          &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: If a subject receives over $10,000 from outside the United States, he rents a truck for a one way trip into a restricted area, and a field report saying that the subject was never arrested before was not submitted within a "certain" (0.001 fraction of a day; this could be days, but it uses seconds to demonstrate the use of a deadline) period, add the destination of the truck to high-risk areas. This rule demonstrates Negation with a deadline:</p>
<pre>
INSERT INTO LawEnforcementRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES ('4','ADD2HIGH_RISK_AREA','RENTAL_DESTINATION',
         '&lt;condition&gt;
             &lt;and&gt;
              &lt;object name="bank"                tranType = ''TRANSFER'' AND amount &gt; 10000 AND
                              fundFrom != ''USA''
               &lt;/object&gt;
               &lt;object name="transport"&gt;
                 vesselType = ''TRUCK'' AND locFrom != locTo AND
                                IsRestrictedArea(locTo)=1
               &lt;/object&gt;
               &lt;not by="systimestamp+0.001"&gt;
                &lt;object name="fldrpt"&gt;
                  rptType = ''BACKGROUNDCHECK'' and 
                    extract(rptBody, ''/history/arrests[@number=0'')
                                        is not null
                &lt;/object&gt;
               &lt;/not&gt;
             &lt;/and&gt;
          &lt;/condition&gt;');
</pre></li>
<li>
<p>Browse the rules. This is optional. The following example demonstrates this task:</p>
<pre>
select rlm$ruleid, rlm$rulecond from LawEnforcementRC order by 1;

RLM$R RLM$RULECOND
----- --------------------------------------------------------------------
1     &lt;condition&gt;
        &lt;and&gt;
          &lt;object name="bank"&gt;
            tranType = 'TRANSFER' AND amount &gt; 10000 AND fundFrom != 'USA'
          &lt;/object&gt;
          &lt;object name="transport"&gt;
            vesselType = 'TRUCK' AND locFrom != locTo AND
                          IsRestrictedArea(locTo)=1
          &lt;/object&gt;
        &lt;/and&gt;
      &lt;/condition&gt;
.
.
.
</pre></li>
</ol>
</li>
<li>
<p>Process the rules for the primitive events.</p>
<ol>
<li>
<p>Add two primitive events that each partially match one or more rules and together match one rule, such that it executes the rules action (it prints the message to the screen as well as inserts it into the <code>messagequeue</code> table):</p>
<pre>
set serveroutput on size 10000;
BEGIN
  dbms_rlmgr.process_rules (
    rule_class  =&gt; 'LawEnforcementRC',
    event_inst  =&gt;
     sys.anydata.convertobject(
       fieldreport(123302122, 'TELCALL',123302123, 'NSA', 'NE', null)));
END;
/
</pre>
<pre>
BEGIN
  dbms_rlmgr.process_rules (
    rule_class  =&gt; 'LawEnforcementRC',
    event_inst  =&gt;
        sys.anydata.convertobject(
  banktransaction(123302122, 'TRANSFER', 100000, 'USSR')));
END;
/
Rule 2 matched following primitive events
-&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
-&gt;Field report refer to(123302122 and 123302123)
=&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]
</pre></li>
<li>
<p>The following Transportation event, in combination with the Bank Transaction event, evaluates some of the rules to true and thus calls the action call-back procedure with appropriate arguments:</p>
<pre>
BEGIN
  dbms_rlmgr.process_rules (
    rule_class  =&gt; 'LawEnforcementRC',
    event_inst  =&gt;
      sys.anydata.convertobject(
        transportation(123302122, 'TRUCK', 'WIS', 'MD',
       sysdate, sysdate + 7)));
END;
/
Rule 1 matched following primitive events
-&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
-&gt;Transportation by subject(123302122) use vessel [TRUCK]
=&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 2 matched following primitive events
-&gt;Transportation by subject(123302122) use vessel [TRUCK]-&gt;Field report refer to(123302122 and 123302123)
=&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 2 matched following primitive events
-&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
-&gt;Transportation by subject(123302122) use vessel [TRUCK]
=&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 3 matched following primitive events
-&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
-&gt;Transportation by subject(123302122) use vessel [TRUCK]
=&gt;Recommended Action : Action Type [STARTBACKGROUNDCHECK] Action Parameter
                      [RENTAL_DESTINATION]
</pre></li>
<li>
<p>Check the message queue:</p>
<pre>
SQL&gt; select mesg from messagequeue order by attime;

MESG
--------------------------------------------
Rule 2 matched following primitive events
  -&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
  -&gt;Field report refer to(123302122 and 123302123)
  =&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 1 matched following primitive events
  -&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
  -&gt;Transportation by subject(123302122) use vessel [TRUCK]
  =&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 2 matched following primitive events
  -&gt;Transportation by subject(123302122) use vessel [TRUCK]
  -&gt;Field report refer to(123302122 and 123302123)
  =&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 2 matched following primitive events
  -&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
  -&gt;Transportation by subject(123302122) use vessel [TRUCK]
  =&gt;Recommended Action : Action Type [ADD2WATCHLIST] Action Parameter [NYPD]

Rule 3 matched following primitive events
  -&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
  -&gt;Transportation by subject(123302122) use vessel [TRUCK]
  =&gt;Recommended Action : Action Type [STARTBACKGROUNDCHECK] Action
                                      Parameter [RENTAL_DESTINATION]
</pre></li>
<li>
<p>Truncate the table messagequeue:</p>
<pre>
SQL&gt; truncate table messagequeue;
</pre></li>
<li>
<p>Now lets assume you sleep past the deadline for rule 4. The scheduler process picks up this rule and executes its action. The result is a new message in the message queue.</p>
<pre>
SQL&gt; exec dbms_lock.sleep(180);
</pre></li>
<li>
<p>Rule 4 executes the following action after the deadline time elapses:</p>
<pre>
SQL&gt; select mesg from messagequeue;

MESG
--------------------------------------------
Rule 4 matched following primitive events
  -&gt;Bank Transaction by subject (123302122) of type [TRANSFER]
  -&gt;Transportation by subject(123302122) use vessel [TRUCK]
  =&gt;Recommended Action : Action Type [ADD2HIGH_RISK_AREA] Action
                                      Parameter [RENTAL_DESTINATION]
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CIHICBBC"></a><a id="EXPRN528"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">10.2</span> Order Management Rules Application</h2>
<p>This Order Management rules application<a id="sthref154"></a><a id="sthref155"></a> demonstrates the use of Rules Manager for the event data that is stored in relational tables.</p>
<p>The basic steps to create the Order Management rules application with composite events are as follows:</p>
<ol>
<li>
<p>Create the three relational tables to store the information about the purchase orders, shipping information, and payment information, as follows:</p>
<pre>
create table PurchaseOrders
    (orderId      NUMBER,
     custId       NUMBER,
     itemId       NUMBER,
     itemType     VARCHAR2(30),
     quantity     NUMBER,
     shipBy       DATE);

create table ShipmentInfo
     (orderId     NUMBER,
      destState   VARCHAR2(2),
      address     VARCHAR2(50),
      shipTime    DATE,
      shipType    VARCHAR2(10));

create table PaymentInfo
     (orderId     NUMBER,
      payType     VARCHAR2(10),  -- Credit Card / Check --
      amountPaid  NUMBER,
      pymtTime    DATE,
      billState   VARCHAR2(2));
</pre></li>
<li>
<p>Create the event structure. You cannot create the event structures from object types if they refer to the existing tables using table alias constructs. Instead, model such event structures as Expression Filter attribute sets, as follows:</p>
<pre>
begin
  DBMS_RLMGR.CREATE_EVENT_STRUCT (event_struct =&gt; 'OrderMgmt');
 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE(
   event_struct =&gt; 'OrderMgmt',
   attr_name    =&gt; 'po',
   tab_alias    =&gt; RLM$TABLE_ALIAS('PurchaseOrders'));
 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE(
   event_struct =&gt; 'OrderMgmt',
   attr_name    =&gt; 'si',
   tab_alias    =&gt; RLM$TABLE_ALIAS('ShipmentInfo'));
 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE(
   event_struct =&gt; 'OrderMgmt',
   attr_name    =&gt; 'py',
   tab_alias    =&gt; RLM$TABLE_ALIAS('PaymentInfo'));
 end;
/
</pre></li>
<li>
<p>Create the rule class (database table for rules) for the <code>OrderMgmt</code> composite event. Also, specify the <code>DMLEVENTS</code> property to process the rules for each inserted row into the event data tables, as follows:</p>
<pre>
BEGIN
  DBMS_RLMGR.CREATE_RULE_CLASS (
    rule_class     =&gt; 'OrderMgmtRC',
    event_struct   =&gt; 'OrderMgmt',
    action_cbk     =&gt; 'OrderMgmtCBK',
    actprf_spec    =&gt; 'actionType VARCHAR2(40), actionParam VARCHAR2(100)',
    rslt_viewnm    =&gt; 'MatchingOrders',
    rlcls_prop     =&gt; '&lt;composite
         equal="po.orderId, si.orderId, py.orderId"
         dmlevents="I"/&gt;');
END;
/
</pre>
<p>This step also creates the skeleton for an action callback procedure with the specified name, as follows:</p>
<pre>
desc OrderMgmtCBK;
PROCEDURE OrderMgmtCBK
 Argument Name                  Type                    In/Out Default?
 ------------------------------ ----------------------- ------ --------
 PO                             ROWID                   IN
 SI                             ROWID                   IN
 PY                             ROWID                   IN
 RLM$RULE                       RECORD                  IN
 RLM$RULEID                     VARCHAR2(100)           IN
   ACTIONTYPE                   VARCHAR2(40)            IN
   ACTIONPARAM                  VARCHAR2(100)           IN
   RLM$RULECOND                 VARCHAR2(4000)          IN
   RLM$RULEDESC                 VARCHAR2(1000)          IN
   RLM$ENABLED                  CHAR(1) DEFAULT 'Y'     IN
</pre></li>
<li>
<p>Implement the callback procedure to perform the appropriate action for each matching rule, based on event instances that match the rule and action preferences associated with the rule. In this case, consider one action to be a message displayed to the screen, as shown in the following example:</p>
<pre>
CREATE OR REPLACE PROCEDURE OrderMgmtCBK (
  po        ROWID, -- rowid from the PurchaseOrders table
  si        ROWID, -- rowid from the ShipmentInfo table
  py        ROWID, -- rowid from the PaymentInfo table
  rlm$rule  OrderMgmtRC%ROWTYPE) IS
  ordId     NUMBER;
  msg       VARCHAR2(2000);
begin
  -- the rowid arguments represent the primitive events that are
  -- rows inserted into the corresponding tables. Use the rowids
  -- to fetch necessary values.
  if (po is not null) then
     select orderId into ordId from PurchaseOrders where rowid = po;
  elsif (si is not null) then
     select orderId into ordId from ShipmentInfo where rowid = si;
  elsif (py is not null) then
     select orderId into ordId from PaymentInfo where rowid = py;
  end if;
 
  msg := 'Order number: '||ordId||' Matched rule: '
           ||rlm$rule.rlm$ruleid||chr(10)||
           '-&gt; Recommended Action : '||chr(10)||
           '      Action Type ['||rlm$rule.actionType||
           ']'||chr(10)||    '    Action Parameter ['||
           rlm$rule.actionParam||']';
 
  dbms_output.put_line (msg||chr(10));
end;
/
</pre></li>
<li>
<p>Add user-defined functions that may be useful in rule conditions:</p>
<pre>
create or replace function getCustType(custId number)
     return VARCHAR2 is
begin
  -- the actual function implementation can rely on other
  -- relational tables to derive the customer type information
  return 'GOLD';
end;
/

exec DBMS_RLMGR.ADD_FUNCTIONS('OrderMgmt','getCustType');
</pre></li>
<li>
<p>Add some rules:</p>
<ol>
<li>
<p>Rule 1: If the order is for more than 100 routers and payment is by check, contact the customer to update the status of the order. Note that the rule specifies the join predicate across event types at the rule class level. For example:</p>
<pre>
INSERT INTO OrderMgmtRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES (1, 'CALL_CUSTOMER','UPDATE_ORDER_STATUS',
    '&lt;condition&gt;
       &lt;and&gt;
         &lt;object name="po"&gt;
             itemType = ''ROUTER'' and quantity &gt; 100
         &lt;/object&gt;
         &lt;object name="py"&gt;
             payType = ''CHECK''
         &lt;/object&gt;
       &lt;/and&gt;
    &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule 2: If a Gold customer places an order and items ship before receiving payment, adjust the customer's credit. For example:</p>
<pre>
INSERT INTO OrderMgmtRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES (2, 'UPDATE_CUST_PROFILE', 'DECR_AVAILABLE_CREDIT',
  '&lt;condition&gt;
      &lt;and&gt;
        &lt;object name="po"&gt; getCustType(custid) = ''GOLD'' &lt;/object&gt;
        &lt;object name="si"/&gt;
        &lt;not&gt;
          &lt;object name="py"/&gt;
        &lt;/not&gt;
      &lt;/and&gt;
   &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule 3: If a Gold customer places an order and items ship within 1 day prior to the shipby date, increment the quality of service statistics. For example:</p>
<pre>
INSERT INTO OrderMgmtRC (rlm$ruleid, actionType, actionParam, rlm$rulecond)
VALUES (3, 'UPDATE_STATISTICS', 'INCREMENT QOS',
  '&lt;condition&gt;
      &lt;and join="po.shipby &gt; si.shiptime-1"&gt;
        &lt;object name="po"&gt; getCustType(custid) = ''GOLD'' &lt;/object&gt;
        &lt;object name="si"/&gt;
      &lt;/and&gt;
   &lt;/condition&gt;');
</pre></li>
</ol>
</li>
<li>
<p>Process rules for some primitive events by inserting rows into corresponding data tables, as shown in the following list:</p>
<ol>
<li>
<p>The following event partially matches some of the rules in the rule class and does not result in any action:</p>
<pre>
insert into PurchaseOrders (orderId, custId, itemId, itemType,
                            quantity, shipBy) values
(1, 123, 234, 'ROUTER', 120, '01-OCT-2004');
</pre></li>
<li>
<p>The following event in combination with the previous added events matches two rules and fires the corresponding actions:</p>
<pre>
insert into ShipmentInfo (orderId, deststate, address, shipTime,
                          shipType) values
(1, 'CA','1 Main street, San Jose','29-SEP-2004','1 Day Air');
Order number: 1 Matched rule: 2
-&gt; Recommended Action : 
      Action Type [UPDATE_CUST_PROFILE]
      Action Parameter [DECR_AVAILABLE_CREDIT]

Order number: 1 Matched rule: 3
-&gt; Recommended Action : 
      Action Type [UPDATE_STATISTICS]
      Action Parameter [INCREMENT QOS]
</pre></li>
<li>
<p>The following event matches one more rule:</p>
<pre>
insert into PaymentInfo (orderId, paytype, amountpaid, pymttime,
                         billstate) values
(1, 'CHECK', 100000, '30-SEP-2004', 'CA');
Order number: 1 Matched rule: 1
-&gt; Recommended Action : 
      Action Type [CALL_CUSTOMER]
Action Parameter [UPDATE_ORDER_STATUS]
</pre></li>
</ol>
</li>
</ol>
<p>Now, consider a similar application without the use of the <code>DMLEVENTS</code> property. This implies that the user explicitly invokes the Rules Manager APIs to process the rules for some data stored in relational tables. This rule class shares the event structure with the <code>OrderMgmtRC</code> rule class.</p>
<ol>
<li>
<p>Create the rule class (database table for rules) for the <code>OrderMgmtRC2</code> composite event, as follows:</p>
<pre>
BEGIN
  DBMS_RLMGR.CREATE_RULE_CLASS (
   rule_class    =&gt; 'OrderMgmtRC2',
   event_struct  =&gt; 'OrderMgmt',
   action_cbk    =&gt; 'OrderMgmtCBK2',
   actprf_spec   =&gt; 'actionType VARCHAR2(40), actionParam VARCHAR2(100)',
   rslt_viewnm   =&gt; 'MatchingOrders2',
   rlcls_prop    =&gt; '&lt;composite equal="po.orderId, si.orderId, py.orderId"/&gt;');
END;
/
</pre></li>
<li>
<p>Implement the callback procedure to perform the appropriate action for each matching rule, based on the event instances that matched the rule and the action preferences associated with the rule, as follows:</p>
<pre>
--- Implement the action callback procedure --
CREATE OR REPLACE PROCEDURE OrderMgmtCBK2 (
  po        ROWID, -- rowid from the PurchaseOrders table
  si        ROWID, -- rowid from the ShipmentInfo table
  py        ROWID, -- rowid from the PaymentInfo table
  rlm$rule  OrderMgmtRC2%ROWTYPE) IS
  ordId     NUMBER;
  msg       VARCHAR2(2000);
begin
  -- the rowid argument represent the primitive events that are
  -- rows inseted into the corresponding tables. Use the rowids
  -- to fetch necessary values.
  if (po is not null) then
     select orderId into ordId from PurchaseOrders where rowid = po;
  elsif (si is not null) then
     select orderId into ordId from ShipmentInfo where rowid = si;
  elsif (py is not null) then
     select orderId into ordId from PaymentInfo where rowid = py;
  end if;
 
  msg := 'Order number: '||ordId||' Matched rule: '
          ||rlm$rule.rlm$ruleid||chr(10)||
          '-&gt; Recommended Action : '||chr(10)||
          '      Action Type ['||rlm$rule.actionType||
          ']'||chr(10)||'    Action Parameter ['||
          rlm$rule.actionParam||']';

  dbms_output.put_line (msg||chr(10));
end;
/
</pre></li>
<li>
<p>Insert the same set of rules into the new rule class, as follows:</p>
<pre>
insert into OrderMgmtRC2 (select * from OrderMgmtRC);
commit;
</pre></li>
<li>
<p>Process the rules for the rows in the data tables as shown in the code that follows. Because the rules do not configure DML events for this rule class, the application must explicitly process the rules for the rows in the data table. To process the rules, it uses the ROWIDS of the rows inserted into the data tables as references to the events and passes these ROWIDs to the <code>PROCESS_RULES</code> procedure.</p>
<pre>
var datarid varchar2(40);
</pre>
<pre>
insert into PurchaseOrders (orderId, custId, itemId, itemType,
                            quantity, shipBy) values 
(2, 123, 234, 'ROUTER', 120, '01-OCT-2004')
returning rowid into :datarid;

BEGIN
  dbms_rlmgr.process_rules (rule_class =&gt; 'OrderMgmtRC2',
   event_type =&gt; 'PurchaseOrders',
   event_inst =&gt; :datarid);
END;
/
</pre>
<pre>
insert into ShipmentInfo (orderId, deststate, address, shipTime,
                          shipType) values
  (2, 'CA','1 Main street, San Jose','29-SEP-2004','1 Day Air')
  returning rowid into :datarid;

BEGIN
  dbms_rlmgr.process_rules (rule_class =&gt; 'OrderMgmtRC2',
   event_type =&gt; 'ShipmentInfo',
   event_inst =&gt; :datarid);
END;
/
Order number: 2 Matched rule: 2
-&gt; Recommended Action : 
      Action Type [UPDATE_CUST_PROFILE]
      Action Parameter [DECR_AVAILABLE_CREDIT]
 
Order number: 2 Matched rule: 3
-&gt; Recommended Action : 
      Action Type [UPDATE_STATISTICS]
      Action Parameter [INCREMENT QOS]
</pre>
<pre>
insert into PaymentInfo (orderId, paytype, amountpaid, pymttime,
                         billstate) values
  (2, 'CHECK', 100000, '30-SEP-2004', 'CA')
  returning rowid into :datarid;

BEGIN
  dbms_rlmgr.process_rules (rule_class =&gt; 'OrderMgmtRC2',
   event_type =&gt; 'PaymentInfo',
   event_inst =&gt; :datarid);
END;
/
Order number: 2 Matched rule: 1
-&gt; Recommended Action : 
      Action Type [CALL_CUSTOMER]
      Action Parameter [UPDATE_ORDER_STATUS]
</pre></li>
</ol>
<p>Now, try the session oriented evaluation of rules where the results from matching rules are available in the results view to be queried, as shown in the following list:</p>
<ol>
<li>
<p>A description of the result view table follows:</p>
<pre>
set linesize 80;
desc MatchingOrders2;
Name                                      Null?    Type
----------------------------------------- -------- ----------------------------
 RLM$EVENTID                                       ROWID
 PO                                                ROWID
 SI                                                ROWID
 PY                                                ROWID
 RLM$RULEID                                        VARCHAR2(100)
 ACTIONTYPE                                        VARCHAR2(40)
 ACTIONPARAM                                       VARCHAR2(100)
 RLM$RULECOND                                      VARCHAR2(4000)
 RLM$RULEDESC                                      VARCHAR2(1000)
 RLM$ENABLED                                       CHAR(1) DEFAULT 'Y'
 
select count(*) from MatchingOrders2;
 
  COUNT(*)
----------
 0
</pre></li>
<li>
<p>Process the rules for the rows in the data tables. Note the use of the <code>ADD_EVENT</code> procedure instead of the <code>PROCESS_RULES</code> procedure in the previous example. This ensures the rule class results view stores the results from the matching of events with the rules. For example:</p>
<pre>
insert into PurchaseOrders (orderId, custId, itemId, itemType,
                            quantity, shipBy) values
  (3, 123, 234, 'ROUTER', 120, '01-OCT-2004')
  returning rowid into :datarid;

--- Use ADD_EVENT API in the place of PROCESS_RULES ---
BEGIN
  dbms_rlmgr.add_event (rule_class =&gt; 'OrderMgmtRC2',
       event_type =&gt; 'PurchaseOrders',
       event_inst =&gt; :datarid);
END;
/
</pre>
<pre>
insert into ShipmentInfo (orderId, deststate, address, shipTime,
                          shipType) values
  (3, 'CA','1 Main street, San Jose','29-SEP-2004','1 Day Air')
  returning rowid into :datarid;

BEGIN
  dbms_rlmgr.add_event (rule_class =&gt; 'OrderMgmtRC2',
       event_type =&gt; 'ShipmentInfo',
       event_inst =&gt; :datarid);
END;
/
</pre>
<pre>
insert into PaymentInfo (orderId, paytype, amountpaid, pymttime,
                         billstate) values
  (3, 'CHECK', 100000, '30-SEP-2004', 'CA')
  returning rowid into :datarid;

BEGIN
  dbms_rlmgr.add_event (rule_class =&gt; 'OrderMgmtRC2',
       event_type =&gt; 'PaymentInfo',
       event_inst =&gt; :datarid);
END;
/
</pre></li>
<li>
<p>Because table aliases configure the event structure, ROWIDS from the corresponding tables represent events, as follows:</p>
<pre>
column rlm$ruleid format a7;
column actiontype format a25;
column actionparam format a25;
select po, si, py, rlm$ruleid, actionType, actionParam from MatchingOrders2;

PO                 SI                 PY                 RLM$RUL
------------------ ------------------ ------------------ -------
ACTIONTYPE                ACTIONPARAM
------------------------- -------------------------
AAAOBxAAEAAAAHPAAC AAAOByAAEAAAAHXAAC                    2
UPDATE_CUST_PROFILE       DECR_AVAILABLE_CREDIT
 
AAAOBxAAEAAAAHPAAC AAAOByAAEAAAAHXAAC                    3
UPDATE_STATISTICS         INCREMENT QOS
 
AAAOBxAAEAAAAHPAAC AAAOBzAAEAAAAHfAAC                    1
CALL_CUSTOMER             UPDATE_ORDER_STATUS
</pre></li>
<li>
<p>Use ROWIDS to derive the actual event values from the data tables, as follows:</p>
<pre>
select
  (select orderId from purchaseOrders where rowid = po) as OrderId,
  rlm$ruleid, actionType, actionParam from MatchingOrders2;

   ORDERID RLM$RUL ACTIONTYPE                ACTIONPARAM
---------- ------- ------------------------- -------------------------
         3 2       UPDATE_CUST_PROFILE       DECR_AVAILABLE_CREDIT
         3 3       UPDATE_STATISTICS         INCREMENT QOS
         3 1       CALL_CUSTOMER             UPDATE_ORDER_STATUS
</pre></li>
</ol>
</div>
<!-- class="sect1" -->
<a id="EXPRN529"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref156"></a>
<h2 class="sect1"><span class="secnum">10.3</span> Use of Collections in an Order Management Application</h2>
<p>The following Order Management application demonstrates the use of collection events for identifying complex event scenarios and acting on them. This application uses the object types in the database as the event structure and the basic steps in creating this application are similar to those discussed in <a href="#CIHBEJGC">Section 10.1</a>.</p>
<ol>
<li>
<p>Create the object types that represent the primitive event structures and the composite event structure.</p>
<pre>
create or replace type PurchaseOrder as object
  ( orderid       number,
    customerid    number,
    itemid        number,
    itemcount     number,
    amount        number,
    exptddate     date);
/

create or replace type ShipItem as object
 (  itemid        number,
    itemtype      varchar2(30),
    orderid       number,
    truckid       number);
/

create or replace type TruckAtDock as object
 (  truckid       number,
    loadid        date,
    status        varchar2(30),
    capacity      number);
/

create or replace type OrderMgmt as object
 (
    porder  PurchaseOrder,
    sitem   ShipItem,
    truck   TruckAtDock
 );
/
</pre></li>
<li>
<p>Create the rule class. Set the rule class properties such that events based on <code>PurchaseOrder</code> and <code>ShipItem</code> types are enabled for collections.</p>
<pre>
BEGIN
   DBMS_RLMGR.CREATE_RULE_CLASS(
     rule_class      =&gt; 'OrderMgmtRC',
     event_struct    =&gt; 'OrderMgmt',
     action_cbk      =&gt; 'OrderMgmtCBK',
     actprf_spec     =&gt; 'actionType VARCHAR2(40),
                         actionParam VARCHAR2(100),
                         poAggrRet VARCHAR2(20) default null',
     rslt_viewnm     =&gt; 'MatchedScenarios',
     rlcls_prop      =&gt; 
        '&lt;composite
              equal="(porder.orderid, sitem.orderid) |
                      (sitem.truckid, truck.truckid)"
              ordering="rlm$rule.rlm$ruleid, porder.orderid,
                                  porder.itemid, truck.loadid"&gt;
           &lt;collection type="PurchaseOrder" 
                       groupby="orderid, customerid, itemid"/&gt;
           &lt;collection type="ShipItem"
                       groupby="itemid, truckid"/&gt;
         &lt;/composite&gt;');
END;
/
</pre></li>
<li>
<p>Implement the action callback procedure. Note that for each primitive event type enabled for collections, the action callback procedure uses one additional ROWID argument that binds in the identifier for the collection event. It then uses this event identifier to obtain any aggregate values computed for a given rule.</p>
<pre>
create or replace procedure "ORDERMGMTCBK" (
  PORDER     PURCHASEORDER,
  PO_EVTID   ROWID,
  SITEM      SHIPITEM,
  SI_EVTID   ROWID,
  TRUCK      TRUCKATDOCK,
  rlm$rule   ORDERMGMTRC%ROWTYPE) is
  mesg       VARCHAR2(100);
  aggrval    VARCHAR2(100);
begin
  mesg := ' Rule "'||rlm$rule.rlm$ruleid||
                            '" matched '||
     case when porder.orderid is not null then 'Purchase Order'
          ||porder.orderid
          when porder.customerid is not null then 'Customer'
          ||porder.customerid
          when sitem.truckid is not null then '||Truck '||sitem.truckid
     end;
  if (porder is not null and rlm$rule.poAggrRet is not null) then
    aggrval := dbms_rlmgr.get_aggregate_value ('OrderMgmtRC', po_evtid,
                                               rlm$rule.poAggrRet);
    aggrval := ' with '||rlm$rule.poAggrRet||' equal to '||aggrval;
  end if;
  dbms_output.put_line (mesg||aggrval);
end;
/
</pre></li>
<li>
<p>Create any user-defined function that may be used in the rule class.</p>
<pre>
create or replace function CustomerType (custId int) return VARCHAR2 is
begin
  return 'GOLD';
end;
/
exec dbms_rlmgr.add_functions('OrderMgmt','CustomerType');
</pre></li>
<li>
<p>Add rules to the rule class.</p>
<ol>
<li>
<p>Rule: Offer an elite status to a customer if he submits a large number of orders, each with a minimum of 10000 dollars.</p>
<pre>
insert into OrderMgmtRC (rlm$ruleid, actionType, actionParam,
                         rlm$ruledesc, rlm$rulecond) values
('Large number of orders promo', 'PROMOTION','ELITE_STATUS',
 'Offer an elite status to a customer if he submited a large number
  of orders, each with a minimum of 10000 dollars',
 '&lt;condition&gt;
    &lt;collection name="porder" groupby="customerid" 
                having="count(*) &gt; 10"&gt;
      amount &gt; 10000
    &lt;/collection&gt;
 &lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Offer a promotion for ordering in bulk if the average value of the last 10 orders is over 20000 dollars.</p>
<pre>
insert into OrderMgmtRC (rlm$ruleid, actionType, actionParam,
                         rlm$ruledesc, rlm$rulecond) values
('Expanding customer', 'PROMOTION', 'LARGE_ORDER',
'Offer a promotion for ordering in bulk if the average size of the
 last 10 orders is over 20000 dollars',
'&lt;condition&gt;
   &lt;collection name="porder" groupby="customerid"
                             windowsize="10" 
                             having="avg(amount) &gt; 20000"/&gt;
&lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Offer an elite status to a customer if he submits a large number of orders, each with a minimum of 1000 dollars, within a 30 day period.</p>
<pre>
insert into OrderMgmtRC (rlm$ruleid, actionType, actionParam,
                         rlm$ruledesc, rlm$rulecond) values
('Promo on Total size of orders in 10 days ', 'PROMOTION','ELITE_STATUS',
 'Offer an elite status to a customer if he submitted a large number
  of orders, each with a minimum of 1000 dollars, in a 30 day period',
'&lt;condition&gt;
    &lt;collection name="porder" groupby="customerid"
                              windowlen="30" 
                              having="sum(amount) &gt; 50000"/&gt;
        amount &gt; 1000
     &lt;/collection&gt;
&lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Compare the number of items ordered and the items shipped to mark the order complete.</p>
<pre>
insert into OrderMgmtRC (rlm$ruleid, actionType, actionParam,
                         rlm$ruledesc, rlm$rulecond) values
('Completed order', 'UPDATE_ORDER_STATUS','COMPLETE',
'Compare the number of items ordered and the items shipped to mark the
 order complete',
'&lt;condition&gt;
   &lt;and equal="porder.orderid, sitem.orderid" 
        having="count(sitem.*) = porder.itemcount"&gt;
      &lt;object name="porder"/&gt; 
      &lt;collection name="sitem" groupby="orderid" compute="count(*)"&gt;
         itemtype != ''Reusable Container''
      &lt;/collection&gt;
   &lt;/and&gt;
&lt;/condition&gt;');
</pre></li>
<li>
<p>Rule: Signal readiness to ship when the truck is at least 90% full.</p>
<pre>
insert into OrderMgmtRC (rlm$ruleid, actionType, actionParam, 
                         rlm$ruledesc, rlm$rulecond) values
('Ready to ship', 'READY_TO_SHIP', 'LOADED_TRUCK',
'Signal readiness to ship when the truck is at least 90% full',
'&lt;condition&gt;
  &lt;and equal="sitem.truckid, truck.truckid"
       having="count(sitem.*) &gt;= truck.capacity*0.9" &gt;
    &lt;object name="truck"&gt; status = ''Loading'' &lt;/object&gt;
    &lt;collection name="sitem" groupby="truckid" compute="count(*)"&gt;
      itemtype = ''Reusable Container''
    &lt;/collection&gt;
  &lt;/and&gt;
&lt;/condition&gt;');
</pre></li>
</ol>
</li>
<li>
<p>Process the rules for the instances of <code>PurchaseOrder</code>, <code>ShipItem</code>, and <code>TruckAtDock</code> events.</p>
</li>
</ol>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment988">
<tr>
<td class="cellalignment995">
<table class="cellalignment993">
<tr>
<td class="cellalignment992"><a href="exprn_brm_views.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment992"><a href="exprn_part2.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment997">
<table class="cellalignment991">
<tr>
<td class="cellalignment992"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment992"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment992"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment992"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment992"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment992"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
