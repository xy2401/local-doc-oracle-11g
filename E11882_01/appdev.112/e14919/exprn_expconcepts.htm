<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Expression Filter Concepts</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 033" />
<meta name="dcterms.created" content="2011-08-16T11:52:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Rules Manager and Expression Filter Developer's Guide" />
<meta name="dcterms.identifier" content="E14919-04" />
<meta name="dcterms.isVersionOf" content="EXPRN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="exprn_part2.htm" title="Previous" type="text/html" />
<link rel="Next" href="exprn_indexexpressions.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e14919.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/36</span> <!-- End Header --><a id="BABHFCIC"></a><a id="EXPRN007"></a>
<h1 class="chapter"><span class="secnum">11</span> Oracle Expression Filter Concepts</h1>
<p>Oracle <a id="sthref157"></a>Expression Filter, a feature beginning in Oracle Database 10g, is a component of Rules Manager that allows application developers to store, index, and evaluate conditional expressions (expressions) in one or more columns of a relational table. Expressions are a useful way to describe interests in expected data.</p>
<p>Expression Filter matches incoming data with expressions stored in a column to identify rows of interest. It can also derive complex relationships by matching data in one table with expressions in a second table. Expression Filter simplifies SQL queries; allows expressions to be inserted, updated, and deleted without changing the application; and enables reuse of conditional expressions in rules by separating them from the application and storing them in the database. Applications involving information distribution, demand analysis, and task assignment can benefit from Expression Filter.</p>
<a id="EXPRN008"></a>
<div class="sect1"><a id="sthref158"></a>
<h2 class="sect1"><span class="secnum">11.1</span> What Is Expression Filter?</h2>
<p>Expression Filter provides a data type, operator, and index type to store, evaluate, and index expressions that describe an interest in a data item or piece of information. See <a class="olink ADDCI" href="../e10765/toc.htm"><span class="italic">Oracle Database Data Cartridge Developer's Guide</span></a> for an explanation of these terms. Expressions are stored in a column of a user table. Expression Filter matches expressions in a column with a data item passed by a SQL statement or with data stored in one or more tables, and evaluates each expression to be true or false. Optionally, expressions can be indexed when using the Enterprise Edition of Oracle Database. Expression Filter includes the following elements:</p>
<ul>
<li>
<p>Attribute set: a definition of the event and its set of attributes</p>
</li>
<li>
<p>Expression data type: A virtual data type created through a constraint placed on a <code>VARCHAR2</code> column in a user table that stores expressions</p>
</li>
<li>
<p><code>EVALUATE</code> operator: An operator that evaluates expressions for each data item</p>
</li>
<li>
<p>Administrative utilities: A set of utilities that validate expressions and suggest optimal index structure</p>
</li>
<li>
<p>Expression indexing: An index that enhances performance of the <code>EVALUATE</code> operator for large expression sets. Expression indexing is available in Oracle Database Enterprise Edition.</p>
</li>
</ul>
<a id="EXPRN009"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref159"></a>
<h3 class="sect2"><span class="secnum">11.1.1</span> <a id="sthref160"></a>Expression Filter Usage Scenarios</h3>
<p>This section provides examples of how you can use Expression Filter.</p>
<p class="subhead2"><a id="EXPRN531"></a>Match Incoming Data with Conditional Expressions</p>
<p>Expression Filter can match incoming data with conditional expressions stored in the database to identify rows of interest. For example, consider an application that matches buyers and sellers of cars. A table called <code>Consumer</code> includes a column called <code>BUYER_PREFERENCES</code> with an Expression data type. The <code>BUYER_PREFERENCES</code> column stores an expression for each consumer that describes the kind of car the consumer wants to purchase, including make, model, year, mileage, color, options, and price. You include data about cars for sale with the <code>EVALUATE</code> operator in the SQL <code>WHERE</code> clause. The SQL <code>EVALUATE</code> operator matches the incoming car data with the expressions to find prospective buyers.</p>
<p>The SQL <code>EVALUATE</code> operator also enables batch processing of incoming data. You can store data in a table called <code>CARS</code> and match it with expressions stored in the <code>CONSUMER</code> table using a join between the two tables.</p>
<p>The SQL <code>EVALUATE</code> operator saves time by matching a set of expressions with incoming data and enabling large expression sets to be indexed for performance. This saves labor by allowing expressions to be inserted, updated, and deleted without changing the application and providing a results set that can be manipulated in the same SQL statement, for instance to order or group results. In contrast, a procedural approach stores results in a temporary table that must be queried for further processing, and those expressions cannot be indexed.</p>
<p class="subhead2"><a id="EXPRN532"></a>Maintain Complex Table Relationships</p>
<p>Expression Filter can convey <span class="italic">N</span>-to-<span class="italic">M</span> (many-to-many) relationships between tables. Using the previous example:</p>
<ul>
<li>
<p>A car may be of interest to one or more buyers.</p>
</li>
<li>
<p>A buyer may be interested in one or more cars.</p>
</li>
<li>
<p>A seller may be interested in one or more buyers.</p>
</li>
</ul>
<p>To answer questions about these relationships, you store incoming data about cars in a table called <code>CARS</code> with an Expression column (column of Expression data type) called <code>SELLER_PREFERENCES</code>. The <code>CONSUMERS</code> table includes a column called <code>BUYER_PREFERENCES</code>. The SQL <code>EVALUATE</code> operator can answer questions such as:</p>
<ul>
<li>
<p>What cars are of interest to each consumer?</p>
</li>
<li>
<p>What buyers are of interest to each seller?</p>
</li>
<li>
<p>What demand exists for each car? This can help to determine optimal pricing.</p>
</li>
<li>
<p>What unsatisfied demand is there? This can help to determine inventory requirements.</p>
</li>
</ul>
<p>This declarative approach saves labor. No action is needed if you make changes to the data or the expressions. Compare this to the traditional approach where you create a mapping table to store the relationship between the two tables. You must define a trigger to recompute the relationships and to update the mapping table if the data or expressions change. In this case, the application must compare new data to all expressions, and compare a new expression to all data.</p>
<p class="subhead2"><a id="EXPRN533"></a>Application Attributes</p>
<p>Expression Filter is a good fit for applications where the data has the following attributes:</p>
<ul>
<li>
<p>A large number of data items exist to be evaluated.</p>
</li>
<li>
<p>Each data item has structured data attributes, for example <code>VARCHAR, NUMBER, DATE, XMLTYPE</code>.</p>
</li>
<li>
<p>Incoming data is evaluated by a significant number of unique and persistent queries containing expressions.</p>
</li>
<li>
<p>The expression (in the SQL <code>WHERE</code> clause) describes an interest in incoming data items.</p>
</li>
<li>
<p>The expressions compare attributes to values using relational operators (=, !=, &lt;, &gt;, and so on).</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJAAJB"></a><a id="EXPRN010"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">11.2</span> Introduction to Expressions</h2>
<p><a id="sthref161"></a>Expressions describe interests in an item of data. Expressions are stored in a column of a user table and compared, using the SQL <code>EVALUATE</code> operator, to incoming data items specified in a SQL <code>WHERE</code> clause or to a table of data. Expressions are evaluated as true or false, or return a null value if an expression does not exist for a row.</p>
<p>An <a id="sthref162"></a><span class="bold">expression</span> describes interest in an item of data using one or more variables, known as <a id="sthref163"></a><span class="bold">elementary attributes</span>. An expression can also include literals, functions supplied by Oracle Database, user-defined functions, and table aliases. A <a id="sthref164"></a>valid expression consists of one or more simple conditions called predicates. The predicates in the expression are linked by the logical operators <code>AND</code> and <code>OR</code>. Expressions must adhere to the SQL <code>WHERE</code> clause format. (For more information about the SQL <code>WHERE</code> clause, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.) An expression is not required to use all the defined elementary attributes; however, the incoming data must provide a value for every elementary attribute. Null is an acceptable value.</p>
<p>For example, the following expression includes the <code>UPPER</code> function supplied by Oracle Database and captures the interest of a customer in a car (the data item) with the model, price, and year as elementary attributes:</p>
<pre>
UPPER(Model) = 'TAURUS' and Price &lt; 20000 and Year &gt; 2000
</pre>
<p>Expressions are stored in a column of a user table with an Expression <a id="sthref165"></a>data type. The values stored in a column of this type are constrained to be expressions. (See <a href="#BABGCHJB">Section 11.2.2</a>.) A user table can have one or more Expression columns. A query to display the contents of an Expression column displays the expressions in string format.</p>
<p>You insert, update, and delete expressions using standard SQL. A group of expressions that are stored in a single <a id="sthref166"></a>column is called an <a id="sthref167"></a><span class="bold">expression set</span> and shares a common set of elementary attributes. This set of elementary attributes plus any functions used in the expressions are the <a id="sthref168"></a>metadata for the expression set. This metadata is referred to as the <span class="bold">attribute set</span>. The attribute set consists of the elementary attribute names and their data types and any functions used in the expressions. The attribute set is used by the Expression column to validate changes and additions to the expression set. An expression stored in the Expression column can use only the elementary attribute and functions defined in the corresponding attribute set. Expressions cannot contain subqueries.</p>
<p>Expression Filter provides the <a id="sthref169"></a><code>DBMS_EXPFIL</code> package which contains procedures to manage the expression data.</p>
<p>There are four basic steps to <a id="sthref170"></a>create and use an Expression column:</p>
<ol>
<li>
<p>Define an attribute set. See <a href="#CHDEGDBB">Section 11.2.1</a>.</p>
</li>
<li>
<p>Define an Expression column in a user table. See <a href="#BABGCHJB">Section 11.2.2</a>.</p>
</li>
<li>
<p>Insert expressions in the table. See <a href="#CHDIHFHJ">Section 11.2.3</a>.</p>
</li>
<li>
<p>Apply the SQL <code>EVALUATE</code> operator to compare expressions to incoming data items. See <a href="#CHDFJJAB">Section 11.3</a>.</p>
</li>
</ol>
<p><a href="#CHDIAFDJ">Figure 11-1</a> shows the process steps for creating and implementing a rules application based on Expression Filter. The remaining sections in this chapter guide you through this procedure.</p>
<div class="figure">
<p class="titleinfigure"><a id="CHDIAFDJ"></a><a id="EXPRN534"></a>Figure 11-1 Expression Filter Implementation Process for a Rules Application</p>
<img width="956" height="1009" src="img/expfilprocess.gif" alt="Description of Figure 11-1 follows" /><br />
<a id="sthref171" href="img_text/expfilprocess.htm">Description of "Figure 11-1 Expression Filter Implementation Process for a Rules Application"</a><br />
<br /></div>
<!-- class="figure" -->
<a id="CHDEGDBB"></a><a id="EXPRN011"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">11.2.1</span> Defining Attribute Sets</h3>
<p>Use a special form of an Oracle object type to create an attribute set. (For more information about object types, see <a class="olink ADOBJ" href="../e11822/toc.htm"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a>.)</p>
<p>The attribute set defines the elementary attributes for an expression set. It implicitly allows all SQL functions supplied by Oracle to be valid references in the expression set. If the expression set refers to a user-defined function, it must be explicitly added to the attribute set. An elementary attribute in an attribute set can refer to data stored in another database table using table alias constructs. One or more or all elementary attributes in an attribute set can be table aliases. If an elementary attribute is a table alias, the value assigned to the elementary attribute is a <code>ROWID</code> from the corresponding table. For more information about table aliases, see <a href="exprn_app_a.htm#BGBDFBEG">Appendix A</a>.</p>
<p>You can create an <a id="sthref172"></a><a id="sthref173"></a>attribute set using one of two approaches:</p>
<ul>
<li>
<p>Use an existing object type to create an attribute set with the same name as the object type. This approach is most appropriate to use when the attribute set does not contain any table alias elementary attributes. You use the <a id="sthref174"></a><code>CREATE_ATTRIBUTE_SET</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a href="#CHDGCHBF">Example 11-1</a>.</p>
</li>
<li>
<p>Individually add elementary attributes to an existing attribute set. Expression Filter automatically creates an object type to encapsulate the elementary attributes and gives it the same name as the attribute set. This approach is most appropriate to use when the attribute set contains one or more elementary attributes defined as table aliases. You use the <a id="sthref175"></a><code>ADD_ELEMENTARY_ATTRIBUTE</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a href="#CHDDGJDH">Example 11-2</a>.</p>
</li>
</ul>
<p>If the expressions refer to user-defined functions, you must add the functions to the corresponding attribute set, using the <code>ADD_FUNCTIONS</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a href="#CHDBECCB">Example 11-3</a>.</p>
<p class="subhead2"><a id="EXPRN535"></a><a id="sthref176"></a>Attribute Set Examples</p>
<p><a href="#CHDGCHBF">Example 11-1</a> shows how to use an existing object type to create an attribute set. It uses the <code>CREATE_ATTRIBUTE_SET</code> procedure.</p>
<div class="example">
<p class="titleinexample"><a id="CHDGCHBF"></a><a id="EXPRN536"></a>Example 11-1 Defining an Attribute Set From an Existing Object Type</p>
<pre>
CREATE OR REPLACE TYPE Car4Sale AS OBJECT 
                                   (Model   VARCHAR2(20), 
                                    Year    NUMBER, 
                                    Price   NUMBER, 
                                    Mileage NUMBER);
/
 
 
BEGIN 
  DBMS_EXPFIL.CREATE_ATTRIBUTE_SET(attr_set  =&gt; 'Car4Sale',
                                   from_type =&gt; 'YES');
END;
/
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>CREATE_ATTRIBUTE_SET</code> procedure, see <a class="olink ARPLS163" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS163"><code>CREATE_ATTRIBUTE_SET</code> Procedure</a>.</p>
<p><a href="#CHDDGJDH">Example 11-2</a> shows how to create an attribute set <code>Car4Sale</code> and how to define the variables one at a time. It uses the <code>CREATE_ATTRIBUTE_SET</code> and <a id="sthref177"></a><code>ADD_ELEMENTARY_ATTRIBUTE</code> procedures.</p>
<div class="example">
<p class="titleinexample"><a id="CHDDGJDH"></a><a id="EXPRN537"></a>Example 11-2 Defining an Attribute Set Incrementally</p>
<pre>
BEGIN
  DBMS_EXPFIL.CREATE_ATTRIBUTE_SET(attr_set =&gt; 'Car4Sale');
  DBMS_EXPFIL.ADD_ELEMENTARY_ATTRIBUTE( 
                               attr_set   =&gt; 'Car4Sale',
                               attr_name  =&gt; 'Model',
                               attr_type  =&gt; 'VARCHAR2(20)');
  DBMS_EXPFIL.ADD_ELEMENTARY_ATTRIBUTE(
                               attr_set   =&gt; 'Car4Sale',
                               attr_name  =&gt; 'Year',
                               attr_type  =&gt; 'NUMBER',
                               attr_defv1 =&gt; '2000');
  DBMS_EXPFIL.ADD_ELEMENTARY_ATTRIBUTE(
                               attr_set   =&gt; 'Car4Sale',
                               attr_name  =&gt; 'Price',
                               attr_type  =&gt; 'NUMBER');
  DBMS_EXPFIL.ADD_ELEMENTARY_ATTRIBUTE(
                               attr_set   =&gt; 'Car4Sale',
                               attr_name  =&gt; 'Mileage',
                               attr_type  =&gt; 'NUMBER');
END;/
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>ADD_ELEMENTARY_ATTRIBUTE</code> procedure, see <a class="olink ARPLS157" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS157"><code>ADD_ELEMENTARY_ATTRIBUTES</code></a> Procedure.</p>
<p>If the expressions refer to user-defined functions, you must add the functions to the corresponding attribute set. <a href="#CHDBECCB">Example 11-3</a> shows how to add user-defined functions, using the <a id="sthref178"></a><a id="sthref179"></a><code>ADD_FUNCTIONS</code> procedure, to an attribute set.</p>
<div class="example">
<p class="titleinexample"><a id="CHDBECCB"></a><a id="EXPRN538"></a>Example 11-3 Adding User-Defined Functions to an Attribute Set</p>
<pre>
CREATE or REPLACE FUNCTION HorsePower(Model VARCHAR2, Year VARCHAR2)
    return NUMBER is
BEGIN
-- Derive HorsePower from other relational tables uisng Model and Year values.--
  return 200;
END HorsePower;
/

CREATE or REPLACE FUNCTION CrashTestRating(Model VARCHAR2, Year VARCHAR2)
    return NUMBER is
BEGIN
-- Derive CrashTestRating from other relational tables using Model --
-- and Year values. --
  return 5;
END CrashTestRating;
/

BEGIN
  DBMS_EXPFIL.ADD_FUNCTIONS (attr_set   =&gt; 'Car4Sale',
                             funcs_name =&gt; 'HorsePower');
  DBMS_EXPFIL.ADD_FUNCTIONS (attr_set   =&gt; 'Car4Sale',
                             funcs_name =&gt; 'CrashTestRating');
END;
/
</pre></div>
<!-- class="example" -->
<p>For more information about the <code>ADD_FUNCTIONS</code> procedure, see <a class="olink ARPLS158" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS158"><code>ADD_FUNCTIONS</code> Procedure</a>.</p>
<p>To drop an attribute set, you use the <a id="sthref180"></a><a id="sthref181"></a><code>DROP_ATTRIBUTE_SET</code> procedure. For more information, see <a class="olink ARPLS167" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS167"><code>DROP_ATTRIBUTE_SET</code> Procedure</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABGCHJB"></a><a id="EXPRN012"></a>
<div class="sect2">
<h3 class="sect2"><span class="secnum">11.2.2</span> Defining Expression Columns</h3>
<p><a id="sthref182"></a>Expression is a virtual data type. Assigning an attribute set to a <code>VARCHAR2</code> column in a user table creates an Expression column. The attribute set determines which elementary attributes and user-defined functions you can use in the expression set. You can use an attribute set to create multiple columns of <code>EXPRESSION</code> data type in the same table and in other tables in the same schema. Note that an attribute set in one schema cannot be associated with a column in another schema.</p>
<p>To create an <a id="sthref183"></a><a id="sthref184"></a>Expression column:</p>
<ol>
<li>
<p>Add a <code>VARCHAR2</code> column to a table or create a table with the <code>VARCHAR2</code> column. You can also use an existing <code>VARCHAR2</code> column in a user table for this purpose. The following example creates a table with a <code>VARCHAR2</code> column, named <code>Interest</code>, that will be used with an attribute set:</p>
<pre>
CREATE TABLE Consumer (CId          NUMBER,
                       Zipcode      NUMBER,
                       Phone        VARCHAR2(12),
                       Interest     VARCHAR2(200));
</pre></li>
<li>
<p>Assign an attribute set to the column, using the <a id="sthref185"></a><code>ASSIGN_ATTRIBUTE_SET</code> procedure. The following example assigns an attribute set to a column named <code>Interest</code> in a table called <code>Consumer</code>:</p>
<pre>
BEGIN
  DBMS_EXPFIL.ASSIGN_ATTRIBUTE_SET (
                                    attr_set =&gt; 'Car4Sale',
                                    expr_tab =&gt; 'Consumer',
                                    expr_col =&gt; 'Interest');
END;
/
</pre>
<p>For more information about the <code>ASSIGN_ATTRIBUTE_SET</code> procedure, see <a class="olink ARPLS159" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS159"><code>ASSIGN_ATTRIBUTE_SET</code> Procedure</a>.</p>
</li>
</ol>
<p><a href="#BABHHCGJ">Figure 11-2</a> is a conceptual image of consumers' interests (in trading cars) being captured in a <code>Consumer</code> table.</p>
<div class="figure">
<p class="titleinfigure"><a id="BABHHCGJ"></a><a id="EXPRN539"></a>Figure 11-2 Expression Data Type</p>
<img width="401" height="465" src="img/datatype.gif" alt="Description of Figure 11-2 follows" /><br />
<a id="sthref186" href="img_text/datatype.htm">Description of "Figure 11-2 Expression Data Type"</a><br />
<br /></div>
<!-- class="figure" -->
<p>To remove an attribute set from a column, you use the <a id="sthref187"></a><a id="sthref188"></a><code>UNASSIGN_ATTRIBUTE_SET</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a class="olink ARPLS172" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS172"><code>UNASSIGN_ATTRIBUTE_SET</code> Procedure</a>.</p>
<p>To drop an attribute set not being used for any expression set, you use the <a id="sthref189"></a><a id="sthref190"></a><code>DROP_ATTRIBUTE_SET</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a class="olink ARPLS167" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS167"><code>DROP_ATTRIBUTE_SET</code> Procedure</a>.</p>
<p>To copy an attribute set across schemas, you use the <a id="sthref191"></a><a id="sthref192"></a><code>COPY_ATTRIBUTE_SET</code> procedure of the <code>DBMS_EXPFIL</code> package. See <a class="olink ARPLS162" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS162"><code>COPY_ATTRIBUTE_SET</code> Procedure</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDIHFHJ"></a><a id="EXPRN013"></a>
<div class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">11.2.3</span> <a id="sthref193"></a>Inserting, <a id="sthref194"></a>Updating, and <a id="sthref195"></a>Deleting Expressions</h3>
<p>You use standard SQL to insert, update, and delete expressions. When an expression is inserted or updated, it is checked for correct syntax and constrained to use the elementary attributes and functions specified in the corresponding attribute set. If the expression is not correct, SQL returns an error message. For more information about evaluation semantics, see <a href="#CHDBBCDH">Section 11.4</a>.</p>
<p><a href="#CHDECEBJ">Example 11-4</a> shows how to insert an expression (the consumer's interest in trading cars, which is depicted in <a href="#BABHHCGJ">Figure 11-2</a>) into the <code>Consumer</code> table using the SQL <code>INSERT</code> statement.</p>
<div class="example">
<p class="titleinexample"><a id="CHDECEBJ"></a><a id="EXPRN540"></a>Example 11-4 Inserting an Expression into the Consumer Table</p>
<pre>
INSERT INTO Consumer VALUES (1, 32611, '917 768 4633',
            'Model=''Taurus'' and Price &lt; 15000 and Mileage &lt; 25000');
INSERT INTO Consumer VALUES (2, 03060, '603 983 3464',
                'Model=''Mustang'' and Year &gt; 1999 and Price &lt; 20000');
</pre></div>
<!-- class="example" -->
<p>If an expression refers to a user-defined function, the function must be added to the corresponding attribute set (as shown in <a href="#CHDBECCB">Example 11-3</a>). <a href="#CHDFJBJD">Example 11-5</a> shows how to insert an expression with a reference to a user-defined function, <code>HorsePower</code>, into the <code>Consumer</code> table.</p>
<div class="example">
<p class="titleinexample"><a id="CHDFJBJD"></a><a id="EXPRN541"></a>Example 11-5 Inserting an Expression That References a User-Defined Function</p>
<pre>
INSERT INTO Consumer VALUES (3, 03060, '603 484 7013',
                            'HorsePower(Model, Year) &gt; 200 and Price &lt; 20000');
</pre></div>
<!-- class="example" -->
<p>Expression data can be bulk loaded into an Expression column using SQL*Loader. For more information about bulk loading, see <a href="exprn_utilities.htm#CJABHDDD">Section 16.1</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDFJJAB"></a><a id="EXPRN014"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">11.3</span> Applying the SQL EVALUATE Operator</h2>
<p>You use the SQL <a id="sthref196"></a><code>EVALUATE</code> operator in the <code>WHERE</code> clause of a SQL statement to compare stored expressions to incoming data items. The SQL <code>EVALUATE</code> operator returns <code>1</code> for an expression that matches the data item and <code>0</code> for an expression that does not match. For any null values stored in the Expression column, the SQL <code>EVALUATE</code> operator returns <code>NULL</code>.</p>
<p>The SQL <a id="sthref197"></a><code>EVALUATE</code> operator has two arguments: the name of the column storing the expressions and the data item to which the expressions are compared. In the data item argument, you must provide values for all elementary attributes in the attribute set associated with the Expression column. Null is an acceptable value. You can specify the data item either as string-formatted name-value pairs or as an <code>AnyData</code> instance.</p>
<p>In the following example, the query returns a row from the <code>Consumer</code> table if the expression in the <code>Interest</code> column evaluates to true for the data item:</p>
<pre>
SELECT * FROM Consumer WHERE
   EVALUATE (Consumer.Interest, &lt;data item&gt;) = 1;
</pre>
<p class="subhead2"><a id="EXPRN542"></a><a id="sthref198"></a>Data Item Formatted as a String</p>
<p>If you represent the values of all the elementary attributes in the attribute set as readable values, such as those stored in <code>VARCHAR</code>, <code>DATE</code>, and <code>NUMBER</code> data types and the constructors formatted as a string, then you can format the data item as a string:</p>
<p>Operator Form</p>
<pre>
EVALUATE (VARCHAR2, VARCHAR2)
    returns NUMBER;
</pre>
<p>Example</p>
<pre>
SELECT * FROM Consumer WHERE
    EVALUATE (Consumer.Interest,
              'Model=&gt;''Mustang'',
               Year=&gt;2000,
               Price=&gt;18000,
               Mileage=&gt;22000'
               ) = 1;
</pre>
<p><a id="sthref199"></a>If a data item does not require a constructor for any of its elementary attribute values, then a list of values you provide for the data item can be formatted as a string (name-value pairs) using two <a id="sthref200"></a><a id="sthref201"></a><code>getVarchar</code> methods (a <code>STATIC</code> method and a <code>MEMBER</code> method) in the object type associated with the attribute set. The <code>STATIC</code> method formats the data item without creating the object instance. Use the <code>MEMBER</code> method if the object instance is already available.</p>
<p>Expression Filter implicitly creates the <code>STATIC</code> and <code>MEMBER</code> methods for the object type and can be used as shown in the following example:</p>
<pre>
SELECT * FROM Consumer WHERE
    EVALUATE (Consumer.Interest,
              Car4Sale.getVarchar('Mustang',   -- STATIC getVarchar API --
                                   2000,
                                   18000,
                                   22000)
              ) = 1;

SELECT * FROM Consumer WHERE
    EVALUATE (Consumer.Interest,
              Car4Sale('Mustang',
                        2000,
                        18000,
                        22000).getVarchar()     -- MEMBER getVarchar() API --
              ) = 1;
</pre>
<p class="subhead2"><a id="EXPRN543"></a><a id="sthref202"></a>Data Item Formatted as an AnyData Instance</p>
<p>Any data item can be formatted using an <code>AnyData</code> instance. <a id="sthref203"></a><a id="sthref204"></a><code>AnyData</code> is an object type supplied by Oracle Database that can hold instances of any Oracle data type, both supplied by Oracle Database and user-defined. For more information, see <a class="olink ADOBJ" href="../e11822/toc.htm"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a>.</p>
<p>Operator Form</p>
<pre>
EVALUATE (VARCHAR2, AnyData)
  returns NUMBER;
</pre>
<p>An instance of the object type capturing the corresponding attribute set is converted into an <code>AnyData</code> instance using the <code>AnyData</code> <code>convertObject</code> method. Using the previous example, you can pass the data item to the SQL <code>EVALUATE</code> operator by converting the instance of the <code>Car4Sale</code> object type into <code>AnyData</code>, as shown in the following example:</p>
<pre>
SELECT * FROM Consumer WHERE
  EVALUATE (Consumer.Interest,
            AnyData.convertObject(
             Car4Sale('Mustang',
                         2000,
                         18000,
                         22000))
         ) = 1;
</pre>
<p>For the syntax of the SQL <code>EVALUATE</code> operator, see <a href="exprn_sql.htm#CIHGBFDH">"EVALUATE"</a> in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>. For additional examples of the SQL <code>EVALUATE</code> operator, see <a href="exprn_app_b.htm#BGBGBFEG">Appendix B</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDBBCDH"></a><a id="EXPRN015"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">11.4</span> Evaluation Semantics</h2>
<p>When an expression is inserted or updated, Expression Filter <a id="sthref205"></a>validates the syntax and ensures that the expression refers to valid elementary attributes and functions associated with the attribute set. The SQL <code>EVALUATE</code> operator evaluates expressions using the privileges of the owner of the table that stores the expressions. For instance, if an expression includes a reference to a user-defined function, during its evaluation, the function is executed with the privileges of the owner of the table. References to schema objects with no schema extensions are resolved in the table owner's schema.</p>
<p>An expression that refers to a user-defined function may become invalid if the function is modified or dropped. An invalid expression causes the SQL statement evaluating the expression to fail. To recover from this error, replace the missing or modified function with the original function.</p>
<p>Use the <a id="sthref206"></a>Expression Validation utility to verify an expression set. It identifies expressions that have become invalid since they were inserted, perhaps due to a change made to a user-defined function or table. This utility collects references to the invalid expressions in an exception table. If an exception table is not provided, the utility fails when it encounters the first invalid expression in the expression set.</p>
<p>The following commands collect references to invalid expressions found in the <code>Consumer</code> table. The <a id="sthref207"></a><code>BUILD_EXCEPTIONS_TABLE</code> procedure creates the exception table, <code>InterestExceptions</code>, in the current schema. The <a id="sthref208"></a><code>VALIDATE_EXPRESSIONS</code> procedure validates the expressions and stores the invalid expressions in the <code>InterestExceptions</code> table.</p>
<pre>
BEGIN
  DBMS_EXPFIL.BUILD_EXCEPTIONS_TABLE (exception_tab =&gt; 'InterestExceptions');

  DBMS_EXPFIL.VALIDATE_EXPRESSIONS (expr_tab =&gt; 'Consumer',
                                    expr_col =&gt; 'Interest',
                                    exception_tab =&gt; 'InterestExceptions');
END;
/
</pre>
<p>For more information, see <a class="olink ARPLS160" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS160"><code>BUILD_EXCEPTIONS_TABLE</code> Procedure</a> and <a class="olink ARPLS173" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS173"><code>VALIDATE_EXPRESSIONS</code> Procedure</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CHDBDBHG"></a><a id="EXPRN016"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">11.5</span> Granting and Revoking Privileges</h2>
<p><a id="sthref209"></a><a id="sthref210"></a>A user requires <a id="sthref211"></a><code>SELECT</code> privileges on a table storing expressions to evaluate them. The SQL <code>EVALUATE</code> operator evaluates expressions using the privileges of the owner of the table that stores the expressions. The privileges of the user issuing the query are not considered.</p>
<p>Expressions can be inserted, updated, and deleted by the owner of the table. Other users must have <a id="sthref212"></a><code>INSERT</code> and <a id="sthref213"></a><code>UPDATE</code> privileges for the table, and they must have <a id="sthref214"></a><code>INSERT</code> <code>EXPRESSION</code> and <a id="sthref215"></a><code>UPDATE</code> <code>EXPRESSION</code> privileges for a specific Expression column in the table to be able to make modifications to it.</p>
<p>In the following example, the owner of the <code>Consumer</code> table grants expression privileges, using the <a id="sthref216"></a><a id="sthref217"></a><code>GRANT_PRIVILEGE</code> procedure, on the <code>Interest</code> column to a user named <code>Andy</code>:</p>
<pre>
BEGIN
  DBMS_EXPFIL.GRANT_PRIVILEGE (expr_tab =&gt; 'Consumer',
                               expr_col =&gt; 'Interest',
                               priv_type =&gt; 'INSERT EXPRESSION',
                               to_user =&gt; 'Andy');
END;
/
</pre>
<p>To revoke privileges, use the <a id="sthref218"></a><a id="sthref219"></a><code>REVOKE_PRIVILEGE</code> procedure.</p>
<p>For more information about granting and revoking privileges, see <a class="olink ARPLS169" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS169"><code>GRANT_PRIVILEGE</code> Procedure</a> and <a class="olink ARPLS171" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS171"><code>REVOKE_PRIVILEGE</code> Procedure</a>.</p>
</div>
<!-- class="sect1" -->
<a id="EXPRN017"></a>
<div class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref220"></a>
<h2 class="sect1"><span class="secnum">11.6</span> <a id="sthref221"></a>Error Messages</h2>
<p>The Expression Filter error message numbers are in the range of 38401 to 38600. The error messages are documented in <span class="italic">Oracle Database Error Messages</span>.</p>
<p>Oracle error message documentation is only available in HTML. If you only have access to the Oracle Documentation CD, you can browse the error messages by range. Once you find the specific range, use your browser's find in page feature to locate the specific message. When connected to the Internet, you can search for a specific error message using the error message search feature of the Oracle online documentation.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment988">
<tr>
<td class="cellalignment995">
<table class="cellalignment993">
<tr>
<td class="cellalignment992"><a href="exprn_part2.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment992"><a href="exprn_indexexpressions.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment997">
<table class="cellalignment991">
<tr>
<td class="cellalignment992"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment992"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment992"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment992"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment992"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment992"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
