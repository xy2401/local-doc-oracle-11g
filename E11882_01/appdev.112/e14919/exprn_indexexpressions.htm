<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Indexing Expressions</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 033" />
<meta name="dcterms.created" content="2011-08-16T11:52:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Rules Manager and Expression Filter Developer's Guide" />
<meta name="dcterms.identifier" content="E14919-04" />
<meta name="dcterms.isVersionOf" content="EXPRN" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="exprn_expconcepts.htm" title="Previous" type="text/html" />
<link rel="Next" href="exprn_xpathpredicates.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e14919.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">21/36</span> <!-- End Header --><a id="CIHBFHBA"></a><a id="EXPRN018"></a>
<h1 class="chapter"><span class="secnum">12</span> Indexing <a id="sthref222"></a><a id="sthref223"></a>Expressions</h1>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1003">
<tbody>
<tr class="cellalignment989">
<td class="cellalignment995">
<p class="notep1">Note:</p>
Expression indexing is available only in Oracle Database Enterprise Edition.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<p>You can define an index on a column storing expressions to quickly find expressions that evaluate to true for a data item. This is most helpful when a large expression set is evaluated for a data item. The SQL <code>EVALUATE</code> operator determines whether or not to use the index based on its access cost. Expression Filter uses the indextype, <code>EXFSYS.EXPFILTER</code>, to create and maintain indexes.</p>
<p>If an Expression column is not indexed, the SQL <code>EVALUATE</code> operator builds a dynamic query for each expression stored in the column and executes it using the values passed in as the data item.</p>
<p>This chapter describes the basic approach to indexing including index representation (<a href="#CIHFECIH">Section 12.3</a>), index processing (<a href="#CIHGIAFB">Section 12.4</a>), and user commands for creating and tuning indexes (<a href="#CIHDGIJC">Section 12.6</a>).</p>
<a id="EXPRN019"></a>
<div class="sect1"><a id="sthref224"></a>
<h2 class="sect1"><span class="secnum">12.1</span> Concepts of Indexing Expressions</h2>
<p>Expressions in a large expression set tend to have certain commonalities in their predicates. An Expression Filter index, defined on an expression set, groups predicates by their commonalities to reduce processing costs. For example, in the case of two predicates with a common left-hand side, such as <code>Year=1998</code> and <code>Year=1999</code>, in most cases, the falseness or trueness of one predicate can be determined based on the outcome of the other predicate. The left-hand side of a predicate includes arithmetic expressions containing one or more elementary attributes and user-defined functions, for example, <code>HORSEPOWER(model, year)</code>. An operator and a constant on the right-hand side (RHS) completes the predicate, for example, <code>HORSEPOWER(model, year)&gt;=150</code>.</p>
<p>An Expression Filter index defined on a set of expressions takes advantage of the logical relationships among multiple predicates by grouping them based on the commonality of their left-hand sides. These left-hand sides are arithmetic expressions that consist of one or more elementary attributes and user-defined functions, for example, <code>HORSEPOWER(model,year)</code>.</p>
</div>
<!-- class="sect1" -->
<a id="EXPRN020"></a>
<div class="sect1"><a id="sthref225"></a>
<h2 class="sect1"><span class="secnum">12.2</span> Indexable Predicates</h2>
<p>The <a id="sthref226"></a><a id="sthref227"></a>predicates that can be indexed with the Expression Filter indexing mechanism include any predicate with a constant on the right-hand side that uses one of the following <a id="sthref228"></a>predicate operators: <code>=</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>BETWEEN</code>, <code>IS NULL</code>, <code>IS NOT</code> <code>NULL</code>, <code>LIKE</code>, and <code>NVL</code>.</p>
<p>The predicates that cannot be indexed are preserved in their original form and they are evaluated by value substitution in the last stage of expression evaluation. Some of the predicates that cannot be indexed include:</p>
<ul>
<li>
<p>Predicates with a variable on the right-hand side.</p>
</li>
<li>
<p><code>IN</code> list predicates.</p>
</li>
<li>
<p><code>LIKE</code> predicates with a leading wild-card character.</p>
</li>
<li>
<p>Duplicate predicates in an expression with the same left-hand side. At most, two predicates with a duplicate left-hand side, for example <code>Year&gt;1995 and Year&lt;2000,</code> can be indexed if the index is configured for <code>BETWEEN</code> operators. A predicate with a <code>BETWEEN</code> operator is treated as two predicates with binary operators, one with the <code>'&gt;='</code> operator and another with the <code>'&lt;='</code> operator. See the section about <a class="olink ARPLS153" href="../../appdev.112/e40758/t_expfilobj.htm#ARPLS153">EXF$INDEXOPER</a> for more information about the <code>BETWEEN</code> operator.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="CIHFECIH"></a><a id="EXPRN021"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">12.3</span> Index Representation</h2>
<p>The Expression Filter index uses persistent database objects internally to maintain the index information for an expression set. A relational table called the <a id="sthref229"></a>predicate table captures the grouping information for all the predicates in an expression set. Typically, the predicate table contains one row for each expression in the expression set. However, an expression containing one or more disjunctions (two simple expressions joined by <code>OR</code>) is converted into a disjunctive-normal form (disjunction of conjunctions), and each disjunction in this normal form is treated as a separate expression with the same identifier as the original expression. The predicate table contains one row for each such disjunction.</p>
<p>The Expression Filter <a id="sthref230"></a>index can be tuned for better performance by identifying the most-common left-hand sides of the predicates (or discriminating predicate groups) in the expression set. The owner of the expression set (or the table storing expressions) can identify the predicate's left-hand sides or automate this process by collecting statistics on the expression set. For each common left-hand side, a predicate group is formed with all the corresponding predicates in the expression set. For example, if predicates with <code>Model</code>, <code>Price,</code> and <code>HorsePower(Model, Year)</code> attributes are common in the expression set, three predicate groups are formed for these attributes. The predicate table captures the predicate grouping information, as shown in <a href="#CIHJGBEA">Figure 12-1</a>.</p>
<div class="figure">
<p class="titleinfigure"><a id="CIHJGBEA"></a><a id="EXPRN544"></a>Figure 12-1 Conceptual Predicate Table</p>
<img width="365" height="358" src="img/predicatetable.gif" alt="Description of Figure 12-1 follows" /><br />
<a id="sthref231" href="img_text/predicatetable.htm">Description of "Figure 12-1 Conceptual Predicate Table"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For each predicate group, the predicate table has two columns: one to store the operator of the predicate and the other to store the constant on the right-hand side of the predicate. For a predicate in an expression, Expression Filter stores its operator and the right-hand side constant under the corresponding columns of the predicate group. The predicates that do not fall into one of the preconfigured groups are preserved in their original form and Expression Filter stores them in a <code>VARCHAR2</code> column of the predicate table as <a id="sthref232"></a>sparse predicates. (For the example in <a href="#CIHJGBEA">Figure 12-1</a>, the predicates on <code>Mileage</code> and <code>Year</code> fall in this category.) Expression Filter implicitly treats the predicates with <code>IN</code> lists and the predicates with a varying right-hand side (not a constant) as sparse predicates. Expression Filter creates native indexes on the predicate table as described in <a href="#CIHGIAFB">Section 12.4</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHGIAFB"></a><a id="EXPRN022"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">12.4</span> <a id="sthref233"></a>Index Processing</h2>
<p>To evaluate a data item for a set of expressions, Expression Filter computes the left-hand side of each predicate group in the data item and compares its value with the corresponding constants stored in the predicate table using an appropriate operator. For example, using the predicate table, if <code>HORSEPOWER('TAURUS',2001)</code> returns 153, then the predicates satisfying this value are those interested in horsepower equal to 153 or those interested in horsepower greater than a value that is below 153, and so on. If the operators and right-hand side constants of the previous group are stored in the <code>G3_OP</code> and <code>G3_RHS</code> columns of the predicate table (in <a href="#CIHJGBEA">Figure 12-1</a>), then the following query on the predicate table identifies the rows that satisfy this group of predicates:</p>
<pre>
SELECT  Rid  FROM predicate_table WHERE
     G3_OP = '=' AND G3_RHS = :rhs_val   or
     G3_OP = '&gt;' AND G3_RHS &lt; :rhs_val   or 
     ... 
-- where :rhs_val is the value from the computation of the left-hand side --
</pre>
<p>Expression Filter uses similar techniques for less than (<code>&lt;</code>), greater than or equal to (<code>&gt;=</code>), less than or equal to (<code>&lt;=</code>), not equal to (<code>!=</code>, <code>&lt;&gt;</code>), <code>LIKE</code>, <code>IS NULL</code>, and <code>IS NOT NULL</code> predicates. Predicates with the <code>BETWEEN</code> operator are divided into two predicates with greater than or equal to and less than or equal to operators. Expression Filter can configure duplicate predicate groups for a left-hand side if it frequently appears more than once in a single expression, for example, <code>Year &gt;= 1996 and Year &lt;= 2000</code>.</p>
<p>The <code>WHERE</code> clause (shown in the previous query) is repeated for each predicate group in the predicate table, and the predicate groups are all joined by conjunctions. When the complete query (shown in the following example) is issued on the predicate table, it returns the row identifiers for the expressions that evaluate to true with all the predicates in the preconfigured groups. For these resulting expressions, Expression Filter evaluates the corresponding sparse predicates that are stored in the predicate table using dynamic queries to determine if an expression is true for a particular data item.</p>
<pre>
SELECT Rid, Sparse_predicate FROM predicate_table
 WHERE                 --- predicates in group 1
  (G1_OP IS NULL OR     --- no predicate involving this LHS
   ((:g1_val IS NOT NULL AND 
     (G1_OP = '=' AND G1_RHS = :g1_val or
      G1_OP = '&gt;' AND G1_RHS &lt; :g1_val or 
      G1_OP = '&lt;' AND G1_RHS &gt; :g1_val or        
      ...) or 
     (:g1_val IS NULL AND G1_OP = 'IS NULL')))

 AND                   --- predicates in group 2
  (G2_OP IS NULL OR
   ((:g2_val IS NOT NULL AND 
     (G2_OP = '=' AND G2_RHS = :g2_val   or
      G2_OP = '&gt;' AND G2_RHS &lt; :g2_val   or
      G2_OP = '&lt;' AND G2_RHS &gt; :g2_val   or
      ...) or
     (:g2_val IS NULL AND G2_OP = 'IS NULL')))
 AND
...
</pre>
<p>For efficient execution of the predicate table query (shown previously), Expression Filter creates concatenated bitmap indexes on the <code>{Operator, RHS constant}</code> columns of selected groups. These groups are identified either by user specification or from the statistics about the frequency of the predicates (belonging to a group) in the expression set. With the indexes defined on preconfigured predicate groups, Expression Filter divides the predicates from an expression set into three classes:</p>
<ol>
<li>
<p><a id="sthref234"></a><a id="sthref235"></a>Indexed predicates: Predicates that belong to a subset of the preconfigured predicate groups that are identified as most discriminating. Expression Filter creates bitmap indexes for these predicate groups; thus, these predicates are also called indexed predicates. The previous query performs range scans on the corresponding index to evaluate all the predicates in a group and returns the expressions that evaluate to true with just that predicate. Similar scans are performed on the bitmap indexes of other indexed predicates, and the results from these index scans are combined using <code>BITMAP AND</code> operations to determine all the expressions that evaluate to true with all the indexed predicates. This enables multiple predicate groups to be filtered simultaneously using one or more bitmap indexes.</p>
</li>
<li>
<p><a id="sthref236"></a><a id="sthref237"></a>Stored predicates: Predicates that belong to groups that are not indexed. Expression Filter captures these predicates in the corresponding <code>{Operator,</code> <code>RHS constant}</code> columns of the predicate table, with no bitmap indexes defined on them. For all the expressions that evaluate to true with the indexed predicates, the previous query compares the values of the left-hand sides of these predicate groups with those stored in the predicate table. Although Expression Filter creates bitmap indexes for a selected number of groups, the optimizer may choose not to use one or more indexes based on their access cost. Those groups are treated as stored predicate groups. The query issued on the predicate table remains unchanged for a different choice of indexes.</p>
</li>
<li>
<p><a id="sthref238"></a><a id="sthref239"></a>Sparse predicates: Predicates that do not belong to any of the preconfigured predicate groups. For expressions that evaluate to true for all the predicates in the indexed and stored groups, Expression Filter evaluates last sparse predicates (if any). If the expressions with sparse predicates evaluate to true, Expression Filter considers them true for the data item.</p>
</li>
</ol>
<p>Optionally, you can specify the common operators that appear with predicates on the left-hand side and reduce the number of range scans performed on the bitmap index. See <a class="olink ARPLS153" href="../../appdev.112/e40758/t_expfilobj.htm#ARPLS153"><code>EXF$INDEXOPER</code></a> for more information. In the previous example, the <code>Model</code> attribute commonly appears in equality predicates, and you can configure the Expression Filter index to check only for equality predicates while processing the indexed predicate groups. Expression Filter processes and evaluates sparse predicates along with any other form of predicate on the <code>Model</code> attribute at the same time.</p>
</div>
<!-- class="sect1" -->
<a id="EXPRN023"></a>
<div class="sect1"><a id="sthref240"></a>
<h2 class="sect1"><span class="secnum">12.5</span> <a id="sthref241"></a>Predicate Table Query</h2>
<p>Once the predicate groups for an expression set are determined, the structure of the predicate table and the query to be issued on the predicate table are fixed. The choice of indexed or stored predicate groups does not change the query. As part of Expression Filter index creation, the predicate table query is determined and a function is dynamically generated for this query. Expression Filter uses the same query (with bind variables) for any data item passed in for the expression set evaluation. This ensures that the predicate table query is compiled once and reused for evaluating any number of data items.</p>
</div>
<!-- class="sect1" -->
<a id="CIHDGIJC"></a><a id="EXPRN024"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">12.6</span> Index Creation and Tuning</h2>
<p>The cost of evaluating a predicate in an expression set depends on the group to which it belongs. The index for an expression set <a id="sthref242"></a>can be tuned by identifying the appropriate predicate groups as the index parameters.</p>
<p>The steps involved in evaluating the <a id="sthref243"></a>predicates in an indexed predicate group are:</p>
<ol>
<li>
<p>One-time computation of the left-hand side of the predicate group</p>
</li>
<li>
<p>One or more range scans on the bitmap indexes using the computed value</p>
</li>
</ol>
<p>The steps involved in evaluating the <a id="sthref244"></a>predicates in a stored predicate group are:</p>
<ol>
<li>
<p>One-time computation of the left-hand side of the predicate group</p>
</li>
<li>
<p>Comparison of the computed value with the operators and the right-hand side constants of all the predicates remaining in the working set (after filtering, based on indexed predicates)</p>
</li>
</ol>
<p>The steps involved in evaluating the <a id="sthref245"></a>predicates in a sparse predicate group are:</p>
<ol>
<li>
<p>Parse the subexpression representing the sparse predicates for all the expressions remaining in the working set.</p>
</li>
<li>
<p>Evaluate the subexpression through substitution of data values (using a dynamic query).</p>
</li>
</ol>
<p class="subhead2"><a id="CJAIEDCF"></a><a id="EXPRN545"></a>Creating an <a id="sthref246"></a>Index from Default Parameters</p>
<p>In a schema, an attribute set can be used for one or more expression sets, and you can configure the predicate groups for these expression sets by associating the default index parameters with the attribute set. The (discriminating) predicate groups can be chosen with the knowledge of commonly occurring left-hand sides and their selectivity for the expected data.</p>
<p>The following command uses the <code>DBMS_EXPFIL.<a id="sthref247"></a>DEFAULT_INDEX_PARAMETERS</code> procedure to configure default index parameters with the <code>Car4Sale</code> attribute set:</p>
<pre>
BEGIN
  DBMS_EXPFIL.DEFAULT_INDEX_PARAMETERS('Car4Sale',
    exf$attribute_list (
       exf$attribute (attr_name =&gt; 'Model',      --- LHS for predicate group
                      attr_oper =&gt; exf$indexoper('='),
                      attr_indexed =&gt; 'TRUE'),   --- indexed predicate group 
       exf$attribute (attr_name =&gt; 'Price',
                      attr_oper =&gt; exf$indexoper('all'),
                      attr_indexed =&gt; 'TRUE'),
       exf$attribute (attr_name =&gt; 'HorsePower(Model, Year)',
                      attr_oper =&gt; exf$indexoper('=','&lt;','&gt;','&gt;=','&lt;='),
                      attr_indexed =&gt; 'FALSE')    --- stored predicate group
    )
  );
END;
/
</pre>
<p>For an expression set, <a id="sthref248"></a><a id="sthref249"></a>create the Expression Filter index as follows:</p>
<pre>
CREATE INDEX InterestIndex ON Consumer (Interest) 
              INDEXTYPE IS EXFSYS.EXPFILTER; 
</pre>
<p>The index derives all its parameters from the defaults (<code>Model</code>, <code>Price</code>, and <code>HorsePower(Model, Year)</code>) associated with the corresponding attribute set. If the defaults are not specified, it implicitly uses all the scalar elementary attributes (<code>Model</code>, <code>Year,Price</code>, and <code>Mileage</code>) in the attribute set as its stored and indexed attributes.</p>
<p>You can fine-tune the default parameters derived from the attribute set for each expression set by using the <code>PARAMETERS</code> clause when you create the index or by associating index parameters directly with the expression set. The following <code>CREATE INDEX</code> statement with the <code>PARAMETERS</code> clause configures the index with an additional stored predicate:</p>
<pre>
CREATE INDEX InterestIndex ON Consumer (Interest) 
              INDEXTYPE IS exfsys.ExpFilter
  PARAMETERS ('ADD TO DEFAULTS STOREATTRS (CrashTestRating(Model, Year))');
</pre>
<p>For more information about creating indexes from default parameters, see <a class="olink ARPLS164" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS164"><code>DEFAULT_INDEX_PARAMETERS</code> Procedure</a> and <a href="exprn_sql.htm#CHDCFHDJ">"CREATE INDEX"</a> in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>.</p>
<p class="subhead2"><a id="CJAHHDFF"></a><a id="EXPRN546"></a>Creating an <a id="sthref250"></a>Index from Exact Parameters</p>
<p>If there is a need to fine-tune the index parameters for each expression set associated with the common attribute set, you can assign the exact index parameters directly to the expression set, using the <code>DBMS_EXPFIL.<a id="sthref251"></a>INDEX_PARAMETERS</code> procedure.</p>
<p>The following commands copy the index parameters from the defaults and then fine-tunes them for the given expression set. An expression filter index created for the expression set uses these parameters to configure its indexed and stored predicate groups.</p>
<pre>
BEGIN
  -- Derive index parameters from defaults --
  DBMS_EXPFIL.INDEX_PARAMETERS(expr_tab  =&gt; 'Consumer',
                               expr_col  =&gt; 'Interest',
                               attr_list =&gt; null, 
                               operation =&gt; 'DEFAULT');
 
  -- Fine-tune the parameters by adding another stored attribute --
  DBMS_EXPFIL.INDEX_PARAMETERS(expr_tab  =&gt; 'Consumer',
                               expr_col  =&gt; 'Interest',
                               attr_list =&gt;
                                exf$attribute_list (
                                 exf$attribute (
                                   attr_name =&gt; 'CrashTestRating(Model, Year)',
                                   attr_oper =&gt; exf$indexoper('all'),
                                   attr_indexed =&gt; 'FALSE')),
                               operation =&gt; 'ADD');
END;
/
 
 
CREATE INDEX InterestIndex ON Consumer (Interest) 
             INDEXTYPE IS EXFSYS.EXPFILTER;
</pre>
<p>For more information about creating indexes from exact parameters, see <a class="olink ARPLS170" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS170"><code>INDEX_PARAMETERS</code> Procedure</a> and <a href="exprn_sql.htm#CHDCFHDJ">"CREATE INDEX"</a> in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>.</p>
<p>See <a href="exprn_xpathpredicates.htm#BABCGCGD">Chapter 13</a> for a discussion on indexing expressions with XPath predicates.</p>
<p class="subhead2"><a id="CJAGAJCA"></a><a id="EXPRN547"></a>Creating an <a id="sthref252"></a>Index from Statistics</p>
<p>If a representative set of expressions is already stored in the table, the owner of the table can automate the index tuning process by collecting statistics on the expression set, using the <code>DBMS_EXPFIL.<a id="sthref253"></a>GET_EXPRSET_STATS</code> procedure, and creating the index from these statistics, as shown in the following example:</p>
<pre>
BEGIN
  DBMS_EXPFIL.GET_EXPRSET_STATS (expr_tab =&gt; 'Consumer',
                                 expr_col =&gt; 'Interest');
END;
/

CREATE INDEX InterestIndex ON Consumer (Interest) 
             INDEXTYPE IS EXFSYS.EXPFILTER
  PARAMETERS ('STOREATTRS TOP 4 INDEXATTRS TOP 2');
</pre>
<p>For the previous index, four stored attributes are chosen based on the frequency of the corresponding predicate left-hand sides in the expression set, and out of these four attributes, the top two are chosen as indexed attributes. When a <code>TOP</code> <code><span class="codeinlineitalic">n</span></code> clause is used, any defaults associated with the corresponding attribute set are ignored. The attributes chosen for an index can be viewed by querying the <code>USER_EXPFIL_PREDTAB_ATTRIBUTES</code> view.</p>
<p>For more information about creating indexes from statistics, see <a class="olink ARPLS168" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS168"><code>GET_EXPRSET_STATS</code> Procedure</a> and <a href="exprn_sql.htm#CHDCFHDJ">"CREATE INDEX"</a> in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CJADIGHB"></a><a id="EXPRN025"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">12.7</span> <a id="sthref254"></a>Index Usage</h2>
<p>A query using the SQL <code>EVALUATE</code> operator on an Expression column can force the use of the index defined on such a column with an optimizer hint. (See the <a class="olink PFGRF" href="../../server.112/e41573/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.) In other cases, the optimizer determines the cost of the Expression Filter index-based scan and compares it with the cost of alternate execution plans.</p>
<pre>
SELECT * FROM Consumer WHERE 
  EVALUATE (Consumer.Interest, 
            Car4Sale.getVarchar('Mustang',2000,18000,22000)) = 1 and
  Consumer.Zipcode BETWEEN 03060 and 03070;
</pre>
<p>For the previous query, if the <code>Consumer</code> table has an Expression Filter index defined on the <code>Interest</code> column and a native index defined on the <code>Zipcode</code> column, the optimizer chooses the appropriate index based on their selectivity and their access cost. Beginning with release 10gR2 (10.2), the selectivity and the cost of an Expression Filter index are computed when statistics are collected on the expression column, the index, or the table storing expressions. These statistics are stored in the Expression Filter dictionary and are used to determine the optimal execution plan for the query with an <code>EVALUATE</code> operator.</p>
<p>You can use the <code>EXPLAIN PLAN</code> statement to see if the optimizer picked the Expression Filter index for a query.</p>
</div>
<!-- class="sect1" -->
<a id="CIHGADEC"></a><a id="EXPRN026"></a>
<div class="sect1">
<h2 class="sect1"><span class="secnum">12.8</span> Index <a id="sthref255"></a>Storage and <a id="sthref256"></a>Maintenance</h2>
<p>The Expression Filter index uses persistent database objects to maintain the <a id="sthref257"></a>index on a column storing expressions. All these <a id="sthref258"></a>secondary objects are created in the schema in which the Expression Filter index is created. There are three types of secondary objects for each Expression Filter index, and they use the following naming conventions:</p>
<ul>
<li>
<p>Conventional table called the predicate table: <code>EXF$PTAB_</code><code><span class="codeinlineitalic">n</span></code></p>
</li>
<li>
<p>One or more indexes on the predicate table: <code>EXF$PTAB_</code><code><span class="codeinlineitalic">n</span></code><code>_IDX_</code><code><span class="codeinlineitalic">m</span></code></p>
</li>
<li>
<p>Package called the Access Function package: <code>EXF$AFUN_</code><code><span class="codeinlineitalic">n</span></code></p>
</li>
</ul>
<p>To ensure the expression evaluation is valid, a table with an Expression column and the Expression Filter index on the Expression column should belong to the same schema. A user with <code>CREATE INDEX</code> privileges on a table cannot create an Expression Filter index unless the user is the owner of the table. By default, the <a id="sthref259"></a>predicate table is created in the user's default tablespace. You can specify an alternate storage clause for the predicate table when you create the index by using the <code>PREDSTORAGE</code> parameter clause. (See the section about the <a href="exprn_sql.htm#CHDCFHDJ">CREATE INDEX</a> statement in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>.) The indexes on the predicate table are always created in the same tablespace as the predicate table.</p>
<p><a id="sthref260"></a><a id="sthref261"></a><a id="sthref262"></a>An Expression Filter index created for an Expression column is automatically maintained to reflect any changes made to the expressions (with the SQL <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statements or SQL*Loader). The bitmap indexes defined on the predicate table could become fragmented when a large number of expressions are modified, added to the set, or deleted. You can rebuild these indexes online to reduce the fragmentation using the <code>DBMS_EXPFIL.<a id="sthref263"></a>DEFRAG_INDEX</code> procedure, as shown in the following example:</p>
<pre>
BEGIN
  DBMS_EXPFIL.DEFRAG_INDEX (idx_name =&gt; 'InterestIndex');
END;
/
</pre>
<p>See <a class="olink ARPLS166" href="../../appdev.112/e40758/d_expfilref.htm#ARPLS166"><code>DEFRAG_INDEX</code> Procedure</a> for more information about this procedure.</p>
<p><a id="sthref264"></a>You can rebuild the complete Expression Filter index offline by using the <code>ALTER INDEX...REBUILD</code> statement. This is useful when the index is marked UNUSABLE following a table maintenance operation. When the default index parameters associated with an attribute set are modified, they can be incorporated into the existing indexes using the <code>ALTER INDEX...REBUILD</code> statement with the <code>DEFAULT</code> parameter clause. See the section about <a href="exprn_sql.htm#CHDBGGJB">ALTER INDEX REBUILD</a> statement in <a href="exprn_sql.htm#CHDDCAJI">Chapter 15</a>.</p>
</div>
<!-- class="sect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment988">
<tr>
<td class="cellalignment995">
<table class="cellalignment993">
<tr>
<td class="cellalignment992"><a href="exprn_expconcepts.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment992"><a href="exprn_xpathpredicates.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2003, 2011,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment997">
<table class="cellalignment991">
<tr>
<td class="cellalignment992"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment992"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment992"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment992"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment992"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment992"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
