<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Overview of Supplied LOB APIs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-18T13:32:41Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer's Guide" />
<meta name="dcterms.identifier" content="E18294-04" />
<meta name="dcterms.isVersionOf" content="ADLOB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adlob_design.htm" title="Previous" type="text/html" />
<link rel="Next" href="adlob_performance.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e18294.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/37</span> <!-- End Header -->
<div id="ADLOB45356" class="chapter"><a id="g1060414"></a><a id="i1024904"></a>
<h1 class="chapter"><span class="secnum">13</span> Overview of Supplied LOB APIs</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1025567">Programmatic Environments That Support LOBs</a></p>
</li>
<li>
<p><a href="#i1025165">Comparing the LOB Interfaces</a></p>
</li>
<li>
<p><a href="#i1006962">Using PL/SQL (DBMS_LOB Package) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1007277">Using OCI to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1007833">Using C++ (OCCI) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1008145">Using C/C++ (Pro*C) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1008412">Using COBOL (Pro*COBOL) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1008676">Using COM (Oracle Objects for OLE) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1009032">Using Java (JDBC) to Work With LOBs</a></p>
</li>
<li>
<p><a href="#i1010253">Oracle Provider for OLE DB (OraOLEDB)</a></p>
</li>
<li>
<p><a href="#i1032043">Overview of Oracle Data Provider for .NET (ODP.NET)</a></p>
</li>
</ul>
<a id="i1025567"></a>
<div id="ADLOB45357" class="sect1">
<h2 class="sect1"><a id="sthref465"></a>Programmatic Environments That Support LOBs</h2>
<p><a href="#g1039992">Table 13-1</a> lists the programmatic environments that support LOB functionality.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
APIs for supported LOB operations are described in detail in the following chapters:
<ul>
<li>
<p><a href="adlob_creating.htm#g1009782">Chapter 19, "Operations Specific to Persistent and Temporary LOBs"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#g1113588">Chapter 22, " Using LOB APIs"</a></p>
</li>
<li>
<p><a href="adlob_bfile_ops.htm#g1088337">Chapter 21, "LOB APIs for BFILE Operations"</a></p>
</li>
</ul>
</div>
<div id="ADLOB45358" class="tblformalwide">
<p class="titleintable"><a id="sthref466"></a><a id="g1039992"></a>Table 13-1 Programmatic Environments That Support LOBs</p>
<table class="cellalignment910" title=" Programmatic Environments That Support LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t3">Language</th>
<th class="cellalignment906" id="r1c2-t3">Precompiler or Interface Program</th>
<th class="cellalignment906" id="r1c3-t3">Syntax Reference</th>
<th class="cellalignment906" id="r1c4-t3">In This Chapter See...</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t3" headers="r1c1-t3">
<p><a id="sthref467"></a>PL/SQL</p>
</td>
<td class="cellalignment907" headers="r2c1-t3 r1c2-t3">
<p>DBMS_LOB Package</p>
</td>
<td class="cellalignment907" headers="r2c1-t3 r1c3-t3">
<p><a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
<td class="cellalignment907" headers="r2c1-t3 r1c4-t3">
<p><a href="#i1006962">"Using PL/SQL (DBMS_LOB Package) to Work With LOBs"</a>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t3" headers="r1c1-t3">
<p>C</p>
</td>
<td class="cellalignment907" headers="r3c1-t3 r1c2-t3">
<p>Oracle Call Interface for C (OCI)</p>
</td>
<td class="cellalignment907" headers="r3c1-t3 r1c3-t3">
<p><a class="olink LNOCI" href="../e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r3c1-t3 r1c4-t3">
<p><a href="#i1007277">"Using OCI to Work With LOBs"</a>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t3" headers="r1c1-t3">
<p>C++</p>
</td>
<td class="cellalignment907" headers="r4c1-t3 r1c2-t3">
<p>Oracle Call Interface for C++ (OCCI)</p>
</td>
<td class="cellalignment907" headers="r4c1-t3 r1c3-t3">
<p><a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r4c1-t3 r1c4-t3">
<p><a href="#i1007833">"Using C++ (OCCI) to Work With LOBs"</a> .</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t3" headers="r1c1-t3">
<p>C/C++</p>
</td>
<td class="cellalignment907" headers="r5c1-t3 r1c2-t3">
<p>Pro*C/C++ Precompiler</p>
</td>
<td class="cellalignment907" headers="r5c1-t3 r1c3-t3">
<p><a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r5c1-t3 r1c4-t3">
<p><a href="#i1008145">"Using C/C++ (Pro*C) to Work With LOBs"</a>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t3" headers="r1c1-t3">
<p>COBOL</p>
</td>
<td class="cellalignment907" headers="r6c1-t3 r1c2-t3">
<p>Pro*COBOL Precompiler</p>
</td>
<td class="cellalignment907" headers="r6c1-t3 r1c3-t3">
<p><a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r6c1-t3 r1c4-t3">
<p><a href="#i1008412">"Using COBOL (Pro*COBOL) to Work With LOBs"</a>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t3" headers="r1c1-t3">
<p>COM</p>
</td>
<td class="cellalignment907" headers="r7c1-t3 r1c2-t3">
<p>Oracle Objects For OLE (OO4O)</p>
</td>
<td class="cellalignment907" headers="r7c1-t3 r1c3-t3">
<p><a class="olink OOFOL" href="../../win.112/e17727/toc.htm"><span class="italic">Oracle Objects for OLE Developer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r7c1-t3 r1c4-t3">
<p><a href="#i1008676">"Using COM (Oracle Objects for OLE) to Work With LOBs"</a>."</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t3" headers="r1c1-t3">
<p>Java</p>
</td>
<td class="cellalignment907" headers="r8c1-t3 r1c2-t3">
<p>JDBC Application Programmatic Interface (API)</p>
</td>
<td class="cellalignment907" headers="r8c1-t3 r1c3-t3">
<p><a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide and Reference</span></a>.</p>
</td>
<td class="cellalignment907" headers="r8c1-t3 r1c4-t3">
<p><a href="#i1009032">"Using Java (JDBC) to Work With LOBs"</a>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t3" headers="r1c1-t3">
<p>ADO/OLE DB</p>
</td>
<td class="cellalignment907" headers="r9c1-t3 r1c2-t3">
<p>Oracle Provider for OLE DB (OraOLEDB).</p>
</td>
<td class="cellalignment907" headers="r9c1-t3 r1c3-t3">
<p><a class="olink OLEDB" href="../../win.112/e17726/toc.htm"><span class="italic">Oracle Provider for OLE DB Developer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r9c1-t3 r1c4-t3">
<p><a href="#i1010253">"Oracle Provider for OLE DB (OraOLEDB)"</a></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t3" headers="r1c1-t3">
<p>.NET</p>
</td>
<td class="cellalignment907" headers="r10c1-t3 r1c2-t3">
<p>Oracle Data Provider for .NET (ODP.NET)</p>
</td>
<td class="cellalignment907" headers="r10c1-t3 r1c3-t3">
<p><a class="olink ODPNT" href="../../win.112/e23174/toc.htm"><span class="italic">Oracle Data Provider for .NET Developer's Guide</span></a></p>
</td>
<td class="cellalignment907" headers="r10c1-t3 r1c4-t3">
<p><a href="#i1032043">"Overview of Oracle Data Provider for .NET (ODP.NET)"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect1" -->
<a id="i1025165"></a>
<div id="ADLOB45359" class="sect1">
<h2 class="sect1"><a id="sthref468"></a><a id="sthref469"></a>Comparing the LOB Interfaces</h2>
<p><a href="#g1038530">Table 13-2</a> and <a href="#g1038719">Table 13-3</a> compare the eight LOB programmatic interfaces by listing their functions and methods used to operate on LOBs. The tables are split in two simply to accommodate all eight interfaces. The functionality of the interfaces, with regards to LOBs, is described in the following sections.</p>
<div id="ADLOB45360" class="tblformalwide">
<p class="titleintable"><a id="sthref470"></a><a id="g1038530"></a>Table 13-2 Comparing the LOB Interfaces, 1 of 2</p>
<table class="cellalignment910" title=" Comparing the LOB Interfaces, 1 of 2 " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t4">PL/SQL: <a id="sthref471"></a>DBMS_LOB (dbmslob.sql)</th>
<th class="cellalignment906" id="r1c2-t4"><a id="sthref472"></a>C (OCI)(ociap.h)</th>
<th class="cellalignment906" id="r1c3-t4">C++ (<a id="sthref473"></a>OCCI) (occiData.h). Also for Clob and Bfile classes.</th>
<th class="cellalignment906" id="r1c4-t4"><a id="sthref474"></a><a id="sthref475"></a>Pro*C/C++ and <a id="sthref476"></a>Pro*COBOL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.COMPARE</p>
</td>
<td class="cellalignment907" headers="r2c1-t4 r1c2-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r2c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r2c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.INSTR</p>
</td>
<td class="cellalignment907" headers="r3c1-t4 r1c2-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r3c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r3c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.SUBSTR</p>
</td>
<td class="cellalignment907" headers="r4c1-t4 r1c2-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r4c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r4c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.APPEND</p>
</td>
<td class="cellalignment907" headers="r5c1-t4 r1c2-t4">
<p class="synopsis">OCILobAppend()</p>
</td>
<td class="cellalignment907" headers="r5c1-t4 r1c3-t4">
<p class="synopsis">Blob.append()</p>
</td>
<td class="cellalignment907" headers="r5c1-t4 r1c4-t4">
<p class="synopsis">APPEND</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t4" headers="r1c1-t4">
<p>N/A (use PL/SQL assign operator)</p>
</td>
<td class="cellalignment907" headers="r6c1-t4 r1c2-t4">
<p class="synopsis">OCILobAssign()</p>
</td>
<td class="cellalignment907" headers="r6c1-t4 r1c3-t4">
<p>&nbsp;</p>
</td>
<td class="cellalignment907" headers="r6c1-t4 r1c4-t4">
<p class="synopsis">ASSIGN</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r7c1-t4 r1c2-t4">
<p class="synopsis">OCILobCharSetForm()</p>
</td>
<td class="cellalignment907" headers="r7c1-t4 r1c3-t4">
<p class="synopsis">Clob.getCharsetForm (<code>CLOB</code> only)</p>
</td>
<td class="cellalignment907" headers="r7c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r8c1-t4 r1c2-t4">
<p class="synopsis">OCILobCharSetId()</p>
</td>
<td class="cellalignment907" headers="r8c1-t4 r1c3-t4">
<p class="synopsis">Clob.getCharsetId()</p>
<p>(<code>CLOB</code> only)</p>
</td>
<td class="cellalignment907" headers="r8c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.CLOSE</p>
</td>
<td class="cellalignment907" headers="r9c1-t4 r1c2-t4">
<p class="synopsis">OCILobClose()</p>
</td>
<td class="cellalignment907" headers="r9c1-t4 r1c3-t4">
<p class="synopsis">Blob.close()</p>
</td>
<td class="cellalignment907" headers="r9c1-t4 r1c4-t4">
<p class="synopsis">CLOSE</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r10c1-t4 r1c2-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r10c1-t4 r1c3-t4">
<p class="synopsis">Clob.closeStream()</p>
</td>
<td class="cellalignment907" headers="r10c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.COPY</p>
</td>
<td class="cellalignment907" headers="r11c1-t4 r1c2-t4">
<p class="synopsis">OCILobCopy2()</p>
</td>
<td class="cellalignment907" headers="r11c1-t4 r1c3-t4">
<p class="synopsis">Blob.copy()</p>
</td>
<td class="cellalignment907" headers="r11c1-t4 r1c4-t4">
<p class="synopsis">COPY</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r12c1-t4 r1c2-t4">
<p class="synopsis">OCILobDisableBuffering()</p>
</td>
<td class="cellalignment907" headers="r12c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r12c1-t4 r1c4-t4">
<p class="synopsis">DISABLE BUFFERING</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r13c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r13c1-t4 r1c2-t4">
<p class="synopsis">OCILobEnableBuffering()</p>
</td>
<td class="cellalignment907" headers="r13c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r13c1-t4 r1c4-t4">
<p class="synopsis">ENABLE BUFFERING</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r14c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.ERASE</p>
</td>
<td class="cellalignment907" headers="r14c1-t4 r1c2-t4">
<p class="synopsis">OCILobErase2()</p>
</td>
<td class="cellalignment907" headers="r14c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r14c1-t4 r1c4-t4">
<p class="synopsis">ERASE</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r15c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILECLOSE</p>
</td>
<td class="cellalignment907" headers="r15c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileClose()</p>
</td>
<td class="cellalignment907" headers="r15c1-t4 r1c3-t4">
<p class="synopsis">Clob.close()</p>
</td>
<td class="cellalignment907" headers="r15c1-t4 r1c4-t4">
<p class="synopsis">CLOSE</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r16c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILECLOSEALL</p>
</td>
<td class="cellalignment907" headers="r16c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileCloseAll()</p>
</td>
<td class="cellalignment907" headers="r16c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r16c1-t4 r1c4-t4">
<p class="synopsis">FILE CLOSE ALL</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r17c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILEEXISTS</p>
</td>
<td class="cellalignment907" headers="r17c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileExist()</p>
</td>
<td class="cellalignment907" headers="r17c1-t4 r1c3-t4">
<p class="synopsis">Bfile.fileExists()</p>
</td>
<td class="cellalignment907" headers="r17c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [FILEEXISTS]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r18c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.GETCHUNKSIZE</p>
</td>
<td class="cellalignment907" headers="r18c1-t4 r1c2-t4">
<p class="synopsis">OCILobGetChunkSize()</p>
</td>
<td class="cellalignment907" headers="r18c1-t4 r1c3-t4">
<p class="synopsis">Blob.getChunkSize()</p>
</td>
<td class="cellalignment907" headers="r18c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [CHUNKSIZE]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r19c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.GET_STORAGE_LIMIT</p>
</td>
<td class="cellalignment907" headers="r19c1-t4 r1c2-t4">
<p class="synopsis">OCILobGetStorageLimit()</p>
</td>
<td class="cellalignment907" headers="r19c1-t4 r1c3-t4">
<p class="synopsis">N/A</p>
</td>
<td class="cellalignment907" headers="r19c1-t4 r1c4-t4">
<p class="synopsis">N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r20c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.GETOPTIONS</p>
</td>
<td class="cellalignment907" headers="r20c1-t4 r1c2-t4">
<p class="synopsis">OCILobGetOptions()</p>
</td>
<td class="cellalignment907" headers="r20c1-t4 r1c3-t4">
<p class="synopsis">Blob/Clob::getOptions</p>
</td>
<td class="cellalignment907" headers="r20c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r21c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILEGETNAME</p>
</td>
<td class="cellalignment907" headers="r21c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileGetName()</p>
</td>
<td class="cellalignment907" headers="r21c1-t4 r1c3-t4">
<p class="synopsis">Bfile.getFileName() and Bfile.getDirAlias()</p>
</td>
<td class="cellalignment907" headers="r21c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [DIRECTORY, FILENAME]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r22c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILEISOPEN</p>
</td>
<td class="cellalignment907" headers="r22c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileIsOpen()</p>
</td>
<td class="cellalignment907" headers="r22c1-t4 r1c3-t4">
<p class="synopsis">Bfile.isOpen()</p>
</td>
<td class="cellalignment907" headers="r22c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [ISOPEN]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r23c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FILEOPEN</p>
</td>
<td class="cellalignment907" headers="r23c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileOpen()</p>
</td>
<td class="cellalignment907" headers="r23c1-t4 r1c3-t4">
<p class="synopsis">Bfile.open()</p>
</td>
<td class="cellalignment907" headers="r23c1-t4 r1c4-t4">
<p class="synopsis">OPEN</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r24c1-t4" headers="r1c1-t4">
<p>N/A (use BFILENAME operator)</p>
</td>
<td class="cellalignment907" headers="r24c1-t4 r1c2-t4">
<p class="synopsis">OCILobFileSetName()</p>
</td>
<td class="cellalignment907" headers="r24c1-t4 r1c3-t4">
<p class="synopsis">Bfile.setName()</p>
</td>
<td class="cellalignment907" headers="r24c1-t4 r1c4-t4">
<p class="synopsis">FILE SET</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r25c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r25c1-t4 r1c2-t4">
<p class="synopsis">OCILobFlushBuffer()</p>
</td>
<td class="cellalignment907" headers="r25c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r25c1-t4 r1c4-t4">
<p class="synopsis">FLUSH BUFFER</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r26c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.GETLENGTH</p>
</td>
<td class="cellalignment907" headers="r26c1-t4 r1c2-t4">
<p class="synopsis">OCILobGetLength2()</p>
</td>
<td class="cellalignment907" headers="r26c1-t4 r1c3-t4">
<p class="synopsis">Blob.length()</p>
</td>
<td class="cellalignment907" headers="r26c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [LENGTH]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r27c1-t4" headers="r1c1-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r27c1-t4 r1c2-t4">
<p class="synopsis">OCILobIsEqual()</p>
</td>
<td class="cellalignment907" headers="r27c1-t4 r1c3-t4">
<p>Use operator = ( )=/!=</p>
</td>
<td class="cellalignment907" headers="r27c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r28c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.ISOPEN</p>
</td>
<td class="cellalignment907" headers="r28c1-t4 r1c2-t4">
<p class="synopsis">OCILobIsOpen()</p>
</td>
<td class="cellalignment907" headers="r28c1-t4 r1c3-t4">
<p class="synopsis">Blob.isOpen()</p>
</td>
<td class="cellalignment907" headers="r28c1-t4 r1c4-t4">
<p class="synopsis">DESCRIBE [ISOPEN]</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r29c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.LOADFROMFILE</p>
</td>
<td class="cellalignment907" headers="r29c1-t4 r1c2-t4">
<p class="synopsis">OCILobLoadFromFile2()</p>
</td>
<td class="cellalignment907" headers="r29c1-t4 r1c3-t4">
<p class="synopsis">Use the overloadedcopy() method.</p>
</td>
<td class="cellalignment907" headers="r29c1-t4 r1c4-t4">
<p class="synopsis">LOAD FROM FILE</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r30c1-t4" headers="r1c1-t4">
<p class="synopsis">N/A</p>
</td>
<td class="cellalignment907" headers="r30c1-t4 r1c2-t4">
<p class="synopsis">OCILobLocatorIsInit()</p>
</td>
<td class="cellalignment907" headers="r30c1-t4 r1c3-t4">
<p class="synopsis">Clob.isinitialized()</p>
</td>
<td class="cellalignment907" headers="r30c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r31c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.OPEN</p>
</td>
<td class="cellalignment907" headers="r31c1-t4 r1c2-t4">
<p class="synopsis">OCILobOpen()</p>
</td>
<td class="cellalignment907" headers="r31c1-t4 r1c3-t4">
<p class="synopsis">Blob.open</p>
</td>
<td class="cellalignment907" headers="r31c1-t4 r1c4-t4">
<p class="synopsis">OPEN</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r32c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.READ</p>
</td>
<td class="cellalignment907" headers="r32c1-t4 r1c2-t4">
<p class="synopsis">OCILobRead()</p>
</td>
<td class="cellalignment907" headers="r32c1-t4 r1c3-t4">
<p class="synopsis">Blob.read</p>
</td>
<td class="cellalignment907" headers="r32c1-t4 r1c4-t4">
<p class="synopsis">READ</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r33c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.SETOPTIONS</p>
</td>
<td class="cellalignment907" headers="r33c1-t4 r1c2-t4">
<p class="synopsis">OCILobSetOptions()</p>
</td>
<td class="cellalignment907" headers="r33c1-t4 r1c3-t4">
<p class="synopsis">Blob/Clob::setOptions</p>
</td>
<td class="cellalignment907" headers="r33c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r34c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.TRIM</p>
</td>
<td class="cellalignment907" headers="r34c1-t4 r1c2-t4">
<p class="synopsis">OCILobTrim2()</p>
</td>
<td class="cellalignment907" headers="r34c1-t4 r1c3-t4">
<p class="synopsis">Blob.trim</p>
</td>
<td class="cellalignment907" headers="r34c1-t4 r1c4-t4">
<p class="synopsis">TRIM</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r35c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.WRITE</p>
</td>
<td class="cellalignment907" headers="r35c1-t4 r1c2-t4">
<p class="synopsis">OCILobWrite2</p>
</td>
<td class="cellalignment907" headers="r35c1-t4 r1c3-t4">
<p class="synopsis">Blob.write</p>
</td>
<td class="cellalignment907" headers="r35c1-t4 r1c4-t4">
<p class="synopsis">WRITEORALOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r36c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.WRITEAPPEND</p>
</td>
<td class="cellalignment907" headers="r36c1-t4 r1c2-t4">
<p class="synopsis">OCILobWriteAppend2()</p>
</td>
<td class="cellalignment907" headers="r36c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r36c1-t4 r1c4-t4">
<p class="synopsis">WRITE APPEND</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r37c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.CREATETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r37c1-t4 r1c2-t4">
<p class="synopsis">OCILobCreateTemporary()</p>
</td>
<td class="cellalignment907" headers="r37c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r37c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r38c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.FREETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r38c1-t4 r1c2-t4">
<p class="synopsis">OCILobFreeTemporary()</p>
</td>
<td class="cellalignment907" headers="r38c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r38c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r39c1-t4" headers="r1c1-t4">
<p class="synopsis">DBMS_LOB.ISTEMPORARY</p>
</td>
<td class="cellalignment907" headers="r39c1-t4 r1c2-t4">
<p class="synopsis">OCILobIsTemporary()</p>
</td>
<td class="cellalignment907" headers="r39c1-t4 r1c3-t4">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r39c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r40c1-t4" headers="r1c1-t4">
<p class="synopsis">N/A</p>
</td>
<td class="cellalignment907" headers="r40c1-t4 r1c2-t4">
<p class="synopsis">OCILobLocatorAssign()</p>
</td>
<td class="cellalignment907" headers="r40c1-t4 r1c3-t4">
<p>use operator = ( ) or copy constructor</p>
</td>
<td class="cellalignment907" headers="r40c1-t4 r1c4-t4">
<p>N/A</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45361" class="tblformalwide">
<p class="titleintable"><a id="sthref477"></a><a id="g1038719"></a>Table 13-3 Comparing the LOB Interfaces, 2 of 2</p>
<table class="cellalignment910" title=" Comparing the LOB Interfaces, 2 of 2 " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t5">PL/SQL: <a id="sthref478"></a>DBMS_LOB (dbmslob.sql)</th>
<th class="cellalignment906" id="r1c2-t5"><a id="sthref479"></a>COM (OO4O)</th>
<th class="cellalignment906" id="r1c3-t5"><a id="sthref480"></a>Java (JDBC)</th>
<th class="cellalignment906" id="r1c4-t5"><a id="sthref481"></a><a id="sthref482"></a>ODP.NET</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.COMPARE</p>
</td>
<td class="cellalignment907" headers="r2c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Compare</p>
</td>
<td class="cellalignment907" headers="r2c1-t5 r1c3-t5">
<p class="synopsis">Use DBMS_LOB.</p>
</td>
<td class="cellalignment907" headers="r2c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Compare</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.INSTR</p>
</td>
<td class="cellalignment907" headers="r3c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Matchpos</p>
</td>
<td class="cellalignment907" headers="r3c1-t5 r1c3-t5">
<p class="synopsis">position</p>
</td>
<td class="cellalignment907" headers="r3c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Search</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.SUBSTR</p>
</td>
<td class="cellalignment907" headers="r4c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r4c1-t5 r1c3-t5">
<p class="synopsis">getBytes for BLOBs or BFILEs</p>
<p class="synopsis">getSubString for <code>CLOB</code>s</p>
</td>
<td class="cellalignment907" headers="r4c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.APPEND</p>
</td>
<td class="cellalignment907" headers="r5c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Append</p>
</td>
<td class="cellalignment907" headers="r5c1-t5 r1c3-t5">
<p>Use length and then putBytes() or PutString()</p>
</td>
<td class="cellalignment907" headers="r5c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Append</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobAssign()</p>
</td>
<td class="cellalignment907" headers="r6c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Clone</p>
</td>
<td class="cellalignment907" headers="r6c1-t5 r1c3-t5">
<p>N/A [use equal sign]</p>
</td>
<td class="cellalignment907" headers="r6c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Clone</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobCharSetForm()</p>
</td>
<td class="cellalignment907" headers="r7c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r7c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r7c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobCharSetId()</p>
</td>
<td class="cellalignment907" headers="r8c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r8c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r8c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.CLOSE</p>
</td>
<td class="cellalignment907" headers="r9c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r9c1-t5 r1c3-t5">
<p class="synopsis">use DBMS_LOB.</p>
</td>
<td class="cellalignment907" headers="r9c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Close</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.COPY</p>
</td>
<td class="cellalignment907" headers="r10c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Copy</p>
</td>
<td class="cellalignment907" headers="r10c1-t5 r1c3-t5">
<p>Use read and write</p>
</td>
<td class="cellalignment907" headers="r10c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.CopyTo</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobDisableBuffering()</p>
</td>
<td class="cellalignment907" headers="r11c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.DisableBuffering</p>
</td>
<td class="cellalignment907" headers="r11c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r11c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobEnableBuffering()</p>
</td>
<td class="cellalignment907" headers="r12c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.EnableBuffering</p>
</td>
<td class="cellalignment907" headers="r12c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r12c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r13c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.ERASE</p>
</td>
<td class="cellalignment907" headers="r13c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Erase</p>
</td>
<td class="cellalignment907" headers="r13c1-t5 r1c3-t5">
<p>Use DBMS_LOB.</p>
</td>
<td class="cellalignment907" headers="r13c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Erase</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r14c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILECLOSE</p>
</td>
<td class="cellalignment907" headers="r14c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.Close</p>
</td>
<td class="cellalignment907" headers="r14c1-t5 r1c3-t5">
<p class="synopsis">closeFile</p>
</td>
<td class="cellalignment907" headers="r14c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.CloseFile</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r15c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILECLOSEALL</p>
</td>
<td class="cellalignment907" headers="r15c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.CloseAll</p>
</td>
<td class="cellalignment907" headers="r15c1-t5 r1c3-t5">
<p>Use DBMS_LOB.</p>
</td>
<td class="cellalignment907" headers="r15c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r16c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILEEXISTS</p>
</td>
<td class="cellalignment907" headers="r16c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.Exist</p>
</td>
<td class="cellalignment907" headers="r16c1-t5 r1c3-t5">
<p class="synopsis">fileExists</p>
</td>
<td class="cellalignment907" headers="r16c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.FileExists</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r17c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.GETCHUNKSIZE</p>
</td>
<td class="cellalignment907" headers="r17c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r17c1-t5 r1c3-t5">
<p class="synopsis">getChunkSize</p>
</td>
<td class="cellalignment907" headers="r17c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.OptimumChunkSize</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r18c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILEGETNAME</p>
</td>
<td class="cellalignment907" headers="r18c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.DirectoryName</p>
<p class="synopsis">ORABFILE.FileName</p>
</td>
<td class="cellalignment907" headers="r18c1-t5 r1c3-t5">
<p class="synopsis">getDirAlias</p>
<p class="synopsis">getName</p>
</td>
<td class="cellalignment907" headers="r18c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.DirectoryName</p>
<p class="synopsis">Oracle.BFile.FileName</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r19c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILEISOPEN</p>
</td>
<td class="cellalignment907" headers="r19c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.IsOpen</p>
</td>
<td class="cellalignment907" headers="r19c1-t5 r1c3-t5">
<p>Use DBMS_LOB.ISOPEN</p>
</td>
<td class="cellalignment907" headers="r19c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.IsOpen</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r20c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FILEOPEN</p>
</td>
<td class="cellalignment907" headers="r20c1-t5 r1c2-t5">
<p class="synopsis">ORABFILE.Open</p>
</td>
<td class="cellalignment907" headers="r20c1-t5 r1c3-t5">
<p class="synopsis">openFile</p>
</td>
<td class="cellalignment907" headers="r20c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.OpenFile</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r21c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobFileSetName()</p>
</td>
<td class="cellalignment907" headers="r21c1-t5 r1c2-t5">
<p class="synopsis">DirectoryName</p>
<p class="synopsis">FileName</p>
</td>
<td class="cellalignment907" headers="r21c1-t5 r1c3-t5">
<p>Use BFILENAME</p>
</td>
<td class="cellalignment907" headers="r21c1-t5 r1c4-t5">
<p class="synopsis">OracleBFile.DirectoryName</p>
<p class="synopsis">Oracle.BFile.FileName</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r22c1-t5" headers="r1c1-t5">
<p class="synopsis">OCILobFlushBuffer()</p>
</td>
<td class="cellalignment907" headers="r22c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.FlushBuffer</p>
</td>
<td class="cellalignment907" headers="r22c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r22c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r23c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.GETLENGTH</p>
</td>
<td class="cellalignment907" headers="r23c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Size</p>
</td>
<td class="cellalignment907" headers="r23c1-t5 r1c3-t5">
<p class="synopsis">length</p>
</td>
<td class="cellalignment907" headers="r23c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Length</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r24c1-t5" headers="r1c1-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r24c1-t5 r1c2-t5">
<p class="synopsis">N/A</p>
</td>
<td class="cellalignment907" headers="r24c1-t5 r1c3-t5">
<p class="synopsis"><code>equals()</code></p>
</td>
<td class="cellalignment907" headers="r24c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r25c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.ISOPEN</p>
</td>
<td class="cellalignment907" headers="r25c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.IsOpen</p>
</td>
<td class="cellalignment907" headers="r25c1-t5 r1c3-t5">
<p>use <code>DBMS_LOB. ISOPEN()</code></p>
</td>
<td class="cellalignment907" headers="r25c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.IsInChunkWriteMode</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r26c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.LOADFROMFILE</p>
</td>
<td class="cellalignment907" headers="r26c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.</p>
<p class="synopsis">CopyFromBfile</p>
</td>
<td class="cellalignment907" headers="r26c1-t5 r1c3-t5">
<p>Use read and then write</p>
</td>
<td class="cellalignment907" headers="r26c1-t5 r1c4-t5">
<p>N/A</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r27c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.OPEN</p>
</td>
<td class="cellalignment907" headers="r27c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.open</p>
</td>
<td class="cellalignment907" headers="r27c1-t5 r1c3-t5">
<p>Use <code>DBMS_LOB.OPEN()</code></p>
</td>
<td class="cellalignment907" headers="r27c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.BeginChunkWrite</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r28c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.READ</p>
</td>
<td class="cellalignment907" headers="r28c1-t5 r1c2-t5">
<p class="synopsis">ORALOB.Read</p>
</td>
<td class="cellalignment907" headers="r28c1-t5 r1c3-t5">
<p><code>BLOB</code> or <code>BFILE</code>: <code>getBytes()</code> and <code>getBinaryStream()</code></p>
<p><code>CLOB</code>: <code>getString()</code> and <code>getSubString()</code> and <code>getCharacterStream()</code></p>
</td>
<td class="cellalignment907" headers="r28c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Read</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r29c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.TRIM</p>
</td>
<td class="cellalignment907" headers="r29c1-t5 r1c2-t5">
<p>ORALOB.Trim</p>
</td>
<td class="cellalignment907" headers="r29c1-t5 r1c3-t5">
<p>Use <code>DBMS_LOB.TRIM()</code></p>
</td>
<td class="cellalignment907" headers="r29c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.SetLength</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r30c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.WRITE</p>
</td>
<td class="cellalignment907" headers="r30c1-t5 r1c2-t5">
<p>ORALOB.Write</p>
</td>
<td class="cellalignment907" headers="r30c1-t5 r1c3-t5">
<p><code>BLOB</code>: <code>setBytes()</code> and <code>setBinaryStream()</code></p>
<p><code>CLOB</code>: <code>setString()</code> and <code>setCharacterStream()</code></p>
</td>
<td class="cellalignment907" headers="r30c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Write</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r31c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.WRITEAPPEND</p>
</td>
<td class="cellalignment907" headers="r31c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r31c1-t5 r1c3-t5">
<p>Use length() and then putString() or putBytes()</p>
</td>
<td class="cellalignment907" headers="r31c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Append</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r32c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.CREATETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r32c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r32c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r32c1-t5 r1c4-t5">
<p class="synopsis">OracleClob constructors</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r33c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.FREETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r33c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r33c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r33c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.Dispose</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r34c1-t5" headers="r1c1-t5">
<p class="synopsis">DBMS_LOB.ISTEMPORARY</p>
</td>
<td class="cellalignment907" headers="r34c1-t5 r1c2-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r34c1-t5 r1c3-t5">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r34c1-t5 r1c4-t5">
<p class="synopsis">OracleClob.IsTemporary</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect1" -->
<a id="i1006962"></a>
<div id="ADLOB45362" class="sect1">
<h2 class="sect1"><a id="sthref483"></a>Using PL/SQL (DBMS_LOB Package) to Work With LOBs</h2>
<p>The PL/SQL <code>DBMS_LOB</code> package can be used for the following operations:</p>
<ul>
<li>
<p><span class="bold">Internal persistent LOBs and Temporary LOBs</span>: Read and modify operations, either entirely or in a piece-wise manner.</p>
</li>
<li>
<p><span class="bold">BFILEs</span>: Read operations</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for detailed documentation, including parameters, parameter types, return values, and example code.</div>
</li>
</ul>
<div id="ADLOB45363" class="sect2"><a id="sthref484"></a>
<h3 class="sect2">Provide a LOB Locator Before Running the <a id="sthref485"></a>DBMS_LOB Routine</h3>
<p>As described in more detail in the following, <code>DBMS_LOB</code> routines work based on <span class="italic">LOB</span> <span class="italic">locators</span>. For the successful completion of <code>DBMS_LOB</code> routines, you must provide an input locator representing a LOB that exists in the database tablespaces or external file system, <span class="italic">before</span> you call the routine.</p>
<ul>
<li>
<p><span class="bold">Persistent LOBs:</span> First use SQL to define tables that contain LOB columns, and subsequently you can use SQL to initialize or populate the locators in these LOB columns.</p>
</li>
<li>
<p><span class="bold">External</span> <span class="bold">LOB</span><span class="bold">s:</span> Define a <code>DIRECTORY</code> object that maps to a valid physical directory containing the external LOBs that you intend to access. These files must exist, and have READ permission for Oracle Server to process. If your operating system uses case-sensitive path names, then specify the directory in the correct case. See <a href="adlob_bfile_ops.htm#i1006270">"Directory Objects"</a> for more information.</p>
</li>
</ul>
<p>Once the LOBs are defined and created, you may then <code>SELECT</code> a LOB locator into a local PL/SQL LOB variable and use this variable as an input parameter to <code>DBMS_LOB</code> for access to the LOB value.</p>
<p>Examples provided with each <code>DBMS_LOB</code> routine illustrate this in the following sections.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45364" class="sect2"><a id="sthref486"></a>
<h3 class="sect2">Guidelines for Offset and Amount Parameters in DBMS_LOB Operations</h3>
<p><a id="sthref487"></a><a id="sthref488"></a>The following guidelines apply to offset and amount parameters used in procedures in the <code>DBMS_LOB</code> PL/SQL package: <a id="sthref489"></a><a id="sthref490"></a><a id="sthref491"></a><a id="sthref492"></a></p>
<ul>
<li>
<p>For character data&mdash;in all formats, fixed-width and varying-width&mdash;the <code>amount</code> and <code>offset</code> parameters are in characters. This applies to operations on <code>CLOB</code> and <code>NCLOB</code> data types.</p>
</li>
<li>
<p>For binary data, the <code>offset</code> and <code>amount</code> parameters are in bytes. This applies to operations on <code>BLOB</code> data types.</p>
</li>
<li>
<p>When using the following procedures:</p>
<ul>
<li>
<p><code><a id="sthref493"></a>DBMS_LOB.LOADFROMFILE</code></p>
</li>
<li>
<p><code><a id="sthref494"></a>DBMS_LOB.LOADBLOBFROMFILE</code></p>
</li>
<li>
<p><a id="sthref495"></a><code>DBMS_LOB.LOADCLOBFROMFILE</code></p>
</li>
</ul>
<p>you cannot specify an amount parameter with a value larger than the size of the <code>BFILE</code> you are loading from. To load the entire <code>BFILE</code> with these procedures, you must specify either the exact size of the <code>BFILE</code>, or the maximum allowable storage limit.</p>
<div class="infobox-note">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adlob_lob_ops.htm#i1010377">"Loading a LOB with Data from a BFILE"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#i1010559">"Loading a BLOB with Data from a BFILE"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#i1010659">"Loading a CLOB or NCLOB with Data from a BFILE"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>When using <code>DBMS_LOB.READ</code>, the <code>amount</code> parameter can be larger than the size of the data. The amount should be less than or equal to the size of the buffer. The buffer size is limited to 32K.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adlob_lob_ops.htm#i1024873">"Reading Data from a LOB"</a></div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45365" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref496"></a>
<h3 class="sect2"><a id="sthref497"></a>Determining Character Set ID</h3>
<p>To determine the character set ID, you must know the character set name (a user can select from the <a id="sthref498"></a><code>V$NLS_VALID_VALUES</code> view, which lists the names of the character sets that are valid as database and national character sets). Then call the function <code><a id="sthref499"></a>NLS_CHARSET_ID</code> with the desired character set name as the one string argument. The character set ID is returned as an integer. <code>UTF16</code> does not work because it has no character set name. Use character set ID = 1000 for <code>UTF16</code>. Although <code>UTF16</code> is not allowed as a database or national character set, the APIs in <code>DBMS_LOB</code> support it for database conversion purposes. <code>DBMS_LOB.LOADCLOBFROMFILE</code> and other procedures in <code>DBMS_LOB</code> take character set ID, not character set name, as an input.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for details and supported Unicode encodings in the chapter on <code>DBMS_LOB.LOADCLOBFROMFILE</code>.</p>
</li>
<li>
<p><a class="olink NLSPG012" href="../../server.112/e10729/ch12scanner.htm#NLSPG012"><span class="italic">Oracle Database Globalization Support Guide,</span></a> Appendix A, for supported languages.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45366" class="sect2"><a id="sthref500"></a>
<h3 class="sect2">PL/SQL Functions and Procedures for LOBs</h3>
<p>PL/SQL functions and procedures that operate on <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s are summarized in the following:</p>
<ul>
<li>
<p>To modify persistent LOB values, see <a href="#BABBDIEJ">Table 13-4</a></p>
</li>
<li>
<p>To read or examine LOB values, see <a href="#g1038935">Table 13-5</a></p>
</li>
<li>
<p>To create, free, or check on temporary LOBs, see <a href="#g1038960">Table 13-6</a></p>
</li>
<li>
<p>For read-only functions on external LOBs (<code>BFILE</code>s), see <a href="#g1038976">Table 13-7</a></p>
</li>
<li>
<p>To open or close a LOB, or check if LOB is open, see <a href="#g1039001">Table 13-8</a></p>
</li>
<li>
<p>To perform archive management on SecureFiles, see <a href="adlob_smart.htm#BABGEJDE">"PL/SQL Packages for SecureFiles LOBs and DBFS"</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45367" class="sect2"><a id="sthref501"></a>
<h3 class="sect2">PL/SQL <a id="sthref502"></a><a id="sthref503"></a><a id="sthref504"></a><a id="sthref505"></a>Functions and Procedures to Modify LOB Values</h3>
<p>Here is a table of <code>DBMS_LOB</code> procedures:</p>
<div id="ADLOB45368" class="tblformalwide">
<p class="titleintable"><a id="sthref506"></a><a id="BABBDIEJ"></a>Table 13-4 PL/SQL: DBMS_LOB Procedures to Modify LOB Values</p>
<table class="cellalignment910" title="PL/SQL: DBMS_LOB Procedures to Modify LOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t10">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t10" headers="r1c1-t10">
<p class="synopsis">APPEND</p>
</td>
<td class="cellalignment907" headers="r2c1-t10 r1c2-t10">
<p>Appends the LOB value to another LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t10" headers="r1c1-t10">
<p class="synopsis">CONVERTTOBLOB</p>
</td>
<td class="cellalignment907" headers="r3c1-t10 r1c2-t10">
<p>Converts a <code>CLOB</code> to a <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t10" headers="r1c1-t10">
<p class="synopsis">CONVERTTOCLOB</p>
</td>
<td class="cellalignment907" headers="r4c1-t10 r1c2-t10">
<p>Converts a <code>BLOB</code> to a <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t10" headers="r1c1-t10">
<p class="synopsis">COPY</p>
</td>
<td class="cellalignment907" headers="r5c1-t10 r1c2-t10">
<p>Copies all or part of a LOB to another LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t10" headers="r1c1-t10">
<p class="synopsis">ERASE</p>
</td>
<td class="cellalignment907" headers="r6c1-t10 r1c2-t10">
<p>Erases part of a LOB, starting at a specified offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t10" headers="r1c1-t10">
<p class="synopsis">FRAGMENT_DELETE</p>
</td>
<td class="cellalignment907" headers="r7c1-t10 r1c2-t10">
<p>Delete the data from the LOB at the given offset for the given length</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t10" headers="r1c1-t10">
<p class="synopsis">FRAGMENT_INSERT</p>
</td>
<td class="cellalignment907" headers="r8c1-t10 r1c2-t10">
<p>Insert the given data (&lt; 32KBytes) into the LOB at the given offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t10" headers="r1c1-t10">
<p class="synopsis">FRAGMENT_MOVE</p>
</td>
<td class="cellalignment907" headers="r9c1-t10 r1c2-t10">
<p>Move the given amount of bytes from the given offset to the new given offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t10" headers="r1c1-t10">
<p class="synopsis">FRAGMENT_REPLACE</p>
</td>
<td class="cellalignment907" headers="r10c1-t10 r1c2-t10">
<p>Replace the data at the given offset with the given data (&lt; 32kBytes)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t10" headers="r1c1-t10">
<p class="synopsis">LOADFROMFILE</p>
</td>
<td class="cellalignment907" headers="r11c1-t10 r1c2-t10">
<p>Load <code>BFILE</code> data into a persistent LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t10" headers="r1c1-t10">
<p class="synopsis">LOADCLOBFROMFILE</p>
</td>
<td class="cellalignment907" headers="r12c1-t10 r1c2-t10">
<p>Load character data from a file into a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r13c1-t10" headers="r1c1-t10">
<p class="synopsis">LOADBLOBFROMFILE</p>
</td>
<td class="cellalignment907" headers="r13c1-t10 r1c2-t10">
<p>Load binary data from a file into a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r14c1-t10" headers="r1c1-t10">
<p class="synopsis">SETOPTIONS</p>
</td>
<td class="cellalignment907" headers="r14c1-t10 r1c2-t10">
<p>Sets LOB features (deduplication and compression)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r15c1-t10" headers="r1c1-t10">
<p class="synopsis">TRIM</p>
</td>
<td class="cellalignment907" headers="r15c1-t10 r1c2-t10">
<p>Trims the LOB value to the specified shorter length</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r16c1-t10" headers="r1c1-t10">
<p class="synopsis">WRITE</p>
</td>
<td class="cellalignment907" headers="r16c1-t10 r1c2-t10">
<p>Writes data to the LOB at a specified offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r17c1-t10" headers="r1c1-t10">
<p class="synopsis">WRITEAPPEND</p>
</td>
<td class="cellalignment907" headers="r17c1-t10 r1c2-t10">
<p>Writes data to the end of the LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45369" class="sect2"><a id="sthref507"></a>
<h3 class="sect2">PL/SQL <a id="sthref508"></a><a id="sthref509"></a>Functions and Procedures for Introspection of LOBs</h3>
<div id="ADLOB45370" class="tblformalwide">
<p class="titleintable"><a id="sthref510"></a><a id="g1038935"></a>Table 13-5 PL/SQL: DBMS_LOB Procedures to Read or Examine Internal and External LOB values</p>
<table class="cellalignment910" title=" PL/SQL: DBMS_LOB Procedures to Read or Examine Internal and External LOB values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t11">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t11" headers="r1c1-t11">
<p class="synopsis">COMPARE</p>
</td>
<td class="cellalignment907" headers="r2c1-t11 r1c2-t11">
<p>Compares the value of two LOBs</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t11" headers="r1c1-t11">
<p class="synopsis">GETCHUNKSIZE</p>
</td>
<td class="cellalignment907" headers="r3c1-t11 r1c2-t11">
<p>Gets the chunk size used when reading and writing. This only works on persistent LOBs and does not apply to external LOBs (<code>BFILE</code>s).</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t11" headers="r1c1-t11">
<p class="synopsis">GETLENGTH</p>
</td>
<td class="cellalignment907" headers="r4c1-t11 r1c2-t11">
<p>Gets the length of the LOB value.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t11" headers="r1c1-t11">
<p class="synopsis">GETOPTIONS</p>
</td>
<td class="cellalignment907" headers="r5c1-t11 r1c2-t11">
<p>Returns options (deduplication, compression, encryption) for SecureFiles.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t11" headers="r1c1-t11">
<p class="synopsis">GET_STORAGE_LIMIT</p>
</td>
<td class="cellalignment907" headers="r6c1-t11 r1c2-t11">
<p>Gets the LOB storage limit for the database configuration.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t11" headers="r1c1-t11">
<p class="synopsis">INSTR</p>
</td>
<td class="cellalignment907" headers="r7c1-t11 r1c2-t11">
<p>Returns the matching position of the nth occurrence of the pattern in the LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t11" headers="r1c1-t11">
<p class="synopsis">ISSECUREFILE</p>
</td>
<td class="cellalignment907" headers="r8c1-t11 r1c2-t11">
<p>Returns <code>TRUE</code> if the <code>BLOB</code> or <code>CLOB</code> locator passed to it is for a SecureFiles or <code>FALSE</code> if it is not.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t11" headers="r1c1-t11">
<p class="synopsis">READ</p>
</td>
<td class="cellalignment907" headers="r9c1-t11 r1c2-t11">
<p>Reads data from the LOB starting at the specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t11" headers="r1c1-t11">
<p class="synopsis">SETOPTIONS</p>
</td>
<td class="cellalignment907" headers="r10c1-t11 r1c2-t11">
<p>Sets options (deduplication and compression) for a SecureFiles, overriding the default LOB column settings. Incurs a server round trip.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t11" headers="r1c1-t11">
<p class="synopsis">SUBSTR</p>
</td>
<td class="cellalignment907" headers="r11c1-t11 r1c2-t11">
<p>Returns part of the LOB value starting at the specified offset.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45371" class="sect2"><a id="sthref511"></a>
<h3 class="sect2"><a id="sthref512"></a><a id="sthref513"></a>PL/SQL Operations on Temporary LOBs</h3>
<div id="ADLOB45372" class="tblformalwide">
<p class="titleintable"><a id="sthref514"></a><a id="g1038960"></a>Table 13-6 PL/SQL: DBMS_LOB Procedures to Operate on Temporary LOBs</p>
<table class="cellalignment910" title=" PL/SQL: DBMS_LOB Procedures to Operate on Temporary LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t12">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t12" headers="r1c1-t12">
<p class="synopsis">CREATETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r2c1-t12 r1c2-t12">
<p>Creates a temporary LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t12" headers="r1c1-t12">
<p class="synopsis">ISTEMPORARY</p>
</td>
<td class="cellalignment907" headers="r3c1-t12 r1c2-t12">
<p>Checks if a LOB locator refers to a temporary LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t12" headers="r1c1-t12">
<p class="synopsis">FREETEMPORARY</p>
</td>
<td class="cellalignment907" headers="r4c1-t12 r1c2-t12">
<p>Frees a temporary LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45373" class="sect2"><a id="sthref515"></a>
<h3 class="sect2"><a id="sthref516"></a><a id="sthref517"></a>PL/SQL Read-Only Functions and Procedures for BFILEs</h3>
<div id="ADLOB45374" class="tblformalwide">
<p class="titleintable"><a id="sthref518"></a><a id="g1038976"></a>Table 13-7 PL/SQL: DBMS_LOB Read-Only Procedures for BFILEs</p>
<table class="cellalignment910" title=" PL/SQL: DBMS_LOB Read-Only Procedures for BFILEs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t13">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t13" headers="r1c1-t13">
<p class="synopsis">FILECLOSE</p>
</td>
<td class="cellalignment907" headers="r2c1-t13 r1c2-t13">
<p>Closes the file. Use <code>CLOSE()</code> instead.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t13" headers="r1c1-t13">
<p class="synopsis">FILECLOSEALL</p>
</td>
<td class="cellalignment907" headers="r3c1-t13 r1c2-t13">
<p>Closes all previously opened files</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t13" headers="r1c1-t13">
<p class="synopsis">FILEEXISTS</p>
</td>
<td class="cellalignment907" headers="r4c1-t13 r1c2-t13">
<p>Checks if the file exists on the server</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t13" headers="r1c1-t13">
<p class="synopsis">FILEGETNAME</p>
</td>
<td class="cellalignment907" headers="r5c1-t13 r1c2-t13">
<p>Gets the directory object name and file name</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t13" headers="r1c1-t13">
<p class="synopsis">FILEISOPEN</p>
</td>
<td class="cellalignment907" headers="r6c1-t13 r1c2-t13">
<p><code>Checks if the file was opened using the input BFILE</code> locators. Use <code>ISOPEN()</code> instead.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t13" headers="r1c1-t13">
<p class="synopsis">FILEOPEN</p>
</td>
<td class="cellalignment907" headers="r7c1-t13 r1c2-t13">
<p>Opens a file. Use <code>OPEN()</code> instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45375" class="sect2"><a id="sthref519"></a>
<h3 class="sect2"><a id="sthref520"></a>PL/SQL Functions and Procedures to Open and Close Internal and External LOBs</h3>
<div id="ADLOB45376" class="tblformalwide">
<p class="titleintable"><a id="sthref521"></a><a id="g1039001"></a>Table 13-8 PL/SQL: DBMS_LOB Procedures to Open and Close Internal and External LOBs</p>
<table class="cellalignment910" title=" PL/SQL: DBMS_LOB Procedures to Open and Close Internal and External LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t14">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t14" headers="r1c1-t14">
<p class="synopsis">OPEN</p>
</td>
<td class="cellalignment907" headers="r2c1-t14 r1c2-t14">
<p>Opens a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t14" headers="r1c1-t14">
<p class="synopsis">ISOPEN</p>
</td>
<td class="cellalignment907" headers="r3c1-t14 r1c2-t14">
<p>Sees if a LOB is open</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t14" headers="r1c1-t14">
<p class="synopsis">CLOSE</p>
</td>
<td class="cellalignment907" headers="r4c1-t14 r1c2-t14">
<p>Closes a LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>These procedures are described in detail for specific LOB operations, such as, <code>INSERT</code> a row containing a LOB, in <a href="adlob_design.htm#i1006373">"Opening Persistent LOBs with the OPEN and CLOSE Interfaces"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007277"></a>
<div id="ADLOB45377" class="sect1">
<h2 class="sect1"><a id="sthref522"></a>Using OCI to Work With LOBs</h2>
<p>Oracle Call Interface (OCI) LOB functions enable you to access and make changes to LOBs and to read data from <code>BFILE</code>s in C.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNOCI070" href="../../appdev.112/e10646/oci07lob.htm#LNOCI070"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> chapter "LOB and BFILE Operations" for the details of all topics discussed in this section.</div>
<a id="CJADHIBD"></a>
<div id="ADLOB45378" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref523"></a>Prefetching of LOB Data, Length, and Chunk Size</h3>
<p>To improve OCI access of smaller LOBs, LOB data can be prefetched and cached while also fetching the locator. This applies to internal LOBs, temporary LOBs, and <code>BFILE</code>s.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45379" class="sect2"><a id="sthref524"></a>
<h3 class="sect2">Setting the <a id="sthref525"></a>CSID Parameter for OCI LOB APIs<a id="sthref526"></a></h3>
<p>If you want to read or write data in 2-byte Unicode format, then set the <code>csid</code> (character set ID) parameter in <code>OCILobRead2()</code> and <code>OCILobWrite2()</code> to <code>OCI_UTF16ID</code>. The <code>csid</code> parameter indicates the character set id for the buffer parameter. You can set the <code>csid</code> parameter to any character set ID. If the <code>csid</code> parameter is set, then it overrides the <code>NLS_LANG</code> environment variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNOCI" href="../e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for information on the <code>OCIUnicodeToCharSet()</code> function and details on OCI syntax in general.</p>
</li>
<li>
<p><a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for detailed information about implementing applications in different languages<span class="italic">.</span></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1025949"></a>
<div id="ADLOB45380" class="sect2">
<h3 class="sect2"><a id="sthref527"></a>Fixed-Width and Varying-Width Character Set Rules for OCI</h3>
<p>In OCI, for <span class="italic">fixed-width</span> client-side character sets, the following rules apply:</p>
<ul>
<li>
<p><code>CLOB</code>s and <code>NCLOB</code>s: offset and amount parameters are always in characters</p>
</li>
<li>
<p><code>BLOB</code>s and <code>BFILE</code>s: offset and amount parameters are always in bytes</p>
</li>
</ul>
<p>The following rules apply only to <span class="italic">varying-width</span> client-side character sets:</p>
<ul>
<li>
<p><span class="bold">Offset parameter</span>: Regardless of whether the client-side character set is varying-width, the offset parameter is always as follows:</p>
<ul>
<li>
<p><code>CLOB</code>s and <code>NCLOB</code>s: in characters</p>
</li>
<li>
<p><code>BLOB</code>s and <code>BFILE</code>s: in bytes</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Amount parameter</span>: The amount parameter is always as follows:</p>
<ul>
<li>
<p>When referring to a server-side LOB: in characters</p>
</li>
<li>
<p>When referring to a client-side buffer: in bytes</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref528"></a>OCILobFileGetLength()</span>: Regardless of whether the client-side character set is varying-width, the output length is as follows:</p>
<ul>
<li>
<p><code>CLOB</code>s and <code>NCLOB</code>s: in characters</p>
</li>
<li>
<p><code>BLOB</code>s and <code>BFILE</code>s: in bytes</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref529"></a>OCILobRead2()</span>: With client-side character set of varying-width, <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p><span class="bolditalic">I</span><span class="bolditalic">nput amount</span> is in characters. Input amount refers to the number of characters to read from the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
</li>
<li>
<p><span class="bolditalic">Output amount</span> is in bytes. Output amount indicates how many bytes were read into the buffer <code>bufp</code>.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref530"></a>OCILobWrite2()</span>: With client-side character set of varying-width, <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p><span class="bolditalic">Input amount</span> is in bytes. The input amount refers to the number of bytes of data in the input buffer <code>bufp</code>.</p>
</li>
<li>
<p><span class="bolditalic">Output amount</span> is in characters. The output amount refers to the number of characters written into the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
</li>
</ul>
</li>
</ul>
<div id="ADLOB45381" class="sect3"><a id="sthref531"></a>
<h4 class="sect3">Other Operations</h4>
<p>For all other LOB operations, irrespective of the client-side character set, the <code>amount</code> parameter is in characters for <code>CLOB</code>s and <code>NCLOB</code>s. These include <code>OCILobCopy2()</code>, <code>OCILobErase2()</code>, <code>OCILobLoadFromFile2()</code>, and <code>OCILobTrim2()</code>. All these operations refer to the amount of LOB data on the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></div>
</div>
<!-- class="sect3" -->
<div id="ADLOB45382" class="sect3"><a id="sthref532"></a>
<h4 class="sect3"><a id="sthref533"></a>NCLOBs in OCI</h4>
<p><a id="i1007350"></a><code>NCLOB</code>s are allowed as parameters in methods.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45383" class="sect2"><a id="sthref534"></a>
<h3 class="sect2">OCILobLoadFromFile2() Amount Parameter</h3>
<p>When using <code>OCILobLoadFromFile2()</code> you cannot specify <code>amount</code> larger than the length of the <code>BFILE</code>. To load the entire <code>BFILE</code>, you can pass the value returned by <code>OCILobGetStorageLimit()</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45384" class="sect2"><a id="sthref535"></a>
<h3 class="sect2">OCILobRead2() Amount Parameter</h3>
<p>To read to the end of a LOB using <code>OCILobRead2()</code>, you specify an amount equal to the value returned by <code>OCILobGetStorageLimit()</code>. See <a href="adlob_lob_ops.htm#i1024873">"Reading Data from a LOB"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="i1032166"></a>
<div id="ADLOB45385" class="sect2">
<h3 class="sect2">OCILobLocator Pointer Assignment</h3>
<p><a id="sthref536"></a><a id="sthref537"></a>Special care must be taken when assigning <code>OCILobLocator</code> pointers in an OCI program&mdash;using the "=" assignment operator. Pointer assignments create a shallow copy of the LOB. After the pointer assignment, the source and target LOBs point to the same copy of data.</p>
<p>These semantics are different from using LOB APIs, such as <code>OCILobAssign()</code> or <code>OCILobLocatorAssign()</code> to perform assignments. When the these APIs are used, the locators logically point to independent copies of data after assignment.</p>
<p>For temporary LOBs, before performing pointer assignments, you must ensure that any temporary LOB in the target LOB locator is freed by calling <code>OCIFreeTemporary()</code>. In contrast, when <code>OCILobLocatorAssign()</code> is used, the original temporary LOB in the target LOB locator variable, if any, is freed automatically before the assignment happens.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45386" class="sect2"><a id="sthref538"></a>
<h3 class="sect2">LOB Locators in Defines and Out-Bind Variables in OCI</h3>
<p><a id="sthref539"></a><a id="sthref540"></a><a id="sthref541"></a>Before you reuse a LOB locator in a define or an out-bind variable in a SQL statement, you must free any temporary LOB in the existing LOB locator buffer using <code>OCIFreeTemporary()</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45387" class="sect2"><a id="sthref542"></a>
<h3 class="sect2">OCI Functions That Operate on BLOBs, CLOBs, NCLOBs, and BFILEs</h3>
<p>OCI functions that operate on <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s are as follows:</p>
<ul>
<li>
<p>To modify persistent LOBs, see <a href="#g1039025">Table 13-9</a></p>
</li>
<li>
<p>To read or examine LOB values, see <a href="#g1039053">Table 13-10</a></p>
</li>
<li>
<p>To create or free temporary LOB, or check if Temporary LOB exists, see <a href="#g1039069">Table 13-11</a></p>
</li>
<li>
<p>For read only functions on external LOBs (<code>BFILE</code>s), see <a href="#g1039085">Table 13-12</a></p>
</li>
<li>
<p>To operate on LOB locators, see <a href="#g1039110">Table 13-13</a></p>
</li>
<li>
<p>For LOB buffering, see <a href="#g1039135">Table 13-14</a></p>
</li>
<li>
<p>To open and close LOBs, see <a href="#g1039151">Table 13-15</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45388" class="sect2"><a id="sthref543"></a>
<h3 class="sect2"><a id="sthref544"></a>OCI Functions to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values</h3>
<div id="ADLOB45389" class="tblformalwide">
<p class="titleintable"><a id="sthref545"></a><a id="g1039025"></a>Table 13-9 OCI Functions to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values</p>
<table class="cellalignment910" title=" OCI Functions to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t18">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t18" headers="r1c1-t18">
<p><code>OCILobAppend()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t18 r1c2-t18">
<p>Appends LOB value to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t18" headers="r1c1-t18">
<p><code>OCILobArrayWrite()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t18 r1c2-t18">
<p>Writes data using multiple locators in one round trip.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t18" headers="r1c1-t18">
<p><code>OCILobCopy2()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t18 r1c2-t18">
<p>Copies all or part of a LOB to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t18" headers="r1c1-t18">
<p><code>OCILobErase2()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t18 r1c2-t18">
<p>Erases part of a LOB, starting at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t18" headers="r1c1-t18">
<p><code>OCILobLoadFromFile2()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t18 r1c2-t18">
<p>Loads <code>BFILE</code> data into a persistent LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t18" headers="r1c1-t18">
<p><code>OCILobSetContentType()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t18 r1c2-t18">
<p>Sets a content string in a SecureFiles.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t18" headers="r1c1-t18">
<p><code>OCILObSetOptions()</code></p>
</td>
<td class="cellalignment907" headers="r8c1-t18 r1c2-t18">
<p>Enables option settings (deduplication and compression) for a SecureFiles.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t18" headers="r1c1-t18">
<p><code>OCILobTrim2()</code></p>
</td>
<td class="cellalignment907" headers="r9c1-t18 r1c2-t18">
<p>Truncates a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t18" headers="r1c1-t18">
<p><code>OCILobWrite2()</code></p>
</td>
<td class="cellalignment907" headers="r10c1-t18 r1c2-t18">
<p>Writes data from a buffer into a LOB, overwriting existing data.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t18" headers="r1c1-t18">
<p><code>OCILobWriteAppend2()</code></p>
</td>
<td class="cellalignment907" headers="r11c1-t18 r1c2-t18">
<p>Writes data from a buffer to the end of the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45390" class="sect2"><a id="sthref546"></a>
<h3 class="sect2"><a id="sthref547"></a><a id="sthref548"></a>OCI Functions to Read or Examine Persistent LOB and External LOB (BFILE) Values</h3>
<div id="ADLOB45391" class="tblformalwide">
<p class="titleintable"><a id="sthref549"></a><a id="g1039053"></a>Table 13-10 OCI Functions to Read or Examine persistent LOB and external LOB (BFILE) Values</p>
<table class="cellalignment910" title=" OCI Functions to Read or Examine persistent LOB and external LOB (BFILE) Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t19">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t19" headers="r1c1-t19">
<p><code>OCILobArrayRead()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t19 r1c2-t19">
<p>Reads data using multiple locators in one round trip.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t19" headers="r1c1-t19">
<p><code>OCILobGetChunkSize()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t19 r1c2-t19">
<p>Gets the chunk size used when reading and writing. This works on persistent LOBs and does not apply to external LOBs (<code>BFILE</code>s).</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t19" headers="r1c1-t19">
<p><code>OCILobGetContentType()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t19 r1c2-t19">
<p>Gets the content string for a SecureFiles.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t19" headers="r1c1-t19">
<p><code>OCILobGetLength2()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t19 r1c2-t19">
<p>Returns the length of a LOB or a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t19" headers="r1c1-t19">
<p><code>OCILObGetOptions()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t19 r1c2-t19">
<p>Obtains the enabled settings (deduplication, compression, encryption) for a given SecureFiles.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t19" headers="r1c1-t19">
<p><code>OCILobGetStorageLimit()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t19 r1c2-t19">
<p>Gets the maximum length of an internal LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t19" headers="r1c1-t19">
<p><code>OCILobRead2()</code></p>
</td>
<td class="cellalignment907" headers="r8c1-t19 r1c2-t19">
<p>Reads a specified portion of a non-<code>NULL</code> LOB or a <code>BFILE</code> into a buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45392" class="sect2"><a id="sthref550"></a>
<h3 class="sect2"><a id="sthref551"></a><a id="sthref552"></a>OCI Functions for Temporary LOBs</h3>
<div id="ADLOB45393" class="tblformalwide">
<p class="titleintable"><a id="sthref553"></a><a id="g1039069"></a>Table 13-11 OCI Functions for Temporary LOBs</p>
<table class="cellalignment910" title=" OCI Functions for Temporary LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t20">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t20" headers="r1c1-t20">
<p><code>OCILobCreateTemporary()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t20 r1c2-t20">
<p>Creates a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t20" headers="r1c1-t20">
<p><code>OCILobIsTemporary()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t20 r1c2-t20">
<p>Sees if a temporary LOB exists.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t20" headers="r1c1-t20">
<p><code>OCILobFreeTemporary()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t20 r1c2-t20">
<p>Frees a temporary LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45394" class="sect2"><a id="sthref554"></a>
<h3 class="sect2"><a id="sthref555"></a><a id="sthref556"></a>OCI Read-Only Functions for BFILEs</h3>
<div id="ADLOB45395" class="tblformalwide">
<p class="titleintable"><a id="sthref557"></a><a id="g1039085"></a>Table 13-12 OCI Read-Only Functions for BFILES</p>
<table class="cellalignment910" title=" OCI Read-Only Functions for BFILES " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t21">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t21" headers="r1c1-t21">
<p><code>OCILobFileClose()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t21 r1c2-t21">
<p>Closes an open <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t21" headers="r1c1-t21">
<p><code>OCILobFileCloseAll()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t21 r1c2-t21">
<p>Closes all open <code>BFILE</code>s.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t21" headers="r1c1-t21">
<p><code>OCILobFileExists()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t21 r1c2-t21">
<p>Checks whether a <code>BFILE</code> exists.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t21" headers="r1c1-t21">
<p><code>OCILobFileGetName()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t21 r1c2-t21">
<p>Returns the name of a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t21" headers="r1c1-t21">
<p><code>OCILobFileIsOpen()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t21 r1c2-t21">
<p>Checks whether a <code>BFILE</code> is open.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t21" headers="r1c1-t21">
<p><code>OCILobFileOpen()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t21 r1c2-t21">
<p>Opens a <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45396" class="sect2"><a id="sthref558"></a>
<h3 class="sect2"><a id="sthref559"></a><a id="sthref560"></a>OCI LOB Locator Functions</h3>
<div id="ADLOB45397" class="tblformalwide">
<p class="titleintable"><a id="sthref561"></a><a id="g1039110"></a>Table 13-13 OCI LOB-Locator Functions</p>
<table class="cellalignment910" title=" OCI LOB-Locator Functions" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t22">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t22" headers="r1c1-t22">
<p><code>OCILobAssign()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t22 r1c2-t22">
<p>Assigns one LOB locator to another.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t22" headers="r1c1-t22">
<p><code>OCILobCharSetForm()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t22 r1c2-t22">
<p>Returns the character set form of a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t22" headers="r1c1-t22">
<p><code>OCILobCharSetId()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t22 r1c2-t22">
<p>Returns the character set ID of a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t22" headers="r1c1-t22">
<p><code>OCILobFileSetName()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t22 r1c2-t22">
<p>Sets the name of a <code>BFILE</code> in a locator.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t22" headers="r1c1-t22">
<p><code>OCILobIsEqual()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t22 r1c2-t22">
<p>Checks whether two LOB locators refer to the same LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t22" headers="r1c1-t22">
<p><code>OCILobLocatorIsInit()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t22 r1c2-t22">
<p>Checks whether a LOB locator is initialized.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45398" class="sect2"><a id="sthref562"></a>
<h3 class="sect2"><a id="sthref563"></a><a id="sthref564"></a>OCI LOB-Buffering Functions</h3>
<div id="ADLOB45399" class="tblformalwide">
<p class="titleintable"><a id="sthref565"></a><a id="g1039135"></a>Table 13-14 OCI LOB-Buffering Functions</p>
<table class="cellalignment910" title=" OCI LOB-Buffering Functions" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t23">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t23" headers="r1c1-t23">
<p><code>OCILobDisableBuffering()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t23 r1c2-t23">
<p>Disables the buffering subsystem use.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t23" headers="r1c1-t23">
<p><code>OCILobEnableBuffering()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t23 r1c2-t23">
<p>Uses the LOB buffering subsystem for subsequent reads and writes of LOB data.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t23" headers="r1c1-t23">
<p><code>OCILobFlushBuffer()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t23 r1c2-t23">
<p>Flushes changes made to the LOB buffering subsystem to the database (server).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45400" class="sect2"><a id="sthref566"></a>
<h3 class="sect2"><a id="sthref567"></a>OCI Functions to Open and Close Internal and External LOBs</h3>
<div id="ADLOB45401" class="tblformalwide">
<p class="titleintable"><a id="sthref568"></a><a id="g1039151"></a>Table 13-15 OCI Functions to Open and Close Internal and External LOBs</p>
<table class="cellalignment910" title=" OCI Functions to Open and Close Internal and External LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t24">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t24" headers="r1c1-t24">
<p><code>OCILobOpen()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t24 r1c2-t24">
<p>Opens a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t24" headers="r1c1-t24">
<p><code>OCILobIsOpen()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t24 r1c2-t24">
<p>Sees if a LOB is open.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t24" headers="r1c1-t24">
<p><code>OCILobClose()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t24 r1c2-t24">
<p>Closes a LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45402" class="sect2"><a id="sthref569"></a>
<h3 class="sect2">OCI LOB Examples</h3>
<p>Further OCI examples are provided in:</p>
<ul>
<li>
<p><a href="adlob_lob_ops.htm#g1113588">Chapter 22, " Using LOB APIs"</a></p>
</li>
<li>
<p><a href="adlob_bfile_ops.htm#g1088337">Chapter 21, "LOB APIs for BFILE Operations"</a></p>
</li>
</ul>
<p>See also Appendix B, "OCI Demonstration Programs" in <a class="olink LNOCI280" href="../../appdev.112/e10646/ociabdem.htm#LNOCI280"><span class="italic">Oracle Call Interface Programmer's Guide,</span></a> for further OCI demonstration script listings.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45403" class="sect2"><a id="sthref570"></a>
<h3 class="sect2">Further Information About OCI</h3>
<p>For further information and features of OCI, refer to the OTN Web site, <code><a href="http://www.oracle.com/technology/">http://www.oracle.com/technology/</a></code> for OCI features and frequently asked questions.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1007833"></a>
<div id="ADLOB45404" class="sect1">
<h2 class="sect1">Using C++ (<a id="sthref571"></a>OCCI) to Work With LOBs</h2>
<p>Oracle C++ Call Interface (OCCI) is a C++ API for manipulating data in an Oracle database. OCCI is organized as an easy-to-use set of C++ classes that enable a C++ program to connect to a database, run SQL statements, insert/update values in database tables, retrieve results of a query, run stored procedures in the database, and access metadata of database schema objects. OCCI also provides a seamless interface to manipulate objects of user-defined types as C++ class instances.</p>
<p>Oracle C++ Call Interface (OCCI) is designed so that you can use OCI and OCCI together to build applications.</p>
<p>The OCCI API provides the following advantages over JDBC and ODBC:</p>
<ul>
<li>
<p>OCCI encompasses more Oracle functionality than JDBC. OCCI provides all the functionality of OCI that JDBC does not provide.</p>
</li>
<li>
<p>OCCI provides <span class="italic">compiled</span> performance. With compiled programs, the source code is written as close to the computer as possible. Because JDBC is an <span class="italic">interpreted</span> API, it cannot provide the performance of a compiled API. With an interpreted program, performance degrades as each line of code must be interpreted individually into code that is close to the computer.</p>
</li>
<li>
<p>OCCI provides memory management with smart pointers. You do not have to be concerned about managing memory for OCCI objects. This results in robust higher performance application code.</p>
</li>
<li>
<p>Navigational access of OCCI enables you to intuitively access objects and call methods. Changes to objects persist without writing corresponding SQL statements. If you use the client side cache, then the navigational interface performs better than the object interface.</p>
</li>
<li>
<p>With respect to ODBC, the OCCI API is simpler to use. Because ODBC is built on the C language, OCCI has all the advantages C++ provides over C. Moreover, ODBC has a reputation as being difficult to learn. The OCCI, by contrast, is designed for ease of use.</p>
</li>
</ul>
<p>You can use OCCI to make changes to an entire persistent LOB, or to pieces of the beginning, middle, or end of it, as follows:</p>
<ul>
<li>
<p>For reading from internal and external LOBs (<code>BFILE</code>s)</p>
</li>
<li>
<p>For writing to persistent LOBs</p>
</li>
</ul>
<div id="ADLOB45405" class="sect2"><a id="sthref572"></a>
<h3 class="sect2">OCCI Classes for LOBs</h3>
<p>OCCI provides the following classes that allow you to use different types of LOB instances as objects in your C++ application:</p>
<ul>
<li>
<p><code><a id="sthref573"></a>Clob</code> class to access and modify data stored in internal <code>CLOB</code>s and <code>NCLOB</code>s</p>
</li>
<li>
<p><code>Blob</code> class to access and modify data stored in internal <code>BLOB</code>s</p>
</li>
<li>
<p><code>Bfile</code> class to access and read data stored in external LOBs (<code>BFILE</code>s)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Syntax information on these classes and details on OCCI in general is available in the <a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a>.</div>
</li>
</ul>
<div id="ADLOB45406" class="sect3"><a id="sthref574"></a>
<h4 class="sect3">Clob Class</h4>
<p>The Clob driver implements a <code>CLOB</code> object using an SQL LOB locator. This means that a CLOB object contains a logical pointer to the SQL <code>CLOB</code> data rather than the data itself.</p>
<p>The <code>CLOB</code> interface provides methods for getting the length of an SQL <code>CLOB</code> value, for materializing a <code>CLOB</code> value on the client, and getting a substring. Methods in the <code>ResultSet</code> and <code>Statement</code> interfaces such as <code>getClob()</code> and <code>setClob()</code> allow you to access SQL <code>CLOB</code> values.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a> for detailed information on the Clob class.</div>
</div>
<!-- class="sect3" -->
<div id="ADLOB45407" class="sect3"><a id="sthref575"></a>
<h4 class="sect3"><a id="sthref576"></a>Blob Class</h4>
<p>Methods in the <code>ResultSet</code> and <code>Statement</code> interfaces, such as <code>getBlob()</code> and <code>setBlob()</code>, allow you to access SQL <code>BLOB</code> values. The <code>Blob</code> interface provides methods for getting the length of a SQL <code>BLOB</code> value, for materializing a <code>BLOB</code> value on the client, and for extracting a part of the <code>BLOB</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a> for detailed information on the Blob class methods and details on instantiating and initializing a Blob object in your C++ application.</p>
</li>
<li>
<p><a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a> for detailed information about implementing applications in different languages<span class="italic">.</span></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="ADLOB45408" class="sect3"><a id="sthref577"></a>
<h4 class="sect3">Bfile Class</h4>
<p>The <code>Bfile</code> class enables you to instantiate a <code>Bfile</code> object in your C++ application. You must then use methods of the <code>Bfile</code> class, such as the <code>setName()</code> method, to initialize the <code>Bfile</code> object which associates the object properties with an object of type <code>BFILE</code> in a <code>BFILE</code> column of the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a> for detailed information on the <code>Blob</code> class methods and details on instantiating and initializing an <code>Blob</code> object in your C++ application.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45409" class="sect2"><a id="sthref578"></a>
<h3 class="sect2"><a id="sthref579"></a>Fixed-Width Character Set Rules</h3>
<p>In OCCI, for <span class="italic">fixed-width</span> client-side character sets, the following rules apply:</p>
<ul>
<li>
<p><code>Clob</code>: offset and amount parameters are always in characters</p>
</li>
<li>
<p><code>Blob</code>: offset and amount parameters are always in bytes</p>
</li>
<li>
<p><code>Bfile</code>: offset and amount parameters are always in bytes</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45410" class="sect2"><a id="sthref580"></a>
<h3 class="sect2">Varying-Width Character Set Rules</h3>
<p>The following rules apply only to <span class="italic">varying-width</span> client-side character sets:</p>
<ul>
<li>
<p><span class="bold">Offset parameter</span>: Regardless of whether the client-side character set is varying-width, the offset parameter is always as follows:</p>
<ul>
<li>
<p><code>Clob()</code>: in characters</p>
</li>
<li>
<p><code>Blob()</code>: in bytes</p>
</li>
<li>
<p><code>Bfile()</code>: in bytes</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">Amount parameter</span>: The amount parameter is always as follows:</p>
<ul>
<li>
<p><code>Clob</code>: in characters, when referring to a server-side LOB</p>
</li>
<li>
<p><code>Blob</code>: in bytes, when referring to a client-side buffer</p>
</li>
<li>
<p><code>Bfile</code>: in bytes, when referring to a client-side buffer</p>
</li>
</ul>
</li>
<li>
<p><span class="bold">length()</span>: Regardless of whether the client-side character set is varying-width, the output length is as follows:</p>
<ul>
<li>
<p><code>Clob.length()</code>: in characters</p>
</li>
<li>
<p><code>Blob.length()</code>: in bytes</p>
</li>
<li>
<p><code>Bfile.length()</code>: in bytes</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref581"></a>Clob.read() and <a id="sthref582"></a>Blob.read()</span>: With client-side character set of varying-width, <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p><span class="bolditalic">I</span><span class="bolditalic">nput amount</span> is in characters. Input amount refers to the number of characters to read from the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
</li>
<li>
<p><span class="bolditalic">Output amount</span> is in bytes. Output amount indicates how many bytes were read into the OCCI buffer parameter, <code>buffer</code>.</p>
</li>
</ul>
</li>
<li>
<p><span class="bold"><a id="sthref583"></a><a id="sthref584"></a>Clob.write() and <a id="sthref585"></a>Blob.write()</span>: With client-side character set of varying-width, <code>CLOB</code>s and <code>NCLOB</code>s:</p>
<ul>
<li>
<p><span class="bolditalic">Input amount</span> is in bytes. Input amount refers to the number of bytes of data in the OCCI input buffer, <code>buffer</code>.</p>
</li>
<li>
<p><span class="bolditalic">O</span><span class="bolditalic">utput amount</span> is in characters. Output amount refers to the number of characters written into the server-side <code>CLOB</code> or <code>NCLOB</code>.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1024907"></a>
<div id="ADLOB45411" class="sect2">
<h3 class="sect2">Offset and Amount Parameters for Other OCCI Operations</h3>
<p>For all other OCCI LOB operations, irrespective of the client-side character set, the <span class="italic">amount parameter</span> is in characters for <code>CLOB</code>s and <code>NCLOB</code>s. These include the following:</p>
<ul>
<li>
<p><code>Clob.copy()</code></p>
</li>
<li>
<p><code>Clob.erase()</code></p>
</li>
<li>
<p><code>Clob.trim()</code></p>
</li>
<li>
<p>For LoadFromFile functionality, overloaded <code>Clob.copy()</code></p>
</li>
</ul>
<p>All these operations refer to the amount of LOB data on the server.</p>
<div class="infoboxnotealso">
<p class="notep1">See also:</p>
<a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></div>
<div id="ADLOB45412" class="sect3"><a id="sthref586"></a>
<h4 class="sect3"><a id="sthref587"></a>NCLOBs in OCCI</h4>
<ul>
<li>
<p><code>NCLOB</code> instances are allowed as parameters in methods</p>
</li>
<li>
<p><code>NCLOB</code> instances are allowed as attributes in object types.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45413" class="sect2"><a id="sthref588"></a>
<h3 class="sect2">Amount Parameter for OCCI LOB copy() Methods</h3>
<p>The <code>copy()</code> method on <code>Clob</code> and <code>Blob</code> enables you to load data from a <code>BFILE</code>. You can pass one of the following values for the <code>amount</code> parameter to this method:</p>
<ul>
<li>
<p>An amount smaller than the size of the <code>BFILE</code> to load a portion of the data</p>
</li>
<li>
<p>An amount equal to the size of the <code>BFILE</code> to load all of the data</p>
</li>
<li>
<p>The <code>UB8MAXVAL</code> constant to load all of the <code>BFILE</code> data</p>
</li>
</ul>
<p>You cannot specify an amount larger than the length of the <code>BFILE</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45414" class="sect2"><a id="sthref589"></a>
<h3 class="sect2">Amount Parameter for OCCI read() Operations</h3>
<p>The <code>read()</code> method on an <code>Clob</code>, <code>Blob</code>, or <code>Bfile</code> object, reads data from a <code>BFILE</code>. You can pass one of the following values for the amount parameter to specify the amount of data to read:</p>
<ul>
<li>
<p>An amount smaller than the size of the <code>BFILE</code> to load a portion of the data</p>
</li>
<li>
<p>An amount equal to the size of the <code>BFILE</code> to load all of the data</p>
</li>
<li>
<p><code>0</code> (zero) to read until the end of the <code>BFILE</code> in streaming mode</p>
</li>
</ul>
<p>You cannot specify an amount larger than the length of the <code>BFILE</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45415" class="sect2"><a id="sthref590"></a>
<h3 class="sect2">Further Information About OCCI</h3>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a></p>
</li>
<li>
<p><code><a href="http://www.oracle.com/">http://www.oracle.com/</a></code> search for articles and product information featuring OCCI.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45416" class="sect2"><a id="sthref591"></a>
<h3 class="sect2">OCCI Methods That Operate on BLOBs, BLOBs, NCLOBs, and BFILEs</h3>
<p>OCCI methods that operate on <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s are as follows:</p>
<ul>
<li>
<p>To modify persistent LOBs, see <a href="#g1039179">Table 13-16</a></p>
</li>
<li>
<p>To read or examine LOB values, see <a href="#g1039201">Table 13-17</a></p>
</li>
<li>
<p>For read only methods on external LOBs (<code>BFILE</code>s), see <a href="#g1039217">Table 13-18</a></p>
</li>
<li>
<p>Other LOB OCCI methods are described in <a href="#g1039242">Table 13-19</a></p>
</li>
<li>
<p>To open and close LOBs, see <a href="#g1039267">Table 13-20</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45417" class="sect2"><a id="sthref592"></a>
<h3 class="sect2"><a id="sthref593"></a>OCCI Methods to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values</h3>
<div id="ADLOB45418" class="tblformalwide">
<p class="titleintable"><a id="sthref594"></a><a id="g1039179"></a>Table 13-16 OCCI Clob and Blob Methods to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values</p>
<table class="cellalignment910" title=" OCCI Clob and Blob Methods to Modify Persistent LOB (BLOB, CLOB, and NCLOB) Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t31">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t31" headers="r1c1-t31">
<p><code>Blob/Clob.append()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t31 r1c2-t31">
<p>Appends <code>CLOB or BLOB</code> value to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t31" headers="r1c1-t31">
<p><code>Blob/Clob.copy()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t31 r1c2-t31">
<p>Copies all or part of a <code>CLOB</code> or <code>BLOB</code> to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t31" headers="r1c1-t31">
<p><code>Blob/Clob.copy()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t31 r1c2-t31">
<p>Loads <code>BFILE</code> data into a persistent LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t31" headers="r1c1-t31">
<p><code>Blob/Clob.trim()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t31 r1c2-t31">
<p>Truncates a <code>CLOB or BLOB</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t31" headers="r1c1-t31">
<p><code>Blob/Clob.write()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t31 r1c2-t31">
<p>Writes data from a buffer into a LOB, overwriting existing data.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45419" class="sect2"><a id="sthref595"></a>
<h3 class="sect2"><a id="sthref596"></a><a id="sthref597"></a>OCCI Methods to Read or Examine Persistent LOB and BFILE Values</h3>
<div id="ADLOB45420" class="tblformalwide">
<p class="titleintable"><a id="sthref598"></a><a id="g1039201"></a>Table 13-17 OCCI Blob/Clob/Bfile Methods to Read or Examine persistent LOB and BFILE Values</p>
<table class="cellalignment910" title=" OCCI Blob/Clob/Bfile Methods to Read or Examine persistent LOB and BFILE Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t32">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t32" headers="r1c1-t32">
<p><code>Blob/Clob.getChunkSize()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t32 r1c2-t32">
<p>Gets the chunk size used when reading and writing. This works on persistent LOBs and does not apply to external LOBs (<code>BFILE</code>s).</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t32" headers="r1c1-t32">
<p><code>Blob/Clob.getOptions()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t32 r1c2-t32">
<p>Obtains settings for existing and newly created LOBs.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t32" headers="r1c1-t32">
<p><code>Blob/Clob.length()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t32 r1c2-t32">
<p>Returns the length of a LOB or a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t32" headers="r1c1-t32">
<p><code>Blob/Clob.read()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t32 r1c2-t32">
<p>Reads a specified portion of a non-<code>NULL</code> LOB or a <code>BFILE</code> into a buffer.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t32" headers="r1c1-t32">
<p><code>Blob/Clob.setOptions()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t32 r1c2-t32">
<p>Enables LOB settings for existing and newly created LOBs.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45421" class="sect2"><a id="sthref599"></a>
<h3 class="sect2"><a id="sthref600"></a><a id="sthref601"></a><a id="sthref602"></a><a id="sthref603"></a>OCCI Read-Only Methods for BFILEs</h3>
<div id="ADLOB45422" class="tblformalwide">
<p class="titleintable"><a id="sthref604"></a><a id="g1039217"></a>Table 13-18 OCCI Read-Only Methods for BFILES</p>
<table class="cellalignment910" title=" OCCI Read-Only Methods for BFILES" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t33">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t33" headers="r1c1-t33">
<p><code><a id="sthref605"></a>Bfile.close()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t33 r1c2-t33">
<p>Closes an open <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t33" headers="r1c1-t33">
<p><code>Bfile.fileExists()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t33 r1c2-t33">
<p>Checks whether a <code>BFILE</code> exists.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t33" headers="r1c1-t33">
<p><code>Bfile.getFileName()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t33 r1c2-t33">
<p>Returns the name of a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t33" headers="r1c1-t33">
<p><code>Bfile.getDirAlias()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t33 r1c2-t33">
<p>Gets the directory object name.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t33" headers="r1c1-t33">
<p><code>Bfile.isOpen()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t33 r1c2-t33">
<p>Checks whether a <code>BFILE</code> is open.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t33" headers="r1c1-t33">
<p><code>Bfile.open()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t33 r1c2-t33">
<p>Opens a <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45423" class="sect2"><a id="sthref606"></a>
<h3 class="sect2">Other <a id="sthref607"></a><a id="sthref608"></a>OCCI LOB Methods</h3>
<div id="ADLOB45424" class="tblformalwide">
<p class="titleintable"><a id="sthref609"></a><a id="g1039242"></a>Table 13-19 Other OCCI LOB Methods</p>
<table class="cellalignment910" title=" Other OCCI LOB Methods" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t34">Methods</th>
<th class="cellalignment906" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t34" headers="r1c1-t34">
<p><code>Clob/Blob/Bfile.operator=()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t34 r1c2-t34">
<p>Assigns one LOB locator to another. Use = or the copy constructor.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t34" headers="r1c1-t34">
<p><code>Clob.getCharSetForm()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t34 r1c2-t34">
<p>Returns the character set form of a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t34" headers="r1c1-t34">
<p><code>Clob.getCharSetId()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t34 r1c2-t34">
<p>Returns the character set ID of a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t34" headers="r1c1-t34">
<p><code>Bfile.setName()</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t34 r1c2-t34">
<p>Sets the name of a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t34" headers="r1c1-t34">
<p><code>Clob/Blob/Bfile.operator==()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t34 r1c2-t34">
<p>Checks whether two LOB refer to the same LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t34" headers="r1c1-t34">
<p><code>Clob/Blob/Bfile.isInitialized()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t34 r1c2-t34">
<p>Checks whether a LOB is initialized.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45425" class="sect2"><a id="sthref610"></a>
<h3 class="sect2"><a id="sthref611"></a>OCCI Methods to Open and Close Internal and External LOBs</h3>
<div id="ADLOB45426" class="tblformalwide">
<p class="titleintable"><a id="sthref612"></a><a id="g1039267"></a>Table 13-20 OCCI Methods to Open and Close Internal and External LOBs</p>
<table class="cellalignment910" title=" OCCI Methods to Open and Close Internal and External LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t35">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t35" headers="r1c1-t35">
<p><code>Clob/Blob/Bfile.Open()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t35 r1c2-t35">
<p>Opens a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t35" headers="r1c1-t35">
<p><code>Clob/Blob/Bfile.isOpen()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t35 r1c2-t35">
<p>Sees if a LOB is open</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t35" headers="r1c1-t35">
<p><code>Clob/Blob/Bfile.Close()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t35 r1c2-t35">
<p>Closes a LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008145"></a>
<div id="ADLOB45427" class="sect1">
<h2 class="sect1">Using C/C++ (Pro*C) to Work With LOBs</h2>
<p>You can make changes to an entire persistent LOB, or to pieces of the beginning, middle or end of a LOB by using embedded SQL. You can access both internal and external LOBs for read purposes, and you can <span class="italic">write</span> to persistent LOBs.</p>
<p>Embedded SQL statements allow you to access data stored in <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s. These statements are listed in the following tables, and are discussed in greater detail later in the chapter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Programmer's Guide</span></a> for detailed documentation, including syntax, host variables, host variable types and example code.</div>
<div id="ADLOB45428" class="sect2"><a id="sthref613"></a>
<h3 class="sect2">First Provide an Allocated Input Locator Pointer That Represents LOB</h3>
<p>Unlike locators in PL/SQL, locators in Pro*C/C++ are mapped to locator pointers which are then used to refer to the LOB or BFILE value.</p>
<p>To successfully complete an embedded SQL LOB statement you must do the following:</p>
<ol>
<li>
<p><a id="sthref614"></a>Provide an <span class="italic">allocated</span> input locator pointer that represents a LOB that exists in the database tablespaces or external file system <span class="italic">before</span> you run the statement.</p>
</li>
<li>
<p>SELECT a LOB locator into a LOB locator pointer variable</p>
</li>
<li>
<p>Use this variable in the embedded SQL LOB statement to access and manipulate the LOB value</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
APIs for supported LOB operations are described in detail in:
<ul>
<li>
<p><a href="adlob_creating.htm#g1009782">Chapter 19, "Operations Specific to Persistent and Temporary LOBs"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#g1113588">Chapter 22, " Using LOB APIs"</a></p>
</li>
<li>
<p><a href="adlob_bfile_ops.htm#g1088337">Chapter 21, "LOB APIs for BFILE Operations"</a></p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADLOB45429" class="sect2"><a id="sthref615"></a>
<h3 class="sect2">Pro*C/C++ Statements That Operate on BLOBs, CLOBs, NCLOBs, and BFILEs</h3>
<p>Pro*C/C++ statements that operate on BLOBs, CLOBs, and NCLOBs are listed in the following tables:</p>
<ul>
<li>
<p>To modify persistent LOBs, see <a href="#g1039287">Table 13-21</a></p>
</li>
<li>
<p>To read or examine LOB values, see <a href="#g1039315">Table 13-22</a></p>
</li>
<li>
<p>To create or free temporary LOB, or check if Temporary LOB exists, see <a href="#g1039331">Table 13-23</a></p>
</li>
<li>
<p>To operate close and 'see if file exists' functions on BFILEs, see <a href="#g1039347">Table 13-24</a></p>
</li>
<li>
<p>To operate on LOB locators, see <a href="#g1039363">Table 13-25</a></p>
</li>
<li>
<p>For LOB buffering, see <a href="#g1039376">Table 13-26</a></p>
</li>
<li>
<p>To open or close LOBs or <code>BFILE</code>s, see <a href="#g1039392">Table 13-27</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45430" class="sect2"><a id="sthref616"></a>
<h3 class="sect2"><a id="sthref617"></a>Pro*C/C++ Embedded SQL Statements to Modify Persistent LOB Values</h3>
<div id="ADLOB45431" class="tblformalwide">
<p class="titleintable"><a id="sthref618"></a><a id="g1039287"></a>Table 13-21 Pro*C/C++: Embedded SQL Statements to Modify Persistent LOB Values</p>
<table class="cellalignment910" title=" Pro*C/C++: Embedded SQL Statements to Modify Persistent LOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t38">Statement</th>
<th class="cellalignment906" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t38" headers="r1c1-t38">
<p class="synopsis">APPEND</p>
</td>
<td class="cellalignment907" headers="r2c1-t38 r1c2-t38">
<p>Appends a LOB value to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t38" headers="r1c1-t38">
<p class="synopsis">COPY</p>
</td>
<td class="cellalignment907" headers="r3c1-t38 r1c2-t38">
<p>Copies all or a part of a LOB into another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t38" headers="r1c1-t38">
<p class="synopsis">ERASE</p>
</td>
<td class="cellalignment907" headers="r4c1-t38 r1c2-t38">
<p>Erases part of a LOB, starting at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t38" headers="r1c1-t38">
<p class="synopsis">LOAD FROM FILE</p>
</td>
<td class="cellalignment907" headers="r5c1-t38 r1c2-t38">
<p>Loads <code>BFILE</code> data into a persistent LOB at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t38" headers="r1c1-t38">
<p class="synopsis">TRIM</p>
</td>
<td class="cellalignment907" headers="r6c1-t38 r1c2-t38">
<p>Truncates a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t38" headers="r1c1-t38">
<p class="synopsis">WRITE</p>
</td>
<td class="cellalignment907" headers="r7c1-t38 r1c2-t38">
<p>Writes data from a buffer into a LOB at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t38" headers="r1c1-t38">
<p class="synopsis">WRITE APPEND</p>
</td>
<td class="cellalignment907" headers="r8c1-t38 r1c2-t38">
<p>Writes data from a buffer into a LOB at the end of the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45432" class="sect2"><a id="sthref619"></a>
<h3 class="sect2"><a id="sthref620"></a>Pro*C/C++ Embedded SQL Statements for Introspection of LOBs</h3>
<div id="ADLOB45433" class="tblformalwide">
<p class="titleintable"><a id="sthref621"></a><a id="g1039315"></a>Table 13-22 Pro*C/C++: Embedded SQL Statements for Introspection of LOBs</p>
<table class="cellalignment910" title=" Pro*C/C++: Embedded SQL Statements for Introspection of LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t39">Statement</th>
<th class="cellalignment906" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t39" headers="r1c1-t39">
<p class="synopsis">DESCRIBE [CHUNKSIZE]</p>
</td>
<td class="cellalignment907" headers="r2c1-t39 r1c2-t39">
<p>Gets the chunk size used when writing. This works for persistent LOBs only. It does not apply to external LOBs (<code>BFILE</code>s).</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t39" headers="r1c1-t39">
<p class="synopsis">DESCRIBE [LENGTH]</p>
</td>
<td class="cellalignment907" headers="r3c1-t39 r1c2-t39">
<p>Returns the length of a LOB or a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t39" headers="r1c1-t39">
<p class="synopsis">READ</p>
</td>
<td class="cellalignment907" headers="r4c1-t39 r1c2-t39">
<p>reads a specified portion of a non-<code>NULL</code> LOB or a <code>BFILE</code> into a buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45434" class="sect2"><a id="sthref622"></a>
<h3 class="sect2"><a id="sthref623"></a><a id="sthref624"></a>Pro*C/C++ Embedded SQL Statements for Temporary LOBs</h3>
<div id="ADLOB45435" class="tblformalwide">
<p class="titleintable"><a id="sthref625"></a><a id="g1039331"></a>Table 13-23 Pro*C/C++: Embedded SQL Statements for Temporary LOBs</p>
<table class="cellalignment910" title=" Pro*C/C++: Embedded SQL Statements for Temporary LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t40">Statement</th>
<th class="cellalignment906" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t40" headers="r1c1-t40">
<p class="synopsis">CREATE TEMPORARY</p>
</td>
<td class="cellalignment907" headers="r2c1-t40 r1c2-t40">
<p>Creates a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t40" headers="r1c1-t40">
<p class="synopsis">DESCRIBE [ISTEMPORARY]</p>
</td>
<td class="cellalignment907" headers="r3c1-t40 r1c2-t40">
<p>Sees if a LOB locator refers to a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t40" headers="r1c1-t40">
<p class="synopsis">FREE TEMPORARY</p>
</td>
<td class="cellalignment907" headers="r4c1-t40 r1c2-t40">
<p>Frees a temporary LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45436" class="sect2"><a id="sthref626"></a>
<h3 class="sect2"><a id="sthref627"></a><a id="sthref628"></a>Pro*C/C++ Embedded SQL Statements for BFILEs</h3>
<div id="ADLOB45437" class="tblformalwide">
<p class="titleintable"><a id="sthref629"></a><a id="g1039347"></a>Table 13-24 Pro*C/C++: Embedded SQL Statements for BFILES</p>
<table class="cellalignment910" title=" Pro*C/C++: Embedded SQL Statements for BFILES" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t41">Statement</th>
<th class="cellalignment906" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t41" headers="r1c1-t41">
<p class="synopsis">FILE CLOSE ALL</p>
</td>
<td class="cellalignment907" headers="r2c1-t41 r1c2-t41">
<p>Closes all open <code>BFILE</code>s.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t41" headers="r1c1-t41">
<p class="synopsis">DESCRIBE [FILEEXISTS]</p>
</td>
<td class="cellalignment907" headers="r3c1-t41 r1c2-t41">
<p>Checks whether a <code>BFILE</code> exists.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t41" headers="r1c1-t41">
<p class="synopsis">DESCRIBE [DIRECTORY,FILENAME]</p>
</td>
<td class="cellalignment907" headers="r4c1-t41 r1c2-t41">
<p>Returns the directory object name and filename of a <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45438" class="sect2"><a id="sthref630"></a>
<h3 class="sect2"><a id="sthref631"></a>Pro*C/C++ Embedded SQL Statements for LOB Locators</h3>
<div id="ADLOB45439" class="tblformalwide">
<p class="titleintable"><a id="sthref632"></a><a id="g1039363"></a>Table 13-25 Pro*C/C++ Embedded SQL Statements for LOB Locators</p>
<table class="cellalignment910" title=" Pro*C/C++ Embedded SQL Statements for LOB Locators" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t42">Statement</th>
<th class="cellalignment906" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t42" headers="r1c1-t42">
<p class="synopsis">ASSIGN</p>
</td>
<td class="cellalignment907" headers="r2c1-t42 r1c2-t42">
<p>Assigns one LOB locator to another.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t42" headers="r1c1-t42">
<p class="synopsis">FILE SET</p>
</td>
<td class="cellalignment907" headers="r3c1-t42 r1c2-t42">
<p>Sets the directory object name and filename of a <code>BFILE</code> in a locator.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45440" class="sect2"><a id="sthref633"></a>
<h3 class="sect2">Pro*C/C++ Embedded SQL Statements for LOB Buffering</h3>
<div id="ADLOB45441" class="tblformalwide">
<p class="titleintable"><a id="sthref634"></a><a id="g1039376"></a>Table 13-26 Pro*C/C++ Embedded SQL Statements for LOB Buffering</p>
<table class="cellalignment910" title=" Pro*C/C++ Embedded SQL Statements for LOB Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t43">Statement<a id="sthref635"></a><a id="sthref636"></a></th>
<th class="cellalignment906" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t43" headers="r1c1-t43">
<p class="synopsis">DISABLE BUFFERING</p>
</td>
<td class="cellalignment907" headers="r2c1-t43 r1c2-t43">
<p>Disables the use of the buffering subsystem.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t43" headers="r1c1-t43">
<p class="synopsis">ENABLE BUFFERING</p>
</td>
<td class="cellalignment907" headers="r3c1-t43 r1c2-t43">
<p>Uses the LOB buffering subsystem for subsequent reads and writes of LOB data.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t43" headers="r1c1-t43">
<p class="synopsis">FLUSH BUFFER</p>
</td>
<td class="cellalignment907" headers="r4c1-t43 r1c2-t43">
<p>Flushes changes made to the LOB buffering subsystem to the database (server)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45442" class="sect2"><a id="sthref637"></a>
<h3 class="sect2"><a id="sthref638"></a><a id="sthref639"></a>Pro*C/C++ Embedded SQL Statements to Open and Close LOBs</h3>
<div id="ADLOB45443" class="tblformalwide">
<p class="titleintable"><a id="sthref640"></a><a id="g1039392"></a>Table 13-27 Pro*C/C++ Embedded SQL Statements to Open and Close Persistent LOBs and External LOBs (BFILEs)</p>
<table class="cellalignment910" title=" Pro*C/C++ Embedded SQL Statements to Open and Close Persistent LOBs and External LOBs (BFILEs)" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t44">Statement</th>
<th class="cellalignment906" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t44" headers="r1c1-t44">
<p class="synopsis">OPEN</p>
</td>
<td class="cellalignment907" headers="r2c1-t44 r1c2-t44">
<p>Opens a LOB or <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t44" headers="r1c1-t44">
<p class="synopsis">DESCRIBE [ISOPEN]</p>
</td>
<td class="cellalignment907" headers="r3c1-t44 r1c2-t44">
<p>Sees if a LOB or <code>BFILE</code> is open.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t44" headers="r1c1-t44">
<p class="synopsis">CLOSE</p>
</td>
<td class="cellalignment907" headers="r4c1-t44 r1c2-t44">
<p>Closes a LOB or <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008412"></a>
<div id="ADLOB45444" class="sect1">
<h2 class="sect1">Using COBOL (Pro*COBOL) to Work With LOBs</h2>
<p>You can make changes to an entire persistent LOB, or to pieces of the beginning, middle or end of it by using embedded SQL. You can access both internal and external LOBs for read purposes, and you can also <span class="italic">write</span> to persistent LOBs.</p>
<p>Embedded SQL statements allow you to access data stored in <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s. These statements are listed in the following tables, and are discussed in greater detail later in the manual.</p>
<div id="ADLOB45445" class="sect2"><a id="sthref641"></a>
<h3 class="sect2"><a id="sthref642"></a><a id="sthref643"></a>First Provide an Allocated Input Locator Pointer That Represents LOB</h3>
<p>Unlike locators in PL/SQL, locators in Pro*COBOL are mapped to locator pointers which are then used to refer to the LOB or BFILE value. For the successful completion of an embedded SQL LOB statement you must perform the following:</p>
<ol>
<li>
<p>Provide an <span class="italic">allocated</span> input locator pointer that represents a LOB that exists in the database tablespaces or external file system <span class="italic">before</span> you run the statement.</p>
</li>
<li>
<p>SELECT a LOB locator into a LOB locator pointer variable</p>
</li>
<li>
<p>Use this variable in an embedded SQL LOB statement to access and manipulate the LOB value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
APIs for supported LOB operations are described in detail in:
<ul>
<li>
<p><a href="adlob_creating.htm#g1009782">Chapter 19, "Operations Specific to Persistent and Temporary LOBs"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#g1113588">Chapter 22, " Using LOB APIs"</a></p>
</li>
<li>
<p><a href="adlob_bfile_ops.htm#g1088337">Chapter 21, "LOB APIs for BFILE Operations"</a></p>
</li>
</ul>
</div>
</li>
</ol>
<p>Where the Pro*COBOL interface does not supply the required functionality, you can call OCI using C. Such an example is not provided here because such programs are operating system dependent.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a> for detailed documentation, including syntax, host variables, host variable types, and example code.</div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45446" class="sect2"><a id="sthref644"></a>
<h3 class="sect2">Pro*COBOL Statements That Operate on BLOBs, CLOBs, NCLOBs, and BFILEs</h3>
<p>The following Pro*COBOL statements operate on BLOBs, CLOBs, NCLOBs, and BFILEs:</p>
<ul>
<li>
<p>To modify persistent LOBs, see <a href="#g1039412">Table 13-28</a></p>
</li>
<li>
<p>To read or examine internal and external LOB values, see <a href="#g1039440">Table 13-29</a></p>
</li>
<li>
<p>To create or free temporary LOB, or check LOB locator, see <a href="#g1039456">Table 13-30</a></p>
</li>
<li>
<p>To operate close and 'see if file exists' functions on <code>BFILE</code>s, see <a href="#g1039472">Table 13-31</a></p>
</li>
<li>
<p>To operate on LOB locators, see <a href="#g1039488">Table 13-32</a></p>
</li>
<li>
<p>For LOB buffering, see <a href="#g1039501">Table 13-33</a></p>
</li>
<li>
<p>To open or close persistent LOBs or <code>BFILE</code>s, see <a href="#g1039517">Table 13-34</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45447" class="sect2"><a id="sthref645"></a>
<h3 class="sect2"><a id="sthref646"></a>Pro*COBOL Embedded SQL Statements to Modify Persistent LOB Values</h3>
<div id="ADLOB45448" class="tblformalwide">
<p class="titleintable"><a id="sthref647"></a><a id="g1039412"></a>Table 13-28 Pro*COBOL Embedded SQL Statements to Modify LOB Values</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements to Modify LOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t47">Statement</th>
<th class="cellalignment906" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t47" headers="r1c1-t47">
<p class="synopsis">APPEND</p>
</td>
<td class="cellalignment907" headers="r2c1-t47 r1c2-t47">
<p>Appends a LOB value to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t47" headers="r1c1-t47">
<p class="synopsis">COPY</p>
</td>
<td class="cellalignment907" headers="r3c1-t47 r1c2-t47">
<p>Copies all or part of a LOB into another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t47" headers="r1c1-t47">
<p class="synopsis">ERASE</p>
</td>
<td class="cellalignment907" headers="r4c1-t47 r1c2-t47">
<p>Erases part of a LOB, starting at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t47" headers="r1c1-t47">
<p class="synopsis">LOAD FROM FILE</p>
</td>
<td class="cellalignment907" headers="r5c1-t47 r1c2-t47">
<p>Loads <code>BFILE</code> data into a persistent LOB at a specified offset.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t47" headers="r1c1-t47">
<p class="synopsis">TRIM</p>
</td>
<td class="cellalignment907" headers="r6c1-t47 r1c2-t47">
<p>Truncates a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t47" headers="r1c1-t47">
<p class="synopsis">WRITE</p>
</td>
<td class="cellalignment907" headers="r7c1-t47 r1c2-t47">
<p>Writes data from a buffer into a LOB at a specified offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t47" headers="r1c1-t47">
<p class="synopsis">WRITE APPEND</p>
</td>
<td class="cellalignment907" headers="r8c1-t47 r1c2-t47">
<p>Writes data from a buffer into a LOB at the end of the LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45449" class="sect2"><a id="sthref648"></a>
<h3 class="sect2"><a id="sthref649"></a>Pro*COBOL Embedded SQL Statements for Introspection of LOBs</h3>
<div id="ADLOB45450" class="tblformalwide">
<p class="titleintable"><a id="sthref650"></a><a id="g1039440"></a>Table 13-29 Pro*COBOL Embedded SQL Statements for Introspection of LOBs</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for Introspection of LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t48">Statement</th>
<th class="cellalignment906" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t48" headers="r1c1-t48">
<p class="synopsis">DESCRIBE [CHUNKSIZE]</p>
</td>
<td class="cellalignment907" headers="r2c1-t48 r1c2-t48">
<p>Gets the Chunk size used when writing.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t48" headers="r1c1-t48">
<p class="synopsis">DESCRIBE [LENGTH]</p>
</td>
<td class="cellalignment907" headers="r3c1-t48 r1c2-t48">
<p>Returns the length of a LOB or a <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t48" headers="r1c1-t48">
<p class="synopsis">READ</p>
</td>
<td class="cellalignment907" headers="r4c1-t48 r1c2-t48">
<p>Reads a specified portion of a non-<code>NULL</code> LOB or a <code>BFILE</code> into a buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45451" class="sect2"><a id="sthref651"></a>
<h3 class="sect2"><a id="sthref652"></a><a id="sthref653"></a>Pro*COBOL Embedded SQL Statements for Temporary LOBs</h3>
<div id="ADLOB45452" class="tblformalwide">
<p class="titleintable"><a id="sthref654"></a><a id="g1039456"></a>Table 13-30 Pro*COBOL Embedded SQL Statements for Temporary LOBs</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for Temporary LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t49">Statement</th>
<th class="cellalignment906" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t49" headers="r1c1-t49">
<p class="synopsis">CREATE TEMPORARY</p>
</td>
<td class="cellalignment907" headers="r2c1-t49 r1c2-t49">
<p>Creates a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t49" headers="r1c1-t49">
<p class="synopsis">DESCRIBE [ISTEMPORARY]</p>
</td>
<td class="cellalignment907" headers="r3c1-t49 r1c2-t49">
<p>Sees if a LOB locator refers to a temporary LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t49" headers="r1c1-t49">
<p class="synopsis">FREE TEMPORARY</p>
</td>
<td class="cellalignment907" headers="r4c1-t49 r1c2-t49">
<p>Frees a temporary LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45453" class="sect2"><a id="sthref655"></a>
<h3 class="sect2"><a id="sthref656"></a><a id="sthref657"></a>Pro*COBOL Embedded SQL Statements for BFILEs</h3>
<div id="ADLOB45454" class="tblformalwide">
<p class="titleintable"><a id="sthref658"></a><a id="g1039472"></a>Table 13-31 Pro*COBOL Embedded SQL Statements for BFILES</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for BFILES" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t50">Statement</th>
<th class="cellalignment906" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t50" headers="r1c1-t50">
<p class="synopsis">FILE CLOSE ALL</p>
</td>
<td class="cellalignment907" headers="r2c1-t50 r1c2-t50">
<p>Closes all open <code>BFILE</code>s.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t50" headers="r1c1-t50">
<p class="synopsis">DESCRIBE [FILEEXISTS]</p>
</td>
<td class="cellalignment907" headers="r3c1-t50 r1c2-t50">
<p>Checks whether a <code>BFILE</code> exists.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t50" headers="r1c1-t50">
<p class="synopsis">DESCRIBE [DIRECTORY, FILENAME]</p>
</td>
<td class="cellalignment907" headers="r4c1-t50 r1c2-t50">
<p>Returns the directory object name and filename of a <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45455" class="sect2"><a id="sthref659"></a>
<h3 class="sect2"><a id="sthref660"></a><a id="sthref661"></a>Pro*COBOL Embedded SQL Statements for LOB Locators</h3>
<div id="ADLOB45456" class="tblformalwide">
<p class="titleintable"><a id="sthref662"></a><a id="g1039488"></a>Table 13-32 Pro*COBOL Embedded SQL Statements for LOB Locator Statements</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for LOB Locator Statements" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t51">Statement</th>
<th class="cellalignment906" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t51" headers="r1c1-t51">
<p class="synopsis">ASSIGN</p>
</td>
<td class="cellalignment907" headers="r2c1-t51 r1c2-t51">
<p>Assigns one LOB locator to another.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t51" headers="r1c1-t51">
<p class="synopsis">FILE SET</p>
</td>
<td class="cellalignment907" headers="r3c1-t51 r1c2-t51">
<p>Sets the directory object name and filename of a <code>BFILE</code> in a locator.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45457" class="sect2"><a id="sthref663"></a>
<h3 class="sect2"><a id="sthref664"></a><a id="sthref665"></a>Pro*COBOL Embedded SQL Statements for LOB Buffering</h3>
<div id="ADLOB45458" class="tblformalwide">
<p class="titleintable"><a id="sthref666"></a><a id="g1039501"></a>Table 13-33 Pro*COBOL Embedded SQL Statements for LOB Buffering</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for LOB Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t52">Statement</th>
<th class="cellalignment906" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t52" headers="r1c1-t52">
<p class="synopsis">DISABLE BUFFERING</p>
</td>
<td class="cellalignment907" headers="r2c1-t52 r1c2-t52">
<p>Disables the use of the buffering subsystem.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t52" headers="r1c1-t52">
<p class="synopsis">ENABLE BUFFERING</p>
</td>
<td class="cellalignment907" headers="r3c1-t52 r1c2-t52">
<p>Uses the LOB buffering subsystem for subsequent reads and writes of LOB data.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t52" headers="r1c1-t52">
<p class="synopsis">FLUSH BUFFER</p>
</td>
<td class="cellalignment907" headers="r4c1-t52 r1c2-t52">
<p>Flushes changes made to the LOB buffering subsystem to the database (server)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45459" class="sect2"><a id="sthref667"></a>
<h3 class="sect2">Pro*COBOL Embedded SQL Statements for Opening and Closing LOBs and BFILEs</h3>
<div id="ADLOB45460" class="tblformalwide">
<p class="titleintable"><a id="sthref668"></a><a id="g1039517"></a>Table 13-34 Pro*COBOL Embedded SQL Statements for Opening and Closing Persistent LOBs and BFILEs</p>
<table class="cellalignment910" title=" Pro*COBOL Embedded SQL Statements for Opening and Closing Persistent LOBs and BFILEs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t53">Statement</th>
<th class="cellalignment906" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t53" headers="r1c1-t53">
<p class="synopsis">OPEN</p>
</td>
<td class="cellalignment907" headers="r2c1-t53 r1c2-t53">
<p>Opens a LOB or <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t53" headers="r1c1-t53">
<p class="synopsis">DESCRIBE [ISOPEN]</p>
</td>
<td class="cellalignment907" headers="r3c1-t53 r1c2-t53">
<p>Sees if a LOB or <code>BFILE</code> is open.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t53" headers="r1c1-t53">
<p class="synopsis">CLOSE</p>
</td>
<td class="cellalignment907" headers="r4c1-t53 r1c2-t53">
<p>Closes a LOB or <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1008676"></a>
<div id="ADLOB45461" class="sect1">
<h2 class="sect1">Using COM (Oracle Objects for OLE) to Work With LOBs</h2>
<p>Oracle Objects for OLE (OO4O) is a set of programmable COM objects that simplifies the development of applications designed to communicate with an Oracle Database. OO4O offers high performance database access. It also provides easy access to features unique to Oracle, yet otherwise cumbersome or inefficient to use from other ODBC or OLE DB-based components, such as ADO.</p>
<p>You can make changes to an entire persistent LOB, or to pieces of the beginning, middle or end of it, with the Oracle Objects for OLE (OO4O) API, by using one of the following objects interfaces:</p>
<ul>
<li>
<p><span class="bold">OraBlob</span><code>:</code> To provide methods for performing operations on BLOB data types in the database</p>
</li>
<li>
<p><span class="bold">OraClob</span><code>:</code> To provide methods for performing operations on CLOB data types in the database</p>
</li>
<li>
<p><span class="bold">OraBFile</span><code>:</code> To provide methods for performing operations on BFILE data stored in operating system files.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<span class="italic">Oracle</span>Blob and <span class="italic">Oracle</span>Clob have been deprecated and no longer work</div>
</li>
</ul>
<div id="ADLOB45462" class="sect2"><a id="sthref669"></a>
<h3 class="sect2"><a id="sthref670"></a>OO4O Syntax Reference</h3>
<p>The OO4O syntax reference and further information is viewed from the OO4O online help. Oracle Objects for OLE (OO4O), is a Windows-based product included with the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OOFOL" href="../../win.112/e17727/toc.htm"><span class="italic">Oracle Objects for OLE Developer's Guide</span></a></div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45463" class="sect2"><a id="sthref671"></a>
<h3 class="sect2"><a id="sthref672"></a>OraBlob, OraClob, and OraBfile Object Interfaces Encapsulate Locators</h3>
<p>These interfaces encapsulate LOB locators, so you do not deal directly with locators, but instead, can use methods and properties provided to perform operations and get state information.</p>
<div id="ADLOB45464" class="sect3"><a id="sthref673"></a>
<h4 class="sect3">OraBlob and OraClob Objects Are Retrieved as Part of Dynaset</h4>
<p>When <code>OraBlob</code> and <code>OraClob</code> objects are retrieved as a part of a dynaset, these objects represent LOB locators of the dynaset current row. If the dynaset current row changes due to a move operation, then the <code>OraBlob</code> and <code>OraClob</code> objects represent the LOB locator for the <span class="italic">new</span> current row.</p>
</div>
<!-- class="sect3" -->
<div id="ADLOB45465" class="sect3"><a id="sthref674"></a>
<h4 class="sect3">Use the <a id="sthref675"></a>Clone Method to Retain Locator Independent of the Dynaset Move</h4>
<p>To retain the LOB locator of the <code>OraBlob</code> and <code>OraClob</code> object independent of the dynaset move operation, use the <code>Clone</code> method. This method returns the <code>OraBlob</code> and <code>OraClob</code> object. You can also use these objects as PL/SQL bind parameters.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45466" class="sect2"><a id="sthref676"></a>
<h3 class="sect2">Example of OraBlob and OraBfile</h3>
<p>The following example shows usage of OraBlob and OraBfile.</p>
<pre>
Dim OraDyn as OraDynaset, OraSound1 as OraBLOB, OraSoundClone as OraBlob, OraMyBfile as OraBFile

OraConnection.BeginTrans
set OraDyn = OraDb.CreateDynaset("select * from print_media order by product_id", ORADYN_DEFAULT)
set OraSound1 = OraDyn.Fields("Sound").value
set OraSoundClone = OraSound1

OraParameters.Add "id", 1,ORAPARAM_INPUT
OraParameters.Add "mybfile", Empty,ORAPARAM_OUTPUT
OraParameters("mybfile").ServerType = ORATYPE_BFILE

OraDatabase.ExecuteSQL ("begin  GetBFile(:id, :mybfile ") end")

Set OraMyBFile = OraParameters("mybfile").value
<span class="codeinlineitalic">'Go to Next row</span>
OraDyn.MoveNext

OraDyn.Edit
<span class="codeinlineitalic">'Lets update OraSound1 data with that from the BFILE</span>
OraSound1.<span class="bold">Copy</span>FromBFile  OraMyBFile
OraDyn.Update

OraDyn.MoveNext
<span class="codeinlineitalic">'Go to Next row</span>
OraDyn.Edit
<span class="codeinlineitalic">'Lets update OraSound1 by appending with LOB data from 1st row represented by </span>
'OraSoundClone
OraSound1.Append  OraSoundClone
OraDyn.Update

OraConnection.CommitTrans
</pre>
<p>In the preceding example:</p>
<ul>
<li>
<p><code>OraSound1</code> represents the locator for the current row in the dynaset</p>
</li>
<li>
<p><code>OraSoundClone</code> represents the locator for the 1st row.</p>
</li>
</ul>
<p>A change in the current row (say a <code>OraDyn.MoveNext</code>) means the following:</p>
<ul>
<li>
<p><code>OraSound1</code> represents the locator for the 2nd row.</p>
</li>
<li>
<p><code>OraSoundClone</code> represents the locator in the 1st row. <code>OraSoundClone</code> only refers the locator for the 1st row irrespective of any <code>OraDyn</code> row navigation).</p>
</li>
<li>
<p><code>OraMyBFile</code> refers to the locator obtained from an PL/SQL "OUT" parameter as a result of executing a PL/SQL procedure, either by doing an <code>OraDatabase</code>.<code>ExecuteSQL</code>.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
A LOB obtained by executing SQL is only valid for the duration of the transaction. For this reason, "BEGINTRANS" and "COMMITTRANS" are used to specify the duration of the transaction.</div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45467" class="sect2"><a id="sthref677"></a>
<h3 class="sect2"><a id="sthref678"></a>OO4O Methods and Properties to Access Data Stored in LOBs</h3>
<p>Oracle Objects for OLE (OO4O) includes methods and properties that you can use to access data stored in <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
APIs for supported LOB operations are described in detail in:
<ul>
<li>
<p><a href="adlob_creating.htm#g1009782">Chapter 19, "Operations Specific to Persistent and Temporary LOBs"</a></p>
</li>
<li>
<p><a href="adlob_lob_ops.htm#g1113588">Chapter 22, " Using LOB APIs"</a></p>
</li>
<li>
<p><a href="adlob_bfile_ops.htm#g1088337">Chapter 21, "LOB APIs for BFILE Operations"</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The OO4O online help for detailed information including parameters, parameter types, return values, and example code. Oracle Objects for OLE (OO4O), a Windows-based product included with the database, has no manuals, only online help. The OO4O online help is available through the Application Development submenu of the database installation.</div>
<p>The following OO4O methods and properties operate on <code>BLOB</code>s, <code>CLOB</code>s, <code>NCLOB</code>s, and <code>BFILE</code>s:</p>
<ul>
<li>
<p>To modify persistent LOBs, see <a href="#g1039545">Table 13-35</a></p>
</li>
<li>
<p>To read or examine internal and external LOB values, see <a href="#g1039573">Table 13-36</a></p>
</li>
<li>
<p>To open and close <code>BFILE</code>s, see <a href="#g1039586">Table 13-37</a></p>
</li>
<li>
<p>For LOB buffering, see <a href="#g1039599">Table 13-38</a></p>
</li>
<li>
<p>Properties such as to see if LOB is <code>NULL</code>, or to get or set polling amount, see <a href="#g1039615">Table 13-39</a></p>
</li>
<li>
<p>For read-only <code>BFILE</code> methods, see <a href="#g1039637">Table 13-40</a></p>
</li>
<li>
<p>For BFILE properties, see <a href="#g1039972">Table 13-41</a></p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45468" class="sect2"><a id="sthref679"></a>
<h3 class="sect2"><a id="sthref680"></a><a id="sthref681"></a>OO4O Methods to Modify BLOB, CLOB, and NCLOB Values</h3>
<div id="ADLOB45469" class="tblformalwide">
<p class="titleintable"><a id="sthref682"></a><a id="g1039545"></a>Table 13-35 OO4O Methods to Modify BLOB, CLOB, and NCLOB Values</p>
<table class="cellalignment910" title=" OO4O Methods to Modify BLOB, CLOB, and NCLOB Values " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t59">Methods</th>
<th class="cellalignment906" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t59" headers="r1c1-t59">
<p><code>OraBlob.Append</code></p>
<p><code>OraClob.Append</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t59 r1c2-t59">
<p>Appends <code>BLOB</code> value to another LOB.</p>
<p>Appends <code>CLOB</code> or <code>NCLOB</code> value to another LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t59" headers="r1c1-t59">
<p><code>OraBlob.Copy</code></p>
<p><code>OraClob.Copy</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t59 r1c2-t59">
<p>Copies a portion of a <code>BLOB</code> into another LOB</p>
<p>Copies a portion of a <code>CLOB</code> or <code>NCLOB</code> into another LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t59" headers="r1c1-t59">
<p><code>OraBlob.Erase</code></p>
<p><code>OraClob.Erase</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t59 r1c2-t59">
<p>Erases part of a <code>BLOB</code>, starting at a specified offset</p>
<p>Erases part of a <code>CLOB</code> or <code>NCLOB</code>, starting at a specified offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t59" headers="r1c1-t59">
<p><code>OraBlob.CopyFromBFile</code></p>
<p><code>OraClob.CopyFromBFile</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t59 r1c2-t59">
<p>Loads <code>BFILE</code> data into an internal <code>BLOB</code></p>
<p>Loads <code>BFILE</code> data into an internal <code>CLOB</code> or <code>NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t59" headers="r1c1-t59">
<p><code>OraBlob.Trim</code></p>
<p><code>OraClob.Trim</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t59 r1c2-t59">
<p>Truncates a <code>BLOB</code></p>
<p>Truncates a <code>CLOB or NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t59" headers="r1c1-t59">
<p><code>OraBlob.CopyFromFile</code></p>
<p><code>OraClob.CopyFromFile</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t59 r1c2-t59">
<p>Writes data from a file to a <code>BLOB</code></p>
<p>Writes data from a file to a <code>CLOB</code> or <code>NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t59" headers="r1c1-t59">
<p><code>OraBlob.Write</code></p>
<p><code>OraClob.Write</code></p>
</td>
<td class="cellalignment907" headers="r8c1-t59 r1c2-t59">
<p>Writes data to the <code>BLOB</code></p>
<p>Writes data to the <code>CLOB</code> or <code>NCLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45470" class="sect2"><a id="sthref683"></a>
<h3 class="sect2"><a id="sthref684"></a>OO4O Methods to Read or Examine Internal and External LOB Values</h3>
<div id="ADLOB45471" class="tblformalwide">
<p class="titleintable"><a id="sthref685"></a><a id="g1039573"></a>Table 13-36 OO4O Methods to Read or Examine Internal and External LOB Values</p>
<table class="cellalignment910" title=" OO4O Methods to Read or Examine Internal and External LOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t60">Function/Procedure</th>
<th class="cellalignment906" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t60" headers="r1c1-t60">
<p><code>OraBlob.Read</code></p>
<p><code>OraClob.Read</code></p>
<p><code>OraBFile.Read</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t60 r1c2-t60">
<p>Reads a specified portion of a non-<code>NULL</code> <code>BLOB</code> into a buffer</p>
<p>Reads a specified portion of a non-<code>NULL</code> <code>CLOB</code> into a buffer</p>
<p>Reads a specified portion of a non-<code>NULL</code> <code>BFILE</code> into a buffer</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t60" headers="r1c1-t60">
<p><code>OraBlob.CopyToFile</code></p>
<p><code>OraClob.CopyToFile</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t60 r1c2-t60">
<p>Reads a specified portion of a non-<code>NULL</code> <code>BLOB</code> to a file</p>
<p>Reads a specified portion of a non-<code>NULL</code> <code>CLOB</code> to a file</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45472" class="sect2"><a id="sthref686"></a>
<h3 class="sect2"><a id="sthref687"></a><a id="sthref688"></a>OO4O Methods to Open and Close External LOBs (BFILEs)</h3>
<div id="ADLOB45473" class="tblformalwide">
<p class="titleintable"><a id="sthref689"></a><a id="g1039586"></a>Table 13-37 OO4O Methods to Open and Close External LOBs (BFILEs)</p>
<table class="cellalignment910" title=" OO4O Methods to Open and Close External LOBs (BFILEs)" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t61">Method</th>
<th class="cellalignment906" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t61" headers="r1c1-t61">
<p><code>OraBFile.Open</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t61 r1c2-t61">
<p>Opens <code>BFILE</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t61" headers="r1c1-t61">
<p><code>OraBFile.Close</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t61 r1c2-t61">
<p>Closes <code>BFILE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45474" class="sect2"><a id="sthref690"></a>
<h3 class="sect2"><a id="sthref691"></a><a id="sthref692"></a>OO4O Methods for Persistent LOB Buffering</h3>
<div id="ADLOB45475" class="tblformalwide">
<p class="titleintable"><a id="sthref693"></a><a id="g1039599"></a>Table 13-38 OO4O Methods for Persistent LOB Buffering</p>
<table class="cellalignment910" title=" OO4O Methods for Persistent LOB Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t62">Method</th>
<th class="cellalignment906" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t62" headers="r1c1-t62">
<p><code>OraBlob.FlushBuffer</code></p>
<p><code>OraClob.FlushBuffer</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t62 r1c2-t62">
<p>Flushes changes made to the <code>BLOB</code> buffering subsystem to the database</p>
<p>Flushes changes made to the <code>CLOB</code> buffering subsystem to the database</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t62" headers="r1c1-t62">
<p><code>OraBlob.EnableBuffering</code></p>
<p><code>OraClob.EnableBuffering</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t62 r1c2-t62">
<p>Enables buffering of <code>BLOB</code> operations</p>
<p>Enables buffering of <code>CLOB</code> operations</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t62" headers="r1c1-t62">
<p><code>OraBlob.DisableBuffering</code></p>
<p><code>OraClob.DisableBuffering</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t62 r1c2-t62">
<p>Disables buffering of <code>BLOB</code> operations</p>
<p>Disables buffering of <code>CLOB</code> operations</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45476" class="sect2"><a id="sthref694"></a>
<h3 class="sect2"><a id="sthref695"></a>OO4O Properties for Operating on LOBs</h3>
<div id="ADLOB45477" class="tblformalwide">
<p class="titleintable"><a id="sthref696"></a><a id="g1039615"></a>Table 13-39 OO4O Properties for Operating on LOBs</p>
<table class="cellalignment910" title=" OO4O Properties for Operating on LOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t63">Property</th>
<th class="cellalignment906" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t63" headers="r1c1-t63">
<p><code>IsNull (Read)</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t63 r1c2-t63">
<p>Indicates when a LOB is <code>NULL</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t63" headers="r1c1-t63">
<p><code>PollingAmount(Read/Write)</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t63 r1c2-t63">
<p>Gets/Sets total amount for Read/Write polling operation</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t63" headers="r1c1-t63">
<p><code>Offset(Read/Write)</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t63 r1c2-t63">
<p>Gets/Sets offset for Read/Write operation. By default, it is set to 1.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t63" headers="r1c1-t63">
<p><code>Status(Read)</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t63 r1c2-t63">
<p>Returns the polling status. Possible values are</p>
<ul>
<li>
<p><code>ORALOB_NEED_DATA</code> There is more data to be read or written</p>
</li>
<li>
<p><code>ORALOB_NO_DATA</code> There is no more data to be read or written</p>
</li>
<li>
<p><code>ORALOB_SUCCESS_LOB</code> data read/written successfully</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t63" headers="r1c1-t63">
<p><code>Size(Read)</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t63 r1c2-t63">
<p>Returns the length of the LOB data</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45478" class="sect2"><a id="sthref697"></a>
<h3 class="sect2"><a id="sthref698"></a><a id="sthref699"></a>OO4O Read-Only Methods for External Lobs (BFILEs)</h3>
<div id="ADLOB45479" class="tblformalwide">
<p class="titleintable"><a id="sthref700"></a><a id="g1039637"></a>Table 13-40 OO4O Read-Only Methods for External LOBs (BFILEs)</p>
<table class="cellalignment910" title=" OO4O Read-Only Methods for External LOBs (BFILEs) " summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t64">Methods</th>
<th class="cellalignment906" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t64" headers="r1c1-t64">
<p><code>OraBFile.Close</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t64 r1c2-t64">
<p>Closes an open <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t64" headers="r1c1-t64">
<p><code>OraBFile.CloseAll</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t64 r1c2-t64">
<p>Closes all open <code>BFILE</code>s</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t64" headers="r1c1-t64">
<p><code>OraBFile.Open</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t64 r1c2-t64">
<p>Opens a <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t64" headers="r1c1-t64">
<p><code>OraBFile.IsOpen</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t64 r1c2-t64">
<p>Determines if a <code>BFILE</code> is open</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45480" class="sect2"><a id="sthref701"></a>
<h3 class="sect2"><a id="sthref702"></a><a id="sthref703"></a>OO4O Properties for Operating on External LOBs (BFILEs)</h3>
<div id="ADLOB45481" class="tblformalwide">
<p class="titleintable"><a id="sthref704"></a><a id="g1039972"></a>Table 13-41 OO4O Properties for Operating on External LOBs (BFILEs)</p>
<table class="cellalignment910" title="OO4O Properties for Operating on External LOBs (BFILEs)" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t65">Property</th>
<th class="cellalignment906" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t65" headers="r1c1-t65">
<p><code>OraBFile.DirectoryName</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t65 r1c2-t65">
<p>Gets/Sets the server side directory object name.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t65" headers="r1c1-t65">
<p><code>OraBFile.FileName(Read/Write)</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t65 r1c2-t65">
<p>Gets/Sets the server side filename.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t65" headers="r1c1-t65">
<p><code>OraBFile.Exists</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t65 r1c2-t65">
<p>Checks whether a <code>BFILE</code> exists.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1009032"></a>
<div id="ADLOB45482" class="sect1">
<h2 class="sect1">Using Java (JDBC) to Work With LOBs</h2>
<p>You can perform the following tasks on LOBs with Java (JDBC):</p>
<ul>
<li>
<p><a href="#i1009052">Modifying Internal Persistent LOBs Using Java</a></p>
</li>
<li>
<p><a href="#i1009059">Reading Internal Persistent LOBs and External LOBs (BFILEs) With Java</a></p>
</li>
<li>
<p><a href="#i1009067">Calling DBMS_LOB Package from Java (JDBC)</a></p>
</li>
<li>
<p><a href="#i1009071">Referencing LOBs Using Java (JDBC)</a></p>
</li>
<li>
<p>Create and Manipulate Temporary LOBs and Store Them in Tables as Permanent LOBs. See <a href="#BABEIDBE">JDBC Temporary LOB APIs</a></p>
</li>
</ul>
<a id="i1009052"></a>
<div id="ADLOB45483" class="sect2">
<h3 class="sect2"><a id="sthref705"></a>Modifying Internal Persistent LOBs Using Java</h3>
<p>You can make changes to an entire persistent LOB, or to pieces of the beginning, middle, or end of a persistent LOB in Java by means of the JDBC API using the classes:</p>
<ul>
<li>
<p><code>oracle</code>.<code>sql</code>.<code>BLOB</code></p>
</li>
<li>
<p><code>oracle</code>.<code>sql</code>.<code>CLOB</code></p>
</li>
</ul>
<p>These classes implement <code><a id="sthref706"></a>java.sql.Blob</code> and <code><a id="sthref707"></a>java.sql.Clob</code> interfaces according to the <a id="sthref708"></a>JDBC 3.0 specification, which has methods for LOB modification. They also include legacy Oracle proprietary methods for LOB modification. These legacy methods are marked as deprecated.</p>
<p>Starting in Oracle Database Release 11.1, the minimum supported version of the JDK is JDK5. To use JDK5, place <code>ojdbc5.jar</code> in your <code>CLASSPATH</code>. To use JDK6, place <code>ojdbc6.jar</code> in your <code>CLASSPATH</code>. <code>ojdbc5.jar</code> supports the JDBC 3.0 specification and <code>ojdbc6.jar</code> supports the JDBC4.0 specification which is new with JDK6.</p>
<p>Oracle recommends that you discontinue use of the deprecated proprietary APIs described in Table 7-42.</p>
<div id="ADLOB45484" class="tblformalwide">
<p class="titleintable"><a id="sthref709"></a><a id="CJAEHBAA"></a>Table 13-42 BLOB Method Equivalents</p>
<table class="cellalignment910" title="BLOB Method Equivalents" summary="BLOB methods, Oracle versus JDBC 3.0" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t66">Oracle Proprietary Method (Deprecated)</th>
<th class="cellalignment906" id="r1c2-t66">JDBC 3.0 Standard Method Replacement</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t66" headers="r1c1-t66">
<p>putBytes(long pos, byte [] bytes)</p>
</td>
<td class="cellalignment907" headers="r2c1-t66 r1c2-t66">
<p>setBytes(long pos, byte[] bytes)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t66" headers="r1c1-t66">
<p>putBytes(long pos, byte [] bytes, int length)</p>
</td>
<td class="cellalignment907" headers="r3c1-t66 r1c2-t66">
<p>setBytes(long pos, byte[] bytes, int offset, int len)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t66" headers="r1c1-t66">
<p>getBinaryOutputStream(long pos)</p>
</td>
<td class="cellalignment907" headers="r4c1-t66 r1c2-t66">
<p>setBinaryStream(long pos)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t66" headers="r1c1-t66">
<p>trim (long len)</p>
</td>
<td class="cellalignment907" headers="r5c1-t66 r1c2-t66">
<p>truncate(long len)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45485" class="tblformalwide">
<p class="titleintable"><a id="sthref710"></a><a id="CJAJCGGH"></a>Table 13-43 CLOB Method Equivalents</p>
<table class="cellalignment910" title="CLOB Method Equivalents" summary="CLOB methods, Oracle vs JDBC 3.0" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t67">Oracle Proprietary Method (Deprecated)</th>
<th class="cellalignment906" id="r1c2-t67">JDBC 3.0 Standard Method Replacement</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t67" headers="r1c1-t67">
<p>putString(long pos, String str)</p>
</td>
<td class="cellalignment907" headers="r2c1-t67 r1c2-t67">
<p>setString(long pos, String str)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t67" headers="r1c1-t67">
<p>N/A</p>
</td>
<td class="cellalignment907" headers="r3c1-t67 r1c2-t67">
<p>setString(long pos, String str, int offset, int len)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t67" headers="r1c1-t67">
<p>getAsciiOutputStream(long pos)</p>
</td>
<td class="cellalignment907" headers="r4c1-t67 r1c2-t67">
<p>setAsciiStream(long pos)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t67" headers="r1c1-t67">
<p>getCharacterOutputStream(long pos)</p>
</td>
<td class="cellalignment907" headers="r5c1-t67 r1c2-t67">
<p>setCharacterStream(long pos)</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t67" headers="r1c1-t67">
<p>trim (long len)</p>
</td>
<td class="cellalignment907" headers="r6c1-t67 r1c2-t67">
<p>truncate(long len)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="i1009059"></a>
<div id="ADLOB45486" class="sect2">
<h3 class="sect2"><a id="sthref711"></a>Reading Internal Persistent LOBs and External LOBs (BFILEs) With Java</h3>
<p>With JDBC you can use Java to read both internal persistent LOBs and external LOBs (<code>BFILE</code>s).</p>
<div id="ADLOB45487" class="sect3"><a id="sthref712"></a>
<h4 class="sect3">BLOB, CLOB, and BFILE Classes</h4>
<ul>
<li>
<p><span class="bolditalic">BLOB</span> <span class="bolditalic">and</span> <span class="bolditalic">CLOB</span> <span class="bolditalic">Classes.</span> In JDBC theses classes provide methods for performing operations on large objects in the database including <code>BLOB</code> and <code>CLOB</code> data types.</p>
</li>
<li>
<p><span class="bolditalic">BFILE</span> <span class="bolditalic">Class.</span> In JDBC this class provides methods for performing operations on <code>BFILE</code> data in the database.</p>
</li>
</ul>
<p>The <code>BLOB</code>, <code>CLOB</code>, and <code>BFILE</code> classes encapsulate LOB locators, so you do not deal with locators but instead use methods and properties provided to perform operations and get state information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009067"></a>
<div id="ADLOB45488" class="sect2">
<h3 class="sect2"><a id="sthref713"></a>Calling DBMS_LOB Package from Java (JDBC)</h3>
<p>Any LOB functionality not provided by these classes can be accessed by a call to the PL/SQL <code>DBMS_LOB</code> package. This technique is used repeatedly in the examples throughout this manual.</p>
</div>
<!-- class="sect2" -->
<a id="BABCAFJI"></a>
<div id="ADLOB45489" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref714"></a>LOB Prefetching to Improve Performance</h3>
<p>The number of server round trips can be reduced by prefetching part of the data and metadata (length and chunk size) along with the LOB locator during the fetch. The <code>SELECT</code> parse, execution, and fetch occurs in one round trip. For large LOBs (larger than five times the prefetch size) less improvement is seen.</p>
<p>To configure the prefetch size, a connection property, <code>oracle.jdbc.defaultLobPrefetchSize</code>, defined as a constant in <code>oracle.jdbc.OracleConnection</code> can be used. Values can be -1 to disable prefetching, 0 to enable prefetching for metadata only, or any value greater than 0 which represents the number of bytes for <code>BLOB</code>s and characters for <code>CLOB</code>s, to be prefetched along with the locator during fetch operations.</p>
<p>You can change the prefetch size for a particular statement by using a method defined in <code>oracle.jdbc.OracleStatement</code>:</p>
<pre>
void setLobPrefetchSize(int size) throws SQLException;
</pre>
<p>The statement level setting overrides the setting at the connection level. This setting can also be overriden at the column level through the extended <code>defineColumnType</code> method, where the size represents the number of bytes (or characters for <code>CLOB</code>) to prefetch. The possible values are the same as for the connection property. The type must be set to <code>OracleTypes.CLOB</code> for a <code>CLOB</code> column and <code>OracleTypes.BLOB</code> for a <code>BLOB</code> column. This method throws <code>SQLException</code> if the value is less than -1. To complement the statement there is in <code>oracle.jdbc.OracleStatement</code>:</p>
<pre>
int getLobPrefetchSize();
</pre></div>
<!-- class="sect2" -->
<div id="ADLOB45490" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref715"></a>
<h3 class="sect2"><a id="sthref716"></a>Zero-Copy Input/Output for SecureFiles to Improve Performance</h3>
<p>To improve the performance of SecureFiles, there is a Zero-copy Input/Output protocol on the server that is only available to network clients that support the new Net NS Data transfer protocol.</p>
<p>To determine if a LOB is a SecureFiles or not, use the method</p>
<pre>
public boolean isSecureFile() throws SQLException
</pre>
<p>If it is a SecureFiles, <code>TRUE</code> is returned.</p>
<p>Use this thin connection property to disable (by setting to <code>FALSE</code>) the Zero-copy Input/Output protocol:</p>
<pre>
oracle.net.useZeroCopyIO
</pre>
<div id="ADLOB45491" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref717"></a>
<h4 class="sect3">Zero-Copy Input/Output on the Server</h4>
<p>Oracle Net Services is now able to use data buffers provided by the users of Oracle Net Services without transferring the data into or out of its local buffers. The network buffers (at the NS layer) are bypassed and internal lob buffers are directly written on the network. The same applies to buffer reads.</p>
<p>This feature is only available to network clients that support the new NS Data packet (this is negotiated during the NS handshake). The thin driver supports the new NS protocol so that the server can use the zero-copy protocol and JavaNet exposes the zero-copy IO mechanism to the upper layer so that data copies are no longer required in the thin driver code.</p>
</div>
<!-- class="sect3" -->
<div id="ADLOB45492" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref718"></a>
<h4 class="sect3">Zero-Copy Input/Output in the JDBC Thin Driver</h4>
<p>When you call the <code>BLOB.getBytes(long pos, int length, byte[] buffer)</code> API, the buffer provided is used at the JavaNet layer to read the bytes from the socket. The data is retrieved in one single round trip. Similarly, during a write operation, when you call <code>BLOB.setBytes(long pos, byte[] bytes)</code>, the buffer is directly written on the network at the JavaNet layer. So the data is written in one single round trip. The user buffer is sent as a whole.</p>
</div>
<!-- class="sect3" -->
<div id="ADLOB45493" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref719"></a>
<h4 class="sect3">JDBC-OCI Driver Considerations</h4>
<p>The JDBC-OCI driver supports Zero-copy Input/Output in the server and in the network layer.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009071"></a>
<div id="ADLOB45494" class="sect2">
<h3 class="sect2"><a id="sthref720"></a>Referencing LOBs Using Java (JDBC)</h3>
<p>You can get a reference to any of the preceding LOBs in the following two ways:</p>
<ul>
<li>
<p>As a column of an <code>OracleResultSet</code></p>
</li>
<li>
<p>As an <code>OUT</code> type PL/SQL parameter from an <code>OraclePreparedStatement</code></p>
</li>
</ul>
<div id="ADLOB45495" class="sect3"><a id="sthref721"></a>
<h4 class="sect3"><a id="sthref722"></a><a id="sthref723"></a>Using OracleResultSet: BLOB and CLOB Objects Retrieved</h4>
<p>When <code>BLOB</code> and <code>CLOB</code> objects are retrieved as a part of an <code>OracleResultSet</code>, these objects represent LOB locators of the currently selected row.</p>
<p>If the current row changes due to a move operation, for example, <code>rset</code>.<code>next</code>(), then the retrieved locator still refers to the original LOB row.</p>
<p>To retrieve the locator for the most current row, you must call <code>getBLOB()</code>, <code>getCLOB()</code>, or <code>getBFILE()</code> on the <code>OracleResultSet</code> each time a move operation is made depending on whether the instance is a <code>BLOB</code>, <code>CLOB</code> or <code>BFILE</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45496" class="sect2"><a id="sthref724"></a>
<h3 class="sect2"><a id="sthref725"></a>JDBC Syntax References and Further Information</h3>
<p>For further JDBC syntax and information about using JDBC with LOBs:</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDBC15000" href="../../java.112/e16548/oralob.htm#JJDBC15000"><span class="italic">Oracle Database JDBC Developer's Guide and Reference,</span></a>for detailed documentation, including parameters, parameter types, return values, and example code.</p>
</li>
<li>
<p><code><a href="http://www.oracle.com/technology/">http://www.oracle.com/technology/</a></code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADLOB45497" class="sect2"><a id="sthref726"></a>
<h3 class="sect2">JDBC Methods for Operating on LOBs</h3>
<p>The following JDBC methods operate on <code>BLOB</code>s, <code>CLOB</code>s, and <code>BFILE</code>s:</p>
<ul>
<li>
<p><code>BLOB</code>s:</p>
<ul>
<li>
<p>To modify <code>BLOB</code> values, see <a href="#g1039682">Table 13-44</a></p>
</li>
<li>
<p>To read or examine <code>BLOB</code> values, see <a href="#g1039692">Table 13-45</a></p>
</li>
<li>
<p>For <code>BLOB</code> buffering, see <a href="#g1039717">Table 13-46</a></p>
</li>
<li>
<p>Temporary <code>BLOB</code>s: Creating, checking if <code>BLOB</code> is open, and freeing. See <a href="#g1039847">Table 13-54</a></p>
</li>
<li>
<p>Opening, closing, and checking if <code>BLOB</code> is open, see <a href="#g1039847">Table 13-54</a></p>
</li>
<li>
<p>Truncating <code>BLOB</code>s, see <a href="#g1039898">Table 13-57</a></p>
</li>
<li>
<p><code>BLOB</code> streaming API, see <a href="#g1039922">Table 13-59</a></p>
</li>
</ul>
</li>
<li>
<p><code>CLOB</code>s:</p>
<ul>
<li>
<p>To read or examine <code>CLOB</code> values, see <a href="#g1039743">Table 13-48</a></p>
</li>
<li>
<p>For <code>CLOB</code> buffering, see <a href="#g1039771">Table 13-49</a></p>
</li>
<li>
<p>To modify <code>CLOB</code>s, see <a href="#g1039922">Table 13-59</a></p>
</li>
</ul>
</li>
<li>
<p>Temporary <code>CLOB</code>s:</p>
<ul>
<li>
<p>Opening, closing, and checking if <code>CLOB</code> is open, see <a href="#g1039863">Table 13-55</a></p>
</li>
<li>
<p>Truncating <code>CLOB</code>s, see <a href="#g1039908">Table 13-58</a></p>
</li>
<li>
<p><code>CLOB</code> streaming API, see <a href="#g1039935">Table 13-60</a></p>
</li>
</ul>
</li>
<li>
<p><code>BFILE</code>s:</p>
<ul>
<li>
<p>To read or examine <code>BFILE</code>s, see <a href="#g1039790">Table 13-50</a></p>
</li>
<li>
<p>For <code>BFILE</code> buffering, see <a href="#g1039833">Table 13-51</a></p>
</li>
<li>
<p>Opening, closing, and checking if <code>BFILE</code> is open, see <a href="#g1039879">Table 13-56</a></p>
</li>
<li>
<p>BFILE streaming API, see <a href="#g1039954">Table 13-61</a></p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADLOB45498" class="sect2"><a id="sthref727"></a>
<h3 class="sect2"><a id="sthref728"></a><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a>JDBC oracle.sql.BLOB Methods to Modify BLOB Values</h3>
<div id="ADLOB45499" class="tblformalwide">
<p class="titleintable"><a id="sthref732"></a><a id="g1039682"></a>Table 13-44 JDBC oracle.sql.BLOB Methods To Modify BLOB Values</p>
<table class="cellalignment910" title="JDBC oracle.sql.BLOB Methods To Modify BLOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t69">Method</th>
<th class="cellalignment906" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t69" headers="r1c1-t69">
<p><code>int setBytes(long, byte[])</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t69 r1c2-t69">
<p>Inserts the byte array into the <code>BLOB</code>, starting at the given offset</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45500" class="sect2"><a id="sthref733"></a>
<h3 class="sect2"><a id="sthref734"></a><a id="sthref735"></a><a id="sthref736"></a>JDBC oracle.sql.BLOB Methods to Read or Examine BLOB Values</h3>
<div id="ADLOB45501" class="tblformalwide">
<p class="titleintable"><a id="sthref737"></a><a id="g1039692"></a>Table 13-45 JDBC oracle.sql.BLOB Methods to Read or Examine BLOB Values</p>
<table class="cellalignment910" title="JDBC oracle.sql.BLOB Methods to Read or Examine BLOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t70">Method</th>
<th class="cellalignment906" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t70" headers="r1c1-t70">
<p><code>byte[] getBytes(long, int)</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t70 r1c2-t70">
<p>Gets the contents of the LOB as an array of bytes, given an offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t70" headers="r1c1-t70">
<p><code>long position(byte[],long)</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t70 r1c2-t70">
<p>Finds the given byte array within the LOB, given an offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t70" headers="r1c1-t70">
<p><code>long position(Blob,long)</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t70 r1c2-t70">
<p>Finds the given <code>BLOB</code> within the LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t70" headers="r1c1-t70">
<p><code>public boolean equals(java.lang.Object)</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t70 r1c2-t70">
<p>Compares this LOB with another. Compares the LOB locators.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t70" headers="r1c1-t70">
<p><code>public long length()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t70 r1c2-t70">
<p>Returns the length of the LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t70" headers="r1c1-t70">
<p><code>public int getChunkSize()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t70 r1c2-t70">
<p>Returns the <code>ChunkSize</code> of the LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45502" class="sect2"><a id="sthref738"></a>
<h3 class="sect2"><a id="sthref739"></a><a id="sthref740"></a>JDBC oracle.sql.BLOB Methods and Properties for BLOB Buffering</h3>
<div id="ADLOB45503" class="tblformalwide">
<p class="titleintable"><a id="sthref741"></a><a id="g1039717"></a>Table 13-46 JDBC oracle.sql.BLOB Methods and Properties for BLOB Buffering</p>
<table class="cellalignment910" title="JDBC oracle.sql.BLOB Methods and Properties for BLOB Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t71">Method</th>
<th class="cellalignment906" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t71" headers="r1c1-t71">
<p><code>public java.io.InputStream getBinaryStream())</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t71 r1c2-t71">
<p>Streams the LOB as a binary stream</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t71" headers="r1c1-t71">
<p><code>public java.io.OutputStream setBinaryStream()</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t71 r1c2-t71">
<p>Retrieves a stream that can be used to write to the <code>BLOB</code> value that this <code>Blob</code> object represents</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45504" class="sect2"><a id="sthref742"></a>
<h3 class="sect2"><a id="sthref743"></a><a id="sthref744"></a><a id="sthref745"></a>JDBC oracle.sql.CLOB Methods to Modify CLOB Values</h3>
<div id="ADLOB45505" class="tblformalwide">
<p class="titleintable"><a id="sthref746"></a><a id="sthref747"></a>Table 13-47 JDBC oracle.sql.CLOB Methods to Modify CLOB Values</p>
<table class="cellalignment910" title="JDBC oracle.sql.CLOB Methods to Modify CLOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t72">Method</th>
<th class="cellalignment906" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t72" headers="r1c1-t72">
<p><code>int setString(long, java.lang.String)</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t72 r1c2-t72">
<p>JDBC 3.0: Writes the given Java String to the <code>CLOB</code> value that this <code>Clob</code> object designates at the position <code>pos</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t72" headers="r1c1-t72">
<p><code>int putChars(long, char[])</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t72 r1c2-t72">
<p>Inserts the character array into the LOB, starting at the given offset</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45506" class="sect2"><a id="sthref748"></a>
<h3 class="sect2"><a id="sthref749"></a><a id="sthref750"></a><a id="sthref751"></a>JDBC oracle.sql.CLOB Methods to Read or Examine CLOB Value</h3>
<div id="ADLOB45507" class="tblformalwide">
<p class="titleintable"><a id="sthref752"></a><a id="g1039743"></a>Table 13-48 JDBC oracle.sql.CLOB Methods to Read or Examine CLOB Values</p>
<table class="cellalignment910" title="JDBC oracle.sql.CLOB Methods to Read or Examine CLOB Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t73">Method</th>
<th class="cellalignment906" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t73" headers="r1c1-t73">
<p><code>java.lang.String getSubString(long, int)</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t73 r1c2-t73">
<p>Returns a substring of the LOB as a string</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t73" headers="r1c1-t73">
<p><code>int getChars(long, int, char[])</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t73 r1c2-t73">
<p>Reads a subset of the LOB into a character array</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t73" headers="r1c1-t73">
<p><code>long position(java.lang.String, long)</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t73 r1c2-t73">
<p>Finds the given String within the LOB, given an offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t73" headers="r1c1-t73">
<p><code>long position(oracle.jdbc2.Clob, long)</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t73 r1c2-t73">
<p>Finds the given <code>CLOB</code> within the LOB, given an offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t73" headers="r1c1-t73">
<p><code>long length()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t73 r1c2-t73">
<p>Returns the length of the LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t73" headers="r1c1-t73">
<p><code>int getChunkSize()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t73 r1c2-t73">
<p>R<code>eturns the ChunkSize</code> of the LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45508" class="sect2"><a id="sthref753"></a>
<h3 class="sect2"><a id="sthref754"></a>JDBC oracle.sql.CLOB Methods and Properties for CLOB Buffering</h3>
<div id="ADLOB45509" class="tblformalwide">
<p class="titleintable"><a id="sthref755"></a><a id="g1039771"></a>Table 13-49 JDBC oracle.sql.CLOB Methods and Properties for CLOB Buffering</p>
<table class="cellalignment910" title="JDBC oracle.sql.CLOB Methods and Properties for CLOB Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t74">Method</th>
<th class="cellalignment906" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t74" headers="r1c1-t74">
<p><code>java.io.InputStream getAsciiStream()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t74 r1c2-t74">
<p>Implements the <code>Clob</code> interface method. Gets the <code>CLOB</code> value designated by this <code>Clob</code> object as a stream of ASCII bytes</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t74" headers="r1c1-t74">
<p><code>java.io.OutputStream setAsciiStream(long pos)</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t74 r1c2-t74">
<p>JDBC 3.0: Retrieves a stream to be used to write ASCII characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t74" headers="r1c1-t74">
<p><code>java.io.Reader getCharacterStream()</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t74 r1c2-t74">
<p>Reads the <code>CLOB</code> as a character stream</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t74" headers="r1c1-t74">
<p><code>java.io.Writer setCharacterStream(long pos)</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t74 r1c2-t74">
<p>JDBC 3.0: Retrieves a stream to be used to write Unicode characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45510" class="sect2"><a id="sthref756"></a>
<h3 class="sect2"><a id="sthref757"></a><a id="sthref758"></a><a id="sthref759"></a>JDBC oracle.sql.BFILE Methods to Read or Examine External LOB (BFILE) Values</h3>
<div id="ADLOB45511" class="tblformalwide">
<p class="titleintable"><a id="sthref760"></a><a id="g1039790"></a>Table 13-50 JDBC oracle.sql.BFILE Methods to Read or Examine External LOB (BFILE) Values</p>
<table class="cellalignment910" title="JDBC oracle.sql.BFILE Methods to Read or Examine External LOB (BFILE) Values" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t75">Method</th>
<th class="cellalignment906" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t75" headers="r1c1-t75">
<p><code>byte[] getBytes(long, int)</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t75 r1c2-t75">
<p><code>G</code>ets the contents of the <code>BFILE</code> as an array of bytes, given an offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t75" headers="r1c1-t75">
<p><code>int getBytes(long, int, byte[])</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t75 r1c2-t75">
<p>Reads a subset of the <code>BFILE</code> into a byte array</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t75" headers="r1c1-t75">
<p><code>long position(oracle.sql.BFILE, long)</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t75 r1c2-t75">
<p>Finds the first appearance of the given <code>BFILE</code> contents within the LOB, from the given offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t75" headers="r1c1-t75">
<p><code>long position(byte[], long)</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t75 r1c2-t75">
<p>Finds the first appearance of the given byte array within the <code>BFILE</code>, from the given offset</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t75" headers="r1c1-t75">
<p><code>long length()</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t75 r1c2-t75">
<p>R<code>eturns the length of the BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t75" headers="r1c1-t75">
<p><code>boolean fileExists()</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t75 r1c2-t75">
<p>Checks if the operating system file referenced by this <code>BFILE</code> exists</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t75" headers="r1c1-t75">
<p><code>public void openFile()</code></p>
</td>
<td class="cellalignment907" headers="r8c1-t75 r1c2-t75">
<p>Opens the operating system file referenced by this <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t75" headers="r1c1-t75">
<p><code>public void closeFile()</code></p>
</td>
<td class="cellalignment907" headers="r9c1-t75 r1c2-t75">
<p>C<code>loses the operating system file referenced by this BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t75" headers="r1c1-t75">
<p><code>public boolean isFileOpen()</code></p>
</td>
<td class="cellalignment907" headers="r10c1-t75 r1c2-t75">
<p>Checks if this <code>BFILE</code> is open</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t75" headers="r1c1-t75">
<p><code>public java.lang.String getDirAlias()</code></p>
</td>
<td class="cellalignment907" headers="r11c1-t75 r1c2-t75">
<p>G<code>ets the directory object name for this BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t75" headers="r1c1-t75">
<p><code>public java.lang.String getName()</code></p>
</td>
<td class="cellalignment907" headers="r12c1-t75 r1c2-t75">
<p>G<code>ets the file name referenced by this BFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45512" class="sect2"><a id="sthref761"></a>
<h3 class="sect2"><a id="sthref762"></a><a id="sthref763"></a>JDBC oracle.sql.BFILE Methods and Properties for BFILE Buffering</h3>
<div id="ADLOB45513" class="tblformalwide">
<p class="titleintable"><a id="sthref764"></a><a id="g1039833"></a>Table 13-51 JDBC oracle.sql.BFILE Methods and Properties for BFILE Buffering</p>
<table class="cellalignment910" title="JDBC oracle.sql.BFILE Methods and Properties for BFILE Buffering" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t76">Method</th>
<th class="cellalignment906" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t76" headers="r1c1-t76">
<p><code>public java.io.InputStream getBinaryStream()</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t76 r1c2-t76">
<p>Reads <code>the BFILE</code> as a binary stream</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<a id="BABEIDBE"></a>
<div id="ADLOB45514" class="sect2">
<h3 class="sect2">JDBC Temporary LOB APIs</h3>
<p>Oracle Database JDBC drivers contain APIs to create and close temporary LOBs. These APIs can replace workarounds that use the following procedures from the <code>DBMS_LOB</code> PL/SQL package in prior releases:</p>
<ul>
<li>
<p><code>DBMS_LOB.createTemporary()</code></p>
</li>
<li>
<p><code>DBMS_LOB.isTemporary()</code></p>
</li>
<li>
<p><code>DBMS_LOB.freeTemporary()</code></p>
</li>
</ul>
<div id="ADLOB45515" class="tblformalwide">
<p class="titleintable"><a id="sthref765"></a><a id="sthref766"></a>Table 13-52 JDBC: Temporary BLOB APIs</p>
<table class="cellalignment910" title="JDBC: Temporary BLOB APIs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t77">Methods</th>
<th class="cellalignment906" id="r1c2-t77">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t77" headers="r1c1-t77">
<p><code>public static BLOB createTemporary(Connection conn,</code></p>
<p><code>boolean cache, int duration) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t77 r1c2-t77">
<p>Creates a temporary <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t77" headers="r1c1-t77">
<p><code>public static boolean isTemporary(BLOB blob)</code></p>
<p><code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t77 r1c2-t77">
<p>Checks if the specified <code>BLOB</code> locator refers to a temporary <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t77" headers="r1c1-t77">
<p><code>public boolean isTemporary() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t77 r1c2-t77">
<p>Checks if the current <code>BLOB</code> locator refers to a temporary <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t77" headers="r1c1-t77">
<p><code>public static void freeTemporary(BLOB temp_blob)</code></p>
<p><code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t77 r1c2-t77">
<p>Frees the specified temporary <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t77" headers="r1c1-t77">
<p><code>public void freeTemporary() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t77 r1c2-t77">
<p>Frees the temporary <code>BLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45516" class="tblformalwide">
<p class="titleintable"><a id="sthref767"></a><a id="g1040069"></a>Table 13-53 JDBC: Temporary CLOB APIs</p>
<table class="cellalignment910" title="JDBC: Temporary CLOB APIs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t78">Methods</th>
<th class="cellalignment906" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t78" headers="r1c1-t78">
<p><code>public static CLOB createTemporary(Connection conn,</code></p>
<p><code>boolean cache, int duration) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t78 r1c2-t78">
<p>Creates a temporary <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t78" headers="r1c1-t78">
<p><code>public static boolean isTemporary(CLOB clob)</code></p>
<p><code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t78 r1c2-t78">
<p>Checks if the specified <code>CLOB</code> locator refers to a temporary <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t78" headers="r1c1-t78">
<p><code>public boolean isTemporary() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t78 r1c2-t78">
<p>Checks if the current <code>CLOB</code> locator refers to a temporary <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t78" headers="r1c1-t78">
<p><code>public static void freeTemporary(CLOB temp_clob)</code></p>
<p><code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t78 r1c2-t78">
<p>Frees the specified temporary <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t78" headers="r1c1-t78">
<p><code>public void freeTemporary() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t78 r1c2-t78">
<p>Frees the temporary <code>CLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADLOB45517" class="sect2"><a id="sthref768"></a>
<h3 class="sect2"><a id="sthref769"></a><a id="sthref770"></a><a id="sthref771"></a>JDBC: Opening and Closing LOBs</h3>
<p><code>oracle.sql.CLOB</code> class is the Oracle JDBC driver implementation of standard JDBC <code>java.sql.Clob</code> interface. <a href="#g1040069">Table 13-53</a> lists the Oracle extension APIs in <code>oracle.sql.CLOB</code> for accessing temporary CLOBs.</p>
<p>Oracle Database JDBC drivers contain APIs to explicitly open and close LOBs. These APIs replace previous techniques that use <code>DBMS_LOB.open()</code> and <code>DBMS_LOB.close()</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45518" class="sect2"><a id="sthref772"></a>
<h3 class="sect2">JDBC: Opening and Closing BLOBs</h3>
<p><code>oracle.sql.BLOB</code> class is the Oracle JDBC driver implementation of standard JDBC java.sql.Blob interface. <a href="#g1039847">Table 13-54</a> lists the Oracle extension APIs in <code>oracle.sql.BLOB</code> that open and close BLOBs.</p>
<div id="ADLOB45519" class="tblformalwide">
<p class="titleintable"><a id="sthref773"></a><a id="g1039847"></a>Table 13-54 JDBC: Opening and Closing BLOBs</p>
<table class="cellalignment910" title="JDBC: Opening and Closing BLOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t79">Methods</th>
<th class="cellalignment906" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t79" headers="r1c1-t79">
<p><code>public void open(int mode) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t79 r1c2-t79">
<p>Opens the <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t79" headers="r1c1-t79">
<p><code>public boolean isOpen() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t79 r1c2-t79">
<p>Sees if the <code>BLOB</code> is open</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t79" headers="r1c1-t79">
<p><code>public void close() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t79 r1c2-t79">
<p>Closes the <code>BLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45520" class="sect3"><a id="sthref774"></a>
<h4 class="sect3">Opening the BLOB Using JDBC</h4>
<p>To open a <code>BLOB</code>, your JDBC application can use the open method as defined in <code>oracle.sql.BLOB</code> class as follows:</p>
<pre>
/** 
 * Open a BLOB in the indicated mode. Valid modes include MODE_READONLY,
 * and MODE_READWRITE. It is an error to open the same LOB twice. 
 */ 
public void open (int mode) throws SQLException
</pre>
<p>Possible values of the mode parameter are:</p>
<pre>
public static final int MODE_READONLY 
public static final int MODE_READWRITE 
</pre>
<p>Each call to open opens the BLOB. For example:</p>
<pre>
BLOB blob = ... 
blob.open (BLOB.MODE_READWRITE);
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45521" class="sect3"><a id="sthref775"></a>
<h4 class="sect3">Checking If the BLOB Is Open Using JDBC</h4>
<p>To see if a <code>BLOB</code> is opened, your JDBC application can use the <code>isOpen</code> method defined in oracle.sql.BLOB. The return Boolean value indicates whether the <code>BLOB</code> has been previously opened or not. The <code>isOpen</code> method is defined as follows:</p>
<pre>
/** 
 * Check whether the BLOB is opened. 
 * @return true if the LOB is opened. 
 */ 
 public boolean isOpen () throws SQLException
</pre>
<p>The usage example is:</p>
<pre>
BLOB blob = ... 
// See if the BLOB is opened 
boolean isOpen = blob.isOpen ();
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45522" class="sect3"><a id="sthref776"></a>
<h4 class="sect3">Closing the BLOB Using JDBC</h4>
<p>To close a BLOB, your JDBC application can use the close method defined in <code>oracle.sql.BLOB</code>. The close API is defined as follows:</p>
<pre>
/** 
  * Close a previously opened BLOB. 
  */ 
public void close () throws SQLException
</pre>
<p>The usage example is:</p>
<pre>
BLOB blob = ... 
// close the BLOB 
blob.close ();
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45523" class="sect2"><a id="sthref777"></a>
<h3 class="sect2">JDBC: <a id="sthref778"></a><a id="sthref779"></a>Opening and Closing CLOBs</h3>
<p>Class <code>oracle.sql.CLOB</code> is the Oracle JDBC driver implementation of the standard JDBC <code>java.sql.Clob</code> interface. <a href="#g1039863">Table 13-55</a> lists the Oracle extension APIs in <code>oracle.sql.CLOB</code> to open and close <code>CLOB</code>s.</p>
<div id="ADLOB45524" class="tblformalwide">
<p class="titleintable"><a id="sthref780"></a><a id="g1039863"></a>Table 13-55 JDBC: Opening and Closing CLOBs</p>
<table class="cellalignment910" title="JDBC: Opening and Closing CLOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t80">Methods</th>
<th class="cellalignment906" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t80" headers="r1c1-t80">
<p><code>public void open(int mode) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t80 r1c2-t80">
<p>Open the <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t80" headers="r1c1-t80">
<p><code>public boolean isOpen() throws SQLExceptio</code>n</p>
</td>
<td class="cellalignment907" headers="r3c1-t80 r1c2-t80">
<p>See if the <code>CLOB</code> is opened</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t80" headers="r1c1-t80">
<p><code>public void close() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t80 r1c2-t80">
<p>Close the <code>CLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45525" class="sect3"><a id="sthref781"></a>
<h4 class="sect3">Opening the CLOB Using JDBC</h4>
<p>To open a <code>CLOB</code>, your JDBC application can use the open method defined in <code>oracle.sql.CLOB</code> class as follows:</p>
<pre>
/** 
 * Open a CLOB in the indicated mode. Valid modes include MODE_READONLY,
 * and MODE_READWRITE. It is an error to open the same LOB twice. 
 */ 
public void open (int mode) throws SQLException
</pre>
<p>The possible values of the mode parameter are:</p>
<pre>
public static final int MODE_READONLY 
public static final int MODE_READWRITE 
</pre>
<p>Each call to open opens the <code>CLOB</code>. For example,</p>
<pre>
CLOB clob = ... 
clob.open (CLOB.MODE_READWRITE);
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45526" class="sect3"><a id="sthref782"></a>
<h4 class="sect3">Checking If the CLOB Is Open Using JDBC</h4>
<p>To see if a <code>CLOB</code> is opened, your JDBC application can use the <code>isOpen</code> method defined in oracle.sql.CLOB. The return Boolean value indicates whether the <code>CLOB</code> has been previously opened or not. The <code>isOpen</code> method is defined as follows:</p>
<pre>
/** 
  * Check whether the CLOB is opened. 
  * @return true if the LOB is opened. 
  */ 
public boolean isOpen () throws SQLException
</pre>
<p>The usage example is:</p>
<pre>
CLOB clob = ... 
 // See if the CLOB is opened 
 boolean isOpen = clob.isOpen ();
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45527" class="sect3"><a id="sthref783"></a>
<h4 class="sect3">Closing the CLOB Using JDBC</h4>
<p>To close a <code>CLOB</code>, the JDBC application can use the close method defined in <code>oracle.sql.CLOB</code>. The close API is defined as follows:</p>
<pre>
/** 
* Close a previously opened CLOB. 
*/ 
public void close () throws SQLException
</pre>
<p>The usage example is:</p>
<pre>
CLOB clob = ... 
// close the CLOB 
clob.close ();
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45528" class="sect2"><a id="sthref784"></a>
<h3 class="sect2">JDBC: <a id="sthref785"></a><a id="sthref786"></a>Opening and Closing BFILEs</h3>
<p><code>oracle.sql.BFILE</code> class wraps the database <code>BFILE</code> object. <a href="#g1039879">Table 13-56</a> lists the Oracle extension APIs in <code>oracle.sql.BFILE</code> for opening and closing <code>BFILE</code>s.</p>
<div id="ADLOB45529" class="tblformalwide">
<p class="titleintable"><a id="sthref787"></a><a id="g1039879"></a>Table 13-56 JDBC API Extensions for Opening and Closing BFILEs</p>
<table class="cellalignment910" title="JDBC API Extensions for Opening and Closing BFILEs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t81">Methods</th>
<th class="cellalignment906" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t81" headers="r1c1-t81">
<p><code>public void open() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t81 r1c2-t81">
<p>Opens the <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t81" headers="r1c1-t81">
<p><code>public void open(int mode) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t81 r1c2-t81">
<p>Opens the <code>BFILE</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t81" headers="r1c1-t81">
<p><code>public boolean isOpen() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t81 r1c2-t81">
<p>Checks if the <code>BFILE</code> is open</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t81" headers="r1c1-t81">
<p><code>public void close() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t81 r1c2-t81">
<p>Closes the <code>BFILE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div id="ADLOB45530" class="sect3"><a id="sthref788"></a>
<h4 class="sect3">Opening BFILEs</h4>
<p>To open a <code>BFILE</code>, your JDBC application can use the <code>OPEN</code> method defined in <code>oracle.sql.BFILE</code> class as follows:</p>
<pre>
/** 
 * Open a external LOB in the read-only mode. It is an error 
 * to open the same LOB twice. 
 */ 
public void open () throws SQLException 

/** 
 * Open a external LOB in the indicated mode. Valid modes include 
 * MODE_READONLY only. It is an error to open the same 
 * LOB twice. 
 */ 
public void open (int mode) throws SQLException
</pre>
<p>The only possible value of the mode parameter is:</p>
<pre>
public static final int MODE_READONLY 
</pre>
<p>Each call to open opens the <code>BFILE</code>. For example,</p>
<pre>
BFILE bfile = ... 
bfile.open ();
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45531" class="sect3"><a id="sthref789"></a>
<h4 class="sect3">Checking If the BFILE Is Open</h4>
<p>To see if a <code>BFILE</code> is opened, your JDBC application can use the <code>isOpen</code> method defined in <code>oracle.sql.BFILE</code>. The return Boolean value indicates whether the BFILE has been previously opened or not. The <code>isOpen</code> method is defined as follows:</p>
<pre>
/** 
 * Check whether the BFILE is opened. 
 * @return true if the LOB is opened. 
 */ 
public boolean isOpen () throws SQLException
</pre>
<p>The usage example is:</p>
<pre>
BFILE bfile = ... 
// See if the BFILE is opened 
boolean isOpen = bfile.isOpen ();
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45532" class="sect3"><a id="sthref790"></a>
<h4 class="sect3">Closing the BFILE</h4>
<p>To close a <code>BFILE</code>, your JDBC application can use the <code>close</code> method defined in <code>oracle.sql.BFILE</code>. The <code>close</code> API is defined as follows:</p>
<pre>
/** 
 * Close a previously opened BFILE. 
*/ 
public void close () throws SQLException
</pre>
<p>The usage example is --</p>
<pre>
BFILE bfile = ... 
// close the BFILE 
bfile.close ();
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB45533" class="sect3"><a id="sthref791"></a>
<h4 class="sect3">Usage Example (<a id="sthref792"></a>OpenCloseLob.java)</h4>
<pre>
/* 
 * This sample shows how to open/close BLOB and CLOB. 
 */ 

// You must import the java.sql package to use JDBC 
import java.sql.*; 

// You must import the oracle.sql package to use oracle.sql.BLOB 
import oracle.sql.*; 

class OpenCloseLob 
{ 
  public static void main (String args []) 
       throws SQLException 
  { 
    // Load the Oracle JDBC driver 
    DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver()); 

    String url = "jdbc:oracle:oci8:@"; 
    try { 
      String url1 = System.getProperty("JDBC_URL"); 
      if (url1 != null) 
        url = url1; 
    } catch (Exception e) { 
      // If there is any security exception, ignore it 
      // and use the default 
    } 

    // Connect to the database 
    Connection conn = 
      DriverManager.getConnection (url, "scott", "<span class="italic">password</span>"); 
    // It is faster when auto commit is off 
    conn.setAutoCommit (false); 

    // Create a Statement 
    Statement stmt = conn.createStatement (); 

    try 
    { 
      stmt.execute ("drop table basic_lob_table"); 
    } 
    catch (SQLException e) 
    { 
      // An exception could be raised here if the table did not exist. 
    } 

// Create a table containing a BLOB and a CLOB 
stmt.execute ("create table basic_lob_table (x varchar2 (30), b blob, c clob)"); 

// Populate the table 
stmt.execute (
    "insert into basic_lob_table values"
    + " ('one', '010101010101010101010101010101', 'onetwothreefour')"); 

    // Select the lobs 
    ResultSet rset = stmt.executeQuery ("select * from basic_lob_table"); 
    while (rset.next ()) 
    { 
      // Get the lobs 
      BLOB blob = (BLOB) rset.getObject (2); 
      CLOB clob = (CLOB) rset.getObject (3); 

      // Open the lobs 
      System.out.println ("Open the lobs"); 
      blob.open (BLOB.MODE_READWRITE); 
      clob.open (CLOB.MODE_READWRITE); 

      // Check if the lobs are opened 
      System.out.println ("blob.isOpen()="+blob.isOpen()); 
      System.out.println ("clob.isOpen()="+clob.isOpen()); 

      // Close the lobs 
      System.out.println ("Close the lobs"); 
      blob.close (); 
      clob.close (); 

      // Check if the lobs are opened 
      System.out.println ("blob.isOpen()="+blob.isOpen()); 
      System.out.println ("clob.isOpen()="+clob.isOpen()); 
    } 

    // Close the ResultSet 
    rset.close (); 

    // Close the Statement 
    stmt.close (); 

    // Close the connection 
    conn.close (); 
  } 
} 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45534" class="sect2"><a id="sthref793"></a>
<h3 class="sect2"><a id="sthref794"></a><a id="sthref795"></a>Truncating LOBs Using JDBC</h3>
<p>Oracle Database JDBC drivers contain APIs to truncate persistent LOBs. These APIs replace previous techniques that used <code>DBMS_LOB.trim()</code>.</p>
<div id="ADLOB45535" class="sect3"><a id="sthref796"></a>
<h4 class="sect3">JDBC: Truncating BLOBs</h4>
<p><code>oracle.sql.BLOB</code> class is Oracle JDBC driver implementation of the standard JDBC <code>java.sql.Blob</code> interface. <a href="#g1039898">Table 13-57</a> lists the Oracle extension API in <code>oracle.sql.BLOB</code> that truncates BLOBs.</p>
<div id="ADLOB45536" class="tblformalwide">
<p class="titleintable"><a id="sthref797"></a><a id="g1039898"></a>Table 13-57 JDBC: Truncating BLOBs</p>
<table class="cellalignment910" title="JDBC: Truncating BLOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t82">Methods</th>
<th class="cellalignment906" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t82" headers="r1c1-t82">
<p><code>public void truncate(long newlen) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t82 r1c2-t82">
<p>Truncates the <code>BLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>The truncate API is defined as follows:</p>
<pre>
/** 
*Truncate the value of the BLOB to the length you specify in the newlen parameter. 
 * @param newlen the new length of the BLOB. 
 */ 
public void truncate (long newlen) throws SQLException
</pre>
<p>The <code>newlen</code> parameter specifies the new length of the <code>BLOB</code>.</p>
</div>
<!-- class="sect3" -->
<div id="ADLOB45537" class="sect3"><a id="sthref798"></a>
<h4 class="sect3">JDBC: Truncating CLOBs</h4>
<p><code>oracle.sql.CLOB</code> class is the Oracle JDBC driver implementation of standard JDBC <code>java.sql.Clob</code> interface. <a href="#g1039908">Table 13-58</a> lists the Oracle extension API in <code>oracle.sql.CLOB</code> that truncates <code>CLOB</code>s.</p>
<div id="ADLOB45538" class="tblformalwide">
<p class="titleintable"><a id="sthref799"></a><a id="g1039908"></a>Table 13-58 JDBC: Truncating CLOBs</p>
<table class="cellalignment910" title="JDBC: Truncating CLOBs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t83">Methods</th>
<th class="cellalignment906" id="r1c2-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t83" headers="r1c1-t83">
<p><code>public void truncate(long newlen) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t83 r1c2-t83">
<p>Truncates the <code>CLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>The truncate API is defined as follows:</p>
<pre>
/** 
*Truncate the value of the CLOB to the length you specify in the newlen parameter.
 * @param newlen the new length of the CLOB. 
 */ 
public void truncate (long newlen) throws SQLException
</pre>
<p>The <code>newlen</code> parameter specifies the new length of the <code>CLOB</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="adlob_lob_ops.htm#i1028365">"Trimming LOB Data"</a>, for an example.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1009898"></a>
<div id="ADLOB45539" class="sect2">
<h3 class="sect2">JDBC BLOB <a id="sthref800"></a><a id="sthref801"></a>Streaming APIs</h3>
<p>The JDBC interface provided with the database includes LOB streaming APIs that enable you to read from or write to a LOB at the requested position from a Java stream.</p>
<p>The <code>oracle.sql.BLOB</code> class implements the standard JDBC <code>java.sql.Blob</code> interface. <a href="#g1039922">Table 13-59</a> lists BLOB Streaming APIs.</p>
<div id="ADLOB45540" class="tblformalwide">
<p class="titleintable"><a id="sthref802"></a><a id="g1039922"></a>Table 13-59 JDBC: BLOB Streaming APIs</p>
<table class="cellalignment910" title="JDBC: BLOB Streaming APIs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t85">Methods</th>
<th class="cellalignment906" id="r1c2-t85">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t85" headers="r1c1-t85">
<p><code>public java.io.OutputStream</code></p>
<p><code>setBinaryStream (long pos)</code> <code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t85 r1c2-t85">
<p>JDBC 3.0: Retrieves a stream that can be used to write to the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t85" headers="r1c1-t85">
<p><code>public java.io.InputStream</code></p>
<p><code>getBinaryStream()</code> <code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t85 r1c2-t85">
<p>JDBC 3.0: Retrieves a stream that can be used to read the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at the beginning</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t85" headers="r1c1-t85">
<p><code>public java.io.InputStream</code></p>
<p><code>getBinaryStream(long pos)</code> <code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t85 r1c2-t85">
<p>Oracle extension: Retrieves a stream that can be used to read the <code>BLOB</code> value that this <code>Blob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>These APIs are defined as follows:</p>
<pre>
/** 
 * Write to the BLOB from a stream at the requested position. 
 * 
 * @param pos is the position data to be put. 
 * @return a output stream to write data to the BLOB 
 */ 
public java.io.OutputStream setBinaryStream(long pos) throws SQLException

/** 
 * Read from the BLOB as a stream at the requested position. 
 * 
 * @param pos is the position data to be read. 
 * @return a output stream to write data to the BLOB 
 */ 
public java.io.InputStream getBinaryStream(long pos) throws SQLException
</pre></div>
<!-- class="sect2" -->
<div id="ADLOB45541" class="sect2"><a id="sthref803"></a>
<h3 class="sect2"><a id="sthref804"></a><a id="sthref805"></a>JDBC CLOB Streaming APIs</h3>
<p>The <code>oracle.sql.CLOB</code> class is the Oracle JDBC driver implementation of standard JDBC <code>java.sql.Clob</code> interface. <a href="#g1039935">Table 13-60</a> lists the <code>CLOB</code> streaming APIs.</p>
<div id="ADLOB45542" class="tblformalwide">
<p class="titleintable"><a id="sthref806"></a><a id="g1039935"></a>Table 13-60 JDBC: CLOB Streaming APIs</p>
<table class="cellalignment910" title="JDBC: CLOB Streaming APIs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t86">Methods</th>
<th class="cellalignment906" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t86" headers="r1c1-t86">
<p><code>public java.io.OutputStream</code></p>
<p><code>setAsciiStream (long pos) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t86 r1c2-t86">
<p>JDBC 3.0: Retrieves a stream to be used to write ASCII characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t86" headers="r1c1-t86">
<p><code>public java.io.Writer</code></p>
<p><code>setCharacterStream (long pos) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r3c1-t86 r1c2-t86">
<p>JDBC 3.0: Retrieves a stream to be used to write Unicode characters to the <code>CLOB</code> value that this <code>Clob</code> object represents, starting, at position <code>pos</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t86" headers="r1c1-t86">
<p><code>public java.io.InputStream</code></p>
<p><code>getAsciiStream() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r4c1-t86 r1c2-t86">
<p>JDBC 3.0: Retrieves a stream that can be used to read ASCII characters from the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at the beginning</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t86" headers="r1c1-t86">
<p><code>public java.io.InputStream</code></p>
<p><code>getAsciiStream(long pos)</code> <code>throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r5c1-t86 r1c2-t86">
<p>Oracle extension: Retrieves a stream that can be used to read ASCII characters from the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t86" headers="r1c1-t86">
<p><code>public java.io.Reader</code></p>
<p><code>getCharacterStream() throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r6c1-t86 r1c2-t86">
<p>JDBC 3.0: Retrieves a stream that can be used to read Unicode characters from the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at the beginning</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t86" headers="r1c1-t86">
<p><code>public java.io.Reader</code></p>
<p><code>getCharacterStream(long pos) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r7c1-t86 r1c2-t86">
<p>Oracle extension: Retrieves a stream that can be used to read Unicode characters from the <code>CLOB</code> value that this <code>Clob</code> object represents, starting at position <code>pos</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>These APIs are defined as follows:</p>
<pre>
/** 
  * Write to the CLOB from a stream at the requested position. 
  * @param pos is the position data to be put. 
  * @return a output stream to write data to the CLOB 
  */ 
public java.io.OutputStream setAsciiStream(long pos) throws SQLException 

/** 
</pre>
<pre>
     * Write to the CLOB from a stream at the requested position. 
     * @param pos is the position data to be put. 
     * @return a output stream to write data to the CLOB 
     */ 
  public java.io.Writer setCharacterStream(long pos) throws SQLException 

    /** 
     * Read from the CLOB as a stream at the requested position. 
     * @param pos is the position data to be put. 
     * @return a output stream to write data to the CLOB 
     */ 
  public java.io.InputStream getAsciiStream(long pos) throws SQLException 

   /** 
    * Read from the CLOB as a stream at the requested position. 
    * @param pos is the position data to be put. 
    * @return a output stream to write data to the CLOB 
    */ 
   public java.io.Reader getCharacterStream(long pos) throws SQLException
</pre></div>
<!-- class="sect2" -->
<div id="ADLOB45543" class="sect2"><a id="sthref807"></a>
<h3 class="sect2"><a id="sthref808"></a><a id="sthref809"></a><a id="sthref810"></a>BFILE Streaming APIs</h3>
<p><code>oracle.sql.BFILE</code> class wraps the database <code>BFILE</code>s. <a href="#g1039954">Table 13-61</a> lists the Oracle extension APIs in <code>oracle.sql.BFILE</code> that reads <code>BFILE</code> content from the requested position.</p>
<div id="ADLOB45544" class="tblformalwide">
<p class="titleintable"><a id="sthref811"></a><a id="g1039954"></a>Table 13-61 JDBC: BFILE Streaming APIs</p>
<table class="cellalignment910" title="JDBC: BFILE Streaming APIs" summary="This table is described in the preceding text" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t87">Methods</th>
<th class="cellalignment906" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t87" headers="r1c1-t87">
<p><code>public java.io.InputStream</code></p>
<p><code>getBinaryStream(long pos) throws SQLException</code></p>
</td>
<td class="cellalignment907" headers="r2c1-t87 r1c2-t87">
<p>Reads from the <code>BFILE</code> as a stream</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>These APIs are defined as follows:</p>
<pre>
/** 
 * Read from the BLOB as a stream at the requested position. 
 * 
 * @param pos is the position data to be read. 
 * @return a output stream to write data to the BLOB 
 */ 
public java.io.InputStream getBinaryStream(long pos) throws SQLException
</pre>
<div id="ADLOB45545" class="sect3"><a id="sthref812"></a>
<h4 class="sect3">JDBC BFILE Streaming Example (<a id="sthref813"></a><a id="sthref814"></a><a id="sthref815"></a>NewStreamLob.java)</h4>
<pre>
/* 
 * This sample shows how to read/write BLOB and CLOB as streams. 
 */ 

import java.io.*; 

// You must import the java.sql package to use JDBC 
import java.sql.*; 

// You must import the oracle.sql package to use oracle.sql.BLOB 
import oracle.sql.*; 

class NewStreamLob 
{ 
  public static void main (String args [])  throws Exception 
  { 
    // Load the Oracle JDBC driver 
    DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver()); 

    String url = "jdbc:oracle:oci8:@"; 
    try { 
      String url1 = System.getProperty("JDBC_URL"); 
      if (url1 != null) 
        url = url1; 
    } catch (Exception e) { 
      // If there is any security exception, ignore it 
      // and use the default 
    } 

    // Connect to the database 
    Connection conn = 
      DriverManager.getConnection (url, "scott", "<span class="italic">password</span>"); 
    // It is faster when auto commit is off 
    conn.setAutoCommit (false); 

    // Create a Statement 
    Statement stmt = conn.createStatement (); 

    try 
    { 
      stmt.execute ("drop table basic_lob_table"); 
    } 
    catch (SQLException e) 
    { 
      // An exception could be raised here if the table did not exist. 
    } 

    // Create a table containing a BLOB and a CLOB 
    stmt.execute (
         "create table basic_lob_table"  
         + "(x varchar2 (30), b blob, c clob)"); 

    // Populate the table 
    stmt.execute (
         "insert into basic_lob_table values"
         + "('one', '010101010101010101010101010101', 'onetwothreefour')"); 
  
    System.out.println ("Dumping lobs"); 

    // Select the lobs 
    ResultSet rset = stmt.executeQuery ("select * from basic_lob_table"); 
    while (rset.next ()) 
    { 
      // Get the lobs 
      BLOB blob = (BLOB) rset.getObject (2); 
      CLOB clob = (CLOB) rset.getObject (3); 

      // Print the lob contents 
      dumpBlob (conn, blob, 1); 
      dumpClob (conn, clob, 1); 

      // Change the lob contents 
      fillClob (conn, clob, 11, 50); 
      fillBlob (conn, blob, 11, 50); 
    } 
    rset.close (); 

    System.out.println ("Dumping lobs again"); 

    rset = stmt.executeQuery ("select * from basic_lob_table"); 
    while (rset.next ()) 
    { 
      // Get the lobs 
      BLOB blob = (BLOB) rset.getObject (2); 
      CLOB clob = (CLOB) rset.getObject (3); 

      // Print the lobs contents 
      dumpBlob (conn, blob, 11); 
      dumpClob (conn, clob, 11); 
    } 
    // Close all resources 
    rset.close(); 
    stmt.close(); 
    conn.close(); 
  } 

  // Utility function to dump Clob contents 
  static void dumpClob (Connection conn, CLOB clob, long offset) 
    throws Exception 
  { 
    // get character stream to retrieve clob data 
    Reader instream = clob.getCharacterStream(offset); 

    // create temporary buffer for read 
    char[] buffer = new char[10]; 

    // length of characters read 
    int length = 0; 

    // fetch data 
    while ((length = instream.read(buffer)) != -1) 
    { 
      System.out.print("Read " + length + " chars: "); 

      for (int i=0; i&lt;length; i++) 
        System.out.print(buffer[i]); 
      System.out.println(); 
    } 

    // Close input stream 
    instream.close(); 
  } 

  // Utility function to dump Blob contents 
  static void dumpBlob (Connection conn, BLOB blob, long offset) 
    throws Exception 
  { 
    // Get binary output stream to retrieve blob data 
    InputStream instream = blob.getBinaryStream(offset); 
    // Create temporary buffer for read 
    byte[] buffer = new byte[10]; 
    // length of bytes read 
    int length = 0; 
    // Fetch data 
    while ((length = instream.read(buffer)) != -1) 
    { 
      System.out.print("Read " + length + " bytes: "); 

      for (int i=0; i&lt;length; i++) 
        System.out.print(buffer[i]+" "); 
      System.out.println(); 
    } 

    // Close input stream 
    instream.close(); 
  } 

  // Utility function to put data in a Clob 
  static void fillClob (Connection conn, CLOB clob, long offset, long length) 
    throws Exception 
  { 
    Writer outstream = clob.setCharacterStream(offset); 

    int i = 0; 
    int chunk = 10; 

    while (i &lt; length) 
    { 
      outstream.write("aaaaaaaaaa", 0, chunk); 

      i += chunk; 
      if (length - i &lt; chunk) 
         chunk = (int) length - i; 
    } 
    outstream.close(); 
  } 

  // Utility function to put data in a Blob 
  static void fillBlob (Connection conn, BLOB blob, long offset, long length) 
    throws Exception 
  { 
    OutputStream outstream = blob.setBinaryStream(offset); 

    int i = 0; 
    int chunk = 10; 

    byte [] data = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }; 

    while (i &lt; length) 
    { 
      outstream.write(data, 0, chunk); 

      i += chunk; 
      if (length - i &lt; chunk) 
         chunk = (int) length - i; 
    } 
    outstream.close(); 
  } 
} 
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45546" class="sect2"><a id="sthref816"></a>
<h3 class="sect2"><a id="sthref817"></a><a id="sthref818"></a><a id="sthref819"></a><a id="sthref820"></a>JDBC and Empty LOBs</h3>
<p>An empty <code>BLOB</code> can be created from the following API from <code>oracle.sql.BLOB</code>:</p>
<pre>
public static BLOB empty_lob () throws SQLException 
</pre>
<p>Similarly, the following API from <code>oracle.sql.CLOB</code> creates an empty <code>CLOB</code>:</p>
<pre>
public static CLOB empty_lob () throws SQLException 
</pre>
<p>Empty LOB instances are created by JDBC drivers without making database round trips. Empty LOBs can be used in the following cases:</p>
<ul>
<li>
<p>"set" APIs of PreparedStatement</p>
</li>
<li>
<p>"update" APIs of updatable result set</p>
</li>
<li>
<p>attribute value of STRUCTs</p>
</li>
<li>
<p>element value of ARRAYs</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Empty LOBs are special marker LOBs but not real LOB values.</div>
</li>
</ul>
<p>JDBC applications cannot read or write to empty LOBs created from the preceding APIs. An <a id="sthref821"></a><a id="sthref822"></a>ORA-17098 "Invalid empty lob operation" results if your application attempts to read/write to an empty LOB.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1010253"></a>
<div id="ADLOB45547" class="sect1">
<h2 class="sect1">Oracle Provider for OLE DB <a id="sthref823"></a><a id="sthref824"></a>(OraOLEDB)</h2>
<p>Oracle Provider for OLE DB (OraOLEDB) offers high performance and efficient access to Oracle data for OLE DB and ADO developers. Developers programming with COM, C++, or any COM client can use OraOLEDB to access Oracle databases.</p>
<p>OraOLEDB is an OLE DB provider for Oracle. It offers high performance and efficient access to Oracle data including LOBs, and also allows updates to certain LOB types.</p>
<p>The following LOB types are supported by OraOLEDB:</p>
<ul>
<li>
<p><span class="bolditalic">For Persistent LOBs.</span> READ/WRITE through the rowset.</p>
</li>
<li>
<p><span class="bolditalic">For BFILEs</span>. READ-ONLY through the rowset.</p>
</li>
<li>
<p><span class="bolditalic">Temporary LOBs</span> are not supported through the rowset.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLEDB" href="../../win.112/e17726/toc.htm"><span class="italic">Oracle Provider for OLE DB Developer's Guide</span></a></div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1032043"></a>
<div id="ADLOB45548" class="sect1">
<h2 class="sect1">Overview of Oracle Data Provider for .NET (ODP.NET)</h2>
<p>Oracle Data Provider for .NET (ODP.NET) is an implementation of a data provider for the Oracle database. ODP.NET uses Oracle native APIs to offer fast and reliable access to Oracle data and features from any .NET application. ODP.NET also uses and inherits classes and interfaces available in the Microsoft .NET Framework Class Library. The ODP.NET supports the following LOBs as native data types with .NET: <code>BLOB</code>, <code>CLOB</code>, <code>NCLOB</code>, and <code>BFILE</code>.</p>
<p>COM and .NET are complementary development technologies. Microsoft recommends that developers use the .NET Framework rather than COM for new development.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ODPNT" href="../../win.112/e23174/toc.htm"><span class="italic">Oracle Data Provider for .NET Developer's Guide</span></a></div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment898">
<tr>
<td class="cellalignment907">
<table class="cellalignment903">
<tr>
<td class="cellalignment902"><a href="adlob_design.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment902"><a href="adlob_performance.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment909">
<table class="cellalignment901">
<tr>
<td class="cellalignment902"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment902"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment902"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment902"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment902"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment902"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
