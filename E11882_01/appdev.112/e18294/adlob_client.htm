<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBFS File System Client</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-18T13:32:41Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer's Guide" />
<meta name="dcterms.identifier" content="E18294-04" />
<meta name="dcterms.isVersionOf" content="ADLOB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adlob_fs.htm" title="Previous" type="text/html" />
<link rel="Next" href="adlob_cont.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e18294.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/37</span> <!-- End Header -->
<div id="ADLOB0006" class="chapter"><a id="g10"></a><a id="i10608"></a>
<h1 class="chapter"><span class="secnum">6</span> DBFS File System Client</h1>
<p>This chapter describes how to implement, access, and administer the DBFS File System.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Beginning with Oracle Database Release 11.2.0.3, with Solaris 11 SRU7, you can run <code>dbfs_client</code> in mount mode. Please see <a href="#CIHIAEAB">"Oracle Database Release 11.2.0.3 with Solaris 11 SRU7"</a> to ensure that you understand the specific differences between Linux and Solaris processes.</div>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BABFGDAF">Installing DBFS</a></p>
</li>
<li>
<p><a href="#BABCIHHD">DBFS Mounting Interface</a></p>
</li>
<li>
<p><a href="#BABJAJJG">Using the DBFS Command Interface</a></p>
</li>
<li>
<p><a href="#BABCJFBG">DBFS Administration</a></p>
</li>
</ul>
<a id="BABFGDAF"></a>
<div id="ADLOB45991" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref183"></a><a id="sthref184"></a>Installing DBFS</h2>
<p>This section discusses the steps required for the installation of DBFS.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHIHBAF">DBFS Prerequisites</a></p>
</li>
<li>
<p><a href="#CIHEGIEJ">Installing FUSE (Linux Only)</a></p>
</li>
<li>
<p><a href="#CIHEAJJD">DBFS Installation Home</a></p>
</li>
<li>
<p><a href="#CIHEGBBA">Creating a File System</a></p>
</li>
<li>
<p><a href="#CIHGEHGA">Dropping a File System</a></p>
</li>
</ul>
<a id="CIHIHBAF"></a>
<div id="ADLOB45992" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DBFS Prerequisites</h3>
<ul>
<li>
<p>The <code>dbfs_client</code> can be used as a direct RDBMS client using the DBFS command Interface only on Linux, Linux.X64, Solaris, Solaris64, AIX, HPUX and Windows platforms.</p>
</li>
<li>
<p>The <code>dbfs_</code><code>client</code> host must have the Oracle client libraries installed.</p>
</li>
<li>
<p>The <code>dbfs_client</code> program can be used to mount DBFS file systems on Linux and Linux X64 platforms starting with Oracle Database Release 11.2.0.1, and on Solaris 11 SRU7 starting with Oracle Database 11.2.0.3. See "<a href="#CIHIAEAB">"Oracle Database Release 11.2.0.3 with Solaris 11 SRU7"</a> for more information on Solaris compatibility.</p>
<p>For Linux, the following are also required:</p>
<ul>
<li>
<p>The <code>dbfs_client</code> host must have the <code>kernel-devel</code> package installed to configure and build <code>FUSE</code>.</p>
</li>
<li>
<p>The <code>dbfs_client</code> host must have the <code>FUSE</code> Linux package installed.</p>
</li>
<li>
<p>A group named <code>fuse</code> must be created and the user name that is running the <code>dbfs_client</code> must be a member of the <code>fuse</code> group.</p>
</li>
</ul>
<p>For Solaris 11 SRU7, see <a href="#CIHIAEAB">"Oracle Database Release 11.2.0.3 with Solaris 11 SRU7"</a> for differences and additional requirements.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHEGIEJ"></a>
<div id="ADLOB45993" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Installing FUSE (Linux Only)</h3>
<ul>
<li>
<p>Download the <code>kernel-devel</code> package from your Linux distributor that matches your Linux release.</p>
</li>
<li>
<p>Download <code>FUSE</code> 2.7.4 package from <code><a href="http://fuse.sourceforge.net/">http://fuse.sourceforge.net/</a></code>.</p>
</li>
<li>
<p>Install <code>kernel-devel</code> package. For example:</p>
<pre>
# rpm -i kernel-devel-2.6.18-8.el5.i686.rpm
</pre></li>
<li>
<p>Determine the kernel directory. The kernel directory is usually <code>/usr/src/kernels/`uname -r`-`uname -p`</code></p>
</li>
<li>
<p>Install <code>FUSE</code>.</p>
<pre>
$ tar -xzvf fuse-2.7.4.tar.gz
$ cd [fuse_src_dir]
$ ./configure --prefix=/usr --with-kernel=[your kernel dir]
$ make
$ sudo su
# make install
# /sbin/depmod
# /sbin/modprobe fuse
# chmod 666 /dev/fuse
# echo "/sbin/modprobe fuse" &gt;&gt; /etc/rc.modules
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHEAJJD"></a>
<div id="ADLOB45994" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">DBFS Installation Home</h3>
<p>The DBFS installation home contains the SQL (<code>.plb</code> extension) scripts for the content store, and the <code>dbfs_client</code> executable.</p>
</div>
<!-- class="sect2" -->
<a id="CIHEGBBA"></a>
<div id="ADLOB45995" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a File System</h3>
<p>At minimum, database users must have the following privileges to create a file system: <code>GRANT CONNECT</code>, <code>CREATE SESSION</code>, <code>RESOURCE</code>, <code>CREATE TABLE</code>, and <code>CREATE PROCEDURE</code>, and also <code>DBFS_ROLE</code>.</p>
<p>Create a file system by running <code>dbfs_create_filesystem</code>.<code>sql</code> while logged in as a user with <code>DBFS_ROLE</code> privileges.</p>
<pre>
$ sqlplus @$ORACLE_HOME/rdbms/admin/dbfs_create_filesystem.sql <span class="codeinlineitalic">tablespace_name</span>
     <span class="codeinlineitalic">file_system_name</span>
</pre>
<p>The following example creates a file system called <code>staging_area</code> in the tablespace <code>dbfs_tbspc</code>. The tablespace should have been created previously.</p>
<pre>
$ sqlplus @$ORACLE_HOME/rdbms/admin/dbfs_create_filesystem.sql dbfs_tbspc
     staging_area
</pre>
<p><code>dbfs_create_filesystem_advanced.sql</code> can also be used to create a DBFS filesystem. This script gives users more control over storage options such as compression, encryption, and deduplication, which are used for the filesystem.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
beginning with Oracle Database release 11.2.0.3, DBFS creates file systems as non-partitioned, by default.</div>
</div>
<!-- class="sect2" -->
<a id="CIHGEHGA"></a>
<div id="ADLOB45996" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Dropping a File System</h3>
<p>Drop the file system by running <code>dbfs_drop_filesystem.sql</code>.</p>
<pre>
$ sqlplus @$ORACLE_HOME/rdbms/admin/dbfs_drop_filesystem.sql  <span class="codeinlineitalic">file system name</span>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCIHHD"></a>
<div id="ADLOB45997" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref185"></a>DBFS Mounting Interface</h2>
<p>This section discusses how to mount the DBFS file system. It applies to Linux and Solaris, with Solaris 11 SRU7 differences as described in <a href="#CIHIAEAB">"Oracle Database Release 11.2.0.3 with Solaris 11 SRU7"</a>.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHDEAAJ">Mounting the DBFS Store</a></p>
</li>
<li>
<p><a href="#CIHIHCDB">Unmounting a File System in Linux</a></p>
</li>
<li>
<p><a href="#CIHBEFAD">Restrictions on Mounted File Systems</a></p>
</li>
<li>
<p><a href="#CIHBGFJG">Mounting DBFS Through fstab Utility in Linux</a></p>
</li>
<li>
<p><a href="#CIHIAEAB">Oracle Database Release 11.2.0.3 with Solaris 11 SRU7</a></p>
</li>
</ul>
<a id="CIHDEAAJ"></a>
<div id="ADLOB45998" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mounting the DBFS Store</h3>
<p>Run the <code>dbfs_client</code> program to mount the DBFS store. Ensure that <code>LD_LIBRARY_PATH</code> has the correct path to the Oracle client libraries before calling this program. The <code>dbfs_client</code> program does not return until the file system is unmounted.</p>
<p>For the most secure method of specifying the password, see<a href="#BABEEJII">"Using Oracle Wallet with DBFS Client"</a>.</p>
<p>The <code>dbfs_client</code> command has the following syntax:</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> <span class="italic">[</span>-o <span class="italic">option_1</span> -o <span class="italic">option_2</span> <span class="italic">...</span><span class="italic">]</span> <span class="italic">mount_point</span>
</pre>
<p>where the mandatory parameters are:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">db_user</span></code> is the name of the database user who owns the DBFS content store filesystem(s).</p>
</li>
<li>
<p><code><span class="codeinlineitalic">db_server</span></code> is a valid connect string to the Oracle Database server, such as <code>hrdb_host:1521/hrservice</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">mount_point</span></code> is the path where the Database File System is mounted. Note that all file systems owned by the database user are seen at the mount point.</p>
</li>
</ul>
<p>and the options are:</p>
<ul>
<li>
<p><code>direct_io</code> bypasses the Linux page cache, and provides improved performance for large files. Programs in the file system cannot be executed with this option. Oracle recommends this option when DBFS is used as an ETL staging area.</p>
</li>
<li>
<p><code>wallet</code> runs the DBFS client in the background. Wallet must be configured to get its credentials.</p>
</li>
<li>
<p><code>failover</code> fails over the DBFS client to the surviving database instance with no data loss. Expect some performance cost on writes, especially for small files.</p>
</li>
<li>
<p><code>allow_root</code> allows the root user to access the filesystem. This option requires setting the <code>user_allow_other</code> parameter in the <code>/etc/fuse.conf</code> configuration file.</p>
</li>
<li>
<p><code>allow_other</code> allows other users to access the filesystem. This option requires setting the <code>user_allow_other</code> parameter in the <code>/etc/fuse.conf</code> configuration file.</p>
</li>
<li>
<p><code>rw</code> mounts the filesystem as read-write; this is the default setting.</p>
</li>
<li>
<p><code>ro</code> mounts the filesystem as read-only; files cannot be modified.</p>
</li>
<li>
<p><code>trace_level=</code><code><span class="codeinlineitalic">n</span></code> sets the trace level. Trace levels are:</p>
<ol>
<li>
<p><code>DEBUG</code></p>
</li>
<li>
<p><code>INFO</code></p>
</li>
<li>
<p><code>WARNING</code></p>
</li>
<li>
<p><code>ERROR</code></p>
</li>
<li>
<p><code>CRITICAL</code>; this the default setting</p>
</li>
</ol>
</li>
<li>
<p><code>trace_file</code> <code><span class="codeinlineitalic">file_name</span></code> <code>|'syslog'</code> specifies the trace log file</p>
</li>
</ul>
<p>Prior to mounting a file system, you must create an Oracle Wallet and assign credentials for the appropriate DBFS database user; see <a href="#BABEEJII">"Using Oracle Wallet with DBFS Client"</a>.</p>
<div id="ADLOB46150" class="example">
<p class="titleinexample"><a id="sthref186"></a>Example 6-1 Mounting a File System</p>
<ol>
<li>
<p>Login as root user.</p>
</li>
<li>
<p>Add a new library path.</p>
<pre>
# echo "/usr/local/lib" &gt;&gt; /etc/ld.so.conf.d/usr_local_lib.conf
</pre></li>
<li>
<p>Change directory to <code>lib</code>, and create the following symbolic links to the <code>libclntsh.so.11.1</code> and <code>libnnz11.so</code> libraries.</p>
<pre>
# cd /usr/local/lib 
# ln -s $ORACLE_HOME/lib/libclntsh.so.11.1 
# ln -s $ORACLE_HOME/lib/libnnz11.so
</pre></li>
<li>
<p>Locate <code>libfuse.so</code>, and create a symbolic link this library.</p>
<pre>
# locate libfuse.so
  <span class="italic">determined_path</span>/libfuse.so
# ln &ndash;s <span class="italic">determined_path</span>/libfuse.so
</pre></li>
<li>
<p>Run <code>ldconfig</code> to create the links and cache for the new symbolic links.</p>
<pre>
# ldconfig
</pre></li>
<li>
<p>Create a symbolic link to <code>dbfs_client</code> in <code>/sbin</code> as <code>mount.dbfs</code>.</p>
<pre>
# ln -s $ORACLE_HOME/bin/dbfs_client /sbin/mount.dbfs
</pre></li>
<li>
<p>Login as admin user. (Oracle recommends that you do not perform the next step as root user.)</p>
</li>
<li>
<p>Mount the DBFS store.</p>
<pre>
% dbfs_client @/dbfsdb -o wallet,rw,user,direct_io /mnt/dbfs
</pre></li>
<li>
<p>[Optional] To test if the previous step was successful, list the <code>dbfs</code> directory.</p>
<pre>
# ls /mnt/dbfs
</pre></li>
</ol>
</div>
<!-- class="example" -->
<div id="ADLOB46151" class="example">
<p class="titleinexample"><a id="sthref187"></a>Example 6-2 Mounting a File System with Password at Command Prompt</p>
<p>To mount a file system using <code>dbfs_client</code> by entering the password on the command prompt:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString /mnt/dbfs
  password: xxxxxxx
</pre></div>
<!-- class="example" -->
<div id="ADLOB46152" class="example">
<p class="titleinexample"><a id="sthref188"></a>Example 6-3 Mounting a File System with Password Read from a File</p>
<p>The following example mounts a file system and frees the terminal. It reads the password from a file:</p>
<pre>
$ nohup dbfs_client ETLUser@DBConnectString /mnt/dbfs &lt; <span class="italic">passwordfile</span>.f &amp;
$ ls -l /mnt/dbfs
drwxrwxrwx 10 root root 0 Feb  9 17:28 staging_area
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHIHCDB"></a>
<div id="ADLOB45999" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Unmounting a File System in Linux</h3>
<p>Run <code>fusermount</code> to unmount file systems.</p>
<pre>
 $ fusermount -u &lt;<span class="codeinlineitalic">mount point</span>&gt;
</pre></div>
<!-- class="sect2" -->
<a id="CIHBEFAD"></a>
<div id="ADLOB46001" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Restrictions on Mounted File Systems</h3>
<p>DBFS supports most file system operations with the exception of <code>ioctl</code>, locking, asynchronous I/O through <code>libaio</code>, <code>O_DIRECT</code> file opens, hard links, pipes, and other special file modes. Memory-mapped files are supported except in shared-writable mode. For performance reasons, DBFS does not update the file access time every time file data or its attributes are read.</p>
<p>You cannot run programs from a DBFS-mounted file system if the <code>direct_io</code> option is specified.</p>
<p>You cannot export DBFS file systems using NFS or Samba.</p>
</div>
<!-- class="sect2" -->
<a id="CIHBGFJG"></a>
<div id="ADLOB46000" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mounting DBFS Through fstab Utility in Linux</h3>
<p>File systems are commonly configured using the <code>fstab</code> utility in Linux. To mount DBFS through <code>/etc/fstab</code>, You must use Oracle Wallet for authentication. Run the following operations as <code>root</code> user.</p>
<p class="subhead2"><a id="ADLOB46153"></a>To mount DBFS through fstab in Linux:</p>
<ol>
<li>
<p>Login as <code>root</code> user.</p>
</li>
<li>
<p>Change the user and group of <code>dbfs_client</code> to be user <code>root</code> and group <code>fuse</code>.</p>
<pre>
# chown root.fuse $ORACLE_HOME/bin/dbfs_client
</pre></li>
<li>
<p>Set the <code>setuid</code> bit on <code>dbfs_client</code>, and restrict <code>execute</code> privileges to the user and group only.</p>
<pre>
# chmod u+rwxs,g+rx-w,o-rwx dbfs_client
</pre></li>
<li>
<p>Create a symbolic link to <code>dbfs_client</code> in <code>/sbin</code> as <code>mount.dbfs</code>.</p>
<pre>
$ ln -s $ORACLE_HOME/bin/dbfs_client /sbin/mount.dbfs
</pre></li>
<li>
<p>Create a new Linux group called <code>fuse</code>.</p>
</li>
<li>
<p>Add the Linux user that is running the DBFS Client to the <code>fuse</code> group.</p>
</li>
<li>
<p>Add the following line to <code>/etc/fstab</code>:</p>
<pre>
/sbin/mount.dbfs#<span class="italic">db_user</span>@<span class="italic">db_server</span> <span class="italic">mount_point</span> fuse rw,user,noauto 0 0
</pre>
<p>For example:</p>
<pre>
/sbin/mount.dbfs#/@DBConnectString /mnt/dbfs fuse rw,user,noauto 0 0
</pre></li>
<li>
<p>The Linux user can mount the DBFS file system using the standard Linux <code>mount</code> command. For example:</p>
<pre>
$ mount /mnt/dbfs
</pre>
<p>Note that <code>FUSE</code> does not currently support <code>automount</code>.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHIAEAB"></a>
<div id="ADLOB46172" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Oracle Database Release 11.2.0.3 with Solaris 11 SRU7</h3>
<p>Beginning with Oracle Database Release 11.2.0.3, with Solaris 11 SRU7, you can install <code>libfuse</code> and run <code>dbfs_client</code> in mount mode on Solaris. This section describes what you must do differently from Linux procedures that are described in the sections <a href="#BABFGDAF">"Installing DBFS"</a> and <a href="#BABCIHHD">"DBFS Mounting Interface"</a>.</p>
<div id="ADLOB46173" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref189"></a>
<h4 class="sect3">Installing FUSE on Solaris 11 SRU7 and Later</h4>
<p>To use <code>dbfs_client</code> as a mount client in Solaris 11 SRU7 and later, ensure that the <code>libfuse</code> package is installed by running <code>pkg</code> <code>info</code> <code>libfuse</code> at the prompt. If no rows or errors are returned, then perform these steps to install <code>libfuse</code>.</p>
<p>Run the install command as root.</p>
<pre>
# pkg install libfuse
</pre>
<p>Run the verify command to confirm that <code>libfuse</code> is installed successfully. There will be no output if successful.</p>
<pre>
# pkg verify libfuse
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB46174" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref190"></a>
<h4 class="sect3">Unmounting DBFS</h4>
<p>To unmount a DBFS filesystem on Solaris, use the standard <code>umount</code> system command.</p>
</div>
<!-- class="sect3" -->
<div id="ADLOB46175" class="sect3"><a id="sthref191"></a>
<h4 class="sect3">Mounting the DBFS Store: Solaris-Specific Privileges</h4>
<p>On Solaris, the user must have the Solaris privilege <code>PRIV_SYS_MOUNT</code> to perform mount and unmount operations on DBFS filesystems.</p>
<p>Edit <code>/etc/user_attr</code> and add or modify the user entry (assuming the user is Oracle) as follows:</p>
<pre>
oracle::::type=normal;project=group.dba;defaultpriv=basic,priv_sys_mount;;auth s=solaris.smf.*
</pre></div>
<!-- class="sect3" -->
<div id="ADLOB46176" class="sect3"><a id="sthref192"></a>
<h4 class="sect3">Mounting DBFS Through the vfstab Utility for Solaris</h4>
<p>On Solaris, file systems are commonly configured using the <code>vfstab</code> utility.</p>
<p>To mount DBFS through <code>vfstab</code>:</p>
<ol>
<li>
<p>Create a mount shell script <code>mount_dbfs.sh</code> to use to start <code>dbfs_client</code>. All the environment variables that are required for Oracle Database must be exported. These environment variables include <code>TNS_ADMIN</code>, <code>ORACLE_HOME</code>, and <code>LD_LIBRARY_PATH</code>. For example:</p>
<pre>
#!/bin/ksh
export TNS_ADMIN=/export/home/oracle/dbfs/tnsadmin
export ORACLE_HOME=/export/home/oracle/11.2.0/dbhome_1
export DBFS_USER=dbfs_user
export DBFS_PASSWD=/tmp/passwd.f
export DBFS_DB_CONN=dbfs_db
export O=$ORACLE_HOME
export LD_LIBRARY_PATH=$O/lib:$O/rdbms/lib:/usr/lib:/lib:$LD_LIBRARY_PATH
export NOHUP_LOG=/tmp/dbfs.nohup

(nohup $ORACLE_HOME/bin/dbfs_client $DBFS_USER@$DBFS_DB_CONN &lt; $DBFS_PASSWD
         2&gt;&amp;1 &amp; ) &amp;
</pre></li>
<li>
<p>Add an entry for DBFS to <code>/etc/vfstab</code>. Specify the <code>mount_dbfs.sh</code> script for the <code>device_to_mount</code>. Specify <code>uvfs</code> for the <code>FS_type</code>. Specify no <code>formount_at_boot</code>. Specify mount options as needed. For example:</p>
<pre>
/usr/local/bin/mount_dbfs.sh - /mnt/dbfs uvfs - no rw,allow_other
</pre></li>
<li>
<p>User can mount the DBFS file system using the standard Solaris mount command. For example:</p>
<pre>
$ mount /mnt/dbfs
</pre></li>
<li>
<p>User can unmount the DBFS file system using the standard Solaris <code>umount</code> command. For example:</p>
<pre>
$ umount /mnt/dbfs
</pre></li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJAJJG"></a>
<div id="ADLOB46002" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the <a id="sthref193"></a>DBFS Command Interface</h2>
<p>The DBFS command interface allows files to be easily copied in and out of a DBFS file system from any host on the network. The command interface does not require mounting the file system, and has somewhat better performance than the mounting interface because it bypasses the user mode file system overhead, but it is not transparent to applications.</p>
<div id="ADLOB46003" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref194"></a>
<h3 class="sect2">Using DBFS</h3>
<p>All DBFS content store paths must be preceded by <code>"dbfs:"</code>. For example: <code>dbfs:/staging_area/file1</code>. All database path names specified must be absolute paths. To run DBFS commands, specify <code>--command</code> to the DBFS client.</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> --command <span class="italic">command</span> [<span class="italic">switches</span>] [<span class="italic">arguments</span>]
</pre>
<p>where:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">command</span></code> is the executable command, such as <code>ls</code>, <code>cp</code>, <code>mkdir</code>, or <code>rm</code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">switches</span></code> are specific for each command</p>
</li>
<li>
<p><code><span class="codeinlineitalic">arguments</span></code> are file names or directory names, and are specific for each command</p>
</li>
</ul>
<p>Note that <code>dbfs_client</code> returns a nonzero value in case of failure.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHEBAFI">Creating a Directory</a></p>
</li>
<li>
<p><a href="#CIHBIDEH">Listing a Directory</a></p>
</li>
<li>
<p><a href="#CIHIAHEJ">Copying Files and Directories</a></p>
</li>
<li>
<p><a href="#CIHGEBGJ">Removing Files and Directories</a></p>
</li>
</ul>
<a id="CIHEBAFI"></a>
<div id="ADLOB46007" class="sect3">
<h4 class="sect3">Creating a Directory</h4>
<p>The <code>mkdir</code> command creates a new directory.</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> --command mkdir <span class="italic">directory_name</span>
</pre>
<p>where <code><span class="codeinlineitalic">directory_name</span></code> is the name of the directory created. For example:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString --command mkdir dbfs:/staging_area/dir1
</pre></div>
<!-- class="sect3" -->
<a id="CIHBIDEH"></a>
<div id="ADLOB46004" class="sect3">
<h4 class="sect3">Listing a Directory</h4>
<p>The <code>ls</code> command lists the contents of a directory.</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> --command ls [<span class="italic">switches</span>] <span class="italic">target</span>
</pre>
<p>where <code><span class="codeinlineitalic">target</span></code> is the listed directory, and <code><span class="codeinlineitalic">switches</span></code> is any combination of the following:</p>
<ul>
<li>
<p><code>-</code><code><span class="codeinlineitalic">a</span></code> shows all files, including '<code>.</code>' and '<code>..</code>'.</p>
</li>
<li>
<p><code>-</code><code><span class="codeinlineitalic">l</span></code> shows the long listing format: name of each file, the file type, permissions, and size.</p>
</li>
<li>
<p><code>-</code><code><span class="codeinlineitalic">R</span></code> lists subdirectories, recursively.</p>
</li>
</ul>
<p>For example:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString --command  ls dbfs:/staging_area/dir1

$ dbfs_client ETLUser@DBConnectString --command  ls -l -a -R dbfs:/staging_area/dir1 
</pre></div>
<!-- class="sect3" -->
<a id="CIHIAHEJ"></a>
<div id="ADLOB46005" class="sect3">
<h4 class="sect3">Copying Files and Directories</h4>
<p>The <code>cp</code> command copies files or directories from the source location to the destination location. It also supports recursive copy of directories.</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> --command cp [<span class="italic">switches</span>] source destination
</pre>
<p>where <code><span class="codeinlineitalic">source</span></code> is the source location, <code><span class="codeinlineitalic">destination</span></code> is the destination location, and <code><span class="codeinlineitalic">switches</span></code> is either <code>-R</code> or <code>-r</code>, the options to recursively copy all source contents into the destination directory.</p>
<p>The following example copies the contents of the local directory, <code>01-01-10-dump</code> recursively into a directory in DBFS:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString --command cp -R  01-01-10-dump dbfs:/staging_area/
</pre>
<p>The following example copies the file <code>hello.txt</code> from DBFS to a local file <code>Hi.txt</code>:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString --command cp dbfs:/staging_area/hello.txt Hi.txt
</pre></div>
<!-- class="sect3" -->
<a id="CIHGEBGJ"></a>
<div id="ADLOB46006" class="sect3">
<h4 class="sect3">Removing Files and Directories</h4>
<p>The command <code>rm</code> deletes a file or directory. It also supports recursive delete of directories.</p>
<pre>
dbfs_client <span class="italic">db_user</span>@<span class="italic">db_server</span> --command rm [<span class="italic">switches</span>] <span class="italic">target</span>
</pre>
<p>where <code><span class="codeinlineitalic">target</span></code> is the listed directory, and <code><span class="codeinlineitalic">switches</span></code> is either <code>-R</code> or <code>-r</code>, the options to recursively delete all contents. For example:</p>
<pre>
$ dbfs_client ETLUser@DBConnectString --command rm  dbfs:/staging_area/srcdir/hello.txt

$ dbfs_client ETLUser@DBConnectString --command rm -R  dbfs:/staging_area/dir1
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCJFBG"></a>
<div id="ADLOB46008" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref195"></a>DBFS Administration</h2>
<p>This sections describes the DBFS administration tools.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEEJII">Using Oracle Wallet with DBFS Client</a></p>
</li>
<li>
<p><a href="#CIHGEJDH">File System Security Model</a></p>
</li>
<li>
<p><a href="#CIHIEIHJ">Performing DBFS Diagnostics</a></p>
</li>
<li>
<p><a href="#CIHCGDJC">Managing DBFS Client Failover</a></p>
</li>
<li>
<p><a href="#CIHDCDAH">Sharing and Caching DBFS</a></p>
</li>
<li>
<p><a href="#CIHHBIGA">Backing up DBFS</a></p>
</li>
<li>
<p><a href="#CIHBDHHA">Improving Small File Performance of DBFS</a></p>
</li>
<li>
<p><a href="#CIHDJHDD">Enabling Advanced SecureFiles LOB Features for DBFS</a></p>
</li>
</ul>
<a id="BABEEJII"></a>
<div id="ADLOB46009" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using <a id="sthref196"></a><a id="sthref197"></a>Oracle Wallet with DBFS Client</h3>
<p>An Oracle Wallet allows the DBFS client to mount a DBFS store without the user having to enter a password. Please refer to <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information about creation and management of wallets. The "<code>/@</code>" syntax means to use the wallet.</p>
<p class="subhead2"><a id="ADLOB46154"></a>To create an Oracle Wallet:</p>
<ol>
<li>
<p>Create a directory for the wallet. For example:</p>
<pre>
mkdir $ORACLE_HOME/oracle/wallet
</pre></li>
<li>
<p>Create an auto-login wallet.</p>
<pre>
mkstore -wrl $ORACLE_HOME/oracle/wallet -create
</pre></li>
<li>
<p>Add the wallet location in the client's <code>sqlnet.ora</code> file:</p>
<pre>
vi $TNS_ADMIN/sqlnet.ora
WALLET_LOCATION = (SOURCE = (METHOD = FILE) (METHOD_DATA = (DIRECTORY =
 $ORACLE_HOME/oracle/wallet) ) ) 
</pre></li>
<li>
<p>Add the following parameter in the client's <code>sqlnet.ora</code> file:</p>
<pre>
vi $TNS_ADMIN/sqlnet.ora
SQLNET.WALLET_OVERRIDE = TRUE
</pre></li>
<li>
<p>Create credentials:</p>
<pre>
mkstore -wrl <span class="italic">wallet_location</span> -createCredential <span class="italic">db_connect_string</span> <span class="italic">username</span> <span class="italic">password</span>
</pre>
<p>For example:</p>
<pre>
mkstore -wrl $ORACLE_HOME/oracle/wallet -createCredential DBConnectString scott tiger
</pre></li>
<li>
<p>Add the connection alias to your <code>tnsnames.ora</code> file.</p>
</li>
<li>
<p>Use you can use <code>dbfs_client</code> with Oracle Wallet.</p>
<p>For example:</p>
<pre>
$ dbfs_client -o wallet /@DBConnectString /mnt/dbfs 
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHGEJDH"></a>
<div id="ADLOB46010" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">File System Security Model</h3>
<p>The database manages the security in the DBFS, not the operating system security model. Access to a database file system requires a database login as a database user with privileges on the tables that underlie the file system. Access to the file system may be granted to users by the database administrator; this implies that different database users may have different <code>READ</code> or <code>UPDATE</code> privileges to the file system, as determined by database administrator. The database administrator of course has access to all files stored in the DBFS file system.</p>
<p>On the client machine, access to a DBFS mount point is limited to the operating system user that mounts the file system. This, however, does not limit the number of users who can access the DBFS, because many users may separately mount the same DBFS file system.</p>
<p>Linux performs operating system file-level permission checking when a DBFS file system is mounted. This check is not performed by DBFS either when using the command interface, or when using the PL/SQL interface directly. Instead, it performs only database privilege checking.</p>
<p>DBFS operates under a security model where all filesystems created by a user are private to that user, as default. Oracle recommends maintaining this model. Because operating system users and RDBMS users are different, it is possible to allow multiple operating system users to mount a single DBFS filesystem. These mounts may potentially have different mount options and permissions. For example, <code>user1</code> may mount the DBFS as <code>READ ONLY</code>, and <code>user2</code> may mount it as <code>READ WRITE</code>. However, RDBMS views both users as having the same privileges because they would be accessing the filesystem as the same RDBMS user.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHCFBEC">Enabling Shared Root Access</a></p>
</li>
<li>
<p><a href="#CIHDEJAA">Enabling DBFS Access Among Multiple RDBMS Users</a></p>
</li>
</ul>
<a id="CIHCFBEC"></a>
<div id="ADLOB46162" class="sect3">
<h4 class="sect3">Enabling Shared Root Access</h4>
<p>The operating system user who mounts the file system may allow root access to the file system by specifying the <code>allow_root</code> option. This option requires that <code>/etc/fuse.conf</code> file contain the <code>user_allow_other</code> field, as demonstrated in <a href="#CIHDHFDH">Example 6-4</a>.</p>
<div id="ADLOB46163" class="example">
<p class="titleinexample"><a id="CIHDHFDH"></a>Example 6-4 Enabling Root Access for Other Users</p>
<pre>
# Allow users to specify the 'allow_root' mount option.
user_allow_other
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHDEJAA"></a>
<div id="ADLOB46164" class="sect3">
<h4 class="sect3">Enabling DBFS Access Among Multiple RDBMS Users</h4>
<p>Some circumstances may require that multiple RDBMS users access the same filesystem. For example, the RDBMS user that owns the filesystem may be a privileged user and sharing its user credentials may pose a security risk. To mitigate this, DBFS allows multiple RDBMS users to share a subset of the filesystem state.</p>
<p>While DBFS registrations and mounts made through the DBFS content API are private to each user, the underlying filesystem and the tables on which they rely may be shared across users. After this is done, the individual filesystems may be independently mounted and used by different RDBMS users, either through SQL/PLSQL, or through <code>dbfs_client</code> APIs.</p>
<p>In the following example, user <code>user1</code> is able to modify the filesystem, and user <code>user2</code> can see these changes. Here, <code>user1</code> is the RDBMS user that creates a filesystem, and <code>user2</code> is the RDBMS user that eventually uses <code>dbfs_client</code> to mount and access the filesystem. Both <code>user1</code> and <code>user2</code> must have the <code>DBFS_ROLE</code> privilege.</p>
<p class="subhead2"><a id="ADLOB46165"></a>To establish DBFS access sharing across multiple RDBMS users:</p>
<ol>
<li>
<p>Connect as the user who creates the filesystem.</p>
<pre>
sys@tank as sysdba&gt; connect user1
Connected.
</pre></li>
<li>
<p>Create the filesystem <code>user1_FS</code>, register the store, and mount it as <code>user1_mt</code>.</p>
<pre>
user1@tank&gt; exec dbms_dbfs_sfs.createFilesystem('user1_FS');
user1@tank&gt; exec dbms_dbfs_content.registerStore('user1_FS', 'posix', 'DBMS_DBFS_SFS');
user1@tank&gt; exec dbms_dbfs_content.mountStore('user1_FS', 'user1_mnt');
user1@tank&gt; commit;
</pre></li>
<li>
<p>[Optional] You may check that the previous step has completed successfully by viewing all mounts.</p>
<pre>
user1@tank&gt; select * from table(dbms_dbfs_content.listMounts);

STORE_NAME           |   STORE_ID|PROVIDER_NAME
---------------------|- ---------|------------------------------------------
PROVIDER_PKG         |PROVIDER_ID|PROVIDER_VERSION     |STORE_FEATURES
---------------------|-----------|---------------------|--------------------
STORE_GUID
----------
STORE_MOUNT
----------------------------------------------------------------------------
CREATED
----------------------------------------------------------------------------
MOUNT_PROPERTIES(PROPNAME, PROPVALUE, TYPECODE)
----------------------------------------------------------------------------
user1_FS             | 1362968596|posix
"DBMS_DBFS_SFS"      | 3350646887|0.5.0                | 12714135  141867344
user1_mnt
01-FEB-10 09.44.25.357858 PM
DBMS_DBFS_CONTENT_PROPERTIES_T(
  DBMS_DBFS_CONTENT_PROPERTY_T('principal', (null), 9),
  DBMS_DBFS_CONTENT_PROPERTY_T('owner', (null), 9), 
  DBMS_DBFS_CONTENT_PROPERTY_T('acl', (null), 9), 
  DBMS_DBFS_CONTENT_PROPERTY_T('asof', (null), 187),
  DBMS_DBFS_CONTENT_PROPERTY_T('read_only', '0', 2))
</pre></li>
<li>
<p>[Optional] Connect as the user who will use the <code>dbfs_client</code>.</p>
<pre>
user1@tank&gt; connect user2
Connected.
</pre></li>
<li>
<p>[Optional] Note that <code>user2</code> cannot see <code>user1</code>'s DBFS state, as he has no mounts.</p>
<pre>
user2@tank&gt; select * from table(dbms_dbfs_content.listMounts);
</pre></li>
<li>
<p>While connected as <code>user1</code>, export fielesystem <code>user1_FS</code> for access to any user with <code>DBFS_ROLE</code> privilege.</p>
<pre>
user1@tank&gt; exec dbms_dbfs_sfs.exportFilesystem('user1_FS');
user1@tank&gt; commit;
</pre></li>
<li>
<p>Connect as the user who will use the <code>dbfs_client</code>.</p>
<pre>
user1@tank&gt; connect user2
Connected.
</pre></li>
<li>
<p>As <code>user2</code>, view all available tables.</p>
<pre>
user2@tank&gt; select * from table(dbms_dbfs_sfs.listTables);

SCHEMA_NAME                |TABLE_NAME                 |PTABLE_NAME
---------------------------|---------------------------|-------------------
VERSION#
--------------------------------CREATED
---------------------------------------------------------------------------
FORMATTED
---------------------------------------------------------------------------
PROPERTIES(PROPNAME, PROPVALUE, TYPECODE)
---------------------------------------------------------------------------
user1                        |SFS$_FST_11                |SFS$_FSTP_11
0.5.0
01-FEB-10 09.43.53.497856 PM
01-FEB-10 09.43.53.497856 PM
(null)
</pre></li>
<li>
<p>As <code>user2</code>, register and mount the store, but do not re-create the <code>user1_FS</code> filesystem.</p>
<pre>
user2@tank&gt; exec dbms_dbfs_sfs.registerFilesystem(
   'user2_FS', 'user1', 'SFS$_FST_11');
user2@tank&gt; exec dbms_dbfs_content.registerStore(
   'user2_FS', 'posix', 'DBMS_DBFS_SFS');
user2@tank&gt; exec dbms_dbfs_content.mountStore(
   'user2_FS', 'user2_mnt');
user2@tank&gt; commit;
</pre></li>
<li>
<p>[Optional] As <code>user2</code>, you may check that the previous step has completed successfully by viewing all mounts.</p>
<pre>
user2@tank&gt; select * from table(dbms_dbfs_content.listMounts);

STORE_NAME           |   STORE_ID|PROVIDER_NAME
---------------------|- ---------|------------------------------------------
PROVIDER_PKG         |PROVIDER_ID|PROVIDER_VERSION     |STORE_FEATURES
---------------------|-----------|---------------------|--------------------
STORE_GUID
----------
STORE_MOUNT
----------------------------------------------------------------------------
CREATED
----------------------------------------------------------------------------
MOUNT_PROPERTIES(PROPNAME, PROPVALUE, TYPECODE)
----------------------------------------------------------------------------
user2_FS             | 1362968596|posix
"DBMS_DBFS_SFS"      | 3350646887|0.5.0                | 12714135  141867344
user1_mnt
01-FEB-10 09.46.16.013046 PM
DBMS_DBFS_CONTENT_PROPERTIES_T(
  DBMS_DBFS_CONTENT_PROPERTY_T('principal', (null), 9),
  DBMS_DBFS_CONTENT_PROPERTY_T('owner', (null), 9), 
  DBMS_DBFS_CONTENT_PROPERTY_T('acl', (null), 9), 
  DBMS_DBFS_CONTENT_PROPERTY_T('asof', (null), 187),
  DBMS_DBFS_CONTENT_PROPERTY_T('read_only', '0', 2))
</pre></li>
<li>
<p>[Optional] List pathnames for <code>user2</code> and <code>user1</code>. Note that another mount, <code>user2_mnt,</code>for store <code>user2_FS,</code> is available for <code>user2</code>. However, the underlying filesystem data is the same for <code>user2</code> as for <code>user1</code>.</p>
<pre>
user2@tank&gt; select pathname from dbfs_content;
 
PATHNAME
-------------------------------------------------------------------------------
/user2_mnt
/user2_mnt/.sfs/tools
/user2_mnt/.sfs/snapshots
/user2_mnt/.sfs/content
/user2_mnt/.sfs/attributes
/user2_mnt/.sfs/RECYCLE
/user2_mnt/.sfs

user2@tank&gt; connect user1
Connected.

user1@tank&gt; select pathname from dbfs_content;
 
PATHNAME
---------------------
/user1_mnt
/user1_mnt/.sfs/tools
/user1_mnt/.sfs/snapshots
/user1_mnt/.sfs/content
/user1_mnt/.sfs/attributes
/user1_mnt/.sfs/RECYCLE
/user1_mnt/.sfs
</pre></li>
<li>
<p>In filesystem <code>user1_FS</code>, <code>user1</code> creates file <code><span class="codeinlineitalic">xxx</span></code>.</p>
<pre>
user1@tank&gt; var ret number;
user1@tank&gt; var data blob;
user1@tank&gt; exec :ret := dbms_fuse.fs_create('/user1_mnt/<span class="italic">xxx</span>', content =&gt; :data);
user1@tank&gt; select :ret from dual;
      :RET
----------
         0
</pre></li>
<li>
<p>[Optional] Write to file <code><span class="codeinlineitalic">xxx</span></code>, created in the previous step.</p>
<pre>
user1@tank&gt; var buf varchar2(100);
user1@tank&gt; exec :buf := 'hello world';
user1@tank&gt; exec dbms_lob.writeappend(:data, length(:buf), utl_raw.cast_to_raw(:buf));
user1@tank&gt; commit;
 
</pre></li>
<li>
<p>[Optional] Show that file <code><span class="codeinlineitalic">xxx</span></code> exists, and contains the appended data.</p>
<pre>
user1@tank&gt; select pathname, utl_raw.cast_to_varchar2(filedata) 
  from dbfs_content where filedata is not null;
 
PATHNAME
-------------------------------------------------------------------------------
UTL_RAW.CAST_TO_VARCHAR2(FILEDATA)
-------------------------------------------------------------------------------
/user1_mnt/<span class="italic">xxx</span>
hello world
</pre></li>
<li>
<p>User <code>user2</code> sees the same file in their own DBFS-specific pathname and mount prefix.</p>
<pre>
user1@tank&gt; connect user2
Connected.
 
user2@tank&gt; select pathname, utl_raw.cast_to_varchar2(filedata) from
  dbfs_content where filedata is not null;
 
PATHNAME
-------------------------------------------------------------------------------
UTL_RAW.CAST_TO_VARCHAR2(FILEDATA)
-------------------------------------------------------------------------------
/user2_mnt/<span class="italic">xxx</span>
hello world
</pre></li>
</ol>
<p>After the export and register pairing completes, both users behave as equals with regard to their usage of the underlying tables. The <code>exportFilesystem()</code> procedure manages the necessary grants for access to the same data, which is shared between schemas. After <code>user1</code> calls <code>exportFilesystem()</code>, the filesystem access may be granted to any user with <code>DBFS_ROLE</code>. Note that a different role can be specified.</p>
<p>Subsequently, <code>user2</code> may create a new DBFS filesystem that shares the same underlying storage as the <code>user1_FS</code> filesystem, by invoking <code>dbms_dbfs_sfs.registerFilesystem()</code>, <code>dbms_dbfs_sfs.registerStore()</code>, and <code>dmbs_dbfs_sfs.mountStore()</code> procedure calls.</p>
<p>When multiple RDBMS users share a filesystem, they must ensure that all RDBMS users unregister their interest in the filesystem before the owner (here, <code>user1</code>) drops the filesystem.</p>
<p>Oracle does not recommend that the root user run the DBFS.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIEIHJ"></a>
<div id="ADLOB46011" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Performing DBFS Diagnostics</h3>
<p>The <code>dbfs_client</code> supports multiple levels of tracing to help diagnose problems. The <code>dbfs_client</code> can either output traces to a file or to <code>/var/log/messages</code> using the <code>syslog</code> daemon on Linux. When tracing to a file, it keeps two trace files on disk. <code>dbfs_client</code> rotates the trace files automatically and limits disk usage to 20 MB.</p>
<p>By default, tracing is turned off except for critical messages which are always logged to <code>/var/log/messages</code>.</p>
<p>If <code>dbfs_client</code> is not able to connect to the Oracle Database, enable tracing using <code>trace_level</code> and <code>trace_file</code> options. Tracing prints additional messages to log file for easier debugging.</p>
<p>DBFS uses Oracle Database for storing files. Sometimes Oracle server issues are propagated to <code>dbfs_client</code> as errors. If there is a <code>dbfs_client</code> error, please see the Oracle server logs to see if that is the root cause.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCGDJC"></a>
<div id="ADLOB46012" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Managing DBFS Client Failover</h3>
<p>In cases of failure of one database instance in an Oracle RAC cluster, <code>dbfs_client</code> can failover to one of the other existing database instances. For <code>dbfs_client</code> failover to work correctly, you must modify the Oracle database service and specify failover parameters, as demonstrated in <a href="#CIHJDDEE">Example 6-5</a>.</p>
<div id="ADLOB46166" class="example">
<p class="titleinexample"><a id="CIHJDDEE"></a>Example 6-5 Enabling DBFS Client Failover Events</p>
<pre>
exec DBMS_SERVICE.MODIFY_SERVICE(service_name =&gt; 'service_name',
                                    aq_ha_notifications =&gt; true,
                                    failover_method =&gt; 'BASIC',
                                    failover_type =&gt; 'SELECT',
                                    failover_retries =&gt; 180,
                                    failover_delay =&gt; 1);
</pre></div>
<!-- class="example" -->
<p>To ensure no data loss during failover of the DBFS connection after a failure of the back-end Oracle database instance, specify the <code>-o failover</code> mount option, as demonstrated in <a href="#CIHFEEED">Example 6-6</a>. In this case, cached 'writes' may be lost if the client looses the connection. However, back-end failover to other Oracle RAC instances or standby databases does not cause lost writes.</p>
<div id="ADLOB46167" class="example">
<p class="titleinexample"><a id="CIHFEEED"></a>Example 6-6 Preventing Data Loss During Failover Events</p>
<pre>
$ dbfs_client <span class="italic">database_user</span>@<span class="italic">database_server</span> -o failover /mnt/dbfs 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHDCDAH"></a>
<div id="ADLOB46013" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Sharing and Caching DBFS</h3>
<p>It is possible to have multiple copies of <code>dbfs_client</code> accessing the same shared file system. The sharing and caching semantics are similar to NFS. Like NFS, the default mode caches writes on the client and flushes them after a timeout, or the user closes the file. Also like NFS, writes to a file are only visible to clients that open the file after the writer closed the file. This behavior is commonly referred to as <span class="italic">close-to-open cache consistency</span>.</p>
<p>To bypass client side write caching, specify <code>O_SYNC</code> when the file is opened. Writes in the cache can be forced to disk by calling <code>fsync</code>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHHBIGA"></a>
<div id="ADLOB46014" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Backing up DBFS</h3>
<p>There are two alternatives for backing up DBFS. In the first one, you must back up the tables that underlie the file system at the database level. Alternatively, use a file system backup utility, such as Oracle Secure Backup, through a mount point.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHDJABG">Backing up DBFS at the Database Level</a></p>
</li>
<li>
<p><a href="#CIHIICHF">Backing up DBFS through a File System Utility</a></p>
</li>
</ul>
<a id="CIHDJABG"></a>
<div id="ADLOB46168" class="sect3">
<h4 class="sect3">Backing up DBFS at the Database Level</h4>
<p>An advantage of backing up the tables at the database level is that the files in the file system are always consistent with the relational data in the database. A full restore and recover of the database also fully restores and recovers the file system with no data loss. During a point-in-time recovery of the database, the files are recovered to the specified time. As usual with database backup, modifications that occur during the backup do not affect the consistency of a restore. The entire restored file system is always consistent with respect to a specified time stamp.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIICHF"></a>
<div id="ADLOB46169" class="sect3">
<h4 class="sect3">Backing up DBFS through a File System Utility</h4>
<p>The advantage of backing up the file system using a file system backup utility is that individual files can be restored form backup more easily. Any changes made to the restored files after the last backup are lost.</p>
<p>You must specify the <code>allow_root</code> mount option if backups are scheduled using the Oracle Secure Backup Administrative Server.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHBDHHA"></a>
<div id="ADLOB46015" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Improving Small File Performance of DBFS</h3>
<p>Like any shared file system, the performance of DBFS for small files lags the performance of a local file system. Each file data or metadata operation in DBFS must go through the <code>FUSE</code> user mode file system, and then be forwarded across the network to the database. Therefore, each operation that is not cached on the client takes a few milliseconds to run in DBFS.</p>
<p>For operations that involve an input/output (IO) to disk, the time delay overhead is masked by the wait for the disk IO. Naturally, larger IOs have a lower percentage overhead than smaller IOs. The network overhead is more noticeable for operations that do not issue a disk IO.</p>
<p>When you compare the operations on a few small files with a local file system, the overhead is not noticeable, but operations that affect thousands of small files incur a much more noticeable overhead. For example, listing a single directory or looking at a single file produce near instantaneous response, while searching across a directory tree with many thousands of files results in a larger relative overhead.</p>
</div>
<!-- class="sect2" -->
<a id="CIHDJHDD"></a>
<div id="ADLOB46016" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enabling Advanced SecureFiles LOB Features for DBFS</h3>
<p>DBFS offers the advanced features available with SecureFiles LOBs: compression, deduplication, encryption, and partitioning. For example, DBFS can be configured as a compressed file system with partitioning. At the time of creating a file system, you must specify the set of enabled features for the file system. See <a href="adlob_smart.htm#g1024256">Chapter 4, "Using Oracle SecureFiles LOBs"</a> for more information about the features of SecureFiles LOBs.</p>
<div id="ADLOB46170" class="example">
<p class="titleinexample"><a id="sthref198"></a>Example 6-7 Enabling Advanced Secure Files LOB Features for DBFS</p>
<pre>
$ sqlplus @dbfs_create_filesystem_advanced <span class="italic">tablespace_name</span> <span class="italic">file_system&shy;name</span>
  [compress-high | compress-medium | compress-low | nocompress] 
  [deduplicate | nodeduplicate]
  [encrypt | noencrypt]
  [partition | non-partition]
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment898">
<tr>
<td class="cellalignment907">
<table class="cellalignment903">
<tr>
<td class="cellalignment902"><a href="adlob_fs.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment902"><a href="adlob_cont.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment909">
<table class="cellalignment901">
<tr>
<td class="cellalignment902"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment902"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment902"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment902"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment902"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment902"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
