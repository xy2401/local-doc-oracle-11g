<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Migrating Columns from LONGs to LOBs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-18T13:32:41Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer's Guide" />
<meta name="dcterms.identifier" content="E18294-04" />
<meta name="dcterms.isVersionOf" content="ADLOB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adlob_plsql_semantics.htm" title="Previous" type="text/html" />
<link rel="Next" href="part_api.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e18294.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/37</span> <!-- End Header -->
<div id="ADLOB008" class="chapter"><a id="g1029181"></a><a id="i1023763"></a>
<h1 class="chapter"><span class="secnum">18</span> Migrating Columns from LONGs to LOBs</h1>
<p>This chapter describes techniques for migrating tables that use <code>LONG</code> data types to LOB data types. This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1006094">Benefits of Migrating LONG Columns to LOB Columns</a></p>
</li>
<li>
<p><a href="#i1022660">Preconditions for Migrating LONG Columns to LOB Columns</a></p>
</li>
<li>
<p><a href="#i1023103">Using utldtree.sql to Determine Where Your Application Needs Change</a></p>
</li>
<li>
<p><a href="#i1021374">Converting Tables from LONG to LOB Data Types</a></p>
</li>
<li>
<p><a href="#i1022886">Migrating Applications from LONGs to LOBs</a></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The following chapters in this book describe support for LOB data types in various programming environments:
<ul>
<li>
<p><a href="adlob_sql_semantics.htm#BABBFDDF">Chapter 16, "SQL Semantics and LOBs"</a></p>
</li>
<li>
<p><a href="adlob_plsql_semantics.htm#g1010194">Chapter 17, "PL/SQL Semantics for LOBs"</a></p>
</li>
<li>
<p><a href="adlob_data_interface.htm#g1029381">Chapter 20, "Data Interface for Persistent LOBs"</a></p>
</li>
</ul>
</div>
</li>
</ul>
<a id="i1006094"></a>
<div id="ADLOB45614" class="sect1">
<h2 class="sect1">Benefits of Migrating <a id="sthref904"></a>LONG Columns to LOB <a id="sthref905"></a>Columns</h2>
<p>There are many benefits to migrating table columns from <code>LONG</code> data types to LOB data types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can use the techniques described in this chapter to do either of the following:
<ul>
<li>
<p>Convert columns of type <code>LONG</code> to either <code>CLOB</code> or <code>NCLOB</code> columns</p>
</li>
<li>
<p>Convert columns of type <code>LONG</code> <code>RAW</code> to <code>BLOB</code> type columns</p>
</li>
</ul>
<p>Unless otherwise noted, discussions in this chapter regarding "LONG to LOB" conversions apply to both of these data type conversions.</p>
</div>
<p>The following list compares the semantics of <code>LONG</code> and LOB data types in various application development scenarios:</p>
<ul>
<li>
<p>The number of <code>LONG</code> type columns is limited. Any given table can have a maximum of only one <code>LONG</code> type column. The number of LOB type columns in a table is not limited.</p>
</li>
<li>
<p><span class="bold"><a id="sthref906"></a><a id="sthref907"></a><a id="sthref908"></a></span>You can use the data interface for LOBs to enable replication of tables that contain <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns. Replication is allowed on LOB columns, but is not supported for <code>LONG</code> and <code>LONG</code> <code>RAW</code> columns. The database omits columns containing <code>LONG</code> and <code>LONG</code> <code>RAW</code> data types from replicated tables.</p>
<p>If a table is replicated or has materialized views, and its <code>LONG</code> column is changed to LOB, then you may have to manually fix the replicas.</p>
<div class="infoboxnotewarn">
<p class="notep1">Caution:</p>
<p class="warnsp">Oracle does not support converting <code>LOB</code>s into <code>LONG</code>s. Ensure that you have no requirement to maintain any column as a <code>LONG</code> before converting it into a <code>LOB</code>.</p>
</div>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1022660"></a>
<div id="ADLOB45615" class="sect1">
<h2 class="sect1">Preconditions for Migrating LONG Columns to LOB Columns</h2>
<p>This section describes preconditions that must be met before converting a <code>LONG</code> column to a LOB column.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1022886">"Migrating Applications from LONGs to LOBs"</a> before converting your table to determine whether any limitations on LOB columns prevent you from converting to LOBs.</div>
<div id="ADLOB45616" class="sect2"><a id="sthref909"></a>
<h3 class="sect2">Dropping a Domain Index on a LONG Column Before Converting to a LOB</h3>
<p>Any domain index on a <code>LONG</code> column must be dropped before converting the <code>LONG</code> column to LOB column. See <a href="#i1021732">"Indexes on Columns Converted from LONG to LOB Data Types"</a> for more information.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45617" class="sect2"><a id="sthref910"></a>
<h3 class="sect2"><a id="sthref911"></a><a id="sthref912"></a>Preventing Generation of Redo Space on Tables Converted to LOB Data Types</h3>
<p>Generation of redo space can cause performance problems during the process of converting <code>LONG</code> columns. Redo changes for the table are logged during the conversion process only if the table has <code>LOGGING</code> on.</p>
<p>Redo changes for the column being converted from <code>LONG</code> to LOB are logged only if the storage characteristics of the LOB column indicate <code>LOGGING</code>. The logging setting (<code>LOGGING</code> or <code>NOLOGGING</code>) for the LOB column is inherited from the tablespace in which the LOB is created.</p>
<p>To prevent generation of redo space during migration, do the following before migrating your table (syntax is in BNF):</p>
<ol>
<li>
<p><code>ALTER TABLE Long_tab NOLOGGING;</code></p>
</li>
<li>
<p><code>ALTER TABLE Long_tab MODIFY (long_col CLOB [DEFAULT &lt;</code><code><span class="codeinlineitalic">default_val</span></code><code>&gt;]) LOB (long_col) STORE AS (NOCACHE NOLOGGING);</code></p>
<p>Note that you must also specify <code>NOCACHE</code> when you specify <code>NOLOGGING</code> in the <code>STORE AS</code> clause.</p>
</li>
<li>
<p><code>ALTER TABLE Long_tab MODIFY LOB (long_col) (CACHE);</code></p>
</li>
<li>
<p><code>ALTER TABLE Long_tab LOGGING;</code></p>
</li>
<li>
<p>Make a backup of the tablespaces containing the table and the LOB column.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1023103"></a>
<div id="ADLOB45618" class="sect1">
<h2 class="sect1">Using utldtree.sql to Determine Where Your Application Needs Change</h2>
<p>You can use the utility, <code>rdbms/admin/utldtree.sql</code>, to determine which parts of your application require rewriting when you migrate your table from LONG to LOB column types. This utility enables you to recursively see all objects that are dependent on a given object. For example, you can see all objects which depend on a table with a <code>LONG</code> column. You can only see objects for which you have permission.</p>
<p>Instructions on how to use <code>utldtree.sql</code> are documented in the file itself. Also, <code>utldtree.sql</code> is only needed for PL/SQL. For SQL and OCI, you have no requirement to change your applications.</p>
</div>
<!-- class="sect1" -->
<a id="i1021374"></a>
<div id="ADLOB45619" class="sect1">
<h2 class="sect1">Converting Tables from LONG to LOB Data Types</h2>
<p>This section describes the following techniques for migrating existing tables from <code>LONG</code> to LOB data types:</p>
<ul>
<li>
<p><a href="#i1006316">"Using ALTER TABLE to Convert LONG Columns to LOB Columns"</a></p>
</li>
<li>
<p><a href="#i1018656">"Copying a LONG to a LOB Column Using the TO_LOB Operator"</a></p>
</li>
<li>
<p><a href="#i1022537">"Online Redefinition of Tables with LONG Columns"</a> where high availability is critical</p>
</li>
<li>
<p><a href="#BABEHGBA">"Using Oracle Data Pump to Migrate a Database"</a> when you can convert using this utility</p>
</li>
</ul>
<a id="i1006316"></a>
<div id="ADLOB45620" class="sect2">
<h3 class="sect2">Using <a id="sthref913"></a><a id="sthref914"></a>ALTER TABLE to Convert LONG Columns to LOB Columns</h3>
<p>You can use the <code>ALTER</code> <code>TABLE</code> statement in SQL to convert a <code>LONG</code> column to a LOB column. To do so, use the following syntax:</p>
<pre>
ALTER TABLE [&lt;schema&gt;.]&lt;table_name&gt;
   MODIFY ( &lt;<span class="bold">long_column_name</span>&gt; { CLOB | BLOB | NCLOB } 
<span class="bold">  [DEFAULT &lt;default_value</span>&gt;]) [LOB_storage_clause];
</pre>
<pre>
</pre>
<p>For example, if you had a table that was created as follows:</p>
<pre>
CREATE TABLE Long_tab (id NUMBER, long_col LONG);
</pre>
<p>then you can change the column <code>long_col</code> in table <code>Long_tab</code> to data type <code>CLOB</code> using following <code>ALTER</code> <code>TABLE</code> statement:</p>
<pre>
ALTER TABLE Long_tab MODIFY ( long_col CLOB );
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>ALTER</code> <code>TABLE</code> statement copies the contents of the table into a new space, and frees the old space at the end of the operation. This temporarily doubles the space requirements.</div>
<p>Note that when using the <code>ALTER</code> <code>TABLE</code> statement to convert a <code>LONG</code> column to a LOB column, only the following options are allowed:</p>
<ul>
<li>
<p><code>DEFAULT</code> which enables you to specify a default value for the LOB column.</p>
</li>
<li>
<p>The <code><span class="codeinlineitalic">LOB_storage_clause</span></code>, which enables you to specify the LOB storage characteristics for the converted column, can be specified in the <code>MODIFY</code> clause.</p>
</li>
</ul>
<p>Other <code>ALTER</code> <code>TABLE</code> options are not allowed when converting a <code>LONG</code> column to a LOB type column.</p>
<div id="ADLOB45621" class="sect3"><a id="sthref915"></a>
<h4 class="sect3">Migration Issues</h4>
<p>General issues concerning migration include the following:</p>
<ul>
<li>
<p>All <span class="bold"><a id="sthref916"></a></span>constraints of your previous <code>LONG</code> columns are maintained for the new LOB columns. The only constraint allowed on <code>LONG</code> columns are <code>NULL</code> and <code>NOT</code> <code>NULL</code>. To alter the constraints for these columns, or alter any other columns or properties of this table, you have to do so in a subsequent <code>ALTER</code> <code>TABLE</code> statement.</p>
</li>
<li>
<p>If you do not specify a default value, then the default value for the <code>LONG</code> column becomes the default value of the LOB column.</p>
</li>
<li>
<p>Most of the existing triggers on your table are still usable, however <code>UPDATE OF</code> triggers can cause issues. See <a href="#i1022886">"Migrating Applications from LONGs to LOBs"</a> for more details.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1018656"></a>
<div id="ADLOB45622" class="sect2">
<h3 class="sect2">Copying a LONG to a LOB Column Using the TO_LOB Operator</h3>
<p>If you do not want to use <code>ALTER</code> <code>TABLE</code>, as described earlier in this section, then you can use the <code>TO_LOB</code> operator on a <code>LONG</code> column to copy it to a LOB column. You can use the <code>CREATE</code> <code>TABLE</code> <code>AS</code> <code>SELECT</code> statement or the <code>INSERT</code> <code>AS</code> <code>SELECT</code> statement with the <code>TO_LOB</code> operator to copy data from a <code>LONG</code> column to a <code>CLOB</code> or <code>NCLOB</code> column, or from a <code>LONG</code> <code>RAW</code> column to a <code>BLOB</code> column. For example, if you have a table with a <code>LONG</code> column that was created as follows:</p>
<pre>
CREATE TABLE Long_tab (id NUMBER, long_col LONG);  
</pre>
<p>then you can do the following to copy the column to a LOB column:</p>
<pre>
CREATE TABLE Lob_tab (id NUMBER, clob_col CLOB);  
INSERT INTO Lob_tab SELECT id, TO_LOB(long_col) FROM long_tab;  
COMMIT;
</pre>
<p>If the <code>INSERT</code> returns an error (because of lack of undo space), then you can incrementally migrate <code>LONG</code> data to the LOB column using the <code>WHERE</code> clause. After you ensure that the data is accurately copied, you can drop the original table and create a view or synonym for the new table using one of the following sequences:</p>
<pre>
DROP TABLE Long_tab;  
CREATE VIEW Long_tab (id, long_col) AS SELECT * from Lob_tab; 
</pre>
<p>or</p>
<pre>
DROP TABLE Long_tab;  
CREATE SYNONYM Long_tab FOR Lob_tab;
</pre>
<p>This series of operations is equivalent to changing the data type of the column <code>Long_col</code> of table <code>Long_tab</code> from <code>LONG</code> to <code>CLOB</code>. With this technique, you have to re-create any constraints, triggers, grants and indexes on the new table.</p>
<p>Use of the <code>TO_LOB</code> operator is subject to the following limitations:</p>
<ul>
<li>
<p>You can use <code>TO_LOB</code> to copy data to a LOB column, but not to a LOB attribute of an object type.</p>
</li>
<li>
<p>You cannot use <code>TO_LOB</code> with a remote table. For example, the following statements do not work:</p>
<pre>
INSERT INTO tb1@dblink (lob_col) SELECT TO_LOB(long_col) FROM tb2; 
INSERT INTO tb1 (lob_col) SELECT TO_LOB(long_col) FROM tb2@dblink; 
CREATE TABLE tb1 AS SELECT TO_LOB(long_col) FROM tb2@dblink; 
</pre></li>
<li>
<p>The <code>TO_LOB</code> operator cannot be used in the <code>CREATE</code> <code>TABLE</code> <code>AS</code> <code>SELECT</code> statement to convert a <code>LONG</code> or <code>LONG</code> <code>RAW</code> column to a LOB column when creating an index organized table.</p>
<p>To work around this limitation, create the index organized table, and then do an <code>INSERT</code> <code>AS</code> <code>SELECT</code> of the <code>LONG</code> or <code>LONG</code> <code>RAW</code> column using the <code>TO_LOB</code> operator.</p>
</li>
<li>
<p>You cannot use <code>TO_LOB</code> inside any PL/SQL block.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1022537"></a>
<div id="ADLOB45623" class="sect2">
<h3 class="sect2">Online Redefinition of Tables with LONG Columns</h3>
<p>Tables with <code>LONG</code> and <code>LONG</code> <code>RAW</code> columns can be migrated using online table redefinition. This technique is suitable for migrating LONG columns in database tables where high availability is critical.</p>
<p>To use this technique, you must convert <code>LONG</code> columns to LOB types during the redefinition process as follows:</p>
<ul>
<li>
<p>Any <code>LONG</code> column must be converted to a <code>CLOB</code> or <code>NCLOB</code> column.</p>
</li>
<li>
<p>Any <code>LONG</code> <code>RAW</code> column must be converted to a <code>BLOB</code> column.</p>
</li>
</ul>
<p>This conversion is performed using the <code>TO_LOB()</code> operator in the column mapping of the <code>DBMS_REDEFINITION.START_REDEF_TABLE()</code> procedure.</p>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
You cannot perform online redefinition of tables with <code>LONG</code> or <code>LONG</code> <code>RAW</code> columns unless you convert the columns to LOB types as described in this section.</div>
<p>General tasks involved in the online redefinition process are given in the following list. Issues specific to converting <code>LONG</code> and <code>LONG</code> <code>RAW</code> columns are called out. See the related documentation referenced at the end of this section for additional details on the online redefinition process that are not described here.</p>
<ul>
<li>
<p>Create an empty interim table. This table holds the migrated data when the redefinition process is done. In the interim table:</p>
<ul>
<li>
<p>Define a <code>CLOB</code> or <code>NCLOB</code> column for each <code>LONG</code> column in the original table that you are migrating.</p>
</li>
<li>
<p>Define a <code>BLOB</code> column for each <code>LONG</code> <code>RAW</code> column in the original table that you are migrating.</p>
</li>
</ul>
</li>
<li>
<p>Start the redefinition process. To do so, call <code>DBMS_REDEFINITION.START_REDEF_TABLE</code> and pass the column mapping using the <code>TO_LOB</code> operator as follows:</p>
<pre>
DBMS_REDEFINITION.START_REDEF_TABLE(
    'schema_name', 
    'original_table',
    'interim_table', 
    'TO_LOB(<span class="codeinlineitalic">long_col_name</span>) <span class="codeinlineitalic">lob_col_name</span>',
    'options_flag',
    'orderby_cols'); 
</pre>
<p>where <code><span class="codeinlineitalic">long_col_name</span></code> is the name of the <code>LONG</code> or <code>LONG</code> <code>RAW</code> column that you are converting in the original table and <code><span class="codeinlineitalic">lob_col_name</span></code> is the name of the LOB column in the interim table. This LOB column holds the converted data.</p>
</li>
<li>
<p>Call the <code>DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS</code> procedure as described in the related documentation.</p>
</li>
<li>
<p>Call the <code>DBMS_REDEFINITION.FINISH_REDEF_TABLE</code> procedure as described in the related documentation.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDIHHBC"></a><a id="ADLOB45624"></a>Parallel Online Redefinition<a id="sthref917"></a><a id="sthref918"></a></p>
<p>On a system with sufficient resources for parallel execution, redefinition of a <code>LONG</code> column to a LOB column can be executed in parallel under the following conditions:</p>
<p>In the case where the destination table is non-partitioned:</p>
<ul>
<li>
<p>The segment used to store the LOB column in the destination table belongs to a locally managed tablespace with Automatic Segment Space Management (<a id="sthref919"></a>ASSM) enabled, which is now the default.</p>
</li>
<li>
<p>There is a simple mapping from one <code>LONG</code> column to one LOB column, and the destination table has only one LOB column.</p>
</li>
</ul>
<p>In the case where the destination table is partitioned, the normal methods for parallel execution for partitioning apply. When the destination table is partitioned, then online redefinition is executed in parallel.</p>
<p class="subhead2"><a id="ADLOB45625"></a>Example of Online Redefinition</p>
<p>The following example demonstrates online redefinition with LOB columns.</p>
<pre>
REM Grant privileges required for online redefinition.
GRANT execute ON DBMS_REDEFINITION TO pm;
GRANT ALTER ANY TABLE TO pm;
GRANT DROP ANY TABLE TO pm;
GRANT LOCK ANY TABLE TO pm;
GRANT CREATE ANY TABLE TO pm;
GRANT SELECT ANY TABLE TO pm;

REM Privileges required to perform cloning of dependent objects.
GRANT CREATE ANY TRIGGER TO pm;
GRANT CREATE ANY INDEX TO pm;

connect pm/<span class="italic">passwd</span>

drop table cust;
create table cust(c_id   number primary key,
                  c_zip  number,
                  c_name varchar(30) default null,
                  c_long long
                  );
insert into cust values(1, 94065, 'hhh', 'ttt');

-- Creating Interim Table 
-- There is no requirement to specify constraints because they are 
-- copied over from the original table.
create table cust_int(c_id   number not null,
                  c_zip  number,
                  c_name varchar(30) default null,
                  c_long clob
                  );

declare
 col_mapping varchar2(1000);
BEGIN
--  map all the columns in the interim table to the original table
 col_mapping :=
               'c_id             c_id  , '||
               'c_zip            c_zip , '||
               'c_name           c_name, '||
               'to_lob(c_long)   c_long';

dbms_redefinition.start_redef_table('pm', 'cust', 'cust_int', col_mapping);
END;
/

declare
 error_count pls_integer := 0;
BEGIN
  dbms_redefinition.copy_table_dependents('pm', 'cust', 'cust_int',
                                          1, true, true, true, false,
                                          error_count);

  dbms_output.put_line('errors := ' || to_char(error_count));
END;
/

exec  dbms_redefinition.finish_redef_table('pm', 'cust', 'cust_int');

-- Drop the interim table
drop table cust_int;

desc cust;

-- The following insert statement fails. This illustrates 
-- that the primary key constraint on the c_id column is 
-- preserved after migration. 

insert into cust values(1, 94065, 'hhh', 'ttt');

select * from cust;
</pre>
<div class="infobox-note">
<p class="notep1">See Also:</p>
The following related documentation provides additional details on the redefinition process described earlier in this section:
<ul>
<li>
<p><a class="olink ADMIN01514" href="../../server.112/e25494/tables.htm#ADMIN01514"><span class="italic">Oracle Database Administrator's Guide</span></a> gives detailed procedures and examples of redefining tables online.</p>
</li>
<li>
<p><a class="olink ARPLS042" href="../../appdev.112/e40758/d_redefi.htm#ARPLS042"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> includes information on syntax and other details on usage of procedures in the <code>DBMS_REDEFINITION</code> package.</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABEHGBA"></a>
<div id="ADLOB45626" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref920"></a>Using Oracle Data Pump to Migrate a Database</h3>
<p>If you are exporting data as part of a migration to a new database, create a table on the destination database with LOB columns and Data Pump calls the LONG-to-LOB function implicitly.</p>
<p>For details on using Oracle Data Pump, refer to <a class="olink SUTIL" href="../../server.112/e22490/toc.htm"><span class="italic">Oracle Database Utilities</span></a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1022886"></a>
<div id="ADLOB45627" class="sect1">
<h2 class="sect1">Migrating Applications from LONGs to LOBs</h2>
<p>This section discusses differences between <code>LONG</code> and LOB data types that may impact your application migration plans or require you to modify your application.</p>
<p>Most APIs that work with LONG data types in the PL/SQL and OCI environments are enhanced to also work with LOB data types. These APIs are collectively referred to as the <span class="italic">data interface for persistent LOBs</span>, or simply the <span class="italic">data interface</span>. Among other things, the data interface provides the following benefits:</p>
<ul>
<li>
<p>Changes needed are minimal in PL/SQL and OCI applications that use tables with columns converted from <code>LONG</code> to LOB data types.</p>
</li>
<li>
<p>You can work with LOB data types in your application without having to deal with LOB locators.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adlob_data_interface.htm#g1029381">Chapter 20, "Data Interface for Persistent LOBs"</a> for details on PL/SQL and OCI APIs included in the data interface.</p>
</li>
<li>
<p><a href="adlob_sql_semantics.htm#BABBFDDF">Chapter 16, "SQL Semantics and LOBs"</a> for details on SQL syntax supported for LOB data types.</p>
</li>
<li>
<p><a href="adlob_plsql_semantics.htm#g1010194">Chapter 17, "PL/SQL Semantics for LOBs"</a> for details on PL/SQL syntax supported for LOB data types.</p>
</li>
</ul>
</div>
</li>
</ul>
<div id="ADLOB45628" class="sect2"><a id="sthref921"></a>
<h3 class="sect2"><a id="sthref922"></a><a id="sthref923"></a><a id="sthref924"></a>LOB Columns Are Not Allowed in Clustered Tables</h3>
<p>LOB columns are not allowed in clustered tables, whereas <code>LONG</code>s are allowed. If a table is a part of a cluster, then any <code>LONG</code> or <code>LONG</code> <code>RAW</code> column cannot be changed to a LOB column.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45629" class="sect2"><a id="sthref925"></a>
<h3 class="sect2"><a id="sthref926"></a><a id="sthref927"></a><a id="sthref928"></a>LOB Columns Are Not Allowed in AFTER UPDATE OF Triggers</h3>
<p>You cannot have LOB columns in the <code>UPDATE</code> <code>OF</code> list of an <code>AFTER UPDATE</code> <code>OF</code> trigger. <code>LONG</code> columns are allowed in such triggers. For example, the following create trigger statement is not valid:</p>
<pre>
CREATE TABLE t(lobcol CLOB);
CREATE TRIGGER trig AFTER UPDATE OF lobcol ON t ...;
</pre>
<pre>
</pre>
<p>All other triggers work on LOB columns.</p>
</div>
<!-- class="sect2" -->
<a id="i1021732"></a>
<div id="ADLOB45630" class="sect2">
<h3 class="sect2"><a id="sthref929"></a><a id="sthref930"></a>Indexes on Columns Converted from LONG to LOB Data Types</h3>
<p>Indexes <span class="bold"><a id="sthref931"></a><a id="sthref932"></a><a id="sthref933"></a></span>on any column of the table being migrated must be manually rebuilt after converting any <code>LONG</code> column to a LOB column. This includes function-based indexes.</p>
<p>Any function-based index on a <code>LONG</code> column is unusable during the conversion process and must be rebuilt after converting. Application code that uses function-based indexing should work without modification after converting.</p>
<p>Note that, any domain indexes on a <code>LONG</code> column must be dropped before converting the <code>LONG</code> column to LOB column. You can rebuild the domain index after converting.</p>
<p>To rebuild an index after converting, use the following steps:</p>
<ol>
<li>
<p>Select the index from your original table as follows:</p>
<pre>
SELECT index_name FROM user_indexes WHERE table_name='LONG_TAB'; 
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The table name must be capitalized in this query.</div>
</li>
<li>
<p>For the selected index, use the command:</p>
<pre>
ALTER INDEX &lt;index&gt; REBUILD
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADLOB45631" class="sect2"><a id="sthref934"></a>
<h3 class="sect2">Empty LOBs Compared to NULL and Zero Length LONGs<a id="sthref935"></a></h3>
<p>A LOB column can hold an <span class="italic">empty</span> LOB. An empty LOB is a LOB locator that is fully initialized, but not populated with data. Because <code>LONG</code> data types do not use locators, the "empty" concept does not apply to <code>LONG</code> data types.</p>
<p>Both LOB column values and <code>LONG</code> column values, inserted with an initial value of <code>NULL</code> or an empty string literal, have a <code>NULL</code> value. Therefore, application code that uses <code>NULL</code> or zero-length values in a <code>LONG</code> column functions exactly the same after you convert the column to a LOB type column.</p>
<p>In contrast, a LOB initialized to empty has a non-<code>NULL</code> value as illustrated in the following example:</p>
<pre>
CREATE TABLE long_tab(id NUMBER, long_col LONG);
CREATE TABLE lob_tab(id NUMBER, lob_col CLOB);

INSERT INTO long_tab values(1, NULL);

REM     A zero length string inserts a NULL into the LONG column:
INSERT INTO long_tab values(1, ''); 

INSERT INTO lob_tab values(1, NULL);

REM     A zero length string inserts a NULL into the LOB column:
INSERT INTO lob_tab values(1, '');  

REM     Inserting an empty LOB inserts a non-NULL value: 
INSERT INTO lob_tab values(1, empty_clob());  

DROP TABLE long_tab;
DROP TABLE lob_tab;
</pre></div>
<!-- class="sect2" -->
<div id="ADLOB45632" class="sect2"><a id="sthref936"></a>
<h3 class="sect2">Overloading with Anchored Types</h3>
<p>For applications using anchored types, some overloaded variables resolve to different targets during the conversion to LOBs. For example, given the procedure <code>p</code> overloaded with specifications 1 and 2:</p>
<pre>
procedure p(l long) is ...;       -- (specification 1)  
procedure p(c clob) is ...;       -- (specification 2)  
</pre>
<p>and the procedure call:</p>
<pre>
declare  
     var  longtab.longcol%type;  
   BEGIN  
     ...  
   p(var);  
     ...  
END;  
</pre>
<p>Prior to migrating from <code>LONG</code> to LOB columns, this call would resolve to specification 1. Once <code>longtab</code> is migrated to LOB columns this call resolves to specification 2. Note that this would also be true if the parameter type in specification 1 were a <code>CHAR</code>, <code>VARCHAR2</code>, <code>RAW</code>, <code>LONG</code> <code>RAW</code>.</p>
<p>If you have migrated you tables from <code>LONG</code> columns to LOB columns, then you must manually examine your applications and determine whether overloaded procedures must be changed.</p>
<p>Some applications that included overloaded procedures with LOB arguments before migrating may still break. This includes applications that do not use <code>LONG</code> anchored types. For example, given the following specifications (1 and 2) and procedure call for procedure <code>p</code>:</p>
<pre>
procedure p(n number) is ...;       -- (1)  
procedure p(c clob) is ...;         -- (2)  
  
p('123');                 -- procedure call 
</pre>
<p>Before migrating, the only conversion allowed was <code>CHAR</code> to <code>NUMBER</code>, so specification 1 would be chosen. After migrating, both conversions are allowed, so the call is ambiguous and raises an overloading error.</p>
</div>
<!-- class="sect2" -->
<a id="i1007059"></a>
<div id="ADLOB45633" class="sect2">
<h3 class="sect2">Some Implicit Conversions Are Not Supported for LOB Data Types</h3>
<p>PL/SQL permits implicit conversion from <code>NUMBER</code>, <code>DATE</code>, <code>ROW_ID</code>, <code>BINARY_INTEGER</code>, and <code>PLS_INTEGER</code> data types to a <code>LONG</code>; however, implicit conversion from these data types to a LOB is not allowed.</p>
<p>If your application uses these implicit conversions, then you have to explicitly convert these types using the <code>TO_CHAR</code> operator for character data or the <code>TO_RAW</code> operator for binary data. For example, if your application has an assignment operation such as:</p>
<pre>
number_var := long_var;  -- The RHS is a LOB variable after converting. 
</pre>
<p>then you must modify your code as follows:</p>
<pre>
number_var := TO_CHAR(long_var); 
-- Assuming that long_var is of type CLOB after conversion
</pre>
<p>The following conversions are not supported for LOB types:</p>
<ul>
<li>
<p><code>BLOB</code> to <code>VARCHAR2</code>, <code>CHAR</code>, or <code>LONG</code></p>
</li>
<li>
<p><code>CLOB</code> to <code>RAW</code> or <code>LONG</code> <code>RAW</code></p>
</li>
</ul>
<p>This applies to all operations where implicit conversion takes place. For example if you have a <code>SELECT</code> statement in your application as follows:</p>
<pre>
SELECT long_raw_column INTO my_varchar2 VARIABLE FROM my_table
</pre>
<pre>
</pre>
<p>and <code>long_raw_column</code> is a <code>BLOB</code> after converting your table, then the <code>SELECT</code> statement produces an error. To make this conversion work, you must use the <code>TO_RAW</code> operator to explicitly convert the <code>BLOB</code> to a <code>RAW</code> as follows:</p>
<pre>
SELECT TO_RAW(long_raw_column) INTO my_varchar2 VARIABLE FROM my_table  
</pre>
<pre>
</pre>
<p>The same holds for selecting a <code>CLOB</code> into a <code>RAW</code> variable, or for assignments of <code>CLOB</code> to <code>RAW</code> and <code>BLOB</code> to <code>VARCHAR2</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment898">
<tr>
<td class="cellalignment907">
<table class="cellalignment903">
<tr>
<td class="cellalignment902"><a href="adlob_plsql_semantics.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment902"><a href="part_api.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment909">
<table class="cellalignment901">
<tr>
<td class="cellalignment902"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment902"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment902"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment902"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment902"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment902"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
