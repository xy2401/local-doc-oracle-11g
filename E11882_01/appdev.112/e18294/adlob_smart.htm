<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Oracle SecureFiles LOBs</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-18T13:32:40Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database SecureFiles and Large Objects Developer's Guide" />
<meta name="dcterms.identifier" content="E18294-04" />
<meta name="dcterms.isVersionOf" content="ADLOB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="part_securef.htm" title="Previous" type="text/html" />
<link rel="Next" href="adlob_fs.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e18294.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/37</span> <!-- End Header -->
<div id="ADLOB4444" class="chapter"><a id="g1024256"></a><a id="i1006093"></a>
<h1 class="chapter"><span class="secnum">4</span> Using Oracle SecureFiles LOBs</h1>
<p>This chapter describes how to use SecureFiles LOBs, which were introduced to extend the original BasicFiles LOB implementation.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CIHJIDGE">About SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#CIHGHEFA">Using CREATE TABLE with SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#CIHJJBIJ">Using ALTER TABLE with SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#CIHIAGFF">Database File System Links</a></p>
</li>
<li>
<p><a href="#BABJFEBB">Initialization Parameter db_securefile for SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#BABGIGHB">Compatibility and Upgrading</a></p>
</li>
<li>
<p><a href="#BABDIEGE">Migrating Columns from BasicFiles LOBs to SecureFiles LOBs</a></p>
</li>
<li>
<p><a href="#BABGEJDE">PL/SQL Packages for SecureFiles LOBs and DBFS</a></p>
</li>
</ul>
<a id="CIHJIDGE"></a>
<div id="ADLOB45162" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">About SecureFiles LOBs</h2>
<p>Beginning with Oracle Database 11<span class="italic">g</span> Release 1, Oracle introduced SecureFiles, a new LOB storage architecture. SecureFiles LOBs are created when the storage keyword <code>SECUREFILE</code> appears in the <code>CREATE</code> <code>TABLE</code> statement. The original LOB storage architecture, BasicFiles LOBs, is the default storage. It is in effect if the keyword <code>SECUREFILE</code> is not used, or if the keyword <code>BASICFILE</code> is used in the <code>CREATE</code> <code>TABLE</code> statement.</p>
<p>The following sections describe LOB storage characteristics used when designing, creating, and modifying tables with LOB column types. The database administrator may use the <code>db_securefile</code> initialization parameter in the <code>init.ora</code> file to modify initial settings.</p>
<p>Oracle recommends that you enable compression, deduplication, or encryption through the <code>CREATE&nbsp;TABLE</code> statement. If you enable these features through the <code>ALTER&nbsp;TABLE</code> statement, <span class="italic">all</span> SecureFiles LOB data in the table is read, modified, and written; this causes the database to lock the table during a potentially lengthy operation.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHIGFBA">About Compression</a></p>
</li>
<li>
<p><a href="#CIHEBAJI">About Deduplication</a></p>
</li>
<li>
<p><a href="#CIHJAFEE">About Encryption</a></p>
</li>
</ul>
<a id="CIHIGFBA"></a>
<div id="ADLOB46109" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Compression</h3>
<p>SecureFiles Intelligent Compression, available with the Oracle Advanced Compression Option, seamlessly analyzes SecureFiles LOB data and compresses to save disk space.</p>
<p>Note that you must have a license for the Oracle Advanced Compression Option before implementing SecureFiles Intelligent Compression. See <a class="olink DBLIC142" href="../../license.112/e47877/options.htm#DBLIC142">Oracle Database Licensing Information</a> for more information.</p>
</div>
<!-- class="sect2" -->
<a id="CIHEBAJI"></a>
<div id="ADLOB46110" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Deduplication</h3>
<p>SecureFiles Intelligent Deduplication, available with the Oracle Advanced Compression Option, enables Oracle Database to automatically detect duplicate LOB data within a LOB column or partition, and conserve space by storing only one copy of the data.</p>
<p>Note that you must have a license for the Oracle Advanced Compression Option before implementing SecureFiles Intelligent Deduplication. See <a class="olink DBLIC142" href="../../license.112/e47877/options.htm#DBLIC142"><span class="italic">Oracle Database Licensing Information</span></a> for more information.</p>
<p>Note also that Oracle Streams does not support SecureFiles LOBs that are deduplicated.</p>
</div>
<!-- class="sect2" -->
<a id="CIHJAFEE"></a>
<div id="ADLOB46111" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">About Encryption</h3>
<p>SecureFiles Intelligent Encryption, available with the Oracle Advanced Security Option, introduces a new encryption facility for LOBs. The data is encrypted using Transparent Data Encryption (TDE), which allows the data to be stored securely, and still allows for random read and write access.</p>
<p>Note that you must have a license for the Oracle Advanced Security Option before implementing SecureFiles Intelligent Encryption. See <a class="olink DBLIC143" href="../../license.112/e47877/options.htm#DBLIC143"><span class="italic">Oracle Database Licensing Information</span></a> for more information.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHGHEFA"></a>
<div id="ADLOB45944" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref85"></a><a id="sthref86"></a>Using <a id="sthref87"></a>CREATE TABLE with SecureFiles LOBs</h2>
<p>A SecureFiles LOB can only be created ina tablespace managed with Automatic Segment Space Management (<a id="sthref88"></a>ASSM). The following parameter descriptions apply to the LOB storage paradigm using the <code>SECUREFILE</code> parameter. See <a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a>, <code>CREATE TABLE</code> statement, for further details.</p>
<p>Oracle recommends that you enable compression, deduplication, or encryption through the <code>CREATE&nbsp;TABLE</code> statement. If you enable these features through the <code>ALTER&nbsp;TABLE</code> statement, <span class="italic">all</span> SecureFiles LOB data in the table is read, modified, and written; this causes the database to lock the table during a potentially lengthy operation.</p>
<p>The <code><a id="sthref89"></a>SHRINK</code> option is not supported for SecureFiles LOBs.</p>
<p>SecureFiles LOBs introduce new storage parameters. These are introduced in the BNF of <code>CREATE</code> <code>TABLE</code>, in <a href="#CIHCGECB">Example 4-1</a>. Full description of the parameters is in <a href="#CIHJEJHD">"Parameters of CREATE TABLE for SecureFiles LOB"</a>.</p>
<div id="ADLOB46112" class="example">
<p class="titleinexample"><a id="CIHCGECB"></a>Example 4-1 BNF for CREATE TABLE</p>
<p>Keywords are in bold.</p>
<pre>
<span class="bold">CREATE</span> [ <span class="bold">GLOBAL</span> <span class="bold">TEMPORARY</span> ] <span class="bold">TABLE</span>
   [ schema.]table <span class="bold">OF</span>
   [ schema.]object_type
   [ ( relational_properties ) ]
   [ <span class="bold">ON</span> <span class="bold">COMMIT</span> { <span class="bold">DELETE</span> | <span class="bold">PRESERVE</span> } <span class="bold">ROWS</span> ]
   [ OID_clause ]
   [ OID_index_clause ]
   [ physical_properties ]
   [ table_properties ] ;
 
&lt;relational_properties&gt; ::= 
{ column_definition
| { out_of_line_constraint
  | out_of_line_ref_constraint
  | supplemental_logging_props
  }
}
  [, { column_definition
     | { out_of_line_constraint
       | out_of_line_ref_constraint
       | supplemental_logging_props
       }
  ]...
 
&lt;column_definition&gt; ::= 
column data_type [ <span class="bold">SORT</span> ]
      [ <span class="bold">DEFAULT</span> expr ]
      [ <span class="bold">ENCRYPT</span> encryption_spec ]
      [ ( inline_constraint [ inline_constraint ] ... )
      | inline_ref_constraint 
      ]
 
&lt;data_type&gt; ::=
{ Oracle_built_in_datatypes
| ANSI_supported_datatypes
| user_defined_types
| Oracle_supplied_types
}
 
&lt;Oracle_built_in_datatypes&gt; ::=
{ character_datatypes
| number_datatypes
| long_and_raw_datatypes
| datetime_datatypes
| large_object_datatypes
| rowid_datatypes
}
 
&lt;large_object_datatypes&gt; ::= 
{ <span class="bold">BLOB</span> | <span class="bold">CLOB</span> | <span class="bold">NCLOB</span>| <span class="bold">BFILE</span> }
 
 &lt;table_properties&gt; ::=
  [ column_properties ]
  [ table_partitioning_clauses ]
  [ <span class="bold">CACHE</span> | <span class="bold">NOCACHE</span> ]
  [ parallel_clause ]
  [ <span class="bold">ROWDEPENDENCIES</span> | <span class="bold">NOROWDEPENDENCIES</span> ]
  [ enable_disable_clause ]
  [ enable_disable_clause ]...
  [ row_movement_clause ]
  [ <span class="bold">AS</span> subquery ]
 
&lt;column_properties&gt; ::=
  { object_type_col_properties
  | nested_table_col_properties
  | { varray_col_properties | LOB_storage_clause }
    [ (LOB_partition_storage
        [, LOB_partition_storage ]...
      )
    ]
  | XMLType_column_properties
  }
  [ { object_type_col_properties
    | nested_table_col_properties
    | { varray_col_properties | LOB_storage_clause }
      [ ( LOB_partition_storage
          [, LOB_partition_storage ]...
        )
      ]
    | XMLType_column_properties
    }
  ]...
 
&lt;LOB_partition_storage&gt; ::=
  <span class="bold">PARTITION</span> partition
  { LOB_storage_clause | varray_col_properties }
    [ LOB_storage_clause | varray_col_properties ]...
  [ ( <span class="bold">SUBPARTITION</span> subpartition
     { LOB_storage_clause | varray_col_properties }
       [ LOB_storage_clause
       | varray_col_properties
       ]...
    )
  ]
 
&lt;LOB_storage_clause&gt; ::=
  <span class="bold">LOB</span>
  { (LOB_item [, LOB_item ]...)
      <span class="bold">STORE</span> <span class="bold">AS</span> [ <span class="bold">SECUREFILE</span> | <span class="bold">BASICFILE</span> ] (LOB_storage_parameters)
  | (LOB_item)
      <span class="bold">STORE</span> <span class="bold">AS</span> [ <span class="bold">SECUREFILE</span> | <span class="bold">BASICFILE</span> ]
        { LOB_segname (LOB_storage_parameters)
        | LOB_segname
        | (LOB_storage_parameters)
        }
  }
 
&lt;LOB_storage_parameters&gt; ::=
  { <span class="bold">TABLESPACE</span> tablespace
  | { LOB_parameters [ storage_clause ]
    }
  | storage_clause
  }
    [ <span class="bold">TABLESPACE</span> tablespace
    | { LOB_parameters [ storage_clause ]
      }
    ]...
 
&lt;LOB_parameters&gt; ::=
  [ { <span class="bold">ENABLE</span> | <span class="bold">DISABLE</span> } <span class="bold">STORAGE</span> <span class="bold">IN</span> <span class="bold">ROW</span>
  | <span class="bold">CHUNK</span> integer
  | <span class="bold">PCTVERSION</span> integer
  | <span class="bold">RETENTION</span> [ { <span class="bold">MAX</span> | <span class="bold">MIN</span> integer | <span class="bold">AUTO</span> | <span class="bold">NONE</span> } ]
  | <span class="bold">FREEPOOLS</span> integer
  | LOB_deduplicate_clause
  | LOB_compression_clause
  | LOB_encryption_clause
  | { <span class="bold">CACHE</span> |  <span class="bold">NOCACHE</span> | <span class="bold">CACHE</span> <span class="bold">READS</span> } [ logging_clause ] } }
  ]
 
&lt;logging_clause&gt; ::=
  { <span class="bold">LOGGING</span> | <span class="bold">NOLOGGING</span> | <span class="codeinlinebold">FILESYSTEM_LIKE_LOGGING</span> }
 
&lt;storage_clause&gt; ::=
  <span class="bold">STORAGE</span>
  ({ <span class="bold">INITIAL</span> integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
   | <span class="bold">NEXT</span> integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
   | <span class="bold">MINEXTENTS</span> integer
   | <span class="bold">MAXEXTENTS</span> { integer | <span class="bold">UNLIMITED</span> }
   | <span class="bold">PCTINCREASE</span> integer
   | <span class="bold">FREELISTS</span> integer
   | <span class="bold">FREELIST</span> <span class="bold">GROUPS</span> integer
   | <span class="bold">OPTIMAL</span> [ integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
             | <span class="bold">NULL</span>
             ]
   | <span class="bold">BUFFER_POOL</span> { <span class="bold">KEEP</span> | <span class="bold">RECYCLE</span> | <span class="bold">DEFAULT</span> }
   }
     [ <span class="bold">INITIAL</span> integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
     | <span class="bold">NEXT</span> integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
     | <span class="bold">MINEXTENTS</span> integer
     | <span class="bold">MAXEXTENTS</span> { integer | <span class="bold">UNLIMITED</span> }
     | <span class="bold">MAXSIZE</span> { { integer { <span class="bold">K</span> | <span class="bold">M</span> | <span class="bold">G</span> | <span class="bold">T</span> | <span class="bold">P</span> } } | <span class="bold">UNLIMITED</span> }
     | <span class="bold">PCTINCREASE</span> integer
     | <span class="bold">FREELISTS</span> integer
     | <span class="bold">FREELIST</span> <span class="bold">GROUPS</span> integer
     | <span class="bold">OPTIMAL</span> [ integer [ <span class="bold">K</span> | <span class="bold">M</span> ]
               | <span class="bold">NULL</span>
               ]
     | <span class="bold">BUFFER_POOL</span> { <span class="bold">KEEP</span> | <span class="bold">RECYCLE</span> | <span class="bold">DEFAULT</span> }
     ]...
  )
 
&lt;LOB_deduplicate_clause&gt; ::=
  { <span class="bold">DEDUPLICATE</span> 
  | <span class="bold">KEEP_DUPLICATES</span>
  }
 
&lt;LOB_compression_clause&gt; ::=
  { <span class="bold">COMPRESS</span> [ <span class="bold">HIGH</span> | <span class="bold">MEDIUM</span> | <span class="bold">LOW</span> ]
  | <span class="bold">NOCOMPRESS</span> }
 
&lt;LOB_encryption_clause&gt; ::=
  { <span class="bold">ENCRYPT</span> [ <span class="bold">USING</span> 'encrypt_algorithm' ] 
    [ <span class="bold">IDENTIFIED</span> <span class="bold">BY</span> password ]
  | <span class="bold">DECRYPT</span> 
  }
 
&lt;XMLType_column_properties&gt; ::= 
XMLTYPE [ COLUMN ] column
   [ XMLType_storage ]
   [ XMLSchema_spec ]
 
&lt;XMLType_storage&gt; ::=
<span class="bold">STORE</span> <span class="bold">AS</span>
   { <span class="bold">OBJECT</span> <span class="bold">RELATIONAL</span>
   | [ <span class="bold">SECUREFILE</span> | <span class="bold">BASICFILE</span> ] {<span class="bold"> CLOB</span> | <span class="bold">BINARY</span> <span class="bold">XML</span> }
       [ { LOB_segname [ (LOB_parameters) ]
         | LOB_parameters
         }
         ]
 
&lt;varray_col_properties&gt; ::=
<span class="bold">VARRAY</span> varray_item 
   { [ substitutable_column_clause ]
     <span class="bold">STORE</span> <span class="bold">AS</span> [ <span class="bold">SECUREFILE</span> | <span class="bold">BASICFILE</span> ] <span class="bold">LOB</span>
        { [ LOB_segname ] (LOB_parameters)
        | LOB_segname 
        }
   | substitutable_column_clause
   }
</pre></div>
<!-- class="example" -->
<a id="CIHJEJHD"></a>
<div id="ADLOB46113" class="sect2">
<h3 class="sect2">Parameters of CREATE TABLE for SecureFiles LOB</h3>
<p><a href="#CIHBJBAG">Table 4-1</a> summarizes the parameters of the <code>CREATE TABLE</code> statement.</p>
<div id="ADLOB46114" class="tblformal">
<p class="titleintable"><a id="sthref90"></a><a id="CIHBJBAG"></a>Table 4-1 Parameters of CREATE TABLE Statement</p>
<table class="cellalignment905" title="Parameters of CREATE TABLE Statement" summary="Column 1 is a parameter of CREATE TABLE statement, with a link to its full description. Column 2 is a brief description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t2">Parameter</th>
<th class="cellalignment906" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#CIHDDCBI">BASICFILE</a></p>
</td>
<td class="cellalignment907" headers="r2c1-t2 r1c2-t2">
<p>Parameter that specifies the original architecture for LOBs. It creates BasicFiles LOBs, which do not support compression, deduplication or encryption features.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#CIHDEFCH">SECUREFILE</a></p>
</td>
<td class="cellalignment907" headers="r3c1-t2 r1c2-t2">
<p>Parameter that specifies SecureFiles LOBs, an architecture that improves performance and also supports compression, deduplication, and encryption features.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#CIHIDGJA">CHUNK</a></p>
</td>
<td class="cellalignment907" headers="r4c1-t2 r1c2-t2">
<p>Data size used by Oracle Database when accessing or modifying the LOB. This is used for BasicFiles LOBs; for SecureFiles LOBs it is an advisory size provided for backward compatibility.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#CIHJBDIF">RETENTION</a></p>
</td>
<td class="cellalignment907" headers="r5c1-t2 r1c2-t2">
<p>Configures the LOB column to store old versions of LOB data in a specified manner.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#CIHIFEEE">MAXSIZE</a></p>
</td>
<td class="cellalignment907" headers="r6c1-t2 r1c2-t2">
<p>Upper limit of storage space that may be used by a LOB.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#CIHGBCFJ">FREEPOOLS</a></p>
</td>
<td class="cellalignment907" headers="r7c1-t2 r1c2-t2">
<p>Specifies the number of <code>FREELIST</code> groups for BasicFiles LOBs, if the database is in automatic undo mode. Not used for SecureFiles LOBs.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t2" headers="r1c1-t2">
<p><a href="#CIHEBBDI">LOGGING, NOLOGGING, or FILESYSTEM_LIKE_LOGGING</a></p>
</td>
<td class="cellalignment907" headers="r8c1-t2 r1c2-t2">
<p>Logging options.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t2" headers="r1c1-t2">
<p><a href="#CIHBGEEI">FREELISTS or FREELIST GROUPS</a></p>
</td>
<td class="cellalignment907" headers="r9c1-t2 r1c2-t2">
<p>Specifies the number of process freelists or freelist groups, respectively, allocated to the segment; <code>NULL</code> for partitioned tables. Not used for SecureFiles LOBs.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t2" headers="r1c1-t2">
<p><a href="#CIHFFFDH">PCTVERSION</a></p>
</td>
<td class="cellalignment907" headers="r10c1-t2 r1c2-t2">
<p>Specifies the percentage of all used BasicFiles LOB data space that may be occupied by old versions of the LOB data pages. Not used for SecureFiles LOBs.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t2" headers="r1c1-t2">
<p><a href="#CIHCAFHH">COMPRESS or NOCOMPRESS</a></p>
</td>
<td class="cellalignment907" headers="r11c1-t2 r1c2-t2">
<p>Turns on or turns off SecureFiles Intelligent Compression.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t2" headers="r1c1-t2">
<p><a href="#CIHHEFGI">DEDUPLICATE or KEEP_DUPLICATES</a></p>
</td>
<td class="cellalignment907" headers="r12c1-t2 r1c2-t2">
<p>Turns on or turns off SecureFiles Intelligent Deduplication.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r13c1-t2" headers="r1c1-t2">
<p><a href="#CIHIFJHD">ENCRYPT or DECRYPT</a></p>
</td>
<td class="cellalignment907" headers="r13c1-t2 r1c2-t2">
<p>Turns on or turns off SecureFiles Intelligent Encryption.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CIHDDCBI"></a>
<div id="ADLOB45945" class="sect3">
<h4 class="sect3"><a id="sthref91"></a>BASICFILE</h4>
<p>When the compatibility mode is set to 10<span class="italic">g</span>, the LOB storage clause is identical to that used in 10<span class="italic">g</span> (keyword <code>BASICFILE</code> is not valid). When the 11<span class="italic">g</span> compatibility mode (or greater) is set, the original, pre-11.1 release LOB functionality is enabled by default and this parameter is specified for completeness.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDEFCH"></a>
<div id="ADLOB45946" class="sect3">
<h4 class="sect3"><a id="sthref92"></a>SECUREFILE</h4>
<p>To use the SecureFiles LOB storage architecture and functionality, explicitly specify the storage parameter <code>SECUREFILE</code>. A SecureFiles LOB can only be created in a tablespace managed with Automatic Segment Space Management (<a id="sthref93"></a>ASSM).</p>
<p>For BasicFiles LOBs, specifying any of the SecureFiles LOB options results in an error.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIDGJA"></a>
<div id="ADLOB45947" class="sect3">
<h4 class="sect3"><a id="sthref94"></a>CHUNK</h4>
<p><code>CHUNK</code> is one or more Oracle blocks. For SecureFiles LOBs, <code>CHUNK</code> is an advisory size and is provided for backward compatibility purposes. For BasicFiles LOBs, you may specify the chunk size when creating a table that stores LOBs; it corresponds to the data size used by Oracle Database when accessing or modifying the LOB value.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJBDIF"></a>
<div id="ADLOB45948" class="sect3">
<h4 class="sect3"><a id="sthref95"></a>RETENTION</h4>
<p>In Oracle Database Release 11<span class="italic">g</span>, this parameter specifies the retention policy. A value of <code>MAX</code> tells the system to keep old versions of LOB data blocks until the space used by the segment has reached the size specified in the <code>MAXSIZE</code> parameter. If <code>MAXSIZE</code> is not specified, <code>MAX</code> behaves like <code>AUTO</code>.</p>
<p>A value of <code>MIN</code> tells the system to keep old versions of LOB data blocks for the specified number of seconds. A value of <code>NONE</code> means that there is no retention period and space can be reused in any way deemed necessary. A value of <code>AUTO</code> tells the system to manage the space as efficiently as possible weighing both time and space needs.</p>
<p>For details of the <code>RETENTION</code> parameter used with BasicFiles LOBs, see <a href="adlob_tables.htm#CIHEHGCH">"RETENTION Parameter for BasicFiles LOBs"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIFEEE"></a>
<div id="ADLOB45949" class="sect3">
<h4 class="sect3"><a id="sthref96"></a>MAXSIZE</h4>
<p>Limits the amount of space that can be used by the LOB segment to the given size. If this size is consumed, new LOB data blocks are taken from the pool of old versions of LOB data blocks regardless of time requirements and as needed.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGBCFJ"></a>
<div id="ADLOB45950" class="sect3">
<h4 class="sect3"><a id="sthref97"></a>FREEPOOLS</h4>
<p>Specifies the number of <code>FREELIST</code> groups for BasicFiles LOBs, if the database is in automatic undo mode. Under 11<span class="italic">g</span> compatibility, this parameter is ignored when SecureFiles LOBs are created.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEBBDI"></a>
<div id="ADLOB45951" class="sect3">
<h4 class="sect3"><a id="sthref98"></a><a id="sthref99"></a><a id="sthref100"></a>LOGGING, NOLOGGING, or FILESYSTEM_LIKE_LOGGING</h4>
<p>Specify <code>LOGGING</code> if you want the creation of the LOB, and subsequent inserts into the LOB, to be logged in the redo log file. <code>LOGGING</code> is the default.</p>
<p>Specify <code>NOLOGGING</code> if you do not want these operations to be logged.</p>
<p>For a non-partitioned object, the value specified for this clause is the actual physical attribute of the segment associated with the object. For partitioned objects, the value specified for this clause is the default physical attribute of the segments associated with all partitions specified in the <code>CREATE</code> statement (and in subsequent <code>ALTER</code> ... <code>ADD PARTITION</code> statements), unless you specify the logging attribute in the <code>PARTITION</code> description.</p>
<p><code>FILESYSTEM_LIKE_LOGGING</code> means that the system only logs the metadata. This option is invalid for BasicFiles LOBs. This setting is similar to metadata journaling of file systems, which reduces mean time to recovery from failures. The <code>LOGGING</code> setting for SecureFiles LOBs is similar to the data journaling of file systems. Both the <code>LOGGING</code> and <code>FILESYSTEM_LIKE_LOGGING</code> settings provide a complete transactional file system with SecureFiles LOBs.</p>
<p>For SecureFiles LOBs, the <code>NOLOGGING</code> setting is converted internally to <code>FILESYSTEM_LIKE_LOGGING</code>.</p>
<p><code>FILESYSTEM_LIKE_LOGGING</code> ensures that data is completely recoverable after a server failure.</p>
<p>See <a href="adlob_tables.htm#i1006566">"LOGGING / NOLOGGING Parameter for BasicFiles LOBs"</a> and <a href="adlob_lob_ops.htm#BACEDAEH">"Ensuring Read Consistency"</a>.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
For LOB segments, if using <code>NOLOGGING</code> and <code>FILESYSTEM_LIKE_LOGGING</code> settings, it is possible for data to be changed on the disk during a backup operation. This results in read inconsistency. To avoid this situation, ensure that changes to LOB segments are saved in the redo log file by setting <code>LOGGING</code> for LOB storage.</div>
</div>
<!-- class="sect3" -->
<a id="CIHBGEEI"></a>
<div id="ADLOB45952" class="sect3">
<h4 class="sect3"><a id="sthref101"></a><a id="sthref102"></a>FREELISTS or FREELIST GROUPS</h4>
<p>This parameter specifies the number of process freelists or freelist groups, respectively, allocated to the segment; <code>NULL</code> for partitioned tables. Under 11<span class="italic">g</span> compatibility, these parameters are ignored when SecureFiles LOBs are created.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFFFDH"></a>
<div id="ADLOB45953" class="sect3">
<h4 class="sect3"><a id="sthref103"></a><a id="sthref104"></a>PCTVERSION</h4>
<p>This parameter specifies the percentage of all used BasicFiles LOB data space that can be occupied by old versions of BasicFiles LOB data pages. Under 11<span class="italic">g</span> compatibility, this parameter is ignored when SecureFiles LOBs are created.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCAFHH"></a>
<div id="ADLOB45954" class="sect3">
<h4 class="sect3"><a id="sthref105"></a><a id="sthref106"></a>COMPRESS or NOCOMPRESS</h4>
<p>The <code>COMPRESS</code> option turns on SecureFiles Intelligent Compression, and <code>NOCOMPRESS</code> turns it off. Note that setting table or index compression does not effect SecureFiles Intelligent Compression.</p>
<p>Note that you must have a license for the Oracle Advanced Compression Option before implementing SecureFiles Intelligent Compression. See <a class="olink DBLIC142" href="../../license.112/e47877/options.htm#DBLIC142"><span class="italic">Oracle Database Licensing Information</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHEFGI"></a>
<div id="ADLOB45956" class="sect3">
<h4 class="sect3"><a id="sthref107"></a><a id="sthref108"></a>DEDUPLICATE or KEEP_DUPLICATES</h4>
<p>The <code>DEDUPLICATE</code> option enables SecureFiles Intelligent Deduplication; it specifies that SecureFiles LOB data that is identical in two or more rows in a LOB column, partition or subpartition must share the same data blocks. The database combines SecureFiles LOBs with identical content into a single copy, reducing storage and simplifying storage management. The opposite of this option is <code>KEEP_DUPLICATES</code>.</p>
<p>Note that you must have a license for the Oracle Advanced Compression Option before implementing SecureFiles Intelligent Deduplication. See <a class="olink DBLIC142" href="../../license.112/e47877/options.htm#DBLIC142"><span class="italic">Oracle Database Licensing Information</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIFJHD"></a>
<div id="ADLOB45955" class="sect3">
<h4 class="sect3"><a id="sthref109"></a><a id="sthref110"></a>ENCRYPT or DECRYPT</h4>
<p>The <code>ENCRYPT</code> option turns on SecureFiles Intelligent Encryption, and encrypts all SecureFiles LOB data using Oracle Transparent Data Encryption (TDE). The <code>DECRYPT</code> options turns off SecureFiles Intelligent Encryption.</p>
<p>Note that you must have a license for the Oracle Advanced Security Option before implementing SecureFiles Intelligent Encryption. See <a class="olink DBLIC143" href="../../license.112/e47877/options.htm#DBLIC143"><span class="italic">Oracle Database Licensing Information</span></a> for more information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFDDJC"></a>
<div id="ADLOB45959" class="sect2">
<h3 class="sect2">CREATE TABLE Compression</h3>
<p>This section discusses SecureFiles Intelligent Compression iwhen used in the <code>CREATE TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHEAEDA">Usage Notes for CREATE TABLE Compression</a></p>
</li>
<li>
<p><a href="#CIHHDECG">Examples of CREATE TABLE Compression</a></p>
</li>
</ul>
<a id="CIHEAEDA"></a>
<div id="ADLOB46115" class="sect3">
<h4 class="sect3">Usage Notes for CREATE TABLE Compression</h4>
<ul>
<li>
<p>SecureFiles Intelligent Compressiondoes not enable table or index compression. Similarly, table and index compression does not enable SecureFiles Intelligent Compression.</p>
</li>
<li>
<p>The <code>LOW,MEDIUM,</code> and <code>HIGH</code> options provide varying degrees of compression. The higher the compression, the higher the latency incurred. The <code>HIGH</code> setting incurs more work, but compresses the data better. The default is <code>MEDIUM</code>.</p>
<p>The <code>LOW</code> compression option introduces an extremely lightweight compression algorithm that removes the majority of the CPU cost that is typical with file compression. Compressed SecureFiles LOBs at the <code>LOW</code> level now provide a very efficient choice for SecureFiles LOB storage. SecureFiles LOBs compressed at <code>LOW</code> generally consume less CPU time than BasicFiles LOBs, consume less storage than BasicFiles LOBs, and typically help the application run faster because of a reduction in disk I/O.</p>
</li>
<li>
<p>Compression can be specified at the partition level. The <code>lob_storage_clause</code> enables specification of compression for partitioned tables on a per-partition basis.</p>
</li>
<li>
<p>SecureFiles LOB compression is performed on the server and enables random reads and writes to LOB data. Compression utilities on the client, like <code>utl_compress</code>, cannot provide random access.</p>
</li>
<li>
<p>The method <code>DBMS_LOB.SETOPTIONS()</code> can be used to enable and disable compression on individual SecureFiles LOBs. See <a href="#CIHBCFIG">"SETOPTIONS()"</a></p>
</li>
<li>
<p>LOB compression is applicable only to SecureFiles LOBs.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHHDECG"></a>
<div id="ADLOB45960" class="sect3">
<h4 class="sect3">Examples of CREATE TABLE Compression</h4>
<p>The following examples demonstrate how to issue <code>CREATE TABLE</code> statements for specific compression scenarios.</p>
<div id="ADLOB46116" class="example">
<p class="titleinexample"><a id="sthref111"></a>Example 4-2 Creating a SecureFiles LOB column with LOW compression</p>
<pre>
CREATE TABLE t1 (a CLOB)
    LOB(a) STORE AS SECUREFILE(
    COMPRESS LOW
    CACHE
    NOLOGGING
  );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46117" class="example">
<p class="titleinexample"><a id="sthref112"></a>Example 4-3 Creating a SecureFiles LOB column with MEDIUM (default) compression</p>
<pre>
CREATE TABLE t1 ( a CLOB)
    LOB(a) STORE AS SECUREFILE (
         COMPRESS
         CACHE
         NOLOGGING
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46118" class="example">
<p class="titleinexample"><a id="sthref113"></a>Example 4-4 Creating a SecureFiles LOB column with HIGH compression</p>
<pre>
CREATE TABLE t1 ( a CLOB)
    LOB(a) STORE AS SECUREFILE (
         COMPRESS HIGH
         CACHE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46119" class="example">
<p class="titleinexample"><a id="sthref114"></a>Example 4-5 Creating a SecureFiles LOB column with disabled compression</p>
<pre>
CREATE TABLE t1 ( a CLOB)
    LOB(a) STORE AS SECUREFILE (
         NOCOMPRESS
         CACHE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46120" class="example">
<p class="titleinexample"><a id="sthref115"></a>Example 4-6 Creating a SecureFiles LOB column with compression on one partition</p>
<pre>
CREATE TABLE t1 ( REGION VARCHAR2(20), a BLOB) 
     LOB(a) STORE AS SECUREFILE (
        CACHE
     )
     PARTITION BY LIST (REGION) (
          PARTITION p1 VALUES ('x', 'y')
               LOB(a) STORE AS SECUREFILE (
                   COMPRESS
                ),
          PARTITION p2 VALUES (DEFAULT)
     );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45957" class="sect2"><a id="sthref116"></a>
<h3 class="sect2">CREATE TABLE Deduplication</h3>
<p>This section discusses SecureFiles LOB deduplication when used in the <code>CREATE TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHDAIAE">Usage Notes for CREATE TABLE Deduplication</a></p>
</li>
<li>
<p><a href="#CIHFFGJF">Examples of CREATE TABLE Deduplication</a></p>
</li>
</ul>
<a id="CIHDAIAE"></a>
<div id="ADLOB46121" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Usage Notes for CREATE TABLE Deduplication</h4>
<ul>
<li>
<p>Identical LOBs are good candidates for deduplication. Copy operations can avoid data duplication by enabling deduplication.</p>
</li>
<li>
<p>Duplicate detection happens within a LOB segment. For partitioned and subpartitioned LOB columns duplicate detection does not span partitions or subpartitions.</p>
</li>
<li>
<p>Deduplication can be specified at a partition level. The <code>lob_storage_clause</code> enables specification for partitioned tables on a per-partition basis.</p>
</li>
<li>
<p>Deduplication is applicable only to SecureFiles LOBs.</p>
</li>
<li>
<p><code>DBMS_LOB.SETOPTIONS</code> can be used to enable or disable deduplication on individual LOBs.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHFFGJF"></a>
<div id="ADLOB45958" class="sect3">
<h4 class="sect3">Examples of CREATE TABLE Deduplication</h4>
<p>The following examples demonstrate how to issue <code>CREATE TABLE</code> statements for specific deduplication scenarios.</p>
<div id="ADLOB46122" class="example">
<p class="titleinexample"><a id="sthref117"></a>Example 4-7 Creating a SecureFiles LOB column with deduplication</p>
<pre>
CREATE TABLE t1 ( a CLOB)
    LOB(a) STORE AS SECUREFILE (
        DEDUPLICATE
        CACHE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46123" class="example">
<p class="titleinexample"><a id="sthref118"></a>Example 4-8 Creating a SecureFiles LOB column with disabled deduplication</p>
<pre>
CREATE TABLE t1 ( a CLOB)
    LOB(a) STORE AS SECUREFILE (
         KEEP_DUPLICATES
         CACHE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46124" class="example">
<p class="titleinexample"><a id="sthref119"></a>Example 4-9 Creating a SecureFiles LOB column with deduplication on one partition</p>
<pre>
CREATE TABLE t1 ( REGION VARCHAR2(20), a BLOB) 
     LOB(a) STORE AS SECUREFILE (
           CACHE
)
PARTITION BY LIST (REGION) (
     PARTITION p1 VALUES ('x', 'y')
          LOB(a) STORE AS SECUREFILE (
               DEDUPLICATE
          ),
     PARTITION p2 VALUES (DEFAULT)
);
</pre></div>
<!-- class="example" -->
<div id="ADLOB46125" class="example">
<p class="titleinexample"><a id="sthref120"></a>Example 4-10 Creating a SecureFiles LOB column with deduplication disabled on one partition</p>
<pre>
CREATE TABLE t1 ( REGION VARCHAR2(20), ID NUMBER, a BLOB)
     LOB(a) STORE AS SECUREFILE (
           DEDUPLICATE
           CACHE
)
PARTITION BY RANGE (REGION)
      SUBPARTITION BY HASH(ID) SUBPARTITIONS 2 (
        PARTITION p1 VALUES LESS THAN (51)
           lob(a) STORE AS a_t2_p1
           (SUBPARTITION t2_p1_s1 lob(a) STORE AS a_t2_p1_s1,
            SUBPARTITION t2_p1_s2 lob(a) STORE AS a_t2_p1_s2),
        PARTITION p2 VALUES LESS THAN (MAXVALUE)
           lob(a) STORE AS a_t2_p2 ( KEEP_DUPLICATES ) 
           (SUBPARTITION t2_p2_s1 lob(a) STORE AS a_t2_p2_s1,
            SUBPARTITION t2_p2_s2 lob(a) STORE AS a_t2_p2_s2)
      );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIFGHE"></a>
<div id="ADLOB45961" class="sect2">
<h3 class="sect2">CREATE TABLE Encryption</h3>
<p>This section discusses SecureFiles LOB encryption when used in the <code>CREATE TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHJFDGG">Usage Notes for CREATE TABLE Encryption</a></p>
</li>
<li>
<p><a href="#CIHCEGED">Examples of CREATE TABLE Encryption</a></p>
</li>
</ul>
<a id="CIHJFDGG"></a>
<div id="ADLOB46126" class="sect3">
<h4 class="sect3">Usage Notes for CREATE TABLE Encryption</h4>
<ul>
<li>
<p>The current Transparent Data Encryption (TDE) syntax is used for enabling encryption on LOB data types. The LOB must be created with the <code>SECUREFILE</code> parameter.</p>
</li>
<li>
<p>Encryption is performed at the block level.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">encrypt_algorithm</span></code> indicates the name of the encryption algorithm. Valid algorithms are: <code>AES192</code> (default), <code>3DES168</code>, <code>AES128</code>, and <code>AES256</code>.</p>
</li>
<li>
<p>The column encryption key is derived from <code>PASSWORD</code>, if specified.</p>
</li>
<li>
<p><code>SALT</code> is the default for LOB encryption. <code>NO</code> <code>SALT</code> is not supported.</p>
</li>
<li>
<p>All LOBs in the LOB column are encrypted.</p>
</li>
<li>
<p><code>DECRYPT</code> keeps the LOBs in clear text.</p>
</li>
<li>
<p>LOBs can be encrypted only on a per-column basis, similar to TDE. All partitions within a LOB column are encrypted.</p>
</li>
<li>
<p>Key management controls the ability to encrypt or decrypt.</p>
</li>
<li>
<p>LOB encryption is allowed only with SecureFiles LOBs.</p>
</li>
<li>
<p>TDE is not supported by the traditional import and export utilities or by transportable-tablespace-based export. Use the Data Pump import and export utilities with encrypted columns instead.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The chapter on "Using Oracle Wallet Manager" in <a class="olink ASOAG160" href="../../network.112/e40393/asowalet.htm#ASOAG160"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for information about creating and using Oracle wallet with TDE.</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHCEGED"></a>
<div id="ADLOB45962" class="sect3">
<h4 class="sect3">Examples of CREATE TABLE Encryption</h4>
<p>The following examples demonstrate how to issue <code>CREATE TABLE</code> statements for specific encryption scenarios.</p>
<div id="ADLOB46127" class="example">
<p class="titleinexample"><a id="sthref121"></a>Example 4-11 Creating a SecureFiles LOB column with a specific encryption algorithm</p>
<pre>
CREATE TABLE t1 ( a CLOB ENCRYPT USING 'AES128')
    LOB(a) STORE AS SECUREFILE (
         CACHE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46128" class="example">
<p class="titleinexample"><a id="sthref122"></a>Example 4-12 Creating a SecureFiles LOB column with encryption for all partitions</p>
<pre>
CREATE TABLE t1 ( REGION VARCHAR2(20), a BLOB)
LOB(a) STORE AS SECUREFILE (
ENCRYPT USING 'AES128'
NOCACHE
FILESYSTEM_LIKE_LOGGING
)
PARTITION BY LIST (REGION) (
PARTITION p1 VALUES ('x', 'y'),
PARTITION p2 VALUES (DEFAULT)
);
</pre></div>
<!-- class="example" -->
<div id="ADLOB46129" class="example">
<p class="titleinexample"><a id="sthref123"></a>Example 4-13 Creating a SecureFiles LOB column with encryption based on a password key</p>
<pre>
CREATE TABLE t1 ( a CLOB ENCRYPT IDENTIFIED BY foo)
    LOB(a) STORE AS SECUREFILE (
        CACHE
    );
</pre>
<p>The following example has the same result because the encryption option can be set in the <code>LOB_deduplicate_clause</code> section of the statement:</p>
<pre>
CREATE TABLE t1 (a CLOB)
    LOB(a) STORE AS SECUREFILE (
        CACHE
        ENCRYPT
        IDENTIFIED BY foo
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46130" class="example">
<p class="titleinexample"><a id="sthref124"></a>Example 4-14 Creating a SecureFiles LOB column with disabled encryption</p>
<pre>
CREATE TABLE t1 ( a CLOB )
    LOB(a) STORE AS SECUREFILE (
        CACHE DECRYPT
    );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHJJBIJ"></a>
<div id="ADLOB45963" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref125"></a><a id="sthref126"></a>Using ALTER TABLE with SecureFiles LOBs</h2>
<p>You can modify LOB storage with an <a id="sthref127"></a><code>ALTER</code> <code>TABLE</code> statement or with online redefinition by using the <code><a id="sthref128"></a>DBMS_REDEFINITION</code> package. See <a class="olink ARPLS042" href="../../appdev.112/e40758/d_redefi.htm#ARPLS042"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p>Oracle recommends that you enable compression, deduplication, or encryption at table creation time. Enabling these features using <code>ALTER</code> <code>TABLE</code> causes the read, modify, or write commands to alter the entire SecureFiles LOB column, holding a table lock during this potentially long operation.</p>
<p>Note that the <code><a id="sthref129"></a>SHRINK</code> option is not supported for SecureFiles LOBs.</p>
<p>If you have not enabled LOB encryption, compression or deduplication at create time, Oracle recommends that you use online redefinition to enable them after creation, because this process is more disk-space efficient for changes to these parameters.</p>
<p>The BNF of <code>ALTER TABLE</code>, in <a href="#CIHCGECB">Example 4-1</a>, introduces new parameters. Full description of the parameters is in <a href="#CIHJEJHD">"Parameters of CREATE TABLE for SecureFiles LOB"</a>.</p>
<p>See <a href="#BABDIEGE">"Migrating Columns from BasicFiles LOBs to SecureFiles LOBs"</a>, and the <a class="olink SQLRF20015" href="../../server.112/e41084/statements_3001.htm#SQLRF20015"><span class="italic">Oracle Database SQL Language Reference</span></a> for details on the <code>ALTER&nbsp;TABLE</code> statement.</p>
<div id="ADLOB46131" class="example">
<p class="titleinexample"><a id="sthref130"></a>Example 4-15 BNF for ALTER TABLE</p>
<p>Keywords are in bold.</p>
<pre>
<span class="bold">ALTER</span> <span class="bold">TABLE</span> [ schema.]table
  [ alter_table_properties
  | column_clauses
  | constraint_clauses
  | alter_table_partitioning
  | alter_external_table_clauses
  | move_table_clause
  ]
    [ enable_disable_clause
    | { <span class="bold">ENABLE</span> | <span class="bold">DISABLE</span> }
      { <span class="bold">TABLE</span> <span class="bold">LOCK</span> | <span class="bold">ALL</span> <span class="bold">TRIGGERS</span> }
    [ enable_disable_clause
    | { <span class="bold">ENABLE</span> | <span class="bold">DISABLE</span> }
      { <span class="bold">TABLE</span> <span class="bold">LOCK</span> | <span class="bold">ALL</span> <span class="bold">TRIGGERS</span> }
    ]...
  ] ;
 
 
&lt;column_clauses&gt; ::=
  { { add_column_clause
    | modify_column_clause
    | drop_column_clause
    }
    [ add_column_clause
    | modify_column_clause
    | drop_column_clause
    ]...
  | rename_column_clause
  | modify_collection_retrieval
    [ modify_collection_retrieval ]...
  | modify_LOB_storage_clause
    [ modify_LOB_storage_clause ] ...
  | alter_varray_col_properties
    [ alter_varray_col_properties ]
  }
 
&lt;modify_LOB_storage_clause&gt; ::=
<span class="bold">MODIFY</span> <span class="bold">LOB</span> (LOB_item) ( modify_LOB_parameters )
 
&lt;modify_LOB_parameters&gt; ::=
{ storage_clause
| <span class="bold">PCTVERSION</span> integer
| <span class="bold">FREEPOOLS</span> integer
| <span class="bold">REBUILD FREEPOOLS</span>
| LOB_retention_clause
| LOB_deduplicate_clause
| LOB_compression_clause
| { <span class="bold">ENCRYPT</span> encryption_spec | <span class="bold">DECRYPT</span> }
| { <span class="bold">CACHE</span> 
  | { <span class="bold">NOCACHE</span> | <span class="bold">CACHE</span> <span class="bold">READS</span> } [ logging_clause ]
  }
| allocate_extent_clause
| shrink_clause
| deallocate_unused_clause
} ...
</pre></div>
<!-- class="example" -->
<div id="ADLOB46132" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref131"></a>
<h3 class="sect2">Parameters of CREATE TABLE for SecureFiles LOB</h3>
<p><a href="#CIHCJAAD">Table 4-2</a> summarizes the parameters of the <code>CREATE TABLE</code> statement.</p>
<div id="ADLOB46133" class="tblformal">
<p class="titleintable"><a id="sthref132"></a><a id="CIHCJAAD"></a>Table 4-2 Parameters of ALTER TABLE Statement</p>
<table class="cellalignment905" title="Parameters of ALTER TABLE Statement" summary="Column 1 is a parameter of CREATE TABLE statement, with a link to its full description. Column 2 is a brief description of the parameter." dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t5">Parameter</th>
<th class="cellalignment906" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#CIHIAFAC">RETENTION</a></p>
</td>
<td class="cellalignment907" headers="r2c1-t5 r1c2-t5">
<p>Configures the LOB column to store old versions of LOB data in a specified manner.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#CIHBFBDD">COMPRESS or NOCOMPRESS</a></p>
</td>
<td class="cellalignment907" headers="r3c1-t5 r1c2-t5">
<p>Turns on or turns off SecureFiles LOB compression.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#CIHJIEFI">DEDUPLICATE or KEEP_DUPLICATES</a></p>
</td>
<td class="cellalignment907" headers="r4c1-t5 r1c2-t5">
<p>Turns on or turns off SecureFiles LOB deduplication.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#CIHJCBGC">ENCRYPT or DECRYPT</a></p>
</td>
<td class="cellalignment907" headers="r5c1-t5 r1c2-t5">
<p>Turns on or turns off SecureFiles LOB encryption.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CIHIAFAC"></a>
<div id="ADLOB45967" class="sect3">
<h4 class="sect3"><a id="sthref133"></a>RETENTION</h4>
<p>Altering <code>RETENTION</code> only affects space created after the <code>ALTER</code> <code>TABLE</code> statement runs.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBFBDD"></a>
<div id="ADLOB45965" class="sect3">
<h4 class="sect3"><a id="sthref134"></a><a id="sthref135"></a>COMPRESS or NOCOMPRESS</h4>
<p>Enables or disables LOB compression. All LOBs in the LOB segment are altered with the new setting.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJIEFI"></a>
<div id="ADLOB45964" class="sect3">
<h4 class="sect3"><a id="sthref136"></a><a id="sthref137"></a>DEDUPLICATE or KEEP_DUPLICATES</h4>
<p>The option <code>DEDUPLICATE</code> enables you to specify that LOB data which is identical in two or more rows in a LOB column should share the same data blocks. The database combines LOBs with identical content into a single copy, reducing storage and simplifying storage management. The opposite of this option is <code>KEEP_DUPLICATES</code>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJCBGC"></a>
<div id="ADLOB45966" class="sect3">
<h4 class="sect3"><a id="sthref138"></a><a id="sthref139"></a>ENCRYPT or DECRYPT</h4>
<p>Enables or disables LOB encryption. All LOBs in the LOB segment are altered with the new setting. A LOB segment can be altered only to enable or disable LOB encryption. That is, <code>ALTER</code> cannot be used to update the encryption algorithm or the encryption key. The encryption algorithm or encryption key can be updated using the <code>ALTER TABLE REKEY</code> syntax.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJDAFC"></a>
<div id="ADLOB45970" class="sect2">
<h3 class="sect2">ALTER TABLE Compression</h3>
<p>This section discusses SecureFiles LOB compression when used in the <code>ALTER TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHEAGBB">Usage Notes for ALTER TABLE Compression</a></p>
</li>
<li>
<p><a href="#CIHCACDF">Examples of ALTER TABLE Compression</a></p>
</li>
</ul>
<a id="CIHEAGBB"></a>
<div id="ADLOB46134" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Usage Notes for ALTER TABLE Compression</h4>
<ul>
<li>
<p>This syntax alters the compression mode of the LOB column.</p>
</li>
<li>
<p><code>DBMS_LOB.SETOPTIONS</code> can be used to enable or disable compression on individual LOBs.</p>
</li>
<li>
<p>Compression may be specified either at the table level or the partition level.</p>
</li>
<li>
<p>The <code>LOW,MEDIUM,</code> and <code>HIGH</code> options provide varying degrees of compression. The higher the compression, the higher the latency incurred. The <code>HIGH</code> setting incurs more work, but compresses the data better. The default is <code>MEDIUM</code>. Decompression is simple and very fast. See <a href="#CIHFDDJC">"CREATE TABLE Compression"</a>.</p>
</li>
<li>
<p>LOB compression applies only to SecureFiles LOBs.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHCACDF"></a>
<div id="ADLOB45971" class="sect3">
<h4 class="sect3">Examples of ALTER TABLE Compression</h4>
<p>The following examples demonstrate how to issue <code>ALTER TABLE</code> statements for specific compression scenarios.</p>
<div id="ADLOB46135" class="example">
<p class="titleinexample"><a id="sthref140"></a>Example 4-16 Altering a SecureFiles LOB column to enable LOW compression</p>
<pre>
ALTER TABLE t1 MODIFY
   LOB(a) (
           COMPRESS LOW
   );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46136" class="example">
<p class="titleinexample"><a id="sthref141"></a>Example 4-17 Altering a SecureFiles LOB column to disable compression</p>
<pre>
ALTER TABLE t1 MODIFY 
    LOB(a) (
         NOCOMPRESS
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46137" class="example">
<p class="titleinexample"><a id="sthref142"></a>Example 4-18 Altering a SecureFiles LOB column to enable HIGH compression</p>
<pre>
ALTER TABLE t1 MODIFY 
    LOB(a) (
         COMPRESS HIGH
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46138" class="example">
<p class="titleinexample"><a id="sthref143"></a>Example 4-19 Altering a SecureFiles LOB column to enable compression on one partition</p>
<pre>
ALTER TABLE t1 MODIFY PARTITION p1
    LOB(a) (
         COMPRESS HIGH
    );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFDIAJ"></a>
<div id="ADLOB45968" class="sect2">
<h3 class="sect2">ALTER TABLE Deduplication</h3>
<p>This section discusses the SecureFiles LOB deduplication in reference to the <code>ALTER TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHHIIGE">Usage Notes for ALTER TABLE Deduplication</a></p>
</li>
<li>
<p><a href="#CIHBIFHD">Examples of ALTER TABLE Deduplication</a></p>
</li>
</ul>
<a id="CIHHIIGE"></a>
<div id="ADLOB46139" class="sect3">
<h4 class="sect3">Usage Notes for ALTER TABLE Deduplication</h4>
<p><code>ALTER</code> <code>TABLE</code> syntax can enable or disable LOB-level deduplication.</p>
<ul>
<li>
<p>This syntax alters the deduplication mode of the LOB column.</p>
</li>
<li>
<p><a class="olink ARPLS66745" href="../../appdev.112/e40758/d_lob.htm#ARPLS66745"><code>DBMS_LOB.SETOPTIONS</code></a> can be used to enable or disable deduplication on individual LOBs.</p>
</li>
<li>
<p>Deduplication can be specified at a table level or partition level. Deduplication does not span across partitioned LOBs.</p>
</li>
<li>
<p>Deduplication is applicable only to SecureFiles LOBs.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHBIFHD"></a>
<div id="ADLOB45969" class="sect3">
<h4 class="sect3">Examples of ALTER TABLE Deduplication</h4>
<p>The following examples demonstrate how to issue <code>ALTER TABLE</code> statements for specific deduplication scenarios.</p>
<div id="ADLOB46140" class="example">
<p class="titleinexample"><a id="sthref144"></a>Example 4-20 Altering a SecureFiles LOB column to disable deduplication</p>
<pre>
ALTER TABLE t1 MODIFY 
     LOB(a) (
         KEEP_DUPLICATES 
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46141" class="example">
<p class="titleinexample"><a id="sthref145"></a>Example 4-21 Altering a SecureFiles LOB column to enable deduplication</p>
<pre>
ALTER TABLE t1 MODIFY 
    LOB(a) (
         DEDUPLICATE
    );
</pre></div>
<!-- class="example" -->
<div id="ADLOB46142" class="example">
<p class="titleinexample"><a id="sthref146"></a>Example 4-22 Altering a SecureFiles LOB column to enable deduplication on one partition</p>
<pre>
ALTER TABLE t1 MODIFY PARTITION p1
    LOB(a) (
         DEDUPLICATE
    );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIAHEE"></a>
<div id="ADLOB45972" class="sect2">
<h3 class="sect2">ALTER TABLE Encryption</h3>
<p>This section discusses SecureFiles LOB encryption when used in the <code>ALTER TABLE</code> statement. This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHIHEDE">Usage Notes for ALTER TABLE Encryption</a></p>
</li>
<li>
<p><a href="#CIHICBCG">Examples of ALTER TABLE Encryption</a></p>
</li>
</ul>
<a id="CIHIHEDE"></a>
<div id="ADLOB46143" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Usage Notes for ALTER TABLE Encryption</h4>
<ul>
<li>
<p><code>ALTER</code> <code>TABLE</code> is used to enable and disable LOB encryption for SecureFiles LOBs. This syntax also allows the user to re-key LOB columns with a new key or algorithm.</p>
</li>
<li>
<p><code>ENCRYPT</code>/<code>DECRYPT</code> options enable or disable encryption on all LOBs in the specified SecureFiles LOB column.</p>
</li>
<li>
<p><code>SALT</code> is the default for LOB encryption. <code>NO</code> <code>SALT</code> is not supported.</p>
</li>
<li>
<p>The <code>DECRYPT</code> option converts encrypted columns to clear text form.</p>
</li>
<li>
<p>Key management controls the ability to encrypt or decrypt.</p>
</li>
<li>
<p>LOBs can be encrypted only on a per-column basis. A partitioned LOB has either all partitions encrypted or not encrypted.</p>
</li>
<li>
<p>LOB encryption is applicable only to SecureFiles LOBs.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHICBCG"></a>
<div id="ADLOB45973" class="sect3">
<h4 class="sect3">Examples of ALTER TABLE Encryption</h4>
<p>The following examples demonstrate how to issue <code>ALTER TABLE</code> statements for specific encryption scenarios.</p>
<div id="ADLOB46144" class="example">
<p class="titleinexample"><a id="sthref147"></a>Example 4-23 Altering a SecureFiles LOB column by encrypting based on a specific algorithm</p>
<p>Enable LOB encryption using <code>3DES168</code>.</p>
<pre>
ALTER TABLE t1 MODIFY 
      ( a CLOB ENCRYPT USING '3DES168');
</pre>
<p>This is the second example of enabling LOB encryption using <code>3DES168</code>.</p>
<pre>
ALTER TABLE t1 MODIFY LOB(a)
      (ENCRYPT USING '3DES168');
</pre></div>
<!-- class="example" -->
<div id="ADLOB46145" class="example">
<p class="titleinexample"><a id="sthref148"></a>Example 4-24 Altering a SecureFiles LOB column by encrypting based on a password key</p>
<p>Enable encryption on a SecureFiles LOB column and build the encryption key using a password.</p>
<pre>
ALTER TABLE t1 MODIFY 
    ( a CLOB ENCRYPT IDENTIFIED BY foo);
</pre></div>
<!-- class="example" -->
<div id="ADLOB46146" class="example">
<p class="titleinexample"><a id="sthref149"></a>Example 4-25 Altering a SecureFiles LOB column by re-keying the encryption</p>
<p>To re-encrypt the LOB column with a new key, re-key the table.</p>
<pre>
ALTER TABLE t1 REKEY USING '3DES168';
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIAGFF"></a>
<div id="ADLOB45974" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref150"></a><a id="sthref151"></a><a id="sthref152"></a>Database File System Links</h2>
<p>This section introduces Database File System Links. It contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHBAGAI">Overview of Database File System Links</a></p>
</li>
<li>
<p><a href="#CIHJJICC">Creating Database File System Links</a></p>
</li>
<li>
<p><a href="#CIHIJJCH">Copying Database File System Links</a></p>
</li>
<li>
<p><a href="#CIHJAIEH">Copying a Linked LOB Between Tables</a></p>
</li>
<li>
<p><a href="#CIHCCCAG">Online Redefinition and DBFS Links</a></p>
</li>
<li>
<p><a href="#CIHEGFID">Transparent Read</a></p>
</li>
</ul>
<a id="CIHBAGAI"></a>
<div id="ADLOB46147" class="sect2">
<h3 class="sect2">Overview of Database File System Links</h3>
<p>DBFS Links provide the ability to transparently store SecureFiles LOBs in a location separate from the segment where the LOB would normally be stored, and instead store a link to the LOB in the segment. The link must reference a path that uses DBFS to locate the LOB when accessed. This means that the LOB could be stored on another file system, or on a tape system, or in the cloud, or any other location that can be accessed using DBFS.</p>
<p>When a user or application tries to access a SecureFiles LOB that has been stored outside the segment using a DBFS Link, the behavior can vary depending on the attempted operation and the characteristics of the DBFS store that is holding the LOB:</p>
<ul>
<li>
<p>Read:</p>
<p>If the LOB is not already cached in a local area in the database, then it can be read directly from the DBFS content store that holds it, if the content store allows streaming access based on the setting of the <code>PROPNAME_STREAMABLE</code> parameter. If the content store does not allow streaming access, then the entire LOB will first be read into a local area in the database, where it will be stored for a period of time for future access.</p>
</li>
<li>
<p>Write:</p>
<p>If the LOB is not already cached in a local area in the database, then it will first be read into the database, modified as needed, and then written back to the DBFS content store defined in the DBFS Link for the LOB in question.</p>
</li>
<li>
<p>Delete:</p>
<p>When a SecureFiles LOB that is stored through a DBFS Link is deleted, the DBFS Link is deleted from the table, but the LOB itself is NOT deleted from the DBFS content store. Or it is more complex, based on the characteristics/settings, of the DBFS content store in question.</p>
</li>
</ul>
<p>Database File System Links enable the use of SecureFiles LOBs to implement Hierarchical Storage Management (HSM) in conjunction with the DBFS Hierarchical Store (DBFS HS). HSM is a process by which the database moves rarely used or unused data from faster, more expensive, and smaller storage to slower, cheaper, and higher capacity storage.</p>
<div id="ADLOB45975" class="figure">
<p class="titleinfigure"><a id="sthref153"></a>Figure 4-1 Database File System Link</p>
<img width="321" height="542" src="img/adlob202.gif" alt="Description of Figure 4-1 follows" /><br />
<a id="sthref154" href="img_text/adlob202.htm">Description of "Figure 4-1 Database File System Link"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="CIHJJICC"></a>
<div id="ADLOB45976" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating Database File System Links</h3>
<p>Database File System Links require the creation of a Database File System through the use of the DBFS Content package, <code>DBMS_DBFS_CONTENT</code>.</p>
<p>Oracle provides several methods for creating a DBFS Link:</p>
<ul>
<li>
<p>You can move SecureFiles LOB data into a specified DBFS pathname and store the reference to the new location in the LOB. Call <code>DBMS_LOB.MOVE_TO_DBFS_LINK()</code> with LOB and DBFS path name arguments, and the system creates the specified DBFS HSM Store if it does not exist, copies data from the SecureFiles LOB into the specified DBFS HSM Store, removes data from the SecureFiles LOB, and stores the file path name for subsequent access through this LOB.</p>
</li>
<li>
<p>You can copy or create a reference to an existing file. Call <code>DBMS_LOB.COPY_DBFS_LINK()</code> to copy a link from an existing DBFS Link. If there is any data in the destination SecureFiles LOB, the system removes this data and stores a copy of the reference to the link in the destination SecureFiles LOB.</p>
</li>
<li>
<p>Call <code>DBMS_LOB.SET_DBFS_LINK()</code>, which assumes that the data for the link is stored in the specified DBFS path name. The system removes data in the specified SecureFiles LOB and stores the link to the DBFS path name.</p>
</li>
</ul>
<p>Creating a DBFS Link impacts the operations that may be performed, and how they may be performed. Some of the <code>DBMS_LOB</code> operations that existed before Oracle Database 11<span class="italic">g</span>R2 throw an exception if the LOB is a DBFS Link. The application must explicitly replace the DBFS Link with a LOB by calling <code>DBMS_LOB.COPY_FROM_LINK()</code> before making these calls. When completed, the application can move the updated LOB back to DBFS using <code>DBMS_LOB.MOVE_TO_DBFS_LINK()</code>, if needed. Other <code>DBMS_LOB</code> operations that existed before Oracle Database 11<span class="italic">g</span>R2 work transparently if the DBFS Link is in a file system that supports streaming. Note that these operations fail if streaming is either not supported or disabled.</p>
<p>If the DBFS Link file is modified through DBFS interfaces directly, the change is reflected in subsequent reads of the SecureFiles LOB. If the file is deleted through DBFS interfaces, then an exception occurs on subsequent reads.</p>
<p>For the database, it is also possible that a DBA may not want to store all of the data stored in a SecureFiles LOB HSM during export and import. Oracle has the ability to export and import only the Database File System Links. The links are fully qualified identifiers that provide access to the stored data, when entered into a SecureFiles LOB or registered on a SecureFiles LOB in a different database. This ability to export and import a link is similar to the common file system functionality of symbolic links.</p>
<p>The newly imported link is only available as long as the source, the stored data, is available, or until the first retrieval occurs on the imported system. The application is responsible for stored data retention. If the application system removes data from the store that still has a reference to it, the database throws an exception when the referencing SecureFiles LOB(s) attempt to access the data. Oracle also supports continuing to keep the data in the database after migration out to a DBFS store as a cached copy. It is up to the application to purge these copies in compliance with its retention policies.</p>
</div>
<!-- class="sect2" -->
<a id="CIHIJJCH"></a>
<div id="ADLOB45977" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Copying Database File System Links</h3>
<p>The API <code>DBMS_LOB.COPY_DBFS_LINK(</code><code>DSTLOB, SRCLOB, FLAGS)</code> provides the ability to copy a linked SecureFiles LOB. By default, the LOB is not obtained from the DBFS HSM Store during this operation; this is a copy-by-reference operation that is possible by making use of exporting (at source side) and importing (at destination side) the DBFS path name. The <code>flags</code> argument can dictate that the destination has a local copy in the database and references the LOB data in the DBFS HSM Store.</p>
</div>
<!-- class="sect2" -->
<a id="CIHJAIEH"></a>
<div id="ADLOB45978" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Copying a Linked LOB Between Tables</h3>
<p><code>CREATE TABLE ... AS SELECT (CTAS)</code> and <code>INSERT TABLE ... AS SELECT (ITAS)</code> copies any DBFS Links that are stored in any SecureFiles LOBs in the source table to the destination table.</p>
</div>
<!-- class="sect2" -->
<a id="CIHCCCAG"></a>
<div id="ADLOB45979" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Online Redefinition and DBFS Links</h3>
<p>Online redefinition copies any DBFS Links that are stored in any SecureFiles LOBs in the table being redefined.</p>
</div>
<!-- class="sect2" -->
<a id="CIHEGFID"></a>
<div id="ADLOB45980" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref155"></a>Transparent Read</h3>
<p>DBFS Links have the ability to read from a linked SecureFiles LOB even if the data is not cached in the database. This is done by reading the data from the Content Store where the data is currently stored, and streaming that data back to the user application as if it were being read from the SecureFiles LOB segment. This allows seamless access to the DBFS Linked data without the prerequisite first call to <code>DBMS_LOB.COPY_FROM_DBFS_LINK()</code>.</p>
<p>Whether or not transparent read is available for a particular SecureFiles LOB is determined by the <code>DBFS_CONTENT</code> store where the data resides. This feature is always enabled for <code>DBFS_SFS</code> stores, and by default for <code>DBFS_HS</code> stores. To disable transparent read for <code>DBFS_HS</code> store, set the <code>PROPNAME_STREAMABLE</code> parameter to <code>FALSE</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adlob_hierarch.htm#CHDEIBEJ">"Examples Using DBMS_DBFS_HS"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABJFEBB"></a>
<div id="ADLOB45228" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref156"></a><a id="sthref157"></a><a id="sthref158"></a><a id="sthref159"></a>Initialization Parameter db_securefile for SecureFiles LOBs</h2>
<p>The initialization parameter <code>db_securefile</code> is set in the file <code>init.ora</code>.</p>
<p>The parameter <code>db_securefile</code> is of type <code>text</code>. Its allowable values are <code>ALWAYS</code>, <code>PERMITTED</code> [default], <code>NEVER</code>, or <code>IGNORE</code>. The <code>db_securefile</code> parameter is dynamic and its scope is <code>ALTER</code> <code>SYSTEM</code>.</p>
<div id="ADLOB46148" class="example">
<p class="titleinexample"><a id="sthref160"></a>Example 4-26 Setting db_securefile parameter through ALTER SYSTEM</p>
<pre>
ALTER SYSTEM SET db_securefile = 'ALWAYS';
</pre></div>
<!-- class="example" -->
<p>The <code>db_securefile</code> parameter enables the database administrator to either allow SecureFiles LOBs to be created (<code>PERMITTED</code>), disallow SecureFiles LOBs from being created in the future (<code>NEVER</code>), attempt to create SecureFiles LOBs but fall back to BasicFiles LOBs (<code>ALWAYS</code>), or disallow SecureFiles LOBs and ignore any errors that would otherwise be caused by forcing BasicFiles LOBs with SecureFiles LOBs options (<code>IGNORE</code>).</p>
<p>If <code>NEVER</code> is specified, any LOBs that are specified as SecureFiles LOBs are created as BasicFiles LOBs. All SecureFiles LOB- specific storage options and features such as compress, encrypt, or deduplicate throw an exception. The BasicFiles LOB defaults are used for storage options not specified.</p>
<p><code>ALWAYS</code> attempts to create all LOBs as SecureFiles LOBs but creates any LOBs not in <a id="sthref161"></a><code>ASSM</code> tablespaces as BasicFiles LOBs, unless the <code>SECUREFILE</code> parameter is explicitly specified. Any BasicFiles LOB storage options specified are ignored, and the SecureFiles LOB defaults are used for all storage options not specified.</p>
<p>If <code>IGNORE</code> is specified, the <code>SECUREFILE</code> keyword and all SecureFiles LOB options are ignored.</p>
</div>
<!-- class="sect1" -->
<a id="BABGIGHB"></a>
<div id="ADLOB45230" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Compatibility and Upgrading</h2>
<p>All features described in this document are enabled with compatibility set to <code>11.2.0.0.0</code> or higher. There is no downgrade capability after <code>11.2.0.0.0</code> is set.</p>
<p>If you want to upgrade BasicFiles LOBs to SecureFiles LOBs, you must use typical methods for upgrading data (CTAS/ITAS, online redefinition, export/import, column to column copy, or using a view and a new column). Most of these solutions require twice the disk space used by the data in the input LOB column. However, partitioning and taking these actions on a partition-by-partition basis lowers the disk space requirements.</p>
</div>
<!-- class="sect1" -->
<a id="BABDIEGE"></a>
<div id="ADLOB45231" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref162"></a>Migrating Columns from BasicFiles LOBs to SecureFiles LOBs</h2>
<p>The method of migrating LOBs columns is presented in this section.</p>
<div id="ADLOB45232" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref163"></a>
<h3 class="sect2">Preventing Generation of REDO Space when Migrating to SecureFiles LOBs</h3>
<p>Generation of redo space can cause performance problems during the process of migrating BasicFiles LOB columns. Redo changes for the table are logged during the migration process only if the table has <code>LOGGING</code> set.</p>
<p>Redo changes for the column being converted from BasicFiles LOB to SecureFiles LOB are logged only if the storage characteristics of the SecureFiles LOB column indicate <code>LOGGING</code>. The logging setting (<code>LOGGING</code> or <code>NOLOGGING</code>) for the LOB column is inherited from the tablespace in which the LOB is created.</p>
<p>To prevent generation of redo space during migration make sure that you specify the <code>NOLOGGING</code> storage parameter for the new SecureFiles LOB column(s). You can turn <code>LOGGING</code> on once your migration is complete.</p>
</div>
<!-- class="sect2" -->
<div id="ADLOB45233" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref164"></a>
<h3 class="sect2">Online Redefinition for BasicFiles LOBs</h3>
<p>Online redefinition is the only recommended method for migration of BasicFiles LOBs to SecureFiles LOBs. It can be done at the table or partition level.</p>
<div id="ADLOB45234" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref165"></a>
<h4 class="sect3">Online Redefinition Advantages</h4>
<ul>
<li>
<p>No requirement to take the table or partition offline</p>
</li>
<li>
<p>Can be done in parallel</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ADLOB45235" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref166"></a>
<h4 class="sect3">Online Redefinition Disadvantages</h4>
<ul>
<li>
<p>Additional storage equal to the entire table or partition and all LOB segments must be available</p>
</li>
<li>
<p>Global indexes must be rebuilt</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADLOB45236" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref167"></a>
<h3 class="sect2"><a id="sthref168"></a>Using Online Redefinition for Migrating Tables with BasicFiles LOBs</h3>
<p>You can also migrate a table using Online Redefinition. Online Redefinition has the advantage of not requiring the table to be off line, but it requires additional free space equal to or even slightly greater than the space used by the table. <a href="#BABGGEBB">Example 4-27</a> demonstrates how to migrate a table using Online Redefinition.</p>
<div id="ADLOB45237" class="example">
<p class="titleinexample"><a id="BABGGEBB"></a>Example 4-27 Example of Online Redefinition</p>
<pre>
REM Grant privileges required for online redefinition.
GRANT EXECUTE ON DBMS_REDEFINITION TO pm;
GRANT ALTER ANY TABLE TO pm;
GRANT DROP ANY TABLE TO pm;
GRANT LOCK ANY TABLE TO pm;
GRANT CREATE ANY TABLE TO pm;
GRANT SELECT ANY TABLE TO pm;
REM Privileges required to perform cloning of dependent objects.
GRANT CREATE ANY TRIGGER TO pm;
GRANT CREATE ANY INDEX TO pm;
CONNECT pm
DROP TABLE cust;
CREATE TABLE cust(c_id NUMBER PRIMARY KEY,
c_zip NUMBER,
c_name VARCHAR(30) DEFAULT NULL,
c_lob CLOB
);
INSERT INTO cust VALUES(1, 94065, 'hhh', 'ttt');
-- Creating Interim Table
-- There is no requirement to specify constraints because they are
-- copied over from the original table.
CREATE TABLE cust_int(c_id NUMBER NOT NULL,
c_zip NUMBER,
c_name VARCHAR(30) DEFAULT NULL,
c_lob CLOB
) LOB(c_lob) STORE AS SECUREFILE (NOCACHE FILESYSTEM_LIKE_LOGGING);
DECLARE
col_mapping VARCHAR2(1000);
BEGIN
-- map all the columns in the interim table to the original table
col_mapping :=
'c_id c_id , '||
'c_zip c_zip , '||
'c_name c_name, '||
'c_lob c_lob';
DBMS_REDEFINITION.START_REDEF_TABLE('pm', 'cust', 'cust_int', col_mapping);
END;
/
DECLARE
error_count pls_integer := 0;
BEGIN
DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS('pm', 'cust', 'cust_int',
    1, TRUE,TRUE,TRUE,FALSE, error_count);
DBMS_OUTPUT.PUT_LINE('errors := ' || TO_CHAR(error_count));
END;
/
EXEC DBMS_REDEFINITION.FINISH_REDEF_TABLE('pm', 'cust', 'cust_int');
-- Drop the interim table
DROP TABLE cust_int;
DESC cust;
-- The following insert statement fails. This illustrates
-- that the primary key constraint on the c_id column is
-- preserved after migration.
INSERT INTO cust VALUES(1, 94065, 'hhh', 'ttt');
SELECT * FROM cust;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADLOB45238" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref169"></a>
<h3 class="sect2">Parallel Online Redefinition</h3>
<p>On a system with sufficient resources for parallel execution, redefinition of a BasicFiles LOB column to a SecureFiles LOB column may be executed in parallel under the following conditions:</p>
<ul>
<li>
<p>In the case where the destination table is non-partitioned:</p>
<p>The segment used to store the LOB column in the destination table belongs to a locally managed tablespace with Automatic Segment Space Management (<a id="sthref170"></a>ASSM) enabled, which is now the default and is a requirement for SecureFiles LOBs.</p>
<p>There is a simple mapping from one LOB column to one LOB column, and the destination table has only one LOB column.</p>
</li>
<li>
<p>In the case where the destination table is partitioned:</p>
<p>The normal methods for parallel execution for partitioning apply. When the destination table is partitioned, then online redefinition is executed in parallel.</p>
</li>
</ul>
<p>For parallel execution of online redefinition add the following statement after the connect statement in <a href="#BABGGEBB">Example 4-27, "Example of Online Redefinition"</a> in the last section:</p>
<pre>
ALTER SESSION FORCE PARALLEL DML;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGEJDE"></a>
<div id="ADLOB45193" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref171"></a><a id="sthref172"></a>PL/SQL Packages for SecureFiles LOBs and DBFS</h2>
<p>This section introduces PL/SQL packages that are used with SecureFiles LOBs.</p>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CIHJJCJH">DBMS_LOB Package</a></p>
</li>
<li>
<p><a href="#CIHHICIE">DBMS_SPACE Package</a></p>
</li>
</ul>
<a id="CIHJJCJH"></a>
<div id="ADLOB45194" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref173"></a>DBMS_LOB Package</h3>
<p>LOBs inherit the LOB column settings for deduplication, encryption, and compression, which may also be configured on specific LOB instances using the LOB locator APIs. Note that <code>LONG</code> APIs cannot be used to configure LOB settings. The following sections describe additions and modifications made to the PL/SQL <code>DBMS_LOB</code> package to accommodate these features. See <a class="olink ARPLS600" href="../../appdev.112/e40758/d_lob.htm#ARPLS600"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>, <code>DBMS_LOB</code> package for more details.</p>
<p>The constants listed in <a href="#CIHBJECF">Table 4-3</a>, of type <code>CONSTANT PLS_INTEGER</code>, support the DBFS Link interfaces. For more information about constants used in the PL/SQL <code>DBMS_LOB</code> package, see <a class="olink ARPLS66601" href="../../appdev.112/e40758/d_lob.htm#ARPLS66601"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div id="ADLOB45203" class="tblformal">
<p class="titleintable"><a id="sthref174"></a><a id="CIHBJECF"></a>Table 4-3 Some DBMS_LOB Constants</p>
<table class="cellalignment905" title="Some DBMS_LOB Constants" summary="Column 1 lists a constant, and column 2 provides a description" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t7">Constant</th>
<th class="cellalignment906" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_NEVER
</pre></td>
<td class="cellalignment907" headers="r2c1-t7 r1c2-t7">
<p>DBFS link state value</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_YES
</pre></td>
<td class="cellalignment907" headers="r3c1-t7 r1c2-t7">
<p>DBFS link state value</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_NO
</pre></td>
<td class="cellalignment907" headers="r4c1-t7 r1c2-t7">
<p>DBFS link state value</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_CACHE
</pre></td>
<td class="cellalignment907" headers="r5c1-t7 r1c2-t7">
<p>Flag used by <code>COPY_DBFS_LINK()</code> and <code>MOVE_DBFS_LINK()</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_NOCACHE
</pre></td>
<td class="cellalignment907" headers="r6c1-t7 r1c2-t7">
<p>Flag used by <code>COPY_DBFS_LINK()</code> and <code>MOVE_DBFS_LINK()</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t7" headers="r1c1-t7">
<pre>
DBFS_LINK_PATH_MAX_SIZE
</pre></td>
<td class="cellalignment907" headers="r7c1-t7 r1c2-t7">
<p>The maximum length of DBFS pathnames; <code>1024</code>.</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t7" headers="r1c1-t7">
<pre>
CONTENTTYPE_MAX_SIZE
</pre></td>
<td class="cellalignment907" headers="r8c1-t7 r1c2-t7">
<p>The maximum 1-byte ASCII characters for content type; <code>128</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CIHEFBJA">Table 4-4</a> summarizes changes made to the methods of the PL/SQL package <code>DBMS_LOB</code>. Many existing methods have been augmented to support the SecureFiles LOB paradigm, and several new methods have been added.</p>
<p><a id="ADLOB45213"></a>Note that some of the <code>DBMS_LOB</code> operations that existed before Oracle Database 11<span class="italic">g</span>R2 throw an exception if the LOB is a DBFS Link. The application must explicitly replace the DBFS Link with a LOB by calling <code>COPY_FROM_LINK()</code> before making these calls. When completed, the application can move the updated LOB back to DBFS using <code>MOVE_TO_DBFS_LINK()</code>, if needed. Other <code>DBMS_LOB</code> operations that existed before Oracle Database 11<span class="italic">g</span>R2 work transparently if the DBFS Link is in a file system that supports streaming. Note that these operations fail if streaming is either not supported or disabled.</p>
<div id="ADLOB46149" class="tblformal">
<p class="titleintable"><a id="sthref175"></a><a id="CIHEFBJA"></a>Table 4-4 DBMS_LOB Methods</p>
<table class="cellalignment905" title="DBMS_LOB Methods" summary="Column 1 lists a method, and column 2 provides a description" dir="ltr">
<thead>
<tr class="cellalignment899">
<th class="cellalignment906" id="r1c1-t8">Method</th>
<th class="cellalignment906" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment899">
<td class="cellalignment907" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#CIHCFFJJ">GETOPTIONS()</a></p>
</td>
<td class="cellalignment907" headers="r2c1-t8 r1c2-t8">
<p>Retrieves the previously set options of a specific LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r3c1-t8" headers="r1c1-t8">
<p><a href="#CIHBCFIG">SETOPTIONS()</a></p>
</td>
<td class="cellalignment907" headers="r3c1-t8 r1c2-t8">
<p>Sets new options for a specific LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r4c1-t8" headers="r1c1-t8">
<p><a href="#CIHCHFDB">ISSECUREFILE()</a></p>
</td>
<td class="cellalignment907" headers="r4c1-t8 r1c2-t8">
<p>Determines if a LOB is a SecureFiles LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r5c1-t8" headers="r1c1-t8">
<p><a href="#CIHGBFFB">MOVE_TO_DBFS_LINK()</a></p>
</td>
<td class="cellalignment907" headers="r5c1-t8 r1c2-t8">
<p>Moves the specified LOB data from the database into DBFS HSM Store</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r6c1-t8" headers="r1c1-t8">
<p><a href="#CIHHFEDF">COPY_FROM_DBFS_LINK()</a></p>
</td>
<td class="cellalignment907" headers="r6c1-t8 r1c2-t8">
<p>Copies the specified LOB data from DBFS HSM Store into the database</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r7c1-t8" headers="r1c1-t8">
<p><a href="#CIHDIDFD">COPY_DBFS_LINK()</a></p>
</td>
<td class="cellalignment907" headers="r7c1-t8 r1c2-t8">
<p>Copies an existing DBFS link into a new LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r8c1-t8" headers="r1c1-t8">
<p><a href="#CIHBHCJI">GET_DBFS_LINK()</a></p>
</td>
<td class="cellalignment907" headers="r8c1-t8 r1c2-t8">
<p>Returns the DBFS path name for a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r9c1-t8" headers="r1c1-t8">
<p><a href="#CIHGGDFD">SET_DBFS_LINK()</a></p>
</td>
<td class="cellalignment907" headers="r9c1-t8 r1c2-t8">
<p>Links a LOB with a DBFS path name</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r10c1-t8" headers="r1c1-t8">
<p><a href="#CIHCBGCD">GET_DBFS_LINK_STATE()</a></p>
</td>
<td class="cellalignment907" headers="r10c1-t8 r1c2-t8">
<p>Returns the linking state of a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r11c1-t8" headers="r1c1-t8">
<p><a href="#CIHDGHFG">DBFS_LINK_GENERATE_PATHNAME()</a></p>
</td>
<td class="cellalignment907" headers="r11c1-t8 r1c2-t8">
<p>Returns a unique file path name for creating a DBFS Link</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r12c1-t8" headers="r1c1-t8">
<p><a href="#CIHIEFEF">SETCONTENTTYPE()</a></p>
</td>
<td class="cellalignment907" headers="r12c1-t8 r1c2-t8">
<p>Sets the content type string of the LOB data</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r13c1-t8" headers="r1c1-t8">
<p><a href="#CIHJBJHH">GETCONTENTTYPE()</a></p>
</td>
<td class="cellalignment907" headers="r13c1-t8 r1c2-t8">
<p>Retrieves the content type string of the LOB data</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r14c1-t8" headers="r1c1-t8">
<p><a href="#CIHDHDBI">APPEND()</a></p>
</td>
<td class="cellalignment907" headers="r14c1-t8 r1c2-t8">
<p>Appends the contents of the source LOB to the destination LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r15c1-t8" headers="r1c1-t8">
<p><a href="#CIHDDHDF">COMPARE()</a></p>
</td>
<td class="cellalignment907" headers="r15c1-t8 r1c2-t8">
<p>Compares two LOBs in full or in parts</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r16c1-t8" headers="r1c1-t8">
<p><a href="#CIHFDFHI">CONVERTTOBLOB()</a></p>
</td>
<td class="cellalignment907" headers="r16c1-t8 r1c2-t8">
<p>Converts the character data of a <code>CLOB</code> or <code>NCLOB</code> into the specified character set and writes it in binary format to a destination <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r17c1-t8" headers="r1c1-t8">
<p><a href="#CIHIDIHF">CONVERTTOCLOB()</a></p>
</td>
<td class="cellalignment907" headers="r17c1-t8 r1c2-t8">
<p>Converts the binary data of a <code>BLOB</code> into the specified character set and writes it in character format to a destination <code>CLOB</code> or <code>NCLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r18c1-t8" headers="r1c1-t8">
<p><a href="#CIHJHFBJ">COPY()</a></p>
</td>
<td class="cellalignment907" headers="r18c1-t8 r1c2-t8">
<p>Copies all or part of the source LOB to the destination LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r19c1-t8" headers="r1c1-t8">
<p><a href="#CIHHAHHG">ERASE()</a></p>
</td>
<td class="cellalignment907" headers="r19c1-t8 r1c2-t8">
<p>Erases all or part of a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r20c1-t8" headers="r1c1-t8">
<p><a href="#CIHDHABE">FRAGMENT_DELETE()</a></p>
</td>
<td class="cellalignment907" headers="r20c1-t8 r1c2-t8">
<p>Deletes a specified fragment of the LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r21c1-t8" headers="r1c1-t8">
<p><a href="#CIHEIADD">FRAGMENT_INSERT()</a></p>
</td>
<td class="cellalignment907" headers="r21c1-t8 r1c2-t8">
<p>Inserts a fragment of data into the LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r22c1-t8" headers="r1c1-t8">
<p><a href="#CIHBGDII">FRAGMENT_MOVE()</a></p>
</td>
<td class="cellalignment907" headers="r22c1-t8 r1c2-t8">
<p>Moves a fragment of a LOB from one location in the LOB to another location</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r23c1-t8" headers="r1c1-t8">
<p><a href="#CIHHGIHD">FRAGMENT_REPLACE()</a></p>
</td>
<td class="cellalignment907" headers="r23c1-t8 r1c2-t8">
<p>Replaces a fragment of a LOB with new data</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r24c1-t8" headers="r1c1-t8">
<p><a href="#CIHDEGJF">LOADBLOBFROMFILE()</a></p>
</td>
<td class="cellalignment907" headers="r24c1-t8 r1c2-t8">
<p>Loads <code>BFILE</code> data into a <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r25c1-t8" headers="r1c1-t8">
<p><a href="#CIHCJIDH">LOADCLOBFROMFILE()</a></p>
</td>
<td class="cellalignment907" headers="r25c1-t8 r1c2-t8">
<p>Loads <code>BFILE</code> data into a <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r26c1-t8" headers="r1c1-t8">
<p><a href="#CIHJHBJH">LOADFROMFILE()</a></p>
</td>
<td class="cellalignment907" headers="r26c1-t8 r1c2-t8">
<p>Loads <code>BFILE</code> data into a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r27c1-t8" headers="r1c1-t8">
<p><a href="#CIHEHEEB">READ()</a></p>
</td>
<td class="cellalignment907" headers="r27c1-t8 r1c2-t8">
<p>Reads data from a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r28c1-t8" headers="r1c1-t8">
<p><a href="#CIHCDAHE">SUBSTR()</a></p>
</td>
<td class="cellalignment907" headers="r28c1-t8 r1c2-t8">
<p>Returns a fragment of a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r29c1-t8" headers="r1c1-t8">
<p><a href="#CIHEGBAF">TRIM()</a></p>
</td>
<td class="cellalignment907" headers="r29c1-t8 r1c2-t8">
<p>Trims the LOB to a specified length</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r30c1-t8" headers="r1c1-t8">
<p><a href="#CIHIJIGJ">WRITE()</a></p>
</td>
<td class="cellalignment907" headers="r30c1-t8 r1c2-t8">
<p>Writes data to a LOB</p>
</td>
</tr>
<tr class="cellalignment899">
<td class="cellalignment907" id="r31c1-t8" headers="r1c1-t8">
<p><a href="#CIHEBHED">WRITEAPPEND()</a></p>
</td>
<td class="cellalignment907" headers="r31c1-t8 r1c2-t8">
<p>Appends data to the end of a LOB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<a id="CIHCFFJJ"></a>
<div id="ADLOB45195" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref176"></a>GETOPTIONS()</h4>
<p>This function obtains the compression, deduplication and encryption settings of individual SecureFiles LOBs. An integer corresponding to a pre-defined constant based on the option type is returned.</p>
<p>Note that you cannot turn compression or deduplication on or off for an entire SecureFiles LOB column that has these features disabled.</p>
<p>See the <a class="olink ARPLS66712" href="../../appdev.112/e40758/d_lob.htm#ARPLS66712"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more details on this function. See the <a class="olink LNOCI162" href="../../appdev.112/e10646/oci17msc002.htm#LNOCI162"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for more information on the corresponding OCI LOB function <code>OCILobGetContentType()</code>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBCFIG"></a>
<div id="ADLOB45196" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref177"></a>SETOPTIONS()</h4>
<p>This procedure sets compression, deduplication and encryption features. It enables the features to be set on a per-LOB basis, overriding the default LOB settings. This call incurs a round trip to the server to make the changes persistent.</p>
<p>You cannot turn compression or deduplication on or off for a SecureFiles LOB column that does not have those features enabled. <code>GETOPTIONS()</code> and <code>SETOPTIONS()</code> work on individual SecureFiles LOBs. You can turn off a feature on a particular SecureFiles LOB and turn on a feature that has been turned off by <code>SETOPTIONS()</code>, but you cannot turn on an option that has not been given to the SecureFiles LOB when the table was created.</p>
<p>See the <a class="olink ARPLS66745" href="../../appdev.112/e40758/d_lob.htm#ARPLS66745"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more details on this function. See the <a class="olink LNOCI162" href="../../appdev.112/e10646/oci17msc002.htm#LNOCI162"><span class="italic">Oracle Call Interface Programmer's Guide</span></a> for more information on the corresponding OCI LOB function <code>OCILobSetContentType()</code>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCHFDB"></a>
<div id="ADLOB45198" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><a id="sthref178"></a>ISSECUREFILE()</h4>
<p>This function returns <code>TRUE</code> if the LOB locator passed to it is for a SecureFiles LOB. It returns <code>FALSE</code> otherwise.</p>
<p>See the <a class="olink ARPLS66745" href="../../appdev.112/e40758/d_lob.htm#ARPLS66745"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more details on this function.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGBFFB"></a>
<div id="ADLOB45981" class="sect3">
<h4 class="sect3">MOVE_TO_DBFS_LINK()</h4>
<p><code>MOVE_TO_DBFS_LINK()</code> places the specified LOB data (from the database) into the DBFS HSM Store. If the LOB is stored, <code>MOVE_TO_DBFS_LINK()</code> silently returns as if the move was successful. In this case, if <code>DBFS_LINK_NOCACHE</code> is specified, or the default <code>flags</code> value is set, the LOB data is removed from the database.</p>
<p>Calling <code>MOVE_TO_DBFS_LINK()</code> multiple times on the same LOB with the same <code>flags</code> has no effect. Calling <code>MOVE_TO_DBFS_LINK()</code> on a LOB that is stored causes the LOB to be cached (<code>MOVE_TO_DBFS_LINK_CACHE</code>) or removed (<code>DBFS_LINK_NOCACHE</code>) according to the <code>flags</code> setting.</p>
<p>See <a class="olink ARPLS66639" href="../../appdev.112/e40758/d_lob.htm#ARPLS66639"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHFEDF"></a>
<div id="ADLOB45982" class="sect3">
<h4 class="sect3">COPY_FROM_DBFS_LINK()</h4>
<p><code>COPY_FROM_DBFS_LINK()</code> retrieves the specified LOB data from DBFS HSM Store to the database.</p>
<p>If the LOB is successfully retrieved, <code>COPY_FROM_DBFS_LINK</code> silently returns success.</p>
<p>See <a class="olink ARPLS66630" href="../../appdev.112/e40758/d_lob.htm#ARPLS66630"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDIDFD"></a>
<div id="ADLOB45983" class="sect3">
<h4 class="sect3">COPY_DBFS_LINK()</h4>
<p><code>COPY_DBFS_LINK()</code> results in a destination LOB referring to the same the DBFS path name as the source LOB without causing an intervening get. An optional flag parameter causes the LOB to be read into the destination.</p>
<p>See <a class="olink ARPLS66627" href="../../appdev.112/e40758/d_lob.htm#ARPLS66627"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBHCJI"></a>
<div id="ADLOB45984" class="sect3">
<h4 class="sect3">GET_DBFS_LINK()</h4>
<p><code>GET_DBFS_LINK()</code> returns the DBFS path name for the given LOB.</p>
<p>See <a class="olink ARPLS66633" href="../../appdev.112/e40758/d_lob.htm#ARPLS66633"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGGDFD"></a>
<div id="ADLOB45985" class="sect3">
<h4 class="sect3">SET_DBFS_LINK()</h4>
<p><code>SET_DBFS_LINK</code> links the specified LOB with the given DBFS path name.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCBGCD"></a>
<div id="ADLOB45986" class="sect3">
<h4 class="sect3">GET_DBFS_LINK_STATE()</h4>
<p><code>GET_DBFS_LINK_STATE</code> retrieves the current link state for the specified LOB.</p>
<p>Returns the current link state of the specified LOB. If the LOB has never been linked, the state is set to <code>DBFS_LINK_NEVER</code>. If the LOB has been linked, the state is set to <code>DBFS_LINK_YES</code>. If the LOB has been retrieved from DBFS HSM Store, the state is set to <code>DBFS_LINK_NO</code>. If the LOB was linked, but the data was left in the database, cached is set to <code>TRUE</code>. Cached is set to <code>FALSE</code> if the data was removed after the link was created, and <code>NULL</code> if state is <code>DBFS_LINK_NEVER</code>. The <code>pathname</code> argument is set to the DBFS path name that is used to identify the LOB in the DBFS HSM Store.</p>
<p>See <a class="olink ARPLS66642" href="../../appdev.112/e40758/d_lob.htm#ARPLS66642"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDGHFG"></a>
<div id="ADLOB45987" class="sect3">
<h4 class="sect3">DBFS_LINK_GENERATE_PATHNAME()</h4>
<p><code>DBFS_LINK_GENERATE_PATHNAME()</code> returns a unique file path name for creating a DBFS Link.</p>
<p>Returns a globally unique file pathname that can be used for archiving. This is guaranteed to be globally unique across all calls to this function for different LOBs and versions of that LOB. It is always the same for the same LOB and version.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIEFEF"></a>
<div id="ADLOB45211" class="sect3">
<h4 class="sect3">SETCONTENTTYPE()</h4>
<p><code>SETCONTENTTYPE()</code> sets the content type string for the data in the LOB.</p>
<p>To clear an existing <code>contenttype</code> associated with a SecureFiles LOB, invoke <code>SETCONTENTTYPE()</code> with <code>contenttype</code> set to an empty string.</p>
<p>See <a class="olink ARPLS66742" href="../../appdev.112/e40758/d_lob.htm#ARPLS66742"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJBJHH"></a>
<div id="ADLOB45212" class="sect3">
<h4 class="sect3">GETCONTENTTYPE()</h4>
<p><code>GETCONTENTTYPE()</code> gets the content type string for the data in the LOB if set.</p>
<p>If the SecureFiles LOB does not have a <code>contenttype</code> associated with it, <code>GETCONTENTTYPE()</code> returns <code>NULL</code>.</p>
<p>See <a class="olink ARPLS66702" href="../../appdev.112/e40758/d_lob.htm#ARPLS66702"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDHDBI"></a>
<div id="ADLOB45214" class="sect3">
<h4 class="sect3">APPEND()</h4>
<p>If <code>APPEND()</code> is called on a SecureFiles LOB that is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66624" href="../../appdev.112/e40758/d_lob.htm#ARPLS66624"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDDHDF"></a>
<div id="ADLOB45215" class="sect3">
<h4 class="sect3">COMPARE()</h4>
<p>If <code>COMPARE()</code> is called on a LOB that is a DBFS Link, the linked LOB is streamed from the DBFS, if possible, otherwise an exception is thrown.</p>
<p>See <a class="olink ARPLS66647" href="../../appdev.112/e40758/d_lob.htm#ARPLS66647"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFDFHI"></a>
<div id="ADLOB45216" class="sect3">
<h4 class="sect3">CONVERTTOBLOB()</h4>
<p>If <code>CONVERTTOBLOB</code> is called and the source LOB has been linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS603" href="../../appdev.112/e40758/d_lob.htm#ARPLS603"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIDIHF"></a>
<div id="ADLOB46103" class="sect3">
<h4 class="sect3">CONVERTTOCLOB()</h4>
<p>If <code>CONVERTTOCLOB</code> is called and the source LOB has been linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS602" href="../../appdev.112/e40758/d_lob.htm#ARPLS602"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJHFBJ"></a>
<div id="ADLOB45217" class="sect3">
<h4 class="sect3">COPY()</h4>
<p>If the source LOB is linked, the data is streamed from the DBFS, if possible, otherwise an exception is thrown. If the destination LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66662" href="../../appdev.112/e40758/d_lob.htm#ARPLS66662"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHAHHG"></a>
<div id="ADLOB45218" class="sect3">
<h4 class="sect3">ERASE()</h4>
<p>If the LOB to be erased is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66667" href="../../appdev.112/e40758/d_lob.htm#ARPLS66667"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDHABE"></a>
<div id="ADLOB45219" class="sect3">
<h4 class="sect3">FRAGMENT_DELETE()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66688" href="../../appdev.112/e40758/d_lob.htm#ARPLS66688"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEIADD"></a>
<div id="ADLOB46104" class="sect3">
<h4 class="sect3">FRAGMENT_INSERT()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66691" href="../../appdev.112/e40758/d_lob.htm#ARPLS66691"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBGDII"></a>
<div id="ADLOB46105" class="sect3">
<h4 class="sect3">FRAGMENT_MOVE()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66694" href="../../appdev.112/e40758/d_lob.htm#ARPLS66694"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHGIHD"></a>
<div id="ADLOB46106" class="sect3">
<h4 class="sect3">FRAGMENT_REPLACE()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66697" href="../../appdev.112/e40758/d_lob.htm#ARPLS66697"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHDEGJF"></a>
<div id="ADLOB45220" class="sect3">
<h4 class="sect3">LOADBLOBFROMFILE()</h4>
<p>If the <code>BLOB</code> is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66723" href="../../appdev.112/e40758/d_lob.htm#ARPLS66723"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCJIDH"></a>
<div id="ADLOB46107" class="sect3">
<h4 class="sect3">LOADCLOBFROMFILE()</h4>
<p>If the <code>CLOB</code> is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66728" href="../../appdev.112/e40758/d_lob.htm#ARPLS66728"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHJHBJH"></a>
<div id="ADLOB46108" class="sect3">
<h4 class="sect3">LOADFROMFILE()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66733" href="../../appdev.112/e40758/d_lob.htm#ARPLS66733"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEHEEB"></a>
<div id="ADLOB45221" class="sect3">
<h4 class="sect3">READ()</h4>
<p>If the LOB is linked, the data is streamed from the DBFS, if possible, otherwise an exception is thrown.</p>
<p>See <a class="olink ARPLS66738" href="../../appdev.112/e40758/d_lob.htm#ARPLS66738"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHCDAHE"></a>
<div id="ADLOB45222" class="sect3">
<h4 class="sect3">SUBSTR()</h4>
<p>If the LOB is linked, the data is streamed from the DBFS, if possible, otherwise an exception is thrown.</p>
<p>See <a class="olink ARPLS66748" href="../../appdev.112/e40758/d_lob.htm#ARPLS66748"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEGBAF"></a>
<div id="ADLOB45223" class="sect3">
<h4 class="sect3">TRIM()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66752" href="../../appdev.112/e40758/d_lob.htm#ARPLS66752"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHIJIGJ"></a>
<div id="ADLOB45224" class="sect3">
<h4 class="sect3">WRITE()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66755" href="../../appdev.112/e40758/d_lob.htm#ARPLS66755"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEBHED"></a>
<div id="ADLOB45225" class="sect3">
<h4 class="sect3">WRITEAPPEND()</h4>
<p>If the LOB is linked, an exception is thrown.</p>
<p>See <a class="olink ARPLS66758" href="../../appdev.112/e40758/d_lob.htm#ARPLS66758"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHICIE"></a>
<div id="ADLOB45226" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref179"></a>DBMS_SPACE Package</h3>
<p>The <code>DBMS_SPACE</code> PL/SQL package enables you to analyze segment growth and space requirements.</p>
<div id="ADLOB45227" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref180"></a>
<h4 class="sect3">SPACE_USAGE()</h4>
<p>The existing <code>SPACE_USAGE</code> procedure is overloaded to return information about LOB space usage. It returns the amount of disk space in blocks used by all the LOBs in the LOB segment. This procedure can only be used on tablespaces that are created with auto segment space management. See <a class="olink ARPLS68113" href="../../appdev.112/e40758/d_space.htm#ARPLS68113"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment898">
<tr>
<td class="cellalignment907">
<table class="cellalignment903">
<tr>
<td class="cellalignment902"><a href="part_securef.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment902"><a href="adlob_fs.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment909">
<table class="cellalignment901">
<tr>
<td class="cellalignment902"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment902"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment902"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment902"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment902"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment902"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
