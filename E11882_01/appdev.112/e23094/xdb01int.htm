<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Introduction to Oracle XML&nbsp;DB</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:11Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="partpg1.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb02rep.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/54</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='xdb01int'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADXDB0100" class="chapter"><a id="g1054540"></a> <a id="i1047170"></a>
<h1 class="chapter"><span class="secnum">1</span> Introduction to Oracle XML&nbsp;DB</h1>
<p>This chapter introduces the features and architecture of Oracle XML&nbsp;DB. It contains these topics:</p>
<ul>
<li>
<p><a href="#i1047230">Overview of Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="#i1047471">Oracle XML&nbsp;DB Architecture</a></p>
</li>
<li>
<p><a href="#i1047269">Oracle XML&nbsp;DB Features</a></p>
</li>
<li>
<p><a href="#i1047650">Oracle XML&nbsp;DB Benefits</a></p>
</li>
<li>
<p><a href="#i1047845">Search XML Data using Oracle Text</a></p>
</li>
<li>
<p><a href="#i1047884">Build Messaging Applications using Oracle Streams Advanced Queuing</a></p>
</li>
<li>
<p><a href="#BABFDDHD">Standards Supported by Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="#i1047964">Oracle XML&nbsp;DB Technical Support</a></p>
</li>
<li>
<p><a href="#i1048115">Oracle XML&nbsp;DB Examples Used in This Manual</a></p>
</li>
<li>
<p><a href="#BABIFDEE">Further Oracle XML&nbsp;DB Case Studies and Demonstrations</a></p>
</li>
</ul>
<a id="i1047230"></a>
<div id="ADXDB3950" class="sect1">
<h2 class="sect1">Overview of Oracle XML&nbsp;DB<a id="sthref43"></a></h2>
<p>Oracle XML&nbsp;DB is a set of Oracle Database technologies related to high-performance handling of XML data: storing, generating, accessing, searching, validating, transforming, evolving, and indexing. It provides native XML support by encompassing both the SQL and XML data models in an interoperable way. Oracle XML&nbsp;DB is included as part of Oracle Database starting with Oracle9<span class="italic">i</span> Release 2 (9.2).</p>
<p>Oracle XML&nbsp;DB includes the following features:</p>
<ul>
<li>
<p>An abstract SQL data type, <code>XMLType</code>, for XML data.</p>
</li>
<li>
<p>Enterprise-level Oracle Database features for XML content: reliability, availability, scalability, and security. XML-specific memory management and optimizations.</p>
</li>
<li>
<p>Industry-standard ways to access and update XML data. The standards include the SQL/XML standard and the World Wide Web Consortium (W3C) XML and XML Schema data models and recommendations for XPath and XQuery. You can use FTP, HTTP(S), and WebDAV to move XML content into and out of Oracle Database. Industry-standard APIs provide programmatic access and manipulation of XML content using Java, C, and PL/SQL.</p>
</li>
<li>
<p>Ways to store, query, update, and transform XML data while accessing it using SQL.</p>
</li>
<li>
<p>Ways to perform XML operations on SQL data.</p>
</li>
<li>
<p>Oracle XML&nbsp;DB Repository: a simple, lightweight repository where you can organize and manage database content, including XML content, using a file/folder/URL metaphor.</p>
</li>
<li>
<p>Ways to access and combine data from disparate systems through gateways, using a single, common data model. This reduces the complexity of developing applications that must deal with data from different stores.</p>
</li>
<li>
<p>Ways to use Oracle XML&nbsp;DB in conjunction with Oracle XML Developer's Kit (XDK) to build applications that run in the middle tier in either Oracle Application Server or Oracle Database.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCCCJI">"XMLType Data Type"</a></p>
</li>
<li>
<p><code><a href="http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html">http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html</a></code> for the latest news and white papers about Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a class="olink ADXDK" href="../e23582/toc.htm"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1047471"></a>
<div id="ADXDB3951" class="sect1">
<h2 class="sect1"><a id="sthref44"></a>Oracle XML&nbsp;DB Architecture</h2>
<p><a href="#i1048278">Figure 1-1</a> and <a href="#BABCJCII">Figure 1-2</a> show the software architecture of Oracle XML&nbsp;DB. The main features are:</p>
<ul>
<li>
<p>Storage of <code>XMLType</code> tables and views.</p>
<ul>
<li>
<p>You can index <code>XMLType</code> tables and views using <code>XMLIndex</code>, B-tree, and Oracle Text indexes.</p>
</li>
<li>
<p>You can store data that is in <code>XMLType</code> views in local or remote tables. You can access remote tables using database links.</p>
</li>
</ul>
</li>
<li>
<p>Oracle XML&nbsp;DB Repository. You can store any kind of documents in the repository, including XML documents that are associated with an XML schema that is registered with Oracle XML&nbsp;DB. You can access documents in the repository in any of the following ways:</p>
<ul>
<li>
<p>HTTP(S), through the HTTP protocol handler</p>
</li>
<li>
<p>WebDAV and FTP, through the WebDAV and FTP protocol handlers</p>
</li>
<li>
<p>SQL, through <a id="sthref45"></a>Oracle Net Services, including Java Database Connectivity (JDBC)</p>
</li>
</ul>
</li>
<li>
<p>Support of XML data messaging using Oracle Streams Advanced Queuing (AQ) and <a id="sthref46"></a>Web Services.</p>
</li>
</ul>
<div id="ADXDB3952" class="figure">
<p class="titleinfigure"><a id="i1048278"></a>Figure 1-1 XMLType Storage and Oracle XML&nbsp;DB Repository</p>
<img width="666" height="666" src="img/adxdb017.gif" alt="Description of Figure 1-1 follows" /><br />
<a id="sthref47" href="img_text/adxdb017.htm">Description of "Figure 1-1 XMLType Storage and Oracle XML&nbsp;DB Repository"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="ADXDB3953" class="figure">
<p class="titleinfigure"><a id="BABCJCII"></a>Figure 1-2 XMLType Storage</p>
<img width="660" height="699" src="img/adxdb028.gif" alt="Description of Figure 1-2 follows" /><br />
<a id="sthref48" href="img_text/adxdb028.htm">Description of "Figure 1-2 XMLType Storage"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="partpg2.htm#g997354">Part II, "Storing and Retrieving XML Data in Oracle XML&nbsp;DB"</a></p>
</li>
<li>
<p><a href="xdb22pro.htm#g1031760">Chapter 28, "Accessing the Repository using Protocols"</a></p>
</li>
<li>
<p><a href="xdb27aq.htm#g1033468">Chapter 37, "Exchanging XML Data using Oracle Streams&nbsp;AQ"</a></p>
</li>
</ul>
</div>
<a id="CHDCDBFI"></a>
<div id="ADXDB0110" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">APIs for XML</h3>
<p><a href="#CHDFJDFJ">Table 1-1</a> lists the reference documentation for the PL/SQL, C, and C++ Application Programming Interfaces (APIs) that you can use to manipulate XML data. The main reference for PL/SQL, C, and C++ APIs is <a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for information about Java APIs for XML</div>
<div id="ADXDB3955" class="tblformalwide">
<p class="titleintable"><a id="sthref49"></a><a id="CHDFJDFJ"></a>Table 1-1 APIs Related to XML</p>
<table class="cellalignment1032" title="APIs Related to XML" summary="Oracle APIs Related to XML" >
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t5">API</th>
<th class="cellalignment1027" id="r1c2-t5">Documentation</th>
<th class="cellalignment1027" id="r1c3-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t5" headers="r1c1-t5">
<p><code>XMLType</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t5 r1c2-t5">
<p><a class="olink ARPLS369" href="../../appdev.112/e40758/t_xml.htm#ARPLS369"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "XMLType"</a>, <a class="olink CAXML" href="../e10770/toc.htm"><span class="italic">Oracle Database XML C API Reference</span></a>, and <a class="olink CPXML" href="../e10771/toc.htm"><span class="italic">Oracle Database XML C++ API Reference</span></a></p>
</td>
<td class="cellalignment1028" headers="r2c1-t5 r1c3-t5">
<p>PL/SQL, C, and C++ APIs with XML operations on <code>XMLType</code> data &ndash; validation, transformation.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t5" headers="r1c1-t5">
<p>Database URI types</p>
</td>
<td class="cellalignment1028" headers="r3c1-t5 r1c2-t5">
<p><a class="olink ARPLS800" href="../../appdev.112/e40758/t_dburi.htm#ARPLS800"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "Database URI TYPEs"</a></p>
</td>
<td class="cellalignment1028" headers="r3c1-t5 r1c3-t5">
<p>Functions used for various URI types.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t5" headers="r1c1-t5">
<p><code><a id="sthref50"></a><a id="sthref51"></a>DBMS_METADATA</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t5 r1c2-t5">
<p><a class="olink ARPLS026" href="../../appdev.112/e40758/d_metada.htm#ARPLS026"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_METADATA"</a></p>
</td>
<td class="cellalignment1028" headers="r4c1-t5 r1c3-t5">
<p>PL/SQL API for retrieving metadata from the database dictionary as XML, or retrieving creation DDL and submitting the XML to re-create the associated object.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t5" headers="r1c1-t5">
<p><code><a id="sthref52"></a><a id="sthref53"></a>DBMS_RESCONFIG</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t5 r1c2-t5">
<p><a class="olink ARPLS199" href="../../appdev.112/e40758/d_resconfig.htm#ARPLS199"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_RESCONFIG"</a></p>
</td>
<td class="cellalignment1028" headers="r5c1-t5 r1c3-t5">
<p>PL/SQL API to operate on a resource configuration list, and to retrieve listener information for a resource.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t5" headers="r1c1-t5">
<p><code><a id="sthref54"></a><a id="sthref55"></a>DBMS_XDB</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t5 r1c2-t5">
<p><a class="olink ARPLS371" href="../../appdev.112/e40758/d_xdb.htm#ARPLS371"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDB"</a></p>
</td>
<td class="cellalignment1028" headers="r6c1-t5 r1c3-t5">
<p>PL/SQL API for managing Oracle XML&nbsp;DB Repository resources, ACL-based security, and configuration sessions.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t5" headers="r1c1-t5">
<p><code><a id="sthref56"></a><a id="sthref57"></a>DBMS_XDB_ADMIN</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t5 r1c2-t5">
<p><a class="olink ARPLS214" href="../../appdev.112/e40758/d_xdb_admin.htm#ARPLS214"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDB_ADMIN"</a></p>
</td>
<td class="cellalignment1028" headers="r7c1-t5 r1c3-t5">
<p>PL/SQL API for managing miscellaneous features of Oracle XML&nbsp;DB, including the <code>XMLIndex</code> index on the Oracle XML&nbsp;DB Repository.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t5" headers="r1c1-t5">
<p><code><a id="sthref58"></a><a id="sthref59"></a>DBMS_XDBRESOURCE</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t5 r1c2-t5">
<p><a class="olink ARPLS230" href="../../appdev.112/e40758/d_xdbresource.htm#ARPLS230"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDBRESOURCE"</a></p>
</td>
<td class="cellalignment1028" headers="r8c1-t5 r1c3-t5">
<p>PL/SQL API to operate on repository resource metadata and contents.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t5" headers="r1c1-t5">
<p><code><a id="sthref60"></a><a id="sthref61"></a>DBMS_XDBT</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t5 r1c2-t5">
<p><a class="olink ARPLS372" href="../../appdev.112/e40758/d_xdbt.htm#ARPLS372"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDBT"</a></p>
</td>
<td class="cellalignment1028" headers="r9c1-t5 r1c3-t5">
<p>PL/SQL API for creation of text indexes on repository resources.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t5" headers="r1c1-t5">
<p><code><a id="sthref62"></a><a id="sthref63"></a>DBMS_XDB_VERSION</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t5 r1c2-t5">
<p><a class="olink ARPLS373" href="../../appdev.112/e40758/d_xdb_ver.htm#ARPLS373"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDB_VERSION"</a></p>
</td>
<td class="cellalignment1028" headers="r10c1-t5 r1c3-t5">
<p>PL/SQL API for version management of repository resources.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t5" headers="r1c1-t5">
<p><code><a id="sthref64"></a><a id="sthref65"></a>DBMS_XDBZ</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t5 r1c2-t5">
<p><a class="olink ARPLS805" href="../../appdev.112/e40758/d_xdbz.htm#ARPLS805"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XDBZ"</a></p>
</td>
<td class="cellalignment1028" headers="r11c1-t5 r1c3-t5">
<p>Oracle XML&nbsp;DB Repository ACL-based security.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t5" headers="r1c1-t5">
<p><code><a id="sthref66"></a><a id="sthref67"></a>DBMS_XEVENT</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t5 r1c2-t5">
<p><a class="olink ARPLS210" href="../../appdev.112/e40758/d_xevent.htm#ARPLS210"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XEVENT"</a></p>
</td>
<td class="cellalignment1028" headers="r12c1-t5 r1c3-t5">
<p>PL/SQL API providing event-related types and supporting interface..</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t5" headers="r1c1-t5">
<p><code><a id="sthref68"></a><a id="sthref69"></a>DBMS_XMLDOM</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t5 r1c2-t5">
<p><a class="olink ARPLS399" href="../../appdev.112/e40758/d_xmldom.htm#ARPLS399"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLDOM"</a></p>
</td>
<td class="cellalignment1028" headers="r13c1-t5 r1c3-t5">
<p>PL/SQL implementation of the DOM API for <code>XMLType</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t5" headers="r1c1-t5">
<p><code><a id="sthref70"></a><a id="sthref71"></a>DBMS_XMLGEN</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t5 r1c2-t5">
<p><a class="olink ARPLS374" href="../../appdev.112/e40758/d_xmlgen.htm#ARPLS374"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLGEN"</a></p>
</td>
<td class="cellalignment1028" headers="r14c1-t5 r1c3-t5">
<p>PL/SQL API for transformation of SQL query results into canonical XML format.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r15c1-t5" headers="r1c1-t5">
<p><code><a id="sthref72"></a><a id="sthref73"></a>DBMS_XMLINDEX</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t5 r1c2-t5">
<p><a class="olink ARPLS212" href="../../appdev.112/e40758/d_xmlindex.htm#ARPLS212"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLINDEX</a></p>
</td>
<td class="cellalignment1028" headers="r15c1-t5 r1c3-t5">
<p>PL/SQL API for <code>XMLIndex</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r16c1-t5" headers="r1c1-t5">
<p><code><a id="sthref74"></a><a id="sthref75"></a>DBMS_XMLPARSER</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t5 r1c2-t5">
<p><a class="olink ARPLS375" href="../../appdev.112/e40758/d_xmlpar.htm#ARPLS375"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLPARSER"</a></p>
</td>
<td class="cellalignment1028" headers="r16c1-t5 r1c3-t5">
<p>PL/SQL implementation of the DOM Parser API for <code>XMLType</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment1020">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r19c1-t5" headers="r1c1-t5">
<p><code><a id="sthref76"></a><a id="sthref77"></a>DBMS_XMLSCHEMA</code></p>
</td>
<td class="cellalignment1028" headers="r19c1-t5 r1c2-t5">
<p><a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLSCHEMA</a></p>
</td>
<td class="cellalignment1028" headers="r19c1-t5 r1c3-t5">
<p>PL/SQL API for managing XML schemas within Oracle Database &ndash; schema registration, deletion.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r20c1-t5" headers="r1c1-t5">
<p><code><a id="sthref78"></a><a id="sthref79"></a>DBMS_XMLSTORE</code></p>
</td>
<td class="cellalignment1028" headers="r20c1-t5 r1c2-t5">
<p><a class="olink ARPLS801" href="../../appdev.112/e40758/d_xmlstr.htm#ARPLS801"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XMLSTORE"</a></p>
</td>
<td class="cellalignment1028" headers="r20c1-t5 r1c3-t5">
<p>PL/SQL API for storing XML data in relational tables.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r21c1-t5" headers="r1c1-t5">
<p><code><a id="sthref80"></a><a id="sthref81"></a>DBMS_XSLPROCESSOR</code></p>
</td>
<td class="cellalignment1028" headers="r21c1-t5 r1c2-t5">
<p><a class="olink ARPLS379" href="../../appdev.112/e40758/d_xslpro.htm#ARPLS379"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span>, Chapter "DBMS_XSLPROCESSOR"</a></p>
</td>
<td class="cellalignment1028" headers="r21c1-t5 r1c3-t5">
<p>PL/SQL implementation of an XSLT processor.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="sect2" -->
<div id="ADXDB3956" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref82"></a>
<h3 class="sect2">Catalog Views Related to XML</h3>
<p><a href="#g644983">Table 1-2</a> lists the catalog views related to XML. Information about a given view can be obtained by using SQL command <code>DESCRIBE</code>.</p>
<pre>
DESCRIBE USER_XML_SCHEMAS
</pre>
<div id="ADXDB3957" class="tblformal">
<p class="titleintable"><a id="sthref83"></a><a id="g644983"></a>Table 1-2 Catalog Views Related to XML</p>
<table class="cellalignment1026" title="Catalog Views Related to XML" summary="This table summarizes Oracle XML DB XML schema Catalog views." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t6">Schema</th>
<th class="cellalignment1027" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t6" headers="r1c1-t6">
<pre>
USER_XML_SCHEMAS
</pre></td>
<td class="cellalignment1028" headers="r2c1-t6 r1c2-t6">
<p>Registered XML schemas <span class="italic">owned</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t6" headers="r1c1-t6">
<pre>
ALL_XML_SCHEMAS
</pre></td>
<td class="cellalignment1028" headers="r3c1-t6 r1c2-t6">
<p>Registered XML schemas <span class="italic">usable</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t6" headers="r1c1-t6">
<pre>
DBA_XML_SCHEMAS
</pre></td>
<td class="cellalignment1028" headers="r4c1-t6 r1c2-t6">
<p>Registered XML schemas in Oracle XML&nbsp;DB</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t6" headers="r1c1-t6">
<pre>
USER_XML_TABLES
</pre></td>
<td class="cellalignment1028" headers="r5c1-t6 r1c2-t6">
<p><code>XMLType</code> tables <span class="italic">owned</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t6" headers="r1c1-t6">
<pre>
ALL_XML_TABLES
</pre></td>
<td class="cellalignment1028" headers="r6c1-t6 r1c2-t6">
<p><code>XMLType</code> tables <span class="italic">usable</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t6" headers="r1c1-t6">
<pre>
DBA_XML_TABLES
</pre></td>
<td class="cellalignment1028" headers="r7c1-t6 r1c2-t6">
<p><code>XMLType</code> tables in Oracle XML&nbsp;DB</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t6" headers="r1c1-t6">
<pre>
USER_XML_TAB_COLS
</pre></td>
<td class="cellalignment1028" headers="r8c1-t6 r1c2-t6">
<p><code>XMLType</code> table columns <span class="italic">owned</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t6" headers="r1c1-t6">
<pre>
ALL_XML_TAB_COLS
</pre></td>
<td class="cellalignment1028" headers="r9c1-t6 r1c2-t6">
<p><code>XMLType</code> table columns <span class="italic">usable</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t6" headers="r1c1-t6">
<pre>
DBA_XML_TAB_COLS
</pre></td>
<td class="cellalignment1028" headers="r10c1-t6 r1c2-t6">
<p><code>XMLType</code> table columns in Oracle XML&nbsp;DB</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t6" headers="r1c1-t6">
<pre>
USER_XML_VIEWS
</pre></td>
<td class="cellalignment1028" headers="r11c1-t6 r1c2-t6">
<p><code>XMLType</code> views <span class="italic">owned</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t6" headers="r1c1-t6">
<pre>
ALL_XML_VIEWS
</pre></td>
<td class="cellalignment1028" headers="r12c1-t6 r1c2-t6">
<p><code>XMLType</code> views <span class="italic">usable</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t6" headers="r1c1-t6">
<pre>
DBA_XML_VIEWS
</pre></td>
<td class="cellalignment1028" headers="r13c1-t6 r1c2-t6">
<p><code>XMLType</code> views in Oracle XML&nbsp;DB</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t6" headers="r1c1-t6">
<pre>
USER_XML_VIEW_COLS
</pre></td>
<td class="cellalignment1028" headers="r14c1-t6 r1c2-t6">
<p><code>XMLType</code> view columns <span class="italic">owned</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r15c1-t6" headers="r1c1-t6">
<pre>
ALL_XML_VIEW_COLS
</pre></td>
<td class="cellalignment1028" headers="r15c1-t6 r1c2-t6">
<p><code>XMLType</code> view columns <span class="italic">usable</span> by the current <span class="italic">user</span></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r16c1-t6" headers="r1c1-t6">
<pre>
DBA_XML_VIEW_COLS
</pre></td>
<td class="cellalignment1028" headers="r16c1-t6 r1c2-t6">
<p><code>XMLType</code> view columns in Oracle XML&nbsp;DB</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In addition to the views <code>ALL_XML_TABLES</code>, <code>DBA_XML_TABLES</code>, and <code>USER_XML_TABLES</code>, views <code>ALL_OBJECT_TABLES</code>, <code>DBA_OBJECT_TABLES</code>, and <code>USER_OBJECT_TABLES</code> provide tablespace and other storage information for <code>XMLType</code> data stored object-relationally.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN" href="../../server.112/e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a></p>
</li>
<li>
<p><a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHCIAIC"></a>
<div id="ADXDB3959" class="sect2">
<h3 class="sect2">Overview of Oracle XML&nbsp;DB Repository</h3>
<p>Oracle XML&nbsp;DB Repository is a component of Oracle Database that lets you handle XML data using a file/folder/URL metaphor. The repository contains <span class="glossaryterm"><a id="sthref84"></a>resources</span>, which can be either <span class="glossaryterm">folders</span> (directories, containers) or files.</p>
<p>A resource has these properties:</p>
<ul>
<li>
<p>It is identified by a <span class="italic">path</span> and <span class="italic">name</span>.</p>
</li>
<li>
<p>It has <span class="italic">content</span> (data), which can be XML data but need not be.</p>
</li>
<li>
<p>It has a set of <span class="glossaryterm"><a id="sthref85"></a><a id="sthref86"></a>system-defined metadata</span> (properties), such as <code>Owner</code> and <code>CreationDate</code>, in addition to its content. Oracle XML&nbsp;DB uses this information to manage the resource.</p>
</li>
<li>
<p>It might also have <span class="glossaryterm"><a id="sthref87"></a><a id="sthref88"></a>user-defined metadata</span>. Like system-defined metadata, this is information that is not part of the content, but is associated with it.</p>
</li>
<li>
<p>It has an associated <span class="glossaryterm">access control list</span> that determines who can access the resource, and for what operations.</p>
</li>
</ul>
<p>Although Oracle XML&nbsp;DB Repository treats XML content specially, you can use the repository to store other kinds of data besides XML. You can use the repository to access any data that is stored in Oracle Database.</p>
<p>You can access data in the repository in the following ways (see <a href="#i1048278">Figure 1-1</a>):</p>
<ul>
<li>
<p>SQL &ndash; Using views <code>RESOURCE_VIEW</code> and <code>PATH_VIEW</code></p>
</li>
<li>
<p>PL/SQL &ndash; Using package <code>DBML_XDB</code></p>
</li>
<li>
<p>Java &ndash; Using the Oracle XML&nbsp;DB resource API for Java</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Part V. <a href="partpg5.htm#g997359">"Oracle XML&nbsp;DB Repository"</a></p>
</li>
<li>
<p><a href="xdb22pro.htm#g1031760">Chapter 28, "Accessing the Repository using Protocols"</a> for information about accessing XML data in <code>XMLType</code> tables and columns using external protocols</p>
</li>
<li>
<p><a href="xdb_repos_meta.htm#CIAIGHHG">Chapter 29, "User-Defined Repository Metadata"</a></p>
</li>
</ul>
</div>
<div id="ADXDB3961" class="sect3"><a id="sthref89"></a>
<h4 class="sect3">XML Services</h4>
<p>Besides providing APIs for accessing and manipulating repository data, Oracle XML&nbsp;DB provides APIs for the following repository services:</p>
<ul>
<li>
<p><a id="sthref90"></a>Versioning &ndash; Oracle XML&nbsp;DB uses PL/SQL package <code>DBMS_XDB_VERSION</code> to version resources in Oracle XML&nbsp;DB Repository. Updating a resource creates a new version. Previous versions are retained. Versioning support is based on the IETF WebDAV standard.</p>
</li>
<li>
<p><a id="sthref91"></a>ACL Security &ndash; Repository security is based on access control lists (ACLs). Each resource has an associated ACL that lists the privileges required to use it in various ways. When a resource is accessed or manipulated, its ACL determines whether the requested operation is allowed. An ACL is an XML document that contains a set of access control entries (ACEs). Each ACE grants or revokes a set of permissions to a particular user or group (database role). This access control mechanism is based on the WebDAV specification.</p>
</li>
<li>
<p>Foldering &ndash; Oracle XML&nbsp;DB Repository manages a persistent hierarchy of folder (that is, directory) resources that contain other resources (files or folders). Oracle XML&nbsp;DB modules such as protocol servers, the XML schema manager, and the Oracle XML&nbsp;DB <code>RESOURCE_VIEW</code> API use foldering to map repository path names to the resources they target.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ADXDB3958" class="sect3"><a id="sthref92"></a>
<h4 class="sect3">Views RESOURCE_VIEW and PATH_VIEW</h4>
<p>Views <code>RESOURCE_VIEW</code> and <code>PATH_VIEW</code> provide SQL access to data in Oracle XML&nbsp;DB Repository through protocols such as FTP and WebDAV. View <code>PATH_VIEW</code> has one row for each unique path in the repository. View <code>RESOURCE_VIEW</code> has one row for each resource in the repository.</p>
<p>The Oracle XML&nbsp;DB resource API for PL/SQL, <code>DBMS_XDB</code>, provides query and DML functions. It is based on <code>RESOURCE_VIEW</code> and <code>PATH_VIEW</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a></p>
</li>
<li>
<p><a class="olink REFRN29079" href="../../server.112/e40402/statviews_5151.htm#REFRN29079"><span class="italic">Oracle Database Reference</span></a> for more information about view <code>PATH_VIEW</code></p>
</li>
<li>
<p><a class="olink REFRN29080" href="../../server.112/e40402/statviews_5169.htm#REFRN29080"><span class="italic">Oracle Database Reference</span></a> for more information about view <code>RESOURCE_VIEW</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<div id="ADXDB3962" class="sect3"><a id="sthref93"></a>
<h4 class="sect3">Oracle XML&nbsp;DB Repository Architecture</h4>
<p><a href="#i1047644">Figure 1-3</a> illustrates the architecture of Oracle XML&nbsp;DB Repository.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a></p>
</li>
<li>
<p><a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a></p>
</li>
</ul>
</div>
<div id="ADXDB3963" class="figure">
<p class="titleinfigure"><a id="i1047644"></a>Figure 1-3 Oracle XML&nbsp;DB Repository Architecture</p>
<img width="663" height="494" src="img/adxdb030.gif" alt="Description of Figure 1-3 follows" /><br />
<a id="sthref94" href="img_text/adxdb030.htm">Description of "Figure 1-3 Oracle XML&nbsp;DB Repository Architecture"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<div id="ADXDB3964" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref95"></a>
<h4 class="sect3">Files and Folders</h4>
<p>Relational databases are traditionally poor at managing hierarchical structures and traversing a path or a URL. Oracle XML&nbsp;DB Repository provides you with a hierarchical organization of XML content in the database. You can query and manage it as if it were organized using files and folders.</p>
<p>The relational table-row-column metaphor is an effective model for managing highly structured data. It can be less effective for managing semi-structured and unstructured data, such as document-oriented XML data.</p>
<p>For example, a book is not easily represented as a set of rows in a table. It might be more natural to represent a book as a hierarchy, book&thinsp;&mdash;&thinsp;chapter&thinsp;&mdash;&thinsp;section&thinsp;&mdash;&thinsp;paragraph, and to represent the hierarchy as a set of folders and subfolders.</p>
<ul>
<li>
<p>A hierarchical repository index speeds up folder and path traversals. Oracle XML&nbsp;DB includes a patented hierarchical index that speeds up folder and path traversals in Oracle XML&nbsp;DB Repository. The hierarchical repository index is transparent to end users, and lets Oracle XML&nbsp;DB perform folder and path traversals at speeds comparable to or faster than conventional file systems.</p>
</li>
<li>
<p>You can access XML documents in Oracle XML&nbsp;DB Repository using standard connect-access protocols such as FTP, HTTP(S), and WebDAV, in addition to languages SQL, PL/SQL, Java, and C. The repository provides content authors and editors direct access to XML content stored in Oracle Database.</p>
</li>
<li>
<p>A resource in this context is a file or folder, identified by a URL. WebDAV is an IETF standard that defines a set of extensions to the HTTP protocol. It lets an HTTP server act as a file server for a DAV-enabled client. For example, a WebDAV-enabled editor can interact with an HTTP/WebDAV server as if it were a file system. The WebDAV standard uses the term <span class="glossaryterm">resource</span> to describe a file or a folder. Each resource managed by a WebDAV server is identified by a URL. Oracle XML&nbsp;DB adds native support to Oracle Database for these protocols. The protocols were designed for document-centric operations. By providing support for these protocols, Oracle XML&nbsp;DB lets Microsoft Windows Explorer, Microsoft Office, and products from vendors such as Altova and Adobe work directly with XML content stored in Oracle XML&nbsp;DB Repository. <a href="#BABGBHAF">Figure 1-4</a> shows the root-level directory of the repository as seen from a Web browser.</p>
</li>
</ul>
<div id="ADXDB3965" class="figure">
<p class="titleinfigure"><a id="BABGBHAF"></a>Figure 1-4 Web Browser View of Oracle XML&nbsp;DB Repository</p>
<img width="374" height="248" src="img/ftp_webfldr.gif" alt="Description of Figure 1-4 follows" /><br />
<a id="sthref96" href="img_text/ftp_webfldr.htm">Description of "Figure 1-4 Web Browser View of Oracle XML&nbsp;DB Repository"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a></div>
<p>Hence, WebDAV clients such as Microsoft Windows Explorer can connect directly to Oracle XML&nbsp;DB Repository. No additional Oracle Database or Microsoft-specific software or other complex middleware is needed. End users can work directly with Oracle XML&nbsp;DB Repository using familiar tools and interfaces.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB3966" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref97"></a>
<h4 class="sect3">Oracle XML&nbsp;DB Protocol Architecture</h4>
<p>One key feature of the Oracle XML&nbsp;DB architecture is that protocols HTTP(S), WebDAV, and FTP are supported, including in a shared server configuration. When the Listener receives an HTTP(S) or FTP request, it hands it off to an Oracle Database shared server process which services it and sends the appropriate response back to the client.You can use the TNS Listener command, <code>lsnrctl status</code>, to verify that HTTP(S) and FTP support has been enabled. <a href="#CHDEFIGB">Example 1-1</a> illustrates this.</p>
<div id="ADXDB3967" class="example">
<p class="titleinexample"><a id="CHDEFIGB"></a>Example 1-1 Listener Status with FTP and HTTP(S) Protocol Support Enabled</p>
<pre>
LSNRCTL for 32-bit Windows: Version 11.1.0.5.0 - Production on 20-AUG-2007 16:02:34
 
Copyright (c) 1991, 2007, Oracle.  All rights reserved.
 
Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521))) STATUS of the LISTENER
--------------------------------------------------------------------------------------------
Alias                          LISTENER
Version                        TNSLSNR for 32-bit Windows: Version 11.1.0.5.0 - Beta
Start Date                     20-JUN-2007 15:35:40
Uptime                         0 days 16 hr. 47 min. 42 sec
Trace Level                    off
Security                       ON: Local OS Authentication
SNMP                           OFF
Listener Parameter File        C:\oracle\product\11.1.0\db_1\network\admin\listener.ora
Listener Log File              c:\oracle\diag\tnslsnr\quine-pc\listener\alert\log.xml
 
Listening Endpoints Summary... 
(DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(PIPENAME=\\.\pipe\EXTPROC1521ipc)))
(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=quine-pc.example.com)(PORT=1521)))
(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=quine-pc.example.com)
             <span class="bold">(PORT=21))(Presentation=FTP)(Session=RAW))</span> (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=quine-pc.example.com)
             <span class="bold">(PORT=443))(Presentation=HTTP)(Session=RAW))</span>
Services Summary...
Service "orcl.example.com" has 1 instance(s).
  Instance "orcl", status READY, has 1 handler(s) for this service...
Service "orclXDB.example.com" has 1 instance(s).
  Instance "orcl", status READY, has 1 handler(s) for this service...
Service "orcl_XPT.example.com" has 1 instance(s).
  Instance "orcl", status READY, has 1 handler(s) for this service...
The command completed successfully
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb22pro.htm#g1031760">Chapter 28, "Accessing the Repository using Protocols"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDB3968" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref98"></a>
<h3 class="sect2">Programmatic Access to Oracle XML&nbsp;DB (Java, PL/SQL, and C)</h3>
<p>All Oracle XML&nbsp;DB functionality is accessible from C, PL/SQL, and Java. You can build Web-based applications in various ways, including these:</p>
<ul>
<li>
<p>Using servlets and Java Server Pages (JSP). A typical API accesses data using Java Database Connectivity (JDBC).</p>
</li>
<li>
<p>Using Extensible Stylesheet Language (XSL) plus XML Server Pages (XSP). A typical API accesses data in the form of XML documents that are processed using a Document Object Model (DOM) API implementation.</p>
</li>
</ul>
<p>Oracle XML&nbsp;DB supports such styles of application development. It provides Java, PL/SQL, and C implementations of the DOM API.Applications that use JDBC, such as those based on servlets, need prior knowledge of the data structure they are processing. Oracle JDBC drivers allow you to access and update <code>XMLType</code> tables and columns, and call PL/SQL procedures that access Oracle XML&nbsp;DB Repository.Applications that use DOM, such as those based on XSLT transformations, typically require less knowledge of the data structure. DOM-based applications use string names to identify pieces of content, and must dynamically walk through the DOM tree to find the required information. For this, Oracle XML&nbsp;DB supports the use of the DOM API to access and update <code>XMLType</code> columns and tables. Programming to a DOM API is more flexible than programming through JDBC, but it may require more resources at run time.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1047269"></a>
<div id="ADXDB3969" class="sect1">
<h2 class="sect1"><a id="sthref99"></a>Oracle XML&nbsp;DB Features</h2>
<p>Any database used for managing XML must be able to persist XML documents. Oracle XML&nbsp;DB is capable of much more than this. It provides standard database features such as transaction control, data integrity, replication, reliability, availability, security, and scalability, while also allowing for efficient indexing, querying, updating, and searching of XML documents in an XML-centric manner.</p>
<p>The hierarchical nature of XML presents the traditional relational database with some challenges:</p>
<ul>
<li>
<p>In a relational database, the <span class="italic">table-row</span> metaphor locates content. Primary-Key Foreign-Key relationships help define the relationships between content. Content is accessed and updated using the table-row-column metaphor.</p>
</li>
<li>
<p>XML, on the other hand, uses <span class="italic">hierarchical</span> techniques to achieve the same functionality. A URL is used to locate an XML document. URL-based standards such as XLink are used to define relationships between XML documents. W3C Recommendations such as XPath are used to access and update content contained within XML documents. Both URLs and XPath expressions are based on <span class="italic">hierarchical</span> metaphors. A URL uses a path through a <span class="italic">folder hierarchy</span> to identify a document, whereas XPath uses a path through the <span class="italic">node hierarchy</span> of an XML document to access part of an XML document.</p>
</li>
</ul>
<p>Oracle XML&nbsp;DB addresses these challenges by introducing SQL functions and methods that allow the use of XML-centric metaphors, such as XQuery and XPath expressions for querying and updating XML Documents.</p>
<p>These are the major features of Oracle XML&nbsp;DB:</p>
<ul>
<li>
<p><a href="#BABCCCJI">XMLType Data Type</a></p>
</li>
<li>
<p><a href="#BABGEHBJ">XML Schema Support</a></p>
</li>
<li>
<p><a href="#BABECDCF">XMLType Storage Models</a></p>
</li>
<li>
<p><a href="#BABBFIGE">XML/SQL Duality</a></p>
</li>
<li>
<p><a href="#BABBADBF">SQL/XML Standard Functions</a></p>
</li>
<li>
<p><a href="#BABGCECF">Automatic Rewriting of XQuery and XPath Expressions</a></p>
</li>
<li>
<p><a href="#CIHCIAIC">Overview of Oracle XML&nbsp;DB Repository</a>. This was described.</p>
</li>
</ul>
<a id="BABCCCJI"></a>
<div id="ADXDB3970" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XMLType Data Type</h3>
<p><code><span class="codeinlinebold"><a id="sthref100"></a>XMLType</span></code> is an abstract native SQL data type for XML data. It provides methods that allow operations such as XML Schema validation and XSL transformation of XML content. You can use <code>XMLType</code> as you would any other SQL data type. For example, you can use <code>XMLType</code> when you do any of the following:</p>
<ul>
<li>
<p>Create a column in a relational table</p>
</li>
<li>
<p>Declare a PL/SQL variable</p>
</li>
<li>
<p>Define or call a PL/SQL procedure or function</p>
</li>
</ul>
<p><code>XMLType</code> is an Oracle Database <span class="italic">object</span> type, so you can also create a table of <code>XMLType</code> object instances. By default, an <code>XMLType</code> table or column can contain any well-formed XML document.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ" href="../e11822/toc.htm"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for information about Oracle Database object types and object-relational storage</div>
<div id="ADXDB5799" class="sect3"><a id="sthref101"></a>
<h4 class="sect3">XMLType Tables and Columns Can Conform to an XML Schema</h4>
<p><code>XMLType</code> tables or columns can be constrained to conform to an XML schema. This has several advantages:</p>
<ul>
<li>
<p>The database ensures that only XML documents that validate against the XML schema are stored in the column or table. Invalid documents are excluded.</p>
</li>
<li>
<p>Because XML schema-based data conforms to a predefined XML structure, Oracle XML&nbsp;DB can use the information contained in the XML schema to optimize querying and updating of the data.</p>
</li>
<li>
<p>If you store XML schema-based data using structured storage, Oracle XML&nbsp;DB automatically decomposes it and stores it as a set of object-relational objects. The object-relational model used to store the document is derived from the XML schema.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ADXDB5800" class="sect3"><a id="sthref102"></a>
<h4 class="sect3">XMLType API</h4>
<p>Data type <code>XMLType</code> provides the following:</p>
<ul>
<li>
<p><span class="italic">Constructors</span>, which you can use to create an <code>XMLType</code> instance from a <code>VARCHAR</code>, <code>CLOB</code>, <code>BLOB</code>, or <code>BFILE</code> value.</p>
</li>
<li>
<p>XML-specific <span class="italic">methods</span> that operate on <code>XMLType</code> instances. These include the following:</p>
<ul>
<li>
<p><code>extract()</code>&ndash; Extract a subset of nodes contained in the <code>XMLType</code> instance.</p>
</li>
<li>
<p><code>existsNode()</code> &ndash; Check whether or not a particular node exists in the <code>XMLType</code> instance.</p>
</li>
<li>
<p><code>schemaValidate()</code> &ndash; Validate the content of the <code>XMLType</code> instance against an XML schema.</p>
</li>
<li>
<p><code>transform()</code> &ndash; Perform an XSL transformation on the content of an <code>XMLType</code> instance.</p>
</li>
</ul>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a> and <a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABGEHBJ"></a>
<div id="ADXDB3973" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Schema Support</h3>
<p>Support for the Worldwide Web Consortium (W3C) XML Schema Recommendation is a key feature in Oracle XML&nbsp;DB. XML Schema specifies the structure, content, and certain semantics of XML documents. It is described in detail at <code><a href="http://www.w3.org/TR/xmlschema-0/">http://www.w3.org/TR/xmlschema-0/</a></code>.</p>
<p>The W3C Schema Working Group publishes a particular XML schema, often referred to as the <a id="sthref103"></a><span class="glossaryterm">schema for schemas</span>, that provides the definition, or vocabulary, of the XML Schema language. An <a id="sthref104"></a><span class="glossaryterm">XML schema definition</span> (<a id="sthref105"></a><span class="glossaryterm">XSD</span><a id="sthref106" href="#sthref106" onclick='footdisplay(1,"\u003ccode\u003exsd\u003c/code\u003e is the prefix used in the schema of schemas for the XML Schema namespace, hence it is also the namespace prefix used for the XML Schema data types, such as \u003ccode\u003exsd:string\u003c/code\u003e. \u003ccode\u003exsd\u003c/code\u003e is also used often as the file extension of XML schema files.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>), also called an <a id="sthref107"></a><span class="glossaryterm">XML schema</span>, is an XML document that is compliant with the vocabulary defined by the schema for schemas.</p>
<p>An XML schema uses vocabulary defined by the schema for schemas to create a collection of XML Schema type definitions and element declarations that comprise a vocabulary for describing the contents and structure of a new class of XML documents, the <span class="glossaryterm"><a id="sthref108"></a><a id="sthref109"></a>XML instance documents</span> that conform to that XML schema.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
This manual uses the term "XML schema" (lower-case "s") to reference any XML schema that conforms to the W3C XML Schema (upper-case "S") Recommendation. Since an XML schema is used to define a class of XML documents, the term "instance document" is often used to describe an XML document that conforms to a particular XML schema.</div>
<p>The XML Schema language provides strong typing of elements and attributes. It defines numerous scalar data types. This base set of data types can be extended to define more complex types, using object-oriented techniques such as inheritance and extension. The XML Schema vocabulary also includes constructs that you can use to define complex types, substitution groups, repeating sets, nesting, ordering, and so on. Oracle XML&nbsp;DB supports all of the constructs defined by the XML Schema Recommendation, except for <code>redefines</code>.</p>
<p>XML schemas are commonly used as a mechanism for checking (validating) whether XML instance documents conform with their specifications. Oracle XML&nbsp;DB includes <code>XMLType</code> methods and SQL functions that you can use to validate XML documents against an XML schema.</p>
<p>In Oracle XML&nbsp;DB, you can use a standard data model for all of your data, regardless of how structured it is. You can use XML Schema to automatically create database tables for storing your XML data. XML schema-based data maintains DOM fidelity and allows for significant database optimizations.</p>
<p>XML schema-based data can be stored using any Oracle XML&nbsp;DB <code>XMLType</code> storage model: binary XML storage, structured (object-relational) storage, or unstructured (<code>CLOB</code>) storage. Non-schema-based XML data can be stored using binary XML storage or unstructured storage.</p>
<p>You can also wrap existing relational and object-relational data as <code>XMLType</code> views, which can optionally be XML schema-based. You can map from incoming XML documents to <code>XMLType</code> storage, specifying the mapping using a registered XML schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a> for more information about using XML schemas with Oracle XML&nbsp;DB</div>
</div>
<!-- class="sect2" -->
<a id="BABECDCF"></a>
<div id="ADXDB0120" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XMLType <a id="sthref110"></a><a id="sthref111"></a><a id="sthref112"></a><a id="sthref113"></a>Storage Models</h3>
<p><code>XMLType</code> is an <span class="italic">abstract</span> data type that provides different <span class="italic">storage models</span> to best fit your data and your use of it. As an abstract data type, your applications and database queries gain in flexibility: the same interface is available for all <code>XMLType</code> operations. Because different storage (persistence) models are available, you can tailor performance and functionality to best fit the kind of XML data you have and the pattern of its use. One key decision to make when using Oracle XML&nbsp;DB for persisting XML data as <code>XMLType</code> is thus which storage model to use for which XML data.</p>
<p>You can change <code>XMLType</code> storage from one model to another, using database import/export (see <a href="xdb26imp.htm#g1027830">Chapter 36, "Exporting and Importing XMLType Tables"</a>). Your application code need not change. You can change XML storage options when tuning your application.</p>
<p><code>XMLType</code> tables and columns can be stored in these ways:</p>
<ul>
<li>
<p><span class="glossaryterm"><a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a>Structured</span> storage &ndash; <code>XMLType</code> data is stored as a set of objects. This is also referred to as <span class="glossaryterm">object-relational</span> storage and <span class="glossaryterm">object-based persistence</span>.</p>
</li>
<li>
<p><span class="glossaryterm"><a id="sthref117"></a><a id="sthref118"></a><a id="sthref119"></a>Unstructured</span> storage &ndash; <code>XMLType</code> data is stored in Character Large Object (<code>CLOB</code>) instances. This is also referred to as <span class="glossaryterm">CLOB</span> storage and <span class="glossaryterm">text-based persistence</span>.</p>
</li>
<li>
<p><a id="sthref120"></a><a id="sthref121"></a><span class="glossaryterm">Binary XML</span> storage &ndash; <code>XMLType</code> data is stored in a post-parse, binary format specifically designed for XML data. Binary XML is compact, post-parse, XML schema-aware XML. This is also referred to as <span class="glossaryterm">post-parse persistence</span>.</p>
</li>
</ul>
<p>Oracle Database provides two <span class="italic">LOB storage options</span>, SecureFile and BasicFile. Either of these can be used with unstructured (CLOB-based) <code>XMLType</code> storage. BasicFile LOB storage is the default for unstructured storage.</p>
<p>For binary XML data, SecureFile is the default storage option.<a id="sthref122" href="#sthref122" onclick='footdisplay(2,"Prior to Oracle Database 11\u003cspan class=\"italic\"\u003eg\u003c/span\u003e Release 2 (11.2.0.2) the BasicFile option was the default for binary XML storage. Use of the BasicFile option for binary XML data is deprecated.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a> However, if either of the following is true then it is not possible to use SecureFile LOB storage. In that case, BasicFile is the default option for binary XML data:</p>
<ul>
<li>
<p>The tablespace for the <code>XMLType</code> table does not use automatic segment space management.</p>
</li>
<li>
<p>A setting in file <code>init.ora</code> prevents SecureFile LOB storage. For example, see parameter <code>DB_SECUREFILE</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a>, section "CREATE TABLE", clause "LOB_storage_clause"</p>
</li>
<li>
<p><a class="olink ADLOB4444" href="../../appdev.112/e18294/adlob_smart.htm#ADLOB4444"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a> for information about LOB storage options SecureFile and BasicFile</p>
</li>
<li>
<p><a class="olink ADMIN10065" href="../../server.112/e25494/tspaces.htm#ADMIN10065"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about automatic segment space management</p>
</li>
<li>
<p><a class="olink REFRN10290" href="../../server.112/e40402/initparams068.htm#REFRN10290"><span class="italic">Oracle Database Reference</span></a> for information about parameter <code>DB_SECUREFILE</code></p>
</li>
</ul>
</div>
<p>You can mix storage models, using one model for one part of an XML document and a different model for another part. The mixture of structured and unstructured storage is sometimes called <span class="glossaryterm"><a id="sthref123"></a>hybrid</span> storage. What is true about structured storage is true about the structured part of hybrid storage. What is true about unstructured storage is true about the unstructured part of hybrid storage.</p>
<p><code>XMLType</code> has multiple storage models, and some models can be configured in more than one way. Each model has its advantages, depending on the context. Each model has one or more types of index that are appropriate for it.</p>
<p>The first thing to consider, when choosing an <code>XMLType</code> storage model, is the nature of your XML data and the ways you use it. A spectrum exists, with data-centric use of highly structured data at one end, and document-centric use of highly unstructured data at the other. The first question to ask yourself is this: <span class="italic">Is your use case primarily data-centric or document-centric?</span></p>
<ul>
<li>
<p><span class="bold"><a id="sthref124"></a>Data-centric</span> &ndash; Your data is, in general, highly structured, with relatively static and predictable structure, and your applications take advantage of this structure. Your data conforms to an XML schema.</p>
</li>
<li>
<p><span class="bold"><a id="sthref125"></a>Document-centric</span> &ndash; Two cases:</p>
<ul>
<li>
<p>Your data is generally without structure or of variable structure. Document structure can vary over time (evolution). Content is <a id="sthref126"></a><span class="bold">mixed</span> (<a id="sthref127"></a><span class="bold">semi-structured</span>): many elements contain both text nodes and child elements. Many XML elements can be absent or can appear in different orders. Documents might or might not conform to an XML schema.</p>
</li>
<li>
<p>Your data relatively structured, but your applications do not take advantage of that structure: they treat the data as if it were without structure.</p>
</li>
</ul>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Please be aware of the context, so as not to confuse discussion of storage options with discussion of the structure of the XML content to be stored. In this book, "structured" and "unstructured" generally refer to <code>XMLType</code> storage options. They refer less often to the nature of your data. "Hybrid" refers to object-relational storage with some embedded <code>CLOB</code> storage. "Semi-structured" refers to XML content, regardless of storage. Unstructured storage is <code>CLOB</code>-based storage, and structured storage is object-relational storage.</div>
<p>Once you've located the data-centric or document-centric half of the spectrum that is appropriate for your use case and data, consider whether your case is at an end of the spectrum or closer to the middle. That is, just how data-centric or document-centric is your case?</p>
<ul>
<li>
<p>Employ <span class="italic">object-relational</span> (structured) storage for purely data-centric uses. A typical example of this use case would be an employee record (fields employee number, name, address, and so on). Use <a id="sthref128"></a>B-tree indexing with object-relational storage.</p>
</li>
<li>
<p>Employ <span class="italic">hybrid</span> storage if your data is composed primarily of invariable XML structures, but it does contain some variable data; that is, it contains a predictably few mixed-content elements. A typical example of this use case would be an employee record that includes a free-form resume. Index the structured and unstructured parts of your data separately, using appropriate indexes for each part.</p>
</li>
<li>
<p>Employ <span class="italic">binary XML</span> storage or <code>CLOB</code><span class="italic">-based</span> (unstructured) storage for all document-centric use cases. <code>XMLIndex</code> is the indexing method of choice here.</p>
<ul>
<li>
<p>For general indexing of document-centric XML data, use <code>XMLIndex</code> indexes with unstructured components. A typical example of this use case would be an XML Web document or a book chapter.</p>
</li>
<li>
<p>If your data contains some predictable, fixed structures that you query frequently, then you can use <code>XMLIndex</code> indexes with structured components on those parts. A typical example of this use case would be a free-form specification, with author, date, and title fields.</p>
</li>
</ul>
<p>A single <code>XMLIndex</code> index can have both structured and unstructured components, to handle islands of structure within generally unstructured content. A use case where you might use both components would be to support queries that extract an XML fragment from a document whenever some structured data is present. The unstructured index component is used for the fragment extraction. The structured component is used for the SQL <code>WHERE</code> clause that checks for the structured data.</p>
</li>
</ul>
<p>In all cases, you can additionally use Oracle Text indexing for full-text queries. This is especially useful for document-centric cases.</p>
<p>These considerations are summarized in <a href="#CHDGBEFE">Figure 1-5</a>. The figure shows the spectrum of use cases, from most data-centric, at the left, to most document-centric, at the right. The table in the figure classifies use cases and shows the corresponding storage models and indexing methods.</p>
<div id="ADXDB3979" class="figure">
<p class="titleinfigure"><a id="CHDGBEFE"></a>Figure 1-5 XML Use Cases and XMLType Storage Models</p>
<img width="662" height="290" src="img/adxdb057.gif" alt="Description of Figure 1-5 follows" /><br />
<a id="sthref129" href="img_text/adxdb057.htm">Description of "Figure 1-5 XML Use Cases and XMLType Storage Models"</a><br />
<br /></div>
<!-- class="figure" -->
<p>See <a href="xdb_indexing.htm#CHDEADIH">Chapter 6, "Indexing XMLType Data"</a> for more information about indexing XML data. In particular, note that some types of indexing are complementary or orthogonal, so you can use them together.</p>
<p>The following list and <a href="#BABCABCG">Table 1-3</a> outline some of the advantages of each storage model.</p>
<ul>
<li>
<p><span class="italic">Structured</span> (object-relational) storage advantages over the other storage models include near-relational query and update performance, optimized memory management, reduced storage requirements, B-tree indexing, and in-place updates. These advantages are at a cost of increased processing overhead during ingestion and full retrieval of XML data, and reduced flexibility in the structure of the XML that can be managed by a given <code>XMLType</code> table or column. Structural flexibility is reduced because data and metadata (such as column names) are separated in object-relational storage. Instance structures cannot vary easily. Structured storage is particularly appropriate for highly structured data whose structure does not vary, if this maps to a manageable number of database tables and joins.</p>
</li>
<li>
<p><span class="italic">Unstructured</span> (<code>CLOB</code>) storage enables higher throughput than structured storage when inserting and retrieving entire XML documents. No data conversion is needed, so the same format can be used outside the database. Unstructured storage also provides greater flexibility than structured storage in the structure of the XML that can be stored. Unstructured storage is particularly appropriate for document-centric use cases. These advantages can come at the expense of certain aspects of intelligent processing: in the absence of indexing, there is little that the database can do to optimize queries or updates on XML data that is stored in a <code>CLOB</code> instance. In particular, the cost of XML parsing (often implicit) can significantly impact query performance. Indexing with <code>XMLIndex</code> can improve the performance of queries against unstructured storage.</p>
</li>
<li>
<p><span class="italic">Binary XML</span> storage provides more efficient database storage, updating, indexing, and fragment extraction than unstructured storage. It can provide better query performance than unstructured storage&thinsp;&mdash;&thinsp;it does not suffer from the XML parsing bottleneck (it is a post-parse persistence model). Like structured storage, binary XML storage is aware of XML Schema data types and can take advantage of native database data types. Like structured storage, binary XML storage allows for piecewise updates. Because binary XML data can also be used outside the database, it can serve as an efficient XML exchange medium, and you can off load work from the database to increase overall performance in many cases. Like unstructured storage, binary XML data is kept in document order. Like structured storage, data and metadata can, using binary storage, be separated at the database level, for efficiency. Like unstructured storage, however, binary XML storage allows for intermixed data and metadata, which lets instance structures vary. Binary XML storage allows for very complex and variable data, which in the structured-storage model could necessitate using many database tables. Unlike the other <code>XMLType</code> storage models, you can use binary storage for XML schema-based data even if the XML schema is not known beforehand, and you can store multiple XML schemas in the same table and query across common elements.</p>
</li>
</ul>
<div id="ADXDB3980" class="tblformalwidemax">
<p class="titleintable"><a id="sthref130"></a><a id="BABCABCG"></a>Table 1-3 XMLType Storage Models: Relative Advantages</p>
<table class="cellalignment1032" title="XMLType Storage Models: Relative Advantages" summary="This table has 3 columns and 8 rows. It summarizes structured and unstructured storage options and their benefits. The first row summarizes throughoutput features, the second row, flexibility, and so on." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t19">Quality</th>
<th class="cellalignment1027" id="r1c2-t19">Structured (Object-Relational) Storage</th>
<th class="cellalignment1027" id="r1c3-t19">Binary XML Storage</th>
<th class="cellalignment1027" id="r1c4-t19">Unstructured (CLOB) Storage</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t19" headers="r1c1-t19">
<p>Throughput</p>
</td>
<td class="cellalignment1028" headers="r2c1-t19 r1c2-t19">
<p><span class="bold">&ndash;</span> XML decomposition can result in reduced throughput when ingesting or retrieving the entire content of an XML document.</p>
</td>
<td class="cellalignment1028" headers="r2c1-t19 r1c3-t19">
<p><span class="bold">+</span> High throughput. Fast DOM loading. There is a slight overhead from the binary XML encoder/decoder.</p>
</td>
<td class="cellalignment1028" headers="r2c1-t19 r1c4-t19">
<p><span class="bold">++</span> High throughput when ingesting and retrieving the entire content of an XML document.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t19" headers="r1c1-t19">
<p>Queries</p>
</td>
<td class="cellalignment1028" headers="r3c1-t19 r1c2-t19">
<p><span class="bold">++</span> Extremely fast: relational query performance.</p>
<p>You can create B-tree indexes on the underlying object-relational columns.</p>
</td>
<td class="cellalignment1028" headers="r3c1-t19 r1c3-t19">
<p><span class="bold">+</span> Streaming XPath evaluation avoids DOM construction and allows evaluation of multiple XPath expressions in a single pass. Navigational XPath evaluation is significantly faster than with unstructured storage.</p>
<p><code>XMLIndex</code> indexing can improve performance of XPath-based queries.</p>
</td>
<td class="cellalignment1028" headers="r3c1-t19 r1c4-t19">
<p><span class="bold">&ndash;</span> XPath operations are evaluated by constructing a DOM from the <code>CLOB</code> data and using functional evaluation. Expensive when performing operations on large documents or large collections of documents.</p>
<p><code>XMLIndex</code> indexing can improve performance of XPath-based queries.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t19" headers="r1c1-t19">
<p>Update operations (DML)</p>
</td>
<td class="cellalignment1028" headers="r4c1-t19 r1c2-t19">
<p><span class="bold">++</span> Extremely fast: relational columns are updated in place.</p>
</td>
<td class="cellalignment1028" headers="r4c1-t19 r1c3-t19">
<p><span class="bold">+</span> In-place, piecewise update for SecureFile LOB storage.</p>
</td>
<td class="cellalignment1028" headers="r4c1-t19 r1c4-t19">
<p><span class="bold">&ndash;</span> When any part of the document is updated, the entire document must be written back to disk.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t19" headers="r1c1-t19">
<p>Space efficiency (disk)</p>
</td>
<td class="cellalignment1028" headers="r5c1-t19 r1c2-t19">
<p><span class="bold">+</span><span class="bold">+</span> Extremely space-efficient.</p>
</td>
<td class="cellalignment1028" headers="r5c1-t19 r1c3-t19">
<p><span class="bold">+</span> Space-efficient.</p>
</td>
<td class="cellalignment1028" headers="r5c1-t19 r1c4-t19">
<p><span class="bold">&ndash;</span> Consumes the most disk space, due to insignificant whitespace and repeated tags.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t19" headers="r1c1-t19">
<p>Data flexibility</p>
</td>
<td class="cellalignment1028" headers="r6c1-t19 r1c2-t19">
<p><span class="bold">&ndash;</span> Limited flexibility. Only documents that conform to the XML schema can be stored in the <code>XMLType</code> table or column.</p>
</td>
<td class="cellalignment1028" headers="r6c1-t19 r1c3-t19">
<p><span class="bold">+</span> Flexibility in the structure of the XML documents that can be stored in an <code>XMLType</code> column or table.</p>
</td>
<td class="cellalignment1028" headers="r6c1-t19 r1c4-t19">
<p><span class="bold">+</span> Flexibility in the structure of the XML documents that can be stored in an <code>XMLType</code> column or table.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t19" headers="r1c1-t19">
<p>XML schema flexibility</p>
</td>
<td class="cellalignment1028" headers="r7c1-t19 r1c2-t19">
<p><span class="bold">&ndash;</span> An <code>XMLType</code> table can only store documents that conform to the same XML schema.</p>
<p>In-place XML schema evolution is available, with some restrictions.</p>
</td>
<td class="cellalignment1028" headers="r7c1-t19 r1c3-t19">
<p><span class="bold">++</span> Can store XML schema-based or non-schema-based documents. An <code>XMLType</code> table can store documents that conform to any registered XML schemas.</p>
</td>
<td class="cellalignment1028" headers="r7c1-t19 r1c4-t19">
<p><span class="bold">++</span> Can store XML schema-based or non-schema-based documents. Cannot use multiple XML schemas for the same <code>XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t19" headers="r1c1-t19">
<p>XML fidelity</p>
</td>
<td class="cellalignment1028" headers="r8c1-t19 r1c2-t19">
<p>DOM fidelity: A DOM created from an XML document that has been stored in the database is identical to a DOM created from the original document. However, insignificant whitespace may be discarded.</p>
</td>
<td class="cellalignment1028" headers="r8c1-t19 r1c3-t19">
<p>DOM fidelity (see structured storage description).</p>
</td>
<td class="cellalignment1028" headers="r8c1-t19 r1c4-t19">
<p><span class="bold">+</span> Document fidelity: Maintains the original XML data, byte for byte. In particular, all original whitespace is preserved.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t19" headers="r1c1-t19">
<p>Indexing support</p>
</td>
<td class="cellalignment1028" headers="r9c1-t19 r1c2-t19">
<p><span class="bold">+</span> B-tree, bitmap, Oracle Text, <code>XMLIndex</code>, and function-based indexes.</p>
</td>
<td class="cellalignment1028" headers="r9c1-t19 r1c3-t19">
<p><code>XMLIndex</code>, function-based, and Oracle Text indexes.</p>
</td>
<td class="cellalignment1028" headers="r9c1-t19 r1c4-t19">
<p><code>XMLIndex</code>, function-based, and Oracle Text indexes.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t19" headers="r1c1-t19">
<p>Optimized memory management</p>
</td>
<td class="cellalignment1028" headers="r10c1-t19 r1c2-t19">
<p><span class="bold">+</span> XML operations can be optimized to reduce memory requirements.</p>
</td>
<td class="cellalignment1028" headers="r10c1-t19 r1c3-t19">
<p><span class="bold">+</span> XML operations can be optimized to reduce memory requirements.</p>
</td>
<td class="cellalignment1028" headers="r10c1-t19 r1c4-t19">
<p><span class="bold">&ndash;</span> XML operations on the document require creating a DOM from the document.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t19" headers="r1c1-t19">
<p>Validation upon insert</p>
</td>
<td class="cellalignment1028" headers="r11c1-t19 r1c2-t19">
<p>XML data is partially validated when it is inserted.</p>
</td>
<td class="cellalignment1028" headers="r11c1-t19 r1c3-t19">
<p><span class="bold">+</span> XML schema-based data is fully validated when it is inserted.</p>
</td>
<td class="cellalignment1028" headers="r11c1-t19 r1c4-t19">
<p>XML schema-based data is partially validated when it is inserted.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t19" headers="r1c1-t19">
<p>Partitioning</p>
</td>
<td class="cellalignment1028" headers="r12c1-t19 r1c2-t19">
<p><span class="bold">+</span> Available.<a id="sthref131" href="#sthref131" onclick='footdisplay(1,"Partitioning of ordered collection tables (OCTs) reflects the partitioning of the top-level \u003ccode\u003eXMLType\u003c/code\u003e tables. Partition maintenance operations on the top-level tables are cascaded to the associated OCTs. See \u003ca target=\"xdb01int\" href=\"xdb06stt.htm#BHAFCACA\"\u003e\"Partitioning XMLType Tables and Columns Stored Object-Relationally\"\u003c/a\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1028" headers="r12c1-t19 r1c3-t19">
<p>Partition based on virtual columns.</p>
</td>
<td class="cellalignment1028" headers="r12c1-t19 r1c4-t19">
<p><code>XMLType</code> columns can be partitioned if the partitioning key is a relational column.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t19" headers="r1c1-t19">
<p>Streams-based replication</p>
</td>
<td class="cellalignment1028" headers="r13c1-t19 r1c2-t19">
<p><span class="bold">&ndash;</span> Not available.</p>
</td>
<td class="cellalignment1028" headers="r13c1-t19 r1c3-t19">
<p><span class="bold">&ndash;</span> Not available.</p>
</td>
<td class="cellalignment1028" headers="r13c1-t19 r1c4-t19">
<p><span class="bold">++</span> Available.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t19" headers="r1c1-t19">
<p><a id="sthref132"></a>Compression</p>
</td>
<td class="cellalignment1028" headers="r14c1-t19 r1c2-t19">
<p><span class="bold">++</span> XML elements and attributes can be compressed individually.</p>
</td>
<td class="cellalignment1028" headers="r14c1-t19 r1c3-t19">
<p><span class="bold">+</span> XML data that uses SecureFile LOB storage can be compressed.</p>
</td>
<td class="cellalignment1028" headers="r14c1-t19 r1c4-t19">
<p><span class="bold">&ndash;</span> Not available.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwidemax" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>Partitioning of ordered collection tables (OCTs) reflects the partitioning of the top-level <code>XMLType</code> tables. Partition maintenance operations on the top-level tables are cascaded to the associated OCTs. See <a href="xdb06stt.htm#BHAFCACA">"Partitioning XMLType Tables and Columns Stored Object-Relationally"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
When you insert XML schema-based data into binary <code>XMLType</code> columns or tables, the data is fully <span class="italic">validated</span> against the XML schema. Insertion fails if the data is invalid.</div>
<p>When <code>XMLType</code> is stored object-relationally, the <code>XMLType</code> instances contain hidden columns that store information about the XML data that does not fit into the SQL object model.</p>
</div>
<!-- class="sect2" -->
<a id="BABBFIGE"></a>
<div id="ADXDB3981" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML/SQL Duality</h3>
<p>A key objective of Oracle XML&nbsp;DB is to provide XML/SQL duality. XML programmers can leverage the power of the relational model when working with XML content and SQL programmers can leverage the flexibility of XML when working with relational content. This lets you use the most appropriate tools for a particular business problem.</p>
<p>XML/SQL duality means that the same data can be exposed as rows in a table and manipulated using SQL or exposed as nodes in an XML document and manipulated using techniques such as DOM and XSL transformation. Access and processing techniques are independent of the underlying storage format.</p>
<p>These features provide simple solutions to common business problems. For example:</p>
<ul>
<li>
<p>You can use Oracle XML&nbsp;DB SQL functions to generate XML data directly from a SQL query. You can then transform the XML data into other formats, such as HTML, using the database-resident XSLT processor.</p>
</li>
<li>
<p>You can access XML content without converting between different data formats, using SQL queries, on-line analytical processing (OLAP), and business-intelligence/data warehousing operations.</p>
</li>
<li>
<p>You can perform text, spatial data, and multimedia operations on XML content.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABBADBF"></a>
<div id="ADXDB3982" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">SQL/XML Standard Functions</h3>
<p>Oracle XML&nbsp;DB provides the SQL functions that are defined in the SQL/XML standard. SQL/XML functions fall into two groups:</p>
<ul>
<li>
<p>Functions that you can use to <span class="italic">generate</span> XML data from the result of a SQL query. In this book, these are called <span class="glossaryterm"><a id="sthref133"></a>SQL/XML publishing functions</span>. They are also sometimes called <span class="glossaryterm"><a id="sthref134"></a>SQL/XML generation functions</span>.</p>
</li>
<li>
<p>Functions that you can use to <span class="italic">query</span> and <span class="italic">access</span> XML content as part of normal SQL operations. In this book, these are called <span class="glossaryterm"><a id="sthref135"></a>SQL/XML query and access functions</span>.</p>
</li>
</ul>
<p>Using SQL/XML functions you can address XML content in any part of a SQL statement. These functions use XQuery or XPath expressions to traverse the XML structure and identify the nodes on which to operate. The ability to embed XQuery and XPath expressions in SQL statements greatly simplifies XML access.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF55529" href="../../server.112/e41084/ap_standard_sql010.htm#SQLRF55529"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about Oracle support for the SQL/XML standard</p>
</li>
<li>
<p><a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a> and <a href="xdb_xquery.htm#CBAGCBGJ">Chapter 5, "Using XQuery with Oracle XML&nbsp;DB"</a> for detailed descriptions of the SQL/XML standard functions for <span class="italic">querying</span> XML data</p>
</li>
<li>
<p><a href="xdb13gen.htm#i1029583">Generating XML using SQL Functions</a> for information about SQL/XML standard functions for <span class="italic">generating</span> XML data</p>
</li>
<li>
<p><a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a> for additional examples that use SQL/XML standard functions</p>
</li>
<li>
<p><a href="#BABFDDHD">"Standards Supported by Oracle XML&nbsp;DB"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BABGCECF"></a>
<div id="ADXDB3983" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Automatic Rewriting of XQuery and XPath Expressions</h3>
<p>SQL/XML functions and <code>XMLType</code> methods use XQuery or XPath expressions to search collections of XML documents and to access a subset of the nodes contained within an XML document. In many cases, Oracle XML&nbsp;DB is able to automatically rewrite such expressions to code that executes directly against the underlying database objects.</p>
<div id="ADXDB3984" class="sect3"><a id="sthref136"></a>
<h4 class="sect3">How XPath Expressions Are Evaluated by Oracle XML&nbsp;DB</h4>
<p>Oracle XML&nbsp;DB provides the following ways of evaluating XPath expressions that operate on <code>XMLType</code> columns and tables, depending on the XML storage method used:</p>
<ul>
<li>
<p>Structured storage &ndash; Oracle XML&nbsp;DB attempts to translate the XPath expression in a SQL/XML function into an equivalent SQL query. The SQL query references the object-relational data structures that underpin a schema-based <code>XMLType</code>. This process is referred to as <span class="glossaryterm">XPath rewrite</span>. It can occur when performing queries and <code>UPDATE</code> operations. In addition, B-tree indexes on the underlying object-relational tables can be used to evaluate XPath expressions for structured storage.</p>
</li>
<li>
<p>Unstructured storage &ndash; <code>XMLIndex</code> indexes can be used to evaluate XPath expressions for unstructured storage. Use <code>XMLIndex</code> by preference.</p>
<ul>
<li>
<p>If an <code>XMLIndex</code> index can be used, then it is used instead of functional evaluation.</p>
</li>
<li>
<p>In the absence of such an index, Oracle XML&nbsp;DB evaluates the XPath expression using functional evaluation. Functional evaluation builds a DOM tree for each XML document, and then resolves the XPath programmatically using the methods provided by the DOM API. If the operation involves updating the DOM tree, the entire XML document must be written back to disk when the operation is completed.</p>
</li>
</ul>
</li>
<li>
<p>Binary XML storage &ndash; Oracle XML&nbsp;DB can evaluate XPath expressions in different ways: using <code>XMLIndex</code> and using single-pass streaming. Single-pass streaming means evaluating a set of XPath expressions in a single scan of binary XML data. During query compilation, the cost-based optimizer picks the fastest combination of evaluation methods.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABCABCG">Table 1-3, "XMLType Storage Models: Relative Advantages"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADXDB3985" class="sect3"><a id="sthref137"></a>
<h4 class="sect3">Rewriting SQL Code That Contains XQuery and XPath Expressions</h4>
<p>For XML data that is stored object-relationally, Oracle XML&nbsp;DB can rewrite SQL statements that contain XQuery and XPath expressions to purely relational SQL statements, which are then processed in an optimal manner. In this way, Oracle XML&nbsp;DB insulates the database optimizer from needing to understand the XQuery and XPath languages and the XML data model. The database optimizer processes a rewritten SQL statement the same way it processes other SQL statements. The general term applied to this rewriting process is <span class="glossaryterm">XPath rewrite</span>.</p>
<p>The database optimizer can thus derive an execution plan based on conventional relational algebra. This in turn means that Oracle XML&nbsp;DB can leverage all of the features of the database, and ensure that SQL statements containing XQuery and XPath expressions are executed in a highly performant and efficient manner. There is little overhead with this rewriting, and Oracle XML&nbsp;DB executes XQuery-based and XPath-based queries at near-relational speed, while preserving the XML abstraction.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB3986" class="sect3"><a id="sthref138"></a>
<h4 class="sect3">When Can XPath Rewrite Occur?</h4>
<p>XPath rewrite is possible when all of the following conditions are met:</p>
<ul>
<li>
<p>An <code>XMLType</code> column or table uses structured storage techniques to provide the underlying storage model.</p>
</li>
<li>
<p>An <code>XMLType</code> column or table is associated with a registered XML schema.</p>
</li>
<li>
<p>A SQL statement contains SQL/XML functions or <code>XMLType</code> methods that use XPath expressions to refer to one or more nodes within a set of XML documents.</p>
</li>
<li>
<p>The nodes referenced by an XPath expression can be mapped, using the XML schema, to attributes of the underlying SQL object model.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<div id="ADXDB3987" class="sect3"><a id="sthref139"></a>
<h4 class="sect3">What is the XPath-Rewrite Process?</h4>
<p>XPath rewrite performs the following tasks:</p>
<ol>
<li>
<p>Identify the set of XPath expressions included in the SQL statement.</p>
</li>
<li>
<p>Translate each XPath expression into an object relational SQL expression that references the tables, types, and attributes of the underlying SQL: 1999 object model.</p>
</li>
<li>
<p>Rewrite the original SQL statement into an equivalent object relational SQL statement.</p>
</li>
<li>
<p>Pass the new SQL statement to the database optimizer for plan generation and query execution.</p>
</li>
</ol>
<p>In certain cases, XPath rewrite is not possible. This normally occurs when there is no SQL equivalent of the XPath expression. In this situation, Oracle XML&nbsp;DB performs a functional evaluation of the XPath expressions.</p>
<p>In general, functional evaluation of a SQL statement is more expensive than XPath rewrite, particularly if the number of documents to be processed is large. The advantage of functional evaluation is that it is always possible, regardless of whether the <code>XMLType</code> data is stored using structured storage and regardless of the complexity of the XPath expression.</p>
<p>Understanding the concept of XPath rewrite, and the conditions under which it can take place, is a key step in developing Oracle XML&nbsp;DB applications that deliver the required levels of scalability and performance.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1047650"></a>
<div id="ADXDB3988" class="sect1">
<h2 class="sect1">Oracle XML&nbsp;DB Benefits</h2>
<p>This section describes several benefits of using Oracle XML&nbsp;DB. <a href="#i1047832">Figure 1-6</a> presents an overview.</p>
<div id="ADXDB3989" class="figure">
<p class="titleinfigure"><a id="i1047832"></a>Figure 1-6 Oracle XML&nbsp;DB Benefits</p>
<img width="624" height="655" src="img/adxdb031.gif" alt="Description of Figure 1-6 follows" /><br />
<a id="sthref140" href="img_text/adxdb031.htm">Description of "Figure 1-6 Oracle XML&nbsp;DB Benefits"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="ADXDB5984" class="sect2"><a id="sthref141"></a>
<h3 class="sect2">Unifying Data and Content</h3>
<p>Most application data and Web content is stored in a relational database, a file system, or both. XML data is often used for data exchange, and it can be generated from a relational database or a file system. As the volume of XML data exchanged grows, the cost of regenerating this data grows, and these storage methods become less effective at accommodating XML content.</p>
<div id="ADXDB3991" class="figure">
<p class="titleinfigure"><a id="i1047675"></a>Figure 1-7 Unifying Data and Content: Some Common XML Architectures</p>
<img width="666" height="425" src="img/adxdb006.gif" alt="Description of Figure 1-7 follows" /><br />
<a id="sthref142" href="img_text/adxdb006.htm">Description of "Figure 1-7 Unifying Data and Content: Some Common XML Architectures"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Organizations often manage their structured data and unstructured data differently:</p>
<ul>
<li>
<p>Unstructured data, in tables, makes document access transparent and table access complex.</p>
</li>
<li>
<p>Structured data, often in binary large objects (such as in <code>BLOB</code> instances), makes access more complex and table access transparent.</p>
</li>
</ul>
<p>With Oracle XML&nbsp;DB, you can store and manage data that is structured, unstructured, and semi-structured using a standard data model and standard SQL and XML. You can perform SQL operations on XML documents and XML operations on object-relational (such as table) data.</p>
<div id="ADXDB3992" class="sect3"><a id="sthref143"></a>
<h4 class="sect3">Exploiting Database Capabilities</h4>
<p>Oracle Database has the following key database capabilities for working with XML:</p>
<ul>
<li>
<p>Indexing and search &ndash; Applications use queries such as "find all the product definitions created between March and April 2002", a query that is typically supported by a B-tree index on a date column. Oracle XML&nbsp;DB can enable efficient structured searches on XML data, saving content-management vendors the need to build proprietary query APIs to handle such queries.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a></p>
</li>
<li>
<p><a href="xdb09sea.htm#i1006756">Chapter 12, "Full-Text Search Over XML Data"</a></p>
</li>
<li>
<p><a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>Updates and transaction processing &ndash; Commercial relational databases use fast updates of subparts of records, with minimal contention between users trying to update. As traditionally document-centric data participate in collaborative environments through XML, this requirement becomes more important. File or <code>CLOB</code> storage cannot provide the granular concurrency control that Oracle XML&nbsp;DB does.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a></div>
</li>
<li>
<p>Managing relationships &ndash; Data with any structure typically has foreign-key constraints. XML data stores generally lack this feature, so you must implement any constraints in application code. Oracle XML&nbsp;DB enables you to constrain XML data according to XML schema definitions, and hence achieve control over relationships that structured data has always enjoyed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></p>
</li>
<li>
<p>The purchase-order examples in <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>Multiple views of data &ndash; Most enterprise applications need to group data together in different ways for different modules. This is why relational views are necessary&mdash;to allow for these multiple ways to combine data. By allowing views on XML, Oracle XML&nbsp;DB creates different logical abstractions on XML for, say, consumption by different types of applications.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb14vie.htm#CJIDAFJI">Chapter 19, "XMLType Views"</a></div>
</li>
<li>
<p>Performance and scalability &ndash; Users expect data storage, retrieval, and query to be fast. Loading a file or <code>CLOB</code> value, and parsing, are typically slower than relational data access. Oracle XML&nbsp;DB dramatically speeds up XML storage and retrieval.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb02rep.htm#g1038525">Chapter 2, "Getting Started with Oracle XML&nbsp;DB"</a></p>
</li>
<li>
<p><a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>Ease of development &ndash; Databases are foremost an application platform that provides standard, easy ways to manipulate, transform, and modify individual data elements. While typical XML parsers give standard read access to XML data they do not provide an easy way to modify and store individual XML elements. Oracle XML&nbsp;DB supports several standard ways to store, modify, and retrieve data. These include XML Schema, XQuery, XPath, DOM, and Java.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb11jav.htm#g1039140">Chapter 15, "Java DOM API for XMLType"</a></p>
</li>
<li>
<p><a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a></p>
</li>
<li>
<p><a href="xdb19rpl.htm#g1031289">Chapter 26, "Accessing the Repository using PL/SQL"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="i1047741"></a>
<div id="ADXDB3993" class="sect3">
<h4 class="sect3">Exploiting XML Capabilities</h4>
<p>If the drawbacks of XML file storage force you to break down XML into database tables and columns, there are several XML advantages you have left:</p>
<ul>
<li>
<p>Structure independence: The open content model of XML cannot be captured easily in the pure tables-and-columns world. XML schemas allow global element declarations, not just scoped to a container. Hence you can find a particular data item regardless of where in the XML document it moves to as your application evolves.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></div>
</li>
<li>
<p>Storage independence: When you use relational design, your client programs must know where your data is stored, in what format, what table, and what the relationships are among those tables. <code>XMLType</code> enables you to write applications without that knowledge and lets database administrators map structured data to physical table and column storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></p>
</li>
<li>
<p><a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>Ease of presentation: XML is understood natively by Web browsers, many popular desktop applications, and most Internet applications. Relational data is generally not accessible directly from applications. Additional programming is required to make relational data accessible to standard clients. Oracle XML&nbsp;DB stores data as XML and makes it available as XML outside the database. No extra programming is required to display database content.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a>.</p>
</li>
<li>
<p><a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a>.</p>
</li>
<li>
<p><a href="xdb14vie.htm#CJIDAFJI">Chapter 19, "XMLType Views"</a>.</p>
</li>
</ul>
</div>
</li>
<li>
<p>Ease of interchange &ndash; XML is the language of choice in business-to-business (B2B) data exchange. If you are forced to store XML in an arbitrary table structure, you are using some kind of proprietary translation. Whenever you translate a language, information is lost and interchange suffers. By natively understanding XML and providing DOM fidelity in the storage/retrieval process, Oracle XML&nbsp;DB enables a clean interchange.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a></p>
</li>
<li>
<p><a href="xdb14vie.htm#CJIDAFJI">Chapter 19, "XMLType Views"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1047783"></a>
<div id="ADXDB3994" class="sect2">
<h3 class="sect2">Efficient Storage and Retrieval of Complex XML Documents</h3>
<p>Users today face a performance barrier when storing and retrieving complex, large, or many XML documents. Oracle XML&nbsp;DB provides high performance and scalability for XML operations. The major performance features are:</p>
<ul>
<li>
<p>Native <code>XMLType</code>. See <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a>.</p>
</li>
<li>
<p>A lazily evaluated virtual DOM. See <a href="xdb10pls.htm#g1056962">Chapter 13, "PL/SQL APIs for XMLType"</a>.</p>
</li>
<li>
<p>XQuery, XPath, and XSLT support. This is described in several chapters, including <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a>, <a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a>, and <a href="xdb_xquery.htm#CBAGCBGJ">Chapter 5, "Using XQuery with Oracle XML&nbsp;DB"</a>.</p>
</li>
<li>
<p>XML schema caching support. See <a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a>.</p>
</li>
<li>
<p>Indexing, both full-text and XML. See <a href="xdb_indexing.htm#CHDEADIH">Chapter 6, "Indexing XMLType Data"</a> and <a href="xdb09sea.htm#i1006756">Chapter 12, "Full-Text Search Over XML Data"</a>.</p>
</li>
<li>
<p>A hierarchical index over Oracle XML&nbsp;DB Repository. See <a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1047816"></a>
<div id="ADXDB3996" class="sect2">
<h3 class="sect2">Use XMLType Views If Your Data Is Not XML</h3>
<p><code>XMLType</code> views provide a way for you wrap existing relational and object-relational data in XML format. This is especially useful if, for example, your legacy data is not in XML format but you must migrate it to XML format. Using <code>XMLType</code> views, you need not alter your application code.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb14vie.htm#CJIDAFJI">Chapter 19, "XMLType Views"</a></div>
<p>To use <code>XMLType</code> views, you must first register an XML schema with annotations that represent a bidirectional mapping between XML Schema data types and either SQL data types or binary XML encoding types. You can then create an <code>XMLType</code> view conforming to this mapping, by providing an underlying query that constructs instances of the appropriate types.</p>
</div>
<!-- class="sect2" -->
<a id="i1047845"></a>
<div id="ADXDB3997" class="sect2">
<h3 class="sect2">Search XML Data using <a id="sthref144"></a><a id="sthref145"></a>Oracle Text<a id="sthref146"></a><a id="sthref147"></a><a id="sthref148"></a></h3>
<p>Oracle Database enables special indexing on XML data, including Oracle Text indexes for section searching, SQL functions to process XML data, aggregation of XML data, and special optimization of queries involving XML data. Oracle SQL functions <code>hasPath</code> and <code>inPath</code> are designed to optimize XML data searches where you can search within XML text for substring matches.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb09sea.htm#i1006756">Chapter 12, "Full-Text Search Over XML Data"</a></p>
</li>
<li>
<p><a href="xdb_indexing.htm#CHDDHECG">"Oracle Text Indexes on XML Data"</a></p>
</li>
<li>
<p><a class="olink CCAPP" href="../../text.112/e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink CCREF" href="../../text.112/e24436/toc.htm"><span class="italic">Oracle Text Reference</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="i1047884"></a>
<div id="ADXDB3998" class="sect2">
<h3 class="sect2">Build Messaging Applications using Oracle Streams Advanced Queuing</h3>
<p>Oracle Streams Advanced Queuing supports the use of:</p>
<ul>
<li>
<p><code>XMLType</code> as a message/payload type, including XML schema-based <code>XMLType</code></p>
</li>
<li>
<p>Queuing or dequeuing of <code>XMLType</code> messages</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for information about using <code>XMLType</code> with Oracle Streams Advanced Queuing</p>
</li>
<li>
<p><a href="xdb27aq.htm#g1033468">Chapter 37, "Exchanging XML Data using Oracle Streams&nbsp;AQ"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFDDHD"></a>
<div id="ADXDB4000" class="sect1">
<h2 class="sect1">Standards Supported by Oracle XML&nbsp;DB</h2>
<p>Oracle XML&nbsp;DB supports all major XML, SQL, Java, and Internet standards:</p>
<ul>
<li>
<p>W3C XML Schema 1.0 Recommendation. You can register XML schemas, validate stored XML content against XML schemas, or constrain XML stored in the server to XML schemas.</p>
</li>
<li>
<p>W3C XQuery 1.0 Recommendation and W3C XPath 2.0 Recommendation. You can search or traverse XML stored inside the database using XQuery and XPath, either from HTTP(S) requests or from SQL.</p>
</li>
<li>
<p>SQL/XML.</p>
</li>
<li>
<p>Java Database Connectivity (JDBC) API. JDBC access to XML is available for Java programmers.</p>
</li>
<li>
<p>W3C XSL 1.0 Recommendation. You can transform XML documents at the server using XSLT.</p>
</li>
<li>
<p>W3C DOM Recommendation Levels 1.0 and 2.0 Core. You can retrieve XML stored in the server as an XML DOM, for dynamic access.</p>
</li>
<li>
<p>Protocol support. You can store or retrieve XML data from Oracle XML&nbsp;DB using Oracle Net or standard protocols such as HTTP(S), FTP, and IETF WebDAV.</p>
</li>
<li>
<p>Java Servlet version 2.2, (except: the servlet WAR file, <code>web.xml</code>, is not supported in its entirety; only one <code>ServletContext</code>; one <code>web-app</code> are currently supported; and stateful servlets are not supported).</p>
</li>
<li>
<p>Web services: SOAP 1.1. You can access XML stored in the server from SOAP requests. You can build, publish, or find Web Services using Oracle XML&nbsp;DB and Oracle9<span class="italic">i</span>AS, using WSDL and UDDI. You can use Oracle Streams Advanced Queuing IDAP, the SOAP specification for queuing operations, on XML stored in Oracle Database.</p>
</li>
<li>
<p>W3C XML Linking Language (Xlink) 1.0 Recommendation. You can define various types of links between XML documents.</p>
</li>
<li>
<p>W3C XML Pointer Language (XPointer) Recommendation and XPointer Framework. You can include the content of multiple XML documents or fragments in a single infoset.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABBADBF">"SQL/XML Standard Functions"</a> for more information about the SQL/XML functions</p>
</li>
<li>
<p><a class="olink SQLRF55529" href="../../server.112/e41084/ap_standard_sql010.htm#SQLRF55529"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about Oracle support for the SQL/XML standard</p>
</li>
<li>
<p><a href="xdb_xlink.htm#CIHHHJGC">Chapter 23, "Using XLink and XInclude with Oracle XML&nbsp;DB"</a> for more information about XLink and XPointer support</p>
</li>
<li>
<p><a href="xdb22pro.htm#g1031760">Chapter 28, "Accessing the Repository using Protocols"</a> for more information about protocol support</p>
</li>
<li>
<p><a href="xdb23jv1.htm#g1050187">Chapter 32, "Writing Oracle XML&nbsp;DB Applications in Java"</a> for information about using the Java servlet</p>
</li>
<li>
<p><a href="xdb27aq.htm#g1033468">Chapter 37, "Exchanging XML Data using Oracle Streams&nbsp;AQ"</a> and <a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a> for information about using SOAP</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1047964"></a>
<div id="ADXDB4001" class="sect1">
<h2 class="sect1">Oracle XML&nbsp;DB Technical Support</h2>
<p>Besides your regular channels of support through your customer representative or consultant, technical support for Oracle Database XML-enabled technologies is available free through the Discussion Forums section of Oracle Technology Network (OTN):</p>
<p><code><a href="http://forums.oracle.com/forums/category.jspa?categoryID=51">http://forums.oracle.com/forums/category.jspa?categoryID=51</a></code></p>
</div>
<!-- class="sect1" -->
<a id="i1048115"></a>
<div id="ADXDB4002" class="sect1">
<h2 class="sect1">Oracle XML&nbsp;DB Examples Used in This Manual</h2>
<p>This manual contains examples that illustrate the use of Oracle XML&nbsp;DB and <code>XMLType</code>. The examples are based on various database schemas, sample XML documents, and sample XML schemas.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="apphxdb.htm#g648966">Appendix A, "Oracle-Supplied XML Schemas and Examples"</a></div>
</div>
<!-- class="sect1" -->
<a id="BABIFDEE"></a>
<div id="ADXDB4003" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Further Oracle XML&nbsp;DB Case Studies and Demonstrations</h2>
<p>Visit OTN to view Oracle XML&nbsp;DB examples, white papers, case studies, and demonstrations:</p>
<p><code><a href="http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html">http://www.oracle.com/technetwork/database-features/xmldb/overview/index.html</a></code></p>
<p>Comprehensive XML classes on how to use Oracle XML&nbsp;DB are also available. See the Oracle University link on OTN.</p>
<p>Several detailed Oracle XML&nbsp;DB case studies are available on OTN and include the following:</p>
<ul>
<li>
<p>Oracle XML&nbsp;DB Downloadable Demonstration. This detailed demonstration illustrates how to use many Oracle XML&nbsp;DB features. Parts of this demonstration are also included in <a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a>.</p>
</li>
<li>
<p>SAX Loader Application. This demonstrates an efficient way to break up large files containing multiple XML documents outside the database and insert them into the database as a set of separate documents. This is provided as a standalone and a Web-based application.</p>
</li>
<li>
<p>Oracle XML&nbsp;DB Utilities package. This highlights the subprograms provided with the <code>XDB_Utilities</code> package. These subprograms operate on <code>BFILE</code> values, <code>CLOB</code> values, DOM, and Oracle XML&nbsp;DB Resource APIs. With this package, you can perform basic Oracle XML&nbsp;DB foldering operations, read and load XML files into a database, and perform basic DOM operations through PL/SQL.</p>
</li>
<li>
<p>Card Payment Gateway Application. This application uses Oracle XML&nbsp;DB to store all your data in XML format and enables access to the resulting XML data using SQL. It illustrates how a credit card company can store its account and transaction data in the database and also maintain XML fidelity.</p>
</li>
<li>
<p>Survey Application. This application determines what members want from Oracle products. OTN posts the online surveys and studies the responses. This Oracle XML&nbsp;DB application demonstrates how a company can create dynamic, interactive HTML forms, deploy them to the Internet, store the responses as XML, and analyze them using the XML enabled Oracle Database.</p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" -->
<hr />
<br />
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:&nbsp;<code>xsd</code> is the prefix used in the schema of schemas for the XML Schema namespace, hence it is also the namespace prefix used for the XML Schema data types, such as <code>xsd:string</code>. <code>xsd</code> is also used often as the file extension of XML schema files.<br />
Footnote&nbsp;2:&nbsp;Prior to Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2) the BasicFile option was the default for binary XML storage. Use of the BasicFile option for binary XML data is deprecated.<br /></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="partpg1.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb02rep.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
