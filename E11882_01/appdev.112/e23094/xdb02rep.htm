<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Getting Started with Oracle XML&nbsp;DB</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:11Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb01int.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb03usg.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/54</span> <!-- End Header -->
<div id="ADXDB0200" class="chapter"><a id="g1038525"></a> <a id="i1011095"></a>
<h1 class="chapter"><span class="secnum">2</span> Getting Started with Oracle XML&nbsp;DB</h1>
<p>This chapter provides some preliminary design criteria for consideration when planning your Oracle XML&nbsp;DB solution.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1034529">Oracle XML&nbsp;DB Installation</a></p>
</li>
<li>
<p><a href="#i1034512">Oracle XML&nbsp;DB Use Cases</a></p>
</li>
<li>
<p><a href="#i1034876">Application Design Considerations for Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="#BABEJFCD">Oracle XML&nbsp;DB Performance</a></p>
</li>
</ul>
<a id="i1034529"></a>
<div id="ADXDB4006" class="sect1">
<h2 class="sect1">Oracle XML&nbsp;DB Installation</h2>
<p>Oracle XML&nbsp;DB is installed automatically in the following situations:</p>
<ul>
<li>
<p>If Database Configuration Assistant (DBCA) is used to build Oracle Database using the general-purpose template</p>
</li>
<li>
<p>If you use SQL script <code>catqm</code> to install Oracle Database</p>
</li>
</ul>
<p>You can determine whether or not Oracle XML&nbsp;DB is already installed. If it is installed, then the following are true:</p>
<ul>
<li>
<p>Database schema (user account) <a id="sthref149"></a><a id="sthref150"></a><a id="sthref151"></a><code>XDB</code> exists. To check that, run this query:</p>
<pre>
SELECT * FROM ALL_USERS;
</pre></li>
<li>
<p>View <code>RESOURCE_VIEW</code> exists. To check that, use this command:</p>
<pre>
DESCRIBE RESOURCE_VIEW
</pre></li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="appaman.htm#g645751">Chapter 34, "Administering Oracle XML&nbsp;DB"</a> for information about installing and uninstalling Oracle XML&nbsp;DB <span class="italic">manually</span></p>
</li>
<li>
<p><a class="olink TDPSG20030" href="../../server.112/e10575/tdpsg_user_accounts.htm#TDPSG20030"><span class="italic">Oracle Database 2 Day + Security Guide</span></a> for information about database schema <code>XDB</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1034512"></a>
<div id="ADXDB4007" class="sect1">
<h2 class="sect1"><a id="sthref152"></a>Oracle XML&nbsp;DB Use Cases</h2>
<p>Oracle XML&nbsp;DB is suited for any application where some or all of the data processed by the application is represented using XML. Oracle XML&nbsp;DB provides for high-performance database ingestion, storage, processing and retrieval of XML data. It also lets you quickly and easily generate XML from existing relational data.</p>
<p>Applications for which Oracle XML&nbsp;DB is particularly suited include the following:</p>
<ul>
<li>
<p>Business-to-business (B2B) and application-to-application (A2A) integration</p>
</li>
<li>
<p>Internet</p>
</li>
<li>
<p>Content-management</p>
</li>
<li>
<p>Messaging</p>
</li>
<li>
<p>Web Services</p>
</li>
</ul>
<p>A typical Oracle XML&nbsp;DB application has one or more of the following characteristics:</p>
<ul>
<li>
<p>Large numbers of XML documents must be ingested or generated</p>
</li>
<li>
<p>Large XML documents must be processed or generated</p>
</li>
<li>
<p>High-performance searching is needed, both within a document and across large collections of documents</p>
</li>
<li>
<p>High levels of security are needed</p>
</li>
<li>
<p>Fine-grained security is needed</p>
</li>
<li>
<p>Data processing must use XML documents, and data must be stored in relational tables</p>
</li>
<li>
<p>Programming must support open standards such as SQL, XML, XQuery, XPath, and XSL</p>
</li>
<li>
<p>Information must be accessed using standard Internet protocols such as FTP, HTTP(S)/WebDAV, and Java Database Connectivity (JDBC)</p>
</li>
<li>
<p>XML data must be queried from SQL</p>
</li>
<li>
<p>Analytic capabilities must be applied to XML data</p>
</li>
<li>
<p>XML documents must be validated against an XML schema</p>
</li>
</ul>
<p>Oracle XML&nbsp;DB lets you fine-tune how XML documents are stored and processed in Oracle Database. Depending on the nature of the application, XML storage must have at least one of the following features</p>
<ul>
<li>
<p>High performance ingestion and retrieval of XML documents</p>
</li>
<li>
<p>High performance indexing and searching of XML documents</p>
</li>
<li>
<p>Ability to update sections of an XML document</p>
</li>
<li>
<p>Management of structured or unstructured XML documents</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1034876"></a>
<div id="ADXDB4009" class="sect1">
<h2 class="sect1">Application Design Considerations for Oracle XML&nbsp;DB</h2>
<p>This section mentions some preliminary design criteria that you can consider when planning your Oracle XML&nbsp;DB application.</p>
<a id="CEGEBDCJ"></a>
<div id="ADXDB4010" class="sect2">
<h3 class="sect2">Structure of Your Data</h3>
<p>Is your data be highly structured (mostly XML), semi-structured, or mostly unstructured? If highly structured, are your tables XML schema-based or non-schema-based?</p>
<p>If your XML data is <span class="italic">not</span> XML schema-based, then, regardless of how structured it is, you can store it in an <code>XMLType</code> table or view as binary XML or as a <code>CLOB</code> instance, or you can store it as a file in an Oracle XML&nbsp;DB Repository folder.</p>
<p>If your XML data is XML schema-based then you can use unstructured, structured (object-relational), or binary XML storage for its structured parts. For the unstructured parts, you have the same options as for data that is not XML schema-based.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a></div>
</div>
<!-- class="sect2" -->
<a id="CEGHIBDC"></a>
<div id="ADXDB4011" class="sect2">
<h3 class="sect2"><a id="sthref153"></a>Oracle XML&nbsp;DB Repository Access</h3>
<p>This section pertains to data that is stored as resources in Oracle XML&nbsp;DB Repository.</p>
<p>How do other applications and users need to access your XML and other data? How secure must the access be? Do you need versioning?</p>
<p>There are two main repository access methods:</p>
<ul>
<li>
<p>Navigation-based access or path-based access. This is suitable for both content/document and data oriented applications. Oracle XML&nbsp;DB provides the following languages and access APIs:</p>
<ul>
<li>
<p>SQL access through resource and path views. See <a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a>.</p>
</li>
<li>
<p>PL/SQL access through <code>DBMS_XDB</code>. See <a href="xdb19rpl.htm#g1031289">Chapter 26, "Accessing the Repository using PL/SQL"</a>.</p>
</li>
<li>
<p>Protocol-based access using HTTP(S)/WebDAV or FTP, most suited to content-oriented applications. See <a href="xdb22pro.htm#g1031760">Chapter 28, "Accessing the Repository using Protocols"</a>.</p>
</li>
</ul>
</li>
<li>
<p>Query-based access. This can be most suited to data oriented applications. Oracle XML&nbsp;DB provides access using SQL queries through the following APIs:</p>
<ul>
<li>
<p>Java access (through JDBC). See <a href="xdb11jav.htm#g1039140">Java DOM API for XMLType</a>.</p>
</li>
<li>
<p>PL/SQL access. See <a href="xdb10pls.htm#g1056962">Chapter 13, "PL/SQL APIs for XMLType"</a>.</p>
</li>
</ul>
</li>
</ul>
<p>These options for accessing repository data are also discussed in <a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a>.</p>
<p>You can also consider the following access criteria:</p>
<ul>
<li>
<p>What levels of security do you need? See <a href="xdb21sec.htm#g1040139">Chapter 27, "Repository Access Control"</a>.</p>
</li>
<li>
<p>What kind of indexing best suits your application? Do you need to use Oracle Text indexing and querying? See <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a>, <a href="xdb_indexing.htm#CHDEADIH">Chapter 6, "Indexing XMLType Data"</a>, and <a href="xdb09sea.htm#i1006756">Chapter 12, "Full-Text Search Over XML Data"</a>.</p>
</li>
<li>
<p>Do you need to version the data? If yes, see <a href="xdb17ver.htm#g1046246">Chapter 24, "Managing Resource Versions"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDB4012" class="sect2"><a id="sthref154"></a>
<h3 class="sect2">Application Language</h3>
<p>In which languages do you program your application?</p>
<p>You can program your Oracle XML&nbsp;DB applications in the following languages:</p>
<ul>
<li>
<p>Java (JDBC, Java Servlets)</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb11jav.htm#g1039140">Chapter 15, "Java DOM API for XMLType"</a></p>
</li>
<li>
<p><a href="xdb23jv1.htm#g1050187">Chapter 32, "Writing Oracle XML&nbsp;DB Applications in Java"</a></p>
</li>
</ul>
</div>
</li>
<li>
<p>PL/SQL</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb10pls.htm#g1056962">Chapter 13, "PL/SQL APIs for XMLType"</a></p>
</li>
<li>
<p><a href="xdb19rpl.htm#g1031289">Chapter 26, "Accessing the Repository using PL/SQL"</a></p>
</li>
<li>
<p><a href="xdb01int.htm#CHDCDBFI">"APIs for XML"</a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDB4013" class="sect2"><a id="sthref155"></a>
<h3 class="sect2">Processing</h3>
<p>Do you need to generate XML data? See <a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a>.</p>
<p>How often are XML documents accessed, updated, and manipulated? Do you need to update fragments or whole documents?</p>
<p>Do you need to transform XML data to HTML, WML, or other languages? If so, how does your application do this? See <a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a>.</p>
<p>Must your application be primarily database-resident or must it work in both the database and middle tier?</p>
<p>Is your application data-centric, document-centric (content-centric), or both?</p>
<p>The following processing options are available and should be considered when designing your Oracle XML&nbsp;DB application:</p>
<ul>
<li>
<p>XSLT. Do you need to transform the XML data to HTML, WML, or other languages, and, if so, how does your application transform the XML data? While storing XML documents in Oracle XML&nbsp;DB, you can optionally ensure that their structure complies with (validates against) specific XML schemas. See <a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a>.</p>
</li>
<li>
<p>DOM fidelity, document fidelity. Use unstructured storage to preserve document fidelity. Use binary XML or structured storage for XML schema-based data to preserve DOM fidelity. See <a href="xdb10pls.htm#g1056962">Chapter 13, "PL/SQL APIs for XMLType"</a> and <a href="xdb05sto.htm#i1036294">"DOM Fidelity"</a>.</p>
</li>
<li>
<p>XPath searching. You can use XPath syntax embedded in a SQL statement or as part of an HTTP(S) request to query XML content in the database. See <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a>, <a href="xdb09sea.htm#i1006756">Chapter 12, "Full-Text Search Over XML Data"</a>, <a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a>, and <a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a>.</p>
</li>
<li>
<p>XML Generation and <code>XMLType</code> views. Do you need to generate or regenerate XML data? If yes, see <a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a>.</p>
</li>
</ul>
<p>How often are XML documents accessed, updated, and manipulated? See <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a> and <a href="xdb18res.htm#g1034945">Chapter 25, "Accessing the Repository using RESOURCE_VIEW and PATH_VIEW"</a>.</p>
<p>Do you need to update fragments or whole documents? You can use XPath expressions to specify individual elements and attributes of your document during updates, without rewriting the entire document. This is more efficient, especially for large XML documents. <a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a>.</p>
<p>Is your application data-centric, document- and content-centric, or <span class="italic">integrated</span> (is both data- and document-centric)? See <a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a>.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB5985" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref156"></a>
<h3 class="sect2">Messaging</h3>
<p>Does your application exchange XML data with other applications across gateways? Do you need Oracle Streams Advanced Queuing (AQ) or SOAP compliance? See <a href="xdb27aq.htm#g1033468">Chapter 37, "Exchanging XML Data using Oracle Streams&nbsp;AQ"</a>.</p>
<p>Advanced Queuing (AQ) supports XML and <code>XMLType</code> applications. You can create queues with payloads that contain <code>XMLType</code> attributes. These can be used for transmitting and storing messages that contain XML documents. By defining Oracle Database objects with <code>XMLType</code> attributes, you can do the following:</p>
<ul>
<li>
<p>Store more than one type of XML document in the same queue. The documents are stored internally as <code>CLOB</code> values.</p>
</li>
<li>
<p>Selectively dequeue messages with <code>XMLType</code> attributes using an XPath or XQuery expression.</p>
</li>
<li>
<p>Define rule-based subscribers that query message content using an XPath or XQuery expression.</p>
</li>
<li>
<p>Define transformations to convert Oracle Database objects to <code>XMLType</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb27aq.htm#g1033468">Chapter 37, "Exchanging XML Data using Oracle Streams&nbsp;AQ"</a></p>
</li>
<li>
<p><a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDB4014" class="sect2"><a id="sthref157"></a>
<h3 class="sect2">Storage</h3>
<p>How and where do you store your relational data, XML data, XML schemas, and so on?</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The choices you make for data structure, access, language, and processing are typically interdependent, but they are not dependent on the storage model you choose.</div>
<p><a href="#i1035372">Figure 2-1</a> shows the Oracle XML&nbsp;DB storage options for <code>XMLType</code> tables and views.</p>
<div id="ADXDB4022" class="figure">
<p class="titleinfigure"><a id="i1035372"></a>Figure 2-1 Oracle XML&nbsp;DB Storage Options for XML Data</p>
<img width="665" height="377" src="img/adxdb035.gif" alt="Description of Figure 2-1 follows" /><br />
<a id="sthref158" href="img_text/adxdb035.htm">Description of "Figure 2-1 Oracle XML&nbsp;DB Storage Options for XML Data"</a><br />
<br /></div>
<!-- class="figure" -->
<p>If you have existing relational data, you can access it as XML data by creating <code>XMLType</code> views over it. You can use the following to define the <code>XMLType</code> views:</p>
<ul>
<li>
<p>SQL/XML functions. See <a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a> and <a href="xdb_xquery.htm#CBAGCBGJ">Chapter 5, "Using XQuery with Oracle XML&nbsp;DB"</a>.</p>
</li>
<li>
<p>Object types: object tables, object constructors, and object views.</p>
</li>
</ul>
<p>Regardless of which storage options you choose for your application, Oracle XML&nbsp;DB provides the same functionality. Though the storage model you use can affect your application performance and XML data fidelity, it is totally independent of all of the following:</p>
<ul>
<li>
<p>How, and how often, you query or update your data.</p>
</li>
<li>
<p>How you access your data. This is determined only by your application processing requirements.</p>
</li>
<li>
<p>What language(s) your application uses. This is determined only by your application processing requirements.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb01int.htm#BABECDCF">"XMLType Storage Models"</a></p>
</li>
<li>
<p><a href="xdb05sto.htm#i1036294">"DOM Fidelity"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABEJFCD"></a>
<div id="ADXDB4023" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Oracle XML&nbsp;DB Performance</h2>
<p>One objection to using XML to represent data is that it generates higher overhead than other representations. Oracle XML&nbsp;DB incorporates several features specifically designed to address this issue by significantly improving the performance of XML processing. These are described in the following sections:</p>
<ul>
<li>
<p><a href="#BABJGCGH">XML Storage Requirements</a></p>
</li>
<li>
<p><a href="#BABEEAGJ">XML Memory Management</a></p>
</li>
<li>
<p><a href="#BABIJBEB">XML Parsing Optimizations</a></p>
</li>
<li>
<p><a href="#BABDDGCH">Node-Searching Optimizations</a></p>
</li>
<li>
<p><a href="#BABJGIJH">XML Schema Optimizations</a></p>
</li>
<li>
<p><a href="#BABGDICD">Load Balancing Through Cached XML Schema</a></p>
</li>
<li>
<p><a href="#BABFHFIB">Reduced Bottlenecks From Code That Is Not Native</a></p>
</li>
<li>
<p><a href="#BABGIDDB">Reduced Java Type Conversion Bottlenecks</a></p>
</li>
</ul>
<a id="BABJGCGH"></a>
<div id="ADXDB4024" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Storage Requirements</h3>
<p>Data represented in XML and stored in a text file averages three times the size of the same data in a Java object or in relational tables. There are two main reasons for this:</p>
<ul>
<li>
<p>Tag names (metadata describing the data) and white space (formatting characters) take up a significant amount of space in the document, particularly for highly structured, data-centric XML.</p>
</li>
<li>
<p>All data in an XML file is represented in human readable (string) format.</p>
</li>
</ul>
<p>The string representation of a numeric value needs about twice as many bytes as the native (binary) representation. When XML documents are stored in Oracle XML&nbsp;DB using structured or binary XML storage, the storage process discards all tags and white space in the document.</p>
<p>The amount of space saved by this optimization depends on the ratio of tag names to data, and the number of collections in the document. For highly-structured, data-centric XML data, the savings can be significant. When a document is printed, or when node-based operations such as XPath evaluation take place, Oracle XML&nbsp;DB uses the information contained in the associated XML schema to dynamically reconstruct any necessary tag information.</p>
</div>
<!-- class="sect2" -->
<a id="BABEEAGJ"></a>
<div id="ADXDB4026" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Memory <a id="sthref159"></a><a id="sthref160"></a>Management</h3>
<p>Document Object Model (DOM) is the dominant programming model for XML documents. DOM APIs are easy to use but the DOM Tree that underpins them is expensive to generate, in terms of memory. A typical DOM implementation maintains approximately 80 to 120 bytes of system overhead for each node in the DOM tree. For highly structured data, the DOM tree can require 10 to 20 times more memory than the document on which it is based.</p>
<p>A conventional DOM implementation requires the entire contents of an XML document to be loaded into the DOM tree before any operations can take place. If an application only needs to process a small percentage of the nodes in the document, this is extremely inefficient in terms of memory and processing overhead. The alternative Simple API for XML (SAX) approach reduces the amount of memory required to process an XML document, but its disadvantage is that it only allows linear processing of nodes in the XML document.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code><a href="http://www.w3.org/DOM/">http://www.w3.org/DOM/</a></code> for information about DOM</p>
</li>
<li>
<p><code><a href="http://www.saxproject.org/">http://www.saxproject.org/</a></code> for information about SAX</p>
</li>
</ul>
</div>
<div id="ADXDB5986" class="sect3"><a id="sthref161"></a>
<h4 class="sect3">Use of XOBs Reduces Memory Overhead for XML Schema-Based Documents</h4>
<p>Oracle XML&nbsp;DB reduces memory overhead associated with DOM programming by managing XML schema-based XML documents using an internal structure in dynamic memory called an XML Object (XOB). A XOB is much smaller than the equivalent DOM since it does not duplicate information like tag names and node types, that can easily be obtained from the associated XML schema. Oracle XML&nbsp;DB automatically uses a XOB whenever an application works with the contents of a schema-based <code>XMLType</code>. The use of the XOB is transparent to you. It is hidden behind the <code>XMLType</code> data type and the C, PL/SQL, and Java APIs.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB5987" class="sect3"><a id="sthref162"></a>
<h4 class="sect3">XOB Uses a Lazily-Loaded Virtual DOM</h4>
<p>The XOB can also reduce the amount of memory required to work with an XML document using the Lazily-Loaded Virtual DOM feature. This lets Oracle XML&nbsp;DB defer loading the dynamic memory representation of nodes that are part of sub-elements or collection until code attempts to operate on a node in that object. Consequently, if an application only operates on a few nodes in a document, only those nodes and their immediate siblings are loaded into memory.The XOB can only used when an XML document is based on an XML schema. If the contents of the XML document are not based on an XML schema, a traditional DOM is used instead of the XOB.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABIJBEB"></a>
<div id="ADXDB4029" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Parsing Optimizations</h3>
<p>To populate a DOM tree the application must parse the XML document. The process of creating a DOM tree from an XML file is very CPU- intensive. In a typical DOM-based application, where the XML documents are stored as text, every document has to be parsed and loaded into the DOM tree before the application can work with it. If the contents of the DOM tree are updated the entire tree must be serialized back into a text format and written out to disk.</p>
<p>Oracle XML&nbsp;DB eliminates the need to parse documents over and over again. No parsing is needed when an XML document is loaded from disk into memory, if the document is stored as structured or binary XML storage. Oracle XML&nbsp;DB maps directly between the format on disk and the format in dynamic memory using information derived from the associated XML schema. When changes are made to XML schema-based data, Oracle XML&nbsp;DB is able to write just the updated data back to disk. When XML data is not based on an XML schema, a traditional DOM is used instead.</p>
</div>
<!-- class="sect2" -->
<a id="BABDDGCH"></a>
<div id="ADXDB4031" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Node-Searching Optimizations</h3>
<p>Most DOM implementations use string comparisons when searching for a particular node in the DOM tree. Even a simple search of a DOM tree can require hundreds or thousands of instruction cycles. Searching for a node in a XOB is much more efficient than searching for a node in a DOM. A XOB is based on a computed offset model, similar to a C/C++ object, and uses dynamic hashtables rather than string comparisons to perform node searches.</p>
</div>
<!-- class="sect2" -->
<a id="BABJGIJH"></a>
<div id="ADXDB4032" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Schema Optimizations</h3>
<p>Making use of the powerful features associated with XML schema in a conventional XML application can generate significant amounts of additional overhead. For example, before an XML document can be validated against an XML schema, the schema itself must be located, parsed, and validated.</p>
<p>Oracle XML&nbsp;DB minimizes the overhead associated with using XML schema. When an XML schema is registered with the database, it is loaded in the Oracle XML&nbsp;DB schema cache, together with all of the metadata required to map between the textual, XOB and on- disk representations of the data. After the XML schema has been registered with the database no additional parsing or validation of the XML schema is required before it can be used. The schema cache is shared by all users of the database. Whenever an Oracle XML&nbsp;DB operation requires information contained in the XML schema, it can access the required information directly from the cache.</p>
</div>
<!-- class="sect2" -->
<a id="BABGDICD"></a>
<div id="ADXDB4034" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Load Balancing Through Cached XML Schema</h3>
<p>Some operations, such as performing a full schema validation, or serializing an XML document back into text form, can still require significant memory and CPU resources. Oracle XML&nbsp;DB let these operations be off-loaded to the client or middle tier processor. Both Oracle Call Interface (OCI) interface and the OCI driver for JDBC allow the XOB to be managed by the client.The cached representation of the XML schema can also be downloaded to the client. This lets operations such as XML printing, and XML schema validation be performed using client or middle tier resources, rather than server resources.</p>
</div>
<!-- class="sect2" -->
<a id="BABFHFIB"></a>
<div id="ADXDB4035" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Reduced Bottlenecks From Code That Is Not Native</h3>
<p>Another bottleneck for XML-based Java applications happens when parsing an XML file. Even natively compiled or JIT compiled Java performs XML parsing operations twice as slowly compared to using native C language. One of the major performance bottlenecks in implementing XML applications is the cost of transforming data in an XML document between text, Java, and native server representations. The cost of performing these transformations is proportional to the size and complexity of the XML file and becomes severe even in moderately sized files.</p>
<p>Oracle XML&nbsp;DB addresses these issues by implementing all of the Java and PL/SQL interfaces as thin facades over a native implementation in the C language. Java, C, PL/SQL, and SQL all use the same underlying implementation. This provides for language-neutral XML support and higher performance XML parsing and DOM processing.</p>
</div>
<!-- class="sect2" -->
<a id="BABGIDDB"></a>
<div id="ADXDB4037" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Reduced Java Type Conversion Bottlenecks</h3>
<p>One of the biggest bottlenecks when using Java and XML is with type conversions. Internally Java uses UCS-2 to represent character data. Most XML files and databases do not contain UCS-2 encoded data. All data contained in an XML file must be converted from 8-Bit or UTF-8 encoding to UCS-2 encoding before it can be manipulated in a Java program.</p>
<p>Oracle XML&nbsp;DB addresses these problems with lazy type conversions. With lazy type conversions, the content of a node is not converted into the format required by Java until the application attempts to access the contents of the node. Data remains in the internal representation till the last moment. Avoiding unnecessary type conversions can result in significant performance improvements when an application only needs to access a few nodes in an XML document.</p>
<p>Consider a JSP that loads a name from the Oracle Database and prints it out in the generated HTML output. Typical JSP implementations read the name from the database (that probably contains data in the ASCII or ISO8859 character sets), convert the data to UCS-2, and return it to Java as a string. The JSP would not look at the string content, but only print it out after printing the enclosing HTML, probably converting back to the same ASCII or ISO8859 for the client browser. Oracle XML&nbsp;DB provides a write interface on <code>XMLType</code> so that any element can write itself directly to a stream (such as a <code>ServletOutputStream</code>) without conversion through Java character sets. <a href="#BABFGEDE">Figure 2-2</a> shows the Oracle XML&nbsp;DB Application Program Interface (API) stack.</p>
<div id="ADXDB4039" class="figure">
<p class="titleinfigure"><a id="BABFGEDE"></a>Figure 2-2 Oracle XML&nbsp;DB Application Program Interface (API) Stack</p>
<img width="411" height="377" src="img/adxdb047.gif" alt="Description of Figure 2-2 follows" /><br />
<a id="sthref163" href="img_text/adxdb047.htm">Description of "Figure 2-2 Oracle XML&nbsp;DB Application Program Interface (API) Stack"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb01int.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb03usg.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
