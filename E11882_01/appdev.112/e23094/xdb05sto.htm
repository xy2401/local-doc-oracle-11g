<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XML Schema Storage and Query: Basic</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb_indexing.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb_rewrite.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/54</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='xdb05sto'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADXDB0600" class="chapter"><a id="g1070409"></a>
<h1 class="chapter"><span class="secnum">7</span> XML Schema Storage and Query: Basic</h1>
<p>The <a id="sthref564"></a>XML Schema Recommendation was created by the World Wide Web Consortium (W3C) to describe the content and structure of XML documents in XML. It includes the full capabilities of Document Type Definitions (DTDs) so that existing DTDs can be converted to XML Schema. XML schemas have additional capabilities compared to DTDs.</p>
<p>This chapter provides basic information about using XML Schema with Oracle XML&nbsp;DB. It explains how to do the following:</p>
<ul>
<li>
<p>Register, update, and delete an XML schema</p>
</li>
<li>
<p>Create storage structures for XML schema-based data</p>
</li>
<li>
<p>Map XML Schema data types to SQL data types</p>
</li>
</ul>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1031879">Overview of XML Schema and Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="#i1031943">Using Oracle XML&nbsp;DB with XML Schema</a></p>
</li>
<li>
<p><a href="#i1031977">Managing XML Schemas with DBMS_XMLSCHEMA</a></p>
</li>
<li>
<p><a href="#i1038074">XMLType Methods Related to XML Schema</a></p>
</li>
<li>
<p><a href="#BJFFCACF">Local and Global XML Schemas</a></p>
</li>
<li>
<p><a href="#i1036294">DOM Fidelity</a></p>
</li>
<li>
<p><a href="#CHDHAHCE">XML Translations</a></p>
</li>
<li>
<p><a href="#i1042421">Creating XMLType Tables and Columns Based on XML Schemas</a></p>
</li>
<li>
<p><a href="#i1030452">Oracle XML Schema Annotations</a></p>
</li>
<li>
<p><a href="#BJFDCFII">Querying a Registered XML Schema to Obtain Annotations</a></p>
</li>
<li>
<p><a href="#CHDFGFHJ">Mapping XML Schema Data Types to Oracle XML&nbsp;DB Storage</a></p>
</li>
<li>
<p><a href="#i1030995">Mapping XML Schema Data Types to SQL Data Types</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb06stt.htm#BABGFCFG">Chapter 9, "XML Schema Storage and Query: Advanced"</a> for more advanced information about using XML Schema with Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a> for information about the optimization of XPath expressions in Oracle XML&nbsp;DB</p>
</li>
<li>
<p><code><a href="http://www.w3.org/TR/xmlschema-0/">http://www.w3.org/TR/xmlschema-0/</a></code> for an introduction to XML Schema</p>
</li>
</ul>
</div>
<a id="i1031879"></a>
<div id="ADXDB4448" class="sect1">
<h2 class="sect1">Overview of XML Schema and Oracle XML&nbsp;DB</h2>
<p>XML Schema is a schema definition language written in XML. It can be used to describe the structure and semantics of conforming instance documents. For example, the following XML schema definition, <code>purchaseOrder.xsd</code>, describes the structure and other properties of purchase-order XML documents.</p>
<p>This manual refers to an XML schema instance definition as an <span class="glossaryterm"><a id="sthref565"></a>XML schema</span>.</p>
<p><a href="#BJFIDIFB">Example 7-1</a> shows an XML schema that declares a <code>complexType</code> called <code>purchaseOrderType</code> and a global element <code>PurchaseOrder</code> of this type. This is the same schema as <a href="xdb03usg.htm#CHDJFCCA">Example 3-9, "Purchase-Order XML Schema, purchaseOrder.xsd"</a>, with the exception of the lines in <code><span class="codeinlinebold">bold</span></code> here, which are additional. For brevity, part of the schema is replaced here by an ellipsis (<code><span class="codeinlinebold">...</span></code>).</p>
<div id="ADXDB4449" class="example">
<p class="titleinexample"><a id="BJFIDIFB"></a>Example 7-1 XML Schema Instance purchaseOrder.xsd</p>
<pre>
&lt;xs:schema
  targetNamespace="http://xmlns.oracle.com/xdb/documentation/purchaseOrder"
  xmlns:po="http://xmlns.oracle.com/xdb/documentation/purchaseOrder"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" version="1.0"&gt;
  &lt;xs:element name="PurchaseOrder" type="po:PurchaseOrderType"/&gt;
   &lt;xs:complexType name="PurchaseOrderType"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="Reference" type="po:ReferenceType"/&gt;
        &lt;xs:element name="Actions" type="po:ActionsType"/&gt;
        &lt;xs:element name="Reject" type="po:RejectionType" minOccurs="0"/&gt;
        &lt;xs:element name="Requestor" type="po:RequestorType"/&gt;
        &lt;xs:element name="User" type="po:UserType"/&gt;
        &lt;xs:element name="CostCenter" type="po:CostCenterType"/&gt;
        &lt;xs:element name="ShippingInstructions" 
                    type="po:ShippingInstructionsType"/&gt;
        &lt;xs:element name="SpecialInstructions" 
                    type="po:SpecialInstructionsType"/&gt;
        &lt;xs:element name="LineItems" type="po:LineItemsType"/&gt;
        <span class="bold">&lt;xs:element name="Notes" type="po:NotesType"/&gt;</span>
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
    &lt;xs:complexType name="LineItemsType"&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="LineItem" type="po:LineItemType" 
                    maxOccurs="unbounded"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;

    <span class="bold">...</span>

    &lt;xs:simpleType name="DescriptionType"&gt;
      &lt;xs:restriction base="xs:string"&gt;
        &lt;xs:minLength value="1"/&gt;
        &lt;xs:maxLength value="256"/&gt;
      &lt;/xs:restriction&gt;
    &lt;/xs:simpleType&gt;
    <span class="bold">&lt;xs:simpleType name="NotesType"&gt;</span>
      <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
        <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
        <span class="bold">&lt;xs:maxLength value="32767"/&gt;</span>
      <span class="bold">&lt;/xs:restriction&gt;</span>
    <span class="bold">&lt;/xs:simpleType&gt;</span>
  &lt;/xs:schema&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJFIAJGJ">Example 7-2</a> shows an XML document that conforms to XML schema <code>purchaseOrder.xsd</code>:</p>
<div id="ADXDB4450" class="example">
<p class="titleinexample"><a id="BJFIAJGJ"></a>Example 7-2 purchaseOrder.xml: Document That Conforms to purchaseOrder.xsd</p>
<pre>
&lt;po:PurchaseOrder xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:po="http://xmlns.oracle.com/xdb/documentation/purchaseOrder" 
  xsi:schemaLocation=
    "http://xmlns.oracle.com/xdb/documentation/purchaseOrder
     http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"&gt;
  &lt;Reference&gt;SBELL-2002100912333601PDT&lt;/Reference&gt;
  &lt;Actions&gt;
    &lt;Action&gt;
      &lt;User&gt;SVOLLMAN&lt;/User&gt;
    &lt;/Action&gt;
  &lt;/Actions&gt;
  &lt;Reject/&gt;
  &lt;Requestor&gt;Sarah J. Bell&lt;/Requestor&gt;
  &lt;User&gt;SBELL&lt;/User&gt;
  &lt;CostCenter&gt;S30&lt;/CostCenter&gt;
  &lt;ShippingInstructions&gt;
    &lt;name&gt;Sarah J. Bell&lt;/name&gt;
    &lt;address&gt;400 Oracle Parkway
             Redwood Shores
             CA
             94065
             USA
    &lt;/address&gt;
    &lt;telephone&gt;650 506 7400&lt;/telephone&gt;
  &lt;/ShippingInstructions&gt;
  &lt;SpecialInstructions&gt;Air Mail&lt;/SpecialInstructions&gt;
  &lt;LineItems&gt;
    &lt;LineItem ItemNumber="1"&gt;
      &lt;Description&gt;A Night to Remember&lt;/Description&gt;
      &lt;Part Id="715515009058" UnitPrice="39.95" Quantity="2"/&gt;
    &lt;/LineItem&gt;
    &lt;LineItem ItemNumber="2"&gt;
      &lt;Description&gt;The Unbearable Lightness Of Being&lt;/Description&gt;
      &lt;Part Id="37429140222" UnitPrice="29.95" Quantity="2"/&gt;
    &lt;/LineItem&gt;
    &lt;LineItem ItemNumber="3"&gt;
      &lt;Description&gt;Sisters&lt;/Description&gt;
      &lt;Part Id="715515011020" UnitPrice="29.95" Quantity="4"/&gt;
    &lt;/LineItem&gt;
  &lt;/LineItems&gt;
  &lt;Notes&gt;Section 1.10.32 of &amp;quot;de Finibus Bonorum et Malorum&amp;quot;, 
         written by Cicero in 45 BC
 
&amp;quot;Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium
 doloremque laudantium, totam rem aperiam, eaque ips
<span class="bold">...</span>
tiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla
 pariatur?&amp;quot;
 
1914 translation by H. Rackham
 
&amp;quot;But I must explain to you how all this mistaken idea of denouncing
 pleasure and praising pain was born and I will give you a c
<span class="bold">...</span>
o avoids a pain that produces no resultant pleasure?&amp;quot;
 
Section 1.10.33 of &amp;quot;de Finibus Bonorum et Malorum&amp;quot;, written by Cicero
in 45 BC
 
&amp;quot;At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis
 praesentium voluptatum deleniti atque corrupti quos
<span class="bold">...</span>
 delectus, ut aut reiciendis voluptatibus maiores alias
consequatur aut perferendis doloribus asperiores repellat.&amp;quot;
 
1914 translation by H. Rackham
 
&amp;quot;On the other hand, we denounce with righteous indignation and dislike men
 who are so beguiled and demoralized by the charms of
<span class="bold">...</span>
secure other greater pleasures, or else he endures pains to avoid worse
 pains.&amp;quot;
  &lt;/Notes&gt;
&lt;/po:PurchaseOrder&gt;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The URL used is a name that uniquely identifies the registered XML schema within the database: <code>http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd</code>. This need not point to a location where the XML schema document is located. The target namespace of the XML schema is another URL, different from the XML schema location URL, which specifies an abstract namespace within which elements and types get declared.
<p><span class="bolditalic">An XML schema</span> can optionally specify the target <a id="sthref566"></a>namespace URL. If this attribute is omitted, the XML schema has no target namespace. The target namespace is commonly the same as the URL of the XML schema.</p>
<p><span class="bolditalic">An XML <a id="sthref567"></a>instance document</span> must specify the namespace of the root element (same as the target namespace of the XML schema) and the location (URL) of the XML schema that defines this root element. The location is specified with attribute <code>xsi:schemaLocation</code>. When the XML schema has no target namespace, use attribute <code><a id="sthref568"></a><a id="sthref569"></a><a id="sthref570"></a>xsi:noNamespaceSchemaLocation</code> to specify the schema URL.</p>
</div>
</div>
<!-- class="sect1" -->
<a id="i1031943"></a>
<div id="ADXDB4451" class="sect1">
<h2 class="sect1">Using <a id="sthref571"></a>Oracle XML&nbsp;DB with XML Schema</h2>
<p>Oracle XML&nbsp;DB exploits the strong typing and other powerful properties of XML Schema to process XML database data safely and efficiently.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
With XML data that is stored using binary XML storage, you can use a <a id="sthref572"></a>DTD to obtain the XML <a id="sthref573"></a><a id="sthref574"></a>entities defined there. However, the structural and type information in the DTD is not used by Oracle XML&nbsp;DB. The entities are the only information used.</div>
<p>Oracle XML&nbsp;DB uses annotated XML schemas as metadata. The standard XML Schema definitions are used, along with several Oracle namespace attributes. These attributes determine how XML instance documents get mapped to the database. Because these attributes are in a different namespace from the XML Schema namespace, such annotated XML schemas are legal XML Schema documents.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code><a href="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</a></code></div>
<p>When using Oracle XML&nbsp;DB with XML Schema, you must first <span class="italic">register</span> the XML schema. You can then use the XML schema URLs while creating <code>XMLType</code> tables, columns, and views. The XML schema URL identifies the XML schema in the database. It is associated with parameter <code>SCHEMAURL</code> of PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code>.</p>
<p>Oracle XML&nbsp;DB provides XML Schema support for the following tasks:</p>
<ul>
<li>
<p>Registering W3C-compliant XML schemas, both local and global.</p>
</li>
<li>
<p>Validating your XML documents against registered XML schema definitions.</p>
</li>
<li>
<p>Generating XML schemas from SQL object types.</p>
</li>
<li>
<p>Referencing an XML schema owned by another user.</p>
</li>
<li>
<p>Explicitly referencing a global XML schema when a local XML schema exists with the same name.</p>
</li>
<li>
<p>Generating a database mapping from your XML schemas during XML schema registration. This includes generating SQL object types, collection types, and default tables, and capturing the mapping information using XML schema attributes.</p>
</li>
<li>
<p>Specifying a particular SQL data type mapping when there are multiple allowed mappings.</p>
</li>
<li>
<p>Creating <code>XMLType</code> tables, views, and columns based on registered XML schemas.</p>
</li>
<li>
<p>Manipulating and querying XML schema-based <code>XMLType</code> tables.</p>
</li>
<li>
<p>Automatically inserting data into default tables when XML schema-based documents are inserted into Oracle XML&nbsp;DB Repository using protocols (FTP, HTTP(S)/WebDAV) and languages besides SQL.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a></div>
</li>
</ul>
<div id="ADXDB4452" class="sect2"><a id="sthref575"></a>
<h3 class="sect2">Why XML Schema?</h3>
<p><code>XMLType</code> is an abstract data type that facilitates storing XML data in database columns and tables. XML Schema offers you additional storage and access options for XML data. You can use XML schemas to define which XML elements and attributes, which kinds of element nesting, and which data types can be used.</p>
<p>XML Schema lets you verify that your XML data conforms to its intended definition: the data is validated against the XML schemas that define its proper structure. This definition includes data types, numbers of allowed item occurrences, and allowed lengths of items. When storing XML Schema-based documents in Oracle XML&nbsp;DB using protocols such as FTP or HTTP(S), the XML schema information can improve the efficiency of document insertion. When XML instances must be handled without any prior information about them, XML schemas can be useful in predicting optimum storage, fidelity, and access.</p>
<p>You can take advantage of XML Schema, including its strong typing, for XML data that is unstructured, semi-structured, or structured by storing it as binary XML.</p>
<p>If your XML data is highly structured, then consider storing it object-relationally. In that case, XML Schema is used to efficiently map XML (Schema) data types to SQL data types and object-relational tables and columns.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4453" class="sect2"><a id="sthref576"></a>
<h3 class="sect2"><a id="sthref577"></a>DTD Support in Oracle XML&nbsp;DB</h3>
<p>A <span class="glossaryterm"><a id="sthref578"></a>DTD</span> is a set of rules that define the allowable structure of an XML document. DTDs are text files that derive their format from SGML and can be associated with an XML document either by using the <code>DOCTYPE</code> element or by using an external file through a <code>DOCTYPE</code> reference. In addition to supporting XML Schema, which provides a structured mapping to object-relational storage or binary XML storage, Oracle XML&nbsp;DB also supports DTD specifications in XML instance documents. Though DTDs are not used to derive the mapping, XML processors can still access and interpret the DTDs.</p>
<div id="ADXDB4454" class="sect3"><a id="sthref579"></a>
<h4 class="sect3">Inline DTD Definitions</h4>
<p>When an XML instance document has an inline DTD definition, it is used during document parsing. Any DTD validations and entity declaration handling is done at this point. However, once parsed, the entity references are replaced with actual values and the original entity reference is lost.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB4455" class="sect3"><a id="sthref580"></a>
<h4 class="sect3">External DTD Definitions</h4>
<p>Oracle XML&nbsp;DB also supports external DTD definitions if they are stored in Oracle XML&nbsp;DB Repository. Applications needing to process an XML document containing an external DTD definition such as <code>/public/flights.dtd</code> must first ensure that the DTD document is stored in Oracle XML&nbsp;DB at path <code>/public/flights.dtd</code>.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1031">
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028">
<p class="notep1">See Also:</p>
<a href="xdb16fol.htm#g1050290">Chapter 21, "Accessing Oracle XML&nbsp;DB Repository Data"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1031977"></a>
<div id="ADXDB4456" class="sect1">
<h2 class="sect1">Managing XML Schemas with <a id="sthref581"></a>DBMS_XMLSCHEMA</h2>
<p>Before an XML schema can be used by Oracle XML&nbsp;DB, it must be registered with Oracle Database. You register an XML schema using the PL/SQL package <code>DBMS_XMLSCHEMA</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
<p>Some of the main <code>DBMS_XMLSCHEMA</code> procedures are these:</p>
<ul>
<li>
<p><code>registerSchema</code> &ndash; Register an XML schema with Oracle Database</p>
</li>
<li>
<p><code>deleteSchema</code> &ndash; Delete a previously registered XML schema.</p>
</li>
<li>
<p><code>copyEvolve</code> &ndash; Update a registered XML schema. See <a href="xdb07evo.htm#BABJABIC">Chapter 10, "XML Schema Evolution"</a>.</p>
</li>
</ul>
<a id="i1032806"></a>
<div id="ADXDB4457" class="sect2">
<h3 class="sect2"><a id="sthref582"></a><a id="sthref583"></a>Registering an XML Schema with Oracle XML&nbsp;DB</h3>
<p>The main parameters to procedure <a id="sthref584"></a><a id="sthref585"></a><a id="sthref586"></a><code>DBMS_XMLSCHEMA.registerSchema</code> are these:</p>
<ul>
<li>
<p><code>SCHEMAURL</code> &ndash; the XML schema URL. This is a unique identifier for the XML schema within Oracle XML&nbsp;DB. It is conventionally in the form of a URL, but this is not a requirement. The XML schema URL is used with Oracle XML&nbsp;DB to identify instance documents, by making the schema location hint identical to the XML schema URL. Oracle XML&nbsp;DB never tries to access a Web server identified by the specified URL.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You cannot register an XML schema using the same <code>SCHEMAURL</code> as any system-defined XML schema.</div>
</li>
<li>
<p><code>SCHEMADOC</code> &ndash; The XML schema source document. This is a <code>VARCHAR</code>, <code>CLOB</code>, <code>BLOB</code>, <code>BFILE</code>, <code>XMLType</code>, or <code>URIType</code> value.</p>
</li>
<li>
<p><code>CSID</code> &ndash; The character-set ID of the source-document encoding, when <code>schemaDoc</code> is a <code>BFILE</code> or <code>BLOB</code> value.</p>
</li>
<li>
<p><code>OPTIONS</code> &ndash; Options that specify how the XML schema should be registered. The most important option is <code>REGISTER_BINARYXML</code>, which indicates that the XML schema is used for binary XML storage. Another option is <code><a id="sthref587"></a>REGISTER_NT_AS_IOT</code>, which forces OCTs to be stored as index-organized tables (IOTs).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you specify option <code>REGISTER_BINARYXML</code>, then you must also set parameter <code>GENTYPES</code> to <code>FALSE</code>.</div>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
<p>The code in <a href="#BJFHEGGD">Example 7-3</a> registers the XML schema at URL <code>http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd</code>. This example shows how to register an XML schema using the <code>BFILE</code> mechanism to read the source document from a file on the local file system of the database server.</p>
<div id="ADXDB4458" class="example">
<p class="titleinexample"><a id="BJFHEGGD"></a>Example 7-3 Registering an XML Schema using DBMS_XMLSCHEMA.REGISTERSCHEMA</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
    SCHEMADOC =&gt; bfilename('XMLDIR','purchaseOrder.xsd'),
    CSID      =&gt; nls_charset_id('AL32UTF8'));
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDFAGFF"></a>
<div id="ADXDB4459" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Delete and Reload Documents Before Registering Their XML Schema</h3>
<p>When you register an XML schema, keep in mind that the act of registering a schema has <span class="italic">no effect</span> on the status of any instance documents already loaded into Oracle XML&nbsp;DB Repository that reference the XML schema. Because the XML schema was not yet registered, such instance documents were non-schema-based when they were loaded. <span class="italic">They remain non-schema-based after the schema is registered</span>.</p>
<p>You must <span class="italic">delete</span> such instance documents, and <span class="italic">reload</span> them after registering the schema, in order to obtain schema-based documents.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4460" class="sect2"><a id="sthref588"></a>
<h3 class="sect2">Storage and Access Infrastructure</h3>
<p>As part of registering an XML schema, Oracle XML&nbsp;DB also performs several tasks that facilitate storing, accessing, and manipulating XML instances that conform to the XML schema. These steps include:</p>
<ul>
<li>
<p>Mapping XML Schema data types to Oracle XML&nbsp;DB storage. When XML schema-based data is stored, its storage data types are derived from the XML Schema data types using a default mapping and, optionally, using mapping information that you specify using XML schema annotations. For binary XML storage, XML Schema types are mapped to binary XML encoding types. For object-relational storage, XML schema registration creates the appropriate SQL object types for the structured storage of conforming documents.</p>
</li>
<li>
<p>Creating default tables. XML schema registration generates default <code>XMLType</code> tables for all global elements. You can use XML-schema annotations to control the names of the tables, and to provide column-level and table-level storage clauses and constraints for use during table creation.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDFGFHJ">"Mapping XML Schema Data Types to Oracle XML&nbsp;DB Storage"</a></p>
</li>
<li>
<p><a href="#BJFDJBDE">"Default Tables Created During XML Schema Registration"</a></p>
</li>
<li>
<p><a href="#i1030452">"Oracle XML Schema Annotations"</a></p>
</li>
</ul>
</div>
</li>
</ul>
<p>After XML schema registration, documents that reference the XML schema using the XML Schema instance mechanism can be processed automatically by Oracle XML&nbsp;DB. For XML data that is stored object-relationally, <code>XMLType</code> tables and columns can be created that are constrained to the global elements defined by the XML schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a></div>
</div>
<!-- class="sect2" -->
<a id="i1032090"></a>
<div id="ADXDB4461" class="sect2">
<h3 class="sect2">Atomic Nature of XML Schema Registration</h3>
<p>Like all DDL operations, XML schema registration is non-transactional. However, registration is <span class="italic">atomic</span>, in this sense:</p>
<ul>
<li>
<p>If registration succeeds, then the operation is auto-committed.</p>
</li>
<li>
<p>If registration fails, then the database is rolled back to the state before registration began.</p>
</li>
</ul>
<p>Because XML schema registration potentially involves creating object types and tables, error recovery involves dropping any types and tables thus created. The entire XML schema registration process is guaranteed to be atomic: either it succeeds or the database is restored to its state before the start of registration.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4462" class="sect2"><a id="sthref589"></a>
<h3 class="sect2">Managing and Storing <a id="sthref590"></a>XML Schemas</h3>
<p>XML schema documents are themselves stored in Oracle XML&nbsp;DB as <code>XMLType</code> instances. XML schema-related <code>XMLType</code> types and tables are created as part of the Oracle XML&nbsp;DB installation script, <code>catxdbs.sql</code>.</p>
<p>The <a id="sthref591"></a>XML schema for Oracle XML&nbsp;DB XML schemas is called the <a id="sthref592"></a><span class="glossaryterm">root XML Schema</span>, <code>XDBSchema.xsd</code>. The root XML schema describes any valid XML schema that can be registered with Oracle XML&nbsp;DB. You can access <code>XDBSchema.xsd</code> at Oracle XML&nbsp;DB Repository location <code>/sys/schemas/PUBLIC/xmlns.oracle.com/xdb/XDBSchema.xsd</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="appaman.htm#g645751">Chapter 34, "Administering Oracle XML&nbsp;DB"</a></div>
</div>
<!-- class="sect2" -->
<div id="ADXDB4463" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref593"></a>
<h3 class="sect2"><a id="sthref594"></a><a id="sthref595"></a>Debugging XML Schema Registration for XML Data Stored Object-Relationally</h3>
<p>For XML data stored object-relationally, you can monitor the object types and tables created during XML schema registration by setting the following event before invoking PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code>:</p>
<pre>
ALTER SESSION SET EVENTS = '31098 TRACE NAME CONTEXT FOREVER'
</pre>
<p>Setting this event causes the generation of a log of all of the <code>CREATE TYPE</code> and <code><a id="sthref596"></a><a id="sthref597"></a>CREATE TABLE</code> statements. This log is written to the user session trace file, typically found in <code>ORACLE_BASE/diag/rdbms/ORACLE_SID/ORACLE_SID/udump</code>. This script can be a useful aid in diagnosing problems during XML schema registration.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1031">
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028">
<p class="notep1">See Also:</p>
<a href="xdb03usg.htm#BABDADEB">"Using XML Schema with Oracle XML&nbsp;DB"</a></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</div>
<!-- class="sect2" -->
<a id="BJFBEBJG"></a>
<div id="ADXDB4464" class="sect2">
<h3 class="sect2"><a id="sthref598"></a><a id="sthref599"></a>SQL Object Types Created During XML Schema Registration, for Structured Storage</h3>
<p>If parameter <code>GENTYPES</code> is <code>TRUE</code> when an XML schema is registered for use with XML data stored object-relationally, then Oracle XML&nbsp;DB creates the appropriate SQL object types that enable structured storage of conforming XML documents. By default, all SQL object types are created in the database schema of the user who registers the XML schema. If annotation <code><a id="sthref600"></a><a id="sthref601"></a><a id="sthref602"></a>xdb:defaultSchema</code> is used, then Oracle XML&nbsp;DB attempts to create the object type using the specified database schema. The current user must have the necessary privileges to create these object types.</p>
<p><a href="#CHDFCAFB">Example 7-4</a> shows the SQL object types that are created automatically when XML schema <code>purchaseOrder.xsd</code> is registered with Oracle XML&nbsp;DB.</p>
<div id="ADXDB4465" class="example">
<p class="titleinexample"><a id="CHDFCAFB"></a>Example 7-4 Creating SQL Object Types to Store XMLType Tables</p>
<pre>
DESCRIBE "PurchaseOrderType1668_T"
  
"PurchaseOrderType1668_T" is NOT FINAL
Name                 Null?  Type
-------------------- ------ -------------------------------
SYS_XDBPD$                  XDB.XDB$RAW_LIST_T
Reference                   VARCHAR2(30 CHAR)
Actions                     ActionsType1661_T
Reject                      RejectionType1660_T
Requestor                   VARCHAR2(128 CHAR)
User                        VARCHAR2(10 CHAR)
CostCenter                  VARCHAR2(4 CHAR)
ShippingInstructions        ShippingInstructionsTyp1659_T
SpecialInstructions         VARCHAR2(2048 CHAR)
LineItems                   LineItemsType1666_T
Notes                       VARCHAR2(4000 CHAR)
 
DESCRIBE "LineItemsType1666_T"
 
"LineItemsType1666_T" is NOT FINAL
Name                 Null? Type
-------------------- ----- -------------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
LineItem                   LineItem1667_COLL
 
DESCRIBE "LineItem1667_COLL"

"LineItem1667_COLL" VARRAY(2147483647) OF LineItemType1665_T
"LineItemType1665_T" is NOT FINAL
Name                Null? Type
------------------- ----- --------------------------------
SYS_XDBPD$                XDB.XDB$RAW_LIST_T
ItemNumber                NUMBER(38)
Description               VARCHAR2(256 CHAR)
Part                      PartType1664_T
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
By default, the names of the SQL object types and attributes are system-generated. This is the case in <a href="#CHDFCAFB">Example 7-4</a>. If the XML schema does not contain attribute <code>SQLName</code>, then the SQL name is derived from the XML name. You can use XML schema annotations to provide user-defined names (see <a href="#i1030452">"Oracle XML Schema Annotations"</a> for details).</div>
</div>
<!-- class="sect2" -->
<a id="BJFDJBDE"></a>
<div id="ADXDB4466" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref603"></a><a id="sthref604"></a>Default Tables Created During XML Schema Registration</h3>
<p>As part of XML schema registration for XML data, you can create default tables. Default tables are most useful when documents conforming to the XML schema are inserted through APIs and protocols such as <a id="sthref605"></a><a id="sthref606"></a>FTP and HTTP(S) that do not provide any table specification. In such cases, the XML instance is inserted into the default table.</p>
<div id="ADXDB4467" class="example">
<p class="titleinexample"><a id="sthref607"></a>Example 7-5 Default Table for Global Element PurchaseOrder</p>
<pre>
DESCRIBE "purchaseorder1669_tab"

Name                        Null? Type
--------------------------- ----- -----------------------
TABLE of
  SYS.XMLTYPE(
    XMLSchema "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
    Element "PurchaseOrder")
  STORAGE OBJECT-RELATIONAL TYPE "PurchaseOrderType1668_T"
</pre></div>
<!-- class="example" -->
<p>If you provide a value for attribute <code>xdb:defaultTable</code>, then the <code>XMLType</code> table is created with that name. Otherwise it is created with an internally generated name.</p>
<p>Any text specified using attributes <code>xdb:tableProps</code> and <code>xdb:columnProps</code> is appended to the generated <code>CREATE TABLE</code> statement.</p>
</div>
<!-- class="sect2" -->
<div class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref608"></a>
<h3 class="sect2">Do Not Use Internal Constructs Generated during XML Schema Registration</h3>
<p>In general, the SQL constructs generated during XML schema registration are <span class="italic">internal</span> to Oracle XML&nbsp;DB. Oracle recommends that you do <span class="italic">not</span> use them in your code.</p>
<p>More precisely, generated SQL data types, nested tables, and tables associated with out-of-line storage are all internal. They are based on specific XML schema-to-object type mappings that are subject to change and redefinition by Oracle at any time.</p>
<p>In general:</p>
<ul>
<li>
<p>Do not use any generated SQL data types.</p>
</li>
<li>
<p>Do not access or modify any generated nested tables or out-of-line tables.</p>
</li>
</ul>
<p>You can, however, modify the storage options, such as partitioning, of generated tables, and you can create indexes and constraints on generated tables. You can also freely use any XML schema annotations provided by Oracle XML&nbsp;DB, including to name generated constructs for your convenience.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4468" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref609"></a>
<h3 class="sect2">Generated Names are Case Sensitive</h3>
<p>The names of any SQL tables, object, and attributes generated by XML schema registration are <span class="italic">case sensitive</span>. For instance, in <a href="#BJFHEGGD">Example 7-3</a>, a table named <code>PurchaseOrder1669_TAB</code> is created automatically during registration of the XML schema. Because this table name was derived from the element name, <code>PurchaseOrder</code>, the table name is also mixed case. You must therefore refer to this table in SQL code by using a quoted identifier: <code><span class="codeinlinebold">"</span></code><code>PurchaseOrder1669_TAB</code><code><span class="codeinlinebold">"</span></code>. Failure to do so results in an object-not-found error, such as <code>ORA-00942: table or view does not exist</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4469" class="sect2"><a id="sthref610"></a>
<h3 class="sect2">Database Objects That Depend on Registered XML Schemas</h3>
<p>The following database objects are dependent on registered XML schemas:</p>
<ul>
<li>
<p>Tables or views that have an <code>XMLType</code> column that conforms to an element in an XML schema.</p>
</li>
<li>
<p>Other XML schemas that include or import a given XML schema as part of their definition.</p>
</li>
<li>
<p>Cursors that reference an XML schema. This includes references within functions of package <code>DBMS_XMLGEN</code>. Such cursors are purely transient objects.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDB4470" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref611"></a>
<h3 class="sect2">Listing All <a id="sthref612"></a>Registered XML Schemas</h3>
<p><a href="#CHDHHBEB">Example 7-6</a> shows how to use PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code> to obtain a list of all XML schemas registered with Oracle XML&nbsp;DB. You can also examine views <code>USER_XML_SCHEMAS</code>, <code>ALL_XML_SCHEMAS</code>, <code>USER_XML_TABLES</code>, and <code>ALL_XML_TABLES</code>.</p>
<div id="ADXDB4471" class="example">
<p class="titleinexample"><a id="CHDHHBEB"></a>Example 7-6 Data Dictionary Table for Registered Schemas</p>
<pre>
DESCRIBE DBA_XML_SCHEMAS

Name         Null? Type
------------ ----- -----------------------
OWNER              VARCHAR2(30)
SCHEMA_URL         VARCHAR2(700)
LOCAL              VARCHAR2(3)
SCHEMA             XMLTYPE(XMLSchema "http://xmlns.oracle.com/xdb/XDBSchema.xsd"
                           Element "schema")
INT_OBJNAME        VARCHAR2(4000)
QUAL_SCHEMA_URL    VARCHAR2(767)
HIER_TYPE          VARCHAR2(11)
BINARY             VARCHAR2(3)
SCHEMA_ID          RAW(16)
HIDDEN             VARCHAR2(3)

SELECT OWNER, LOCAL, SCHEMA_URL FROM DBA_XML_SCHEMAS;

OWNER   LOC   SCHEMA_URL
-----   ---   ----------------------
XDB     NO    http://xmlns.oracle.com/xdb/XDBSchema.xsd
XDB     NO    http://xmlns.oracle.com/xdb/XDBResource.xsd
XDB     NO    http://xmlns.oracle.com/xdb/acl.xsd
XDB     NO    http://xmlns.oracle.com/xdb/dav.xsd
XDB     NO    http://xmlns.oracle.com/xdb/XDBStandard.xsd
XDB     NO    http://xmlns.oracle.com/xdb/log/xdblog.xsd
XDB     NO    http://xmlns.oracle.com/xdb/log/ftplog.xsd
XDB     NO    http://xmlns.oracle.com/xdb/log/httplog.xsd
XDB     NO    http://www.w3.org/2001/xml.xsd
XDB     NO    http://xmlns.oracle.com/xdb/XDBFolderListing.xsd
XDB     NO    http://xmlns.oracle.com/xdb/stats.xsd
XDB     NO    http://xmlns.oracle.com/xdb/xdbconfig.xsd
SCOTT   YES   http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd

13 rows selected.

DESCRIBE DBA_XML_TABLES

Name         Null? Type
------------ ----- -----------------------
OWNER              VARCHAR2(30)
TABLE_NAME         VARCHAR2(30)
XMLSCHEMA          VARCHAR2(700)
SCHEMA_OWNER       VARCHAR2(30)
ELEMENT_NAME       VARCHAR2(2000)
STORAGE_TYPE       VARCHAR2(17)
ANYSCHEMA          VARCHAR2(3)
NONSCHEMA          VARCHAR2(3)

SELECT TABLE_NAME FROM DBA_XML_TABLES
  WHERE XMLSCHEMA = 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd';

TABLE_NAME
---------------------
PurchaseOrder1669_TAB

1 row selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADXDB4472" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref613"></a>
<h3 class="sect2"><a id="sthref614"></a>Deleting an XML Schema</h3>
<p>You can <a id="sthref615"></a>delete a registered XML schema by using procedure <code><a id="sthref616"></a><a id="sthref617"></a>DBMS_XMLSCHEMA.</code><code><span class="codeinlinebold">deleteSchema</span></code>. This does the following, by default:</p>
<ol>
<li>
<p>Checks that the current user has the appropriate privileges to delete the resource corresponding to the XML schema within Oracle XML&nbsp;DB Repository. You can control which users can delete which XML schemas, by setting the appropriate ACLs on the XML schema resources.</p>
</li>
<li>
<p>Checks whether there are any tables dependent on the XML schema that is to be deleted. If so, raises an error and cancels the deletion. This check is not performed if option <code>delete_invalidate</code> or <code>delete_cascade_force</code> is used. In that case, no error is raised.</p>
</li>
<li>
<p>Removes the XML schema document from the Oracle XML&nbsp;DB Repository (folder <code>/sys/schemas</code>).</p>
</li>
<li>
<p>Removes the XML schema document from <code>DBA_XML_SCHEMAS</code>, unless it was registered for use with binary XML instances and neither <code>delete_invalidate</code> nor <code>delete_cascade_force</code> is used.</p>
</li>
<li>
<p>Drops the default table, if either <code>delete_cascade</code> or <code>delete_cascade_force</code> is used. Raises an error if <code>delete_cascade_force</code> is specified and there are instances in other tables that are also dependent on the XML schema.</p>
</li>
</ol>
<div id="ADXDB4473" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref618"></a>
<h4 class="sect3">DBMS_XMLSCHEMA.DELETESCHEMA Options</h4>
<p>The following values are available for option <code>DELETE_OPTION</code> of procedure <code>DBMS_XMLSCHEMA.deleteSchema</code>:</p>
<ul>
<li>
<p><code>DELETE_RESTRICT</code> &ndash; Raise an error and cancel deletion if dependencies are detected. This is the default behavior.</p>
</li>
<li>
<p><code>DELETE_INVALIDATE</code> &ndash; Do not raise an error if dependencies are detected. Instead, mark each of the dependencies as being invalid.</p>
</li>
<li>
<p><code>DELETE_CASCADE</code> &ndash; Drop all types and default tables that were generated during XML schema registration. Raise an error if there are instances that depend upon the XML schema that are stored in tables other than the default table. However, do not raise an error for any such instances that are stored in <code>XMLType</code> columns that were created using <code>ANY_SCHEMA</code>. If the XML schema was registered for use with binary XML, do not remove it from <code>DBA_XML_SCHEMAS</code>.</p>
</li>
<li>
<p><code>DELETE_CASCADE_FORCE</code> &ndash; Drop all types and default tables that were generated during XML schema registration. Do not raise an error if there are instances that depend upon the XML schema that are stored in tables other than the default table. Instead, mark each of the dependencies as being invalid. Remove the XML schema from <code>DBA_XML_SCHEMAS</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
<p><a href="#CHDICCDF">Example 7-7</a> illustrates the use of <code>DELETE_CASCADE_FORCE</code>.</p>
<div id="ADXDB4474" class="example">
<p class="titleinexample"><a id="CHDICCDF"></a>Example 7-7 Deleting an XML Schema with DBMS_XMLSCHEMA.DELETESCHEMA</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.deleteSchema(
    SCHEMAURL =&gt; 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
    <span class="bold">DELETE_OPTION =&gt; DBMS_XMLSCHEMA.DELETE_CASCADE_FORCE</span>);
END;
/
</pre></div>
<!-- class="example" -->
<p>If an XML schema was registered for use with binary XML, it is not removed from <code>DBA_XML_SCHEMAS</code> when you delete it using option <code>DELETE_RESTRICT</code> (the default value) or <code>DELETE_CASCADE</code>. As a consequence, although you can no longer use the XML schema to encode new XML instance documents, any existing documents in Oracle XML&nbsp;DB that reference the XML schema can still be <span class="italic">decoded</span> using it.</p>
<p>This remains the case, until you remove the XML schema from <code>DBA_XML_SCHEMAS</code> using <code><a id="sthref619"></a><a id="sthref620"></a>DBMS_XMLSCHEMA.</code><code><span class="codeinlinebold">purgeSchema</span></code>. Oracle recommends that, in general, you use <code>delete_restrict</code> or <code>delete_cascade</code>. Instead of using <code>DELETE_CASCADE_FORCE</code>, call <code>DBMS_XMLSCHEMA.purgeSchema</code> when you are sure you no longer need the XML schema.</p>
<p>Procedure <code>purgeSchema</code> removes the XML schema completely from Oracle XML&nbsp;DB. In particular, it removes it from <code>DBA_XML_SCHEMAS</code>. Before you use <code>DBMS_XMLSCHEMA.purgeSchema</code>, be sure that you have transformed all existing XML documents that reference the XML schema to be purged, so they reference a different XML schema or no XML schema. Otherwise, it will be impossible to decode them after the purge.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1038074"></a>
<div id="ADXDB4475" class="sect1">
<h2 class="sect1"><a id="sthref621"></a><a id="sthref622"></a><a id="sthref623"></a>XMLType Methods Related to XML Schema</h2>
<p><a href="#g1048549">Table 7-1</a> lists some of the <code>XMLType</code> methods that are useful for working with XML schemas.</p>
<div id="ADXDB4476" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref624"></a><a id="g1048549"></a>Table 7-1 XMLType Methods Related to XML Schema</p>
<table class="cellalignment1032" title="XMLType Methods Related to XML Schema " summary="This table describes XMLType API&rsquo;s eight XML Schema methods." >
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t18">XMLType Method</th>
<th class="cellalignment1027" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t18" headers="r1c1-t18">
<pre>
<a id="sthref625"></a><a id="sthref626"></a><a id="sthref627"></a>isSchemaBased()
</pre></td>
<td class="cellalignment1028" headers="r2c1-t18 r1c2-t18">
<p>Returns <code>TRUE</code> if the <code>XMLType</code> instance is based on an XML schema, <code>FALSE</code> otherwise.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t18" headers="r1c1-t18">
<pre>
<a id="sthref628"></a><a id="sthref629"></a><a id="sthref630"></a>getSchemaURL() 
</pre></td>
<td class="cellalignment1028" headers="r3c1-t18 r1c2-t18">
<p>The XML schema URL for an <code>XMLType</code> instance.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t18" headers="r1c1-t18">
<pre>
<a id="sthref631"></a><a id="sthref632"></a><a id="sthref633"></a>schemaValidate()
<a id="sthref634"></a><a id="sthref635"></a><a id="sthref636"></a>isSchemaValid()
<a id="sthref637"></a><a id="sthref638"></a><a id="sthref639"></a>isSchemaValidated()
<a id="sthref640"></a><a id="sthref641"></a><a id="sthref642"></a>setSchemaValidated()
</pre></td>
<td class="cellalignment1028" headers="r4c1-t18 r1c2-t18">
<p>Validate an <code>XMLType</code> instance against a registered XML schema.</p>
<p>See <a href="xdb08tra.htm#g1030361">Chapter 11, "Transforming and Validating XMLType Data"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect1" -->
<a id="BJFFCACF"></a>
<div id="ADXDB4477" class="sect1">
<h2 class="sect1">Local and Global <a id="sthref643"></a>XML Schemas</h2>
<p>XML schemas can be registered as local or global:</p>
<ul>
<li>
<p>A local xml schema is, by default, visible only to its owner.</p>
</li>
<li>
<p>A global xml schema is, by default, visible and usable by all database users.</p>
</li>
</ul>
<p>When you register an XML schema, PL/SQL package <code>DBMS_XMLSCHEMA</code> adds a corresponding resource to Oracle XML&nbsp;DB Repository. The XML schema URL determines the path name of the XML schema resource in the repository (and it is associated with parameter <code>SCHEMAURL</code> of PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In Oracle Enterprise Manager, local and global registered XML schemas are referred to as <span class="glossaryterm"><a id="sthref644"></a>private</span> and <span class="glossaryterm"><a id="sthref645"></a>public</span>, respectively.</div>
<div id="ADXDB4478" class="sect2"><a id="sthref646"></a>
<h3 class="sect2">Local XML Schema</h3>
<p>By default, an XML schema belongs to you after you register it with Oracle XML&nbsp;DB. A reference to the XML schema document is stored in Oracle XML&nbsp;DB Repository. Such XML schemas are referred to as <span class="glossaryterm"><a id="sthref647"></a>local</span>. By default, they are usable only by you, the owner. In Oracle XML&nbsp;DB, local XML schema resources are created under folder <code>/sys/schemas/</code><code><span class="codeinlineitalic">username</span></code>. The rest of the repository path name is derived from the schema URL.</p>
<div id="ADXDB4479" class="example">
<p class="titleinexample"><a id="BJFIJHJA"></a>Example 7-8 Registering a Local XML Schema</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
    SCHEMADOC =&gt; bfilename('XMLDIR','purchaseOrder.xsd'),
    LOCAL     =&gt; <span class="bold">TRUE</span>,
    GENTYPES  =&gt; TRUE, 
    GENTABLES =&gt; FALSE, 
    CSID      =&gt; nls_charset_id('AL32UTF8'));
END;
/
</pre></div>
<!-- class="example" -->
<p>If this local XML schema is registered by user <code>QUINE</code>, it is given this path name:</p>
<pre>
/sys/schemas/<span class="bold">QUINE</span>/xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd
</pre>
<p>Database users need appropriate permissions and Access Control Lists (ACLs) to create a resource with this path name, in order to register the XML schema as a local XML schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb21sec.htm#g1040139">Chapter 27, "Repository Access Control"</a></div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Typically, only the owner of the XML schema can use it to define <code>XMLType</code> tables, columns, or views, validate documents, and so on. However, Oracle XML&nbsp;DB supports fully qualified XML schema URLs. For example: <code>http://xmlns.oracle.com/xdb/schemas/QUINE/xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd</code>. Privileged users can use such an extended URL to specify XML schemas belonging to other users.</div>
</div>
<!-- class="sect2" -->
<div id="ADXDB4480" class="sect2"><a id="sthref648"></a>
<h3 class="sect2">Global XML Schema</h3>
<p>In contrast to local schemas, a privileged user can register an XML schema as global by specifying an argument in the <code>DBMS_XMLSCHEMA</code> registration function. <a id="sthref649"></a><span class="glossaryterm">Global XML schemas</span> are visible to <span class="italic">all</span> users. They are stored under folder <code>/sys/schemas/PUBLIC/</code> in Oracle XML&nbsp;DB Repository.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Access to folder <code>/sys/schemas/PUBLIC</code> is controlled by access control lists (ACLs). By default, this folder is writable only by a database administrator. You need write privileges on this folder to register global XML schemas. Role <code><a id="sthref650"></a><a id="sthref651"></a>XDBADMIN</code> provides write access to this folder, assuming that it is protected by the default ACLs. See <a href="xdb21sec.htm#g1040139">Chapter 27, "Repository Access Control"</a>.</div>
<p>You can register a local schema with the same URL as an existing global schema. A local schema always shadows (hides) any global schema with the same name (URL). <a href="#BJFBGBEJ">Example 7-9</a> illustrates registration of a global schema.</p>
<div id="ADXDB4481" class="example">
<p class="titleinexample"><a id="BJFBGBEJ"></a>Example 7-9 Registering a Global XML Schema</p>
<pre>
<span class="bold">GRANT XDBADMIN TO QUINE;</span>

Grant succeeded.

CONNECT quine
Enter password: <span class="italic">password</span>

Connected.

BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
    SCHEMADOC =&gt; bfilename('XMLDIR','purchaseOrder.xsd'),
    LOCAL     =&gt; <span class="bold">FALSE</span>,
    GENTYPES  =&gt; TRUE, 
    GENTABLES =&gt; FALSE, 
    CSID      =&gt; nls_charset_id('AL32UTF8'));
END;
/
</pre>
<p>If this global XML schema is registered by user <code>QUINE</code>, it is given this path name:</p>
<pre>
/sys/schemas/<span class="bold">PUBLIC</span>/xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd
</pre>
<p>Database users need appropriate permissions (ACL access) to create this resource in order to register the XML schema as global.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1036294"></a>
<div id="ADXDB4482" class="sect1">
<h2 class="sect1"><a id="sthref652"></a><a id="sthref653"></a>DOM Fidelity</h2>
<p>Document Object Model (DOM) <a id="sthref654"></a>fidelity is the concept of retaining the structure of a retrieved XML document, compared to the original XML document, for DOM traversals. DOM fidelity is needed to ensure the accuracy and integrity of XML documents stored in Oracle XML&nbsp;DB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BABCGDGD">"Overriding the SQLType Value in an XML Schema When Declaring Attributes"</a></p>
</li>
<li>
<p><a href="#BABBHBJA">"Overriding the SQLType Value in an XML Schema when Declaring Elements"</a></p>
</li>
</ul>
</div>
<div id="ADXDB4483" class="sect2"><a id="sthref655"></a>
<h3 class="sect2">What is DOM Fidelity?</h3>
<p><span class="glossaryterm"><a id="sthref656"></a>DOM fidelity</span> means that all information in an XML document is preserved, except whitespace that is insignificant. With DOM fidelity, XML data retrieved from the database has the same information as before it was inserted into the database, with the single exception of insignificant whitespace. The term "DOM fidelity" is used because this kind of fidelity is particularly important for DOM traversals.</p>
<p>With binary XML storage of XML data, all of the significant information is encoded in the binary XML format, ensuring DOM fidelity. With structured storage of XML data, the elements and attributes declared in an XML schema are mapped to separate attributes in the corresponding SQL object types. However, the following information in XML instance documents is not stored in these object attributes:</p>
<ul>
<li>
<p>Namespace declarations</p>
</li>
<li>
<p>Comments</p>
</li>
<li>
<p>Prefix information</p>
</li>
</ul>
<p>Instead, Oracle XML&nbsp;DB uses a separate mechanism to keep track of this information: it is recorded as instance-level metadata.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4484" class="sect2"><a id="sthref657"></a>
<h3 class="sect2">SYS_XDBPD$ and DOM Fidelity for Structured Storage</h3>
<p>In order to provide DOM fidelity for XML data stored object-relationally, Oracle XML&nbsp;DB maintains instance-level metadata. This metadata is tracked at the type level using the system-defined binary object attribute <code><a id="sthref658"></a><a id="sthref659"></a><a id="sthref660"></a><a id="sthref661"></a>SYS_XDBPD$</code>. This object attribute is referred to as the <span class="glossaryterm">positional descriptor<a id="sthref662"></a><a id="sthref663"></a></span>, or <span class="glossaryterm">PD</span> for short. The PD is intended for Oracle XML&nbsp;DB <span class="italic">internal use only</span>. You should never directly access or manipulate column PD.</p>
<p>The positional descriptor stores all information that cannot be stored in any of the other object attributes. PD information is used to ensure the DOM fidelity of all XML documents stored in Oracle XML&nbsp;DB. Examples of PD information include: ordering information, comments, processing instructions, and namespace prefixes.</p>
<p>If DOM fidelity is not required, you can suppress the use of <code>SYS_XDBPD$</code> by setting attribute <code><a id="sthref664"></a><a id="sthref665"></a><a id="sthref666"></a>xdb:maintainDOM</code> to <code>false</code> in the XML schema, at the type level.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For clarity, object attribute <code>SYS_XDBPD$</code> is omitted in many examples in this book. However, it is always present as a positional descriptor (PD) column in all SQL object types that are generated by the XML schema registration process.
<p>In general, Oracle recommends that you do not suppress the PD attribute, because the extra information, such as comments and processing instructions, could be lost if there is no PD column.</p>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHAHCE"></a>
<div id="ADXDB0650" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">XML Translations</h2>
<p>You can store XML documents in Oracle XML&nbsp;DB Repository as <code>XMLType</code> instances. You can use any storage model for these instances: structured (object-relational storage), unstructured (<code>CLOB</code>), or binary XML. These documents sometimes contain strings that must be translated into various (natural) languages. You typically store both the original strings and their translations in the repository. You can retrieve and operate on these strings, depending on your language settings.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
XML schemas stored object-relationally are not translatable.</div>
<a id="BJFJECCE"></a>
<div id="ADXDB4485" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Changing an XML Schema and XML Instance Documents for Translation</h3>
<p>This section describes the changes that are required to be made to an XML schema and an associated XML instance document to make the document translatable.</p>
<div id="ADXDB4486" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref667"></a>
<h4 class="sect3">Indicating Translatable Elements in an XML Schema</h4>
<p>Attribute <code>xdb:translate</code> must be specified in the XML schema for each element that is to be translated. The following restrictions apply to attribute <code>xdb:translate</code>.</p>
<ol>
<li>
<p>Attribute <code>xdb:translate</code> can be specified only on <code>complexType</code> elements that have <code>simpleContent</code>. Here, <code>simpleContent</code> must be an extension or a restriction of type <code>string</code>. However, if a <code>complexType</code> element has the <code>xdb:translate</code> flag set, then none of its descendants can have this flag set.</p>
</li>
<li>
<p>Attribute <code>xdb:translate</code> can be set only on a single-valued element, which has exactly one translation. For such an element, the value of <code>maxoccurs</code> must be <code>0</code> or <code>1</code>. If you want to set this attribute on a multiple-valued element, the element must have an <code>ID</code> attribute, which uniquely identifies the element.</p>
</li>
</ol>
<p>During XML schema registration, PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code> checks whether the XML schema satisfies these restrictions.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB4487" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref668"></a>
<h4 class="sect3">Indicating Translation Language Attributes in an XML Instance Document</h4>
<p>The following translation language attributes are supported:</p>
<ul>
<li>
<p><code>xml:lang</code>: For an instance document associated with an XML schema that supports translations, you must specify the translation language. You can do this by annotating each translation with attribute <code>xml:lang</code>. The allowed values of the <code>xml:lang</code> attribute are the language identifiers identified by IETF RFC 3066.</p>
</li>
<li>
<p><code>xdb:srclang</code>: For multiple-valued elements, that is, elements that can have multiple translations, only one translation can be used as the source language translation. That translation is specified by attribute <code>xdb:srclang</code>. This is the default translation, which is returned when the session language is not specified.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDB4488" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref669"></a>
<h3 class="sect2">Making XML Documents Translatable</h3>
<p>This section uses the translation-specifying XML schema attributes to make elements in a sample document translatable. <a href="#CHDGIBDB">Example 7-10</a> shows an XML schema that defines documents that contain a title string that needs to be translatable.</p>
<div id="ADXDB4489" class="example">
<p class="titleinexample"><a id="CHDGIBDB"></a>Example 7-10 XML Schema Defining Documents with a Title To Be Translated</p>
<pre>
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:xdbsc="http://xmlns.oracle.com/xdb/security.xsd"
        xmlns:xdb="http://xmlns.oracle.com/xdb.xsd"
        targetNamespace="http://xmlns.oracle.com/xdb/security.xsd"
        elementFormDefault="qualified" version="1.0"&gt;
  &lt;annotation&gt;
    &lt;documentation&gt;
This XML schema describes the structure of Security Class documents.
    &lt;/documentation&gt;
  &lt;/annotation&gt;
  &lt;element name="securityClass" xdb:defaultTable=""&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="name" type="string"/&gt;
        <span class="bold">&lt;element name="title" minOccurs="0" maxOccurs="unbounded"/&gt;</span>
        &lt;element name="inherits-from" type="QName" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;element name="privlist" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;complexType&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
              &lt;element ref="xdbsc:privilege"/&gt;
                &lt;element ref="xdbsc:aggregatePrivilege"/&gt;
            &lt;/choice&gt;
          &lt;/complexType&gt;
        &lt;/element&gt;
        &lt;!-- this "any" contains all application specific information
             for a security class in general e.g. reason for creation  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="targetNamespace" type="anyURI" use="required"/&gt;
      &lt;!-- all privileges in this security class are under this target namespace --&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="aggregatePrivilege"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="title" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;sequence maxOccurs="unbounded"&gt;
          &lt;element name="privilegeRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="name" type="QName" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             an aggregate privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="privilege"&gt;
    &lt;complexType&gt;
      &lt;sequence minOccurs="0"&gt;
        &lt;element name="title" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;sequence minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;element name="columnRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="schema" type="string" use="required"/&gt;
              &lt;attribute name="table" type="string" use="required"/&gt;
              &lt;attribute name="column" type="string" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             for a privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFBBEG">Example 7-11</a> shows a document that is associated with the XML schema of <a href="#CHDGIBDB">Example 7-10</a>.</p>
<div id="ADXDB4490" class="example">
<p class="titleinexample"><a id="CHDFBBEG"></a>Example 7-11 Untranslated Instance Document</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  <span class="bold">&lt;title&gt;</span>
<span class="bold">Security Class Example</span>
  <span class="bold">&lt;/title&gt;</span>
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
  &lt;privlist&gt;
  &lt;privilege name="privilege1"/&gt;
  &lt;aggregatePrivilege name="iStorePOApprover"&gt;
    &lt;title&gt;
iStore Purchase Order Approver
    &lt;/title&gt;
    &lt;privilegeRef name="is:privilege1"/&gt;
    &lt;privilegeRef name="oa:submitPO"/&gt;
    &lt;privilegeRef name="oa:privilege3"/&gt;
  &lt;/aggregatePrivilege&gt;
  &lt;privilege name="privilege2"&gt;
    &lt;title&gt;
secondary privilege
    &lt;/title&gt;
    &lt;columnRef schema="APPS" table="PurchaseOrder" column="POId"/&gt;
    &lt;columnRef schema="APPS" table="PurchaseOrder" column="Amount"/&gt;
  &lt;/privilege&gt;
  &lt;/privlist&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" -->
<p>To make the top-level title translatable, set <code>xdb:translate</code> to <code>true</code>. This is a single-valued element (<code>xdb:maxOccurs</code> is <code>1</code>). <a href="#CHDICHAI">Example 7-12</a> shows the new XML schema, where attribute <code>xdb:translate</code> is <code>true</code>.</p>
<div id="ADXDB4491" class="example">
<p class="titleinexample"><a id="CHDICHAI"></a>Example 7-12 XML Schema with Attribute xdb:translate for a Single-Valued Element</p>
<pre>
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:xdbsc="http://xmlns.oracle.com/xdb/security.xsd"
        xmlns:xdb="http://xmlns.oracle.com/xdb.xsd"
        targetNamespace="http://xmlns.oracle.com/xdb/security.xsd"
        elementFormDefault="qualified" version="1.0"&gt;
&lt;xs:import namespace="http://www.w3.org/XML/1998/namespace"
        schemaLocation="http://www.w3.org/2001/xml.xsd"/&gt;
&lt;xs:import namespace-"http://xmlns.oracle.com/xdb"
        schemaLocation="http://xmlns.oracle.com/xdb/xmltr.xsd"/&gt;
  &lt;annotation&gt;
    &lt;documentation&gt;
This XML schema describes the structure of Security Class documents.
    &lt;/documentation&gt;
  &lt;/annotation&gt;
  &lt;element name="securityClass" xdb:defaultTable=""&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="name" type="string"/&gt;
        <span class="bold">&lt;element ref="titleref" minOccurs="0" maxOccurs="unbounded"</span>
                 <span class="bold">xdb:maxOccurs="1" xdb:translate="true"/&gt;</span>
        &lt;element name="inherits-from" type="QName" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;element name="privlist" minOccurs="0" maxOccurs="unbounded" xdb:maxOccurs="1"&gt;
          &lt;complexType&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
              &lt;element ref="xdbsc:privilege"/&gt;
              &lt;element ref="xdbsc:aggregatePrivilege"/&gt;
            &lt;/choice&gt;
          &lt;/complexType&gt;
        &lt;/element&gt;
        &lt;!-- this "any" contains all application specific information
             for a security class in general e.g. reason for creation  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="targetNamespace" type="anyURI" use="required"/&gt;
      &lt;!-- all privileges in this security class are under this target namespace --&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="aggregatePrivilege"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="title" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;sequence maxOccurs="unbounded"&gt;
          &lt;element name="privilegeRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="name" type="QName" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             an aggregate privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="privilege"&gt;
    &lt;complexType&gt;
      &lt;sequence minOccurs="0"&gt;
        &lt;element name="title" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;sequence minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;element name="columnRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="schema" type="string" use="required"/&gt;
              &lt;attribute name="table" type="string" use="required"/&gt;
              &lt;attribute name="column" type="string" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             for a privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  <span class="bold">&lt;element name="titleref"&gt;</span>
    <span class="bold">&lt;complexType&gt;</span>
      <span class="bold">&lt;simpleContent&gt;</span>
        <span class="bold">&lt;extension base="xs:string"&gt;</span>
          <span class="bold">&lt;attribute ref="xml:lang"/&gt;</span>
          <span class="bold">&lt;attribute ref="xdb:srclang"/&gt;</span>
        <span class="bold">&lt;/extension&gt;</span>
      <span class="bold">&lt;/simpleContent&gt;</span>
    <span class="bold">&lt;/complexType&gt;</span>
  <span class="bold">&lt;/element&gt;</span>
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFIHBA">Example 7-13</a> shows an instance document after translation of the title text.</p>
<div id="ADXDB4492" class="example">
<p class="titleinexample"><a id="CHDFIHBA"></a>Example 7-13 Translated Document</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  <span class="bold">&lt;title xdb:srclang="true"&gt;</span>
<span class="bold">Security Class Example</span>
  <span class="bold">&lt;/title&gt;</span>
  <span class="bold">&lt;title&gt;</span>
<span class="bold">Security Class Example - Spanish</span>
  <span class="bold">&lt;/title&gt;</span>
  <span class="bold">&lt;title&gt;</span>
<span class="bold">Security Class Example - French</span>
  <span class="bold">&lt;/title&gt;</span>    
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
  &lt;privlist&gt;
    &lt;privilege name="privilege1"/&gt;
    &lt;aggregatePrivilege name="iStorePOApprover"&gt;
      &lt;title&gt;
iStore Purchase Order Approver
      &lt;/title&gt;
      &lt;privilegeRef name="is:privilege1"/&gt;
      &lt;privilegeRef name="oa:submitPO"/&gt;
      &lt;privilegeRef name="oa:privilege3"/&gt;
    &lt;/aggregatePrivilege&gt;
    &lt;privilege name="privilege2"&gt;
      &lt;title&gt;
secondary privilege
      &lt;/title&gt;
      &lt;columnRef schema="APPS" table="PurchaseOrder" column="POId"/&gt;
      &lt;columnRef schema="APPS" table="PurchaseOrder" column="Amount"/&gt;
    &lt;/privilege&gt;
  &lt;/privlist&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" -->
<p>To make the title translatable in the case of a multi-valued element, you would set <code>xdb:maxOccurs</code> to <code>unbounded</code>. However, <code>xdb:translate</code> cannot be set to <code>true</code> for a multiple-valued element, unless there is an identifier attribute that uniquely identifies each element. <a href="#CHDFJJCI">Example 7-14</a> shows an XML schema that uses an identifier attribute <code>id</code> for the <code>title</code> element.</p>
<div id="ADXDB4493" class="example">
<p class="titleinexample"><a id="CHDFJJCI"></a>Example 7-14 XML Schema with Attribute xdb:translate for a Multi-Valued Element</p>
<pre>
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:xdbsc="http://xmlns.oracle.com/xdb/security.xsd"
        xmlns:xdb="http://xmlns.oracle.com/xdb.xsd"
        targetNamespace="http://xmlns.oracle.com/xdb/security.xsd"
        elementFormDefault="qualified" version="1.0"&gt;
&lt;xs:import namespace="http://www.w3.org/XML/1998/namespace"
        schemaLocation="http://www.w3.org/2001/xml.xsd"/&gt;
&lt;xs:import namespace-"http://xmlns.oracle.com/xdb"
        schemaLocation="http://xmlns.oracle.com/xdb/xmltr.xsd"/&gt;
  &lt;annotation&gt;
    &lt;documentation&gt;
This XML schema describes the structure of Security Class documents.
    &lt;/documentation&gt;
  &lt;/annotation&gt;
  &lt;element name="securityClass" xdb:defaultTable=""&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="name" type="string"/&gt;
        <span class="bold">&lt;element name="title" minOccurs="0" maxOccurs="unbounded" xdb:maxOccurs="1"/&gt;</span>
        &lt;element name="inherits-from" type="QName" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;element name="privlist" minOccurs="0" maxOccurs="unbounded" xdb:maxOccurs="1"&gt;
          &lt;complexType&gt;
            &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;
              &lt;element ref="xdbsc:privilege"/&gt;
              &lt;element ref="xdbsc:aggregatePrivilege"/&gt;
            &lt;/choice&gt;
          &lt;/complexType&gt;
        &lt;/element&gt;
        &lt;!-- this "any" contains all application specific information
             for a security class in general e.g. reason for creation  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="targetNamespace" type="anyURI" use="required"/&gt;
      &lt;!-- all privileges in this security class are under this target namespace --&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="aggregatePrivilege"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        <span class="bold">&lt;element name="titleref" minOccurs="0" maxOccurs="unbounded"</span>
                 <span class="bold">xdb:maxoccurs="unbounded" xdb:translate="true"/&gt;</span>
        &lt;sequence maxOccurs="unbounded"&gt;
          &lt;element name="privilegeRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="name" type="QName" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             an aggregate privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  &lt;element name="privilege"&gt;
    &lt;complexType&gt;
      &lt;sequence minOccurs="0"&gt;
        <span class="bold">&lt;element name="titleref" minOccurs="0" maxOccurs="unbounded"</span>
                 <span class="bold">xdb:maxoccurs="unbounded" xdb:translate="true"/&gt;</span>
        &lt;sequence minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;element name="columnRef"&gt;
            &lt;complexType&gt;
              &lt;attribute name="schema" type="string" use="required"/&gt;
              &lt;attribute name="table" type="string" use="required"/&gt;
              &lt;attribute name="column" type="string" use="required"/&gt;
            &lt;/complexType&gt;
          &lt;/element&gt;
          &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;/sequence&gt;
        &lt;!-- this "any" contains all application specific information   
             for a privilege e.g. translations  --&gt;
        &lt;any namespace="##other" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/sequence&gt;
      &lt;attribute name="name" type="string" use="required"/&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
  <span class="bold">&lt;element name="titleref"&gt;</span>
    <span class="bold">&lt;complexType&gt;</span>
      <span class="bold">&lt;simpleContent&gt;</span>
        <span class="bold">&lt;extension base="xs:string"&gt;</span>
          <span class="bold">&lt;attribute ref="xml:lang"/&gt;</span>
          <span class="bold">&lt;attribute ref="xdb:srclang"/&gt;</span>
          <span class="bold">&lt;attribute name="id" type="integer"/&gt;</span>
        <span class="bold">&lt;/extension&gt;</span>
      <span class="bold">&lt;/simpleContent&gt;</span>
    <span class="bold">&lt;/complexType&gt;</span>
  <span class="bold">&lt;/element&gt;</span>
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDDADAF">Example 7-15</a> shows a document associated with the XML schema in <a href="#CHDFJJCI">Example 7-14</a>.</p>
<div id="ADXDB4494" class="example">
<p class="titleinexample"><a id="CHDDADAF"></a>Example 7-15 Translated Document for an XML Schema with Multiple-Valued Elements</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  &lt;title&gt;
Security Class Example
  &lt;/title&gt;
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
  &lt;privlist&gt;
    &lt;privilege name="privilege1"/&gt;
    &lt;aggregatePrivilege name="iStorePOApprover"&gt;
      &lt;title&gt;
iStore Purchase Order Approver
      &lt;/title&gt;
      &lt;privilegeRef name="is:privilege1"/&gt;
      &lt;privilegeRef name="oa:submitPO"/&gt;
      &lt;privilegeRef name="oa:privilege3"/&gt;
    &lt;/aggregatePrivilege&gt;
    &lt;privilege name="privilege2"&gt;
      <span class="bold">&lt;title id="2" xdb:srclang="true"&gt;</span>
<span class="bold">secondary privilege - english</span>
      <span class="bold">&lt;/title&gt;</span>
      <span class="bold">&lt;title id="1"&gt;</span>
<span class="bold">primary privilege - french</span>
      <span class="bold">&lt;/title&gt;</span>
      <span class="bold">&lt;title id="1" xdb:srclang="true"&gt;</span>
<span class="bold">primary privilege - english</span>
      <span class="bold">&lt;/title&gt;</span>       
      &lt;columnRef schema="APPS" table="PurchaseOrder" column="POId"/&gt;
      &lt;columnRef schema="APPS" table="PurchaseOrder" column="Amount"/&gt;
    &lt;/privilege&gt;
  &lt;/privlist&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADXDB4495" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref670"></a>
<h3 class="sect2">Operations on Translated Documents</h3>
<p>You can perform the following operations on translated documents:</p>
<ul>
<li>
<p>Insert: You can insert a document into Oracle XML&nbsp;DB, if it conforms to an XML schema that supports translations. For the document that contains translations, you can either provide the language information or use the session language translation.</p>
<ul>
<li>
<p>When the document does not contain the language information and the <code>xml:lang</code> attribute is not set, the session language is used for translation. <a href="#CHDIDDDD">Example 7-16</a> describes a document with a session language of Japanese. Attribute <code>xml:lang</code> is set to <code>session language</code>, and attribute <code>xdb:srclang</code> is set to <code>true</code>.</p>
<div id="ADXDB4496" class="example">
<p class="titleinexample"><a id="CHDIDDDD"></a>Example 7-16 Inserting a Document with No Language Information</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  &lt;title&gt;
Security Class Example
  &lt;/title&gt;
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDJGBBF">Example 7-17</a> shows the document after it is inserted into Oracle XML&nbsp;DB Repository.</p>
<div id="ADXDB4497" class="example">
<p class="titleinexample"><a id="CHDJGBBF"></a>Example 7-17 Document After Insertion into the Repository</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  &lt;title xdb:srclang="true"&gt;
Security Class Example
  &lt;/title&gt;
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" --></li>
<li>
<p>When you provide the language information, you set attribute <code>xml:lang</code> by either explicitly marking a translation as <code>xdb:srclang=true</code> or using the session language translation in attribute <code>xdb:srclang</code>. If you do neither, then an arbitrary translation is picked, for which <code>xdb:srclang</code> is set to <code>true</code>.</p>
<p><a href="#CHDJDBBH">Example 7-18</a> describes a document with a session language of Japanese.</p>
<div id="ADXDB4498" class="example">
<p class="titleinexample"><a id="CHDJDBBH"></a>Example 7-18 Inserting a Document with Language Information</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  &lt;title <span class="bold">xml:lang="en"</span>&gt;
Security Class Example
  &lt;/title&gt;
  &lt;title <span class="bold">xml:lang="fr"</span>&gt;
Security Class Example - FR
  &lt;/title&gt;
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDCCBGE">Example 7-19</a> shows the document after it is inserted into Oracle XML&nbsp;DB Repository.</p>
<div id="ADXDB4499" class="example">
<p class="titleinexample"><a id="CHDCCBGE"></a>Example 7-19 Document After Insertion</p>
<pre>
&lt;securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
  &lt;name&gt;
securityClassExample
  &lt;/name&gt;
  &lt;title <span class="bold">xml:lang="en" xdb:srclang="true"</span>&gt;
Security Class Example
  &lt;/title&gt;
  &lt;title <span class="bold">xml:lang="fr"</span>&gt;
Security Class Example - FR
  &lt;/title&gt;
  &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
&lt;/securityClass&gt;
</pre></div>
<!-- class="example" --></li>
</ul>
</li>
<li>
<p>Query: If you query nodes that involve translated elements, the query displays the translation's default behavior. In order to specify that the translation's default behavior should be applied to the query result, you need to use the Oracle XPath function <code>ora:translate</code>. This is the syntax of the function:</p>
<pre>
Nodeset ora:translate(Nodeset <span class="italic">parent</span>, String <span class="italic">childname</span>, String <span class="italic">childnsp</span>)
</pre>
<p>Parameter <code><span class="codeinlineitalic">parent</span></code> is the parent node under which you want to search for the translated nodes; <code><span class="codeinlineitalic">childname</span></code> is the name of the child node; and <code><span class="codeinlineitalic">childnsp</span></code> is the namespace URL of the child node.</p>
<p>Function <code>ora:translate</code> returns a positive integer when the name of the parent node matches the name of the specified child node, and the <code>xml:lang</code> value is same as the session language or the language for which <code>xdb:srclang</code> is <code>true</code>.</p>
<p>When SQL functions such as <code>XMLQuery</code> are applied to translated documents, they return the session language translation, if present, or the source language translation, otherwise. For example, this query returns the session language translation:</p>
<pre>
SELECT XMLQuery('$x/ora:translate(securityClass, "title")'
                PASSING x.OBJECT_VALUE AS "x" RETURNING CONTENT)
  FROM some_table x;
</pre>
<p>This is the output of that query:</p>
<pre>
&lt;title&gt;
Security Class Example - FR
&lt;/title&gt;
</pre>
<p>To obtain the result in a particular language, specify it in the XPath expression.</p>
<pre>
SELECT XMLQuery('$x/securityClass/title[@xml:lang="en"]'
                PASSING x.OBJECT_VALUE AS "x" RETURNING CONTENT)
  FROM some_table x;
</pre>
<p>This is the output of that query:</p>
<pre>
&lt;title xdb:srclang="true"&gt;
Security Class Example
&lt;/title&gt;
</pre>
<p>Because you can store translated documents only as text (<code>CLOB</code>) or binary XML, only functional evaluation and queries with a function-based index, an <code>XMLIndex</code> index, or a <code>CONTEXT</code> index are possible. For <code>XMLIndex</code> index and <code>CONTEXT</code> index queries, if the document has a session language translation, then that is returned, otherwise the source language translation is returned. However, for queries with a function-based index, you need to create an index with an explicit <code>xml:lang</code> predicate for every language for which you want to use the index.</p>
<p>When you retrieve the complete document using SQL functions such as <code>XMLSerialize</code> and <code>XDBURIType</code>, only the translations that match the session language translations are returned. For protocols, you can set your language preferences, and the document is returned in that language only.</p>
<p>The following PL/SQL procedures and functions support XML translations:</p>
<ul>
<li>
<p><code>DBMS_XMLTRANSLATIONS.translateXML</code>: Translate a document to the specified language. If the specified language translation is present, it is returned, otherwise, the source language translation is returned.</p>
<p>For example, if you write <code>translateXML(doc, 'fr')</code> to specify French as the translation language for the <a href="#CHDCCBGE">Example 7-19</a>, it returns the following code and ignores all other translations:</p>
<pre>
securityClass xmlns="http://xmlns.oracle.com/xdb/security.xsd"
               xmlns:is="xmlns.oracle.com/iStore"
               xmlns:oa="xmlns.oracle.com/OracleApps"
               targetNamespace="xmlns.oracle.com/example"&gt;
    &lt;name&gt;
        securityClassExample
    &lt;/name&gt;
    &lt;title&gt;
        Security Class Example - FR
    &lt;/title&gt;
    &lt;inherits-from&gt;is:iStorePurchaseOrder&lt;/inherits-from&gt;
&lt;/securityClass&gt;
</pre></li>
<li>
<p><code>DBMS_XMLTRANSLATIONS.enableTranslation</code>, <code>DBMS_XMLTRANSLATIONS.disableTranslation</code>: Enable or disable translations at the session level. Queries work on the base document if the translation is disabled and on the translated document if it is enabled.</p>
</li>
<li>
<p><code>DBMS_XMLTRANSLATIONS.getBaseDocument</code>: Returns the entire document, with all of the translations.</p>
</li>
</ul>
</li>
<li>
<p>Update: You can use Oracle SQL function <code>updateXML</code> to update the translated nodes. However, an error is raised if you try to update a translated node without specifying the translation language. The following PL/SQL procedures support update operations on translated documents:</p>
<ul>
<li>
<p><code>DBMS_XMLTRANSLATIONS.updateTranslation</code>: This function updates the translation at a specified <code>xpath</code> in a particular language. If the translation in a particular language is not present, then it is inserted.</p>
</li>
<li>
<p><code>DBMS_XMLTRANSLATIONS.setSourceLang</code>: This procedure sets the source language at a specified xpath to the specified language.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1042421"></a>
<div id="ADXDB4500" class="sect1">
<h2 class="sect1">Creating XMLType <a id="sthref671"></a>Tables <a id="sthref672"></a>and Columns <a id="sthref673"></a>Based on XML Schemas</h2>
<p>Using Oracle XML&nbsp;DB, you can create <code>XMLType</code> tables and columns that are constrained to a global element defined by a registered XML schema. After an <code>XMLType</code> column has been constrained to a particular element and a particular XML schema, it can only contain documents that are compliant with the schema definition of that element. You constrain an <code>XMLType</code> table column to a particular element and XML schema by adding appropriate <code>XMLSCHEMA</code> and <code>ELEMENT</code> clauses to the <code>CREATE TABLE</code> operation.</p>
<p><a href="#i1044839">Figure 7-1</a> through <a href="#BJFBIIIA">Figure 7-4</a> show the syntax for creating an <code>XMLType</code> table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for the complete description of <code>CREATE TABLE</code>, including syntax elements such as <span class="syntaxinline">object_properties</span>.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
To create an <code>XMLType</code> table in a different database schema from your own, you must have not only privilege <code>CREATE ANY TABLE</code> but also privilege <code>CREATE ANY INDEX</code>. This is because a unique index is created on column <code>OBJECT_ID</code> when you create the table. Column <code>OBJECT_ID</code> stores a system-generated object identifier.</div>
<div id="ADXDB4501" class="figure">
<p class="titleinfigure"><a id="i1044839"></a>Figure 7-1 Creating an XMLType Table &ndash; CREATE TABLE</p>
<img width="652" height="91" src="img/create_table.gif" alt="Description of Figure 7-1 follows" /><br />
<a id="sthref674" href="img_text/create_table.htm">Description of "Figure 7-1 Creating an XMLType Table &ndash; CREATE TABLE"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="ADXDB4502" class="figure">
<p class="titleinfigure"><a id="sthref675"></a>Figure 7-2 Creating an XMLType Table &ndash; XMLType_table</p>
<img width="767" height="209" src="img/xmltype_table.gif" alt="Description of Figure 7-2 follows" /><br />
<a id="sthref676" href="img_text/xmltype_table.htm">Description of "Figure 7-2 Creating an XMLType Table &ndash; XMLType_table"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="ADXDB4503" class="figure">
<p class="titleinfigure"><a id="sthref677"></a>Figure 7-3 Creating an XMLType Table &ndash; table_properties</p>
<img width="800" height="237" src="img/table_properties.gif" alt="Description of Figure 7-3 follows" /><br />
<a id="sthref678" href="img_text/table_properties.htm">Description of "Figure 7-3 Creating an XMLType Table &ndash; table_properties"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="ADXDB4504" class="figure">
<p class="titleinfigure"><a id="BJFBIIIA"></a>Figure 7-4 Creating an XMLType Table &ndash; XMLType_virtual_columns</p>
<img width="482" height="58" src="img/xmltype_virtual_columns.gif" alt="Description of Figure 7-4 follows" /><br />
<a id="sthref679" href="img_text/xmltype_virtual_columns.htm">Description of "Figure 7-4 Creating an XMLType Table &ndash; XMLType_virtual_columns"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
For XML data, virtual columns are used primarily for partitioning or defining SQL constraints. If your need is to project out specific XML data in order to access it relationally, then consider using SQL/XML function <code>XMLTable</code> or <code>XMLIndex</code> with a structured component. See also:
<ul>
<li>
<p><a href="xdb03usg.htm#CHDJHDBI">"Partitioning or Constraining Binary XML Data using Virtual Columns"</a></p>
</li>
<li>
<p><a href="xdb_xquery.htm#BABJCHCC">"XMLTABLE SQL/XML Function in Oracle XML&nbsp;DB"</a></p>
</li>
<li>
<p><a href="xdb_indexing.htm#BCGCBDHH">"XMLIndex Structured Component"</a></p>
</li>
</ul>
</div>
<p>A subset of the XPointer notation can also be used to provide a single URL that contains the XML schema location and element name. See also <a href="xdb04cre.htm#g1050045">Chapter 4, "XMLType Operations"</a>.</p>
<p><a href="#CHDDJDBD">Example 7-20</a> shows two <code>CREATE TABLE</code> statements. The first creates <code>XMLType</code> table <code>purchaseorder_as_table</code>. The second creates relational table <code>purchaseorder_as_column</code>, which has <code>XMLType</code> column <code>xml_document</code>. In each table, the <code>XMLType</code> instance is constrained to the <code>PurchaseOrder</code> element that is defined by the XML schema registered with URL <code>http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd</code>.</p>
<div id="ADXDB4505" class="example">
<p class="titleinexample"><a id="CHDDJDBD"></a>Example 7-20 Creating XML Schema-Based XMLType Tables and Columns</p>
<pre>
CREATE TABLE purchaseorder_as_table <span class="bold">OF XMLType</span>
  XMLSCHEMA "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
  ELEMENT "PurchaseOrder";

CREATE TABLE purchaseorder_as_column (id NUMBER, xml_document <span class="bold">XMLType</span>)
  XMLTYPE COLUMN xml_document
  ELEMENT
    "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd#PurchaseOrder";
</pre></div>
<!-- class="example" -->
<p>There are two ways to specify <code>XMLSchema</code> and <code>Element</code>:</p>
<ul>
<li>
<p>as separate clauses, <code>XMLSchema</code> and <code>Element</code></p>
</li>
<li>
<p>using only the <code>Element</code> clause with an XPointer notation</p>
</li>
</ul>
<p>The data associated with an <code>XMLType</code> table or column that is constrained to an XML schema can be stored in different ways:</p>
<ul>
<li>
<p>Decomposed and stored object-relationally (structured storage)</p>
</li>
<li>
<p>Stored as text, using a single <code>CLOB</code> column (unstructured storage)</p>
</li>
<li>
<p>Stored as binary XML, using a single binary-XML column (binary XML storage)</p>
</li>
</ul>
<div id="ADXDB4506" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref680"></a>
<h3 class="sect2">Specifying XMLType Storage Optio<a id="sthref681"></a>ns for XML Schema-Based Data</h3>
<p>You can specify storage options to use when you manually create a table that stores XML instance documents that reference an XML schema. To specify a particular <code>XMLType</code> storage model, use a <code>STORE AS</code> clause in the <a id="sthref682"></a><code>CREATE TABLE</code> statement. Otherwise, the storage model specified during registration of the XML schema is used. If no storage model was specified during registration, then object-relational storage is used.</p>
<p>This section describes what you need to know about specifying storage options for XML schema-based data. You can also specify storage options for tables that are created automatically, by using XML schema annotations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1030452">"Oracle XML Schema Annotations"</a></div>
<div id="ADXDB4507" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref683"></a>
<h4 class="sect3">Binary XML Storage of XML Schema-Based Data</h4>
<p>If you specify <code>STORE AS BINARY_XML</code>, then binary XML storage is used. If you specify an XML schema that the XML documents must conform to, then you can use that XML schema only to create <code>XMLType</code> tables and columns that are stored as binary XML. You <span class="italic">cannot</span> use the same XML schema to create <code>XMLType</code> tables and columns that are stored object-relationally or as <code>CLOB</code> instances.</p>
<p>The converse is also true: If you use a storage model other than binary XML for the registered XML schema, then you can use only that XML schema to create <code>XMLType</code> tables and columns that are <span class="italic">not</span> stored object-relationally or as <code>CLOB</code> instances.</p>
<p>Binary XML storage offers a great deal of flexibility for XML data, especially concerning the use of XML schemas. Binary XML encodes XML data differently, depending upon whether or not an XML schema is used for the encoding, and it can encode the same data differently using different XML schemas.</p>
<p>When an XML schema is taken into account for encoding binary XML data, the XML Schema data types are mapped to encoded types for storage. Alternatively, you can encode XML data as non-schema-based binary XML, whether or not the data references an XML schema. In that case, any referenced XML schema is ignored, and there is no encoding of XML Schema data types.</p>
<p>When you create an <code>XMLType</code> table or column and you use binary XML storage, you can specify how to encode the column or table to make use of XML schemas. Choose from among these possibilities:</p>
<ul>
<li>
<p>Encode the column or table data as <span class="italic">non-schema-based</span> binary XML. The XML data stored in the column can nevertheless conform to an XML schema, but it need not. Any referenced XML schema is ignored for encoding purposes, and documents are not automatically validated when they are inserted or updated.</p>
<p>You can nevertheless explicitly validate an XML schema-based document that is encoded as non-schema-based binary XML. This represents an important use case: situations where you do not want to tie documents too closely to a particular XML schema, because you might change it or delete it.</p>
</li>
<li>
<p>Encode the column or table data to conform to a <span class="italic">single XML schema</span>. All rows (documents) must conform to the same XML schema. You can nevertheless specify, as an option, that non-schema-based documents can also be stored in the same column.</p>
</li>
<li>
<p>Encode the column or table data to conform to whatever XML schema it references Each row (document) can reference <span class="italic">any XML schema</span>, and that XML schema is used to encode that particular XML document. In this case also, you can specify, as an option, that non-schema-based documents can also be stored in the same column.</p>
<p>You can use multiple <span class="italic">versions</span> of the same XML schema in this way. Store documents that conform to different versions. Each is encoded according to the XML schema that it references.</p>
</li>
</ul>
<p>You can specify that any XML schema can be used for encoding by using option <code>ALLOW ANYSCHEMA</code> when you create the table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>If you use option <code>ALLOW ANYSCHEMA</code>, then any XML schema referenced by your instance documents is used <span class="italic">only for validation</span>. It is <span class="italic">not</span> used at query time. Queries of your data treat it as if it were non XML schema-based data.</p>
</li>
<li>
<p>Oracle recommends that you do <span class="italic">not</span> use option <code>ALLOW ANYSCHEMA</code> if you anticipate using copy-based XML schema evolution (see <a href="xdb07evo.htm#BCGBHJEC">"Using Copy-Based Schema Evolution"</a>). If you use this option, it is impossible to determine which rows (documents) might conform to the XML schema that is evolved. Conforming rows are not transformed during copy-based evolution, and afterward they are not decodable.</p>
</li>
</ul>
</div>
<p>You can specify, for tables and columns that use XML schema-based encodings, that they can accept also non-schema-based documents by using option <code>ALLOW NONSCHEMA</code>. In the absence of keyword <code>XMLSCHEMA</code>, encoding is for non-schema-based documents. In the absence of the keywords <code>ALLOW NONSCHEMA</code> but the presence of keyword <code>XMLSCHEMA</code>, encoding is for the single XML schema specified. In the absence of the keywords <code>ALLOW NONSCHEMA</code> but the presence of the keywords <code>ALLOW ANYSCHEMA</code>, encoding is for any XML schema that is referenced.</p>
<p>An error is raised if you try to insert an XML document into an <code>XMLType</code> table or column that does not correspond to the document.</p>
<p>The various possibilities are summarized in <a href="#CHDIAFJH">Table 7-2</a>.</p>
<div id="ADXDB4508" class="tblformal">
<p class="titleintable"><a id="sthref684"></a><a id="CHDIAFJH"></a>Table 7-2 <a id="sthref685"></a>CREATE TABLE Encoding Options for Binary XML</p>
<table class="cellalignment1026" title="CREATE TABLE Encoding Options for Binary XML" summary="CREATE TABLE Encoding Options for Binary XML" dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t31">Storage Options</th>
<th class="cellalignment1027" id="r1c2-t31">Encoding Effect</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t31" headers="r1c1-t31">
<pre>
STORE AS BINARY XML
</pre></td>
<td class="cellalignment1028" headers="r2c1-t31 r1c2-t31">
<p>Encodes all documents using the non-schema-based encoding.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t31" headers="r1c1-t31">
<pre>
STORE AS BINARY XML
 XMLSCHEMA ...
</pre></td>
<td class="cellalignment1028" headers="r3c1-t31 r1c2-t31">
<p>Encodes all documents using an encoding based on the referenced XML schema.</p>
<p>Trying to insert or update a document that does not conform to the XML schema raises an error.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t31" headers="r1c1-t31">
<pre>
STORE AS BINARY XML
 XMLSCHEMA ...
 ALLOW NONSCHEMA
</pre></td>
<td class="cellalignment1028" headers="r4c1-t31 r1c2-t31">
<p>Encodes all XML schema-based documents using an encoding based on the referenced XML schema. Encodes all non-schema-based documents using the non-schema-based encoding.</p>
<p>Trying to insert or update an XML schema-based document that does not conform to the referenced XML schema raises an error.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t31" headers="r1c1-t31">
<pre>
STORE AS BINARY XML
 ALLOW ANYSCHEMA
</pre></td>
<td class="cellalignment1028" headers="r5c1-t31 r1c2-t31">
<p>Encodes all XML schema-based documents using an encoding based on the XML schema referenced by the document.</p>
<p>Trying to insert or update a document that does not reference a registered XML schema or that does not conform to the XML schema it references raises an error.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t31" headers="r1c1-t31">
<pre>
STORE AS BINARY XML
 ALLOW ANYSCHEMA
 ALLOW NONSCHEMA
</pre></td>
<td class="cellalignment1028" headers="r6c1-t31 r1c2-t31">
<p>Encodes all XML schema-based documents using an encoding based on the XML schema referenced by the document. Encodes all non-schema-based documents using the non-schema-based encoding.</p>
<p>Trying to insert or update an XML schema-based document that does not conform to the registered XML schema it references raises an error.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
If you use <code>CREATE TABLE</code> with <code>ALLOW NONSCHEMA</code> but not <code>ALLOW ANYSCHEMA</code>, then all documents, even XML schema-based documents, are encoded using the non-schema-based encoding. If you later use <code>ALTER TABLE</code> with <code>ALLOW ANYSCHEMA</code> on the same table, this has no effect on the encoding of documents that were stored prior to the <code>ALTER TABLE</code> operation&thinsp;&mdash;&thinsp;all such documents continue to be encoded using the non-schema-based encoding, regardless of whether they reference an XML schema. Only XML schema-based documents that you insert in the table after the <code>ALTER TABLE</code> operation are encoded using XML schema-based encodings.</div>
</div>
<!-- class="sect3" -->
<div id="ADXDB4509" class="sect3"><a id="sthref686"></a>
<h4 class="sect3">Unstructured Storage of XML Schema-Based Data</h4>
<p>You use <code>STORE AS CLOB</code> during table creation to specify unstructured storage. In this case, an entire XML document is stored in a single <code>CLOB</code> column.</p>
<p><a href="#BJFGEGDC">Example 7-21</a> shows how to create an <code>XMLType</code> table and a table with an <code>XMLType</code> column, where the contents of the <code>XMLType</code> are constrained to a global element defined by a registered XML schema, and the contents of the <code>XMLType</code> are stored using a single <code>CLOB</code> column.</p>
<div id="ADXDB4510" class="example">
<p class="titleinexample"><a id="BJFGEGDC"></a>Example 7-21 Specifying <a id="sthref687"></a><a id="sthref688"></a><a id="sthref689"></a>CLOB Storage for Schema-Based XMLType Tables and Columns</p>
<pre>
CREATE TABLE purchaseorder_as_table OF XMLType
  XMLTYPE <span class="bold">STORE AS CLOB</span>
  XMLSCHEMA "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
  ELEMENT "PurchaseOrder";
 
CREATE TABLE purchaseorder_as_column (id NUMBER, xml_document XMLType)
  XMLTYPE COLUMN xml_document
  <span class="bold">STORE AS CLOB</span>
  XMLSCHEMA "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
  ELEMENT "PurchaseOrder";
</pre></div>
<!-- class="example" -->
<p>You can add LOB storage parameters to the <code>STORE AS CLOB</code> clause.</p>
</div>
<!-- class="sect3" -->
<a id="BJFGEHAJ"></a>
<div id="ADXDB4511" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Structured Storage of XML Schema-Based Data</h4>
<p>With structured storage, collections are mapped into SQL varray values. An XML <span class="glossaryterm"><a id="sthref690"></a>collection</span> is any element that has <code>maxOccurs</code> &gt; 1, allowing it to appear multiple times. By default, the entire contents of such a varray is stored as a set of rows in an ordered collection table (OCT).</p>
<p><a href="#BJFGGABH">Example 7-22</a> illustrates specifying additional storage options. The <code>LineItem</code> collection varray is stored as a LOB, not as a table. <code>USERS</code> is the tablespace used for storing element <code>Notes</code>. The table is <a id="sthref691"></a>compressed for online transaction processing (OLTP).</p>
<div id="ADXDB4512" class="example">
<p class="titleinexample"><a id="BJFGGABH"></a>Example 7-22 Specifying Structured Storage Options for XMLType Tables and Columns</p>
<pre>
CREATE TABLE purchaseorder_as_table 
  OF XMLType (UNIQUE ("XMLDATA"."Reference"),
              FOREIGN KEY ("XMLDATA"."User") REFERENCES hr.employees (email))
ELEMENT
  "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd#PurchaseOrder"
  <span class="bold">VARRAY</span> "XMLDATA"."LineItems"."LineItem" <span class="bold">STORE AS LOB</span> lineitem_lob
  <span class="bold">LOB</span> ("XMLDATA"."Notes")
    <span class="bold">STORE AS</span> (TABLESPACE USERS ENABLE STORAGE IN ROW 
              STORAGE(INITIAL 4K NEXT 32K))
    <span class="bold">COMPRESS FOR OLTP</span>;

CREATE TABLE purchaseorder_as_column (
  id NUMBER,
  xml_document XMLType,
  UNIQUE (xml_document."XMLDATA"."Reference"),
  FOREIGN KEY (xml_document."XMLDATA"."User") REFERENCES hr.employees (email))
  XMLTYPE COLUMN xml_document
  XMLSCHEMA "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
  ELEMENT "PurchaseOrder"
  <span class="bold">VARRAY</span> xml_document."XMLDATA"."LineItems"."LineItem" <span class="bold">STORE AS LOB</span> lineitem_lob
  <span class="bold">LOB</span> (xml_document."XMLDATA"."Notes")
    <span class="bold">STORE AS</span> (TABLESPACE USERS ENABLE STORAGE IN ROW 
              STORAGE(INITIAL 4K NEXT 32K))
    <span class="bold">COMPRESS FOR OLTP</span>;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
In releases prior to Oracle Database&nbsp;11<span class="italic">g</span>R2, the default behavior for <code>CREATE TABLE</code> was to store a collection using a varray stored as a LOB, not a varray stored as a table.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
When compression is specified for a parent <code>XMLType</code> table or column, all descendant <code>XMLType</code> ordered collection tables (OCTs) are similarly compressed.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1030452">"Oracle XML Schema Annotations"</a> for information about specifying storage options by using XML schema annotations</p>
</li>
<li>
<p><a class="olink SQLRF54484" href="../../server.112/e41084/statements_7002.htm#SQLRF54484"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about compression for OLTP</p>
</li>
</ul>
</div>
<p>As a convenience, if you need to specify that <span class="italic">all</span> varrays in an <code>XMLType</code> table or column are to be stored as LOBs, or all are to be stored as tables, then you can use the syntax clause <code>STORE ALL VARRAYS AS</code>, followed by <code>LOBS</code> or <code>TABLES</code>, respectively. This is a convenient alternative to using multiple <code>VARRAY</code>...<code>STORE AS</code> clauses, one for each collection. <a href="#BJFCHIJH">Example 7-23</a> illustrates this.</p>
<div id="ADXDB5836" class="example">
<p class="titleinexample"><a id="BJFCHIJH"></a>Example 7-23 Using STORE ALL VARRAYS AS</p>
<pre>
CREATE TABLE purchaseorder_as_table OF XMLType (UNIQUE ("XMLDATA"."Reference"),
  FOREIGN KEY ("XMLDATA"."User") REFERENCES hr.employees (email))
  ELEMENT
    "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd#PurchaseOrder"
  <span class="bold">STORE ALL VARRAYS AS LOBS</span>;
</pre></div>
<!-- class="example" -->
<p>The storage method specified using <code>STORE ALL VARRAYS AS</code> overrides any storage method specified using <code>xdb:storeVarrayAsTable</code> in the corresponding XML schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#CHDGFDFA">"Controlling How Collections Are Stored for Object-Relational XMLType Storage"</a> for information about collection storage using default tables</p>
</li>
<li>
<p><a class="olink SQLRF01709" href="../../server.112/e41084/statements_7002.htm#SQLRF01709"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about using <code>STORE ALL VARRAYS AS LOBS</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDGJGIB"></a>
<div id="ADXDB4513" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Specifying Relational <a id="sthref692"></a>Constraints on XMLType Tables and Columns</h3>
<p>When you store XML data using structured storage, typical relational constraints can be specified for elements and attributes that occur only once in an XML document. <a href="#BJFGGABH">Example 7-22</a> shows how to use object-relational notation to define a unique constraint and a foreign key constraint when creating the table.</p>
<p>It is not possible to define constraints for <code>XMLType</code> tables and columns that make use of unstructured storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#CHDJHDBI">"Partitioning or Constraining Binary XML Data using Virtual Columns"</a> for how to define constraints on XML data stored as binary XML</p>
</li>
<li>
<p><a href="xdb06stt.htm#BABIHCII">"Adding Unique Constraints to the Parent Element of an Attribute"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1030452"></a>
<div id="ADXDB4514" class="sect1">
<h2 class="sect1">Oracle XML Sc<a id="sthref693"></a>hema <a id="sthref694"></a><a id="sthref695"></a>Annotations</h2>
<p>You can annotate XML schemas to influence the objects and tables that are generated by the XML schema registration process. You do this by adding Oracle-specific attributes to <code>complexType</code>, <code>element</code>, and <code>attribute</code> definitions that are declared by the XML schema.</p>
<p>Most XML attributes used by Oracle XML&nbsp;DB belong to the namespace <code>http://xmlns.oracle.com/xdb</code>. XML attributes used for encoding XML data as binary XML belong to the namespace <code>http://xmlns.oracle.com/2004/CSX</code>. To simplify the process of annotating an XML schema, Oracle recommends that you declare namespace prefixes in the root element of the XML schema.</p>
<div id="ADXDB4515" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref696"></a>
<h3 class="sect2">Common Uses of XML Schema Annotations</h3>
<p>Common reasons for wanting to annotate an XML schema include the following:</p>
<ul>
<li>
<p>To ensure that the names of the tables, objects, and object attributes created by PL/SQL procedure <code>DBMS_XMLSCHEMA.registerSchema</code> for structured storage of XML data are easy to recognize and compliant with any application-naming standards. Set parameter <code>GENTYPES</code> or <code>GENTABLES</code> to <code>TRUE</code> for this.</p>
</li>
<li>
<p>To map between the XML schema and existing objects and tables within the database. Set parameter <code>GENTYPES</code> or <code>GENTABLES</code> to <code>FALSE</code> for this.</p>
</li>
<li>
<p>To prevent the generation of mixed-case names that require the use of quoted identifiers when working directly with SQL.</p>
</li>
<li>
<p>To allow XPath rewrite for structured storage in the case of document-correlated recursive XPath queries. This applies to certain applications of SQL/XML access and query functions whose XQuery-expression argument targets recursive XML data.</p>
</li>
</ul>
<p>The most commonly used XML schema annotations are the following:</p>
<ul>
<li>
<p><code><a id="sthref697"></a><a id="sthref698"></a><a id="sthref699"></a>xdb:defaultTable</code> &ndash; Name of the default table generated for each global element when parameter <code>GENTABLES</code> is <code>TRUE</code>. Setting this to the empty string, <code><span class="codeinlinebold">""</span></code>, prevents a default table from being generated for the element in question.</p>
</li>
<li>
<p><code><a id="sthref700"></a><a id="sthref701"></a><a id="sthref702"></a>xdb:SQLName</code> &ndash; Name of the SQL object attribute that corresponds to each element or attribute defined in the XML schema.</p>
</li>
<li>
<p><code><a id="sthref703"></a><a id="sthref704"></a><a id="sthref705"></a>xdb:SQLType</code> &ndash; For <code>complexType</code> definitions, the corresponding object type. For <code>simpleType</code> definitions, <code>SQLType</code> is used to override the default mapping between XML schema data types and SQL data types. A common use of <code>SQLType</code> is to define when unbounded strings should be stored as <code>CLOB</code> values, rather than as <code>VARCHAR(4000) CHAR</code> values (the default). Note: You cannot use data type <code>NCHAR</code>, <code>NVARCHAR</code>, or <code>NCLOB</code> as the value of a <code>SQLType</code> annotation.</p>
</li>
<li>
<p><code><a id="sthref706"></a><a id="sthref707"></a><a id="sthref708"></a>xdb:SQLCollType</code> &ndash; Used to specify the varray type that manages a collection of elements.</p>
</li>
<li>
<p><code><a id="sthref709"></a><a id="sthref710"></a><a id="sthref711"></a>xdb:maintainDOM</code> &ndash; Used to determine whether or not DOM fidelity should be maintained for a given <code>complexType</code> definition</p>
</li>
<li>
<p><code><a id="sthref712"></a><a id="sthref713"></a><a id="sthref714"></a>xdb:storeVarrayAsTable</code> &ndash; Specified in the root element of the XML schema. Used to force all collections to be stored as ordered collection tables (OCTs). An OCT is created for each element that is specified with <code>maxOccurs &gt; 1</code>. The OCTs are created with system-generated names. The default value of <code>storeVarrayAsTable</code> is <code>true</code>.</p>
</li>
</ul>
<p>You need not specify values for any of these attributes. Oracle XML&nbsp;DB provides appropriate values by default during the XML schema registration process. However, if you are using structured storage, then Oracle recommends that you specify the names of at least the top-level SQL types, so that you can reference them later.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4516" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref715"></a>
<h3 class="sect2">XML Schema Annotation Example</h3>
<p><a href="#BJFBCHGH">Example 7-24</a> shows a partial listing of the XML schema in <a href="#BJFIDIFB">Example 7-1</a>, modified to include some of the most important Oracle XML&nbsp;DB annotations.</p>
<div id="ADXDB4517" class="example">
<p class="titleinexample"><a id="BJFBCHGH"></a>Example 7-24 Using Common Schema Annotations</p>
<pre>
&lt;xs:schema
  targetNamespace="http://xmlns.oracle.com/xdb/documentation/purchaseOrder"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xdb="http://xmlns.oracle.com/xdb"
  xmlns:po="http://xmlns.oracle.com/xdb/documentation/purchaseOrder"
  version="1.0" 
  <span class="bold">xdb:storeVarrayAsTable</span>="true"&gt;  &lt;xs:element name="PurchaseOrder" type="po:PurchaseOrderType"
              <span class="bold">xdb:defaultTable</span>="PURCHASEORDER"/&gt;
  &lt;xs:complexType name="PurchaseOrderType" <span class="bold">xdb:SQLType</span>="PURCHASEORDER_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Reference" type="po:ReferenceType" minOccurs="1"
                  <span class="bold">xdb:SQLName</span>="REFERENCE"/&gt;
      &lt;xs:element name="Actions" type="po:ActionsType"
                  <span class="bold">xdb:SQLName</span>="ACTION_COLLECTION"/&gt;
      &lt;xs:element name="Reject" type="po:RejectionType" minOccurs="0"/&gt;
      &lt;xs:element name="Requestor" type="po:RequestorType"/&gt;
      &lt;xs:element name="User" type="po:UserType" minOccurs="1"
                  <span class="bold">xdb:SQLName</span>="EMAIL"/&gt;
      &lt;xs:element name="CostCenter" type="po:CostCenterType"/&gt;
      &lt;xs:element name="ShippingInstructions"
                  type="po:ShippingInstructionsType"/&gt;
      &lt;xs:element name="SpecialInstructions" type="po:SpecialInstructionsType"/&gt;
      &lt;xs:element name="LineItems" type="po:LineItemsType"
                  <span class="bold">xdb:SQLName</span>="LINEITEM_COLLECTION"/&gt;
      &lt;xs:element name="Notes" type="po:NotesType" <span class="bold">xdb:SQLType</span>="CLOB"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemsType" <span class="bold">xdb:SQLType</span>="LINEITEMS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="LineItem" type="po:LineItemType" maxOccurs="unbounded"
                  <span class="bold">xdb:SQLCollType</span>="LINEITEM_V" <span class="bold">xdb:SQLName</span>="LINEITEM_VARRAY"/&gt;
   &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemType" <span class="bold">xdb:SQLType</span>="LINEITEM_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Description" type="po:DescriptionType"/&gt;
      &lt;xs:element name="Part" type="po:PartType"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="ItemNumber" type="xs:integer"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PartType" <span class="bold">xdb:SQLType</span>="PART_T" <span class="bold">xdb:maintainDOM</span>="false"&gt;
    &lt;xs:attribute name="Id"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:minLength value="10"/&gt;
          &lt;xs:maxLength value="14"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name="Quantity" type="po:moneyType"/&gt;
    &lt;xs:attribute name="UnitPrice" type="po:quantityType"/&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" -->
<p>The <code>schema</code> element includes the declaration of the <code>xdb</code> namespace. It also includes the annotation <code>xdb:storeVarrayAsTable = "true"</code> (which is the default value). This causes all collections within the XML schema to be managed using ordered collection tables (OCTs).</p>
<p>The definition of global element <code>PurchaseOrder</code> includes a <code>defaultTable</code> annotation that specifies that the name of the default table associated with this element is <code>purchaseorder</code>.</p>
<p>The definition of global complex type <code>PurchaseOrderType</code> includes a <code>SQLType</code> annotation that specifies that the generated SQL object type is named <code>purchaseorder_t</code>. Within the definition of this type, the following annotations are used:</p>
<ul>
<li>
<p>The definition of element <code>Reference</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>Reference</code> is named <code>reference</code>.</p>
</li>
<li>
<p>The definition of element <code>Actions</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>Actions</code> is named <code>action_collection</code>.</p>
</li>
<li>
<p>The definition of element <code>USER</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>User</code> is named <code>email</code>.</p>
</li>
<li>
<p>The definition of element <code>LineItems</code> includes a <code>SQLName</code> annotation that specifies that the SQL attribute corresponding to XML element <code>LineItems</code> is named <code>lineitem_collection</code>.</p>
</li>
<li>
<p>The definition of element <code>Notes</code> includes a <code>SQLType</code> annotation that specifies that the data type of the SQL attribute corresponding to XML element <code>Notes</code> is <code>CLOB</code>.</p>
</li>
</ul>
<p>The definition of global complex type <code>LineItemsType</code> includes a <code>SQLType</code> annotation that specifies that the generated SQL object type is named <code>lineitems_t</code>. Within the definition of this type, the following annotations are used:</p>
<ul>
<li>
<p>The definition of element <code>LineItem</code> includes a <code>SQLName</code> annotation that specifies that the data type of the SQL attribute corresponding to XML element <code>LineItems</code> is named <code>lineitem_varray</code>, and a <code>SQLCollName</code> annotation that specifies that the SQL object type that manages the collection is named <code>lineitem_v</code>.</p>
</li>
</ul>
<p>The definition of global complex type <code>LineItemType</code> includes a <code>SQLType</code> annotation that specifies that generated SQL object type is named <code>lineitem_t</code>.</p>
<p>The definition of complex type <code>PartType</code> includes a <code>SQLType</code> annotation that specifies that the SQL object type is named <code>part_t</code>. It also includes the annotation <code>xdb:maintainDOM = "false"</code>, specifying that there is no need for Oracle XML&nbsp;DB to maintain DOM fidelity for elements based on this data type.</p>
<p><a href="#BJFGEIHH">Example 7-25</a> shows some of the tables and objects that are created when the annotated XML schema is registered.</p>
<div id="ADXDB4518" class="example">
<p class="titleinexample"><a id="BJFGEIHH"></a>Example 7-25 Registering an Annotated XML Schema</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
    SCHEMADOC =&gt; bfilename('XMLDIR', 'purchaseOrder.Annotated.xsd'),
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE,
    GENTABLES =&gt; TRUE,
    CSID      =&gt; nls_charset_id('AL32UTF8'));
END;
/
 
SELECT table_name, xmlschema, element_name FROM USER_XML_TABLES;
 
TABLE_NAME     XMLSCHEMA                             ELEMENT_NAME
-------------  -----------------------------------   -------------
PURCHASEORDER  http://xmlns.oracle.com/xdb/documen   PurchaseOrder
               tation/purchaseOrder.xsd              
 
1 row selected.
 
DESCRIBE <span class="bold">purchaseorder</span>

Name                            Null? Type
------------------------------  ----- -----------------
TABLE of SYS.XMLTYPE(XMLSchema
 "http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd"
 ELEMENT "PurchaseOrder") STORAGE Object-relational TYPE "PURCHASEORDER_T"
 
DESCRIBE <span class="bold">purchaseorder_t</span>

PURCHASEORDER_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
REFERENCE                  VARCHAR2(30 CHAR)
ACTION_COLLECTION          ACTIONS_T
REJECT                     REJECTION_T
REQUESTOR                  VARCHAR2(128 CHAR)
EMAIL                      VARCHAR2(10 CHAR)
COSTCENTER                 VARCHAR2(4 CHAR)
SHIPPINGINSTRUCTIONS       SHIPPING_INSTRUCTIONS_T
SPECIALINSTRUCTIONS        VARCHAR2(2048 CHAR)
LINEITEM_COLLECTION        LINEITEMS_T
Notes                      CLOB

DESCRIBE <span class="bold">lineitems_t</span>
LINEITEMS_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
LINEITEM_VARRAY            LINEITEM_V

DESCRIBE <span class="bold">lineitem_v</span>

LINEITEM_V VARRAY(2147483647) OF LINEITEM_T
LINEITEM_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
SYS_XDBPD$                 XDB.XDB$RAW_LIST_T
ITEMNUMBER                 NUMBER(38)
DESCRIPTION                VARCHAR2(256 CHAR)
PART                       PART_T

DESCRIBE <span class="bold">part_t</span>
 
PART_T is NOT FINAL
Name                 Null? Type
-------------------- ----- --------------------------
ID                         VARCHAR2(14 CHAR)
QUANTITY                   NUMBER(12,2)
UNITPRICE                  NUMBER(8,4)

SELECT table_name, parent_table_column FROM USER_NESTED_TABLES
  WHERE parent_table_name = 'purchaseorder';

TABLE_NAME                       PARENT_TABLE_COLUMN
----------                       -----------------------   
SYS_NTNOHV+tfSTRaDTA9FETvBJw==   "XMLDATA"."LINEITEM_COLLECTION"."LINEITEM_VARRAY"
SYS_NTV4bNVqQ1S4WdCIvBK5qjZA==   "XMLDATA"."ACTION_COLLECTION"."ACTION_VARRAY"
 
2 rows selected.
</pre></div>
<!-- class="example" -->
<p>The following are results of this XML schema registration:</p>
<ul>
<li>
<p>A table called <code>purchaseorder</code> was created.</p>
</li>
<li>
<p>Types called <code>purchaseorder_t</code>, <code>lineitems_t</code>, <code>lineitem_v</code>, <code>lineitem_t</code>, and <code>part_t</code> were created. The attributes defined by these types are named according to supplied the <code>SQLName</code> annotations.</p>
</li>
<li>
<p>The <code>Notes</code> attribute defined by <code>purchaseorder_t</code> is of data type <code>CLOB</code>.</p>
</li>
<li>
<p>Type <code>part_t</code> does not include a positional descriptor (PD) attribute.</p>
</li>
<li>
<p>Ordered collection tables (OCTs) were created to manage the collections of <code>LineItem</code> and <code>Action</code> elements.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BJFIGGAF"></a>
<div id="ADXDB4519" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Available Oracle XML&nbsp;DB XML Schema Annotations</h3>
<p><a href="#g1048403">Table 7-3</a>, <a href="#CHDCHIHD">Table 7-4</a>, and <a href="#CHDBFCID">Table 7-5</a> list Oracle XML&nbsp;DB annotations that you can specify in element and attribute declarations. All annotations except those that have the prefix <code>csx</code> are applicable to XML schemas registered for structured storage. This includes the portions of hybrid storage that are stored object-relationally.</p>
<p>The following annotations apply to XML schemas that are registered for unstructured storage:</p>
<ul>
<li>
<p><code>xdb:defaultTable</code></p>
</li>
<li>
<p><code>xdb:defaultTableSchema</code></p>
</li>
</ul>
<p>The following annotations apply to XML schemas that are registered for binary XML storage:</p>
<ul>
<li>
<p><code>xdb:defaultTable</code></p>
</li>
<li>
<p><code>xdb:defaultTableSchema</code></p>
</li>
<li>
<p><code>xdb:tableProps</code></p>
</li>
</ul>
<div id="ADXDB4520" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref716"></a><a id="g1048403"></a>Table 7-3 Annotations in Elements</p>
<table class="cellalignment1032" title="Annotations in Elements " summary="This table lists attributes you can specify in elements, with Oracle XML DB." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t38">Attribute</th>
<th class="cellalignment1027" id="r1c2-t38">Values</th>
<th class="cellalignment1027" id="r1c3-t38">Default</th>
<th class="cellalignment1027" id="r1c4-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref717"></a><a id="sthref718"></a><a id="sthref719"></a>xdb:columnProps</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t38 r1c2-t38">
<p>Any column storage clause</p>
</td>
<td class="cellalignment1028" headers="r2c1-t38 r1c3-t38">
<p><code>NULL</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t38 r1c4-t38">
<p>Specifies the <code>COLUMN</code> storage clause that is inserted into the default <code>CREATE TABLE</code> statement. It is useful mainly for elements that get mapped to SQL tables, namely top-level element declarations and out-of-line element declarations.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref720"></a><a id="sthref721"></a><a id="sthref722"></a>xdb:defaultTable</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t38 r1c2-t38">
<p>Any table name</p>
</td>
<td class="cellalignment1028" headers="r3c1-t38 r1c3-t38">
<p>Based on element name</p>
</td>
<td class="cellalignment1028" headers="r3c1-t38 r1c4-t38">
<p>Specifies the name of the SQL table into which XML instances of this XML schema are stored. This is most useful in cases where the XML data is inserted from APIs and protocols, such as FTP and HTTP(S), where the table name is not specified. Applicable to structured storage and binary XML storage.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref723"></a><a id="sthref724"></a><a id="sthref725"></a>xdb:defaultTableSchema</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t38 r1c2-t38">
<p>Any SQL user name</p>
</td>
<td class="cellalignment1028" headers="r4c1-t38 r1c3-t38">
<p>User registering XML schema</p>
</td>
<td class="cellalignment1028" headers="r4c1-t38 r1c4-t38">
<p>Name of the database user (database schema) who owns the type specified by <code>xdb:defaultTable</code>. Applicable to structured storage and binary XML storage.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref726"></a><a id="sthref727"></a><a id="sthref728"></a>xdb:maintainDOM</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t38 r1c2-t38">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t38 r1c3-t38">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t38 r1c4-t38">
<p>If <code>true</code>, then instances of this element are stored so that they retain DOM fidelity on output. This implies that all comments, processing instructions, namespace declarations, and so on are retained, in addition to the ordering of elements.</p>
<p>If <code>false</code>, then the output is not guaranteed to have the same DOM action as the input.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a>xdb:maintainOrder</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t38 r1c2-t38">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t38 r1c3-t38">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t38 r1c4-t38">
<p>If <code>true</code> (generally recommended, and the default value), then the collection is mapped to a varray (stored in a LOB or an ordered collection table).</p>
<p>If <code>false</code>, then the collection is mapped to an unordered table, and document order is <span class="italic">not</span> preserved.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref732"></a><a id="sthref733"></a><a id="sthref734"></a>xdb:maxOccurs</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t38 r1c2-t38">
<p>Any positive integer</p>
</td>
<td class="cellalignment1028" headers="r8c1-t38 r1c3-t38">
<p>1</p>
</td>
<td class="cellalignment1028" headers="r8c1-t38 r1c4-t38">
<p>Specifies the maximum number of times an element can appear. If the value is <code>unbounded</code>, then there is no limit to the maximum number of occurrences.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref735"></a><a id="sthref736"></a><a id="sthref737"></a>xdb:SQLCollSchema</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t38 r1c2-t38">
<p>Any SQL user name</p>
</td>
<td class="cellalignment1028" headers="r9c1-t38 r1c3-t38">
<p>User registering XML schema</p>
</td>
<td class="cellalignment1028" headers="r9c1-t38 r1c4-t38">
<p>Name of the database user (database schema) who owns the type specified by <code>xdb:SQLCollType</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref738"></a><a id="sthref739"></a><a id="sthref740"></a>xdb:SQLCollType</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t38 r1c2-t38">
<p>Any SQL collection type</p>
</td>
<td class="cellalignment1028" headers="r10c1-t38 r1c3-t38">
<p>Name generated from element name</p>
</td>
<td class="cellalignment1028" headers="r10c1-t38 r1c4-t38">
<p>Name of the SQL collection type that corresponds to this XML element. The XML element must be specified with <code>maxOccurs</code> &gt; 1.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref741"></a><a id="sthref742"></a><a id="sthref743"></a>xdb:SQLInline</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t38 r1c2-t38">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t38 r1c3-t38">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t38 r1c4-t38">
<p>If <code>true</code>, then this element is stored inline as an embedded object attribute (or as a collection, if <code>maxOccurs</code> &gt; 1).</p>
<p>If <code>false</code>, then a <code>REF</code> value is stored (or a collection of <code>REF</code> values, if <code>maxOccurs</code> &gt; 1). This attribute is forced to <code>false</code> in certain situations, such as cyclic references, where SQL does not support inlining.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref744"></a><a id="sthref745"></a><a id="sthref746"></a>xdb:SQLName</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t38 r1c2-t38">
<p>Any SQL identifier</p>
</td>
<td class="cellalignment1028" headers="r12c1-t38 r1c3-t38">
<p>Element name</p>
</td>
<td class="cellalignment1028" headers="r12c1-t38 r1c4-t38">
<p>Name of the attribute within the SQL object that maps to this XML element.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref747"></a><a id="sthref748"></a><a id="sthref749"></a>xdb:SQLSchema</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t38 r1c2-t38">
<p>Any SQL user name</p>
</td>
<td class="cellalignment1028" headers="r13c1-t38 r1c3-t38">
<p>User registering XML schema</p>
</td>
<td class="cellalignment1028" headers="r13c1-t38 r1c4-t38">
<p>Name of the database user (database schema) who owns the type specified by <code>SQLType</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref750"></a><a id="sthref751"></a><a id="sthref752"></a>xdb:SQLType</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t38 r1c2-t38">
<p>Any SQL data type<a id="sthref753" href="#sthref753" onclick='footdisplay(1,"See \u003ca target=\"xdb05sto\" href=\"#i1030995\"\u003e\"Mapping XML Schema Data Types to SQL Data Types\"\u003c/a\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a>, <span class="italic">except</span> <code>NCHAR</code>, <code>NVARCHAR</code>, and <code>NCLOB</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t38 r1c3-t38">
<p>Name generated from element name</p>
</td>
<td class="cellalignment1028" headers="r14c1-t38 r1c4-t38">
<p>Name of the SQL type corresponding to this XML element declaration.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r15c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref754"></a><a id="sthref755"></a><a id="sthref756"></a>xdb:srclang</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t38 r1c2-t38">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t38 r1c3-t38">
<p>true</p>
</td>
<td class="cellalignment1028" headers="r15c1-t38 r1c4-t38">
<p>If <code>true</code>, then the given language translation is used as the default translation.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r16c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref757"></a><a id="sthref758"></a><a id="sthref759"></a>xdb:tableProps</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t38 r1c2-t38">
<p>Any table storage clause</p>
</td>
<td class="cellalignment1028" headers="r16c1-t38 r1c3-t38">
<p><code>NULL</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t38 r1c4-t38">
<p>Specifies the <code>TABLE</code> storage clause that is appended to the default <code>CREATE TABLE</code> statement. This is meaningful mainly for global and out-of-line elements. Applicable to structured storage and binary XML storage.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r17c1-t38" headers="r1c1-t38">
<p class="synopsis"><code><a id="sthref760"></a><a id="sthref761"></a><a id="sthref762"></a>xdb:translate</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t38 r1c2-t38">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t38 r1c3-t38">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t38 r1c4-t38">
<p>If <code>true</code>, then instances of this element are translated. The <code>maxOccurs</code> attribute must be &lt;=1 for this element to be set to <code>true</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>See <a href="#i1030995">"Mapping XML Schema Data Types to SQL Data Types"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BJFGEHAJ">"Structured Storage of XML Schema-Based Data"</a> for information about specifying storage options when manually creating <code>XMLType</code> tables for object-relational storage</div>
<div id="ADXDB4521" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref763"></a><a id="CHDCHIHD"></a>Table 7-4 Annotations in Elements Declaring Global complexType Elements</p>
<table class="cellalignment1032" title="Annotations in Elements Declaring Global complexType Elements" summary="This table lists attributes that you can specify in elements declaring global complextypes." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t40">Attribute</th>
<th class="cellalignment1027" id="r1c2-t40">Values</th>
<th class="cellalignment1027" id="r1c3-t40">Default</th>
<th class="cellalignment1027" id="r1c4-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t40" headers="r1c1-t40">
<p class="synopsis"><code><a id="sthref764"></a><a id="sthref765"></a><a id="sthref766"></a>xdb:maintainDOM</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t40 r1c2-t40">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t40 r1c3-t40">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t40 r1c4-t40">
<p>If <code>true</code>, then instances of this element are stored so that they retain DOM fidelity on output. This implies that all comments, processing instructions, namespace declarations, and so on are retained, in addition to the ordering of elements.</p>
<p>If <code>false</code>, then the output is not guaranteed to have the same DOM action as the input.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t40" headers="r1c1-t40">
<p class="synopsis"><code><a id="sthref767"></a><a id="sthref768"></a><a id="sthref769"></a>xdb:SQLSchema</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t40 r1c2-t40">
<p>Any SQL user name</p>
</td>
<td class="cellalignment1028" headers="r4c1-t40 r1c3-t40">
<p>User registering XML schema</p>
</td>
<td class="cellalignment1028" headers="r4c1-t40 r1c4-t40">
<p>Name of the database user (database schema) who owns the type specified by <code>SQLType</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t40" headers="r1c1-t40">
<p class="synopsis"><code><a id="sthref770"></a><a id="sthref771"></a><a id="sthref772"></a>xdb:SQLType</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t40 r1c2-t40">
<p>Any SQL data type<a id="sthref773" href="#sthref773" onclick='footdisplay(1,"See \u003ca target=\"xdb05sto\" href=\"#i1030995\"\u003e\"Mapping XML Schema Data Types to SQL Data Types\"\u003c/a\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a> <span class="italic">except</span> <code>NCHAR</code>, <code>NVARCHAR</code>, and <code>NCLOB</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t40 r1c3-t40">
<p>Name generated from element name</p>
</td>
<td class="cellalignment1028" headers="r5c1-t40 r1c4-t40">
<p>Name of the SQL type that corresponds to this XML element declaration.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>See <a href="#i1030995">"Mapping XML Schema Data Types to SQL Data Types"</a>.</p>
<div id="ADXDB4522" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref774"></a><a id="CHDBFCID"></a>Table 7-5 Annotations in XML Schema Declarations</p>
<table class="cellalignment1032" title="Annotations in XML Schema Declarations" summary="This table lists attributes you can specify in XML schema declarations. It includes the default values." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t41">Attribute</th>
<th class="cellalignment1027" id="r1c2-t41">Values</th>
<th class="cellalignment1027" id="r1c3-t41">Default</th>
<th class="cellalignment1027" id="r1c4-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t41" headers="r1c1-t41">
<p class="synopsis"><code><a id="sthref775"></a><a id="sthref776"></a><a id="sthref777"></a>xdb:mapUnboundedStringToLob</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t41 r1c2-t41">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t41 r1c3-t41">
<p><code>false</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t41 r1c4-t41">
<p>If <code>true</code>, then unbounded strings are mapped to <code>CLOB</code> instances by default. Similarly, unbounded binary data gets mapped to a <code>BLOB</code> value, by default.</p>
<p>If <code>false</code>, then unbounded strings are mapped to <code>VARCHAR2(4000)</code> values, and unbounded binary components are mapped to <code>RAW(2000)</code> values.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t41" headers="r1c1-t41">
<p class="synopsis"><code><a id="sthref778"></a><a id="sthref779"></a><a id="sthref780"></a>xdb:storeVarrayAsTable</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t41 r1c2-t41">
<p><code>true</code> | <code>false</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t41 r1c3-t41">
<p><code>true</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t41 r1c4-t41">
<p>If <code>true</code>, then the varray is stored as a table (OCT).</p>
<p>If <code>false</code>, then the varray is stored in a LOB.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BJFJECCE">"Changing an XML Schema and XML Instance Documents for Translation"</a> for more information on <code>xdb:maxOccurs</code>, <code>xdb:translate</code>, and <code>xdb:srclang</code>.</div>
</div>
<!-- class="sect2" -->
<a id="BJFGEBFB"></a>
<div id="ADXDB5837" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Schema Annotation Guidelines for Structured Storage</h3>
<p>For <code>XMLType</code> data stored object-relationally (structured storage), careful planning is called for, to optimize performance. Similar considerations are in order as for ordinary relational data: the entity-relationship model, indexing, data types, table partitions, and so on.</p>
<p>To enable XPath rewrite and achieve optimal performance, you implement many such design choices using XML schema annotations. This section provides annotation guidelines to optimize the use of <code>XMLType</code> data stored object-relationally.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#g1048403">Table 7-3, "Annotations in Elements"</a></p>
</li>
<li>
<p><a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a></p>
</li>
</ul>
</div>
<div id="ADXDB5838" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref781"></a>
<h4 class="sect3">Avoid Creation of Unnecessary Tables for Unused Top-Level Elements</h4>
<p>By default, XML schema registration creates a top-level table for each top-level element defined in the XML schema. Some such elements are used as top-level elements in XML instances that conform to the XML schema. Others might not. It is common, for example, for elements in an XML schema to be top-level in order to be used as a <code>REF</code> target.</p>
<p>Whenever a top-level element in an XML schema is never used at the top level in any corresponding XML instance, you can avoid the creation of the associated unnecessary tables by adding annotation <code>xdb:defaultTable =</code> <code><span class="codeinlinebold">""</span></code> to the element in the XML schema. An empty value for this attribute prevents default-table creation.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB5839" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref782"></a>
<h4 class="sect3">Provide Your Own Names for Default Tables</h4>
<p>For tuning purposes, you examine execution plan output for queries you are interested in. This output refers to the tables that underlie <code>XMLType</code> data stored object-relationally. By default, these tables have system-generated names. Oracle recommends that you provide your own table names, especially for tables that you are sure to be interested in. You do that using annotation <code>xdb:defaultTable</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BJFDJBDE">"Default Tables Created During XML Schema Registration"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADXDB5840" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref783"></a>
<h4 class="sect3">Turn Off DOM Fidelity If Not Needed</h4>
<p>By default, XML schema registration generates tables that store XML data in such a way that DOM fidelity is maintained. It is often the case that for data-centric XML data DOM fidelity is not needed. You can improve the performance of storage, queries, and data modification by instead using object-relational tables that do not maintain DOM fidelity. You use the annotation <code>xdb:maintainDOM = "</code><code><span class="codeinlinebold">false</span></code><code>"</code> to do that.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1036294">"DOM Fidelity"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADXDB5841" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref784"></a>
<h4 class="sect3">Use Unordered Collection Elements When Order Doesn't Matter</h4>
<p>If the order among collection elements is not important, then use annotation <code>xdb:maintainOrder = "</code><code><span class="codeinlinebold">false</span></code><code>"</code>. This can allow more optimization in XPath rewrite and can generally lead to more efficient query execution.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB5842" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref785"></a>
<h4 class="sect3">Annotate Time-Related Elements with a Timestamp Data Type</h4>
<p>If your application needs to work with time-zone indicators, then annotate any XML schema elements of type <code>xs:time</code> and <code>xs:dateTime</code> with <code>xdb:SQLType = "</code><code><span class="codeinlinebold">TIMESTAMP WITH TIME ZONE</span></code><code>"</code>. This ensures that values containing time-zone indicators can be stored, retrieved, and compared.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB5843" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref786"></a>
<h4 class="sect3">Add Table and Column Properties</h4>
<p>If a table or column underlying XML data needs additional properties, such as partition, tablespace, or compression clauses, then use annotation <code>xdb:tableProps</code> or <code>xdb:columnProps</code> to provide them. This lets users add primary keys or constraints. For example, to achieve table compression for online transaction processing (OLTP), you would add <code><a id="sthref787"></a>COMPRESS FOR OLTP</code> using a <code>tableProps</code> attribute.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BJFGGABH">Example 7-22</a> for an example of specifying OLTP compression when creating <code>XMLType</code> tables and columns manually</div>
</div>
<!-- class="sect3" -->
<div id="ADXDB5844" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref788"></a>
<h4 class="sect3">Store Large Collections Out of Line</h4>
<p>When the total number of elements and attributes defined by a <code>complexType</code> reaches 1000, it is not possible to create a single table that can manage the SQL objects that are generated when an instance of that type is stored in the database. If you have large collections, then you might run up against this limit of 1000 columns for a table.</p>
<p>You can use annotations <code>xdb:defaultTable</code> and <code>xdb:SQLInline</code> to specify that such collection elements be stored out of line. That means that their data is stored in a separate table&thinsp;&mdash;&thinsp;only a reference to a row in that table is stored in the main collection table. Use <code>xdb:defaultTable</code> to name the out-of -line table. Annotate each element of a potentially large collection with <code>xdb:SQLInline = "</code><code><span class="codeinlinebold">false</span></code><code>",</code> to store it out of line.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#BJFIBHAG">"Working with Large XML Schemas"</a></p>
</li>
<li>
<p><a href="xdb06stt.htm#BABBHHAJ">"Setting Annotation Attribute SQLInline to false for Out-Of-Line Storage"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BJFDCFII"></a>
<div id="ADXDB4523" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Querying a Registered XML Schema to Obtain <a id="sthref789"></a><a id="sthref790"></a>Annotations</h2>
<p>The registered version of an XML schema contains a full set of Oracle XML&nbsp;DB annotations. As shown in <a href="#BJFIJHJA">Example 7-8</a> and <a href="#BJFBGBEJ">Example 7-9</a>, the location of the registered XML schema depends on whether it is local or global.</p>
<p>A registered XML schema can be queried for the annotations that were supplied by the user or added by the schema registration process. <a href="#CHDCDCCD">Example 7-26</a> shows the set of global <code>complexType</code> definitions declared by an XML schema for structured storage of XML data, and the corresponding SQL object types and DOM fidelity values.</p>
<div id="ADXDB4524" class="example">
<p class="titleinexample"><a id="CHDCDCCD"></a>Example 7-26 Querying Metadata from a Registered XML Schema</p>
<pre>
SELECT ct.xmlschema_type_name, ct.sql_type_name, ct.dom_fidelity
  FROM RESOURCE_VIEW,
       XMLTable(
         XMLNAMESPACES (
           'http://xmlns.oracle.com/xdb/XDBResource.xsd' AS "r",
           'http://xmlns.oracle.com/xdb/documentation/purchaseOrder' AS "po",
           'http://www.w3.org/2001/XMLSchema' AS "xs",
           'http://xmlns.oracle.com/xdb' AS "xdb"),
         '/r:Resource/r:Contents/xs:schema/xs:complexType' PASSING RES
         COLUMNS
           xmlschema_type_name VARCHAR2(30) PATH '@name',
           sql_type_name       VARCHAR2(30) PATH '@xdb:SQLType',
           dom_fidelity        VARCHAR2(6)  PATH '@xdb:maintainDOM') ct
  WHERE
    equals_path(
      RES,
      '/sys/schemas/SCOTT/xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd')
    =1;

XMLSCHEMA_TYPE_NAME        SQL_TYPE_NAME            DOM_FIDELITY
-------------------------  -----------------------  ------------
PurchaseOrderType          PURCHASEORDER_T          true
LineItemsType              LINEITEMS_T              true
LineItemType               LINEITEM_T               true
PartType                   PART_T                   true
ActionsType                ACTIONS_T                true
RejectionType              REJECTION_T              true
ShippingInstructionsType   SHIPPING_INSTRUCTIONS_T  true

7 rows selected.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDFGFHJ"></a>
<div id="ADXDB4525" class="sect1">
<h2 class="sect1">Mapping XML Schema Data Types to Oracle XML&nbsp;DB Storage</h2>
<p>XML data that conforms to an XML schema is typed using XML Schema data types. When this XML data is stored in Oracle XML&nbsp;DB, its storage data types are derived from the XML Schema data types using a default mapping and, optionally, using mapping information that you specify using XML schema annotations.</p>
<p>Whenever you do not specify a data type to use for storage, Oracle XML&nbsp;DB uses the default mapping to annotate the XML schema appropriately, during registration. In this way, the registered XML schema has a complete set of data-type annotations.</p>
<ul>
<li>
<p>For unstructured storage, the data-type mapping is trivial: all of the XML data is stored together as a single <code>CLOB</code>.</p>
</li>
<li>
<p>For structured storage, XML Schema data types are mapped to SQL data types.</p>
</li>
<li>
<p>For binary XML storage, XML Schema data types are mapped to Oracle XML&nbsp;DB binary XML encoding types.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1030995">"Mapping XML Schema Data Types to SQL Data Types"</a></div>
<p><a href="#i1044841">Figure 7-5</a> shows how Oracle XML&nbsp;DB creates XML schema-based <code>XMLType</code> tables using an XML document and a mapping specified in an XML schema. Depending on the storage method specified in the XML schema, an XML instance document is stored either as a binary XML or <code>CLOB</code> value in a single <code>XMLType</code> column, or using multiple object-relational columns.</p>
<div id="ADXDB4526" class="figure">
<p class="titleinfigure"><a id="i1044841"></a>Figure 7-5 How Oracle XML&nbsp;DB Maps XML Schema-Based XMLType Tables</p>
<img width="641" height="572" src="img/adxdb025.gif" alt="Description of Figure 7-5 follows" /><br />
<a id="sthref791" href="img_text/adxdb025.htm">Description of "Figure 7-5 How Oracle XML&nbsp;DB Maps XML Schema-Based XMLType Tables"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i1030995"></a>
<div id="ADXDB4527" class="sect1">
<h2 class="sect1">Mapping XML <a id="sthref792"></a><a id="sthref793"></a>Schema Data Types to SQL Data Types</h2>
<p>This section describes how to use PL/SQL package <code><a id="sthref794"></a>DBMS_XMLSCHEMA</code> to map data types for XML Schema attributes and elements to SQL data types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Do <span class="italic">not</span> directly access the SQL data types that are mapped from XML Schema data types during XML schema registration. These SQL types are part of the implementation of Oracle XML&nbsp;DB. They are not exposed for your use.
<p>Oracle reserves the right to change the implementation at any time, including in a product patch. Such a change by Oracle will have no effect on applications that abide by the XML abstraction, but it might impact applications that directly access these data types.</p>
</div>
<div id="ADXDB4528" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref795"></a>
<h3 class="sect2">Example of Mapping XML Schema Data Types to SQL</h3>
<p><a href="#CHDEAJJJ">Example 7-27</a> shows a simple example of mapping XML Schema data types to SQL data types. It uses attribute <code>SQLType</code> to specify the data-type mapping. It also uses attribute <code>SQLName</code> to specify the object attributes to use for various XML elements and attributes.</p>
<div id="ADXDB4529" class="example">
<p class="titleinexample"><a id="CHDEAJJJ"></a>Example 7-27 Mapping XML Schema Data Types to SQL Data Types using Attribute SQLType</p>
<pre>
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xdb="http://xmlns.oracle.com/xdb"
           version="1.0"
           xdb:storeVarrayAsTable="true"&gt;
  &lt;xs:element name="PurchaseOrder" type="PurchaseOrderType" xdb:defaultTable="PURCHASEORDER"/&gt;
  &lt;xs:complexType name="PurchaseOrderType" xdb:SQLType="PURCHASEORDER_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Reference" type="ReferenceType" minOccurs="1" xdb:SQLName="REFERENCE"/&gt;
      &lt;xs:element name="Actions" type="ActionsType" xdb:SQLName="ACTIONS"/&gt;
      &lt;xs:element name="Reject" type="RejectionType" minOccurs="0" xdb:SQLName="REJECTION"/&gt;
      &lt;xs:element name="Requestor" type="RequestorType" xdb:SQLName="REQUESTOR"/&gt;
      &lt;xs:element name="User" type="UserType" minOccurs="1" xdb:SQLName="USERID"/&gt;
      &lt;xs:element name="CostCenter" type="CostCenterType" xdb:SQLName="COST_CENTER"/&gt;
      &lt;xs:element name="ShippingInstructions" type="ShippingInstructionsType" 
                  xdb:SQLName="SHIPPING_INSTRUCTIONS"/&gt;
      &lt;xs:element name="SpecialInstructions" type="SpecialInstructionsType" 
                  xdb:SQLName="SPECIAL_INSTRUCTIONS"/&gt;
      &lt;xs:element name="LineItems" type="LineItemsType" xdb:SQLName="LINEITEMS"/&gt;
      &lt;xs:element name="Notes" type="po:NotesType" xdb:SQLType="CLOB"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemsType" xdb:SQLType="LINEITEMS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="LineItem" type="LineItemType" maxOccurs="unbounded" 
                  xdb:SQLName="LINEITEM" xdb:SQLCollType="LINEITEM_V"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemType" xdb:SQLType="LINEITEM_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Description" type="DescriptionType" 
                  xdb:SQLName="DESCRIPTION"/&gt;
      &lt;xs:element name="Part" type="PartType" xdb:SQLName="PART"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="ItemNumber" type="xs:integer" xdb:SQLName="ITEMNUMBER" 
                  xdb:SQLType="NUMBER"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PartType" xdb:SQLType="PART_T"&gt;
    &lt;xs:attribute name="Id" xdb:SQLName="PART_NUMBER" xdb:SQLType="VARCHAR2"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:minLength value="10"/&gt;
          &lt;xs:maxLength value="14"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name="Quantity" type="moneyType" xdb:SQLName="QUANTITY"/&gt;
    &lt;xs:attribute name="UnitPrice" type="quantityType" xdb:SQLName="UNITPRICE"/&gt;
  &lt;/xs:complexType&gt;

  <span class="bold">...</span>

  &lt;xs:complexType name="ActionsType" xdb:SQLType="ACTIONS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Action" maxOccurs="4" xdb:SQLName="ACTION" xdb:SQLCollType="ACTION_V"&gt;
        &lt;xs:complexType xdb:SQLType="ACTION_T"&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="User" type="UserType" xdb:SQLName="ACTIONED_BY"/&gt;
            &lt;xs:element name="Date" type="DateType" minOccurs="0" xdb:SQLName="DATE_ACTIONED"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="RejectionType" xdb:SQLType="REJECTION_T"&gt;
    &lt;xs:all&gt;
      &lt;xs:element name="User" type="UserType" minOccurs="0" xdb:SQLName="REJECTED_BY"/&gt;
      &lt;xs:element name="Date" type="DateType" minOccurs="0" xdb:SQLName="DATE_REJECTED"/&gt;
      &lt;xs:element name="Comments" type="CommentsType" minOccurs="0" xdb:SQLName="REASON_REJECTED"/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ShippingInstructionsType" xdb:SQLType="SHIPPING_INSTRUCTIONS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="name" type="NameType" minOccurs="0" xdb:SQLName="SHIP_TO_NAME"/&gt;
      &lt;xs:element name="address" type="AddressType" minOccurs="0" xdb:SQLName="SHIP_TO_ADDRESS"/&gt;
      &lt;xs:element name="telephone" type="TelephoneType" minOccurs="0" xdb:SQLName="SHIP_TO_PHONE"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  <span class="bold">...</span>
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1036039"></a>
<div id="ADXDB4530" class="sect2">
<h3 class="sect2">Mapping XML <a id="sthref796"></a>Schema Attribute Data Types to SQL</h3>
<p>An attribute declaration can specify its XML Schema data type in terms of one of the following:</p>
<ul>
<li>
<p>Primitive type</p>
</li>
<li>
<p>Global <code>simpleType</code>, declared within this XML schema or in an external XML schema</p>
</li>
<li>
<p>Reference to global attribute (<code>ref=".."</code>), declared within this XML schema or in an external XML schema</p>
</li>
<li>
<p>Local <code>simpleType</code></p>
</li>
</ul>
<p>In all cases, the SQL data type, its associated information (length, precision), and the memory mapping information are derived from the <code>simpleType</code> on which the attribute is based.</p>
<a id="BABCGDGD"></a>
<div id="ADXDB4531" class="sect3">
<h4 class="sect3">Overriding the SQLType Value in an XML Schema When Declaring Attributes</h4>
<p>You can explicitly specify a <code>SQLType</code> value in the input XML schema document. In this case, the data type you specify is used for schema validation. This allows for the following specific forms of overrides:</p>
<ul>
<li>
<p>If the default SQL data type is <code>STRING</code>, you can override it with <code>CHAR</code>, <code>VARCHAR</code>, or <code>CLOB</code>.</p>
</li>
<li>
<p>If the default SQL data type is <code>RAW</code>, you can override it with <code>RAW</code> or <code>BLOB</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDB4532" class="sect2"><a id="sthref797"></a>
<h3 class="sect2">Mapping XML Schema Element <a id="sthref798"></a>Data Types to SQL</h3>
<p>An element declaration can specify its XML Schema data type in terms of one of the following:</p>
<ul>
<li>
<p>Any of the ways for specifying type for an attribute declaration. See <a href="#i1036039">"Mapping XML Schema Attribute Data Types to SQL"</a> .</p>
</li>
<li>
<p>Global <code>complexType</code>, specified within this XML schema document or in an external XML schema.</p>
</li>
<li>
<p>Reference to a global element (<code>ref="..."</code>), which could itself be within this XML schema document or in an external XML schema.</p>
</li>
<li>
<p>Local <code>complexType</code>.</p>
</li>
</ul>
<a id="BABBHBJA"></a>
<div id="ADXDB4533" class="sect3">
<h4 class="sect3">Overriding the SQLType Value in an XML Schema when Declaring Elements</h4>
<p>An element based on a <code>complexType</code> is, by default, mapped to a SQL object type that contains object attributes corresponding to each of the sub-elements and attributes. You can override this <a id="sthref799"></a>mapping by explicitly specifying a value for attribute <code>SQLType</code> in the input XML schema. The following values for <code>SQLType</code> are permitted here:</p>
<ul>
<li>
<p><code>VARCHAR2</code></p>
</li>
<li>
<p><code>RAW</code></p>
</li>
<li>
<p><code>CLOB</code></p>
</li>
<li>
<p><code>BLOB</code></p>
</li>
</ul>
<p>These represent storage of the XML data in a text form in the database.</p>
<p>For example, to override the <code>SQLType</code> from <code>VARCHAR2</code> to <code>CLOB</code>, declare the <code>xdb</code> namespace using <code>xmlns:xdb="http://xmlns.oracle.com/xdb"</code>, and then use <code>xdb:SQLType = "CLOB"</code>.</p>
<p>The following special cases are handled:</p>
<ul>
<li>
<p>If a cycle is detected when processing the <code>complexType</code> values that are used to declare elements and the elements declared within the c<code>omplexType</code>, the <code>SQLInline</code> attribute is forced to be <code>false</code>, and the correct SQL mapping is set to <code>REF</code> <code>XMLType</code>.</p>
</li>
<li>
<p>If <code>maxOccurs &gt; 1</code>, a varray type might be created.</p>
<ul>
<li>
<p>If <code>SQLInline</code> <code>= "true"</code>, then a varray type is created whose element type is the SQL data type previously determined. Cardinality of the varray is based on the value of attribute <code>maxOccurs</code>. Either you specify the name of the varray type using attribute <code>SQLCollType</code>, or it is derived from the element name.</p>
</li>
<li>
<p>If <code>SQLInline = "false"</code>, then the SQL data type is set to <code>XDB.XDB$XMLTYPE_REF_LIST_T</code>. This is a predefined data type that represents an array of <code>REF</code> values pointing to <code>XMLType</code> instances.</p>
</li>
</ul>
</li>
<li>
<p>If the element is a global element, or if <code>SQLInline = "false"</code>, then the system creates a default table. Either you specify the name of the default table, or it is derived from the element name.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb06stt.htm#BABGFCFG">Chapter 9, "XML Schema Storage and Query: Advanced"</a> for more information about mapping <code>simpleType</code> values and <code>complexType</code> values to SQL.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1030940"></a>
<div id="ADXDB4534" class="sect2">
<h3 class="sect2">Mapping <a id="sthref800"></a><a id="sthref801"></a>simpleType to SQL</h3>
<p>This section describes how XML schema definitions map XML Schema <code>simpleType</code> to SQL object types. <a href="#i1044843">Figure 7-6</a> shows an example of this.</p>
<div id="ADXDB4535" class="figure">
<p class="titleinfigure"><a id="i1044843"></a>Figure 7-6 Mapping simpleType: XML Strings to SQL VARCHAR2 or CLOB</p>
<img width="254" height="244" src="img/adxdb038.gif" alt="Description of Figure 7-6 follows" /><br />
<a id="sthref802" href="img_text/adxdb038.htm">Description of "Figure 7-6 Mapping simpleType: XML Strings to SQL VARCHAR2 or CLOB"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#g1048477">Table 7-6</a> through <a href="#g1048807">Table 7-9</a> present the default mapping of XML Schema <code>simpleType</code> to SQL, as specified in the XML Schema definition. For example:</p>
<ul>
<li>
<p>A XML Schema <span class="italic">primitive</span> type is mapped to the closest SQL data type. For example, <code>DECIMAL</code>, <code>POSITIVEINTEGER</code>, and <code>FLOAT</code> are all mapped to SQL <code>NUMBER</code>.</p>
</li>
<li>
<p>An XML Schema <span class="italic">enumeration</span> type is mapped to a SQL object type with a single <code>RAW(</code><code><span class="codeinlineitalic">n</span></code><code>)</code> object attribute. The value of <code><span class="codeinlineitalic">n</span></code> is determined by the number of possible values in the enumeration declaration.</p>
</li>
<li>
<p>An XML Schema <span class="italic">list</span> or a <span class="italic">union</span> type is mapped to a SQL string (<code>VARCHAR2</code> or <code>CLOB</code>) data type.</p>
</li>
</ul>
<div id="ADXDB4536" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref803"></a><a id="g1048477"></a>Table 7-6 Mapping XML Schema <a id="sthref804"></a>String Data Types to SQL</p>
<table class="cellalignment1032" title="Mapping XML Schema String Data Types to SQL " summary="This table describes the mapping of XML string datatypes to SQL. It includes the default mapping." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t51">XML Schema String Type</th>
<th class="cellalignment1027" id="r1c2-t51">Length or MaxLength Facet</th>
<th class="cellalignment1027" id="r1c3-t51">Default SQL Data Type</th>
<th class="cellalignment1027" id="r1c4-t51">Compatible SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t51" headers="r1c1-t51">
<p><code>string</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t51 r1c2-t51">
<p>n</p>
</td>
<td class="cellalignment1028" headers="r2c1-t51 r1c3-t51">
<p><code>VARCHAR2(n)</code> if <code>n</code> &lt; 4000, else <code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t51 r1c4-t51">
<p><code>CHAR</code>, <code>CLOB</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t51" headers="r1c1-t51">
<p><code>string</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t51 r1c2-t51">
<p>-</p>
</td>
<td class="cellalignment1028" headers="r3c1-t51 r1c3-t51">
<p><code>VARCHAR2(4000)</code> if <code>mapUnboundedStringToLob = "false"</code>, <code>CLOB</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t51 r1c4-t51">
<p><code>CHAR</code>, <code>CLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDB4537" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref805"></a><a id="sthref806"></a>Table 7-7 Mapping<a id="sthref807"></a> XML Schema Binary Data Types (hexBinary/base64Binary) to SQL</p>
<table class="cellalignment1032" title="Mapping XML Schema Binary Data Types (hexBinary/base64Binary) to SQL " summary="This table describes the mapping of binary datatypes to SQL. It includes the default mapping." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t52">XML Schema Binary Type</th>
<th class="cellalignment1027" id="r1c2-t52">Length or MaxLength Facet</th>
<th class="cellalignment1027" id="r1c3-t52">Default SQL Data Type</th>
<th class="cellalignment1027" id="r1c4-t52">Compatible SQL Data Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t52" headers="r1c1-t52">
<p><code>hexBinary</code>, <code>base64Binary</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t52 r1c2-t52">
<p>n</p>
</td>
<td class="cellalignment1028" headers="r2c1-t52 r1c3-t52">
<p><code>RAW(n)</code> if <code>n</code> &lt; 2000, else <code>RAW(2000)</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t52 r1c4-t52">
<p><code>RAW</code>, <code>BLOB</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t52" headers="r1c1-t52">
<p><code>hexBinary</code>, <code>base64Binary</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t52 r1c2-t52">
<p>-</p>
</td>
<td class="cellalignment1028" headers="r3c1-t52 r1c3-t52">
<p><code>RAW(2000)</code> if <code>mapUnboundedStringToLob = "false"</code>, <code>BLOB</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t52 r1c4-t52">
<p><code>RAW</code>, <code>BLOB</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDB4538" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref808"></a><a id="sthref809"></a>Table 7-8 Default Mapping of <a id="sthref810"></a>Numeric XML Schema Primitive Types to SQL</p>
<table class="cellalignment1032" title="Default Mapping of Numeric XML Schema Primitive Types to SQL" summary="This table describes the default mapping of numeric XML primitive types to SQL. It includes the default datatype." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t53">XML Schema Simple Type</th>
<th class="cellalignment1027" id="r1c2-t53">Default SQL Data Type</th>
<th class="cellalignment1027" id="r1c3-t53">totalDigits (m), fractionDigits(n) Specified</th>
<th class="cellalignment1027" id="r1c4-t53">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t53" headers="r1c1-t53">
<p><code>float</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t53 r1c4-t53">
<p><code>FLOAT</code>, <code>DOUBLE</code>, <code>BINARY_FLOAT</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t53" headers="r1c1-t53">
<p><code>double</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t53 r1c4-t53">
<p><code>FLOAT</code>, <code>DOUBLE</code>, <code>BINARY_DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t53" headers="r1c1-t53">
<p><code>decimal</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t53 r1c4-t53">
<p><code>FLOAT</code>, <code>DOUBLE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t53" headers="r1c1-t53">
<p><code>integer</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t53" headers="r1c1-t53">
<p><code>nonNegativeInteger</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t53" headers="r1c1-t53">
<p><code>positiveInteger</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t53" headers="r1c1-t53">
<p><code>nonPositiveInteger</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t53" headers="r1c1-t53">
<p><code>negativeInteger</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t53 r1c2-t53">
<p><code>NUMBER</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t53" headers="r1c1-t53">
<p><code>long</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t53 r1c2-t53">
<p><code>NUMBER(20)</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t53" headers="r1c1-t53">
<p><code>unsignedLong</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t53 r1c2-t53">
<p><code>NUMBER(20)</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t53" headers="r1c1-t53">
<p><code>int</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t53 r1c2-t53">
<p><code>NUMBER(10)</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t53" headers="r1c1-t53">
<p><code>unsignedInt</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t53 r1c2-t53">
<p><code>NUMBER(10)</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t53" headers="r1c1-t53">
<p><code>short</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t53 r1c2-t53">
<p><code>NUMBER(5)</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r15c1-t53" headers="r1c1-t53">
<p><code>unsignedShort</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t53 r1c2-t53">
<p><code>NUMBER(5)</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r16c1-t53" headers="r1c1-t53">
<p><code>byte</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t53 r1c2-t53">
<p><code>NUMBER(3)</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r17c1-t53" headers="r1c1-t53">
<p><code>unsignedByte</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t53 r1c2-t53">
<p><code>NUMBER(3)</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t53 r1c3-t53">
<p><code>NUMBER(m+n,n)</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t53 r1c4-t53">
<p><code>NUMBER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDB4539" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref811"></a><a id="g1048807"></a>Table 7-9 Mapping <a id="sthref812"></a>XML Schema Date and Time Data Types to SQL</p>
<table class="cellalignment1032" title="Mapping XML Schema Date and Time Data Types to SQL " summary="This table describes the mapping of XML DATE datatype to SQL." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t54">XML Schema Date or Time Type</th>
<th class="cellalignment1027" id="r1c2-t54">Default SQL Data Type</th>
<th class="cellalignment1027" id="r1c3-t54">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t54" headers="r1c1-t54">
<p><code>dateTime</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t54 r1c2-t54">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code>, <code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t54" headers="r1c1-t54">
<p><code>time</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t54 r1c2-t54">
<p><code>TIMESTAMP</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code>, <code>DATE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t54" headers="r1c1-t54">
<p><code>date</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t54" headers="r1c1-t54">
<p><code>gDay</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t54" headers="r1c1-t54">
<p><code>gMonth</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t54" headers="r1c1-t54">
<p><code>gYear</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t54" headers="r1c1-t54">
<p><code>gYearMonth</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t54" headers="r1c1-t54">
<p><code>gMonthDay</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t54 r1c2-t54">
<p><code>DATE</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t54 r1c3-t54">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t54" headers="r1c1-t54">
<p><code>duration</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t54 r1c2-t54">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t54 r1c3-t54">
<p>none</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDB4540" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref813"></a><a id="sthref814"></a>Table 7-10 Default Mapping of Other XML S<a id="sthref815"></a><a id="sthref816"></a>chema Primitive and Derived Data Types to SQL</p>
<table class="cellalignment1032" title="Default Mapping of Other XML Schema Primitive and Derived Data Types to SQL" summary="This table describes the default mapping of other XML primitive datatypes to SQL." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t55">XML Schema Primitive or Derived Type</th>
<th class="cellalignment1027" id="r1c2-t55">Default SQL Data Type</th>
<th class="cellalignment1027" id="r1c3-t55">Compatible SQL Data Types</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t55" headers="r1c1-t55">
<p><code>boolean</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t55 r1c2-t55">
<p><code>RAW(1)</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t55 r1c3-t55">
<p><code>VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t55" headers="r1c1-t55">
<p><code>language(string)</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t55" headers="r1c1-t55">
<p><code>NMTOKEN(string)</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t55" headers="r1c1-t55">
<p><code>NMTOKENS(string)</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t55" headers="r1c1-t55">
<p><code>Name(string)</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t55" headers="r1c1-t55">
<p><code>NCName(string)</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t55" headers="r1c1-t55">
<p><code>ID</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t55" headers="r1c1-t55">
<p><code>IDREF</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t55" headers="r1c1-t55">
<p><code>IDREFS</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t55" headers="r1c1-t55">
<p><code>ENTITY</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r12c1-t55" headers="r1c1-t55">
<p><code>ENTITIES</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r12c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r13c1-t55" headers="r1c1-t55">
<p><code>NOTATION</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r13c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r14c1-t55" headers="r1c1-t55">
<p><code>anyURI</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r14c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r15c1-t55" headers="r1c1-t55">
<p><code>anyType</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r15c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r16c1-t55" headers="r1c1-t55">
<p><code>anySimpleType</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r16c1-t55 r1c3-t55">
<p><code>CLOB</code>, <code>CHAR</code></p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r17c1-t55" headers="r1c1-t55">
<p><code>QName</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t55 r1c2-t55">
<p><code>XDB.XDB$QNAME</code></p>
</td>
<td class="cellalignment1028" headers="r17c1-t55 r1c3-t55">
<p>none</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r18c1-t55" headers="r1c1-t55">
<p><code>normalizedString</code></p>
</td>
<td class="cellalignment1028" headers="r18c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r18c1-t55 r1c3-t55">
<p>none</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r19c1-t55" headers="r1c1-t55">
<p><code>token</code></p>
</td>
<td class="cellalignment1028" headers="r19c1-t55 r1c2-t55">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r19c1-t55 r1c3-t55">
<p>none</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDB4541" class="sect3"><a id="sthref817"></a>
<h4 class="sect3">NCHAR, NVARCHAR, and NCLOB SQLType Values are Not Supported</h4>
<p>Oracle XML&nbsp;DB does <span class="italic">not</span> support <code>NCHAR</code>, <code>NVARCHAR</code>, and <code>NCLOB</code> as values for attribute <code>SQLType</code>: you cannot specify that an XML element or attribute is to be of type <code>NCHAR</code>, <code>NVARCHAR</code>, or <code>NCLOB</code>. Also, if you provide your own data type, do not use any of these data types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="appjspec.htm#CIHEHIAJ">Appendix B, "Oracle XML&nbsp;DB Restrictions"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADXDB4542" class="sect3"><a id="sthref818"></a>
<h4 class="sect3">simpleType: <a id="sthref819"></a>Mapping XML Strings to SQL VARCHAR2 Versus CLOB</h4>
<p>If an XML schema specifies an XML Schema data type to be a string with a <code>maxLength</code> less than 4000, then it is mapped to a <code>VARCHAR2</code> object attribute of the specified length. However, if <code>maxLength</code> is not specified in the XML schema, then it can only be mapped to a LOB. This is sub-optimal when most of the string values are small and only a small fraction of them are large enough to need a LOB.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#g1048477">Table 7-6, "Mapping XML Schema String Data Types to SQL"</a></div>
</div>
<!-- class="sect3" -->
<div id="ADXDB4543" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref820"></a>
<h4 class="sect3">Working with Time Zones</h4>
<p>The following XML Schema data types allow for an optional time-zone indicator as part of their literal values.</p>
<ul>
<li>
<p><code>xsd:dateTime</code></p>
</li>
<li>
<p><code>xsd:time</code></p>
</li>
<li>
<p><code>xsd:date</code></p>
</li>
<li>
<p><code>xsd:gYear</code></p>
</li>
<li>
<p><code>xsd:gMonth</code></p>
</li>
<li>
<p><code>xsd:gDay</code></p>
</li>
<li>
<p><code>xsd:gYearMonth</code></p>
</li>
<li>
<p><code>xsd:gMonthDay</code></p>
</li>
</ul>
<p>By default, XML schema registration maps <code>xsd:dateTime</code> and <code>xsd:time</code> to SQL data type <code>TIMESTAMP</code> and all the other data types to SQL data type <code>DATE</code>. SQL data types <code>TIMESTAMP</code> and <code>DATE</code> do not permit a time-zone indicator.</p>
<p>If your application needs to work with time-zone indicators, then use attribute <code>SQLType</code> to specify the SQL data type as <code>TIMESTAMP WITH TIME ZONE</code>. This ensures that values containing time-zone indicators can be stored and retrieved correctly. For example:</p>
<pre>
&lt;element name="dob" type="xsd:dateTime"
          xdb:SQLType="<span class="bold">TIMESTAMP WITH TIME ZONE</span>"/&gt;
&lt;attribute name="endofquarter" type="xsd:gMonthDay"
           xdb:SQLType="<span class="bold">TIMESTAMP WITH TIME ZONE</span>"/&gt;
</pre>
<div id="ADXDB4544" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref821"></a>
<h5 class="sect4">Using Trailing Z to Indicate UTC Time Zone</h5>
<p>XML Schema lets the time-zone component be specified as <code>Z</code>, to indicate UTC time zone. When a value with a trailing <code>Z</code> is stored in a SQL <code>TIMESTAMP WITH TIME ZONE</code> column, the time zone is actually stored as <code>+00:00</code>. Thus, the retrieved value contains the trailing <code>+00:00</code>, not the original <code>Z</code>. For example, if the value in the input XML document is <code>1973-02-12T13:44:32</code><code><span class="codeinlinebold">Z</span></code>, the output is <code>1973-02-12T13:44:32</code><code><span class="codeinlinebold">.000000+00:00</span></code>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABDAGIC"></a>
<div id="ADXDB4545" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Mapping <a id="sthref822"></a><a id="sthref823"></a>complexType to SQL</h3>
<p>Using XML Schema, a <code>complexType</code> is mapped to a SQL object type as follows:</p>
<ul>
<li>
<p>XML attributes declared within the <code>complexType</code> are mapped to SQL object attributes. The <code>simpleType</code> defining an XML attribute determines the SQL data type of the corresponding object attribute.</p>
</li>
<li>
<p>XML elements declared within the <code>complexType</code> are also mapped to SQL object attributes. The <code>simpleType</code> or <code>complexType</code> defining an XML element determines the SQL data type of the corresponding object attribute.</p>
</li>
</ul>
<p>If the XML element is declared with attribute <code>maxOccurs</code> &gt; 1, then it is mapped to a SQL <a id="sthref824"></a><a id="sthref825"></a>collection (object) attribute. The collection could be a varray value (the default, recommended) or an unordered table (if you set attribute <code>xdb:maintainOrder</code> to <code>false</code>). The default storage of a varray value is an <a id="sthref826"></a>ordered collections table (OCT). You can choose LOB storage instead, by setting attribute <code>xdb:storeVarrayAsTable</code> to <code>false</code>.</p>
<div id="ADXDB4546" class="sect3"><a id="sthref827"></a>
<h4 class="sect3">Specifying Attributes in a complexType XML Schema Declaration</h4>
<p>When you have an element based on a global <code>complexType</code>, both the <code>SQLType</code> and <code>SQLSchema</code> attributes must be specified for the <code>complexType</code> declaration. In addition you can optionally include the same <code>SQLType</code> and <code>SQLSchema</code> attributes within the element declaration.</p>
<p>If you do not specify attribute <code>SQLType</code> for the global <code>complexType</code>, Oracle XML&nbsp;DB creates a <code>SQLType</code> attribute with an internally generated name. The elements that reference this global type cannot then have a different value for <code>SQLType</code>. The following code is acceptable:</p>
<pre>
  &lt;xs:complexType name="LineItemsType" xdb:SQLType="LINEITEMS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="LineItem" type="LineItemType" maxOccurs="unbounded" 
                  xdb:SQLName="LINEITEM" xdb:SQLCollType="LINEITEM_V"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemType" xdb:SQLType="LINEITEM_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Description" type="DescriptionType" 
                  xdb:SQLName="DESCRIPTION"/&gt;
      &lt;xs:element name="Part" type="PartType" xdb:SQLName="PART"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="ItemNumber" type="xs:integer" xdb:SQLName="ITEMNUMBER" 
                  xdb:SQLType="NUMBER"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PartType" xdb:SQLType="PART_T"&gt;
    &lt;xs:attribute name="Id" xdb:SQLName="PART_NUMBER" xdb:SQLType="VARCHAR2"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:minLength value="10"/&gt;
          &lt;xs:maxLength value="14"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name="Quantity" type="moneyType" xdb:SQLName="QUANTITY"/&gt;
    &lt;xs:attribute name="UnitPrice" type="quantityType" xdb:SQLName="UNITPRICE"/&gt;
  &lt;/xs:complexType&gt;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb_indexing.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb_rewrite.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
