<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XML Schema Storage and Query: Advanced</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb_rewrite.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb07evo.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/54</span> <!-- End Header -->
<div id="ADXDB0700" class="chapter"><a id="BABGFCFG"></a>
<h1 class="chapter"><span class="secnum">9</span> XML Schema Storage and Query: Advanced</h1>
<p>This chapter describes advanced techniques for storing structured XML schema-based <code>XMLType</code> objects.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a> for basic information about using XML Schema with Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a> for information about the optimization of XPath expressions in Oracle XML&nbsp;DB</p>
</li>
<li>
<p><a href="xdb07evo.htm#BABJABIC">Chapter 10, "XML Schema Evolution"</a> for information about updating an XML schema after you have registered it with Oracle XML&nbsp;DB</p>
</li>
<li>
<p><code><a href="http://www.w3.org/TR/xmlschema-0/">http://www.w3.org/TR/xmlschema-0/</a></code> for an introduction to XML Schema</p>
</li>
</ul>
</div>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1032141">Generating XML Schemas with DBMS_XMLSCHEMA.GENERATESCHEMA</a></p>
</li>
<li>
<p><a href="#BABIHCII">Adding Unique Constraints to the Parent Element of an Attribute</a></p>
</li>
<li>
<p><a href="#BABBHHAJ">Setting Annotation Attribute SQLInline to false for Out-Of-Line Storage</a></p>
</li>
<li>
<p><a href="#BHAFIGFA">Storing Collections in Out-Of-Line Tables</a></p>
</li>
<li>
<p><a href="#BHAFCACA">Partitioning XMLType Tables and Columns Stored Object-Relationally</a></p>
</li>
<li>
<p><a href="#i1030944">Fully Qualified XML Schema URLs</a></p>
</li>
<li>
<p><a href="#BHAHHAJF">Mapping XML Fragments to Large Objects (LOBs)</a></p>
</li>
<li>
<p><a href="#i1036309">complexType Extensions and Restrictions in Oracle XML&nbsp;DB</a></p>
</li>
<li>
<p><a href="#BHAHIABH">XML Schema: Working with Circular and Cyclical Dependencies</a></p>
</li>
<li>
<p><a href="#BHACIBIA">Support for Recursive Schemas</a></p>
</li>
<li>
<p><a href="#BHAGACHJ">Loading and Retrieving Large Documents with Collections</a></p>
</li>
</ul>
<a id="i1032141"></a>
<div id="ADXDB4614" class="sect1">
<h2 class="sect1"><a id="sthref837"></a><a id="sthref838"></a><a id="sthref839"></a>Generating XML Schemas <a id="sthref840"></a>with <a id="sthref841"></a><a id="sthref842"></a><a id="sthref843"></a>DBMS_XMLSCHEMA.GENERATESCHEMA</h2>
<p>An XML schema can be generated from an object-relational type automatically using a default mapping. PL/SQL functions <code>generateSchema</code> and <code>generateSchemas</code> in package <code>DBMS_XMLSCHEMA</code> take in a string that has the object type name and another that has the Oracle XML&nbsp;DB XML schema.</p>
<ul>
<li>
<p>Function <code>generateSchema</code> returns an <code>XMLType</code> containing an XML schema. It can optionally generate an XML schema for all types referenced by the given object type or restricted only to the top-level types.</p>
</li>
<li>
<p>Function <code>generateSchemas</code> is similar, except that it returns an <code>XMLSequenceType</code> value. This is a varray of <code>XMLType</code> instances, each of which is an XML schema that corresponds to a different namespace. It also takes an additional optional argument that specifies the root URL of the preferred XML schema location:</p>
<p><code>http://xmlns.oracle.com/xdb/schemas/&lt;schema&gt;.xsd</code></p>
</li>
</ul>
<p>Both <code>generateSchema</code> and <code>generateSchemas</code> return XML schemas that have Oracle XML&nbsp;DB annotations.</p>
<p><a href="#BHAIFFHF">Example 9-1</a> shows the definition of an object type, <code>employee_t</code>, and an invocation of <code>generateSchema</code> that generates an XML schema for that object type.</p>
<div id="ADXDB4615" class="example">
<p class="titleinexample"><a id="BHAIFFHF"></a>Example 9-1 Generating an XML Schema with Function GENERATESCHEMA</p>
<pre>
CREATE TYPE employee_t AS OBJECT(empno NUMBER(10),
                                 ename VARCHAR2(200),
                                 salary NUMBER(10,2));

SELECT DBMS_XMLSCHEMA.generateSchema('T1', 'EMPLOYEE_T') FROM DUAL;

DBMS_XMLSCHEMA.GENERATESCHEMA('T1', 'EMPLOYEE_T')
------------------------------------------------------------------------
&lt;xsd:schema targetNamespace="http://ns.oracle.com/xdb/T1"
            xmlns="http://ns.oracle.com/xdb/T1"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xdb="http://xmlns.oracle.com/xdb"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://xmlns.oracle.com/xdb
                                http://xmlns.oracle.com/xdb/XDBSchema.xsd"&gt;
  &lt;xsd:element name="EMPLOYEE_T" type="EMPLOYEE_TType"
               xdb:SQLType="EMPLOYEE_T" xdb:SQLSchema="T1"/&gt;
  &lt;xsd:complexType name="EMPLOYEE_TType"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name="EMPNO" type="xsd:double" xdb:SQLName="empno"
                   xdb:SQLType="NUMBER"/&gt;
      &lt;xsd:element name="ENAME" type="xsd:string" xdb:SQLName="ename"
                   xdb:SQLType="VARCHAR2"/&gt;
      &lt;xsd:element name="SALARY" type="xsd:double" xdb:SQLName="salary"
                   xdb:SQLType="NUMBER"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;
&lt;/xsd:schema&gt;
</pre></div>
<!-- class="example" -->
<p>The generated XML schema declares element <code>EMPLOYEE_T</code> and complex type <code>EMPLOYEE_TType</code>. It uses annotations from namespace <code>http://xmlns.oracle.com/xdb</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb05sto.htm#i1042421">"Creating XMLType Tables and Columns Based on XML Schemas"</a></div>
</div>
<!-- class="sect1" -->
<a id="BABIHCII"></a>
<div id="ADXDB4616" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Adding <a id="sthref844"></a>Unique <a id="sthref845"></a>Constraints to the Parent Element of an Attribute</h2>
<p>After creating an <code>XMLType</code> table based on an XML schema, how can you add a unique constraint to the parent element of an attribute? You might, for example, want to create a unique key based on an attribute of an element that repeats itself (a collection). To create constraints on elements that can occur more than once, store the varray as an ordered collection table (OCT). You can then create constraints on the OCT.</p>
<p><a href="#BABIGCIH">Example 9-2</a> shows an XML schema that lets attribute <code>No</code> of element <code>&lt;PhoneNumber&gt;</code> appear more than once. The example shows how you can add a unique constraint to ensure that the same phone number cannot be repeated within a given instance document.</p>
<div id="ADXDB4617" class="example">
<p class="titleinexample"><a id="BABIGCIH"></a>Example 9-2 Adding a Unique Constraint to the Parent Element of an Attribute</p>
<pre>
BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; 'emp.xsd',
  SCHEMADOC =&gt; '&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
                           xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
                  &lt;xs:element name="Employee" xdb:SQLType="EMP_TYPE"&gt;
                    &lt;xs:complexType&gt;
                      &lt;xs:sequence&gt;
                        &lt;xs:element name="EmployeeId" type="xs:positiveInteger"/&gt;
                        &lt;xs:element name="<span class="bold">PhoneNumber</span>" maxOccurs="10"/&gt;
                          &lt;xs:complexType&gt;
                            &lt;xs:attribute name="<span class="bold">No</span>" type="xs:integer"/&gt;
                          &lt;/xs:complexType&gt;
                        &lt;/xs:element&gt;
                      &lt;/xs:sequence&gt;
                    &lt;/xs:complexType&gt;
                  &lt;/xs:element&gt;
                &lt;/xs:schema&gt;',
   LOCAL     =&gt; FALSE, 
   GENTYPES  =&gt; FALSE); 
END;/

PL/SQL procedure successfully completed.

CREATE TABLE emp_tab OF XMLType
  XMLSCHEMA "emp.xsd" ELEMENT "Employee"
  VARRAY XMLDATA."<span class="bold">PhoneNumber</span>" STORE AS TABLE phone_tab;

Table created.
</pre>
<pre>
ALTER TABLE phone_tab ADD <span class="bold">UNIQUE</span> (NESTED_TABLE_ID, "<span class="bold">No</span>");

Table altered.
</pre>
<pre>
INSERT INTO emp_tab 
  VALUES(XMLType('&lt;Employee&gt;
                    &lt;EmployeeId&gt;1234&lt;/EmployeeId&gt;
                    &lt;PhoneNumber <span class="bold">No="1234"</span>/&gt;
                    &lt;PhoneNumber <span class="bold">No="2345"</span>/&gt;
                  &lt;/Employee&gt;').createSchemaBasedXML('emp.xsd'));

1 row created.
</pre>
<pre>
INSERT INTO emp_tab 
  VALUES(XMLType('&lt;Employee&gt;
                    &lt;EmployeeId&gt;3456&lt;/EmployeeId&gt;
                    &lt;PhoneNumber <span class="bold">No="4444"</span>/&gt;
                    &lt;PhoneNumber <span class="bold">No="4444"</span>/&gt;
                  &lt;/Employee&gt;').createSchemaBasedXML('emp.xsd'));
</pre>
<p>This returns the expected result:</p>
<pre>
*
ERROR at line 1:
ORA-00001: <span class="bold">unique constraint</span> (SCOTT.SYS_C002136) <span class="bold">violated</span>
</pre></div>
<!-- class="example" -->
<p>The constraint in this example applies to each collection, and not across all instances. This is achieved by creating a concatenated index with the collection id column. To apply the constraint across all collections of all instance documents, omit the collection id column.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can create only a <span class="italic">functional</span> constraint as a unique or foreign key constraint on <code>XMLType</code> data stored as binary XML.</div>
</div>
<!-- class="sect1" -->
<a id="BABBHHAJ"></a>
<div id="ADXDB4618" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Setting Annotation Attribute SQLInline to false for <a id="sthref846"></a><a id="sthref847"></a><a id="sthref848"></a>Out-Of-Line Storage</h2>
<p>By default, a child XML element is mapped to an embedded SQL object attribute, when <code>XMLType</code> data is stored object-relationally. However, there are scenarios where out-of-line storage offers better performance. In such cases, set XML schema annotation (attribute) <code><a id="sthref849"></a><a id="sthref850"></a><a id="sthref851"></a>xdb:SQLInline</code> to <code>false</code>, so Oracle XML&nbsp;DB generates a SQL object type with an embedded <code>REF</code> attribute. The <code>REF</code> points to another <code>XMLType</code> instance that is stored out of line and that corresponds to the XML fragment. Default <code>XMLType</code> tables are also created, to store the out-of-line fragments.</p>
<p><a href="#i1030591">Figure 9-1</a> illustrates the mapping of <code>complexType</code> to SQL for out-of-line storage.</p>
<div id="ADXDB4619" class="figure">
<p class="titleinfigure"><a id="i1030591"></a>Figure 9-1 Mapping complexType to SQL for Out-Of-Line Storage</p>
<img width="416" height="272" src="img/adxdb010.gif" alt="Description of Figure 9-1 follows" /><br />
<a id="sthref852" href="img_text/adxdb010.htm">Description of "Figure 9-1 Mapping complexType to SQL for Out-Of-Line Storage"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database&nbsp;11g Release 2 (11.2.0.2), you can create only <span class="italic">one</span> <code>XMLType</code> table that uses an XML schema that results in <code>an out-of-line table</code>. An error is raised if you try to create a second table that uses the same XML schema.</div>
<div id="ADXDB4620" class="example">
<p class="titleinexample"><a id="CHDCEIGC"></a>Example 9-3 Setting SQLInline to False for Out-Of-Line Storage</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"                     
             targetNamespace="http://www.oracle.com/emp.xsd"       
             xmlns:emp="http://www.oracle.com/emp.xsd"       
             xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;complexType name="EmpType" xdb:SQLType="EMP_T"&gt;
         &lt;sequence&gt;
           &lt;element name="Name" type="string"/&gt;
           &lt;element name="Age" type="decimal"/&gt;
           &lt;element name="Addr" 
                    <span class="bold">xdb:SQLInline="false"</span>
                    xdb:defaultTable="ADDR_TAB"&gt;
             &lt;complexType xdb:SQLType="ADDR_T"&gt;
               &lt;sequence&gt;
                 &lt;element name="Street" type="string"/&gt;
                 &lt;element name="City" type="string"/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
       &lt;element name="Employee" type="emp:EmpType"
                xdb:defaultTable="EMP_TAB"/&gt;
     &lt;/schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL        =&gt; 'emp.xsd',
    SCHEMADOC        =&gt; doc,
    ENABLE_HIERARCHY =&gt; DBMS_XMLSCHEMA.ENABLE_HIERARCHY_NONE);
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDCEIGC">Example 9-3</a>, attribute <code><a id="sthref853"></a><a id="sthref854"></a><a id="sthref855"></a>xdb:SQLInline</code> of element <code>Addr</code> has value <code>false</code>. The resulting SQL object type, <code>obj_t2</code>, has an <code>XMLType</code> column with an embedded <code>REF</code> object attribute. The <code><a id="sthref856"></a><a id="sthref857"></a>REF</code> attribute points to an <code>XMLType</code> instance of SQL object type <code>obj_t1</code> in table <code>addr_tab</code>. Table <code>addr_tab</code> is stored out of line. It has columns <code>street</code> and <code>city</code>.</p>
<p>When registering this XML schema, Oracle XML&nbsp;DB generates the <code>XMLType</code> tables and types shown in <a href="#BHAHAIEC">Example 9-4</a>.</p>
<div id="ADXDB5882" class="example">
<p class="titleinexample"><a id="BHAHAIEC"></a>Example 9-4 Generated XMLType Tables and Types</p>
<pre>
DESCRIBE emp_tab
 Name                          Null?    Type
 ----------------------------- -------- ----------------------------------------------------------
TABLE of SYS.XMLTYPE(XMLSchema "emp.xsd" Element "Employee") STORAGE Object-relational TYPE "EMP_T"
 
DESCRIBE addr_tab
 Name                          Null?    Type
 ----------------------------- -------- --------------------------------------------------------
TABLE of SYS.XMLTYPE(XMLSchema "emp.xsd" Element "Addr") STORAGE Object-relational TYPE "ADDR_T"

DESCRIBE emp_t
 emp_t is NOT FINAL
 Name                          Null?    Type
 ----------------------------- -------- --------------------
 SYS_XDBPD$                             XDB.XDB$RAW_LIST_T
 Name                                   VARCHAR2(4000 CHAR)
 Age                                    NUMBER
 Addr                                   <span class="bold">REF OF XMLTYPE</span>

DESCRIBE addr_t
 Name                          Null?    Type
 ----------------------------- -------- --------------------
 SYS_XDBPD$                             XDB.XDB$RAW_LIST_T
 Street                                 VARCHAR2(4000 CHAR)
 City                                   VARCHAR2(4000 CHAR)
 
</pre></div>
<!-- class="example" -->
<p>Table <code>emp_tab</code> holds all of the employee information, and it contains an object reference that points to the address information that is stored out of line, in table <code>addr_tab</code>.</p>
<p>An advantage of this model is that it lets you query the out-of-line table (<code>addr_tab</code>) directly, to look up address information. <a href="#CHDDDBCI">Example 9-5</a> illustrates querying table <code>addr_tab</code> directly to obtain the distinct city information for all employees.</p>
<div id="ADXDB4621" class="example">
<p class="titleinexample"><a id="CHDDDBCI"></a>Example 9-5 Querying an Out-Of-Line Table</p>
<pre>
INSERT INTO emp_tab
  VALUES
    (XMLType('&lt;x:Employee
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:x="http://www.oracle.com/emp.xsd"
                 xsi:schemaLocation="http://www.oracle.com/emp.xsd emp.xsd"&gt;
                &lt;Name&gt;Abe Bee&lt;/Name&gt;
                &lt;Age&gt;22&lt;/Age&gt;
                &lt;Addr&gt;
                  &lt;Street&gt;A Street&lt;/Street&gt;
                  &lt;City&gt;San Francisco&lt;/City&gt;
                &lt;/Addr&gt;
              &lt;/x:Employee&gt;'));
 
INSERT INTO emp_tab
  VALUES
    (XMLType('&lt;x:Employee
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:x="http://www.oracle.com/emp.xsd"
                 xsi:schemaLocation="http://www.oracle.com/emp.xsd emp.xsd"&gt;
                &lt;Name&gt;Cecilia Dee&lt;/Name&gt;
                &lt;Age&gt;23&lt;/Age&gt;
                &lt;Addr&gt;
                  &lt;Street&gt;C Street&lt;/Street&gt;
                  &lt;City&gt;Redwood City&lt;/City&gt;
                &lt;/Addr&gt;
              &lt;/x:Employee&gt;'));
<span class="bold">. . .</span>
</pre>
<pre>
SELECT DISTINCT XMLCast(XMLQuery('/Addr/City' PASSING OBJECT_VALUE AS "." 
                                              RETURNING CONTENT)
                       AS VARCHAR2(20))
  FROM addr_tab;

CITY
-------------
Redwood City
San Francisco
</pre></div>
<!-- class="example" -->
<p>The disadvantage of this storage model is that, in order to obtain the entire <code>Employee</code> element, you must access an additional table for the address.</p>
<a id="BHAGAHCB"></a>
<div id="ADXDB4622" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref858"></a><a id="sthref859"></a>XPath Rewrite for Out-Of-Line Tables</h3>
<p>XPath expressions that involve elements stored out of line can be rewritten. The rewritten query involves a join with the out-of-line table. <a href="#CHDCJJHJ">Example 9-6</a> shows such a query.</p>
<div id="ADXDB4623" class="example">
<p class="titleinexample"><a id="CHDCJJHJ"></a>Example 9-6 XPath Rewrite for an Out-Of-Line Table</p>
<pre>
SELECT XMLCast(XMLQuery('declare namespace x = "http://www.oracle.com/emp.xsd"; (: :)
                         /x:Employee/Name' PASSING OBJECT_VALUE RETURNING CONTENT)
               AS VARCHAR2(20))
  FROM emp_tab
  WHERE XMLExists('declare namespace x = "http://www.oracle.com/emp.xsd"; (: :)
                   /x:Employee/Addr[City="San Francisco"]' PASSING OBJECT_VALUE);

XMLCAST(XMLQUERY(...
--------------------
Abe Bee
Eve Fong
George Hu
Iris Jones
Karl Luomo
Marina Namur
Omar Pinano
Quincy Roberts
 
8 rows selected.
</pre></div>
<!-- class="example" -->
<p>The XQuery expression here is rewritten to a SQL <code>EXISTS</code> subquery that queries table <code>addr_tab</code>, joining it with table <code>emp_tab</code> using the object identifier column in <code>addr_tab</code>. The optimizer uses full table scans of tables <code>emp_tab</code> and <code>addr_tab</code>. If there are many entries in the <code>addr_tab</code>, then you can try to make this query more efficient by creating an index on the city, as shown in <a href="#CHDEICJC">Example 9-7</a>. An explain-plan fragment for the same query as in <a href="#CHDCJJHJ">Example 9-6</a> shows that the city index is picked up.</p>
<div id="ADXDB4624" class="example">
<p class="titleinexample"><a id="CHDEICJC"></a>Example 9-7 Using an Index with an Out-Of-Line Table</p>
<pre>
CREATE INDEX addr_city_idx
  ON addr_tab (extractValue(OBJECT_VALUE, '/Addr/City'));

|   2 |   TABLE ACCESS BY INDEX ROWID| ADDR_TAB      |     1 |  2012 |     1   (0)| 00:00:01 |
|*  3 |    INDEX RANGE SCAN          | <span class="bold">ADDR_CITY_IDX</span> |     1 |       |     1   (0)| 00:00:01 |
|   4 |   TABLE ACCESS FULL          | EMP_TAB       |    16 | 32464 |     2   (0)| 00:00:01 |
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
When gathering statistics for the optimizer on an <code>XMLType</code> table that is stored object-relationally, Oracle recommends that you gather statistics on <span class="italic">all</span> of the tables defined by the XML schema, that is, all of the tables in <code>USER_XML_TABLES</code>. You can use procedure <code>DBMS_STATS.gather_schema_stats</code> to do this, or use <code>DBMS_STATS.gather_table_stats</code> on each such table. This informs the optimizer about all of the dependent tables that are used to store the <code>XMLType</code> data.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAFIGFA"></a>
<div id="ADXDB4625" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Storing Collections in <a id="sthref860"></a><a id="sthref861"></a><a id="sthref862"></a>Out-Of-Line Tables</h2>
<p>You can also map collection items to be stored out of line. In this case, instead of a single <code>REF</code> column, the parent element contains a varray of <code>REF</code> values that point to the collection members. For example, suppose that there is a list of addresses for each employee and that list is mapped to out-of-line storage, as shown in <a href="#CHDJHBIE">Example 9-8</a>.</p>
<div id="ADXDB4626" class="example">
<p class="titleinexample"><a id="CHDJHBIE"></a>Example 9-8 Storing a Collection Out of Line</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
             targetNamespace="http://www.oracle.com/emp.xsd"
             xmlns:emp="http://www.oracle.com/emp.xsd"
             xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;complexType name="EmpType" xdb:SQLType="EMP_T"&gt;
         &lt;sequence&gt;
           &lt;element name="Name" type="string"/&gt;
           &lt;element name="Age" type="decimal"/&gt;
           &lt;element name="Addr" <span class="bold">xdb:SQLInline="false"</span>
                    <span class="bold">maxOccurs="unbounded"</span> xdb:defaultTable="ADDR_TAB"&gt;
             &lt;complexType xdb:SQLType="ADDR_T"&gt;
               &lt;sequence&gt;
                 &lt;element name="Street" type="string"/&gt;
                 &lt;element name="City" type="string"/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
       &lt;element name="Employee" type="emp:EmpType"
                xdb:defaultTable="EMP_TAB"/&gt;
     &lt;/schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL        =&gt; 'emp.xsd',
    SCHEMADOC        =&gt; doc,
    ENABLE_HIERARCHY =&gt; DBMS_XMLSCHEMA.ENABLE_HIERARCHY_NONE);
END;
/
</pre></div>
<!-- class="example" -->
<p>During registration of this XML schema, Oracle XML&nbsp;DB generates tables <code>emp_tab</code> and <code>addr_tab</code> and types <code>emp_t</code> and <code>addr_t</code>, just as in <a href="#CHDCEIGC">Example 9-3</a>. However, this time, type <code>emp_t</code> contains a varray of <code>REF</code> values that point to addresses, instead of a single <code>REF</code> attribute, as shown in <a href="#BHAJFCCG">Example 9-9</a>.</p>
<div id="ADXDB5883" class="example">
<p class="titleinexample"><a id="BHAJFCCG"></a>Example 9-9 Generated Out-Of-Line Collection Type</p>
<pre>
DESCRIBE emp_t
 emp_t is NOT FINAL
 Name                                   Null?    Type
 -------------------------------------- -------- --------------------------
 SYS_XDBPD$                                      XDB.XDB$RAW_LIST_T
 Name                                            VARCHAR2(4000 CHAR)
 Age                                             NUMBER
 Addr                                            <span class="bold">XDB.XDB$XMLTYPE_REF_LIST_T</span>
</pre></div>
<!-- class="example" -->
<p>By default, XML schema attribute <code>storeVarrayAsTable</code> has value <code>true</code>, which means that the varray of <code>REF</code> values is stored out of line, in an intermediate table. That is, in addition to creating the tables and types just mentioned, XML schema registration also creates the intermediate table that stores the list of <code>REF</code> values. This table has a system-generated name, but you can rename it. That can be useful, for example, in order to create an index on it.</p>
<div id="ADXDB4627" class="example">
<p class="titleinexample"><a id="CHDGIEBC"></a>Example 9-10 Renaming an Intermediate Table of REF Values</p>
<pre>
DECLARE
  gen_name VARCHAR2 (4000);
BEGIN
  SELECT TABLE_NAME INTO gen_name FROM USER_NESTED_TABLES
    WHERE PARENT_TABLE_NAME = 'EMP_TAB';
  EXECUTE IMMEDIATE 'RENAME "' || gen_name || '"TO <span class="bold">emp_tab_reflist</span>';
END;
/
 
DESCRIBE <span class="bold">emp_tab_reflist</span>
 Name                    Null?    Type
 ----------------------- -------- ----------------
 COLUMN_VALUE                     <span class="bold">REF OF XMLTYPE</span>
</pre></div>
<!-- class="example" -->
<p><a href="#CHDDAJBJ">Example 9-11</a> shows a query that selects the names of all San Francisco-based employees and the streets in which they live. The example queries the address table on element <code>City</code>, and joins back with the employee table. The explain-plan fragment shown indicates a join between tables <code>emp_tab_reflist</code> and <code>emp_tab</code>.</p>
<div id="ADXDB4628" class="example">
<p class="titleinexample"><a id="CHDDAJBJ"></a>Example 9-11 XPath Rewrite for an Out-Of-Line Collection</p>
<pre>
SELECT em.name, ad.street
  FROM emp_tab,
       XMLTable(XMLNAMESPACES ('http://www.oracle.com/emp.xsd' AS "x"),
                '/x:Employee' PASSING OBJECT_VALUE
                COLUMNS name   VARCHAR2(20) PATH 'Name') em,
       XMLTable(XMLNAMESPACES ('http://www.oracle.com/emp.xsd' AS "x"),
                '/x:Employee/Addr' PASSING OBJECT_VALUE
                COLUMNS street VARCHAR2(20) PATH 'Street',
                        city   VARCHAR2(20) PATH 'City') ad
  WHERE ad.city = 'San Francisco';
 
NAME                 STREET
-------------------- --------------------
Abe Bee              A Street
Eve Fong             E Street
George Hu            G Street
Iris Jones           I Street
Karl Luomo           K Street
Marina Namur         M Street
Omar Pinano          O Street
Quincy Roberts       Q Street
 
8 rows selected.
</pre>
<pre>
|   4 |    TABLE ACCESS FULL         | EMP_TAB_REFLIST |    32 |   640 |     2   (0)| 00:00:01 |
|   5 |   TABLE ACCESS BY INDEX ROWID| EMP_TAB         |     1 |    29 |     1   (0)| 00:00:01 |
|*  6 |    INDEX UNIQUE SCAN         | SYS_C005567     |     1 |       |     0   (0)| 00:00:01 |
</pre></div>
<!-- class="example" -->
<p>To improve performance you can create an index on the <code>REF</code> values in the intermediate table, <code>emp_tab_reflist</code>. This lets Oracle XML&nbsp;DB query the address table, obtain an object reference (<code>REF</code>) to the relevant row, join it with the intermediate table storing the list of <code>REF</code> values, and join that table back with the employee table.</p>
<p>You can create an index on <code>REF</code> values only if the <code>REF</code> is <span class="italic">scoped</span> or has a referential constraint. A scoped <code>REF</code> column stores pointers only to objects in a particular table. The <code>REF</code> values in table <code>emp_tab_reflist</code> point only to objects in table <code>addr_tab</code>, so you can create a scope constraint and an index on the <code>REF</code> column, as shown in <a href="#CHDIAFAE">Example 9-12</a>.</p>
<div id="ADXDB4629" class="example">
<p class="titleinexample"><a id="CHDIAFAE"></a>Example 9-12 XPath Rewrite for an Out-Of-Line Collection, with Index on REFs</p>
<pre>
ALTER TABLE emp_tab_reflist <span class="bold">ADD SCOPE FOR</span> (COLUMN_VALUE) IS addr_tab;
CREATE INDEX reflist_idx ON emp_tab_reflist (COLUMN_VALUE);
</pre>
<p>The explain-plan fragment for the same query as in <a href="#CHDDAJBJ">Example 9-11</a> shows that index <code>reflist_idx</code> is picked up.</p>
<pre>
|   4 |    TABLE ACCESS BY INDEX ROWID| EMP_TAB_REFLIST |     1 |    20 |     1   (0)| 00:00:01 |
|*  5 |     INDEX RANGE SCAN          | <span class="bold">REFLIST_IDX</span>     |     1 |       |     0   (0)| 00:00:01 |
|   6 |   TABLE ACCESS BY INDEX ROWID | EMP_TAB         |       |       |            |          |
|*  7 |    INDEX UNIQUE SCAN          | SYS_C005567     |     1 |       |     0   (0)| 00:00:01 |
</pre></div>
<!-- class="example" -->
<p>In cases where the more selective predicates in the query are on the employee table, you might want to set XML schema attribute <code>storeVarrayAsTable</code> to <code>false</code>, in order to store the varray of <code>REF</code> values in line in table <code>emp_tab</code>. Storing the varray in line effectively forces any query involving the two tables <code>emp_tab</code> and <code>addr_tab</code> to always be driven from <code>emp_tab</code>. There is then no way to efficiently join back from the address table. This approach is inappropriate when the number of employees is large, because it involves a full table scan of table <code>emp_tab</code>, which can be expensive.</p>
</div>
<!-- class="sect1" -->
<a id="BHAFCACA"></a>
<div id="ADXDB0730" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Partitioning XMLType <a id="sthref863"></a>Tables and Columns Stored Object-Relationally</h2>
<p>This section is about XML data that is stored using structured storage, that is, object-relationally.</p>
<p>When you partition an <code>XMLType</code> table or a table with an <code>XMLType</code> column using list, range, or hash partitioning, any ordered collection tables (OCTs) or out-of-line tables within the data are automatically partitioned accordingly, by default.</p>
<p>This <span class="glossaryterm"><a id="sthref864"></a>equipartitioning</span> means that the partitioning of an OCT or an out-of-line table follows the partitioning scheme of its parent (base) table. There is a corresponding child-table partition for each partition of the base table. A child element is stored in the child-table partition that corresponds to the base-table partition of its parent element.</p>
<p>Storage attributes for a base table partition are, by default, also used for the corresponding child-table partitions. You can override these storage attributes for a given child-table partition.</p>
<p>Similarly, by default, the name of an OCT partition is the same as its base (parent) table, but you can override this behavior by specifying the name to use. The name of an out-of-line table partition is always the same as the partition of its parent-table (which could be a base table or an OCT).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Equipartitioning of <code>XMLType</code> data stored object-relationally is not available in releases prior to Oracle Database 11<span class="italic">g</span> Release 1 (11.1).</p>
</li>
<li>
<p>Equipartitioning of <code>XMLType</code> data that is stored out of line is not available in releases prior to Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2). Starting with that release, out-of-line tables are not shared: You cannot create two top-level tables that are based on the same XML schema, if that schema specifies an out-of-line table.</p>
</li>
</ul>
<p>You can prevent partitioning of OCTs by specifying the keyword <code>GLOBAL</code> in a <code>CREATE TABLE</code> statement. (Starting with Oracle Database 11g Release 1 (11.1), the default behavior uses keyword <code>LOCAL</code>). For information about converting a non-partitioned collection table to a partitioned collection table, see <a class="olink VLDBG00302" href="../../server.112/e25523/part_admin002.htm#VLDBG00302"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a>.</p>
<p>You can prevent partitioning of out-of-line tables, and thus allow out-of-line sharing, by turning on event 31178 with level 0x200:</p>
<pre>
ALTER SESSION SET EVENTS '31178 TRACE NAME CONTEXT FOREVER, LEVEL 0x200'
</pre></div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#CHDGFDFA">"Controlling How Collections Are Stored for Object-Relational XMLType Storage"</a> for information about OCTs</p>
</li>
<li>
<p><a class="olink SQLRF01402" href="../../server.112/e41084/statements_7002.htm#SQLRF01402"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about creating tables with partitions using keywords <code>GLOBAL</code> and <code>LOCAL</code></p>
</li>
</ul>
</div>
<div id="ADXDB4630" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref865"></a>
<h3 class="sect2">Examples of Partitioning XMLType Data</h3>
<p>You can specify partitioning information for an <code>XMLType</code> base table in two ways:</p>
<ul>
<li>
<p>During XML schema registration, using XML Schema annotation <code>xdb:tableProps</code></p>
</li>
<li>
<p>During table creation using <code>CREATE TABLE</code></p>
</li>
</ul>
<p><a href="#BHADGCEG">Example 9-13</a> and <a href="#BHABFFHC">Example 9-14</a> illustrate this. These two examples have exactly the same effect. They partition the base <code>purchaseorder</code> table using the <code>Reference</code> element to specify ranges. They equipartition the child table of line items with respect to the base table.</p>
<p><a href="#BHADGCEG">Example 9-13</a> shows element <code>PurchaseOrder</code> from the purchase-order XML schema, annotated to partition the base table and its child table of line items.</p>
<div id="ADXDB4631" class="example">
<p class="titleinexample"><a id="BHADGCEG"></a>Example 9-13 Specifying Partitioning Information During XML Schema Registration</p>
<pre>
&lt;xs:element name="PurchaseOrder" type="PurchaseOrderType"
            xdb:defaultTable="PURCHASEORDER"
            <span class="bold">xdb:tableProps</span> =
              "VARRAY XMLDATA.LINEITEMS.LINEITEM
                 STORE AS TABLE <span class="bold">lineitem_table</span>
                   ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
                   <span class="bold">PARTITION</span> BY RANGE (XMLDATA.Reference)
                     (<span class="bold">PARTITION p1</span> VALUES LESS THAN (1000)
                        VARRAY XMLDATA.LINEITEMS.LINEITEM
                          <span class="bold">STORE AS TABLE lineitem_p1</span> (<span class="bold">STORAGE (MINEXTENTS 13)</span>),
                      <span class="bold">PARTITION p2</span> VALUES LESS THAN (2000)
                        VARRAY XMLDATA.LINEITEMS.LINEITEM
                          <span class="bold">STORE AS TABLE lineitem_p2</span> (<span class="bold">STORAGE (MINEXTENTS 13)</span>))"/&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BHABFFHC">Example 9-14</a> specifies the same partitioning as in <a href="#BHADGCEG">Example 9-13</a>, but it does so during the creation of the base table <code>purchaseorder</code>.</p>
<div id="ADXDB4632" class="example">
<p class="titleinexample"><a id="BHABFFHC"></a>Example 9-14 Specifying Partitioning Information During Table Creation</p>
<pre>
CREATE TABLE purchaseorder OF XMLType
  XMLSCHEMA "http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd"
  ELEMENT "PurchaseOrder"
  VARRAY "XMLDATA"."LINEITEMS"."LINEITEM" STORE AS TABLE <span class="bold">lineitem_table</span>
    ((PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
    <span class="bold">PARTITION</span> BY RANGE (XMLDATA.Reference)
      (<span class="bold">PARTITION p1</span> VALUES LESS THAN (1000)
         VARRAY "XMLDATA"."LINEITEMS"."LINEITEM" <span class="bold">STORE AS TABLE lineitem_p1</span>
           (<span class="bold">STORAGE (MINEXTENTS 13)</span>),
       <span class="bold">PARTITION p2</span> VALUES LESS THAN (2000)
         VARRAY  "XMLDATA"."LINEITEMS"."LINEITEM" <span class="bold">STORE AS TABLE lineitem_p2</span>
           (<span class="bold">STORAGE (MINEXTENTS 13)</span>));
</pre></div>
<!-- class="example" -->
<p><a href="#BHADGCEG">Example 9-13</a> and <a href="#BHABFFHC">Example 9-14</a> also show how you can specify object storage options for the individual child-table partitions. In this case, the <code>STORAGE</code> clauses specify that extents of size 14M are to be allocated initially for each of the child-table partitions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="apphxdb.htm#BABDAGBF">"Annotated Purchase-Order XML Schema, purchaseOrder.xsd"</a></p>
</li>
<li>
<p><a href="xdb03usg.htm#CHDDIACH">Example 3-13, "Creating an XMLType Table that Conforms to an XML Schema"</a></p>
</li>
<li>
<p><a class="olink ADOBJ00608" href="../../appdev.112/e11822/adobjcol.htm#ADOBJ00608"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about partitioning object-relational data</p>
</li>
<li>
<p><a class="olink VLDBG1116" href="../../server.112/e25523/part_admin001.htm#VLDBG1116"><span class="italic">Oracle Database VLDB and Partitioning Guide</span></a> for more information about partitioning</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADXDB4633" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref866"></a>
<h3 class="sect2">Partition Maintenance</h3>
<p>You need not define or maintain child-table partitions manually. When you perform partition maintenance on the base (parent) table, corresponding maintenance is automatically performed on the child tables as well.</p>
<p>There are a few exceptions to the general rule that you perform partition maintenance only on the base table. In the following cases you perform maintenance on a child table:</p>
<ul>
<li>
<p>Modify the <span class="italic">default</span> physical storage attributes of a collection partition</p>
</li>
<li>
<p>Modify the physical storage attributes of a collection partition</p>
</li>
<li>
<p>Move a collection partition to a different segment, possibly in a different tablespace</p>
</li>
<li>
<p>Rename a collection partition</p>
</li>
</ul>
<p>For example, if you change the tablespace of a base table, that change is not cascaded to its child-table partitions. You must manually use <code>ALTER TABLE MODIFY PARTITION</code> on the child-table partitions to change their tablespace.</p>
<p>Other than those exceptional operations, you perform all partition maintenance on the base table only. This includes operations such as adding, dropping, and splitting a partition.</p>
<p>Online partition redefinition is also supported for child tables. You can copy unpartitioned child tables to partitioned child tables during online redefinition of a base table. You typically specify parameter values <code>copy_indexes =&gt; 0</code> and <code>copy_constraints =&gt; false</code> for PL/SQL procedure <code>DBMS_REDEFINITION.copy_table_dependents</code>, to protect the indexes and constraints of the newly defined child tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF01001" href="../../server.112/e41084/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about SQL statement <code>ALTER TABLE</code></p>
</li>
<li>
<p><a class="olink ARPLS042" href="../../appdev.112/e40758/d_redefi.htm#ARPLS042"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about online partition redefinition using PL/SQL package <code>DBMS_REDEFINITION</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1030944"></a>
<div id="ADXDB4634" class="sect1">
<h2 class="sect1">Fully Qualified <a id="sthref867"></a><a id="sthref868"></a><a id="sthref869"></a><a id="sthref870"></a><a id="sthref871"></a>XML Schema URLs</h2>
<p>By default, XML schema URLs are referenced within the scope of the current database user. XML schema URLs are first resolved as the names of <span class="italic">local</span> XML schemas owned by the current user.</p>
<ul>
<li>
<p>If there are no such XML schemas, then they are resolved as names of <span class="italic">global</span> XML schemas.</p>
</li>
<li>
<p>If there are no <span class="italic">global</span> XML schemas either, then Oracle XML&nbsp;DB raises an error.</p>
</li>
</ul>
<p>To permit explicit reference to particular XML schemas, Oracle XML&nbsp;DB supports the notion of <span class="italic">fully qualified</span> XML schema URLs. The name of the database user owning the XML schema is specified as part of the XML schema URL. Fully qualified XML schema URLs belong to the Oracle XML&nbsp;DB namespace:</p>
<pre>
http://xmlns.oracle.com/xdb/schemas/<span class="bolditalic">&lt;database-user&gt;</span>/&lt;schemaURL-minus-protocol&gt;
</pre>
<p>For example, suppose there is a registered global XML schema with the URL <code>http://www.example.com/po.xsd</code>, and user <code>QUINE</code> has a local registered XML schema with the same URL. Another user can reference the schema owned by <code>QUINE</code> as follows using this fully qualified XML Schema URL:</p>
<pre>
http://xmlns.oracle.com/xdb/schemas/<span class="bold">QUINE</span>/www.example.com/po.xsd
</pre>
<p>The fully qualified URL for the global XML schema is:</p>
<pre>
http://xmlns.oracle.com/xdb/schemas/<span class="bold">PUBLIC</span>/www.example.com/po.xsd
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb05sto.htm#BJFFCACF">"Local and Global XML Schemas"</a></div>
</div>
<!-- class="sect1" -->
<a id="BHAHHAJF"></a>
<div id="ADXDB4636" class="sect1">
<h2 class="sect1">Mapping <a id="sthref872"></a><a id="sthref873"></a><a id="sthref874"></a><a id="sthref875"></a>XML Fragments to Large Objects (LOBs)</h2>
<p>You can specify the <a id="sthref876"></a><a id="sthref877"></a><a id="sthref878"></a>SQL data type to use for a complex element as being <code>CLOB</code> or <code>BLOB</code>. In <a href="#i1044845">Figure 9-2</a>, for example, an entire XML fragment is stored in a LOB attribute. This is useful when parts of an XML document are typically retrieved and stored as whole, and are seldom queried. By storing XML fragments as LOBs, you can save on parsing, decomposition, and recomposition overheads.</p>
<p>In <a href="#BHAFGFDA">Example 9-15</a>, the XML schema defines element <code>Addr</code> using the annotation <code>SQLType = "CLOB"</code>:</p>
<div id="ADXDB4637" class="example">
<p class="titleinexample"><a id="BHAFGFDA"></a>Example 9-15 Oracle XML&nbsp;DB XML Schema: Mapping complexType XML Fragments to LOBs</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"       
             targetNamespace="http://www.oracle.com/emp.xsd"       
             xmlns:emp="http://www.oracle.com/emp.xsd"       
             xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;complexType name="Employee" xdb:SQLType="OBJ_T"&gt;
         &lt;sequence&gt;
           &lt;element name="Name" type="string"/&gt;
           &lt;element name="Age" type="decimal"/&gt;
           <span class="bold">&lt;element name="Addr" xdb:SQLType="CLOB"&gt;</span>
             &lt;complexType &gt;
               &lt;sequence&gt;
                 &lt;element name="Street" type="string"/&gt;
                 &lt;element name="City" type="string"/&gt;
               &lt;/sequence&gt;
             &lt;/complexType&gt;
           &lt;/element&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
     &lt;/schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/PO.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre>
<p>When registering this XML schema, Oracle XML&nbsp;DB generates the following types and <code>XMLType</code> tables:</p>
<pre>
CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T, 
                            Name VARCHAR2(4000), 
                            Age NUMBER, 
                            Addr CLOB);
</pre></div>
<!-- class="example" -->
<div id="ADXDB4638" class="figure">
<p class="titleinfigure"><a id="i1044845"></a>Figure 9-2 Mapping complexType XML Fragments to Character Large Objects (CLOB)</p>
<img width="278" height="244" src="img/adxdb011.gif" alt="Description of Figure 9-2 follows" /><br />
<a id="sthref879" href="img_text/adxdb011.htm">Description of "Figure 9-2 Mapping complexType XML Fragments to Character Large Objects (CLOB) "</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i1036309"></a>
<div id="ADXDB4639" class="sect1">
<h2 class="sect1"><a id="sthref880"></a>complexType Extensions and Restrictions in Oracle XML&nbsp;DB</h2>
<p>In XML Schema, <code>complexType</code> values are declared based on <code>complexContent</code> and <code>simpleContent</code>.</p>
<ul>
<li>
<p><code>simpleContent</code> is declared as an extension of <code>simpleType</code>.</p>
</li>
<li>
<p><code>complexContent</code> is declared as one of the following:</p>
<ul>
<li>
<p>Base type</p>
</li>
<li>
<p><code>complexType</code> extension</p>
</li>
<li>
<p><code>complexType</code> restriction</p>
</li>
</ul>
</li>
</ul>
<p>This section describes the Oracle XML&nbsp;DB extensions and restrictions to <code>complexType</code>.</p>
<div id="ADXDB4640" class="sect2"><a id="sthref881"></a>
<h3 class="sect2">complexType Declarations in <a id="sthref882"></a><a id="sthref883"></a>XML Schema: Handling Inheritance</h3>
<p>For <code>complexType</code>, Oracle XML&nbsp;DB handles inheritance in the XML schema as follows:</p>
<ul>
<li>
<p>For complex types declared to <span class="italic">extend</span> other complex types, the SQL type corresponding to the base type is specified as the supertype for the current SQL type. Only the additional attributes and elements declared in the sub-complextype are added as attributes to the sub-object-type.</p>
</li>
<li>
<p>For complex types declared to <span class="italic">restrict</span> other complex types, the SQL type for the sub-complex type is set to be the same as the SQL type for its base type. This is because SQL does not support restriction of object types through the inheritance mechanism. Any constraints are imposed by the restriction in XML schema.</p>
</li>
</ul>
<p><a href="#BHABGCDF">Example 9-16</a> shows the registration of an XML schema that defines a base <code>complexType</code> <code>Address</code> and two extensions <code>USAddress</code> and <code>IntlAddress</code>.</p>
<div id="ADXDB4641" class="example">
<p class="titleinexample"><a id="BHABGCDF"></a>Example 9-16 XML Schema Inheritance: complexContent as an Extension of complexTypes</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;xs:complexType name="Address" xdb:SQLType="ADDR_T"&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name="street" type="xs:string"/&gt;
           &lt;xs:element name="city" type="xs:string"/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name="USAddress" xdb:SQLType="USADDR_T"&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:extension base="Address"&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name="zip" type="xs:string"/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:extension&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name="IntlAddress" final="#all" xdb:SQLType="INTLADDR_T"&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:extension base="Address"&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name="country" type="xs:string"/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:extension&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/PO.xsd',
    SCHAMEDOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Type <code>intladdr_t</code> is created as a <span class="italic">final</span> type because the corresponding <code>complexType</code> specifies the "<code>final</code>" attribute. By default, all <code>complexTypes</code> can be extended and restricted by other types, so all SQL object types are created as types that are <span class="italic">not</span> final.</div>
<pre>
CREATE TYPE addr_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                             "street" VARCHAR2(4000),
                             "city" VARCHAR2(4000)) NOT FINAL;
CREATE TYPE usaddr_t UNDER addr_t ("zip" VARCHAR2(4000)) NOT FINAL;
CREATE TYPE intladdr_t UNDER addr_t ("country" VARCHAR2(4000)) FINAL;
</pre>
<p><a href="#BHAHEIHC">Example 9-17</a> shows the registration of an XML schema that defines a base <code>complexType</code> <code>Address</code> and a restricted type <code>LocalAddress</code> that prohibits the specification of <code>country</code> attribute.</p>
<div id="ADXDB4642" class="example">
<p class="titleinexample"><a id="BHAHEIHC"></a>Example 9-17 <a id="sthref884"></a><a id="sthref885"></a>Inheritance in XML Schema: Restrictions in complexTypes</p>
<pre>
DECLARE
  doc varchar2(3000) :=
    '&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;xs:complexType name="Address" xdb:SQLType="ADDR_T"&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name="street" type="xs:string"/&gt;
           &lt;xs:element name="city" type="xs:string"/&gt;
           &lt;xs:element name="zip" type="xs:string"/&gt;
           &lt;xs:element name="country" type="xs:string" minOccurs="0"
                       maxOccurs="1"/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name="LocalAddress" xdb:SQLType="USADDR_T"&gt;
         &lt;xs:complexContent&gt;
           &lt;xs:restriction base="Address"&gt;
             &lt;xs:sequence&gt;
               &lt;xs:element name="street" type="xs:string"/&gt;
               &lt;xs:element name="city" type="xs:string"/&gt;
               &lt;xs:element name="zip" type="xs:string"/&gt;
               &lt;xs:element name="country" type="xs:string" 
                           minOccurs="0" maxOccurs="0"/&gt;
             &lt;/xs:sequence&gt;
           &lt;/xs:restriction&gt;
         &lt;/xs:complexContent&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/PO.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<p>Because SQL inheritance does not support a notion of restriction, the SQL data type corresponding to a restricted <code>complexType</code> is a empty subtype of the parent object type. For the XML schema of <a href="#BHAHEIHC">Example 9-17</a>, Oracle XML&nbsp;DB generates the following SQL types:</p>
<pre>
CREATE TYPE addr_t AS OBJECT (SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                              "street"   VARCHAR2(4000),
                              "city"     VARCHAR2(4000),
                              "zip"      VARCHAR2(4000),
                              "country"  VARCHAR2(4000)) NOT FINAL;
CREATE TYPE usaddr_t UNDER addr_t;
</pre></div>
<!-- class="sect2" -->
<div id="ADXDB4643" class="sect2"><a id="sthref886"></a>
<h3 class="sect2">Mapping complexType: <a id="sthref887"></a><a id="sthref888"></a>simpleContent to Object Types</h3>
<p>A complex type based on a <code>simpleContent</code> declaration is mapped to an object type with attributes corresponding to the XML attributes and an extra <code>SYS_XDBBODY$</code> attribute corresponding to the body value. The data type of the body attribute is based on <code>simpleType</code> which defines the body type.</p>
<div id="ADXDB4644" class="example">
<p class="titleinexample"><a id="BHAFGHGJ"></a>Example 9-18 XML Schema complexType: Mapping complexType to simpleContent</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"               
             targetNamespace="http://www.oracle.com/emp.xsd"      
             xmlns:emp="http://www.oracle.com/emp.xsd" 
             xmlns:xdb="http://xmlns.oracle.com/xdb"&gt; 
       &lt;complexType name="name" xdb:SQLType="OBJ_T"&gt; 
         &lt;simpleContent&gt; 
           &lt;restriction base="string"&gt; 
           &lt;/restriction&gt; 
         &lt;/simpleContent&gt; 
       &lt;/complexType&gt;
     &lt;/schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/emp.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<p>For the XML schema of <a href="#BHAFGHGJ">Example 9-18</a>, Oracle XML&nbsp;DB generates the following type:</p>
<pre>
CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T, 
                            SYS_XDBBODY$ VARCHAR2(4000));
</pre></div>
<!-- class="sect2" -->
<div id="ADXDB4645" class="sect2"><a id="sthref889"></a>
<h3 class="sect2">Mapping <a id="sthref890"></a><a id="sthref891"></a>complexType: any and anyAttribute</h3>
<p>Oracle XML&nbsp;DB maps the element declaration, <code>any</code>, and the attribute declaration, <code>anyAttribute</code>, to <code>VARCHAR2</code> attributes (or optionally to Large Objects (LOBs)) in the created object type. The object attribute stores the text of the XML fragment that matches the <code>any</code> declaration.</p>
<ul>
<li>
<p>The <code>namespace</code> attribute can be used to restrict the contents so that they belong to a specified namespace.</p>
</li>
<li>
<p>The <code>processContents</code> attribute within the <code>any</code> element declaration, indicates the level of validation required for the contents matching the <code>any</code> declaration.</p>
</li>
</ul>
<p>The code in <a href="#BHACFACC">Example 9-19</a> declares an <code>any</code> element and maps it to the column <code>SYS_XDBANY$</code>, in object type <code>obj_t</code>. It also declares that attribute <code>processContents</code> does not validate contents that match the <code>any</code> declaration.</p>
<div id="ADXDB4646" class="example">
<p class="titleinexample"><a id="BHACFACC"></a>Example 9-19 XML Schema: Mapping complexType to any/anyAttribute</p>
<pre>
DECLARE
  doc VARCHAR2(3000) :=
    '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"  
             targetNamespace="http://www.oracle.com/any.xsd" 
             xmlns:emp="http://www.oracle.com/any.xsd" 
             xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;complexType name="Employee" xdb:SQLType="OBJ_T"&gt;
         &lt;sequence&gt;
           &lt;element name="Name" type="string"/&gt;
           &lt;element name="Age" type="decimal"/&gt;
           &lt;<span class="bold">any</span> namespace="http://www/w3.org/2001/xhtml"
                <span class="bold">processContents="skip"</span>/&gt;
         &lt;/sequence&gt;
       &lt;/complexType&gt;
     &lt;/schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/emp.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<p>For the XML schema of <a href="#BHACFACC">Example 9-19</a>, Oracle XML&nbsp;DB generates the following type:</p>
<pre>
CREATE TYPE obj_t AS OBJECT(SYS_XDBPD$ XDB.XDB$RAW_LIST_T,
                            Name VARCHAR2(4000), 
                            Age NUMBER, 
                            SYS_XDBANY$ VARCHAR2(4000));
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAHIABH"></a>
<div id="ADXDB4655" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">XML Schema: Working with Circular and <a id="sthref892"></a><a id="sthref893"></a><a id="sthref894"></a><a id="sthref895"></a>Cyclical Dependencies</h2>
<p>The W3C XML Schema Recommendation lets <code>complexTypes</code> and global elements contain recursive references. For example, a <code>complexType</code> definition can <span class="italic">contain</span> an element based on that same <code>complexType</code>, or a global element can contain a reference to itself. In both cases the reference can be direct or indirect. This kind of structure allows for instance documents where the element in question can appear an infinite number of times in a recursive hierarchy.</p>
<div id="ADXDB4656" class="example">
<p class="titleinexample"><a id="BABBFFDC"></a>Example 9-20 An XML Schema with Circular Dependency</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xdb="http://xmlns.oracle.com/xdb" 
           elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;
  &lt;xs:element name="person" type="personType" xdb:defaultTable="PERSON_TABLE"/&gt;
  &lt;xs:complexType name="<span class="bold">personType</span>" xdb:SQLType="PERSON_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="descendant" type="<span class="bold">personType</span>" minOccurs="0"  
                  maxOccurs="unbounded" xdb:SQLName="DESCENDANT"
                  xdb:defaultTable="DESCENDANT_TABLE"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="personName" use="required" xdb:SQLName="PERSON_NAME"&gt; 
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:maxLength value="20"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</pre>
<p>The XML schema in <a href="#BABBFFDC">Example 9-20</a> includes a circular dependency. The <code>complexType</code> <code>personType</code> consists of a <code>personName</code> attribute and a collection of <code>descendant</code> elements. The <code>descendant</code> element is defined as being of type <code>personType</code>.</p>
</div>
<!-- class="example" -->
<div id="ADXDB4657" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref896"></a>
<h3 class="sect2">For Circular XML Schema Dependencies Set Parameter GENTABLES to TRUE</h3>
<p>Oracle XML&nbsp;DB supports XML schemas that define this kind of structure. It does this by detecting the cycles, breaking them, and storing the recursive elements as rows in a separate <code>XMLType</code> table that is created during XML schema registration.</p>
<p>Consequently, it is important to ensure that parameter <code>GENTABLES</code> is set to <code>TRUE</code> when registering an XML schema that defines this kind of structure. The name of the table used to store the recursive elements can be specified by adding an <code>xdb:defaultTable</code> annotation to the XML schema.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4658" class="sect2"><a id="sthref897"></a>
<h3 class="sect2">complexType Declarations XML Schema: Handling <a id="sthref898"></a><a id="sthref899"></a>Cycles</h3>
<p>SQL object types do not allow cycles. Cycles in an XML schema are broken while generating the object types, by introducing a <code>REF</code> attribute at the point where the cycle would be completed. Thus, part of the data is stored out of line, but it is still retrieved as part of the parent XML document.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database&nbsp;11g Release 2 (11.2.0.2), you can create only <span class="italic">one</span> <code>XMLType</code> table that uses an XML schema that results in <code>an out-of-line table</code>. An error is raised if you try to create a second table that uses the same XML schema.</div>
<p>XML schemas permit cycling between definitions of complex types. <a href="#i1044847">Figure 9-3</a> shows this, where the definition of complex type <code>CT1</code> can reference another complex type <code>CT2</code>, whereas the definition of <code>CT2</code> references the first type <code>CT1</code>.</p>
<p>XML schemas permit cycles among definitions of complex types. <a href="#BHAGBAFH">Example 9-21</a> creates a cycle of length two:</p>
<div id="ADXDB4659" class="example">
<p class="titleinexample"><a id="BHAGBAFH"></a>Example 9-21 XML Schema: Cycling Between complexTypes</p>
<pre>
DECLARE 
  doc VARCHAR2(3000) :=
    '&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
                xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;xs:complexType name="<span class="bold">CT1</span>" xdb:SQLType="CT1"&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name="e1" type="xs:string"/&gt;
           &lt;xs:element name="e2" type="<span class="bold">CT2</span>"/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
       &lt;xs:complexType name="<span class="bold">CT2</span>" xdb:SQLType="CT2"&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name="e1" type="xs:string"/&gt;
           &lt;xs:element name="e2" type="<span class="bold">CT1</span>"/&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/emp.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<p>SQL types do not allow cycles in type definitions. However, they do support <span class="glossaryterm">weak cycles</span>, that is, cycles involving <code><a id="sthref900"></a><a id="sthref901"></a>REF</code> (reference) object attributes. Cyclic XML schema definitions are mapped to SQL object types in such a way that cycles are avoided by forcing <code>SQLInline = "false"</code> at the appropriate points. This creates a weak SQL cycle.</p>
<p>For the XML schema of <a href="#BHAGBAFH">Example 9-21</a>, Oracle XML&nbsp;DB generates the following types:</p>
<pre>
CREATE TYPE ct1 AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T,
                           "e1"        VARCHAR2(4000),
                           "e2"        <span class="bold">REF</span> XMLType) NOT FINAL;
CREATE TYPE ct2 AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T,
                           "e1"        VARCHAR2(4000),
                           "e2"        CT1) NOT FINAL;
</pre>
<div id="ADXDB4660" class="figure">
<p class="titleinfigure"><a id="i1044847"></a>Figure 9-3 Cross Referencing Between Different complexTypes in the Same XML Schema</p>
<img width="311" height="164" src="img/adxdb012.gif" alt="Description of Figure 9-3 follows" /><br />
<a id="sthref902" href="img_text/adxdb012.htm">Description of "Figure 9-3 Cross Referencing Between Different complexTypes in the Same XML Schema"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Another example of a cyclic complex type involves the declaration of the complex type that refers to itself. In <a href="#BHADFCCI">Example 9-22</a>, type <code>SectionT</code> does this.</p>
<div id="ADXDB4661" class="example">
<p class="titleinexample"><a id="BHADFCCI"></a>Example 9-22 XML Schema: Cycling Between complexTypes, Self-Reference</p>
<pre>
DECLARE 
  doc VARCHAR2(3000) :=
    '&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"        
                xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
       &lt;xs:complexType name="<span class="bold">SectionT</span>" xdb:SQLType="SECTION_T"&gt;
         &lt;xs:sequence&gt;
           &lt;xs:element name="title" type="xs:string"/&gt;
           &lt;xs:choice maxOccurs="unbounded"&gt;
             &lt;xs:element name="body" type="xs:string" 
                         xdb:SQLCollType="BODY_COLL"/&gt;
             &lt;xs:element name="section" type="<span class="bold">SectionT</span>"/&gt;
           &lt;/xs:choice&gt;
         &lt;/xs:sequence&gt;
       &lt;/xs:complexType&gt;
     &lt;/xs:schema&gt;';
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/section.xsd',
    SCHEMADOC =&gt; doc);
END;
</pre></div>
<!-- class="example" -->
<p>For the XML schema of <a href="#BHADFCCI">Example 9-22</a>, Oracle XML&nbsp;DB generates the following types:</p>
<pre>
CREATE TYPE body_coll AS VARRAY(32767) OF VARCHAR2(4000);
CREATE TYPE section_t AS OBJECT (SYS_XDBPD$  XDB.XDB$RAW_LIST_T, 
                                 "title"     VARCHAR2(4000),
                                 "body"      BODY_COLL,
                                 "section"   XDB.XDB$REF_LIST_T) NOT FINAL;
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
In <a href="#BHADFCCI">Example 9-22</a>, object attribute <code>section</code> is declared as a varray of <code>REF</code> references to <code>XMLType</code> instances. Because there can be more than one occurrence of embedded sections, the attribute is a varray. It is a varray of <code>REF</code> references to <code>XMLType</code> instances, to avoid forming a cycle of SQL objects.</div>
<div id="ADXDB4662" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref903"></a>
<h4 class="sect3">How a complexType Can Reference Itself</h4>
<p>Assume that your XML schema, identified by "<code>http://www.oracle.com/PO.xsd</code>", has been registered. An <code>XMLType</code> table, <code>purchaseorder</code>, can then be created to store instances conforming to element <code>PurchaseOrder</code> of this XML schema, in an object-relational format:</p>
<pre>
CREATE TABLE purchaseorder OF XMLType 
   ELEMENT "http://www.oracle.com/PO.xsd#PurchaseOrder";
</pre>
<p><a href="#i1044836">Figure 9-4</a> illustrates schematically how a <code>complexType</code> can reference itself.</p>
<div id="ADXDB4663" class="figure">
<p class="titleinfigure"><a id="i1044836"></a>Figure 9-4 Self-Referencing Complex Type within an XML Schema</p>
<img width="239" height="164" src="img/adxdb037.gif" alt="Description of Figure 9-4 follows" /><br />
<a id="sthref904" href="img_text/adxdb037.htm">Description of "Figure 9-4 Self-Referencing Complex Type within an XML Schema"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1036327">"Cyclical References Among XML Schemas"</a></div>
<p>Hidden columns are created that correspond to the object type to which the <code>PurchaseOrder</code> element has been mapped. In addition, an <code><a id="sthref905"></a>XMLEXTRA</code> object column is created, to store top-level instance data such as namespace declarations. <code>XMLEXTRA</code> is reserved for internal use.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1036327"></a>
<div id="ADXDB4664" class="sect2">
<h3 class="sect2">Cyclical References Among XML Schemas</h3>
<p>XML schemas can depend on each other in such a way that they cannot be registered one after the other in the usual manner. Illustrations of such XML schemas follow in <a href="#i1044849">Figure 9-5</a>.</p>
<p>In the top half of the illustration, an example of indirect cyclical references between three XML schemas is shown.</p>
<p>In the bottom half of the illustration, an example of cyclical dependencies between two XML schemas is shown. The details of this simpler example are presented first.</p>
<div id="ADXDB4665" class="figure">
<p class="titleinfigure"><a id="i1044849"></a>Figure 9-5 Cyclical References Between XML Schemas</p>
<img width="423" height="369" src="img/adxdb013.gif" alt="Description of Figure 9-5 follows" /><br />
<a id="sthref906" href="img_text/adxdb013.htm">Description of "Figure 9-5 Cyclical References Between XML Schemas"</a><br />
<br /></div>
<!-- class="figure" -->
<p>An XML schema that includes another XML schema cannot be created if the included XML schema does not exist. The registration of XML schema <code>xm40.xsd</code> in <a href="#BHAHABJJ">Example 9-23</a> fails, if <code>xm40a.xsd</code> does not exist.</p>
<div id="ADXDB4666" class="example">
<p class="titleinexample"><a id="BHAHABJJ"></a>Example 9-23 An XML Schema that Includes a Non-Existent XML Schema</p>
<pre>
BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; '<span class="bold">xm40.xsd</span>',
  SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                        xmlns:my="xm40"  
                        targetNamespace="xm40"&gt;
     <span class="bold">             &lt;include schemaLocation="xm40a.xsd"/&gt;</span>
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name="Company"&gt;
                    &lt;sequence&gt;
                      &lt;element name="Name" type="string"/&gt;
                      &lt;element name="Address" type="string"/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name="Emp" type="my:Employee"/&gt;
                &lt;/schema&gt;',
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE); 
END;
/
</pre></div>
<!-- class="example" -->
<p>XML schema <code>xm40.xsd</code> can, however, be created if you specify option <code>FORCE =&gt; TRUE</code>, as in <a href="#BHAHFACD">Example 9-24</a>:</p>
<div id="ADXDB5884" class="example">
<p class="titleinexample"><a id="BHAHFACD"></a>Example 9-24 Using the FORCE Option to Register XML Schema xm40.xsd</p>
<pre>
BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; 'xm40.xsd',
  SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                        xmlns:my="xm40"  
                        targetNamespace="xm40"&gt;
                  &lt;include schemaLocation="xm40a.xsd"/&gt;
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name="Company"&gt;
                    &lt;sequence&gt;
                      &lt;element name="Name" type="string"/&gt;
                      &lt;element name="Address" type="string"/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name="Emp" type="my:Employee"/&gt;
                &lt;/schema&gt;',
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE, 
  FORCE     =&gt; <span class="bold">TRUE</span>); 
END;
/
</pre></div>
<!-- class="example" -->
<p>However, an attempt to use XML schema <code>xm40.xsd</code>, as in <a href="#BHAHFAFF">Example 9-25</a>, fails.</p>
<div id="ADXDB5885" class="example">
<p class="titleinexample"><a id="BHAHFAFF"></a>Example 9-25 Trying to Create a Table Using a Cyclic XML Schema</p>
<pre>
CREATE TABLE foo OF XMLType XMLSCHEMA "xm40.xsd" ELEMENT "Emp";
</pre></div>
<!-- class="example" -->
<p>If you register <code>xm40a.xsd</code> using the <code>FORCE</code> option, as in <a href="#BHAHIGDH">Example 9-26</a>, then both XML schemas can be used, as shown by the <code>CREATE TABLE</code> statements.</p>
<div id="ADXDB5886" class="example">
<p class="titleinexample"><a id="BHAHIGDH"></a>Example 9-26 Using the FORCE Option to Register XML Schema xm40a.xsd</p>
<pre>
BEGIN DBMS_XMLSCHEMA.registerSchema(
  SCHEMAURL =&gt; '<span class="bold">xm40a.xsd</span>',
  SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                        xmlns:my="xm40" 
                        targetNamespace="xm40"&gt;
                  <span class="bold">&lt;include schemaLocation="xm40.xsd"/&gt;</span>
                  &lt;!-- Define a global complextype here --&gt;
                  &lt;complexType name="Employee"&gt;
                    &lt;sequence&gt;
                      &lt;element name="Name" type="string"/&gt;
                      &lt;element name="Age" type="positiveInteger"/&gt;
                      &lt;element name="Phone" type="string"/&gt;
                    &lt;/sequence&gt;
                  &lt;/complexType&gt;
                  &lt;!-- Define a global element depending on included schema --&gt;
                  &lt;element name="Comp" type="my:Company"/&gt;
                &lt;/schema&gt;',
  LOCAL     =&gt; TRUE, 
  GENTYPES  =&gt; TRUE, 
  GENTABLES =&gt; TRUE, 
  FORCE     =&gt; <span class="bold">TRUE</span>); 
END;
/
</pre>
<pre>
CREATE TABLE foo  OF XMLType XMLSCHEMA "xm40.xsd"  ELEMENT "Emp";
CREATE TABLE foo2 OF XMLType XMLSCHEMA "xm40a.xsd" ELEMENT "Comp";
 
</pre></div>
<!-- class="example" -->
<p>Thus, to register these XML schemas, which depend on each other, you must use the <code>FORCE</code> parameter in <code>DBMS_XMLSCHEMA.registerSchema</code> for each schema, as follows:</p>
<ol>
<li>
<p>Register <code>xm40.xsd</code> with <code>FORCE</code> mode set to <code>TRUE</code>:</p>
<pre>
DBMS_XMLSCHEMA.registerSchema("xm40.xsd", "&lt;schema ...", ..., <span class="bold">FORCE =&gt; TRUE</span>)
</pre>
<p>At this point, <code>xm40.xsd</code> <span class="italic">cannot</span> be used.</p>
</li>
<li>
<p>Register <code>xm40a.xsd</code> in <code>FORCE</code> mode set to <code>TRUE</code>:</p>
<pre>
DBMS_XMLSCHEMA.registerSchema("xm40a.xsd", "&lt;schema ...", ..., <span class="bold">FORCE =&gt; TRUE</span>)
</pre>
<p>The second operation automatically compiles <code>xm40.xsd</code> and makes both XML schemas usable.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHACIBIA"></a>
<div id="ADXDB0710" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref907"></a>Support for Recursive Schemas</h2>
<p>Storing a <code>REF</code> to a recursive structure that is in an out-of-line table has the disadvantage that XPath queries against such documents cannot easily be rewritten, because it is not known at compile time how deep the structure might be. To enable rewrite of such XPath queries, a <code>DOCID</code> column is used to store a pointer back to the root document in any recursive structure, enabling some queries to use the out-of-line tables directly and join back using this column.</p>
<p><a href="#BHAEBJCA">Example 9-27</a> shows a recursive XML schema.</p>
<div id="ADXDB4667" class="example">
<p class="titleinexample"><a id="BHAEBJCA"></a>Example 9-27 Recursive XML Schema</p>
<pre>
&lt;schema targetNamespace="AbcNS" xmlns="http://www.w3.org/2001/XMLSchema"
          xmlns:abc="AbcNS" xmlnm:xdb="http://xmlns.oracle.com.xdb"&gt;
  &lt;element name="AbcCode" xdb:defaultTable="ABCCODETAB"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element ref="abc:AbcSection"/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
 
  &lt;element name="AbcSection"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="ID" type="integer"/&gt;
        &lt;element name="Contents" type="string"/&gt;
        &lt;element ref="abc:AbcSection"/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p>A <span class="glossaryterm"><a id="sthref908"></a>document-correlated recursive query</span> is a query using a SQL function that accepts an XPath or XQuery expression and an <code>XMLType</code> instance, where that XPath or XQuery expression contains '<code>//</code>'. A <a id="sthref909"></a>document-correlated recursive query can be <span class="italic">rewritten</span> if it can be determined at query compilation time that both of the following conditions are met:</p>
<ul>
<li>
<p>All fragments of the <code>XMLType</code> instance that are targeted by the XPath or XQuery expression reside in a single out-of-line table.</p>
</li>
<li>
<p>No other fragments of the <code>XMLType</code> instance reside in the same out-of-line table.</p>
</li>
</ul>
<p>The rewritten query is a join with the out-of-line table, based on the <code>DOCID</code> column.</p>
<p>Other queries with '<code>//</code>' can also be rewritten. For example, if there are several <code>address</code> elements, all of the same type, in different sections of a schema, and you often query all <code>address</code> elements with '<code>//</code>', not caring about their specific location in the document, rewrite can occur.</p>
<p>During schema registration, an additional <code>DOCID</code> column is generated for out-of-line <code>XMLType</code> tables This column stores the <code>OID</code> (Object Identifier Values) of the document, that is, the root element. This column is automatically populated when data is inserted in the tables. You can export tables containing <code>DOCID</code> columns and import them later.</p>
<div id="ADXDB4668" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref910"></a>
<h3 class="sect2">Sharing defaultTable Among Common Out-Of-Line Elements</h3>
<p>The out-of-line elements of the same qualified name (namespace and local name) and same type are stored in the same default table. As a special case, you can store the root element of a cyclic element structure out of line also, and in the same table as the sub-elements (if the root element is stored out of line also).</p>
<p>Both of the elements sharing the default table must be out-of-line elements, that is, the default table for an out-of-line element cannot be the same as the table for a top-level element. To do this, specify <code>xdb:SQLInline = "false"</code> for both elements and specify an explicit <code>xdb:defaultTable</code> attribute having the same value in both elements.</p>
<p><a href="#CHDHDJBC">Example 9-28</a> shows an XML schema with an out-of-line table that is stored in <code>ABCSECTIONTAB</code>.</p>
<div id="ADXDB4669" class="example">
<p class="titleinexample"><a id="CHDHDJBC"></a>Example 9-28 Out-of-line Table</p>
<pre>
&lt;schema targetNamespace="AbcNS" xmlns="http://www.w3.org/2001/XMLSchema"
           xmlns:abc="AbcNS" xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
  &lt;element name="AbcCode" xdb:defaultTable="ABCCODETAB"&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element ref="abc:AbcSection" xdb:SQLInline="false"/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
 
  &lt;element name="AbcSection" xdb:defaultTable=""&gt;
    &lt;complexType&gt;
      &lt;sequence&gt;
        &lt;element name="ID" type="integer"/&gt;
        &lt;element name="Contents" type="string"/&gt;
        &lt;element ref="abc:AbcSection" <span class="bold">xdb:SQLInline="false"</span>
                 xdb:defaultTable="<span class="bold">ABCSECTIONTAB</span>"/&gt;
      &lt;/sequence&gt;
    &lt;/complexType&gt;
  &lt;/element&gt;
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p>Both of the out-of-line <code>AbcSection</code> elements in <a href="#CHDHDJBC">Example 9-28</a> share the same default table, <code>ABCSECTIONTAB</code>.</p>
<p>However, the <a href="#BHAFGIHA">Example 9-29</a> illustrates <span class="italic">invalid</span> default table sharing: recursive elements (<code>XyZSection</code>) do not share the same out-of-line table.</p>
<div id="ADXDB4670" class="example">
<p class="titleinexample"><a id="BHAFGIHA"></a>Example 9-29 Invalid Default Table Sharing</p>
<pre>
 &lt;schema targetNamespace="XyzNS" xmlns="http://www.w3.org/2001/XMLSchema"
         xmlns:xyz="XyzNS" xmlns:xdb="http://xmlns.oracle.com/xdb"&gt;
   &lt;element name="XyzCode" xdb:defaultTable="XYZCODETAB"&gt;
   &lt;complexType&gt;
   &lt;sequence&gt;
      &lt;element name="CodeNumber" type="integer" minOccurs="0"/&gt;
      &lt;element ref="xyz:XyzChapter" xdb:SQLInline="false"/&gt;
      &lt;element ref="xyz:XyzPara" xdb:SQLInline="false" /&gt;
   &lt;/sequence&gt;
   &lt;/complexType&gt;
   &lt;/element&gt;
 
    &lt;element name="XyzChapter" xdb:defaultTable="XYZCHAPTAB"&gt;
     &lt;complexType&gt;
     &lt;sequence&gt;
         &lt;element name="Title" type="string"/&gt;
         &lt;element ref="xyz:XyzSection" xdb:SQLInline="false" 
                  <span class="bold">xdb:defaultTable="XYZSECTIONTAB"</span>/&gt;
      &lt;/sequence&gt;
      &lt;/complexType&gt;
    &lt;/element&gt;
 
    &lt;element name="XyzPara" xdb:defaultTable="XYZPARATAB"&gt;
     &lt;complexType&gt;
     &lt;sequence&gt;
         &lt;element name="Title" type="string"/&gt;
         &lt;element ref="xyz:XyzSection" xdb:SQLInline="false" 
                  <span class="bold">xdb:defaultTable="Other_XYZSECTIONTAB</span>"/&gt;
      &lt;/sequence&gt;
      &lt;/complexType&gt;
    &lt;/element&gt;
   
    &lt;element name="XyzSection"&gt;
    &lt;complexType&gt;
    &lt;sequence&gt;
        &lt;element name="ID" type="integer"/&gt;
        &lt;element name="Contents" type="string"/&gt;
        &lt;element ref="xyz:XyzSection" xdb:defaultTable="XYZSECTIONTAB"/&gt;
     &lt;/sequence&gt;
     &lt;/complexType&gt;
    &lt;/element&gt;
 &lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<p>The following query cannot be rewritten.</p>
<pre>
SELECT XMLQuery('//XyzSection' PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM xyzcode;
</pre></div>
<!-- class="sect2" -->
<div id="ADXDB4671" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref911"></a>
<h3 class="sect2">Query Rewrite when DOCID is Present</h3>
<p>Before processing <code>//</code> XPath expressions, check to find multiple occurrences of the same element. If all occurrences under the <code>//</code> share the same <code>defaultTable</code>, then the query can be rewritten to go against that table, using the <code>DOCID</code>. If there are other occurrences of the same element under the root sharing that table, but not under <code>//</code>, then the query cannot be rewritten. For example, consider this element structure:</p>
<p><code>&lt;Book&gt;</code> contains a <code>&lt;Chapter&gt;</code> and a <code>&lt;Part&gt;</code>. <code>&lt;Part&gt;</code> contains a <code>&lt;Chapter&gt;</code>.</p>
<p>Assume that both of the <code>&lt;Chapter&gt;</code> elements are stored out of line and they share the same default table. The query <code>/Book//Chapter</code> can be rewritten to go against the default table for the <code>&lt;Chapter&gt;</code> elements because all of the <code>&lt;Chapter&gt;</code> elements under <code>&lt;Book&gt;</code> share the same default table. Thus, this XPath query is a document-correlated recursive XPath query.</p>
<p>However, a query such as <code>/Book/Part//Chapter</code> cannot be rewritten, even though all the <code>&lt;Chapter&gt;</code> elements under <code>&lt;Part&gt;</code> share the same table, because there is another <code>&lt;Chapter&gt;</code> element under <code>&lt;Book&gt;</code>, which is the document root that also shares that table.</p>
<p>Consider the case where you are extracting <code>//AbcSection</code> with <code>DOCID</code> present, as in the XML schema described in <a href="#CHDHDJBC">Example 9-28</a>:</p>
<pre>
SELECT XMLQuery('//AbcSection' PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM abccodetab;
</pre>
<p>Both of the <code>AbcSection</code> elements are stored in the same table, <code>abcsectiontab</code>. The extraction applies to the underlying table, <code>abcsectiontab</code>.</p>
<p>Consider this query when <code>DOCID</code> is present:</p>
<pre>
SELECT XMLQuery('/AbcCode/AbcSection//AbcSection'
                PASSING OBJECT_VALUE RETURNING CONTENT)
  FROM abccodetab;
</pre>
<p>In both this case and the previous case, all reachable <code>AbcSection</code> elements are stored in the same out-of-line table. However, the first <code>AbcSection</code> element at <code>/AbcCode/AbcSection</code> cannot be retrieved by this query. Since the join condition is a <code>DOCID</code>, which cannot distinguish between different positions in the parent document, the correct result cannot be achieved by a direct query on table <code>abcsectiontab</code>. In this case, query rewrite does not occur since it is not a document-correlated recursive XPath. If this top-level <code>AbcSection</code> were not stored out of line with the rest, then the query could be rewritten.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB4672" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref912"></a>
<h3 class="sect2">Disabling DOCID Column Creation</h3>
<p>You can disable the creation of column <code>DOCID</code> by specifying an <code>OPTIONS</code> parameter when calling <code><a id="sthref913"></a>DBMS_XMLSCHEMA.registerSchema</code>. This disables <code>DOCID</code> creation in all <code>XMLType</code> tables generated during schema registration.</p>
<p>The <code>OPTIONS</code> parameter is an input parameter of data type <code>PLS_INTEGER</code>. Its default value is <code>0</code>, meaning no options are used. To inhibit generation of column <code>DOCID</code>, set parameter <code>OPTIONS</code> to <code>DBMS_XMLSCHEMA.REGISTER_NODOCID</code> (which is <code>1</code>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS377" href="../../appdev.112/e40758/d_xmlsch.htm#ARPLS377"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAGACHJ"></a>
<div id="ADXDB4678" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Loading and Retrieving <a id="sthref914"></a><a id="sthref915"></a><a id="sthref916"></a>Large Documents with Collections</h2>
<p>Configuration file <code>/xdbconfig.xml</code> has parameters that control the amount of memory used by the loading operation. These let you optimize the loading process, provided the following conditions are met:</p>
<ul>
<li>
<p>The document is loaded using one of the following:</p>
<ul>
<li>
<p>Protocols (FTP, HTTP(S), or DAV)</p>
</li>
<li>
<p>PL/SQL function <code>DBMS_XDB.createResource</code></p>
</li>
<li>
<p>A SQL <code>INSERT</code> statement into an <code>XMLType</code> table (but not an <code>XMLType</code> column)</p>
</li>
</ul>
</li>
<li>
<p>The document is XML schema-based and contains large collections (elements with <code>maxoccurs</code> set to a large number).</p>
</li>
<li>
<p>Collections in the document are stored as OCTs. This is the default behavior.</p>
</li>
</ul>
<p>In the following situations, these optimizations are sometimes suboptimal:</p>
<ul>
<li>
<p>When there are triggers on the base table.</p>
</li>
<li>
<p>When the base table is partitioned.</p>
</li>
<li>
<p>When collections are stored out of line (applies only to SQL <code>INSERT</code>).</p>
</li>
</ul>
<p>The basic idea behind this optimization is that it lets the collections be swapped into or out of the memory in bounded sizes. As an illustration of this idea consider the following example conforming to a purchase-order XML schema:</p>
<pre>
&lt;PurchaseOrder&gt;
  &lt;LineItem itemID="1"&gt;
    ...
  &lt;/LineItem&gt;
    .
    .
  &lt;LineItem itemID="10240"&gt;
    ...
  &lt;/LineItem&gt;
&lt;/PurchaseOrder&gt;
</pre>
<p>The purchase-order document here contains a collection of 10240 <code>LineItem</code> elements. Creating the entire document in memory and then pushing it out to disk can lead to excessive memory usage and in some instances a load failure due to inadequate system memory. To avoid that, you can create the documents in finite chunks of memory called <span class="glossaryterm">loadable units</span>.</p>
<p>In the example case, assume that each line item needs 1 KB of memory and that you want to use loadable units of 512 KB each. Each loadable unit then contains 512 line items, and there are approximately 20 such units. If you want the entire memory representation of the document to never exceed 2 MB, then you must ensure that at any time no more than 4 loadable units are maintained in the memory. You can use an LRU mechanism to swap out the loadable units.</p>
<p>By controlling the size of the loadable unit and the bound on the size of the document you can tune the memory usage and performance of the load or retrieval. Typically a larger loadable unit size translates into lesser number of disk accesses but takes up more memory. This is controlled by the parameter <a id="sthref917"></a><code>xdbcore-loadableunit-size</code> whose default value is 16 KB. The user can indicate the amount of memory to be given to the document by setting the <code><a id="sthref918"></a>xdbcore-xobmem-bound</code> parameter which defaults to 1 MB. The values to these parameters are specified in Kilobytes. So, the default value of <code>xdbcore-xobmem-bound</code> is 1024 and that of <code>xdbcore-loadableunit-size</code> is 16. These are soft limits that provide some guidance to the system as to how to use the memory optimally.</p>
<p>When the document is loaded using FTP, the pattern in which the loadable units (LU) are created and flushed to the disk is as follows:</p>
<pre>
No LUs
Create LU1[LineItems(LI):1-512]
LU1[LI:1-512], Create LU2[LI:513-1024]
.
.
LU1[LI:1-512],...,Create LU4[LI:1517:2028]    &lt;-   Total memory size = 2M
Swap Out LU1[LI:1-512], LU2[LI:513-1024],...,LU4[LI:1517-2028], Create LU5[LI:2029-2540]
Swap Out LU2[LI:513-1024], LU3, LU4, LU5, Create LU6[LI:2541-2052]
.
.
.
Swap Out LU16, LU17, LU18, LU10, Create LU20[LI:9729-10240]
Flush LU17,LU18,LU19,LU20
</pre>
<div id="ADXDB4679" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref919"></a>
<h3 class="sect2">Guidelines for Setting <a id="sthref920"></a>xdbcore Parameters</h3>
<p>Typically, if you have 1 GB of addressable PG then give about 1/10th of PGA to the document. Set <code>xobcore-xobmem-bound</code> to 1/10 of addressable PGA, which is 100M. During full document retrievals and loads, <code>xdbcore-loadableunit-size</code> should be as close to <code>xobcore-xobmem-bound</code> as possible.</p>
<p>Start by setting <code>xdbcore-loadableunit-size</code> to half the value of <code>xdbcore-xobmem-bound</code> (50 MB). Then try to load the document.</p>
<p>If you run out of memory then lower <code>xdbcore-xobmem-bound</code> and set <code>xdbcore-loadableunot-size</code> to half of its value. Continue this way until the documents load successfully.</p>
<p>If the load succeeds then try to increase <code>xdbcore-loadableunit-size</code>, to obtain better performance. If <code>xdbcore-loadableunit-size</code> equals <code>xdbcore-xobmem-bound</code>, then try to increase both parameters for further performance improvements.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb_rewrite.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb07evo.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
