<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XML Schema Evolution</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb06stt.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb08tra.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">19/54</span> <!-- End Header -->
<div id="ADXDB0800" class="chapter"><a id="BABJABIC"></a>
<h1 class="chapter"><span class="secnum">10</span> XML <a id="sthref921"></a><a id="sthref922"></a><a id="sthref923"></a><a id="sthref924"></a><a id="sthref925"></a><a id="sthref926"></a>Schema <a id="sthref927"></a><a id="sthref928"></a><a id="sthref929"></a>Evolution</h1>
<p>This chapter describes how you can update your XML schema after you have registered it with Oracle XML&nbsp;DB. XML schema evolution is the process of updating your registered XML schema.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BABGJBIC">Overview of XML Schema Evolution</a></p>
</li>
<li>
<p><a href="#BCGBHJEC">Using Copy-Based Schema Evolution</a></p>
</li>
<li>
<p><a href="#BCGFDDCF">Using In-Place XML Schema Evolution</a></p>
</li>
</ul>
<p>Oracle XML&nbsp;DB supports the W3C XML Schema recommendation. XML instance documents that conform to an XML schema can be stored and retrieved using SQL and protocols such as FTP, HTTP(S), and WebDAV. In addition to specifying the structure of XML documents, XML schemas determine the mapping between XML and object-relational storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></div>
<a id="BABGJBIC"></a>
<div id="ADXDB4680" class="sect1">
<h2 class="sect1">Overview of XML Schema Evolution</h2>
<p>A major challenge for developers using an XML schema with Oracle XML&nbsp;DB is how to deal with changes in the content or structure of XML documents. In some environments, the need for changes may be frequent or extensive, arising from new regulations, internal needs, or external opportunities. For example, you might need to add new elements or attributes to an XML schema definition, modify a data type, or relax or tighten certain minimum and maximum occurrence requirements.</p>
<p>In such cases, you need to "evolve" the XML schema so that new requirements are accommodated, while any existing instance documents (the data) remain valid (or can be made valid), and existing applications can continue to run.</p>
<p>If you do not care about any existing documents, you can of course simply drop the <code>XMLType</code> tables that are dependent on the XML schema, delete the old XML schema, and register the new XML schema at the same URL. In most cases, however, you need to keep the existing documents, possibly transforming them to accommodate the new XML schema.</p>
<p>Oracle XML&nbsp;DB supports two kinds of schema evolution:</p>
<ul>
<li>
<p><span class="bold">Copy-based schema evolution</span>, in which all instance documents that conform to the schema are copied to a temporary location in the database, the old schema is deleted, the modified schema is registered, and the instance documents are inserted into their new locations from the temporary area</p>
</li>
<li>
<p><span class="bold">In-place schema evolution</span>, which does not require copying, deleting, and inserting existing data and thus is much faster than copy-based evolution, but which has restrictions that do not apply to copy-based evolution</p>
<p>In general, in-place evolution is permitted if you are not changing the storage model and if the changes do not invalidate existing documents (that is, if existing documents are conformant with the new schema or can be made conformant with it). A more detailed explanation of restrictions and guidelines is presented in <a href="#BCGFDDCF">"Using In-Place XML Schema Evolution"</a>.</p>
</li>
</ul>
<p>Each approach has its own PL/SQL procedure: <code>DBMS_XMLSCHEMA.copyEvolve</code> for copy-based evolution, <code>DBMS_XMLSCHEMA.inPlaceEvolve</code> for in-place evolution. This chapter explains the use of each procedure and presents guidelines for using its associated approach to schema evolution.</p>
</div>
<!-- class="sect1" -->
<a id="BCGBHJEC"></a>
<div id="ADXDB4681" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref930"></a><a id="sthref931"></a>Using Copy-Based Schema Evolution</h2>
<p>You perform copy-based XML schema evolution using procedure <code>copyEvolve</code> of PL/SQL package <code>DBMS_XMLSCHEMA</code>. Procedure <code>copyEvolve</code> copies existing instance documents to temporary <code>XMLType</code> tables to back them up, drops the old version of the XML schema (which also deletes the associated instance documents), registers the new version, and copies the backed-up instance documents to new <code>XMLType</code> tables. In case of a problem, the backup copies are restored&thinsp;&mdash;&thinsp;see <a href="#CHDHIHCA">"Rollback When Procedure DBMS_XMLSCHEMA.COPYEVOLVE Raises an Error"</a>.</p>
<p>Using procedure <code>copyEvolve</code>, you can evolve your registered XML schema in such a way that existing XML instance documents continue to be valid.</p>
<a id="BCGEAFJC"></a>
<div id="ADXDB4682" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref932"></a>Scenario for Copy-Based Evolution</h3>
<p><a href="#BCGJAFFH">Example 10-1</a> shows a <span class="italic">partial</span> listing of a revised version of the purchase-order XML schema of <a href="xdb03usg.htm#BABBGIED">Example 3-10</a>. See <a href="apphxdb.htm#BABJJIFI">Example A-2</a> for the <span class="italic">complete</span> revised schema listing. Text that is in <span class="bold">bold</span> here is new or different from that in the original schema.</p>
<div id="ADXDB4683" class="example">
<p class="titleinexample"><a id="BCGJAFFH"></a>Example 10-1 Revised Purchase-Order XML Schema</p>
<pre>
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xdb="http://xmlns.oracle.com/xdb"
           version="1.0"&gt;
  &lt;xs:element
    name="PurchaseOrder" type="PurchaseOrderType"
    xdb:defaultTable="PURCHASEORDER"
    <span class="bold">xdb:columnProps=</span>
      <span class="bold">"CONSTRAINT purchaseorder_pkey PRIMARY KEY (XMLDATA.reference),</span>
       <span class="bold">CONSTRAINT valid_email_address FOREIGN KEY (XMLDATA.userid)</span>
         <span class="bold">REFERENCES hr.employees (EMAIL)"</span>
    xdb:tableProps=
      "VARRAY XMLDATA.ACTIONS.ACTION STORE AS TABLE ACTION_TABLE
        ((CONSTRAINT action_pkey PRIMARY KEY (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
       VARRAY XMLDATA.LINEITEMS.LINEITEM STORE AS TABLE LINEITEM_TABLE
        ((constraint LINEITEM_PKEY primary key (NESTED_TABLE_ID, SYS_NC_ARRAY_INDEX$)))
       lob (XMLDATA.NOTES) STORE AS (ENABLE STORAGE IN ROW STORAGE(INITIAL 4K NEXT 32K))"/&gt;
  &lt;xs:complexType name="PurchaseOrderType" xdb:SQLType="PURCHASEORDER_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Actions" type="ActionsType" xdb:SQLName="ACTIONS"/&gt;
      &lt;xs:element name="Reject" type="RejectionType" minOccurs="0" xdb:SQLName="REJECTION"/&gt;
      &lt;xs:element name="Requestor" type="RequestorType" xdb:SQLName="REQUESTOR"/&gt;
      &lt;xs:element name="User" type="UserType" xdb:SQLName="USERID"/&gt;
      &lt;xs:element name="CostCenter" type="CostCenterType" xdb:SQLName="COST_CENTER"/&gt; 
      <span class="bold">&lt;xs:element name="BillingAddress" type="AddressType" minOccurs="0"</span>
                  <span class="bold">xdb:SQLName="BILLING_ADDRESS"/&gt;</span> 
      &lt;xs:element name="ShippingInstructions" type="ShippingInstructionsType"
                  xdb:SQLName="SHIPPING_INSTRUCTIONS"/&gt; 
      &lt;xs:element name="SpecialInstructions" type="SpecialInstructionsType"
                  xdb:SQLName="SPECIAL_INSTRUCTIONS"/&gt; 
      &lt;xs:element name="LineItems" type="LineItemsType" xdb:SQLName="LINEITEMS"/&gt;
      <span class="bold">&lt;xs:element name="Notes" type="NotesType" minOccurs="0" xdb:SQLType="CLOB"</span>
                  <span class="bold">xdb:SQLName="NOTES"/&gt;</span> 
    &lt;/xs:sequence&gt;
    <span class="bold">&lt;xs:attribute name="Reference" type="ReferenceType" use="required" xdb:SQLName="REFERENCE"/&gt;</span>
    &lt;xs:attribute name="DateCreated" type="xs:dateTime" use="required"
                  xdb:SQLType="TIMESTAMP WITH TIME ZONE"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemsType" xdb:SQLType="LINEITEMS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="LineItem" type="LineItemType" maxOccurs="unbounded" xdb:SQLName="LINEITEM"
                  xdb:SQLCollType="LINEITEM_V"/&gt;  
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LineItemType" xdb:SQLType="LINEITEM_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Part" type="PartType" xdb:SQLName="PART"/&gt;
      <span class="bold">&lt;xs:element name="Quantity" type="quantityType"/&gt;</span>
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="ItemNumber" type="xs:integer" xdb:SQLName="ITEMNUMBER"
                  xdb:SQLType="NUMBER"/&gt; 
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PartType" xdb:SQLType="PART_T"&gt;
    <span class="bold">&lt;xs:simpleContent&gt;</span>
      <span class="bold">&lt;xs:extension base="UPCCodeType"&gt;</span>
        <span class="bold">&lt;xs:attribute name="Description" type="DescriptionType" use="required"</span>
                      <span class="bold">xdb:SQLName="DESCRIPTION"/&gt;</span> 
        <span class="bold">&lt;xs:attribute name="UnitCost" type="moneyType" use="required"/&gt;</span>
      <span class="bold">&lt;/xs:extension&gt;</span>
    <span class="bold">&lt;/xs:simpleContent&gt;</span>
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="ReferenceType"&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:minLength value="18"/&gt;
      &lt;xs:maxLength value="30"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;

<span class="bold">. . .</span>

  &lt;xs:complexType name="RejectionType" xdb:SQLType="REJECTION_T"&gt;
    &lt;xs:all&gt;
      &lt;xs:element name="User" type="UserType" minOccurs="0" xdb:SQLName="REJECTED_BY"/&gt;
      &lt;xs:element name="Date" type="DateType" minOccurs="0" xdb:SQLName="DATE_REJECTED"/&gt;
      &lt;xs:element name="Comments" type="CommentsType" minOccurs="0" xdb:SQLName="REASON_REJECTED"/&gt;
    &lt;/xs:all&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="ShippingInstructionsType" xdb:SQLType="SHIPPING_INSTRUCTIONS_T"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="name" type="NameType" minOccurs="0" xdb:SQLName="SHIP_TO_NAME"/&gt;
      <span class="bold">&lt;xs:choice&gt;</span>
        <span class="bold">&lt;xs:element name="address" type="AddressType" minOccurs="0"/&gt;</span>
        <span class="bold">&lt;xs:element name="fullAddress" type="FullAddressType" minOccurs="0"</span>
                    <span class="bold">xdb:SQLName="SHIP_TO_ADDRESS"/&gt;</span> 
      <span class="bold">&lt;/xs:choice&gt;</span>
      &lt;xs:element name="telephone" type="TelephoneType" minOccurs="0" xdb:SQLName="SHIP_TO_PHONE"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

<span class="bold">. . .</span>

  &lt;xs:simpleType name="NameType"&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:minLength value="1"/&gt;
      &lt;xs:maxLength value="20"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  <span class="bold">&lt;xs:simpleType name="FullAddressType"&gt;</span>
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:minLength value="1"/&gt;
      &lt;xs:maxLength value="256"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;

<span class="bold">. . .</span>

  &lt;xs:simpleType name="DescriptionType"&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:minLength value="1"/&gt;
      &lt;xs:maxLength value="256"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  <span class="bold">&lt;xs:complexType name="AddressType" xdb:SQLType="ADDRESS_T"&gt;</span>
    <span class="bold">&lt;xs:sequence&gt;</span>
      <span class="bold">&lt;xs:element name="StreetLine1" type="StreetType"/&gt;</span>
      <span class="bold">&lt;xs:element name="StreetLine2" type="StreetType" minOccurs="0"/&gt;</span>
      <span class="bold">&lt;xs:element name="City" type="CityType"/&gt;</span>
      <span class="bold">&lt;xs:choice&gt;</span>
        <span class="bold">&lt;xs:sequence&gt;</span>
          <span class="bold">&lt;xs:element name="State" type="StateType"/&gt;</span>
          <span class="bold">&lt;xs:element name="ZipCode" type="ZipCodeType"/&gt;</span>
        <span class="bold">&lt;/xs:sequence&gt;</span>
        <span class="bold">&lt;xs:sequence&gt;</span>
          <span class="bold">&lt;xs:element name="Province" type="ProvinceType"/&gt;</span>
          <span class="bold">&lt;xs:element name="PostCode" type="PostCodeType"/&gt;</span>
        <span class="bold">&lt;/xs:sequence&gt;</span>
        <span class="bold">&lt;xs:sequence&gt;</span>
          <span class="bold">&lt;xs:element name="County" type="CountyType"/&gt;</span>
          <span class="bold">&lt;xs:element name="Postcode" type="PostCodeType"/&gt;</span>
        <span class="bold">&lt;/xs:sequence&gt;</span>
      <span class="bold">&lt;/xs:choice&gt;</span>
      <span class="bold">&lt;xs:element name="Country" type="CountryType"/&gt;</span>
    <span class="bold">&lt;/xs:sequence&gt;</span>
  <span class="bold">&lt;/xs:complexType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="StreetType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="128"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="CityType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="64"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="StateType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="2"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="2"/&gt;</span>
      <span class="bold">&lt;xs:enumeration value="AK"/&gt;</span>
      <span class="bold">&lt;xs:enumeration value="AL"/&gt;</span>
      <span class="bold">&lt;xs:enumeration value="AR"/&gt;</span>

<span class="bold"> . . .</span> <span class="italic">-- A value for each US state abbreviation</span>

      <span class="bold">&lt;xs:enumeration value="WY"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="ZipCodeType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{5}"/&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{5}-\d{4}"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="CountryType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="64"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="CountyType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="32"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="PostCodeType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="1"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="12"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="ProvinceType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="2"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="2"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="NotesType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:maxLength value="32767"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
  <span class="bold">&lt;xs:simpleType name="UPCCodeType"&gt;</span>
    <span class="bold">&lt;xs:restriction base="xs:string"&gt;</span>
      <span class="bold">&lt;xs:minLength value="11"/&gt;</span>
      <span class="bold">&lt;xs:maxLength value="14"/&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{11}"/&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{12}"/&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{13}"/&gt;</span>
      <span class="bold">&lt;xs:pattern value="\d{14}"/&gt;</span>
    <span class="bold">&lt;/xs:restriction&gt;</span>
  <span class="bold">&lt;/xs:simpleType&gt;</span>
&lt;/xs:schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BCGIBJJC"></a>
<div id="ADXDB4684" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">copyEvolve Parameters and Errors</h3>
<p>This is the signature of procedure <code>DBMS_XMLSCHEMA.copyEvolve</code>:</p>
<pre>
procedure copyEvolve(schemaURLs       IN XDB$STRING_LIST_T,
                     newSchemas       IN XMLSequenceType,
                     transforms       IN XMLSequenceType := NULL,
                     preserveOldDocs  IN BOOLEAN := FALSE,
                     mapTabName       IN VARCHAR2 := NULL,
                     generateTables   IN BOOLEAN := TRUE,
                     force            IN BOOLEAN := FALSE,
                     schemaOwners     IN XDB$STRING_LIST_T := NULL
                     parallelDegree   IN PLS_INTEGER := 0,
                     options          IN PLS_INTEGER := 0);
</pre>
<p><a href="#BCGJCFHJ">Table 10-1</a> describes the individual parameters. <a href="#BCGGIFAF">Table 10-2</a> describes the errors associated with the procedure.</p>
<div id="ADXDB4685" class="tblhruleformal">
<p class="titleintable"><a id="sthref933"></a><a id="BCGJCFHJ"></a>Table 10-1 Parameters of Procedure DBMS_XMLSCHEMA.COPYEVOLVE</p>
<table class="cellalignment1032" title="Parameters of Procedure DBMS_XMLSCHEMA.COPYEVOLVE" summary="This table describes the DBMS_XMLSCHEMA.CopyEvolve parameters." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t3">Parameter</th>
<th class="cellalignment1027" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t3" headers="r1c1-t3">
<p><code>schemaURLs</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t3 r1c2-t3">
<p>Varray of URLs of XML schemas to be evolved (varray of <code>VARCHAR2(4000)</code>. This should include the dependent schemas as well. Unless the force parameter is <code>TRUE</code>, the URLs should be in the dependency order, that is, if URL A comes before URL B in the varray, then schema A should not be dependent on schema B but schema B may be dependent on schema A.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t3" headers="r1c1-t3">
<p><code>newSchemas</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t3 r1c2-t3">
<p>Varray of new XML schema documents (<code>XMLType</code> instances). Specify this in exactly the same order as the corresponding URLs. If no change is necessary in an XML schema, provide the unchanged schema.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t3" headers="r1c1-t3">
<p><code>transforms</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t3 r1c2-t3">
<p>Varray of XSL documents (<code>XMLType</code> instances) that are applied to XML schema based documents to make them conform to the new schemas. Specify these in exactly the same order as the corresponding URLs. If no transformations are required, this parameter need not be specified.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t3" headers="r1c1-t3">
<p><code>preserveOldDocs</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t3 r1c2-t3">
<p>If this is <code>TRUE</code>, then the temporary tables holding old data are not dropped at the end of schema evolution. See also <a href="#BCGDECAA">"Guidelines for Using Procedure COPYEVOLVE"</a>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t3" headers="r1c1-t3">
<p><code>mapTabName</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t3 r1c2-t3">
<p>Specifies the name of table that maps old <code>XMLType</code> table or column names to names of corresponding temporary tables.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t3" headers="r1c1-t3">
<p><code>generateTables</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t3 r1c2-t3">
<p>By default this parameter is <code>TRUE</code>. If <code>FALSE</code> then <code>XMLType</code> tables or columns are not generated after registering new XML schemas. If <code>FALSE</code>, <code>preserveOldDocs</code> must be <code>TRUE</code> and <code>mapTabName</code> must not be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t3" headers="r1c1-t3">
<p><code>force</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t3 r1c2-t3">
<p>If this is <code>TRUE</code>, then errors during the registration of new schemas are ignored. If there are circular dependencies among the schemas, set this flag to <code>TRUE</code> to ensure that each schema is stored even though there may be errors in registration.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t3" headers="r1c1-t3">
<p><code>schemaOwners</code></p>
</td>
<td class="cellalignment1028" headers="r9c1-t3 r1c2-t3">
<p>Varray of names of schema owners. Specify these in exactly the same order as the corresponding URLs.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r10c1-t3" headers="r1c1-t3">
<p><code>parallelDegree</code></p>
</td>
<td class="cellalignment1028" headers="r10c1-t3 r1c2-t3">
<p>Specifies the degree of parallelism to be used in a <code>PARALLEL</code> hint during the data-copy stage. If this is <code>0</code> (default value), a <code>PARALLEL</code> hint is absent from the data-copy statements.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r11c1-t3" headers="r1c1-t3">
<p><code>options</code></p>
</td>
<td class="cellalignment1028" headers="r11c1-t3 r1c2-t3">
<p>Miscellaneous options. The only option is <code>COPYEVOLVE_BINARY_XML</code>, which means to register the new XML schemas for binary XML data and create the new tables or columns with binary XML as the storage model.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<div id="ADXDB4686" class="tblhruleformal">
<p class="titleintable"><a id="sthref934"></a><a id="BCGGIFAF"></a>Table 10-2 Errors Associated with Procedure DBMS_XMLSCHEMA.COPYEVOLVE</p>
<table class="cellalignment1032" title="Errors Associated with Procedure DBMS_XMLSCHEMA.COPYEVOLVE" summary="This table describes DG&lsquo;BMS_XMLSCHEMA.copyevolve&rsquo;s errors and exceptions. It includes the cause and action to take." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t4">Error Number and Message</th>
<th class="cellalignment1027" id="r1c2-t4">Cause</th>
<th class="cellalignment1027" id="r1c3-t4">Action</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t4" headers="r1c1-t4">
<p><span class="bold">30942</span> XML Schema Evolution error for schema '&lt;schema_url&gt;' table "&lt;owner_name&gt;.&lt;table_name&gt;" column '&lt;column_name&gt;'</p>
</td>
<td class="cellalignment1028" headers="r2c1-t4 r1c2-t4">
<p>The given <code>XMLType</code> table or column that conforms to the given XML schema had errors during evolution. In the case of a table, the column name is empty. See also the more specific error that follows this.</p>
</td>
<td class="cellalignment1028" headers="r2c1-t4 r1c3-t4">
<p>Based on the schema, table, and column information in this error and the more specific error that follows, take corrective action.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t4" headers="r1c1-t4">
<p><span class="bold">30943</span> XML Schema '&lt;schema_url&gt;' is dependent on XML schema '&lt;schema_url&gt;'</p>
</td>
<td class="cellalignment1028" headers="r3c1-t4 r1c2-t4">
<p>Not all dependent XML schemas were specified or the schemas were not specified in dependency order, that is, if schema S1 is dependent on schema S, S must appear before S1.</p>
</td>
<td class="cellalignment1028" headers="r3c1-t4 r1c3-t4">
<p>Include the previously unspecified schema in the list of schemas or correct the order in which the schemas are specified. Then retry the operation.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t4" headers="r1c1-t4">
<p><span class="bold">30944</span> Error during rollback for XML schema '&lt;schema_url&gt;' table "&lt;owner_name&gt;.&lt;table_name&gt;" column '&lt;column_name&gt;'</p>
</td>
<td class="cellalignment1028" headers="r4c1-t4 r1c2-t4">
<p>The given <code>XMLType</code> table or column that conforms to the given XML schema had errors during a rollback of XML schema evolution. For a table, the column name is empty. See also the more specific error that follows this.</p>
</td>
<td class="cellalignment1028" headers="r4c1-t4 r1c3-t4">
<p>Based on the schema, table, and column information in this error and the more specific error that follows, take corrective action.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t4" headers="r1c1-t4">
<p><span class="bold">30945</span> Could not create mapping table '&lt;table_name&gt;'</p>
</td>
<td class="cellalignment1028" headers="r5c1-t4 r1c2-t4">
<p>A mapping table could not be created during XML schema evolution. See also the more specific error that follows this.</p>
</td>
<td class="cellalignment1028" headers="r5c1-t4 r1c3-t4">
<p>Ensure that a table with the given name does not exist and retry the operation.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t4" headers="r1c1-t4">
<p><span class="bold">30946</span> XML Schema Evolution warning: temporary tables not cleaned up</p>
</td>
<td class="cellalignment1028" headers="r6c1-t4 r1c2-t4">
<p>An error occurred after the schema was evolved while cleaning up temporary tables. The schema evolution was successful.</p>
</td>
<td class="cellalignment1028" headers="r6c1-t4 r1c3-t4">
<p>If you need to remove the temporary tables, use the mapping table to get the temporary table names and drop them.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" --></div>
<!-- class="sect2" -->
<a id="BABJGJFG"></a>
<div id="ADXDB4687" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Limitations of Procedure COPYEVOLVE</h3>
<p>Keep in mind the following limitations when you use procedure <code>DBMS_XMLSCHEMA.copyEvolve</code>:</p>
<ul>
<li>
<p>Indexes, triggers, constraints, row-level security (RLS) policies, and other metadata related to the <code>XMLType</code> tables that are dependent on the schemas are not preserved. These must be re-created after evolution.</p>
</li>
<li>
<p>If top-level element names are changed, additional steps are required after <code>copyEvolve</code> finishes executing. See <a href="#BCGBJJGE">"Top-Level Element Name Changes"</a>.</p>
</li>
<li>
<p>Copy-based evolution cannot be used if there is a table with an object-type column that has an <code>XMLType</code> attribute that is dependent on any of the schemas to be evolved. For example, consider this table:</p>
<pre>
CREATE TYPE t1 AS OBJECT (n NUMBER, x XMLType);
CREATE TABLE tab1 (e NUMBER, o t1) XMLType 
 COLUMN o.x XMLSchema "s1.xsd" ELEMENT "Employee";
</pre>
<p>This assumes that an XML schema with a top-level element <code>Employee</code> has been registered under URL <code>s1.xsd</code>. It is not possible to evolve this XML schema, because table <code>tab1</code> with column <code>o</code> with <code>XMLType</code> attribute <code>x</code> is dependent on the XML schema. Note that although <code>copyEvolve</code> does not handle <code>XMLType</code> object attributes, it does raise an error in such cases.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BCGDECAA"></a>
<div id="ADXDB4688" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Guidelines for Using Procedure COPYEVOLVE</h3>
<p>The following general guideline applies to using procedure <code>DBMS_XMLSCHEMA.copyEvolve</code>. The rest of this section describes specific guidelines that can also be appropriate in particular contexts.</p>
<ol>
<li>
<p>Turn off the recycle bin, to prevent dropped tables from being copied to it:</p>
<pre>
ALTER SESSION SET RECYCLEBIN=off;
</pre></li>
<li id="CHDDCIBA">
<p>Identify the XML schemas that are dependent on the XML schema that is to be evolved. You can acquire the URLs of the dependent XML schemas using the following query, where <code><span class="codeinlineitalic">schema_to_be_evolved</span></code> is the schema to be evolved, and <code><span class="codeinlineitalic">owner_of_schema_to_be_evolved</span></code> is its owner (database user).</p>
<pre>
SELECT dxs.SCHEMA_URL, dxs.OWNER
    FROM DBA_DEPENDENCIES dd, DBA_XML_SCHEMAS dxs
    WHERE dd.REFERENCED_NAME = (SELECT INT_OBJNAME
                                  FROM DBA_XML_SCHEMAS
                                  WHERE SCHEMA_URL = <span class="italic">schema_to_be_evolved</span>
                                    AND OWNER = <span class="italic">owner_of_schema_to_be_evolved</span>)
      AND dxs.INT_OBJNAME = dd.NAME;
</pre>
<p>In many cases, no changes are needed in the dependent XML schemas. But if the dependent XML schemas need to be changed, then you must also prepare new versions of those XML schemas.</p>
</li>
<li>
<p>If the existing instance documents do not conform to the new XML schema, then you must provide an XSL style sheet that, when applied to an instance document, transforms it to conform to the new schema. You must do this for each XML schema identified in Step <a href="#CHDDCIBA">2</a>. The transformation must handle documents that conform to all top-level elements in the new XML schema.</p>
</li>
<li>
<p>Call procedure <code>DBMS_XMLSCHEMA.copyEvolve</code>, specifying the XML schema URLs, new schemas, and transformation style sheet.</p>
</li>
</ol>
<a id="BCGBJJGE"></a>
<div id="ADXDB4689" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Top-Level Element Name Changes</h4>
<p>Procedure <code>DBMS_XMLSCHEMA.copyEvolve</code> assumes that top-level elements have not been dropped and that their names have not been changed in the new XML schemas. If there are such changes in your new XML schemas, then you can call procedure <code>copyEvolve</code> with parameter <code>generateTables</code> set to <code>FALSE</code> and parameter <code>preserveOldDocs</code> set to <code>TRUE</code>. In this way, new tables are not generated, and the temporary tables holding the old documents (backup copies) are not dropped at the end of the procedure. You can then store the old documents in whatever form is appropriate and drop the temporary tables. See <a href="#BCGIBJJC">"copyEvolve Parameters and Errors"</a> for more details on using these parameters.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB4690" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref935"></a>
<h4 class="sect3">User-Created Virtual Columns of Tables Other Than Default Tables</h4>
<p>For tables that are not default tables, any virtual columns that you create are not re-created during copy-based evolution. If the columns are needed, then set parameter <code>preserveOldDocs</code> to <code>TRUE</code>, create the tables, and copy the old documents after procedure <code>copyEvolve</code> has finished.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB4691" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref936"></a>
<h4 class="sect3">Ensure that the XML Schema and Dependents Are Not Used by Concurrent Sessions</h4>
<p>Ensure that the XML schema and its dependents are not used by any concurrent session during the XML schema evolution process. If other, concurrent sessions have shared locks on this schema at the beginning of the evolution process, then procedure <code>DBMS_XMLSCHEMA.copyEvolve</code> waits for these sessions to release the locks so that it can acquire an exclusive lock. However, this lock is released immediately to allow the rest of the process to continue.</p>
</div>
<!-- class="sect3" -->
<a id="CHDHIHCA"></a>
<div id="ADXDB4692" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Rollback When Procedure DBMS_XMLSCHEMA.COPYEVOLVE Raises an Error</h4>
<p>Procedure <code>DBMS_XMLSCHEMA.copyEvolve</code> either completely succeeds or raises an error, in which case it attempts to roll back as much of the operation as possible. Evolving an XML schema involves many database DDL statements. When an error occurs, compensating DDL statements are executed to undo the effect of all steps executed to that point. If the old tables or schemas have been dropped, they are re-created, but any table, column, and storage properties and any auxiliary structures (such as indexes, triggers, constraints, and RLS policies) associated with the tables and columns are lost.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDB4693" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref937"></a>
<h4 class="sect3">Failed Rollback From Insufficient Privileges</h4>
<p>In certain cases you cannot roll back the copy-based evolution operation. For example, if table creation fails due to reasons not related to the new XML schema, then there is no way to roll back. An example is failure due to insufficient privileges. The temporary tables are not deleted even if <code>preserveOldDocs</code> is <code>FALSE</code>, so the data can be recovered. If the <code>mapTabName</code> parameter is null, the mapping table name is <code>XDB$MAPTAB</code> followed by a sequence number. The exact table name can be found using a query such as the following:</p>
<pre>
SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME LIKE 'XDB$MAPTAB<span class="bold">%</span>';
</pre></div>
<!-- class="sect3" -->
<div id="ADXDB4694" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref938"></a>
<h4 class="sect3">Privileges Needed for XML Schema Evolution</h4>
<p>Copy-based XML schema evolution may involve dropping or creating data types. Hence, you need type-related privileges such as <code>DROP TYPE</code>, <code>CREATE TYPE</code>, and <code>ALTER TYPE</code>.</p>
<p>You need privileges to delete and register the XML schemas involved in the evolution. You need all privileges on <code>XMLType</code> tables that conform to the schemas being evolved. For <code>XMLType</code> columns, the <code>ALTER TABLE</code> privilege is needed on corresponding tables. If there are schema-based <code>XMLType</code> tables or columns in other database schemas, you need privileges such as the following:</p>
<ul>
<li>
<p><code>CREATE ANY TABLE</code></p>
</li>
<li>
<p><code>CREATE ANY INDEX</code></p>
</li>
<li>
<p><code>SELECT ANY TABLE</code></p>
</li>
<li>
<p><code>UPDATE ANY TABLE</code></p>
</li>
<li>
<p><code>INSERT ANY TABLE</code></p>
</li>
<li>
<p><code>DELETE ANY TABLE</code></p>
</li>
<li>
<p><code>DROP ANY TABLE</code></p>
</li>
<li>
<p><code>ALTER ANY TABLE</code></p>
</li>
<li>
<p><code>DROP ANY INDEX</code></p>
</li>
</ul>
<p>To avoid needing to grant all these privileges to the database- schema owner, Oracle recommends that a database administrator perform the evolution if there are XML schema-based <code>XMLType</code> table or columns belonging to other database schemas.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCGJABCD"></a>
<div id="ADXDB4695" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref939"></a><a id="sthref940"></a>Updating Existing XML Instance Documents using a Style Sheet</h3>
<p>After you modify a registered XML schema, you must update any existing XML instance documents that use the XML schema. You do this by applying an XSLT style sheet to each of the instance documents. The style sheet represents the difference between the old and new XML schemas.</p>
<p><a href="#BCGGIEFI">Example 10-2</a> is a style sheet, in file <code>evolvePurchaseOrder.xsl</code>, that transforms existing purchase-order documents that use the old XML schema, so they use the new XML schema instead.</p>
<div id="ADXDB4696" class="example">
<p class="titleinexample"><a id="BCGGIEFI"></a>Example 10-2 evolvePurchaseOrder.xsl: Style Sheet to Update Instance Documents</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet 
  version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;xsl:output method="xml" encoding="UTF-8"/&gt;
  &lt;xsl:template match="/PurchaseOrder"&gt;
    &lt;PurchaseOrder&gt;
      &lt;xsl:attribute name="xsi:noNamespaceSchemaLocation"&gt;
        http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd
      &lt;/xsl:attribute&gt;
      &lt;xsl:for-each select="Reference"&gt;
        &lt;xsl:attribute name="Reference"&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/xsl:attribute&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:variable name="V264_394" select="'2004-01-01T12:00:00.000000-08:00'"/&gt;
      &lt;xsl:attribute name="DateCreated"&gt;
        &lt;xsl:value-of select="$V264_394"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:for-each select="Actions"&gt;
        &lt;Actions&gt;
          &lt;xsl:for-each select="Action"&gt;
            &lt;Action&gt;
              &lt;xsl:for-each select="User"&gt;
                &lt;User&gt;
                  &lt;xsl:value-of select="."/&gt;
                &lt;/User&gt;
              &lt;/xsl:for-each&gt;
              &lt;xsl:for-each select="Date"&gt;
                &lt;Date&gt;
                  &lt;xsl:value-of select="."/&gt;
                &lt;/Date&gt;
              &lt;/xsl:for-each&gt;
            &lt;/Action&gt;
          &lt;/xsl:for-each&gt;
        &lt;/Actions&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="Reject"&gt;
        &lt;Reject&gt;
          &lt;xsl:for-each select="User"&gt;
            &lt;User&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/User&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:for-each select="Date"&gt;
            &lt;Date&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/Date&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:for-each select="Comments"&gt;
            &lt;Comments&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/Comments&gt;
          &lt;/xsl:for-each&gt;
        &lt;/Reject&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="Requestor"&gt;
        &lt;Requestor&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/Requestor&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="User"&gt;
        &lt;User&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/User&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="CostCenter"&gt;
        &lt;CostCenter&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/CostCenter&gt;
      &lt;/xsl:for-each&gt;
      &lt;ShippingInstructions&gt;
        &lt;xsl:for-each select="ShippingInstructions"&gt;
          &lt;xsl:for-each select="name"&gt;
            &lt;name&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/name&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="ShippingInstructions"&gt;
          &lt;xsl:for-each select="address"&gt;
            &lt;fullAddress&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/fullAddress&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="ShippingInstructions"&gt;
          &lt;xsl:for-each select="telephone"&gt;
            &lt;telephone&gt;
              &lt;xsl:value-of select="."/&gt;
            &lt;/telephone&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:for-each&gt;
      &lt;/ShippingInstructions&gt;
      &lt;xsl:for-each select="SpecialInstructions"&gt;
        &lt;SpecialInstructions&gt;
          &lt;xsl:value-of select="."/&gt;
        &lt;/SpecialInstructions&gt;
      &lt;/xsl:for-each&gt;
      &lt;xsl:for-each select="LineItems"&gt;
        &lt;LineItems&gt;
          &lt;xsl:for-each select="LineItem"&gt;
            &lt;xsl:variable name="V22" select="."/&gt;
            &lt;LineItem&gt;
              &lt;xsl:for-each select="@ItemNumber"&gt;
                &lt;xsl:attribute name="ItemNumber"&gt;
                  &lt;xsl:value-of select="."/&gt;
                &lt;/xsl:attribute&gt;
              &lt;/xsl:for-each&gt;
              &lt;xsl:for-each select="$V22/Part"&gt;
                &lt;xsl:variable name="V24" select="."/&gt;
                &lt;xsl:for-each select="@Id"&gt;
                  &lt;Part&gt;
                    &lt;xsl:for-each select="$V22/Description"&gt;
                      &lt;xsl:attribute name="Description"&gt;
                        &lt;xsl:value-of select="."/&gt;
                      &lt;/xsl:attribute&gt;
                    &lt;/xsl:for-each&gt;
                    &lt;xsl:for-each select="$V24/@UnitPrice"&gt;
                      &lt;xsl:attribute name="UnitCost"&gt;
                        &lt;xsl:value-of select="."/&gt;
                      &lt;/xsl:attribute&gt;
                    &lt;/xsl:for-each&gt;
                    &lt;xsl:value-of select="."/&gt;
                  &lt;/Part&gt;
                &lt;/xsl:for-each&gt;
              &lt;/xsl:for-each&gt;
              &lt;xsl:for-each select="$V22/Part"&gt;
                &lt;xsl:for-each select="@Quantity"&gt;
                  &lt;Quantity&gt;
                    &lt;xsl:value-of select="."/&gt;
                  &lt;/Quantity&gt;
                &lt;/xsl:for-each&gt;
              &lt;/xsl:for-each&gt;
            &lt;/LineItem&gt;
          &lt;/xsl:for-each&gt;
        &lt;/LineItems&gt;
      &lt;/xsl:for-each&gt;
    &lt;/PurchaseOrder&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BCGGFCFB"></a>
<div id="ADXDB4698" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Examples of Using Procedure COPYEVOLVE</h3>
<p><a href="#BCGBIBHG">Example 10-3</a> loads a revised XML schema and evolution XSL style sheet into Oracle XML&nbsp;DB Repository.</p>
<div id="ADXDB4699" class="example">
<p class="titleinexample"><a id="BCGBIBHG"></a>Example 10-3 Loading Revised XML Schema and XSL Style Sheet</p>
<pre>
DECLARE
  res BOOLEAN;
BEGIN
  res := DBMS_XDB.createResource(               -- Load revised XML schema
           '/source/schemas/poSource/revisedPurchaseOrder.xsd',
           bfilename('XMLDIR', 'revisedPurchaseOrder.xsd'),
           nls_charset_id('AL32UTF8'));
  res := DBMS_XDB.createResource(               -- Load revised XSL style sheet
           '/source/schemas/poSource/evolvePurchaseOrder.xsl',
           bfilename('XMLDIR', 'evolvePurchaseOrder.xsl'),
           nls_charset_id('AL32UTF8'));
END;/
</pre></div>
<!-- class="example" -->
<p><a href="#BCGFEAFB">Example 10-4</a> shows how to use procedure <code>DBMS_XMLSCHEMA.copyEvolve</code> to evolve the XML schema <code>purchaseOrder.xsd</code> to <code>revisedPurchaseOrder.xsd</code> using the XSL style sheet <code>evolvePurchaseOrder.xsl</code>.</p>
<div id="ADXDB4700" class="example">
<p class="titleinexample"><a id="BCGFEAFB"></a>Example 10-4 Updating an XML Schema using DBMS_XMLSCHEMA.COPYEVOLVE</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.copyEvolve(
    xdb$string_list_t('http://localhost:8080/source/schemas/poSource/xsd/purchaseOrder.xsd'),
    XMLSequenceType(XDBURIType('/source/schemas/poSource/revisedPurchaseOrder.xsd').getXML()),
    XMLSequenceType(XDBURIType('/source/schemas/poSource/evolvePurchaseOrder.xsl').getXML()));
END;

SELECT XMLQuery('$p/PurchaseOrder/LineItems/LineItem[1]'
                PASSING po.OBJECT_VALUE AS "p" RETURNING CONTENT) line_item
  FROM purchaseorder po
  WHERE XMLExists('$p/PurchaseOrder[Reference="SBELL-2003030912333601PDT"]'
                  PASSING po.OBJECT_VALUE AS "p");
 
LINE_ITEM
------------------------------------------------------------------------------
&lt;LineItem ItemNumber="1"&gt;
  <span class="bold">&lt;Part Description="A Night to Remember" UnitCost="39.95"&gt;715515009058&lt;/Part&gt;</span>
  <span class="bold">&lt;Quantity&gt;2&lt;/Quantity&gt;</span>
&lt;/LineItem&gt;
</pre>
<p>The same query would have produced the following result before the schema evolution:</p>
<pre>
LINE_ITEM
----------------------------------------------------------
&lt;LineItem ItemNumber="1"&gt;
  <span class="bold">&lt;Description&gt;A Night to Remember&lt;/Description&gt;</span>
  <span class="bold">&lt;Part Id="715515009058" UnitPrice="39.95" Quantity="2"/&gt;</span>
&lt;/LineItem&gt;
</pre></div>
<!-- class="example" -->
<p>Procedure <code>DBMS_XMLSCHEMA.copyEvolve</code> evolves registered XML schemas in such a way that existing instance documents continue to remain valid.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Before executing procedure <code>DBMS_XMLSCHEMA.copyEvolve</code>, always <span class="italic">back up</span> all registered XML schemas and all XML documents that conform to them. Procedure <code>copyEvolve</code> <span class="italic">deletes</span> all documents that conform to registered XML schemas.</div>
<p>First, procedure <code>copyEvolve</code> copies the data in XML schema-based <code>XMLType</code> tables and columns to temporary tables. It then drops the original tables and columns, and deletes the old XML schemas. After registering the new XML schemas, it creates <code>XMLType</code> tables and columns and populates them with data (unless parameter <code>GENTABLES</code> is <code>FALSE</code>) but it does not create any auxiliary structures such as indexes, constraints, triggers, and row-level security (RLS) policies. Procedure <code>copyEvolve</code> creates the tables and columns as follows:</p>
<ul>
<li>
<p>It creates default tables while registering the new schemas.</p>
</li>
<li>
<p>It creates tables that are not default tables using a statement of the following form:</p>
<pre>
CREATE TABLE <span class="italic">table_name</span> OF XMLType OID '<span class="italic">oid</span>'   XMLSCHEMA <span class="italic">schema_url</span> ELEMENT <span class="italic">element_name</span>
</pre>
<p>where <code><span class="codeinlineitalic">OID</span></code> is the original OID of the table, before it was dropped.</p>
</li>
<li>
<p>It adds <code>XMLType</code> columns using a statement of the following form:</p>
<pre>
ALTER TABLE <span class="italic">table_name</span> ADD (<span class="italic">column_name</span> XMLType) XMLType COLUMN
 <span class="italic">column_name</span> XMLSCHEMA <span class="italic">schema_url</span> ELEMENT <span class="italic">element_name</span>
</pre></li>
</ul>
<p>When a new XML schema is registered, types are generated if the registration of the corresponding old schema had generated types. If an XML schema was global before the evolution, then it is also global after the evolution. Similarly, if an XML schema was local before the evolution, then it is also local (owned by the same user) after the evolution.You have the option to preserve the temporary tables that contain the old documents, by setting parameter <code>preserveOldDocs</code> to <code>TRUE</code>. All temporary tables are created in the database schema of the current user. For <code>XMLType</code> tables, the temporary table has the columns shown in <a href="#BCGDADHA">Table 10-3</a>.</p>
<div id="ADXDB4701" class="tblhruleformal">
<p class="titleintable"><a id="sthref941"></a><a id="BCGDADHA"></a>Table 10-3 XML Schema Evolution: XMLType Table Temporary Table Columns</p>
<table class="cellalignment1032" title="XML Schema Evolution: XMLType Table Temporary Table Columns " summary="This table describes XML Schema evolution XMLType tables&rsquo; temporary table columns, including the column name and type." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t6">Name</th>
<th class="cellalignment1027" id="r1c2-t6">Type</th>
<th class="cellalignment1027" id="r1c3-t6">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t6" headers="r1c1-t6">
<p><code>Data</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t6 r1c2-t6">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t6 r1c3-t6">
<p>XML document from the old table, in <code>CLOB</code> format.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t6" headers="r1c1-t6">
<p><code>OID</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t6 r1c2-t6">
<p><code>RAW(16)</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t6 r1c3-t6">
<p><code>OID</code> of the corresponding row in the old table.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t6" headers="r1c1-t6">
<p><code>ACLOID</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t6 r1c2-t6">
<p><code>RAW(16)</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t6 r1c3-t6">
<p>This column is present only if the old table is hierarchy enabled. <code>ACLOID</code> of corresponding row in old table.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t6" headers="r1c1-t6">
<p><code>OWNERID</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t6 r1c2-t6">
<p><code>RAW(16)</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t6 r1c3-t6">
<p>This column is present only if old table is hierarchy enabled. <code>OWNERID</code> of corresponding row in old table.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>For <code>XMLType</code> columns, the temporary table has the columns shown in <a href="#BCGIJHAH">Table 10-4</a>.</p>
<div id="ADXDB4702" class="tblhruleformal">
<p class="titleintable"><a id="sthref942"></a><a id="BCGIJHAH"></a>Table 10-4 XML Schema Evolution: XMLType Column Temporary Table Columns</p>
<table class="cellalignment1032" title="XML Schema Evolution: XMLType Column Temporary Table Columns" summary="This table describes the XML schema evolution XMLType columns&rsquo; temporary table columns." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t7">Name</th>
<th class="cellalignment1027" id="r1c2-t7">Type</th>
<th class="cellalignment1027" id="r1c3-t7">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t7" headers="r1c1-t7">
<p><code>Data</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t7 r1c2-t7">
<p><code>CLOB</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t7 r1c3-t7">
<p>XML document from the old column, in <code>CLOB</code> format.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t7" headers="r1c1-t7">
<p><code>RID</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t7 r1c2-t7">
<p><code>ROWID</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t7 r1c3-t7">
<p><code>ROWID</code> of the corresponding row in the table containing this column.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>Procedure <code>copyEvolve</code> stores information about the mapping from the old table or column name to the corresponding temporary table name in a separate table specified by parameter <code>mapTabName</code>. If <code>preserveOldDocs</code> is <code>TRUE</code>, then the <code>mapTabName</code> parameter must not be <code>NULL</code>, and it must not be the name of any existing table in the current database schema. Each row in the mapping table has information about one of the old tables/columns. <a href="#BCGJADCF">Table 10-5</a> shows the mapping table columns.</p>
<div id="ADXDB4703" class="tblhruleformal">
<p class="titleintable"><a id="sthref943"></a><a id="BCGJADCF"></a>Table 10-5 Procedure copyEvolve Mapping Table</p>
<table class="cellalignment1032" title="Procedure copyEvolve Mapping Table " summary="This table describes the mapping of the CopyEvolve procedure for XML schema evolution." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t8">Column Name</th>
<th class="cellalignment1027" id="r1c2-t8">Column Type</th>
<th class="cellalignment1027" id="r1c3-t8">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t8" headers="r1c1-t8">
<p><code>SCHEMA_URL</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t8 r1c2-t8">
<p><code>VARCHAR2(700)</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t8 r1c3-t8">
<p>URL of the schema to which this table or column conforms.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t8" headers="r1c1-t8">
<p><code>SCHEMA_OWNER</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t8 r1c2-t8">
<p><code>VARCHAR2(30)</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t8 r1c3-t8">
<p>Owner of the schema.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t8" headers="r1c1-t8">
<p><code>ELEMENT_NAME</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t8 r1c2-t8">
<p><code>VARCHAR2(256)</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t8 r1c3-t8">
<p>Element to which this table or column conforms.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t8" headers="r1c1-t8">
<p><code>TABLE_NAME</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t8 r1c2-t8">
<p><code>VARCHAR2(65)</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t8 r1c3-t8">
<p>Qualified name of the table (<code>&lt;owner_name&gt;.&lt;table_name&gt;</code>).</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t8" headers="r1c1-t8">
<p><code>TABLE_OID</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t8 r1c2-t8">
<p><code>RAW(16)</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t8 r1c3-t8">
<p><code>OID</code> of table.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t8" headers="r1c1-t8">
<p><code>COLUMN_NAME</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t8 r1c2-t8">
<p><code>VARCHAR2(4000)</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t8 r1c3-t8">
<p>Name of the column (<code>NULL</code> for <code>XMLType</code> tables).</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t8" headers="r1c1-t8">
<p><code>TEMP_TABNAME</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t8 r1c2-t8">
<p><code>VARCHAR2(30)</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t8 r1c3-t8">
<p>Name of temporary table that holds the data for this table or column.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>You can avoid generating any tables or columns after registering the new XML schema by setting parameter <code>GENTABLES</code> to <code>FALSE</code>. If <code>GENTABLES</code> is <code>FALSE</code>, parameter <code>PRESERVEOLDDOCS</code> must be <code>TRUE</code> and parameter <code>MAPTABNAME</code> must not be <code>NULL</code>. This ensures that the data in the old tables is not lost. This is useful if you do not want the tables to be created by the procedure, as described in section <a href="#BCGIBJJC">"copyEvolve Parameters and Errors"</a>.</p>
<p>By default, it is assumed that all XML schemas are owned by the current user. If this is not true, then you must specify the owner of each XML schema in the <code>schemaOwners</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF01001" href="../../server.112/e41084/statements_3001.htm#SQLRF01001"><span class="italic">Oracle Database SQL Language Reference</span></a> for the complete description of <code>ALTER TABLE</code></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BCGFDDCF"></a>
<div id="ADXDB0850" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref944"></a><a id="sthref945"></a>Using In-Place XML Schema Evolution</h2>
<p>In-place XML schema evolution makes changes to an XML schema without requiring that existing data be copied, deleted, and reinserted. In-place evolution is thus much faster than copy-based evolution. However, in-place evolution also has several restrictions that do not apply to copy-based evolution.</p>
<p>You use procedure <code>DBMS_XMLSCHEMA.inPlaceEvolve</code> to perform in-place evolution. Using this procedure, you identify the changes to be made to an existing XML schema by specifying an XML schema-differences document, and you optionally specify flags to be applied to the evolution process.</p>
<p>In-place evolution constructs a new version of an XML schema by applying changes specified in a <code>diffXML</code> document, validates that new XML schema (against the XML schema for XML schemas), constructs DDL statements to evolve the disk structures used to store the XML instance documents associated with the XML schema, executes these DDL statements, and replaces the old version of the XML schema with the new, in that order. If the new version of the XML schema is not a valid schema, then in-place evolution fails.</p>
<a id="BCGHBAJA"></a>
<div id="ADXDB4704" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Restrictions for In-Place XML Schema Evolution</h3>
<p>Because in-place XML schema evolution avoids copying data, it does not permit arbitrary changes to an XML schema. This section describes why certain changes are not permitted. For the list of changes supported by in-place evolution, see <a href="#BCGFEEBB">"Supported Operations for In-Place XML Schema Evolution"</a>.</p>
<p>The primary restriction on using in-place evolution can be stated generally as a requirement that a given XML schema can be evolved in place in only a backward-compatible way. <span class="glossaryterm"><a id="sthref946"></a><a id="sthref947"></a>Backward-compatible</span> here means that any possible instance document that would validate against a given XML schema must also validate against a later (evolved) version of that XML schema.</p>
<p>This applies to <span class="italic">all possible</span> conforming instance documents, not only to <span class="italic">existing</span> instance documents For XML data that is stored as binary XML, backward compatibility also means that any XML schema annotations that affect binary XML treatment must not change during evolution. Backward compatibility is described in section <a href="#CHDDFDFD">"Backward-Compatibility Restrictions"</a>.</p>
<p>In addition to this general backward-compatibility restriction, there are some other restrictions for in-place evolution. These are described in section <a href="#CHDJCGDI">"Other Restrictions on In-Place Evolution"</a>.</p>
<a id="CHDDFDFD"></a>
<div id="ADXDB4705" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Backward-Compatibility Restrictions</h4>
<p>The restrictions described in this section ensure backward compatibility of an evolved XML schema, so that any possible instance documents that satisfy the old XML schema also satisfy the new schema.</p>
<div id="ADXDB4706" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref948"></a>
<h5 class="sect4">Changes in Data Layout on Disk</h5>
<p>Certain changes to an XML schema alter the layout of the associated instance documents on disk, and are therefore not permitted. This situation is more common when the storage layer is tightly integrated with information derived from the XML schema, as is the case for object-relational storage.</p>
<p>One such example is an XML schema, registered for object-relational storage mapping, that is evolved by splitting a complex type into two complex types. In <a href="#CHDDDEGA">Example 10-5</a>, complex type <code>ShippingInstructionsType</code> is split into two complex types, <code>Person-Name</code> and <code>Contact-Info</code>, and the <code>ShippingInstructionsType</code> complex type is deleted.</p>
<div id="ADXDB4707" class="example">
<p class="titleinexample"><a id="CHDDDEGA"></a>Example 10-5 Splitting a Complex Type into Two Complex Types</p>
<p>These code excerpts show the definitions of the original <code>ShippingInstructionsType</code> type and the new <code>Person</code><code>-Name</code> and <code>Contact-Info</code> types.</p>
<pre>
&lt;complexType name="ShippingInstructionsType"&gt; 
    &lt;sequence&gt; 
        &lt;element name="name"   type="NameType" minOccurs="0"/&gt; 
        &lt;element name="address" type="AddressType" minOccurs="0"/&gt; 
        &lt;element name="telephone" type="TelephoneType" minOccurs="0"/&gt; 
    &lt;/sequence&gt; 
&lt;/complexType&gt; 
 
&lt;complexType name="Person-Name"&gt; 
    &lt;sequence&gt; 
        &lt;element name="name" type="NameType" minOccurs="0"/&gt; 
    &lt;/sequence&gt;
&lt;/complexType&gt;
 
&lt;complexType name="Contact-Info"&gt;
    &lt;sequence&gt;
        &lt;element name="address" type="AddressType" minOccurs="0"/&gt; 
        &lt;element name="telephone" type="TelephoneType" minOccurs="0"/&gt; 
    &lt;/sequence&gt; 
&lt;/complexType&gt;
</pre></div>
<!-- class="example" -->
<p>Even if this XML schema has no associated instance documents, and therefore no data copy is required, a change in the layout of existing tables is required to accommodate future instance documents.</p>
</div>
<!-- class="sect4" -->
<div id="ADXDB4708" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref949"></a>
<h5 class="sect4">Reordering of XML Schema Constructs</h5>
<p>You cannot use in-place evolution to reorder schema elements in a way that affects the DOM fidelity of instance documents. For example, you cannot change the order of elements within a <code>&lt;sequence&gt;</code> element in a complex type definition. As an example, if a complex type named <code>ShippingInstructionsType</code> requires that its child elements <code>name</code>, <code>address</code>, and <code>telephone</code> be in that order, you cannot use in-place evolution to change the order to <code>name</code>, <code>telephone</code>, and <code>address</code>.</p>
</div>
<!-- class="sect4" -->
<div id="ADXDB4709" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref950"></a>
<h5 class="sect4">Changes from a Collection to a Non-Collection</h5>
<p>You cannot use in-place evolution to change a collection to a non-collection. An example would be changing from a <code>maxOccurs</code> value greater than one to a <code>maxOccurs</code> value of one. You cannot use in-place evolution to delete an element from a complex type if the deletion requires that a collection be evolved to a non-collection.</p>
</div>
<!-- class="sect4" -->
<div id="ADXDB6002" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref951"></a>
<h5 class="sect4">Model Changes within a complexType Element</h5>
<p>A <span class="glossaryterm"><a id="sthref952"></a>model</span> is one of the following elements: <code>group</code>, <code>choice</code>, <code>sequence</code>, or <code>all</code>. Within a <code>complexType</code> element you cannot use in-place evolution to either add a new model or replace an existing model with a model of another type (for example, replace a <code>choice</code> element with a <code>sequence</code> element). You can, however, add a global <code>group</code> element, that is, add a <code>group</code> element outside of a <code>complexType</code> element.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDJCGDI"></a>
<div id="ADXDB4710" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Other Restrictions on In-Place Evolution</h4>
<p>The restrictions on in-place XML schema evolution that are described in this section are necessary for reasons other than backward compatibility of the evolved XML schema.</p>
<div id="ADXDB4711" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref953"></a>
<h5 class="sect4">Changes to Attributes in Namespace xdb</h5>
<p>Except for attribute <code>xdb:defaultTable</code>, you cannot use in-place evolution to modify any attributes in namespace <code>http://xmlns.oracle.com/xdb</code> (which has the predefined prefix <code>xdb</code>).</p>
</div>
<!-- class="sect4" -->
<div id="ADXDB4712" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref954"></a>
<h5 class="sect4">Changes from a Non-Collection to a Collection</h5>
<p>When XML data is stored object-relationally, you cannot use in-place evolution to change a non-collection object type to a collection object type. An example would be adding an element to a complex type with the element name matching the name of an element already present in the type (or in another type that is related to the first type through inheritance).</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BCGFEEBB"></a>
<div id="ADXDB4713" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Supported Operations for In-Place XML Schema Evolution</h3>
<p>This section describes operations that are supported for in-place schema evolution. This list of supported operations is not necessarily exhaustive. Some of the operations listed here are not permitted in specific contexts, which are specified. In particular, some of the operations described here are not permitted for XML schemas that are used with binary XML.</p>
<ul>
<li>
<p><span class="bold">Add an optional element to a complex type or group:</span> Always permitted. An example is the addition of the optional element <code>shipmethod</code> in the following complex type definition:</p>
<pre>
&lt;xs:complexType name="ShippingInstructionsType"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="name" type="NameType" minOccurs="0"/&gt;
        &lt;xs:element name="address" type="AddressType" minOccurs="0"/&gt;
        &lt;xs:element name="telephone" type="TelephoneType" minOccurs="0"/&gt;
        <span class="bold">&lt;xs:element name = "shipmethod" type = "xs:string" minOccurs = "0"/&gt;</span>
    &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;
</pre></li>
<li>
<p><span class="bold">Add an optional attribute to a complex type or attribute group:</span> Always permitted. An example is the addition of the optional attribute <code>shipbydate</code> in the following complex type definition:</p>
<pre>
&lt;xs:complexType name="ShippingInstructionsType"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="name" type="NameType" minOccurs="0"/&gt;
        &lt;xs:element name="address" type="AddressType" minOccurs="0"/&gt;
        &lt;xs:element name="telephone" type="TelephoneType" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
    <span class="bold">&lt;xs:attribute name="shipbydate" type="DateType" use="optional"/&gt;</span>
&lt;/xs:complexType&gt;
</pre></li>
<li>
<p><span class="bold">Convert an element from simple type to complex type with simple content:</span> Supported only if the storage model is binary XML.</p>
</li>
<li>
<p><span class="bold">Modify the value attribute of an existing maxLength element:</span> Always permitted. The value can only be increased, not decreased.</p>
</li>
<li>
<p><span class="bold">Add an enumeration value:</span> You can add a new enumeration value only to the end of an enumeration list.</p>
</li>
<li>
<p><span class="bold">Add a global element:</span> Always permitted. An example is the addition of the global element <code>PurchaseOrderComment</code> in the following schema definition:</p>
<pre>
&lt;xs:schema ...&gt; 
... 
    <span class="bold">&lt;xs:element name="PurchaseOrderComment" type="string" xdb:defaultTable=""/&gt;</span> 
.. 
&lt;/xs:schema&gt;
</pre></li>
<li>
<p><span class="bold">Add a global attribute:</span> Always permitted.</p>
</li>
<li>
<p><span class="bold">Add or delete a global complex type:</span> Always permitted. An example is the addition of the global complex type <code>ComplexAddressType</code> in the following schema definition:</p>
<pre>
&lt;xs:schema ...&gt; 
.... 
    <span class="bold">&lt;xs:complexType name="ComplexAddressType"&gt;</span> 
        <span class="bold">&lt;xs:sequence&gt;</span> 
            <span class="bold">&lt;xs:element name="street" type="string"/&gt;</span> 
            <span class="bold">&lt;xs:element name="city" type="string"/&gt;</span> 
            <span class="bold">&lt;xs:element ref="zip" type="positiveInteger"/&gt;</span> 
            <span class="bold">&lt;xs:element name="country"  type="string"/&gt;</span> 
        <span class="bold">&lt;/xs:sequence&gt;</span> 
     <span class="bold">&lt;/xs:complexType&gt;</span> 
... 
&lt;/xs:schema&gt;
</pre></li>
<li>
<p><span class="bold">Add or delete a global simple type:</span> Always permitted.</p>
</li>
<li>
<p><span class="bold">Change the minOccurs attribute value:</span> The value of <code>minOccurs</code> can only be decreased.</p>
</li>
<li>
<p><span class="bold">Change the maxOccurs attribute value:</span> The value of <code>maxOccurs</code> can only be increased, and this is only possible for data stored as binary XML. That is, you cannot make any change to the <code>maxOccurs</code> attribute for data stored object-relationally.</p>
</li>
<li>
<p><span class="bold">Add or delete a global group or attributeGroup:</span> Always permitted. An example is the addition of an <code>Instructions</code> group in the following type definition:</p>
<pre>
&lt;xsd:schema ...&gt; 
... 
  <span class="bold">&lt;xsd:group name="Instructions"&gt;</span> 
    <span class="bold">&lt;xsd:sequence&gt;</span> 
     <span class="bold">&lt;xsd:element name="ShippingInstructions" type="ShippingInstructionsType"/&gt;</span> 
     <span class="bold">&lt;xsd:element name="SpecialInstructions" type=" SpecialInstructionsType"/&gt;</span> 
    <span class="bold">&lt;/xsd:sequence&gt;</span> 
  <span class="bold">&lt;/xsd:group&gt;</span> 
... 
&lt;/xsd:schema&gt;
</pre></li>
<li>
<p><span class="bold">Change the xdb:defaultTable attribute value:</span> Always permitted. Changes are <span class="italic">not</span> permitted to any other attributes in the <code>xdb</code> namespace.</p>
</li>
<li>
<p><span class="bold">Add, modify, or delete a comment or processing instruction:</span> Always permitted.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHADFC"></a>
<div id="ADXDB4714" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Guidelines for Using In-Place XML Schema Evolution</h3>
<p>The following guidelines apply to in-place XML-schema evolution:</p>
<ul>
<li>
<p><span class="italic">Before</span> you perform an in-place XML-schema evolution:</p>
<ul>
<li>
<p><span class="italic">Back up all existing data</span> (instance documents) for the XML schema to be evolved.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Make sure that you back up your data before performing in-place XML schema evolution, in case the result is not what you intended. There is <span class="italic">no rollback</span> possible after an in-place evolution. If any errors occur during evolution, or if you make a major mistake and need to redo the entire operation, you must be able to go back to the backup copy of your original data.</div>
</li>
<li>
<p><span class="italic">Perform a dry run</span> using trace only, that is, without actually evolving the XML schema or updating any instance documents, produce a trace of the update operations that would be performed during evolution. To do this, set the <code>flag</code> parameter value to only <code>INPLACE_TRACE</code>. Do not also use <code>INPLACE_EVOLVE</code>.</p>
<p>After performing the dry run, examine the trace file, verifying that the listed DDL operations are in fact those that you intend.</p>
</li>
</ul>
</li>
<li>
<p><span class="italic">After</span> you perform an in-place XML-schema evolution:</p>
<p>If you are accessing the database using a client that caches data, or if you are not sure whether this is the case, then <span class="italic">restart your client</span>. Otherwise, the pre-evolution version of the XML schema might continue to be used locally, with unpredictable results.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN11263" href="../../server.112/e25494/diag.htm#ADMIN11263"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about using trace files</div>
</div>
<!-- class="sect2" -->
<a id="BCGGGJGF"></a>
<div id="ADXDB4715" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">inPlaceEvolve Parameters</h3>
<p>This is the signature of procedure <code>DBMS_XMLSCHEMA.inPlaceEvolve</code>:</p>
<pre>
procedure inPlaceEvolve(schemaURL IN VARCHAR2,
                        diffXML   IN XMLType, 
                        flags     IN NUMBER);
</pre>
<p><a href="#BCGHFHEI">Table 10-6</a> describes the individual parameters.</p>
<div id="ADXDB4716" class="tblhruleformal">
<p class="titleintable"><a id="sthref955"></a><a id="BCGHFHEI"></a>Table 10-6 Parameters of Procedure DBMS_XMLSCHEMA.INPLACEEVOLVE</p>
<table class="cellalignment1032" title="Parameters of Procedure DBMS_XMLSCHEMA.INPLACEEVOLVE" summary="This table describes the DBMS_XMLSCHEMA.InPlaceEvolve parameters." dir="ltr">
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t12">Parameter</th>
<th class="cellalignment1027" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t12" headers="r1c1-t12">
<p><code>schemaURL</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t12 r1c2-t12">
<p>URL of the XML schema to be evolved (<code>VARCHAR2)</code>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t12" headers="r1c1-t12">
<p><code>diffXML</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t12 r1c2-t12">
<p>XML document (<code>XMLType</code> instance) that conforms to the <code>xdiff</code> XML schema, and that specifies the changes to apply and the locations in the XML schema where the changes are to be applied. For information about how to create the document for this parameter, see <a href="#BCGJAFCI">"Creating the Document for the diffXML Parameter"</a>.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t12" headers="r1c1-t12">
<p><code>flags</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t12 r1c2-t12">
<p>A bit mask that controls the behavior of the procedure. You can set the following bit values in this mask independently, summing them to define the overall effect. The default <code>flags</code> value is 1 (bit 1 on, bit 2 off), meaning that in-place evolution is performed and no trace is written.</p>
<ul>
<li>
<p><code>INPLACE_EVOLVE</code> (value 1, meaning that bit 1 is on) &ndash; Perform in-place XML schema evolution. Construct a new XML schema and validate it (against the XML schema for XML schemas). Construct the DDL statements needed to evolve the instance-document disk structures. Execute the DDL statements. Replace the old XML schema with the new.</p>
</li>
<li>
<p><code>INPLACE_TRACE</code> (value 2, meaning that bit 2 is on) &ndash; Perform all steps necessary for in-place evolution, <span class="italic">except</span> executing the DDL statements and overwriting the old XML schema with the new, then write both the DDL statements and the new XML schema to a trace file.</p>
</li>
</ul>
<p>That is, each of the bits constructs the new XML schema, validates it, and determines the steps needed to evolve the disk structures underlying the instance documents. In addition:</p>
<ul>
<li>
<p>Bit <code>INPLACE_EVOLVE</code> carries out those evolution steps and replaces the old XML schema with the new.</p>
</li>
<li>
<p>Bit <code>INPLACE_TRACE</code> saves the evolution steps and the new XML schema in a trace file (it does not carry out the evolution steps).</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>Procedure <code>DBMS_XMLSCHEMA.inPlaceEvolve</code> raises an error in the following cases:</p>
<ul>
<li>
<p>An XPath expression is invalid, or is syntactically correct but does not target a node in the XML schema.</p>
</li>
<li>
<p>The <code>diffXML</code> document does not conform to the <code>xdiff</code> XML schema.</p>
</li>
<li>
<p>The change makes the XML schema invalid or not well formed.</p>
</li>
<li>
<p>A generated DDL statement (<code>CREATE TYPE</code>, <code>ALTER TYPE</code>, and so on) causes a problem when it is executed.</p>
</li>
<li>
<p>An index object associated with an <code>XMLType</code> table is in an unsafe state, which could be caused by partition management operations.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BCGJAFCI"></a>
<div id="ADXDB4717" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating the Document for the diffXML Parameter</h3>
<p>The value of the <code>diffXML</code> parameter to procedure <code>DBMS_XMLSCHEMA.inPlaceEvolve</code> is an XML document (as an <code>XMLType</code> instance) that specifies the changes to be applied to an XML schema for in-place evolution. This <code>diffXML</code> document contains a sequence of operations that describe the changes between the old XML schema and the new (the intended evolution result). The changes specified by the <code>diffXML</code> document are applied in order.</p>
<p>You must create the XML document to be used for the <code>diffXML</code> parameter You can do this in any of the following ways:</p>
<ul>
<li>
<p>The <code>XMLDiff</code> JavaBean (<code>oracle.xml.differ.XMLDiff</code>)</p>
</li>
<li>
<p>The <code>xmldiff</code> command-line utility</p>
</li>
<li>
<p>SQL function <code>XMLDiff</code></p>
</li>
</ul>
<p>The <code>diffXML</code> parameter document must conform to the <code>xdiff</code> XML schema.</p>
<p>The rest of this section presents examples of some operations in a document that conforms to the <code>xdiff</code> XML schema.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="apphxdb.htm#BABBHBHF">"xdiff.xsd: XML Schema for Comparing Schemas for In-Place Evolution"</a></p>
</li>
<li>
<p><a class="olink ADXDK1000" href="../../appdev.112/e23582/adx_j_beans.htm#ADXDK1000"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a> for information on using the <code>XMLDiff</code> JavaBean</p>
</li>
<li>
<p><a class="olink ADXDK2540" href="../../appdev.112/e23582/adx_c_diff.htm#ADXDK2540"><span class="italic">Oracle XML Developer's Kit Programmer's Guide</span></a> for information on command-line utility <code>xmldiff</code></p>
</li>
<li>
<p><a class="olink SQLRF20025" href="../../server.112/e41084/functions241.htm#SQLRF20025"><span class="italic">Oracle Database SQL Language Reference</span></a> for information on SQL function <code>XMLDiff</code></p>
</li>
</ul>
</div>
<div id="ADXDB4718" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref956"></a>
<h4 class="sect3">diffXML Operations and Examples</h4>
<p>This section describes some operations that can be specified in the document for the <code>diffXML</code> document supplied to procedure <code>DBMS_XMLSCHEMA.inPlaceEvolve</code>. It presents an example XML document that conforms to the <code>xdiff</code> XML schema.</p>
<p>The <code>&lt;append-node&gt;</code> element is used for most of the supported changes, such as adding a new attribute to a complex type or appending a new element to a group.</p>
<p>The <code>&lt;insert-node-before&gt;</code> element specifies that a node of the given type should be inserted before the specified node. The <code>xpath</code> attribute specifies the location of the specified node and the <code>node-type</code> attribute specifies the type of node to be inserted. The node to be inserted is specified by the <code>&lt;content&gt;</code> child element. The <code>&lt;insert-node-before&gt;</code> element is mainly used for inserting comments and processing instructions, and for changing and adding add annotation elements.</p>
<p>The <code>&lt;delete-node&gt;</code> element specifies that the node with the given XPath (specified by the <code>xpath</code> attribute) should be deleted along with all its children. For example, you can use this element to delete comments and annotation elements. You can also use this element, in conjunction with <code>&lt;append-node&gt;</code> or <code>&lt;insert-node-before&gt;</code>, to make changes to an existing node.</p>
<p><a href="#BCGBHCDH">Example 10-6</a> shows an XML document for the <code>diffXML</code> parameter that specifies the following changes:</p>
<ul>
<li>
<p>Delete complex type <code>PartType</code>.</p>
</li>
<li>
<p>Add complex type <code>PartType</code> with a maximum length of 28.</p>
</li>
<li>
<p>Add a comment before element <code>ShippingInstructions</code>.</p>
</li>
<li>
<p>Add a required element <code>shipmethod</code> to element <code>ShippingInstructions</code>.</p>
</li>
</ul>
<div id="ADXDB4719" class="example">
<p class="titleinexample"><a id="BCGBHCDH"></a>Example 10-6 diffXML Parameter Document</p>
<pre>
&lt;xd:xdiff  xmlns="http://www.w3c.org/2001/XMLSchema" 
           xmlns:xd="http://xmlns.oracle.com/xdb/xdiff.xsd" 
           xmlns:xsi="http://www.w3c.org/2001/XMLSchema-Instance" 
           xsi:schemaLocation="http://xmlns.oracle.com/xdb/xdiff.xsd
           http://xmlns.oracle.com/xdb/xdiff.xsd"&gt; 
 &lt;xd:delete-node xpath="/schema/complexType[@name=&amp;quote;PartType&amp;quote;]//maxLength/&gt; 
 &lt;xd:append-node
  parent-xpath = "/schema/complexType[@name=&amp;quote;PartType&amp;quote;]//restriction"
  node-type = "element"&gt; 
  &lt;xd:content&gt; 
    &lt;xs:maxLength value = "28"/&gt;
  &lt;/xd:content&gt; 
 &lt;/xd:append-node&gt; 
 &lt;xd:insert-node-before 
  xpath="/schema/complexType[@name =&amp;quote;ShippingInstructionsType&amp;quote;]/sequence" 
  node-type="comment"&gt; 
  &lt;xd:content&gt; 
    &lt;!-- A type representing instructions for shipping --&gt; 
  &lt;/xd:content&gt; 
 &lt;/xd:insert-node-before&gt; 
 &lt;xd:append-node 
  parent-xpath="/schema/complexType[@name=&amp;quote;ShippingInstructionsType&amp;quote;]/sequence" 
  node-type="element"&gt; 
  &lt;xd:content&gt; 
   &lt;xs:element name = "shipmethod" type = "xs:string" minOccurs = "1"/&gt; 
  &lt;/xd:content&gt; 
 &lt;/xd:append-node&gt; 
&lt;/xd:xdiff&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb06stt.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb08tra.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
