<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Transforming and Validating XMLType Data</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb07evo.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb09sea.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">20/54</span> <!-- End Header -->
<div id="ADXDB0900" class="chapter"><a id="g1030361"></a>
<h1 class="chapter"><span class="secnum">11</span> Transforming and Validating XMLType Data</h1>
<p>This chapter describes the SQL functions and <code>XMLType</code> APIs for transforming <code>XMLType</code> data using XSLT style sheets. It also explains the various functions and APIs available for validating the <code>XMLType</code> instance against an XML schema.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1024963">Transforming XMLType Instances</a></p>
</li>
<li>
<p><a href="#i1026230">XMLTRANSFORM and XMLType.transform(): Examples</a></p>
</li>
<li>
<p><a href="#i1024967">Validating XMLType Instances</a></p>
</li>
<li>
<p><a href="#i1025002">Validating XML Data Stored as XMLType: Examples</a></p>
</li>
</ul>
<a id="i1024963"></a>
<div id="ADXDB4720" class="sect1">
<h2 class="sect1">Transforming XMLType Instances</h2>
<p>XML documents have structure but no format. To add format to the XML documents you can use Extensible Stylesheet Language (XSL). XSL provides a way of displaying XML semantics. It can map XML elements into other formatting or mark-up languages such as HTML.</p>
<p>In Oracle XML&nbsp;DB, <code>XMLType</code> instances or XML data stored in <code>XMLType</code> tables, columns, or views in Oracle Database, can be (formatted) transformed into HTML, XML, and other mark-up languages, using XSL style sheets and <code>XMLType</code> method <code>transform()</code>. This process conforms to the W3C XSL Transformations 1.0 Recommendation.</p>
<p><code>XMLType</code> instance can be transformed in the following ways:</p>
<ul>
<li>
<p>Using Oracle SQL function <code>XMLtransform</code> or <code>XMLType</code> method <code>transform()</code> in the database.</p>
</li>
<li>
<p>Using Oracle XML Developer's Kit transformation options in the middle tier, such as XSLT Processor for Java.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#g1055369">Chapter 3, "Using Oracle XML&nbsp;DB"</a>, the section, <a href="xdb03usg.htm#BABDIDHA">"XSL Transformation and Oracle XML&nbsp;DB"</a></p>
</li>
<li>
<p><a href="xdb10pls.htm#i1043472">"PL/SQL XSLT Processor for XMLType (DBMS_XSLPROCESSOR)"</a></p>
</li>
</ul>
</div>
<div id="ADXDB4721" class="sect2"><a id="sthref957"></a>
<h3 class="sect2">SQL Function XMLTRANSFORM<a id="sthref958"></a><a id="sthref959"></a> and XMLType Method TRANSFORM()</h3>
<p><a href="#i1026954">Figure 11-1</a> shows the syntax of Oracle SQL function <code>XMLtransform</code>. This function takes as arguments an <code>XMLType</code> instance and an XSLT style sheet. The style sheet can be an <code>XMLType</code> instance or a <code>VARCHAR2</code> string literal. It applies the style sheet to the instance and returns an <code>XMLType</code> instance.</p>
<div id="ADXDB4722" class="figure">
<p class="titleinfigure"><a id="i1026954"></a>Figure 11-1 XMLTRANSFORM Syntax</p>
<img width="506" height="58" src="img/xmltransform.gif" alt="Description of Figure 11-1 follows" /><br />
<a id="sthref960" href="img_text/xmltransform.htm">Description of "Figure 11-1 XMLTRANSFORM Syntax"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You can alternatively use <code>XMLType</code> method <code>transform()</code> as an alternative to Oracle SQL function <code>XMLtransform</code>. It has the same functionality.</p>
<p><a href="#i1026237">Figure 11-2</a> shows how <code>XMLtransform</code> transforms an XML document by using an XSLT style sheet. It returns the processed output as XML, HTML, and so on, as specified by the XSLT style sheet. You typically use <code>XMLtransform</code> when retrieving or generating XML documents stored as <code>XMLType</code> in the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb01int.htm#i1048278">Figure 1-1, "XMLType Storage and Oracle XML&nbsp;DB Repository"</a> in <a href="xdb01int.htm#g1054540">Chapter 1, "Introduction to Oracle XML&nbsp;DB"</a></div>
<div id="ADXDB4723" class="figure">
<p class="titleinfigure"><a id="i1026237"></a>Figure 11-2 Using XMLTRANSFORM</p>
<img width="417" height="54" src="img/adxdb008.gif" alt="Description of Figure 11-2 follows" /><br />
<a id="sthref961" href="img_text/adxdb008.htm">Description of "Figure 11-2 Using XMLTRANSFORM"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1026230"></a>
<div id="ADXDB4724" class="sect1">
<h2 class="sect1">XMLTRANSFORM and XMLType.transform(): Examples</h2>
<p>The examples in this section illustrate how to use Oracle SQL function <code>XMLtransform</code> and <code>XMLType</code> method <code>transform()</code> to transform XML data stored as <code>XMLType</code> to various formats.</p>
<p><a href="#CFHJDEJE">Example 11-1</a> sets up an XML schema and tables that are needed to run other examples in this chapter. The call to <code>deleteSchema</code> here ensures that there is no existing XML schema before creating one. If no such schema exists, then <code>deleteSchema</code> produces an error.</p>
<div id="ADXDB4725" class="example">
<p class="titleinexample"><a id="CFHJDEJE"></a>Example 11-1 Registering an XML Schema and Inserting XML Data</p>
<pre>
BEGIN
  -- Delete the schema, if it already exists.
  DBMS_XMLSCHEMA.deleteSchema('http://www.example.com/schemas/ipo.xsd',4);
END;
/
BEGIN
  -- Register the schema
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.example.com/schemas/ipo.xsd',
    SCHEMADOC =&gt; '&lt;schema targetNamespace="http://www.example.com/IPO"
                          xmlns="http://www.w3.org/2001/XMLSchema"
                          xmlns:ipo="http://www.example.com/IPO"&gt;
                    &lt;!-- annotation&gt;
                      &lt;documentation&gt;
                       International Purchase order schema for Example.com
                       Copyright 2000 Example.com. All rights reserved.
                      &lt;/documentation&gt;
                    &lt;/annotation --&gt;
                    &lt;element name="purchaseOrder" type="ipo:PurchaseOrderType"/&gt;
                    &lt;element name="comment" type="string"/&gt;
                    &lt;complexType name="PurchaseOrderType"&gt;
                      &lt;sequence&gt;
                        &lt;element name="shipTo"     type="ipo:Address"/&gt;
                        &lt;element name="billTo"     type="ipo:Address"/&gt;
                        &lt;element ref="ipo:comment" minOccurs="0"/&gt;
                        &lt;element name="items"      type="ipo:Items"/&gt;
                      &lt;/sequence&gt;
                      &lt;attribute name="orderDate" type="date"/&gt;
                    &lt;/complexType&gt;
                    &lt;complexType name="Items"&gt;
                      &lt;sequence&gt;
                        &lt;element name="item" minOccurs="0" maxOccurs="unbounded"&gt;
                          &lt;complexType&gt;
                            &lt;sequence&gt;
                              &lt;element name="productName" type="string"/&gt;
                              &lt;element name="quantity"&gt;
                                &lt;simpleType&gt;
                                  &lt;restriction base="positiveInteger"&gt;
                                    &lt;maxExclusive value="100"/&gt;
                                  &lt;/restriction&gt;
                                &lt;/simpleType&gt;
                              &lt;/element&gt;
                              &lt;element name="USPrice"    type="decimal"/&gt;
                              &lt;element ref="ipo:comment" minOccurs="0"/&gt;
                              &lt;element name="shipDate"   type="date" minOccurs="0"/&gt;
                            &lt;/sequence&gt;
                            &lt;attribute name="partNum" type="ipo:SKU" use="required"/&gt;
                          &lt;/complexType&gt;
                        &lt;/element&gt;
                      &lt;/sequence&gt;
                    &lt;/complexType&gt;
                    &lt;complexType name="Address"&gt;
                      &lt;sequence&gt;
                        &lt;element name="name"    type="string"/&gt;
                        &lt;element name="street"  type="string"/&gt;
                        &lt;element name="city"    type="string"/&gt;
                        &lt;element name="state"   type="string"/&gt;
                        &lt;element name="country" type="string"/&gt;
                        &lt;element name="zip"     type="string"/&gt;
                      &lt;/sequence&gt;
                    &lt;/complexType&gt;
                    &lt;simpleType name="SKU"&gt;
                      &lt;restriction base="string"&gt;
                        &lt;pattern value="[0-9]{3}-[A-Z]{2}"/&gt;
                      &lt;/restriction&gt;
                    &lt;/simpleType&gt;
                  &lt;/schema&gt;',
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE);
END;
/

-- Create table to hold XML instance documents
DROP TABLE po_tab;

CREATE TABLE po_tab (id NUMBER, xmlcol XMLType) 
 XMLType COLUMN xmlcol
 XMLSCHEMA "http://www.example.com/schemas/ipo.xsd"
 ELEMENT "purchaseOrder";

INSERT INTO po_tab 
  VALUES(1, XMLType(
              '&lt;?xml version="1.0"?&gt;
               &lt;ipo:purchaseOrder
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:ipo="http://www.example.com/IPO"
                 xsi:schemaLocation="http://www.example.com/IPO
                                     http://www.example.com/schemas/ipo.xsd"
                 orderDate="1999-12-01"&gt;
                 &lt;shipTo&gt;
                   &lt;name&gt;Helen Zoe&lt;/name&gt;
                   &lt;street&gt;121 Broadway&lt;/street&gt;
                   &lt;city&gt;Cardiff&lt;/city&gt;
                   &lt;state&gt;Wales&lt;/state&gt;
                   &lt;country&gt;UK&lt;/country&gt;
                   &lt;zip&gt;CF2 1QJ&lt;/zip&gt;
                 &lt;/shipTo&gt;
                 &lt;billTo&gt;
                   &lt;name&gt;Robert Smith&lt;/name&gt;
                   &lt;street&gt;8 Oak Avenue&lt;/street&gt;
                   &lt;city&gt;Old Town&lt;/city&gt;
                   &lt;state&gt;CA&lt;/state&gt;
                   &lt;country&gt;US&lt;/country&gt;
                   &lt;zip&gt;95819&lt;/zip&gt;
                 &lt;/billTo&gt;
                 &lt;items&gt;
                   &lt;item partNum="833-AA"&gt;
                     &lt;productName&gt;Lapis necklace&lt;/productName&gt;
                     &lt;quantity&gt;1&lt;/quantity&gt;
                     &lt;USPrice&gt;99.95&lt;/USPrice&gt;
                     &lt;ipo:comment&gt;Want this for the holidays!&lt;/ipo:comment&gt;
                     &lt;shipDate&gt;1999-12-05&lt;/shipDate&gt;
                   &lt;/item&gt;
                 &lt;/items&gt;
               &lt;/ipo:purchaseOrder&gt;'));
</pre></div>
<!-- class="example" -->
<p><a href="#i1027535">Example 11-2</a> shows how to retrieve a style sheet using SQL function <code>XMLtransform</code> and <code>DBURIType</code>. See <a href="xdb15dbu.htm#BABIBHDB">Chapter 20, "Accessing Data Through URIs"</a> for information about <code>DBURIType</code>.</p>
<div id="ADXDB4726" class="example">
<p class="titleinexample"><a id="i1027535"></a>Example 11-2 Retrieving a Style Sheet using XMLTRANSFORM and DBURITYPE</p>
<pre>
DROP TABLE stylesheet_tab;

CREATE TABLE stylesheet_tab (id NUMBER, stylesheet XMLType);

INSERT INTO stylesheet_tab 
  VALUES (1, 
          XMLType(
            '&lt;?xml version="1.0" ?&gt;
             &lt;xsl:stylesheet version="1.0" 
                             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
               &lt;xsl:template match="*"&gt;
                 &lt;td&gt;
                   &lt;xsl:choose&gt;
                     &lt;xsl:when test="count(child::*) &gt; 1"&gt;
                       &lt;xsl:call-template name="nested"/&gt;
                     &lt;/xsl:when&gt;
                     &lt;xsl:otherwise&gt;
                       &lt;xsl:value-of select="name(.)"/&gt;:&lt;xsl:value-of 
                                                          select="text()"/&gt;
                     &lt;/xsl:otherwise&gt;
                   &lt;/xsl:choose&gt;
                 &lt;/td&gt;
               &lt;/xsl:template&gt;
               &lt;xsl:template match="*" name="nested" priority="-1" mode="nested2"&gt;
                 &lt;b&gt;
                   &lt;!-- xsl:value-of select="count(child::*)"/ --&gt;
                   &lt;xsl:choose&gt;
                     &lt;xsl:when test="count(child::*) &gt; 1"&gt;
                       &lt;xsl:value-of select="name(.)"/&gt;:&lt;xsl:apply-templates 
                                                          mode="nested2"/&gt;
                     &lt;/xsl:when&gt;
                     &lt;xsl:otherwise&gt;
                       &lt;xsl:value-of select="name(.)"/&gt;:&lt;xsl:value-of 
                                                          select="text()"/&gt;
                     &lt;/xsl:otherwise&gt;
                   &lt;/xsl:choose&gt;
                 &lt;/b&gt;
               &lt;/xsl:template&gt;
             &lt;/xsl:stylesheet&gt;'));

SELECT XMLSerialize(DOCUMENT XMLtransform(x.xmlcol, y.stylesheet)
                    AS varchar2(1000))
  AS result FROM po_tab x, stylesheet_tab y WHERE y.id = 1;
</pre>
<p>This produces the following output (pretty-printed here for readability):</p>
<pre>
RESULT
---------------------------------------------------------
&lt;td&gt;
  &lt;b&gt;ipo:purchaseOrder:
    &lt;b&gt;shipTo:
      &lt;b&gt;name:Helen Zoe&lt;/b&gt;
      &lt;b&gt;street:100 Broadway&lt;/b&gt;
      &lt;b&gt;city:Cardiff&lt;/b&gt;
      &lt;b&gt;state:Wales&lt;/b&gt;
      &lt;b&gt;country:UK&lt;/b&gt;
      &lt;b&gt;zip:CF2 1QJ&lt;/b&gt;
    &lt;/b&gt;
    &lt;b&gt;billTo:
      &lt;b&gt;name:Robert Smith&lt;/b&gt;
      &lt;b&gt;street:8 Oak Avenue&lt;/b&gt;
      &lt;b&gt;city:Old Town&lt;/b&gt;
      &lt;b&gt;state:CA&lt;/b&gt;
      &lt;b&gt;country:US&lt;/b&gt;
      &lt;b&gt;zip:95819&lt;/b&gt;
    &lt;/b&gt;
    &lt;b&gt;items:&lt;/b&gt;
  &lt;/b&gt;
&lt;/td&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CFHFGEDE">Example 11-3</a> illustrates the use of a stored style sheet to transform <code>XMLType</code> instances. Unlike <a href="#i1027535">Example 11-2</a>, <a href="#CFHFGEDE">Example 11-3</a> uses a scalar subquery to retrieve the stored style sheet.</p>
<div id="ADXDB4727" class="example">
<p class="titleinexample"><a id="CFHFGEDE"></a>Example 11-3 Retrieving a Style Sheet using XMLTRANSFORM and a Subquery</p>
<pre>
SELECT XMLSerialize(DOCUMENT
                    XMLtransform(
                      x.xmlcol,
                      (SELECT stylesheet FROM stylesheet_tab WHERE id = 1))
                    AS VARCHAR2(1000))
  AS result FROM po_tab x;
</pre></div>
<!-- class="example" -->
<p><a href="#CFHGHGJI">Example 11-4</a> uses <code>XMLType</code> method <code>transform()</code> to transform an <code>XMLType</code> instance using a transient style sheet.</p>
<div id="ADXDB4728" class="example">
<p class="titleinexample"><a id="CFHGHGJI"></a>Example 11-4 Using Method TRANSFORM() with a Transient Style Sheet</p>
<pre>
SELECT XMLSerialize(
         DOCUMENT
         x.xmlcol.transform(
           XMLType('&lt;?xml version="1.0" ?&gt;
                  &lt;xsl:stylesheet
                      version="1.0"
                      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
                    &lt;xsl:template match="*"&gt;
                      &lt;td&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count(child::*) &gt; 1"&gt;
                            &lt;xsl:call-template name="nested"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of
                               select =
                                 "name(.)"/&gt;:&lt;xsl:value-of select="text()"/&gt;
                          &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/td&gt;
                    &lt;/xsl:template&gt;
                    &lt;xsl:template match="*" name="nested" priority="-1"
                                  mode="nested2"&gt;
                      &lt;b&gt;
                        &lt;!-- xsl:value-of select="count(child::*)"/ --&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count(child::*) &gt; 1"&gt;
                            &lt;xsl:value-of select="name(.)"/&gt;:
                            &lt;xsl:apply-templates mode="nested2"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of
                               select =
                                 "name(.)"/&gt;:&lt;xsl:value-of select="text()"/&gt;
                          &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/b&gt;
                    &lt;/xsl:template&gt;
                  &lt;/xsl:stylesheet&gt;'))
         AS varchar2(1000))
  FROM po_tab x;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1024967"></a>
<div id="ADXDB4729" class="sect1">
<h2 class="sect1">Validating XMLType Instances</h2>
<p>Often, besides knowing whether a particular XML document is well-formed, you need to know whether it conforms to a given XML schema, that is, whether it is valid with respect to that XML schema.</p>
<p>XML schema-based data that is stored as binary XML it is automatically validated fully whenever it is inserted or updated. This validation does not require building a DOM. It is done using streaming, which is efficient and minimizes memory use.</p>
<p>For <code>XMLType</code> data that is stored object-relationally, full validation requires building a DOM, which can be costly in terms of memory management. For this reason, Oracle XML&nbsp;DB does not automatically perform full validation when you insert or update data that is stored object-relationally.</p>
<p>However, in the process of decomposing XML data to store it object-relationally, Oracle XML&nbsp;DB does automatically perform partial validation, to ensure that the structure of the XML document conforms to the SQL data type definitions that were derived from the XML schema.</p>
<p>If you require full validation for <code>XMLType</code> data stored object-relationally, then consider validating on the client before inserting the data into the database or updating it.</p>
<p>You can use the following to perform full validation and manipulate the recorded validation status of XML documents:</p>
<ul>
<li>
<p>Oracle SQL function <code><span class="codeinlinebold"><a id="sthref962"></a><a id="sthref963"></a><a id="sthref964"></a>XMLIsValid</span></code> and <code>XMLType</code> method <code><span class="codeinlinebold"><a id="sthref965"></a><a id="sthref966"></a><a id="sthref967"></a><a id="sthref968"></a>IsSchemaValid()</span></code> &ndash; Run the validation process unconditionally. Do not record any validation status. Return:</p>
<ul>
<li>
<p><code>1</code> if the document is determined to be <span class="italic">valid</span>.</p>
</li>
<li>
<p><code>0</code> if the document is determined to be <span class="italic">invalid</span> or the validity of the document <span class="italic">cannot be determined</span>.</p>
</li>
</ul>
</li>
<li>
<p><code>XMLType</code> method <code><span class="codeinlinebold">SchemaValidate()</span></code> &ndash; Runs the validation process if the validation status is <code>0</code>, which it is by default. Sets the validation status to <code>1</code> if the document is determined to be <span class="italic">valid</span>. (Otherwise, the status remains <code>0</code>.)</p>
</li>
<li>
<p><code>XMLType</code> method <code><span class="codeinlinebold"><a id="sthref969"></a><a id="sthref970"></a><a id="sthref971"></a><a id="sthref972"></a>isSchemaValidated()</span></code> returns the recorded validation status of an <code>XMLType</code> instance.</p>
</li>
<li>
<p><code>XMLType</code> method <code><span class="codeinlinebold"><a id="sthref973"></a><a id="sthref974"></a><a id="sthref975"></a><a id="sthref976"></a>setSchemaValidated()</span></code> sets (records) the validation status of an <code>XMLType</code> instance.</p>
</li>
</ul>
<p>Note that the validation status indicates knowledge of validity, as follows:</p>
<ul>
<li>
<p><code>1</code> means that the document is known to be <span class="italic">valid</span>.</p>
</li>
<li>
<p><code>0</code> means that validity of the document is <span class="italic">unknown</span>. The document might have been shown to be invalid during a validation check, but that invalidity is not recorded. A recorded validation status of <code>0</code> indicates only a lack of knowledge about the document's validity.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#CEGGEFGF">"Comparing Partial to Full XML Schema Validation"</a></p>
</li>
<li>
<p><a class="olink SQLRF06147" href="../../server.112/e41084/functions245.htm#SQLRF06147"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about Oracle SQL function <code>XMLIsValid</code></p>
</li>
<li>
<p><a class="olink ARPLS369" href="../../appdev.112/e40758/t_xml.htm#ARPLS369"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about <code>XMLType</code> methods <code>IsSchemaValid()</code>, <code>IsSchemaValidated()</code>, <code>SchemaValidate()</code>, and <code>setSchemaValidated()</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1025002"></a>
<div id="ADXDB4740" class="sect1">
<h2 class="sect1">Validating XML Data Stored as XMLType: <a id="sthref977"></a>Examples</h2>
<p>The examples in this section illustrate how to use Oracle SQL function <code>XMLIsValid</code> and <code>XMLType</code> methods <code>isSchemaValid()</code> and <code>schemaValidate()</code> to validate XML data being stored as <code>XMLType</code> in Oracle XML&nbsp;DB.</p>
<p><a href="#CFHHFGAI">Example 11-5</a> and <a href="#CFHCEHFA">Example 11-6</a> show how to validate an XML instance against an XML schema using PL/SQL method <code>isSchemaValid</code>().</p>
<div id="ADXDB4741" class="example">
<p class="titleinexample"><a id="CFHHFGAI"></a>Example 11-5 Validating XML using Method ISSCHEMAVALID() in SQL</p>
<pre>
SELECT x.xmlcol.<span class="bold">isSchemaValid</span>('http://www.example.com/schemas/ipo.xsd',
                              'purchaseOrder')
    FROM po_tab x;
</pre></div>
<!-- class="example" -->
<div id="ADXDB4742" class="example">
<p class="titleinexample"><a id="CFHCEHFA"></a>Example 11-6 Validating XML using Method ISSCHEMAVALID() in PL/SQL</p>
<pre>
DECLARE
  xml_instance XMLType;
BEGIN
  SELECT x.xmlcol INTO xml_instance FROM po_tab x WHERE id = 1;
  IF xml_instance.<span class="bold">isSchemaValid</span>('http://www.example.com/schemas/ipo.xsd') = 0
    THEN raise_application_error(-20500, 'Invalid Instance');
    ELSE DBMS_OUTPUT.put_line('Instance is valid');
  END IF;
END;
/
Instance is valid
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p><code>XMLType</code> method <code>schemaValidate()</code> can be used within <code>INSERT</code> and <code>UPDATE</code> triggers to ensure that all instances stored in the table are validated against the XML schema. <a href="#CFHJFAEG">Example 11-7</a> illustrates this.</p>
<div id="ADXDB4743" class="example">
<p class="titleinexample"><a id="CFHJFAEG"></a>Example 11-7 Validating XML using Method SCHEMAVALIDATE() within Triggers</p>
<pre>
DROP TABLE po_tab;
CREATE TABLE po_tab OF XMLType 
  XMLSCHEMA "http://www.example.com/schemas/ipo.xsd" ELEMENT "purchaseOrder";

CREATE TRIGGER emp_trig BEFORE INSERT OR UPDATE ON po_tab FOR EACH ROW

DECLARE 
  newxml XMLType;
BEGIn
  newxml := :new.OBJECT_VALUE;
  XMLTYPE.<span class="bold">schemavalidate</span>(newxml);
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CFHEGCDB">Example 11-8</a> uses Oracle SQL function <code>XMLIsValid</code> to do the following:</p>
<ul>
<li>
<p>Verify that the <code>XMLType</code> instance conforms to the specified XML schema</p>
</li>
<li>
<p>Ensure that the incoming XML documents are valid by using <code>CHECK</code> constraints</p>
</li>
</ul>
<div id="ADXDB4744" class="example">
<p class="titleinexample"><a id="CFHEGCDB"></a>Example 11-8 Checking XML Validity using XMLISVALID within CHECK Constraints</p>
<pre>
DROP TABLE po_tab;
CREATE TABLE po_tab OF XMLType 
   (<span class="bold">CHECK</span>(<span class="bold">XMLIsValid</span>(OBJECT_VALUE) = 1))
   XMLSCHEMA "http://www.example.com/schemas/ipo.xsd" ELEMENT "purchaseOrder";
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The validation functions and procedures described in section <a href="#i1024967">"Validating XMLType Instances"</a> facilitate validation checking. Of these, <code>schemaValidate</code> is the only one that raises errors that indicate why validation has failed.</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb07evo.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb09sea.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
