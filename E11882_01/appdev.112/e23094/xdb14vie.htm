<!DOCTYPE html>
<html lang="en">
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XMLType Views</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:16Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb13gen.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb15dbu.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">30/54</span> <!-- End Header -->
<div id="ADXDB1800" class="chapter"><a id="CJIDAFJI"></a>
<h1 class="chapter"><span class="secnum">19</span> XMLType Views</h1>
<p>This chapter describes how to create and use <code>XMLType</code> views. It contains these topics:</p>
<ul>
<li>
<p><a href="#i1026153">What Are XMLType Views?</a></p>
</li>
<li>
<p><a href="#i1025384">Creating Non-Schema-Based XMLType Views</a></p>
</li>
<li>
<p><a href="#i1025388">Creating XML Schema-Based XMLType Views</a></p>
</li>
<li>
<p><a href="#i1025645">Creating XMLType Views from XMLType Tables</a></p>
</li>
<li>
<p><a href="#i1025598">Referencing XMLType View Objects using SQL Function REF</a></p>
</li>
<li>
<p><a href="#i1025398">DML (Data Manipulation Language) on XMLType Views</a></p>
</li>
</ul>
<a id="i1026153"></a>
<div id="ADXDB5166" class="sect1">
<h2 class="sect1">What Are XMLType Views?</h2>
<p><code>XMLType</code> views wrap existing relational and object-relational data in XML formats. The major advantages of using <code>XMLType</code> views are:</p>
<ul>
<li>
<p>You can exploit Oracle XML&nbsp;DB XML features that use XML schema functionality without having to migrate your base legacy data.</p>
</li>
<li>
<p>With <code>XMLType</code> views, you can experiment with various other forms of storage, besides the object-relational, <code>CLOB</code>, and binary XML storage available for <code>XMLType</code> tables.</p>
</li>
</ul>
<p><code>XMLType</code> views are similar to object views. Each row of an <code>XMLType</code> view corresponds to an <code>XMLType</code> instance. The object identifier for uniquely identifying each row in the view can be created using SQL/XML functions <code>XMLCast</code> and <code>XMLQuery</code>.</p>
<p>Throughout this chapter XML schema refers to the W3C XML Schema 1.0 recommendation, <code><a href="http://www.w3.org/XML/Schema">http://www.w3.org/XML/Schema</a></code>.</p>
<p>There are two types of <code>XMLType</code> views:</p>
<ul>
<li>
<p><span class="glossaryterm"><a id="sthref1271"></a>Non-schema-based XMLType views.</span> These views do not confirm to a particular XML schema.</p>
</li>
<li>
<p><span class="glossaryterm"><a id="sthref1272"></a>XML schema-based XMLType views.</span> As with <code>XMLType</code> tables, <code>XMLType</code> views that conform to a particular XML schema are called XML schema-based <code>XMLType</code> views. These provide stronger typing than non-schema-based <code>XMLType</code> views.</p>
</li>
</ul>
<p>XPath rewrite of queries over <code>XMLType</code> views is enabled for both XML schema-based and non-schema-based <code>XMLType</code> views. XPath rewrite is described in <a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a>.</p>
<p>To create an XML schema-based <code>XMLType</code> view, first register your XML schema. If the view is an object view, that is, if it is constructed using an object type, then the XML schema should have annotations that represent the bidirectional mapping from XML to SQL object types. <code>XMLType</code> views conforming to this registered XML schema can then be created by providing an underlying query that constructs instances of the appropriate SQL object type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="xdb03usg.htm#BABFCJHC">"Accessing XML Data in Oracle XML&nbsp;DB using Relational Views"</a></p>
</li>
<li>
<p><a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></p>
</li>
</ul>
</div>
<p>You can create <code>XMLType</code> views in any of the following ways:</p>
<ul>
<li>
<p>Based on SQL/XML publishing functions, such as <code>XMLElement</code>, <code>XMLForest</code>, <code>XMLConcat</code>, and <code>XMLAgg</code>. SQL/XML publishing functions can be used to construct both non-schema-based <code>XMLType</code> views and XML schema-based <code>XMLType</code> views. This enables construction of <code>XMLType</code> view from the underlying relational tables directly without physically migrating those relational legacy data into XML. However, to construct XML schema-based <code>XMLType</code> view, the XML schema must be registered and the XML value generated by SQL/XML publishing functions must be constrained to the XML schema.</p>
</li>
<li>
<p>Based on object types, object views, and Oracle SQL function <code>sys_XMLGen</code>. Non-schema-based <code>XMLType</code> views can be constructed using object types, object views, and function <code>sys_XMLGen</code> and XML schema-based <code>XMLType</code> view can be constructed using object types and object views. This enables the construction of the <code>XMLType</code> view from underlying relational or object relational tables directly without physically migrating the relational or object relational legacy data into XML. Creating non-schema-based <code>XMLType</code> view requires the use of <code>sys_XMLGen</code> over existing object types or object views. Creating XML-schema-based <code>XMLType</code> view requires to annotate the XML schema with a mapping to existing object types or to generate the XML schema from the existing object types.</p>
</li>
<li>
<p>Directly from an <code>XMLType</code> table.</p>
</li>
</ul>
<div id="ADXDB5167" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1273"></a>
<h3 class="sect2">Creating XMLType Views: Syntax</h3>
<p><a href="#CJIBFAFH">Figure 19-1</a> shows the <code>CREATE VIEW</code> clause for creating <code>XMLType</code> views. See <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for details on the <code>CREATE VIEW</code> syntax.</p>
<div id="ADXDB5168" class="figure">
<p class="titleinfigure"><a id="CJIBFAFH"></a>Figure 19-1 Creating XMLType Views Clause: Syntax</p>
<img width="694" height="91" src="img/xmltype_view_clause.gif" alt="Description of Figure 19-1 follows" /><br />
<a id="sthref1274" href="img_text/xmltype_view_clause.htm">Description of "Figure 19-1 Creating XMLType Views Clause: Syntax"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025384"></a>
<div id="ADXDB5169" class="sect1">
<h2 class="sect1">Creating Non-Schema-Based XMLType Views</h2>
<p>Non-schema-based <code>XMLType</code> views are <code>XMLType</code> views whose resultant XML value is not constrained to be a particular element in a registered XML schema. You can create a non-schema-based <code>XMLType</code> view in either of these ways:</p>
<ul>
<li>
<p>Using SQL/XML publishing functions.</p>
<div align="center">
<div class="inftblinformal"><br />
<table class="cellalignment1031">
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028">
<p class="notep1">See Also:</p>
<a href="xdb13gen.htm#g1047191">Chapter 18, "Generating XML Data from the Database"</a>, for details on SQL/XML publishing functions</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
</li>
<li>
<p>Using object types or object views, together with Oracle SQL function <code>sys_XMLGen</code>. This is convenient when you already have object types, views, and tables that you want to map to XML data.</p>
</li>
<li>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1029425">"Creating XML Schema-Based XMLType Views using Object Types or Object Views"</a></div>
</li>
</ul>
<div id="ADXDB5170" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1275"></a>
<h3 class="sect2">Creating Non-Schema-Based XMLType Views using SQL/XML Publishing Functions</h3>
<p><a href="#i1027167">Example 19-1</a> shows how to create an <code>XMLType</code> view using SQL/XML function <code>XMLELement</code>.</p>
<div id="ADXDB5171" class="example">
<p class="titleinexample"><a id="i1027167"></a>Example 19-1 Creating an XMLType View using XMLELEMENT</p>
<pre>
CREATE OR REPLACE VIEW emp_view OF XMLType
  WITH OBJECT ID (XMLCast(XMLQuery('/Emp/@empno'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT XMLElement("Emp",
                    XMLAttributes(employee_id AS "empno"),
                    XMLForest(e.first_name ||' '|| e.last_name AS "name",
                              e.hire_date AS "hiredate"))
    AS "result" FROM employees e WHERE salary &gt; 15000;

SELECT * FROM emp_view;
 
SYS_NC_ROWINFO$
-------------------------------------------------------------------------------------
&lt;Emp empno="100"&gt;&lt;name&gt;Steven King&lt;/name&gt;&lt;hiredate&gt;2003-06-17&lt;/hiredate&gt;&lt;/Emp&gt; 
&lt;Emp empno="101"&gt;&lt;name&gt;Neena Kochhar&lt;/name&gt;&lt;hiredate&gt;2005-09-21&lt;/hiredate&gt;&lt;/Emp&gt; 
&lt;Emp empno="102"&gt;&lt;name&gt;Lex De Haan&lt;/name&gt;&lt;hiredate&gt;2001-01-13&lt;/hiredate&gt;&lt;/Emp&gt; 
</pre></div>
<!-- class="example" -->
<p>Existing data in relational tables or views can be exposed as XML this way. If a view is generated using a SQL/XML publishing function, then queries that access that view using XPath expressions can often be rewritten. These optimized queries can then directly access the underlying relational columns. See <a href="xdb_rewrite.htm#BABHJECG">Chapter 8, "XPath Rewrite for Structured Storage"</a> for details.</p>
<p>You can perform DML operations on these <code>XMLType</code> views, but, in general, you must write instead-of triggers to handle the DML operation.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB5172" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref1276"></a>
<h3 class="sect2">Creating Non-Schema-Based XMLType Views using Object Types and SYS_XMLGEN</h3>
<p>You can also create an <code>XMLType</code> view using object types and Oracle SQL function <code>sys_XMLGen</code>. Function <code>sys_XMLGen</code> accepts as argument an instance of an object type, and it generates a corresponding instance of <code>XMLType</code>. The query in <a href="#CFHJICHE">Example 19-2</a> uses <code>sys_XMLGen</code> and produces the same result as the query of <a href="#i1027167">Example 19-1</a>.</p>
<div id="ADXDB5173" class="example">
<p class="titleinexample"><a id="CFHJICHE"></a>Example 19-2 Creating an XMLType View using Object Types and SYS_XMLGEN</p>
<pre>
CREATE TYPE emp_t AS OBJECT ("@empno"  NUMBER(6), 
                             fname     VARCHAR2(20),
                             lname     VARCHAR2(25), 
                             hiredate  DATE);
/

CREATE OR REPLACE VIEW employee_view OF XMLType
  WITH OBJECT ID (XMLCast(XMLQuery('/Emp/@empno'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT <span class="bold">sys_XMLGen</span>(<span class="bold">emp_t</span>(e.employee_id, e.first_name, e.last_name, e.hire_date),
                    XMLFormat('EMP'))
    FROM employees e WHERE salary &gt; 15000;
 
SELECT * FROM employee_view;
 
SYS_NC_ROWINFO$
--------------------------------------------------------
&lt;?xml version="1.0"?
&lt;EMP empno="100"&gt; 
  &lt;FNAME&gt;Steven&lt;/FNAME&gt; 
  &lt;LNAME&gt;King&lt;/LNAME&gt; 
  &lt;HIREDATE&gt;17-JUN-03&lt;/HIREDATE&gt; 
&lt;/EMP&gt; 
 
&lt;?xml version="1.0"?&gt; 
&lt;EMP empno="101"&gt; 
  &lt;FNAME&gt;Neena&lt;/FNAME&gt; 
  &lt;LNAME&gt;Kochhar&lt;/LNAME&gt; 
  &lt;HIREDATE&gt;21-SEP-05&lt;/HIREDATE&gt; 
&lt;/EMP&gt; 
 
&lt;?xml version="1.0"?&gt; 
&lt;EMP empno="102"&gt; 
  &lt;FNAME&gt;Lex&lt;/FNAME&gt; 
  &lt;LNAME&gt;De Haan&lt;/LNAME&gt; 
  &lt;HIREDATE&gt;13-JAN-01&lt;/HIREDATE&gt; 
&lt;/EMP&gt; 
</pre></div>
<!-- class="example" -->
<p>Existing relational or object-relational data can be exposed as XML data using this mechanism.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025388"></a>
<div id="ADXDB5174" class="sect1">
<h2 class="sect1">Creating XML Schema-Based XMLType Views</h2>
<p>XML schema-based <code>XMLType</code> views are views whose data is constrained to conform to an XML schema. You can create an XML schema-based <code>XMLType</code> view in either of these ways:</p>
<ul>
<li>
<p>Using SQL/XML publishing functions.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1029370">"Creating XML Schema-Based XMLType Views using SQL/XML Publishing Functions"</a></div>
</li>
<li>
<p>Using object types or object views. This is convenient when you already have object types, views, and tables that you want to map to XML data.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1029425">"Creating XML Schema-Based XMLType Views using Object Types or Object Views"</a></div>
</li>
</ul>
<a id="i1029370"></a>
<div id="ADXDB5175" class="sect2">
<h3 class="sect2">Creating XML Schema-Based XMLType Views using SQL/XML Publishing Functions</h3>
<p>You can use SQL/XML publishing functions to create XML schema-based <code>XMLType</code> views in a similar way as for the non-schema-based case described in section <a href="#i1025384">"Creating Non-Schema-Based XMLType Views"</a>:</p>
<ol>
<li>
<p>Create and register the XML schema document that contains the necessary XML structures. You do not need to annotate the XML schema to define the mapping between XML types and SQL object types.</p>
</li>
<li>
<p>Use SQL/XML publishing functions to create an <code>XMLType</code> view that conforms to the XML schema.</p>
</li>
</ol>
<p>These two steps are illustrated in <a href="#CHDHDHAD">Example 19-3</a> and <a href="#CHDFDJCH">Example 19-4</a>, respectively.</p>
<div id="ADXDB5176" class="example">
<p class="titleinexample"><a id="CHDHDHAD"></a>Example 19-3 Registering XML Schema emp_simple.xsd</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
   SCHEMAURL =&gt; 'http://www.oracle.com/emp_simple.xsd',
   SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                         targetNamespace="http://www.oracle.com/emp_simple.xsd"
                         version="1.0"
                         xmlns:xdb="http://xmlns.oracle.com/xdb" 
                         elementFormDefault="qualified"&gt; 
                   &lt;element name = "Employee"&gt; 
                     &lt;complexType&gt; 
                       &lt;sequence&gt; 
                         &lt;element name = "EmployeeId"
                                  type = "positiveInteger" minOccurs = "0"/&gt; 
                         &lt;element name = "Name"
                                  type = "string" minOccurs = "0"/&gt; 
                         &lt;element name = "Job"
                                  type = "string" minOccurs = "0"/&gt; 
                         &lt;element name = "Manager"
                                  type = "positiveInteger" minOccurs = "0"/&gt; 
                         &lt;element name = "HireDate"
                                  type = "date" minOccurs = "0"/&gt; 
                         &lt;element name = "Salary"
                                  type = "positiveInteger" minOccurs = "0"/&gt; 
                         &lt;element name = "Commission"
                                  type = "positiveInteger" minOccurs = "0"/&gt; 
                         &lt;element name = "Dept"&gt; 
                           &lt;complexType&gt; 
                             &lt;sequence&gt; 
                               &lt;element name = "DeptNo"
                                        type = "positiveInteger" minOccurs = "0"/&gt; 
                               &lt;element name = "DeptName"
                                        type = "string" minOccurs = "0"/&gt; 
                               &lt;element name = "Location"
                                        type = "positiveInteger" minOccurs = "0"/&gt; 
                             &lt;/sequence&gt; 
                           &lt;/complexType&gt; 
                         &lt;/element&gt; 
                       &lt;/sequence&gt; 
                     &lt;/complexType&gt; 
                   &lt;/element&gt; 
                 &lt;/schema&gt;',
   LOCAL     =&gt; TRUE,
   GENTYPES  =&gt; TRUE);
END;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDHDHAD">Example 19-3</a> assumes that you have an XML schema <code>emp_simple.xsd</code> that contains XML structures defining an employee. It registers the XML schema with the target location <code>http://www.oracle.com/emp_simple.xsd</code>.</p>
<p>When using SQL/XML publishing functions to generate XML schema-based content, you must specify the appropriate namespace information for all of the elements and also indicate the location of the schema using attribute <code>xsi:schemaLocation</code>. These can be specified using the <code>XMLAttributes</code> clause. <a href="#CHDFDJCH">Example 19-4</a> illustrates this.</p>
<div id="ADXDB5177" class="example">
<p class="titleinexample"><a id="CHDFDJCH"></a>Example 19-4 Creating an XMLType View using SQL/XML Publishing Functions</p>
<pre>
CREATE OR REPLACE VIEW <span class="bold">emp_simple_xml</span> OF XMLType
  XMLSCHEMA "http://www.oracle.com/<span class=/"/&quot;bold&quot;">emp_simple.xsd</span>" ELEMENT "Employee"
   WITH OBJECT ID (XMLCast(XMLQuery('/Employee/EmployeeId/text()'
                                    PASSING OBJECT_VALUE
                                    RETURNING CONTENT)
                           AS BINARY_DOUBLE)) AS
   SELECT
     XMLElement("Employee",
                XMLAttributes(
                  'http://www.oracle.com/emp_simple.xsd' AS "xmlns" ,
                  'http://www.w3.org/2001/XMLSchema-instance' AS "xmlns:xsi",
                  'http://www.oracle.com/emp_simple.xsd
                   http://www.oracle.com/emp_simple.xsd'
                  AS "xsi:schemaLocation"),
                XMLForest(e.employee_id    AS "EmployeeId",
                          e.last_name      AS "Name",
                          e.job_id         AS "Job",
                          e.manager_id     AS "Manager",
                          e.hire_date      AS "HireDate",
                          e.salary         AS "Salary",
                          e.commission_pct AS "Commission",
                          XMLForest(
                            d.department_id   AS "DeptNo",
                            d.department_name AS "DeptName",
                            d.location_id     AS "Location") AS "Dept"))
     FROM employees e, departments d
     WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDFDJCH">Example 19-4</a>, function <code>XMLElement</code> creates XML element <code>Employee</code>. Function <code>XMLForest</code> creates the children of element <code>Employee</code>. The <code>XMLAttributes</code> clause inside <code>XMLElement</code> constructs the required XML <code>namespace</code> and schema <code>location</code> attributes, so that the XML data that is generated conforms to the XML schema of the view. The innermost call to <code>XMLForest</code> creates the children of element <code>department</code>, which is a child of element <code>Employee</code>.</p>
<p>By default, the XML generation functions create a non-schema-based XML instance. However, when the schema location is specified, using attribute <code>xsi:schemaLocation</code> or <code>xsi:noNamespaceSchemaLocation</code>, Oracle XML&nbsp;DB generates XML schema-based XML data. For <code>XMLType</code> views, as long as the names of the elements and attributes match those in the XML schema, the XML data is converted implicitly into a valid XML schema-based document. Any errors in the generated XML data are caught later, when operations such as validation or extraction operations are performed on the XML instance.</p>
<p><a href="#CHDGIHBA">Example 19-5</a> queries the <code>XMLType</code> view, returning an XML result from tables <code>employees</code> and <code>departments</code>. The result of the query is shown pretty-printed, for clarity.</p>
<div id="ADXDB5178" class="example">
<p class="titleinexample"><a id="CHDGIHBA"></a>Example 19-5 Querying an XMLType View</p>
<pre>
SELECT OBJECT_VALUE AS RESULT FROM emp_simple_xml WHERE ROWNUM &lt; 2;

RESULT
---------------------------------------------------------------------
&lt;Employee xmlns="http://www.oracle.com/emp_simple.xsd"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.oracle.com/emp_simple.xsd 
                              http://www.oracle.com/emp_simple.xsd"&gt;
  &lt;EmployeeId&gt;200&lt;/EmployeeId&gt;
  &lt;Name&gt;Whalen&lt;/Name&gt;
  &lt;Job&gt;AD_ASST&lt;/Job&gt;
  &lt;Manager&gt;101&lt;/Manager&gt;
  &lt;HireDate&gt;2003-09-17&lt;/HireDate&gt;
  &lt;Salary&gt;4400&lt;/Salary&gt;
  &lt;Dept&gt;
    &lt;DeptNo&gt;10&lt;/Deptno&gt;
    &lt;DeptName&gt;Administration&lt;/DeptName&gt;
    &lt;Location&gt;1700&lt;/Location&gt;
  &lt;/Dept&gt;
&lt;/Employee&gt;
</pre></div>
<!-- class="example" -->
<div id="ADXDB5179" class="sect3"><a id="sthref1277"></a>
<h4 class="sect3">Using Namespaces with SQL/XML Publishing Functions</h4>
<p>If you have complex XML schemas involving namespaces, you must use the partially escaped mapping provided by the SQL/XML publishing functions and create elements with appropriate namespaces and prefixes.</p>
<p>The query in <a href="#CFHIIBIH">Example 19-6</a> creates XML instances that have the correct namespace, prefixes, and target schema location. It can be used as the query in the definition of view <code>emp_simple_xml</code>.</p>
<div id="ADXDB5180" class="example">
<p class="titleinexample"><a id="CFHIIBIH"></a>Example 19-6 Using Namespace Prefixes with SQL/XML Publishing Functions</p>
<pre>
SELECT XMLElement("ipo:Employee", 
          XMLAttributes('http://www.oracle.com/emp_simple.xsd' AS "xmlns:ipo", 
                        'http://www.oracle.com/emp_simple.xsd 
                         http://www.oracle.com/emp_simple.xsd' AS "xmlns:xsi"),
            XMLForest(e.employee_id                     AS "ipo:EmployeeId", 
                      e.last_name                       AS "ipo:Name",  
                      e.job_id                          AS "ipo:Job",
                      e.manager_id                      AS "ipo:Manager",
                      TO_CHAR(e.hire_date,'YYYY-MM-DD') AS "ipo:HireDate", 
                      e.salary                          AS "ipo:Salary",
                      e.commission_pct                  AS "ipo:Commission",
                 XMLForest(d.department_id   AS "ipo:DeptNo",
                           d.department_name AS "ipo:DeptName", d.location_id
       AS "ipo:Location") AS "ipo:Dept"))
       FROM employees e, departments d 
       WHERE e.department_id = d.department_id AND d.department_id = 20;
BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema('emp-noname.xsd', 4); 
END;
</pre>
<pre>
XMLELEMENT("IPO:EMPLOYEE",XMLATTRIBUTES('HTTP://WWW.ORACLE.COM/EMP_SIMPLE.XSD'AS
--------------------------------------------------------------------------------
&lt;ipo:Employee
xmlns:ipo="http://www.oracle.com/emp_simple.xsd"
 xmlns:xsi="http://www.oracle.com/emp_simple.xsd
 http://www.oracle.com/emp_simple.xsd"&gt;
&lt;ipo:EmployeeId&gt;201&lt;/ipo:EmployeeId&gt;&lt;ipo:Name&gt;Hartstein&lt;/ipo:Name&gt;
&lt;ipo:Job&gt;MK_MAN&lt;/ipo:Job&gt;&lt;ipo:Manager&gt;100&lt;/ipo:Manager&gt;
&lt;ipo:HireDate&gt;2004-02-17&lt;/ipo:HireDate&gt;&lt;ipo:Salary&gt;13000&lt;/ipo:Salary&gt;
&lt;ipo:Dept&gt;&lt;ipo:DeptNo&gt;20&lt;/ipo:DeptNo&gt;&lt;ipo:DeptName&gt;Marketing&lt;/ipo:DeptName&gt;
&lt;ipo:Location&gt;1800&lt;/ipo:Location&gt;&lt;/ipo:Dept&gt;&lt;/ipo:Employee&gt;
&lt;ipo:Employee xmlns:ipo="http://www.oracle.com/emp_simple.xsd"
 xmlns:xsi="http://www.oracle.com/emp_simple.xsd 
 http://www.oracle.com/emp_simple.xsd"&gt;&lt;ipo:EmployeeId&gt;202&lt;/ipo:EmployeeId&gt;
&lt;ipo:Name&gt;Fay&lt;/ipo:Name&gt;&lt;ipo:Job&gt;MK_REP&lt;/ipo:Job&gt;&lt;ipo:Manager&gt;201&lt;/ipo:Manager&gt;
&lt;ipo:HireDate&gt;2005-08-17&lt;/ipo:HireDate&gt;&lt;ipo:Salary&gt;6000&lt;/ipo:Salary&gt;
&lt;ipo:Dept&gt;&lt;ipo:DeptNo&gt;20&lt;/ipo:Dept
No&gt;&lt;ipo:DeptName&gt;Marketing&lt;/ipo:DeptName&gt;&lt;ipo:Location&gt;1800&lt;/ipo:Location&gt;
&lt;/ipo:Dept&gt;
&lt;/ipo:Employee&gt;
</pre></div>
<!-- class="example" -->
<p>If the XML schema had no target namespace, then you could use attribute <code><a id="sthref1278"></a><a id="sthref1279"></a><a id="sthref1280"></a>xsi:noNamespaceSchemaLocation</code> to indicate that. <a href="#CFHGDFAH">Example 19-7</a> shows such an XML schema.</p>
<div id="ADXDB5897" class="example">
<p class="titleinexample"><a id="CFHGDFAH"></a>Example 19-7 XML Schema with No Target Namespace</p>
<pre>
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; '<span class="bold">emp-noname.xsd</span>',
    SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                          xmlns:xdb="http://xmlns.oracle.com/xdb"&gt; 
                    &lt;element name = "Employee"&gt; 
                      &lt;complexType&gt; 
                        &lt;sequence&gt; 
                          &lt;element name = "EmployeeId" type = "positiveInteger"/&gt; 
                          &lt;element name = "Name" type = "string"/&gt; 
                          &lt;element name = "Job" type = "string"/&gt; 
                          &lt;element name = "Manager" type = "positiveInteger"/&gt; 
                          &lt;element name = "HireDate" type = "date"/&gt; 
                          &lt;element name = "Salary" type = "positiveInteger"/&gt; 
                          &lt;element name = "Commission" type = "positiveInteger"/&gt; 
                          &lt;element name = "Dept"&gt; 
                            &lt;complexType&gt; 
                              &lt;sequence&gt; 
                                &lt;element name = "DeptNo" type = "positiveInteger" /&gt; 
                                &lt;element name = "DeptName" type = "string"/&gt; 
                                &lt;element name = "Location" type = "positiveInteger"/&gt; 
                              &lt;/sequence&gt; 
                            &lt;/complexType&gt; 
                          &lt;/element&gt; 
                        &lt;/sequence&gt; 
                      &lt;/complexType&gt; 
                    &lt;/element&gt; 
                  &lt;/schema&gt;',
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; TRUE);
END;
</pre></div>
<!-- class="example" -->
<p><a href="#CFHEICEA">Example 19-8</a> creates a view that conforms to the XML schema in <a href="#CFHGDFAH">Example 19-7</a>. The <code>XMLAttributes</code> clause creates an XML element that contains the <code>noNamespace</code> schema location attribute.</p>
<div id="ADXDB5898" class="example">
<p class="titleinexample"><a id="CFHEICEA"></a>Example 19-8 Creating a View for an XML Schema with No Target Namespace</p>
<pre>
CREATE OR REPLACE VIEW <span class="bold">emp_xml</span> OF XMLType
     XMLSCHEMA "emp-noname.xsd" ELEMENT "Employee"
     WITH OBJECT ID (XMLCast(XMLQuery('/Employee/EmployeeId/text()'
                                      PASSING OBJECT_VALUE
                                      RETURNING CONTENT)
                             AS BINARY_DOUBLE)) AS
     SELECT XMLElement(
       "Employee",
       XMLAttributes('http://www.w3.org/2001/XMLSchema-instance' AS "xmlns:xsi",
                     'emp-noname.xsd' AS "<span class="bold">xsi:noNamespaceSchemaLocation</span>"),
       XMLForest(e.employee_id    AS "EmployeeId",
                 e.last_name      AS "Name",
                 e.job_id         AS "Job",
                 e.manager_id     AS "Manager",
                 e.hire_date      AS "HireDate",
                 e.salary         AS "Salary",
                 e.commission_pct AS "Commission",
                 XMLForest(d.department_id   AS "DeptNo",
                           d.department_name AS "DeptName",
                           d.location_id     AS "Location") AS "Dept"))
       FROM employees e, departments d
       WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" -->
<p><a href="#CFHIBCBF">Example 19-9</a> creates view <code>dept_xml</code>, which conforms to XML schema <code>dept.xsd</code>.</p>
<div id="ADXDB5181" class="example">
<p class="titleinexample"><a id="CFHIBCBF"></a>Example 19-9 Using SQL/XML Functions in XML Schema-Based XMLType Views</p>
<pre>
BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema('http://www.oracle.com/dept.xsd', 4);
END;
/

BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/<span class=/"/&quot;bold&quot;">dept.xsd</span>',
    SCHEMADOC =&gt; '&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
                          targetNamespace="http://www.oracle.com/dept.xsd"
                          version="1.0" 
                          xmlns:xdb="http://xmlns.oracle.com/xdb"
                          elementFormDefault="qualified"&gt; 
                    &lt;element name = "Department"&gt; 
                      &lt;complexType&gt; 
                        &lt;sequence&gt; 
                          &lt;element name = "DeptNo" type = "positiveInteger"/&gt; 
                          &lt;element name = "DeptName" type = "string"/&gt; 
                          &lt;element name = "Location" type = "positiveInteger"/&gt; 
                          &lt;element name = "Employee" maxOccurs = "unbounded"&gt; 
                            &lt;complexType&gt; 
                              &lt;sequence&gt; 
                                &lt;element name = "EmployeeId" type = "positiveInteger"/&gt; 
                                &lt;element name = "Name" type = "string"/&gt; 
                                &lt;element name = "Job" type = "string"/&gt; 
                                &lt;element name = "Manager" type = "positiveInteger"/&gt; 
                                &lt;element name = "HireDate" type = "date"/&gt; 
                                &lt;element name = "Salary" type = "positiveInteger"/&gt; 
                                &lt;element name = "Commission" type = "positiveInteger"/&gt; 
                             &lt;/sequence&gt; 
                            &lt;/complexType&gt; 
                          &lt;/element&gt; 
                        &lt;/sequence&gt; 
                      &lt;/complexType&gt; 
                    &lt;/element&gt; 
                  &lt;/schema&gt;',
    LOCAL     =&gt; TRUE,
    GENTYPES  =&gt; FALSE);
  END;
/

CREATE OR REPLACE VIEW <span class="bold">dept_xml</span> OF XMLType
  XMLSCHEMA "http://www.oracle.com/dept.xsd" ELEMENT "Department"
  WITH OBJECT ID (XMLCast(XMLQuery('/Department/DeptNo'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT XMLElement(
    "Department",
    XMLAttributes(
      'http://www.oracle.com/emp.xsd' AS "xmlns" ,
      'http://www.w3.org/2001/XMLSchema-instance' AS "xmlns:xsi",
      'http://www.oracle.com/dept.xsd
       http://www.oracle.com/dept.xsd' AS "xsi:schemaLocation"),
    XMLForest(d.department_id "DeptNo",
              d.department_name "DeptName",
              d.location_id "Location"),
    (SELECT XMLagg(
              XMLElement("Employee",
                         XMLForest(
                           e.employee_id  "EmployeeId",
                           e.last_name "Name",
                           e.job_id "Job",
                           e.manager_id "Manager",
                           to_char(e.hire_date,'YYYY-MM-DD') "Hiredate",
                           e.salary "Salary",
                           e.commission_pct "Commission")))
       FROM employees e
       WHERE e.department_id = d.department_id))
     FROM departments d;
</pre>
<p>This is the <code>XMLType</code> instance that results:</p>
<pre>
SELECT OBJECT_VALUE AS result FROM dept_xml WHERE ROWNUM &lt; 2;

RESULT
----------------------------------------------------------------
&lt;Department
    xmlns="http://www.oracle.com/emp.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.oracle.com/dept.xsd 
                        http://www.oracle.com/dept.xsd"&gt;
  &lt;DeptNo&gt;10&lt;/DeptNo&gt;
  &lt;DeptName&gt;Administration&lt;/DeptName&gt;
  &lt;Location&gt;1700&lt;/Location&gt;
  &lt;Employee&gt;
    &lt;EmployeeId&gt;200&lt;/EmployeeId&gt;
    &lt;Name&gt;Whalen&lt;/Name&gt;
    &lt;Job&gt;AD_ASST&lt;/Job&gt;
    &lt;Manager&gt;101&lt;/Manager&gt;
    &lt;Hiredate&gt;2003-09-17&lt;/Hiredate&gt;
    &lt;Salary&gt;4400&lt;/Salary&gt;
  &lt;/Employee&gt;
&lt;/Department&gt; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1029425"></a>
<div id="ADXDB5182" class="sect2">
<h3 class="sect2">Creating XML Schema-Based XMLType Views using Object Types or Object Views</h3>
<p>To create an XML schema-based <code>XMLType</code> view from object types or object views, do the following:</p>
<ol>
<li>
<p>Create the object types, if they do not yet exist.</p>
</li>
<li>
<p>Create and then register the XML schema, annotating it to define the mapping between XML types and SQL object types and attributes.</p>
<p>You can annotate the XML schema <span class="italic">before</span> registering it. You typically do this when you wrap existing data to create an <code>XMLType</code> view.</p>
<div class="infoboxnotealso">
<p class="notep1">See:</p>
<a href="xdb05sto.htm#g1070409">Chapter 7, "XML Schema Storage and Query: Basic"</a></div>
<p>You can use PL/SQL functions <code>DBMS_XMLSchema.generateSchema</code> and <code>DBMS_XMLSchema.generateSchemas</code> to generate the default XML mapping for specified object types. The generated XML schema has the requisite annotations <code>SQLType</code>, <code>SQLSchema</code>, and so on. When such an XML schema document is registered, the following validation can occur:</p>
<ul>
<li>
<p><code>SQLType</code> for attributes or elements based on <code>simpleType</code>. The SQL type must be compatible with the XML type of the corresponding <code>XMLType</code> data. For example, an XML <code>string</code> data type can be mapped only to a <code>VARCHAR2</code> or a Large Object (LOB) data type.</p>
</li>
<li>
<p><code>SQLType</code> specified for elements based on <code>complexType</code>. This is either a LOB or an object type whose structure must be compatible with the declaration of the <code>complexType</code>, that is, the object type must have the correct number of attributes with the correct data types.</p>
</li>
</ul>
</li>
<li>
<p>Create the <code>XMLType</code> view, specifying the XML schema URL and the root element name. The query defining the view first constructs the object instances and then converts them to XML.</p>
<ol>
<li>
<p>Create an object view.</p>
</li>
<li>
<p>Create an <code>XMLType</code> view over the object view.</p>
</li>
</ol>
</li>
</ol>
<p>The following sections present examples of creating XML schema-based <code>XMLType</code> views using object types or object views. They are based on relational tables that contain employee and department data.</p>
<ul>
<li>
<p><a href="#CHDDBAGJ">"Creating XMLType Employee View, with Nested Department Information"</a></p>
</li>
<li>
<p><a href="#CHDCEGDB">"Creating XMLType Department View, with Nested Employee Information"</a></p>
</li>
</ul>
<p>The same relational data is used to create each of two <code>XMLType</code> views. In the employee view, <code>emp_xml</code>, the XML document describes an employee, with the employee's department as nested information. In the department view, <code>dept_xml</code>, the XML data describes a department, with the department's employees as nested information.</p>
<a id="CHDDBAGJ"></a>
<div id="ADXDB5183" class="sect3">
<h4 class="sect3">Creating XMLType Employee View, with Nested Department Information</h4>
<p>This section describes how to create <code>XMLType</code> view <code>emp_xml</code> based on object views. For the last step, there are two <span class="italic">alternatives</span>:</p>
<ul>
<li>
<p><a href="#CFHCIHDB">"Step 3a. Create XMLType View emp_xml using Object Type emp_t"</a> &ndash; create <code>XMLType</code> view <code>emp_xml</code> using object type <code>emp_t</code></p>
</li>
<li>
<p><a href="#CFHDHDBH">"Step 3b. Create XMLType View emp_xml using Object View emp_v"</a> &ndash; create <code>XMLType</code> view <code>emp_xml</code> using object view <code>emp_v</code></p>
</li>
</ul>
<a id="CHDFJHGG"></a>
<div id="ADXDB5184" class="sect4">
<h5 class="sect4">Step 1. Create Object Types</h5>
<p><a href="#CHDEBBJC">Example 19-10</a> creates the object types used in the other steps.</p>
<div id="ADXDB5185" class="example">
<p class="titleinexample"><a id="CHDEBBJC"></a>Example 19-10 Creating Object Types for Schema-Based XMLType Views</p>
<pre>
CREATE TYPE dept_t AS OBJECT 
      (deptno NUMBER(4), 
       dname  VARCHAR2(30), 
       loc    NUMBER(4)); 
/ 

CREATE TYPE emp_t AS OBJECT 
      (empno     NUMBER(6), 
       ename     VARCHAR2(25), 
       job       VARCHAR2(10), 
       mgr       NUMBER(6), 
       hiredate  DATE, 
       sal       NUMBER(8,2), 
       comm      NUMBER(2,2), 
       dept      dept_t); 
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<div id="ADXDB5186" class="sect4"><a id="sthref1281"></a>
<h5 class="sect4">Step 2. Create and Register XML Schema emp_complex.xsd</h5>
<p>You can create an XML schema manually, or you can use package <code>DBMS_XMLSCHEMA</code> to generate an XML schema automatically from existing object types, as shown in <a href="#CHDFHFFJ">Example 19-11</a>.</p>
<div id="ADXDB5187" class="example">
<p class="titleinexample"><a id="CHDFHFFJ"></a>Example 19-11 Generating an XML Schema with DBMS_XMLSCHEMA.GENERATESCHEMA</p>
<pre>
SELECT DBMS_XMLSCHEMA.generateSchema('HR','EMP_T') AS result FROM DUAL;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFHFFJ">Example 19-11</a> generates the XML schema for type <code>emp_t</code>. You can supply various arguments to PL/SQL function <code>DBMS_XMLSCHEMA.generateSchemas</code>, to add namespaces, and so on. You can also edit the XML schema to change the default mappings that are generated. Function <code>generateSchemas</code> generates a list of XML schemas, one for each SQL database schema that is referenced by the object type and its object attributes.</p>
<p><a href="#CHDFDHFI">Example 19-12</a> shows how to register XML schema <code>emp_complex.xsd</code>, which specifies how XML elements and attributes are mapped to corresponding object attributes in the object types (the <code>xdb:SQLType</code> annotations).</p>
<div id="ADXDB5189" class="example">
<p class="titleinexample"><a id="CHDFDHFI"></a>Example 19-12 Registering XML Schema emp_complex.xsd</p>
<pre>
BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema('http://www.oracle.com/emp_complex.xsd', 4);
END;
/

COMMIT;
 
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/emp_complex.xsd', 
    SCHEMADOC =&gt; '&lt;?xml version="1.0"?&gt;
                  &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                              xmlns:xdb="http://xmlns.oracle.com/xdb" 
                              xsi:schemaLocation="http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd"&gt;
                    &lt;xsd:element name="<span class="bold">Employee</span>" type="EMP_TType" xdb:SQLType="EMP_T" 
                                 xdb:SQLSchema="HR"/&gt;
                    &lt;xsd:complexType name="EMP_TType" xdb:SQLType="<span class="bold">EMP_T</span>" xdb:SQLSchema="HR" 
                                     xdb:maintainDOM="false"&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name="EMPNO" type="xsd:double" xdb:SQLName="EMPNO" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="ENAME" xdb:SQLName="ENAME" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="25"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="JOB" xdb:SQLName="JOB" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="10"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="MGR" type="xsd:double" xdb:SQLName="MGR" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="HIREDATE" type="xsd:date" xdb:SQLName="HIREDATE" 
                                     xdb:SQLType="DATE"/&gt;
                        &lt;xsd:element name="SAL" type="xsd:double" xdb:SQLName="SAL" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="COMM" type="xsd:double" xdb:SQLName="COMM" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="<span class="bold">DEPT</span>" type="DEPT_TType" xdb:SQLName="DEPT" 
                                     xdb:SQLSchema="HR" xdb:SQLType="DEPT_T"/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                    &lt;xsd:complexType name="DEPT_TType" xdb:SQLType="<span class="bold">DEPT_T</span>" xdb:SQLSchema="HR"
                                     xdb:maintainDOM="false"&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name="DEPTNO" type="xsd:double" xdb:SQLName="DEPTNO" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="DNAME" xdb:SQLName="DNAME" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="30"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                       &lt;xsd:element name="LOC" type="xsd:double" xdb:SQLName="LOC" 
                                    xdb:SQLType="NUMBER"/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;', 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFDHFI">Example 19-12</a> registers the XML schema using the target location <code>http://www.oracle.com/emp_complex.xsd</code>.</p>
</div>
<!-- class="sect4" -->
<a id="CFHCIHDB"></a>
<div id="ADXDB5190" class="sect4">
<h5 class="sect4">Step 3a. Create XMLType View emp_xml using Object Type emp_t</h5>
<p><a href="#CHDJAGIC">Example 19-13</a> creates an <code>XMLType</code> view using object type <code>emp_t</code>.</p>
<div id="ADXDB5191" class="example">
<p class="titleinexample"><a id="CHDJAGIC"></a>Example 19-13 Creating XMLType View emp_xml</p>
<pre>
CREATE OR REPLACE VIEW emp_xml OF XMLType 
  XMLSCHEMA "http://www.oracle.com/emp_complex.xsd"
  ELEMENT "Employee" 
    WITH OBJECT ID (XMLCast(XMLQuery('/Employee/EMPNO'
                                     PASSING OBJECT_VALUE RETURNING CONTENT)
                            AS BINARY_DOUBLE)) AS 
  SELECT emp_t(e.employee_id, e.last_name, e.job_id, e.manager_id, e.hire_date, 
               e.salary, e.commission_pct,
               dept_t(d.department_id, d.department_name, d.location_id)) 
    FROM <span class="bold">employees</span> e, <span class="bold">departments</span> d 
    WHERE e.department_id = d.department_id;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDJAGIC">Example 19-13</a> uses SQL/XML function <code>XMLCast</code> in the <code>OBJECT ID</code> clause to convert the XML employee number to SQL data type <code>BINARY_DOUBLE</code>.</p>
</div>
<!-- class="sect4" -->
<a id="CFHDHDBH"></a>
<div id="ADXDB5192" class="sect4">
<h5 class="sect4">Step 3b. Create XMLType View emp_xml using Object View emp_v</h5>
<p><a href="#CHDEAFJH">Example 19-14</a> creates an <code>XMLType</code> view based on an object view.</p>
<div id="ADXDB5193" class="example">
<p class="titleinexample"><a id="CHDEAFJH"></a>Example 19-14 Creating an Object View and an XMLType View on the Object View</p>
<pre>
CREATE OR REPLACE VIEW <span class="bold">emp_v</span> OF emp_t WITH OBJECT ID (empno) AS 
  SELECT emp_t(e.employee_id, e.last_name, e.job_id, e.manager_id, e.hire_date,
               e.salary, e.commission_pct,
               dept_t(d.department_id, d.department_name, d.location_id)) 
    FROM employees e, departments d 
    WHERE e.department_id = d.department_id;
 
CREATE OR REPLACE VIEW emp_xml OF XMLType 
  XMLSCHEMA "http://www.oracle.com/emp_complex.xsd" ELEMENT "Employee"
  WITH OBJECT ID DEFAULT AS
  SELECT VALUE(p) FROM <span class="bold">emp_v</span> p;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDCEGDB"></a>
<div id="ADXDB5194" class="sect3">
<h4 class="sect3">Creating XMLType Department View, with Nested Employee Information</h4>
<p>This section describes how to create <code>XMLType</code> view <code>dept_xml</code>. Each department in this view contains nested employee information. For the last step, there are two <span class="italic">alternatives</span>:</p>
<ul>
<li>
<p><a href="#CFHFJDBD">"Step 3a. Create XMLType View dept_xml using Object Type dept_t"</a> &ndash; create <code>XMLType</code> view <code>dept_xml</code> using the object type for a department, <code>dept_t</code></p>
</li>
<li>
<p><a href="#CFHCEFFB">"Step 3b. Create XMLType View dept_xml using Relational Data Directly"</a> &ndash; create <code>XMLType</code> view <code>dept_xml</code> using relational data directly</p>
</li>
</ul>
<div id="ADXDB5195" class="sect4"><a id="sthref1282"></a>
<h5 class="sect4">Step 1. Create Object Types</h5>
<p><a href="#CHDFHJCJ">Example 19-15</a> creates the object types used in the other steps.</p>
<div id="ADXDB5196" class="example">
<p class="titleinexample"><a id="CHDFHJCJ"></a>Example 19-15 Creating Object Types</p>
<pre>
CREATE TYPE emp_t AS OBJECT (empno    NUMBER(6),
                             ename    VARCHAR2(25), 
                             job      VARCHAR2(10), 
                             mgr      NUMBER(6), 
                             hiredate DATE, 
                             sal      NUMBER(8,2), 
                             comm     NUMBER(2,2)); /

CREATE OR REPLACE TYPE emplist_t AS TABLE OF emp_t; 
/

CREATE TYPE dept_t AS OBJECT (deptno NUMBER(4),
                              dname  VARCHAR2(30), 
                              loc    NUMBER(4),
                              emps   emplist_t); 
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<div id="ADXDB5197" class="sect4"><a id="sthref1283"></a>
<h5 class="sect4">Step 2. Register XML Schema dept_complex.xsd</h5>
<p>You can either use a pre-existing XML schema or generate an XML schema from the object type with function <code>DBMS_XMLSCHEMA.generateSchema</code> or <code>DBMS_XMLSCHEMA.generateSchemas</code> (see <a href="#CHDFHFFJ">Example 19-11</a>). <a href="#CHDJDCGF">Example 19-16</a> registers the XML schema <code>dept_complex.xsd</code>.</p>
<div id="ADXDB5198" class="example">
<p class="titleinexample"><a id="CHDJDCGF"></a>Example 19-16 Registering XML Schema dept_complex.xsd</p>
<pre>
BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema('http://www.oracle.com/dept_complex.xsd', 4);
END;
/

BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/dept_complex.xsd',
    SCHEMADOC =&gt; '&lt;?xml version="1.0"?&gt;
                  &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                              xmlns:xdb="http://xmlns.oracle.com/xdb"            
                              xsi:schemaLocation="http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd"&gt;
                    &lt;xsd:element name="<span class="bold">Department</span>" type="DEPT_TType" xdb:SQLType="<span class="bold">DEPT_T</span>"  
                                 xdb:SQLSchema="HR"/&gt;
                    &lt;xsd:complexType name="DEPT_TType" xdb:SQLType="<span class="bold">DEPT_T</span>" xdb:SQLSchema="HR" 
                                     xdb:maintainDOM="false"&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name="DEPTNO" type="xsd:double" xdb:SQLName="DEPTNO" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="DNAME" xdb:SQLName="DNAME" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="30"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="LOC" type="xsd:double" xdb:SQLName="LOC" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="<span class="bold">EMPS</span>" type="EMP_TType" maxOccurs="unbounded" 
                                     minOccurs="0" xdb:SQLName="EMPS" 
                                     xdb:SQLCollType="EMPLIST_T" xdb:SQLType="<span class="bold">EMP_T</span>"  
                                     xdb:SQLSchema="HR" xdb:SQLCollSchema="HR"/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                    &lt;xsd:complexType name="EMP_TType" xdb:SQLType="<span class="bold">EMP_T</span>" xdb:SQLSchema="HR"
                                     xdb:maintainDOM="false"&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name="EMPNO" type="xsd:double" xdb:SQLName="EMPNO" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="ENAME" xdb:SQLName="ENAME" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="25"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="JOB" xdb:SQLName="JOB" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="10"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="MGR" type="xsd:double" xdb:SQLName="MGR" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="HIREDATE" type="xsd:date" xdb:SQLName="HIREDATE" 
                                     xdb:SQLType="DATE"/&gt;
                        &lt;xsd:element name="SAL" type="xsd:double" xdb:SQLName="SAL" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="COMM" type="xsd:double" xdb:SQLName="COMM"   
                                     xdb:SQLType="NUMBER"/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;', 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<a id="CFHFJDBD"></a>
<div id="ADXDB5199" class="sect4">
<h5 class="sect4">Step 3a. Create XMLType View dept_xml using Object Type dept_t</h5>
<p><a href="#CHDBHBCH">Example 19-17</a> creates <code>XMLType</code> view <code>dept_xml</code> using object type <code>dept_t</code>.</p>
<div id="ADXDB5200" class="example">
<p class="titleinexample"><a id="CHDBHBCH"></a>Example 19-17 Creating XMLType View dept_xml using Object Type dept_t</p>
<pre>
CREATE OR REPLACE VIEW dept_xml OF XMLType
  XMLSCHEMA "http://www.oracle.com/dept_complex.xsd" ELEMENT "Department"
  WITH OBJECT ID (XMLCast(XMLQuery('/Department/DEPTNO'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT <span class="bold">dept_t</span>(d.department_id, d.department_name, d.location_id,
                cast(MULTISET
                     (SELECT emp_t(e.employee_id, e.last_name, e.job_id,
                                   e.manager_id, e.hire_date,
                                   e.salary, e.commission_pct) 
                        FROM employees e WHERE e.department_id = d.department_id) 
                     AS emplist_t))
    FROM departments d;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<a id="CFHCEFFB"></a>
<div id="ADXDB5201" class="sect4">
<h5 class="sect4">Step 3b. Create XMLType View dept_xml using Relational Data Directly</h5>
<p>Alternatively, you can use SQL/XML publishing functions to create <code>XMLType</code> view <code>dept_xml</code> from the relational tables without using object type <code>dept_t</code>. <a href="#CHDEHIFF">Example 19-18</a> illustrates this.</p>
<div id="ADXDB5202" class="example">
<p class="titleinexample"><a id="CHDEHIFF"></a>Example 19-18 Creating XMLType View dept_xml using Relational Data Directly</p>
<pre>
CREATE OR REPLACE VIEW dept_xml OF XMLType
  XMLSCHEMA "http://www.oracle.com/dept_complex.xsd" ELEMENT "Department"
  WITH OBJECT ID (XMLCast(XMLQuery('/Department/DEPTNO'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT  
    XMLElement(
      "Department",
      XMLAttributes('http://www.oracle.com/dept_complex.xsd' AS "xmlns",        
                    'http://www.w3.org/2001/XMLSchema-instance' AS "xmlns:xsi",
                    'http://www.oracle.com/dept_complex.xsd 
                     http://www.oracle.com/dept_complex.xsd' 
                      AS "xsi:schemaLocation"),
      XMLForest(d.department_id "DeptNo", d.department_name "DeptName",
                d.location_id "Location"),
      (SELECT XMLAgg(XMLElement("Employee",
                                XMLForest(e.employee_id "EmployeeId", 
                                          e.last_name "Name", 
                                          e.job_id "Job", 
                                          e.manager_id "Manager", 
                                          e.hire_date "Hiredate",
                                          e.salary "Salary",
                                          e.commission_pct "Commission")))
                      FROM employees e WHERE e.department_id = d.department_id))
    FROM departments d;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
XML schema and element information must be specified at the view level, because the <code>SELECT</code> list could arbitrarily construct XML of a different XML schema from the underlying table.</div>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1025645"></a>
<div id="ADXDB5203" class="sect1">
<h2 class="sect1">Creating XMLType Views from XMLType Tables</h2>
<p>An <code>XMLType</code> view can be created on an <code>XMLType</code> table, for example, to transform the XML data or to restrict the rows returned.</p>
<p><a href="#CFHJBHJI">Example 19-19</a> creates an <code>XMLType</code> view by restricting the rows included from an underlying <code>XMLType</code> table. It uses XML schema <code>dept_complex.xsd</code> to create the underlying table&thinsp;&mdash;&thinsp;see <a href="#CHDCEGDB">"Creating XMLType Department View, with Nested Employee Information"</a>.</p>
<div id="ADXDB5204" class="example">
<p class="titleinexample"><a id="CFHJBHJI"></a>Example 19-19 Creating an XMLType View by Restricting Rows from an XMLType Table</p>
<pre>
CREATE TABLE dept_xml_tab OF XMLType 
    XMLSchema "http://www.oracle.com/dept_complex.xsd" ELEMENT "Department"
    NESTED TABLE XMLDATA."EMPS" STORE AS dept_xml_tab_tab1;
 
CREATE OR REPLACE VIEW dallas_dept_view OF XMLType 
    XMLSchema "http://www.oracle.com/dept.xsd" ELEMENT "Department"
        AS SELECT OBJECT_VALUE FROM dept_xml_tab 
           WHERE XMLCast(XMLQuery('/Department/LOC'
                                  PASSING OBJECT_VALUE RETURNING CONTENT)
                         AS VARCHAR2(20))
                 = 'DALLAS'; 

CREATE OR REPLACE VIEW dallas_dept_view OF XMLType 
</pre>
<p>Here, <code>dallas_dept_view</code> restricts the <code>XMLType</code> table rows to those departments whose location is Dallas.</p>
</div>
<!-- class="example" -->
<p><a href="#CHDIIIAG">Example 19-20</a> shows how you can create an <code>XMLType</code> view by transforming XML data using a style sheet.</p>
<div id="ADXDB5205" class="example">
<p class="titleinexample"><a id="CHDIIIAG"></a>Example 19-20 Creating an XMLType View by Transforming an XMLType Table</p>
<pre>
CREATE OR REPLACE VIEW hr_po_tab OF XMLType 
  ELEMENT "PurchaseOrder" WITH OBJECT ID DEFAULT AS
  SELECT XMLtransform(OBJECT_VALUE, x.col1)
    FROM purchaseorder p, xsl_tab x;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1025598"></a>
<div id="ADXDB5206" class="sect1">
<h2 class="sect1">Referencing XMLType View Objects using SQL Function REF</h2>
<p>You can reference an <code>XMLType</code> view object using SQL function <code>ref</code>:</p>
<pre>
SELECT ref(d) FROM dept_xml_tab d;
</pre>
<p>An <code>XMLType</code> view reference is based on one of the following object IDs:</p>
<ul>
<li>
<p>System-generated OID &mdash; for views on <code>XMLType</code> tables or object views</p>
</li>
<li>
<p>Primary key based OID -- for views with <code>OBJECT ID</code> expressions</p>
</li>
</ul>
<p>These <code>REF</code>s can be used to fetch <code>OCIXMLType</code> instances in the OCI Object cache, or they can be used in SQL queries. These <code>REF</code>s act the same as <code>REF</code>s to object views.</p>
</div>
<!-- class="sect1" -->
<a id="i1025398"></a>
<div id="ADXDB5207" class="sect1">
<h2 class="sect1">DML (Data Manipulation Language) on XMLType Views</h2>
<p>A given <code>XMLType</code> view might not be implicitly updatable. In that case you must write <code>INSTEAD-OF TRIGGERS</code> to handle all data manipulation (DML). One way to determine whether a given <code>XMLType</code> view is implicitly updatable is to query the view to see whether it is based on an object view or an object constructor that is itself inherently updatable. <a href="#CFHBIHCF">Example 19-21</a> illustrates this.</p>
<div id="ADXDB5208" class="example">
<p class="titleinexample"><a id="CFHBIHCF"></a>Example 19-21 Determining Whether an XMLType View is Implicitly Updatable</p>
<pre>
CREATE TYPE dept_t AS OBJECT 
      (deptno NUMBER(4), 
       dname  VARCHAR2(30), 
       loc    NUMBER(4)); 
/

BEGIN
  -- Delete schema if it already exists (else error)
  DBMS_XMLSCHEMA.deleteSchema('http://www.oracle.com/dept.xsd', 4);
END;
/
COMMIT;
 
BEGIN
  DBMS_XMLSCHEMA.registerSchema(
    SCHEMAURL =&gt; 'http://www.oracle.com/dept_t.xsd',
    SCHEMADOC =&gt; '&lt;?xml version="1.0"?&gt;
                  &lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                              xmlns:xdb="http://xmlns.oracle.com/xdb" 
                              xsi:schemaLocation="http://xmlns.oracle.com/xdb 
                                                  http://xmlns.oracle.com/xdb/XDBSchema.xsd"&gt;
                    &lt;xsd:element name="Department" type="DEPT_TType" xdb:SQLType="DEPT_T" 
                                 xdb:SQLSchema="HR"/&gt;
                    &lt;xsd:complexType name="DEPT_TType" xdb:SQLType="DEPT_T" xdb:SQLSchema="HR" 
                                     xdb:maintainDOM="false"&gt;
                      &lt;xsd:sequence&gt;
                        &lt;xsd:element name="DEPTNO" type="xsd:double" xdb:SQLName="DEPTNO" 
                                     xdb:SQLType="NUMBER"/&gt;
                        &lt;xsd:element name="DNAME" xdb:SQLName="DNAME" xdb:SQLType="VARCHAR2"&gt;
                          &lt;xsd:simpleType&gt;
                            &lt;xsd:restriction base="xsd:string"&gt;
                              &lt;xsd:maxLength value="30"/&gt;
                            &lt;/xsd:restriction&gt;
                          &lt;/xsd:simpleType&gt;
                        &lt;/xsd:element&gt;
                        &lt;xsd:element name="LOC" type="xsd:double" xdb:SQLName="LOC" 
                                     xdb:SQLType="NUMBER"/&gt;
                      &lt;/xsd:sequence&gt;
                    &lt;/xsd:complexType&gt;
                  &lt;/xsd:schema&gt;', 
    LOCAL     =&gt; TRUE, 
    GENTYPES  =&gt; FALSE);
END;
/

CREATE OR REPLACE VIEW dept_xml of XMLType
  XMLSchema "http://www.oracle.com/dept_t.xsd" element "Department"
  WITH OBJECT ID (XMLCast(XMLQuery('/Department/DEPTNO'
                                   PASSING OBJECT_VALUE RETURNING CONTENT)
                          AS BINARY_DOUBLE)) AS
  SELECT dept_t(d.department_id, d.department_name, d.location_id) 
    FROM departments d;

INSERT INTO dept_xml 
  VALUES (
    XMLType.createXML(
      '&lt;Department 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:noNamespaceSchemaLocation="http://www.oracle.com/dept_t.xsd" &gt;
         &lt;DEPTNO&gt;300&lt;/DEPTNO&gt;
         &lt;DNAME&gt;Processing&lt;/DNAME&gt;
         &lt;LOC&gt;1700&lt;/LOC&gt;
       &lt;/Department&gt;'));

UPDATE dept_xml d 
 SET d.OBJECT_VALUE = updateXML(d.OBJECT_VALUE, '/Department/DNAME/text()',  
                                'Shipping')
   WHERE XMLExists('/Department[DEPTNO=300]' PASSING OBJECT_VALUE);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb13gen.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb15dbu.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
