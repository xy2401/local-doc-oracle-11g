<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XPath Rewrite for Structured Storage</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 748" />
<meta name="description" content="This manual describes Oracle XML&nbsp;DB. It includes guidelines and examples for storing, generating, accessing, searching, validating, transforming, evolving, and indexing XML data in Oracle Database." />
<meta name="dcterms.created" content="2014-02-20T9:56:14Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML DB Developer's Guide" />
<meta name="dcterms.identifier" content="E23094-04" />
<meta name="dcterms.isVersionOf" content="ADXDB" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="xdb05sto.htm" title="Previous" type="text/html" />
<link rel="Next" href="xdb06stt.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23094.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/54</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='xdb_rewrite'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ADXDB0670" class="chapter"><a id="BABHJECG"></a>
<h1 class="chapter"><span class="secnum">8</span> <a id="sthref828"></a><a id="sthref829"></a><a id="sthref830"></a>XPath Rewrite for Structured Storage</h1>
<p>This chapter explains the fundamentals of XPath rewrite for structured (object-relational) storage in Oracle XML&nbsp;DB. It details the rewriting of XPath-expression arguments to various SQL functions.</p>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CHDHCCHH">Overview of XPath Rewrite for Structured Storage</a></p>
</li>
<li>
<p><a href="#CACDHGIA">Sample of XPath Expressions that Are Rewritten</a></p>
</li>
<li>
<p><a href="#BJFGHBHF">Analyzing and Optimizing XPath Queries using Execution Plans</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_xquery.htm#CBACDEEC">"Performance Tuning for XQuery"</a></div>
<a id="CHDHCCHH"></a>
<div id="ADXDB4549" class="sect1">
<h2 class="sect1">Overview of XPath Rewrite for Structured Storage</h2>
<p>Oracle XML&nbsp;DB can often optimize queries that use XPath expressions&thinsp;&mdash;&thinsp;for example, queries involving SQL functions such as <code>XMLQuery</code>, <code>XMLTable</code>, <code>XMLExists</code>, and <code>updateXML</code>, which take XPath (XQuery) expressions as arguments. The XPath expression is, in effect, evaluated against the XML document without ever constructing the XML document in memory.</p>
<p>This optimization is called <span class="glossaryterm">XPath rewrite</span>. It is a proper subset of XML query optimization, which also involves optimization of XQuery expressions, such as FLWOR expressions, that are not XPath expressions. XPath rewrite also enables indexes, if present on the column, to be used in query evaluation by the Optimizer.</p>
<p>The XPath expressions that can be rewritten by Oracle XML&nbsp;DB are a proper subset of those that are supported by Oracle XML&nbsp;DB. Whenever you can do so without losing functionality, use XPath expressions that can be rewritten.</p>
<p>XPath rewrite can occur in these contexts (or combinations thereof):</p>
<ul>
<li>
<p>When <code>XMLType</code> data is stored in an object-relational column or table (structured storage) or when an <code>XMLType</code> view is built on relational data.</p>
</li>
<li>
<p>When you use an <code>XMLIndex</code> index. See <a href="xdb_indexing.htm#CHDFCGGI">"XMLIndex"</a>.</p>
</li>
<li>
<p>When <code>XMLType</code> data is stored as binary XML. See <a href="xdb03usg.htm#BABDBEFG">"How Oracle XML&nbsp;DB Processes XMLType Methods and SQL Functions"</a> for information about streaming evaluation.</p>
</li>
</ul>
<p>This chapter covers the first case: rewriting queries that use structured XML data or <code>XMLType</code> views. The <code>XMLType</code> views can be XML schema-based or not. Structured storage of <code>XMLType</code> data is always XML schema-based. Examples in this chapter are related to XML schema-based tables.</p>
<p><a href="#CACIBIIG">Example 8-1</a> illustrates XPath rewrite for a simple query that uses an XPath expression.</p>
<div id="ADXDB5845" class="example">
<p class="titleinexample"><a id="CACIBIIG"></a>Example 8-1 XPath Rewrite</p>
<pre>
SELECT po.OBJECT_VALUE FROM purchaseorder po
  WHERE XMLCast(XMLQuery('$p/PurchaseOrder/Requestor'
                         PASSING po.OBJECT_VALUE AS "p" RETURNING CONTENT)
                AS VARCHAR2(128))
        = 'Sarah J. Bell';
</pre>
<p>The <code>XMLCast(XMLQuery...))</code> expression here is rewritten to the underlying relational column that stores the requestor information for the purchase order. The query is rewritten to something like the following:<a id="sthref831" href="#sthref831" onclick='footdisplay(1,"This example uses sample database schema \u003ccode\u003eOE\u003c/code\u003e and its table \u003ccode\u003epurchaseorder\u003c/code\u003e. The XML schema for this table is annotated with attribute \u003ccode\u003eSQLName\u003c/code\u003e to specify SQL object attribute names such as \u003ccode\u003eREQUESTOR\u003c/code\u003e&thinsp;&mdash;&thinsp;see \u003ca target=\"xdb_rewrite\" href=\"xdb03usg.htm#BABBGIED\"\u003eExample 3-10\u003c/a\u003e. Without such annotations, this example would use \u003ccode\u003ep.\"XMLDATA\".\"\u003c/code\u003e\u003ccode\u003e\u003cspan class=\"codeinlinebold\"\u003eRequestor\u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\"\u003c/code\u003e, not \u003ccode\u003ep.\"XMLDATA\".\"\u003c/code\u003e.\u003ccode\u003e\u003cspan class=\"codeinlinebold\"\u003eREQUESTOR\u003c/span\u003e\u003c/code\u003e\u003ccode\u003e\"\u003c/code\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
<pre>
SELECT OBJECT_VALUE FROM purchaseorder p
 WHERE CAST (p."XMLDATA"."REQUESTOR" AS VARCHAR2(128)) = 'Sarah J. Bell';
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CACDHGIA"></a>
<div id="ADXDB5847" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Sample of XPath Expressions that Are Rewritten</h2>
<p><a href="#g1048508">Table 8-1</a> describes some XPath expressions that are rewritten during XPath rewrite.</p>
<div id="ADXDB4558" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref832"></a><a id="g1048508"></a>Table 8-1 Sample of XPath Expressions that Are Rewritten to Underlying SQL Constructs</p>
<table class="cellalignment1032" title="Sample of XPath Expressions that Are Rewritten to Underlying SQL Constructs" summary="This table describes supported XPath expressions for translation to underlying SQL queries. It has two columns." >
<thead>
<tr class="cellalignment1020">
<th class="cellalignment1027" id="r1c1-t3">XPath Expression for Translation</th>
<th class="cellalignment1027" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r2c1-t3" headers="r1c1-t3">
<p>Simple XPath expressions (expressions with <code>child</code> and <code>attribute</code> axes only):</p>
<p><code>/PurchaseOrder/@Reference</code></p>
<p><code>/PurchaseOrder/Requestor</code></p>
</td>
<td class="cellalignment1028" headers="r2c1-t3 r1c2-t3">
<p>Involves traversals over object type attributes only, where the attributes are simple scalar or object types themselves.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r3c1-t3" headers="r1c1-t3">
<p>Collection traversal expressions:</p>
<p><code>/PurchaseOrder/LineItems/LineItem/Part/@Id</code></p>
</td>
<td class="cellalignment1028" headers="r3c1-t3 r1c2-t3">
<p>Involves traversal of collection expressions. The only axes supported are child and attribute axes. Collection traversal is not supported if the SQL function is used during a <code>CREATE INDEX</code> operation.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r4c1-t3" headers="r1c1-t3">
<p>Predicates:</p>
<p><code>[Requestor = "Sarah J. Bell"]</code></p>
</td>
<td class="cellalignment1028" headers="r4c1-t3 r1c2-t3">
<p>Predicates in the XPath are rewritten into SQL predicates.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r5c1-t3" headers="r1c1-t3">
<p>List index (positional predicate):</p>
<p><code>LineItem[1]</code></p>
</td>
<td class="cellalignment1028" headers="r5c1-t3 r1c2-t3">
<p>Indexes are rewritten to access the nth item in a collection.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r6c1-t3" headers="r1c1-t3">
<p>Wildcard traversals:</p>
<p><code>/PurchaseOrder/*/Part/@Id</code></p>
</td>
<td class="cellalignment1028" headers="r6c1-t3 r1c2-t3">
<p>If the wildcard can be translated to one or more simple XPath expressions, then it is rewritten.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r7c1-t3" headers="r1c1-t3">
<p>Descendant axis (XML schema-based data only), without recursion:</p>
<p><code>/PurchaseOrder//Part/@Id</code></p>
</td>
<td class="cellalignment1028" headers="r7c1-t3 r1c2-t3">
<p>Similar to a wildcard expression. The <code>descendant</code> axis is rewritten if it can be mapped to one or more simple XPath expressions.</p>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r8c1-t3" headers="r1c1-t3">
<p>Descendant axis (XML schema-based data only), with <span class="italic">recursion</span>:</p>
<p><code>/PurchaseOrder//Part/@Id</code></p>
</td>
<td class="cellalignment1028" headers="r8c1-t3 r1c2-t3">
<p>The <code>descendant</code> axis is rewritten if both of these conditions holds:</p>
<ul>
<li>
<p>All simple XPath expressions to which this XPath expression expands map to the same out-of-line table.</p>
</li>
<li>
<p>Any simple XPath expression to which this XPath expression does not expand does not map to that out-of-line table.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1020">
<td class="cellalignment1028" id="r9c1-t3" headers="r1c1-t3">
<p>XPath functions</p>
</td>
<td class="cellalignment1028" headers="r9c1-t3 r1c2-t3">
<p>Some XPath functions are rewritten. These functions include <code>not</code>, <code>floor</code>, <code>ceiling</code>, <code>substring</code>, and <code>string-length</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_xquery.htm#CBACDEEC">"Performance Tuning for XQuery"</a> for information about rewrite of XQuery expressions</div>
</div>
<!-- class="sect1" -->
<a id="BJFGHBHF"></a>
<div id="ADXDB4566" class="sect1">
<h2 class="sect1">Analyzing and Optimizing XPath Queries using Execution Plans</h2>
<p>This section presents some guidelines for using execution plans to do the following, for queries that use XPath expressions:</p>
<ul>
<li>
<p>Analyze query execution, to determine whether XPath rewrite occurs.</p>
</li>
<li>
<p>Optimize query execution, by using secondary indexes.</p>
</li>
</ul>
<p>Use these guidelines together, taking all that apply into consideration.</p>
<p>As is true also for the rest of this chapter, this section is applicable only to <code>XMLType</code> data that is stored object-relationally (structured storage).</p>
<p>XPath rewrite for object-relational storage means that a query that selects XML fragments defined by an XPath expression is rewritten to a SQL <code>SELECT</code> statement on the underlying object-relational tables and columns. These underlying tables can include out-of-line tables.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb06stt.htm#BHAGAHCB">"XPath Rewrite for Out-Of-Line Tables"</a></div>
<div id="ADXDB5848" class="sect2"><a id="sthref833"></a>
<h3 class="sect2">Guideline: Look for underlying tables versus XML functions in execution plans</h3>
<p>The execution plan of a query that has been rewritten refers to the object-relational tables and columns that underlie the queried <code>XMLType</code> data.</p>
<p>The names of the underlying tables can be meaningful to you, if they are derived from XML element or attribute names or if the governing XML schema explicitly names them by using annotation <code>xdb:defaultTable</code>. Otherwise, these names are system-generated and have no obvious meaning. In particular, they do not reflect the corresponding XML element or attribute names. Also, some system-generated columns are hidden. You do not see them if you use the SQL <code>describe</code> command. They nevertheless show up in execution plans.</p>
<p>The plan of a query that has not been rewritten shows only the base table names, and it typically refers to user-level XML functions, such as <code>XMLExists</code>. Look for this difference to determine whether a query has been optimized. The XML function name shown in an execution plan is actually the internal name (for example, <code>XMLEXISTS2</code>), which is sometimes slightly different from the user-level name.</p>
<p><a href="#CACDIECD">Example 8-2</a> shows the kind of execution plan output that is generated when Oracle XML&nbsp;DB cannot perform XPath rewrite. The plan here is for a query that uses SQL/XML function <code>XMLExists</code>. The corresponding internal function <code>XMLExists2</code> appears in the plan output, indicating that the query is not rewritten.</p>
<div id="ADXDB5849" class="example">
<p class="titleinexample"><a id="CACDIECD"></a>Example 8-2 Execution Plan Generated When XPath Rewrite Does Not Occur</p>
<pre>
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(<span class="bold">XMLEXISTS2</span>('$p/PurchaseOrder[User="SBELL"]' PASSING BY VALUE
              SYS_MAKEXML('61687B202644E297E040578C8A175C1D',4215,"PO"."XMLEXTRA","PO"."X
              MLDATA") AS "p")=1)
</pre></div>
<!-- class="example" -->
<p>In this situation, Oracle XML&nbsp;DB constructs a pre-filtered result set based on any other conditions specified in the query <code>WHERE</code> clause. It then filters the rows in this potential result set to determine which rows belong in the result set. The filtering is performed by <span class="italic">constructing a DOM on each document</span> and performing a <span class="italic">functional evaluation</span> (using the methods defined by the DOM API) to determine whether or not each document is a member of the result set.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB5850" class="sect2"><a id="sthref834"></a>
<h3 class="sect2">Guideline: Name the default tables, so you recognize them in execution plans</h3>
<p>When designing an XML schema, use annotation <code>xdb:defaultTable</code> to name the underlying tables that correspond to elements that you select in queries where performance is important. This lets you easily recognize them in an execution plan, indicating by their presence or absence whether the query has been rewritten.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDB5851" class="sect2"><a id="sthref835"></a>
<h3 class="sect2">Guideline: Create an index on a column targeted by a predicate</h3>
<p>A query resulting from XPath rewrite sometimes includes a SQL predicate (<code>WHERE</code> clause). This can happen even if the original query does not use an XPath predicate, and it can happen even if the original query does not have a SQL <code>WHERE</code> clause.</p>
<p>When this happens, you can sometimes improve performance by creating an index on the column that is targeted by the SQL predicate, or by creating an index on a function application to that column. <a href="#CACIBIIG">Example 8-1</a> illustrates XPath rewrite for a query that includes a <code>WHERE</code> clause. <a href="#CACIIDHJ">Example 8-3</a> shows the predicate information from an execution plan for this query.</p>
<div id="ADXDB5852" class="example">
<p class="titleinexample"><a id="CACIIDHJ"></a>Example 8-3 Analyzing an Execution Plan to Determine a Column to Index</p>
<pre>
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(<span class="bold">CAST</span>("PURCHASEORDER"."<span class="bold">SYS_NC00021$</span>" AS VARCHAR2(128))='Sarah
              J. Bell' AND SYS_CHECKACL("ACLOID","OWNERID",xmltype('&lt;privilege
              xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
              http://xmlns.oracle.com/xdb/acl.xsd DAV:http://xmlns.oracle.com/xdb/dav.xsd
              "&gt;&lt;read-properties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;'))=1)
</pre></div>
<!-- class="example" -->
<p>The predicate information indicates that the expression <code>XMLCast(XMLQuery...))</code> is rewritten to an application of SQL function <code>cast</code> to the underlying relational column that stores the requestor information for the purchase order, <code>SYS_NC0021$</code>. This column name is system-generated. The execution plan refers to this system-generated name, in spite of the fact that the governing XML schema uses annotation <code>SQLName</code> to name this column <code>REQUESTOR</code>.</p>
<p>Because these two names (user-defined and system-generated) refer to the same column, you can create a B-tree index on this column using either name. Alternatively, you can use the <code>extractValue</code> shortcut to create the index, by specifying an XPath expression that targets the purchase-order requestor data. <a href="#CACDBHCJ">Example 8-4</a> shows these three equivalent ways to create the B-tree index on the predicate-targeted column.</p>
<div id="ADXDB5854" class="example">
<p class="titleinexample"><a id="CACDBHCJ"></a>Example 8-4 Creating an Index on a Column Targeted by a Predicate</p>
<pre>
CREATE INDEX requestor_index ON purchaseorder ("SYS_NC00021$");

CREATE INDEX requestor_index ON purchaseorder ("XMLDATA"."REQUESTOR");

CREATE INDEX requestor_index ON purchaseorder
  (extractvalue(OBJECT_VALUE, '/PurchaseOrder/Requestor'));
</pre></div>
<!-- class="example" -->
<p>However, for this particular query it makes sense to create a function-based index, using a functional expression that matches the one in the rewritten query. <a href="#CACCAJDI">Example 8-5</a> illustrates this.</p>
<div id="ADXDB5855" class="example">
<p class="titleinexample"><a id="CACCAJDI"></a>Example 8-5 Creating a Function-Based Index for a Column Targeted by a Predicate</p>
<pre>
CREATE INDEX requestor_index ON purchaseorder
  (<span class="bold">cast</span>("XMLDATA"."<span class="bold">REQUESTOR</span>" AS VARCHAR2(128)));
</pre></div>
<!-- class="example" -->
<p><a href="#CACJEJBH">Example 8-6</a> shows an execution plan that indicates that the index is picked up.</p>
<div id="ADXDB5856" class="example">
<p class="titleinexample"><a id="CACJEJBH"></a>Example 8-6 Execution Plan Showing that Index Is Picked Up</p>
<pre>
-----------------------------------------------------------------------------------------------
| Id  | Operation                   | Name            | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT            |                 |     1 |   524 |     2   (0)| 00:00:01 |
|*  1 |  TABLE ACCESS BY INDEX ROWID| PURCHASEORDER   |     1 |   524 |     2   (0)| 00:00:01 |
|*  2 |   INDEX RANGE SCAN          | <span class="bold">REQUESTOR_INDEX</span> |     1 |       |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   1 - filter(SYS_CHECKACL("ACLOID","OWNERID",xmltype('&lt;privilege
              xmlns="http://xmlns.oracle.com/xdb/acl.xsd"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.oracle.com/xdb/acl.xsd
                                  http://xmlns.oracle.com/xdb/acl.xsd
              DAV:http://xmlns.oracle.com/xdb/dav.xsd"&gt;
              &lt;read-properties/&gt;&lt;read-contents/&gt;&lt;/privilege&gt;'))=1)
   2 - access(CAST("SYS_NC00021$" AS VARCHAR2(128))='Sarah J. Bell')
</pre></div>
<!-- class="example" -->
<p>In the particular case of this query, the original functional expression applies <code>XMLCast</code> to <code>XMLQuery</code> to target a singleton element, <code>Requestor</code>. This is a special case, where you can as a shortcut use such a functional expression directly in the <code>CREATE INDEX</code> statement. That statement is rewritten to create an index on the underlying scalar data. <a href="#CACCGFBB">Example 8-7</a>, which targets an XPath expression, thus has the same effect as <a href="#CACCAJDI">Example 8-5</a>, which targets the corresponding object-relational column.</p>
<div id="ADXDB5857" class="example">
<p class="titleinexample"><a id="CACCGFBB"></a>Example 8-7 Creating a Function-Based Index for a Column Targeted by a Predicate</p>
<pre>
CREATE INDEX requestor_index 
  ON purchaseorder po
     (XMLCast(XMLQuery('$p/PurchaseOrder/Requestor' PASSING po.OBJECT_VALUE AS "p"
                                                    RETURNING CONTENT)
              AS VARCHAR2(128)));
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_indexing.htm#CHDBHADG">"Indexing Non-Repeating text() Nodes or Attribute Values"</a> for information about using the shortcut of <code>XMLCast</code> applied to <code>XMLQuery</code> and the <code>extractValue</code> shortcut to index singleton data</div>
</div>
<!-- class="sect2" -->
<a id="CACHDCID"></a>
<div id="ADXDB5858" class="sect2">
<h3 class="sect2">Guideline: Create indexes on ordered collection tables</h3>
<p>If a collection is stored as an ordered collection table or an <code>XMLType</code> instance, then you can directly access members of the collection. Each member of the collection becomes a row in a table, so you can access it directly with SQL.</p>
<p>You can often improve performance by indexing such collection members. You do this by creating a <span class="italic">composite</span> index on (a) the object attribute that corresponds to the collection XML element or its attribute and (b) pseudocolumn <code>NESTED_TABLE_ID</code>.</p>
<p><a href="#CACHICDI">Example 8-8</a> shows the execution plan for a query to find the <code>Reference</code> elements in documents that contain an order for part number 717951002372 (<code>Part</code> element with an <code>Id</code> attribute of value <code>717951002372</code>). The collection of <code>LineItem</code> elements is stored as rows in the ordered collection table <code>lineitem_table</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="#CACHICDI">Example 8-8</a> does not use the <code>purchaseorder</code> table from sample database schema <code>OE</code>. It uses the <code>purchaseorder</code> table defined in <a href="xdb03usg.htm#CHDDIACH">Example 3-13</a>. This table uses an ordered collection table (OCT) named <code>lineitem_table</code> for the collection element <code>LineItem</code>.</div>
<div id="ADXDB5859" class="example">
<p class="titleinexample"><a id="CACHICDI"></a>Example 8-8 Execution Plan for a Selection of Collection Elements</p>
<pre>
SELECT XMLCast(XMLQuery('$p/PurchaseOrder/Reference'
                        PASSING OBJECT_VALUE AS "p" RETURNING CONTENT)
               AS VARCHAR2(4000)) "Reference"
  FROM purchaseorder
  WHERE XMLExists('$p/PurchaseOrder/LineItems/LineItem/Part[@Id="717951002372"]'
                  PASSING OBJECT_VALUE AS "p");

-------------------------------------------------------------------------------------------------------
| Id  | Operation                    | Name                   | Rows  | Bytes | Cost (%CPU)| Time     |
-------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT             |                        |     1 |   122 |    16  (13)| 00:00:01 |
|   1 |  NESTED LOOPS                |                        |       |       |            |          |
|   2 |   NESTED LOOPS               |                        |     1 |   122 |    16  (13)| 00:00:01 |
|   3 |    SORT UNIQUE               |                        |     1 |    50 |    14   (8)| 00:00:01 |
|*  4 |     <span class="bold">TABLE ACCESS FULL</span>        | <span class="bold">LINEITEM_TABLE</span>         |     1 |    50 |    14   (8)| 00:00:01 |
|*  5 |    INDEX UNIQUE SCAN         | LINEITEM_TABLE_MEMBERS |     1 |       |     0   (0)| 00:00:01 |
|   6 |   TABLE ACCESS BY INDEX ROWID| PURCHASEORDER          |     1 |    72 |     1   (0)| 00:00:01 |
-------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   4 - filter("SYS_NC00009$" IS NOT NULL AND "SYS_NC00011$"='717951002372')
   5 - access("NESTED_TABLE_ID"="PURCHASEORDER"."SYS_NC0003400035$")
</pre></div>
<!-- class="example" -->
<p>The execution plan shows a full scan of ordered collection table <code>lineitem_table</code>. This could be acceptable if there were only a few hundred documents in the <code>purchaseorder</code> table, but it would be unacceptable if there were thousands or millions of documents in the table.</p>
<p>To improve the performance of such a query, you can create an index that provides direct access to pseudocolumn <code>NESTED_TABLE_ID</code>, given the value of attribute <code>Id</code>. Unfortunately, Oracle XML&nbsp;DB does not allow indexes on collections to be created using XPath expressions directly. To create the index, you must understand the structure of the SQL object that is used to manage the <code>LineItem</code> elements. Given this information, you can create the required index using conventional object-relational SQL.</p>
<p>In this case, element <code>LineItem</code> is stored as an instance of object type <code>lineitem_t</code>. Element <code>Part</code> is stored as an instance of SQL data type <code>part_t</code>. XML attribute <code>Id</code> is mapped to object attribute <code>part_number</code>. Given this information, you can create a <span class="italic">composite index</span> on attribute <code>part_number</code> and pseudocolumn <code>NESTED_TABLE_ID</code>, as shown in <a href="#CACDIGJF">Example 8-9</a>. This index provides direct access to those purchase-order documents that have <code>LineItem</code> elements that reference the required part.</p>
<div id="ADXDB5860" class="example">
<p class="titleinexample"><a id="CACDIGJF"></a>Example 8-9 Creating an Index for Direct Access to an Ordered Collection Table</p>
<pre>
CREATE INDEX lineitem_part_index ON lineitem_table l (l.part.part_number, l.<span class="bold">NESTED_TABLE_ID</span>);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADXDB5861" class="sect2"><a id="sthref836"></a>
<h3 class="sect2">Guideline: Use XMLOptimizationCheck to determine why a query is not rewritten</h3>
<p>If a query has not been optimized, you can use system variable <code>XMLOptimizationCheck</code> to try to determine why.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="xdb_xquery.htm#BABHDGJH">"Diagnosing XQuery Optimization: XMLOptimizationCheck"</a></div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" -->
<hr />
<br />
<p style="text-decoration:underline">Footnote Legend</p>
Footnote&nbsp;1:&nbsp;This example uses sample database schema <code>OE</code> and its table <code>purchaseorder</code>. The XML schema for this table is annotated with attribute <code>SQLName</code> to specify SQL object attribute names such as <code>REQUESTOR</code>&thinsp;&mdash;&thinsp;see <a href="xdb03usg.htm#BABBGIED">Example 3-10</a>. Without such annotations, this example would use <code>p."XMLDATA"."</code><code><span class="codeinlinebold">Requestor</span></code><code>"</code>, not <code>p."XMLDATA"."</code>.<code><span class="codeinlinebold">REQUESTOR</span></code><code>"</code>.<br /></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1019">
<tr>
<td class="cellalignment1028">
<table class="cellalignment1024">
<tr>
<td class="cellalignment1023"><a href="xdb05sto.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1023"><a href="xdb06stt.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2002, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1030">
<table class="cellalignment1022">
<tr>
<td class="cellalignment1023"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1023"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1023"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1023"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1023"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1023"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
