<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using SOAP with the C XDK</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:38Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_c_diff.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_pt_cplus.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">31/47</span> <!-- End Header -->
<div id="ADXDK19852" class="chapter"><a id="BABBCBFC"></a>
<h1 class="chapter"><span class="secnum">22</span> Using SOAP with the C XDK</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BABCAEFF">Introduction to SOAP for C</a></p>
</li>
<li>
<p><a href="#BABDFEJG">SOAP C Functions</a></p>
</li>
<li>
<p><a href="#CHDCHECB">SOAP Example 1: Sending an XML Document</a></p>
</li>
<li>
<p><a href="#CHDIBHIB">SOAP Example 2: A Response Asking for Clarification</a></p>
</li>
<li>
<p><a href="#CHDHDAHH">SOAP Example 3: Using POST</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB3900" href="../../appdev.112/e23094/xdb_web_services.htm#ADXDB3900"><span class="italic">Oracle XML DB Developer's Guide</span></a></div>
<a id="BABCAEFF"></a>
<div id="ADXDK19853" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref570"></a>Introduction to SOAP for C</h2>
<p>The Simple Object Access Protocol (SOAP) is an XML protocol for exchanging structured and typed information between peers using HTTP and HTTPS in a distributed environment. Only HTTP 1.0 is supported in the XDK for 10<span class="italic">g</span> release 2. SOAP has three parts:</p>
<ul>
<li>
<p>The SOAP envelope which defines how to present what is in the message, who must process the message, and whether that processing is optional or mandatory.</p>
</li>
<li>
<p>A set of serialization and deserialization rules for converting application data types to and from XML.</p>
</li>
<li>
<p>A SOAP remote procedure call (RPC) that defines calls and responses.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
RPC and serialization/deserialization are not supported in this release.</div>
</li>
</ul>
<p>SOAP is operating system and language-independent because it is XML-based. This chapter presents the C implementation of the functions that read and write the SOAP message.</p>
<p>SOAP Version 1.2 is the definition of an XML-based message which is specified as an XML Infoset (an abstract data set, it could be XML 1.0) that gives a description of the message contents. Version 1.1 is also supported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
W3C SOAP 1.2 specifications at:
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/soap12-part0/">http://www.w3.org/TR/soap12-part0/</a></code> for Primer</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/soap12-part1/">http://www.w3.org/TR/soap12-part1/</a></code> for Messaging Framework</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/soap12-part2/">http://www.w3.org/TR/soap12-part2/</a></code> for Adjuncts</p>
</li>
</ul>
</div>
<a id="i1007578"></a>
<div id="ADXDK19854" class="sect2">
<h3 class="sect2"><a id="sthref571"></a>SOAP Messaging Overview</h3>
<p>The Simple Object Access Protocol (SOAP) is a lightweight protocol for sending and receiving requests and responses across the Internet. Because it is based on XML and transport protocols such as HTTP, it is not blocked by most firewalls. SOAP is independent of operating system, implementation language, and object model.</p>
<p>The power of SOAP is its ability to act as the glue between heterogeneous software components. For example, Visual Basic clients can invoke CORBA services running on UNIX computers; Macintosh clients can invoke Perl objects running on Linux.</p>
<p>SOAP messages are divided into the following parts:</p>
<ul>
<li>
<p>An <span class="glossaryterm">envelope</span> that contains the message, defines how to process the message and who should process it, and whether processing is optional or mandatory. The <code dir="ltr">Envelope</code> element is required.</p>
</li>
<li>
<p>A set of <span class="glossaryterm">encoding rules</span> that describe the datatypes for the application. These rules define a serialization mechanism that converts the application datatypes to and from XML.</p>
</li>
<li>
<p>A <span class="glossaryterm">remote procedure call (RPC)</span> request and response convention. This required element is called a body element. The <code dir="ltr">Body</code> element contains a first subelement whose name is the name of a method. This method request element contains elements for each input and output parameter. The element names are the parameter names. RPC is not currently supported in this release.</p>
</li>
</ul>
<p>SOAP is independent of any transport protocol. Nevertheless, SOAP used over HTTP for remote service invocation has emerged as a standard for delivering programmatic content over the Internet.</p>
<p>Besides being independent of transfer protocol, SOAP is also independent of operating system. In other words, SOAP enables programs to communicate even when they are written in different languages and run on different operating systems.</p>
<div id="ADXDK19855" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref572"></a>
<h4 class="sect3">SOAP Message Format</h4>
<p>SOAP messages are of the following types:</p>
<ul>
<li>
<p>Requests for a service, including input parameters</p>
</li>
<li>
<p>Responses from the requested service, including return value and output parameters</p>
</li>
<li>
<p>Optional fault elements containing error codes and information</p>
</li>
</ul>
<p>In a SOAP message, the <span class="glossaryterm">payload</span> contains the XML-encoded data. The payload contains no processing information. In contrast, the message header may contain processing information.</p>
<div id="ADXDK19856" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref573"></a>
<h5 class="sect4">SOAP Requests</h5>
<p>In SOAP requests, the XML payload contains several elements that include the following:</p>
<ul>
<li>
<p>Root element</p>
</li>
<li>
<p>Method element</p>
</li>
<li>
<p>Header elements (optional)</p>
</li>
</ul>
<p><a href="#CHDHJHJJ">Example 22-1</a> shows the format of a sample SOAP message request. A <code dir="ltr">GetLastTradePrice</code> SOAP request is sent to a <code dir="ltr">StockQuote</code> service. The request accepts a string parameter representing the company stock symbol and returns a float representing the stock price in the SOAP response.</p>
<div id="ADXDK19857" class="example">
<p class="titleinexample"><a id="CHDHJHJJ"></a>Example 22-1 SOAP Request Message</p>
<pre dir="ltr">
POST /StockQuote HTTP/1.0
Host: www.stockquoteserver.com
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn
SOAPAction: "Some-URI"

&lt;SOAP-ENV:Envelope  xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope"
            SOAP-ENV:encodingStyle="http://www.w3.org/2003/05/soap-encoding/"&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;m:GetLastTradePrice xmlns:m="Some-URI"&gt;
      &lt;symbol&gt;ORCL&lt;/symbol&gt;
    &lt;m:GetLastTradePrice&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDHJHJJ">Example 22-1</a>, the XML document is the SOAP message. The <code dir="ltr">&lt;SOAP-ENV:Envelope&gt;</code> element is the top-level element of the XML document. The payload is represented by the method element <code dir="ltr">&lt;m:GetLastTradePrice&gt;</code>. Note that XML namespaces distinguish SOAP identifiers from application-specific identifiers.</p>
<p>The first line of the header specifies that the request uses HTTP as the transport protocol:</p>
<pre dir="ltr">
POST /StockQuote HTTP/1.1
</pre>
<p>Because SOAP is independent of transport protocol, the rules governing XML payload format are independent of the use of HTTP for transport of the payload. This HTTP request points to the URI <code dir="ltr">/StockQuote</code>. Because the SOAP specification is silent on the issue of component activation, the code behind this URI determines how to activate the component and invoke the <code dir="ltr">GetLastTradePrice</code> method.</p>
</div>
<!-- class="sect4" -->
<div id="ADXDK19858" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref574"></a>
<h5 class="sect4">Example of a SOAP Response</h5>
<p><a href="#CHDCHGHH">Example 22-2</a> shows the format of the response to the request in <a href="#CHDHJHJJ">Example 22-1</a>. The <code dir="ltr">&lt;Price&gt;</code> element contains the stock price for <code dir="ltr">ORCL</code> requested by the first message.</p>
<div id="ADXDK19859" class="example">
<p class="titleinexample"><a id="CHDCHGHH"></a>Example 22-2 SOAP Response Message</p>
<pre dir="ltr">
HTTP/1.0 200 OK
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

&lt;SOAP-ENV:Envelope  xmlns:SOAP-ENV="http://www.w3.org/2003/05/soap-envelope" 
 SOAP-ENV:encodingStyle="http://www.w3.org/2003/05/soap-encoding/"&gt;
  &lt;SOAP-ENV:Body&gt;
    &lt;m:GetLastTradePriceResponse xmlns:m="Some-URI"&gt;
      &lt;Price&gt;13.5&lt;/Price&gt;
    &lt;/m:GetLastTradePriceResponse&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>The messages shown in <a href="#CHDHJHJJ">Example 22-1</a> and <a href="#CHDCHGHH">Example 22-2</a> illustrate two-way SOAP messaging, that is, a SOAP request that is answered by a SOAP response. A one-way SOAP message does not require a SOAP message in response.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHDBCD"></a>
<div id="ADXDK19860" class="sect2">
<h3 class="sect2"><a id="sthref575"></a>Using SOAP Clients</h3>
<p>SOAP clients are user-written applications that generate XML documents. The documents make a request for a SOAP service and handle the SOAP response. The SOAP implementation in the XDK processes requests from any client that sends a valid SOAP request.</p>
<p>Note the following useful features of the SOAP client API:</p>
<ul>
<li>
<p>Supports a synchronous invocation model for requests and responses</p>
</li>
<li>
<p>Facilitates the writing of client applications to make SOAP requests</p>
</li>
<li>
<p>Encapsulates the creation of the SOAP request and the details of sending the request over the underlying transport protocol</p>
</li>
<li>
<p>Supports a pluggable transport, allowing the client to easily change the transport (available transports include HTTP and HTTPS, but only HTTP 1.0 is supported in this release)</p>
</li>
</ul>
<p>The SOAP client must perform the following steps to make a request and receive a response:</p>
<ol>
<li>
<p>Gather all parameters that are needed to invoke a service.</p>
</li>
<li>
<p>Create a SOAP service request message, which is an XML message that is built according to the SOAP protocol. It contains all the values of all input parameters encoded in XML. This process is called <span class="glossaryterm">serialization</span>.</p>
</li>
<li>
<p>Submit the request to a SOAP server using a transport protocol that is supported by the SOAP server.</p>
</li>
<li>
<p>Receive a SOAP response message.</p>
</li>
<li>
<p>Determine the success or failure of the request by handling the SOAP Fault element.</p>
</li>
<li>
<p>Convert the returned parameter from XML to native datatype. This process is called <span class="glossaryterm">deserialization</span>.</p>
</li>
<li>
<p>Use the result as needed.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDBHDGD"></a>
<div id="ADXDK19861" class="sect2">
<h3 class="sect2">Using SOAP Servers<a id="sthref576"></a></h3>
<p>A SOAP server performs the following steps when executing a SOAP service request:</p>
<ol>
<li>
<p>The SOAP server receives the service request.</p>
</li>
<li>
<p>The server parses the XML request and then decides whether to execute or reject the message.</p>
</li>
<li>
<p>If the message is executed, then the server determines whether the requested service exists.</p>
</li>
<li>
<p>The server converts all input parameters from XML into datatypes that the service understands.</p>
</li>
<li>
<p>The server invokes the service.</p>
</li>
<li>
<p>The server converts the return parameter to XML and generates a SOAP response message.</p>
</li>
<li>
<p>The server sends the response message back to the caller.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABDFEJG"></a>
<div id="ADXDK19862" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref577"></a>SOAP C Functions</h2>
<p>The SOAP C implementation uses the xml.h header. A context of type <code dir="ltr">xmlctx</code> must be created before a SOAP context can be created.</p>
<p>HTTP aspects of SOAP are hidden from the user. SOAP endpoints are specified as a couple (binding, endpoint) where binding is of type <code dir="ltr">xmlsoapbind</code> and the endpoint is a (<code dir="ltr">void *</code>) depending on the binding. Currently, only one binding is supported, <code dir="ltr">XMLSOAP_BIND_HTTP</code>. For HTTP binding, the endpoint is an (<code dir="ltr">OraText *</code>) URL.</p>
<p>The SOAP layer creates and transports SOAP messages between endpoints, and decomposes received SOAP messages.</p>
<p>The C functions are declared in <code dir="ltr">xmlsoap.h</code>. Here is the beginning of that header file:</p>
<div id="ADXDK19863" class="example">
<p class="titleinexample"><a id="sthref578"></a>Example 22-3 SOAP C Functions Defined in xmlsoap.h</p>
<pre dir="ltr">
   FILE NAME
        xmlsoap.h - XML SOAP APIs
 
   FILE DESCRIPTION
        XML SOAP Public APIs
 
   PUBLIC FUNCTIONS
        XmlSoapCreateCtx         - Create and return a SOAP context
        XmlSoapDestroyCtx        - Destroy a SOAP context
 
        XmlSoapCreateConnection  - Create a SOAP connection object
        XmlSoapDestroyConnection - Destroy a SOAP connection object
 
        XmlSoapCall              - Send a SOAP message &amp; wait for reply
 
        XmlSoapCreateMsg         - Create and return an empty SOAP message
        XmlSoapDestroyMsg        - Destroy a SOAP message created
                                      w/XmlSoapCreateMsg
 
        XmlSoapGetEnvelope       - Return a SOAP message's envelope
        XmlSoapGetHeader         - Return a SOAP message's envelope header
        XmlSoapGetBody           - Return a SOAP message's envelope body
 
        XmlSoapAddHeaderElement  - Adds an element to a SOAP header
        XmlSoapGetHeaderElement  - Gets an element from a SOAP header
 
        XmlSoapAddBodyElement    - Adds an element to a SOAP message body
        XmlSoapGetBodyElement    - Gets an element from a SOAP message body
 
        XmlSoapSetMustUnderstand - Set mustUnderstand attr for SOAP hdr elem
        XmlSoapGetMustUnderstand - Get mustUnderstand attr from SOAP hdr elem
 
        XmlSoapSetRole           - Set role for SOAP header element
        XmlSoapGetRole           - Get role from SOAP header element
 
        XmlSoapSetRelay          - Set relay Header element property
        XmlSoapGetRelay          - Get relay Header element property
 
        XmlSoapSetFault          - Set Fault in SOAP message
        XmlSoapHasFault          - Does SOAP message have a Fault?
        XmlSoapGetFault          - Return Fault code, reason, and details
        
        XmlSoapAddFaultReason    - Add additional Reason to Fault
        XmlSoapAddFaultSubDetail - Add additional child to Fault Detail
        XmlSoapGetReasonNum      - Get number of Reasons in Fault element
        XmlSoapGetReasonLang     - Get a lang of a reasons with a
                                       particular iindex.
 
        XmlSoapError             - Get error message(s)
 
*/
 
#ifndef XMLSOAP_ORACLE
# define XMLSOAP_ORACLE
 
# ifndef XML_ORACLE
#  include &lt;xml.h&gt;
# endif
 
/*---------------------------------------------------------------------------
                Package SOAP - Simple Object Access Protocol APIs
 
     W3C: "SOAP is a lightweight protocol for exchange of information
     in a decentralized, distributed environment.  It is an XML based
     protocol that consists of three parts: an envelope that defines a
     framework for describing what is in a message and how to process
     it, a set of encoding rules for expressing instances of
     application-defined datatypes, and a convention for representing
     remote procedure calls and responses."
     Atachments are only allowed in Soap 1.1     
     In Soap 1.2 body may not have other elements if Fault is present.
  
     Structure of a SOAP message:
 
     [SOAP message (XML document)
        [SOAP envelope
             [SOAP header?
                 element*
             ]
             [SOAP body
                 (element* | Fault)?
             ]
        ]
     ]
---------------------------------------------------------------------------*/
...
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CAXML01300" href="../../appdev.112/e10770/soap.htm#CAXML01300"><span class="italic">Oracle Database XML C API Reference</span></a> for the C SOAP APIs</div>
</div>
<!-- class="sect1" -->
<a id="CHDCHECB"></a>
<div id="ADXDK19864" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref579"></a>SOAP Example 1: Sending an XML Document</h2>
<p>Here is an XML document that illustrates a request to a travel company for a reservation on a plane flight from New York to Los Angeles for John Smith:</p>
<div id="ADXDK19865" class="example">
<p class="titleinexample"><a id="sthref580"></a>Example 22-4 Example 1 SOAP Message</p>
<pre dir="ltr">
&lt;?xml version='1.0' ?&gt;
&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation xmlns:m="http://travelcompany.example.org/reservation" 
          env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
           env:mustUnderstand="true"&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:20:00.000-05:00&lt;/m:dateAndTime&gt;
  &lt;/m:reservation&gt;
  &lt;n:passenger xmlns:n="http://mycompany.example.com/employees"
          env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
           env:mustUnderstand="true"&gt;
   &lt;n:name&gt;John Smith&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itinerary
    xmlns:p="http://travelcompany.example.org/reservation/travel"&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;New York&lt;/p:departing&gt;
     &lt;p:arriving&gt;Los Angeles&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-14&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;late afternoon&lt;/p:departureTime&gt;
     &lt;p:seatPreference&gt;aisle&lt;/p:seatPreference&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:departing&gt;Los Angeles&lt;/p:departing&gt;
     &lt;p:arriving&gt;New York&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-20&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;mid-morning&lt;/p:departureTime&gt;
     &lt;p:seatPreference/&gt;
   &lt;/p:return&gt;
  &lt;/p:itinerary&gt;
  &lt;q:lodging
   xmlns:q="http://travelcompany.example.org/reservation/hotels"&gt;
   &lt;q:preference&gt;none&lt;/q:preference&gt;
  &lt;/q:lodging&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>The example used to create the XML document, send it, and receive and decompose a reply is simplified. There is some minimal error checking. The <code dir="ltr">DEBUG</code> option is shown for correcting anomalies. The program may not work on all operating systems. To send this XML document, the first client C program follows these steps:</p>
<ul>
<li>
<p>After declaring variables in <code dir="ltr">main()</code>, an XML context, <code dir="ltr">xctx</code>, is created using <code dir="ltr">XmlCreate()</code> and the context is then used to create a SOAP context, <code dir="ltr">ctx</code>, using <code dir="ltr">XmlSoapCreateCtx()</code>.</p>
</li>
<li>
<p>To construct the message, <code dir="ltr">XmlSoapCreateMsg()</code> is called and returns an empty SOAP message.</p>
</li>
<li>
<p>The header is constructed using <code dir="ltr">XmlSoapAddHeaderElement()</code>, <code dir="ltr">XmlSoapSetRole()</code>, <code dir="ltr">XmlSoapSetMustUnderstand()</code>, and <code dir="ltr">XmlDomAddTextElem()</code> to fill in the envelope with text.</p>
</li>
<li>
<p>The body elements are created by <code dir="ltr">XmlSoapAddBodyElement()</code>, <code dir="ltr">XmlDomCreateElemNS()</code>, and a series of calls to <code dir="ltr">XmlDomAddTextElem()</code>. Then <code dir="ltr">XmlDomAppendChild()</code> completes the section of the body specifying the New York to Los Angeles flight.</p>
</li>
<li>
<p>The return flight is built in an analogous way. The lodging is added with another <code dir="ltr">XmlSoapAddBodyElement()</code> call.</p>
</li>
<li>
<p>The connection must be created next with <code dir="ltr">XmlSoapCreateConnection()</code>, specifying HTTP binding (the only binding available now) and an endpoint URL.</p>
</li>
<li>
<p>The function <code dir="ltr">XmlSoapCall()</code> sends the message over the defined connection by means of the SOAP server, and then waits for the reply.</p>
</li>
<li>
<p>The message reply is returned in the form of another SOAP message. This is done with <code dir="ltr">XmlSaveDom()</code> and <code dir="ltr">XmlSoapHasFault()</code> used with <code dir="ltr">XmlSoapGetFault()</code> to check for a fault and analyze the fault. The fault is parsed into its parts, which is output in this example.</p>
</li>
<li>
<p>If there was no fault returned, this is followed by <code dir="ltr">XmlSoapGetBody()</code> to return the envelope body. <code dir="ltr">XmlSaveDom()</code> completes the analysis of the returned message.</p>
</li>
<li>
<p>To clean up, use <code dir="ltr">XmlSoapDestroyMsg()</code> on the message and on the reply, <code dir="ltr">XmlDestroyCtx()</code> to destroy the SOAP context, and <code dir="ltr">XmlDestroy()</code> to destroy the XML context.</p>
</li>
</ul>
<p>The C client program for Example 1 is:</p>
<div id="ADXDK19866" class="example">
<p class="titleinexample"><a id="BABEGEGD"></a>Example 22-5 Example 1 SOAP C Client</p>
<pre dir="ltr">
#ifndef S_ORACLE
# include &lt;s.h&gt;
#endif
 
#ifndef XML_ORACLE
# include &lt;xml.h&gt;
#endif
 
#ifndef XMLSOAP_ORACLE
# include &lt;xmlsoap.h&gt;
#endif
 
 
#define MY_URL "http://my_url.com"
 
/* static function declaration */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                        oratext *pfx, oratext *uri);
 
 
sb4 main( sword argc, char *argv[])
{
    xmlctx      *xctx;
    xmlerr       xerr;
    xmlsoapctx  *ctx;
    oratext     *url;
    xmlsoapcon  *con;
 
    xmldocnode  *msg1, *reply, *msg2, *msg3;
    xmlelemnode *res, *pas, *pref, *itin, *departure, *ret, *lodging;
    xmlelemnode *departing, *arriving, *trans, *text, *charge, *card, *name;
    xmlelemnode *body, *header;
    boolean      has_fault;
    oratext     *code, *reason, *lang, *node, *role;
    xmlelemnode *detail;
    oratext *comp_uri   = "http://travelcompany.example.org/";
    oratext *mres_uri   = "http://travelcompany.example.org/reservation";
    oratext *trav_uri   = "http://travelcompany.example.org/reservation/travel";
    oratext *hotel_uri  = "http://travelcompany.example.org/reservation/hotels";
    oratext *npas_uri   = "http://mycompany.example.com/employees";
 
    oratext *tparty_uri = "http://thirdparty.example.org/transaction";
    oratext *estyle_uri = "http://example.com/encoding";
    oratext *soap_style_uri = "http://www.w3.org/2003/05/soap-encoding";
    oratext *estyle     = "env:encodingStyle";
    oratext *finance_uri = "http://mycompany.example.com/financial";
    
 
    if (!(xctx = XmlCreate(&amp;xerr, (oratext *)"SOAP_test",NULL)))
    {
        printf("Failed to create XML context, error %u\n", (unsigned) xerr);
        return EX_FAIL;
    }
    /* Create SOAP context */
    if (!(ctx = XmlSoapCreateCtx(xctx, &amp;xerr, (oratext *) "example", NULL)))
       {
         printf("Failed to create SOAP context, error %u\n", (unsigned) xerr);
         return EX_FAIL;
       }
 
 
    /* EXAMPLE 1 */
    /* construct message */
    if (!(msg1 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
      printf("Failed to create SOAP message, error %u\n", (unsigned) xerr);
      return xerr;
    }
    res = XmlSoapAddHeaderElement(ctx, msg1, "m:reservation", mres_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, res, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, res, TRUE);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, "m:reference",
                 "uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d");
    (void) XmlDomAddTextElem(xctx, res, mres_uri, "m:dateAndTime",
                               "2001-11-29T13:20:00.000-05:00");
    pas = XmlSoapAddHeaderElement(ctx, msg1, "n:passenger", npas_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, pas, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, pas, TRUE);
    (void) XmlDomAddTextElem(xctx, pas, npas_uri, "n:name",
                              "John Smith");
    /* Fill body */
    /* Itinerary */
    itin = XmlSoapAddBodyElement(ctx, msg1, "p:itinerary", trav_uri, &amp;xerr);
    /* Departure */
    departure = XmlDomCreateElemNS(xctx, msg1,  trav_uri, "p:departure");
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              "p:departing","New York");
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              "p:arriving", "Los Angeles");
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              "p:departureDate", "2001-12-14");
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              "p:departureTime", "late afternoon");
    (void) XmlDomAddTextElem(xctx, departure, trav_uri,
                              "p:seatPreference", "aisle");
    XmlDomAppendChild(xctx, itin, departure);
 
    /* Return */
    ret = XmlDomCreateElemNS(xctx, msg1,  trav_uri, "p:return");
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              "p:departing", "Los Angeles");
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              "p:arriving", "New York");
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              "p:departureDate", "2001-12-20");
    (void) XmlDomAddTextElem(xctx, ret, trav_uri,
                              "p:departureTime", "mid-morning");
    pref = XmlDomCreateElemNS(xctx, msg1, trav_uri, "p:seatPreference");
    (void) XmlDomAppendChild(xctx, ret, pref);
    XmlDomAppendChild(xctx, itin, ret);
 
    /* Lodging */
    lodging = XmlSoapAddBodyElement(ctx, msg1, "q:lodging", hotel_uri, &amp;xerr);
    (void) XmlDomAddTextElem(xctx, lodging, hotel_uri,
                              "q:preference", "none");
 
#ifdef DEBUG
    /* dump the message in debug mode */
    printf("Message:\n");  
    XmlSaveDom(xctx, &amp;xerr, msg1, "stdio", stdout, "indent_step", 1, NULL);
#endif

/* END OF EXAMPLE 1 */

    /* create connection */
    url = MY_URL;
    if (!(con = XmlSoapCreateConnection(ctx, &amp;xerr, XMLSOAP_BIND_HTTP,
          url, NULL, 0, NULL, 0,
          "XTest: baz", NULL)))
      {
        printf("Failed to create SOAP connection, error %u\n", (unsigned) xerr);
        return xerr;
    }
 
    reply = XmlSoapCall(ctx, con, msg1, &amp;xerr);
    XmlSoapDestroyConnection(ctx, con);
 
    if (!reply)
    {
      printf("Call failed, no message returned.\n");
      return xerr;
    }
 
#ifdef DEBUG
    printf("Reply:\n");  
    XmlSaveDom(xctx, &amp;xerr, reply, "stdio", stdout, NULL);
#endif    
 
     printf("\n==== Header:\n ");    
    header = XmlSoapGetHeader(ctx, reply, &amp;xerr);
    if (!header)
    {
        printf("NULL\n");
    }
    else
        XmlSaveDom(xctx, &amp;xerr, header, "stdio", stdout, NULL);
    
 
   /* check for fault */
    has_fault = XmlSoapHasFault(ctx, reply, &amp;xerr);
    if(has_fault)
    {
        lang = NULL;
        xerr = XmlSoapGetFault(ctx, reply, &amp;code, &amp;reason, &amp;lang,
                               &amp;node, &amp;role, &amp;detail);
        if (xerr)
        {
            printf("error getting Fault %d\n", xerr);
            return EX_FAIL;
        }
         if(code)
            printf("   Code -- %s\n", code);
        else
            printf("   NO Code\n");
        if(reason)
            printf("   Reason -- %s\n", reason);
        else
            printf("   NO Reason\n");
        if(lang)
            printf("   Lang -- %s\n", lang);
        else
            printf("   NO Lang\n");
        if(node)
            printf("   Node -- %s\n", node);
        else
            printf("   NO Node\n");
        if(role)                
            printf("   Role -- %s\n", role);
        else
            printf("   NO Role\n");
        if(detail)
        {
            printf("   Detail\n");
            XmlSaveDom(xctx, &amp;xerr, detail, "stdio", stdout, NULL);
            printf("\n");
        }
        else
            printf("   NO Detail\n");
       
    }
    else
    {
        body = XmlSoapGetBody(ctx, reply, &amp;xerr);
        printf("==== Body:\n ");
        if (!body)
        {
            printf("NULL\n");
            return EX_FAIL;
        }
        XmlSaveDom(xctx, &amp;xerr, body, "stdio", stdout, NULL);
    }
    (void) XmlSoapDestroyMsg(ctx, reply);
    (void) XmlSoapDestroyMsg(ctx, msg1);
    (void) XmlSoapDestroyCtx(ctx);
    XmlDestroy(xctx);
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDIBHIB"></a>
<div id="ADXDK19867" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">SOAP Example 2: A Response Asking for Clarification</h2>
<p>The travel company wants to know which airport in New York the traveller, John Smith, will depart from. The choices are JFK for Kennedy, EWR for Newark, or LGA for LaGuardia. So the following reply is sent:</p>
<div id="ADXDK19868" class="example">
<p class="titleinexample"><a id="sthref581"></a>Example 22-6 Example 2 SOAP Message</p>
<pre dir="ltr">
&lt;?xml version='1.0' ?&gt;
&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation xmlns:m="http://travelcompany.example.org/reservation" 
      env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
           env:mustUnderstand="true"&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d&lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:35:00.000-05:00&lt;/m:dateAndTime&gt;
  &lt;/m:reservation&gt;
  &lt;n:passenger xmlns:n="http://mycompany.example.com/employees"
      env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
           env:mustUnderstand="true"&gt;
   &lt;n:name&gt;John Smith&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itineraryClarification 
    xmlns:p="http://travelcompany.example.org/reservation/travel"&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;
       &lt;p:airportChoices&gt;
          JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:departing&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:arriving&gt;
       &lt;p:airportChoices&gt;
         JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:arriving&gt;
   &lt;/p:return&gt;  
  &lt;/p:itineraryClarification&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>To send this XML document as a SOAP message, substitute the following code block for the lines beginning with <code dir="ltr">/* EXAMPLE 1 */</code> and ending with <code dir="ltr">/* END OF EXAMPLE 1 */</code> in <a href="#BABEGEGD">Example 22-5, "Example 1 SOAP C Client"</a>:</p>
<div id="ADXDK19869" class="example">
<p class="titleinexample"><a id="sthref582"></a>Example 22-7 Example 2 SOAP C Client</p>
<pre dir="ltr">
#define XMLSOAP_MAX_NAME        1024
 
/* we need this function for examples 2 and 3 */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                          oratext *pfx, oratext *uri)
{
    oratext     *aq, aqbuf[XMLSOAP_MAX_NAME];
    xmldocnode  *doc;
    oratext     *xmlns = "xmlns:";
    
    /* if no room for "xmlns:usersprefix\0" then fail now */
    if ((strlen((char *)pfx) + strlen((char *)xmlns)) &gt;
        sizeof(aqbuf))
        return EX_FAIL;
    (void) strcpy((char *)aqbuf, (char *)xmlns);
    strcat((char *)aqbuf, (char *)pfx);
    doc = XmlDomGetOwnerDocument(xctx, elem);
    aq = XmlDomSaveString(xctx, doc, aqbuf);
    XmlDomSetAttrNS(xctx, elem, uri, aq, uri);
    return XMLERR_OK;
}
 
    /* EXAMPLE 2 */
    /* construct message */
    if (!(msg2 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
         printf("Failed to create SOAP message, error %u\n", (unsigned) xerr);
         return xerr;
    }
    res = XmlSoapAddHeaderElement(ctx, msg2, "m:reservation", mres_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, res, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, res, TRUE);
    (void) XmlDomAddTextElem(xctx, res, mres_uri, "m:reference",
                 "uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d");
    (void) XmlDomAddTextElem(xctx, res, mres_uri, "m:dateAndTime",
                               "2001-11-29T13:35:00.000-05:00");
    pas = XmlSoapAddHeaderElement(ctx, msg2, "n:passenger", npas_uri, &amp;xerr);
    xerr = XmlSoapSetRole(ctx, pas, XMLSOAP_ROLE_NEXT);
    xerr = XmlSoapSetMustUnderstand(ctx, pas, TRUE);
    (void) XmlDomAddTextElem(xctx, pas, npas_uri, "n:name",
                              "John Smith");
    /* Fill body */
    /* Itinerary */
    itin = XmlSoapAddBodyElement(ctx, msg2, "p:itineraryClarification",
                                 trav_uri, &amp;xerr);
    /* Departure */
    departure = XmlDomCreateElemNS(xctx, msg2,  trav_uri, "p:departure");
    departing = XmlDomCreateElem(xctx, msg2,  "p:departing");
    (void) XmlDomAddTextElem(xctx, departing, trav_uri,
                              "p:airportChoices", "JFK LGA EWR");
    (void) XmlDomAppendChild(xctx, departure, departing);
    XmlDomAppendChild(xctx, itin, departure);
 
    /* Return */
    ret = XmlDomCreateElemNS(xctx, msg2,  trav_uri, "p:return");
    arriving = XmlDomCreateElemNS(xctx, msg2,  trav_uri, "p:arriving");
    (void) XmlDomAddTextElem(xctx, arriving, trav_uri,
                              "p:airportChoices", "JFK LGA EWR");
    XmlDomAppendChild(xctx, ret, arriving);
    XmlDomAppendChild(xctx, itin, ret);
 
#ifdef DEBUG
    XmlSaveDom(xctx, &amp;xerr, msg2, "stdio", stdout, "indent_step", 1, NULL);
#endif
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDHDAHH"></a>
<div id="ADXDK19870" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">SOAP Example 3: Using POST</h2>
<p>Credit card information for John Smith is sent in the final XML document using the POST method. The <code dir="ltr">XmlSoapCall()</code> writes the HTTP header that precedes the XML message in the following example:</p>
<div id="ADXDK19871" class="example">
<p class="titleinexample"><a id="sthref583"></a>Example 22-8 Example 3 SOAP Message</p>
<pre dir="ltr">
POST /Reservations HTTP/1.0
Host: travelcompany.example.org
Content-Type: application/soap+xml; charset="utf-8"
Content-Length: nnnn

&lt;?xml version='1.0' ?&gt;
&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope" &gt;
 &lt;env:Header&gt;
   &lt;t:transaction
           xmlns:t="http://thirdparty.example.org/transaction"
           env:encodingStyle="http://example.com/encoding"
           env:mustUnderstand="true" &gt;5&lt;/t:transaction&gt;
 &lt;/env:Header&gt;  
 &lt;env:Body&gt;
  &lt;m:chargeReservation 
      env:encodingStyle="http://www.w3.org/2003/05/soap-encoding"
         xmlns:m="http://travelcompany.example.org/"&gt;
   &lt;m:reservation xmlns:m="http://travelcompany.example.org/reservation"&gt;
    &lt;m:code&gt;FT35ZBQ&lt;/m:code&gt;
   &lt;/m:reservation&gt;   
   &lt;o:creditCard xmlns:o="http://mycompany.example.com/financial"&gt;
    &lt;n:name xmlns:n="http://mycompany.example.com/employees"&gt;
           John Smith
    &lt;/n:name&gt;     
    &lt;o:number&gt;123456789099999&lt;/o:number&gt;
    &lt;o:expiration&gt;2005-02&lt;/o:expiration&gt;
   &lt;/o:creditCard&gt;
  &lt;/m:chargeReservation&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;
</pre></div>
<!-- class="example" -->
<p>The C Client includes the following code block which is substituted like the second example in <a href="#BABEGEGD">Example 22-5, "Example 1 SOAP C Client"</a>:</p>
<div id="ADXDK19872" class="example">
<p class="titleinexample"><a id="sthref584"></a>Example 22-9 Example 3 SOAP C Client</p>
<pre dir="ltr">
#define XMLSOAP_MAX_NAME        1024
 
/* we need this function for examples 2 and 3 */
static xmlerr add_ns_decl(xmlsoapctx  *ctx, xmlctx *xctx, xmlelemnode *elem,
                          oratext *pfx, oratext *uri)
{
    oratext     *aq, aqbuf[XMLSOAP_MAX_NAME];
    xmldocnode  *doc;
    oratext     *xmlns = "xmlns:";
    
    /* if no room for "xmlns:usersprefix\0" then fail now */
    if ((strlen((char *)pfx) + strlen((char *)xmlns)) &gt;
        sizeof(aqbuf))
        return EX_FAIL;
    (void) strcpy((char *)aqbuf, (char *)xmlns);
    strcat((char *)aqbuf, (char *)pfx);
    doc = XmlDomGetOwnerDocument(xctx, elem);
    aq = XmlDomSaveString(xctx, doc, aqbuf);
    XmlDomSetAttrNS(xctx, elem, uri, aq, uri);
    return XMLERR_OK;
}
 
    /* EXAMPLE 3 */
    if (!(msg3 = XmlSoapCreateMsg(ctx, &amp;xerr)))
    {
        printf("Failed to create SOAP message, error %u\n", (unsigned) xerr);
        return xerr;
    }
    trans = XmlSoapAddHeaderElement(ctx,msg3, "t:transaction", tparty_uri, &amp;xerr);
    xerr = XmlSoapSetMustUnderstand(ctx, trans, TRUE);
    XmlDomSetAttr(xctx, trans, estyle, estyle_uri);
    text = XmlDomCreateText(xctx, msg3, "5");
    XmlDomAppendChild(xctx, trans, text);
    
    /* Fill body */
    /* Charge Reservation */
    charge = XmlSoapAddBodyElement(ctx,msg3,"m:chargeReservation",comp_uri,&amp;xerr);
    XmlDomSetAttr(xctx, charge, estyle, soap_style_uri);
    res = XmlDomCreateElemNS(xctx, msg3, mres_uri,  "m:reservation");
    if (add_ns_decl(ctx, xctx, res, "m", mres_uri))
        return EX_FAIL; 
    (void) XmlDomAddTextElem(xctx, res, mres_uri,
                              "m:code", "FT35ZBQ");
    (void) XmlDomAppendChild(xctx, charge, res);
 
    /* create card elem with  namespace */
    card = XmlDomCreateElemNS(xctx, msg3, finance_uri, "o:creditCard");
    if (add_ns_decl(ctx, xctx, card, "o", finance_uri))
        return EX_FAIL; 
    name =  XmlDomAddTextElem(xctx, card, npas_uri,
                              "n:name", "John Smith");
    /* add namespace */
    if (add_ns_decl(ctx, xctx, name, "n", npas_uri))
        return EX_FAIL; 
    (void)  XmlDomAddTextElem(xctx, card, finance_uri,
                              "o:number", "123456789099999");
    (void) XmlDomAddTextElem(xctx, card, finance_uri,
                              "o:expiration", "2005-02");
    (void) XmlDomAppendChild(xctx, charge, card);
 
#ifdef DEBUG
    XmlSaveDom(xctx, &amp;xerr, msg3, "stdio", stdout, "indent_step", 1, NULL);
#endif
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_c_diff.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_pt_cplus.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
