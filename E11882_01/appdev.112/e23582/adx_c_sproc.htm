<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XML Schema Processor for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:38Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_c_xmlbin.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_c_diff.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">29/47</span> <!-- End Header -->
<div id="ADXDK1600" class="chapter"><a id="g1011100"></a>
<h1 class="chapter"><span class="secnum">20</span> Using the XML Schema Processor for C</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1008758">Oracle XML Schema Processor for C</a></p>
</li>
<li>
<p><a href="#i1006707">Using the C XML Schema Processor Command-Line Utility</a></p>
</li>
<li>
<p><a href="#i1006715">XML Schema Processor for C Usage Diagram</a></p>
</li>
<li>
<p><a href="#i1008776">How to Run XML Schema for C Sample Programs</a></p>
</li>
<li>
<p><a href="#BEJEDBBJ">What is the Streaming Validator?</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Use the new unified C API for new XDK and Oracle XML DB applications. The old C functions are deprecated and supported only for backward compatibility, but will not be enhanced. They will be removed in a future release.
<p>The new C API is described in <a href="adx_c_gs.htm#BACIHJEJ">"Overview of the Unified C API"</a>.</p>
</div>
<a id="i1008758"></a>
<div id="ADXDK19805" class="sect1">
<h2 class="sect1">Oracle XML Schema Processor for C</h2>
<p>The XML Schema processor for C is a companion component to the XML parser for C that allows support for simple and complex datatypes in XML applications.</p>
<p>The XML Schema processor for C supports the W3C XML Schema Recommendation. This makes writing custom applications that process XML documents straightforward, and means that a standards-compliant XML Schema processor is part of the XDK on every operating system where Oracle is ported.</p>
<p>The XML Schema processor enables validation of XML and retrieval of metadata. It can be called by itself or through the XML Parser for C.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a>, for more information about XML Schema and why you would want to use XML Schema.</div>
<div id="ADXDK19806" class="sect2"><a id="sthref528"></a>
<h3 class="sect2">Oracle XML Schema for C Features</h3>
<p>XML Schema processor for C has the following features:</p>
<ul>
<li>
<p>Supports simple and complex types</p>
</li>
<li>
<p>Built on XML parser for C</p>
</li>
<li>
<p>Supports the W3C XML Schema Recommendation</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CAXML05000" href="../../appdev.112/e10770/schema.htm#CAXML05000"><span class="italic">Oracle Database XML C API Reference</span></a> "Schema APIs for C"</p>
</li>
<li>
<p><code dir="ltr">$ORACLE_HOME/xdk/demo/c/schema/</code> - sample code</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<div id="ADXDK19807" class="sect2"><a id="sthref529"></a>
<h3 class="sect2">Standards Conformance</h3>
<p>The Schema Processor conforms to the following standards:</p>
<ul>
<li>
<p>W3C recommendation for Extensible Markup Language (XML) 1.0</p>
</li>
<li>
<p>W3C recommendation for Document Object Model Level 1.0</p>
</li>
<li>
<p>W3C recommendation for Namespaces in XML</p>
</li>
<li>
<p>W3C recommendation for XML Schema</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDK19808" class="sect2"><a id="sthref530"></a>
<h3 class="sect2">XML Schema Processor for C: Supplied Software</h3>
<p><a href="#g1010085">Table 20-1</a> lists the supplied files and directories for this release.</p>
<div id="ADXDK19809" class="tblformal">
<p class="titleintable"><a id="sthref531"></a><a id="g1010085"></a>Table 20-1 XML Schema Processor for C: Supplied Files in $ORACLE_HOME</p>
<table class="cellalignment1214" title="XML Schema Processor for C: Supplied Files in $ORACLE_HOME" summary="Directory and Files, and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t5">Directory and Files</th>
<th class="cellalignment1212" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">bin</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c2-t5">
<p>schema processor executable, <code dir="ltr">schema</code></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">lib</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c2-t5">
<p>XML/XSL/Schema &amp; support libraries</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">nls/data</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c2-t5">
<p>Globalization Support data files</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xdk/demo/c/schema</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c2-t5">
<p>example usage of the Schema processor</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xdk/include</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t5 r1c2-t5">
<p>header files</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xdk/mesg</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t5 r1c2-t5">
<p>error message files</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">xdk/readme.html</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t5 r1c2-t5">
<p>introductory file</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#g1010119">Table 20-2</a> lists the included libraries in directory <code dir="ltr">lib</code>.</p>
<div id="ADXDK19810" class="tblformal">
<p class="titleintable"><a id="sthref532"></a><a id="g1010119"></a>Table 20-2 XML Schema Processor for C: Supplied Libraries</p>
<table class="cellalignment1214" title="XML Schema Processor for C: Supplied Libraries " summary="Included Library and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t6">Included Library</th>
<th class="cellalignment1212" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">libxml10.a</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c2-t6">
<p>XML parser, XSLT processor, XML Schema processor</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">libcore10.a</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c2-t6">
<p>CORE functions</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">libnls10.a</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c2-t6">
<p>Globalization Support</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006707"></a>
<div id="ADXDK19811" class="sect1">
<h2 class="sect1">Using the C XML Schema Processor Command-Line Utility</h2>
<p>XML Schema processor for C can be called as an executable by invoking <code dir="ltr">bin/schema</code> in the install area. This takes two arguments:</p>
<ul>
<li>
<p>XML instance document</p>
</li>
<li>
<p>Optionally, a default schema</p>
</li>
</ul>
<p>The XML Schema processor for C can also be invoked by writing code using the supplied APIs. The code must be compiled using the headers in the <code dir="ltr">include</code> subdirectory and linked against the libraries in the <code dir="ltr">lib</code> subdirectory. See <code dir="ltr">Makefile</code> in the <code dir="ltr">xdk/demo/c/schema</code> subdirectory for details on how to build your program.</p>
<p>Error message files in different languages are provided in the <code dir="ltr">mesg/</code> subdirectory.</p>
</div>
<!-- class="sect1" -->
<a id="i1006715"></a>
<div id="ADXDK19812" class="sect1">
<h2 class="sect1">XML Schema Processor for C Usage Diagram</h2>
<p><a href="#i1008723">Figure 20-1</a> describes the calling sequence for the XML Schema processor for C, as follows:</p>
<ol>
<li>
<p>The initialize call is invoked once at the beginning of a session; it returns a schema context which is used throughout the session.</p>
</li>
<li>
<p>Schema documents to be used in the session are loaded in advance.</p>
</li>
<li>
<p>The instance document to be validated is first parsed with the XML parser.</p>
</li>
<li>
<p>The top of the XML element subtree for the instance is then passed to the schema validate function.</p>
</li>
<li>
<p>If no explicit schema is defined in the instance document, any pre-loaded schemas will be used.</p>
</li>
<li>
<p>More documents can then be validated using the same schema context.</p>
</li>
<li>
<p>When the session is over, the Schema tear-down function is called, which releases all memory allocated for the loaded schemas.</p>
</li>
</ol>
<div id="ADXDK19813" class="figure">
<p class="titleinfigure"><a id="i1008723"></a>Figure 20-1 XML Schema Processor for C Usage Diagram</p>
<img width="548" height="447" src="img/adxdk092.gif" alt="Description of Figure 20-1 follows" /><br />
<a id="sthref533" href="img_text/adxdk092.htm">Description of "Figure 20-1 XML Schema Processor for C Usage Diagram"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect1" -->
<a id="i1008776"></a>
<div id="ADXDK19814" class="sect1">
<h2 class="sect1">How to Run XML Schema for C Sample Programs<a id="sthref534"></a><a id="sthref535"></a><a id="sthref536"></a><a id="sthref537"></a><a id="sthref538"></a></h2>
<p>The directory <code dir="ltr">xdk/demo/c/schema</code> contains sample XML Schema applications that illustrate how to use Oracle XML Schema processor with its API. <a href="#g1010135">Table 20-3</a> lists the provided sample files.</p>
<div id="ADXDK19815" class="tblformal">
<p class="titleintable"><a id="sthref539"></a><a id="g1010135"></a>Table 20-3 XML Schema for C Samples Provided</p>
<table class="cellalignment1214" title="XML Schema for C Samples Provided " summary="Sample File and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Sample File</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<p class="synopsis"><code dir="ltr">Makefile</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>Makefile to build the sample programs and run them, verifying correct output.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<p class="synopsis"><code dir="ltr">xsdtest.c</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>Program which invokes the XML Schema for C API</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<p class="synopsis"><code dir="ltr">car.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>Sample schema, instance document, and expected output respectively, after running <code dir="ltr">xsdtest</code> on them.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<p class="synopsis"><code dir="ltr">aq.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>Second sample schema, instance document, and expected output respectively, after running <code dir="ltr">xsdtest</code> on them.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<p class="synopsis"><code dir="ltr">pub.{xsd,xml,std}</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>Third sample schema, instance document, and expected output respectively, after running <code dir="ltr">xsdtest</code> on them.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To build the sample programs, run <code dir="ltr">make</code>.</p>
<p>To build the programs and run them, comparing the actual output to expected output:</p>
<pre dir="ltr">
make sure
</pre></div>
<!-- class="sect1" -->
<a id="BEJEDBBJ"></a>
<div id="ADXDK19004" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">What is the <a id="sthref540"></a>Streaming Validator?</h2>
<p>The streaming validator was introduced in Oracle Database 11<span class="italic">g</span> Release 1 (11.1). It uses XML Events, which is a representation of an XML document that is similar to SAX Events. XML events has a start tag, end tag, and comment. The producer drives the SAX events and the consumer drives the XML events. The streaming validator shares software with the older schema validator and derives most functionality from it. Memory overhead is less than for the DOM representation used in the older validator. Only one pass is made over the document.</p>
<p>There are two modes of streaming validation:</p>
<ul>
<li>
<p>Transparent mode - events are returned to the application.</p>
</li>
<li>
<p>Opaque mode - events are not returned to the application but an error indicating success or failure of the document validation process is returned.</p>
</li>
</ul>
<p>Before document validation, the regular validation context must be created, and the relevant schema must be loaded using this context. Then XML event context for pull parser (or for another event producer) must be created. This event context is then given to the streaming validator, so that it is able to request events from the producer.</p>
<p>Passing in a schema DOM to the <code dir="ltr">XmlSchemaLoad</code> API is also supported.</p>
<div id="ADXDK19816" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref541"></a>
<h3 class="sect2"><a id="sthref542"></a>Using Transparent Mode</h3>
<p>An application starts with a call to <code dir="ltr">XmlEvCreateSVCtx(</code>). This call creates and returns an event context of type <code dir="ltr">xmlctx</code>, which must be passed on all subsequent calls to the streaming validator. The event context created must be terminated by a call to <code dir="ltr">XmlEvDestroyCtx()</code>.</p>
<p>After creation of the event context, the application repeatedly advances validation to the next event by issuing calls to <code dir="ltr">XmlEvNext()</code>, which returns the type of the next event. Additional API interfaces allow the application to retrieve information relevant to the last event.</p>
<div id="ADXDK19817" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref543"></a>
<h4 class="sect3">Error Handling in Transparent Mode</h4>
<p>There is no notion of a valid event. Validity is the property of a document and not of the individual items and events of the document. The errors are:</p>
<ul>
<li>
<p><code dir="ltr">XML_EVENT_FATAL_ERROR</code> - When the producer of XML events reports this error, the streaming validator returns this event back to the application and stops the validation process.</p>
</li>
<li>
<p><code dir="ltr">XML_EVENT_ERROR</code> - The streaming validator returns this event to the application when a validation error occurs. The application can then call <code dir="ltr">XmlEvGetError()</code> to get more information about the error.</p>
</li>
</ul>
<p>If the application does not receive any <code dir="ltr">XML_EVENT_ERROR</code> or <code dir="ltr">XML_EVENT_FATAL_ERROR</code> events, the document is valid. Therefore, the application must handle these events and not ignore them.</p>
<p>These errors are not cached and the associated information is not available for later retrieval.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19818" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref544"></a>
<h4 class="sect3">Streaming Validator Example</h4>
<p>Here is an example in transparent mode:</p>
<div id="ADXDK19819" class="example">
<p class="titleinexample"><a id="sthref545"></a>Example 20-1 Streaming Validator in Transparent Mode</p>
<pre dir="ltr">
# include "xmlev.h"
...
xmlevctx *ppevtcx, *svevctx;
xmlctx *xctx
xsdctx *sctx;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) "test")))
    printf("Failed to create XML context, error %u\n",
                        (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf("Failed to create schema context, error %u\n",
                        (unsigned) xerr);
 
...
If (xerr = XmlSchemaLoad(sctx, "my_schema.xsd", NULL))
    printf("Failed to load schema, error %u\n",
                        (unsigned) xerr);

if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, NULL)))
   printf("Failed to create EVENT context, error %u\n",
                        (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, "file", "test.xml", 0, NULL))
   printf("Failed to load Document, error %u\n",
                        (unsigned) xerr);
 
...
If(!(svevctx = XmlEvCreateSVCtx(xctx, sctx, ppevctx, &amp;xerr)))
   printf("Failed to create SVcontext, error %u\n",
                        (unsigned) xerr);
...
for(;;)
{
   xmlevtype cur_event;
   cur_event = XmlEvNext(svevctx);
   switch(cur_event)
    {
        case XML_EVENT_FATAL_ERROR:
           printf("FATAL ERROR");
           /* error processing goes here */
           return;
        case XML_EVENT_ERROR:
           XmlEvGetError(svevctx, oratext *msg);
           printf("Validation Failed, Error %s\n", msg);
           break;
        case XML_EVENT_START_ELEMENT:
           printf("&lt;%s&gt;", XmlEvGetName(svevctx));
           break;
...
        case XML_EVENT_END_DOCUMENT:
           printf("END DOCUMENT");
           return;
    }
}
...
XmlEvDestroySVCtx(svevctx); 
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDK19820" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref546"></a>
<h3 class="sect2"><a id="sthref547"></a>Using Opaque Mode</h3>
<p>In opaque mode, the streaming validator reads the instance document to be validated as a sequence of events from the producer, but does not pass the events to the application (consumer). It returns <code dir="ltr">XMLERR_OK</code> on success and an error number on failure.</p>
<p>After the schema has been loaded and the XML Events context has been initialized, the application can validate the document in this mode with a call to <code dir="ltr">XmlEvSchemaValidate()</code>. The signature of this function will take a pointer to the events context. The declaration is as follows:</p>
<pre dir="ltr">
xmlerr XmlEvSchemaValidate(xmlctx *xctx, xsdctx *sctx, xmlevctx *evctx, 
       oratext **errmsg);
/* Returns (xmlerr), the error code */
</pre>
<div id="ADXDK19821" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref548"></a>
<h4 class="sect3">Error Handling in Opaque Mode</h4>
<p>When the streaming validator encounters an error, <code dir="ltr">XmlEvSchemaValidate()</code> returns an error number. This could be because of a parse error or a validation error. The application can then use the existing <code dir="ltr">XmlEvGetError</code> APIs to get the error message. The error message is parameterized and typically has all the errors leading up to the point where the streaming validator terminated.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19822" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref549"></a>
<h4 class="sect3">Example of Opaque Mode Application</h4>
<p>Here is an example in opaque mode:</p>
<div id="ADXDK19823" class="example">
<p class="titleinexample"><a id="sthref550"></a>Example 20-2 Example of Streaming Validator in Opaque Mode</p>
<pre dir="ltr">
# include "xmlev.h"
...
xmlevctx *ppevtcx;
xmlctx   *xctx;
xsdctx   *sctx;
oratext  **errmsg;
xmlerr   xerr;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) "test"))
      printf("Failed to create XML context, error %u\n", (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
      printf("Failed to create schema context, error %u\n", (unsigned) xerr);
 
...
if (xerr = XmlSchemaLoad(sctx, "my_schema.xsd", NULL))
    printf("Failed to load schema, error %u\n", (unsigned) xerr);
 
if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, NULL)))
     printf("Failed to create EVENT context, error %u\n", (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, "file", "test.xml", 0, NULL))
   printf("Failed to load Document, error %u\n", (unsigned) xerr);

if((xerr = XmlEvSchemaValidate(xctx, sctx, ppevctx, errmsg)))
{
  printf("Validation Failed, Error: %s\n", errmsg);
}
...
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDK19824" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref551"></a>
<h3 class="sect2">Enhancement of the Existing XmlSchemaLoad() Function</h3>
<p><code dir="ltr">XmlSchemaLoad()</code> was enhanced in Oracle Database 11<span class="italic">g</span> Release 1 (11.1) to work with an existing DOM. Previously, this function took two fixed arguments and a set of variable properties. The first argument is the schema context; the second is the URL location of the schema document. A new property was added to the set of variable arguments to provide access to the schema DOM given a URL. The property <code dir="ltr">schema_dom_callback</code> is a callback function provided by the application. If supplied, the schema load function will use this callback to access the DOM for the main schema as well as any included, imported, or redefined schemas. The callback signature is as follows:</p>
<pre dir="ltr">
typedef  xmldocnode* (*xmlsch_dom_callback) (xmlctx *xctx, oratext *uri, 
         xmlerr *xerr);
</pre>
<p>This callback accepts a URI (the schema load function will pass in the URI of the document desired) and returns the document node. An example follows:</p>
<div id="ADXDK19825" class="example">
<p class="titleinexample"><a id="sthref552"></a>Example 20-3 XmlSchemaLoad() Example</p>
<pre dir="ltr">
# include "xmlev.h"
...
xmlctx *xctx;
xsdctx *sctx;
xmldocnode *doc;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) "test"))
    printf("Failed to create XML context, error %u\n", (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf("Failed to create schema context, error %u\n", (unsigned) xerr);
...
If (xerr = XmlSchemaLoad(sctx, schema_uri, "schema_dom_callback", func1,  NULL))
    printf("Failed to load schema, error %u\n", (unsigned) xerr);
...
XmlSchemaDestroy(sctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="ADXDK19826" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref553"></a>
<h3 class="sect2">Validation Options</h3>
<p>You can supply options to the validation process using <code dir="ltr">XmlSchemaSetValidateOptions()</code>. For example:</p>
<pre dir="ltr">
XmlSchemaSetValidateOptions(scctx, "ignore_id_constraint", (boolean)TRUE, NULL);
</pre>
<p>The options are:</p>
<ul>
<li>
<p><code dir="ltr">ignore_id_constraint</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code dir="ltr">ignore_sch_location</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code dir="ltr">ignore_par_val_rest</code> (existing before Oracle Database 11<span class="italic">g</span> Release 1 (11.1))</p>
</li>
<li>
<p><code dir="ltr">ignore_pattern_check</code>: When this property is <code dir="ltr">TRUE</code>, the streaming validator ignores pattern-facet checks. The default is <code dir="ltr">FALSE</code>.</p>
</li>
<li>
<p><code dir="ltr">no_events_for_defaults</code>: When this property is <code dir="ltr">TRUE</code>, the streaming validator will not return events for default values added to the instance document. <span class="italic">This option can be used in the transparent case only.</span></p>
</li>
</ul>
<div id="ADXDK19827" class="example">
<p class="titleinexample"><a id="sthref554"></a>Example 20-4 Example of Streaming Validator Using New Options</p>
<pre dir="ltr">
# include "xmlev.h"
...
xmlevctx *ppevtcx;
xmlctx   *xctx;
xsdctx   *sctx;
xmlerr   xerr;
oratext  **errmsg;
 
if (!(xctx = XmlCreate(&amp;xerr, (oratext *) "test"))
    printf("Failed to create XML context, error %u\n", (unsigned) xerr);
...
if (!(sctx = XmlSchemaCreate(xctx, &amp;xerr, NULL))) 
    printf("Failed to create schema context, error %u\n", (unsigned) xerr);
...
If (xerr = XmlSchemaLoad(sctx, "my_schema.xsd", NULL))
    printf("Failed to load schema, error %u\n", (unsigned) xerr);
if(!(ppevctx = XmlEvCreatePPCtx(xctx, &amp;xerr, "file", "test.xml", NULL)))
   printf("Failed to create EVENT context, error %u\n", (unsigned) xerr);
 
if(xerr = XmlEvLoadPPDoc(xctx, ppevctx, "file", "test.xml", 0, NULL))
   printf("Failed to load Document, error %u\n", (unsigned) xerr);
 
XmlSchemaSetValidateOptions(sctx, "ignore_id_constraint", TRUE,
                                  "ignore_pattern_facet", TRUE, NULL);
if((xerr = XmlEvSchemaValidate(xctx,sctx, ppevctx, errmsg)))
{
  printf("Validation Failed, Error: %s\n", errmsg);
}
...
XmlSchemaDestroy(sctx);
XmlEvDestroyCtx(ppevctx);
XmlDestroyCtx(xctx);
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_c_xmlbin.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_c_diff.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
