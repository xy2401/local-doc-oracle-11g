<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XSLT and XVM Processors for C</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:38Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_c_gs.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_c_parser.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">26/47</span> <!-- End Header -->
<div id="ADXDK1500" class="chapter"><a id="g1021983"></a> <a id="i1020191"></a>
<h1 class="chapter"><span class="secnum">17</span> Using the XSLT and XVM Processors for C</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1020483">XVM Processor</a></p>
</li>
<li>
<p><a href="#i1005205">XSLT Processor</a></p>
</li>
<li>
<p><a href="#i1018714">Using the Demo Files Included with the Software</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Use the new unified C API for new XDK and Oracle XML DB applications. The old C functions are deprecated and supported only for backward compatibility, but will not be enhanced. They will be removed in a future release.
<p>The new C API is described in <a href="adx_c_parser.htm#i451906">Chapter 18, "Using the XML Parser for C"</a>.</p>
</div>
<a id="i1020483"></a>
<div id="ADXDK19736" class="sect1">
<h2 class="sect1">XVM <a id="sthref479"></a><a id="sthref480"></a>Processor</h2>
<p>The Oracle XVM Package implements the XSL Transformation (XSLT) language as specified in the W3C Recommendation of 16 November 1999. The package includes XSLT Compiler and XSLT Virtual Machine (XVM). The implementation by Oracle of the XSLT compiler and the XVM enables compilation of XSLT (Version 1.0) into bytecode format, which is executed by the virtual machine. XSLT Virtual Machine is the software implementation of a "CPU" designed to run compiled XSLT code. The virtual machine assumes a compiler compiling XSLT stylesheets to a sequence of bytecodes or machine instructions for the "XSLT CPU". The bytecode program is a platform-independent sequence of 2-byte units. It can be stored, cached and run on different XVMs. The XVM uses the bytecode programs to transform instance XML documents. This approach clearly separates compile-time from run-time computations and specifies a uniform way of exchanging data between instructions. The benefits of this approach are:</p>
<ul>
<li>
<p>An XSLT stylesheet can be compiled, saved in a file, and re-used often, even on different platforms.</p>
</li>
<li>
<p>The XVM is significantly faster and uses less memory than other XSLT processors.</p>
</li>
<li>
<p>The bytecodes are not language-dependent. There is no difference between code generated from a C or C++ XSLT compiler.</p>
</li>
</ul>
<div id="ADXDK19737" class="sect2"><a id="sthref481"></a>
<h3 class="sect2">XVM Usage Example</h3>
<p>A typical scenario of using the package APIs has the following steps:</p>
<ol>
<li>
<p>Create and use an XML meta-context object.</p>
<pre dir="ltr">
xctx = XmlCreate(&amp;err,...);
</pre></li>
<li>
<p>Create and use an XSLT compiler object.</p>
<pre dir="ltr">
comp = XmlXvmCreateComp(xctx);
</pre></li>
<li>
<p>Compile an XSLT stylesheet or XPath expression and store or cache the resulting bytecode.</p>
<pre dir="ltr">
code = XmlXvmCompileFile(comp, xslFile, baseuri, flags, &amp;err);
</pre>
<p>or</p>
<pre dir="ltr">
code = XmlXvmCompileDom (comp, xslDomdoc, flags, &amp;err);
</pre>
<p>or</p>
<pre dir="ltr">
code = XmlXvmCompileXPath (comp, xpathexp,  namespaces, &amp;err);
</pre></li>
<li>
<p>Create and use an XVM object. The explicit stack size setting is needed when XVM terminates with a "Stack Overflow" message or when smaller memory footprints are required. See <code dir="ltr">XmlXvmCreate()</code>.</p>
<pre dir="ltr">
vm = XmlXvmCreate(xctx, "StringStack", 32, "NodeStack", 24, NULL);
</pre></li>
<li>
<p>Set the output (optional). Default is a stream.</p>
<pre dir="ltr">
err = XmlXvmSetOutputDom (vm, NULL);
</pre>
<p>or</p>
<pre dir="ltr">
err = XmlXvmSetOutputStream(vm, &amp;xvm_stream);
</pre>
<p>or</p>
<pre dir="ltr">
err = XmlXvmSetOutputSax(vm, &amp;xvm_callback, NULL);
</pre></li>
<li>
<p>Set a stylesheet bytecode to the XVM object. Can be repeated with other bytecode.</p>
<pre dir="ltr">
len = XmlXvmGetBytecodeLength(code, &amp;err);
err = XmlXvmSetBytecodeBuffer(vm, code, len);
</pre>
<p>or</p>
<pre dir="ltr">
err = XmlXvmSetBytecodeFile (vm, xslBytecodeFile);
</pre></li>
<li>
<p>Transform an instance XML document or evaluate a compiled XPath expression. Can be repeated with the same or other XML documents.</p>
<pre dir="ltr">
err = XmlXvmTransformFile(vm, xmlFile, baseuri);
</pre>
<p>or</p>
<pre dir="ltr">
err = XmlXvmTransformDom (vm, xmlDomdoc);
</pre>
<p>or</p>
<pre dir="ltr">
obj  = (xvmobj*)XmlXvmEvaluateXPath (vm, code, 1, 1, node);
</pre></li>
<li>
<p>Get the output tree fragment (if DOM output is set at step 5).</p>
<pre dir="ltr">
node = XmlXvmGetOutputDom (vm);
</pre></li>
<li>
<p>Delete the objects.</p>
<pre dir="ltr">
XmlXvmDestroy(vm);
XmlXvmDestroyComp(comp);
XmlDestroy(xctx);
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDHHCBE"></a>
<div id="ADXDK19738" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref482"></a>Using the XVM Processor Command-Line Utility</h3>
<p>The XVM processor is accessed from the command line this way:</p>
<pre dir="ltr">
xvm
</pre>
<p>Usage:</p>
<pre dir="ltr">
xvm <span class="italic">options xslfile xmlfile</span>
</pre>
<pre dir="ltr">
xvm <span class="italic">options xpath xmlfile</span>
</pre>
<pre dir="ltr">
</pre>
<p>Options:</p>
<pre dir="ltr">
-c        Compile <span class="italic">xslfile</span>. The bytecode is in <span class="italic">"xmlfile.xvm"</span>.
-ct       Compile <span class="italic">xslfile</span> and transform <span class="italic">xmlfile</span>.
-t        Transform <span class="italic">xmlfile</span> using bytecode from <span class="italic">xslfile</span>.
-xc       Compile <span class="italic">xpath</span>. The bytecode is in "code.xvm".
-xct      Compile and evaluate <span class="italic">xpath</span> with <span class="italic">xmlfile</span>.
-xt       Evaluate XPath bytecode from <span class="italic">xpath</span> with <span class="italic">xmlfile</span>.
</pre>
<pre dir="ltr">
</pre>
<p>Examples:</p>
<pre dir="ltr">
xvm -ct  db.xsl db.xml
xvm -t   db.xvm db.xml
xvm -xct "doc/employee[15]/family" db.xml
</pre></div>
<!-- class="sect2" -->
<a id="i1004650"></a>
<div id="ADXDK19739" class="sect2">
<h3 class="sect2">Accessing XVM Processor for C</h3>
<p>Oracle XVM Processor for C is part of the standard installation of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CAXML00900" href="../../appdev.112/e10770/xsltvm.htm#CAXML00900"><span class="italic">Oracle Database XML C API Reference</span></a> "XSLTVM APIs for C"</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.oracle.com/technetwork/database-features/xdk/overview/index.html">http://www.oracle.com/technetwork/database-features/xdk/overview/index.html</a></code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1005205"></a>
<div id="ADXDK19740" class="sect1">
<h2 class="sect1"><a id="sthref483"></a>XSLT Processor</h2>
<p>The Oracle XSL/XPath Package implements the XSL Transformation (XSLT) language as specified in the W3C Recommendation of 16 November 1999. The package includes the XSLT processor and XPath Processor. The Oracle implementation of the XSLT processor follows the more common design approach, which melts 'compiler' and 'processor' into one object.</p>
<div id="ADXDK19741" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref484"></a>
<h3 class="sect2">XSLT Processor Usage Example</h3>
<p>A typical scenario of using the package APIs has the following steps:</p>
<ol>
<li>
<p>Create and use an XML meta-context object.</p>
<pre dir="ltr">
xctx = XmlCreate(&amp;err,...);
</pre></li>
<li>
<p>Parse the XSLT stylesheet.</p>
<pre dir="ltr">
xslDomdoc = XmlLoadDom(xctx, &amp;err, "file", xslFile, "base_uri", baseuri, NULL);
</pre></li>
<li>
<p>Create an XSLT processor for the stylesheet</p>
<pre dir="ltr">
xslproc = XmlXslCreate (xctx, xslDomdoc, baseuri, &amp;err);
</pre></li>
<li>
<p>Parse the instance XML document.</p>
<pre dir="ltr">
xmlDomdoc = XmlLoadDom(xctx, &amp;err, "file", xmlFile,  "base_uri", baseuri, NULL);
</pre></li>
<li>
<p>Set the output (optional). Default is DOM.</p>
<pre dir="ltr">
err = XmlXslSetOutputStream(xslproc, &amp;stream);
</pre></li>
<li>
<p>Transform the XML document. This step can be repeated with the same or other XML documents.</p>
<pre dir="ltr">
err = XmlXslProcess (xslproc, xmlDomdoc, FALSE);
</pre></li>
<li>
<p>Get the output (if DOM).</p>
<pre dir="ltr">
node = XmlXslGetOutput(xslproc);
</pre></li>
<li>
<p>Delete objects.</p>
<pre dir="ltr">
XmlXslDestroy(xslproc);
XmlDestroy(xctx);
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADXDK19742" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref485"></a>
<h3 class="sect2">XPath Processor Usage Example</h3>
<p>A typical scenario of using the package APIs has the following steps:</p>
<ol>
<li>
<p>Create and use an XML meta-context object.</p>
<pre dir="ltr">
xctx = XmlCreate(&amp;err,...);
</pre></li>
<li>
<p>Parse the XML document or get the current node from already existing DOM.</p>
<pre dir="ltr">
node = XmlLoadDom(xctx, &amp;err, "file", xmlFile,  "base_uri", baseuri, NULL);
</pre></li>
<li>
<p>Create an XPath processor.</p>
<pre dir="ltr">
xptproc = XmlXPathCreateCtx(xctx, NULL, node, 0, NULL);
</pre></li>
<li>
<p>Parse the XPath expression.</p>
<pre dir="ltr">
exp = XmlXPathParse (xptproc, xpathexpr, &amp;err);
</pre></li>
<li>
<p>Evaluate the XPath expression.</p>
<pre dir="ltr">
obj = XmlXPathEval(xptproc, exp, &amp;err);
</pre></li>
<li>
<p>Delete the objects.</p>
<pre dir="ltr">
XmlXPathDestroyCtx (xptproc);
XmlDestroy(xctx);
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BHAIJJDC"></a>
<div id="ADXDK19743" class="sect2">
<h3 class="sect2">Using the C XSLT Processor Command-Line Utility</h3>
<p>You can call the C Oracle XSLT processor as an executable by invoking <code dir="ltr">bin/xsl:</code></p>
<pre dir="ltr">
xsl [switches] <span class="italic">stylesheet</span> <span class="italic">instance</span>
or
xsl -f [switches] [<span class="italic">document filespec</span>]
</pre>
<p>If no style sheet is provided, no output is generated. If there is a style sheet, but no output file, output goes to <code dir="ltr">stdout</code>.</p>
<p><a href="#BABJGHGF">Table 17-1</a> lists the command-line options.</p>
<div id="ADXDK19744" class="tblformal">
<p class="titleintable"><a id="sthref486"></a><a id="BABJGHGF"></a>Table 17-1 XSLT Processor for C: Command-Line Options</p>
<table class="cellalignment1214" title="XSLT Processor for C: Command-Line Options " summary="Options and descriptions of XSL Processor for C." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t4">Option</th>
<th class="cellalignment1212" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-B <span class="italic">BaseUri</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t4 r1c2-t4">
<p>Set the Base URI for XSLT processor: <code dir="ltr">BaseUri</code> of <code dir="ltr">http://pqr/xsl.txt</code> resolves <code dir="ltr">pqr.txt</code> to <code dir="ltr">http://pqr/pqr.txt</code></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-e <span class="italic">encoding</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t4 r1c2-t4">
<p>Specify default input file encoding (<code dir="ltr">-ee</code> to force).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-E <span class="italic">encoding</span>
</pre></td>
<td class="cellalignment1213" headers="r4c1-t4 r1c2-t4">
<p>Specify DOM or SAX encoding.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-f
</pre></td>
<td class="cellalignment1213" headers="r5c1-t4 r1c2-t4">
<p>File - interpret as filespec, not URI.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-G <span class="italic">xptrexprs</span>
</pre></td>
<td class="cellalignment1213" headers="r6c1-t4 r1c2-t4">
<p>Evaluates XPointer schema examples given in a file.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-h
</pre></td>
<td class="cellalignment1213" headers="r7c1-t4 r1c2-t4">
<p>Help - show this usage. (Use <code dir="ltr">-hh</code> for more options.)</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-hh
</pre></td>
<td class="cellalignment1213" headers="r8c1-t4 r1c2-t4">
<p>Show complete options list.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-i <span class="italic">n</span>
</pre></td>
<td class="cellalignment1213" headers="r9c1-t4 r1c2-t4">
<p>Number of times to iterate the XSLT processing.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-l <span class="italic">language</span>
</pre></td>
<td class="cellalignment1213" headers="r10c1-t4 r1c2-t4">
<p>Language for error reporting.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-o <span class="italic">XSLoutfile</span>
</pre></td>
<td class="cellalignment1213" headers="r11c1-t4 r1c2-t4">
<p>Specifies output file of XSLT processor.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-v
</pre></td>
<td class="cellalignment1213" headers="r12c1-t4 r1c2-t4">
<p>Version - display parser version then exit.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-V <span class="italic">var value</span>
</pre></td>
<td class="cellalignment1213" headers="r13c1-t4 r1c2-t4">
<p>Test top-level variables in C XSLT.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-w
</pre></td>
<td class="cellalignment1213" headers="r14c1-t4 r1c2-t4">
<p>Whitespace - preserve all whitespace.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t4" headers="r1c1-t4">
<pre dir="ltr">
-W
</pre></td>
<td class="cellalignment1213" headers="r15c1-t4 r1c2-t4">
<p>Warning - stop parsing after a warning.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<div id="ADXDK19745" class="sect2"><a id="sthref487"></a>
<h3 class="sect2">Accessing Oracle XSLT processor for C</h3>
<p>Oracle XSLT processor for C is part of the standard installation of Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CAXML00800" href="../../appdev.112/e10770/xslt.htm#CAXML00800"><span class="italic">Oracle Database XML C API Reference</span></a> "XSLT APIs for C"</p>
</li>
<li>
<p><a class="olink CAXML00700" href="../../appdev.112/e10770/xpath.htm#CAXML00700"><span class="italic">Oracle Database XML C API Reference</span></a> "XPath APIs for C"</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.oracle.com/technetwork/database-features/xdk/overview/index.html">http://www.oracle.com/technetwork/database-features/xdk/overview/index.html</a></code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1018714"></a>
<div id="ADXDK19746" class="sect1">
<h2 class="sect1">Using the Demo Files Included with the Software</h2>
<p><code dir="ltr">$ORACLE_HOME/xdk/demo/c/parser/</code> directory contains several XML applications to illustrate how to use the XSLT for C.</p>
<p><a href="#CHDDEEHF">Table 17-2</a> lists the files in that directory:</p>
<div id="ADXDK19747" class="tblformal">
<p class="titleintable"><a id="sthref488"></a><a id="CHDDEEHF"></a>Table 17-2 XSLT for C Demo Files</p>
<table class="cellalignment1214" title="XSLT for C Demo Files " summary="Sample File Name and description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t6">Sample File Name</th>
<th class="cellalignment1212" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">XSLSample.c</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c2-t6">
<p>Source for XSLSample program</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">XSLSample.std</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c2-t6">
<p>Expected output from XSLSample</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">class.xml</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c2-t6">
<p>XML file that can be used with XSLSample</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t6" headers="r1c1-t6">
<p class="synopsis">i<code dir="ltr">den.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t6 r1c2-t6">
<p>Stylesheet that can be used with XSLSample</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">cleo.xml</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t6 r1c2-t6">
<p>XML version of Shakespeare's play</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">XVMSample.c</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t6 r1c2-t6">
<p>Sample usage of XSLT Virtual Machine and compiler. It takes two filenames as input - XML file and XSLT stylesheet file.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">XVMXPathSample.c</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t6 r1c2-t6">
<p>Sample usage of XSLT Virtual Machine and compiler. It takes XML file name and <code dir="ltr">XPath</code> expression as input. Generates the result of the evaluated <code dir="ltr">XPath</code> expression.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t6" headers="r1c1-t6">
<p class="synopsis"><code dir="ltr">XSLXPathSample.c</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t6 r1c2-t6">
<p>Sample usage of <code dir="ltr">XSL/XPath</code> processor. It takes XML file name and <code dir="ltr">XPath</code> expression as input. Generates the result of the evaluated <code dir="ltr">XPath</code> expression.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ADXDK19748" class="sect2"><a id="sthref489"></a>
<h3 class="sect2"><a id="sthref490"></a><a id="sthref491"></a><a id="sthref492"></a><a id="sthref493"></a><a id="sthref494"></a>Building the C Demo Programs for XSLT</h3>
<p>Change directories to the demo directory and read the README file. This will explain how to build the sample programs according to your operating system.</p>
<p>Here is the usage of XSLT processor sample <code dir="ltr">XSLSample</code>, which takes two files as input, the XML file and the XSLT stylesheet:</p>
<pre dir="ltr">
XSLSample <span class="italic">xmlfile</span> <span class="italic">xslss</span>
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_c_gs.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_c_parser.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
