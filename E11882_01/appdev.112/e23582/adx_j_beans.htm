<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using XDK JavaBeans</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_pipeline.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_xsu.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/47</span> <!-- End Header -->
<div id="ADXDK1000" class="chapter"><a id="g1016874"></a> <a id="i1010425"></a>
<h1 class="chapter"><span class="secnum">10</span> Using XDK JavaBeans</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CIHIFDDG">Introduction to XDK JavaBeans</a></p>
</li>
<li>
<p><a href="#CIHIHDCH">Using the XDK JavaBeans: Overview</a></p>
</li>
<li>
<p><a href="#CIHIFBEC">Processing XML with the XDK JavaBeans</a></p>
</li>
</ul>
<a id="CIHIFDDG"></a>
<div id="ADXDK19347" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to XDK JavaBeans</h2>
<p>The Oracle XML JavaBeans are a set of XML components that you can use in Java applications and applets.</p>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABDCEGH">Prerequisites</a></p>
</li>
<li>
<p><a href="#CIHIJHBE">Standards and Specifications</a></p>
</li>
<li>
<p><a href="#CIHEIGGF">XDK JavaBeans Features</a></p>
</li>
</ul>
<a id="BABDCEGH"></a>
<div id="ADXDK19348" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>This chapter assumes that you are familiar with the following technologies:</p>
<ul>
<li>
<p><a href="glossary.htm#i999031"><span class="xrefglossterm">JavaBeans</span></a>. JavaBeans components, or Beans, are reusable software components that can be manipulated visually in a builder tool.</p>
</li>
<li>
<p><a href="glossary.htm#i999282"><span class="xrefglossterm">Java Database Connectivity (JDBC)</span></a>. Database connectivity is included with the XDK JavaBeans. The beans can connect directly to a JDBC-enabled database to retrieve and store XML and XSL files.</p>
</li>
<li>
<p><a href="glossary.htm#CBAGDBJI"><span class="xrefglossterm">Document Object Model (DOM)</span></a>. DOM is an in-memory tree representation of the structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#CBAFICHD"><span class="xrefglossterm">Simple API for XML (SAX)</span></a>. SAX is a standard for event-based XML parsing.</p>
</li>
<li>
<p><a href="glossary.htm#CBAEDDHJ"><span class="xrefglossterm">XML Schema language</span></a>. Refer to <a href="adx_j_sproc.htm#i1003036">Chapter 7, "Using the Schema Processor for Java"</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHIJHBE"></a>
<div id="ADXDK19349" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standards and Specifications</h3>
<p>The XDK JavaBeans require version 1.2 or higher of the XDK and can be used with any version of JDK 1.2 or above. All of the XDK beans conform to the Sun JavaBeans specification and include the required <code dir="ltr">BeanInfo</code> class that extends <code dir="ltr">java.beans.SimpleBeanInfo</code>.</p>
<p>The JavaBeans 1.01 specification, which describes JavaBeans as present in JDK 1.1, is available at the following URL:</p>
<pre dir="ltr">
<a href="http://www.oracle.com/technetwork/java/index.html">http://www.oracle.com/technetwork/java/index.html</a>
</pre>
<p>The additions for the Java 2 platform to the JavaBeans core specification provide developers with standard means to create more sophisticated JavaBeans components. The JavaBeans specifications for Java 2 are available at the following URL:</p>
<pre dir="ltr">
<a href="http://www.oracle.com/technetwork/java/index.html">http://www.oracle.com/technetwork/java/index.html</a>
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_standards.htm#BABDIIJG">Chapter 31, "XDK Standards"</a> for a summary of the standards supported by the XDK</div>
</div>
<!-- class="sect2" -->
<a id="CIHEIGGF"></a>
<div id="ADXDK19350" class="sect2">
<h3 class="sect2">XDK JavaBeans Features</h3>
<p>The Oracle XDK JavaBeans facilitate the addition of GUIs to XML applications. Bean encapsulation includes documentation and descriptors that you can access directly from Java IDEs such as Oracle JDeveloper.</p>
<p>The XDK includes the following beans:</p>
<ul>
<li>
<p><a href="#CIHBIHDE">DOMBuilder</a></p>
</li>
<li>
<p><a href="#CIHCJDIJ">XSLTransformer</a></p>
</li>
<li>
<p><a href="#CIHDDEEB">DBAccess</a></p>
</li>
<li>
<p><a href="#CIHBBFJI">XMLDiff</a></p>
</li>
<li>
<p><a href="#CIHCDEFH">XMLCompress</a></p>
</li>
<li>
<p><a href="#CIHHFFGE">XMLDBAccess</a></p>
</li>
<li>
<p><a href="#CIHEHHIH">XSDValidator</a></p>
</li>
</ul>
<a id="CIHBIHDE"></a>
<div id="ADXDK19351" class="sect3">
<h4 class="sect3"><a id="sthref236"></a>DOMBuilder</h4>
<p>The <code dir="ltr">oracle.xml.async.DOMBuilder</code> bean constructs a DOM tree from an XML document. The <code dir="ltr">DOMBuilder</code> JavaBean encapsulates the XML parser for Java <code dir="ltr">DOMParser</code> class with a bean interface and enhances by supporting asynchronous parsing. By registering a listener, Java programs can initiate parsing of large or successive documents and immediately return control to the caller.</p>
<p>One of the main benefits of this bean is increased efficiency when parsing multiple files, especially if the files are large. <code dir="ltr">DOMBuilder</code> can also provide asynchronous parsing in a background thread in interactive visual applications. Without asynchronous parsing, the GUI is useless until the document to be parsed. With DOMBuilder, the application calls the parse method and then resumes control. The application can display a progress bar, allow the user to cancel the parse, and so forth.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHBDGAI">"Using the DOMBuilder JavaBean: Basic Process"</a></div>
</div>
<!-- class="sect3" -->
<a id="CIHCJDIJ"></a>
<div id="ADXDK19352" class="sect3">
<h4 class="sect3"><a id="sthref237"></a>XSLTransformer</h4>
<p>The <code dir="ltr">oracle.xml.async.XSLTransformer</code> bean supports asynchronous transformation. It accepts an XML document, applies an XSLT stylesheet, and creates an output file. The <code dir="ltr">XSLTransformer</code> JavaBean enables you to transform an XML document to almost any text-based format, including XML, HTML, and DDL. This bean can also be used as the basis of a server-side application or servlet to render an XML document, such as an XML representation of a query result, into HTML for display in a browser.</p>
<p>The main benefit of the <code dir="ltr">XSLTransformer</code> bean is that it can transform multiple files in parallel. Like <code dir="ltr">DOMBuilder</code>, you can also use it in visual applications to avoid long periods of time when the GUI is nonresponsive. By implementing the XSLTransformerListener interface, the calling application receives notification when the transformation completes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHHCJJF">"Using the XSLTransformer JavaBean: Basic Process"</a></div>
</div>
<!-- class="sect3" -->
<a id="CIHDDEEB"></a>
<div id="ADXDK19353" class="sect3">
<h4 class="sect3"><a id="sthref238"></a>DBAccess</h4>
<p>The <code dir="ltr">oracle.xml.dbaccess.DBAccess</code> bean maintains <code dir="ltr">CLOB</code> tables that contain multiple XML and text documents. You can use it when you need to store and retrieve XML documents in the database, but do not need to process them within the database. Java applications that use the DBAccess bean connect to the database through JDBC. Note that XML documents stored in <code dir="ltr">CLOB</code> tables that are not of type <code dir="ltr">XMLType</code> do not have their entities expanded.</p>
<p>The <code dir="ltr">DBAccess</code> bean enables you to do perform the following tasks:</p>
<ul>
<li>
<p>Create and delete tables of type <code dir="ltr">CLOB</code>.</p>
</li>
<li>
<p>Query the contents of <code dir="ltr">CLOB</code> tables.</p>
</li>
<li>
<p>Perform <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> operations on XML documents stored in <code dir="ltr">CLOB</code> tables.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHHFFGE"></a>
<div id="ADXDK19354" class="sect3">
<h4 class="sect3"><a id="sthref239"></a>XMLDBAccess</h4>
<p>The <code dir="ltr">oracle.xml.xmldbaccess.XMLDBAccess</code> bean extends the <code dir="ltr">DBAccess</code> bean to support XML documents stored in <code dir="ltr">XMLType</code> tables. The class provides methods to list, delete, or retrieve <code dir="ltr">XMLType</code> instances and their tables. For example, the <code dir="ltr">getXMLXPathTextData()</code> method retrieves the value of an XPath expression from an XML document.</p>
<p><code dir="ltr">DBAccess</code> JavaBean maintains <code dir="ltr">XMLType</code> tables that can hold multiple XML and text documents. Each XML or text document is stored as a row in the table. The table is created with the following SQL statement:</p>
<pre dir="ltr">
CREATE TABLE (FILENAME   CHAR( ) UNIQUE, 
              FILEDATA   SYS.XMLType);
</pre>
<p>The <code dir="ltr">FILENAME</code> field holds a unique string used as a key to retrieve, update, or delete the row. Document text is stored in the <code dir="ltr">FILEDATA</code> field.</p>
<p>The <code dir="ltr">XMLDBAccess</code> bean performs the following tasks:</p>
<ul>
<li>
<p>Creates and deletes <code dir="ltr">XMLType</code> tables</p>
</li>
<li>
<p>Lists the contents of an <code dir="ltr">XMLType</code> column</p>
</li>
<li>
<p>Performs <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> operations on XML documents stored in <code dir="ltr">XMLType</code> tables</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIHHDDFI">"Using the XMLDBAccess JavaBean: Basic Process"</a></div>
</div>
<!-- class="sect3" -->
<a id="CIHBBFJI"></a>
<div id="ADXDK19355" class="sect3">
<h4 class="sect3"><a id="sthref240"></a>XMLDiff</h4>
<p>When comparing XML documents, it is usually unhelpful to compare them character by character. Most XML comparisons are concerned with differences in structure and significant textual content, not differences in whitespace. The <code dir="ltr">oracle.xml.differ.XMLDiff</code> bean performs the following useful tasks:</p>
<ul>
<li>
<p>Constructs and compares the DOM trees for two input XML documents and indicates whether the documents are different.</p>
</li>
<li>
<p>Provides a graphical display of the differences between two XML files. Specifically, you can see node insert, delete, modify, or move.</p>
</li>
<li>
<p>Generates an XSLT stylesheet that can convert one of the input XML documents into the other document.</p>
</li>
</ul>
<p>The <code dir="ltr">XMLDiff</code> bean is especially useful in pipeline applications. For example, an application could update an XML document, compare it with a previous version of the document, and store the XSLT stylesheet that shows the differences between them.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="adx_j_pipeline.htm#g1009877">Chapter 9, "Using the XML Pipeline Processor for Java"</a></p>
</li>
<li>
<p><a href="#CIHIJIHA">"Using the XMLDiff JavaBean: Basic Process"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHCDEFH"></a>
<div id="ADXDK19356" class="sect3">
<h4 class="sect3"><a id="sthref241"></a>XMLCompress</h4>
<p>As explained in <a href="adx_j_parser.htm#CCHJDAFB">"Compressing XML"</a>, the Oracle XML parser includes a compressor that can serialize XML document objects as binary streams. Although a useful tool, compression with XML parser has the following disadvantages:</p>
<ul>
<li>
<p>When XML data is deserialized, it must be reparsed.</p>
</li>
<li>
<p>The encapsulation of XML data in tags greatly increase its size.</p>
</li>
</ul>
<p>The <code dir="ltr">oracle.xml.xmlcomp.XMLCompress</code> bean is an encapsulation of the XML compression functionality. It provides the following advantages when serializing and deserializing XML:</p>
<ul>
<li>
<p>It encapsulates the method that serializes the DOM, which results in a stream.</p>
</li>
<li>
<p>XML processors can regenerate the DOM from the compressed stream without reparsing the XML.</p>
</li>
</ul>
<p>The bean supports compression and decompression of input XML parsed by <code dir="ltr">DOMParser</code> or <code dir="ltr">SAXParser</code>. DOM compression supports inputs of type <code dir="ltr">XMLType</code>, <code dir="ltr">CLOB</code>, and <code dir="ltr">BLOB</code>.</p>
<p>To use different parsing options, parse the document before input and then pass the <code dir="ltr">XMLDocument</code> object to the compressor bean. The compression factor is a rough value based on the file size of the input XML file and the compressed file. The limitation of the compression factor method is that it can only be used when the compression is performed with <code dir="ltr">java.io.File</code> objects as parameters.</p>
</div>
<!-- class="sect3" -->
<a id="CIHEHHIH"></a>
<div id="ADXDK19357" class="sect3">
<h4 class="sect3"><a id="sthref242"></a>XSDValidator</h4>
<p>The <code dir="ltr">oracle.xml.schemavalidator.XSDValidator</code> bean encapsulates the <code dir="ltr">XSDValidator</code> class and adds capabilities for validating a DOM tree. One of the most useful features of this bean concerns validation errors. If the application throws a validation error, the <code dir="ltr">getStackList()</code> method returns a list of DOM tree paths that lead to the invalid node. Nodes with errors are returned in a vector of stack trees in which the top element of the stack represents the root node. You can obtain child nodes by pulling them from the stack. To use <code dir="ltr">getStackList()</code> you must use instantiate the <code dir="ltr">java.util.Vector</code> and <code dir="ltr">java.util.Stack</code> classes.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIHDCH"></a>
<div id="ADXDK19358" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the XDK JavaBeans: Overview</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHEEJJE">Using the XDK JavaBeans: Basic Process</a></p>
</li>
<li>
<p><a href="#i1010270">Running the JavaBean Demo Programs</a></p>
</li>
</ul>
<a id="CIHEEJJE"></a>
<div id="ADXDK19359" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the XDK JavaBeans: Basic Process</h3>
<p>This section describes the program flow of Java applications that use the more useful beans: <code dir="ltr">DOMBuilder</code>, <code dir="ltr">XSLTransformer</code>, <code dir="ltr">XMLDBAccess</code>, and <code dir="ltr">XMLDiff</code>. The section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHBDGAI">Using the DOMBuilder JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="#CIHHCJJF">Using the XSLTransformer JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="#CIHHDDFI">Using the XMLDBAccess JavaBean: Basic Process</a></p>
</li>
<li>
<p><a href="#CIHIJIHA">Using the XMLDiff JavaBean: Basic Process</a></p>
</li>
</ul>
<a id="CIHBDGAI"></a>
<div id="ADXDK19360" class="sect3">
<h4 class="sect3">Using the DOMBuilder JavaBean: Basic Process</h4>
<p>The <code dir="ltr">DOMBuilder</code> class implements an XML 1.0 parser according to the W3C recommendation. It parses an XML document and builds a DOM tree. The parsing is done in a separate thread. The <code dir="ltr">DOMBuilderListener</code> interface must be used for notification when the tree is built.</p>
<p>When developing applications that use this bean, you should import the following subpackages:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.async</code>, which provides asynchronous Java beans for DOM building</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.parser.v2</code>, which provides APIs for SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code dir="ltr">oracle.xml.parser.v2</code> subpackage is described in detail in <a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a>. The most important DOM-related classes and interfaces in the <code dir="ltr">javax.xml.async</code> package are described in <a href="#CIHHCEDI">Table 10-1</a>.</p>
<div id="ADXDK19361" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref243"></a><a id="CIHHCEDI"></a>Table 10-1 javax.xml.async DOM-Related Classes and Interfaces</p>
<table class="cellalignment1211" title="javax.xml.async DOM-Related Classes and Interfaces" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DOMBuilder</code> class</p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>Encapsulates an XML parser to parse an XML document and build a DOM tree. The parsing is done in a separate thread. The <code dir="ltr">DOMBuilderListener</code> interface must be used for notification when the tree is built.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DOMBuilderEvent</code> class</p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>Instantiates the event object that <code dir="ltr">DOMBuilder</code> uses to notify all registered listeners about parse events.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DOMBuilderListener</code> interface</p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>Must be implemented so that the program can receive notifications about events during the asynchronous parsing. The class implementing this interface must be added to the <code dir="ltr">DOMBuilder</code> with the <code dir="ltr">addDOMBuilderListener()</code> method.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DOMBuildeErrorEvent</code> class</p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>Defines the error event that is sent when parse exception occurs.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">DOMBuilderErrorListener</code> interface</p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>Must be implemented so that the program can receive notifications when errors are found during parsing. The class implementing this interface must be added to the <code dir="ltr">DOMBuilder</code> with the <code dir="ltr">addDOMBuilderErrorListener()</code> method.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p><a href="#CIHJFBJC">Figure 10-1</a> depicts the basic process of an application that uses the <code dir="ltr">DOMBuilder</code> JavaBean.</p>
<div id="ADXDK19362" class="figure">
<p class="titleinfigure"><a id="CIHJFBJC"></a>Figure 10-1 DOMBuilder JavaBean Usage</p>
<img width="579" height="538" src="img/adxdk080.gif" alt="Description of Figure 10-1 follows" /><br />
<a id="sthref244" href="img_text/adxdk080.htm">Description of "Figure 10-1 DOMBuilder JavaBean Usage"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#CIHJFBJC">Figure 10-1</a> shows the following stages of XML processing:</p>
<ol>
<li>
<p>Parse the input XML document. The program can receive the XML document as a file, string buffer, or URL.</p>
</li>
<li>
<p>Add the <code dir="ltr">DOMBuilder</code> listener. The program invokes the method <code dir="ltr">DOMBuilder.addDOMBuilderListener(DOMBuilderListener)</code>.</p>
</li>
<li>
<p>Parse the XML document. The program invokes the <code dir="ltr">DOMBuilder.parse()</code> method.</p>
</li>
<li>
<p>Optionally, process the parsed result further.</p>
</li>
<li>
<p>Call the listener when the program receives an asynchronous call. The listener, which must implement the <code dir="ltr">DOMBuilderListener</code> interface, is called by invoking the <code dir="ltr"><a id="sthref245"></a>DOMBuilderOver()</code> method.</p>
<p>The available <code dir="ltr">DOMBuilderListener</code> methods are:</p>
<ul>
<li>
<p><code dir="ltr"><a id="sthref246"></a>domBuilderError(DOMBuilderEvent)</code>, which is called when parse errors occur.</p>
</li>
<li>
<p><code dir="ltr">domBuilderOver(DOMBuilderEvent)</code>, which is called when parsing completes.</p>
</li>
<li>
<p><code dir="ltr"><a id="sthref247"></a>domBuilderStarted(DOMBuilderEvent)</code>, which is called when parsing begins.</p>
</li>
</ul>
</li>
<li>
<p>Fetch the DOM. Invoke the <code dir="ltr">DOMBuilder.<a id="sthref248"></a>getDocument()</code> method to fetch the resulting DOM document and output it.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHHCJJF"></a>
<div id="ADXDK19363" class="sect3">
<h4 class="sect3">Using the XSLTransformer JavaBean: Basic Process</h4>
<p>The <code dir="ltr">XSLTransformer</code> bean encapsulates the Java XML parser <a id="sthref249"></a>XSLT processing engine with a bean interface and extends its functionality to permit asynchronous transformation. By registering a listener, your Java application can transform large and successive documents by having the control returned immediately to the caller.</p>
<p>When developing applications that use this bean, you should import the following subpackages:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.async</code>, which provides asynchronous Java beans for XSL transformations</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code dir="ltr">oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a>. The most important XSL-related classes and interfaces in the <code dir="ltr">javax.xml.async</code> package are described in <a href="#CIHJFDII">Table 10-2</a>.</p>
<div id="ADXDK19364" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref250"></a><a id="CIHJFDII"></a>Table 10-2 javax.xml.async XSL-Related Classes and Interfaces</p>
<table class="cellalignment1211" title="javax.xml.async XSL-Related Classes and Interfaces" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t8">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t8" headers="r1c1-t8">
<p><code dir="ltr">XSLTransformer</code> class</p>
</td>
<td class="cellalignment1213" headers="r2c1-t8 r1c2-t8">
<p>Applies XSL transformation in a background thread.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t8" headers="r1c1-t8">
<p><code dir="ltr">XSLTransformerEvent</code> class</p>
</td>
<td class="cellalignment1213" headers="r3c1-t8 r1c2-t8">
<p>Represents the event object used by <code dir="ltr">XSLTransformer</code> to notify XSL transformation events to all of its registered listeners.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t8" headers="r1c1-t8">
<p><code dir="ltr">XSLTransformerListener</code> interface</p>
</td>
<td class="cellalignment1213" headers="r4c1-t8 r1c2-t8">
<p>Must be implemented so that the program can receive notifications about events during asynchronous transformation. The class implementing this interface must be added to the <code dir="ltr">XSLTransformer</code> with the <code dir="ltr">addXSLTransformerListener()</code> method.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t8" headers="r1c1-t8">
<p><code dir="ltr">XSLTransformerErrorEvent</code> class</p>
</td>
<td class="cellalignment1213" headers="r5c1-t8 r1c2-t8">
<p>Instantiates the error event object that <code dir="ltr">XSLTransformer</code> uses to notify all registered listeners about transformation error events.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t8" headers="r1c1-t8">
<p><code dir="ltr">XSLTransformerErrorListener</code> interface</p>
</td>
<td class="cellalignment1213" headers="r6c1-t8 r1c2-t8">
<p>Must be implemented so that the program can receive notifications about error events during the asynchronous transformation. The class implementing this interface must be added to the <code dir="ltr">XSLTransformer</code> using <code dir="ltr">addXSLTransformerListener()</code> method.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p><a href="#CIHDHABD">Figure 10-2</a> illustrates <code dir="ltr">XSLTransformer</code> bean usage.</p>
<div id="ADXDK19365" class="figure">
<p class="titleinfigure"><a id="CIHDHABD"></a>Figure 10-2 XSLTransformer JavaBean Usage</p>
<img width="579" height="434" src="img/adxdk079.gif" alt="Description of Figure 10-2 follows" /><br />
<a id="sthref251" href="img_text/adxdk079.htm">Description of "Figure 10-2 XSLTransformer JavaBean Usage"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#CIHDHABD">Figure 10-2</a> goes through the following stages:</p>
<ol>
<li>
<p>Input an XSLT stylesheet and XML instance document.</p>
</li>
<li>
<p>Add an XSLT listener. The program invokes the <code dir="ltr">XSLTransfomer.<a id="sthref252"></a>addXSLTransformerListener()method</code>.</p>
</li>
<li>
<p>Apply the stylesheets. The <code dir="ltr">XSLTransfomer.processXSL()</code> method initiates the XSL transformation in the background.</p>
</li>
<li>
<p>Optionally, perform further processing with the <code dir="ltr">XSLTransformer</code> bean.</p>
</li>
<li>
<p>Call the XSLT listener when the program receives an asynchronous call. The listener, which must implement the <code dir="ltr">XSLTransformerListener</code> interface, is called by invoking the <code dir="ltr"><a id="sthref253"></a>xslTransformerOver()</code> method.</p>
</li>
<li>
<p>Fetch the result of the transformation. Invoke the <code dir="ltr">XSLTransformer.getResult()</code> method to return the XML document fragment for the resulting document.</p>
</li>
<li>
<p>Output the XML document fragment.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHHDDFI"></a>
<div id="ADXDK19366" class="sect3">
<h4 class="sect3">Using the XMLDBAccess JavaBean: Basic Process</h4>
<p>When developing applications that use the <code dir="ltr">XMLDBAccess</code> bean, you should use the following subpackages:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.xmldbaccess</code>, which includes the <code dir="ltr">XMLDBAccess</code> bean</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
</ul>
<p>The <code dir="ltr">oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a>. Some of the more important methods in the <code dir="ltr">XMLDBAccess</code> class are described in <a href="#CIHCJJFC">Table 10-3</a>.</p>
<div id="ADXDK19367" class="tblhruleformal">
<p class="titleintable"><a id="sthref254"></a><a id="CIHCJJFC"></a>Table 10-3 XMLDBAccess Methods</p>
<table class="cellalignment1211" title="XMLDBAccess Methods" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t9">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">createXMLTypeTable()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t9 r1c2-t9">
<p>Creates an <code dir="ltr">XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">insertXMLTypeData()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t9 r1c2-t9">
<p>Inserts a text file as a row in an <code dir="ltr">XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">replaceXMLTypeData()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t9 r1c2-t9">
<p>Replaces a text file as a row in an <code dir="ltr">XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getXMLTypeTableNames()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t9 r1c2-t9">
<p>Retrieves all XML tables with names starting with a specified string.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getXMLTypeData()</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t9 r1c2-t9">
<p>Retrieves text file from an <code dir="ltr">XMLType</code> table.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getXMLTypeXPathTextData()</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t9 r1c2-t9">
<p>Retrieves the text data based on the XPath expression from an <code dir="ltr">XMLType</code> table.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a href="#CIHIEDCC">Figure 10-3</a> illustrates typical <code dir="ltr">XMLDBAccess</code> bean usage. It shows how the <code dir="ltr">DBAccess</code> bean maintains and manipulates XML documents stored in <code dir="ltr">XMLType</code>s.</p>
<div id="ADXDK19368" class="figure">
<p class="titleinfigure"><a id="CIHIEDCC"></a>Figure 10-3 XMLDBAccess JavaBean Usage</p>
<img width="477" height="267" src="img/adxdk104.gif" alt="Description of Figure 10-3 follows" /><br />
<a id="sthref255" href="img_text/adxdk104.htm">Description of "Figure 10-3 XMLDBAccess JavaBean Usage"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For example, an <code dir="ltr">XMLDBAaccess</code> program could process XML documents in the following stages:</p>
<ol>
<li>
<p>Create an <code dir="ltr">XMLType</code> table. Invoke <code dir="ltr">createXMLTypeTable()</code> by passing it database connection information and a table name.</p>
</li>
<li>
<p>List the <code dir="ltr">XMLType</code> tables. Invoke <code dir="ltr">getXMLTypeTableNames()</code> by passing it database connection information and an empty string.</p>
</li>
<li>
<p>Load XML data into the table. Invoke <code dir="ltr">replaceXMLTypeData()</code> by passing it database connection information, the table name, the XML file name, and a string containing the XML.</p>
</li>
<li>
<p>Retrieve the XML data into a <code dir="ltr">String</code>. Invoke <code dir="ltr">getXMLTypeData()</code> by passing it the connection information, the table name, and the XML file name.</p>
</li>
<li>
<p>Retrieve XML data based on an XPath expression. Invoke <code dir="ltr">getXMLXPathTextData()</code> by passing it the connection information, the table name, the XML file name, and the XPath expression.</p>
</li>
<li>
<p>Close the connection.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="CIHIJIHA"></a>
<div id="ADXDK19369" class="sect3">
<h4 class="sect3">Using the XMLDiff JavaBean: Basic Process</h4>
<p>When developing applications that use the <code dir="ltr">XMLDiff</code> bean, you typically use the following subpackages:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.xmldiff</code>, which includes the <code dir="ltr">XMLDiff</code> bean</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.parser.v2</code>, which provides APIs for XML parsing SAX, DOM, and XSLT</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.async</code>, which provides asynchronous Java beans for DOM building</p>
</li>
</ul>
<p>The <code dir="ltr">oracle.xml.parser.v2 subpackage</code> is described in detail in <a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a>. Some important methods in the <code dir="ltr">XMLDiff</code> class are described in <a href="#CIHIHCFF">Table 10-4</a>.</p>
<div id="ADXDK19370" class="tblhruleformal">
<p class="titleintable"><a id="sthref256"></a><a id="CIHIHCFF"></a>Table 10-4 XMLDiff Methods</p>
<table class="cellalignment1211" title="XMLDiff Methods" summary="This table describes the classes and interfaces needed to write applications with the DOMBuilder bean." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t10">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">diff()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t10 r1c2-t10">
<p>Determines the differences between two input XML files or two XMLDocument objects.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">generateXSL()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t10 r1c2-t10">
<p>Generates an XSL file that represents the differences between the input two XML files. The first XML file can be transformed into the second XML file with the generated stylesheet. If the XML files are the same, then the XSL generated can transform the first XML file into the second XML file, where the first and second files are equivalent.</p>
<p>Related methods are <code dir="ltr">generateXSLDoc()</code> and <code dir="ltr">generateXSLFile()</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">setFiles()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t10 r1c2-t10">
<p>Sets the XML files that need to be compared.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">getDocument1()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t10 r1c2-t10">
<p>Gets the document root as an XMLDocument object of the first XML tree. <code dir="ltr">getDocument2()</code> is the equivalent method for the second tree.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">getDiffPane1()</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t10 r1c2-t10">
<p>Gets the text panel as <code dir="ltr">JTextPane</code> object that visually shows the diffs in the first XML file. <code dir="ltr">getDiffPane2()</code> is the equivalent method for the second file.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p><a href="#CIHGJCID">Figure 10-4</a> illustrates typical <code dir="ltr">XMLDiff</code> bean usage. It shows how <code dir="ltr">XMLDiff</code> bean compares and displays the differences between input XML documents.</p>
<div id="ADXDK19371" class="figure">
<p class="titleinfigure"><a id="CIHGJCID"></a>Figure 10-4 XMLDiff JavaBean Usage</p>
<img width="668" height="521" src="img/adxdk121.gif" alt="Description of Figure 10-4 follows" /><br />
<a id="sthref257" href="img_text/adxdk121.htm">Description of "Figure 10-4 XMLDiff JavaBean Usage"</a><br />
<br /></div>
<!-- class="figure" -->
<p>For example, an <code dir="ltr">XMLDiff</code> program could process XML documents in the following stages:</p>
<ol>
<li>
<p>Create an <code dir="ltr">XMLDiff</code> object.</p>
</li>
<li>
<p>Set the files to be compared. Create <code dir="ltr">File</code> objects for the input files and pass references to the objects to <code dir="ltr">XMLDiff.setFiles()</code>.</p>
</li>
<li>
<p>Compare the documents. The <code dir="ltr">diff()</code> method returns <code dir="ltr">false</code> if the XML files are the same and <code dir="ltr">true</code> if they are different.</p>
</li>
<li>
<p>Respond depending on the whether the input XML documents are the same or different. For example, if they are the same, invoke <code dir="ltr">JOptionPane.showMessageDialog()</code> to print a message.</p>
</li>
<li>
<p>Generate an XSLT stylesheet that shows the differences between the input XML documents. For example, <code dir="ltr">generateXSLDoc()</code> generates an XSL stylesheet as an <code dir="ltr">XMLDocument</code>.</p>
</li>
<li>
<p>Display the DOM trees created by <code dir="ltr">XMLDiff</code>.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1010270"></a>
<div id="ADXDK19372" class="sect2">
<h3 class="sect2">Running the JavaBean Demo Programs</h3>
<p>Demo programs for the XDK JavaBeans are included in the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/transviewer</code> directory. The demos illustrate the use of the XDK beans described in <a href="#CIHEIGGF">"XDK JavaBeans Features"</a> as well as some visual beans that are now deprecated. The following list shows all of the beans used in the demos:</p>
<ul>
<li>
<p><code dir="ltr">XSLTransformer</code></p>
</li>
<li>
<p><code dir="ltr">DOMBuilder</code></p>
</li>
<li>
<p><code dir="ltr">DBAccess</code></p>
</li>
<li>
<p><code dir="ltr">XMLDBAccess</code></p>
</li>
<li>
<p><code dir="ltr">XMLDiff</code></p>
</li>
<li>
<p><code dir="ltr">XMLCompress</code></p>
</li>
<li>
<p><code dir="ltr">XSDValidator</code></p>
</li>
<li>
<p><code dir="ltr">oracle.xml.srcviewer.XMLSourceView</code> (deprecated)</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.treeviewer.XMLTreeView</code> (deprecated)</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.transformer.XMLTransformPanel</code> (deprecated)</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.dbviewer.DBViewer</code> (deprecated)</p>
</li>
</ul>
<p>Although the visual beans are deprecated, they remain useful as educational tools. Consequently, the deprecated beans are included in <code dir="ltr">$ORACLE_HOME/lib/xmldemo.jar</code>. The nondeprecated beans are included in <code dir="ltr">$ORACLE_HOME/lib/xml.jar</code>.</p>
<p><a href="#CIHDACCC">Table 10-5</a> lists the sample programs provided in the demo directory. The first column of the table indicates which sample program use deprecated beans.</p>
<div id="ADXDK19373" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref258"></a><a id="CIHDACCC"></a>Table 10-5 JavaBean Sample Java Source Files</p>
<table class="cellalignment1211" title="JavaBean Sample Java Source Files " summary="File Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t11">Sample</th>
<th class="cellalignment1212" id="r1c2-t11">File Name</th>
<th class="cellalignment1212" id="r1c3-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample1</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r2c1-t11 r1c2-t11">
<p><code dir="ltr">XMLTransformPanelSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">XMLTransformPanel</code>, <code dir="ltr">DOMBuilder</code>, and <code dir="ltr">XSLTransformer</code> beans. This bean applies XSL transformations to XML documents and shows the result.</p>
<p><span class="bold">See Also:</span> <a href="#CIHCEGFA">"Running sample1"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample2</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r3c1-t11 r1c2-t11">
<p><code dir="ltr">ViewSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t11 r1c3-t11">
<p>A sample visual application that uses the <code dir="ltr">XMLSourceView</code> and <code dir="ltr">XMLTreeView</code> beans. It visualizes XML document files.</p>
<p><span class="bold">See Also:</span> <a href="#CIHBGGHB">"Running sample2"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample3</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t11 r1c2-t11">
<p><code dir="ltr">AsyncTransformSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t11 r1c3-t11">
<p>A nonvisual application that uses the <code dir="ltr">XSLTransformer</code> and <code dir="ltr">DOMBuilder</code> beans. It applies the XSLT stylesheet specified in <code dir="ltr">doc.xsl</code> on all <code dir="ltr">.xml</code> files in the current directory. It writes the results to files with the extension <code dir="ltr">.log</code>.</p>
<p><span class="bold">See Also:</span> <a href="#CIHJFHJD">"Running sample3"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample4</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r5c1-t11 r1c2-t11">
<p><code dir="ltr">DBViewSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">DBViewer</code> bean to implement a simple application that handles insurance claims.</p>
<p><span class="bold">See Also:</span> <a href="#CIHFDDEC">"Running sample4"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r6c1-t11 r1c2-t11">
<p><code dir="ltr">DBViewClaims.java</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t11 r1c3-t11">
<p>This <code dir="ltr">JFrame</code> subclass is instantiated in the <code dir="ltr">DBViewFrame</code> class, which is in turn instantiated in the <code dir="ltr">DBViewSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r7c1-t11 r1c2-t11">
<p><code dir="ltr">DBViewFrame.java</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t11 r1c3-t11">
<p>This <code dir="ltr">JFrame</code> subclass is instantiated in the <code dir="ltr">DBViewSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample5</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t11 r1c2-t11">
<p><code dir="ltr">XMLDBAccessSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t11 r1c3-t11">
<p>A nonvisual application for the <code dir="ltr">XMLDBAccess</code> bean. This program demonstrates how to use the <code dir="ltr">XMLDBAccess</code> bean APIs to store and retrieve XML documents in <code dir="ltr">XMLType</code> tables.</p>
<p>To use <code dir="ltr">XMLType</code>, an Oracle database is necessary along with <code dir="ltr">xdb.jar</code>. The program accepts values for <code dir="ltr">HOSTNAME</code>, <code dir="ltr">PORT</code>, <code dir="ltr">SID</code>, <code dir="ltr">USERID</code>, and <code dir="ltr">PASSWORD</code>. The program creates tables in the database and loads data from file <code dir="ltr">booklist.xml</code>. The program writes output to <code dir="ltr">xmldbaccess.log</code>.</p>
<p><span class="bold">See Also:</span> <a href="#CIHHAJAB">"Running sample5"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample6</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r9c1-t11 r1c2-t11">
<p><code dir="ltr">XMLDiffSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">XMLDiff</code> bean to find differences between two XML files and generate an XSLT stylesheet. You can use this stylesheet to transform the first input XML into the second input XML file.</p>
<p><span class="bold">See Also:</span> <a href="#CIHFICJC">"Running sample6"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r10c1-t11 r1c2-t11">
<p><code dir="ltr">XMLDiffFrame.java</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t11 r1c3-t11">
<p>A class that implements the <code dir="ltr">ActionListener</code> interface. This class is used by the <code dir="ltr">XMLDiffSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r11c1-t11 r1c2-t11">
<p><code dir="ltr">XMLDiffSrcView.java</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t11 r1c3-t11">
<p>A <code dir="ltr">JPanel</code> subclass used by the <code dir="ltr">XMLDiffSample</code> program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample7</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r12c1-t11 r1c2-t11">
<p><code dir="ltr">compviewer.java</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">XMLCompress</code> bean to compress XML. The XML input can be an XML file or XML data obtained through a SQL query. The application enables you to decompress the compressed stream and view the resulting DOM tree.</p>
<p><span class="bold">See Also:</span> <a href="#CIHGAFDJ">"Running sample7"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r13c1-t11 r1c2-t11">
<p><code dir="ltr">compstreamdata.java</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t11 r1c3-t11">
<p>A simple class that pipes information from the GUI to the bean. This class is used in <code dir="ltr">dbpanel.java</code>, <code dir="ltr">filepanel.java</code>, and <code dir="ltr">xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r14c1-t11 r1c2-t11">
<p><code dir="ltr">dbpanel.java</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t11 r1c3-t11">
<p>A <code dir="ltr">JPanel</code> subclass used in <code dir="ltr">xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r15c1-t11 r1c2-t11">
<p><code dir="ltr">filepanel.java</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t11 r1c3-t11">
<p>A <code dir="ltr">JPanel</code> subclass used in <code dir="ltr">xmlcompressutil.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r16c1-t11 r1c2-t11">
<p><code dir="ltr">xmlcompressutil.java</code></p>
</td>
<td class="cellalignment1213" headers="r16c1-t11 r1c3-t11">
<p>A <code dir="ltr">JPanel</code> subclass used in <code dir="ltr">compviewer.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample8</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r17c1-t11 r1c2-t11">
<p><code dir="ltr">XMLSchemaTreeViewer.java</code></p>
</td>
<td class="cellalignment1213" headers="r17c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">Treeviewer</code>, <code dir="ltr">sourceviewer</code>, and <code dir="ltr">XSDValidator</code> beans. The application accepts an XML instance document and an XML schema document as inputs. The application parses both the documents and validates the instance document against the schema. If the document is invalid, then the nodes where the errors occurred are highlighted and an error message is shown in a tool tip.</p>
<p><span class="bold">See Also:</span> <a href="#CIHDHIBF">"Running sample8"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r18c1-t11 r1c2-t11">
<p><code dir="ltr">TreeViewerValidate.java</code></p>
</td>
<td class="cellalignment1213" headers="r18c1-t11 r1c3-t11">
<p>A <code dir="ltr">JPanel</code> subclass that displays a parsed XML instance document as a tree. This class is used by the <code dir="ltr">XMLSchemaTreeViewer.java</code> program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r19c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample9</code></p>
<p>(deprecated)</p>
</td>
<td class="cellalignment1213" headers="r19c1-t11 r1c2-t11">
<p><code dir="ltr">XMLSrcViewer.java</code></p>
</td>
<td class="cellalignment1213" headers="r19c1-t11 r1c3-t11">
<p>A visual application that uses the <code dir="ltr">sourceviewer</code> and <code dir="ltr">XSDValidator</code> beans. The demo takes an XML file as input. You can select the validation mode: DTD, XML schema, or no validation. The program validates the XML data file against the DTD or schema and displays it with syntax highlighting. It also logs validation errors. For schema validation it also highlights the error nodes appropriately. External and internal DTDs can be viewed.</p>
<p><span class="bold">See Also:</span> <a href="#CIHDEJFF">"Running sample9"</a></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r20c1-t11" headers="r1c1-t11">&nbsp;</td>
<td class="cellalignment1213" headers="r20c1-t11 r1c2-t11">
<p><code dir="ltr">XMLSrcViewPanel.java</code></p>
</td>
<td class="cellalignment1213" headers="r20c1-t11 r1c3-t11">
<p>A class that shows how to use the <code dir="ltr">XMLSourceView</code> and <code dir="ltr">DTDSourceView</code> objects. This class is used by the <code dir="ltr">XMLSrcViewer.java</code> program.Each <code dir="ltr">XMLSourceView</code> object is set as a Component of a <code dir="ltr">JPanel</code> by invoking <code dir="ltr">goButton_actionPerformed()</code>. The XML file to be viewed is parsed and the resulting XML document is set in the <code dir="ltr">XMLSourceView</code> object by invoking <code dir="ltr">makeSrcPane()</code>. The highlighting and DTD display properties are specified at this time. For performing schema validation, build the schema object by invoking <code dir="ltr">makeSchemaValPane()</code>. You can can check for errors and display the source code accordingly with different highlights. You can retrieve a list of schema validation errors from the <code dir="ltr">XMLSourceView</code> by invoking <code dir="ltr">dumpErrors()</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r21c1-t11" headers="r1c1-t11">
<p><code dir="ltr">sample10</code></p>
</td>
<td class="cellalignment1213" headers="r21c1-t11 r1c2-t11">
<p><code dir="ltr">XSDValidatorSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r21c1-t11 r1c3-t11">
<p>An application that shows how to use the <code dir="ltr">XSDValidator</code> bean. It accepts an XML file and an XML schema file as input. The program displays errors occurring during validation, including line numbers.</p>
<p><span class="bold">See Also:</span> <a href="#CIHCBFBD">"Running sample10"</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p><a href="#g1013898">Table 10-6</a> describes additional files that are used by the demo programs.</p>
<div id="ADXDK19374" class="tblformalwide">
<p class="titleintable"><a id="sthref259"></a><a id="g1013898"></a>Table 10-6 JavaBean Sample Files</p>
<table class="cellalignment1211" title="JavaBean Sample Files " summary="File Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t12">File Name</th>
<th class="cellalignment1212" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">XMLDiffData1.txt</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t12 r1c2-t12">
<p>An XML document used by the <code dir="ltr">XMLDiffSample.java</code> program. By default the 2 XML files <code dir="ltr">XMLDiffData1.txt</code> and <code dir="ltr">XMLDiffData2.txt</code> are compared and the output XSLT is stored as <code dir="ltr">XMLDiffSample.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">XMLDiffData2.txt</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t12 r1c2-t12">
<p>An XML document used by the <code dir="ltr">XMLDiffSample.java</code> program. By default the 2 XML files <code dir="ltr">XMLDiffData1.txt</code> and <code dir="ltr">XMLDiffData2.txt</code> are compared and the output XSLT is stored as <code dir="ltr">XMLDiffSample.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">booklist.xml</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t12 r1c2-t12">
<p>An XML document for use by <code dir="ltr">XMLDBAccessSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">claim.sql</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t12 r1c2-t12">
<p>An XML document used by <code dir="ltr">ViewSample.java</code> and <code dir="ltr">XMLDBAccessSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t12" headers="r1c1-t12">
<p><code dir="ltr">doc.xml</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t12 r1c2-t12">
<p>An XML document for use by <code dir="ltr">AsyncTransformSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t12" headers="r1c1-t12">
<p><code dir="ltr">doc.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t12 r1c2-t12">
<p>An XSLT stylesheet for use by <code dir="ltr">AsyncTransformSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t12" headers="r1c1-t12">
<p><code dir="ltr">emptable.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t12 r1c2-t12">
<p>An XSLT stylesheet for use by <code dir="ltr">AsyncTransformSample.java</code>, <code dir="ltr">ViewSample.java</code>, or <code dir="ltr">XMLTransformPanelSample.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t12" headers="r1c1-t12">
<p><code dir="ltr">note_in_dtd.xml</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t12 r1c2-t12">
<p>A sample XML document for use in <code dir="ltr">XMLSrcViewer.java</code>. You can use this file in DTD validation mode to view an internal DTD with validation errors. An internal DTD can be optionally displayed along with the XML data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t12" headers="r1c1-t12">
<p><code dir="ltr">purchaseorder.xml</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t12 r1c2-t12">
<p>An XML document used by the <code dir="ltr">XSDValidatorSample.java</code> program. The instance document <code dir="ltr">purchaseorder.xml</code> does not comply with XML schema defined in <code dir="ltr">purchaseorder.xsd</code>, which causes the program to display the errors.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t12" headers="r1c1-t12">
<p><code dir="ltr">purchaseorder.xsd</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t12 r1c2-t12">
<p>An XML schema document used by the <code dir="ltr">XSDValidatorSample.java</code> program. The instance document <code dir="ltr">purchaseorder.xml</code> does not comply with XML schema defined in <code dir="ltr">purchaseorder.xsd</code>, which causes the program to display the errors.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p>Documentation for how to compile and run the sample programs is located in the <code dir="ltr">README</code> in the same directory. The basic steps are as follows:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/transviewer</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\transviewer</code> directory (Windows).</p>
</li>
<li>
<p>Make sure that your environment variables are set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>. The beans require JDK 1.2 or higher. The <code dir="ltr">DBViewer</code> and <code dir="ltr">DBTransformPanel</code> beans require JDK 1.2.2 when rendering HTML. Prior versions of the JDK may not render HTML in the result buffer properly.</p>
</li>
<li>
<p>Edit the <code dir="ltr">Makefile</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) for your environment. In particular, do the following:</p>
<ul>
<li>
<p>Change the <code dir="ltr">JDKPATH</code> in the <code dir="ltr">Makefile</code> to point to your JDK path.</p>
</li>
<li>
<p>Change <code dir="ltr">PATHSEP</code> to the appropriate path separator for your operating system.</p>
</li>
<li>
<p>Change the <code dir="ltr">HOSTNAME</code>, <code dir="ltr">PORT</code>, <code dir="ltr">SID</code>, <code dir="ltr">USERID</code>, and <code dir="ltr">PASSWORD</code> parameters so that you can connect to the database through the JDBC thin driver. These parameters are used in <code dir="ltr">sample4</code> and <code dir="ltr">sample5</code>.</p>
</li>
</ul>
</li>
<li>
<p>Run <code dir="ltr">make</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) at the system prompt to generate the class files.</p>
</li>
<li>
<p>Run <code dir="ltr">gmake</code> as follows to run the demos:</p>
<pre dir="ltr">
gmake sample1
gmake sample2
gmake sample3
gmake sample4
gmake sample5
gmake sample6
gmake sample7
gmake sample8
gmake sample9
gmake sample10
</pre>
<p>The following sections explain how to run the demos.</p>
</li>
</ol>
<a id="CIHCEGFA"></a>
<div id="ADXDK19375" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample1</h4>
<p><code dir="ltr">Sample1</code> is the program that uses the <code dir="ltr">XMLTransViewer</code> bean. You can run the program manually as follows:</p>
<pre dir="ltr">
java XMLTransformPanelSample
</pre>
<p>You can use the program to import and export XML files from Oracle database, store XSL transformation files in the database, and apply stylesheets to XML interactively. To use the database connectivity feature in this program, you need to know the network name of the computer where the database runs, the port (usually <code dir="ltr">1521</code>), and the name of the Oracle instance (usually <code dir="ltr">orcl</code>). You also need an account with <code dir="ltr">CREATE TABLE</code> privileges. If you have installed the sample schemas, then you can use the account <code dir="ltr">hr</code>. You can the <code dir="ltr">XMLTransViewer</code> program to apply stylesheet transformation to XML files and display the result.The program displays a panel with tabs on the top and the bottom. The first two top tabs are used to switch between the XML buffer and the XSLT buffer. The third tab performs XSL transformation on the XML buffer and displays the result. The first two tabs on the bottom can be used to load and save data from Oracle database and from the file system. The remaining bottom tabs switch the display of the current content to tree view, XML source, edit mode and, in case of the result view after the transformation, HTML.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBGGHB"></a>
<div id="ADXDK19376" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample2</h4>
<p><code dir="ltr">Sample2</code> is a GUI-based demo for the <code dir="ltr">XMLSourceView</code> and <code dir="ltr">XMLTreeView</code> beans, which are deprecated. The <code dir="ltr">ViewSample</code> program displays the <code dir="ltr">booklist.xml</code> file in separate source and tree views. You can run the program manually as follows:</p>
<pre dir="ltr">
java ViewSample
</pre></div>
<!-- class="sect3" -->
<a id="CIHJFHJD"></a>
<div id="ADXDK19377" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample3</h4>
<p><code dir="ltr">Sample3</code> is a nonvisual demo for the asynchronous <code dir="ltr">DOMBuilder</code> and <code dir="ltr">XSLTransformer</code> beans. The <code dir="ltr">AsyncTransformSample</code> program applies the <code dir="ltr">doc.xsl</code> XSLT stylesheet to all <code dir="ltr">*.xml</code> files in the current directory. The program writes output to files with the extension <code dir="ltr">.log</code>. You can run the program as follows:</p>
<pre dir="ltr">
java AsyncTransformSample
</pre></div>
<!-- class="sect3" -->
<a id="CIHFDDEC"></a>
<div id="ADXDK19378" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample4</h4>
<p><code dir="ltr">Sample4</code> is a visual demo for the <code dir="ltr">DBViewer</code> bean, which is deprecated. It runs in the following stages:</p>
<ol>
<li>
<p>It starts SQL*Plus, connects to the database with the <code dir="ltr">USERID</code> and <code dir="ltr">PASSWORD</code> specified in the <code dir="ltr">Makefile</code>, and runs the <code dir="ltr">claim.sql</code> script. This script creates a number of tables, views, and types for use by the <code dir="ltr">DBViewSample</code> demo program.</p>
</li>
<li>
<p>It runs the DBViewSample program as follows:</p>
<pre dir="ltr">
java -classpath "$(MAKE_CLASSPATH)" DBViewSample
</pre></li>
</ol>
<p>JDBC connection information is hard-coded in the <code dir="ltr">DBViewClaims.java</code> source file, which implements a class used by the demo. Specifically, the program assumes the values for <code dir="ltr">USERID</code>, <code dir="ltr">PASSWORD</code>, and so forth set in the <code dir="ltr">Makefile</code>. If your configuration is different, navigate to line 92 in <code dir="ltr">DBViewClaims.java</code> and modify <code dir="ltr">setUsername()</code>, <code dir="ltr">setPassword()</code>, and so forth with values that reflect your Oracle database configuration.</p>
</div>
<!-- class="sect3" -->
<a id="CIHHAJAB"></a>
<div id="ADXDK19379" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample5</h4>
<p><code dir="ltr">Sample5</code> is a nonvisual demo for the <code dir="ltr">XMLDBAccess</code> bean. It uses the XMLType objects to store XML documents inside the database.The following program connects to the database with the Java thin client, creates <code dir="ltr">XMLType</code> tables, and loads the data from <code dir="ltr">booklist.xml</code>. To run the program you must specify the following pieces of information as command-line arguments:</p>
<ul>
<li>
<p>Host name (for example, <code dir="ltr">myhost</code>)</p>
</li>
<li>
<p>Port number (for example, <code dir="ltr">1521</code>)</p>
</li>
<li>
<p>SID of the database (for example, <code dir="ltr">ORCL</code>)</p>
</li>
<li>
<p>Database account in which the tables will be created (for example, <code dir="ltr">hr</code>)</p>
</li>
<li>
<p>Password for the database account (for example, <code dir="ltr">hr</code>)</p>
</li>
</ul>
<p>For example, you can run the program as follows:</p>
<pre dir="ltr">
java XMLDBAccessSample myhost 1521 ORCL hr hr
</pre>
<p>The following text shows sample output from <code dir="ltr">dbaccess.log</code>:</p>
<pre dir="ltr">
Demo for createXMLTypeTables():
Table +'testxmltype' successfully created.
 
Demo for listXMLTypeTables():
tablenamename=TESTXMLTYPE
 
Demo for replaceXMLTypeData() (similar to insert):
XML Data from +'booklist.xml' successfully replaced in table 'testxmltype'.
 
Demo for getXMLTypeData():
XMLType data fetched:
&lt;?xml version="1.0"?&gt;
&lt;booklist&gt;  
  &lt;book isbn="1234-123456-1234"&gt;    
    &lt;title&gt;C Programming Language&lt;/title&gt;    
    &lt;author&gt;Kernighan and Ritchie&lt;/author&gt;    
    &lt;publisher&gt;EEE&lt;/publisher&gt;    
    &lt;price&gt;7.99&lt;/price&gt;  
  &lt;/book&gt;
...
  &lt;book isbn="1230-23498-2349879"&gt;    
    &lt;title&gt;Emperor's New Mind&lt;/title&gt;    
    &lt;author&gt;Roger Penrose&lt;/author&gt;    
    &lt;publisher&gt;Oxford Publishing Company&lt;/publisher&gt;    
    &lt;price&gt;15.99&lt;/price&gt;  
  &lt;/book&gt;
&lt;/booklist&gt;
 
Demo for getXMLTypeXPathTextData():
Data fetched using XPath exp '/booklist/book[3]':
&lt;book isbn="2137-598354-65978"&gt;
  &lt;title&gt;Twelve Red Herrings&lt;/title&gt;
  &lt;author&gt;Jeffrey Archer&lt;/author&gt;
  &lt;publisher&gt;Harper Collins&lt;/publisher&gt;
  &lt;price&gt;12.95&lt;/price&gt;
&lt;/book&gt;
</pre></div>
<!-- class="sect3" -->
<a id="CIHFICJC"></a>
<div id="ADXDK19380" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample6</h4>
<p>The <code dir="ltr">sample6</code> program is a visual demo for the <code dir="ltr">XMLDiff</code> bean. The <code dir="ltr">XMLDiffSample</code> class invokes a GUI that enables you to choose the input data files from the <span class="bold">File</span> menu by selecting <span class="bold">Compare XML File</span>s. The <span class="bold">Transform</span> menu enables you to apply the generated XSLT generated to the first input XML. Select <span class="bold">Save As</span> in the <span class="bold">File</span> menu to save the output XML file, which will be the same as the second input file. By default, the program compares <code dir="ltr">XMLDiffData1.txt</code> to <code dir="ltr">XMLDiffData2.txt</code> and stores the XSLT output as <code dir="ltr">XMLDiffSample.xsl</code>.</p>
<p>You can run the program manually as follows:</p>
<pre dir="ltr">
java -mx50m XMLDiffSample XMLDiffData1.txt XMLDiffData2.txt
</pre>
<p>If the input XML files use a DTD that accesses a URL outside a firewall, then modify <code dir="ltr">XMLDiffSample.java</code> to include the proxy server settings before the <code dir="ltr">setFiles()</code> call. For example, modify the program as follows:</p>
<pre dir="ltr">
/* Set proxy to access dtd through firewall */
Properties p = System.getProperties();
p.put("proxyHost", "www.proxyservername.com");
p.put("proxyPort", "80");
p.put("proxySet", "true");
/* You will also have to import java.util.*; */
</pre></div>
<!-- class="sect3" -->
<a id="CIHGAFDJ"></a>
<div id="ADXDK19381" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample7</h4>
<p>The <code dir="ltr">sample7</code> visual demo illustrates the use of the <code dir="ltr">XMLCompress</code> bean. The <code dir="ltr">compviewer</code> class invokes a GUI which lets the user compress and uncompress XML files and data obtained from the database. The loading options enable the user to retrieve the data either from a file system or a database. This application does not support loading and saving compressed data from the database. The compression factor indicates a rough estimate by which the XML data is reduced.</p>
<p>You can run the program manually as follows:</p>
<pre dir="ltr">
java compviewer
</pre></div>
<!-- class="sect3" -->
<a id="CIHDHIBF"></a>
<div id="ADXDK19382" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample8</h4>
<p>The <code dir="ltr">sample8</code> demo illustrates the use of the <code dir="ltr">XMLTreeViewer</code> bean. The <code dir="ltr">XMLSchemaTreeViewer</code> program enables the user to view an <code dir="ltr">XMLDocument</code> in a tree format. The user can input a schema document and validate the instance document against the schema. If the document is invalid, then the invalid nodes are highlighted with the error message. Also, the program displays a log of all the line information in a separate panel, which enables the user to edit the instance document and revaluated. Test the program with sample files <code dir="ltr">purchaseorder.xml</code> and <code dir="ltr">purchaseorder.xsd</code>. The instance document <code dir="ltr">purchaseorder.xml</code> does not comply with schema defined in <code dir="ltr">purchaseorder.xsd</code>.</p>
<p>You can run the program manually as follows:</p>
<pre dir="ltr">
java XMLSchemaTreeViewer
</pre></div>
<!-- class="sect3" -->
<a id="CIHDEJFF"></a>
<div id="ADXDK19383" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample9</h4>
<p>The <code dir="ltr">sample9</code> demo illustrates the use of the <code dir="ltr">SourceViewer</code> bean. The <code dir="ltr">XMLSrcViewer</code> program enables you to view an XML document or a DTD with syntax highlighting turned on. You can validate the XML document against an input XML Schema or DTD. The DTD can be internal or external.</p>
<p>If the validation is successful, then you can view the instance document and XML schema or DTD in the <span class="bold">Source View</span> pane. If errors were encountered during schema validation, then an error log with line numbers is available in the <span class="bold">Error</span> pane. The <span class="bold">Source View</span> pane shows the XML document with error nodes highlighted.You can use sample files <code dir="ltr">purchaseorder.xml</code> and <code dir="ltr">purchaseorder.xsd</code> for testing XML schema validation with errors. You can use <code dir="ltr">note_in_dtd.xml</code> with DTD validation mode to view an internal DTD with validation errors. You can run the program manually as follows:</p>
<pre dir="ltr">
java XMLSrcViewer
</pre></div>
<!-- class="sect3" -->
<a id="CIHCBFBD"></a>
<div id="ADXDK19384" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Running sample10</h4>
<p>The <code dir="ltr">sample10</code> demo illustrates the use of the <code dir="ltr">XSDValidator</code> bean. The <code dir="ltr">XSDValidatorSample</code> program's two input arguments are an XML document and its associated XML schema. The program displays errors occurring during validation, including line numbers.</p>
<p>The following program uses <code dir="ltr">purchaseorder.xsd</code> to validate the contents of <code dir="ltr">purchaseorder.xml</code>:</p>
<pre dir="ltr">
java XSDValidatorSample purchaseorder.xml purchaseorder.xsd
</pre>
<p>The XML document fails (intentionally) to validate against the schema. The program displays the following errors:</p>
<pre dir="ltr">
Sample purchaseorder.xml purchaseorder.xsd
&lt;Line 2, Column 41&gt;: XML-24523: (Error) Invalid value 'abc' for attribute: 'orderDate'
#document-&gt;purchaseOrder
&lt;Line 7, Column 27&gt;: XML-24525: (Error) Invalid text 'CA' in element: 'state'
#document-&gt;purchaseOrder-&gt;shipTo-&gt;state-&gt;#text
&lt;Line 8, Column 25&gt;: XML-24525: (Error) Invalid text 'sd' in element: 'zip'
#document-&gt;purchaseOrder-&gt;shipTo-&gt;zip-&gt;#text
&lt;Line 14, Column 27&gt;: XML-24525: (Error) Invalid text 'PA' in element: 'state'
#document-&gt;purchaseOrder-&gt;billTo-&gt;state-&gt;#text
&lt;Line 17, Column 22&gt;: XML-24534: (Error) Element 'coment' not expected.
#document-&gt;purchaseOrder-&gt;coment
&lt;Line 29, Column 31&gt;: XML-24534: (Error) Element 'shipDae' not expected.
#document-&gt;purchaseOrder-&gt;items-&gt;item-&gt;shipDae
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIFBEC"></a>
<div id="ADXDK19385" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Processing XML with the XDK JavaBeans</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHGHJIJ">Processing XML Asynchronously with the DOMBuilder and XSLTransformer Beans</a></p>
</li>
<li>
<p><a href="#CIHJEGII">Comparing XML Documents with the XMLDiff Bean</a></p>
</li>
</ul>
<a id="CIHGHJIJ"></a>
<div id="ADXDK19386" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Processing XML Asynchronously with the DOMBuilder and XSLTransformer Beans</h3>
<p>As explained in <a href="#CIHBIHDE">"DOMBuilder"</a> and <a href="#CIHCJDIJ">"XSLTransformer"</a>, you can use XDK beans to perform asynchronous XML processing.</p>
<p>The <code dir="ltr">AsyncTransformSample.java</code> program illustrates how to use both the <code dir="ltr">DOMBuilder</code> and <code dir="ltr">XSLTransformer</code> beans. The program implements the following methods:</p>
<ul>
<li>
<p><code dir="ltr">runDOMBuilders()</code></p>
</li>
<li>
<p><code dir="ltr">runXSLTransformer()</code></p>
</li>
<li>
<p><code dir="ltr">saveResult()</code></p>
</li>
<li>
<p><code dir="ltr">makeXSLDocument()</code></p>
</li>
<li>
<p><code dir="ltr">createURL()</code></p>
</li>
<li>
<p><code dir="ltr">init()</code></p>
</li>
<li>
<p><code dir="ltr">exitWithError()</code></p>
</li>
<li>
<p><code dir="ltr">asyncTransform()</code></p>
</li>
</ul>
<p>The basic architecture of the program is as follows:</p>
<ol>
<li>
<p>The program declares and initializes the fields used by the class. Note that the input XSLT stylesheet is hard-coded in the program as <code dir="ltr">doc.xsl</code>. The class defines the following fields:</p>
<pre dir="ltr">
String        basedir = new String (".");
OutputStream  errors = System.err;
Vector        xmlfiles = new Vector();
int           numXMLDocs = 1;
String        xslFile = new String ("doc.xsl");
URL           xslURL;
XMLDocument   xsldoc
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method invokes the <code dir="ltr">init()</code> method to perform the initial setup. This method lists the files in the current directory, and if it finds files that end in the extension <code dir="ltr">.xml</code>, it adds them to a <code dir="ltr">Vector</code> object. The implementation for the <code dir="ltr">init()</code> method is as follows:</p>
<pre dir="ltr">
boolean init () throws Exception
{
   File     directory = new File (basedir);
   String[] dirfiles = directory.list();
   for (int j = 0; j &lt; dirfiles.length; j++)
   {
      String dirfile = dirfiles[j];
 
      if (!dirfile.endsWith(".xml"))
          continue;
 
       xmlfiles.addElement(dirfile);
   }
 
   if (xmlfiles.isEmpty()) {
      System.out.println("No files in directory were selected for processing");
      return false;
   }
   numXMLDocs = xmlfiles.size();

   return true;
}
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method instantiates <code dir="ltr">AsyncTransformSample</code> as follows:</p>
<pre dir="ltr">
AsyncTransformSample inst = new AsyncTransformSample();
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method invokes the <code dir="ltr">asyncTransform()</code> method. The <code dir="ltr">asyncTransform()</code> method performs the following main tasks:</p>
<ol>
<li>
<p>Invokes <code dir="ltr">makeXSLDocument()</code> to parse the input XSLT stylesheet.</p>
</li>
<li>
<p>Calls <code dir="ltr">runDOMBuilders()</code> to initiate parsing of the instance documents, that is, the documents to be transformed, and then transforms them.</p>
</li>
</ol>
<p>After initiating the XML processing, the program resumes control and waits while the processing occurs in the background. When the last request completes, the method exits.</p>
<p>The following code shows the implementation of the <code dir="ltr">asyncTransform()</code> method:</p>
<pre dir="ltr">
void asyncTransform () throws Exception
{
   System.err.println (numXMLDocs +
            " XML documents will be transformed" +
            " using XSLT stylesheet specified in " + xslFile +
            " with " +  numXMLDocs + " threads");

   makeXSLDocument ();
   runDOMBuilders ();
 
   // wait for the last request to complete
   while (rm.activeFound())
      Thread.sleep(100);
}
</pre></li>
</ol>
<p>The following sections explain the <code dir="ltr">makeXSLDocument()</code> and <code dir="ltr">runDOMBuilders()</code> methods.</p>
<div id="ADXDK19387" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref260"></a>
<h4 class="sect3">Parsing the Input XSLT Stylesheet</h4>
<p>The <code dir="ltr">makeXSLDocument()</code> method illustrates a simple DOM parse of the input stylesheet. It does not use asynchronous parsing. The technique is the same described in <a href="adx_j_parser.htm#CCHBEGDD">"Performing Basic DOM Parsing"</a>.</p>
<p>The method follows these steps:</p>
<ol>
<li>
<p>Create a new <code dir="ltr">DOMParser()</code> object. The following code fragment from <code dir="ltr">DOMSample.java</code> illustrates this technique:</p>
<pre dir="ltr">
DOMParser parser = new DOMParser();
</pre></li>
<li>
<p>Configure the parser. The following code fragment specifies that whitespace should be preserved:</p>
<pre dir="ltr">
parser.setPreserveWhitespace(true);
</pre></li>
<li>
<p>Create a <code dir="ltr">URL</code> object from the input stylesheet. The following code fragment invokes the <code dir="ltr">createURL()</code> helper method to accomplish this task:</p>
<pre dir="ltr">
xslURL = createURL (xslFile);
</pre></li>
<li>
<p>Parse the input XSLT stylesheet. The following statement illustrates this technique:</p>
<pre dir="ltr">
parser.parse (xslURL);
</pre></li>
<li>
<p>Obtain a handle to the root of the in-memory DOM tree. You can use the <code dir="ltr">XMLDocument</code> object to access every part of the parsed XML document. The following statement illustrates this technique:</p>
<pre dir="ltr">
xsldoc = parser.getDocument();
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<div id="ADXDK19388" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref261"></a>
<h4 class="sect3">Processing the XML Documents Asynchronously</h4>
<p>The <code dir="ltr">runDOMBuilders()</code> method illustrates how you can use the <code dir="ltr">DOMBuilder</code> and <code dir="ltr">XSLTransformer</code> beans to perform asynchronous processing. The parsing and transforming of the XML occurs in the background.</p>
<p>The method follows these steps:</p>
<ol>
<li>
<p>Create a resource manager to manage the input XML documents. The program creates a <code dir="ltr">for</code> loop and obtains the XML documents. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
rm = new ResourceManager (numXMLDocs);
for (int i = 0; i &lt; numXMLDocs; i++)
{
   rm.getResource();
   ...
}
</pre></li>
<li>
<p>Instantiate the DOM builder bean for each input XML document. For example:</p>
<pre dir="ltr">
DOMBuilder builder = new DOMBuilder(i);
</pre></li>
<li>
<p>Create a <code dir="ltr">URL</code> object from the XML file name. For example:</p>
<pre dir="ltr">
DOMBuilder builder = new DOMBuilder(i);
URL  xmlURL = createURL(basedir + "/" + (String)xmlfiles.elementAt(i));
if (xmlURL == null)
   exitWithError("File " + (String)xmlfiles.elementAt(i) + " not found");
</pre></li>
<li>
<p>Configure the DOM builder. The following code fragment specifies the preservation of whitespace and sets the base URL for the document:</p>
<pre dir="ltr">
builder.setPreserveWhitespace(true);
builder.setBaseURL (createURL(basedir + "/"));
</pre></li>
<li>
<p>Add the listener for the DOM builder. The program adds the listener by invoking <code dir="ltr">addDOMBuilderListener()</code>.</p>
<p>The class instantiated to create the listener must implement the <code dir="ltr">DOMBuilderListener</code> interface. The program provides a do-nothing implementation for <code dir="ltr">domBuilderStarted()</code> and <code dir="ltr">domBuilderError()</code>, but must provide a substantive implementation for <code dir="ltr">domBuilderOver()</code>, which is the method called when the parse of the XML document completes. The method invokes <code dir="ltr">runXSLTransformer()</code>, which is the method that transforms the XML. Refer to <a href="#CIHGDCHB">"Transforming the XML with the XSLTransformer Bean"</a> for an explanation of this method.</p>
<p>The following code fragment illustrates how to add the listener:</p>
<pre dir="ltr">
builder.addDOMBuilderListener
( 
   new DOMBuilderListener()
   {
      public void domBuilderStarted(DOMBuilderEvent p0) {}
      public void domBuilderError(DOMBuilderEvent p0) {}
      public synchronized void domBuilderOver(DOMBuilderEvent p0)
      {
         DOMBuilder bld = (DOMBuilder)p0.getSource();
         runXSLTransformer (bld.getDocument(), bld.getId());
      }
   }
);
</pre></li>
<li>
<p>Add the error listener for the DOM builder. The program adds the listener by invoking <code dir="ltr">addDOMBuilderErrorListener()</code>.</p>
<p>The class instantiated to create the listener must implement the <code dir="ltr">DOMBuilderErrorListener</code> interface. The following code fragment show the implementation:</p>
<pre dir="ltr">
builder.addDOMBuilderErrorListener
(
   new DOMBuilderErrorListener() 
   {
      public void domBuilderErrorCalled(DOMBuilderErrorEvent p0)
      {
         int id = ((DOMBuilder)p0.getSource()).getId();
         exitWithError("Error occurred while parsing " +
            xmlfiles.elementAt(id) + ": " +
            p0.getException().getMessage());
      }
   }
);
</pre></li>
<li>
<p>Parse the document. The following statement illustrates this technique:</p>
<pre dir="ltr">
builder.parse (xmlURL);
System.err.println("Parsing file " + xmlfiles.elementAt(i));
</pre></li>
</ol>
<a id="CIHGDCHB"></a>
<div id="ADXDK19389" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Transforming the XML with the XSLTransformer Bean</h5>
<p>When the DOM parse completes, the DOM listener receives notification. The <code dir="ltr">domBuilderOver()</code> method implements the behavior in response to this event. The program passes the DOM to the <code dir="ltr">runXSLTransformer()</code> method, which initiates the XSL transformation.</p>
<p>The method follows these steps:</p>
<ol>
<li>
<p>Instantiate the <code dir="ltr">XSLTransformer</code> bean. This object performs the XSLT processing. The following statement illustrates this technique:</p>
<pre dir="ltr">
XSLTransformer processor = new XSLTransformer (id);
</pre></li>
<li>
<p>Create a new stylesheet object. For example:</p>
<pre dir="ltr">
XSLStylesheet  xsl       = new XSLStylesheet (xsldoc, xslURL);
</pre></li>
<li>
<p>Configure the XSLT processor. For example, the following statement sets the processor to show warnings and configures the error output stream:</p>
<pre dir="ltr">
processor.showWarnings (true);
processor.setErrorStream (errors);
</pre></li>
<li>
<p>Add the listener for the XSLT processor. The program adds the listener by invoking <code dir="ltr">addXSLTransformerListener()</code>.</p>
<p>The class instantiated to create the listener must implement the <code dir="ltr">XSLTransformerListener</code> interface. The program provides a do-nothing implementation for <code dir="ltr">xslTransformerStarted()</code> and <code dir="ltr">xslTransformerError()</code>, but must provide a substantive implementation for <code dir="ltr">xslTransformerOver()</code>, which is the method called when the parse of the XML document completes. The method invokes <code dir="ltr">saveResult()</code>, which prints the transformation result to a file.</p>
<p>The following code fragment illustrates how to add the listener:</p>
<pre dir="ltr">
processor.addXSLTransformerListener
(
   new XSLTransformerListener() 
   {
      public void xslTransformerStarted (XSLTransformerEvent p0) {}
      public void xslTransformerError(XSLTransformerEvent p0) {}
      public void xslTransformerOver (XSLTransformerEvent p0)
      {
         XSLTransformer trans = (XSLTransformer)p0.getSource();
         saveResult (trans.getResult(),  trans.getId());
      }
   }
);
</pre></li>
<li>
<p>Add the error listener for the XSLT processor. The program adds the listener by invoking <code dir="ltr">addXSLTransformerErrorListener()</code>.</p>
<p>The class instantiated to create the listener must implement the <code dir="ltr">XSLTransformerErrorListener</code> interface. The following code fragment show the implementation:</p>
<pre dir="ltr">
processor.addXSLTransformerErrorListener 
(
   new XSLTransformerErrorListener() 
   {
      public void xslTransformerErrorCalled(XSLTransformerErrorEvent p0)
      {
         int i = ((XSLTransformer)p0.getSource()).getId();
         exitWithError("Error occurred while processing " +
                       xmlfiles.elementAt(i) + ": " +
                       p0.getException().getMessage());
      }
   }
);
</pre></li>
<li>
<p>Transform the XML document with the XSLT stylesheet. The following statement illustrates this technique:</p>
<pre dir="ltr">
processor.processXSL (xsl, xml);
</pre></li>
</ol>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHJEGII"></a>
<div id="ADXDK19390" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Comparing XML Documents with the XMLDiff Bean</h3>
<p>As explained in <a href="#CIHBBFJI">"XMLDiff"</a>, you can use XDK beans to compare the structure and significant content of XML documents.</p>
<p>The <code dir="ltr">XMLDiffSample.java</code> program illustrates how to use the <code dir="ltr">XMLDiff</code> bean. The program implements the following methods:</p>
<ul>
<li>
<p><code dir="ltr">showDiffs()</code></p>
</li>
<li>
<p><code dir="ltr">doXSLTransform()</code></p>
</li>
<li>
<p><code dir="ltr">createURL()</code></p>
</li>
</ul>
<p>The basic architecture of the program is as follows:</p>
<ol>
<li>
<p>The program declares and initializes the fields used by the class. Note that one field is of type <code dir="ltr">XMLDiffFrame</code>, which is the class implemented in the <code dir="ltr">XMLDiffFrame.java</code> demo. The class defines the following fields:</p>
<pre dir="ltr">
protected XMLDocument doc1;   /* DOM tree for first file */
protected XMLDocument doc2;   /* DOM tree for second file */
protected static XMLDiffFrame diffFrame; /* GUI frame */
protected static XMLDiffSample dfxApp;   /* XMLDiff sample application */
protected static XMLDiff xmlDiff;        /* XML diff object */
protected static XMLDocument xslDoc;     /* parsed xsl file */
protected static String outFile = new String("XMLDiffSample.xsl"); /* output
                                                              xsl file name */
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method creates an <code dir="ltr">XMLDiffSample</code> object as follows:</p>
<pre dir="ltr">
dfxApp = new XMLDiffSample();
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method adds and initializes a <code dir="ltr">JFrame</code> to display the output of the comparison. The following code illustrates this technique:</p>
<pre dir="ltr">
diffFrame = new XMLDiffFrame(dfxApp);
diffFrame.addTransformMenu();
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method instantiates the <code dir="ltr">XMLDiff</code> bean. The following code illustrates this technique:</p>
<pre dir="ltr">
xmlDiff = new XMLDiff();
</pre></li>
<li>
<p>The <code dir="ltr">main()</code> method invokes the <code dir="ltr">showDiffs()</code> method. This method performs the following tasks:</p>
<ol>
<li>
<p>Invokes <code dir="ltr">XMLDiff.diff()</code> to compare the input XML documents.</p>
</li>
<li>
<p>Generates and displays an XSLT stylsheet that can transform one input document into the other document.</p>
</li>
</ol>
<p>The following code fragment shows the <code dir="ltr">showDiffs()</code> method call:</p>
<pre dir="ltr">
if (args.length == 3)
  outFile = args[2];
if(args.length &gt;= 2)
  dfxApp.showDiffs(new File(args[0]), new File(args[1])); 
diffFrame.setVisible(true);
</pre></li>
</ol>
<p>The following section explains the <code dir="ltr">showDiffs()</code> method.</p>
<div id="ADXDK19391" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref262"></a>
<h4 class="sect3">Comparing the XML Files and Generating a Stylesheet</h4>
<p>The <code dir="ltr">showDiffs()</code> method illustrates the use of the <code dir="ltr">XMLDiff</code> bean.</p>
<p>The method follows these steps:</p>
<ol>
<li>
<p>Set the files for the <code dir="ltr">XMLDiff</code> processor. The following statement illustrates this technique:</p>
<pre dir="ltr">
xmlDiff.setFiles(file1, file2);
</pre></li>
<li>
<p>Compare the files. The <code dir="ltr">diff()</code> method returns a boolean value that indicates whether the input documents have identical structure and content. If they are equivalent, then the method prints a message to the <code dir="ltr">JFrame</code> implemented by the <code dir="ltr">XMLDiffFrame</code> class. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
if(!xmlDiff.diff())
{
  JOptionPane.showMessageDialog
  (
    diffFrame,
    "Files are equivalent in XML representation",
    "XMLDiffSample Message",
    JOptionPane.PLAIN_MESSAGE
  );
}
</pre></li>
<li>
<p>Generate a DOM for the XSLT stylesheet that shows the differences between the two documents. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
xslDoc = xmlDiff.generateXSLDoc();
</pre></li>
<li>
<p>Display the documents in the <code dir="ltr">JFrame</code> implemented by <code dir="ltr">XMLDiffFrame</code>. Note that <code dir="ltr">XMLDiffFrame</code> instantiates the <code dir="ltr">XMLSourceView</code> bean, which is deprecated. The method follows these steps:</p>
<ol>
<li>
<p>Create the source pane for the input documents. Pass the DOM handles of the two documents to the <code dir="ltr">diffFrame</code> object to make the source pane:</p>
<pre dir="ltr">
diffFrame.makeSrcPane(xmlDiff.getDocument1(), xmlDiff.getDocument2());
</pre></li>
<li>
<p>Create the pane that shows the differences between the documents. Pass references to the text panes to <code dir="ltr">diffFrame</code> as follows:</p>
<pre dir="ltr">
diffFrame.makeDiffSrcPane(new XMLDiffSrcView(xmlDiff.getDiffPane1()),
                          new XMLDiffSrcView(xmlDiff.getDiffPane2()));
</pre></li>
<li>
<p>Create the pane for the XSLT stylesheet. Pass the DOM of the stylesheet as follows:</p>
<pre dir="ltr">
diffFrame.makeXslPane(xslDoc, "Diff XSL Script");
diffFrame.makeXslTabbedPane();
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_pipeline.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_xsu.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
