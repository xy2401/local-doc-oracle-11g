<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the JAXB Class Generator</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_sproc.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_pipeline.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">16/47</span> <!-- End Header -->
<div id="ADXDK6000" class="chapter"><a id="g1009474"></a> <a id="i1007438"></a>
<h1 class="chapter"><span class="secnum">8</span> Using the JAXB Class Generator</h1>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDJABBG">Introduction to the JAXB Class Generator</a></p>
</li>
<li>
<p><a href="#i1006510">Using the JAXB Class Generator: Overview</a></p>
</li>
<li>
<p><a href="#CHDEFJGB">Processing XML with the JAXB Class Generator</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use the JAXB class generator for new applications in order to use the object binding feature for XML data. The Oracle9<span class="italic">i</span> class generator for Java is deprecated. Oracle Database 10g supports the Oracle9<span class="italic">i</span> class generator for backward compatibility.</div>
<a id="CHDJABBG"></a>
<div id="ADXDK19289" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to the JAXB<a id="sthref201"></a><a id="sthref202"></a><a id="sthref203"></a><a id="sthref204"></a> Class Generator</h2>
<p>This section provides an introduction to the Java Architecture for XML Binding (<a href="glossary.htm#i999030"><span class="xrefglossterm">JAXB</span></a>). It discusses the following topics:</p>
<ul>
<li>
<p><a href="#CHDJIIGF">Prerequisites</a></p>
</li>
<li>
<p><a href="#CHDJGJJE">Standards and Specifications</a></p>
</li>
<li>
<p><a href="#CHDIABDC">Marshalling and Unmarshalling with JAXB</a></p>
</li>
<li>
<p><a href="#CHDFDIAE">Validation with JAXB</a></p>
</li>
<li>
<p><a href="#CHDFBADC">JAXB Customization</a></p>
</li>
</ul>
<a id="CHDJIIGF"></a>
<div id="ADXDK19290" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>This chapter assumes that you already have some familiarity with the following topics:</p>
<ul>
<li>
<p><a href="glossary.htm#CBAJCHHC"><span class="xrefglossterm">Java Architecture for XML Binding (JAXB)</span></a>. If you require a more thorough introduction to JAXB than is possible in this chapter, consult the XML resources listed in <a href="preface.htm#CIAFJDBI">"Related Documents"</a> of the preface.</p>
</li>
<li>
<p><a href="glossary.htm#CBAEDDHJ"><span class="xrefglossterm">XML Schema language</span></a>. Refer to <a href="adx_j_sproc.htm#i1003036">Chapter 7, "Using the Schema Processor for Java"</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJGJJE"></a>
<div id="ADXDK19291" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standards and Specifications</h3>
<p>The Oracle JAXB processor implements JSR-31 "The Java Architecture for XML Binding (JAXB)", Version 1.0, which is a recommendation of the JCP (Java Community Process).</p>
<p>The Oracle Database XDK implementation of the JAXB 1.0 specification does not support the following optional features:</p>
<ul>
<li>
<p>Javadoc generation</p>
</li>
<li>
<p>Fail Fast validation</p>
</li>
<li>
<p>External customization file</p>
</li>
<li>
<p>XML Schema concepts described in section E.2 of the specification</p>
</li>
</ul>
<p><a href="glossary.htm#i999151"><span class="xrefglossterm">JSR</span></a> is a Java Specification Request of the JCP. You can find a description of the JSR at the following URL:</p>
<pre dir="ltr">
<a href="http://jcp.org/en/jsr/overview">http://jcp.org/en/jsr/overview</a>
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_standards.htm#BABDIIJG">Chapter 31, "XDK Standards"</a> for a summary of the standards supported by the XDK</div>
</div>
<!-- class="sect2" -->
<div id="ADXDK19292" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref205"></a>
<h3 class="sect2">JAXB Class Generator Features</h3>
<p>The JAXB class generator for Java generates the interfaces and the implementation classes corresponding to an XML Schema. Its principal advantage to Java developers is automation of the mapping between XML documents and Java code, which enables programs to use generated code to read, manipulate, and re-create XML data. The Java classes, which can be extended, give the developer access to the XML data without knowledge of the underlying XML data structure.</p>
<p>In short, the Oracle JAXB class generator provides the following advantages for XML application development in Java:</p>
<ul>
<li>
<p>Speed</p>
<p>Because the schema-to-code conversion is automated, you can rapidly generate Java code from an input XML schema.</p>
</li>
<li>
<p>Ease of use</p>
<p>You can call generated <code dir="ltr">get</code> and <code dir="ltr">set</code> methods rather than code your own from scratch.</p>
</li>
<li>
<p>Automated data conversion</p>
<p>You can automate the conversion of XML document data into Java datatypes.</p>
</li>
<li>
<p>Customization</p>
<p>JAXB provides a flexible framework that enables you to customize the binding of XML elements and attributes.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDIABDC"></a>
<div id="ADXDK19293" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Marshalling and Unmarshalling with JAXB</h3>
<p>JAXB is an API and set of tools that maps XML data to Java objects. JAXB simplifies access to an XML document from a Java program by presenting the XML document to the program in a Java format.</p>
<p>You can use the JAXB API and tools to perform the following basic tasks:</p>
<ol>
<li>
<p>Generate and compile JAXB classes from an XML schema with the <code dir="ltr">orajaxb</code> command-line utility.</p>
<p>To use the JAXB class generator to generate Java classes you must provide it with an XML schema. DTDs are not supported by JAXB. As explained in <a href="adx_j_sproc.htm#CIHICCJB">"Converting DTDs to XML Schemas"</a>, however, you can use the <code dir="ltr">DTD2Schema</code> program to convert a DTD to an XML schema. Afterwards, you can use the JAXB class generator to generate classes from the schema.</p>
<p>The JAXB compiler generates Java classes that map to constraints in the source XML schema. The classes implements <code dir="ltr">get</code> and <code dir="ltr">set</code> methods that you can use to obtain and specify data for each type of element and attribute in the schema.</p>
</li>
<li>
<p>Process XML documents by instantiating the generated classes in a Java program.</p>
<p>Specifically, you can write a program that uses the JAXB binding framework to perform the following tasks:</p>
<ol>
<li>
<p>Unmarshal the XML documents.</p>
<p>As explained in the JAXB specification, <a href="glossary.htm#CBAGDBHB"><span class="xrefglossterm">unmarshalling</span></a> is defined as moving data from an XML document to the Java-generated objects.</p>
</li>
<li>
<p>Validate the XML documents.</p>
<p>You can validate before or during the unmarshalling of the contents into the content tree. You can also validate on demand by calling the validation API on the Java object. Refer to <a href="#CHDFDIAE">"Validation with JAXB"</a>.</p>
</li>
<li>
<p>Modify Java content objects.</p>
<p>The content tree of data objects represents the structure and content of the source XML documents. You can use the <code dir="ltr">set</code> methods defined for a class to modify the content of elements and attributes.</p>
</li>
<li>
<p>Marshal Java content objects back to XML.</p>
<p>In contrast to unmarshalling, <a href="glossary.htm#CBAHGBAJ"><span class="xrefglossterm">marshalling</span></a> is creating an XML document from Java objects by traversing a content tree of instances of Java classes. You can serialize the data to a DOM tree, SAX content handler, transformation result, or output stream.</p>
</li>
</ol>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDFDIAE"></a>
<div id="ADXDK19294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validation with JAXB</h3>
<p>A Java content tree is considered valid with respect to an XML schema when marshalling the tree generates a valid XML document.</p>
<p>JAXB applications can perform validation in the following circumstances:</p>
<ul>
<li>
<p>Unmarshalling-time validation that notifies the application of errors and warnings during unmarshalling. If unmarshalling includes validation that is error-free, then the input XML document and the Java content tree are valid.</p>
</li>
<li>
<p>On-demand validation of a Java content tree initiated by the application.</p>
</li>
<li>
<p>Fail-fast validation that gives immediate results while updating the Java content tree with <code dir="ltr">set</code> and <code dir="ltr">get</code> methods. As specified in <a href="#CHDJGJJE">"Standards and Specifications"</a>, fail-fast validation is an optional feature in the JAXB 1.0 specification that is not supported in the XDK implementation of the JAXB class generator.</p>
</li>
</ul>
<p>JAXB applications must be able to marshal a valid Java content tree, but they are not required to ensure that the Java content tree is valid before calling one of the marshalling APIs. The marshalling process does not itself validate the content tree. Programs are merely required to throw a <code dir="ltr">javax/xml/bind/MarshalException</code> when marshalling fails due to invalid content.</p>
</div>
<!-- class="sect2" -->
<a id="CHDFBADC"></a>
<div id="ADXDK19295" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">JAXB Customization</h3>
<p>The declared element and type names in an XML schema do not always provide the most useful Java class names. You can override the default JAXB bindings by using custom binding declarations, which are described in the JAXB specification. These declarations enable you to customize your generated JAXB classes beyond the XML-specific constraints in an XML schema to include Java-specific refinements such as class and package name mappings.</p>
<p>You can annotate the schema to perform the following customizations:</p>
<ul>
<li>
<p>Bind XML names to user-defined Java class names</p>
</li>
<li>
<p>Name the package, derived classes, and methods</p>
</li>
<li>
<p>Choose which elements to bind to which classes</p>
</li>
<li>
<p>Decide how to bind each attribute and element declaration to a property in the appropriate content class</p>
</li>
<li>
<p>Choose the type of each attribute-value or content specification</p>
</li>
</ul>
<p>Several of the demos programs listed in <a href="#CHDGCFDC">Table 8-2</a> illustrate JAXB customizations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>Chapter 4, "Customizing JAXB Bindings," in the JAXB tutorial at http://java.sun.com/webservices/tutorial.html</p>
</li>
<li>
<p><a href="#CHDBJBHB">"Customizing a Class Name in a Top-Level Element"</a> for a detailed explanation of a customization demo</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006510"></a>
<div id="ADXDK19296" class="sect1">
<h2 class="sect1">Using the JAXB Class Generator: Overview<a id="sthref206"></a><a id="sthref207"></a></h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDEDEBJ">Using the JAXB Processor: Basic Process</a></p>
</li>
<li>
<p><a href="#CHDGCIBD">Running the XML Schema Processor Demo Programs</a></p>
</li>
<li>
<p><a href="#CHDBBIFF">Using the JAXB Class Generator Command-Line Utility</a></p>
</li>
</ul>
<a id="CHDEDEBJ"></a>
<div id="ADXDK19297" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the JAXB Processor: Basic Process</h3>
<p>The XDK JAXB API exposes the following packages:</p>
<ul>
<li>
<p><code dir="ltr">javax.xml.bind</code>, which provides a runtime binding framework for client applications including unmarshalling, marshalling, and validation</p>
</li>
<li>
<p><code dir="ltr">javax.xml.bind.util</code>, which provides useful client utility classes</p>
</li>
</ul>
<p>The most important classes and interfaces in the <code dir="ltr">javax.xml.bind</code> package are described in <a href="#BABHGDEA">Table 8-1</a>. These form the core of most JAXB applications.</p>
<div id="ADXDK19298" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref208"></a><a id="BABHGDEA"></a>Table 8-1 javax.xml.bind Classes and Interfaces</p>
<table class="cellalignment1211" title="javax.xml.bind Classes and Interfaces" summary="This table describes the JAXB classes and interfaces available in the XDK Java API." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t5">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t5">Description</th>
<th class="cellalignment1212" id="r1c3-t5">Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">JAXBContext</code> class</p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c2-t5">
<p>Provides an abstraction for managing the XML/Java binding information necessary to implement the JAXB binding framework operations: unmarshal, marshal, and validate. A client application obtains new instances of this class by invoking the <code dir="ltr">newInstance()</code> method.</p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">newInstance()</code> creates a JAXB content class. Supply this method the name of the package containing the generated classes.</p>
</li>
<li>
<p><code dir="ltr">createMarshaller()</code> creates a marshaller that you can use to convert a content tree to XML.</p>
</li>
<li>
<p><code dir="ltr">createUnmarshaller()</code> creates an unmarshaller that you can use to convert XML to a content tree.</p>
</li>
<li>
<p><code dir="ltr">createValidator()</code> creates a <code dir="ltr">Validator</code> object that can validate a java content tree against its source schema.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">Marshaller</code> interface</p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c2-t5">
<p>Governs the process of serializing Java content trees into XML data.</p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code dir="ltr">getProperty()</code> obtains the property in the underlying implementation of marshaller.</p>
</li>
<li>
<p><code dir="ltr">marshal()</code> marshals the content tree into a DOM, SAX2 events, output stream, transformation result, or <code dir="ltr">Writer</code>.</p>
</li>
<li>
<p><code dir="ltr">setEventHandler()</code> creates a <code dir="ltr">Validator</code> object that validates a java content tree against its source schema.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">Unmarshaller</code> interface</p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c2-t5">
<p>Governs the process of deserializing XML data into newly created Java content trees, optionally validating the XML data as it is unmarshalled.</p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code dir="ltr">getUnmarshallerHandler()</code> returns an unmarshaller handler object usable as a component in an XML pipeline.</p>
</li>
<li>
<p><code dir="ltr">isValidating()</code> indicates whether the unmarshaller is set to validate mode.</p>
</li>
<li>
<p><code dir="ltr">setEventHandler()</code> allows an application to register a <code dir="ltr">ValidationEventHandler</code>.</p>
</li>
<li>
<p><code dir="ltr">setValidating()</code> specifies whether the unmarshaller should validate during unmarshal operations.</p>
</li>
<li>
<p><code dir="ltr">marshal()</code> unmarshals XML data from the specified file, URL, input stream, input source, SAX, or DOM.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">Validator</code> interface</p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c2-t5">
<p>Controls the validation of content trees during runtime. Specifically, this interface controls on-demand validation, which enables clients to receive data about validation errors and warnings detected in the Java content tree.</p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">getEventHandler()</code> returns the current or default event handler.</p>
</li>
<li>
<p><code dir="ltr">setEventHandler()</code> allows an application to register a <code dir="ltr">ValidationEventHandler</code>.</p>
</li>
<li>
<p><code dir="ltr">validate()</code> validates Java content trees on-demand at runtime. This method can validate any arbitrary subtree of the Java content tree.</p>
</li>
<li>
<p><code dir="ltr">validateRoot()</code> validates the Java content tree rooted at <code dir="ltr">rootObj</code>. You can use this method to validate an entire Java content tree.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p><a href="#CHDBCBHJ">Figure 8-1</a> depicts the process flow of a framework that uses the JAXB class generator.</p>
<div id="ADXDK19299" class="figure">
<p class="titleinfigure"><a id="CHDBCBHJ"></a>Figure 8-1 JAXB Class Generator for Java</p>
<img width="549" height="233" src="img/adxdk003.gif" alt="Description of Figure 8-1 follows" /><br />
<a id="sthref209" href="img_text/adxdk003.htm">Description of "Figure 8-1 JAXB Class Generator for Java"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The basic stages of the process illustrated in <a href="#CHDBCBHJ">Figure 8-1</a> are as follows:</p>
<ol>
<li>
<p>The XML parser parses the XML schema and sends the parsed data to the JAXB class generator.</p>
</li>
<li>
<p>The class generator creates Java classes and interfaces based on the input XML schema.</p>
<p>By default, one XML element or type declaration generates one interface and one class. For example, if the schema defines an element named <code dir="ltr">&lt;anElement&gt;</code>, then by default the JAXB class generator generates a source file named <code dir="ltr">AnElement.java</code> and another named <code dir="ltr">AnElementImpl.java</code>. You can use customize binding declarations to override the default binding of XML Schema components to Java representations.</p>
</li>
<li>
<p>The Java compiler compiles the <code dir="ltr">.java</code> source files into class files. All of the generated classes, source files, and application code must be compiled.</p>
</li>
<li>
<p>Your Java application uses the compiled classes and the binding framework to perform the following types of tasks:</p>
<ul>
<li>
<p>Create a JAXB context. You use this context to create the marshaller and unmarshaller.</p>
</li>
<li>
<p>Build object trees representing XML data that is valid against the XML schema. You can perform this task by either unmarshalling the data from an XML document that conforms to the schema or instantiating the classes.</p>
</li>
<li>
<p>Access and modify the data.</p>
</li>
<li>
<p>Optionally validate the modifications to the data relative to the constraints expressed in the XML schema.</p>
</li>
<li>
<p>Marshal the data to new XML documents.</p>
</li>
</ul>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> for details of the JAXB API</p>
</li>
<li>
<p><a href="#CHDEFJGB">"Processing XML with the JAXB Class Generator"</a> for detailed explanations of JAXB processing</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGCIBD"></a>
<div id="ADXDK19300" class="sect2">
<h3 class="sect2">Running the XML Schema Processor Demo Programs<a id="sthref210"></a></h3>
<p>Demo programs for the JAXB class generator for Java are included in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/jaxb</code>. Specifically, the XDK includes the JAXB demos listed in <a href="#CHDGCFDC">Table 8-2</a>.</p>
<div id="ADXDK19301" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref211"></a><a id="CHDGCFDC"></a>Table 8-2 JAXB Class Generator Demos</p>
<table class="cellalignment1211" title="JAXB Class Generator Demos" summary="Lists the JAXB sample applications" dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Program</th>
<th class="cellalignment1212" id="r1c2-t7">Subdirectory within Oracle Home</th>
<th class="cellalignment1212" id="r1c3-t7">Demonstrates . . .</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp1.java</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample1</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c3-t7">
<p>The binding of top-level element and <code dir="ltr">complexType</code> definitions in the <code dir="ltr">sample1.xsd</code> schema to Java classes.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp2.java</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample2</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c3-t7">
<p>The binding of a top-level element with an inline <code dir="ltr">simpleType</code> definition in the <code dir="ltr">sample2.xsd</code> schema.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp3.java</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample3</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c3-t7">
<p>The binding of a top-level <code dir="ltr">complexType</code> element that is derived by extension from another top-level <code dir="ltr">complexType</code> definition. Refer to <a href="#CHDEBHHA">"Binding Complex Types"</a> for a detailed explanation of this program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp4.java</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample4</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c3-t7">
<p>The binding of a content model within a <code dir="ltr">complexType</code> that refers to a top-level named group.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp5.java</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample5</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c3-t7">
<p>The binding of <code dir="ltr">&lt;choice&gt;</code> with <code dir="ltr">maxOccurs</code> unbounded within a <code dir="ltr">complexType</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp6.java</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample6</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t7 r1c3-t7">
<p>The binding of atomic datatypes.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp7.java</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample7</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t7 r1c3-t7">
<p>The binding a <code dir="ltr">complexType</code> definition in which <code dir="ltr">mixed="true"</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp8.java</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample8</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t7 r1c3-t7">
<p>The binding of elements and types declared in two different namespaces.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp9.java</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample9</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t7 r1c3-t7">
<p>The customization of a Java package name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp10.java</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample10</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t7 r1c3-t7">
<p>The customization of class name in a top-level element. Refer to <a href="#CHDBJBHB">"Customizing a Class Name in a Top-Level Element"</a> for a detailed explanation of this program.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp11.java</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample11</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t7 r1c3-t7">
<p>The customization of class name of a local element occurring in a repeating model group declared inside a <code dir="ltr">complexType</code> element.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp12.java</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample12</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t7 r1c3-t7">
<p>The customization of the attribute name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp13.java</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample13</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t7 r1c3-t7">
<p>The <code dir="ltr">javaType</code> customization specified on a global <code dir="ltr">simpleType</code>. The <code dir="ltr">javaType</code> customization specifies the parse and print method declared on a user-defined class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t7" headers="r1c1-t7">
<p><code dir="ltr">SampleApp14.java</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t7 r1c2-t7">
<p><code dir="ltr">/xdk/demo/java/jaxb/Sample14</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t7 r1c3-t7">
<p>The customization of the typesafe enum class name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p>You can find documentation that describes how to compile and run the sample programs in the <code dir="ltr">README</code> in the same directory. The basic steps are as follows:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/jaxb</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\jaxb</code> directory (Windows).</p>
</li>
<li>
<p>Make sure that your environment variables are set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>.</p>
</li>
<li>
<p>Run <code dir="ltr">make</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) at the system prompt. The <code dir="ltr">make</code> utility performs the following sequential actions for each sample subdirectory:</p>
<ol>
<li>
<p>Runs the <code dir="ltr">orajaxb</code> utility to generate Java class files based on an input XML schema. For most of the demos, the output classfiles are written to the <code dir="ltr">generated</code> subdirectory. For example, the <code dir="ltr">make</code> file performs the following commands for the <code dir="ltr">sample1.xsd</code> schema in the <code dir="ltr">Sample1</code> subdirectory:</p>
<pre dir="ltr">
cd ./Sample1; $(JAVA_HOME)/bin/java -classpath "$(MAKE_CLASSPATH)" \
oracle.xml.jaxb.orajaxb -schema sample1.xsd -targetPkg generated; echo;
</pre></li>
<li>
<p>Runs the <code dir="ltr">javac</code> utility to compile the Java classes. For example, the <code dir="ltr">make</code> utility performs the following commands for the Java class files in the <code dir="ltr">Sample1/generated/</code> subdirectory:</p>
<pre dir="ltr">
cd ./Sample1/generated; $(JAVA_HOME)/bin/javac -classpath \
"$(MAKE_CLASSPATH)" *.java
</pre></li>
<li>
<p>Runs the <code dir="ltr">javac</code> utility to compile a sample Java application that uses the classes compiled in the preceding step. For example, the <code dir="ltr">make</code> utility compiles the <code dir="ltr">SampleApp1.java</code> program:</p>
<pre dir="ltr">
cd ./Sample1; $(JAVA_HOME)/bin/javac -classpath "$(MAKE_CLASSPATH)" \
SampleApp1.java
</pre></li>
<li>
<p>Runs the sample Java application and writes the results to a log file. For example, the <code dir="ltr">make</code> utility executes the <code dir="ltr">SampleApp1</code> class and writes the output to <code dir="ltr">sample1.out</code>:</p>
<pre dir="ltr">
cd ./Sample1; $(JAVA_HOME)/bin/java -classpath "$(MAKE_CLASSPATH)" \SampleApp1 &gt; sample1.out
</pre></li>
</ol>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDBBIFF"></a>
<div id="ADXDK19302" class="sect2">
<h3 class="sect2"><a id="sthref212"></a><a id="sthref213"></a><a id="sthref214"></a>Using the JAXB Class Generator Command-Line Utility</h3>
<p>The XDK includes <code dir="ltr">orajaxb</code>, which is a command-line Java interface that generates Java classes from input XML schemas. The <code dir="ltr">$ORACLE_HOME/bin/orajaxb</code> and <code dir="ltr">%ORACLE_HOME%\bin\orajaxb.bat</code> shell scripts execute the <code dir="ltr">oracle.xml.jaxb.orajaxb</code> class. To use <code dir="ltr">orajaxb</code> ensure that your <code dir="ltr">CLASSPATH</code> is set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>.</p>
<p><a href="#CHDFABII">Table 8-3</a> lists the <code dir="ltr">orajaxb</code> command-line options.</p>
<div id="ADXDK19303" class="tblformal">
<p class="titleintable"><a id="sthref215"></a><a id="CHDFABII"></a>Table 8-3 orajaxb Command-Line Options</p>
<table class="cellalignment1214" title="orajaxb Command-Line Options " summary="Option and Purpose are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t8">Option</th>
<th class="cellalignment1212" id="r1c2-t8">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">help</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t8 r1c2-t8">
<p>Prints the help message.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">version</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t8 r1c2-t8">
<p>Prints the release version.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">outputdir</code> <code dir="ltr"><span class="codeinlineitalic">OutputDir</span></code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t8 r1c2-t8">
<p>Specifies the directory in which to generate the Java source files. If the schema has a namespace, then the program generates the java code in the package (corresponding to the namespace) referenced from the outputDir. By default, the current directory is the <code dir="ltr"><span class="codeinlineitalic">outputDir</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">schema</code> <code dir="ltr"><span class="codeinlineitalic">SchemaFile</span></code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t8 r1c2-t8">
<p>Specifies the input XML schema.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">targetPkg</code> <code dir="ltr"><span class="codeinlineitalic">targetPkg</span></code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t8 r1c2-t8">
<p>Specifies the target package name. This option overrides any binding customization for package name as well as the default package name algorithm defined in the JAXB Specification.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">interface</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t8 r1c2-t8">
<p>Generates the interfaces only.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">verbose</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t8 r1c2-t8">
<p>Lists the generated classes and interfaces.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">defaultCus</code> <code dir="ltr"><span class="codeinlineitalic">fileName</span></code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t8 r1c2-t8">
<p>Generates the default customization file.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t8" headers="r1c1-t8">
<p>-<code dir="ltr">extension</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t8 r1c2-t8">
<p>Allows vendor specific extensions and does not strictly follow the compatibility rules specified in Appendix E.2 of the JAXB 1.0 specification. When specified, the program ignores JAXB 1.0 unsupported features such as notations, substitution groups, and any attributes.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ADXDK19304" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref216"></a>
<h4 class="sect3">Using the JAXB Class Generator Command-Line Utility: Example</h4>
<p>To test <code dir="ltr">orjaxb</code>, change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/jaxb/Sample1</code> directory. If you have run <code dir="ltr">make</code>, then the directory should contain the following files:</p>
<pre dir="ltr">
SampleApp1.class
SampleApp1.java
generated/
sample1.out
sample1.xml
sample1.xsd
</pre>
<p>The <code dir="ltr">sample.xsd</code> file is the XML schema associated with <code dir="ltr">sample1.xml</code>. The <code dir="ltr">generated/</code> subdirectory contains the classes generated from the input schema. You can test <code dir="ltr">orajaxb</code> by deleting the contents of <code dir="ltr">generated/</code> and regenerating the classes as follows:</p>
<pre dir="ltr">
rm generated/* 
orajaxb -schema sample1.xsd -targetPkg generated -verbose
</pre>
<p>The terminal should display the following output:</p>
<pre dir="ltr">
generated/CType.java
generated/AComplexType.java
generated/AnElement.java
generated/RElemOfCTypeInSameNs.java
generated/RType.java
generated/RElemOfSTypeInSameNs.java

generated/CTypeImpl.java
generated/AComplexTypeImpl.java
generated/AnElementImpl.java
generated/RElemOfCTypeInSameNsImpl.java
generated/RTypeImpl.java
generated/RElemOfSTypeInSameNsImpl.java
generated/ObjectFactory.java
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007907"></a>
<div id="ADXDK19305" class="sect2">
<h3 class="sect2">JAXB Features Not Supported in the XDK<a id="sthref217"></a></h3>
<p>The Oracle Database XDK implementation of the JAXB specification does not support the following features:</p>
<ul>
<li>
<p>Javadoc generation</p>
</li>
<li>
<p>XML Schema component "any" and substitution groups</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEFJGB"></a>
<div id="ADXDK19306" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Processing XML with the JAXB Class Generator</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDEBHHA">Binding Complex Types</a></p>
</li>
<li>
<p><a href="#CHDBJBHB">Customizing a Class Name in a Top-Level Element</a></p>
</li>
</ul>
<a id="CHDEBHHA"></a>
<div id="ADXDK19307" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Binding Complex Types</h3>
<p>The <code dir="ltr">Sample3.java</code> program illustrates how to bind a complex type definition to a Java content interface. One complex type defined in the XML schema is derived by extension from another complex type.</p>
<a id="CHDIFCBF"></a>
<div id="ADXDK19308" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Defining the Schema</h4>
<p><a href="#CHDHFAIA">Example 8-1</a> illustrates the XML data document that provides the input to the sample application. The <code dir="ltr">sample3.xml</code> document describes the address of an employee.</p>
<div id="ADXDK19309" class="example">
<p class="titleinexample"><a id="CHDHFAIA"></a>Example 8-1 sample3.xml</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;myAddress xmlns = "http://www.oracle.com/sample3/"
           xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation = "http://www.oracle.com/sample3 sample3.xsd"&gt;
    &lt;name&gt;James Bond&lt;/name&gt;
    &lt;doorNumber&gt;420&lt;/doorNumber&gt;
    &lt;street&gt;Oracle parkway&lt;/street&gt;
    &lt;city&gt;Redwood shores&lt;/city&gt;
    &lt;state&gt;CA&lt;/state&gt;
    &lt;zip&gt;94065&lt;/zip&gt;
    &lt;country&gt;United States&lt;/country&gt;
&lt;/myAddress&gt;
</pre></div>
<!-- class="example" -->
<p>The XML schema shown in <a href="#CHDFGBAC">Example 8-2</a> defines the structure that you use to validate <code dir="ltr">sample3.xml</code>. The schema defines two complex types and one element, which are defined as follows:</p>
<ul>
<li>
<p>The first complex type, which is named <code dir="ltr">Address</code>, is a sequence of elements. Each element in the sequence describes one part of the address: name, door number, and so forth.</p>
</li>
<li>
<p>The second complex type, which is named <code dir="ltr">USAddress</code>, uses the <code dir="ltr">&lt;extension base="exp:Address"&gt;</code> element to extend <code dir="ltr">Address</code> by adding U.S.-specific elements to the <code dir="ltr">Address</code> sequence: state, zip, and so forth. The <code dir="ltr">exp</code> prefix specifies the <code dir="ltr">http://www.oracle.com/sample3/</code> namespace.</p>
</li>
<li>
<p>The element is named <code dir="ltr">myAddress</code> and is of type <code dir="ltr">exp:USAddress</code>. The <code dir="ltr">exp</code> prefix specifies the <code dir="ltr">http://www.oracle.com/sample3/</code> namespace. In <code dir="ltr">sample3.xml</code>, the <code dir="ltr">myAddress</code> top-level element, which is in namespace <code dir="ltr">http://www.oracle.com/sample3/</code>, conforms to the schema definition.</p>
</li>
</ul>
<div id="ADXDK19310" class="example">
<p class="titleinexample"><a id="CHDFGBAC"></a>Example 8-2 sample3.xsd</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
 
&lt;!-- Binding a complex type definition to java content interface
 The complex type definition is derived by extension
--&gt;
 
&lt;schema xmlns = "http://www.w3.org/2001/XMLSchema"
        xmlns:exp="http://www.oracle.com/sample3/"
        targetNamespace="http://www.oracle.com/sample3/"
        elementFormDefault="qualified"&gt;
 
   &lt;complexType name="Address"&gt;
      &lt;sequence&gt;
         &lt;element name="name" type="string"/&gt;
         &lt;element name="doorNumber" type="short"/&gt;
         &lt;element name="street" type="string"/&gt;
         &lt;element name="city" type="string"/&gt;
      &lt;/sequence&gt;
   &lt;/complexType&gt;
 
  &lt;complexType name="USAddress"&gt;
    &lt;complexContent&gt;
     &lt;extension base="exp:Address"&gt;
       &lt;sequence&gt;
          &lt;element name="state" type="string"/&gt;
          &lt;element name="zip" type="integer"/&gt;
          &lt;element name="country" type="string"/&gt;
       &lt;/sequence&gt;
     &lt;/extension&gt;
    &lt;/complexContent&gt;
  &lt;/complexType&gt;
 
  &lt;element name="myAddress" type="exp:USAddress"/&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDJIDCC"></a>
<div id="ADXDK19311" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Generating and Compiling the Java Classes</h4>
<p>If you have an XML document and corresponding XML schema, then the next stage of processing is to generate the Java classes from the XML schema. You can use the JAXB command-line interface described in <a href="#CHDBBIFF">"Using the JAXB Class Generator Command-Line Utility"</a> to perform this task.</p>
<p>Assuming that your environment is set up as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>, you can create the source files in the <code dir="ltr">generated</code> package as follows:</p>
<pre dir="ltr">
cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample3
orajaxb -schema sample1.xsd -targetPkg generated
</pre>
<p>The preceding <code dir="ltr">orajaxb</code> command should create the following source files in the <code dir="ltr">./generated/</code> subdirectory:</p>
<pre dir="ltr">
Address.java
AddressImpl.java
MyAddress.java
MyAddressImpl.java
ObjectFactory.java
USAddress.java
USAddressImpl.java
</pre>
<p>The complex types <code dir="ltr">Address</code> and <code dir="ltr">USAddress</code> each has two associated source files, as does the element <code dir="ltr">MyAddress</code>. The source file named after the element contains the interface; the file with the suffix <code dir="ltr">Impl</code> contains the class that implements the interface. For example, <code dir="ltr">Address.java</code> contains the interface <code dir="ltr">Address</code>, whereas <code dir="ltr">AddressImpl.java</code> contains the class that implements <code dir="ltr">Address</code>.</p>
<p>The content of the <code dir="ltr">Address.java</code> source file is shown in <a href="#CHDEAHGH">Example 8-3</a>.</p>
<div id="ADXDK19312" class="example">
<p class="titleinexample"><a id="CHDEAHGH"></a>Example 8-3 Address.java</p>
<pre dir="ltr">
package generated; 
public interface Address
{
   public void setName(java.lang.String n);
   public java.lang.String getName(); 
   public void setDoorNumber(short d);
   public short getDoorNumber(); 
   public void setStreet(java.lang.String s);
   public java.lang.String getStreet(); 
   public void setCity(java.lang.String c);
   public java.lang.String getCity(); 
}
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">Address</code> complex type defined a sequence of elements: <code dir="ltr">name</code>, <code dir="ltr">doorNumber</code>, <code dir="ltr">street</code>, and <code dir="ltr">city</code>. Consequently, the <code dir="ltr">Address</code> interface includes a <code dir="ltr">get</code> and <code dir="ltr">set</code> method signature for each of the four elements. For example, the interface includes <code dir="ltr">getName()</code> for retrieving data in the <code dir="ltr">&lt;name&gt;</code> element and <code dir="ltr">setName()</code> for modifying data in this element.</p>
<p>You can compile the Java source files with <code dir="ltr">javac</code> as follows:</p>
<pre dir="ltr">
cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample3/generated
javac *.java
</pre></div>
<!-- class="sect3" -->
<div id="ADXDK19313" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref218"></a>
<h4 class="sect3">Processing the XML Data</h4>
<p><code dir="ltr">Sample3.java</code> shows how you can process the <code dir="ltr">sample3.xml</code> document by using the Java class files that you generated in <a href="#CHDJIDCC">"Generating and Compiling the Java Classes"</a>. The sample program unmarshals the XML data document, marshals it, and uses the generated classes to print and modify the address data.</p>
<p>The <code dir="ltr">Sample3.java</code> program processes the data as follows:</p>
<ol>
<li>
<p>Create strings for the XML data document file name and the name of the directory that contains the generated classes. This name is the package name. For example:</p>
<pre dir="ltr">
String fileName = "sample3.xml";
String instancePath = "generated";
</pre></li>
<li>
<p>Instantiate a JAXB context by invoking <code dir="ltr">JAXBContext.newInstance()</code>. A client application obtains a new instance of this class by initializing it with a context path. The path contains a list of Java package names that contain the interfaces available to the marshaller. The following statement illustrates this technique:</p>
<pre dir="ltr">
JAXBContext jc = JAXBContext.newInstance(instancePath);
</pre></li>
<li>
<p>Instantiate the unmarshaller. The <code dir="ltr">Unmarshaller</code> class governs the process of deserializing XML data into newly created objects, optionally validating the XML data as it is unmarshalled. The following statement illustrates this technique:</p>
<pre dir="ltr">
Unmarshaller u = jc.createUnmarshaller();
</pre></li>
<li>
<p>Unmarshal the XML document. Invoke the <code dir="ltr">Unmarshaller.unmarshal()</code> method to deserialize the <code dir="ltr">sample3.xml</code> document and return the content trees as an <code dir="ltr">Object</code>. You can create a URL from the XML filename by invoking the <code dir="ltr">fileToUrl()</code> helper method. The following statement illustrates this technique:</p>
<pre dir="ltr">
Object obj = u.unmarshal(fileToURL(fileName));
</pre></li>
<li>
<p>Instantiate a marshaller. The <code dir="ltr">Marshaller</code> class governs the process of serializing Java content trees back into XML data. The following statement illustrates this technique:</p>
<pre dir="ltr">
Marshaller m = jc.createMarshaller();
</pre></li>
<li>
<p>Marshal the content tree. Invoke the <code dir="ltr">Marshaller.marshal()</code> method to marshal the content tree <code dir="ltr">Object</code> returned by the unmarshaller. You can serialize the data to a DOM tree, SAX content handler, transformation result, or output stream. The following statement serializes the XML data, including markup, as an output stream:</p>
<pre dir="ltr">
m.marshal(obj, System.out);
</pre>
<p>By default, the marshaller uses UTF-8 encoding when writing XML data to an output stream.</p>
</li>
<li>
<p>Print the contents of the XML document. The program implements a <code dir="ltr">process()</code> method that accepts the content tree and marshaller as parameters.</p>
<p>The first stage of processing prints the data in the XML document without the XML markup. The method casts the <code dir="ltr">Object</code> generated by the marshaller into type <code dir="ltr">MyAddress</code>. It proceeds to invoke a series of methods whose method names are constructed by prefixing <code dir="ltr">get</code> to the name of an XML element. For example, to obtain the data in the <code dir="ltr">&lt;city&gt;</code> element in <a href="#CHDHFAIA">Example 8-1</a>, the program invokes <code dir="ltr">getCity()</code>. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
public static void process(Object obj, Marshaller m) throws Throwable
{
   generated.MyAddress elem = (generated.MyAddress)obj;
   System.out.println();
   System.out.println(" My address is: ");
   System.out.println("  name:  "  + elem.getName() + "\n"  +
                      "  doorNumber " + elem.getDoorNumber() + "\n" +
                      "  street: " + elem.getStreet() + "\n" +
                      "  city:   " + elem.getCity() + "\n"  +
                      "  state:  " + elem.getState() + "\n" +
                      "  zip:  " + elem.getZip() + "\n" +
                      "  country:  " + elem.getCountry() + "\n" +
                      "\n" );
...
</pre></li>
<li>
<p>Change the XML data and print it. The <code dir="ltr">process()</code> method continues by invoking set methods that are analogous to the preceding get methods. The name of each set method is constructed by prefixing <code dir="ltr">set</code> to the name of an XML element. For example, <code dir="ltr">setCountry()</code> changes the value in the <code dir="ltr">&lt;country&gt;</code> element. The following statements illustrate this technique:</p>
<pre dir="ltr">
short num = 550;
elem.setDoorNumber(num);
elem.setCountry("India");
num = 10100;
elem.setZip(new java.math.BigInteger("100100"));
elem.setCity("Noida");
elem.setState("Delhi");
</pre>
<p>After changing the data, the program prints the data by invoking the same get methods as in the previous step.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDBJBHB"></a>
<div id="ADXDK19314" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Customizing a Class Name in a Top-Level Element</h3>
<p>The <code dir="ltr">Sample10.java</code> program illustrates one form of JAXB customization. The program shows you can change the name of a class that corresponds to an element in the input XML schema.</p>
<div id="ADXDK19315" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref219"></a>
<h4 class="sect3">Defining the Schema</h4>
<p><a href="#CHDDHGIJ">Example 8-4</a> shows the XML data document that provides the input to the sample application. The <code dir="ltr">sample10.xml</code> document describes a business.</p>
<div id="ADXDK19316" class="example">
<p class="titleinexample"><a id="CHDDHGIJ"></a>Example 8-4 sample10.xml</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;business xmlns="http://jaxbcustomized/sample10/"&gt;
   &lt;title&gt;Software Development&lt;/title&gt;
   &lt;owner&gt;Larry Peterson&lt;/owner&gt;
   &lt;id&gt;45123&lt;/id&gt;
&lt;/business&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFICJC">Example 8-5</a> shows the XML schema that defines the structure of <code dir="ltr">sample10.xml</code>. The schema defines one complex type and one element as follows:</p>
<ul>
<li>
<p>The complex type, which is named <code dir="ltr">businessType</code>, is a sequence of elements. Each element in the sequence describes a part of the business: title, owner, and id.</p>
</li>
<li>
<p>The element, which is named <code dir="ltr">business</code>, is of type <code dir="ltr">biz:businessType</code>. The <code dir="ltr">biz</code> prefix specifies the <code dir="ltr">http://jaxbcustomized/sample10/</code> namespace. In <code dir="ltr">sample10.xml</code>, the <code dir="ltr">business</code> top-level element, which is in namespace <code dir="ltr">http://jaxbcustomized/sample10/</code>, conforms to the schema definition.</p>
</li>
</ul>
<div id="ADXDK19317" class="example">
<p class="titleinexample"><a id="CHDFICJC"></a>Example 8-5 sample10.xsd</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
 
&lt;!-- Customization of class name in top level element --&gt;

&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
        targetNamespace="http://jaxbcustomized/sample10/"
        xmlns:biz="http://jaxbcustomized/sample10/"
        xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
        jaxb:version="1.0"
        elementFormDefault="qualified"&gt;
 
   &lt;element name="business" type="biz:businessType"&gt;
      &lt;annotation&gt;
         &lt;appinfo&gt;
            &lt;jaxb:class name="myBusiness"/&gt;
         &lt;/appinfo&gt;
      &lt;/annotation&gt;
   &lt;/element&gt;
 
   &lt;complexType name="businessType"&gt;
      &lt;sequence&gt;
         &lt;element name="title" type="string"/&gt;
         &lt;element name="owner" type="string"/&gt;
         &lt;element name="id" type="integer"/&gt;
      &lt;/sequence&gt;
   &lt;/complexType&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" -->
<div id="ADXDK19318" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref220"></a>
<h5 class="sect4">Customizing the Schema Binding</h5>
<p>The schema shown in <a href="#CHDFICJC">Example 8-5</a> customizes the binding of the <code dir="ltr">business</code> element by means of an inline binding declaration. The general form for inline customizations is the following:</p>
<pre dir="ltr">
&lt;xs:annotation&gt;
   &lt;xs:appinfo&gt;
      .
      .
      binding declarations
      .
      .
   &lt;/xs:appinfo&gt;
&lt;/xs:annotation&gt;
</pre>
<p><a href="#CHDFICJC">Example 8-5</a> uses the <code dir="ltr">&lt;class&gt;</code> binding declaration to bind a schema element to a Java class name. You can use the declaration to customize the name for an interface or the class that implements an interface. The JAXB class generator supports the following syntax for <code dir="ltr">&lt;class&gt;</code> customizations:</p>
<pre dir="ltr">
&lt;class [ name = "className"] &gt;
</pre>
<p>The <code dir="ltr">name</code> attribute specifies the name of the derived Java interface. <a href="#CHDFICJC">Example 8-5</a> contains the following customization:</p>
<pre dir="ltr">
&lt;jaxb:class name="myBusiness"/&gt;
</pre>
<p>Thus, the schema binds the <code dir="ltr">business</code> element to the interface <code dir="ltr">myBusiness</code> rather than to the interface <code dir="ltr">business</code>, which is the default.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CHDJGDHJ"></a>
<div id="ADXDK19319" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Generating and Compiling the Java Classes</h4>
<p>After you have an XML document and corresponding XML schema, the next stage is to generate the Java classes from the XML schema. You can use the JAXB command-line interface to perform this task.</p>
<p>If your environment is set up as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>, then you can create the source files in the <code dir="ltr">generated</code> package as follows:</p>
<pre dir="ltr">
cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample10
orajaxb -schema sample10.xsd
</pre>
<p>Because the preceding command does not specify a target package, the package name is constructed from the target namespace of the schema, which is <code dir="ltr">http://jaxbcustomized/sample10/</code> . Consequently, the utility generates the following source files in the <code dir="ltr">./jaxbcustomized/sample10/</code> subdirectory:</p>
<pre dir="ltr">
BusinessType.java
BusinessTypeImpl.java
MyBusiness.java
MyBusinessImpl.java
ObjectFactory.java
</pre>
<p>Note that the complex type <code dir="ltr">businessType</code> has two source files, <code dir="ltr">BusinessType.java</code> and <code dir="ltr">BusinessTypeImpl.java</code>. Because of the JAXB customization, the <code dir="ltr">business</code> element is bound to interface <code dir="ltr">MyBusiness</code> and implementing class <code dir="ltr">MyBusinessImpl</code>.</p>
<p>The content of the <code dir="ltr">BusinessType.java</code> source file is shown in <a href="#CHDECCFJ">Example 8-6</a>.</p>
<div id="ADXDK19320" class="example">
<p class="titleinexample"><a id="CHDECCFJ"></a>Example 8-6 BusinessType.java</p>
<pre dir="ltr">
package jaxbcustomized.sample10;

public interface BusinessType
{
   public void setTitle(java.lang.String t);
   public java.lang.String getTitle();
   public void setOwner(java.lang.String o);
   public java.lang.String getOwner();
   public void setId(java.math.BigInteger i);
   public java.math.BigInteger getId();
} 
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">BusinessType</code> complex type defined a sequence of elements: <code dir="ltr">title</code>, <code dir="ltr">owner</code>, and <code dir="ltr">id</code>. Consequently, the <code dir="ltr">Address</code> interface includes a <code dir="ltr">get</code> and <code dir="ltr">set</code> method signature for each of the elements. For example, the interface includes <code dir="ltr">getTitle()</code> for retrieving data in the <code dir="ltr">&lt;title&gt;</code> element and <code dir="ltr">setTitle()</code> for modifying data in this element.</p>
<p>You can compile the Java source files with <code dir="ltr">javac</code> as follows:</p>
<pre dir="ltr">
cd $ORACLE_HOME/xdk/demo/java/jaxb/Sample10/jaxbcustomized/sample10
javac *.java
</pre></div>
<!-- class="sect3" -->
<div id="ADXDK19321" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref221"></a>
<h4 class="sect3">Processing the XML Data</h4>
<p>The <code dir="ltr">Sample10.java</code> source file shows how you can process the data in the <code dir="ltr">sample10.xml</code> document by using the class files that you generated in <a href="#CHDJGDHJ">"Generating and Compiling the Java Classes"</a>. The sample program unmarshals the XML document, prints its content, and marshals the XML to standard output.</p>
<p>The <code dir="ltr">Sample10.java</code> program processes the XML data as follows:</p>
<ol>
<li>
<p>Create strings for the XML data document file name and the name of the directory that contains the generated classes. This name is the package name. For example:</p>
<pre dir="ltr">
String fileName = "sample10.xml";
String instancePath = "jaxbcustomized.sample10";
</pre></li>
<li>
<p>Instantiate a JAXB context by invoking the <code dir="ltr">JAXBContext.newInstance()</code> method. The following statement illustrates this technique:</p>
<pre dir="ltr">
JAXBContext jc = JAXBContext.newInstance(instancePath);
</pre></li>
<li>
<p>Create the unmarshaller. The following statement illustrates this technique:</p>
<pre dir="ltr">
Unmarshaller u = jc.createUnmarshaller();
</pre></li>
<li>
<p>Unmarshal the XML document. The program unmarshals the document twice: it first returns an <code dir="ltr">Object</code> and then uses a cast to return a <code dir="ltr">MyBusiness</code> object. The following statement illustrates this technique:</p>
<pre dir="ltr">
Object obj = u.unmarshal(fileToURL(fileName));
jaxbcustomized.sample10.MyBusiness bus =
         (jaxbcustomized.sample10.MyBusiness) u.unmarshal(fileToURL(fileName));
</pre></li>
<li>
<p>Print the contents of the XML document. The program invokes the <code dir="ltr">get</code> methods on the <code dir="ltr">MyBusiness</code> object. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
System.out.println("My business details are: ");
System.out.println("    title: " + bus.getTitle());
System.out.println("    owner: " + bus.getOwner());
System.out.println("    id:    " + bus.getId().toString());
System.out.println();
</pre></li>
<li>
<p>Create a marshaller. The following statement illustrates this technique:</p>
<pre dir="ltr">
Marshaller m = jc.createMarshaller();
</pre></li>
<li>
<p>Configure the marshaller. You can invoke <code dir="ltr">setProperty()</code> to configure various properties the marshaller. The <code dir="ltr">JAXB_FORMATTED_OUTPUT</code> constant specifies that the marshaller should format the resulting XML data with line breaks and indentation. The following statements illustrate this technique:</p>
<pre dir="ltr">
m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true));
</pre></li>
<li>
<p>Marshal the content tree. The following statement serializes the XML data, including markup, as an output stream:</p>
<pre dir="ltr">
m.marshal(bus, System.out);
</pre>
<p>By default, the marshaller uses UTF-8 encoding when writing XML data to an output stream.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_sproc.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_pipeline.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
