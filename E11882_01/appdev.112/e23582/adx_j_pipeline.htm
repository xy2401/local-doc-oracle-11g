<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XML Pipeline Processor for Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_jaxb.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_beans.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">17/47</span> <!-- End Header -->
<div id="ADXDK7000" class="chapter"><a id="g1009877"></a>
<h1 class="chapter"><span class="secnum">9</span> Using the XML Pipeline Processor for Java</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#i1006972">Introduction to the XML Pipeline Processor</a></p>
</li>
<li>
<p><a href="#BHAIGJAI">Using the XML Pipeline Processor: Overview</a></p>
</li>
<li>
<p><a href="#CHDDACGJ">Processing XML in a Pipeline</a></p>
</li>
</ul>
<a id="i1006972"></a>
<div id="ADXDK19322" class="sect1">
<h2 class="sect1"><a id="sthref222"></a>Introduction to the XML Pipeline Processor</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDJCEBI">Prerequisites</a></p>
</li>
<li>
<p><a href="#CHDIEIGG">Standards and Specifications</a></p>
</li>
<li>
<p><a href="#CHDFJAAH">Multistage XML Processing</a></p>
</li>
<li>
<p><a href="#CHDEDCJB">Customized Pipeline Processes</a></p>
</li>
</ul>
<a id="CHDJCEBI"></a>
<div id="ADXDK19323" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>This chapter assumes that you are familiar with the following topics:</p>
<ul>
<li>
<p><a href="glossary.htm#i999076"><span class="xrefglossterm">XML Pipeline Definition Language</span></a>. This XML vocabulary enables you to describe the processing relations between XML resources. If you require a more thorough introduction to the Pipeline Definition Language, consult the XML resources listed in <a href="preface.htm#CIAFJDBI">"Related Documents"</a> of the preface.</p>
</li>
<li>
<p><a href="glossary.htm#CBAGDBJI"><span class="xrefglossterm">Document Object Model (DOM)</span></a>. DOM is an in-memory tree representation of the structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#CBAFICHD"><span class="xrefglossterm">Simple API for XML (SAX)</span></a>. SAX is a standard for event-based XML parsing.</p>
</li>
<li>
<p><a href="glossary.htm#CBAEDDHJ"><span class="xrefglossterm">XML Schema language</span></a>. Refer to <a href="adx_j_sproc.htm#i1003036">Chapter 7, "Using the Schema Processor for Java"</a> for an overview and links to suggested reading.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDIEIGG"></a>
<div id="ADXDK19324" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standards and Specifications</h3>
<p>The Oracle XML Pipeline processor is based on the W3C XML Pipeline Definition Language Version 1.0 Note. The W3C Note defines an XML vocabulary rather than an API. You can find the Pipeline specification at the following URL:</p>
<pre dir="ltr">
<a href="http://www.w3.org/TR/xml-pipeline/">http://www.w3.org/TR/xml-pipeline/</a>
</pre>
<p><a href="adx_ref_standards.htm#BABIJCJC">"Pipeline Definition Language Standard for the XDK for Java"</a> describes the differences between the Oracle XDK implementation of the Oracle XML Pipeline processor and the W3C Note.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_standards.htm#DCGBIDIF">Table 31-1, "Summary of XML Standards Supported by the XDK"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDFJAAH"></a>
<div id="ADXDK19325" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Multistage XML Processing</h3>
<p>The Oracle XML Pipeline processor is built on the XML Pipeline Definition Language. The processor can take an input XML pipeline document and execute pipeline processes according to derived dependencies. A <span class="glossaryterm">pipeline document</span>, which is written in XML, specifies the processes to be executed in a declarative manner. You can associate Java classes with processes by using the <code dir="ltr">&lt;processdef/&gt;</code> element in the pipeline document.</p>
<p>Use the Pipeline processor for mutistage processing, which occurs when you process XML components sequentially or in parallel. The output of one stage of processing can become the input of another stage of processing. You can write a pipeline document that defines the inputs and outputs of the processes. <a href="#CHDDCHID">Figure 9-1</a> illustrates a possible pipeline sequence.</p>
<div id="ADXDK19326" class="figure">
<p class="titleinfigure"><a id="CHDDCHID"></a>Figure 9-1 Pipeline Processing</p>
<img width="504" height="147" src="img/adxdk116.gif" alt="Description of Figure 9-1 follows" /><br />
<a id="sthref223" href="img_text/adxdk116.htm">Description of "Figure 9-1 Pipeline Processing"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In addition to the XML Pipeline processor itself, the XDK provides an API for processes that you can pipe together in a pipeline document. <a href="#CHDFCBHA">Table 9-2</a> summarizes the classes provided in the <code dir="ltr">oracle.xml.pipeline.processes</code> package.</p>
<p>The typical stages of processing XML in a pipeline are as follows:</p>
<ol>
<li>
<p>Parse the input XML documents. The <code dir="ltr">oracle.xml.pipeline.processes</code> package includes <code dir="ltr">DOMParserProcess</code> for DOM parsing and <code dir="ltr">SAXParserProcess</code> for SAX parsing.</p>
</li>
<li>
<p>Validate the input XML documents.</p>
</li>
<li>
<p>Serialize or transform the input documents. Note that the Pipeline processor does not enable you to connect the SAX parser to the XSLT processor, which requires a DOM.</p>
</li>
</ol>
<p>In multistage processing, SAX is ideal for filtering and searching large XML documents. You should use DOM when you need to change XML content or require efficient dynamic access to the content.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDACGJ">"Processing XML in a Pipeline"</a> to learn how to write a pipeline document that provides the input for a pipeline application</div>
</div>
<!-- class="sect2" -->
<a id="CHDEDCJB"></a>
<div id="ADXDK19327" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Customized Pipeline Processes</h3>
<p>The <code dir="ltr">oracle.xml.pipeline.controller.Process</code> class is the base class for all pipeline process definitions. The classes in the <code dir="ltr">oracle.xml.pipeline.processes</code> package extend this base class. To create a customized pipeline process, you need to create a class that extends the <code dir="ltr">Process</code> class.</p>
<p>At the minimum, every custom process should override the do-nothing <code dir="ltr">initialize()</code> and <code dir="ltr">execute()</code> methods of the <code dir="ltr">Process</code> class. If the customized process accepts SAX events as input, then it should override the <code dir="ltr">SAXContentHandler()</code> method to return the appropriate <code dir="ltr">ContentHandler</code> that handles incoming SAX events. It should also override the <code dir="ltr">SAXErrorHandler()</code> method to return the appropriate <code dir="ltr">ErrorHandler</code>. <a href="#CHDFABEH">Table 9-1</a> provides further descriptions of the preceding methods.</p>
<div id="ADXDK19328" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref224"></a><a id="CHDFABEH"></a>Table 9-1 Methods in the oracle.xml.pipeline.controller.Process Class</p>
<table class="cellalignment1211" title="Methods in the oracle.xml.pipeline.controller.Process Class" summary="Lists methods in the Process class." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t4">Class</th>
<th class="cellalignment1212" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">initialize()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t4 r1c2-t4">
<p>Initializes the process before execution.</p>
<p>Call <code dir="ltr">getInput()</code> to fetch a specific input object associated with the process element and call <code dir="ltr">supportType()</code> to indicate the types of input supported. Analogously, call <code dir="ltr">getOutput()</code> and <code dir="ltr">supportType()</code> for output.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">execute()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t4 r1c2-t4">
<p>Executes the process.</p>
<p>Call <code dir="ltr">getInParaValue()</code>, <code dir="ltr">getInput()</code>, or <code dir="ltr">getInputSource()</code> to fetch the inputs to the process. If a custom process outputs SAX events, then it should call the <code dir="ltr">getSAXContentHandler()</code> and <code dir="ltr">getSAXErrorHandler()</code> methods in <code dir="ltr">execute()</code> to get the SAX handlers of the following processes in the pipeline.</p>
<p>Call <code dir="ltr">setOutputResult()</code>, <code dir="ltr">getOutputStream()</code>, <code dir="ltr">getOutputWriter()</code> or <code dir="ltr">setOutParam()</code> to set the outputs or outparams generated by this process.</p>
<p>Call <code dir="ltr">getErrorSource()</code>, <code dir="ltr">getErrorStream()</code>, or <code dir="ltr">getErrorDocument()</code> to access the pipeline error element associated with this process element. If an exception occurs during <code dir="ltr">execute()</code>, call <code dir="ltr">error()</code> or <code dir="ltr">info()</code> to propagate it to the <code dir="ltr">PipelineErrorHandler</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">SAXContentHandler()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t4 r1c2-t4">
<p>Returns the SAX <code dir="ltr">ContentHandler</code>.</p>
<p>If dependencies from other processes are not available at this time, then return <code dir="ltr">null</code>. When these dependencies are available the method will be executed till the end.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">SAXErrorHandler()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t4 r1c2-t4">
<p>Returns the SAX <code dir="ltr">ErrorHandler</code>.</p>
<p>If you do not override this method, then the JAXB processor uses the default error handler implemented by this class to handle SAX errors.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">oracle.xml.pipeline.processes</code> package</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BHAIGJAI"></a>
<div id="ADXDK19329" class="sect1">
<h2 class="sect1"><a id="sthref225"></a>Using the XML Pipeline Processor: Overview</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BHAEBIII">Using the XML Pipeline Processor: Basic Process</a></p>
</li>
<li>
<p><a href="#BHAIAHAD">Running the XML Pipeline Processor Demo Programs</a></p>
</li>
<li>
<p><a href="#i1011966">Using the XML Pipeline Processor Command-Line Utility</a></p>
</li>
</ul>
<a id="BHAEBIII"></a>
<div id="ADXDK19330" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the XML Pipeline Processor: Basic Process</h3>
<p>The XML Pipeline processor is accessible through the following packages:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.pipeline.controller</code>, which provides an XML Pipeline controller that executes XML processes in a pipeline based on dependencies.</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.pipeline.processes</code>, which provides wrapper classes for XML processes that can be executed by the XML Pipeline controller. The <code dir="ltr">oracle.xml.pipeline.processes</code> package contains the classes that you can use to design a pipeline application framework. Each class extends the <code dir="ltr">oracle.xml.pipeline.controller.Process</code> class.</p>
<p><a href="#CHDFCBHA">Table 9-2</a> lists the components in the package. You can connect these components and processes through a combination of the XML Pipeline processor and a pipeline document.</p>
</li>
</ul>
<div id="ADXDK19331" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref226"></a><a id="CHDFCBHA"></a>Table 9-2 Classes in oracle.xml.pipeline.processes</p>
<table class="cellalignment1211" title="Classes in oracle.xml.pipeline.processes" summary="Lists classes in the oracle.xml.pipeline.processes package." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t6">Class</th>
<th class="cellalignment1212" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CompressReaderProcess</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c2-t6">
<p>Receives compressed XML and outputs parsed XML.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">CompressWriterProcess</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c2-t6">
<p>Receives XML parsed with DOM or SAX and outputs compressed XML.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">DOMParserProcess</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c2-t6">
<p>Parses incoming XML and outputs a DOM tree.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">SAXParserProcess</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t6 r1c2-t6">
<p>Parses incoming XML and outputs SAX events.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">XPathProcess</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t6 r1c2-t6">
<p>Accepts a DOM as input, uses an XPath pattern to select one or more nodes from an XML <code dir="ltr">Document</code> or an XML <code dir="ltr">DocumentFragment</code>, and outputs a <code dir="ltr">Document</code> or <code dir="ltr">DocumentFragment</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">XSDSchemaBuilder</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t6 r1c2-t6">
<p>Parses an XML schema and outputs a schema object for validation. This process is built into the XML Pipeline processor and builds schema objects used for validating XML documents.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">XSDValProcess</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t6 r1c2-t6">
<p>Validates against a local schema, analyzes the results, and reports errors if necessary.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">XSLProcess</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t6 r1c2-t6">
<p>Accepts DOM as input, applies an XSL stylesheet, and outputs the result of the transformation.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">XSLStylesheetProcess</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t6 r1c2-t6">
<p>Receives an XSL stylesheet as a stream or DOM and creates an <code dir="ltr">XSLStylesheet</code> object.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p><a href="#CHDFJCEJ">Figure 9-2</a> illustrates how to pass a pipeline document to a Java application that uses the XML Pipeline processor, configure the processor, and execute the pipeline.</p>
<div id="ADXDK19332" class="figure">
<p class="titleinfigure"><a id="CHDFJCEJ"></a>Figure 9-2 Using the Pipeline Processor for Java</p>
<img width="591" height="659" src="img/adxdk120.gif" alt="Description of Figure 9-2 follows" /><br />
<a id="sthref227" href="img_text/adxdk120.htm">Description of "Figure 9-2 Using the Pipeline Processor for Java"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The basic steps are as follows:</p>
<ol>
<li>
<p>Instantiate a pipeline document, which forms the input to the pipeline execution. Create the object by passing a <code dir="ltr">FileReader</code> to the constructor as follows:</p>
<pre dir="ltr">
PipelineDoc pipe;
FileReader f;
pipe = new PipelineDoc((Reader)f, false);
</pre></li>
<li>
<p>Instantiate a pipeline processor. <code dir="ltr">PipelineProcessor</code> is the top-level class that executes the pipeline. <a href="#CHDBAAEF">Table 9-3</a> describes some of the available methods.</p>
<div id="ADXDK19333" class="tblhruleformal">
<p class="titleintable"><a id="sthref228"></a><a id="CHDBAAEF"></a>Table 9-3 PipelineProcessor Methods</p>
<table class="cellalignment1211" title="PipelineProcessor Methods" summary="This table describes the methods in the PipelineProcessor class." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Method</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">executePipeline()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>Executes the pipeline based on the <code dir="ltr">PipelineDoc</code> set by invoking <code dir="ltr">setPipelineDoc()</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">getExecutionMode()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>Gets the type of execution mode: <code dir="ltr">PIPELINE_SEQUENTIAL</code> or <code dir="ltr">PIPELINE_PARALLEL</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setErrorHandler()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>Sets the error handler for the pipeline. This call is mandatory to execute the pipeline.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setExecutionMode()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>Sets the execution mode. <code dir="ltr">PIPELINE_PARALLEL</code> is the default and specifies that the processes in the pipeline should execute in parallel. <code dir="ltr">PIPELINE_SEQUENTIAL</code> specifies that the processes in the pipeline should execute sequentially.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setForce()</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>Sets execution behavior. If <code dir="ltr">TRUE</code>, then the pipeline executes regardless of whether the target is up-to-date with respect to the pipeline inputs.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setPipelineDoc()</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t7 r1c2-t7">
<p>Sets the <code dir="ltr">PipelineDoc</code> object for the pipeline.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following statement instantiates the pipeline processor:</p>
<pre dir="ltr">
proc = new PipelineProcessor();
</pre></li>
<li>
<p>Set the processor to the pipeline document. For example:</p>
<pre dir="ltr">
proc.setPipelineDoc(pipe);
</pre></li>
<li>
<p>Set the execution mode for the processor and perform any other needed configuration. For example, set the mode by passing a constant to <code dir="ltr">PipelineProcessor.setExecutionMode()</code>.</p>
<p>The following statement specifies sequential execution:</p>
<pre dir="ltr">
proc.setExecutionMode(PipelineConstants.PIPELINE_SEQUENTIAL); 
</pre></li>
<li>
<p>Instantiate an error handler. The error handler must implement the <code dir="ltr">PipelineErrorHandler</code> interface. For example:</p>
<pre dir="ltr">
errHandler = new PipelineSampleErrHdlr(logname);
</pre></li>
<li>
<p>Set the error handler for the processor by invoking <code dir="ltr">setErrorHandler()</code>. For example:</p>
<pre dir="ltr">
proc.setErrorHandler(errHandler);
</pre></li>
<li>
<p>Execute the pipeline. For example:</p>
<pre dir="ltr">
proc.executePipeline();
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">oracle.xml.pipeline</code> subpackages</p>
</li>
<li>
<p><a href="#CHDFADBE">"Creating a Pipeline Document"</a></p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BHAIAHAD"></a>
<div id="ADXDK19334" class="sect2">
<h3 class="sect2">Running the XML Pipeline Processor Demo Programs<a id="sthref229"></a></h3>
<p>Demo programs for the XML Pipeline processor are included in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/pipeline</code>. <a href="#CHDICHJA">Table 9-4</a> describes the XML files and Java source files that you can use to test the utility.</p>
<div id="ADXDK19335" class="tblformal">
<p class="titleintable"><a id="sthref230"></a><a id="CHDICHJA"></a>Table 9-4 Pipeline Processor Sample Files</p>
<table class="cellalignment1214" title="Pipeline Processor Sample Files " summary="File and Description are the Columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t9">File</th>
<th class="cellalignment1212" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">README</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t9 r1c2-t9">
<p>A text file that describes how to set up the Pipeline processor demos.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">PipelineSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t9 r1c2-t9">
<p>A sample Pipeline processor application. The program takes <code dir="ltr">pipedoc.xml</code> as its first argument.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">PipelineSampleErrHdlr.java</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t9 r1c2-t9">
<p>A sample program to create an error handler used by <code dir="ltr">PipelineSample</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">book.xml</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t9 r1c2-t9">
<p>A sample XML document that describes a series of books. This document is specified as an input by <code dir="ltr">pipedoc.xml</code>, <code dir="ltr">pipedoc2.xml</code>, and <code dir="ltr">pipedocerr.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">book.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t9 r1c2-t9">
<p>An XSLT stylesheet that transforms the list of books in <code dir="ltr">book.xml</code> into an HTML table.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">book_err.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t9 r1c2-t9">
<p>An XSLT stylesheet specified as an input by the <code dir="ltr">pipedocerr.xml</code> pipeline document. This stylesheet contains an intentional error.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">id.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t9 r1c2-t9">
<p>An XSLT stylesheet specified as an input by the <code dir="ltr">pipedoc3.xml</code> pipeline document.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">items.xsd</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t9 r1c2-t9">
<p>An XML schema document specified as an input by the <code dir="ltr">pipedoc3.xml</code> pipeline document.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t9" headers="r1c1-t9">
<p><code dir="ltr">pipedoc.xml</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t9 r1c2-t9">
<p>A pipeline document. This document specifies that process p1 should parse <code dir="ltr">book.xml</code> with DOM, process p2 should parse <code dir="ltr">book.xsl</code> and create a stylesheet object, and process p3 should apply the stylesheet to the DOM to generate <code dir="ltr">myresult.html</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t9" headers="r1c1-t9">
<p><code dir="ltr">pipedoc2.xml</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t9 r1c2-t9">
<p>A pipeline document. This document specifies that process p1 should parse <code dir="ltr">book.xml</code> with SAX, process p2 should generate compressed XML <code dir="ltr">compxml</code> from the SAX events, and process p3 should regenerate the XML from the compressed stream as <code dir="ltr">myresult2.html</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t9" headers="r1c1-t9">
<p><code dir="ltr">pipedoc3.xml</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t9 r1c2-t9">
<p>A pipeline document. This document specifies that a process p5 should parse <code dir="ltr">po.xml</code> with DOM, process p1 should select a single node from the DOM tree with an XPath expression, process p4 should parse <code dir="ltr">items.xsd</code> and generate a schema object, process p6 should validate the selected node against the schema, process p3 should parse <code dir="ltr">id.xsl</code> and generate a stylesheet object, and validated node to produce <code dir="ltr">myresult3.html</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t9" headers="r1c1-t9">
<p><code dir="ltr">pipedocerr.xml</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t9 r1c2-t9">
<p>A pipeline document. This document specifies that process p1 should parse <code dir="ltr">book.xml</code> with DOM, process p2 should parse <code dir="ltr">book_err.xsl</code> and generate a stylesheet object if it encounters no errors and apply an inline stylesheet if it encounters errors, and process p3 should apply the stylesheet to the DOM to generate <code dir="ltr">myresulterr.html</code>. Because <code dir="ltr">book_err.xsl</code> contains an error, the program should write the text contents of the input XML to <code dir="ltr">myresulterr.html</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t9" headers="r1c1-t9">
<p><code dir="ltr">po.xml</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t9 r1c2-t9">
<p>A sample XML document that describes a purchase order. This document is specified as an input by <code dir="ltr">pipedoc3.xml</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>Documentation for how to compile and run the sample programs is located in the <code dir="ltr">README</code>. The basic steps are as follows:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/pipeline</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\pipeline</code> directory (Windows).</p>
</li>
<li>
<p>Make sure that your environment variables are set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>.</p>
</li>
<li>
<p>Run <code dir="ltr">make</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) at the system prompt to generate class files for <code dir="ltr">PipelineSample.java</code> and <code dir="ltr">PipelineSampleErrHdler.java</code> and run the demo programs. The programs write output files to the <code dir="ltr">log</code> subdirectory.</p>
<p>Alternatively, you can run the demo programs manually by using the following syntax:</p>
<pre dir="ltr">
java PipelineSample <span class="italic">pipedoc</span> <span class="italic">pipelog </span>[ seq | para ]
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">pipedoc</span></code> option specifies which pipeline document to use. The <code dir="ltr"><span class="codeinlineitalic">pipelog</span></code> option specifies the name of the pipeline log file, which is optional unless you specify <code dir="ltr">seq</code> or <code dir="ltr">para</code>, in which case a filename is required. If you do not specify a log file, then the program generates <code dir="ltr">pipeline.log</code> by default. The <code dir="ltr">seq</code> option processes threads sequentially; <code dir="ltr">para</code> processes in parallel. If you specify neither <code dir="ltr">seq</code> or <code dir="ltr">para</code>, then the default is parallel processing.</p>
</li>
<li>
<p>View the files generated from the pipeline, which are all named with the initial string <code dir="ltr">myresult</code>, and the log files.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1011966"></a>
<div id="ADXDK19336" class="sect2">
<h3 class="sect2">Using the XML Pipeline Processor Command-Line Utility</h3>
<p>The command-line interface for the XML Pipeline processor is named <code dir="ltr">orapipe</code>. The Pipeline processor is packaged with Oracle database. By default, the Oracle Universal Installer installs the utility on disk in <code dir="ltr">$ORACLE_HOME/bin</code>.</p>
<p>Before running the utility for the first time, make sure that your environment variables are set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>. Run <code dir="ltr">orapipe</code> at the operating system command line with the following syntax:</p>
<pre dir="ltr">
orapipe <span class="italic">options pipedoc</span>
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">pipedoc</span></code> is the pipeline document, which is required. <a href="#CHDCHJDE">Table 9-5</a> describes the available options for the <code dir="ltr">orapipe</code> utility.</p>
<div id="ADXDK19337" class="tblformal">
<p class="titleintable"><a id="sthref231"></a><a id="CHDCHJDE"></a>Table 9-5 orapipe Command-Line Options</p>
<table class="cellalignment1214" title="orapipe Command-Line Options" summary="Option and Purpose are the columns.&lt;no value&gt;" dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t10">Option</th>
<th class="cellalignment1212" id="r1c2-t10">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-help</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t10 r1c2-t10">
<p>Prints the help message</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-log</code> <code dir="ltr"><span class="codeinlineitalic">logfile</span></code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t10 r1c2-t10">
<p>Writes errors and messages to the specified log file. The default is <code dir="ltr">pipeline.log</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-noinfo</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t10 r1c2-t10">
<p>Does not log informational items. The default is on.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-nowarning</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t10 r1c2-t10">
<p>Does not log warnings. The default is on.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-validate</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t10 r1c2-t10">
<p>Validates the input <code dir="ltr">pipedoc</code> with the pipeline schema. Validation is turned off by default. If <code dir="ltr">outparam</code> feature is used, then <code dir="ltr">validate</code> fails with the current pipeline schema because this is an additional feature.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-version</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t10 r1c2-t10">
<p>Prints the release version.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-sequential</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t10 r1c2-t10">
<p>Executes the pipeline in sequential mode. The default is parallel.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-force</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t10 r1c2-t10">
<p>Executes pipeline even if target is up-to-date. By default no force is specified.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t10" headers="r1c1-t10">
<p><code dir="ltr">-attr</code> <code dir="ltr"><span class="codeinlineitalic">name</span></code> <code dir="ltr"><span class="codeinlineitalic">value</span></code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t10 r1c2-t10">
<p>Sets the value of <code dir="ltr">$</code><code dir="ltr"><span class="codeinlineitalic">name</span></code> to the specified <code dir="ltr"><span class="codeinlineitalic">value</span></code>. For example, if the attribute name is <code dir="ltr">source</code> and the value is <code dir="ltr">book.xml</code>, then you can pass this value to an element in the pipeline document as follows: <code dir="ltr">&lt;input ... label="$source"&gt;</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDDACGJ"></a>
<div id="ADXDK19338" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Processing XML in a Pipeline</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDFADBE">Creating a Pipeline Document</a></p>
</li>
<li>
<p><a href="#CHDEJHBG">Writing a Pipeline Processor Application</a></p>
</li>
<li>
<p><a href="#CHDFGBFF">Writing a Pipeline Error Handler</a></p>
</li>
</ul>
<a id="CHDFADBE"></a>
<div id="ADXDK19339" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Creating a Pipeline Document</h3>
<p>To use the Oracle XML Pipeline processor, you must create an XML document according to the rules of the Pipeline Definition Language specified in the W3C Note.</p>
<p>The W3C specification defines the XML processing components and the inputs and outputs for these processes. The XML Pipeline processor includes support for the following XDK components:</p>
<ul>
<li>
<p>XML parser</p>
</li>
<li>
<p>XML compressor</p>
</li>
<li>
<p>XML Schema validator</p>
</li>
<li>
<p>XSLT processor</p>
</li>
</ul>
<div id="ADXDK19340" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref232"></a>
<h4 class="sect3">Example of a Pipeline Document</h4>
<p>The XML Pipeline processor executes a sequence of XML processing according to the rules in the pipeline document and returns a result. <a href="#CHDHECFH">Example 9-1</a> shows <code dir="ltr">pipedoc.xml</code>, which is a sample pipeline document included in the demo directory.</p>
<div id="ADXDK19341" class="example">
<p class="titleinexample"><a id="CHDHECFH"></a>Example 9-1 pipedoc.xml</p>
<pre dir="ltr">
&lt;pipeline xmlns="http://www.w3.org/2002/02/xml-pipeline"&gt;
 
  &lt;param name="target" select="myresult.html"/&gt;
 
  &lt;processdef name="domparser.p" 
   definition="oracle.xml.pipeline.processes.DOMParserProcess"/&gt;
  &lt;processdef name="xslstylesheet.p"  
   definition="oracle.xml.pipeline.processes.XSLStylesheetProcess"/&gt;
  &lt;processdef name="xslprocess.p" 
   definition="oracle.xml.pipeline.processes.XSLProcess"/&gt;
 
   &lt;process id="p2" type="xslstylesheet.p" ignore-errors="false"&gt;
     &lt;input name="xsl" label="book.xsl"/&gt;
     &lt;outparam name="stylesheet" label="xslstyle"/&gt;
   &lt;/process&gt;
 
   &lt;process id="p3" type="xslprocess.p" ignore-errors="false"&gt;
     &lt;param name="stylesheet" label="xslstyle"/&gt;
     &lt;input name="document" label="xmldoc"/&gt;
     &lt;output name="result" label="myresult.html"/&gt;
   &lt;/process&gt;
 
  &lt;process id="p1" type="domparser.p" ignore-errors="true"&gt;
     &lt;input name="xmlsource" label="book.xml "/&gt;
     &lt;output name="dom" label="xmldoc"/&gt;
     &lt;param name="preserveWhitespace" select="true"&gt;&lt;/param&gt;
     &lt;error name="dom"&gt;
       &lt;html xmlns="http://www/w3/org/1999/xhtml"&gt;
         &lt;head&gt;
            &lt;title&gt;DOMParser Failure!&lt;/title&gt;
         &lt;/head&gt;
         &lt;body&gt;
           &lt;h1&gt;Error parsing document&lt;/h1&gt;
         &lt;/body&gt;
       &lt;/html&gt;
     &lt;/error&gt;
  &lt;/process&gt;
 
&lt;/pipeline&gt;
</pre></div>
<!-- class="example" -->
<div id="ADXDK19342" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref233"></a>
<h5 class="sect4">Processes Specified in the Pipeline Document</h5>
<p>In <a href="#CHDHECFH">Example 9-1</a>, three processes are called and associated with Java classes in the <code dir="ltr">oracle.xml.pipeline.processes</code> package. The pipeline document uses the <code dir="ltr">&lt;processdef/&gt;</code> element to make the following associations:</p>
<ul>
<li>
<p><code dir="ltr">domparser.p</code> is associated with the <code dir="ltr">DOMParserProcess</code> class</p>
</li>
<li>
<p><code dir="ltr">xslstylesheet.p</code> is associated with the <code dir="ltr">XSLStylesheetProcess</code> class</p>
</li>
<li>
<p><code dir="ltr">xslprocess.p</code> is associated with the <code dir="ltr">XSLProcess</code> class</p>
</li>
</ul>
</div>
<!-- class="sect4" -->
<div id="ADXDK19343" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref234"></a>
<h5 class="sect4">Processing Architecture Specified in the Pipeline Document</h5>
<p>The <code dir="ltr">PipelineSample</code> program accepts the <code dir="ltr">pipedoc.xml</code> document shown in <a href="#CHDHECFH">Example 9-1</a> as input along with XML documents <code dir="ltr">book.xml</code> and <code dir="ltr">book.xsl</code>. The basic design of the pipeline is as follows:</p>
<ol>
<li>
<p>Parse the incoming <code dir="ltr">book.xml</code> document and generate a DOM tree. This task is performed by <code dir="ltr">DOMParserProcess</code>.</p>
</li>
<li>
<p>Parse <code dir="ltr">book.xsl</code> as a stream and generate an <code dir="ltr">XSLStylesheet</code> object. This task is performed by <code dir="ltr">XSLStylesheetProcess</code>.</p>
</li>
<li>
<p>Receive the DOM of <code dir="ltr">book.xml</code> as input, apply the stylesheet object, and write the result to <code dir="ltr">myresult.html</code>. This task is performed by <code dir="ltr">XSLProcess</code>.</p>
</li>
</ol>
<p>Note the following aspects of the processing architecture used in the pipeline document:</p>
<ul>
<li>
<p>The target information set, <code dir="ltr">http://example.org/myresult.html</code>, is inferred from the default value of the <code dir="ltr">target</code> parameter and the <code dir="ltr">xml:base</code> setting.</p>
</li>
<li>
<p>The process <code dir="ltr">p2</code> has an input of <code dir="ltr">book.xsl</code> and an output parameter with the label <code dir="ltr">xslstyle</code>, so it has to run to produce the input for <code dir="ltr">p3</code>.</p>
</li>
<li>
<p>The <code dir="ltr">p3</code> process depends on input parameter <code dir="ltr">xslstyle</code> and document <code dir="ltr">xmldoc</code>.</p>
</li>
<li>
<p>The <code dir="ltr">p3</code> process has an output parameter with the label <code dir="ltr">http://example.org/myresult.html</code>, so it has to run to produce the target.</p>
</li>
<li>
<p>The process <code dir="ltr">p1</code> depends on input document <code dir="ltr">book.xml</code> and outputs <code dir="ltr">xmldoc</code>, so it has to run to produce the input for <code dir="ltr">p3</code>.</p>
</li>
</ul>
<p>In <a href="#CHDHECFH">Example 9-1</a>, more than one order of processing can satisfy all of the dependencies. Given the rules, the XML Pipeline processor must process <code dir="ltr">p3</code> last but can process <code dir="ltr">p1</code> and <code dir="ltr">p2</code> in either order or process them in parallel.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDEJHBG"></a>
<div id="ADXDK19344" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Writing a Pipeline Processor Application</h3>
<p>The <code dir="ltr">PipelineSample.java</code> source file illustrates a basic pipeline application. You can use the application with any of the pipeline documents in <a href="#CHDICHJA">Table 9-4</a> to parse and transform an input XML document.</p>
<p>The basic steps of the program are as follows:</p>
<ol>
<li>
<p>Perform the initial setup. The program declares references of type <code dir="ltr">FileReader</code> (for the input XML file), <code dir="ltr">PipelineDoc</code> (for the input pipeline document), and <code dir="ltr">PipelineProcessor</code> (for the processor). The first argument is the pipeline document, which is required. If a second argument is received, then it is stored in the <code dir="ltr">logname</code> String. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
public static void main(String[] args)
{
  FileReader f;
  PipelineDoc pipe;
  PipelineProcessor proc;
 
  if (args.length &lt; 1)
  {
    System.out.println("First argument needed, other arguments are ".
                       "optional:");
    System.out.println("pipedoc.xml &lt;output_log&gt; &lt;'seq'&gt;");
    return;
  }
  if (args.length &gt; 1)
    logname = args[1];
  ...
</pre></li>
<li>
<p>Create a <code dir="ltr">FileReader</code> object by passing the first command-line argument to the constructor as the filename. For example:</p>
<pre dir="ltr">
f = new FileReader(args[0]);
</pre></li>
<li>
<p>Create a <code dir="ltr">PipelineDoc</code> object by passing the reference to the <code dir="ltr">FileReader</code> object. The following example casts the <code dir="ltr">FileReader</code> to a <code dir="ltr">Reader</code> and specifies no validation:</p>
<pre dir="ltr">
pipe = new PipelineDoc((Reader)f, false);
</pre></li>
<li>
<p>Instantiate an XML Pipeline processor. The following statement instantiates the pipeline processor:</p>
<pre dir="ltr">
proc = new PipelineProcessor();
</pre></li>
<li>
<p>Set the processor to the pipeline document. For example:</p>
<pre dir="ltr">
proc.setPipelineDoc(pipe);
</pre></li>
<li>
<p>Set the execution mode for the processor and perform any other configuration. The following code fragment uses a condition to determine the execution mode. If three or more arguments are passed to the program, then it sets the mode to sequential or parallel depending on which argument is passed. For example:</p>
<pre dir="ltr">
String execMode = null;
if (args.length &gt; 2)
{
   execMode = args[2];
   if(execMode.startsWith("seq"))
      proc.setExecutionMode(PipelineConstants.PIPELINE_SEQUENTIAL);
   else if (execMode.startsWith("para"))
      proc.setExecutionMode(PipelineConstants.PIPELINE_PARALLEL);
}
</pre></li>
<li>
<p>Instantiate an error handler. The error handler must implement the <code dir="ltr">PipelineErrorHandler</code> interface. The program uses the <code dir="ltr">PipelineSampleErrHdler</code> shown in <code dir="ltr">PipelineSampleErrHdlr.java</code>. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
errHandler = new PipelineSampleErrHdlr(logname);
</pre></li>
<li>
<p>Set the error handler for the processor by invoking <code dir="ltr">setErrorHandler()</code>. The following statement illustrates this technique:</p>
<pre dir="ltr">
proc.setErrorHandler(errHandler);
</pre></li>
<li>
<p>Execute the pipeline. The following statement illustrates this technique:</p>
<pre dir="ltr">
proc.executePipeline();
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">oracle.xml.pipeline</code> subpackages</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDFGBFF"></a>
<div id="ADXDK19345" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Writing a Pipeline Error Handler</h3>
<p>An application calling the XML Pipeline processor must implement the <code dir="ltr">PipelineErrorHandler</code> interface to handle errors received from the processor. Set the error handler in the processor by calling <code dir="ltr">setErrorHandler()</code>. When writing the error handler, you can choose to throw an exception for different types of errors.</p>
<p>The <code dir="ltr">oracle.xml.pipeline.controller.PipelineErrorHandler</code> interface declares the methods shown in <a href="#CHDCGFIH">Table 9-6</a>, all of which return <code dir="ltr">void</code>.</p>
<div id="ADXDK19346" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref235"></a><a id="CHDCGFIH"></a>Table 9-6 PipelineErrorHandler Methods</p>
<table class="cellalignment1211" title="PipelineErrorHandler Methods" summary="Lists methods in the PipelineErrorHandler interface." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t12">Method</th>
<th class="cellalignment1212" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t12" headers="r1c1-t12">
<p><code dir="ltr">error(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t12 r1c2-t12">
<p>Handles <code dir="ltr">PipelineException</code> errors.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t12" headers="r1c1-t12">
<p><code dir="ltr">fatalError(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t12 r1c2-t12">
<p>Handles fatal <code dir="ltr">PipelineException</code> errors.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t12" headers="r1c1-t12">
<p><code dir="ltr">warning(java.lang.String msg, PipelineException e)</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t12 r1c2-t12">
<p>Handles <code dir="ltr">PipelineException</code> warnings.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t12" headers="r1c1-t12">
<p><code dir="ltr">info(java.lang.String msg)</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t12 r1c2-t12">
<p>Prints optional, additional information about errors.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>The first three methods in <a href="#CHDCGFIH">Table 9-6</a> receive a reference to an <code dir="ltr">oracle.xml.pipeline.controller.PipelineException</code> object. The following methods of the <code dir="ltr">PipelineException</code> class are especially useful:</p>
<ul>
<li>
<p><code dir="ltr">getExceptionType()</code>, which obtains the type of exception thrown</p>
</li>
<li>
<p><code dir="ltr">getProcessId()</code>, which obtains the process ID where the exception occurred</p>
</li>
<li>
<p><code dir="ltr">getMessage()</code>, which returns the message string of this <code dir="ltr">Throwable</code> error</p>
</li>
</ul>
<p>The <code dir="ltr">PipelineSampleErrHdler.java</code> source file implements a basic error handler for use with the <code dir="ltr">PipelineSample</code> program. The basic steps are as follows:</p>
<ol>
<li>
<p>Implement a constructor. The constructor accepts the name of a log file and wraps it in a <code dir="ltr">FileWriter</code> object as follows:</p>
<pre dir="ltr">
PipelineSampleErrHdlr(String logFile) throws IOException
{
  log = new PrintWriter(new FileWriter(logFile));
}
</pre></li>
<li>
<p>Implement the <code dir="ltr">error()</code> method. This implementation prints the process ID, exception type, and error message. It also increments a variable holding the error count. For example:</p>
<pre dir="ltr">
public void error (String msg, PipelineException e) throws Exception
{
  log.println("\nError in: " + e.getProcessId());
  log.println("Type: " + e.getExceptionType());
  log.println("Message: " +  e.getMessage());
  log.println("Error message: " + msg);
  log.flush();
  errCount++;
}
</pre></li>
<li>
<p>Implement the <code dir="ltr">fatalError()</code> method. This implementation follows the pattern of <code dir="ltr">error()</code>. For example:</p>
<pre dir="ltr">
public void fatalError (String msg, PipelineException e) throws Exception
{
  log.println("\nFatalError in: " + e.getProcessId());
  log.println("Type: " + e.getExceptionType());
  log.println("Message: " +  e.getMessage());
  log.println("Error message: " + msg);
  log.flush();
  errCount++;
}
</pre></li>
<li>
<p>Implement the <code dir="ltr">warning()</code> method. This implementation follows the basic pattern of <code dir="ltr">error()</code> except it increments the <code dir="ltr">warnCount</code> variable rather than the <code dir="ltr">errCount</code> variable. For example:</p>
<pre dir="ltr">
public void warning (String msg, PipelineException e) throws Exception
{
  log.println("\nWarning in: " + e.getProcessId());
  log.println("Message: " +  e.getMessage());
  log.println("Error message: " + msg);
  log.flush();
  warnCount++;
}
</pre></li>
<li>
<p>Implement the <code dir="ltr">info()</code> method. Unlike the preceding methods, this method does not receive a <code dir="ltr">PipelineException</code> reference as input. The following implementation prints the <code dir="ltr">String</code> received by the method and increments the value of the <code dir="ltr">warnCount</code> variable:</p>
<pre dir="ltr">
public void info (String msg)
{
  log.println("\nInfo : " + msg);
  log.flush();
  warnCount++;   
}
</pre></li>
<li>
<p>Implement a method to close the <code dir="ltr">PrintWriter</code>. The following code implements the method <code dir="ltr">closeLog()</code>, which prints the number of errors and warnings and calls <code dir="ltr">PrintWriter.close()</code>:</p>
<pre dir="ltr">
public void closeLog()
{
  log.println("\nTotal Errors: " + errCount + "\nTotal Warnings: " +
               warnCount);
  log.flush();
  log.close();
}
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">PipelineErrorHandler</code> interface and the <code dir="ltr">PipelineException</code> class</div>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_jaxb.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_beans.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
