<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the Schema Processor for Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_xslt.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_jaxb.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/47</span> <!-- End Header -->
<div id="ADXDK5000" class="chapter"><a id="i1003036"></a>
<h1 class="chapter"><span class="secnum">7</span> Using the Schema Processor for Java</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CIHBGHGB">Introduction to XML Validation</a></p>
</li>
<li>
<p><a href="#BABHFFHC">Using the XML Schema Processor: Overview</a></p>
</li>
<li>
<p><a href="#CIHDHBCE">Validating XML with XML Schemas</a></p>
</li>
<li>
<p><a href="#CHDHDEFE">Tips and Techniques for Programming with XML Schemas</a></p>
</li>
</ul>
<a id="CIHBGHGB"></a>
<div id="ADXDK19254" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to XML Validation</h2>
<p>This section describes the different techniques for XML validation. It discusses the following topics:</p>
<ul>
<li>
<p><a href="#CIHFBGEE">Prerequisites</a></p>
</li>
<li>
<p><a href="#CIHGCAIF">Standards and Specifications</a></p>
</li>
<li>
<p><a href="#CIHFHDDA">XML Validation with DTDs</a></p>
</li>
<li>
<p><a href="#CIHHCDJA">XML Validation with XML Schemas</a></p>
</li>
<li>
<p><a href="#CIHHFIIG">Differences Between XML Schemas and DTDs</a></p>
</li>
</ul>
<a id="CIHFBGEE"></a>
<div id="ADXDK19255" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>This chapter assumes that you have working knowledge of the following technologies:</p>
<ul>
<li>
<p><a href="glossary.htm#CBAHIAFA"><span class="xrefglossterm">Document Type Definition (DTD)</span></a>. An XML DTD defines the legal structure of an XML document.</p>
</li>
<li>
<p><a href="glossary.htm#CBAEDDHJ"><span class="xrefglossterm">XML Schema language</span></a>. XML Schema defines the legal structure of an XML document.</p>
</li>
</ul>
<p>If you are unfamiliar with these technologies or need to refresh your knowledge, you can consult the XML resources in <a href="preface.htm#CIAFJDBI">"Related Documents"</a> of the preface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3schools.com/dtd/">http://www.w3schools.com/dtd/</a></code> for a DTD tutorial</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3schools.com/schema">http://www.w3schools.com/schema</a></code> for an XML Schema language tutorial</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHGCAIF"></a>
<div id="ADXDK19256" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standards and Specifications</h3>
<p>XML Schema is a W3C standard. You can find the XML Schema specifications at the following locations:</p>
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xmlschema-0/">http://www.w3.org/TR/xmlschema-0/</a></code> for the W3C XML Schema Primer</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xmlschema-1/">http://www.w3.org/TR/xmlschema-1/</a></code> for the definition of the XML Schema language structures</p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xmlschema-2/">http://www.w3.org/TR/xmlschema-2/</a></code> for the definition of the XML Schema language datatypes</p>
</li>
</ul>
<p>The Oracle XML Schema processor supports the W3C XML Schema specifications.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_standards.htm#BABDIIJG">Chapter 31, "XDK Standards"</a> for a summary of the standards supported by the XDK</div>
</div>
<!-- class="sect2" -->
<a id="CIHFHDDA"></a>
<div id="ADXDK19257" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Validation with DTDs</h3>
<p>DTDs were originally developed for SGML. XML DTDs are a subset of those available in SGML and provide a mechanism for declaring constraints on XML markup. XML DTDs enable the specification of the following:</p>
<ul>
<li>
<p>Which elements can be in your XML documents</p>
</li>
<li>
<p>The content model of an XML element, that is, whether the element contains only data or has a set of subelements that defines its structure. DTDs can define whether a subelement is optional or mandatory and whether it can occur only once or multiple times.</p>
</li>
<li>
<p>Attributes of XML elements. DTDs can also specify whether attributes are optional or mandatory.</p>
</li>
<li>
<p>Entities that are legal in your XML documents.</p>
</li>
</ul>
<p>An XML DTD is not itself written in XML, but is a context-independent grammar for defining the structure of an XML document. You can declare a DTD in an XML document itself or in a separate file from the XML document.</p>
<p>Validation is the process by which you verify an XML document against its associated DTD, ensuring that the structure, use of elements, and use of attributes are consistent with the definitions in the DTD. Thus, applications that handle XML documents can assume that the data matches the definition.</p>
<p>By using the XDK, you can write an application that includes a validating XML parser, that is, a program that parses and validates XML documents against a DTD. Note the following aspects of parsers that perform DTD validation:</p>
<ul>
<li>
<p>Depending on its implementation, a validating parser may stop processing when it encounters an error, or continue.</p>
</li>
<li>
<p>A validating parser may report warnings and errors as they occur as in summary form at the end of processing.</p>
</li>
<li>
<p>Most processors can enable or disable validation mode, but they must still process entity definitions and other constructs of DTDs.</p>
</li>
</ul>
<div id="ADXDK19258" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref190"></a>
<h4 class="sect3">DTD Samples in the XDK</h4>
<p><a href="#CIHDHBEE">Example 7-1</a> shows the contents of a DTD named <code dir="ltr">family.dtd</code>, which is located in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/common/</code>. The <code dir="ltr">&lt;ELEMENT&gt;</code> tags specify the legal nomenclature and structure of elements in the document, whereas the <code dir="ltr">&lt;ATTLIST&gt;</code> tags specify the legal attributes of elements.</p>
<div id="ADXDK19259" class="example">
<p class="titleinexample"><a id="CIHDHBEE"></a>Example 7-1 family.dtd</p>
<pre dir="ltr">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!ELEMENT family (member*)&gt;
&lt;!ATTLIST family lastname CDATA #REQUIRED&gt;
&lt;!ELEMENT member (#PCDATA)&gt;
&lt;!ATTLIST member memberid ID #REQUIRED&gt;
&lt;!ATTLIST member dad IDREF #IMPLIED&gt;
&lt;!ATTLIST member mom IDREF #IMPLIED&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CIHCDDBD">Example 7-2</a> shows the contents of an XML document named <code dir="ltr">family.xml</code>, which is also located in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/common/</code>. The <code dir="ltr">&lt;!DOCTYPE&gt;</code> element in <code dir="ltr">family.xml</code> specifies that this XML document conforms to the external DTD named <code dir="ltr">family.dtd</code>.</p>
<div id="ADXDK19260" class="example">
<p class="titleinexample"><a id="CIHCDDBD"></a>Example 7-2 family.xml</p>
<pre dir="ltr">
&lt;?xml version="1.0" standalone="no"?&gt;
&lt;!DOCTYPE family SYSTEM "family.dtd"&gt;
&lt;family lastname="Smith"&gt;
&lt;member memberid="m1"&gt;Sarah&lt;/member&gt;
&lt;member memberid="m2"&gt;Bob&lt;/member&gt;
&lt;member memberid="m3" mom="m1" dad="m2"&gt;Joanne&lt;/member&gt;
&lt;member memberid="m4" mom="m1" dad="m2"&gt;Jim&lt;/member&gt;
&lt;/family&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHCDJA"></a>
<div id="ADXDK19261" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Validation with XML Schemas</h3>
<p><a id="sthref191"></a>The <a href="glossary.htm#CBAEDDHJ"><span class="xrefglossterm">XML Schema language</span></a>, also known as <a href="glossary.htm#CBAIFJED"><span class="xrefglossterm">XML Schema Definition</span></a>, was created by the W3C to use XML syntax to describe the content and the structure of XML documents. An <a href="glossary.htm#CBAEJJFA"><span class="xrefglossterm">XML schema</span></a> is an XML document written in the XML Schema language. An XML schema document contains rules describing the structure of an input XML document, called an <a href="glossary.htm#CBAEDHFJ"><span class="xrefglossterm">instance document</span></a>. An instance document is valid if and only if it conforms to the rules of the XML schema.</p>
<p>The XML Schema language defines such things as the following:</p>
<ul>
<li>
<p>Which elements and attributes are legal in the instance document</p>
</li>
<li>
<p>Which elements can be children of other elements</p>
</li>
<li>
<p>The order and number of child elements</p>
</li>
<li>
<p>Datatypes for elements and attributes</p>
</li>
<li>
<p>Default and fixed values for elements and attributes</p>
</li>
</ul>
<p>A validating XML parser tries to determine whether an instance document conforms to the rules of its associated XML schema. By using the XDK, you can write a validating parser that performs this schema validation. Note the following aspects of parsers that perform schema validation:</p>
<ul>
<li>
<p>Depending on its implementation, the parser may stop processing when it encounters an error, or continue.</p>
</li>
<li>
<p>The parser may report warnings and errors as they occur as in summary form at the end of processing.</p>
</li>
<li>
<p>The processor must take into account entity definitions and other constructs that are defined in a DTD that is included by the instance document. The XML Schema language does not define what must occurs when an instance document includes both an XML schema and a DTD. Thus, the behavior of the application in such cases depends on the implementation.</p>
</li>
</ul>
<div id="ADXDK19262" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref192"></a>
<h4 class="sect3">XML Schema Samples in the XDK</h4>
<p><a href="#BABHGCFC">Example 7-3</a> shows a sample XML document that contains a purchase report that describes the parts that have been ordered in different regions. This sample file is located at <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/report.xml</code>.</p>
<div id="ADXDK19263" class="example">
<p class="titleinexample"><a id="BABHGCFC"></a>Example 7-3 report.xml</p>
<pre dir="ltr">
&lt;purchaseReport
  xmlns="http://www.example.com/Report"
  xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.example.com/Report  report.xsd"
  period="P3M" periodEnding="1999-12-31"&gt;
 
 &lt;regions&gt;
  &lt;zip code="95819"&gt;
   &lt;part number="872-AA" quantity="1"/&gt;
   &lt;part number="926-AA" quantity="1"/&gt;
   &lt;part number="833-AA" quantity="1"/&gt;
   &lt;part number="455-BX" quantity="1"/&gt;
  &lt;/zip&gt;
  &lt;zip code="63143"&gt;
   &lt;part number="455-BX" quantity="4"/&gt;
  &lt;/zip&gt;
 &lt;/regions&gt;
 &lt;parts&gt;
  &lt;part number="872-AA"&gt;Lawnmower&lt;/part&gt;
  &lt;part number="926-AA"&gt;Baby Monitor&lt;/part&gt;
  &lt;part number="833-AA"&gt;Lapis Necklace&lt;/part&gt;
  &lt;part number="455-BX"&gt;Sturdy Shelves&lt;/part&gt;
 &lt;/parts&gt;
&lt;/purchaseReport&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BABFDAEI">Example 7-4</a> shows the XML schema document named <code dir="ltr">report.xsd</code>, which is the sample XML schema document that you can use to validate <code dir="ltr">report.xml</code>. Among other things, the XML schema defines the names of the elements that are legal in the instance document as well as the type of data that the elements can contain.</p>
<div id="ADXDK19264" class="example">
<p class="titleinexample"><a id="BABFDAEI"></a>Example 7-4 report.xsd</p>
<pre dir="ltr">
&lt;schema targetNamespace="http://www.example.com/Report"
        xmlns="http://www.w3.org/2001/XMLSchema"
        xmlns:r="http://www.example.com/Report"
        elementFormDefault="qualified"&gt;
 
 &lt;annotation&gt;
  &lt;documentation&gt;
   Report schema for Example.com
   Copyright 2000 Example.com. All rights reserved.
  &lt;/documentation&gt;
 &lt;/annotation&gt;
 
 &lt;element name="purchaseReport"&gt;
  &lt;complexType&gt;
   &lt;sequence&gt;
    &lt;element name="regions" type="r:RegionsType"&gt;
     &lt;keyref name="dummy2" refer="r:pNumKey"&gt;
      &lt;selector xpath="r:zip/r:part"/&gt;
      &lt;field xpath="@number"/&gt;
     &lt;/keyref&gt;
    &lt;/element&gt;
 
    &lt;element name="parts" type="r:PartsType"/&gt;
   &lt;/sequence&gt;
   &lt;attribute name="period"       type="duration"/&gt;
   &lt;attribute name="periodEnding" type="date"/&gt;
  &lt;/complexType&gt;
 
  &lt;unique name="dummy1"&gt;
   &lt;selector xpath="r:regions/r:zip"/&gt;
   &lt;field xpath="@code"/&gt;
  &lt;/unique&gt;
 
  &lt;key name="pNumKey"&gt;
   &lt;selector xpath="r:parts/r:part"/&gt;
   &lt;field xpath="@number"/&gt;
  &lt;/key&gt;
 &lt;/element&gt;
 &lt;complexType name="RegionsType"&gt;
  &lt;sequence&gt;
   &lt;element name="zip" maxOccurs="unbounded"&gt;
    &lt;complexType&gt;
     &lt;sequence&gt;
      &lt;element name="part" maxOccurs="unbounded"&gt;
       &lt;complexType&gt;
        &lt;complexContent&gt;
         &lt;restriction base="anyType"&gt;
          &lt;attribute name="number"   type="r:SKU"/&gt;
          &lt;attribute name="quantity" type="positiveInteger"/&gt;
         &lt;/restriction&gt;
        &lt;/complexContent&gt;
       &lt;/complexType&gt;
      &lt;/element&gt;
     &lt;/sequence&gt;
     &lt;attribute name="code" type="positiveInteger"/&gt;
    &lt;/complexType&gt;
   &lt;/element&gt;
  &lt;/sequence&gt;
 &lt;/complexType&gt;
 
 &lt;simpleType name="SKU"&gt;
  &lt;restriction base="string"&gt;
   &lt;pattern value="\d{3}-[A-Z]{2}"/&gt;
  &lt;/restriction&gt;
 &lt;/simpleType&gt;
 
 &lt;complexType name="PartsType"&gt;
  &lt;sequence&gt;
   &lt;element name="part" maxOccurs="unbounded"&gt;
    &lt;complexType&gt;
     &lt;simpleContent&gt;
      &lt;extension base="string"&gt;
       &lt;attribute name="number" type="r:SKU"/&gt;
      &lt;/extension&gt;
     &lt;/simpleContent&gt;
    &lt;/complexType&gt;
   &lt;/element&gt;
  &lt;/sequence&gt;
 &lt;/complexType&gt;
 
&lt;/schema&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHHFIIG"></a>
<div id="ADXDK19265" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Differences Between XML Schemas and DTDs</h3>
<p>The XML Schema language includes most of the capabilities of the DTD specification. An XML schema serves a similar purpose to a DTD, but is more flexible in specifying document constraints. <a href="#CIHDIBAB">Table 7-1</a> compares some of the features between the two validation mechanisms.</p>
<div id="ADXDK19266" class="tblhruleformal">
<p class="titleintable"><a id="sthref193"></a><a id="CIHDIBAB"></a>Table 7-1 Feature Comparison Between XML Schema and DTD</p>
<table class="cellalignment1211" title="Feature Comparison Between XML Schema and DTD" summary="This table compares the features of the XML Schema language and DTDs" dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t4">Feature</th>
<th class="cellalignment1212" id="r1c2-t4">XML Schema</th>
<th class="cellalignment1212" id="r1c3-t4">DTD</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t4" headers="r1c1-t4">
<p>Element nesting</p>
</td>
<td class="cellalignment1213" headers="r2c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r2c1-t4 r1c3-t4">
<p>X</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t4" headers="r1c1-t4">
<p>Element occurrence constraints</p>
</td>
<td class="cellalignment1213" headers="r3c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r3c1-t4 r1c3-t4">
<p>X</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t4" headers="r1c1-t4">
<p>Permitted attributes</p>
</td>
<td class="cellalignment1213" headers="r4c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r4c1-t4 r1c3-t4">
<p>X</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t4" headers="r1c1-t4">
<p>Attribute types and default values</p>
</td>
<td class="cellalignment1213" headers="r5c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r5c1-t4 r1c3-t4">
<p>X</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t4" headers="r1c1-t4">
<p>Written in XML</p>
</td>
<td class="cellalignment1213" headers="r6c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r6c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t4" headers="r1c1-t4">
<p>Namespace support</p>
</td>
<td class="cellalignment1213" headers="r7c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r7c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t4" headers="r1c1-t4">
<p>Built-In datatypes</p>
</td>
<td class="cellalignment1213" headers="r8c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r8c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t4" headers="r1c1-t4">
<p>User-Defined datatypes</p>
</td>
<td class="cellalignment1213" headers="r9c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r9c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t4" headers="r1c1-t4">
<p>Include/Import</p>
</td>
<td class="cellalignment1213" headers="r10c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r10c1-t4 r1c3-t4">&nbsp;</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t4" headers="r1c1-t4">
<p>Refinement (inheritance)</p>
</td>
<td class="cellalignment1213" headers="r11c1-t4 r1c2-t4">
<p>X</p>
</td>
<td class="cellalignment1213" headers="r11c1-t4 r1c3-t4">&nbsp;</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformal" -->
<p>The following reasons are probably the most persuasive for choosing XML schema validation over DTD validation:</p>
<ul>
<li>
<p>The XML Schema language enables you to define rules for the <span class="italic">content</span> of elements and attributes. You achieve control over content by using datatypes. With XML Schema datatypes you can more easily perform actions such as the following:</p>
<ul>
<li>
<p>Declare which elements should contain which types of data, for example, positive integers in one element and years in another</p>
</li>
<li>
<p>Process data obtained from a database</p>
</li>
<li>
<p>Define restrictions on data, for example, a number between 10 and 20</p>
</li>
<li>
<p>Define data formats, for example, dates in the form MM-DD-YYYY</p>
</li>
<li>
<p>Convert data between different datatypes, for example, strings to dates</p>
</li>
</ul>
</li>
<li>
<p>Unlike DTD grammar, documents written in the XML Schema language are themselves written in XML. Thus, you can perform the following actions:</p>
<ul>
<li>
<p>Use your XML parser to parse your XML schema</p>
</li>
<li>
<p>Process your XML schema with the XML DOM</p>
</li>
<li>
<p>Transform your XML document with XSLT</p>
</li>
<li>
<p>Reuse your XML schemas in other XML schemas</p>
</li>
<li>
<p>Extend your XML schema by adding elements and attributes</p>
</li>
<li>
<p>Reference multiple XML schemas from the same document</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHFFHC"></a>
<div id="ADXDK19267" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the XML Schema Processor: Overview</h2>
<p>The Oracle XML Schema processor is a SAX-based XML schema validator that you can use to validate instance documents against an XML schema. The processor supports both LAX and strict validation.</p>
<p>You can use the processor in the following ways:</p>
<ul>
<li>
<p>Enable it in the XML parser</p>
</li>
<li>
<p>Use it with a DOM tree to validate whole or part of an XML document</p>
</li>
<li>
<p>Use it as a component in a processing pipeline (like a content handler)</p>
</li>
</ul>
<p>You can configure the schema processor in different ways depending on your requirements. For example, you can do the following:</p>
<ul>
<li>
<p>Use a fixed XML schema or automatically build a schema based on the <code dir="ltr">schemaLocation</code> attributes in an instance document.</p>
</li>
<li>
<p>Set <code dir="ltr">XMLError</code> and <code dir="ltr">entityResolver</code> to gain better control over the validation process.</p>
</li>
<li>
<p>Determine how much of an instance document should be validated. You can use any of the validation modes specified in <a href="adx_j_parser.htm#g1043218">Table 4-1</a>. You can also designate a type of element as the root of validation.</p>
</li>
</ul>
<div id="ADXDK19268" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref194"></a>
<h3 class="sect2">Using the XML Schema Processor: Basic Process</h3>
<p>The following XDK packages are important for applications that process XML schemas:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.parser.v2</code>, which provides APIs for XML parsing</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.parser.schema</code>, which provides APIs for XML Schema processing</p>
</li>
</ul>
<p>The most important classes in the <code dir="ltr">oracle.xml.parser.schema</code> package are described in <a href="#CHDHIJJE">Table 7-2</a>. These form the core of most XML schema applications.</p>
<div id="ADXDK19269" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref195"></a><a id="CHDHIJJE"></a>Table 7-2 oracle.xml.parser.schema Classes</p>
<table class="cellalignment1211" title="oracle.xml.parser.schema Classes" summary="This table describes the oracle.xml.parser.schema classes." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t5">Class/Interface</th>
<th class="cellalignment1212" id="r1c2-t5">Description</th>
<th class="cellalignment1212" id="r1c3-t5">Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XMLSchema</code> class</p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c2-t5">
<p>Represents XML Schema component model. An <code dir="ltr">XMLSchema</code> object is a set of <code dir="ltr">XMLSchemaNodes</code> that belong to different target namespaces. The <code dir="ltr">XSDValidator</code> class uses <code dir="ltr">XMLSchema</code> for schema validation or metadata.</p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">get</code> methods such as <code dir="ltr">getElement()</code> and <code dir="ltr">getSchemaTargetNS()</code> obtain information about the XML schema</p>
</li>
<li>
<p><code dir="ltr">printSchema()</code> prints information about the XML schema</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XMLSchemaNode</code> class</p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c2-t5">
<p>Represents schema components in a target namespace, including type definitions, element and attribute delcarations, and group and attribute group definitions.</p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c3-t5">
<p>The principal methods are <code dir="ltr">get</code> methods such as <code dir="ltr">getElementSet()</code> and <code dir="ltr">getAttributeDeclarations()</code> obtain components of the XML schema.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XSDBuilder</code> class</p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c2-t5">
<p>Builds an <code dir="ltr">XMLSchema</code> object from an XML schema document. The <code dir="ltr">XMLSchema</code> object is a set of objects (Infoset items) corresponding to top-level schema declarations and definitions. The schema document is XML parsed and converted to a DOM tree.</p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">build()</code> creates an <code dir="ltr">XMLSchema</code> object.</p>
</li>
<li>
<p><code dir="ltr">getObject()</code> returns the <code dir="ltr">XMLSchema</code> object.</p>
</li>
<li>
<p><code dir="ltr">setEntityResolver()</code> sets an <code dir="ltr">EntityResolver</code> for resolving imports and includes.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XSDValidator</code> class</p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c2-t5">
<p>Validates an instance XML document against an XML schema. When registered, an <code dir="ltr">XSDValidator</code> object is inserted as a pipeline node between <code dir="ltr">XMLParser</code> and <code dir="ltr">XMLDocument</code> events handlers.</p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c3-t5">
<p>The principal methods are as follows:</p>
<ul>
<li>
<p><code dir="ltr">get</code> methods such as <code dir="ltr">getCurrentMode()</code> and <code dir="ltr">getElementDeclaration()</code></p>
</li>
<li>
<p><code dir="ltr">set</code> methods such as <code dir="ltr">setXMLProperty()</code> and <code dir="ltr">setDocumentLocator()</code></p>
</li>
<li>
<p><code dir="ltr">startDocument()</code> receives notification of the beginning of the document.</p>
</li>
<li>
<p><code dir="ltr">startElement()</code> receives notification of the beginning of the element.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<p><a href="#i1012436">Figure 7-1</a> depicts the basic process of validating an instance document with the XML Schema processor.</p>
<div id="ADXDK19270" class="figure">
<p class="titleinfigure"><a id="i1012436"></a>Figure 7-1 XML Schema Processor</p>
<img width="470" height="339" src="img/adxdk105.gif" alt="Description of Figure 7-1 follows" /><br />
<a id="sthref196" href="img_text/adxdk105.htm">Description of "Figure 7-1 XML Schema Processor"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The XML Schema processor performs the following major tasks:</p>
<ol>
<li>
<p>A builder (<code dir="ltr">XSDBuilder</code> object) assembles the XML schema from an input XML schema document. Although instance documents and schemas need not exist specifically as files on the operating system, they are commonly referred to as files. They may exist as streams of bytes, fields in a database record, or collections of XML Infoset "Information Items."</p>
<p>This task involves parsing the schema document into an object. The builder creates the schema object explicitly or implicitly:</p>
<ul>
<li>
<p>In explicit mode, you pass in an XML schema when you invoke the processor. <a href="#BABDIICG">"Validating Against Externally Referenced XML Schemas"</a> explains how to build the schema object in explicit mode.</p>
</li>
<li>
<p>In implicit mode, you do not pass in an XML schema when you invoke the processor because the schema is internally referenced by the instance document. <a href="#CIHEFHAJ">"Validating Against Internally Referenced XML Schemas"</a> explains how to create the schema object in implicit mode.</p>
</li>
</ul>
</li>
<li>
<p>The XML schema validator uses the schema object to validate the instance document. This task involves the following steps:</p>
<ol>
<li>
<p>A SAX parser parses the instance document into SAX events, which it passes to the validator.</p>
</li>
<li>
<p>The validator receives SAX events as input and validates them against the schema object, sending an error message if it finds invalid XML components.</p>
<p><a href="adx_j_parser.htm#i1024648">"Validation in the XML Parser"</a> describes the validation modes that you can use when validating the instance document. If you do not explicitly set a schema for validation with the <code dir="ltr">XSDBuilder</code> class, then the instance document must have the correct <code dir="ltr">xsi:schemaLocation</code> attribute pointing to the schema file. Otherwise, the program will not perform the validation. If the processor encounters errors, it generates error messages.</p>
</li>
<li>
<p>The validator sends input SAX events, default values, or post-schema validation information to a DOM builder or application.</p>
</li>
</ol>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">XSDBuilder</code>, <code dir="ltr">DOMParser</code>, and <code dir="ltr">SAXParser</code> classes</p>
</li>
<li>
<p><a href="#i1003036">Chapter 7, "Using the Schema Processor for Java"</a> to learn about the XDK SAX and DOM parsers</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHFCJIJ"></a>
<div id="ADXDK19271" class="sect2">
<h3 class="sect2">Running the XML Schema Processor Demo Programs<a id="sthref197"></a></h3>
<p>Demo programs for the XML Schema processor for Java are included in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema</code>. <a href="#CIHIEEDI">Table 7-3</a> describes the XML files and programs that you can use to test the XML Schema processor.</p>
<div id="ADXDK19272" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref198"></a><a id="CIHIEEDI"></a>Table 7-3 XML Schema Sample Files</p>
<table class="cellalignment1211" title="XML Schema Sample Files " summary="File and Description are the Columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">File</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<pre dir="ltr">
cat.xsd
</pre></td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>A sample XML schema used by the <code dir="ltr">XSDSetSchema.java</code> program to validate <code dir="ltr">catalogue.xml</code>. The <code dir="ltr">cat.xsd</code> schema specifies the structure of a catalogue of books.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<pre dir="ltr">
catalogue.xml
</pre></td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>A sample instance document that the <code dir="ltr">XSDSetSchema.java</code> program uses to validate against the <code dir="ltr">cat.xsd</code> schema.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<pre dir="ltr">
catalogue_e.xml
</pre></td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>A sample instance document used by the <code dir="ltr">XSDSample.java</code> program. When the program tries to validate this document against the <code dir="ltr">cat.xsd</code> schema, it generates schema errors.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<pre dir="ltr">
DTD2Schema.java
</pre></td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>This sample program converts a DTD (first argument) into an XML Schema and uses it to validate an XML file (second argument).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<pre dir="ltr">
embeded_xsql.xsd
</pre></td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>The XML schema used by <code dir="ltr">XSDLax.java.</code> The schema defines the structure of an XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t7" headers="r1c1-t7">
<pre dir="ltr">
embeded_xsql.xml
</pre></td>
<td class="cellalignment1213" headers="r7c1-t7 r1c2-t7">
<p>The instance document used by <code dir="ltr">XSDLax.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t7" headers="r1c1-t7">
<pre dir="ltr">
juicer1.xml
</pre></td>
<td class="cellalignment1213" headers="r8c1-t7 r1c2-t7">
<p>A sample XML document for use with <code dir="ltr">xsdproperty.java</code>. The XML schema that defines this document is <code dir="ltr">juicer1.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t7" headers="r1c1-t7">
<pre dir="ltr">
juicer1.xsd
</pre></td>
<td class="cellalignment1213" headers="r9c1-t7 r1c2-t7">
<p>A sample XML schema for use with <code dir="ltr">xsdproperty.java</code>. This XML schema defines <code dir="ltr">juicer1.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t7" headers="r1c1-t7">
<pre dir="ltr">
juicer2.xml
</pre></td>
<td class="cellalignment1213" headers="r10c1-t7 r1c2-t7">
<p>A sample XML document for use with <code dir="ltr">xsdproperty.java</code>. The XML schema that defines this document is <code dir="ltr">juicer2.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t7" headers="r1c1-t7">
<pre dir="ltr">
juicer2.xsd
</pre></td>
<td class="cellalignment1213" headers="r11c1-t7 r1c2-t7">
<p>A sample XML document for use with <code dir="ltr">xsdproperty.java</code>. This XML schema defines <code dir="ltr">juicer2.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t7" headers="r1c1-t7">
<pre dir="ltr">
report.xml
</pre></td>
<td class="cellalignment1213" headers="r12c1-t7 r1c2-t7">
<p>The sample XML file that <code dir="ltr">XSDSetSchema.java</code> uses to validate against the XML schema <code dir="ltr">report.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t7" headers="r1c1-t7">
<pre dir="ltr">
report.xsd
</pre></td>
<td class="cellalignment1213" headers="r13c1-t7 r1c2-t7">
<p>A sample XML schema used by the <code dir="ltr">XSDSetSchema.java</code> program to validate the contents of <code dir="ltr">report.xml</code>. The <code dir="ltr">report.xsd</code> schema specifies the structure of a purchase order.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t7" headers="r1c1-t7">
<pre dir="ltr">
report_e.xml
</pre></td>
<td class="cellalignment1213" headers="r14c1-t7 r1c2-t7">
<p>When the program validates this sample XML file using <code dir="ltr">XSDSample.java</code>, it generates XML Schema errors.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsddom.java
</pre></td>
<td class="cellalignment1213" headers="r15c1-t7 r1c2-t7">
<p>This program shows how to validate an instance document by obtain a DOM representation of the document and using an <code dir="ltr">XSDValidator</code> object to validate it.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdent.java
</pre></td>
<td class="cellalignment1213" headers="r16c1-t7 r1c2-t7">
<p>This program validates an XML document by redirecting the referenced schema in the <code dir="ltr">SchemaLocation</code> attribute to a local version.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdent.xml
</pre></td>
<td class="cellalignment1213" headers="r17c1-t7 r1c2-t7">
<p>This XML document describes a book. The file is used as an input to <code dir="ltr">xsdent.java</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdent.xsd
</pre></td>
<td class="cellalignment1213" headers="r18c1-t7 r1c2-t7">
<p>This XML schema document defines the rules for <code dir="ltr">xsdent.xml</code>. The schema document contains a <code dir="ltr">schemaLocation</code> attribute set to <code dir="ltr">xsdent-1.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r19c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdent-1.xsd
</pre></td>
<td class="cellalignment1213" headers="r19c1-t7 r1c2-t7">
<p>The XML schema document referenced by the <code dir="ltr">schemaLocation</code> attribute in <code dir="ltr">xsdent.xsd</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r20c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdproperty.java
</pre></td>
<td class="cellalignment1213" headers="r20c1-t7 r1c2-t7">
<p>This demo shows how to configure the XML Schema processor to validate an XML document based on a complex type or element declaration.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r21c1-t7" headers="r1c1-t7">
<pre dir="ltr">
xsdsax.java
</pre></td>
<td class="cellalignment1213" headers="r21c1-t7 r1c2-t7">
<p>This demo shows how to validate an XML document received as a SAX stream.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r22c1-t7" headers="r1c1-t7">
<pre dir="ltr">
XSDLax.java
</pre></td>
<td class="cellalignment1213" headers="r22c1-t7 r1c2-t7">
<p>This demo is the same as <code dir="ltr">XSDSetSchema.java</code> but sets the <code dir="ltr">SCHEMA_LAX_VALIDATION</code> flag for LAX validation.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r23c1-t7" headers="r1c1-t7">
<pre dir="ltr">
XSDSample.java
</pre></td>
<td class="cellalignment1213" headers="r23c1-t7 r1c2-t7">
<p>This program is a sample driver that you can use to process XML instance documents.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r24c1-t7" headers="r1c1-t7">
<pre dir="ltr">
XSDSetSchema.java
</pre></td>
<td class="cellalignment1213" headers="r24c1-t7 r1c2-t7">
<p>This program is a sample driver to process XML instance documents by overriding the <code dir="ltr">schemaLocation</code>. The program uses the XML Schema specification from <code dir="ltr">cat.xsd</code> to validate the contents of <code dir="ltr">catalogue.xml</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>Documentation for how to compile and run the sample programs is located in the <code dir="ltr">README</code> in the same directory. The basic steps are as follows:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\schema</code> directory (Windows).</p>
</li>
<li>
<p>Run <code dir="ltr">make</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) at the command line.</p>
</li>
<li>
<p>Add <code dir="ltr">xmlparserv2.jar</code>, <code dir="ltr">xschema.jar</code>, and the current directory to the <code dir="ltr">CLASSPATH</code>. These JAR files are located in <code dir="ltr">$ORACLE_HOME/lib</code> (UNIX) and <code dir="ltr">%ORACLE_HOME%\lib</code> (Windows). For example, you can set the <code dir="ltr">CLASSPATH</code> as follows with the <code dir="ltr">tcsh</code> shell on UNIX:</p>
<pre dir="ltr">
setenv CLASSPATH
 "$CLASSPATH":$ORACLE_HOME/lib/xmlparserv2.jar:$ORACLE_HOME/lib/schema.jar:.
</pre>
<p>Note that the XML Schema processor requires JDK version 1.2 or higher and is usable on any operating system with Java 1.2 support.</p>
</li>
<li>
<p>Run the sample programs with the XML files that are included in the directory:</p>
<ul>
<li>
<p>The following examples use <code dir="ltr">report.xsd</code> to validate the contents of <code dir="ltr">report.xml</code>:</p>
<pre dir="ltr">
java XSDSample report.xml
java XSDSetSchema report.xsd report.xml
</pre></li>
<li>
<p>The following example validates an instance document in Lax mode:</p>
<pre dir="ltr">
java XSDLax embeded_xsql.xsd embeded_xsql.xml
</pre></li>
<li>
<p>The following examples use <code dir="ltr">cat.xsd</code> to validate the contents of <code dir="ltr">catalogue.xml</code>:</p>
<pre dir="ltr">
java XSDSample catalogue.xml
java XSDSetSchema cat.xsd catalogue.xml
</pre></li>
<li>
<p>The following examples generates error messages:</p>
<pre dir="ltr">
java XSDSample catalogue_e.xml
java XSDSample report_e.xml
</pre></li>
<li>
<p>The following example uses the <code dir="ltr">schemaLocation</code> attribute in <code dir="ltr">xsdent.xsd</code> to redirect the XML schema to <code dir="ltr">xsdent-1.xsd</code> for validation:</p>
<pre dir="ltr">
java xsdent xsdent.xml xsdent.xsd
</pre></li>
<li>
<p>The following example generates a SAX stream from <code dir="ltr">report.xml</code> and validates it against the XML schema defined in <code dir="ltr">report.xsd</code>:</p>
<pre dir="ltr">
java xsdsax report.xsd report.xml
</pre></li>
<li>
<p>The following example creates a DOM representation of <code dir="ltr">report.xml</code> and validates it against the XML schema defined in <code dir="ltr">report.xsd</code>:</p>
<pre dir="ltr">
java xsddom report.xsd report.xml
</pre></li>
<li>
<p>The following examples configure validation starting with an element declaration or complex type definition:</p>
<pre dir="ltr">
java xsdproperty juicer1.xml juicer1.xsd http://www.juicers.org \
juicersType false &gt; juicersType.out
                                                                                       
java xsdproperty juicer2.xml juicer2.xsd http://www.juicers.org \ 
Juicers true &gt; juicers_e.out
</pre></li>
<li>
<p>The following example converts a DTD (<code dir="ltr">dtd2schema.dtd</code>) into an XML schema and uses it to validate an instance document (<code dir="ltr">dtd2schema.xml</code>):</p>
<pre dir="ltr">
java DTD2Schema dtd2schema.dtd dtd2schema.xml
</pre></li>
</ul>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHFIGJH"></a>
<div id="ADXDK19273" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the XML Schema Processor Command-Line Utility</h3>
<p><a href="adx_j_parser.htm#i1035390">"Using the XML Parser Command-Line Utility"</a> describes how to run the <code dir="ltr">oraxml</code> command-line utility. You can use this utility to validate instance documents against XML schemas and DTDs.</p>
<div id="ADXDK19274" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref199"></a>
<h4 class="sect3">Using oraxml to Validate Against a Schema</h4>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema</code> directory. <a href="#CIHGACIE">Example 7-5</a> shows how you can validate <code dir="ltr">report.xml</code> against <code dir="ltr">report.xsd</code> by executing the following on the command line.</p>
<div id="ADXDK19275" class="example">
<p class="titleinexample"><a id="CIHGACIE"></a>Example 7-5 Using oraxml to Validate Against a Schema</p>
<pre dir="ltr">
oraxml -schema -enc report.xml
</pre></div>
<!-- class="example" -->
<p>You should obtain the following output:</p>
<pre dir="ltr">
The encoding of the input file: UTF-8
The input XML file is parsed without errors using Schema validation mode.
</pre></div>
<!-- class="sect3" -->
<div id="ADXDK19276" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref200"></a>
<h4 class="sect3">Using oraxml to Validate Against a DTD</h4>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/common</code> directory. <a href="#CIHJDDBC">Example 7-6</a> shows how you can validate <code dir="ltr">family.xml</code> against <code dir="ltr">family.dtd</code> by executing the following on the command line.</p>
<div id="ADXDK19277" class="example">
<p class="titleinexample"><a id="CIHJDDBC"></a>Example 7-6 Using oraxml to Validate Against a DTD</p>
<pre dir="ltr">
oraxml -dtd -enc family.xml
</pre></div>
<!-- class="example" -->
<p>You should obtain the following output:</p>
<pre dir="ltr">
The encoding of the input file: UTF-8
 The input XML file is parsed without errors using DTD validation mode.
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHDHBCE"></a>
<div id="ADXDK19278" class="sect1">
<h2 class="sect1">Validating XML with XML Schemas</h2>
<p>This section includes the following topics:</p>
<ul>
<li>
<p><a href="#CIHEFHAJ">Validating Against Internally Referenced XML Schemas</a></p>
</li>
<li>
<p><a href="#BABDIICG">Validating Against Externally Referenced XML Schemas</a></p>
</li>
<li>
<p><a href="#BABCEHEI">Validating a Subsection of an XML Document</a></p>
</li>
<li>
<p><a href="#CIHGICFD">Validating XML from a SAX Stream</a></p>
</li>
<li>
<p><a href="#CIHHBEEE">Validating XML from a DOM</a></p>
</li>
<li>
<p><a href="#CIHGAHEB">Validating XML from Designed Types and Elements</a></p>
</li>
<li>
<p><a href="#CIHFDCIH">Validating XML with the XSDValidator Bean</a></p>
</li>
</ul>
<a id="CIHEFHAJ"></a>
<div id="ADXDK19279" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating Against Internally Referenced XML Schemas</h3>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/XSDSample.java</code> program illustrates how to validate against an implicit XML Schema. The validation mode is implicit because the XML schema is referenced in the instance document itself.</p>
<p>Follow the steps in this section to write programs that use the <code dir="ltr">setValidationMode()</code> method of the <code dir="ltr">oracle.xml.parser.v2.</code><code dir="ltr">DOMParser</code> class:</p>
<ol>
<li>
<p>Create a DOM parser to use for the validation of an instance document. The following code fragment from <code dir="ltr">XSDSample.java</code> illustrates how to create the <code dir="ltr">DOMParser</code> object:</p>
<pre dir="ltr">
public class XSDSample
{
   public static void main(String[] args) throws Exception
   {
      if (args.length != 1)
      {
         System.out.println("Usage: java XSDSample &lt;filename&gt;");
         return;
      }
      process (args[0]);
   }

   public static void process (String xmlURI) throws Exception
   {
      DOMParser dp  = new DOMParser();
      URL       url = createURL(xmlURI);
      ...
   }
...
}
</pre>
<p><code dir="ltr">createURL()</code> is a helper method that constructs a URL from a filename passed to the program as an argument.</p>
</li>
<li>
<p>Set the validation mode for the validating DOM parser with the <code dir="ltr">DOMParser.setValidationMode()</code> method. For example, <code dir="ltr">XSDSample.java</code> shows how to specify XML schema validation:</p>
<pre dir="ltr">
dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace(true);
</pre></li>
<li>
<p>Set the output error stream with the <code dir="ltr">DOMParser.setErrorStream()</code> method. For example, <code dir="ltr">XSDSample.java</code> sets the error stream for the DOM parser object as follows:</p>
<pre dir="ltr">
dp.setErrorStream (System.out);
</pre></li>
<li>
<p>Validate the instance document with the <code dir="ltr">DOMParser.parse()</code> method. You do not have to create an XML schema object explicitly because the schema is internally referenced by the instance document. For example, <code dir="ltr">XSDSample.java</code> validates the instance document as follows:</p>
<pre dir="ltr">
try
{
  System.out.println("Parsing "+xmlURI);
  dp.parse(url);
  System.out.println("The input file &lt;"+xmlURI+"&gt; parsed without errors");
}
catch (XMLParseException pe)
{
  System.out.println("Parser Exception: " + pe.getMessage());
}
catch (Exception e)
{
  System.out.println("NonParserException: " + e.getMessage());
}
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABDIICG"></a>
<div id="ADXDK19280" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating Against Externally Referenced XML Schemas</h3>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/XSDSetSchema.java</code> program illustrates how to validate an XML schema explicitly. The validation mode is explicit because you use the <code dir="ltr">XSDBuilder</code> class to specify the schema to use for validation: the schema is not specified in the instance document as in implicit validation.</p>
<p>Follow the basic steps in this section to write Java programs that use the <code dir="ltr">build()</code> method of the <code dir="ltr">oracle.xml.parser.schema.XSDBuilder</code> class:</p>
<ol>
<li>
<p>Build an XML schema object from the XML schema document with the <code dir="ltr">XSDBuilder.build()</code> method. The following code fragment from <code dir="ltr">XSDSetSchema.java</code> illustrates how to create the object:</p>
<pre dir="ltr">
public class XSDSetSchema
{
   public static void main(String[] args) throws Exception
   {
      if (args.length != 2)
      {
         System.out.println("Usage: java XSDSample &lt;schema_file&gt; &lt;xml_file&gt;");
         return;
      }
 
      XSDBuilder builder = new XSDBuilder();
      URL    url =  createURL(args[0]);
 
      // Build XML Schema Object
      XMLSchema schemadoc = (XMLSchema)builder.build(url);
      process(args[1], schemadoc);
   }
. . .
</pre>
<p>The <code dir="ltr">createURL()</code> method is a helper method that constructs a URL from the schema document filename specified on the command line.</p>
</li>
<li>
<p>Create a DOM parser to use for validation of the instance document. The following code from <code dir="ltr">XSDSetSchema.java</code> illustrates how to pass the instance document filename and XML schema object to the <code dir="ltr">process()</code> method:</p>
<pre dir="ltr">
public static void process(String xmlURI, XMLSchema schemadoc)throws Exception{
   DOMParser dp  = new DOMParser();
   URL       url = createURL (xmlURI);
   . . .
</pre></li>
<li>
<p>Specify the schema object to use for validation with the <code dir="ltr">DOMParser.setXMLSchema()</code> method. This step is not necessary in implicit validation mode because the instance document already references the schema. For example, <code dir="ltr">XSDSetSchema.java</code> specifies the schema as follows:</p>
<pre dir="ltr">
dp.setXMLSchema(schemadoc);
</pre></li>
<li>
<p>Set the validation mode for the DOM parser object with the <code dir="ltr">DOMParser.setValidationMode()</code> method. For example, <code dir="ltr">XSDSample.java</code> shows how to specify XML schema validation:</p>
<pre dir="ltr">
dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace(true);
</pre></li>
<li>
<p>Set the output error stream for the parser with the <code dir="ltr">DOMParser.setErrorStream()</code> method. For example, <code dir="ltr">XSDSetSchema.java</code> sets it as follows:</p>
<pre dir="ltr">
dp.setErrorStream (System.out);
</pre></li>
<li>
<p>Validate the instance document against the XML schema with the <code dir="ltr">DOMParser.parse()</code> method. For example, <code dir="ltr">XSDSetSchema.java</code> includes the following code:</p>
<pre dir="ltr">
try
{
   System.out.println("Parsing "+xmlURI);
   dp.parse (url);
   System.out.println("The input file &lt;"+xmlURI+"&gt; parsed without errors");
}
catch (XMLParseException pe)
{
   System.out.println("Parser Exception: " + pe.getMessage());
}
catch (Exception e)
{
   System.out.println ("NonParserException: " + e.getMessage());
}
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BABCEHEI"></a>
<div id="ADXDK19281" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating a Subsection of an XML Document</h3>
<p>In LAX mode, you can validate parts of the XML content of an instance document without validating the whole document. A LAX parser indicates that the processor should perform validation for elements in the instance document that are declared in an associated XML schema. The processor does not consider the instance document invalid if it contains no elements declared in the schema.</p>
<p>By using LAX mode, you can define the schema only for the part of the XML that you want to validate. The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/XSDLax.java</code> program illustrates how to use LAX validation. The program follows the basic steps described in <a href="#BABDIICG">"Validating Against Externally Referenced XML Schemas"</a>:</p>
<ol>
<li>
<p>Build an XML schema object from the user-specified XML schema document.</p>
</li>
<li>
<p>Create a DOM parser to use for validation of the instance document.</p>
</li>
<li>
<p>Specify the XML schema to use for validation.</p>
</li>
<li>
<p>Set the validation mode for the DOM parser object.</p>
</li>
<li>
<p>Set the output error stream for the parser.</p>
</li>
<li>
<p>Validate the instance document against the XML schema by calling <code dir="ltr">DOMParser.parse()</code>.</p>
</li>
</ol>
<p>To enable LAX validation, the program sets the validation mode in the parser to <code dir="ltr">SCHEMA_LAX_VALIDATION</code> rather than to <code dir="ltr">SCHEMA_VALIDATION</code>. The following code fragment from <code dir="ltr">XSDLax.java</code> illustrates this technique:</p>
<pre dir="ltr">
dp.setXMLSchema(schemadoc);
dp.setValidationMode(XMLParser.SCHEMA_LAX_VALIDATION);
dp.setPreserveWhitespace (true);
. . .
</pre>
<p>You can test LAX validation by running the sample program as follows:</p>
<pre dir="ltr">
java XSDLax embeded_xsql.xsd embeded_xsql.xml
</pre></div>
<!-- class="sect2" -->
<a id="CIHGICFD"></a>
<div id="ADXDK19282" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating XML from a SAX Stream</h3>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/xsdsax.java</code> program illustrates how to validate an XML document received as a SAX stream. You instantiate an <code dir="ltr">XSDValidator</code> and register it with the SAX parser as the content handler.</p>
<p>Follow the steps in this section to write programs that validate XML from a SAX stream:</p>
<ol>
<li>
<p>Build an XML schema object from the user-specified XML schema document by invoking the <code dir="ltr">XSDBuilder.build()</code> method. The following code fragment illustrates how to create the object:</p>
<pre dir="ltr">
XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(args[0]);

// Build XML Schema Object
XMLSchema schemadoc = (XMLSchema)builder.build(url);      
process(args[1], schemadoc);
. . .
</pre>
<p><code dir="ltr">createURL()</code> is a helper method that constructs a URL from the filename specified on the command line.</p>
</li>
<li>
<p>Create a SAX parser (<code dir="ltr">SAXParser</code> object) to use for validation of the instance document. The following code fragment from <code dir="ltr">saxxsd.java</code> passes the handles to the XML document and schema document to the <code dir="ltr">process()</code> method:</p>
<pre dir="ltr">
process(args[1], schemadoc);...public static void process(String xmlURI, XMLSchema schemadoc)
throws Exception 
{
    SAXParser dp  = new SAXParser();
...
</pre></li>
<li>
<p>Configure the SAX parser. The following code fragment sets the validation mode for the SAX parser object with the <code dir="ltr">XSDBuilder.setValidationMode()</code> method:</p>
<pre dir="ltr">
dp.setPreserveWhitespace (true);
dp.setValidationMode(XMLParser.NONVALIDATING);
</pre></li>
<li>
<p>Create and configure a validator (<code dir="ltr">XSDValidator</code> object). The following code fragment illustrates this technique:</p>
<pre dir="ltr">
XMLError err;... err = new XMLError();
...
XSDValidator validator = new XSDValidator();
...
validator.setError(err);
</pre></li>
<li>
<p>Specify the XML schema to use for validation by invoking the <code dir="ltr">XSDBuilder.setXMLProperty()</code> method. The first argument is the name of the property, which is <code dir="ltr">fixedSchema</code>, and the second is the reference to the XML schema object. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
validator.setXMLProperty(XSDNode.FIXED_SCHEMA, schemadoc);
...
</pre></li>
<li>
<p>Register the validator as the SAX content handler for the parser. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
dp.setContentHandler(validator);
...
</pre></li>
<li>
<p>Validate the instance document against the XML schema by invoking the <code dir="ltr">SAXParser.parse()</code> method. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
dp.parse (url);
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHHBEEE"></a>
<div id="ADXDK19283" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating XML from a DOM</h3>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/xsddom.java</code> program shows how to validate an instance document by obtain a DOM representation of the document and using an <code dir="ltr">XSDValidator</code> object to validate it.</p>
<p>The <code dir="ltr">xsddom.java</code> program follows these steps:</p>
<ol>
<li>
<p>Build an XML schema object from the user-specified XML schema document by invoking the <code dir="ltr">XSDBuilder.build()</code> method. The following code fragment illustrates how to create the object:</p>
<pre dir="ltr">
XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(args[0]);

XMLSchema schemadoc = (XMLSchema)builder.build(url);      
process(args[1], schemadoc);
</pre>
<p><code dir="ltr">createURL()</code> is a helper method that constructs a URL from the filename specified on the command line.</p>
</li>
<li>
<p>Create a DOM parser (<code dir="ltr">DOMParser</code> object) to use for validation of the instance document. The following code fragment from <code dir="ltr">domxsd.java</code> passes the handles to the XML document and schema document to the <code dir="ltr">process()</code> method:</p>
<pre dir="ltr">
process(args[1], schemadoc);...public static void process(String xmlURI, XMLSchema schemadoc)
throws Exception 
{
    DOMParser dp  = new DOMParser();
    . . .
</pre></li>
<li>
<p>Configure the DOM parser. The following code fragment sets the validation mode for the parser object with the <code dir="ltr">DOMParser.setValidationMode()</code> method:</p>
<pre dir="ltr">
dp.setPreserveWhitespace (true);
dp.setValidationMode(XMLParser.NONVALIDATING);
dp.setErrorStream (System.out);
</pre></li>
<li>
<p>Parse the instance document. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
dp.parse (url);
</pre></li>
<li>
<p>Obtain the DOM representation of the input document. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
XMLDocument doc = dp.getDocument();
</pre></li>
<li>
<p>Create and configure a validator (<code dir="ltr">XSDValidator</code> object). The following code fragment illustrates this technique:</p>
<pre dir="ltr">
XMLError err;... err = new XMLError();
...
XSDValidator validator = new XSDValidator();
...
validator.setError(err);
</pre></li>
<li>
<p>Specify the schema object to use for validation by invoking the <code dir="ltr">XSDBuilder.setXMLProperty()</code> method. The first argument is the name of the property, which in this example is <code dir="ltr">fixedSchema</code>, and the second is the reference to the schema object. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
validator.setXMLProperty(XSDNode.FIXED_SCHEMA, schemadoc);
. . .
</pre></li>
<li>
<p>Obtain the root element (<code dir="ltr">XMLElement</code>) of the DOM tree and validate. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
XMLElement root = (XMLElement)doc.getDocumentElement();
XMLElement copy = (XMLElement)root.validateContent(validator, true);
copy.print(System.out);
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHGAHEB"></a>
<div id="ADXDK19284" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating XML from Designed Types and Elements</h3>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/xsdproperty.java</code> program shows how to configure the XML Schema processor to validate an XML document based on a complex type or element declaration.</p>
<p>The <code dir="ltr">xsdproperty.java</code> program follows these steps:</p>
<ol>
<li>
<p>Create <code dir="ltr">String</code> objects for the instance document name, XML schema name, root node namespace, root node local name, and specification of element or complex type ("true" means the root node is an element declaration). The following code fragment illustrates this technique:</p>
<pre dir="ltr">
String xmlfile = args[0];
String xsdfile =  args[1];
...
String ns = args[2]; //namespace for the root node
String nm = args[3]; //root node's local name
String el = args[4]; //true if root node is element declaration, 
                     // otherwise, the root node is a complex type
</pre></li>
<li>
<p>Create an XSD builder and use it to create the schema object. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
XSDBuilder builder = new XSDBuilder();
URL    url =  XMLUtil.createURL(xsdfile);       
XMLSchema  schema;
...
schema = (XMLSchema) builder.build(url);
</pre></li>
<li>
<p>Obtain the node. Invoke different methods depending on whether the node is an element declaration or a complex type:</p>
<ul>
<li>
<p>If the node is an element declaration, pass the local name and namespace to the <code dir="ltr">getElement()</code> method of the schema object.</p>
</li>
<li>
<p>If the node is an element declaration, pass the namespace, local name, and root complex type to the <code dir="ltr">getType()</code> method of the schema object.</p>
</li>
</ul>
<p><code dir="ltr">xsdproperty.java</code> uses the following control structure:</p>
<pre dir="ltr">
QxName qname = new QxName(ns, nm);
...
XSDNode nd;
...
if (el.equals("true"))
{
  nd = schema.getElement(ns, nm);
  /* process ... */
}
else
{
  nd = schema.getType(ns, nm, XSDNode.TYPE);
  /* process ... */
}
</pre></li>
<li>
<p>After obtaining the node, create a new parser and set the schema to the parser to enable schema validation. The following code fragment illustrates this technique:</p>
<pre dir="ltr">
DOMParser dp  = new DOMParser();
URL       url = XMLUtil.createURL (xmlURI);
</pre></li>
<li>
<p>Set properties on the parser and then parse the URL. Invoke the <code dir="ltr">schemaValidatorProperty()</code> method as follows:</p>
<ol>
<li>
<p>Set the root element or type property on the parser to a fully qualified name.</p>
<p>For a top-level element declaration, set the property name to <code dir="ltr">XSDNode.ROOT_ELEMENT</code> and the value to a <code dir="ltr">QName</code>, as illustrated by the <code dir="ltr">process1()</code> method.</p>
<p>For a top-level type definition, set the property name to <code dir="ltr">XSDNode.ROOT_TYPE</code> and the value to a <code dir="ltr">QName</code>, as illustrated by the <code dir="ltr">process2()</code> method.</p>
</li>
<li>
<p>Set the root node property on the parser to an element or complex type node.</p>
<p>For an element node, set the property name to <code dir="ltr">XSDNode.ROOT_NODE</code> and the value to an <code dir="ltr">XSDElement</code> node, as illustrated by the <code dir="ltr">process3()</code> method.</p>
<p>For a type node, set the property name to <code dir="ltr">XSDNode.ROOT_NODE</code> and the value to an <code dir="ltr">XSDComplexType</code> node, as illustrated by the <code dir="ltr">process3()</code> method.</p>
</li>
</ol>
<p>The following code fragment shows the sequence of method invocation:</p>
<pre dir="ltr">
if (el.equals("true"))
{
   nd = schema.getElement(ns, nm);
   process1(xmlfile, schema, qname);
   process3(xmlfile, schema, nd);
}
else
{
   nd = schema.getType(ns, nm, XSDNode.TYPE);
   process2(xmlfile, schema, qname);
   process3(xmlfile, schema, nd);
}
</pre>
<p>The processing methods are implemented as follows:</p>
<pre dir="ltr">
  static void process1(String xmlURI, XMLSchema schema, QxName qname)
      throws Exception
  {
    /* create parser... */
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_ELEMENT, qname);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
                                                                                             
  static void process2(String xmlURI, XMLSchema schema, QxName qname)
      throws Exception
  {
      /* create parser... */                                                                                        
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_TYPE, qname);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
                                                                                             
  static void process3(String xmlURI, XMLSchema schema, XSDNode node)
      throws Exception
  {
      /* create parser... */
                                                                                              
    dp.setXMLSchema(schema);
    dp.setSchemaValidatorProperty(XSDNode.ROOT_NODE, node);
    dp.setPreserveWhitespace (true);
    dp.setErrorStream (System.out);
    dp.parse (url);
    ...
  }
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHFDCIH"></a>
<div id="ADXDK19285" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Validating XML with the XSDValidator Bean</h3>
<p>The <code dir="ltr">oracle.xml.schemavalidator.XSDValidator</code> bean encapsulates the <code dir="ltr">oracle.xml.parser.schema.XSDValidator</code> class and adds functionality for validating a DOM tree. The parser builds the DOM tree for the instance document and XML schema document and validates the instance document against the schema.</p>
<p>The <code dir="ltr">XSDValidatorSample.java</code> program in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/transviewer</code> illustrates how to use the <code dir="ltr">XSDValidator</code> bean.</p>
<p>Follow the basic steps in this section to write Java programs that use the <code dir="ltr">XSDValidator</code> bean:</p>
<ol>
<li>
<p>Parse the instance document with the <code dir="ltr">DOMParser.parse()</code> method. The following code fragment from <code dir="ltr">XSDValidatorSample.java</code> illustrates this technique:</p>
<pre dir="ltr">
URL xmlinstanceurl, schemaurl;
XMLDocument xmldoc1,xmldoc2;

// get the URL for the input files
xmlinstanceurl = createURL(args[0]);
// Parse the XML Instance document first
xmldoc1 = parseXMLDocument(xmlinstanceurl);
</pre>
<p><code dir="ltr">createURL()</code> is a helper method that creates a URL from a filename. The <code dir="ltr">parseXMLDocument()</code> method receives a URL as input and parses it with the <code dir="ltr">DOMParser.parse()</code> method as follows:</p>
<pre dir="ltr">
DOMParser parser = new DOMParser();
parser.parse(xmlurl);
return parser.getDocument();
</pre></li>
<li>
<p>Parse the XML schema document with the <code dir="ltr">DOMParser.parse()</code> method. The following code from <code dir="ltr">XSDValidatorSample.java</code> illustrates this technique:</p>
<pre dir="ltr">
schemaurl = createURL(args[1]);xmldoc2 = parseXMLDocument(schemaurl);
</pre></li>
<li>
<p>Build the schema object from the parsed XML schema with the <code dir="ltr">XSDBuilder.build()</code> method. The following code fragment from <code dir="ltr">XSDValidatorSample.java</code> illustrates this technique:</p>
<pre dir="ltr">
XSDBuilder xsdbuild =  new XSDBuilder();
. . .
xmlschema = (XMLSchema)xsdbuild.build(xmldoc2, createURL(args+"builder"));
</pre></li>
<li>
<p>Specify the schema object to use for validation by passing a reference to the <code dir="ltr">XSDValidator.setSchema()</code> method. The following code fragment from <code dir="ltr">XSDValidatorSample.java</code> creates the validator and sets the schema:</p>
<pre dir="ltr">
XSDValidator xsdval = new XSDValidator();
. . .
xsdval.setSchema(xmlschema);
</pre></li>
<li>
<p>Set the error output stream for the validator by invoking the <code dir="ltr">XSDValidator.setError()</code> method. The following code fragment from <code dir="ltr">XSDValidatorSample.java</code> illustrates how to create the object:</p>
<pre dir="ltr">
Properties p = new Properties(System.getProperties());
p.load(new FileInputStream("demo.properties"));
System.setProperties(p);
. . .
XMLError err = new XMLError();
. . .
err.setErrorHandler(new DocErrorHandler());
. . .
xsdval.setError(err);
</pre></li>
<li>
<p>Validate the instance document against the schema by passing a reference to instance document to the <code dir="ltr">XSDValidator.validate()</code> method. For example, <code dir="ltr">XSDValidatorSample.java</code> includes the following code fragment:</p>
<pre dir="ltr">
xsdval.validate(xmldoc1);
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDHDEFE"></a>
<div id="ADXDK19286" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Tips and Techniques for Programming with XML Schemas</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CIHEEHEH">Overriding the Schema Location with an Entity Resolver</a></p>
</li>
<li>
<p><a href="#CIHICCJB">Converting DTDs to XML Schemas</a></p>
</li>
</ul>
<a id="CIHEEHEH"></a>
<div id="ADXDK19287" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overriding the Schema Location with an Entity Resolver</h3>
<p>When the <code dir="ltr">XSDBuilder</code> builds a schema, it may need to include or import other schemas specified as URLs in the <code dir="ltr">schemaLocation</code> attribute. The <code dir="ltr">xsdent.java</code> demo described in <a href="#CIHIEEDI">Table 7-3</a> illustrates this case. The document element in <code dir="ltr">xsdent.xml</code> file contains the following attribute:</p>
<pre dir="ltr">
xsi:schemaLocation =  "http://www.example.com/BookCatalogue
                       xsdent.xsd"&gt;
</pre>
<p>The <code dir="ltr">xsdent.xsd</code> document contains the following elements:</p>
<pre dir="ltr">
&lt;schema xmlns="http://www.w3.org/2001/XMLSchema"
               targetNamespace="http://www.example.com/BookCatalogue"
               xmlns:catd = "http://www.example.com/Digest"
               xmlns:cat  = "http://www.example.com/BookCatalogue"
               elementFormDefault="qualified"&gt;
&lt;import namespace = "http://www.example.com/Digest"
        schemaLocation = "xsdent-1.xsd" /&gt;
</pre>
<p>In some cases, you may want to override the schema locations specified in <code dir="ltr">&lt;import&gt;</code> and supply the builder with the required schema documents. For example, you may have downloaded the schemas documents from external Web sites and stored them in a database. In such cases, you can set an entity resolver in the <code dir="ltr">XSDBuilder</code>. <code dir="ltr">XSDBuilder</code> passes the schema location to the resolver, which returns an <code dir="ltr">InputStream</code>, <code dir="ltr">Reader</code>, or <code dir="ltr">URL</code> as an InputSource. The builder can read the schema documents from the <code dir="ltr">InputSource</code>.</p>
<p>The <code dir="ltr">xsdent.java</code> program illustrates how you can override the schema location with an entity resolver. You must implement the <code dir="ltr">EntityResolver</code> interface, instantiate the entity resolver, and set it in the XML schema builder. In the demo code, <code dir="ltr">sampleEntityResolver1</code> returns <code dir="ltr">InputSource</code> as an <code dir="ltr">InputStream</code> whereas <code dir="ltr">sampleEntityResolver2</code> returns <code dir="ltr">InputSource</code> as a <code dir="ltr">URL</code>.</p>
<p>Follow these basic steps:</p>
<ol>
<li>
<p>Create a new XML schema builder as follows:</p>
<pre dir="ltr">
XSDBuilder builder = new XSDBuilder(); 
   
</pre></li>
<li>
<p>Set the builder to your entity resolver. An entity resolver is a class that implements the <code dir="ltr">EntityResolver</code> interface. The purpose of the resolver is to enable the XML reader to intercept any external entities before including them. The following code fragment creates an entity resolver and sets it in the builder:</p>
<pre dir="ltr">
builder.setEntityResolver(new sampleEntityResolver1());
</pre>
<p>The <code dir="ltr">sampleEntityResolver1</code> class implements the <code dir="ltr">resolveEntity()</code> method. You can use this method to redirect external system identifiers to local URIs. The source code is as follows:</p>
<pre dir="ltr">
class sampleEntityResolver1 implements EntityResolver
{
   public InputSource resolveEntity (String targetNS,  String systemId)
   throws SAXException, IOException
   {
      // perform any validation check if needed based on targetNS &amp; systemId 
      InputSource mySource = null;
      URL u = XMLUtil.createURL(systemId); 
      // Create input source with InputStream as input
      mySource = new InputSource(u.openStream());
      mySource.setSystemId(systemId);
      return mySource;
   }
}
</pre>
<p>Note that <code dir="ltr">sampleEntityResolver1</code> initializes the <code dir="ltr">InputSource</code> with a stream.</p>
</li>
<li>
<p>Build the XML schema object. The following code illustrates this technique:</p>
<pre dir="ltr">
schemadoc = builder.build(url);
</pre></li>
<li>
<p>Validate the instance document against the XML schema. The program executes the following statement:</p>
<pre dir="ltr">
process(xmlfile, schemadoc);
</pre>
<p>The <code dir="ltr">process()</code> method creates a DOM parser, configures it, and invokes the <code dir="ltr">parse()</code> method. The method is implemented as follows:</p>
<pre dir="ltr">
public static void process(String xmlURI, Object schemadoc)
    throws Exception
{
  DOMParser dp  = new DOMParser();
  URL       url = XMLUtil.createURL (xmlURI);
 
  dp.setXMLSchema(schemadoc);
  dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
  dp.setPreserveWhitespace (true);
  dp.setErrorStream (System.out);
  try {
     dp.parse (url);
     ...
}
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CIHICCJB"></a>
<div id="ADXDK19288" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Converting DTDs to XML Schemas</h3>
<p>Because of the power and flexibility of the XML Schema language, you may want to convert your existing DTDs to XML Schema documents. The XDK API enables you to perform this transformation.</p>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/demo/java/schema/DTD2Schema.java</code> program illustrates how to convert a DTD. You can test the program as follows:</p>
<pre dir="ltr">
java DTD2Schema dtd2schema.dtd dtd2schema.xml
</pre>
<p>Follow these basic steps to convert a DTD to an XML schema document:</p>
<ol>
<li>
<p>Parse the DTD with the <code dir="ltr">DOMParser.parseDTD()</code> method. The following code fragment from <code dir="ltr">DTD2Schema.java</code> illustrates how to create the DTD object:</p>
<pre dir="ltr">
XSDBuilder builder = new XSDBuilder(); 
URL dtdURL = createURL(args[0]);
DTD dtd = getDTD(dtdURL, "abc");
   
</pre>
<p>The <code dir="ltr">getDTD()</code> method is implemented as follows:</p>
<pre dir="ltr">
private static DTD getDTD(URL dtdURL, String rootName)
   throws Exception
{
   DOMParser parser = new DOMParser();
   DTD dtd;
   parser.setValidationMode(true);
   parser.setErrorStream(System.out);
   parser.showWarnings(true);
   parser.parseDTD(dtdURL, rootName);
   dtd = (DTD)parser.getDoctype();
   return dtd;
}
</pre></li>
<li>
<p>Convert the DTD to an XML schema DOM tree with the <code dir="ltr">DTD.convertDTD2Sdhema()</code> method. The following code fragment from <code dir="ltr">DTD2Schema.java</code> illustrates this technique:</p>
<pre dir="ltr">
XMLDocument dtddoc = dtd.convertDTD2Schema();
</pre></li>
<li>
<p>Write the XML schema DOM tree to an output stream with the <code dir="ltr">XMLDocument.print()</code> method. The following code fragment from <code dir="ltr">DTD2Schema.java</code> illustrates this technique:</p>
<pre dir="ltr">
FileOutputStream fos = new FileOutputStream("dtd2schema.xsd.out");
dtddoc.print(fos);
</pre></li>
<li>
<p>Create an XML schema object from the schema DOM tree with the <code dir="ltr">XSDBuilder.build()</code> method. The following code fragment from <code dir="ltr">DTD2Schema.java</code> illustrates this technique:</p>
<pre dir="ltr">
XMLSchema schemadoc = (XMLSchema)builder.build(dtddoc, null);
</pre></li>
<li>
<p>Validate an instance document against the XML schema with the <code dir="ltr">DOMParser.parse()</code> method. The following code fragment from <code dir="ltr">DTD2Schema.java</code> illustrates this technique:</p>
<pre dir="ltr">
validate(args[1], schemadoc);
</pre>
<p>The <code dir="ltr">validate()</code> method is implemented as follows:</p>
<pre dir="ltr">
DOMParser dp  = new DOMParser();
URL       url = createURL (xmlURI); 
dp.setXMLSchema(schemadoc);
dp.setValidationMode(XMLParser.SCHEMA_VALIDATION);
dp.setPreserveWhitespace (true);
dp.setErrorStream (System.out);
try
{
   System.out.println("Parsing "+xmlURI);
   dp.parse (url);
   System.out.println("The input file &lt;"+xmlURI+"&gt; parsed without errors");
}
...
</pre></li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_xslt.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_jaxb.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
