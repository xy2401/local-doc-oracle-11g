<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using Binary XML for Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_parser.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_xslt.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">13/47</span> <!-- End Header -->
<div id="ADXDK4440" class="chapter"><a id="BAJFBGGB"></a>
<h1 class="chapter"><span class="secnum">5</span> Using <a id="sthref140"></a>Binary XML for Java</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#BAJICEAI">Introduction to Binary XML for Java</a></p>
</li>
<li>
<p><a href="#BABCCCBF">Models for Using Binary XML</a></p>
</li>
<li>
<p><a href="#BAJBGCIJ">The Parts of Binary XML for Java</a></p>
</li>
<li>
<p><a href="#BAJCGEJD">Binary XML Vocabulary Management</a></p>
</li>
<li>
<p><a href="#BAJIADHG">Using Java Binary XML Package</a></p>
</li>
</ul>
<a id="BAJICEAI"></a>
<div id="ADXDK19188" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to Binary XML for Java</h2>
<p>Binary XML was introduced in Oracle 11<span class="italic">g</span> Release 1 (11.1). Binary XML makes it possible to encode and decode between XML text and compressed binary XML. For efficiency, the DOM and SAX APIs are provided on top of binary XML for direct consumption by the XML applications. Compression and decompression of fragments of an XML document facilitate incremental processing.</p>
<p>This chapter assumes that you are familiar with the XML Parser for Java.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a></div>
<a id="BAJDFGJG"></a>
<div id="ADXDK19189" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref141"></a>Binary XML Storage Format</h3>
<p>An <code dir="ltr">XMLType</code> storage option is provided to enable storing XML documents in the new binary format. The new storage option is in addition to the existing <code dir="ltr">CLOB</code> and object-relational storage options. <code dir="ltr">XMLType</code> tables and columns can be created using the new binary XML storage option. The XML data in binary format can be accessed and manipulated by all the existing SQL operators and functions and PL/SQL APIs that operate on <code dir="ltr">XMLType</code>.</p>
<p>Binary XML is a compact XML-schema-aware encoding of XML data, but it can be used with XML data that is not based on an XML schema. You can also use binary XML for XML data which is outside the database (in a client-side application, for instance). Binary XML allows for encoding and decoding of XML documents, from text to binary and binary to text. Binary XML is post-parse persistent XML with native database datatypes.</p>
<p>Binary XML provides more efficient database storage, updating, indexing, query performance, and fragment extraction than unstructured storage. It can store data and metadata together or separately.</p>
</div>
<!-- class="sect2" -->
<a id="BAJCBDAE"></a>
<div id="ADXDK19190" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Binary XML Processors</h3>
<p>A <span class="italic">binary XML processor</span> is an abstract term for describing a component that processes and transforms binary XML format into text and XML text into binary XML format. It can also provide a cache for storing schemas. The base class for a binary XML processor is <code dir="ltr">BinXMLProcessor</code>. A binary XML processor can originate or receive network protocol requests.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCCCBF"></a>
<div id="ADXDK19191" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref142"></a>Models for Using Binary XML</h2>
<p>There are several models for using binary XML in applications. First, here is a glossary of terms:</p>
<a id="BABFCAJB"></a>
<div id="ADXDK19192" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><a id="sthref143"></a>Glossary for Binary XML</h3>
<p>Here is a glossary of terms for binary XML usage:</p>
<ul>
<li>
<p><span class="italic">doc-id</span>: Each encoded XML document is identified by a unique doc-id. It is either a 16-byte Global User ID (GUID) or an opaque sequence of bytes like a URL.</p>
</li>
<li>
<p><span class="italic">token table</span>: When a text XML document does not have a schema associated with it, then a token (or symbol) table is used to minimize space for repeated items.</p>
</li>
<li>
<p><span class="italic">vocabulary id</span>: Can be a schema-id or a namespace URI identification for a token table.</p>
</li>
<li>
<p><span class="italic">schema-id</span>: A unique opaque binary identifier for a schema scoped to the binary XML processor. The schema-id is unique for a binary XML processor and is identifiable only within the scope of that binary XML processor. The schema-id remains constant even when the schema is evolved. A schema-id represents the entire set of schema documents, including imported and included schemas.</p>
</li>
<li>
<p><span class="italic">schema version</span>: Every annotated schema has a version number associated with it. The version number is specified as part of the system level annotations. It is incremented by the binary XML processor when a schema is evolved (that is, a new version of the same schema is registered with the binary XML processor).</p>
</li>
<li>
<p><span class="italic">partial validity</span>: Binary XML stream encoding using schema implies at least partial validity with respect to the schema. Partial validity implies no validation for unique keys, keyrefs, IDs, or IDREFs.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<div id="ADXDK19193" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref144"></a>
<h3 class="sect2">Standalone Model</h3>
<p>This is the simplest usage scenario for binary XML. There is a single binary XML processor. The only repository available is the local in-memory vocabulary cache that is not persistent and is only available for the life of the binary XML processor. All schemas must be registered in advance with the binary XML Processor before the encoding, or can be registered automatically when the XML Processor sees the <code dir="ltr">xsi:SchemaLocation</code> tag. For decoding, the schema is already available in the vocabulary cache.</p>
<p>If the decoding occurs in a different binary XML processor, see the different Web Services models described here.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDK19194" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref145"></a>
<h3 class="sect2">Client-Server Model</h3>
<p>In this scenario, the binary XML processor is connected to a database using JDBC. It is assumed that the schema is registered with the database before encoding.</p>
<p>Here is an example of how to achieve that:</p>
<pre dir="ltr">
BEGIN
   DBMS_XMLSCHEMA.registerSchema(
   SCHEMAURL =&gt; 
   'http://xmlns.oracle.com/xdb/documentation/purchaseOrder.xsd',
   SCHEMADOC =&gt; 
   bfilename('XMLDIR','purchaseOrder.xsd'),
   CSID =&gt; nls_charset_id('AL32UTF8'),
   GENTYPES =&gt; FALSE,
   OPTIONS =&gt; REGISTER_BINARYXML );
END;
/
</pre>
<p>Unless a separate connection is specified for data (using <code dir="ltr">associateDataConnection()</code>) it is assumed that all data and metadata is stored and retrieved using a single connection for encoding and decoding.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDK19195" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref146"></a>
<h3 class="sect2">Web Services Model with Repository</h3>
<p>In this scenario there are multiple clients, each running a binary XML processor. One client does the encoding and the other client does the decoding. There is a common repository (that is not necessarily a database) connected to all the clients for metadata storage. It can be a file system or some other repository. The first binary XML processor ensures that the schema is registered with the repository before performing the encoding, or the schema might be automatically registered using the <code dir="ltr">xsi:schemaLocation</code> tag at the time of encoding. The second binary XML processor is used for decoding, is not aware of the location of the schema, and fetches the schema from the repository.</p>
<p>If the first binary XML processor registers a schema and the second binary XML processor registersthe same schema in the repository, the binary XML processor does not compile the schema, but simply returns the <code dir="ltr">vocabulary-id</code> of the existing compiled schema in the local vocabulary cache.</p>
<p>The <code dir="ltr">BinXMLProcessor</code> is not thread-safe, so multiple threads or clients accessing the repository need to implement their own thread safety scheme.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDK19196" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref147"></a>
<h3 class="sect2">Web Services Model Without Repository</h3>
<p>In this scenario, there are multiple clients, each running a binary XML processor. Encoding and decoding can happen on different clients. There is no common metadata repository. The encoder has to ensure that the binary data passed to the next client is independent of schema: that is, has inline token definitions. This can be achieved by setting <code dir="ltr">schemaAware</code> = <code dir="ltr">false</code> and <code dir="ltr">inlineTokenDefs</code> = <code dir="ltr">true</code>, using the <code dir="ltr">setProperty()</code> method, during encoding. While decoding, there is no schema required.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAJBGCIJ"></a>
<div id="ADXDK19197" class="sect1">
<h2 class="sect1">The Parts of Binary XML for Java</h2>
<p>The Java XML binary functionality has three parts:</p>
<ul>
<li>
<p>Binary XML encoding - The binary XML encoder converts XML 1.0 <a id="sthref148"></a><span class="bold">infoset</span> to binary XML.</p>
</li>
<li>
<p>Binary XML decoding - The binary XML decoder converts binary XML to XML infoset.</p>
</li>
<li>
<p>Binary XML vocabulary management, which includes schema management and token management.</p>
</li>
</ul>
<div id="ADXDK19198" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref149"></a>
<h3 class="sect2"><a id="sthref150"></a><a id="sthref151"></a>Binary XML Encoding</h3>
<p>The encoder is created from the <code dir="ltr">BinXMLStream</code>. It takes as input the XML text and outputs the encoded binary XML to the <code dir="ltr">BinXMLStream</code> it was created from. The encoder reads the XML text using streaming SAX. The encoding of the XML text is based on the results of the XML parsing.</p>
<p>Set the <code dir="ltr">schemaAware</code> flag on the encoder that specifies whether the encoding is schema-aware or schema-less.</p>
<p>For schema-aware encoding, the encoder determines whether the schema with the particular schema URL has been registered with the vocabulary manager. For a repository-based or a database-based processor, the encoder queries the repository or the database for the compiled schema based on the schema URL. If the schema is available in the database, it is fetched from the repository or database in the binary XML format and registered with the local vocabulary manager. The vocabulary is schema.</p>
<p>Also set a flag to indicate that the encoding results in a binary XML stream that is independent of a schema. In this case, the resulting binary XML stream contains all token definitions inline and is not dependent on schema or external token sets.</p>
<p>If the encoding is schema-aware, the encoder uses the datatype information from the schema object for more efficient encoding of the SAX stream. There is a default encoding datatype associated with each schema built-in datatype. Binary XML stream encoding using a schema implies at least partial validity with respect to the schema (For partial validity there is no validation for unique key, or keyref, or ID, or DREFs). If the data is known to be completely valid with respect to a schema, the encoded binary XML stream stores this information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADXDB0690" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=ADXDB0690"><span class="italic">Oracle XML DB Developer's Guide</span></a> for tables of the binary encoding datatypes and their mappings from XML schema datatypes</div>
<p>If there is no schema associated with the text XML, then integer token ids are generated for repeated items in the text XML. Creating a token table of token ids and token definitions is an important compression technique. The token definitions are stored as token tables in the vocabulary cache. If the property for inline token definitions is set, then the token definitions are present inline.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBJIHB">"Token Management"</a></div>
<p>Another property on the encoder is specifying PSVI (Post Schema Validated Infoset) information as part of the binary stream. If this is set to true then PSVI information can be accessed using XDK extension APIs for PSVI on DOM. If <code dir="ltr">psvi = true</code> then the input XML is fully validated with respect to the schema. If <code dir="ltr">psvi</code> is <code dir="ltr">false</code> then PSVI information is not included in the output binary stream. The default is <code dir="ltr">false</code>.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDK19199" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref152"></a>
<h3 class="sect2"><a id="sthref153"></a><a id="sthref154"></a>Binary XML Decoding</h3>
<p>The binary XML decoder converts binary XML to XML infoset. The decoder is created from the <code dir="ltr">BinXMLStream</code>; it reads binary XML from this stream and outputs SAX events or provide a pull style <code dir="ltr">InfosetReader</code> API for reading the decoded XML. If a schema is associated with the <code dir="ltr">BinXMLStream</code>, the binary XML decoder retrieves the associated schema object from the vocabulary cache using the vocabulary id before decoding. If the schema is not available in the vocabulary cache, and the connection information to the server is available, then the schema is fetched from the server.</p>
<p>If no schema is associated with <code dir="ltr">BinXMLStream</code>, then the token definitions can be either inline in the <code dir="ltr">BinXMLStream</code> or stored in a token set. If tokens of a corresponding namespace are not stored in the local vocabulary cache, then the token set is fetched from the repository.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAJCGEJD"></a>
<div id="ADXDK19200" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref155"></a>Binary XML Vocabulary Management</h2>
<p>The binary XML processors are of different types depending on where the metadata (schema or token sets) are located - either local binary XML processor or repository binary XML processor.</p>
<div id="ADXDK19201" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref156"></a>
<h3 class="sect2">Schema Management</h3>
<p>For metadata persistence, it is recommended that you use the DB Binary XML processor. In this case, schemas and token sets are registered with the database. The vocabulary manager fetches the schema or token sets from the database and cache it in the local vocabulary cache for encoding and decoding purposes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBGHHH">"Binary XML DB"</a></div>
<p>If you need to use a persistent metadata repository that is not a database, then you can plug in your own metadata repository. You must implement the interface for communicating with this repository, <code dir="ltr">BinXMLMetadataProvider</code>.</p>
<div id="ADXDK19202" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref157"></a>
<h4 class="sect3">Schema Registration</h4>
<p>Register schemas locally with the local binary XML processor. The local binary XML processor contains a vocabulary manager that maintains all schemas submitted by the user for the duration of its existence. The vocabulary manager associated with a local binary XML processor does not provide for schema persistence.</p>
<p>If you register the same schema (same schema location and same target namespace) then the schema is not parsed, and the existing vocabulary id is returned. If a new schema with the same target namespace and a different schema location is registered then the existing schema definition is augmented with the new schema definitions or results in conflict error.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19203" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref158"></a>
<h4 class="sect3">Schema Identification</h4>
<p>Each schema is identified by a vocabulary id. The vocabulary id is in the scope of the processor and is unique within the processor. Any document that validates with a schema is required to validate with a latest version of the schema.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19204" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref159"></a>
<h4 class="sect3">Schema Annotations</h4>
<p>Binary XML annotations can only appear within the <code dir="ltr">&lt;xsd:appInfo&gt;</code> element in a schema. There are two categories of schema annotations - User-level and System-level. The vocabulary manager interprets these at the time of schema registration. All other types of annotations (for example, database related annotations, is ignored).</p>
</div>
<!-- class="sect3" -->
<a id="CHDIADGE"></a>
<div id="ADXDK19205" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">User-Level Annotations</h4>
<p>These are specified by the user before registration.</p>
<p><code dir="ltr">encodingType</code> - This can be used within a <code dir="ltr">xsd:element</code>, <code dir="ltr">xsd:attribute</code> or <code dir="ltr">xsd:simpleType</code> elements. It indicates the datatype to be used for encoding the node value of the particular element or attribute. For strings, there is only support for UTF8 encoding in this release.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19206" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref160"></a>
<h4 class="sect3">System-Level Annotations</h4>
<p>The vocabulary manager adds these at the time of registration; you cannot overwrite them.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABBJIHB"></a>
<div id="ADXDK19207" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Token Management</h3>
<p>Token sets can be fetched from the database or metadata repository, cached in the local vocabulary manager and used for decoding. While encoding, token sets can be pushed to the repository for persistence.</p>
<p>Token definitions can also be included as part of the binary XML stream by setting a flag on the encoder.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BAJIADHG"></a>
<div id="ADXDK19208" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><a id="sthref161"></a><a id="sthref162"></a>Using Java Binary XML Package</h2>
<p>A <code dir="ltr">BinXMLStream</code> class represents the binary XML stream. The different storage locations defined for the binary XML Stream are:</p>
<ul>
<li>
<p><code dir="ltr">InputStream</code> - stream for reading.</p>
</li>
<li>
<p><code dir="ltr">OutputStream</code>- stream for writing.</p>
</li>
<li>
<p><code dir="ltr">URL</code> - stream for reading.</p>
</li>
<li>
<p><code dir="ltr">File</code> - stream for read and write.</p>
</li>
<li>
<p><code dir="ltr">BLOB</code> - stream for reading and writing.</p>
</li>
<li>
<p>Byte array - stream for reading and writing.</p>
</li>
<li>
<p>In memory - stream for reading and writing.</p>
</li>
</ul>
<p>The <code dir="ltr">BinXMLStream</code> object specifies the type of storage during creation.</p>
<p>A <code dir="ltr">BinXMLStream</code> object can be created from a <code dir="ltr">BinXMLProcessor</code> factory. This factory can be initialized with a JDBC connection (for remote metadata access), connection pool, URL or a <code dir="ltr">PageManagerPool</code> (for lazy in-memory storage). <code dir="ltr">BinXMLEncoder</code> and <code dir="ltr">BinXMLDecoder</code> can be created from the <code dir="ltr">BinXMLStream</code> for encoding or decoding.</p>
<p>1. Here is an example of creating a processor without a repository, registering a schema, encoding XML SAX events into schema-aware binary format, and storing in a file:</p>
<pre dir="ltr">
BinXMLProcessor  proc = BinXMLProcessorFactory.createProcessor();
proc.registerSchema(schemaURL);
BinXMLStream outbin = proc.createBinaryStream(outFile);
BinXMLEncoder enc = outbin.getEncoder();
enc.setSchemaAware(true);
ContentHandler hdlr = enc.getContentHandler();
</pre>
<p>In addition to getting the <code dir="ltr">ContentHandler</code>, you can also get the other handlers, such as:</p>
<pre dir="ltr">
LexicalHandler lexhdlr = enc.getLexicalHandler();
DTDHandler dtdhdlr = encenc.getDTDHandler();
DeclHandler declhdlr = enc.getDeclHandler();
ErrorHandler errhdlr = enc.getErrorHandler();
</pre>
<p>Use <code dir="ltr">hdlr</code> in the application that generates the SAX events.</p>
<p>2. Here is an example of creating a processor with a database repository, decoding a schema-aware binary stream and reading the decoded XML using pull API. The schema is fetched from the database repository for decoding.</p>
<pre dir="ltr">
DBBinXMLMetadataProvider dbrep = 
     BinXMLMetadataProviderFactory.createDBMetadataProvider();
BinXMLProcessor proc = BinXMLProcessorFactory.createProcessor(dbrep);
BinXMLStream inpbin = proc.createBinaryStream(blob);
BinXMLDecoder dec = inpbin.getDecoder();
InfosetReader xmlreader = dec.getReader();
</pre>
<p>Use <code dir="ltr">xmlreader</code> to read XML in a pull-style from the decoder.</p>
<div id="ADXDK19209" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref163"></a>
<h3 class="sect2"><a id="sthref164"></a>Binary XML Encoder</h3>
<p>The encoder takes XML input, which is parsed and read using SAX events, and outputs binary XML.</p>
<div id="ADXDK19210" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref165"></a>
<h4 class="sect3">Schema-less Option</h4>
<p>You can specify the schema-aware or the schema-less option before encoding. The default is schema-less encoding. If the schema-aware option is set, then the encoding is done based on schema(s) specified in the instance document. The annotated schema(s) used for encoding is also required at the time of decoding. If the schema-less option is specified, then the encoding is independent of schema(s), but the tokens are inline by default. To override the default, set <code dir="ltr">Inline-token = false.</code></p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19211" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref166"></a>
<h4 class="sect3">Inline-token Option</h4>
<p>You can set an option to create a binary XML Stream with inline token definitions before encoding. If "inlining" is turned off, than you must ensure that the processors for the encoder or decoder are using the same metadata repository. The flag <code dir="ltr">Inline-token</code> is ignored if the schema-aware option is true. By default, the token definitions is inline.</p>
<div id="ADXDK19212" class="figure">
<p class="titleinfigure"><a id="sthref167"></a>Figure 5-1 Binary XML Encoding</p>
<img width="405" height="240" src="img/adxdk124.gif" alt="Description of Figure 5-1 follows" /><br />
<a id="sthref168" href="img_text/adxdk124.htm">Description of "Figure 5-1 Binary XML Encoding"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="ADXDK19213" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref169"></a>
<h3 class="sect2"><a id="sthref170"></a>Binary XML Decoder</h3>
<p>The binary XML decoder takes binary XML stream as input and generates SAX Events as output, or provides a pull interface to read the decoded XML. In the case of schema-aware binary XML stream, the binary XML decoder interacts with the vocabulary manager to extract the schema information.</p>
<p>If the vocabulary manager does not contain the required schema, and the processor is of type binary XML DB with a valid JDBC connection, then the remote schema is fetched from the database or the metadata repository based on the vocabulary id in the binary XML stream to be decoded. Similarly, the set of token definitions can be fetched from the database or the metadata repository.</p>
<div id="ADXDK19214" class="figure">
<p class="titleinfigure"><a id="sthref171"></a>Figure 5-2 Binary XML Decoder</p>
<img width="375" height="240" src="img/adxdk123.gif" alt="Description of Figure 5-2 follows" /><br />
<a id="sthref172" href="img_text/adxdk123.htm">Description of "Figure 5-2 Binary XML Decoder"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<div id="ADXDK19215" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref173"></a>
<h3 class="sect2">Schema Registration</h3>
<p>Here is the flow of this process: If the vocabulary is an XML schema; it takes the XML schema text as input. The schema annotator annotates the schema text with system level annotations. The schema might already have some user level annotations.</p>
<p>The resulting annotated schema is processed by the Schema Builder to build an XML schema object. This XML schema object is stored in the vocabulary cache. The vocabulary cache assigns a unique vocabulary id for each XML schema object, which is returned as output. The annotated DOM representation of the schema is sent to the binary XML encoder.</p>
</div>
<!-- class="sect2" -->
<div id="ADXDK19216" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref174"></a>
<h3 class="sect2">Resolving xsi:schemaLocation</h3>
<p>During encoding, if <code dir="ltr">schemaAware</code> is true and the property <code dir="ltr">ImplcitSchemaRegistration</code> is <code dir="ltr">true</code>, then the first <code dir="ltr">xsi:schemaLocation</code> tag present in the root element of an XML instance document automatically registers that schema in the local vocabulary manager. All other <code dir="ltr">schemaLocation</code> tags are not explicitly registered. If the processor is database-oriented, then the schema is also registered in the database; similarly for any metadata repository based processor.</p>
<p>If the encoding is set to <code dir="ltr">schemaAware</code> is <code dir="ltr">false</code> or <code dir="ltr">ImplcitSchemaRegistration</code> is <code dir="ltr">false</code>, then all <code dir="ltr">xsi:schemaLocation</code> tags are ignored by the encoder.</p>
</div>
<!-- class="sect2" -->
<a id="BABBGHHH"></a>
<div id="ADXDK19217" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Binary XML DB</h3>
<p>A <code dir="ltr">DBBinXMLMetadataProvider</code> object is either instantiated with a dedicated JDBC connection or a connection pool to access vocabulary information such as schema and token set. The processor is also associated with one or more data connections to access XML data.</p>
<p>A binary XML Processor can communicate with the database for various types of binary XML operations involving storage and retrieval of binary XML schemas, token sets, and binary XML streams. Database communication is involved in the following ways:</p>
<ol>
<li>
<p>Extracting compiled binary XML Schema using the vocabulary id or the schema URL</p>
<p>To retrieve a compiled binary XML schema for encoding, the database is queried based on the schema URL. For decoding the binary XML schema, fetch it from the database based on the vocabulary id.</p>
</li>
<li>
<p>Storing noncompiled binary XML schema using the schema URL and retrieving the vocabulary id.</p>
<p>When the <code dir="ltr">xsi:schemaLocation</code> tag is encountered during encoding, the schema is registered in the database for persistent storage in the database. The vocabulary id associated with the schema, as well as the binary version of the compiled schema is retrieved back from the database; the compiled schema object is built and stored in the local cache using the vocabulary id returned from the database.</p>
</li>
<li>
<p>Retrieving a binary token set using namespace URL.</p>
<p>If a binary stream to be decoded is associated with token tables for decoding, these are fetched from the database using the metadata connection.</p>
</li>
<li>
<p>Storing binary token set using namespace URL</p>
<p>If the XML text has been encoded without a schema, then it results in a token set of token definitions. These token tables can be stored persistently in the database. The metadata connection is used for transferring the token set to the database.</p>
</li>
<li>
<p>Binary XML stream with remote storage option</p>
<p>It is your responsibility to create a table containing an <code dir="ltr">XMLType</code> column with binary XML for storing the result of encoding and retrieving the binary XML for decoding. Communication with the database can be achieved with SQL*Net and JDBC. Fetch the <code dir="ltr">XMLType</code> object from the output result set of the JDBC query. The <code dir="ltr">BinXMLStream</code> for reading the binary data or for writing out binary data can be created from the <code dir="ltr">XMLType</code> object. The <code dir="ltr">XMLType</code> class must be extended to support reading and writing of binary XML data.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<div id="ADXDK19218" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref175"></a>
<h3 class="sect2">Persistent Storage of Metadata</h3>
<p>A local vocabulary manager and cache stores metadata information in the memory for the life of the <code dir="ltr">BinXMLProcessor</code>. Plug in your own back-end storage for metadata by implementing the <code dir="ltr">BinXMLMetadataProvider</code> interface and plugging it into the <code dir="ltr">BinXMLProcessor</code>. Currently only one metadata provider for each processor is supported.</p>
<p>You must code a <code dir="ltr">FileBinXMLMetadataProvider</code> that implements the <code dir="ltr">BinXMLMetadataProvider</code> interface. The encoder and decoder uses these APIs to access metadata from the persisted back-end storage. Set up the configuration information for the persistent storage: for example, root directory in the case of a file system in <code dir="ltr">FileBinXMLMetadataProvider</code> class. Instantiate <code dir="ltr">FileBinXMLMetadataProvider</code> and plug it into the <code dir="ltr">BinXMLProcessor</code>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_parser.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_xslt.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
