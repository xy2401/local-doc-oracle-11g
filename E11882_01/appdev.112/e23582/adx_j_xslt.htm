<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XSLT Processor for Java</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:37Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_xmlbin.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_sproc.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">14/47</span> <!-- End Header -->
<div id="ADXDK4000" class="chapter"><a id="g1034010"></a>
<h1 class="chapter"><span class="secnum">6</span> Using the XSLT Processor for Java</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CHDHGEBE">Introduction to the XSLT Processor</a></p>
</li>
<li>
<p><a href="#i1013345">Using the XSLT Processor for Java: Overview</a></p>
</li>
<li>
<p><a href="#CHDEHEIJ">Transforming XML</a></p>
</li>
<li>
<p><a href="#i1023310">Programming with Oracle XSLT Extensions</a></p>
</li>
<li>
<p><a href="#i1028600">Tips and Techniques for Transforming XML</a></p>
</li>
</ul>
<a id="CHDHGEBE"></a>
<div id="ADXDK19219" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to the XSLT Processor</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDFJEBB">Prerequisites</a></p>
</li>
<li>
<p><a href="#CHDJJHBE">Standards and Specifications</a></p>
</li>
<li>
<p><a href="#CHDDAGGC">XML Transformation with XSLT 1.0 and 2.0</a></p>
</li>
</ul>
<a id="CHDFJEBB"></a>
<div id="ADXDK19220" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>XSLT is an XML-based language that you can use to transform one XML document into another text document. For example, you can use XSLT to accept an XML data document as input, perform arithmetic calculations on element values in the document, and generate an XHTML document that shows the calculation results.In XSLT, XPath is used to navigate and process elements in the source node tree. XPath models an XML document as a tree made up of nodes; the types of nodes in the XPath node tree correspond to the types of nodes in a DOM tree.</p>
<p>This chapter assumes that you are familiar with the following W3C standards:</p>
<ul>
<li>
<p>eXtensible Stylesheet Language (XSL) and <a href="glossary.htm#i1000946"><span class="xrefglossterm">eXtensible Stylesheet Language Transformation (XSLT)</span></a>. If you require a general introduction to XSLT, consult the XML resources listed in <a href="preface.htm#CIAFJDBI">"Related Documents"</a> of the preface.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDJJHBE"></a>
<div id="ADXDK4001" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Standards and Specifications</h3>
<p>XSLT is currently available in two versions: a working draft for XSLT 2.0 and the XSLT 1.0 Recommendation. You can find the specifications at the following URLs:</p>
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xslt20/">http://www.w3.org/TR/xslt20/</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xslt">http://www.w3.org/TR/xslt</a></code></p>
</li>
</ul>
<p>XPath, which is the navigational language used by XSLT and other XML languages, is available in two versions: a working draft for XPath 2.0 and the XPath 1.0 Recommendation. You can find the specifications for the two XPath versions at the following URLs:</p>
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xpath20/">http://www.w3.org/TR/xpath20/</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xpath">http://www.w3.org/TR/xpath</a></code></p>
</li>
</ul>
<p>Oracle XDK XSLT processor implements both the XSLT and XPath 1.0 standards as well as the current working drafts of the XSLT and XPath 2.0 standards. The XDK XSLT processor supports the XPath 2.0 functions and operators. You can find the specification at the following URL:</p>
<pre dir="ltr">
<a href="http://www.w3.org/TR/xpath-functions/">http://www.w3.org/TR/xpath-functions/</a>
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_standards.htm#BABDIIJG">Chapter 31, "XDK Standards"</a> for a summary of the standards supported by the XDK</div>
</div>
<!-- class="sect2" -->
<a id="CHDDAGGC"></a>
<div id="ADXDK19221" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XML Transformation with XSLT 1.0 and 2.0</h3>
<p>In Oracle Database 10g, the XDK provides several useful features not included in XSLT 1.0. To use XSLT 2.0, set the <code dir="ltr">version</code> attribute in your stylesheet as follows:</p>
<pre dir="ltr">
&lt;? xml-stylesheet version="2.0" ... ?&gt;
</pre>
<p>Some of the most useful XSLT 2.0 features are the following:</p>
<ul>
<li>
<p>User-defined functions</p>
<p>You can use the <code dir="ltr">&lt;xsl:function&gt;</code> declaration to define functions. This element must have one <code dir="ltr">name</code> attribute to define the function name. The value of the <code dir="ltr">name</code> attribute is a <code dir="ltr">QName</code>. The content of the <code dir="ltr">&lt;xsl:function&gt;</code> element is zero or more <code dir="ltr">xsl:param</code> elements that specify the formal arguments of the function, followed by a sequence constructor that defines the value returned by the function.</p>
<p>Note that <code dir="ltr">QName</code> can have a null namespace, but user-defined functions must have a non-null namespace. That is, if <code dir="ltr">abc</code> is defined as a namespace, then <code dir="ltr">add</code> is not a legal user-defined function, but <code dir="ltr">abc:add</code> is.</p>
</li>
<li>
<p>Grouping</p>
<p>You can use the <code dir="ltr">&lt;xsl:for-each-group&gt;</code> element, <code dir="ltr">current-group()</code> function, and <code dir="ltr">current-grouping-key()</code> function to group items.</p>
</li>
<li>
<p>Multiple result documents</p>
<p>You can use the <code dir="ltr">&lt;xsl:result-document&gt;</code> element to create a result tree. The content of the <code dir="ltr">&lt;xsl:result-document&gt;</code> element is a sequence constructor for the children of the document node of the tree.</p>
<p>For example, this element enables you to accept an XML document as input and break it into separate documents. You can take an XML document that describes a list of books and generate an XHTML document for each book. You can then validate each output document.</p>
</li>
<li>
<p>Temporary trees</p>
<p>Instead of representing the intermediate XSL transformation results and XSL variables as strings, as in XSLT 1.0, you can store them as a set of document nodes. The document nodes, which you can construct with the <code dir="ltr">&lt;xsl:variable&gt;</code>, <code dir="ltr">&lt;xsl:param&gt;</code>, and <code dir="ltr">&lt;xsl:with-param&gt;</code> elements, are called temporary trees.</p>
</li>
<li>
<p>Character mapping</p>
<p>In XSLT 1.0, you had to use the <code dir="ltr">disable-output-escaping</code> attribute of the <code dir="ltr">&lt;xsl:text&gt;</code> and <code dir="ltr">&lt;xsl:value-of&gt;</code> elements to specify character escaping. In XSLT 2.0, you can declare mapping characters with an <code dir="ltr">&lt;xsl:character-map&gt;</code> element as a top level stylesheet element. You can use this element to generate files with reserved or invalid XML characters in the XSLT outputs, such as <code dir="ltr">&lt;</code>, <code dir="ltr">&gt;</code>, and <code dir="ltr">&amp;</code>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code dir="ltr"><a href="http://www.w3.org/TR/xslt20">http://www.w3.org/TR/xslt20</a></code> for explanation and examples of XSLT 2.0 features</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1013345"></a>
<div id="ADXDK19222" class="sect1">
<h2 class="sect1"><a id="sthref176"></a>Using the XSLT Processor for Java: Overview</h2>
<p>The Oracle XDK XSLT processor is a software program that transforms an XML document into another text-based format. For example, the processor can transform XML into XML, HTML, XHTML, or text. You can invoke the processor programmatically by using the APIs or run it from the command line. The XSLT processor can perform the following tasks:</p>
<ul>
<li>
<p>Reads one or more XSLT stylesheets. The processor can apply multiple stylesheets to a single XML input document and generate different results.</p>
</li>
<li>
<p>Reads one or more input XML documents. The processor can use a single stylesheet to transform multiple XML input documents.</p>
</li>
<li>
<p>Builds output documents by applying the rules in the stylesheet to the input XML documents. The output is a DOM tree, output stream, or series of SAX events.</p>
</li>
</ul>
<p>Whereas XSLT is a function-based language that generally requires a DOM of the input document and stylesheet to perform the transformation, the Java XDK implementation of the XSLT processor can use SAX to create a stylesheet object to perform transformations with higher efficiency and fewer resources. You can reuse this stylesheet object to transform multiple documents without reparsing the stylesheet.</p>
<div id="ADXDK19223" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref177"></a>
<h3 class="sect2">Using the XSLT Processor: Basic Process</h3>
<p><a href="#i1012632">Figure 6-1</a> depicts the basic design of the XSLT processor for Java.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JAXML" href="../e10769/toc.htm"><span class="italic">Oracle Database XML Java API Reference</span></a> to learn about the <code dir="ltr">XMLParser</code> and <code dir="ltr">XSDBuilder</code> classes</div>
<div id="ADXDK19224" class="figure">
<p class="titleinfigure"><a id="i1012632"></a>Figure 6-1 Using the XSLT Processor for Java</p>
<img width="405" height="462" src="img/adxdk111.gif" alt="Description of Figure 6-1 follows" /><br />
<a id="sthref178" href="img_text/adxdk111.htm">Description of "Figure 6-1 Using the XSLT Processor for Java"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i1012603"></a>
<div id="ADXDK19225" class="sect2">
<h3 class="sect2">Running the XSLT Processor Demo Programs<a id="sthref179"></a></h3>
<p>Demo programs for the XSLT processor for Java are included in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/xslt</code>. <a href="#CHDCGIAF">Table 6-1</a> describes the XML files and programs that you can use to test the XSLT processor.</p>
<div id="ADXDK19226" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref180"></a><a id="CHDCGIAF"></a>Table 6-1 XSLT Processor Sample Files</p>
<table class="cellalignment1211" title="XSLT Processor Sample Files " summary="File and Description are the Columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t5">File</th>
<th class="cellalignment1212" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">match.xml</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t5 r1c2-t5">
<p>A sample XML document that you can use to test ID selection and pattern matching. Its associated stylesheet is <code dir="ltr">match.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">match.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t5 r1c2-t5">
<p>A sample stylesheet for use with <code dir="ltr">match.xml</code>. You can use it to test simple identity transformations.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">math.xml</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t5 r1c2-t5">
<p>A sample XML data document that you can use to perform simple arithmetic. Its associated stylesheet is <code dir="ltr">math.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">math.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t5 r1c2-t5">
<p>A sample stylesheet for use with <code dir="ltr">math.xml</code>. The stylesheet outputs an HTML page with the results of arithmetic operations performed on element values in <code dir="ltr">math.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">number.xml</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t5 r1c2-t5">
<p>A sample XML data document that you can use to test for source tree numbering. The document describes the structure of a book.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">number.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t5 r1c2-t5">
<p>A sample stylesheet for us with <code dir="ltr">number.xml</code>. The stylesheet outputs an HTML page that calculates section numbers for the sections in the book described by <code dir="ltr">number.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">position.xml</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t5 r1c2-t5">
<p>A sample XML data document that you can use to test for <code dir="ltr">position()=X</code> in complex patterns. Its associated stylesheet is <code dir="ltr">position.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t5" headers="r1c1-t5">
<p><code dir="ltr">position.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t5 r1c2-t5">
<p>A sample stylesheet for use with <code dir="ltr">position.xml</code>. The stylesheet outputs an HTML page with the results of complex pattern matching.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t5" headers="r1c1-t5">
<p><code dir="ltr">reverse.xml</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t5 r1c2-t5">
<p>A sample XML data document that you can use with <code dir="ltr">reverse.xsl</code> to traverse backward through a tree.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t5" headers="r1c1-t5">
<p><code dir="ltr">reverse.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t5 r1c2-t5">
<p>A sample stylesheet for us with <code dir="ltr">reverse.xml</code>. The stylesheet output the item numbers in <code dir="ltr">reverse.xml</code> in reverse order.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t5" headers="r1c1-t5">
<p><code dir="ltr">string.xml</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t5 r1c2-t5">
<p>A sample XML data document that you can use to test perform various string test and manipulations. Its associated stylesheet is <code dir="ltr">string.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t5" headers="r1c1-t5">
<p><code dir="ltr">string.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t5 r1c2-t5">
<p>A sample stylesheet for us with <code dir="ltr">string.xml</code>. The stylesheet outputs an XML document that displays the results of the string manipulations.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t5" headers="r1c1-t5">
<p><code dir="ltr">style.txt</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t5 r1c2-t5">
<p>A stylesheet that provides the framework for an HTML page. The stylesheet is included by <code dir="ltr">number.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t5" headers="r1c1-t5">
<p><code dir="ltr">variable.xml</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t5 r1c2-t5">
<p>A sample XML data document that you can use to test the use of XSL variables. The document describes the structure of a book. Its associated stylesheet is <code dir="ltr">variable.xsl</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t5" headers="r1c1-t5">
<p><code dir="ltr">variable.xsl</code></p>
</td>
<td class="cellalignment1213" headers="r16c1-t5 r1c2-t5">
<p>A stylesheet for use with <code dir="ltr">variable.xml</code>. The stylesheet makes extensive use of XSL variables.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XSLSample.java</code></p>
</td>
<td class="cellalignment1213" headers="r17c1-t5 r1c2-t5">
<p>A sample application that offers a simple example of how to use the XSL processing capabilities of the Oracle XSLT processor. The program transforms an input XML document by using an input stylesheet. This program builds the result of XSL transformations as a <code dir="ltr">DocumentFragment</code> and does not show <code dir="ltr">xsl:output</code> features.</p>
<p>Run this program with any XSLT stylesheet in the directory as a first argument and its associated <code dir="ltr">*.xml</code> XML document as a second argument. For example, run the program with <code dir="ltr">variable.xsl</code> and <code dir="ltr">variable.xml</code> or <code dir="ltr">string.xsl</code> and <code dir="ltr">string.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t5" headers="r1c1-t5">
<p><code dir="ltr">XSLSample2.java</code></p>
</td>
<td class="cellalignment1213" headers="r18c1-t5 r1c2-t5">
<p>A sample application that offers a simple example of how to use the XSL processing capabilities of the Oracle XSLT processor. The program transforms an input XML document by using an input stylesheet. This program outputs the result to a stream and supports <code dir="ltr">xsl:output</code> features. Like <code dir="ltr">XSLSample.java</code>, you can run it against any pair of XML data documents and stylesheets in the directory.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p>Documentation for how to compile and run the sample programs is located in the <code dir="ltr">README</code>. The basic steps are as follows:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/xslt</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\parser\xslt</code> directory (Windows).</p>
</li>
<li>
<p>Make sure that your environment variables are set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>.</p>
</li>
<li>
<p>Run <code dir="ltr">make</code> (UNIX) or <code dir="ltr">Make.bat</code> (Windows) at the command line. The make file compiles the source code and then runs the <code dir="ltr">XSLSample</code> and <code dir="ltr">XSLSample2</code> programs for each <code dir="ltr">*.xml</code> file and its associated <code dir="ltr">*.xsl</code> stylesheet. The program writes its output for each transformation to <code dir="ltr">*.out</code>.</p>
</li>
<li>
<p>You can view the <code dir="ltr">*.out</code> files to see the output for the XML transformations. You can also run the programs on the command line as follows, where <code dir="ltr"><span class="codeinlineitalic">name</span></code> is replaced by <code dir="ltr">match</code>, <code dir="ltr">math</code>, and so forth:</p>
<pre dir="ltr">
java XSLSample <span class="italic">name</span>.xsl <span class="italic">name</span>.xml
java XSLSample2 <span class="italic">name</span>.xsl <span class="italic">name</span>.xml
</pre>
<p>For example, run the <code dir="ltr">match.xml</code> demos as follows:</p>
<pre dir="ltr">
java XSLSample match.xsl match.xml
java XSLSample2 match.xsl match.xml
</pre></li>
</ol>
</div>
<!-- class="sect2" -->
<a id="i1025356"></a>
<div id="ADXDK19227" class="sect2">
<h3 class="sect2">Using the XSLT Processor Command-Line Utility<a id="sthref181"></a><a id="sthref182"></a></h3>
<p>The XDK includes <code dir="ltr">oraxsl</code>, which is a command-line Java interface that can apply a stylesheet to multiple XML documents. The <code dir="ltr">$ORACLE_HOME/bin/oraxsl</code> and <code dir="ltr">%ORACLE_HOME%\bin\oraxsl.bat</code> shell scripts execute the <code dir="ltr">oracle.xml.jaxb.oraxsl</code> class. To use <code dir="ltr">oraxsl</code> ensure that your <code dir="ltr">CLASSPATH</code> is set as described in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>.</p>
<p>Use the following syntax on the command line to invoke <code dir="ltr">oraxsl</code>:</p>
<pre dir="ltr">
oraxsl <span class="italic">options source stylesheet result</span>
</pre>
<p>The <code dir="ltr">oraxsl</code> utility expects a stylesheet, an XML file to transform, and an optional result file. If you do not specify a result file, then the utility sends the transformed document to standard output. If multiple XML documents need to be transformed by a stylesheet, then use the <code dir="ltr">-l</code> or <code dir="ltr">-d</code> options in conjunction with the <code dir="ltr">-s</code> and <code dir="ltr">-r</code> options. These and other options are described in <a href="#BABIADIB">Table 6-2</a>.</p>
<div id="ADXDK19228" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref183"></a><a id="BABIADIB"></a>Table 6-2 Command-Line Options for oraxsl</p>
<table class="cellalignment1211" title="Command-Line Options for oraxsl" summary="Option and Purpose are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t6">Option</th>
<th class="cellalignment1212" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-w</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c2-t6">
<p>Shows warnings. By default, warnings are turned off.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-e</code> <code dir="ltr"><span class="codeinlineitalic">error_log</span></code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c2-t6">
<p>Specifies file into which the program writes errors and warnings.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-l</code> <code dir="ltr"><span class="codeinlineitalic">xml_file_list</span></code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c2-t6">
<p>Lists files to be processed.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-d</code> <code dir="ltr"><span class="codeinlineitalic">directory</span></code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t6 r1c2-t6">
<p>Specifies the directory that contains the files to transform. The default behavior is to process all files in the directory. If only a subset of the files in that directory, for example, one file, need to be processed, then change this behavior by setting <code dir="ltr">-l</code> and specifying the files that need to be processed. You can also change the behavior by using the <code dir="ltr">-x</code> or <code dir="ltr">-i</code> option to select files based on their extension.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-x</code> <code dir="ltr"><span class="codeinlineitalic">source_extension</span></code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t6 r1c2-t6">
<p>Specifies extensions for the files that should be excluded. Use this option in conjunction with <code dir="ltr">-d</code>. The program does not select any files with the specified extension.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-i</code> <code dir="ltr"><span class="codeinlineitalic">source_extension</span></code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t6 r1c2-t6">
<p>Specifies extensions for the files that should be included. Use this option in conjunction with <code dir="ltr">-d</code>. The program selects only files with the specified extension.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-s</code> <code dir="ltr"><span class="codeinlineitalic">stylesheet</span></code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t6 r1c2-t6">
<p>Specifies the stylesheet. If you set <code dir="ltr">-d</code> or <code dir="ltr">-l</code>, then set <code dir="ltr">-s</code> to indicate the stylesheet to be used. You must specify the complete path.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-r</code> <code dir="ltr"><span class="codeinlineitalic">result_extension</span></code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t6 r1c2-t6">
<p>Specifies the extension to use for results. If you set <code dir="ltr">-d</code> or <code dir="ltr">-l</code>, then set <code dir="ltr">-r</code> to specify the extension to be used for the results of the transformation. So, if you specify the extension <code dir="ltr">out</code>, the program transformed an input document <code dir="ltr">doc</code> to <code dir="ltr">doc.out</code>. By default, the program places the results in the current directory. You can change this behavior by using the <code dir="ltr">-o</code> option, which allows you to specify a directory for the results.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-o</code> <code dir="ltr"><span class="codeinlineitalic">result_directory</span></code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t6 r1c2-t6">
<p>Specifies the directory in which to place results. You must set this option in conjunction with the <code dir="ltr">-r</code> option.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-p</code> <code dir="ltr"><span class="codeinlineitalic">param_list</span></code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t6 r1c2-t6">
<p>Lists parameters.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-t</code> <code dir="ltr"><span class="codeinlineitalic">num_of_threads</span></code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t6 r1c2-t6">
<p>Specifies the number of threads to use for processing. Using multiple threads can provide performance improvements when processing multiple documents.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-v</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t6 r1c2-t6">
<p>Generates verbose output. The program prints some debugging information and can help in tracing any problems that are encountered during processing.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-debug</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t6 r1c2-t6">
<p>Generates debugging output. By default, debug mode is disabled. Note that a GUI version of the XSLT debugger is available in Oracle JDeveloper.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<div id="ADXDK19229" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref184"></a>
<h4 class="sect3">Using the XSLT Processor Command-Line Utility: Example</h4>
<p>You can test <code dir="ltr">oraxsl</code> on the various XML files and stylesheets in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/xslt</code>. <a href="#CHDGHIJH">Example 6-1</a> displays the contents of <code dir="ltr">math.xml</code>.</p>
<div id="ADXDK19230" class="example">
<p class="titleinexample"><a id="CHDGHIJH"></a>Example 6-1 math.xml</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;doc&gt;
  &lt;n1&gt;5&lt;/n1&gt;
  &lt;n2&gt;2&lt;/n2&gt;
  &lt;div&gt;-5&lt;/div&gt;
  &lt;mod&gt;2&lt;/mod&gt;
&lt;/doc&gt;
</pre></div>
<!-- class="example" -->
<p>The XSLT stylesheet named <code dir="ltr">math.xsl</code> is shown in <a href="#CHDFIAIH">Example 6-2</a>.</p>
<div id="ADXDK19231" class="example">
<p class="titleinexample"><a id="CHDFIAIH"></a>Example 6-2 math.xsl</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:template match="doc"&gt;
    &lt;HTML&gt;
      &lt;H1&gt;Test for mod.&lt;/H1&gt;
      &lt;HR/&gt;
      &lt;P&gt;Should say "1": &lt;xsl:value-of select="5 mod 2"/&gt;&lt;/P&gt;
      &lt;P&gt;Should say "1": &lt;xsl:value-of select="n1 mod n2"/&gt;&lt;/P&gt;
      &lt;P&gt;Should say "-1": &lt;xsl:value-of select="div mod mod"/&gt;&lt;/P&gt;
      &lt;P&gt;&lt;xsl:value-of select="div or ((mod)) | or"/&gt;&lt;/P&gt;
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet
</pre></div>
<!-- class="example" -->
<p>You can run the <code dir="ltr">oraxsl</code> utility on these files to produce HTML output as shown in the following example:</p>
<pre dir="ltr">
oraxsl math.xml math.xsl math.htm
</pre>
<p>The output file <code dir="ltr">math.htm</code> is shown in <a href="#CHDICDGA">Example 6-3</a>.</p>
<div id="ADXDK19232" class="example">
<p class="titleinexample"><a id="CHDICDGA"></a>Example 6-3 math.htm</p>
<pre dir="ltr">
&lt;HTML&gt;
   &lt;H1&gt;Test for mod.&lt;/H1&gt;
   &lt;HR&gt;
   &lt;P&gt;Should say "1": 1&lt;/P&gt;
   &lt;P&gt;Should say "1": 1&lt;/P&gt;
   &lt;P&gt;Should say "-1": -1&lt;/P&gt;
   &lt;P&gt;true&lt;/P&gt;
&lt;/HTML&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEHEIJ"></a>
<div id="ADXDK19233" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Transforming XML</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1028867">Performing Basic XSL Transformation</a></p>
</li>
<li>
<p><a href="#CHDJAFCE">Obtaining DOM Results from an XSL Transformation</a></p>
</li>
</ul>
<a id="i1028867"></a>
<div id="ADXDK19234" class="sect2">
<h3 class="sect2">Performing Basic XSL Transformation</h3>
<p>As explained in <a href="#i1013345">"Using the XSLT Processor for Java: Overview"</a>, the fundamental classes used by the XSLT processor are <code dir="ltr">DOMParser</code> and <code dir="ltr">XSLProcessor</code>. The <code dir="ltr">XSL2Sample.java</code> demo program provides a good illustration of how to use these classes to transform an XML document with an XSLT stylesheet.</p>
<p>Use the following basic steps to write Java programs that use the XSLT processor:</p>
<ol>
<li>
<p>Create a DOM parser object that you can use to parse the XML data documents and XSLT stylesheets. The following code fragment from <code dir="ltr">XSL2Sample.java</code> illustrates how to instantiate a parser:</p>
<pre dir="ltr">
XMLDocument xml, xsldoc, out;URL xslURL;URL xmlURL;
// ... 
parser = new DOMParser();parser.setPreserveWhitespace(true);
</pre>
<p>Note that by default, the parser does not preserve whitespace unless a DTD is used. It is important to preserve whitespace because it enables XSLT whitespace rules to determine how whitespace is handled.</p>
</li>
<li>
<p>Parse the XSLT stylesheet with the <code dir="ltr">DOMParser.parse()</code> method. The following code fragment from <code dir="ltr">XSL2Sample.java</code> illustrates how to perform the parse:</p>
<pre dir="ltr">
xslURL = DemoUtil.createURL(args[0]);
parser.parse(xslURL);
xsldoc = parser.getDocument();
</pre></li>
<li>
<p>Parse the XML data document with the <code dir="ltr">DOMParser.parse()</code> method. The following code fragment from <code dir="ltr">XSL2Sample.java</code> illustrates how to perform the parse:</p>
<pre dir="ltr">
xmlURL = DemoUtil.createURL(args[1]);
parser.parse(xmlURL);
xml = parser.getDocument();
</pre></li>
<li>
<p>Create a new XSLT stylesheet object. You can pass objects of the following classes to the <code dir="ltr">XSLProcessor.newXSLStylesheet()</code> method:</p>
<ul>
<li>
<p><code dir="ltr">java.io.Reader</code></p>
</li>
<li>
<p><code dir="ltr">java.io.InputStream</code></p>
</li>
<li>
<p><code dir="ltr">XMLDocument</code></p>
</li>
<li>
<p><code dir="ltr">java.net.URL</code></p>
</li>
</ul>
<p>For example, <code dir="ltr">XSL2Sample.java</code> illustrates how to create a stylesheet object from an <code dir="ltr">XMLDocument</code> object:</p>
<pre dir="ltr">
XSLProcessor processor = new XSLProcessor();
processor.setBaseURL(xslURL);
XSLStylesheet xsl = processor.newXSLStylesheet(xsldoc);
</pre></li>
<li>
<p>Set the XSLT processor to display any warnings. For example, <code dir="ltr">XSL2Sample.java</code> calls the <code dir="ltr">showWarnings()</code> and <code dir="ltr">setErrorStream()</code> methods as follows:</p>
<pre dir="ltr">
processor.showWarnings(true);
processor.setErrorStream(System.err);
</pre></li>
<li>
<p>Use the <code dir="ltr">XSLProcessor.processXSL()</code> method to apply the stylesheet to the input XML data document. <a href="#CHDEBBCE">Table 6-3</a> lists some of the other available <code dir="ltr">XSLProcessor</code> methods.</p>
<div id="ADXDK19235" class="tblformal">
<p class="titleintable"><a id="sthref185"></a><a id="CHDEBBCE"></a>Table 6-3 XSLProcessor Methods</p>
<table class="cellalignment1214" title="XSLProcessor Methods" summary="Describes XSLProcessor methods." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Method</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<p><code dir="ltr">removeParam()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>Removes parameters.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<p><code dir="ltr">resetParams()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>Resets all parameters.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setParam()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>Sets parameters for the transformation.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setBaseUrl()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>Sets a base URL for any relative references in the stylesheet.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setEntityResolver()</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>Sets an entity resolver for any relative references in the stylesheet.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t7" headers="r1c1-t7">
<p><code dir="ltr">setLocale()</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t7 r1c2-t7">
<p>Sets a locale for error reporting.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The following code fragment from <code dir="ltr">XSL2Sample.java</code> shows how to apply the stylesheet to the XML document:</p>
<pre dir="ltr">
processor.processXSL(xsl, xml, System.out);
</pre></li>
<li>
<p>Process the transformed output. You can transform the results by creating an XML document object, writing to an output stream, or reporting SAX events.</p>
<p>The following code fragment from <code dir="ltr">XSL2Sample.java</code> shows how to print the results:</p>
<pre dir="ltr">
processor.processXSL(xsl, xml, System.out);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/TR/xslt">http://www.w3.org/TR/xslt</a></code></p>
</li>
<li>
<p><code dir="ltr"><a href="http://www.w3.org/style/XSL">http://www.w3.org/style/XSL</a></code></p>
</li>
<li>
<p><a href="adx_j_parser.htm#i1008366">Chapter 4, "XML Parsing for Java"</a></p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="CHDJAFCE"></a>
<div id="ADXDK19236" class="sect2">
<h3 class="sect2">Obtaining DOM Results from an XSL Transformation</h3>
<p>The <code dir="ltr">XSLSample.java</code> demo program illustrates how to generate an <code dir="ltr">oracle.xml.parser.v2.XMLDocumentFragment</code> object as the result of an XSL transformation. An <code dir="ltr">XMLDocumentFragment</code> is a "lightweight" <code dir="ltr">Document</code> object that extracts a portion of an XML document tree. The <code dir="ltr">XMLDocumentFragment</code> class implements the <code dir="ltr">org.w3c.dom.DocumentFragment</code> interface.</p>
<p>The <code dir="ltr">XSL2Sample.java</code> program illustrates how to generate a <code dir="ltr">DocumentFragment</code> object. The basic steps for transforming XML are the same as those described in <a href="#i1028867">"Performing Basic XSL Transformation"</a>. The only difference is in the arguments passed to the <code dir="ltr">XSLProcessor.processXSL()</code> method. The following code fragment from <code dir="ltr">XSL2Sample.java</code> shows how to create the DOM fragment and then print it to standard output:</p>
<pre dir="ltr">
XMLDocumentFragment result = processor.processXSL(xsl, xml);
result.print(System.out);
</pre>
<p><a href="#CHDGAEIF">Table 6-4</a> lists some of the <code dir="ltr">XMLDocumentFragment</code> methods that you can use to manipulate the object.</p>
<div id="ADXDK19237" class="tblformal">
<p class="titleintable"><a id="sthref186"></a><a id="CHDGAEIF"></a>Table 6-4 XMLDocumentFragment Methods</p>
<table class="cellalignment1214" title="XMLDocumentFragment Methods" summary="Describes XSLProcessor methods." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t9">Method</th>
<th class="cellalignment1212" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getAttributes()</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t9 r1c2-t9">
<p>Gets a <code dir="ltr">NamedNodeMap</code> containing the attributes of this node (if it is an <code dir="ltr">Element</code>) or null otherwise</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getLocalName()</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t9 r1c2-t9">
<p>Gets the local name for this element</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getNamespaceURI()</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t9 r1c2-t9">
<p>Gets the namespace URI of this element</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getNextSibling()</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t9 r1c2-t9">
<p>Gets the node immediately following the current node</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getNodeName()</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t9 r1c2-t9">
<p>Gets the name of the node</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getNodeType()</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t9 r1c2-t9">
<p>Gets a code that represents the type of the underlying object</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getParentNode()</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t9 r1c2-t9">
<p>Gets the parent of the current node</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t9" headers="r1c1-t9">
<p><code dir="ltr">getPreviousSibling()</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t9 r1c2-t9">
<p>Gets the node immediately preceding the current node</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t9" headers="r1c1-t9">
<p><code dir="ltr">reportSAXEvents()</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t9 r1c2-t9">
<p>Reports SAX events from a DOM Tree</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1023310"></a>
<div id="ADXDK19238" class="sect1">
<h2 class="sect1">Programming with Oracle XSLT Extensions</h2>
<p>This section contains these topics:</p>
<ul>
<li>
<p><a href="#CHDEEIGD">Overview of Oracle XSLT Extensions</a></p>
</li>
<li>
<p><a href="#i1028383">Specifying Namespaces for XSLT Extension Functions</a></p>
</li>
<li>
<p><a href="#i1028388">Using Static and Non-Static Java Methods in XSLT</a></p>
</li>
<li>
<p><a href="#i1028393">Using Constructor Extension Functions</a></p>
</li>
<li>
<p><a href="#i1028398">Using Return Value Extension Functions</a></p>
</li>
</ul>
<a id="CHDEEIGD"></a>
<div id="ADXDK19239" class="sect2">
<h3 class="sect2">Overview of Oracle XSLT Extensions</h3>
<p>The XSLT 1.0 standard defines two kinds of extensions: extension elements and extension functions. The XDK provides extension functions for XSLT processing that enable users of the XSLT processor to call any Java method from XSL expressions. Note the following guidelines when using Oracle XSLT extensions:</p>
<ul>
<li>
<p>When you define an XSLT extension in a given programming language, you can only use the XSLT stylesheet with XSLT processors that can invoke this extension. Thus, only the Java version of the processor can invoke extension functions that are defined in Java.</p>
</li>
<li>
<p>Use XSLT extensions only if the built-in XSL functions cannot solve a given problem.</p>
</li>
<li>
<p>As explained in the following section, the namespace of the extension class must start with the proper URL.</p>
</li>
</ul>
<p>The following Oracle extension functions are particularly useful:</p>
<ul>
<li>
<p><code dir="ltr">&lt;ora:output&gt;</code>, you can use <code dir="ltr">&lt;ora:output&gt;</code> as a top-level element or in an XSL template. If used as a top-level element, it is similar to the <code dir="ltr">&lt;xsl:output&gt;</code> extension function, except that it has an additional <code dir="ltr">name</code> attribute. When used as a template, it has the additional attributes <code dir="ltr">use</code> and <code dir="ltr">href</code>. This function is useful for creating multiple outputs from one XSL transformation.</p>
</li>
<li>
<p><code dir="ltr">&lt;ora:node-set&gt;</code>, which converts a result tree fragment into a node-set. This function is useful when you want to refer the existing text or intermediate text results in XSL for further transformation.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1028383"></a>
<div id="ADXDK19240" class="sect2">
<h3 class="sect2">Specifying Namespaces for XSLT Extension Functions</h3>
<p>The Oracle Java extension functions belong to the namespace that corresponds to the following URI:</p>
<pre dir="ltr">
http://www.oracle.com/XSL/Transform/java/
</pre>
<p>An extension function that belongs to the following namespace refers to methods in the Java <code dir="ltr"><span class="codeinlineitalic">classname</span></code>, so that you can construct URIs in the following format:</p>
<pre dir="ltr">
http://www.oracle.com/XSL/Transform/java/<span class=/"/&quot;italic&quot;">classname</span>
</pre>
<p>For example, you can use the following namespace to call <code dir="ltr">java.lang.String</code> methods from XSL expressions:</p>
<pre dir="ltr">
http://www.oracle.com/XSL/Transform/java/java.lang.String
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
When assigning the <code dir="ltr">xsl</code> prefix to a namespace, the correct URI is <code dir="ltr">xmlns:xsl="http://www.w3.org/1999/XSL/Transform"</code>. Any other URI fails to give correct output.</div>
</div>
<!-- class="sect2" -->
<a id="i1028388"></a>
<div id="ADXDK19241" class="sect2">
<h3 class="sect2">Using Static and Non-Static Java Methods in XSLT</h3>
<p>If the Java method is a non-static method of the class, then the first parameter is used as the instance on which the method is invoked, and the rest of the parameters are passed to the method. If the extension function is a static method, however, then all the parameters of the extension function are passed as parameters to the static function. <a href="#CHDJFECJ">Example 6-4</a> shows how to use the <code dir="ltr">java.lang.Math.ceil()</code> method in an XSLT stylesheet.</p>
<div id="ADXDK19242" class="example">
<p class="titleinexample"><a id="CHDJFECJ"></a>Example 6-4 Using a Static Function in an XSLT Stylesheet</p>
<pre dir="ltr">
&lt;xsl:stylesheet version="1.0" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:math="http://www.oracle.com/XSL/Transform/java/java.lang.Math"&gt; 
  &lt;xsl:template match="/"&gt; 
    &lt;xsl:value-of select="math:ceil('12.34')"/&gt; 
  &lt;/xsl:template&gt; 
&lt;/xsl:stylesheet&gt; 
</pre></div>
<!-- class="example" -->
<p>For example, you can create <a href="#CHDJFECJ">Example 6-4</a> as stylesheet <code dir="ltr">ceil.xsl</code> and then apply it to any well-formed XML document. For example, run the <code dir="ltr">oraxsl</code> utility as follows:</p>
<pre dir="ltr">
oraxsl ceil.xsl ceil.xsl ceil.out
</pre>
<p>The output document <code dir="ltr">ceil.out</code> has the following content:</p>
<pre dir="ltr">
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
13
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The XSL class loader only knows about statically added JARs and paths in the <code dir="ltr">CLASSPATH</code> as well as those specified by <code dir="ltr">wrapper.classpath</code>. Files added dynamically are not visible to XSLT processor.</div>
</div>
<!-- class="sect2" -->
<a id="i1028393"></a>
<div id="ADXDK19243" class="sect2">
<h3 class="sect2"><a id="sthref187"></a>Using Constructor Extension Functions</h3>
<p>The extension function <code dir="ltr">new</code> creates a new instance of the class and acts as the constructor. <a href="#CHDIAJAI">Example 6-5</a> creates a new <code dir="ltr">String</code> object with the value "Hello World," stores it in the XSL variable <code dir="ltr">str1</code>, and then outputs it in uppercase.</p>
<div id="ADXDK19244" class="example">
<p class="titleinexample"><a id="CHDIAJAI"></a>Example 6-5 Using a Constructor in an XSLT Stylesheet</p>
<pre dir="ltr">
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:jstring="http://www.oracle.com/XSL/Transform/java/java.lang.String"&gt; 
  &lt;xsl:template match="/"&gt; 
    &lt;!-- creates a new java.lang.String and stores it in the variable str1 --&gt; 
    &lt;xsl:variable name="str1" select="jstring:new('HeLlO wOrLd')"/&gt; 
    &lt;xsl:value-of select="jstring:toUpperCase($str1)"/&gt; 
  &lt;/xsl:template&gt; 
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" -->
<p>For example, you can create this stylesheet as <code dir="ltr">hello.xsl</code> and apply it to any well-formed XML document. For example, run the <code dir="ltr">oraxsl</code> utility as follows:</p>
<pre dir="ltr">
oraxsl hello.xsl hello.xsl hello.out
</pre>
<p>The output document <code dir="ltr">hello.out</code> has the following content:</p>
<pre dir="ltr">
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
HELLO WORLD
</pre></div>
<!-- class="sect2" -->
<a id="i1028398"></a>
<div id="ADXDK19245" class="sect2">
<h3 class="sect2"><a id="sthref188"></a>Using Return Value Extension Functions</h3>
<p>The result of an extension function can be of any type, including the five types defined in XSL and the additional simple XML Schema data types defined in XSLT 2.0:</p>
<ul>
<li>
<p><code dir="ltr">NodeSet</code></p>
</li>
<li>
<p><code dir="ltr">Boolean</code></p>
</li>
<li>
<p><code dir="ltr">String</code></p>
</li>
<li>
<p><code dir="ltr">Number</code></p>
</li>
<li>
<p><code dir="ltr">ResultTree</code></p>
</li>
</ul>
<p>You can store these data types in variables or pass to other extension functions. If the result is of one of the five types defined in XSL, then the result can be returned as the result of an XSL expression.</p>
<p>The XSLT Processor supports overloading based on the number of parameters and type. The processor performs implicit type conversion between the five XSL types as defined in XSL. It performs type conversion implicitly among the following datatypes, and also from <code dir="ltr">NodeSet</code> to the following datatypes:</p>
<ul>
<li>
<p><code dir="ltr">String</code></p>
</li>
<li>
<p><code dir="ltr">Number</code></p>
</li>
<li>
<p><code dir="ltr">Boolean</code></p>
</li>
<li>
<p><code dir="ltr">ResultTree</code></p>
</li>
</ul>
<p>Overloading based on two types that can be implicitly converted to each other is not permitted. The following overloading results in an error in XSL because <code dir="ltr">String</code> and <code dir="ltr">Number</code> can be implicitly converted to each other:</p>
<ul>
<li>
<p><code dir="ltr">overloadme(int i){}</code></p>
</li>
<li>
<p><code dir="ltr">overloadme(String s){}</code></p>
</li>
</ul>
<p>Mapping between XSL datatypes and Java datatypes is done as follows:</p>
<pre dir="ltr">
String     -&gt;     java.lang.String
Number     -&gt;     int, float, double
Boolean    -&gt;     boolean
NodeSet    -&gt;     NodeList
ResultTree -&gt;     XMLDocumentFragment
</pre>
<p>The stylesheet in <a href="#CHDEGHCG">Example 6-6</a> parses the <code dir="ltr">variable.xml</code> document, which is located in the directory <code dir="ltr">$ORACLE_HOME/xdk/demo/java/parser/xslt</code>, and retrieves the value of the <code dir="ltr">&lt;title&gt;</code> child of the <code dir="ltr">&lt;chapter&gt;</code> element.</p>
<div id="ADXDK19246" class="example">
<p class="titleinexample"><a id="CHDEGHCG"></a>Example 6-6 gettitle.xsl</p>
<pre dir="ltr">
&lt;xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:parser = "http://www.oracle.com/XSL/Transform/java/oracle.xml.parser.v2.DOMParser"
  xmlns:document =
    "http://www.oracle.com/XSL/Transform/java/oracle.xml.parser.v2.XMLDocument"&gt; 

  &lt;xsl:template match ="/"&gt; 
    &lt;!-- Create a new instance of the parser and store it in myparser variable --&gt; 
    &lt;xsl:variable name="myparser" select="parser:new()"/&gt; 

    &lt;!-- Call an instance method of DOMParser. The first parameter is the object.
     The PI is equivalent to $myparser.parse('file:/my_path/variable.xml'). Note
     that you should replace my_path with the absolute path on your system. --&gt; 
    &lt;xsl:value-of select="parser:parse($myparser, 'file:/my_path/variable.xml')"/&gt; 

    &lt;!-- Get the document node of the XML Dom tree --&gt; 
    &lt;xsl:variable name="mydocument" select="parser:getDocument($myparser)"/&gt;

    &lt;!-- Invoke getelementsbytagname on mydocument --&gt; 
    &lt;xsl:for-each select="document:getElementsByTagName($mydocument,'chapter')"&gt;
      The value of the title element is: &lt;xsl:value-of select="docinfo/title" /&gt;
    &lt;/xsl:for-each&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" -->
<p>You can create <a href="#CHDEGHCG">Example 6-6</a> as <code dir="ltr">gettitle.xsl</code> and then run <code dir="ltr">oraxsl</code> as follows:</p>
<pre dir="ltr">
oraxsl gettitle.xsl gettitle.xsl variable.out
</pre>
<p>The output document <code dir="ltr">variable.out</code> has the following content:</p>
<pre dir="ltr">
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
The value of the title element is: Section Tests
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1028600"></a>
<div id="ADXDK19247" class="sect1">
<h2 class="sect1"><a id="sthref189"></a>Tips and Techniques for Transforming XML</h2>
<p>This section lists XSL and XSLT Processor for Java hints, and contains these topics:</p>
<ul>
<li>
<p><a href="#i1028584">Merging XML Documents with XSLT</a></p>
</li>
<li>
<p><a href="#i1028797">Creating an HTML Input Form Based on the Columns in a Table</a></p>
</li>
</ul>
<a id="i1028584"></a>
<div id="ADXDK19248" class="sect2">
<h3 class="sect2">Merging XML Documents with XSLT</h3>
<p><a href="adx_j_parser.htm#CCHEAAGB">"Merging Documents with appendChild()"</a> discusses the DOM technique for merging documents. If the merging operation is simple, then you can also use an XSLT-based approach. Suppose that you want to merge the XML documents in <a href="#CHDGJJHE">Example 6-7</a> and <a href="#CHDIFHEH">Example 6-8</a>.</p>
<div id="ADXDK19249" class="example">
<p class="titleinexample"><a id="CHDGJJHE"></a>Example 6-7 msg_w_num.xml</p>
<pre dir="ltr">
&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;num&gt;01001&lt;/num&gt;
  &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;num&gt;01011&lt;/num&gt;
  &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" -->
<div id="ADXDK19250" class="example">
<p class="titleinexample"><a id="CHDIFHEH"></a>Example 6-8 msg_w_text.xml</p>
<pre dir="ltr">
&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;text&gt;This is a Message&lt;/text&gt;
  &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;text&gt;This is another Message&lt;/text&gt;
  &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#CHDBJIJF">Example 6-9</a> displays a sample stylesheet that merges the two XML documents based on matching the <code dir="ltr">&lt;key/&gt;</code> element values.</p>
<div id="ADXDK19251" class="example">
<p class="titleinexample"><a id="CHDBJIJF"></a>Example 6-9 msgmerge.xsl</p>
<pre dir="ltr">
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output indent="yes"/&gt;
  &lt;!-- store msg_w_text.xml in doc2 variable --&gt;
  &lt;xsl:variable name="doc2" select="document('msg_w_text.xml')"/&gt;
  
  &lt;!-- match each node in input xml document, that is, msg_w_num.xml --&gt;
  &lt;xsl:template match="@*|node()"&gt;
     &lt;!-- copy the current node to the result tree --&gt;
     &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="@*|node()"/&gt;
     &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;!-- match each &lt;msg&gt; element in msg_w_num.xml --&gt;
  &lt;xsl:template match="msg"&gt;
     &lt;xsl:copy&gt;
        &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;!-- insert two spaces so indentation is correct in output document --&gt;
        &lt;xsl:text&gt;  &lt;/xsl:text&gt; 
        &lt;!-- copy &lt;text&gt; node from msg_w_text.xml into result tree --&gt;
        &lt;text&gt;&lt;xsl:value-of 
               select="$doc2/messages/msg[key=current()/key]/text"/&gt;
        &lt;/text&gt;
     &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" -->
<p>Create the XML files in <a href="#CHDGJJHE">Example 6-7</a>, <a href="#CHDIFHEH">Example 6-8</a>, and <a href="#CHDBJIJF">Example 6-9</a> and run the following at the command line:</p>
<pre dir="ltr">
oraxsl msg_w_num.xml msgmerge.xsl msgmerge.xml
</pre>
<p><a href="#CHDCHCDA">Example 6-10</a> shows the output document, which merges the data contained in <code dir="ltr">msg_w_num.xml</code> and <code dir="ltr">msg_w_text.xml</code>.</p>
<div id="ADXDK19252" class="example">
<p class="titleinexample"><a id="CHDCHCDA"></a>Example 6-10 msgmerge.xml</p>
<pre dir="ltr">
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;messages&gt;
  &lt;msg&gt;
    &lt;key&gt;AAA&lt;/key&gt;
    &lt;num&gt;01001&lt;/num&gt;
    &lt;text&gt;This is a Message&lt;/text&gt;
   &lt;/msg&gt;
  &lt;msg&gt;
    &lt;key&gt;BBB&lt;/key&gt;
    &lt;num&gt;01011&lt;/num&gt;
    &lt;text&gt;This is another Message&lt;/text&gt;
   &lt;/msg&gt;
&lt;/messages&gt;
</pre></div>
<!-- class="example" -->
<p>This technique is not as efficient for larger files as an equivalent database join of two tables, but it is useful if you have only XML files to work with.</p>
</div>
<!-- class="sect2" -->
<a id="i1028797"></a>
<div id="ADXDK19253" class="sect2">
<h3 class="sect2">Creating an HTML Input Form Based on the Columns in a Table</h3>
<p>Suppose that you want to generate an HTML form for inputting data that uses column names from a database table. You can achieve this goal by using XSU to obtain an XML document based on the <code dir="ltr">user_tab_columns</code> table and XSLT to transform the XML into an HTML form.</p>
<ol>
<li>
<p>Use XSU to generate an XML document based on the columns in the table. For example, suppose that the table is <code dir="ltr">hr.employees</code>. You can run XSU from the command line as follows:</p>
<pre dir="ltr">
java OracleXML getXML -user "hr/<span class="italic">password</span>"\
 "SELECT column_name FROM user_tab_columns WHERE table_name = 'EMPLOYEES'"
</pre></li>
<li>
<p>Save the XSU output as an XML file called <code dir="ltr">emp_columns.xml</code>. The XML should look like the following, with one <code dir="ltr">&lt;ROW&gt;</code> element corresponding to each column in the table (some <code dir="ltr">&lt;ROW&gt;</code> elements have been removed to conserve space):</p>
<pre dir="ltr">
&lt;?xml version = '1.0'?&gt;&lt;ROWSET&gt;
   &lt;ROW num="1"&gt;
      &lt;COLUMN_NAME&gt;EMPLOYEE_ID&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
   &lt;ROW num="2"&gt;
      &lt;COLUMN_NAME&gt;FIRST_NAME&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
   &lt;!-- rows 3 through 10 --&gt;
   &lt;ROW num="11"&gt;
      &lt;COLUMN_NAME&gt;DEPARTMENT_ID&lt;/COLUMN_NAME&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></li>
<li>
<p>Create a stylesheet to transform the XML into HTML. For example, create the <code dir="ltr">columns.xsl</code> stylesheet as follows:</p>
<pre dir="ltr">
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html"/&gt;
  &lt;xsl:template match="/"&gt;
    &lt;HTML&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="ROW"&gt;
    &lt;xsl:value-of select="COLUMN_NAME"/&gt;
    &lt;xsl:text&gt;&amp;nbsp;&lt;/xsl:text&gt;
    &lt;INPUT NAME="{COLUMN_NAME}"/&gt;
    &lt;BR/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></li>
<li>
<p>Run the <code dir="ltr">oraxsl</code> utility to generate the HTML form. For example:</p>
<pre dir="ltr">
oraxsl emp_columns.xml columns.xsl emp_form.htm
</pre></li>
<li>
<p>Review the output HTML form, which should have the following contents:</p>
<pre dir="ltr">
&lt;HTML&gt;
   EMPLOYEE_ID&amp;nbsp;&lt;INPUT NAME="EMPLOYEE_ID"&gt;&lt;BR&gt;
   FIRST_NAME&amp;nbsp;&lt;INPUT NAME="FIRST_NAME"&gt;&lt;BR&gt;
   LAST_NAME&amp;nbsp;&lt;INPUT NAME="LAST_NAME"&gt;&lt;BR&gt;
   EMAIL&amp;nbsp;&lt;INPUT NAME="EMAIL"&gt;&lt;BR&gt;
   PHONE_NUMBER&amp;nbsp;&lt;INPUT NAME="PHONE_NUMBER"&gt;&lt;BR&gt;
   HIRE_DATE&amp;nbsp;&lt;INPUT NAME="HIRE_DATE"&gt;&lt;BR&gt;
   JOB_ID&amp;nbsp;&lt;INPUT NAME="JOB_ID"&gt;&lt;BR&gt;
   SALARY&amp;nbsp;&lt;INPUT NAME="SALARY"&gt;&lt;BR&gt;
   COMMISSION_PCT&amp;nbsp;&lt;INPUT NAME="COMMISSION_PCT"&gt;&lt;BR&gt;
   MANAGER_ID&amp;nbsp;&lt;INPUT NAME="MANAGER_ID"&gt;&lt;BR&gt;
   DEPARTMENT_ID&amp;nbsp;&lt;INPUT NAME="DEPARTMENT_ID"&gt;&lt;BR&gt;
&lt;/HTML&gt;
</pre></li>
</ol>
<p>&nbsp;</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_xmlbin.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_sproc.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
