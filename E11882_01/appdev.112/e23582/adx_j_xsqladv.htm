<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XSQL Pages Publishing Framework: Advanced Topics</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:38Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_j_xsqlpub.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_pt_c.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/47</span> <!-- End Header -->
<div id="ADXDK090" class="chapter"><a id="BABCIGBB"></a>
<h1 class="chapter"><span class="secnum">15</span> Using the XSQL Pages Publishing Framework: Advanced Topics<a id="sthref416"></a><a id="sthref417"></a></h1>
<p>This chapter discusses the following XSQL pages advanced topics:</p>
<ul>
<li>
<p><a href="#CHEJEACG">Customizing the XSQL Configuration File Name</a></p>
</li>
<li>
<p><a href="#i1024591">Controlling How Stylesheets Are Processed</a></p>
</li>
<li>
<p><a href="#BABFBHFD">Working with Array-Valued Parameters</a></p>
</li>
<li>
<p><a href="#BABHAHIG">Setting Error Parameters on Built-in Actions</a></p>
</li>
<li>
<p><a href="#BABHHJID">Including XMLType Query Results in XSQL Pages</a></p>
</li>
<li>
<p><a href="#i1029251">Handling Posted XML Content</a></p>
</li>
<li>
<p><a href="#i1024792">Producing PDF Output with the FOP Serializer</a></p>
</li>
<li>
<p><a href="#BABBECCD">Performing XSQL Customizations</a></p>
</li>
</ul>
<a id="CHEJEACG"></a>
<div id="ADXDK19642" class="sect1">
<h2 class="sect1">Customizing the XSQL Configuration File Name</h2>
<p>By default, the XSQL pages framework expects the configuration file to be named <code dir="ltr">XSQLConfig.xml</code>. When moving between development, test, and production environments, you can switch between different versions of an XSQL configuration file. To override the name of the configuration file read by the XSQL page processor, set the Java system property <code dir="ltr">xsql.config</code>.</p>
<p>The simplest technique is to specify a Java VM command-line flag such as <code dir="ltr">-Dxsql.config=</code><code dir="ltr"><span class="codeinlineitalic">MyConfigFile.xml</span></code> by defining a servlet initialization parameter named <code dir="ltr">xsql.config</code>. Add an <code dir="ltr">&lt;init-param&gt;</code> element to your <code dir="ltr">web.xml</code> file as part of the <code dir="ltr">&lt;servlet&gt;</code> tag that defines the XSQL Servlet as follows:</p>
<pre dir="ltr">
&lt;servlet&gt;
  &lt;servlet-name&gt;XSQL&lt;/servlet-name&gt;
  &lt;servlet-class&gt;oracle.xml.xsql.XSQLServlet&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;xsql.config&lt;/param-name&gt;
    &lt;param-value&gt;MyConfigFile.xml&lt;/param-value&gt;
    &lt;description&gt;
       Please Use MyConfigFile.xml instead of XSQLConfig.xml
    &lt;/description&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
</pre>
<p>The servlet initialization parameter is only applicable to the servlet-based use of the XSQL engine. When using the <code dir="ltr">XSQLCommandLine</code> or <code dir="ltr">XSQLRequest</code> programmatic interfaces, use the <code dir="ltr">System</code> parameter instead.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The configuration file is always read from the <code dir="ltr">CLASSPATH</code>. For example, if you specify a custom configuration parameter file named <code dir="ltr">MyConfigFile.xml</code>, then the XSQL processor attempts to read the XML file as a resource from the <code dir="ltr">CLASSPATH</code>. In a J2EE-style servlet environment, you must place your <code dir="ltr">MyConfigFile.xml</code> in the <code dir="ltr">.\WEB-INF\classes</code> directory (or some other top-level directory that will be found on the <code dir="ltr">CLASSPATH</code>). If both the servlet initialization parameter and the <code dir="ltr">System</code> parameter are provided, then the servlet initialization parameter value is used.</div>
</div>
<!-- class="sect1" -->
<a id="i1024591"></a>
<div id="ADXDK19643" class="sect1">
<h2 class="sect1">Controlling How Stylesheets Are Processed<a id="sthref418"></a></h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1032383">Overriding Client Stylesheets</a></p>
</li>
<li>
<p><a href="#BABCAJFF">Controlling the Content Type of the Returned Document</a></p>
</li>
<li>
<p><a href="#BABFBJEI">Assigning the Stylesheet Dynamically</a></p>
</li>
<li>
<p><a href="#BABCECEB">Processing XSLT Stylesheets in the Client</a></p>
</li>
<li>
<p><a href="#BABECGCF">Providing Multiple Stylesheets</a></p>
</li>
</ul>
<a id="i1032383"></a>
<div id="ADXDK19644" class="sect2">
<h3 class="sect2">Overriding Client Stylesheets</h3>
<p>If the current XSQL page being requested allows it, then you can supply an XSLT stylesheet URL in the request. This technique enables you to either override the default stylesheet or apply a stylesheet where none is applied by default. The client-initiated stylesheet URL is provided by supplying the <code dir="ltr">xml-stylesheet</code> parameter as part of the request. The valid values for this parameter are the following:</p>
<ul>
<li>
<p>Any relative URL interpreted relative to the XSQL page being processed.</p>
</li>
<li>
<p>Any absolute URL that uses the HTTP protocol scheme, provided it references a trusted host as defined in the XSQL configuration file.</p>
</li>
<li>
<p>The literal value <code dir="ltr">none</code>. Setting <code dir="ltr">xml-stylesheet=none</code> is useful during development to temporarily "short-circuit" the XSLT stylesheet processing to determine what XML datagram your stylesheet is seeing. Use this technique to determine why a stylesheet is not producing expected results.</p>
</li>
</ul>
<p>You can allow client override of stylesheets for an XSQL page in the following ways:</p>
<ul>
<li>
<p>Setting the <code dir="ltr">allow-client-style</code> configuration parameter to <code dir="ltr">no</code> in the XSQL configuration file</p>
</li>
<li>
<p>Explicitly including an <code dir="ltr">allow-client-style="no"</code> attribute on the document element of any XSQL page</p>
</li>
</ul>
<p>If client-override of stylesheets has been globally disabled by default in the XSQL configuration file, any page can still enable client-override explicitly by including an <code dir="ltr">allow-client-style="yes"</code> attribute on the document element of that page.</p>
</div>
<!-- class="sect2" -->
<a id="BABCAJFF"></a>
<div id="ADXDK19645" class="sect2">
<h3 class="sect2">Controlling the Content Type of the Returned Document</h3>
<p><a id="i1024596"></a>Setting the content type of the data that you serve enables the requesting client to correctly interpret the data that you return. If your stylesheet uses an <code dir="ltr">&lt;xsl:output&gt;</code> element, then the XSQL processor infers the media type and encoding of the returned document from the <code dir="ltr">media-type</code> and <code dir="ltr">encoding</code> attributes of <code dir="ltr">&lt;xsl:output&gt;</code>.</p>
<p>The stylesheet in <a href="#BABGFJAC">Example 15-1</a> uses the <code dir="ltr">media-type="application/vnd.ms-excel"</code> attribute on <code dir="ltr">&lt;xsl:output&gt;</code>. This instruction transforms the results of an XSQL page containing a standard query of the <code dir="ltr">hr.employees</code> table into Microsoft Excel format.</p>
<div id="ADXDK19646" class="example">
<p class="titleinexample"><a id="BABGFJAC"></a>Example 15-1 empToExcel.xsl</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="html" media-type="application/vnd.ms-excel"/&gt;
  &lt;xsl:template match="/"&gt;
   &lt;html&gt;
     &lt;table&gt;
       &lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;th&gt;Salary&lt;/th&gt;&lt;/tr&gt;
       &lt;xsl:for-each select="ROWSET/ROW"&gt;
         &lt;tr&gt;
           &lt;td&gt;&lt;xsl:value-of select="EMPLOYEE_ID"/&gt;&lt;/td&gt;
           &lt;td&gt;&lt;xsl:value-of select="EMAIL"/&gt;&lt;/td&gt;
           &lt;td&gt;&lt;xsl:value-of select="SALARY"/&gt;&lt;/td&gt;
         &lt;/tr&gt;
       &lt;/xsl:for-each&gt;
     &lt;/table&gt;
   &lt;/html&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre></div>
<!-- class="example" -->
<p>The following XSQL page makes use of the stylesheet in <a href="#BABGFJAC">Example 15-1</a>:</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet href="empToExcel.xsl" type="text/xsl"?&gt;
<span class="bold">&lt;xsql:query connection="hr" xmlns:xsql="urn:oracle-xsql"&gt;</span>
  SELECT   employee_id, email, salary 
  FROM     employees 
  ORDER BY salary DESC
&lt;/xsql:query&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BABFBJEI"></a>
<div id="ADXDK19647" class="sect2">
<h3 class="sect2">Assigning the Stylesheet Dynamically</h3>
<p>If you include an <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> instruction at the top of your <code dir="ltr">.xsql</code> file, then the XSQL page processor considers it for use in transforming the resulting XML datagram. Consider the <code dir="ltr">emp_test.xsql</code> page shown in <a href="#BABBEJCD">Example 15-2</a>.</p>
<div id="ADXDK19648" class="example">
<p class="titleinexample"><a id="BABBEJCD"></a>Example 15-2 emp_test.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
<span class="bold">&lt;?xml-stylesheet type="text/xsl" href="emp.xsl"?&gt;</span>
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query&gt;
    SELECT   * 
    FROM     employees
    ORDER BY salary DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>The page in <a href="#BABBEJCD">Example 15-2</a> uses the <code dir="ltr">emp.xsl</code> stylesheet to transform the results of the <code dir="ltr">employees</code> query in the server tier before returning the response to the requestor. The processor accesses the stylesheet by the URL provided in the <code dir="ltr">href</code> pseudo-attribute on the <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction.</p>
<p>Suppose that you want to change XSLT stylesheets dynamically based on arguments passed to the XSQL servlet. You can achieve this goal by using a lexical parameter in the <code dir="ltr">href</code> attribute of your <code dir="ltr">xml-stylesheet</code> processing instruction, as shown in the following sample instruction:</p>
<pre dir="ltr">
&lt;?xml-stylesheet type="text/xsl" <span class="bold">href="{@filename}.xsl</span>"?&gt;
</pre>
<p>You can then pass the value of the <code dir="ltr">filename</code> parameter as part of the URL request to XSQL servlet.</p>
<p>You can also use the <a href="adx_ref_xsql.htm#CHDFBHAB">&lt;xsql:set-page-param&gt;</a> element in an XSQL page to set the value of the parameter based on a SQL query. For example, the XSQL page in <a href="#BABIEJED">Example 15-3</a> selects the name of the stylesheet to use from a table by assigning the value of a page-private parameter.</p>
<div id="ADXDK19649" class="example">
<p class="titleinexample"><a id="BABIEJED"></a>Example 15-3 emp_test_dynamic.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="<span class="bold">{@sheet}</span>.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:set-page-param bind-params="UserCookie" <span class="bold">name="sheet"</span>&gt;
    SELECT stylesheet_name
    FROM   user_prefs
    WHERE  username = ?
  &lt;/xsql:set-page-param&gt;
  &lt;xsql:query&gt;
    SELECT   * 
    FROM     employees 
    ORDER BY salary DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABCECEB"></a>
<div id="ADXDK19650" class="sect2">
<h3 class="sect2">Processing XSLT Stylesheets in the Client</h3>
<p>Some browsers support processing XSLT stylesheets in the client. These browsers recognize the stylesheet to be processed for an XML document by using an <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction. The use of <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> for this purpose is part of the W3C Recommendation from June 29, 1999 entitled "Associating Stylesheets with XML Documents, Version 1.0".</p>
<p>By default, the XSQL pages processor performs XSLT transformations in the server. By adding <code dir="ltr">client="yes"</code> to your <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction in your XSQL page, however, you can defer XSLT processing to the client. The processor serves the XML datagram "raw" with the current <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> element at the top of the document.</p>
</div>
<!-- class="sect2" -->
<a id="BABECGCF"></a>
<div id="ADXDK19651" class="sect2">
<h3 class="sect2">Providing Multiple Stylesheets</h3>
<p>You can include multiple <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instructions at the top of an XSQL page. The instructions can contain an optional <code dir="ltr">media</code> pseudo-attribute. If specified, the processor case-insensitively compares the value of the <code dir="ltr">media</code> pseudo-attribute with the value of the User-Agent string in the HTTP header. If the value of the <code dir="ltr">media</code> pseudo-attribute matches part of the User-Agent string, then the processor selects the current <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> instruction for use. Otherwise, the processor ignores the instruction and continues looking. The processor uses the first matching processing instruction in document order. An instruction <span class="italic">without</span> a <code dir="ltr">media</code> pseudo-attribute matches all user agents.</p>
<p><a href="#BABBBEBB">Example 15-4</a> shows multiple processing instructions at the top of an XSQL file. The processor uses <code dir="ltr">doyouxml-lynx.xsl</code> for Lynx browsers, <code dir="ltr">doyouxml-ie.xsl</code> for Internet Explorer 5.0 or 5.5 browsers, and <code dir="ltr">doyouxml.xsl</code> for all others.</p>
<div id="ADXDK19652" class="example">
<p class="titleinexample"><a id="BABBBEBB"></a>Example 15-4 Multiple &lt;?xml-stylesheet ?&gt; Processing Instructions</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" media="lynx" href="doyouxml-lynx.xsl" ?&gt;
&lt;?xml-stylesheet type="text/xsl" media="msie 5" href="doyouxml-ie.xsl" ?&gt;
&lt;?xml-stylesheet type="text/xsl" href="doyouxml.xsl" ?&gt;
&lt;page xmlns:xsql="urn:oracle-xsql" connection="demo"&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#g1043042">Table 15-1</a> summarizes the supported pseudo-attributes allowed on the <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction.</p>
<div id="ADXDK19653" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref419"></a><a id="g1043042"></a>Table 15-1 Pseudo-Attributes for &lt;?xml-stylesheet ?&gt;</p>
<table class="cellalignment1211" title="Pseudo-Attributes for &lt;?xml-stylesheet ?&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t3">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t3" headers="r1c1-t3">
<pre dir="ltr">
type = "string"
</pre></td>
<td class="cellalignment1213" headers="r2c1-t3 r1c2-t3">
<p>Indicates the MIME type of the associated stylesheet. For XSLT stylesheets, this attribute must be set to the string <code dir="ltr">text/xsl</code>.</p>
<p>This attribute may be present <span class="italic">or</span> absent when using the <code dir="ltr">serializer</code> attribute, depending on whether an XSLT stylesheet has to execute before invoking the serializer, or not.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t3" headers="r1c1-t3">
<pre dir="ltr">
href = "URL"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t3 r1c2-t3">
<p>Indicates the relative or absolute URL to the XSLT stylesheet to be used. If an absolute URL is supplied that uses the <code dir="ltr">http</code> protocol scheme, the IP address of the resource must be a trusted host listed in the XSQL configuration file (by default, named <code dir="ltr">XSQLConfig.xml</code>).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t3" headers="r1c1-t3">
<pre dir="ltr">
media = "string"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t3 r1c2-t3">
<p>Performs a case-<span class="italic">insensitive</span> match on the <code dir="ltr">User-Agent</code> string from the HTTP header sent by the requesting device. This attribute is optional. The current <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction is used only if the <code dir="ltr">User-Agent</code> string contains the value of the <code dir="ltr">media</code> attribute; otherwise it is ignored.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t3" headers="r1c1-t3">
<pre dir="ltr">
client = "boolean"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t3 r1c2-t3">
<p>Defers the processing of the associated XSLT stylesheet to the client if set to <code dir="ltr">yes</code>. The raw XML datagram is sent to the client with the current <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> instruction at the top of the document. The default if not specified is to perform the transformation in the server.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t3" headers="r1c1-t3">
<pre dir="ltr">
serializer = "string"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t3 r1c2-t3">
<p>By default, the XSQL page processor uses the following:</p>
<ul>
<li>
<p>XML DOM serializer if no XSLT stylesheet is used</p>
</li>
<li>
<p>XSLT processor serializer if an XSLT stylesheet is used</p>
</li>
</ul>
<p>Specifying this pseudo-attribute indicates that a custom serializer implementation must be used instead.</p>
<p>Valid values are either the name of a custom serializer defined in the <code dir="ltr">&lt;serializerdefs&gt;</code> section of the XSQL configuration file or the string <code dir="ltr">java:fully.qualified.Classname</code>. If both an XSLT stylesheet and the serializer attribute are present, then the processor performs the XSLT transformation first, then invokes the custom serializer to render the final result to the <code dir="ltr">OutputStream</code> or <code dir="ltr">PrintWriter</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABFBHFD"></a>
<div id="ADXDK19654" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Working with Array-Valued Parameters</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#BABBFCAA">Supplying Values for Array-Valued Parameters</a></p>
</li>
<li>
<p><a href="#BABGIIGB">Setting Array-Valued Page or Session Parameters from Strings</a></p>
</li>
<li>
<p><a href="#BABFGCIB">Binding Array-Valued Parameters in SQL and PL/SQL Statements</a></p>
</li>
</ul>
<a id="BABBFCAA"></a>
<div id="ADXDK19655" class="sect2">
<h3 class="sect2">Supplying Values for Array-Valued Parameters</h3>
<p>Request parameters, session parameters, and page-private parameters can have arrays of strings as values. To treat to the value of a parameter as an array, add two empty square brackets to the end of its name. For example, if an HTML form is posted with four occurrences of a input control named <code dir="ltr">productid</code>, then use the notation <code dir="ltr">productid[]</code> to refer to the array-valued <code dir="ltr">productid</code> parameter. If you refer to an array-valued parameter without using the array-brackets notation, then the XSQL processor uses the value of the first array entry.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The XSQL processor does not support use of numbers inside the array brackets. That is, you can refer to <code dir="ltr">productid</code> or <code dir="ltr">productid[]</code>, but not <code dir="ltr">productid[2]</code>.</div>
<p>Suppose that you refer to an array-valued parameter as a lexical substitution parameter inside an action handler attribute value or inside the content of an action handler element. The XSQL page processor converts its value to a comma-delimited list of non-null and non-empty strings in the order that they exist in the array. <a href="#BABEGJHI">Example 15-5</a> shows an XSQL page with an array-valued parameter.</p>
<div id="ADXDK19656" class="example">
<p class="titleinexample"><a id="BABEGJHI"></a>Example 15-5 Using an Array-Valued Parameter in an XSQL Page</p>
<pre dir="ltr">
&lt;page xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query&gt;
    SELECT description
    FROM product
    WHERE productid in ( {@productid[]} )  /* Using lexical parameter */
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>You can invoke the XSQL command-line utility to supply multiple values for the <code dir="ltr">productid</code> parameter in <code dir="ltr">Page.xsql</code> as follows:</p>
<pre dir="ltr">
xsql Page.xsql productid=111 productid=222 productid=333 productid=444
</pre>
<p>The preceding command sets the <code dir="ltr">productid[]</code> array-valued parameter to the value {"<code dir="ltr">111</code>","<code dir="ltr">222</code>","<code dir="ltr">333</code>","<code dir="ltr">444</code>"}. The XSQL page processor replaces the <code dir="ltr">{@productid[]}</code> expression in the query with the string "<code dir="ltr">111,222,333,444</code>".</p>
<p>Note that you can also pass multi-valued parameters programmatically through the <code dir="ltr">XSQLRequest</code> API, which accepts a <code dir="ltr">java.util.Dictionary</code> of named parameters. You can use a <code dir="ltr">Hashtable</code> and call its <code dir="ltr">put(name,value)</code> method to add <code dir="ltr">String</code>-valued parameters to the request. To add multi-valued parameters, put a value of type <code dir="ltr">String[]</code> instead of type <code dir="ltr">String</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Only request parameters, page-private parameters, and session parameters can use string arrays. The <a href="adx_ref_xsql.htm#CHDGHAGJ">&lt;xsql:set-stylesheet-param&gt;</a> and <a href="adx_ref_xsql.htm#CHDCBIFI">&lt;xsql:set-cookie&gt;</a> actions only support working with parameters as simple string values. To refer to a multi-valued parameter in your XSLT stylesheet, use <a href="adx_ref_xsql.htm#CHDHDCAG">&lt;xsql:include-param&gt;</a> to include the multi-valued parameter into your XSQL datapage, then use an XPath expression in the stylesheet to refer to the values from the datapage.</div>
</div>
<!-- class="sect2" -->
<a id="BABGIIGB"></a>
<div id="ADXDK19657" class="sect2">
<h3 class="sect2">Setting Array-Valued Page or Session Parameters from Strings</h3>
<p>You can set the value of a page-private parameter or session parameter to a string-array value by using the array brackets notation on the name as follows:</p>
<pre dir="ltr">
&lt;!-- param name contains array brackets --&gt;
&lt;xsql:set-page-param name="names[]" value="Tom Jane Joe"/&gt;
</pre>
<p>You set the value similarly for session parameters, as shown in the following example:</p>
<pre dir="ltr">
&lt;xsql:set-session-param name="dates[]" value="12-APR-1962 15-JUL-1968"/&gt;
</pre>
<p>By default, when the name of the parameter uses array brackets, the XSQL processor treats the value as a space-or-comma-delimited list and tokenizes it.</p>
<p>The resulting string array value contains these separate tokens. In the preceding examples, the <code dir="ltr">names[]</code> parameter is the string array {"<code dir="ltr">Tom</code>", "<code dir="ltr">Jane</code>", "<code dir="ltr">Joe</code>"} and the <code dir="ltr">dates[]</code> parameter is the string array {"<code dir="ltr">12-APR-1962</code>", "<code dir="ltr">15-JUL-1968</code>"}.</p>
<p>To handle strings that contain spaces, the tokenization algorithm first checks the string for the presence of commas. If at least one comma is found in the string, then commas are used as the token delimiter. For example, the following action sets the value of the <code dir="ltr">names[]</code> parameter to the string array {"<code dir="ltr">Tom Jones</code>", "<code dir="ltr">Jane York</code>"}:</p>
<pre dir="ltr">
&lt;!-- param name contains array brackets --&gt;
&lt;xsql:set-page-param name="names[]" value="Tom Jones,Jane York"/&gt;
</pre>
<p>By default, when you set a parameter whose name does not end with the array-brackets, then the string-tokenization does not occur. Thus, the following action sets the parameter <code dir="ltr">names</code> to the literal string "<code dir="ltr">Tom Jones,Jane York</code>":</p>
<pre dir="ltr">
&lt;!-- param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name="names" value="Tom Jones,Jane York"/&gt;
</pre>
<p>You can force the string to be tokenized by including the <code dir="ltr">treat-list-as-array="yes"</code> attribute on the <a href="adx_ref_xsql.htm#CHDFBHAB">&lt;xsql:set-page-param&gt;</a> or <a href="adx_ref_xsql.htm#CHDGFGIA">&lt;xsql:set-session-param&gt;</a> actions. When this attribute is set, the XSQL processor assigns a comma-delimited string of the tokenized values to the parameter. For example, the following action sets the <code dir="ltr">names</code> parameter to the literal string "<code dir="ltr">Tom,Jane,Joe</code>":</p>
<pre dir="ltr">
&lt;!-- param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name="names" value="Tom Jane Joe"
                     treat-list-as-array="yes"/&gt;
</pre>
<p>When you are setting the value of a simple string-valued parameter and you are tokenizing the value with <code dir="ltr">treat-list-as-array="yes"</code>, you can include the <code dir="ltr">quote-array-values="yes"</code> attribute to surround the comma-delimited values with single-quotes. Thus, the following action assigns the literal string value "<code dir="ltr">'Tom Jones','Jane York','Jimmy'</code>" to the <code dir="ltr">names</code> parameter:</p>
<pre dir="ltr">
&lt;!--  param name does NOT contain array brackets --&gt;
&lt;xsql:set-page-param name="names" value="Tom Jones,Jane York,Jimmy"
                     treat-list-as-array="yes"
                     quote-array-values="yes"/&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BABFGCIB"></a>
<div id="ADXDK19658" class="sect2">
<h3 class="sect2">Binding Array-Valued Parameters in SQL and PL/SQL Statements</h3>
<p>Where string-valued scalar bind variables are supported in an XSQL page, you can also bind array-valued parameters. Use the array parameter name, for example, <code dir="ltr">myparam[]</code>, in the list of parameter names that you supply for the <code dir="ltr">bind-params</code> attribute. This technique enables you to process array-valued parameters in SQL statements and PL/SQL procedures.</p>
<p>The XSQL processor binds array-valued parameters as a nested table object type named <code dir="ltr">XSQL_TABLE_OF_VARCHAR</code>. You must create this type in your current schema with the following DDL statement:</p>
<pre dir="ltr">
CREATE TYPE xsql_table_of_varchar AS TABLE OF VARCHAR2(2000);
</pre>
<p>Although the type must have the name <code dir="ltr">xsql_table_of_varchar</code>, you can change the dimension of the <code dir="ltr">VARCHAR2</code> string if desired. Of course, you have to make it as long as any string value you expect to handle in your array-valued string parameters.</p>
<p>Consider the PL/SQL function shown in <a href="#BABHBICE">Example 15-6</a>.</p>
<div id="ADXDK19659" class="example">
<p class="titleinexample"><a id="BABHBICE"></a>Example 15-6 testTableFunction</p>
<pre dir="ltr">
FUNCTION testTableFunction(p_name  XSQL_TABLE_OF_VARCHAR,
                           p_value XSQL_TABLE_OF_VARCHAR)
RETURN VARCHAR2 IS
  lv_ret     VARCHAR2(4000);
  lv_numElts INTEGER;
BEGIN
  IF p_name IS NOT NULL THEN
    lv_numElts := p_name.COUNT;
    FOR j IN 1..lv_numElts LOOP
      IF (j &gt; 1) THEN
        lv_ret := lv_ret||':';
      END IF;
      lv_ret := lv_ret||p_name(j)||'='||p_value(j);
    END LOOP;
  END IF;
  RETURN lv_ret;
END;
</pre></div>
<!-- class="example" -->
<p>The XSQL page in <a href="#BABFJGDH">Example 15-7</a> shows how to bind two array-valued parameters in a SQL statement that uses <code dir="ltr">testTableFunction</code>.</p>
<div id="ADXDK19660" class="example">
<p class="titleinexample"><a id="BABFJGDH"></a>Example 15-7 XSQL Page with Array-Valued Parameters</p>
<pre dir="ltr">
&lt;page xmlns:xsql="urn:oracle-xsql" connection="demo"
      someNames="aa,bb,cc" someValues="11,22,33"&gt;
  &lt;xsql:query bind-params="someNames[] someValues[]"&gt;
    SELECT testTableFunction(?,?) AS example 
    FROM dual
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>Executing the XSQL page in <a href="#BABFJGDH">Example 15-7</a> generates the following datagram:</p>
<pre dir="ltr">
&lt;page someNames="aa,bb,cc" someValues="11,22,33"&gt;
  &lt;ROWSET&gt;
    &lt;ROW num="1"&gt;
      &lt;EXAMPLE&gt;aa=11:bb=22:cc=33&lt;/EXAMPLE&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
&lt;/page&gt;
</pre>
<p>This technique shows that the XSQL processor bound the array-valued <code dir="ltr">someNames[]</code> and <code dir="ltr">someValues[]</code> parameters as table collection types. It iterated over the values and concatenated them to produce the "<code dir="ltr">aa=11:bb=22:cc=33</code>" string value as the return value of the PL/SQL function.</p>
<p>You can mix any number of regular parameters and array-valued parameters in your bind-params string. Use the array-bracket notation for the parameters that you want to be bound as arrays.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you run the page in <a href="#BABFJGDH">Example 15-7</a> but you have not created the <code dir="ltr">XSQL_TABLE_OF_VARCHAR</code> type as illustrated earlier, then you receive an error such as the following:
<pre dir="ltr">
&lt;page someNames="aa,bb,cc" someValues="11,22,33"&gt;
  &lt;xsql-error code="17074" action="xsql:query"&gt;
    &lt;statement&gt;
     select testTableFunction(?,?) as example from dual
    &lt;/statement&gt;
    &lt;message&gt;
      invalid name pattern: SCOTT.XSQL_TABLE_OF_VARCHAR
    &lt;/message&gt;
  &lt;/xsql-error&gt;
&lt;/page&gt;
</pre></div>
<p>Because the XSQL processor binds array parameters as nested table collection types, you can use the <code dir="ltr">TABLE()</code> operator with the <code dir="ltr">CAST()</code> operator in SQL to treat the nested table bind variable value as a table of values. You can then query this table. This technique is especially useful in subqueries. The page in <a href="#BABJDBIB">Example 15-8</a> uses an array-valued parameter containing employee IDs to restrict the rows queried from <code dir="ltr">hr.employees</code>.</p>
<div id="ADXDK19661" class="example">
<p class="titleinexample"><a id="BABJDBIB"></a>Example 15-8 Using an Array-Valued Parameter to Restrict Rows</p>
<pre dir="ltr">
&lt;page xmlns:xsql="urn:oracle-xsql" connection="hr"&gt;
  &lt;xsql:set-page-param name="someEmployees[]" value="196,197"/&gt;
  &lt;xsql:query bind-params="someEmployees[]"&gt;
    SELECT first_name||' '||last_name AS name, salary
    FROM employees
    WHERE employee_id IN (
        SELECT * FROM TABLE(CAST( ? AS xsql_table_of_varchar))
     )
   &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<pre dir="ltr">
</pre>
<p>The XSQL page in <a href="#BABJDBIB">Example 15-8</a> generates a datagram such as the following:</p>
<pre dir="ltr">
&lt;page&gt;
  &lt;ROWSET&gt;
    &lt;ROW num="1"&gt;
      &lt;NAME&gt;Alana Walsh&lt;/NAME&gt;
      &lt;SALARY&gt;3100&lt;/SALARY&gt;
    &lt;/ROW&gt;
    &lt;ROW num="2"&gt;
      &lt;NAME&gt;Kevin Feeny&lt;/NAME&gt;
      &lt;SALARY&gt;3000&lt;/SALARY&gt;
    &lt;/ROW&gt;
  &lt;/ROWSET&gt;
&lt;/page&gt;
</pre>
<p><a href="#BABFJGDH">Example 15-7</a> and <a href="#BABJDBIB">Example 15-8</a> show how to use <code dir="ltr">bind-params</code> with <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a>, but these techniques work for <a href="adx_ref_xsql.htm#CHDDEHJG">&lt;xsql:dml&gt;</a>, <a href="adx_ref_xsql.htm#CHDDAFAD">&lt;xsql:include-owa&gt;</a>, <a href="adx_ref_xsql.htm#CHDEBBEG">&lt;xsql:ref-cursor-function&gt;</a>, and other actions that accept SQL or PL/SQL statements.</p>
<p>Note that PL/SQL index-by tables work with the OCI JDBC driver but not the JDBC thin driver. By using the nested table collection type <code dir="ltr">XSQL_TABLE_OF_VARCHAR</code>, you can use array-valued parameters with either driver. In this way you avoid losing the programming flexibility of working with array values in PL/SQL.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHAHIG"></a>
<div id="ADXDK19662" class="sect1">
<h2 class="sect1">Setting Error Parameters on Built-in Actions</h2>
<p>The XSQL page processor determines whether an action encountered a non-fatal error during its execution. For example, an attempt to insert a row or call a stored procedure can fail with a database exception that will get included in your XSQL data page as an <code dir="ltr">&lt;xsql-error&gt;</code> element.</p>
<p>You can set a page-private parameter in a built-in XSQL action when the action reports a nonfatal error. Use the <code dir="ltr">error-param</code> attribute on the action to enable this feature. For example, to set the parameter "<code dir="ltr">dml-error</code>" when the statement inside the <a href="adx_ref_xsql.htm#CHDDEHJG">&lt;xsql:dml&gt;</a> action encounters a database error, you can use the technique shown in <a href="#BABFDBEB">Example 15-9</a>.</p>
<div id="ADXDK19663" class="example">
<p class="titleinexample"><a id="BABFDBEB"></a>Example 15-9 Setting an Error Parameter</p>
<pre dir="ltr">
&lt;xsql:dml error-param="dml-error" bind-params="val"&gt;
  INSERT INTO yourtable(somecol) 
    VALUES(?)
&lt;/xsql:dml&gt;
</pre></div>
<!-- class="example" -->
<p>If the execution of the <code dir="ltr">&lt;xsql:dml&gt;</code> action encounters an error, then the XSQL processor sets the page-private parameter <code dir="ltr">dml-error</code> to the string "<code dir="ltr">Error</code>". If the execution is successful, then the XSQL processor does not assign a value to the error parameter. In <a href="#BABFDBEB">Example 15-9</a>, if the page-private parameter <code dir="ltr">dml-error</code> already exists, then it retains its current value. If it does not exist, then it continues not to exist.</p>
<div id="ADXDK19664" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref420"></a>
<h3 class="sect2">Using Conditional Logic with Error Parameters</h3>
<p>By using the error parameter in combination with <a href="adx_ref_xsql.htm#BJECGJDF">&lt;xsql:if-param&gt;</a>, you can achieve conditional behavior in your XSQL page template. For example, assume that your connection definition sets the <code dir="ltr">AUTOCOMMIT</code> flag to <code dir="ltr">false</code> on the connection named <code dir="ltr">demo</code> in the XSQL configuration file. The XSQL page shown in <a href="#BABJGFFA">Example 15-10</a> illustrates how you might roll back the changes made by a previous action if a subsequent action encounters an error.</p>
<div id="ADXDK19665" class="example">
<p class="titleinexample"><a id="BABJGFFA"></a>Example 15-10 Achieving Conditional Behavior with an Error Parameter</p>
<pre dir="ltr">
&lt;!-- NOTE: Connection "demo" must not set to autocommit! --&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:dml error-param="dml-error" bind-params="val"&gt;
    INSERT INTO yourtable(somecol) 
      VALUES(?)
  &lt;/xsql:dml&gt;
  &lt;!-- This second statement will commit if it succeeds --&gt;
  &lt;xsql:dml commit="yes" error-param="dml-error" bind-params="val2"&gt;
    INSERT INTO anothertable(anothercol)
      VALUES(?)
  &lt;/xsql:dml&gt;
  &lt;xsql:if-param name="dml-error" exists="yes"&gt;
    &lt;xsql:dml&gt;
      ROLLBACK
    &lt;/xsql:dml&gt;
  &lt;/xsql:if-param&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>If you have written custom action handlers, and if your custom actions call <code dir="ltr">reportMissingAttribute()</code>, <code dir="ltr">reportError()</code>, or <code dir="ltr">reportErrorIncludingStatement()</code> to report non-fatal action errors, then they automatically pick up this feature as well.</p>
</div>
<!-- class="sect2" -->
<a id="i1032440"></a>
<div id="ADXDK19666" class="sect2">
<h3 class="sect2">Formatting XSQL Action Handler Errors<a id="sthref421"></a></h3>
<p>Errors raised by the processing of XSQL action elements are reported as XML elements in a uniform way. This fact enables XSLT stylesheets to detect their presence and optionally format them for presentation.</p>
<p>The action element in error is replaced in the page by the following element:</p>
<pre dir="ltr">
&lt;xsql-error action="xxx"&gt; 
</pre>
<p>Depending on the error the <code dir="ltr">&lt;xsql-error&gt;</code> element contains:</p>
<ul>
<li>
<p>A nested <code dir="ltr">&lt;message&gt;</code> element</p>
</li>
<li>
<p>A <code dir="ltr">&lt;statement&gt;</code> element with the offending SQL statement</p>
</li>
</ul>
<p><a href="#BABDCABJ">Example 15-11</a> shows an XSLT stylesheet that uses this information to display error information on the screen.</p>
<div id="ADXDK19667" class="example">
<p class="titleinexample"><a id="BABDCABJ"></a>Example 15-11 XSLTStylesheet</p>
<pre dir="ltr">
&lt;xsl:if test="//xsql-error"&gt;
     &lt;table style="background:yellow"&gt;
        &lt;xsl:for-each select="//xsql-error"&gt;
           &lt;tr&gt;
            &lt;td&gt;&lt;b&gt;Action&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="@action"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr valign="top"&gt;
            &lt;td&gt;&lt;b&gt;Message&lt;/b&gt;&lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="message"/&gt;&lt;/td&gt;
           &lt;/tr&gt;
          &lt;/xsl:for-each&gt;
     &lt;/table&gt;
&lt;/xsl:if&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABHHJID"></a>
<div id="ADXDK19668" class="sect1">
<h2 class="sect1">Including XMLType Query Results in XSQL Pages</h2>
<p>Oracle Database supports <code dir="ltr">XMLType</code> for storing and querying XML-based database content. You can exploit database XML features to produce XML for inclusion in your XSQL pages by using one of the following techniques:</p>
<ul>
<li>
<p><a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> handles any query including columns of type <code dir="ltr">XMLType</code>, but it handles XML markup in <code dir="ltr">CLOB</code> and <code dir="ltr">VARCHAR2</code> columns as literal text.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#CHDCCEID">&lt;xsql:include-xml&gt;</a> parses and includes a single <code dir="ltr">CLOB</code> or string-based XML document retrieved from a query.</p>
</li>
</ul>
<p>One difference between the preceding approaches is that <code dir="ltr">&lt;xsql:include-xml&gt;</code> parses the literal XML appearing in a CLOB or string value on the fly to turn it into a tree of elements and attributes. In contrast, <code dir="ltr">&lt;xsql:query&gt;</code> leaves XML markup in <code dir="ltr">CLOB</code> or string-valued columns as literal text.</p>
<p>Another difference is that while <code dir="ltr">&lt;xsql:query&gt;</code> can handle query results of any number of columns and rows, <code dir="ltr">&lt;xsql:include-xml&gt;</code> works on a single column of a single row. Accordingly, when using <code dir="ltr">&lt;xsql:include-xml&gt;</code>, the <code dir="ltr">SELECT</code> statement inside it returns a single row containing a single column. The column can either be a <code dir="ltr">CLOB</code> or a <code dir="ltr">VARCHAR2</code> value containing a well-formed XML document. The XSQL engine parses the XML document and includes it in your XSQL page.</p>
<p><a href="#BABCEICG">Example 15-12</a> uses nested <code dir="ltr">XmlAgg()</code> functions to aggregate the results of a dynamically-constructed XML document containing departments and nested employees. The functions aggregate the document into a single "result" document wrapped in a <code dir="ltr">&lt;DepartmentList&gt;</code> element.</p>
<div id="ADXDK19669" class="example">
<p class="titleinexample"><a id="BABCEICG"></a>Example 15-12 Aggregating a Dynamically-Constructed XML Document</p>
<pre dir="ltr">
&lt;xsql:query connection="hr" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT XmlElement("DepartmentList",
           XmlAgg(
             XmlElement("Department", 
               XmlAttributes(department_id AS "Id"),
               XmlForest(department_name AS "Name"),
               (SELECT XmlElement("Employees",
                         XmlAgg( 
                           XmlElement("Employee",
                             XmlAttributes(employee_id AS "Id"),
                             XmlForest(first_name||' '||last_name AS "Name",
                                       salary   AS "Salary",
                                       job_id   AS "Job")
                           )
                         )
                       )
                FROM employees e 
                WHERE e.department_id = d.department_id
               )
             )
           )
         ) AS result
  FROM departments d
  ORDER BY department_name
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>In another example, suppose you have a number of <code dir="ltr">&lt;Movie&gt;</code> XML documents stored in a table of <code dir="ltr">XMLType</code> called <code dir="ltr">movies.</code> Each document might look like the one shown in <a href="#BABEGAFH">Example 15-13</a>.</p>
<div id="ADXDK19670" class="example">
<p class="titleinexample"><a id="BABEGAFH"></a>Example 15-13 Movie XML Document</p>
<pre dir="ltr">
&lt;Movie Title="The Talented Mr.Ripley" RunningTime="139" Rating="R"&gt;
  &lt;Director&gt;
    &lt;First&gt;Anthony&lt;/First&gt;
    &lt;Last&gt;Minghella&lt;/Last&gt;
  &lt;/Director&gt;
  &lt;Cast&gt;
    &lt;Actor Role="Tom Ripley"&gt;
      &lt;First&gt;Matt&lt;/First&gt;
      &lt;Last&gt;Damon&lt;/Last&gt;
    &lt;/Actor&gt;
    &lt;Actress Role="Marge Sherwood"&gt;
      &lt;First&gt;Gwyneth&lt;/First&gt;
      &lt;Last&gt;Paltrow&lt;/Last&gt;
    &lt;/Actress&gt;
    &lt;Actor Role="Dickie Greenleaf"&gt;
      &lt;First&gt;Jude&lt;/First&gt;
      &lt;Last&gt;Law&lt;/Last&gt;
      &lt;Award From="BAFTA" Category="Best Supporting Actor"/&gt;
    &lt;/Actor&gt;
  &lt;/Cast&gt;
&lt;/Movie&gt;
</pre></div>
<!-- class="example" -->
<p>You can use the built-in XPath query features to extract an aggregate list of all cast members who have received Oscar awards from any movie in the database. <a href="#BABFHAFD">Example 15-14</a> shows a sample query.</p>
<div id="ADXDK19671" class="example">
<p class="titleinexample"><a id="BABFHAFD"></a>Example 15-14 Using XPath to Extract an Aggregate List</p>
<pre dir="ltr">
SELECT XMLELEMENT("AwardedActors",
           XMLAGG(EXTRACT(VALUE(m),
                  '/Movie/Cast/*[Award[@From="Oscar"]]')))
FROM movies m
</pre></div>
<!-- class="example" -->
<p>To include this query result of <code dir="ltr">XMLType</code> in your XSQL page, paste the query inside an <code dir="ltr">&lt;xsql:query&gt;</code> element. Make sure you include an alias for the query expression, as shown in <a href="#BABBHBFF">Example 15-15</a>.</p>
<div id="ADXDK19672" class="example">
<p class="titleinexample"><a id="BABBHBFF"></a>Example 15-15 Including an XMLType Query Result</p>
<pre dir="ltr">
&lt;xsql:query connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT XMLELEMENT("AwardedActors",
           XMLAGG(EXTRACT(VALUE(m),
                  '/Movie/Cast/*[Award[@From="Oscar"]]'))) AS result
  FROM movies m
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>You can use the combination of <code dir="ltr">XmlElement()</code> and <code dir="ltr">XmlAgg()</code> to make the database aggregate all of the XML fragments identified by the query into single, well-formed XML document. The functions work together to produce a well-formed result like the following:</p>
<pre dir="ltr">
&lt;AwardedActors&gt;
  &lt;Actor&gt;...&lt;/Actor&gt;
  &lt;Actress&gt;...&lt;/Actress&gt;
&lt;/AwardedActors&gt;
</pre>
<p>You can use the standard XSQL bind variable capabilities in the middle of an XPath expression if you concatenate the bind variable into the expression. For example, to parameterize the value <code dir="ltr">Oscar</code> into a parameter named <code dir="ltr">award-from</code>, you can use an XSQL page like the one shown in <a href="#BABIEIIH">Example 15-16</a>.</p>
<div id="ADXDK19673" class="example">
<p class="titleinexample"><a id="BABIEIIH"></a>Example 15-16 Using XSQL Bind Variables in an XPath Expression</p>
<pre dir="ltr">
&lt;xsql:query connection="orcl92" xmlns:xsql="urn:oracle-xsql"
            award-from="Oscar"  bind-params="award-from"&gt;
  /* Using a bind variable in an XPath expression */
  SELECT XMLELEMENT("AwardedActors",
           XMLAGG(EXTRACT(VALUE(m),
                  '/Movie/Cast/*[Award[@From="'|| ? ||'"]]'))) AS result
  FROM movies m
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i1029251"></a>
<div id="ADXDK19674" class="sect1">
<h2 class="sect1">Handling Posted XML Content</h2>
<p>In addition to simplifying the assembly and transformation of XML content, the XSQL pages framework enables you to handle posted XML content. Built-in actions provide the following advantages:</p>
<ul>
<li>
<p>Simplify the handling of posted data from both XML document and HTML forms</p>
</li>
<li>
<p>Enable data to be posted directly into a database table by using XSU</p>
</li>
</ul>
<p>XSU can perform database inserts, updates, and deletes based on the content of an XML document in canonical form for a target table or view. For a specified table, the canonical XML form of its data is given by one row of XML output from a <code dir="ltr">SELECT *</code> query. When given an XML document in this form, XSU can automate the DML operation.</p>
<p>By combining XSU with XSLT, you can transform XML in any format into the canonical format expected by a given table. XSU can then perform DML on the resulting canonical XML.</p>
<p>The following built-in XSQL actions make it possible for you to exploit this capability from within your XSQL pages:</p>
<ul>
<li>
<p><a href="adx_ref_xsql.htm#BJEHGIFD">&lt;xsql:insert-request&gt;</a></p>
<p>Insert the optionally transformed XML document that was posted in the request into a table.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#BJEHDFIH">&lt;xsql:update-request&gt;</a></p>
<p>Update the optionally transformed XML document that was posted in the request into a table or view.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#BJEGJBAJ">&lt;xsql:delete-request&gt;</a></p>
<p>Delete the optionally transformed XML document that was posted in the request from a table or view.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#BJEBHIIB">&lt;xsql:insert-param&gt;</a></p>
<p>Insert the optionally transformed XML document that was posted as the value of a request parameter into a table or view.</p>
</li>
</ul>
<p>If you target a database view with your insert, then you can create <code dir="ltr">INSTEAD OF INSERT</code> triggers on the view to further automate the handling of the posted information. For example, an <code dir="ltr">INSTEAD OF INSERT</code> trigger on a view can use PL/SQL to check for the existence of a record and intelligently choose whether to do an <code dir="ltr">INSERT</code> or an <code dir="ltr">UPDATE</code> depending on the result of this check.</p>
<div id="ADXDK19675" class="sect2"><a id="sthref422"></a>
<h3 class="sect2">Understanding XML Posting Options</h3>
<p>The XSQL pages framework can handle posted data in the following scenarios:</p>
<ul>
<li>
<p>A client program sends an HTTP <code dir="ltr">POST</code> message that targets an XSQL page. The request body contains an XML document; the HTTP header reports a <code dir="ltr">ContentType</code> of "<code dir="ltr">text/xml</code>".</p>
<p>In this case, <code dir="ltr">&lt;xsql:insert-request&gt;</code>, <code dir="ltr">&lt;xsql:update-request&gt;</code>, or <code dir="ltr">&lt;xsql:delete-request&gt;</code> can insert, update, or delete the content of the posted XML in the target table. If you transform the posted XML with XSLT, then the posted document is the source for the transformation.</p>
</li>
<li>
<p>A client program sends an HTTP <code dir="ltr">GET</code> request for an XSQL page, one of whose parameters contains an XML document.</p>
<p>In this case, you can use the <code dir="ltr">&lt;xsql:insert-param&gt;</code> action to insert the content of the posted XML parameter value in the target table. If you transform the posted XML document with XSLT, then the XML document in the parameter value is the source document for this transformation.</p>
</li>
<li>
<p>A browser submits an HTML form with <code dir="ltr">method</code>=<code dir="ltr">"POST"</code> whose action targets an XSQL page. The request body of the HTTP <code dir="ltr">POST</code> message contains an encoded version of the form fields and values with a <code dir="ltr">ContentType</code> of "<code dir="ltr">application/x-www-form-urlencoded</code>".</p>
<p>In this case, the request does not contain an XML document, but an encoded version of the form parameters. To make all three of these cases uniform, however, the XSQL page processor materializes on demand an XML document from the form parameters, session variables, and cookies contained in the request. The XSLT processor transforms this dynamically-materialized XML document into canonical form for DML by using <code dir="ltr">&lt;xsql:insert&gt;</code>, <code dir="ltr">&lt;xsql:update-request&gt;</code>, or <code dir="ltr">&lt;xsql:delete-request&gt;</code>.</p>
</li>
</ul>
<p>When working with posted HTML forms, the dynamically materialized XML document has the form shown in <a href="#BABBACHJ">Example 15-17</a>.</p>
<div id="ADXDK19676" class="example">
<p class="titleinexample"><a id="BABBACHJ"></a>Example 15-17 XML Document Generated from HTML Form</p>
<pre dir="ltr">
&lt;request&gt;
  &lt;parameters&gt;
    &lt;firstparamname&gt;firstparamvalue&lt;/firstparamname&gt;
     ... 
    &lt;lastparamname&gt;lastparamvalue&lt;/lastparamname&gt;
  &lt;/parameters&gt;
  &lt;session&gt;
    &lt;firstparamname&gt;firstsessionparamvalue&lt;/firstparamname&gt;
      ...
    &lt;lastparamname&gt;lastsessionparamvalue&lt;/lastparamname&gt;
  &lt;/session&gt;
  &lt;cookies&gt;
    &lt;firstcookie&gt;firstcookievalue&lt;/firstcookiename&gt;
       ... 
    &lt;lastcookie&gt;firstcookievalue&lt;/lastcookiename&gt;
  &lt;/cookies&gt;
&lt;/request&gt;
</pre></div>
<!-- class="example" -->
<p>If multiple parameters are posted with the same name, then the XSQL processor automatically creates multiple <code dir="ltr">&lt;row&gt;</code> elements to make subsequent processing easier. Assume that a request posts or includes the following parameters and values:</p>
<ul>
<li>
<p><code dir="ltr">id</code> = <code dir="ltr">101</code></p>
</li>
<li>
<p><code dir="ltr">name</code> = <code dir="ltr">Steve</code></p>
</li>
<li>
<p><code dir="ltr">id</code> = <code dir="ltr">102</code></p>
</li>
<li>
<p><code dir="ltr">name</code> = <code dir="ltr">Sita</code></p>
</li>
<li>
<p><code dir="ltr">operation</code> = <code dir="ltr">update</code></p>
</li>
</ul>
<p>The XSQL page processor creates a set of parameters as follows:</p>
<pre dir="ltr">
&lt;request&gt;
  &lt;parameters&gt;
    &lt;row&gt;
      &lt;id&gt;101&lt;/id&gt;
      &lt;name&gt;Steve&lt;/name&gt;
    &lt;/row&gt;
    &lt;row&gt;
      &lt;id&gt;102&lt;/id&gt;
      &lt;name&gt;Sita&lt;/name&gt;
    &lt;/row&gt;
    &lt;operation&gt;update&lt;/operation&gt;
  &lt;/parameters&gt;
  ...
&lt;/request&gt;
</pre>
<p>You need to provide an XSLT stylesheet that transforms this materialized XML document containing the request parameters into canonical format for your target table. Thus, you can build an XSQL page as follows:</p>
<pre dir="ltr">
&lt;!-- 
 | ShowRequestDocument.xsql
 | Show Materialized XML Document for an HTML Form
 +--&gt;
&lt;xsql:include-request-params xmlns:xsql="urn:oracle-xsql"/&gt;
</pre>
<p>With this page in place, you can temporarily modify your HTML form to post to the <code dir="ltr">ShowRequestDocument.xsql</code> page. In the browser you will see the "raw" XML for the materialized XML request document, which you can save and use to develop the XSL transformation.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1024792"></a>
<div id="ADXDK19677" class="sect1">
<h2 class="sect1">Producing PDF Output<a id="sthref423"></a> with the FOP Serializer</h2>
<p>Using the XSQL pages framework support for custom serializers, the <code dir="ltr">oracle.xml.xsql.serializers.XSQLFOPSerializer</code> class provides integration with the Apache FOP processor. The FOP processor renders a PDF document from an XML document containing XSL Formatting Objects.</p>
<p>As described in <a href="adx_j_xsqlpub.htm#CHECIJCH">Table 14-1</a>, the demo directory includes the <code dir="ltr">emptablefo.xsl</code> stylesheet and <code dir="ltr">emptable.xsql</code> page as illustrations. If you get an error trying to use the FOP serializer, then probably you do not have all of the required JAR files in the <code dir="ltr">CLASSPATH</code>. The <code dir="ltr">XSQLFOPSerializer</code> class resides in the separate <code dir="ltr">xml.jar</code> file, which must be included in the <code dir="ltr">CLASSPATH</code> to use the FOP integration. You also need to add the following additional Java archives to your <code dir="ltr">CLASSPATH</code>:</p>
<ul>
<li>
<p><code dir="ltr">fop.jar</code> - from Apache, version 0.20.3 or higher</p>
</li>
<li>
<p><code dir="ltr">batik.jar</code> - from the FOP distribution</p>
</li>
<li>
<p><code dir="ltr">avalon-framework-4.0.jar</code> - from FOP distribution</p>
</li>
<li>
<p>l<code dir="ltr">ogkit-1.0.jar</code> - from FOP distribution</p>
</li>
</ul>
<p>In case you want to customize the implementation, the source code for the FOP serializer provided in this release is shown in <a href="#BABJCBHC">Example 15-18</a>.</p>
<div id="ADXDK19678" class="example">
<p class="titleinexample"><a id="BABJCBHC"></a>Example 15-18 Source Code for FOP Serializer</p>
<pre dir="ltr">
package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import org.apache.log.Logger;
import org.apache.log.Hierarchy;
import org.apache.fop.messaging.MessageHandler;
import org.apache.log.LogTarget;
import oracle.xml.xsql.XSQLPageRequest;
import oracle.xml.xsql.XSQLDocumentSerializer;
import org.apache.fop.apps.Driver;
import org.apache.log.output.NullOutputLogTarget;
/**
 * Tested with the FOP 0.20.3RC release from 19-Jan-2002
 */
public class XSQLFOPSerializer implements XSQLDocumentSerializer {
  private static final String PDFMIME = "application/pdf";
  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    try { 
      // First make sure we can load the driver
      Driver FOPDriver = new Driver();
      // Tell FOP not to spit out any messages by default.
      // You can modify this code to create your own FOP Serializer
      // that logs the output to one of many different logger targets
      // using the Apache LogKit API
      Logger logger=Hierarchy.getDefaultHierarchy().getLoggerFor("XSQLServlet");
      logger.setLogTargets(new LogTarget[]{new NullOutputLogTarget()});
      FOPDriver.setLogger(logger);
      // Some of FOP's messages appear to still use MessageHandler.
      MessageHandler.setOutputMethod(MessageHandler.NONE);
      // Then set the content type before getting the reader
      env.setContentType(PDFMIME);
      FOPDriver.setOutputStream(env.getOutputStream());
      FOPDriver.setRenderer(FOPDriver.RENDER_PDF); FOPDriver.render(doc);
    }
    catch (Exception e) {
      // Cannot write PDF output for the error anyway.
      // So maybe this stack trace will be useful info
      e.printStackTrace(System.err);
    }
  }
}
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<code dir="ltr"><a href="http://xml.apache.org/fop">http://xml.apache.org/fop</a></code> to learn about the Formatting Objects Processor</div>
</div>
<!-- class="sect1" -->
<a id="BABBECCD"></a>
<div id="ADXDK19679" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Performing XSQL Customizations</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#i1024825">Writing Custom XSQL Action Handlers</a></p>
</li>
<li>
<p><a href="#CHEDBIBC">Implementing Custom XSQL Serializers</a></p>
</li>
<li>
<p><a href="#i1025073">Using a Custom XSQL Connection Manager for JDBC Datasources</a></p>
</li>
<li>
<p><a href="#CHECAFJG">Writing Custom XSQL Connection Managers</a></p>
</li>
<li>
<p><a href="#CHEFHCGD">Implementing a Custom XSQLErrorHandler</a></p>
</li>
<li>
<p><a href="#CHEEHHED">Providing a Custom XSQL Logger Implementation</a></p>
</li>
</ul>
<a id="i1024825"></a>
<div id="ADXDK19680" class="sect2">
<h3 class="sect2">Writing Custom XSQL Action Handlers</h3>
<p>When a task requires custom processing, and none of the built-in actions listed in <a href="adx_ref_xsql.htm#BJEFBDGB">Table 30-2, "XSQL Configuration File Settings"</a> does exactly what you need, you can write your own actions.</p>
<p>The XSQL pages engine processes an XSQL page by looking for action elements from the <code dir="ltr">xsql</code> namespace and invoking an appropriate action element handler class to process each action. The processor supports any action that implements the <code dir="ltr">XSQLActionHandler</code> interface. All of the built-in actions implement this interface.</p>
<p>The XSQL engine processes the actions in a page in the following way. For each action in the page, the engine performs the following steps:</p>
<ol>
<li>
<p>Constructs an instance of the action handler class using the default constructor</p>
</li>
<li>
<p>Initializes the handler instance with the action element object and the page processor context by invoking the method <code dir="ltr">init(Element actionElt,XSQLPageRequest context</code>)</p>
</li>
<li>
<p>Invokes the method that allows the handler to handle the action <code dir="ltr">handleAction</code> (<code dir="ltr">Node</code> result)</p>
</li>
</ol>
<p>For built-in actions, the engine can map the XSQL action element name to the Java class that implements the handler of the action. <a href="adx_ref_xsql.htm#BJEFBDGB">Table 30-2, "XSQL Configuration File Settings"</a> lists the built-in actions and their corresponding classes.</p>
<p>For user-defined actions, use the following built-in action, replacing <code dir="ltr">fully.qualified.Classname</code> with the name of your class:</p>
<pre dir="ltr">
&lt;xsql:action handler="fully.qualified.Classname" ... /&gt;
</pre>
<p>The <code dir="ltr">handler</code> attribute provides the fully-qualified name of the Java class that implements the custom action handler.</p>
<div id="ADXDK19681" class="sect3"><a id="sthref424"></a>
<h4 class="sect3">Implementing the XSQLActionHandler Interface</h4>
<p>To create a custom action handler, provide a class that implements the <code dir="ltr">oracle.xml.xsql.XSQLActionHandler</code> interface. Most custom action handlers extend <code dir="ltr">oracle.xml.xsql.XSQLActionHandlerImpl</code>, which provides a default implementation of the <code dir="ltr">init()</code> method and offers useful helper methods.</p>
<p>When an action handler's <code dir="ltr">handleAction()</code> method is invoked by the XSQL pages processor, a DOM fragment is passed to the action implementation. The action handler appends any dynamically created XML content returned to the page to the root node.</p>
<p>The XSQL processor conceptually replaces the action element in the XSQL page with the content of this document fragment. It is legal for an action handler to append nothing to this fragment if it has no XML content to add to the page.</p>
<p>While writing you custom action handlers, some methods on the <code dir="ltr">XSQLActionHandlerImpl</code> class are helpful. <a href="#g1043068">Table 15-2</a> lists these methods.</p>
<div id="ADXDK19682" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref425"></a><a id="g1043068"></a>Table 15-2 Helpful Methods in the XSQLActionHandlerImpl Class</p>
<table class="cellalignment1211" title="Helpful Methods in the XSQLActionHandlerImpl Class" summary="Method Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t8">Method Name</th>
<th class="cellalignment1212" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t8" headers="r1c1-t8">
<pre dir="ltr">
getActionElement
</pre></td>
<td class="cellalignment1213" headers="r2c1-t8 r1c2-t8">
<p>Returns the current action element being handled.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t8" headers="r1c1-t8">
<pre dir="ltr">
getActionElementContent
</pre></td>
<td class="cellalignment1213" headers="r3c1-t8 r1c2-t8">
<p>Returns the text content of the current action element, with all lexical parameters substituted appropriately.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t8" headers="r1c1-t8">
<pre dir="ltr">
getPageRequest
</pre></td>
<td class="cellalignment1213" headers="r4c1-t8 r1c2-t8">
<p>Returns the current XSQL pages processor context. Using this object you do the following:</p>
<ul>
<li>
<p><code dir="ltr">setPageParam()</code></p>
<p>Set a page parameter value.</p>
</li>
<li>
<p><code dir="ltr">getPostedDocument()/setPostedDocument()</code></p>
<p>Get or set the posted XML document.</p>
</li>
<li>
<p><code dir="ltr">translateURL()</code></p>
<p>Translate a relative URL to an absolute URL.</p>
</li>
<li>
<p><code dir="ltr">getRequestObject()/setRequestObject()</code></p>
<p>Get or set objects in the page request context that can be shared across actions in a single page.</p>
</li>
<li>
<p><code dir="ltr">getJDBCConnection()</code></p>
<p>Gets the JDBC connection in use by this page (possible null if no connection in use).</p>
</li>
<li>
<p><code dir="ltr">getRequestType()</code></p>
<p>Detect whether you are running in the Servlet, Command Line, or Programmatic context. For example, if the request type is Servlet then you can cast the <code dir="ltr">XSQLPageRequest</code> object to the more specific <code dir="ltr">XSQLServletPageRequest</code> to access servlet-specific methods such as <code dir="ltr">getHttpServletRequest</code>, <code dir="ltr">getHttpServletResponse</code>, and <code dir="ltr">getServletContext</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t8" headers="r1c1-t8">
<pre dir="ltr">
getAttributeAllowingParam
</pre></td>
<td class="cellalignment1213" headers="r5c1-t8 r1c2-t8">
<p>Retrieves the attribute value from an element, resolving any XSQL lexical parameter references that might appear in value of the attribute. Typically this method is applied to the action element itself, but it is also useful for accessing attributes of subelements. To access an attribute value without allowing lexical parameters, use the standard <code dir="ltr">getAttribute()</code> method on the DOM <code dir="ltr">Element</code> interface.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t8" headers="r1c1-t8">
<pre dir="ltr">
appendSecondaryDocument
</pre></td>
<td class="cellalignment1213" headers="r6c1-t8 r1c2-t8">
<p>Appends the contents of an external XML document to the root of the action handler result content.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t8" headers="r1c1-t8">
<pre dir="ltr">
addResultElement
</pre></td>
<td class="cellalignment1213" headers="r7c1-t8 r1c2-t8">
<p>Simplifies appending a single element with text content to the root of the action handler result content.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t8" headers="r1c1-t8">
<pre dir="ltr">
firstColumnOfFirstRow
</pre></td>
<td class="cellalignment1213" headers="r8c1-t8 r1c2-t8">
<p>Returns the first column value of the first row of a SQL statement. Requires the current page to have a connection attribute on its document element, or an error is returned.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t8" headers="r1c1-t8">
<pre dir="ltr">
getBindVariableCount
</pre></td>
<td class="cellalignment1213" headers="r9c1-t8 r1c2-t8">
<p>Returns the number of tokens in the space-delimited list of <code dir="ltr">bind-params</code>. This number indicates how many bind variables are expected to be bound to parameters.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t8" headers="r1c1-t8">
<pre dir="ltr">
handleBindVariables
</pre></td>
<td class="cellalignment1213" headers="r10c1-t8 r1c2-t8">
<p>Manages the binding of JDBC bind variables that appear in a prepared statement with the parameter values specified in the <code dir="ltr">bind-params</code> attribute on the current action element. If the statement is already using a number of bind variables prior to call this method, you can pass the number of existing bind variable slots in use as well.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t8" headers="r1c1-t8">
<pre dir="ltr">
reportErrorIncludingStatement
</pre></td>
<td class="cellalignment1213" headers="r11c1-t8 r1c2-t8">
<p>Reports an error. The error includes the offending (SQL) statement that caused the problem and optionally includes a numeric error code.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t8" headers="r1c1-t8">
<pre dir="ltr">
reportFatalError
</pre></td>
<td class="cellalignment1213" headers="r12c1-t8 r1c2-t8">
<p>Reports a fatal error.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t8" headers="r1c1-t8">
<pre dir="ltr">
reportMissingAttribute
</pre></td>
<td class="cellalignment1213" headers="r13c1-t8 r1c2-t8">
<p>Reports an error that a required action handler attribute is missing by using the <code dir="ltr">&lt;xsql-error&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t8" headers="r1c1-t8">
<pre dir="ltr">
reportStatus
</pre></td>
<td class="cellalignment1213" headers="r14c1-t8 r1c2-t8">
<p>Reports action handler status by using the <code dir="ltr">&lt;xsql-status&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t8" headers="r1c1-t8">
<pre dir="ltr">
requiredConnectionProvided
</pre></td>
<td class="cellalignment1213" headers="r15c1-t8 r1c2-t8">
<p>Checks whether a connection is available for this request and outputs an errorgram into the page if no connection is available.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t8" headers="r1c1-t8">
<pre dir="ltr">
variableValue
</pre></td>
<td class="cellalignment1213" headers="r16c1-t8 r1c2-t8">
<p>Returns the value of a lexical parameter, taking into account all scoping rules that might determine its default value.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" -->
<p><a href="#BABDHCCI">Example 15-19</a> shows a custom action handler named <code dir="ltr">MyIncludeXSQLHandler</code> that leverages one of the built-in action handlers. It uses arbitrary Java code to modify the XML fragment returned by this handler before appending its result to the XSQL page.</p>
<div id="ADXDK19683" class="example">
<p class="titleinexample"><a id="BABDHCCI"></a>Example 15-19 MyIncludeXSQLHandler.java</p>
<pre dir="ltr">
import oracle.xml.xsql.*;
import oracle.xml.xsql.actions.XSQLIncludeXSQLHandler;
import org.w3c.dom.*;
import java.sql.SQLException;
public class MyIncludeXSQLHandler extends XSQLActionHandlerImpl {
  XSQLActionHandler nestedHandler = null;
  public void init(XSQLPageRequest req, Element action) {
    super.init(req, action);
    // Create an instance of an XSQLIncludeXSQLHandler and init() the handler by 
    // passing the current request/action. This assumes the XSQLIncludeXSQLHandler 
    // will pick up its href="xxx.xsql" attribute from the current action element.
    nestedHandler = new XSQLIncludeXSQLHandler();
    nestedHandler.init(req,action);
  }
  public void handleAction(Node result) throws SQLException {
    DocumentFragment df=result.getOwnerDocument().createDocumentFragment();
    nestedHandler.handleAction(df);
    // Custom Java code here can work on the returned document fragment
    // before appending the final, modified document to the result node.
    // For example, add an attribute to the first child.
    Element e = (Element)df.getFirstChild();
    if (e != null) {
      e.setAttribute("ExtraAttribute","SomeValue");
    }
    result.appendChild(df);
  }
}
</pre></div>
<!-- class="example" -->
<p>You may need to write custom action handlers that work differently based on whether the page is requested through the XSQL servlet, the XSQL command-line utility, or programmatically through the <code dir="ltr">XSQLRequest</code> class.You can invoke <code dir="ltr">getPageRequest()</code> in your action handler implementation to obtain a reference to the <code dir="ltr">XSQLPageRequest</code> interface for the current page request. By calling <code dir="ltr">getRequestType()</code> on the <code dir="ltr">XSQLPageRequest</code> object, you can determine whether the request is coming from the Servlet, Command Line, or Programmatic routes. If the return value is <code dir="ltr">Servlet</code>, then you can access the HTTP servlet request, response, and servlet context objects as shown in <a href="#BABDDIGI">Example 15-20</a>.</p>
<div id="ADXDK19684" class="example">
<p class="titleinexample"><a id="BABDDIGI"></a>Example 15-20 Testing for the Servlet Request</p>
<pre dir="ltr">
XSQLServletPageRequest xspr = (XSQLServletPageRequest)getPageRequest();
if (xspr.getRequestType().equals("Servlet")) {
  HttpServletRequest     req  = xspr.getHttpServletRequest();
  HttpServletResponse   resp  = xspr.getHttpServletResponse();
  ServletContext        cont  = xspr.getServletContext();
  // Do something here with req, resp, or cont. Note that writing to the response 
  // directly from a handler produces unexpected results. All the servlet or your 
  // custom Serializer to write to the servlet response output stream at the right 
  // moment later when all action elements have been processed.
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="i1025044"></a>
<div id="ADXDK19685" class="sect3">
<h4 class="sect3">Using Multivalued Parameters in Custom XSQL Actions<a id="sthref426"></a><a id="sthref427"></a><a id="sthref428"></a></h4>
<p><code dir="ltr">XSQLActionHandlerImpl</code> is the base class for custom XSQL actions. It supports the following:</p>
<ul>
<li>
<p>Array-named lexical parameter substitution</p>
</li>
<li>
<p>Array-named bind variables</p>
</li>
<li>
<p>Simple-valued parameters</p>
</li>
</ul>
<p>If your custom actions use methods such as <code dir="ltr">getAttributeAllowingParam()</code>, <code dir="ltr">getActionElementContent()</code>, or <code dir="ltr">handleBindVariables()</code> from this base class, you pick up multi-valued parameter functionality for free in your custom actions.</p>
<p>Use the <code dir="ltr">getParameterValues()</code> method on the <code dir="ltr">XSQLPageRequest</code> interface to explicitly get a parameter value as a <code dir="ltr">String[]</code>. The helper method <code dir="ltr">variableValues()</code> in <code dir="ltr">XSQLActionHandlerImpl</code> enables you to use this functionality from within a custom action handler if you need to do so programmatically.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHEDBIBC"></a>
<div id="ADXDK19686" class="sect2">
<h3 class="sect2">Implementing Custom XSQL Serializers</h3>
<p>You can implement a user-defined serializer class to control how the final XSQL datapage is serialized to a text or binary stream. A user-defined serializer must implement the <code dir="ltr">oracle.xml.xsql.XSQLDocumentSerializer</code> interface. The interface contains the following single method:</p>
<pre dir="ltr">
void serialize(org.w3c.dom.Document doc, XSQLPageRequest env) throws Throwable;
</pre>
<p>Only DOM-based serializers are supported. A custom serializer class is expected to perform the following tasks in the correct order:</p>
<ol>
<li>
<p>Set the content type of the serialized stream before writing any content to the output <code dir="ltr">PrintWriter</code> (or <code dir="ltr">OutputStream</code>).</p>
<p>Set the type by calling <code dir="ltr">setContentType()</code> on the <code dir="ltr">XSQLPageRequest</code> passed to your serializer. When setting the content type, you can set a MIME type as follows:</p>
<pre dir="ltr">
env.setContentType("text/html");
</pre>
<p>Alternatively, you can set a MIME type with an explicit output encoding character set as follows:</p>
<pre dir="ltr">
env.setContentType("text/html;charset=Shift_JIS");
</pre></li>
<li>
<p>Call either <code dir="ltr">getWriter()</code> or <code dir="ltr">getOutputStream()</code> (but not both) on the <code dir="ltr">XSQLPageRequest</code> to obtain the appropriate <code dir="ltr">PrintWriter</code> or <code dir="ltr">OutputStream</code> for serializing the content.</p>
</li>
</ol>
<p>The custom serializer in <a href="#BABDGGCJ">Example 15-21</a> illustrates a simple implementation that serializes an HTML document containing the name of the document element of the current XSQL data page.</p>
<div id="ADXDK19687" class="example">
<p class="titleinexample"><a id="BABDGGCJ"></a>Example 15-21 Custom Serializer</p>
<pre dir="ltr">
package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import java.io.PrintWriter;
import oracle.xml.xsql.*;

public class XSQLSampleSerializer implements XSQLDocumentSerializer {
  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    String encoding = env.getPageEncoding();  // Use same encoding as XSQL page
                                              // template. Set to specific
                                              // encoding if necessary
    String mimeType = "text/html"; // Set this to the appropriate content type
    // (1) Set content type using the setContentType on the XSQLPageRequest
    if (encoding != null &amp;&amp; !encoding.equals("")) {
      env.setContentType(mimeType+";charset="+encoding);
    }
    else {
      env.setContentType(mimeType);
    }
    // (2) Get the output writer from the XSQLPageRequest
    PrintWriter e = env.getWriter();
    // (3) Serialize the document to the writer
    e.println("&lt;html&gt;Document element is &lt;b&gt;"+
              doc.getDocumentElement().getNodeName()+"&lt;/b&gt;&lt;/html&gt;");
  }
}
</pre></div>
<!-- class="example" -->
<div id="ADXDK19688" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref429"></a>
<h4 class="sect3">Techniques for Using a Custom Serializer</h4>
<p>There are two ways to use a custom serializer, depending on whether you need to first perform an XSLT transformation before serializing or not.</p>
<p>To perform an XSLT transformation before using a custom serializer, add the <code dir="ltr">serializer="java:fully.qualified.ClassName"</code> in the <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction at the top of your page. The following examples illustrates this technique:</p>
<pre dir="ltr">
&lt;?xml version="1.0?&gt;
&lt;?xml-stylesheet type="text/xsl" href="mystyle.xsl"
                 serializer="java:my.pkg.MySerializer"?&gt;
</pre>
<p>If you only need the custom serializer, then leave out the <code dir="ltr">type</code> and <code dir="ltr">href</code> attributes. The following example illustrates this technique:</p>
<pre dir="ltr">
&lt;?xml version="1.0?&gt;
&lt;?xml-stylesheet serializer="java:my.pkg.MySerializer"?&gt;
</pre></div>
<!-- class="sect3" -->
<div id="ADXDK19689" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref430"></a>
<h4 class="sect3">Assigning a Short Name to a Custom Serializer</h4>
<p>You can also assign a short name to your custom serializers in the <code dir="ltr">&lt;serializerdefs&gt;</code> section of the XSQL configuration file. You can then use the nickname in the serializer attribute instead to save typing. Note that the short name is case sensitive.</p>
<p>Assume that you have the information shown in <a href="#BABJGEEH">Example 15-22</a> in your XSQL configuration file.</p>
<div id="ADXDK19690" class="example">
<p class="titleinexample"><a id="BABJGEEH"></a>Example 15-22 Assigning Short Names to Custom Serializers</p>
<pre dir="ltr">
&lt;XSQLConfig&gt;
  &lt;!--and so on. --&gt;
  &lt;serializerdefs&gt;
    &lt;serializer&gt;
      &lt;name&gt;Sample&lt;/name&gt;
      &lt;class&gt;oracle.xml.xsql.serializers.XSQLSampleSerializer&lt;/class&gt;
    &lt;/serializer&gt;
    &lt;serializer&gt;
      &lt;name&gt;FOP&lt;/name&gt;
      &lt;class&gt;oracle.xml.xsql.serializers.XSQLFOPSerializer&lt;/class&gt;
    &lt;/serializer&gt;
  &lt;/serializerdefs&gt;
&lt;/XSQLConfig&gt;
</pre></div>
<!-- class="example" -->
<p>You can use the short names "Sample" or "FOP" in a stylesheet instruction as follows:</p>
<pre dir="ltr">
&lt;?xml-stylesheet type="text/xsl" href="emp-to-xslfo.xsl" serializer="FOP"?&gt;
&lt;?xml-stylesheet serializer="Sample"?&gt;
</pre>
<p>The <code dir="ltr">XSQLPageRequest</code> interface supports both a <code dir="ltr">getWriter()</code> and a <code dir="ltr">getOutputStream()</code> method. Custom serializers can call <code dir="ltr">getOutputStream()</code> to return an <code dir="ltr">OutputStream</code> instance into which binary data can be serialized. When you use the XSQL servlet, writing to this output stream results in writing binary information to the servlet output stream.</p>
<p>The serializer shown in <a href="#BABEJAHC">Example 15-23</a> illustrates an example of writing a dynamic GIF image. In this example the GIF image is a static "ok" icon, but it shows the basic technique that a more sophisticated image serializer must use.</p>
<div id="ADXDK19691" class="example">
<p class="titleinexample"><a id="BABEJAHC"></a>Example 15-23 Writing a Dynamic GIF Image</p>
<pre dir="ltr">
package oracle.xml.xsql.serializers;
import org.w3c.dom.Document;
import java.io.*;
import oracle.xml.xsql.*;

public class XSQLSampleImageSerializer implements XSQLDocumentSerializer {
   // Byte array representing a small "ok" GIF image
   private static byte[] okGif =
     {(byte)0x47,(byte)0x49,(byte)0x46,(byte)0x38,
      (byte)0x39,(byte)0x61,(byte)0xB,(byte)0x0,
      (byte)0x9,(byte)0x0,(byte)0xFFFFFF80,(byte)0x0,
      (byte)0x0,(byte)0x0,(byte)0x0,(byte)0x0,
      (byte)0xFFFFFFFF,(byte)0xFFFFFFFF,(byte)0xFFFFFFFF,(byte)0x2C,
      (byte)0x0,(byte)0x0,(byte)0x0,(byte)0x0,
      (byte)0xB,(byte)0x0,(byte)0x9,(byte)0x0,
      (byte)0x0,(byte)0x2,(byte)0x14,(byte)0xFFFFFF8C,
      (byte)0xF,(byte)0xFFFFFFA7,(byte)0xFFFFFFB8,(byte)0xFFFFFF9B,
      (byte)0xA,(byte)0xFFFFFFA2,(byte)0x79,(byte)0xFFFFFFE9,
      (byte)0xFFFFFF85,(byte)0x7A,(byte)0x27,(byte)0xFFFFFF93,
      (byte)0x5A,(byte)0xFFFFFFE3,(byte)0xFFFFFFEC,(byte)0x75,
      (byte)0x11,(byte)0xFFFFFF85,(byte)0x14,(byte)0x0,
      (byte)0x3B};

  public void serialize(Document doc, XSQLPageRequest env) throws Throwable {
    env.setContentType("image/gif");
    OutputStream os = env.getOutputStream();
    os.write(okGif,0,okGif.length);
    os.flush();
  }
}
</pre></div>
<!-- class="example" -->
<p>Using the XSQL command-line utility, the binary information is written to the target output file. Using the <code dir="ltr">XSQLRequest</code> API, two constructors exist that allow the caller to supply the target <code dir="ltr">OutputStream</code> to use for the results of page processing.</p>
<p>Note that your serializer must either call <code dir="ltr">getWriter()</code> for textual output or <code dir="ltr">getOutputStream()</code> for binary output but not both. Calling both in the same request raises an error.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1025073"></a>
<div id="ADXDK19692" class="sect2">
<h3 class="sect2">Using a Custom XSQL Connection Manager for JDBC Datasources</h3>
<p>As an alternative to defining your named connections in the XSQL configuration file, you can use one of the two provided <code dir="ltr">XSQLConnectionManager</code> implementations. These implementations enable you to use your servlet container's JDBC Datasource implementation and related connection pooling features.</p>
<p>This XSQL pages framework provides the following alternative connection manager implementations:</p>
<ul>
<li>
<p><code dir="ltr">oracle.xml.xsql.XSQLDatasourceConnectionManager</code></p>
<p>Consider using this connection manager if your servlet container's datasource implementation does <span class="italic">not</span> use the Oracle JDBC driver. Features of the XSQL pages system such as <code dir="ltr">&lt;xsql:ref-cursor-function&gt;</code> and <code dir="ltr">&lt;xsql:include-owa&gt;</code> are not available when you do not use an Oracle JDBC driver.</p>
</li>
<li>
<p><code dir="ltr">oracle.xml.xsql.XSQLOracleDatasourceConnectionManager</code></p>
<p>Consider using this connection manager when your datasource implementation returns JDBC <code dir="ltr">PreparedStatement</code> and <code dir="ltr">CallableStatement</code> objects that implement the <code dir="ltr">oracle.jdbc.PreparedStatement</code> and <code dir="ltr">oracle.jdbc.CallableStatement</code> interfaces. The Oracle Application Server has a datasource implementation that performs this task.</p>
</li>
</ul>
<p>When using either of the preceding alternative connection manager implementations, the value of the connection attribute in your XSQL page template is the JNDI name used to look up your desired datasource. For example, the value of the connection attribute might look like the following:</p>
<ul>
<li>
<p><code dir="ltr">jdbc/scottDS</code></p>
</li>
<li>
<p><code dir="ltr">java:comp/env/jdbc/MyDatasource</code></p>
</li>
</ul>
<p>If you are not using the default XSQL pages connection manager, then needed connection pooling functionality must be provided by the alternative connection manager implementation. In the case of the preceding two options based on JDBC datasources, you must properly configure your servlet container to supply the connection pooling. See your servlet container documentation for instructions on how to properly configure the datasources to offer pooled connections.</p>
</div>
<!-- class="sect2" -->
<a id="CHECAFJG"></a>
<div id="ADXDK19693" class="sect2">
<h3 class="sect2">Writing Custom XSQL Connection Managers</h3>
<p>You can provide a custom connection manager to replace the built-in connection management mechanism. To provide a custom connection manager implementation, you must perform the following steps:</p>
<ol>
<li>
<p>Write a connection manager factory class that implements the <code dir="ltr">oracle.xml.xsql.XSQLConnectionManagerFactory</code> interface.</p>
</li>
<li>
<p>Write a connection manager class that implements the <code dir="ltr">oracle.xml.xsql.XSQLConnectionManager</code> interface.</p>
</li>
<li>
<p>Change the name of the <code dir="ltr">XSQLConnectionManagerFactory</code> class in your XSQL configuration file.</p>
</li>
</ol>
<p>The XSQL servlet uses your connection management scheme instead of the XSQL pages default scheme.</p>
<p>You can set your custom connection manager factory as the default connection manager factory by providing the class name in the XSQL configuration file. Set the factory in the following section:</p>
<pre dir="ltr">
&lt;!--
 | Set the name of the XSQL Connection Manager Factory
 | implementation. The class must implement the
 | oracle.xml.xsql.XSQLConnectionManagerFactory interface.
 | If unset, the default is to use the built-in connection
 | manager implementation in 
 | oracle.xml.xsql.XSQLConnectionManagerFactoryImpl
+--&gt;
  &lt;connection-manager&gt;
      &lt;factory&gt;oracle.xml.xsql.XSQLConnectionManagerFactoryImpl&lt;/factory&gt;
  &lt;/connection-manager&gt;
</pre>
<p>In addition to specifying the default connection manager factory, you can associate a custom connection factory with a <code dir="ltr">XSQLRequest</code> object by using APIs provided.</p>
<p>The responsibility of the <code dir="ltr">XSQLConnectionManagerFactory</code> is to return an instance of an <code dir="ltr">XSQLConnectionManager</code> for use by the current request. In a multithreaded environment such as a servlet engine, the <code dir="ltr">XSQLConnectionManager</code> object must ensure that a single <code dir="ltr">XSQLConnection</code> instance is not used by two different threads. This aim is realized by marking the connection as in use for the time between the <code dir="ltr">getConnection()</code> and <code dir="ltr">releaseConnection()</code> method calls. The default XSQL connection manager implementation automatically pools named connections and adheres to this thread-safe policy.</p>
<p>If your custom implementation of <code dir="ltr">XSQLConnectionManager</code> implements the optional <code dir="ltr">oracle.xml.xsql.XSQLConnectionManagerCleanup</code> interface, then your connection manager can clean up any resources it has allocated. For example, if your servlet container invokes the <code dir="ltr">destroy()</code> method on the <code dir="ltr">XSQLServlet</code> servlet, which can occur during online administration of the servlet for example, the connection manager has a chance to clean up resources as part of the servlet destruction process.</p>
<div id="ADXDK19694" class="sect3"><a id="sthref431"></a>
<h4 class="sect3">Accessing Authentication Information in a <a id="sthref432"></a>Custom Connection Manager</h4>
<p>To use the HTTP authentication mechanism to get the username and password to connect to the database, write a customized connection manager. You can then invoke a <code dir="ltr">getConnection()</code> method to obtain the needed information.</p>
<p>You can write a Java program that follows these steps:</p>
<ol>
<li>
<p>Pass an instance of the <code dir="ltr">oracle.xml.xsql.XSQLPageRequest</code> interface to the <code dir="ltr">getConnection()</code> method.</p>
</li>
<li>
<p>Invoke <code dir="ltr">getRequestType()</code> to ensure that the request type is <code dir="ltr">Servlet</code>.</p>
</li>
<li>
<p>Cast the <code dir="ltr">XSQLPageRequest</code> object to an <code dir="ltr">XSQLServletPageRequest</code>.</p>
</li>
<li>
<p>Call <code dir="ltr">getHttpServletRequest()</code> on the result of the preceding step.</p>
</li>
<li>
<p>Obtain the authentication information from the <code dir="ltr">javax.servlet.http.HttpServletResponse</code> object returned by the previous call.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHEFHCGD"></a>
<div id="ADXDK19695" class="sect2">
<h3 class="sect2">Implementing a Custom XSQLErrorHandler</h3>
<p>You may want to control how serious page processor errors such as an unavailable connection are reported to users. You can achieve this task by implementing the <code dir="ltr">oracle.xml.xsql.XSQLErrorHandler</code> interface. The interface contains the following single method signature:</p>
<pre dir="ltr">
public interface XSQLErrorHandler {
  public void handleError( XSQLError err, XSQLPageRequest env);
}
</pre>
<p>You can provide a class that implements the <code dir="ltr">XSQLErrorHandler</code> interface to customize how the XSQL pages processor writes error messages. The new <code dir="ltr">XSQLError</code> object encapsulates the error information and provides access to the error code, formatted error message, and so on.</p>
<p><a href="#BABEHDDD">Example 15-24</a> illustrates a sample implementation of <code dir="ltr">XSQLErrorHandler</code>.</p>
<div id="ADXDK19696" class="example">
<p class="titleinexample"><a id="BABEHDDD"></a>Example 15-24 myErrorHandler class</p>
<pre dir="ltr">
package example;
import oracle.xml.xsql.*;
import java.io.*;
public class myErrorHandler implements XSQLErrorHandler {
  public void logError( XSQLError err, XSQLPageRequest env) {
    // Must set the content type before writing anything out
    env.setContentType("text/html");
    PrintWriter pw = env.getErrorWriter();
    pw.println("&lt;H1&gt;ERROR&lt;/H1&gt;&lt;hr&gt;"+err.getMessage());    
  }
}
</pre></div>
<!-- class="example" -->
<p>You can control which custom <code dir="ltr">XSQLErrorHandler</code> implementation is used in the following distinct ways:</p>
<ol>
<li>
<p>Define the name of a custom <code dir="ltr">XSQLErrorHandler</code> implementation class in the XSQL configuration file. You must provide the fully-qualified class name of your error handler class as the value of the <code dir="ltr">/XSQLConfig/processor/error-handler/class</code> entry.</p>
<p>If the XSQL processor can load this class, and if it correctly implements the <code dir="ltr">XSQLErrorHandler</code> interface, then it uses this class as a singleton and replaces the default implementation globally wherever page processor errors are reported.</p>
</li>
<li>
<p>Override the error writer on a per page basis by using the <code dir="ltr">errorHandler</code> (or <code dir="ltr">xsql:errorHandler</code>) attribute on the document element of the page. The attribute value is the fully-qualified class name of a class that implements the <code dir="ltr">XSQLErrorHandler</code> interface. This class reports the errors for this page only. The class is instantiated on each page request by the page engine.</p>
</li>
</ol>
<p>You can use a combination of the preceding approaches if needed.</p>
</div>
<!-- class="sect2" -->
<a id="CHEEHHED"></a>
<div id="ADXDK19697" class="sect2">
<h3 class="sect2">Providing a Custom XSQL Logger Implementation</h3>
<p>You can optionally register custom code to handle the logging of the start and end of each XSQL page request. Your custom logger code must provide an implementation of the <code dir="ltr">oracle.xml.xsql.XSQLLoggerFactory</code> and <code dir="ltr">oracle.xml.xsql.XSQLLogger</code> interfaces.</p>
<p>The <code dir="ltr">XSQLLoggerFactory</code> interface contains the following single method:</p>
<pre dir="ltr">
public interface XSQLLoggerFactory {
  public XSQLLogger create( XSQLPageRequest env);
}
</pre>
<p>You can provide a class that implements the <code dir="ltr">XSQLLoggerFactory</code> interface to decide how <code dir="ltr">XSQLLogger</code> objects are created (or reused) for logging. The XSQL processor holds a reference to the <code dir="ltr">XSQLLogger</code> object returned by the factory for the duration of a page request. The processor uses it to log the start and end of each page request by invoking the <code dir="ltr">logRequestStart()</code> and <code dir="ltr">logRequestEnd()</code> methods.</p>
<p>The <code dir="ltr">XSQLLogger</code> interface is as follows:</p>
<pre dir="ltr">
public interface XSQLLogger {
   public void logRequestStart(XSQLPageRequest env) ;
   public void logRequestEnd(XSQLPageRequest env);
}
</pre>
<p>The classes in <a href="#BABEGBFA">Example 15-25</a> and <a href="#BABBDEGD">Example 15-26</a> illustrate a trivial implementation of a custom logger. The <code dir="ltr">XSQLLogger</code> implementation in <a href="#BABEGBFA">Example 15-25</a> notes the time the page request started. It then logs the page request end by printing the name of the page request and the elapsed time to <code dir="ltr">System.out</code>.</p>
<div id="ADXDK19698" class="example">
<p class="titleinexample"><a id="BABEGBFA"></a>Example 15-25 SampleCustomLogger Class</p>
<pre dir="ltr">
package example;
import oracle.xml.xsql.*;
public class SampleCustomLogger implements XSQLLogger  {
  long start = 0;
  public void logRequestStart(XSQLPageRequest env) {
    start = System.currentTimeMillis();
  }
  public void logRequestEnd(XSQLPageRequest env) {
    long secs = System.currentTimeMillis() - start;
    System.out.println("Request for " + env.getSourceDocumentURI()
                        + " took "+ secs + "ms");
  }
}
</pre></div>
<!-- class="example" -->
<p>The factory implementation is shown in <a href="#BABBDEGD">Example 15-26</a>.</p>
<div id="ADXDK19699" class="example">
<p class="titleinexample"><a id="BABBDEGD"></a>Example 15-26 SampleCustomLoggerFactory Class</p>
<pre dir="ltr">
package example;
import oracle.xml.xsql.*;
public class SampleCustomLoggerFactory implements XSQLLoggerFactory {
  public XSQLLogger create(XSQLPageRequest env) {
    return new SampleCustomLogger();
  }
}
</pre></div>
<!-- class="example" -->
<p>To register a custom logger factory, edit the <code dir="ltr">XSQLConfig.xml</code> file and provide the name of your custom logger factory class as the content to the <code dir="ltr">/XSQLConfig/processor/logger/factory</code> element. <a href="#BABHCGBD">Example 15-27</a> illustrates this technique.</p>
<div id="ADXDK19700" class="example">
<p class="titleinexample"><a id="BABHCGBD"></a>Example 15-27 Registering a Custom Logger Factory</p>
<pre dir="ltr">
&lt;XSQLConfig&gt;
    :
  &lt;processor&gt;
         :
      &lt;logger&gt;
         &lt;factory&gt;example.SampleCustomLoggerFactory&lt;/factory&gt;
      &lt;/logger&gt;
         :
   &lt;/processor&gt;
&lt;/XSQLConfig&gt;
</pre></div>
<!-- class="example" -->
<p>By default, <code dir="ltr">&lt;logger&gt;</code> section is commented out. There is no default logger.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_j_xsqlpub.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_pt_c.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
