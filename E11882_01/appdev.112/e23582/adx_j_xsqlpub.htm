<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Using the XSQL Pages Publishing Framework</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:38Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_ref_dlf.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_j_xsqladv.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">22/47</span> <!-- End Header -->
<div id="ADXDK080" class="chapter"><a id="g1070142"></a> <a id="i1029236"></a>
<h1 class="chapter"><span class="secnum">14</span> Using the XSQL <a id="sthref381"></a>Pages Publishing Framework</h1>
<p>This chapter contains these topics:</p>
<ul>
<li>
<p><a href="#CHEJJCBI">Introduction to the XSQL Pages Publishing Framework</a></p>
</li>
<li>
<p><a href="#CACBHIIC">Using the XSQL Pages Publishing Framework: Overview</a></p>
</li>
<li>
<p><a href="#i1036315">Generating and Transforming XML with XSQL Servlet</a></p>
</li>
<li>
<p><a href="#CHEDEEFA">Using XSQL in Java Programs</a></p>
</li>
<li>
<p><a href="#i1025108">XSQL Pages Tips and Techniques</a></p>
</li>
</ul>
<a id="CHEJJCBI"></a>
<div id="ADXDK19569" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Introduction to the XSQL Pages Publishing Framework</h2>
<p>The Oracle XSQL pages publishing framework is an extensible platform for publishing XML in multiple formats. The Java-based <a href="glossary.htm#i999060"><span class="xrefglossterm">XSQL servlet</span></a>, which is the center of the framework, provides a declarative interface for dynamically publishing dynamic Web content based on relational data.</p>
<p>The XSQL framework combines the power of SQL, XML, and XSLT. You can use it to create declarative templates called <a href="glossary.htm#CBAFGIBF"><span class="xrefglossterm">XSQL pages</span></a> to perform the following actions:</p>
<ul>
<li>
<p>Assemble dynamic XML datagrams based on parameterized SQL queries</p>
</li>
<li>
<p>Transform datagrams with XSLT to generate a result in an XML, HTML, or text-based format</p>
</li>
</ul>
<p>An XSQL page, so called because its default extension is <code dir="ltr">.xsql</code>, is an XML file that contains instructions for the XSQL servlet. The <a href="#CACCIIDJ">Example 14-1</a> shows a simple XSQL page. It uses the <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> action element to query the <code dir="ltr">hr.employees</code> table.</p>
<div id="ADXDK19570" class="example">
<p class="titleinexample"><a id="CACCIIDJ"></a>Example 14-1 Sample XSQL Page</p>
<pre dir="ltr">
&lt;?xml version="1.0"&gt;
&lt;?xml-stylesheet type="text/xsl" href="emplist.xsl"?&gt;
&lt;xsql:query connection="hr" xmlns:xsql="urn:oracle-xsql"&gt;
 SELECT * FROM employees
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>You can present a browser client with the data returned from the query in <a href="#CACCIIDJ">Example 14-1</a>. Assembling and transforming information for publishing requires no programming. You can perform most tasks in a declarative way. If one of the built-in features does not fit your needs, however, then you can use Java to integrate custom data sources or perform customized server-side processing.</p>
<p>In the XSQL pages framework, the <span class="italic">assembly</span> of information to be published is separate from presentation. This architectural feature enables you to do the following:</p>
<ul>
<li>
<p>Present the same data in multiple ways, including tailoring the presentation appropriately to the type of client device making the request (browser, cellular phone, PDA, and so on)</p>
</li>
<li>
<p>Reuse data by aggregating existing pages into new ones</p>
</li>
<li>
<p>Revise and enhance the presentation independently of the content</p>
</li>
</ul>
<a id="CHEHDDGD"></a>
<div id="ADXDK19571" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Prerequisites</h3>
<p>This chapter assumes that you are familiar with the following technologies:</p>
<ul>
<li>
<p>Oracle Database SQL. The XSQL framework accesses data in a database.</p>
</li>
<li>
<p>PL/SQL. The XDK supplies a PL/SQL API for XSU that mirrors the Java API.</p>
</li>
<li>
<p><a href="glossary.htm#i999282"><span class="xrefglossterm">Java Database Connectivity (JDBC)</span></a>. The XSQL pages framework depends on a JDBC driver for database connections.</p>
</li>
<li>
<p><a href="glossary.htm#i1000946"><span class="xrefglossterm">eXtensible Stylesheet Language Transformation (XSLT)</span></a>. You can use XSLT to transform the data into a format appropriate for delivery to the user.</p>
</li>
<li>
<p><a href="glossary.htm#i999059"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a>. The XSQL pages framework uses XSU to query the database.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CACBHIIC"></a>
<div id="ADXDK19572" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Using the XSQL Pages Publishing Framework: Overview</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CACDCHBE">Using the XSQL Pages Framework: Basic Process</a></p>
</li>
<li>
<p><a href="#i1023723">Setting Up the XSQL Pages Framework</a></p>
</li>
<li>
<p><a href="#CACGIHID">Running the XSQL Pages Demo Programs</a></p>
</li>
<li>
<p><a href="#CACHFDBD">Using the XSQL Pages Command-Line Utility</a></p>
</li>
</ul>
<a id="CACDCHBE"></a>
<div id="ADXDK19573" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the XSQL Pages Framework: Basic Process</h3>
<p>The XSQL page processor engine interprets, caches, and processes the contents of XSQL pages. <a href="#BABDJGAF">Figure 14-1</a> shows the basic architecture of the XSQL pages publishing framework. The XSQL page processor provides access from the following entry points:</p>
<ul>
<li>
<p>From the command line or in batch mode with the XSQL command-line utility. The <code dir="ltr">oracle.xml.xsql.XSQLCommandLine</code> class is the command-line interface.</p>
</li>
<li>
<p>Over the Web by using the XSQL servlet installed in a Web server. The <code dir="ltr">oracle.xml.xsql.XSQLServlet</code> class is the servlet interface.</p>
</li>
<li>
<p>As part of JSP applications by using <code dir="ltr">&lt;jsp:include&gt;</code> to include a template or <code dir="ltr">&lt;jsp:forward&gt;</code> to forward a template.</p>
</li>
<li>
<p>Programmatically by using the <code dir="ltr">oracle.xml.xsql.XSQLRequest</code> Java class.</p>
</li>
</ul>
<div id="ADXDK19574" class="figure">
<p class="titleinfigure"><a id="BABDJGAF"></a>Figure 14-1 XSQL Pages Framework Architecture</p>
<img width="600" height="256" src="img/xsql5.gif" alt="Description of Figure 14-1 follows" /><br />
<a id="sthref382" href="img_text/xsql5.htm">Description of "Figure 14-1 XSQL Pages Framework Architecture"</a><br />
<br /></div>
<!-- class="figure" -->
<p>You can run the same XSQL pages from any of the access points shown in <a href="#BABDJGAF">Figure 14-1</a>. Regardless of which way you use the XSQL page processor, it performs the following actions to generate a result:</p>
<ol>
<li>
<p>Receives a request to process an XSQL page. The request can come from the command line utility or programmatically from an <code dir="ltr">XSQLRequest</code> object.</p>
</li>
<li>
<p>Assembles an XML datagram by using the result of one or more SQL queries. The query is specified in the <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> element of the XSQL page.</p>
</li>
<li>
<p>Returns this XML datagram to the requestor.</p>
</li>
<li>
<p>Optionally transforms the datagram into any XML, HTML, or text-based format.</p>
</li>
</ol>
<p><a href="#BABECBGF">Figure 14-2</a> shows a typical Web-based scenario in which a Web server receives an HTTP request for <code dir="ltr">Page.xsql</code>, which contains a reference to the XSLT stylesheet <code dir="ltr">Style.xsl</code>. The XSQL page contains a database query.</p>
<div id="ADXDK19575" class="figure">
<p class="titleinfigure"><a id="BABECBGF"></a>Figure 14-2 Web Access to XSQL Pages</p>
<img width="473" height="482" src="img/adxdk122.gif" alt="Description of Figure 14-2 follows" /><br />
<a id="sthref383" href="img_text/adxdk122.htm">Description of "Figure 14-2 Web Access to XSQL Pages"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The XSQL page processor shown in <a href="#BABECBGF">Figure 14-2</a> performs the following steps:</p>
<ol>
<li>
<p>Receives a request from the XSQL Servlet to process <code dir="ltr">Page.xsql</code>.</p>
</li>
<li>
<p>Parses <code dir="ltr">Page.xsql</code> with the Oracle XML Parser and caches it.</p>
</li>
<li>
<p>Connects to the database based on the value of the connection attribute on the document element.</p>
</li>
<li>
<p>Generates the XML datagram by replacing each XSQL action element, for example, <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a>, with the XML results returned by its built-in action handler.</p>
</li>
<li>
<p>Parses the <code dir="ltr">Style.xsl</code> stylesheet and caches it.</p>
</li>
<li>
<p>Transforms the datagram by passing it and the <code dir="ltr">Style.xsl</code> stylesheet to the Oracle XSLT processor.</p>
</li>
<li>
<p>Returns the resulting XML or HTML document to the requester.</p>
</li>
</ol>
<p>During the transformation step in this process, you can use stylesheets that conform to the W3C XSLT 1.0 or 2.0 standard to transform the assembled datagram into document formats such as the following:</p>
<ul>
<li>
<p>HTML for browser display</p>
</li>
<li>
<p>Wireless Markup Language (WML) for wireless devices</p>
</li>
<li>
<p>Scalable Vector Graphics (SVG) for data-driven charts, graphs, and diagrams</p>
</li>
<li>
<p>XML Stylesheet Formatting Objects (XSL-FO), for rendering into Adobe PDF</p>
</li>
<li>
<p>Text documents such as e-mails, SQL scripts, Java programs, and so on</p>
</li>
<li>
<p>Arbitrary XML-based document formats</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1023723"></a>
<div id="ADXDK19576" class="sect2">
<h3 class="sect2">Setting Up the XSQL Pages Framework</h3>
<p>You can develop and use XSQL pages in various scenarios. This section describes the following topics:</p>
<ul>
<li>
<p><a href="#i1023726">Creating and Testing XSQL Pages with Oracle JDeveloper</a></p>
</li>
<li>
<p><a href="#i1023739">Setting the CLASSPATH for XSQL Pages</a></p>
</li>
<li>
<p><a href="#CACDCIJA">Configuring the XSQL Servlet Container</a></p>
</li>
<li>
<p><a href="#i1023762">Setting Up the Connection Definitions</a></p>
</li>
</ul>
<a id="i1023726"></a>
<div id="ADXDK19577" class="sect3">
<h4 class="sect3">Creating and Testing XSQL Pages with Oracle JDeveloper</h4>
<p>The easiest way to use XSQL pages is with Oracle JDeveloper 10g. The IDE supports the following features:</p>
<ul>
<li>
<p>Color-coded syntax highlighting</p>
</li>
<li>
<p>XML syntax checking</p>
</li>
<li>
<p>In-context drop-down lists that help you pick valid XSQL tag names and auto-complete tag and attribute names</p>
</li>
<li>
<p>XSQL page deployment and testing</p>
</li>
<li>
<p>Debugging tools</p>
</li>
<li>
<p>Wizards for creating XSQL actions</p>
</li>
</ul>
<p>To create an XSQL page in an Oracle JDeveloper 10g project, do the following steps:</p>
<ol>
<li>
<p>Create or open a project.</p>
</li>
<li>
<p>Select <span class="bold">File</span> and then <span class="bold">New</span>.</p>
</li>
<li>
<p>In the <span class="bold">New Gallery</span> dialog box, select the <span class="bold">General</span> category and then <span class="bold">XML</span>.</p>
</li>
<li>
<p>In the <span class="bold">Item</span> window, select <span class="bold">XSQL Page</span> and click <span class="bold">OK</span>. JDeveloper loads a tab for the new XSQL page into the central window.</p>
</li>
</ol>
<p>To add XSQL action elements such as <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> to your XSQL page, place the cursor where you want the new element to go and click an item in the Component Palette. A wizard opens that takes you through the steps of selecting which XSQL action you want to use and which attributes you need to provide.</p>
<p>To check the syntax of an XSQL page, place the cursor in the page and right-click <span class="bold">Check XML Syntax</span>. If there are any XML syntax errors, JDeveloper displays them.</p>
<p>To test an XSQL page, select the page in the navigator and right-click <span class="bold">Run</span>. JDeveloper automatically starts up a local Web server, properly configured to run XSQL pages, and tests your page by launching your default browser with the appropriate URL to request the page. After you have run the XSQL page, you can continue to make modifications to it in the IDE as well as to any XSLT stylesheets with which it might be associated. After saving the files in the IDE you can immediately refresh the browser to observe the effect of the changes.</p>
<p>You must add the XSQL runtime library to your project library list so that the <code dir="ltr">CLASSPATH</code> is properly set. The IDE adds this entry automatically when you go through the New Gallery dialog to create a new XSQL page, but you can also add it manually to the project as follows:</p>
<ol>
<li>
<p>Right-click the project in the Applications Navigator.</p>
</li>
<li>
<p>Select <span class="bold">Project Properties</span>.</p>
</li>
<li>
<p>Select <span class="bold">Profiles</span> and then <span class="bold">Libraries</span> from the navigation tree.</p>
</li>
<li>
<p>Move <span class="bold">XSQL Runtime</span> from the <span class="bold">Available Libraries</span> pane to <span class="bold">Selected Libraries</span>.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1023739"></a>
<div id="ADXDK19578" class="sect3">
<h4 class="sect3">Setting the <a id="sthref384"></a>CLASSPATH for XSQL Pages</h4>
<p>Outside of the JDeveloper environment, you should make sure that the XSQL page processor engine is properly configured.</p>
<p>Make sure that the appropriate JAR files are in the <code dir="ltr">CLASSPATH</code> of the JavaVM that processes the XSQL Pages. The complete set of XDK JAR files is described in <a href="adx_j_gs.htm#BACCJCEA">Table 3-1, "Java Libraries for XDK Components"</a>. The JAR files for the XSQL framework include the following:</p>
<ul>
<li>
<p><code dir="ltr">xml.jar</code>, the XSQL page processor</p>
</li>
<li>
<p><code dir="ltr">xmlparserv2.jar</code>, the Oracle XML parser</p>
</li>
<li>
<p><code dir="ltr">xsu12.jar</code>, the Oracle XML SQL utility (XSU)</p>
</li>
<li>
<p><code dir="ltr">ojdbc5.jar</code>, the Oracle JDBC driver (or <code dir="ltr">ojdbc6.jar</code>)</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
The XSQL servlet can connect to any database that has JDBC support. Indicate the appropriate JDBC driver class and connection URL in the XSQL configuration file connection definition. Object-relational functionality only works when using Oracle database with the Oracle JDBC driver.</div>
<p>If you have configured your <code dir="ltr">CLASSPATH</code> as instructed in <a href="adx_j_gs.htm#BACFEAGD">"Setting Up the Java XDK Environment"</a>, then you only need to add the <span class="italic">directory</span> where the XSQL pages configuration file resides. In the database installation of the XDK, the directory for <code dir="ltr">XSQLConfig.xml</code> is <code dir="ltr">$ORACLE_HOME/xdk/admin</code>.</p>
<p>On Windows your <code dir="ltr">%CLASSPATH%</code> variable should contain the following entries:</p>
<pre dir="ltr">
%ORACLE_HOME%\lib\ojdbc5.jar;%ORACLE_HOME%\lib\xmlparserv2.jar;
%ORACLE_HOME%\lib\xsu12.jar;C:\xsql\lib\xml.jar;%ORACLE_HOME%\xdk\admin
</pre>
<pre dir="ltr">
</pre>
<p>On UNIX the <code dir="ltr">$CLASSPATH</code> variable should contain the following entries:</p>
<pre dir="ltr">
$ORACLE_HOME/lib/ojdbc5.jar:$ORACLE_HOME/lib/xmlparserv2.jar:
$ORACLE_HOME/lib/xsu12.jar:$ORACLE_HOME/lib/xml.jar:$ORACLE_HOME\xdk\admin
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are deploying your XSQL pages in a J2EE WAR file, then you can include the XSQL JAR files in the <code dir="ltr">./WEB-INF/lib</code> directory of the WAR file.</div>
</div>
<!-- class="sect3" -->
<a id="CACDCIJA"></a>
<div id="ADXDK19579" class="sect3">
<h4 class="sect3">Configuring the XSQL Servlet Container</h4>
<p>You can install the XSQL servlet in a variety of different Web servers, including OC4J, Jakarta Tomcat, and so forth. You can find complete instructions for installing the servlet in the Release Notes for the OTN download of the XDK.</p>
<p>Navigate to the setup instructions as follows:</p>
<ol>
<li>
<p>Log on to OTN and navigate to the following URL:</p>
<pre dir="ltr">
http://www.oracle.com/technology/tech/xml/xdk/doc/production10g/readme.html
</pre></li>
<li>
<p>Click <span class="bold">Getting Started with XDK Java Components</span>.</p>
</li>
<li>
<p>In the Introduction section, scroll down to <span class="bold">XSQL Servlet</span> in the bulleted list and click <span class="bold">Release Notes</span>.</p>
</li>
<li>
<p>In the Contents section, click <span class="bold">Downloading and Installing the XSQL Servlet</span>.</p>
</li>
<li>
<p>Scroll down to the <span class="bold">Setting Up Your Servlet Engine to Run XSQL Pages</span> section and look for your Web server.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="i1023762"></a>
<div id="ADXDK19580" class="sect3">
<h4 class="sect3">Setting Up the <a id="sthref385"></a>Connection Definitions</h4>
<p>XSQL pages specify database connections by using a short name for a connection that is defined in the XSQL configuration file, which by default is named <code dir="ltr">$ORACLE_HOME/xdk/admin/XSQLConfig.xml</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you are deploying your XSQL pages in a J2EE WAR file, then you can place the <code dir="ltr">XSQLConfig.xml</code> file in the <code dir="ltr">./WEB-INF/classes</code> directory of your WAR file.</div>
<p>The sample XSQL page shown in <a href="#CACCIIDJ">Example 14-1</a> contains the following connection information:</p>
<pre dir="ltr">
&lt;xsql:query connection="hr" xmlns:xsql="urn:oracle-xsql"&gt;
</pre>
<p>Connection names are defined in the <code dir="ltr">&lt;connectiondefs&gt;</code> section of the XSQL configuration file. <a href="#CACBEJBJ">Example 14-2</a> shows the relevant section of the sample configuration file included with the database, with the <code dir="ltr">hr</code> connection in bold.</p>
<div id="ADXDK19581" class="example">
<p class="titleinexample"><a id="CACBEJBJ"></a>Example 14-2 Connection Definitions Section of XSQLConfig.xml</p>
<pre dir="ltr">
&lt;connectiondefs&gt; 
  ...
  <span class="bold">&lt;connection name="hr"&gt;</span>
    <span class="bold">&lt;username&gt;hr&lt;/username&gt;</span>
    <span class="bold">&lt;password&gt;hr_password&lt;/password&gt;</span>
    <span class="bold">&lt;dburl&gt;jdbc:oracle:thin:@localhost:1521:ORCL&lt;/dburl&gt;</span>
    <span class="bold">&lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt;</span>
    <span class="bold">&lt;autocommit&gt;false&lt;/autocommit&gt;</span>
<span class="bold">  &lt;/connection&gt;</span>
  ...
&lt;/connectiondefs&gt;
</pre></div>
<!-- class="example" -->
<p>For each database connection, you can specify the following elements:</p>
<ul>
<li>
<p><code dir="ltr">&lt;username&gt;</code>, the database username</p>
</li>
<li>
<p><code dir="ltr">&lt;password&gt;</code>, the database password</p>
</li>
<li>
<p><code dir="ltr">&lt;dburl&gt;</code>, the JDBC connection string</p>
</li>
<li>
<p><code dir="ltr">&lt;driver&gt;</code>, the fully-qualified class name of the JDBC driver to use</p>
</li>
<li>
<p><code dir="ltr">&lt;autocommit&gt;</code>, which optionally forces <code dir="ltr">AUTOCOMMIT</code> to <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code></p>
</li>
</ul>
<p>Specify an <code dir="ltr">&lt;autocommit&gt;</code> child element to control the setting of the JDBC autocommit for any connection. If no <code dir="ltr">&lt;autocommit&gt;</code> child element is set for a <code dir="ltr">&lt;connection&gt;</code>, then the autocommit setting is not set by the XSQL connection manager. In this case, the setting is the default autocommit setting for the JDBC driver.</p>
<p>You can place an arbitrary number of <code dir="ltr">&lt;connection&gt;</code> elements in the XSQL configuration file to define your database connections. An individual XSQL page refers to the connection it wants to use by putting a <code dir="ltr">connection="</code><code dir="ltr"><span class="codeinlineitalic">xxx</span></code><code dir="ltr">"</code> attribute on the top-level element in the page (also called the "document element").</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
The <code dir="ltr">XSQLConfig.xml</code> file contains sensitive database username and password information that you want to keep secure on the database server. Refer to <a href="#i1038545">"Security Considerations for XSQL Pages"</a> for instructions.</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACGIHID"></a>
<div id="ADXDK19582" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Running the XSQL Pages Demo Programs<a id="sthref386"></a></h3>
<p>Demo programs for the XSQL servlet are included in <code dir="ltr">$ORACLE_HOME/xdk/demo/java/xsql</code>. <a href="#CHECIJCH">Table 14-1</a> lists the demo subdirectories and explains the included demos. The Demo Name column refers to the title of the demo listed on the XSQL Pages &amp; XSQL Servlet home page. <a href="#BABDHGHC">"Running the XSQL Demos"</a> explains how to access the home page.</p>
<div id="ADXDK19583" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref387"></a><a id="CHECIJCH"></a>Table 14-1 XSQL Servlet Demos</p>
<table class="cellalignment1211" title="XSQL Servlet Demos " summary="Demonstration Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t6">Directory</th>
<th class="cellalignment1212" id="r1c2-t6">Demo Name</th>
<th class="cellalignment1212" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">home/</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c2-t6">
<p>XSQL Pages &amp; XSQL Servlet</p>
</td>
<td class="cellalignment1213" headers="r2c1-t6 r1c3-t6">
<p>Contains the pages that display the tabbed home page of the XSQL demos as well as the online XSQL help that you can access from that page. As explained in <a href="#BABDHGHC">"Running the XSQL Demos"</a>, you can invoke the XSQL home page from the <code dir="ltr">index.html</code> page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">helloworld/</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c2-t6">
<p>Hello World Page</p>
</td>
<td class="cellalignment1213" headers="r3c1-t6 r1c3-t6">
<p>Illustrates the simplest possible XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">emp/</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c2-t6">
<p>Employee Page</p>
</td>
<td class="cellalignment1213" headers="r4c1-t6 r1c3-t6">
<p>XSQL page showing XML data from the <code dir="ltr">hr.employees</code> table, using XSQL page parameters to control what employees are returned and which columns to use for the database sort.</p>
<p>Uses an associated XSLT Stylesheet to format the results as an HTML Form containing the <code dir="ltr">emp.xsql</code> page as the form action so the user can refine the search criteria.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">insclaim/</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t6 r1c2-t6">
<p>Insurance Claim Page</p>
</td>
<td class="cellalignment1213" headers="r5c1-t6 r1c3-t6">
<p>Demonstrates a number of sample queries over the richly-structured Insurance Claim object view. The <code dir="ltr">insclaim.sql</code> scripts sets up the <code dir="ltr">INSURANCE_CLAIM_VIEW</code> object view and populates it with sample data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">classerr/</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t6 r1c2-t6">
<p>Invalid Classes Page</p>
</td>
<td class="cellalignment1213" headers="r6c1-t6 r1c3-t6">
<p>Uses <code dir="ltr">invalidclasses.xsl</code> to format a "live" list of current Java class compilation errors in your schema. The accompanying SQL script sets up the <code dir="ltr">XSQLJavaClassesView</code> object view used by the demo. The master/detail information from the object view is formatted into HTML by the <code dir="ltr">invalidclasses.xsl</code> stylesheet in the server.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">doyouxml/</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t6 r1c2-t6">
<p>Do You XML? Site</p>
</td>
<td class="cellalignment1213" headers="r7c1-t6 r1c3-t6">
<p>Shows how a simple, data-driven Web site can be built with an XSQL page that makes use of SQL, XSQL substitution variables in the queries, and XSLT for formatting the site.</p>
<p>Demonstrates using substitution parameters in both the body of SQL query statements within <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> tags, as well as within the attributes to <code dir="ltr">&lt;xsql:query&gt;</code> tags to control behavior such as how many records to display and to skip (for "paging" through query results in a stateless way).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">empdept/</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t6 r1c2-t6">
<p>Emp/Dept Object Demo</p>
</td>
<td class="cellalignment1213" headers="r8c1-t6 r1c3-t6">
<p>Demonstrates how to use an object view to group master/detail information from two existing flat tables such as <code dir="ltr">scott.emp</code> and <code dir="ltr">scott.dept</code>. The <code dir="ltr">empdeptobjs.sql</code> script creates the object view as well as <code dir="ltr">INSTEAD OF INSERT</code> triggers that enable the master/detail view to be used as an insert target of <code dir="ltr">xsql:insert-request</code>.</p>
<p>The <code dir="ltr">empdept.xsl</code> stylesheet illustrates a form of an XSLT stylesheet that looks just like an HTML page without the extra <code dir="ltr">xsl:stylesheet</code> or <code dir="ltr">xsl:transform</code> at the top. Using a Literal Result Element as Stylesheet is part of the XSLT 1.0 specification. The stylesheet also shows how to generate an HTML page that includes <code dir="ltr">&lt;link rel="stylesheet"&gt;</code> to enable the generated HTML to fully leverage CSS for centralized HTML style information, found in the <code dir="ltr">coolcolors.css</code> file.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">airport/</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t6 r1c2-t6">
<p>Airport Code Validation</p>
</td>
<td class="cellalignment1213" headers="r9c1-t6 r1c3-t6">
<p>Returns a datagram of information about airports based on their three-letter codes and uses <code dir="ltr">&lt;xsql:no-rows-query&gt;</code> as alternative queries when initial queries return no rows. After attempting to match the airport code passed in, the XSQL page tries a fuzzy match based on the airport description.</p>
<p>The <code dir="ltr">airport.htm</code> page shows how to use the XML results of the <code dir="ltr">airport.xsql</code> page from a Web page with JavaScript to exploit built-in DOM functionality in Internet Explorer.</p>
<p>When you enter the three-letter airport code on the Web page, a JavaScript fetches an XML datagram from XSQL servlet. The datagram corresponds to the code that you entered. If the return indicates no match, then the program collects a "picklist" of possible matches based on information returned in the XML datagram from XSQL servlet</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">airport/</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t6 r1c2-t6">
<p>Airport Code Display</p>
</td>
<td class="cellalignment1213" headers="r10c1-t6 r1c3-t6">
<p>Demonstrates use of the same XSQL page as the Airport Code Validation example but supplies an XSLT stylesheet name in the request. This behavior causes the airport information to be formatted as an HTML form instead of being returned as raw XML.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">airport/</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t6 r1c2-t6">
<p>Airport Soap Service</p>
</td>
<td class="cellalignment1213" headers="r11c1-t6 r1c3-t6">
<p>Demonstrates returning airport information as a SOAP Service.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">adhocsql/</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t6 r1c2-t6">
<p>Adhoc Query Visualization</p>
</td>
<td class="cellalignment1213" headers="r12c1-t6 r1c3-t6">
<p>Demonstrates how to pass a SQL query and XSLT stylesheet as parameters to the server.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">document/</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t6 r1c2-t6">
<p>XML Document Demo</p>
</td>
<td class="cellalignment1213" headers="r13c1-t6 r1c3-t6">
<p>Demonstrates inserting XML documents into relational tables. The <code dir="ltr">docdemo.sql</code> script creates a user-defined type called XMLDOCFRAG containing an attribute of type CLOB.</p>
<p>Try inserting the text of the document in <code dir="ltr">./xsql/demo/xml99.xml</code> and providing the name <code dir="ltr">xml99.xsl</code> as the stylesheet, as well as <code dir="ltr">./xsql/demo/JDevRelNotes.xml</code> with the stylesheet <code dir="ltr">relnotes.xsl</code>.</p>
<p>The <code dir="ltr">docstyle.xsql</code> page illustrates an example of the <a href="adx_ref_xsql.htm#BJEEDBGH">&lt;xsql:include-xsql&gt;</a> action element to include the output of the <code dir="ltr">doc.xsql</code> page into its own page before transforming the final output using a client-supplied stylesheet name.</p>
<p>The demo uses the client-side XML features of Internet Explorer 5.0 to check the document for well-formedness before allowing it to be posted to the server.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">insertxml/</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t6 r1c2-t6">
<p>XML Insert Request Demo</p>
</td>
<td class="cellalignment1213" headers="r14c1-t6 r1c3-t6">
<p>Demonstrates posting XML from a client to an XSQL page that handles inserting the posted XML data into a database table using the <a href="adx_ref_xsql.htm#BJEHGIFD">&lt;xsql:insert-request&gt;</a> action element. The demo accepts XML documents in the <code dir="ltr">moreover.com</code> XML-based news format.</p>
<p>In this case, the program doing the posting of the XML is a client-side Web page using Internet Explorer 5.0 and the XMLHttpRequest object from JavaScript. If you look at the source for the <code dir="ltr">insertnewsstory.xsql</code> page, you'll see it's specifying a table name and an XSLT Transform name. The <code dir="ltr">moreover-to-newsstory.xsl</code> stylesheet transforms the incoming XML information into the canonical format that the OracleXMLSave utility knows how to insert.</p>
<p>Try copying and pasting the example <code dir="ltr">&lt;article&gt;</code> element several times within the <code dir="ltr">&lt;moreovernews&gt;</code> element to insert several new articles in one shot.</p>
<p>The <code dir="ltr">newsstory.sql</code> script shows how INSTEAD OF triggers can be used on the database views into which you ask XSQL Pages to insert to the data to customize how incoming data is handled, default primary key values, and so on.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t6" headers="r1c1-t6">
<p><code dir="ltr">svg/</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t6 r1c2-t6">
<p>Scalable Vector Graphics Demo</p>
</td>
<td class="cellalignment1213" headers="r15c1-t6 r1c3-t6">
<p>The <code dir="ltr">deptlist.xsql</code> page displays a simple list of departments with hyperlinks to the <code dir="ltr">SalChart.xsql</code> page. The <code dir="ltr">SalChart.xsql</code> page queries employees for a given department passed in as a parameter and uses the associated <code dir="ltr">SalChart.xsql</code> stylesheet to format the result into a Scalable Vector Graphics drawing, a bar chart comparing salaries of the employees in that department.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t6" headers="r1c1-t6">
<p><code dir="ltr">fop/</code></p>
</td>
<td class="cellalignment1213" headers="r16c1-t6 r1c2-t6">
<p>PDF Demo</p>
</td>
<td class="cellalignment1213" headers="r16c1-t6 r1c3-t6">
<p>The <code dir="ltr">emptable.xsql</code> page displays a simple list of employees. The <code dir="ltr">emptable.xsl</code> stylesheet transforms the datapage into the XSL-FO Formatting Objects which, combined with the built-in <a id="sthref388"></a><a id="sthref389"></a>FOP serializer, render the results in Adobe PDF format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t6" headers="r1c1-t6">
<p><code dir="ltr">cursor/</code></p>
</td>
<td class="cellalignment1213" headers="r17c1-t6 r1c2-t6">
<p>Cursor Demo</p>
</td>
<td class="cellalignment1213" headers="r17c1-t6 r1c3-t6">
<p>Contains an example of using a nested <code dir="ltr">CURSOR</code> expression, which is one of three ways to use the default <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> element to produce nested elements.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t6" headers="r1c1-t6">
<p><code dir="ltr">actions/</code></p>
</td>
<td class="cellalignment1213" headers="r18c1-t6 r1c2-t6">&nbsp;</td>
<td class="cellalignment1213" headers="r18c1-t6 r1c3-t6">
<p>Contains the source code for two example custom actions.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" -->
<div id="ADXDK19584" class="sect3"><a id="sthref390"></a>
<h4 class="sect3">Setting <a id="sthref391"></a>Up the XSQL Demos</h4>
<p>To set up the XSQL demos perform the following steps:</p>
<ol>
<li>
<p>Change into the <code dir="ltr">$ORACLE_HOME/xdk/demo/java/xsql</code> directory (UNIX) or <code dir="ltr">%ORACLE_HOME%\xdk\demo\java\xsql</code> directory (Windows).</p>
</li>
<li>
<p>Start SQL*Plus and connect to your database as <code dir="ltr">ctxsys</code> &mdash; the schema owner for the Oracle Text packages &mdash; and issue the following statement:</p>
<pre dir="ltr">
GRANT EXECUTE ON ctx_ddl TO scott;
</pre></li>
<li>
<p>Connect to your database as a user with <code dir="ltr">DBA</code> privileges and issue the following statement:</p>
<pre dir="ltr">
GRANT QUERY REWRITE TO scott;
</pre>
<p>The preceding query enables <code dir="ltr">scott</code> to create a function-based index that one of the demos requires to perform case-insensitive queries on descriptions of airports.</p>
</li>
<li>
<p>Connect to your database as <code dir="ltr">scott</code>. You will be prompted for the password.</p>
</li>
<li>
<p>Run the SQL script <code dir="ltr">install.sql</code> in the current directory. This script runs all SQL scripts for all the demos:</p>
<pre dir="ltr">
@install.sql
</pre></li>
</ol>
<pre dir="ltr">
</pre>
<ol>
<li>
<p>Change to the <code dir="ltr">./doyouxml</code> subdirectory, and run the following command to import sample data for the "Do You XML?" demo (you will be prompted for the password):</p>
<pre dir="ltr">
imp scott file=doyouxml.dmp
</pre></li>
</ol>
<ol>
<li>
<p>To run the Scalable Vector Graphics (SVG) demonstration, install an SVG plug-in such as Adobe SVG plug-in into your browser.</p>
</li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BABDHGHC"></a>
<div id="ADXDK19585" class="sect3">
<h4 class="sect3">Running<a id="sthref392"></a> the XSQL Demos</h4>
<p>The XSQL demos are designed to be accessed through a Web browser. If you have set up the XSQL servlet in a Web server as described in <a href="#CACDCIJA">"Configuring the XSQL Servlet Container"</a>, then you can access the demos through the following URL, substituting appropriate values for <code dir="ltr">yourserver</code> and <code dir="ltr">port</code>:</p>
<pre dir="ltr">
http://yourserver:port/xsql/index.html
</pre>
<p><a href="#BABGEJHA">Figure 14-3</a> shows a section of the XSQL home page in Internet Explorer. Note that you must use browser version 5 or higher.</p>
<div id="ADXDK19586" class="figure">
<p class="titleinfigure"><a id="BABGEJHA"></a>Figure 14-3 XSQL Home Page</p>
<img width="1020" height="738" src="img/xsql_home.gif" alt="Description of Figure 14-3 follows" /><br />
<a id="sthref393" href="img_text/xsql_home.htm">Description of "Figure 14-3 XSQL Home Page"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The demos are designed to be self-explanatory. Click the demo titles&mdash;<span class="bold">Hello World Page</span>, <span class="bold">Employee Page</span>, and so forth&mdash;and follow the online instructions.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACHFDBD"></a>
<div id="ADXDK19587" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Using the XSQL Pages Command-Line Utility</h3>
<p>Often the content of a dynamic page is based on data that does not frequently change. To optimize performance of your Web publishing, you can use operating system facilities to schedule offline processing of your XSQL pages. This technique enables the processed results to be served statically by your Web server.</p>
<p>The XDK includes a command-line Java interface that runs the XSQL page processor. You can process any XSQL page with the XSQL command-line utility.</p>
<p>The <code dir="ltr">$ORACLE_HOME/xdk/bin/xsql</code> and <code dir="ltr">%ORACLE_HOME%\xdk\bin\xsql.bat</code> shell scripts run the <code dir="ltr">oracle.xml.xsql.XSQLCommandLine</code> class. Before invoking the class make sure that your environment is configured as described in <a href="#i1023723">"Setting Up the XSQL Pages Framework"</a>. Depending on how you invoke the utility, the syntax is either of the following:</p>
<pre dir="ltr">
java oracle.xml.xsql.XSQLCommandLine <span class="italic">xsqlpage</span> [<span class="codeinlineitalic">outfile</span>] [param1=value1 ...]
xsql xsqlpage [outfile] [param1=value1 ...]
</pre>
<p>If you specify an <code dir="ltr"><span class="codeinlineitalic">outfile</span></code>, then the result of processing <code dir="ltr">xsqlpage</code> is written to it; otherwise the result goes to standard out. You can pass any number of parameters to the XSQL page processor, which are available for reference by the XSQL page processed as part of the request. However, the following parameter names are recognized by the command-line utility and have a pre-defined behavior:</p>
<ul>
<li>
<p><code dir="ltr">xml-stylesheet=stylesheetURL</code></p>
<p>Provides the relative or absolute URL for a stylesheet to use for the request. You can also set it to the string <code dir="ltr">none</code> to suppress XSLT stylesheet processing for debugging purposes.</p>
</li>
<li>
<p><code dir="ltr">posted-xml=XMLDocumentURL</code></p>
<p>Provides the relative or absolute URL of an XML resource to treat as if it were posted as part of the request.</p>
</li>
<li>
<p><code dir="ltr">useragent=UserAgentString</code></p>
<p>Simulates a particular HTTP User-Agent string from the command line so that an appropriate stylesheet for that User-Agent type is selected as part of command-line processing of the page.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1036315"></a>
<div id="ADXDK19588" class="sect1">
<h2 class="sect1">Generating and Transforming XML with XSQL Servlet</h2>
<p>This section describes the most basic tasks that you can perform with your server-side XSQL page templates:</p>
<ul>
<li>
<p><a href="#i1023578">Composing XSQL Pages</a></p>
</li>
<li>
<p><a href="#CACJGDJD">Producing Datagrams from SQL Queries</a></p>
</li>
<li>
<p><a href="#i1023610">Transforming XML Datagrams into an Alternative XML Format</a></p>
</li>
<li>
<p><a href="#i1023667">Transforming XML Datagrams into HTML for Display</a></p>
</li>
</ul>
<a id="i1023578"></a>
<div id="ADXDK19589" class="sect2">
<h3 class="sect2">Composing XSQL Pages</h3>
<p>You can serve database information in XML format over the Web with XSQL pages. For example, suppose your aim is to serve a real-time XML datagram from Oracle of all available flights landing today at JFK airport. <a href="#CACJFEFI">Example 14-3</a> shows a sample XSQL page in a file named <code dir="ltr">AvailableFlightsToday.xsql</code>.</p>
<div id="ADXDK19590" class="example">
<p class="titleinexample"><a id="CACJFEFI"></a>Example 14-3 AvailableFlightsToday.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:query connection="demo" bind-params="City" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT    Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,'HH24:MI') AS Due
  FROM      FlightSchedule
  WHERE     TRUNC(ExpectedTime) = TRUNC(SYSDATE)
  AND       Arrived = 'N'
  AND       Destination = ?   /* The "?" represents a bind variable bound */
  ORDER BY  ExpectedTime      /* to the value of the City parameter.      */
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>The XSQL page is an XML file that contains any mix of static XML content and XSQL action elements. The file can have any extension, but <code dir="ltr">.xsql</code> is the default extension for XSQL pages. You can modify your servlet engine configuration settings to associate other extensions by using the same technique described in <a href="#CACDCIJA">"Configuring the XSQL Servlet Container"</a>. Note that the servlet extension mapping is configured inside the <code dir="ltr">./WEB-INF/web.xml</code> file in a J2EE WAR file.</p>
<p>The XSQL page in <a href="#CACJFEFI">Example 14-3</a> begins with the following declaration:</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
</pre>
<p>The first, outermost element in an XSQL page is the <span class="glossaryterm">document element</span>. <code dir="ltr">AvailableFlightsToday.xsql</code> contains a single XSQL action element <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a>, but no static XML elements. In this case the <code dir="ltr">&lt;xsql:query&gt;</code> element is the document element. <a href="#CACJFEFI">Example 14-3</a> represents the simplest useful XSQL page: one that contains a single query. The results of the query replace the <code dir="ltr">&lt;xsql:query&gt;</code> section in the XSQL page.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<a href="adx_ref_xsql.htm#BJEEABJJ">Chapter 30, "XSQL Pages Reference"</a> describes the complete set of built-in action elements.</div>
<p>The <code dir="ltr">&lt;xsql:query&gt;</code> action element includes an <code dir="ltr">xmlns</code> attribute that declares the <code dir="ltr">xsql</code> namespace prefix as a synonym for the <code dir="ltr">urn:oracle-xsql</code> value, which is the Oracle XSQL namespace identifier:</p>
<pre dir="ltr">
&lt;xsql:query connection="demo" bind-params="City" <span class="bold">xmlns:xsql="urn:oracle-xsql"</span>&gt;
</pre>
<p>The element also contains a <code dir="ltr">connection</code> attribute whose value is the name of one of the pre-defined connections in the XSQL configuration file:</p>
<pre dir="ltr">
&lt;xsql:query <span class="bold">connection="demo"</span> bind-params="City" xmlns:xsql="urn:oracle-xsql"&gt;
</pre>
<p>The details concerning the username, password, database, and JDBC driver that will be used for the <code dir="ltr">demo</code> connection are centralized in the configuration file.</p>
<p>To include more than one query on the page, you can invent an XML element to wrap the other elements. <a href="#CACDJDJI">Example 14-4</a> illustrates this technique.</p>
<div id="ADXDK19591" class="example">
<p class="titleinexample"><a id="CACDJDJI"></a>Example 14-4 Wrapping the &lt;xsql:query&gt; Element</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query bind-params="City"&gt;
    SELECT   Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,'HH24:MI') AS Due
    FROM     FlightSchedule
    WHERE    TRUNC(ExpectedTime) = TRUNC(SYSDATE) 
    AND      Arrived = 'N'
    AND      Destination = ?   /* The ? is a bind variable bound       */
    ORDER BY ExpectedTime      /* to the value of the City parameter.  */
  &lt;/xsql:query&gt;
  &lt;!-- Other xsql:query actions can go here inside &lt;page&gt; and &lt;/page&gt; --&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>In <a href="#CACDJDJI">Example 14-4</a>, the <code dir="ltr">connection</code> attribute and the <code dir="ltr">xsql</code> namespace declaration always go on the document element, whereas the <code dir="ltr">bind-params</code> is specific to the <code dir="ltr">&lt;xsql:query&gt;</code> action.</p>
<div id="ADXDK19592" class="sect3"><a id="sthref394"></a>
<h4 class="sect3">Using Bind Parameters</h4>
<p>The <code dir="ltr">&lt;xsql:query&gt;</code> element shown in <a href="#CACJFEFI">Example 14-3</a> contains a <code dir="ltr">bind-params</code> attribute that associates the values of parameters in the request to bind variables in the SQL statement included in the <code dir="ltr">&lt;xsql:query&gt;</code> tag. The bind parameters in the SQL statement are represented by question marks.</p>
<p>You can use SQL bind variables to parameterize the results of any of the actions in <a href="adx_ref_xsql.htm#BJEBEJFF">Table 30-1, "Built-In XSQL Elements and Action Handler Classes"</a> that allow SQL statements. Bind variables enable your XSQL page template to produce results based on the values of parameters passed in the request.</p>
<p>To use a bind variable, include a question mark anywhere in a statement where bind variables are allowed by SQL. Whenever a SQL statement is executed in the page, the XSQL engine binds the parameter values to the variable by specifying the <code dir="ltr">bind-params</code> attribute on the action element.</p>
<p><a href="#BABBGABH">Example 14-5</a> illustrates an XSQL page that binds the bind variables to the value of the <code dir="ltr">custid</code> parameter in the page request.</p>
<div id="ADXDK19593" class="example">
<p class="titleinexample"><a id="BABBGABH"></a>Example 14-5 CustomerPortfolio.xsql</p>
<pre dir="ltr">
&lt;portfolio connnection="prod" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query <span class="bold">bind-params="custid"</span>&gt;
    SELECT s.ticker as "Symbol", s.last_traded_price as "Price"
    FROM latest_stocks s, customer_portfolio p
    <span class="bold">WHERE p.customer_id = ?</span>
    AND s.ticker = p.ticker
  &lt;/xsql:query&gt;
&lt;/portfolio&gt;
</pre></div>
<!-- class="example" -->
<p>The XML data for a customer with ID of 101 can then be requested by passing the customer id parameter in the request as follows:</p>
<pre dir="ltr">
http://yourserver.com/fin/CustomerPortfolio.xsql?<span class="bold">custid=1001</span>
</pre>
<p>The value of the <code dir="ltr">bind-params</code> attribute is a space-delimited list of parameter names. The left-to-right order indicates the positional bind variable to which its value will be bound in the statement. Thus, if your SQL statement contains five question marks, then the <code dir="ltr">bind-params</code> attribute needs a space-delimited list of five parameter names. If the same parameter value must be bound to several different occurrences of a bind variable, then repeat the name of the parameters in the value of the <code dir="ltr">bind-params</code> attribute at the appropriate position. Failure to include the same number of parameter names in the <code dir="ltr">bind-params</code> attribute as in the query results in an error when the page is executed.</p>
<p>You can use variables in any action that expects a SQL statement or PL/SQL block. The page shown in <a href="#BABJDBFH">Example 14-6</a> illustrates this technique. The XSQL page contains three action elements:</p>
<ul>
<li>
<p><a href="adx_ref_xsql.htm#CHDDEHJG">&lt;xsql:dml&gt;</a> binds <code dir="ltr">useridCookie</code> to an argument in the <code dir="ltr">log_user_hit</code> procedure.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> binds parameter <code dir="ltr">custid</code> to a variable in a <code dir="ltr">WHERE</code> clause.</p>
</li>
<li>
<p><a href="adx_ref_xsql.htm#CHDDAFAD">&lt;xsql:include-owa&gt;</a> binds parameters <code dir="ltr">custid</code> and <code dir="ltr">userCookie</code> to two arguments in the <code dir="ltr">historical_data</code> procedure.</p>
</li>
</ul>
<div id="ADXDK19594" class="example">
<p class="titleinexample"><a id="BABJDBFH"></a>Example 14-6 CustomerPortfolio.xsql</p>
<pre dir="ltr">
&lt;portfolio connnection="prod" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:dml commit="yes" <span class="bold">bind-params="useridCookie"</span>&gt;
     BEGIN <span class="bold">log_user_hit(?)</span>; END;
  &lt;/xsql:dml&gt;
  &lt;current-prices&gt;
    &lt;xsql:query <span class="bold">bind-params="custid"</span>&gt;
      SELECT s.ticker as "Symbol", s.last_traded_price as "Price"
      FROM latest_stocks s, customer_portfolio p
      <span class="bold">WHERE p.customer_id = ?</span>
      AND s.ticker = p.ticker
    &lt;/xsql:query&gt;
  &lt;/current-prices&gt;
  &lt;analysis&gt;
    &lt;xsql:include-owa <span class="bold">bind-params="custid userCookie"</span>&gt;
      BEGIN portfolio_analysis.historical_data(<span class="bold">?,5 /* years */, ?</span>); END;
    &lt;/xsql:include-owa&gt;
  &lt;/analysis&gt;
&lt;/portfolio&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADXDK19595" class="sect3"><a id="sthref395"></a>
<h4 class="sect3">Using Lexical Substitution Parameters</h4>
<p>For any XSQL action element, you can substitute the value of any attribute or the text of any contained SQL statement by means of a lexical substitution parameter. Thus, you can parameterize how actions behave as well as substitute parts of the SQL statements that they perform. Lexical substitution parameters are referenced with the following syntax: {<code dir="ltr">@ParameterName</code>}.</p>
<p><a href="#BABGGBIA">Example 14-7</a> illustrates how you can use two lexical substitution parameters. One parameter in the <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> element sets the maximum number of rows to be passed in, whereas the other controls the list of columns to be ordered.</p>
<div id="ADXDK19596" class="example">
<p class="titleinexample"><a id="BABGGBIA"></a>Example 14-7 DevOpenBugs.xsql</p>
<pre dir="ltr">
&lt;!-- DevOpenBugs.xsql --&gt;
&lt;open-bugs connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query max-rows="<span class="bold">{@max}</span>" bind-params="dev prod"&gt;
    SELECT bugno, abstract, status
    FROM   bug_table
    WHERE  programmer_assigned = UPPER(?)
    AND    product_id          = ?
    AND    status &lt; 80
    ORDER BY <span class="bold">{@orderby}</span>
  &lt;/xsql:query&gt;
&lt;/open-bugs&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BABGGBIA">Example 14-7</a> also contains two bind parameters: <code dir="ltr">dev</code> and <code dir="ltr">prod</code>. Suppose that you want to obtain the open bugs for developer <code dir="ltr">smuench</code> against product <code dir="ltr">817</code>. You want to retrieve only 10 rows and order them by bug number. You can fetch the XML for the bug list by specifying parameter values as follows:</p>
<pre dir="ltr">
http://server.com/bug/DevOpenBugs.xsql?<span class="bold">dev=smuench&amp;prod=817</span><span class="bold">&amp;max=10&amp;orderby=bugno</span>
</pre>
<p>You can also use the XSQL command-line utility to make the request as follows:</p>
<pre dir="ltr">
xsql DevOpenBugs.xsql <span class="bold">dev=smuench prod=817 max=10 orderby=bugno</span>
</pre>
<p>Lexical parameters also enable you to parameterize the XSQL pages connection and the stylesheet used to process the page. <a href="#BABDHDBC">Example 14-8</a> illustrates this technique. You can switch between stylesheets <code dir="ltr">test.xsql</code> and <code dir="ltr">prod.xsl</code> by specifying the name/value pairs <code dir="ltr">sheet=test</code> and <code dir="ltr">sheet=prod</code>.</p>
<div id="ADXDK19597" class="example">
<p class="titleinexample"><a id="BABDHDBC"></a>Example 14-8 DevOpenBugs.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="<span class="bold">{@sheet}</span>.xsl"?&gt;
&lt;!-- DevOpenBugs.xsql --&gt;
&lt;open-bugs connection="{@conn}" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query max-rows="{@max}" bind-params="dev prod"&gt;
    SELECT bugno, abstract, status
      FROM bug_table
     WHERE programmer_assigned = UPPER(?)
       AND product_id          = ?
       AND status &lt; 80
    ORDER BY {@orderby}
  &lt;/xsql:query&gt;
&lt;/open-bugs&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<div id="ADXDK19598" class="sect3"><a id="sthref396"></a>
<h4 class="sect3">Providing Default Values for Bind and Substitution Parameters</h4>
<p>You may want to provide a default value for a bind variable or a substitution parameter directly in the page. In this way, the page is parameterized without requiring the requester to explicitly pass in all values in every request.</p>
<p>To include a default value for a parameter, add an XML attribute of the same name as the parameter to the action element or to any ancestor element. If a value for a given parameter is not included in the request, then the XSQL page processor searches for an attribute by the same name on the current action element. If it does not find one, it keeps looking for such an attribute on each ancestor element of the current action element until it gets to the document element of the page.</p>
<p>The page in <a href="#BABJBDCH">Example 14-9</a> defaults the value of the <code dir="ltr">max</code> parameter to <code dir="ltr">10</code> for both <code dir="ltr">&lt;xsql:query&gt;</code> actions in the page.</p>
<div id="ADXDK19599" class="example">
<p class="titleinexample"><a id="BABJBDCH"></a>Example 14-9 Setting a Default Value</p>
<pre dir="ltr">
&lt;example <span class="bold">max="10"</span> connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query max-rows="<span class="bold">{@max}</span>"&gt;SELECT * FROM TABLE1&lt;/xsql:query&gt;
  &lt;xsql:query max-rows="<span class="bold">{@max}</span>"&gt;SELECT * FROM TABLE2&lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<p>This page in <a href="#BABFAHCE">Example 14-10</a> defaults the first query to a <code dir="ltr">max</code> of <code dir="ltr">5</code>, the second query to a <code dir="ltr">max</code> of <code dir="ltr">7</code>, and the third query to a <code dir="ltr">max</code> of <code dir="ltr">10</code>.</p>
<div id="ADXDK19600" class="example">
<p class="titleinexample"><a id="BABFAHCE"></a>Example 14-10 Setting Multiple Default Values</p>
<pre dir="ltr">
&lt;example <span class="bold">max="10"</span> connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query <span class="bold">max="5"</span> max-rows="<span class="bold">{@max}</span>"&gt;SELECT * FROM TABLE1&lt;/xsql:query&gt;
  &lt;xsql:query <span class="bold">max="7"</span> max-rows="<span class="bold">{@max}</span>"&gt;SELECT * FROM TABLE2&lt;/xsql:query&gt;
  &lt;xsql:query max-rows="<span class="bold">{@max}</span>"&gt;SELECT * FROM TABLE3&lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<p>All defaults are overridden if a value of <code dir="ltr">max</code> is supplied in the request, as shown in the following example:</p>
<pre dir="ltr">
http://yourserver.com/example.xsql?<span class="bold">max=3</span>
</pre>
<p>Bind variables respect the same defaulting rules. <a href="#BABHIHDC">Example 14-11</a> illustrates how you can set the <code dir="ltr">val</code> parameter to <code dir="ltr">10</code> by default.</p>
<div id="ADXDK19601" class="example">
<p class="titleinexample"><a id="BABHIHDC"></a>Example 14-11 Defaults for Bind Variables</p>
<pre dir="ltr">
&lt;example <span class="bold">val="10"</span> connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query tag-case="lower" <span class="bold">bind-params="val val val"</span>&gt;
    SELECT ? AS somevalue
    FROM DUAL
    WHERE ? = ?
  &lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<p>If the page in <a href="#BABHIHDC">Example 14-11</a> is requested without any parameters, it returns the following XML datagram:</p>
<pre dir="ltr">
&lt;example&gt;
  &lt;rowset&gt;
    &lt;row&gt;
      &lt;somevalue&gt;10&lt;/somevalue&gt;
    &lt;/row&gt;
  &lt;/row&gt;
&lt;/example&gt;
</pre>
<p>Alternatively, assume that the page is requested with the following URL:</p>
<pre dir="ltr">
http://yourserver.com/example.xsql?<span class="bold">val=3</span>
</pre>
<p>The preceding URL returns the following datagram:</p>
<pre dir="ltr">
&lt;example&gt;
  &lt;rowset&gt;
    &lt;row&gt;
      &lt;somevalue&gt;3&lt;/somevalue&gt;
    &lt;/row&gt;
  &lt;/row&gt;
&lt;/example&gt;
</pre>
<p>You can remove the default value for the <code dir="ltr">val</code> parameter from the page by removing the <code dir="ltr">val</code> attribute. <a href="#BABEBCBG">Example 14-12</a> illustrates this technique.</p>
<div id="ADXDK19602" class="example">
<p class="titleinexample"><a id="BABEBCBG"></a>Example 14-12 Bind Variables with No Defaults</p>
<pre dir="ltr">
&lt;example connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:query tag-case="lower" <span class="bold">bind-params="val val val"</span>&gt;
    SELECT ? AS somevalue
    FROM DUAL
    WHERE ? = ?
  &lt;/xsql:query&gt;
&lt;/example&gt;
</pre></div>
<!-- class="example" -->
<p>A URL request for the page that does not supply a name/value pair returns the following datagram:</p>
<pre dir="ltr">
&lt;example&gt;
  &lt;rowset/&gt;
&lt;/example&gt;
</pre>
<p>A bind variable that is bound to a parameter with <span class="italic">neither</span> a default value <span class="italic">nor</span> a value supplied in the request is bound to NULL, which causes the <code dir="ltr">WHERE</code> clause in <a href="#BABEBCBG">Example 14-12</a> to return no rows.</p>
</div>
<!-- class="sect3" -->
<div id="ADXDK19603" class="sect3"><a id="sthref397"></a>
<h4 class="sect3">How the XSQL Page Processor Handles Different Types of Parameters</h4>
<p>XSQL pages can make use of parameters supplied in the request as well as page-private parameters. The names and values of page-private parameters are determined by actions in the page. If an action encounters a reference to a parameter named <code dir="ltr">param</code> in either a <code dir="ltr">bind-params</code> attribute or in a lexical parameter reference, then the value of the <code dir="ltr">param</code> parameter is resolved in the following order:</p>
<ol>
<li>
<p>The value of the page-private parameter named <code dir="ltr">param</code>, if set</p>
</li>
<li>
<p>The value of the request parameter named <code dir="ltr">param</code>, if supplied</p>
</li>
<li>
<p>The default value provided by an attribute named <code dir="ltr">param</code> on the current action element or one of its ancestor elements</p>
</li>
<li>
<p>The value NULL for bind variables and the empty string for lexical parameters</p>
</li>
</ol>
<p>For XSQL pages that are processed by the XSQL servlet over HTTP, you can also set and reference the HTTP-Session-level variables and HTTP Cookies parameters.</p>
<p>For XSQL pages processed through the XSQL servlet, the value of a parameter <code dir="ltr">param</code> is resolved in the following order:</p>
<ol>
<li>
<p>The value of the page-private parameter <code dir="ltr">param</code>, if set</p>
</li>
<li>
<p>The value of the cookie named <code dir="ltr">param</code>, if set</p>
</li>
<li>
<p>The value of the session variable named <code dir="ltr">param</code>, if set</p>
</li>
<li>
<p>The value of the request parameter named <code dir="ltr">param</code>, if supplied</p>
</li>
<li>
<p>The default value provided by an attribute named <code dir="ltr">param</code> on the current action element or one of its ancestor elements</p>
</li>
<li>
<p>The value NULL for bind variables and the empty string for lexical parameters</p>
</li>
</ol>
<p>The resolution order means that users cannot supply parameter values in a request to override parameters of the same name set in the HTTP session. Also, users cannot set them as cookies that persist across browser sessions.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACJGDJD"></a>
<div id="ADXDK19604" class="sect2">
<h3 class="sect2">Producing Datagrams from SQL Queries</h3>
<p>With XSQL servlet properly installed on your Web server, you can access XSQL pages by following these basic steps:</p>
<ol>
<li>
<p>Copy an XSQL file to a directory under the virtual hierarchy of your Web server. <a href="#CACJFEFI">Example 14-3</a> shows the sample page <code dir="ltr">AvailableFlightsToday.xsql</code>.</p>
<p>You can also deploy XSQL pages in a standard J2EE WAR file, which occurs when you use Oracle JDeveloper 10g to develop and deploy your pages to Oracle Application Server.</p>
</li>
<li>
<p>Load the page in your browser. For example, if the root URL is <code dir="ltr">yourcompany.com</code>, then you can access the <code dir="ltr">AvailableFlightsToday.xsql</code> page through a Web browser by requesting the following URL:</p>
<pre dir="ltr">
http://yourcompany.com/AvailableFlightsToday.xsql?City=JFK
</pre></li>
</ol>
<p>The XSQL page processor automatically materializes the results of the query in your XSQL page as XML and returns them to the requester. Typically, another server program requests this XML-based datagram for processing, but if you use a browser such as Internet Explorer, then you can directly view the XML result as shown in <a href="#BABGAHAI">Figure 14-4</a>.</p>
<div id="ADXDK19605" class="figure">
<p class="titleinfigure"><a id="BABGAHAI"></a>Figure 14-4 XML Result From XSQL Page (AvailableFlightsToday.xsql) Query</p>
<img width="600" height="480" src="img/xsql1.gif" alt="Description of Figure 14-4 follows" /><br />
<a id="sthref398" href="img_text/xsql1.htm">Description of "Figure 14-4 XML Result From XSQL Page (AvailableFlightsToday.xsql) Query"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i1023610"></a>
<div id="ADXDK19606" class="sect2">
<h3 class="sect2">Transforming XML Datagrams into an Alternative XML Format</h3>
<p>If the canonical <code dir="ltr">&lt;ROWSET&gt;</code> and <code dir="ltr">&lt;ROW&gt;</code> XML output from <a href="#BABGAHAI">Figure 14-4</a> is not the XML format you need, then you can associate an XSLT stylesheet with your XSQL page. The stylesheet can transform the XML datagram in the server before returning the data.</p>
<p>When exchanging data with another program, you typically agree on a DTD that describes the XML format for the exchange. Assume that you are given the <code dir="ltr">flight-list.dtd</code> definition and are told to produce your list of arriving flights in a format compliant with the DTD. You can use a visual tool such as XML Authority to browse the structure of the flight-list DTD, as shown in <a href="#BABCDJHB">Figure 14-5</a>.</p>
<div id="ADXDK19607" class="figure">
<p class="titleinfigure"><a id="BABCDJHB"></a>Figure 14-5 Exploring flight-list.dtd with XML Authority</p>
<img width="600" height="268" src="img/xsql2.gif" alt="Description of Figure 14-5 follows" /><br />
<a id="sthref399" href="img_text/xsql2.htm">Description of "Figure 14-5 Exploring flight-list.dtd with XML Authority"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a href="#BABCDJHB">Figure 14-5</a> shows that the standard XML formats for flight lists are as follows:</p>
<ul>
<li>
<p><code dir="ltr">&lt;flight-list&gt;</code> element, which contains one or more <code dir="ltr">&lt;flight&gt;</code> elements</p>
</li>
<li>
<p><code dir="ltr">&lt;flight&gt;</code> elements, which have attributes <code dir="ltr">airline</code> and <code dir="ltr">number</code>, and each of which contains an <code dir="ltr">&lt;arrives&gt;</code> element</p>
</li>
<li>
<p><code dir="ltr">&lt;arrives&gt;</code> elements, which contains text</p>
</li>
</ul>
<p><a href="#CACGCDCH">Example 14-13</a> shows the XSLT stylesheet <code dir="ltr">flight-list.xsl</code>. By associating the stylesheet with the XSQL page, you can change the default <code dir="ltr">&lt;ROWSET&gt;</code> and <code dir="ltr">&lt;ROW&gt;</code> format into the industry-standard <code dir="ltr">&lt;flight-list&gt;</code> and <code dir="ltr">&lt;flight&gt;</code>.</p>
<div id="ADXDK19608" class="example">
<p class="titleinexample"><a id="CACGCDCH"></a>Example 14-13 flight-list.xsl</p>
<pre dir="ltr">
&lt;!-- XSLT Stylesheet to transform ROWSET/ROW results into flight-list format
 --&gt; 
&lt;flight-list xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               xsl:version="1.0"&gt;   
  &lt;xsl:for-each select="ROWSET/ROW"&gt;
      &lt;flight airline="{CARRIER}" number="{FLIGHTNUMBER}"&gt;
        &lt;arrives&gt;&lt;xsl:value-of select="DUE"/&gt;&lt;/arrives&gt;
      &lt;/flight&gt;
  &lt;/xsl:for-each&gt;
&lt;/flight-list&gt;
</pre></div>
<!-- class="example" -->
<p>The XSLT stylesheet is a template that includes the literal elements that you want to produce in the resulting document, such as <code dir="ltr">&lt;flight-list&gt;</code>, <code dir="ltr">&lt;flight&gt;</code>, and <code dir="ltr">&lt;arrives&gt;</code>, interspersed with XSLT actions that enable you to do the following:</p>
<ul>
<li>
<p>Loop over matching elements in the source document with <code dir="ltr">&lt;xsl:for-each&gt;</code></p>
</li>
<li>
<p>Plug in the values of source document elements where necessary with <code dir="ltr">&lt;xsl:value-of&gt;</code></p>
</li>
<li>
<p>Plug in the values of source document elements into attribute values with the <code dir="ltr"><span class="codeinlineitalic">{some_parameter}</span></code> notation</p>
</li>
</ul>
<p>The following items have been added to the top-level <code dir="ltr">&lt;flight-list&gt;</code> element in the <a href="#CACGCDCH">Example 14-13</a> stylesheet:</p>
<ul>
<li>
<p><code dir="ltr">xmlns:xsl="http://www.w3.org/1999/XSL/Transform"</code></p>
<p>This attribute defines the XML Namespace named <code dir="ltr">xsl</code> and identifies the URL string that uniquely identifies the XSLT specification. Although it looks just like a URL, think of the string <code dir="ltr">http://www.w3.org/1999/XSL/Transform</code> as the "global primary key" for the set of elements defined in the XSLT 1.0 specification. When the namespace is defined, you can use the <code dir="ltr">&lt;xsl:XXX&gt;</code> action elements in the stylesheet to loop and plug values in where necessary.</p>
</li>
<li>
<p><code dir="ltr">xsl:version="1.0"</code></p>
<p>This attribute identifies the document as an XSLT 1.0 stylesheet. A version attribute is required on all XSLT stylesheets for them to be valid and recognized by an XSLT processor.</p>
</li>
</ul>
<p>You can associate the <code dir="ltr">flight-list.xsl</code> stylesheet with the <code dir="ltr">AvailableFlightsToday.xsql</code> in <a href="#CACJFEFI">Example 14-3</a> by adding an <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> instruction to the top of the page. <a href="#CACBHJGD">Example 14-14</a> illustrates this technique.</p>
<div id="ADXDK19609" class="example">
<p class="titleinexample"><a id="CACBHJGD"></a>Example 14-14 flight-list.xsl</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
<span class="bold">&lt;?xml-stylesheet type="text/xsl" href="flight-list.xsl"?&gt;</span>
&lt;xsql:query connection="demo" bind-params="City" xmlns:xsql="urn:oracle-xsql"&gt;
    SELECT Carrier, FlightNumber, Origin, TO_CHAR(ExpectedTime,'HH24:MI') AS Due
      FROM FlightSchedule
     WHERE TRUNC(ExpectedTime) = TRUNC(SYSDATE) AND Arrived = 'N'
       AND Destination = ?   /* The ? is a bind variable being bound */
      ORDER BY ExpectedTime  /* to the value of the City parameter   */
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>Associating an XSLT stylesheet with the XSQL page causes the requesting program or browser to view the XML in the format as specified by <code dir="ltr">flight-list.dtd</code> you were given. <a href="#BABFFFEF">Figure 14-6</a> illustrates a sample browser display.</p>
<div id="ADXDK19610" class="figure">
<p class="titleinfigure"><a id="BABFFFEF"></a>Figure 14-6 XSQL Page Results in XML Format</p>
<img width="452" height="331" src="img/xsql3.gif" alt="Description of Figure 14-6 follows" /><br />
<a id="sthref400" href="img_text/xsql3.htm">Description of "Figure 14-6 XSQL Page Results in XML Format"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" -->
<a id="i1023667"></a>
<div id="ADXDK19611" class="sect2">
<h3 class="sect2">Transforming XML Datagrams into HTML for Display</h3>
<p>To return the same XML data in HTML instead of an alternative XML format, use a different XSLT stylesheet. For example, rather than producing elements such as <code dir="ltr">&lt;flight-list&gt;</code> and <code dir="ltr">&lt;flight&gt;</code>, you can write a stylesheet that produces HTML elements such as <code dir="ltr">&lt;table&gt;</code>, <code dir="ltr">&lt;tr&gt;</code>, and <code dir="ltr">&lt;td&gt;</code>. The result of the dynamically queried data then looks like the HTML page shown in <a href="#BABCFBIB">Figure 14-7</a>. Instead of returning raw XML data, the XSQL page leverages server-side XSLT transformation to format the information as HTML for delivery to the browser.</p>
<div id="ADXDK19612" class="figure">
<p class="titleinfigure"><a id="BABCFBIB"></a>Figure 14-7 Using an XSLT Stylesheet to Render HTML</p>
<img width="429" height="301" src="img/xsql4.gif" alt="Description of Figure 14-7 follows" /><br />
<a id="sthref401" href="img_text/xsql4.htm">Description of "Figure 14-7 Using an XSLT Stylesheet to Render HTML"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Similar to the syntax of the <code dir="ltr">flight-list.xsl</code> stylesheet, the <code dir="ltr">flight-display.xsl</code> stylesheet shown in <a href="#CACFBCBJ">Example 14-15</a> looks like a template HTML page. It contains <code dir="ltr">&lt;xsl:for-each&gt;</code>, <code dir="ltr">&lt;xsl:value-of&gt;</code>, and attribute value templates such as <code dir="ltr">{DUE}</code> to plug in the dynamic values from the underlying <code dir="ltr">&lt;ROWSET&gt;</code> and <code dir="ltr">&lt;ROW&gt;</code> structured XML query results.</p>
<div id="ADXDK19613" class="example">
<p class="titleinexample"><a id="CACFBCBJ"></a>Example 14-15 flight-display.xsl</p>
<pre dir="ltr">
&lt;!-- XSLT Stylesheet to transform ROWSET/ROW results into HTML --&gt;
&lt;html xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xsl:version="1.0"&gt;
  &lt;head&gt;&lt;link rel="stylesheet" type="text/css" href="flights.css" /&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;center&gt;&lt;table border="0"&gt;
      &lt;tr&gt;&lt;th&gt;Flight&lt;/th&gt;&lt;th&gt;Arrives&lt;/th&gt;&lt;/tr&gt;
      &lt;xsl:for-each select="ROWSET/ROW"&gt;
        &lt;tr&gt;
          &lt;td&gt;
            &lt;table border="0" cellspacing="0" cellpadding="4"&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;img align="absmiddle" src="images/{CARRIER}.gif"/&gt;&lt;/td&gt;
                &lt;td width="180"&gt;
                  &lt;xsl:value-of select="CARRIER"/&gt;
                  &lt;xsl:text&gt; &lt;/xsl:text&gt;
                  &lt;xsl:value-of select="FLIGHTNUMBER"/&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/table&gt;
          &lt;/td&gt;
          &lt;td align="center"&gt;&lt;xsl:value-of select="DUE"/&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/xsl:for-each&gt;
    &lt;/table&gt;&lt;/center&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The stylesheet produces well-formed HTML. Each opening tag is properly closed (for example, <code dir="ltr">&lt;td&gt;</code>&hellip;<code dir="ltr">&lt;/td&gt;</code>); empty tags use the XML empty element syntax <code dir="ltr">&lt;br/&gt;</code> instead of just <code dir="ltr">&lt;br&gt;</code>.</div>
<p>You can achieve useful results quickly by combining the power of the following:</p>
<ul>
<li>
<p>Parameterized SQL statements to select information from the Oracle database</p>
</li>
<li>
<p>Industry-standard XML as a portable, interim data exchange format</p>
</li>
<li>
<p>XSLT to transform XML-based datagrams into any XML- or HTML-based format</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHEDEEFA"></a>
<div id="ADXDK19614" class="sect1">
<h2 class="sect1">Using XSQL in Java Programs</h2>
<p>The <code dir="ltr">oracle.xml.xsql.XSQLRequest</code> class enables you to use the XSQL page processor in your Java programs. To use the XSQL Java API, follow these basic steps:</p>
<ol>
<li>
<p>Construct an instance of <code dir="ltr">XSQLRequest</code>, passing the XSQL page to be processed into the constructor as one of the following:</p>
<ul>
<li>
<p><code dir="ltr">String</code> containing a URL to the page</p>
</li>
<li>
<p><code dir="ltr">URL</code> object for the page</p>
</li>
<li>
<p>In-memory <code dir="ltr">XMLDocument</code></p>
</li>
</ul>
</li>
<li>
<p>Invoke one of the following methods on the object to process the page:</p>
<ul>
<li>
<p><code dir="ltr">process()</code> to write the result to a <code dir="ltr">PrintWriter</code> or <code dir="ltr">OutputStream</code></p>
</li>
<li>
<p><code dir="ltr">processToXML()</code> to return the result as an XML Document</p>
</li>
</ul>
</li>
</ol>
<p>If you want to use the built-in XSQL connection manager, which implements JDBC connection pooling based on XSQL configuration file definitions, then the XSQL page is all you need to pass to the constructor. Optionally, you can pass in a custom implementation for the <code dir="ltr">XSQLConnectionManagerFactory</code> interface as well.</p>
<p>The ability to pass the XSQL page as an in-memory <code dir="ltr">XMLDocument</code> object means that you can dynamically generate any valid XSQL page for processing. You can then pass the page to the XSQL engine for evaluation.</p>
<p>When processing a page, you may want to perform the following additional tasks as part of the request:</p>
<ul>
<li>
<p>Pass a set of parameters to the request.</p>
<p>You accomplish this aim by passing any object that implements the <code dir="ltr">Dictionary</code> interface to the <code dir="ltr">process()</code> or <code dir="ltr">processToXML()</code> methods. Passing a <code dir="ltr">HashTable</code> containing the parameters is one popular approach.</p>
</li>
<li>
<p>Set an XML document to be processed by the page as if it were the "posted XML" message body.</p>
<p>You can do this by using the <code dir="ltr">XSQLResquest.setPostedDocument()</code> method.</p>
</li>
</ul>
<p><a href="#BABICHFJ">Example 14-16</a> shows how you can process a page by using <code dir="ltr">XSQLRequest</code>.</p>
<div id="ADXDK19615" class="example">
<p class="titleinexample"><a id="BABICHFJ"></a>Example 14-16 XSQLRequestSample Class</p>
<pre dir="ltr">
import oracle.xml.xsql.XSQLRequest;
import java.util.Hashtable;
import java.io.PrintWriter;
import java.net.URL;
public class XSQLRequestSample {
  public static void main( String[] args) throws Exception {
     // Construct the URL of the XSQL Page
   URL pageUrl = new URL("file:///C:/foo/bar.xsql");
   // Construct a new XSQL Page request
   XSQLRequest req = new XSQLRequest(pageUrl);
   // Set up a Hashtable of named parameters to pass to the request
   Hashtable params = new Hashtable(3);
   params.put("param1","value1");
   params.put("param2","value2");
   /* If needed, treat an existing, in-memory XMLDocument as if
   ** it were posted to the XSQL Page as part of the request
   req.setPostedDocument(myXMLDocument);
   **
   */
   // Process the page, passing the parameters and writing the output
   // to standard out.
   req.process(params,new PrintWriter(System.out),
                      new PrintWriter(System.err));
  }
}
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_j_xsqladv.htm#BABCIGBB">Chapter 15, "Using the XSQL Pages Publishing Framework: Advanced Topics"</a> to learn more about the XSQL Java API</div>
</div>
<!-- class="sect1" -->
<a id="i1025108"></a>
<div id="ADXDK19616" class="sect1">
<h2 class="sect1">XSQL Pages Tips and Techniques</h2>
<p>This section contains the following topics:</p>
<ul>
<li>
<p><a href="#CACGDFAI">XSQL Pages Limitations</a></p>
</li>
<li>
<p><a href="#CACEIBCH">Hints for Using the XSQL Servlet</a></p>
</li>
<li>
<p><a href="#CACJDBAE">Resolving Common XSQL Connection Errors</a></p>
</li>
<li>
<p><a href="#i1038545">Security Considerations for XSQL Pages</a></p>
</li>
</ul>
<a id="CACGDFAI"></a>
<div id="ADXDK19617" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">XSQL Pages Limitations</h3>
<p>HTTP parameters with multibyte names, for example, a parameter whose name is in Kanji, are properly handled when they are inserted into your XSQL page with the <a href="adx_ref_xsql.htm#CHDDGGEJ">&lt;xsql:include-request-params&gt;</a> element. An attempt to refer to a parameter with a multibyte name inside the query statement of an <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> tag returns an empty string for the parameter value.<a id="sthref402"></a></p>
<p>As a workaround use a nonmultibyte parameter name. The parameter can still have a multibyte value that can be handled correctly.</p>
</div>
<!-- class="sect2" -->
<a id="CACEIBCH"></a>
<div id="ADXDK19618" class="sect2">
<h3 class="sect2">Hints for Using the <a id="sthref403"></a>XSQL Servlet</h3>
<p>This section lists the following XSQL Servlet hints:</p>
<ul>
<li>
<p><a href="#CACFAAEI">Specifying a DTD While Transforming XSQL Output to a WML Document</a></p>
</li>
<li>
<p><a href="#CACJDIHI">Testing Conditions in XSQL Pages</a></p>
</li>
<li>
<p><a href="#CACIIDCD">Passing a Query Result to the WHERE Clause of Another Query</a></p>
</li>
<li>
<p><a href="#CACEAFAH">Handling Multi-Valued HTML Form Parameters</a></p>
</li>
<li>
<p><a href="#CACIBIGA">Invoking PL/SQL Wrapper Procedures to Generate XML Datagrams</a></p>
</li>
<li>
<p><a href="#CACDHHJA">Accessing Contents of Posted XML</a></p>
</li>
<li>
<p><a href="#CACIBBEG">Changing Database Connections Dynamically</a></p>
</li>
<li>
<p><a href="#CACJCEGC">Retrieving the Name of the Current XSQL Page</a></p>
</li>
</ul>
<a id="CACFAAEI"></a>
<div id="ADXDK19619" class="sect3">
<h4 class="sect3">Specifying a DTD While Transforming XSQL Output to a <a id="sthref404"></a>WML Document</h4>
<p>You can specify a DTD while transforming XSQL output to a WML document for a wireless application. The technique is to use a built-in facility of the XSLT stylesheet called <code dir="ltr">&lt;xsl:output&gt;</code>. The following example illustrates this technique:</p>
<pre dir="ltr">
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output type="xml" doctype-system="your.dtd"/&gt;
  &lt;xsl:template match="/"&gt;
  &lt;/xsl:template&gt;
    ...
&lt;/xsl:stylesheet&gt;
</pre>
<p>The preceding stylesheet produces an XML result that includes the following code, where <code dir="ltr">"your.dtd"</code> can be any valid absolute or relative URL.:</p>
<p><code dir="ltr">&lt;!DOCTYPE xxxx SYSTEM "your.dtd"&gt;</code></p>
</div>
<!-- class="sect3" -->
<a id="CACJDIHI"></a>
<div id="ADXDK19620" class="sect3">
<h4 class="sect3">Testing Conditions in XSQL Pages</h4>
<p>You can include if-then logic in your XSQL pages. <a href="#CACBBJEG">Example 14-17</a> illustrates a technique for executing a query based on a test of a parameter value.</p>
<div id="ADXDK19621" class="example">
<p class="titleinexample"><a id="CACBBJEG"></a>Example 14-17 Conditional Statements in XSQL Pages</p>
<pre dir="ltr">
&lt;xsql:if-param name="security" equals="admin"&gt;
  &lt;xsql:query&gt;
      SELECT ....
  &lt;/xsql:query&gt;
&lt;/xsq:when&gt;
&lt;xsql:if-param name="security" equals="user"&gt;
  &lt;xsql:query&gt;
      SELECT ....
  &lt;/xsql:query&gt;
&lt;/xsql:if-param&gt;
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="adx_ref_xsql.htm#BJEEABJJ">Chapter 30, "XSQL Pages Reference"</a> to learn about the <a href="adx_ref_xsql.htm#BJECGJDF">&lt;xsql:if-param&gt;</a> action</div>
</div>
<!-- class="sect3" -->
<a id="CACIIDCD"></a>
<div id="ADXDK19622" class="sect3">
<h4 class="sect3">Passing a Query Result to the WHERE Clause of Another Query<a id="sthref405"></a></h4>
<p>If you have two queries in an XSQL page, then you can use the value of a select list item of the first query in the second query by using page parameters. <a href="#CACCHFJC">Example 14-18</a> illustrates this technique.</p>
<div id="ADXDK19623" class="example">
<p class="titleinexample"><a id="CACCHFJC"></a>Example 14-18 Passing Values Among SQL Queries</p>
<pre dir="ltr">
&lt;page xmlns:xsql="urn:oracle-xsql" connection="demo"&gt;
  &lt;!-- Value of page param "xxx" will be first column of first row --&gt;
  &lt;xsql:set-page-param name="xxx"&gt;
    SELECT one FROM table1 WHERE ...
  &lt;/xsl:set-param-param&gt;
  &lt;xsql:query bind-params="xxx"&gt;
    SELECT col3,col4 FROM table2
    WHERE col3 = ?
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CACEAFAH"></a>
<div id="ADXDK19624" class="sect3">
<h4 class="sect3">Handling Multi-Valued <a id="sthref406"></a>HTML Form Parameters</h4>
<p>In some situations you may need to process multi-valued HTML <code dir="ltr">&lt;form&gt;</code> parameters that are needed for <code dir="ltr">&lt;input name="choices" type="checkbox"&gt;</code>. Use the parameter array notation on your parameter name (for example, <code dir="ltr">choices[]</code>) to refer to the array of values from the selected check boxes.</p>
<p>Assume that you have a multi-valued parameter named <code dir="ltr">guy</code>. You can use the array parameter notation in an XSQL page as shown in <a href="#CACEDCAC">Example 14-19</a>.</p>
<div id="ADXDK19625" class="example">
<p class="titleinexample"><a id="CACEDCAC"></a>Example 14-19 Handling Multi-Valued Parameters</p>
<pre dir="ltr">
&lt;page xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:set-page-param name="guy-list" value="{@guy[]}"
                       treat-list-as-array="yes"/&gt;
  &lt;xsql:set-page-param name="quoted-guys" value="{@guy[]}"
                       treat-list-as-array="yes" quote-array-values="yes"/&gt;
  &lt;xsql:include-param name="guy-list"/&gt;
  &lt;xsql:include-param name="quoted-guys"/&gt;
  &lt;xsql:include-param name="guy[]"/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>Assume that you request this page is requested with the following URL, which contains multiple parameters of the same name to produce a multi-valued attribute:</p>
<pre dir="ltr">
http://yourserver.com/page.xsql?guy=Curly&amp;guy=Larry&amp;guy=Moe
</pre>
<p>The page returned looks like the following:</p>
<pre dir="ltr">
&lt;page&gt;
  &lt;guy-list&gt;Curly,Larry,Moe&lt;/guy-list&gt;
  &lt;quoted-guys&gt;'Curly','Larry','Moe'&lt;/quoted-guys&gt;
  &lt;guy&gt;
    &lt;value&gt;Curly&lt;/value&gt;
    &lt;value&gt;Larry&lt;/value&gt;
    &lt;value&gt;Moe&lt;/value&gt;
  &lt;/guy&gt;
&lt;/page&gt;
</pre>
<p>You can also use the value of a multi-valued page parameter in a SQL statement <code dir="ltr">WHERE</code> clause by using the code shown in <a href="#BABDGEHI">Example 14-20</a>.</p>
<div id="ADXDK19626" class="example">
<p class="titleinexample"><a id="BABDGEHI"></a>Example 14-20 Using Multi-Valued Page Parameters in a SQL Statement</p>
<pre dir="ltr">
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:set-page-param name="quoted-guys" value="{@guy[]}"
                       treat-list-as-array="yes" 
                       quote-array-values="yes"/&gt;
  &lt;xsql:query&gt;
    SELECT *
    FROM   sometable
    WHERE  name IN ({@quoted-guys})
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CACIBIGA"></a>
<div id="ADXDK19627" class="sect3">
<h4 class="sect3">Invoking PL/SQL Wrapper Procedures to Generate XML Datagrams<a id="sthref407"></a></h4>
<p>You cannot set parameter values by binding them in the position of <code dir="ltr">OUT</code> variables with <a href="adx_ref_xsql.htm#CHDDEHJG">&lt;xsql:dml&gt;</a>. Only <code dir="ltr">IN</code> parameters are supported for binding. You can create a wrapper procedure, however, that constructs XML elements with the HTTP package. Your XSQL page can then invoke the wrapper procedure with <a href="adx_ref_xsql.htm#CHDDAFAD">&lt;xsql:include-owa&gt;</a>.</p>
<p><a href="#CACHACFH">Example 14-21</a> shows a PL/SQL procedure that accepts two <code dir="ltr">IN</code> parameters, multiplies them and puts the value in one <code dir="ltr">OUT</code> parameter, then adds them and puts the result in a second <code dir="ltr">OUT</code> parameter.</p>
<div id="ADXDK19628" class="example">
<p class="titleinexample"><a id="CACHACFH"></a>Example 14-21 addmult PL/SQL Procedure</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE addmult(arg1        NUMBER, arg2        NUMBER,
                                    sumval  OUT NUMBER, prodval OUT NUMBER) 
IS
BEGIN
  sumval := arg1 + arg2;
  prodval := arg1 * arg2;
END;
</pre></div>
<!-- class="example" -->
<p>You can write the PL/SQL procedure in <a href="#CACJBBGC">Example 14-22</a> to wrap the procedure in <a href="#CACHACFH">Example 14-21</a>. The <code dir="ltr">addmultwrapper</code> procedure accepts the <code dir="ltr">IN</code> arguments that the <code dir="ltr">addmult</code> procedure preceding expects, and then encodes the <code dir="ltr">OUT</code> values as an XML datagram that you print to the OWA page buffer.</p>
<div id="ADXDK19629" class="example">
<p class="titleinexample"><a id="CACJBBGC"></a>Example 14-22 addmultwrapper PL/SQL Procedure</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE addmultwrapper(arg1 NUMBER, arg2 NUMBER) 
IS
  sumval  NUMBER;
  prodval NUMBER;
  xml     VARCHAR2(2000);
BEGIN
  -- Call the procedure with OUT values
  addmult(arg1,arg2,sumval,prodval);
  -- Then produce XML that encodes the OUT values
  xml := '&lt;addmult&gt;'||
         '&lt;sum&gt;'||sumval||'&lt;/sum&gt;'||
         '&lt;product&gt;'||prodval||'&lt;/product&gt;'||
         '&lt;/addmult&gt;';
  -- Print the XML result to the OWA page buffer for return
  HTP.P(xml);
END;
</pre></div>
<!-- class="example" -->
<p>The XSQL page shown in <a href="#CACDIGJI">Example 14-23</a> constructs an XML document by including a call to the PL/SQL wrapper procedure.</p>
<div id="ADXDK19630" class="example">
<p class="titleinexample"><a id="CACDIGJI"></a>Example 14-23 addmult.xsql</p>
<pre dir="ltr">
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:include-owa bind-params="arg1 arg2"&gt;
    BEGIN addmultwrapper(?,?); END;
  &lt;/xsql:include-owa&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>Suppose that you invoke <code dir="ltr">addmult.xsql</code> by entering a URL in a browser as follows:</p>
<pre dir="ltr">
http://yourserver.com/addmult.xsql?arg1=30&amp;arg2=45
</pre>
<p>The XML datagram returned by the servlet reflects the <code dir="ltr">OUT</code> values as follows:</p>
<pre dir="ltr">
&lt;page&gt;
  &lt;addmult&gt;&lt;sum&gt;75&lt;/sum&gt;&lt;product&gt;1350&lt;/product&gt;&lt;/addmult&gt;
&lt;/page&gt;
</pre></div>
<!-- class="sect3" -->
<a id="CACDHHJA"></a>
<div id="ADXDK19631" class="sect3">
<h4 class="sect3">Accessing Contents of Posted XML<a id="sthref408"></a><a id="sthref409"></a></h4>
<p>The XSQL page processor can access the contents of posted XML. Any XML document can be posted and handled by the feature that XSQL supports.</p>
<p>For example, an XSQL page can access the contents of an inbound SOAP message by using the <code dir="ltr">xpath=</code>"<code dir="ltr"><span class="codeinlineitalic">XpathExpression</span></code>" attribute in the <a href="adx_ref_xsql.htm#CHDFBHAB">&lt;xsql:set-page-param&gt;</a> action. Alternatively, custom action handlers can gain direct access to the SOAP message body by calling <code dir="ltr">getPageRequest().getPostedDocument()</code>. To create the SOAP response body to return to the client, use an XSLT stylesheet or a custom serializer implementation to write the XML response in an appropriate SOAP-encoded format.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
The Airport SOAP demo for an example of using an XSQL page to implement a SOAP-based Web Service</div>
</div>
<!-- class="sect3" -->
<a id="CACIBBEG"></a>
<div id="ADXDK19632" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Changing Database Connections Dynamically<a id="sthref410"></a></h4>
<p>Suppose that you want to choose database connections dynamically when invoking an XSQL page. For example, you may want to switch between a test database and a production database.You can achieve this goal by including an XSQL parameter in the <code dir="ltr">connection</code> attribute of the XSQL page. Make sure to define an attribute of the same name to serve as the default value for the connection name.</p>
<p>Assume that in your XSQL configuration file you define connections for database <code dir="ltr">testdb</code> and <code dir="ltr">proddb</code>. You then write an XSQL page with the following <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> element:</p>
<pre dir="ltr">
&lt;xsql:query conn="testdb" connection="{@conn}" xmlns:xsql="urn:oracle-xsql"&gt;
  ...
&lt;/xsql:query&gt; 
</pre>
<p>If you request this page without any parameters, then the value of the <code dir="ltr">conn</code> parameter is <code dir="ltr">testdb</code>, so the page uses the connection named <code dir="ltr">testdb</code> defined in the XSQL configuration file. If you request the page with <code dir="ltr">conn=proddb</code>, then the page uses the connection named <code dir="ltr">proddb</code> instead.</p>
</div>
<!-- class="sect3" -->
<a id="CACJCEGC"></a>
<div id="ADXDK19633" class="sect3">
<h4 class="sect3">Retrieving the Name of the Current XSQL Page<a id="sthref411"></a></h4>
<p>An XSQL page can access its own name in a generic way at runtime in order to construct links to the current page. You can use a helper method like the one shown in <a href="#CACGCDHC">Example 14-24</a> to retrieve the name of the page inside a custom action handler.</p>
<div id="ADXDK19634" class="example">
<p class="titleinexample"><a id="CACGCDHC"></a>Example 14-24 Obtaining the Name of the Current XSQL Page</p>
<pre dir="ltr">
private String curPageName(XSQLPageRequest req) {
  String thisPage = req.getSourceDocumentURI();;
  int pos = thisPage.lastIndexOf('/');
  if (pos &gt;=0) thisPage = thisPage.substring(pos+1);
  pos = thisPage.indexOf('?');
  if (pos &gt;=0) thisPage = thisPage.substring(0,pos-1);
  return thisPage;
}
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CACJDBAE"></a>
<div id="ADXDK19635" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Resolving Common XSQL Connection Errors</h3>
<p>This section contains tips for responding to XSQL errors:</p>
<ul>
<li>
<p><a href="#CACICDAI">Receiving "Unable to Connect" Errors</a></p>
</li>
<li>
<p><a href="#CACHDEEC">Receiving "No Posted Document to Process" When Using HTTP POST</a></p>
</li>
</ul>
<a id="CACICDAI"></a>
<div id="ADXDK19636" class="sect3">
<h4 class="sect3">Receiving "Unable to Connect" Errors<a id="sthref412"></a></h4>
<p>Suppose that you are unable to connect to a database and errors similar to the following when running the <code dir="ltr">helloworld.xsql</code> sample program:</p>
<pre dir="ltr">
Oracle XSQL Servlet Page Processor
XSQL-007: Cannot acquire a database connection to process page.
Connection refused(DESCRIPTION=(TMP=)(VSNNUM=135286784)(ERR=12505)
(ERROR_STACK=(ERROR=(CODE=12505)(EMFI=4))))
</pre>
<p>The preceding errors indicate that the XSQL servlet is attempting the JDBC connection based on the <code dir="ltr">&lt;connectiondef&gt;</code> information for the connection named <code dir="ltr">demo</code>, assuming you did not modify the <code dir="ltr">helloworld.xsql</code> demo page.</p>
<p>By default the <code dir="ltr">XSQLConfig.xml</code> file comes with the entry for the <code dir="ltr">demo</code> connection that looks like the following (use the correct password):</p>
<pre dir="ltr">
&lt;connection name="demo"&gt;
  &lt;username&gt;scott&lt;/username&gt;
  &lt;password&gt;<span class="italic">password</span>&lt;/password&gt;
  &lt;dburl&gt;jdbc:oracle:thin:@localhost:1521:ORCL&lt;/dburl&gt;
  &lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt;
&lt;/connection&gt;
</pre>
<p>The error is probably due to one of the following reasons:</p>
<ul>
<li>
<p>Your database is not on the <code dir="ltr">localhost</code> machine.</p>
</li>
<li>
<p>Your database <code dir="ltr">SID</code> is not <code dir="ltr">ORCL.</code></p>
</li>
<li>
<p>Your TNS Listener Port is not <code dir="ltr">1521</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CACHDEEC"></a>
<div id="ADXDK19637" class="sect3">
<h4 class="sect3">Receiving "No Posted Document to Process" When Using HTTP POST</h4>
<p>When trying to post XML information to an XSQL page for processing, it must be sent by the <a id="sthref413"></a>HTTP <code dir="ltr">POST</code> method. This transfer can be effected by an HTML form or an XML document sent by HTTP <code dir="ltr">POST</code>. If you try to use HTTP <code dir="ltr">GET</code> instead, then there is no posted document, and hence you get the "No posted document to process" error. Use HTTP <code dir="ltr">POST</code> instead to cause the correct behavior.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1038545"></a>
<div id="ADXDK19638" class="sect2">
<h3 class="sect2">Security<a id="sthref414"></a><a id="sthref415"></a> Considerations for XSQL Pages</h3>
<p>This section describes best practices for managing security in the XSQL servlet:</p>
<ul>
<li>
<p><a href="#CACHDBDH">Installing Your XSQL Configuration File in a Safe Directory</a></p>
</li>
<li>
<p><a href="#CACCFAEJ">Disabling Default Client Stylesheet Overrides</a></p>
</li>
<li>
<p><a href="#CACIDFJC">Protecting Against the Misuse of Substitution Parameters</a></p>
</li>
</ul>
<a id="CACHDBDH"></a>
<div id="ADXDK19639" class="sect3">
<h4 class="sect3">Installing Your XSQL Configuration File in a Safe Directory</h4>
<p>The <code dir="ltr">XSQLConfig.xml</code> configuration file contains sensitive database username and password information. This file should not reside in any directory that maps to a virtual path of your Web server, nor in any of its subdirectories. The only required permissions for the configuration file are read permission granted to the UNIX account that owns the servlet engine. Failure to follow this recommendation could mean that a user of your site could browse the contents of your configuration file, thereby obtaining the passwords to database accounts.</p>
</div>
<!-- class="sect3" -->
<a id="CACCFAEJ"></a>
<div id="ADXDK19640" class="sect3">
<h4 class="sect3">Disabling Default Client Stylesheet Overrides</h4>
<p>By default, the XSQL page processor enables the user to supply a stylesheet in the page request by passing a value for the special <code dir="ltr">xml-stylesheet</code> parameter. If you want the stylesheet referenced by the server-side XSQL page to be the only legal stylesheet, then include the <code dir="ltr">allow-client-style="no"</code> attribute on the document element of your page. You can also globally change the default setting in the <code dir="ltr">XSQLConfig.xml</code> file to disallow client stylesheet overrides. If you take either approach, then the only pages that allow client stylesheet overrides are those that include the <code dir="ltr">allow-client-style="yes"</code> attribute on their document element.</p>
</div>
<!-- class="sect3" -->
<a id="CACIDFJC"></a>
<div id="ADXDK19641" class="sect3">
<h4 class="sect3">Protecting Against the Misuse of Substitution Parameters</h4>
<p>Any product that supports the use of lexical substitution variables in a SQL query can cause a developer problems. Any time you deploy an XSQL page that allows part of all of a SQL statement to be substituted by a lexical parameter, you must make sure that you have taken appropriate precautions against misuse.</p>
<p>For example, one of the demonstrations that comes with XSQL Pages is the Adhoc Query Demo. It illustrates how you can supply the entire SQL statement of an <a href="adx_ref_xsql.htm#CHDDFHCB">&lt;xsql:query&gt;</a> action handler as a parameter. This technique is a powerful and beneficial tool when in the right hands, but if you deploy a similar page to your production system, then the user can execute any query that the database security privileges for the connection associated with the page allows. For example, the Adhoc Query Demo is set up to use a connection that maps to the <code dir="ltr">scott</code> account, so a user can query any data that <code dir="ltr">scott</code> would be allowed to query from SQL*Plus.</p>
<p>You can use the following techniques to make sure your pages are not abused:</p>
<ul>
<li>
<p>Make sure the database user account associated with the page has only the privileges for reading the tables and views you want your users to see.</p>
</li>
<li>
<p>Use true bind variables instead of lexical bind variables when substituting single values in a <code dir="ltr">SELECT</code> statement. If you need to parameterize syntactic parts of your SQL statement, then lexical parameters are the only way to proceed. Otherwise, you should use true bind variables so that any attempt to pass an invalid value generates an error instead of producing an unexpected result.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_ref_dlf.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_j_xsqladv.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
