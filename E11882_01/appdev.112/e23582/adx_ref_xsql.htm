<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>XSQL Pages Reference</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T14:20:39Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="XML Developer's Kit Programmer's Guide" />
<meta name="dcterms.identifier" content="E23582-06" />
<meta name="dcterms.isVersionOf" content="ADXDK" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="adx_pt_ref.htm" title="Previous" type="text/html" />
<link rel="Next" href="adx_ref_standards.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e23582.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">41/47</span> <!-- End Header -->
<div id="ADXDK19952" class="chapter"><a id="BJEEABJJ"></a>
<h1 class="chapter"><span class="secnum">30</span> XSQL Pages Reference</h1>
<p>This chapter contains reference information for the XSQL pages framework. <a href="#i1024659">"XSQL Configuration File Parameters"</a> describes settings in the XSQL configuration file. <a href="#BJEBEJFF">Table 30-1</a> lists the legal built-in actions for XSQL pages.</p>
<div id="ADXDK19953" class="tblformalwide">
<p class="titleintable"><a id="sthref624"></a><a id="BJEBEJFF"></a>Table 30-1 Built-In XSQL Elements and Action Handler Classes</p>
<table class="cellalignment1211" title="Built-In XSQL Elements and Action Handler Classes " summary="XSQL Action Element, Handler Class, and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t2">XSQL Action Element</th>
<th class="cellalignment1212" id="r1c2-t2">Handler Class in oracle.xml.xsql.actions</th>
<th class="cellalignment1212" id="r1c3-t2">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEECIJG">&lt;xsql:action&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLExtensionActionHandler</code></p>
</td>
<td class="cellalignment1213" headers="r2c1-t2 r1c3-t2">
<p>Invoke a user-defined action handler, implemented in Java, for executing custom logic and including custom XML data in your XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEGJBAJ">&lt;xsql:delete-request&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLDeleteRequestHandler</code></p>
</td>
<td class="cellalignment1213" headers="r3c1-t2 r1c3-t2">
<p>Delete an existing row in the database based on the posted XML document supplied in the request.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDDEHJG">&lt;xsql:dml&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r4c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLDMLHandler</code></p>
</td>
<td class="cellalignment1213" headers="r4c1-t2 r1c3-t2">
<p>Execute a SQL DML statement or a PL/SQL anonymous block.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJECGJDF">&lt;xsql:if-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r5c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIfParamHandler</code></p>
</td>
<td class="cellalignment1213" headers="r5c1-t2 r1c3-t2">
<p>Conditionally include XML content or other XSQL actions.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDDAFAD">&lt;xsql:include-owa&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r6c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIncludeOWAHandler</code></p>
</td>
<td class="cellalignment1213" headers="r6c1-t2 r1c3-t2">
<p>Include the results of a stored procedure that uses the Oracle Web Agent (OWA) packages in the database to generate XML.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDHDCAG">&lt;xsql:include-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r7c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLGetParameterHandler</code></p>
</td>
<td class="cellalignment1213" headers="r7c1-t2 r1c3-t2">
<p>Include a parameter and its value as an element in the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDDDAGA">&lt;xsql:include-posted-xml&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r8c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIncludePostedXMLHandler</code></p>
</td>
<td class="cellalignment1213" headers="r8c1-t2 r1c3-t2">
<p>Include the XML document that has been posted in the request into the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDDGGEJ">&lt;xsql:include-request-params&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r9c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIncludeRequestHandler</code></p>
</td>
<td class="cellalignment1213" headers="r9c1-t2 r1c3-t2">
<p>Include all request parameters as XML elements in the XSQL page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDCCEID">&lt;xsql:include-xml&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r10c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIncludeXMLHandler</code></p>
</td>
<td class="cellalignment1213" headers="r10c1-t2 r1c3-t2">
<p>Include arbitrary XML resources at any point in your page by relative or absolute URL.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEEDBGH">&lt;xsql:include-xsql&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r11c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLIncludeXSQLHandler</code></p>
</td>
<td class="cellalignment1213" headers="r11c1-t2 r1c3-t2">
<p>Include the results of one XSQL page at any point inside another.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEBHIIB">&lt;xsql:insert-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r12c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLInsertParameterHandler</code></p>
</td>
<td class="cellalignment1213" headers="r12c1-t2 r1c3-t2">
<p>Insert the XML document contained in the value of a single parameter.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEHGIFD">&lt;xsql:insert-request&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r13c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLInsertRequestHandler</code></p>
</td>
<td class="cellalignment1213" headers="r13c1-t2 r1c3-t2">
<p>Insert the XML document or HTML form posted in the request into a table or view.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDDFHCB">&lt;xsql:query&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r14c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLQueryHandler</code></p>
</td>
<td class="cellalignment1213" headers="r14c1-t2 r1c3-t2">
<p>Execute an arbitrary SQL statement and include its result in canonical XML format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDEBBEG">&lt;xsql:ref-cursor-function&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r15c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLRefCursorFunctionHandler</code></p>
</td>
<td class="cellalignment1213" headers="r15c1-t2 r1c3-t2">
<p>Include the canonical XML representation of the result set of a cursor returned by a PL/SQL stored function.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDCBIFI">&lt;xsql:set-cookie&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r16c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLSetCookieHandler</code></p>
</td>
<td class="cellalignment1213" headers="r16c1-t2 r1c3-t2">
<p>Set an HTTP Cookie.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDFBHAB">&lt;xsql:set-page-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r17c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLSetPageParamHandler</code></p>
</td>
<td class="cellalignment1213" headers="r17c1-t2 r1c3-t2">
<p>Set an HTTP-Session level parameter. Set a page-level (local) parameter that can be referred to in subsequent SQL statements in the page.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDGFGIA">&lt;xsql:set-session-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r18c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLSetSessionParamHandler</code></p>
</td>
<td class="cellalignment1213" headers="r18c1-t2 r1c3-t2">
<p>Set an HTTP-Session level parameter.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r19c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#CHDGHAGJ">&lt;xsql:set-stylesheet-param&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r19c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLStylesheetParameterHandler</code></p>
</td>
<td class="cellalignment1213" headers="r19c1-t2 r1c3-t2">
<p>Set the value of a top-level XSLT stylesheet parameter.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r20c1-t2" headers="r1c1-t2">
<pre dir="ltr">
<a href="#BJEHDFIH">&lt;xsql:update-request&gt;</a>
</pre></td>
<td class="cellalignment1213" headers="r20c1-t2 r1c2-t2">
<p><code dir="ltr">XSQLUpdateRequestHandler</code></p>
</td>
<td class="cellalignment1213" headers="r20c1-t2 r1c3-t2">
<p>Update an existing row in the database based on the posted XML document supplied in the request.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<a id="i1024659"></a>
<div id="ADXDK19954" class="sect1">
<h2 class="sect1">XSQL Configuration File Parameters</h2>
<p>You can use the XSQL configuration file to tune your XSQL pages environment. <a href="#BJEFBDGB">Table 30-2</a> defines the legal parameters.</p>
<div id="ADXDK19955" class="tblhruleformalwidemax">
<p class="titleintable"><a id="sthref625"></a><a id="BJEFBDGB"></a>Table 30-2 XSQL Configuration File Settings</p>
<table class="cellalignment1211" title="XSQL Configuration File Settings " summary="Configuration Setting Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t3">Configuration Setting Name</th>
<th class="cellalignment1212" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/servlet/output-buffer-size
</pre></td>
<td class="cellalignment1213" headers="r2c1-t3 r1c2-t3">
<p>Sets the size in bytes of the buffered output stream. If the servlet engine already buffers I/O to the servlet output stream, you can set to <code dir="ltr">0</code> (the default) to avoid additional buffering. Any non-negative integer is valid.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/servlet/suppress-mime-charset/media-type
</pre></td>
<td class="cellalignment1213" headers="r3c1-t3 r1c2-t3">
<p>The XSQL servlet sets the HTTP <code dir="ltr">ContentType</code> header to indicate the MIME type of the resource returned to the request. By default, the servlet includes the optional character set data in the MIME type. For a particular MIME type, you can suppress the inclusion of the character set data by including a <code dir="ltr">&lt;media-type&gt;</code> element, with the desired MIME type as its contents. You can list any number of <code dir="ltr">&lt;media-type&gt;</code> elements. Valid value is any string.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/character-set-conversion/
default-charset 
</pre>
<p>NOTE: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment1213" headers="r4c1-t3 r1c2-t3">
<p>Performs character set conversion by default on the value of HTTP parameters to compensate for the default character set used by most servlet engines. The default base character set used for conversion is the Java <code dir="ltr">8859_1</code>, which corresponds to the IANA <code dir="ltr">ISO-8859-1</code> set. If your servlet engine uses a different character set as its base, then you can specify this value here.</p>
<p>To suppress character set conversion, specify the empty element <code dir="ltr">&lt;none/&gt;</code> as the content of the <code dir="ltr">&lt;default-charset&gt;</code> element instead of a character set name. This technique is useful if you are working with parameter values that are correctly representable with your servlet default character set. It eliminates overhead associated with performing the character set conversion.</p>
<p>Valid values are any Java character set name or <code dir="ltr">&lt;none/&gt;</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/reload-connections-on-error
</pre></td>
<td class="cellalignment1213" headers="r5c1-t3 r1c2-t3">
<p>Connection definitions are cached when the XSQL pages processor is initialized. Set to <code dir="ltr">yes</code> (default) to cause the processor to reread the <code dir="ltr">XSQLConfig.xml</code> file to reload connection definitions if an attempt is made to request a connection name that is not in the cached connection list. The <code dir="ltr">yes</code> setting is useful for adding new <code dir="ltr">&lt;connection&gt;</code> definitions to the file while the servlet is running. Set to <code dir="ltr">no</code> to avoid reloading the connection definition file when a connection name is not found in the in-memory cache. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/default-fetch-size
</pre></td>
<td class="cellalignment1213" headers="r6c1-t3 r1c2-t3">
<p>Sets the default value of the row fetch size for retrieving information from SQL queries. It only takes effect when you use the Oracle JDBC driver; otherwise the setting is ignored. This technique reduces network round trips to the database from the servlet engine running in a different tier.</p>
<p>Default is <code dir="ltr">50</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/page-cache-size
</pre></td>
<td class="cellalignment1213" headers="r7c1-t3 r1c2-t3">
<p>Sets the size of the cache for XSQL page templates and so determines the maximum number of XSQL pages that are cached. Least recently used pages move out of the cache if you go above this number. Default is <code dir="ltr">25</code>. Any nonzero positive integer is valid.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/stylesheet-cache-size
</pre></td>
<td class="cellalignment1213" headers="r8c1-t3 r1c2-t3">
<p>Sets the size of the cache for XSLT stylesheets and so determines the maximum number of XSQL pages that are cached. Least recently used pages move out of the cache if you go above this number. Default is <code dir="ltr">25</code>. Any nonzero positive integer is valid.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/stylesheet-pool/initial
</pre></td>
<td class="cellalignment1213" headers="r9c1-t3 r1c2-t3">
<p>Each cached stylesheet is a pool of cached stylesheet instances to improve throughput. Sets the initial number of stylesheets to be allocated in each stylesheet pool.</p>
<p>Default is <code dir="ltr">1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/stylesheet-pool/increment
</pre></td>
<td class="cellalignment1213" headers="r10c1-t3 r1c2-t3">
<p>Sets the number of stylesheets allocated when the stylesheet pool must grow due to increased load on the server.</p>
<p>Default is <code dir="ltr">1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/stylesheet-pool/timeout-seconds
</pre></td>
<td class="cellalignment1213" headers="r11c1-t3 r1c2-t3">
<p>Sets the number of seconds of inactivity before a stylesheet instance in the pool is removed to free resources as the pool tries to shrink back to its initial size.</p>
<p>Default is <code dir="ltr">60</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/connection-pool/initial
</pre></td>
<td class="cellalignment1213" headers="r12c1-t3 r1c2-t3">
<p>Controls the initial number of JDBC connections allocated in each connection pool. The XSQL pages processor's default connection manager implements connection pooling to improve throughput.</p>
<p>Default is <code dir="ltr">2</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/connection-pool/increment
</pre></td>
<td class="cellalignment1213" headers="r13c1-t3 r1c2-t3">
<p>Sets the number of connections allocated when the connection pool must grow due to increased load on the server.</p>
<p>Default is <code dir="ltr">1</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/connection-pool/timeout-seconds
</pre></td>
<td class="cellalignment1213" headers="r14c1-t3 r1c2-t3">
<p>Sets the number of seconds of inactivity before a JDBC connection in the pool is removed to free resources as the pool tries to shrink back to its initial size.</p>
<p>Default is <code dir="ltr">60</code>. Valid value is any nonzero positive integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/connection-pool/dump-allowed
</pre></td>
<td class="cellalignment1213" headers="r15c1-t3 r1c2-t3">
<p>Determines whether a diagnostic report of connection pool activity can be requested by passing the <code dir="ltr">dump-pool=y</code> parameter in the page request.</p>
<p>Default is <code dir="ltr">no</code>. Valid value is <code dir="ltr">yes</code> or <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r16c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/connection-manager/factory
</pre></td>
<td class="cellalignment1213" headers="r16c1-t3 r1c2-t3">
<p>Specifies the fully-qualified Java class name of the XSQL connection manager factory implementation. If not specified, default is <code dir="ltr">XSQLConnectionManagerFactoryImpl</code>.</p>
<p>Valid value is any class name that implements the <code dir="ltr">XSQLConnectionManagerFactory</code> interface.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r17c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/owa/fetch-style
</pre></td>
<td class="cellalignment1213" headers="r17c1-t3 r1c2-t3">
<p>Sets the default OWA Page Buffer fetch style used by the <code dir="ltr">&lt;xsql:include-owa&gt;</code> action. Valid values are <code dir="ltr">CLOB</code> (default) or <code dir="ltr">TABLE</code>.</p>
<p>If set to <code dir="ltr">CLOB</code>, then the processor uses a temporary <code dir="ltr">CLOB</code> to retrieve the OWA page buffer. If set to <code dir="ltr">TABLE</code>, then the processor uses a more efficient approach that requires the Oracle database user-defined type named <code dir="ltr">XSQL_OWA_ARRAY</code>. Create this type with the following DDL statement:</p>
<p><code dir="ltr">CREATE TYPE xsql_owa_array AS TABLE OF VARCHAR2(32767)</code></p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r18c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/timing/page
</pre></td>
<td class="cellalignment1213" headers="r18c1-t3 r1c2-t3">
<p>Determines whether the XSQL page processor adds an <code dir="ltr">xsql-timing</code> attribute to the document element of the page whose value reports the elapsed number of milliseconds required to process the page.</p>
<p>Valid values are <code dir="ltr">yes</code> or <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r19c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/timing/action
</pre></td>
<td class="cellalignment1213" headers="r19c1-t3 r1c2-t3">
<p>Determines whether a the XSQL page processor adds comment to the page just before the action element whose contents reports the elapsed number of milliseconds required to process the action.</p>
<p>Valid values are <code dir="ltr">yes</code> or <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r20c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/logger/factory
</pre></td>
<td class="cellalignment1213" headers="r20c1-t3 r1c2-t3">
<p>Specifies the fully-qualified Java class name of a custom XSQL logger factory implementation. If not set, then no logger is used.</p>
<p>Valid value is any class name that implements the <code dir="ltr">XSQLLoggerFactory</code> interface.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r21c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/error-handler/class
</pre></td>
<td class="cellalignment1213" headers="r21c1-t3 r1c2-t3">
<p>Specifies the fully-qualified Java class name of a custom XSQL error handler. The specified handler is the default error handler implementation. If not set, then the default error handler is used.</p>
<p>Valid value is any class name that implements the <code dir="ltr">XSQLErrorHandler</code> interface.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r22c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/xml-parsing/preserve-whitespace
</pre></td>
<td class="cellalignment1213" headers="r22c1-t3 r1c2-t3">
<p>Determines whether the XSQL pages processor preserves whitespace when parsing XSQL pages and XSLT stylesheets.</p>
<p>Valid values are <code dir="ltr">true</code> (default) or <code dir="ltr">false</code>. Changing the default to false can slightly speed up processing of XSQL pages and stylesheets because ignoring whitespace while parsing is faster than preserving it.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r23c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/security/stylesheet/defaults/
allow-client-style
</pre>
<p>NOTE: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment1213" headers="r23c1-t3 r1c2-t3">
<p>Prevents client overriding of the stylesheet. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>.</p>
<p>During development it is sometimes useful to use the XSQL stylesheet override feature by providing a value for the <code dir="ltr">xml-stylesheet</code> parameter in the request. You can use the <code dir="ltr">xml-stylesheet=none</code> combination to temporarily disable the application of the stylesheet for debugging purposes.</p>
<p>You can add the <code dir="ltr">allow-client-style="no"</code> attribute to the document element of each XSQL page to prohibit client overriding of the stylesheet in production applications. This setting can globally change the default behavior for <code dir="ltr">allow-client-style</code> in a single place.</p>
<p>This setting only specifies <span class="italic">default</span> behavior. If the attribute value is explicitly specified on the document element for a given XSQL page, its value takes precedence over this global default.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r24c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/processor/security/stylesheet/
trusted-hosts/host
</pre>
<p>NOTE: Setting name is a single line. It is displayed on two lines due to space constraints.</p>
</td>
<td class="cellalignment1213" headers="r24c1-t3 r1c2-t3">
<p>Specifies that any absolute URL to an XSLT stylesheet must be from a trusted host whose name is listed in the configuration file. List any number of <code dir="ltr">&lt;host&gt;</code> elements inside the <code dir="ltr">&lt;trusted-hosts&gt;</code> element. The name of the local machine, <code dir="ltr">localhost</code>, and <code dir="ltr">127.0.0.1</code> are trusted hosts by default. Valid values are any hostname or IP address.</p>
<p>The XSLT processor supports Java extension functions. Typically, XSQL pages refer to XSLT stylesheets with relative URLs.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r25c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/http/proxyhost
</pre></td>
<td class="cellalignment1213" headers="r25c1-t3 r1c2-t3">
<p>Sets the name of the HTTP proxy server to use when processing <code dir="ltr">URL</code>s with the HTTP protocol.</p>
<p>Valid value is any hostname or IP address.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r26c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/http/proxyport
</pre></td>
<td class="cellalignment1213" headers="r26c1-t3 r1c2-t3">
<p>Sets the port number of the HTTP proxy server to use when processing <code dir="ltr">URL</code>s with the HTTP protocol.</p>
<p>Valid value is any nonzero integer.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r27c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection
</pre></td>
<td class="cellalignment1213" headers="r27c1-t3 r1c2-t3">
<p>Defines a short name and the JDBC details for a named connection used by the XSQL pages processor.</p>
<p>You may supply any number of <code dir="ltr">&lt;connection&gt;</code> element children of <code dir="ltr">&lt;connectiondefs&gt;</code>. Each connection definition must supply a <code dir="ltr">name</code> attribute and may supply children elements <code dir="ltr">&lt;username&gt;, &lt;password&gt;, &lt;driver&gt;, &lt;dburl&gt;</code>, and <code dir="ltr">&lt;autocommit&gt;</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r28c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/username
</pre></td>
<td class="cellalignment1213" headers="r28c1-t3 r1c2-t3">
<p>Defines the username for the current connection.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r29c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/password
</pre></td>
<td class="cellalignment1213" headers="r29c1-t3 r1c2-t3">
<p>Defines the password for the current connection.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r30c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/dburl
</pre></td>
<td class="cellalignment1213" headers="r30c1-t3 r1c2-t3">
<p>Defines the JDBC connection URL for the current connection.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r31c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/driver
</pre></td>
<td class="cellalignment1213" headers="r31c1-t3 r1c2-t3">
<p>Specifies the fully-qualified Java class name of the JDBC driver used for the current connection. If not specified, defaults to <code dir="ltr">oracle.jdbc.driver.OracleDriver</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r32c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/autocommit
</pre></td>
<td class="cellalignment1213" headers="r32c1-t3 r1c2-t3">
<p>Explicitly sets the Auto Commit flag for the current connection. If not specified, the connection uses the JDBC driver default setting for Auto Commit.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r33c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/serializerdefs/serializer
</pre></td>
<td class="cellalignment1213" headers="r33c1-t3 r1c2-t3">
<p>Defines a named custom serializer implementation. You can supply any number of <code dir="ltr">&lt;serializer&gt;</code> element children of <code dir="ltr">&lt;serializerdefs&gt;</code>. Each must specify both a <code dir="ltr">&lt;name&gt;</code> and a <code dir="ltr">&lt;class&gt;</code> child element.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r34c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/serializerdefs/serializer/name
</pre></td>
<td class="cellalignment1213" headers="r34c1-t3 r1c2-t3">
<p>Defines the name of the current custom serializer definition.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r35c1-t3" headers="r1c1-t3">
<pre dir="ltr">
XSQLConfig/connectiondefs/connection/class
</pre></td>
<td class="cellalignment1213" headers="r35c1-t3 r1c2-t3">
<p>Specifies the fully-qualified Java class name of the current custom serializer. The class must implement the <code dir="ltr">XSQLDocumentSerializer</code> interface.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwidemax" --></div>
<!-- class="sect1" -->
<div class="refentry"><a id="BJEECIJG"></a>
<div id="ADXDK19956" class="refsect1">
<h2 class="refsect1">&lt;xsql:action&gt;<a id="sthref626"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref627"></a>Purpose</p>
<p>Invokes a user-defined action handler, implemented in Java, for executing custom logic and including custom XML data in a XSQL page. The Java class invoked with this action must implement the <code dir="ltr">oracle.xml.xsql.XSQLActionHandler</code> interface.</p>
<p>Use <code dir="ltr">&lt;xsql:action&gt;</code> to perform tasks that are not handled by the built-in action handlers. Custom actions can supply arbitrary XML content to the data page and perform arbitrary processing.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref628"></a>Usage Notes</p>
<p>The XSQL page processor processes the actions in a page in the following way:</p>
<ol>
<li>
<p>Constructs an instance of the action handler class with the default constructor.</p>
</li>
<li>
<p>Initializes the handler instance with the action element object and the page processor context by invoking the method <code dir="ltr">init(Element actionElt, XSQLPageRequest context)</code>.</p>
</li>
<li>
<p>Invokes the method that allows the handler to handle the action <code dir="ltr">handleAction(Node result)</code>.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref629"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr">handler</code> is a single, required attribute named whose value is the fully-qualified Java class name of the invoked action, <code dir="ltr"><span class="codeinlineitalic">yourpackage</span></code> is the Java package, and <code dir="ltr"><span class="codeinlineitalic">YourCustomHandler</span></code> is the Java class:</p>
<pre dir="ltr">
&lt;xsql:action handler="<span class="italic">yourpackage.YourCustomHandler</span>"/&gt;
</pre>
<p>Some action handlers expect text content or element content to appear inside the <code dir="ltr">&lt;xsql:action&gt;</code> element. In this case, use syntax such as the following:</p>
<pre dir="ltr">
&lt;xsql:action handler="yourpackage.YourCustomHandler"&gt;
  <span class="italic">Some_text</span>
&lt;/xsql:action&gt;
</pre>
<p>You can also use the following syntax:</p>
<pre dir="ltr">
&lt;xsql:action handler="yourpackage.YourCustomHandler"&gt;
  &lt;some&gt;
    &lt;other/&gt;
    &lt;elements/&gt;
    &lt;here/&gt;
  &lt;/some&gt;   
&lt;/xsql:action&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref630"></a>Attributes</p>
<p>The only required attribute is <code dir="ltr">handler</code>, but you can supply additional attributes to the handler. For example, if <code dir="ltr">yourpackage.YourCustomHandler</code> is expecting attributes named <code dir="ltr">param1</code> and <code dir="ltr">param2</code>, then use the following syntax:</p>
<pre dir="ltr">
&lt;xsql:action handler="yourpackage.YourCustomHandler" param1="xxx" param2="yyy"&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref631"></a>Examples</p>
<p><a href="#BJEDHDFB">Example 30-1</a> shows an XSQL page that invokes the <code dir="ltr">myactions.StockQuotes</code> Java class. It includes stock quotes from Google for any symbols passed in with the <code dir="ltr">symbol</code> parameter. If this parameter is not supplied, it supplies a default list.</p>
<div id="ADXDK19957" class="example">
<p class="titleinexample"><a id="BJEDHDFB"></a>Example 30-1 Retrieving Stock Quotes</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;page xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:action handler="myactions.StockQuotes"
               symbols="{@symbol}"
               symbol="ORCL,SAP,MSFT,IBM"/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEGJBAJ"></a>
<div id="ADXDK19958" class="refsect1">
<h2 class="refsect1">&lt;xsql:delete-request&gt;<a id="sthref632"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref633"></a>Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#i999059"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to delete the content of an XML document in canonical form from a target table or view.</p>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to delete the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a SELECT * query against the table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref634"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">table_name</span></code> is the name of a table and <code dir="ltr"><span class="codeinlineitalic">key</span></code> is a list of one or more columns to use as the unique key:</p>
<pre dir="ltr">
&lt;xsql:delete-request table="<span class="italic">table_name</span>" key-columns="<span class="italic">key</span>"/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref635"></a>Attributes</p>
<p><a href="#BJEIHJFF">Table 30-3</a> lists the optional attributes that you can use on the <code dir="ltr">&lt;xsql:delete-request&gt;</code> action. Required attributes are in bold</p>
<div id="ADXDK19959" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref636"></a><a id="BJEIHJFF"></a>Table 30-3 Attributes for &lt;xsql:delete-request&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:delete-request&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t4">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t4" headers="r1c1-t4">
<pre dir="ltr">
<span class="bold">table = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t4 r1c2-t4">
<p>Name of the table, view, or synonym to use for deleting the XML data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t4" headers="r1c1-t4">
<pre dir="ltr">
<span class="bold">key-columns = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t4 r1c2-t4">
<p>Space-delimited or comma-delimited list of one or more column names. The processor uses the values of these names in the posted XML document to identify the existing rows to delete.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t4" headers="r1c1-t4">
<pre dir="ltr">
transform = "<span class="italic">URL</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t4 r1c2-t4">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be deleted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t4" headers="r1c1-t4">
<pre dir="ltr">
columns = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t4 r1c2-t4">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be deleted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t4" headers="r1c1-t4">
<pre dir="ltr">
commit = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t4 r1c2-t4">
<p>If set to <code dir="ltr">yes</code> (default), calls <code dir="ltr">COMMIT</code> on the current connection after a successful execution of the deletion. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t4" headers="r1c1-t4">
<pre dir="ltr">
commit-batch-size = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t4 r1c2-t4">
<p>If a positive, nonzero <code dir="ltr">integer</code> is specified, then after each batch of <code dir="ltr">integer</code> deleted records, the processor issues a <code dir="ltr">COMMIT</code>. The default batch size is zero (0) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t4" headers="r1c1-t4">
<pre dir="ltr">
date-format = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t4 r1c2-t4">
<p>Date format mask to use for interpreting date field values in XML being deleted. Valid values are those documented for the <code dir="ltr">java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t4" headers="r1c1-t4">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t4 r1c2-t4">
<p>Name of a page-private parameter that must be set to the string <code dir="ltr">Error</code> if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref637"></a>Examples</p>
<p><a href="#BJEFCJBG">Example 30-2</a> specifies that the posted XML document should be transformed with the <code dir="ltr">style.xsl</code> stylesheet and then deleted from the <code dir="ltr">departments</code> table. The <code dir="ltr">departments.department_id</code> column is the primary key for the deletion.</p>
<div id="ADXDK19960" class="example">
<p class="titleinexample"><a id="BJEFCJBG"></a>Example 30-2 Deleting Rows</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:delete-request table="departments"       transform="style.xsl" 
 connection="demo" key-columns="department_id" xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDEHJG"></a>
<div id="ADXDK19961" class="refsect1">
<h2 class="refsect1">&lt;xsql:dml&gt;<a id="sthref638"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref639"></a>Purpose</p>
<p>Executes a DML or DDL statement or a PL/SQL block. Typically, you use this tag to include statements that would be executed or rolled back together.</p>
<p>This action requires a database connection provided as a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref640"></a>Usage Notes</p>
<p>You cannot set parameter values by binding them in the position of <code dir="ltr">OUT</code> variables with <code dir="ltr">&lt;xsql:dml&gt;</code>. Only <code dir="ltr">IN</code> parameters are supported for binding.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref641"></a>Syntax</p>
<p>The syntax for the action is as follows, where <code dir="ltr"><span class="codeinlineitalic">DML_DDL_or_PLSQL</span></code> is a placeholder for a legal DML statement, DDL statement, or PL/SQL block:</p>
<pre dir="ltr">
&lt;xsql:dml&gt;
  <span class="italic">DML_DDL</span>_or_PLSQL
&lt;/xsql:dml&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref642"></a>Attributes</p>
<p><a href="#BJEGCACF">Table 30-4</a> lists the optional attributes that you can use on the <code dir="ltr">&lt;xsql:dml&gt;</code> action.</p>
<div id="ADXDK19962" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref643"></a><a id="BJEGCACF"></a>Table 30-4 Attributes for &lt;xsql:dml&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:dml&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t5">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t5" headers="r1c1-t5">
<pre dir="ltr">
commit = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r2c1-t5 r1c2-t5">
<p>If set to <code dir="ltr">yes</code>, calls commit on the current connection after a successful execution of the DML statement. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t5" headers="r1c1-t5">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t5 r1c2-t5">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t5" headers="r1c1-t5">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t5 r1c2-t5">
<p>Name of a page-private parameter that must be set to the string '<code dir="ltr">Error</code>' if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t5" headers="r1c1-t5">
<pre dir="ltr">
error-statement = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t5 r1c2-t5">
<p>If set to <code dir="ltr">no</code>, suppresses the inclusion of the offending SQL statement in any <code dir="ltr">&lt;xsql-error&gt;</code> element generated. Valid values are <code dir="ltr">yes</code> (default) and <code dir="ltr">no</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref644"></a>Examples</p>
<p><a href="#BJECBDFD">Example 30-3</a> inserts the username stored in the <code dir="ltr">webuser</code> cookie into a <code dir="ltr">request_log</code> table. Using bind variables guards against SQL injection attacks.</p>
<div id="ADXDK19963" class="example">
<p class="titleinexample"><a id="BJECBDFD"></a>Example 30-3 Inserting a Username into a Table</p>
<pre dir="ltr">
 &lt;xsql:dml connection="demo" bind-params="webuser"
           xmlns:xsql="urn:oracle-xsql"&gt;
   BEGIN
     INSERT INTO request_log(page,userid)
       VALUES( 'somepage.xsql', ? );
     COMMIT;
   END;
 &lt;/xsql:dml&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJECGJDF"></a>
<div id="ADXDK19964" class="refsect1">
<h2 class="refsect1">&lt;xsql:if-param&gt;<a id="sthref645"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref646"></a>Purpose</p>
<p>Enables you to include elements and actions nested inside if a specified condition is true. If the condition is true, then all nested XML content and actions are included in the page. If the condition is false, then none of the nested XML content or actions is included (and thus none of the nested actions is executed).</p>
<p>Specify which parameter value is evaluated by supplying the required <code dir="ltr">name</code> attribute. Both simple parameter names as well as array-parameter names are supported.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If the parameter being tested does not exist, the test evaluates to false.</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref647"></a>Syntax</p>
<p>The syntax for the action is the following, where <code dir="ltr"><span class="codeinlineitalic">some_name</span></code> is the value of the <code dir="ltr">name</code> attribute and <code dir="ltr"><span class="codeinlineitalic">test_condition</span></code> is exactly one of the conditions listed in <a href="#BJECCJJI">Table 30-5</a>:</p>
<pre dir="ltr">
&lt;xsql:if-param name="<span class="italic">some_name</span>" <span class="italic">test_condition</span>&gt;
   <span class="italic">element_or_action</span>
&lt;/xsql:if-param&gt;
</pre>
<p>Any XML content or XSQL action elements can be nested inside an <code dir="ltr">&lt;xsql:if-param&gt;</code>, including other <code dir="ltr">&lt;xsql:if-param&gt;</code> elements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref648"></a>Attributes</p>
<p>In addition to the required <code dir="ltr">name</code> attribute, you must pick exactly one of the attributes listed in <a href="#BJECCJJI">Table 30-5</a> to indicate how the parameter value (or values, in the array case) is tested. As with other XSQL actions, the attributes of the <code dir="ltr">&lt;xsql:if-param&gt;</code> action can contain lexical substitution parameter expressions such as <code dir="ltr">{@paramName}</code>.</p>
<div id="ADXDK19965" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref649"></a><a id="BJECCJJI"></a>Table 30-5 Attributes for &lt;xsql:if-param&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:if-param&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t7">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t7" headers="r1c1-t7">
<pre dir="ltr">
exists="<span class="italic">yes_or_no</span>"
</pre></td>
<td class="cellalignment1213" headers="r2c1-t7 r1c2-t7">
<p>If set to <code dir="ltr">exists="yes"</code>, then this condition tests whether the named parameter exists and has a non-empty value. For an array-valued parameter, it tests whether the array-parameter exists and has at least one non-empty element.</p>
<p>If set to <code dir="ltr">exists="no"</code>, then this condition evaluates to true if the parameter does not exist, of if it exists but has an empty value. For an array-valued parameter, it evaluates to true if the parameter does not exist, or if all of the array elements are empty.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t7" headers="r1c1-t7">
<pre dir="ltr">
equals="<span class="italic">stringValue</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t7 r1c2-t7">
<p>This condition tests whether the named parameter equals the string value provided. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code dir="ltr">ignore-case="yes"</code> attribute as well.</p>
<p>For an array-valued parameter, the condition tests whether any element in the array has the indicated value.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t7" headers="r1c1-t7">
<pre dir="ltr">
not-equals="<span class="italic">stringValue</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t7 r1c2-t7">
<p>This condition tests whether the named parameter does not equal the string value provided. By default the comparison is an exact string match. For an array-valued parameter, the condition evaluates to true if none of the elements in the array has the indicated value.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t7" headers="r1c1-t7">
<pre dir="ltr">
in-list = "<span class="italic">comma-or-space-separated-list</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t7 r1c2-t7">
<p>This condition tests whether the named parameter matches any of the strings in the provided list. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code dir="ltr">ignore-case="yes"</code> attribute as well.</p>
<p>The value of the <code dir="ltr">in-list</code> parameter is tokenized into an array with commas as the delimiter if commas are detected in the string. Otherwise, it uses a space as the delimiter. For an array-valued parameter, the condition tests whether any element in the array matches an element in the list.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t7" headers="r1c1-t7">
<pre dir="ltr">
not-in-list = "<span class="italic">comma-or-space-separated-list</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t7 r1c2-t7">
<p>This tests whether the named parameter does not match any of the strings in the provided list. By default the comparison is an exact string match. For a case-insensitive match, supply the additional <code dir="ltr">ignore-case="yes"</code> attribute as well.</p>
<p>The value of the <code dir="ltr">not-in-list</code> parameter is tokenized into an array with commas as the delimiter if commas are in the string. Otherwise, the processor uses a space as the delimiter. For an array-valued parameter, the condition tests whether none of the elements in the array matches an element in the list.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref650"></a>Examples</p>
<p>To test whether two different conditions are true, you can use nested <code dir="ltr">&lt;xsql:if-param&gt;</code> elements as shown in <a href="#BJECJGCC">Example 30-4</a>.</p>
<div id="ADXDK19966" class="example">
<p class="titleinexample"><a id="BJECJGCC"></a>Example 30-4 Testing Conditions</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
&lt;!-- 
| Set page parameter 'some_param' to value "some_value" if parameter 'a'
| exists, and if parameter 'b' has a value equal to "X"
+--&gt;
  &lt;xsql:if-param name="a" exists="yes"&gt;
    &lt;xsql:if-param name="b" equals="X"&gt;
      &lt;xsql:set-page-param name="some_param" value="some_value"/&gt;
    &lt;/xsql:if-param&gt;
  &lt;/xsql:if-param&gt;
  &lt;!-- ... --&gt; 
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDAFAD"></a>
<div id="ADXDK19967" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-owa&gt;<a id="sthref651"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref652"></a>Purpose</p>
<p>Includes XML content generated by a database stored procedure. This action requires a database connection to be provided by supplying a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>The stored procedure uses the standard Oracle Web Agent (OWA) packages (<code dir="ltr">HTP</code> and <code dir="ltr">HTF</code>) to "print" the XML tags into the server-side page buffer. Afterwards, the XSQL pages processor fetches, parses, and includes the dynamically-produced XML content in the data page. The stored procedure must generate a well-formed XML page or an appropriate error is displayed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref653"></a>Usage Notes</p>
<p>You can create a wrapper procedure that constructs XML elements with the HTP package. Your XSQL page can invoke the wrapper procedure by using <code dir="ltr">&lt;xsql:include-owa&gt;</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref654"></a>Syntax</p>
<p>The syntax for the action is as follows, where <code dir="ltr"><span class="codeinlineitalic">PL/SQL_block</span></code> is a PL/SQL Block invoking a procedure that uses the HTP or HTF packages:</p>
<pre dir="ltr">
&lt;xsql:include-owa&gt;
   <span class="italic">PL/SQL_block</span>
&lt;/xsql:include-owa&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref655"></a>Attributes</p>
<p><a href="#BJEBBAII">Table 30-6</a> lists the optional attributes supported by this action.</p>
<div id="ADXDK19968" class="tblformal">
<p class="titleintable"><a id="sthref656"></a><a id="BJEBBAII"></a>Table 30-6 Attributes for &lt;xsql:include-owa&gt;</p>
<table class="cellalignment1214" title="Attributes for &lt;xsql:include-owa&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t8">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t8" headers="r1c1-t8">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r2c1-t8 r1c2-t8">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t8" headers="r1c1-t8">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t8 r1c2-t8">
<p>Name of a page-private parameter that must be set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t8" headers="r1c1-t8">
<pre dir="ltr">
error-statement = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t8 r1c2-t8">
<p>If set to <code dir="ltr">no</code>, suppresses the inclusion of the offending SQL statement in any <code dir="ltr">&lt;xsql-error&gt;</code> element generated. Valid values are <code dir="ltr">yes</code> (default) and <code dir="ltr">no</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref657"></a>Examples</p>
<p>Assume that you write a PL/SQL procedure called <code dir="ltr">UpdateStatus</code> that updates the status of a project. The procedure uses HTP to print an <code dir="ltr">&lt;UpdateStatus&gt;</code> datagram that contains the element <code dir="ltr">&lt;Success/&gt;</code> if no errors occur or one or more <code dir="ltr">&lt;Error&gt;</code> elements if errors occur.</p>
<p><a href="#BJEBJFFH">Example 30-5</a> shows how you can call <code dir="ltr">UpdateStatus</code> from an XSQL page. The example uses SQL bind variable instead of lexical substitution to prevent the possibility of SQL injection attacks.</p>
<div id="ADXDK19969" class="example">
<p class="titleinexample"><a id="BJEBJFFH"></a>Example 30-5 Including XML Content Created by a Stored Procedure</p>
<pre dir="ltr">
&lt;xsql:include-owa connection="demo" 
                  bind-params="project status" 
                  xmlns:xsql="urn:oracle-xsql"&gt; 
  UpdateStatus( ?,? ); 
&lt;/xsql:include-owa&gt; 
</pre></div>
<!-- class="example" -->
<p>Assume that a user enters an invalid status number for a project into a Web-based form. The form posts the input parameters to an XSQL page as shown in <a href="#BJEBJFFH">Example 30-5</a>. The XSQL processor returns the following datagram, which an XSLT stylesheet could transform into an HTML error page:</p>
<pre dir="ltr">
&lt;UpdateStatus&gt;
  &lt;Error Field="status"&gt;Status must be 1, 2, 3, or 4&lt;/Error&gt;
&lt;/UpdateStatus&gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDHDCAG"></a>
<div id="ADXDK19970" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-param&gt;<a id="sthref658"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref659"></a>Purpose</p>
<p>Includes an XML representation of the name and value of a single parameter. This technique is useful if an associated XSLT stylesheet must refer to parameter values with XPath expressions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref660"></a>Syntax</p>
<p>The syntax of the action is as follows, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:include-param name="<span class="italic">paramname</span>" /&gt;
</pre>
<p>The required <code dir="ltr">name</code> attribute supplies the name of the parameter whose value you want to include.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref661"></a>Attributes</p>
<p>The <code dir="ltr">name</code> attribute is required; there are no optional attributes.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref662"></a>Examples</p>
<p><a href="#BJEGICCI">Example 30-6</a> uses XPATH to obtain the value of a parameter and represent it in XML.</p>
<div id="ADXDK19971" class="example">
<p class="titleinexample"><a id="BJEGICCI"></a>Example 30-6 Including an XML Representation of a Parameter Value</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql" 
                        xmlns:p="http://www.companysite.com/products"&gt;
  &lt;xsql:set-page-param name="productid"
                       xpath="/p:Products/productid"/&gt;
  &lt;xsql:include-param name="productid"/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>The XML fragment included in the datagram will be as follows:</p>
<pre dir="ltr">
&lt;productid&gt;12345&lt;/productid&gt;
</pre>
<p>Suppose that you use an array parameter name to indicate that you want to treat the value as an array, as in the following example:</p>
<pre dir="ltr">
&lt;xsql:include-param name="productid[]"/&gt;
</pre>
<p>The XML fragment reflects all of the array values, as shown in the following example:</p>
<pre dir="ltr">
&lt;productid&gt;
  &lt;value&gt;12345&lt;value&gt;
  &lt;value&gt;33455&lt;/value&gt;
  &lt;value&gt;88199&lt;/value&gt;
&lt;/productid&gt;
</pre>
<p>In this array-parameter name scenario, if <code dir="ltr">productid</code> happens to be a single-valued parameter, then the fragment looks identical to a one-element array, as illustrated in the following example:</p>
<pre dir="ltr">
&lt;productid&gt;
  &lt;value&gt;12345&lt;value&gt;
&lt;/productid&gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDDAGA"></a>
<div id="ADXDK19972" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-posted-xml&gt;<a id="sthref663"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref664"></a>Purpose</p>
<p>Includes the posted XML document in the XSQL page. If the user posts an HTML form instead of an XML document, then the XML included is similar to that included by the <code dir="ltr">&lt;xsql:include-request-params&gt;</code> action.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref665"></a>Syntax</p>
<p>The syntax of the action is as follows:</p>
<pre dir="ltr">
&lt;xsql:include-posted-xml/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref666"></a>Attributes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref667"></a>Examples</p>
<p><a href="#BJECFECI">Example 30-7</a> shows a sample XSQL page that includes a posted XML document.</p>
<div id="ADXDK19973" class="example">
<p class="titleinexample"><a id="BJECFECI"></a>Example 30-7 Including Posted XML</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsql" href="somepage.xsql"?&gt;
&lt;page connection="demo" 
      xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:include-posted-xml/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDGGEJ"></a>
<div id="ADXDK19974" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-request-params&gt;<a id="sthref668"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref669"></a>Purpose</p>
<p>Includes an XML representation of all parameters in the request in the datagram. The action element is replaced in the page at page-request time with a tree of XML elements that represents the parameters available to the request.</p>
<p>This technique is useful if an associated XSLT stylesheet must refer to request parameter values with XPath expressions.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref670"></a>Usage Notes</p>
<p>When processing pages through the XSQL servlet, the XML included takes the form shown in <a href="#BJEHHHAH">Example 30-8</a>.</p>
<div id="ADXDK19975" class="example">
<p class="titleinexample"><a id="BJEHHHAH"></a>Example 30-8 Including Request Parameters</p>
<pre dir="ltr">
&lt;request&gt;
  &lt;parameters&gt;
    &lt;paramname&gt;value1&lt;/paramname&gt;
    &lt;ParamName2&gt;value2&lt;/ParamName2&gt;
     ...
  &lt;/parameters&gt;
  &lt;session&gt;
    &lt;sessVarName&gt;value1&lt;/sessVarName&gt;
     ...
  &lt;/session&gt;
  &lt;cookies&gt;
    &lt;cookieName&gt;value1&lt;/cookieName&gt;
     ...
  &lt;/cookies&gt;
&lt;/request&gt;
</pre></div>
<!-- class="example" -->
<p>When you use the XSQL command-line utility or the <code dir="ltr">XSQLRequest</code> class, the XML takes the form shown in <a href="#CHDBCJBF">Example 30-11</a>.</p>
<div id="ADXDK19976" class="example">
<p class="titleinexample"><a id="sthref671"></a>Example 30-9 Including Request Parameters</p>
<pre dir="ltr">
&lt;request&gt;
  &lt;parameters&gt;
    &lt;paramname&gt;value1&lt;/paramname&gt;
    &lt;ParamName2&gt;value2&lt;/ParamName2&gt;
     ...
  &lt;/parameters&gt;
&lt;/request&gt;
</pre></div>
<!-- class="example" -->
<p>The technique enables you to distinguish request parameters from session parameters or cookies because its value is a child element of <code dir="ltr">&lt;parameters&gt;</code>, <code dir="ltr">&lt;session&gt;</code>, or <code dir="ltr">&lt;cookies&gt;</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref672"></a>Syntax</p>
<p>The syntax of the action is as follows:</p>
<pre dir="ltr">
&lt;xsql:include-request-params/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref673"></a>Attributes</p>
<p>None.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref674"></a>Examples</p>
<p><a href="#CHDIJHHA">Example 30-10</a> shows a sample XSQL page that includes all request parameters in the data page.</p>
<div id="ADXDK19977" class="example">
<p class="titleinexample"><a id="CHDIJHHA"></a>Example 30-10 Including Request Parameters</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsql" href="cookie_condition.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:include-request-params/&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">cookie_condition.xsl</code> stylesheet chooses an output format based on whether the <code dir="ltr">siteuser</code> cookie is present. <a href="#CHDBCJBF">Example 30-11</a> shows a fragment of the stylesheet.</p>
<div id="ADXDK19978" class="example">
<p class="titleinexample"><a id="CHDBCJBF"></a>Example 30-11 Testing for Conditions in a Stylesheet</p>
<pre dir="ltr">
&lt;xsl:choose&gt;
  &lt;xsl:when test="/page/request/cookies/siteuser"&gt;
  ...
  &lt;/xsl:when&gt;
  &lt;xsl:otherwise&gt;
  ...
  &lt;/xsl:otherwise&gt;
&lt;/xsl:choose&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCCEID"></a>
<div id="ADXDK19979" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-xml&gt;<a id="sthref675"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref676"></a>Purpose</p>
<p>Includes the XML contents of a local, remote, or database-driven XML resource in your datagram. You can specify the resource by URL or SQL statement. The server can deliver a resource that is a static XML file or dynamically created XML from a programmatic resource such as a servlet or CGI program.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref677"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">URL</span></code> is a relative URL or an absolute, HTTP-based URL to retrieve XML from another Web site:</p>
<pre dir="ltr">
&lt;xsql:include-xml href="URL"/&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">SQL_statement</span></code> is a SQL <code dir="ltr">SELECT</code> statement selecting a single row containing a single <code dir="ltr">CLOB</code> or <code dir="ltr">VARCHAR2</code> column value:</p>
<pre dir="ltr">
&lt;xsql:include-xml&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:include-xml&gt;
</pre>
<p>The <code dir="ltr">href</code> attribute and SQL statement are mutually exclusive. If you provide one, then the other is not allowed.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref678"></a>Attributes</p>
<p><a href="#BJEGIDAJ">Table 30-7</a> lists the attributes supported by this action. Required attributes are in bold.</p>
<div id="ADXDK19980" class="tblformal">
<p class="titleintable"><a id="sthref679"></a><a id="BJEGIDAJ"></a>Table 30-7 Attributes for &lt;xsql:include-xml&gt;</p>
<table class="cellalignment1214" title="Attributes for &lt;xsql:include-xml&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t9">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t9" headers="r1c1-t9">
<pre dir="ltr">
<span class="bold">href="</span><span class="bolditalic">URL</span><span class="italic">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t9 r1c2-t9">
<p>The absolute, relative, or parameterized URL of the XML resource to be included. The resource can be a static file dynamic source.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t9" headers="r1c1-t9">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t9 r1c2-t9">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values for these name will be used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t9" headers="r1c1-t9">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t9 r1c2-t9">
<p>Name of a page-private parameter that must be set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref680"></a>Examples</p>
<p><a href="#BJEECGEG">Example 30-12</a> includes an XML document retrieved by a database query. The XML content is a <code dir="ltr">CLOB</code>-valued member field of a user-defined type. The XML included must come from a <code dir="ltr">VARCHAR2</code> or <code dir="ltr">CLOB</code> column, not an <code dir="ltr">XMLType</code>.</p>
<div id="ADXDK19981" class="example">
<p class="titleinexample"><a id="BJEECGEG"></a>Example 30-12 Including an XML Document</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:include-xml bind-params="id" connection="demo"
                   xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT x.document.contents doc FROM xmldoc x
  WHERE x.docid = ?                        
&lt;/xsql:include-xml&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEEDBGH"></a>
<div id="ADXDK19982" class="refsect1">
<h2 class="refsect1">&lt;xsql:include-xsql&gt;<a id="sthref681"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref682"></a>Purpose</p>
<p>Includes the XML output of one XSQL page in another page. You can create a page that assembles the contents&shy;&mdash;optionally transformed&mdash;from other XSQL pages.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref683"></a>Usage Notes</p>
<p>If the aggregated page contains an <code dir="ltr">&lt;?xml-stylesheet?&gt;</code> processing instruction, then this stylesheet is applied before the result is aggregated. Thus, you can use <code dir="ltr">&lt;xsql:include-xsql&gt;</code> to chain XSLT stylesheets.</p>
<p>When one XSQL page aggregates another page by using <code dir="ltr">&lt;xsql:include-xsql&gt;</code>, all request-level parameters are visible to the nested page. For pages processed by the XSQL Servlet, the visible data includes session-level parameters and cookies. None of the aggregating page's page-private parameters are visible to the nested page.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref684"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">XSQL_page</span></code> is a relative or absolute URL of an XSQL page to be included:</p>
<pre dir="ltr">
&lt;xsql:include-xsql href="<span class="italic">XSQL_page</span>"/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref685"></a>Attributes</p>
<p><a href="#BJEJCDJB">Table 30-8</a> lists the attributes supported by this action. Required attributes are in bold; all others are optional.</p>
<div id="ADXDK19983" class="tblformal">
<p class="titleintable"><a id="sthref686"></a><a id="BJEJCDJB"></a>Table 30-8 Attributes for &lt;xsql:include-xsql&gt;</p>
<table class="cellalignment1214" title="Attributes for &lt;xsql:include-xsql&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t10">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t10" headers="r1c1-t10">
<pre dir="ltr">
<span class="bold">href="</span><span class="bolditalic">string</span><span class="italic">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t10 r1c2-t10">
<p>Relative or absolute URL of XSQL page to be included.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t10" headers="r1c1-t10">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t10 r1c2-t10">
<p>Name of a page-private parameter that must be set to the string <code dir="ltr">Error</code> if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t10" headers="r1c1-t10">
<pre dir="ltr">
reparse = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t10 r1c2-t10">
<p>Indicates whether output of the included XSQL page must be reparsed before it is included. Valid values are <code dir="ltr">no</code> (default) and <code dir="ltr">yes</code>.</p>
<p>This attribute is useful if the included XSQL page selects the text of an XML document fragment that the including page wants to treat as elements.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref687"></a>Examples</p>
<p><a href="#BJEJDCCC">Example 30-13</a> displays an XSQL page that lists discussion forum categories.</p>
<div id="ADXDK19984" class="example">
<p class="titleinexample"><a id="BJEJDCCC"></a>Example 30-13 Categories.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:query connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT name
  FROM categories
  ORDER BY name
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJEBEGCB">Example 30-14</a> shows how you can include the results of the page in <a href="#BJEJDCCC">Example 30-13</a> into a page that lists the ten most recent topics in the current forum.</p>
<div id="ADXDK19985" class="example">
<p class="titleinexample"><a id="BJEBEGCB"></a>Example 30-14 TopTenTopics.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;top-ten-topics connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;topics&gt;
    &lt;xsql:query max-rows="10"&gt;
      SELECT subject 
      FROM topics 
      ORDER BY last_modified DESC
    &lt;/xsql:query&gt;
  &lt;/topics&gt;
  &lt;categories&gt;
    &lt;xsql:include-xsql href="Categories.xsql"/&gt;
  &lt;/categories&gt;
&lt;/top-ten-topics&gt;
</pre></div>
<!-- class="example" -->
<p>You can also use <code dir="ltr">&lt;xsql:include-xsql&gt;</code> to apply an XSLT stylesheet to an included page. Assume that you write the following XSLT stylesheets:</p>
<ul>
<li>
<p><code dir="ltr">cats-as-html.xsl</code>, which renders the topics in HTML</p>
</li>
<li>
<p><code dir="ltr">cats-as-wml.xsl</code>, which renders the topics in WML</p>
</li>
</ul>
<p>One approach for catering to two different types of devices is to create different XSQL pages for each device. <a href="#BJECIECB">Example 30-15</a> shows an XSQL page that aggregates <code dir="ltr">Categories.xsql</code> and applies the <code dir="ltr">cats-as-html.xsl</code> stylesheet.</p>
<div id="ADXDK19986" class="example">
<p class="titleinexample"><a id="BJECIECB"></a>Example 30-15 HTMLCategories.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;!-- HTMLCategories.xsql --&gt;
&lt;?xml-stylesheet type="text/xsl" href="cats-as-html.xsl"?&gt;
&lt;xsql:include-xsql href="Categories.xsql" xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJEDIHEI">Example 30-16</a> shows an XSQL page that aggregates <code dir="ltr">Categories.xsql</code> and applies the <code dir="ltr">cats-as-html.xsl</code> stylesheet for delivering to wireless devices.</p>
<div id="ADXDK19987" class="example">
<p class="titleinexample"><a id="BJEDIHEI"></a>Example 30-16 WMLCategories.xsql</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;!-- WMLCategories.xsql --&gt;
&lt;?xml-stylesheet type="text/xsl" href="cats-as-wml.xsl"?&gt;
&lt;xsql:include-xsql href="Categories.xsql" xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEBHIIB"></a>
<div id="ADXDK19988" class="refsect1">
<h2 class="refsect1">&lt;xsql:insert-param&gt;<a id="sthref688"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref689"></a>Purpose</p>
<p>Inserts the value of a parameter into a table or view. Use this tag when the client is posting a well-formed XML document as text in an HTTP parameter or individual HTML form field.</p>
<p>By combining the <a href="glossary.htm#i999059"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to insert the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code dir="ltr">SELECT *</code> query against the table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref690"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">table_or_view_name</span></code> is a relative or absolute URL of an XSQL page to be included:</p>
<pre dir="ltr">
&lt;xsql:insert-param table="<span class="italic">table_or_view_name</span>" name="<span class="italic">string</span>"/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref691"></a>Attributes</p>
<p><a href="#BJECEGIE">Table 30-9</a> lists the optional attributes that you can use on the <code dir="ltr">&lt;xsql:insert-param&gt;</code> action.</p>
<div id="ADXDK19989" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref692"></a><a id="BJECEGIE"></a>Table 30-9 Attributes for &lt;xsql:insert-param&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:insert-param&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t11">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t11" headers="r1c1-t11">
<pre dir="ltr">
<span class="bold">name="</span><span class="bolditalic">string</span><span class="italic">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t11 r1c2-t11">
<p>Name of the parameter whose value contains XML to be inserted.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t11" headers="r1c1-t11">
<pre dir="ltr">
<span class="bold">table="</span><span class="bolditalic">string</span><span class="italic">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t11 r1c2-t11">
<p>Name of the table, view, or synonym to use for inserting the XML data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t11" headers="r1c1-t11">
<pre dir="ltr">
transform = "<span class="italic">URL</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t11 r1c2-t11">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t11" headers="r1c1-t11">
<pre dir="ltr">
columns = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t11 r1c2-t11">
<p>Space-delimited or comma-delimited list of one or more column names whose values will be inserted. If supplied, then only these columns will be inserted. If not supplied, all columns will be inserted, with NULL values for columns whose values do not appear in the XML document.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t11" headers="r1c1-t11">
<pre dir="ltr">
commit = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t11 r1c2-t11">
<p>If set to <code dir="ltr">yes</code>, calls commit on the current connection after a successful execution of the insert. Valid values are <code dir="ltr">yes</code> (default) and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t11" headers="r1c1-t11">
<pre dir="ltr">
commit-batch-size = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t11 r1c2-t11">
<p>If a positive, nonzero number <code dir="ltr"><span class="codeinlineitalic">integer</span></code> is specified, then after each batch of <code dir="ltr"><span class="codeinlineitalic">integer</span></code> inserted records, the XSQL processor issues a <code dir="ltr">COMMIT</code>. Default batch size is zero (<code dir="ltr">0</code>), which instructs the processor not to commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t11" headers="r1c1-t11">
<pre dir="ltr">
date-format = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t11 r1c2-t11">
<p>Date format mask to use for interpreting date field values in XML being inserted. Valid values are those for the <code dir="ltr">java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t11" headers="r1c1-t11">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t11 r1c2-t11">
<p>Name of a page-private parameter that must be set to <code dir="ltr">Error</code> if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref693"></a>Examples</p>
<p><a href="#BJEFJCIA">Example 30-17</a> parses and transforms the contents of the HTML form parameter <code dir="ltr">xmlfield</code> for database insert.</p>
<div id="ADXDK19990" class="example">
<p class="titleinexample"><a id="BJEFJCIA"></a>Example 30-17 Inserting XML Contained in an HTML Form Parameter</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:insert-param name="xmlfield" table="image_metadata_table"
transform="field-to-rowset.xsl" connection="demo" xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEHGIFD"></a>
<div id="ADXDK19991" class="refsect1">
<h2 class="refsect1">&lt;xsql:insert-request&gt;<a id="sthref694"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref695"></a>Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#i999059"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to insert the content of an XML document in canonical form into a target table or view.</p>
<p>If an HTML Form has been posted, then the posted XML document is materialized from HTTP request parameters, cookies, and session variables. The XML document has the following form:</p>
<pre dir="ltr">
&lt;request&gt;
&lt;parameters&gt;
  &lt;param1&gt;value1&lt;/param1&gt;
    :
  &lt;/paramN&gt;valueN&lt;/paramN&gt;
&lt;/parameters&gt;
  :
&lt;/request&gt;
</pre>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. The XSQL engine uses XSU to insert the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code dir="ltr">SELECT *</code> query against the table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref696"></a>Usage Notes</p>
<p>If you target a database view with an <code dir="ltr">INSERT</code>, then you can create <code dir="ltr">INSTEAD OF INSERT</code> triggers on the view to further automate the handling of the posted data. For example, an <code dir="ltr">INSTEAD OF INSERT</code> trigger on a view can use PL/SQL to check for the existence of a record and intelligently choose whether to do an <code dir="ltr">INSERT</code> or an <code dir="ltr">UPDATE</code> depending on the result.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref697"></a>Syntax</p>
<p>The syntax for this action is as follows:</p>
<pre dir="ltr">
&lt;xsql:insert-request table="<span class="italic">table</span>"/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref698"></a>Attributes</p>
<p><a href="#BJEGEDCC">Table 30-10</a> lists the optional attributes that you can use on the <code dir="ltr">&lt;xsql:insert-request&gt;</code> action.</p>
<div id="ADXDK19992" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref699"></a><a id="BJEGEDCC"></a>Table 30-10 Attributes for &lt;xsql:insert-request&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:insert-request&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t12">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t12" headers="r1c1-t12">
<pre dir="ltr">
<span class="bold">table = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t12 r1c2-t12">
<p>Name of the table, view, or synonym to use for inserting the XML data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t12" headers="r1c1-t12">
<pre dir="ltr">
transform = "<span class="italic">URL</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t12 r1c2-t12">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t12" headers="r1c1-t12">
<pre dir="ltr">
columns = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t12 r1c2-t12">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be inserted into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t12" headers="r1c1-t12">
<pre dir="ltr">
commit = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t12 r1c2-t12">
<p>If set to <code dir="ltr">yes</code> (default), calls <code dir="ltr">COMMIT</code> on the current connection after a successful execution of the insert. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t12" headers="r1c1-t12">
<pre dir="ltr">
commit-batch-size = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t12 r1c2-t12">
<p>If a positive, nonzero number <code dir="ltr">integer</code> is specified, then after each batch of integer inserted records, the processor issues a <code dir="ltr">COMMIT</code>. The default batch size is zero (0) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t12" headers="r1c1-t12">
<pre dir="ltr">
date-format = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t12 r1c2-t12">
<p>Date format mask to use for interpreting date field values in XML being inserted. Valid values are those documented for the <code dir="ltr">java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t12" headers="r1c1-t12">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t12 r1c2-t12">
<p>Name of a page-private parameter that must be set to the string <code dir="ltr">Error</code> if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref700"></a>Examples</p>
<p><a href="#BJEHGHDC">Example 30-18</a> parses and transforms the contents of the posted XML document or HTML Form for insert.</p>
<div id="ADXDK19993" class="example">
<p class="titleinexample"><a id="BJEHGHDC"></a>Example 30-18 Inserting XML Received in a Parameter</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:insert-request 
  table="purchase_order"
  transform="purchseorder-to-rowset.xsl"
  connection="demo" 
  xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDDFHCB"></a>
<div id="ADXDK19994" class="refsect1">
<h2 class="refsect1">&lt;xsql:query&gt;<a id="sthref701"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref702"></a>Purpose</p>
<p>Executes a SQL select statement and includes a canonical XML representation of the query result set in the data page. This action requires a database connection to be provided by supplying a <code dir="ltr">connection="</code>connname<code dir="ltr">"</code> attribute on the document element of the XSQL page in which it appears.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref703"></a>Syntax</p>
<p>The syntax for the action is the following:</p>
<pre dir="ltr">
&lt;xsql:query&gt;
   <span class="italic">SELECT_Statement</span>
&lt;/xsql:query&gt;
</pre>
<p>Any legal SQL select statement is permissible as a substitution for the <code dir="ltr"><span class="codeinlineitalic">SELECT_Statement</span></code> placeholder. If the select statement produces no rows, then you can provide a fallback query by including a nested <code dir="ltr">&lt;xsql:no-rows-query&gt;</code> element as follows:</p>
<pre dir="ltr">
&lt;xsql:query&gt;
  <span class="italic">SELECT_Statement</span>
  &lt;xsql:no-rows-query&gt;
    <span class="italic">Fallback_SELECT_Statement</span>
  &lt;/xsql:no-rows-query&gt;
&lt;/xsql:query&gt;
</pre>
<p>An <code dir="ltr">&lt;xsql:no-rows-query&gt;</code> element can <span class="italic">itself</span> contain nested <code dir="ltr">&lt;xsql:no-rows-query&gt;</code> elements to any level of nesting. The options available on the <code dir="ltr">&lt;xsql:no-rows-query&gt;</code> are identical to those legal on the <code dir="ltr">&lt;xsql:query&gt;</code> action element.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref704"></a>Attributes</p>
<p>The optional attributes listed in <a href="#BJEJEGCC">Table 30-11</a> can be supplied to control various aspects of the data retrieved and the XML produced by the <code dir="ltr">&lt;xsql:query&gt;</code> action.</p>
<div id="ADXDK19995" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref705"></a><a id="BJEJEGCC"></a>Table 30-11 Attributes for &lt;xsql:query&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:query&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t13">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t13" headers="r1c1-t13">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r2c1-t13 r1c2-t13">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t13" headers="r1c1-t13">
<pre dir="ltr">
date-format = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r3c1-t13 r1c2-t13">
<p>Date format mask to use for formatted date column and attribute values in the XML that is queried. Valid values are the same values legal for the <code dir="ltr">java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t13" headers="r1c1-t13">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t13 r1c2-t13">
<p>Name of a page-private parameter that must be set to the string '<code dir="ltr">Error</code>' if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t13" headers="r1c1-t13">
<pre dir="ltr">
error-statement = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t13 r1c2-t13">
<p>If set to <code dir="ltr">no</code>, suppresses the inclusion of the offending SQL statement in any <code dir="ltr">&lt;xsql-error&gt;</code> element generated. Valid values are <code dir="ltr">yes</code> (default) and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t13" headers="r1c1-t13">
<pre dir="ltr">
fetch-size = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t13 r1c2-t13">
<p>Number of records to fetch in each round trip to the database. If not set, the default value is used as specified by the <code dir="ltr">/XSQLConfig/processor/default-fetch-size</code> configuration setting in <code dir="ltr">XSQLConfig.xml</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t13" headers="r1c1-t13">
<pre dir="ltr">
id-attribute = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t13 r1c2-t13">
<p>XML attribute name to use instead of the default <code dir="ltr">num</code> for uniquely identifying each row in the result set. If the value is the empty string, then the row id attribute is suppressed.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t13" headers="r1c1-t13">
<pre dir="ltr">
id-attribute-column = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t13 r1c2-t13">
<p>Case-sensitive name of the column in the result set whose value must be used in each row as the value of the row id attribute. The default is to use the row count as the value of the row id attribute.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t13" headers="r1c1-t13">
<pre dir="ltr">
include-schema = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t13 r1c2-t13">
<p>If set to <code dir="ltr">yes</code>, includes an inline XML schema that describes the structure of the result set. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t13" headers="r1c1-t13">
<pre dir="ltr">
max-rows = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r10c1-t13 r1c2-t13">
<p>Maximum number of rows to fetch after optionally skipping the number of rows set by the <code dir="ltr">skip-rows</code> attribute. If not specified, the default is to fetch all rows.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t13" headers="r1c1-t13">
<pre dir="ltr">
null-indicator = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r11c1-t13 r1c2-t13">
<p>Indicates whether to signal that a column's value is NULL by including the <code dir="ltr">NULL="Y"</code> attribute on the element for the column. By default, columns with NULL values are omitted from the output. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t13" headers="r1c1-t13">
<pre dir="ltr">
row-element = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r12c1-t13 r1c2-t13">
<p>XML element name to use instead of the default <code dir="ltr">&lt;ROW&gt;</code> for the <code dir="ltr">rowset</code> of query results. Set to the empty string to suppress generating a containing <code dir="ltr">&lt;ROW&gt;</code> element for each row in the result set.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r13c1-t13" headers="r1c1-t13">
<pre dir="ltr">
rowset-element = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r13c1-t13 r1c2-t13">
<p>XML element name to use instead of the default <code dir="ltr">&lt;ROWSET&gt;</code> for the <code dir="ltr">rowset</code> of query results. Set to the empty string to suppress generating a containing <code dir="ltr">&lt;ROWSET&gt;</code> element.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r14c1-t13" headers="r1c1-t13">
<pre dir="ltr">
skip-rows = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r14c1-t13 r1c2-t13">
<p>Number of rows to skip before fetching rows from the result set. Can be combined with <code dir="ltr">max-rows</code> for stateless paging through query results.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r15c1-t13" headers="r1c1-t13">
<pre dir="ltr">
tag-case = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r15c1-t13 r1c2-t13">
<p>Valid values are <code dir="ltr">lower</code> and <code dir="ltr">upper</code>. If not specified, the default is to use the case of column names as specified in the query as corresponding XML element names.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref706"></a>Examples</p>
<p><a href="#CHDGFABG">Example 30-20</a> shows a simple XSQL page.</p>
<div id="ADXDK19996" class="example">
<p class="titleinexample"><a id="sthref707"></a>Example 30-19 Hello World</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:query connection="xmlbook" xmlns:xsql="urn:oracle-xsql"&gt;
   SELECT 'Hello, World!' AS text     FROM DUAL&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>If you save <a href="#CHDGFABG">Example 30-20</a> as <code dir="ltr">hello.xsql</code> and execute it in a browser, the XSQL page processor returns the following XML:</p>
<pre dir="ltr">
&lt;?xml version = '1.0'?&gt;
&lt;ROWSET&gt;
   &lt;ROW num="1"&gt;
      &lt;TEXT&gt;Hello, World!&lt;/TEXT&gt;
   &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre>
<p>By default, the XML produced by a query reflects the column structure of its result set, with element names matching the names of the columns. Columns in the result with the following nested structure produce nested elements that reflect this structure:</p>
<ul>
<li>
<p>Object types</p>
</li>
<li>
<p>Collection types</p>
</li>
<li>
<p>CURSOR expressions</p>
</li>
</ul>
<p>The result of a typical query containing different types of columns and returning one row might look like <a href="#CHDGFABG">Example 30-20</a>.</p>
<div id="ADXDK19997" class="example">
<p class="titleinexample"><a id="CHDGFABG"></a>Example 30-20 Nested Structure Example</p>
<pre dir="ltr">
&lt;ROWSET&gt;
  &lt;ROW id="1"&gt;
    &lt;VARCHARCOL&gt;Value&lt;/VARCHARCOL&gt;
    &lt;NUMBERCOL&gt;12345&lt;/NUMBERCOL&gt;
    &lt;DATECOL&gt;12/10/2001 10:13:22&lt;/DATECOL&gt;
    &lt;OBJECTCOL&gt;
       &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
       &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
    &lt;/OBJECTCOL&gt;
    &lt;COLLECTIONCOL&gt;
       &lt;COLLECTIONCOL_ITEM&gt;
         &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
         &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
       &lt;/COLLECTIONCOL_ITEM&gt;
       &lt;COLLECTIONCOL_ITEM&gt;
         &lt;ATTR1&gt;Value&lt;/ATTR1&gt;
         &lt;ATTR2&gt;Value&lt;/ATTR2&gt;
       &lt;/COLLECTIONCOL_ITEM&gt;
    &lt;/COLLECTIONCOL&gt;
    &lt;CURSORCOL&gt;
      &lt;CURSORCOL_ROW&gt;
        &lt;COL1&gt;Value1&lt;/COL1&gt;
        &lt;COL2&gt;Value2&lt;/COL2&gt;
      &lt;/CURSORCOR_ROW&gt;
    &lt;/CURSORCOL&gt;
  &lt;/ROW&gt;
&lt;/ROWSET&gt;
</pre></div>
<!-- class="example" -->
<p>A <code dir="ltr">&lt;ROW&gt;</code> element repeats for each row in the result set. Your query can use standard SQL column aliasing to rename the columns in the result, which effectively renames the XML elements that are produced. Column aliasing is <span class="italic">required</span> for columns whose names otherwise are illegal names for an XML element.</p>
<p>For example, an <code dir="ltr">&lt;xsql:query&gt;</code> action as shown in <a href="#BJEEFCBH">Example 30-21</a> produces an error because the default column name for the calculated expression is an illegal XML element name.</p>
<div id="ADXDK19998" class="example">
<p class="titleinexample"><a id="BJEEFCBH"></a>Example 30-21 Query with Error</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;xsql:query connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT TO_CHAR(hire_date,'DD-MON') 
  FROM   employees
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" -->
<p>You can fix the problem by using column aliasing as shown in <a href="#BJEGBJFD">Example 30-22</a>.</p>
<div id="ADXDK19999" class="example">
<p class="titleinexample"><a id="BJEGBJFD"></a>Example 30-22 Query with Column Aliasing</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;xsql:query connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT TO_CHAR(hire_date,'DD-MON') <span class="bold">AS hiredate</span> FROM   employees
&lt;/xsql:query&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDEBBEG"></a>
<div id="ADXDK20000" class="refsect1">
<h2 class="refsect1">&lt;xsql:ref-cursor-function&gt;<a id="sthref708"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref709"></a>Purpose</p>
<p>Executes an arbitrary stored function returning a <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code> and includes the query result set in canonical XML format. This action requires a database connection to be provided by supplying a <code dir="ltr">connection="</code>connname<code dir="ltr">"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>Use this tag to invoke a stored procedure that determines what the query is and returns a cursor to the query. Used in this way, this tag also provides a weak level of security because it can hide the query from direct inspection.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref710"></a>Syntax</p>
<p>The syntax of the action is as follows, where <code dir="ltr">SCHEMA_NAME</code> represents an optional database schema name, <code dir="ltr">PACKAGE_NAME</code> represents an optional PL/SQL package name, and <code dir="ltr">FUNCTION_NAME</code> (required) specifies the name of a PL/SQL function:</p>
<pre dir="ltr">
&lt;xsql:ref-cursor-function&gt;
  [SCHEMA_NAME.][PACKAGE_NAME.]FUNCTION_NAME(args);
&lt;/xsql:ref-cursor-function&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref711"></a>Attributes</p>
<p>The optional attributes are the same as for the <code dir="ltr">&lt;xsql:query&gt;</code> action listed in <a href="#BJEJEGCC">Table 30-11</a> except that <code dir="ltr">fetch-size</code> is not available for <code dir="ltr">&lt;xsql:ref-cursor-function&gt;</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref712"></a>Examples</p>
<p>By exploiting dynamic SQL in PL/SQL, a function can conditionally construct a dynamic query before a cursor handle to its result set is returned to the XSQL page processor. The return value of the function must be of type <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code>. Consider the PL/SQL package shown in <a href="#CHDHIIIE">Example 30-23</a>.</p>
<div id="ADXDK20001" class="example">
<p class="titleinexample"><a id="CHDHIIIE"></a>Example 30-23 DynCursor PL/SQL Package</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE DynCursor IS
  TYPE ref_cursor IS REF CURSOR;
  FUNCTION DynamicQuery(id NUMBER) RETURN ref_cursor;
END;
CREATE OR REPLACE PACKAGE BODY DynCursor IS
  FUNCTION DynamicQuery(id NUMBER) RETURN ref_cursor IS
    the_cursor ref_cursor;
  BEGIN
    IF id = 1 THEN -- Conditionally return a dynamic query as a REF CURSOR
      OPEN the_cursor  -- An employees Query
       FOR 'SELECT employee_id, email FROM employees';
    ELSE
      OPEN the_cursor  -- A departments Query
        FOR 'SELECT department_name, department_id FROM departments'; 
   END IF;
   RETURN the_cursor;
  END;
END;
</pre></div>
<!-- class="example" -->
<p>An <code dir="ltr">&lt;xsql:ref-cursor-function&gt;</code> can include the dynamic results of the <code dir="ltr">REF</code> <code dir="ltr">CURSOR</code> returned by this function as shown in <a href="#BJECFHFG">Example 30-24</a>.</p>
<div id="ADXDK20002" class="example">
<p class="titleinexample"><a id="BJECFHFG"></a>Example 30-24 Executing a REF CURSOR Function</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;xsql:ref-cursor-function connection="demo" xmlns:xsql="urn:oracle-xsql"&gt; 
  DynCursor.DynamicQuery(1);
&lt;/xsql:ref-cursor-function&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDCBIFI"></a>
<div id="ADXDK20003" class="refsect1">
<h2 class="refsect1">&lt;xsql:set-cookie&gt;<a id="sthref713"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref714"></a>Purpose</p>
<p>Sets an HTTP cookie to a value. By default, the value remains for the lifetime of the current browser, but you can change its lifetime by supplying the optional <code dir="ltr">max-age</code> attribute. The value to be assigned to the cookie can be supplied by a combination of static text and other parameter values, or from the result of a SQL <code dir="ltr">SELECT</code> statement.</p>
<p>Because this feature is specific to the HTTP protocol, this action is only effective if the XSQL page in which it appears is processed by the XSQL servlet. If this action is encountered in an XSQL page processed by the XSQL command-line utility or the <code dir="ltr">XSQLRequest</code> programmatic API, then it does nothing.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref715"></a>Usage Notes</p>
<p>If you use the SQL statement option, then a single row is fetched from the result set and the parameter is assigned the value of the first column. This use requires a database connection to be provided by supplying a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>If you need to set several cookie values based on the results of a single SQL statement, then do not use the <code dir="ltr">name</code> attribute. Instead, you can use the <code dir="ltr">names</code> attribute and supply a space-or-comma-delimited list of one or more cookie names.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref716"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:set-cookie name="<span class="italic">paramname</span>" value="<span class="italic">value</span>"/&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">SQL_statement</span></code> is a SQL <code dir="ltr">SELECT</code> statement and <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:set-cookie name="<span class="italic">paramname</span>"&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-cookie&gt;
</pre>
<p>Either the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute is required. The <code dir="ltr">value</code> attribute and the contained SQL statement are mutually exclusive. The number of columns in the select list must match the number of cookies being set or an error message results.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref717"></a>Attributes</p>
<p><a href="#BJECHFIG">Table 30-12</a> lists the attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div id="ADXDK20004" class="tblformal">
<p class="titleintable"><a id="sthref718"></a><a id="BJECHFIG"></a>Table 30-12 Attributes for &lt;xsql:set-cookie&gt;</p>
<table class="cellalignment1214" title="Attributes for &lt;xsql:set-cookie&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t14">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t14" headers="r1c1-t14">
<pre dir="ltr">
<span class="bold">name = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t14 r1c2-t14">
<p>Name of the cookie whose value you want to set. You must use <code dir="ltr">name</code> or <code dir="ltr">names</code> but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t14" headers="r1c1-t14">
<pre dir="ltr">
<span class="bold">names = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t14 r1c2-t14">
<p>Space-or-comma-delimited list of the cookie names whose values you want to set. You must use <code dir="ltr">name</code> or <code dir="ltr">names</code> but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t14" headers="r1c1-t14">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t14 r1c2-t14">
<p>Ordered, space-delimited list of one or more XSQL parameter names. Values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t14" headers="r1c1-t14">
<pre dir="ltr">
domain = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t14 r1c2-t14">
<p>Domain in which cookie value is valid and readable. If <code dir="ltr">domain</code> is not set explicitly, it defaults to the fully-qualified host name (for example, <code dir="ltr">server.biz.com</code>) of the document creating the cookie.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t14" headers="r1c1-t14">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t14 r1c2-t14">
<p>Name of a page-private parameter that is set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t14" headers="r1c1-t14">
<pre dir="ltr">
ignore-empty-value = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t14 r1c2-t14">
<p>Indicates whether the cookie assignment is ignored if the value to which it is being assigned is an empty string.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t14" headers="r1c1-t14">
<pre dir="ltr">
immediate = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t14 r1c2-t14">
<p>Indicates whether the cookie assignment is immediately visible to the current page. Typically, cookies set in the current request are not visible until the browser sends them back to the server in a subsequent request.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t14" headers="r1c1-t14">
<pre dir="ltr">
max-age = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t14 r1c2-t14">
<p>Sets the maximum age of the cookie in <span class="italic">seconds</span>. Default is to set the cookie to expire when users current browser session terminates.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t14" headers="r1c1-t14">
<pre dir="ltr">
only-if-unset = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r10c1-t14 r1c2-t14">
<p>Indicates whether the cookie assignment only occurs when the cookie currently does not exists.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r11c1-t14" headers="r1c1-t14">
<pre dir="ltr">
path = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r11c1-t14 r1c2-t14">
<p>Relative URL path within domain in which cookie value is valid and readable. If path is not set explicitly, then it defaults to the URL path of the document creating the cookie.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r12c1-t14" headers="r1c1-t14">
<pre dir="ltr">
value = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r12c1-t14 r1c2-t14">
<p>Sets the value to assign to the cookie.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref719"></a>Examples</p>
<p><a href="#BJEBJGBH">Example 30-25</a> sets the HTTP cookie to the value of the parameter named <code dir="ltr">choice</code>.</p>
<div id="ADXDK20005" class="example">
<p class="titleinexample"><a id="BJEBJGBH"></a>Example 30-25 Setting a Cookie to a Parameter Value</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:set-cookie name="last_selection" 
                 value="{@choice}" xmlns:xsql="urn:oracle-xsql"/&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJECCJJI">Example 30-3</a> sets the HTTP cookie to a value selected from the database.</p>
<div id="ADXDK20006" class="example">
<p class="titleinexample"><a id="sthref720"></a>Example 30-26 Setting a Cookie to a Database-Generated Value</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:set-cookie name="shopping_cart_id" bind-params="user"
                 connection="demo"       xmlns:xsql="urn:oracle-xsql"&gt;
 SELECT cartmgr.new_cart_id(UPPER(?)) FROM DUAL 
&lt;/xsql:set-cookie&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJEBBAII">Example 30-4</a> sets three cookies based on the result of a single <code dir="ltr">SELECT</code> statement.</p>
<div id="ADXDK20007" class="example">
<p class="titleinexample"><a id="sthref721"></a>Example 30-27 Setting Three Cookies</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:set-cookie names="paramname1 paramname2 paramname3"
                 connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  SELECT expression_or_column1, expression_or_column2, expression_or_column3
  FROM table
  WHERE clause_identifying_a_single_row
&lt;/xsql:set-cookie&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDFBHAB"></a>
<div id="ADXDK20008" class="refsect1">
<h2 class="refsect1">&lt;xsql:set-page-param&gt;<a id="sthref722"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref723"></a>Purpose</p>
<p>Sets a page-private parameter to a value. The value can be supplied by a combination of static text and other parameter values, or alternatively from the result of a SQL <code dir="ltr">SELECT</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref724"></a>Usage Notes</p>
<p>If you use the SQL statement option, then the program fetches a single row from the result set and assigns the parameter the value of the first column. This usage requires a database connection to be provided by supplying a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>As an alternative to providing the <code dir="ltr">value</code> attribute, or a SQL statement, you can supply the <code dir="ltr">xpath</code> attribute to set the page-level parameter to the value of an XPath expression. The XPath expression is evaluated against an XML document or HTML form that has been posted to the XSQL pages processor. The value of the <code dir="ltr">xpath</code> attribute can be any valid XPath expression, optionally built using XSQL parameters as part of the attribute value like any other XSQL action element.</p>
<p>After a page-private parameter is set, subsequent action handlers can use this value as a lexical parameter, for example <code dir="ltr">{@po_id}</code>. Alternatively, action handlers can use this value as a SQL bind parameter value; they can reference its name in the <code dir="ltr">bind-params</code> attribute of any action handler that supports SQL operations.</p>
<p>If you need to set multiple session parameter values based on the results of a single SQL statement, instead of using the <code dir="ltr">name</code> attribute, then you can use the <code dir="ltr">names</code> attribute. You can supply a list, delimited by spaces or commas, of one or more session parameter names.</p>
<pre dir="ltr">
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref725"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter and <code dir="ltr"><span class="codeinlineitalic">value</span></code> is a value:</p>
<pre dir="ltr">
&lt;xsql:set-page-param name="<span class="italic">paramname</span>" value="<span class="italic">value</span>"/&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">SQL_statement</span></code> is a SQL <code dir="ltr">SELECT</code> statement and <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:set-page-param nname="<span class="italic">paramname</span>"&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-page-param&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter and where <code dir="ltr"><span class="codeinlineitalic">expression</span></code> is an XPath expression:</p>
<pre dir="ltr">
&lt;xsql:set-page-param name="<span class="italic">paramname</span>" xpath="<span class="italic">expression</span>"/&gt;
</pre>
<p>Either the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute is required. The <code dir="ltr">value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref726"></a>Attributes</p>
<p><a href="#BJEICGIA">Table 30-13</a> lists the attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div id="ADXDK20009" class="tblformal">
<p class="titleintable"><a id="sthref727"></a><a id="BJEICGIA"></a>Table 30-13 Attributes for &lt;xsql:set-page-param&gt;</p>
<table class="cellalignment1214" title="Attributes for &lt;xsql:set-page-param&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t15">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t15" headers="r1c1-t15">
<pre dir="ltr">
<span class="bold">name = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t15 r1c2-t15">
<p>Name of the page-private parameter whose value you want to set.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t15" headers="r1c1-t15">
<pre dir="ltr">
<span class="bold">names = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t15 r1c2-t15">
<p>Space-or-comma-delimited list of the page parameter names whose values you want to set. Either use the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t15" headers="r1c1-t15">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t15 r1c2-t15">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The values of these parameters are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t15" headers="r1c1-t15">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t15 r1c2-t15">
<p>Name of a page-private parameter that must be set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t15" headers="r1c1-t15">
<pre dir="ltr">
ignore-empty-value = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t15 r1c2-t15">
<p>Indicates whether the page-level parameter assignment is ignored if the value to which it is being assigned is an empty string.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t15" headers="r1c1-t15">
<pre dir="ltr">
quote-array-values = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t15 r1c2-t15">
<p>If the parameter name is a simple-valued parameter name (for example, <code dir="ltr">myparam</code>) and if <code dir="ltr">treat-list-as-array="yes"</code> is specified, then specifying <code dir="ltr">quote-array-values="yes"</code> will surround each string token with single quotes before separating the values with commas. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t15" headers="r1c1-t15">
<pre dir="ltr">
treat-list-as-array = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t15 r1c2-t15">
<p>Indicates whether the string-value assigned to the parameter is tokenized into an array of separate values before assignment. If any comma is present in the string, then the comma is used for separating tokens. Otherwise, spaces are used.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>. The default value is <code dir="ltr">yes</code> if the parameter name being set is an array parameter name (for example, <code dir="ltr">myparam[]</code>), and default is <code dir="ltr">no</code> if the parameter name being set is a simple-valued parameter name like <code dir="ltr">myparam</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t15" headers="r1c1-t15">
<pre dir="ltr">
value = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t15 r1c2-t15">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t15" headers="r1c1-t15">
<pre dir="ltr">
xpath = "<span class="italic">XPathExpression</span>"
</pre></td>
<td class="cellalignment1213" headers="r10c1-t15 r1c2-t15">
<p>Sets the value of the parameter to an XPath expression evaluated against an XML document or HTML form that has been posted to the XSQL pages processor.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref728"></a>Examples</p>
<p><a href="#BJECCHAH">Example 30-28</a> sets multiple parameter values based on the results of a single SQL statement.</p>
<div id="ADXDK20010" class="example">
<p class="titleinexample"><a id="BJECCHAH"></a>Example 30-28 Setting Multiple Page Parameters</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;xsql:set-page-param names="paramname1 paramname2 paramname3"
                     connection="demo" xmlns:xsql="urn:oracle-xsql&gt;
  SELECT expression_or_column1, expression_or_column2, expression_or_column3
  FROM table
  WHERE clause_identifying_a_single_row
&lt;/xsql:set-page-param&gt;
</pre></div>
<!-- class="example" -->
<p><a href="#BJEGAFJA">Example 30-29</a> sets the page-level parameter to a value selected from database and then uses it as the value of an <code dir="ltr">xsql:query</code> attribute.</p>
<div id="ADXDK20011" class="example">
<p class="titleinexample"><a id="BJEGAFJA"></a>Example 30-29 Setting a Parameter to a Database-Generated Value</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:set-page-param name="max-rows-pref"&gt;
     SELECT max_rows
     FROM user_profile
     WHERE userid = {@userid}
  &lt;/xsql:set-page-param&gt;
  &lt;xsql:query max-rows="{@max-rows-pref}"&gt;
    SELECT title, url
    FROM newsstory
    ORDER BY date_entered DESC
  &lt;/xsql:query&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGFGIA"></a>
<div id="ADXDK20012" class="refsect1">
<h2 class="refsect1">&lt;xsql:set-session-param&gt;<a id="sthref729"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref730"></a>Purpose</p>
<p>Sets an HTTP session-level parameter to a value. The value of the session-level parameter remains for the lifetime HTTP session of the current browser user. The session is controlled by the Web server. The value can be supplied by a combination of static text and other parameter values or from the result of a SQL <code dir="ltr">SELECT</code> statement.</p>
<p>Because this feature is specific to Java servlets, this action is only effective if the XSQL page in which it appears is processed by the XSQL servlet. If this action occurs in an XSQL page processed by the XSQL command-line utility or the <code dir="ltr">XSQLRequest</code> programmatic API, then it does nothing.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref731"></a>Usage Notes</p>
<p>If you use the SQL statement option, the XSQL processor fetches a single row from the result set and assigns the parameter the value of the first column. This use requires a database connection to be provided by supplying a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>To set several session parameter values based on the results of a single SQL statement, do not use the <code dir="ltr">name</code> attribute. Instead, use the <code dir="ltr">names</code> attribute and supply a space-or-comma-delimited list of one or more session parameter names.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref732"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter and where <code dir="ltr"><span class="codeinlineitalic">value</span></code> is a value:</p>
<pre dir="ltr">
&lt;xsql:set-session-param name="<span class="italic">paramname</span>" value="<span class="italic">value</span>"/&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">SQL_statement</span></code> is a SQL <code dir="ltr">SELECT</code> statement and <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:set-session-param name="<span class="italic">paramname</span>"&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-session-param&gt;
</pre>
<p>Either the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute is required. The <code dir="ltr">value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref733"></a>Attributes</p>
<p><a href="#BJEICHHB">Table 30-14</a> lists the optional attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div id="ADXDK20013" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref734"></a><a id="BJEICHHB"></a>Table 30-14 Attributes for &lt;xsql:set-session-param&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:set-session-param&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t16">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t16" headers="r1c1-t16">
<pre dir="ltr">
<span class="bold">name = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t16 r1c2-t16">
<p>Name of the session-level variable whose value you want to set. Either use the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t16" headers="r1c1-t16">
<pre dir="ltr">
<span class="bold">names = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t16 r1c2-t16">
<p>Space-or-comma-delimited list of the session parameter names whose values you want to set. Either use the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t16" headers="r1c1-t16">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t16 r1c2-t16">
<p>Ordered, space-delimited list of one or more XSQL parameter names. The parameter values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t16" headers="r1c1-t16">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t16 r1c2-t16">
<p>Name of a page-private parameter that is set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t16" headers="r1c1-t16">
<pre dir="ltr">
ignore-empty-value = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t16 r1c2-t16">
<p>Indicates whether the session-level parameter assignment is ignored if the value to which it is being assigned is an empty string. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t16" headers="r1c1-t16">
<pre dir="ltr">
only-if-unset = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t16 r1c2-t16">
<p>Indicates whether the session variable assignment only occurs when the session variable currently does not exists.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t16" headers="r1c1-t16">
<pre dir="ltr">
quote-array-values = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t16 r1c2-t16">
<p>If the parameter name is a simple-valued parameter name (for example, <code dir="ltr">myparam</code>) and if <code dir="ltr">treat-list-as-array="yes"</code> is specified, then specifying <code dir="ltr">quote-array-values="yes"</code> surrounds each string token with single quotes before separating the values with commas. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t16" headers="r1c1-t16">
<pre dir="ltr">
treat-list-as-array = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t16 r1c2-t16">
<p>Indicates whether the string-value assigned to the parameter is tokenized into an array of separate values before assignment. If any comma is present in the string, then the comma is used for separating tokens. Otherwise, spaces are used.Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>. The default value is <code dir="ltr">yes</code> if the parameter name being set is an array parameter name (for example, <code dir="ltr">myparam[]</code>), and default is <code dir="ltr">no</code> if the parameter name being set is a simple-valued parameter name like <code dir="ltr">myparam</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r10c1-t16" headers="r1c1-t16">
<pre dir="ltr">
value = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r10c1-t16 r1c2-t16">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref735"></a>Examples</p>
<p><a href="#BJEFFHED">Example 30-30</a> sets multiple session parameter values based on the results of a single <code dir="ltr">SELECT</code> statement.</p>
<div id="ADXDK20014" class="example">
<p class="titleinexample"><a id="BJEFFHED"></a>Example 30-30 Setting Session Parameters</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;page connection="demo" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;xsql:set-session-param names="paramname1 paramname2 paramname3"&gt;
    SELECT expression_or_column1, expression_or_column2, expression_or_column3
    FROM   table
    WHERE  clause_identifying_a_single_row
  &lt;/xsql:set-session-param&gt;
  &lt;!-- ... --&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="CHDGHAGJ"></a>
<div id="ADXDK20015" class="refsect1">
<h2 class="refsect1">&lt;xsql:set-stylesheet-param&gt;<a id="sthref736"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref737"></a>Purpose</p>
<p>Sets a top-level XSLT stylesheet parameter to a value. The value can be supplied by a combination of static text and other parameter values, or from the result of a SQL <code dir="ltr">SELECT</code> statement. The stylesheet parameter will be set on any stylesheet used during the processing of the current page.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref738"></a>Usage Notes</p>
<p>If you use the SQL statement option, then a single row is fetched from the result set and the parameter is assigned the value of the first column. This use requires a database connection to be provided by supplying a <code dir="ltr">connection="connname"</code> attribute on the document element of the XSQL page in which it appears.</p>
<p>To set several stylesheet parameter values based on the results of a single SQL statement, do not use the <code dir="ltr">name</code> attribute. You can use the <code dir="ltr">names</code> attribute and supply a space-or-comma-delimited list of one or more stylesheet parameter names.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref739"></a>Syntax</p>
<p>The syntax for this action is as follows, where <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter and where <code dir="ltr"><span class="codeinlineitalic">value</span></code> is a value:</p>
<pre dir="ltr">
&lt;xsql:set-stylesheet-param name="<span class="italic">paramname</span>" value="<span class="italic">value</span>"/&gt;
</pre>
<p>Alternatively, you can use the following syntax, where <code dir="ltr"><span class="codeinlineitalic">SQL_statement</span></code> is a SQL <code dir="ltr">SELECT</code> statement and <code dir="ltr"><span class="codeinlineitalic">paramname</span></code> is the name of a parameter:</p>
<pre dir="ltr">
&lt;xsql:set-stylesheet-param name="paramname"&gt;
  <span class="italic">SQL_statement</span>
&lt;/xsql:set-stylesheet-param&gt;
</pre>
<p>Either the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute is required. The <code dir="ltr">value</code> attribute and the contained SQL statement are mutually exclusive.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref740"></a>Attributes</p>
<p><a href="#BJEBAEEC">Table 30-15</a> lists the optional attributes supported by this action. Attributes in bold are required; all others are optional.</p>
<div id="ADXDK20016" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref741"></a><a id="BJEBAEEC"></a>Table 30-15 Attributes for &lt;xsql:set-stylesheet-param&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:set-stylesheet-param&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t17">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t17" headers="r1c1-t17">
<pre dir="ltr">
<span class="bold">name = "</span><span class="bolditalic">string"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t17 r1c2-t17">
<p>Name of the top-level stylesheet parameter whose value you want to set.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t17" headers="r1c1-t17">
<pre dir="ltr">
<span class="bold">names = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t17 r1c2-t17">
<p>Space-or-comma-delimited list of the top-level stylesheet parameter names whose values you want to set. Use the <code dir="ltr">name</code> or the <code dir="ltr">names</code> attribute, but not both.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t17" headers="r1c1-t17">
<pre dir="ltr">
bind-params = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t17 r1c2-t17">
<p>Ordered, space-delimited list of one or more XSQL parameter names. Parameter values are used to bind to the JDBC bind variable in the appropriate sequential position in the SQL statement.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t17" headers="r1c1-t17">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t17 r1c2-t17">
<p>Name of a page-private parameter that has to be set to the string '<code dir="ltr">Error</code>' if a non-fatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t17" headers="r1c1-t17">
<pre dir="ltr">
ignore-empty-value = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t17 r1c2-t17">
<p>Indicates whether the stylesheet parameter assignment is to be ignored if the value to which it is being assigned is an empty string. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code> (default).</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t17" headers="r1c1-t17">
<pre dir="ltr">
value = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t17 r1c2-t17">
<p>Sets the value to assign to the parameter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref742"></a>Examples</p>
<p><a href="#BJEEAFJB">Example 30-31</a> associate a stylesheet and uses the <code dir="ltr">&lt;xsql:set-stylesheet-param&gt;</code> action element to assign the value of the XSQL page parameter named <code dir="ltr">p_table</code> to the XSLT top-level stylesheet parameter named <code dir="ltr">table</code>.</p>
<div id="ADXDK20017" class="example">
<p class="titleinexample"><a id="BJEEAFJB"></a>Example 30-31 Setting a Stylesheet Parameter</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;page connname="xmlbook" connection="{@p_connname}"&gt;
  &lt;xsql:query null-indicator="yes" xmlns:xsql="urn:oracle-xsql"&gt;
  &lt;![CDATA[
    SELECT *
    FROM {@p_table}
    WHERE rownum &lt; 2
  ]]&gt;
  &lt;/xsql:query&gt;
  &lt;xsql:set-stylesheet-param name="table" value="{@p_table}"
                             xmlns:xsql="urn:oracle-xsql" /&gt;
&lt;/page&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" -->
<a id="BJEHDFIH"></a>
<div id="ADXDK20018" class="refsect1">
<h2 class="refsect1">&lt;xsql:update-request&gt;<a id="sthref743"></a></h2>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref744"></a>Purpose</p>
<p>Accepts data posted from an XML document or HTML form and uses the <a href="glossary.htm#i999059"><span class="xrefglossterm">XML SQL Utility (XSU)</span></a> to update the content of an XML document in canonical form from a target table or view.</p>
<p>By combining XSU with XSLT, you can transform XML into the canonical format expected by a given table. Afterward, you can use XSU to update the resulting canonical XML. For a specified database table, the canonical XML form is given by one row of XML output from a <code dir="ltr">SELECT *</code> query against the table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref745"></a>Syntax</p>
<p>The syntax for this action is as follows:</p>
<pre dir="ltr">
&lt;xsql:update-request table="<span class="italic">table_name</span>"/&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref746"></a>Attributes</p>
<p><a href="#BJEIHJFF">Table 30-3</a> lists the attributes that you can use on the <code dir="ltr">&lt;xsql:update-request&gt;</code> action. Required attributes are in bold.</p>
<div id="ADXDK20019" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref747"></a><a id="sthref748"></a>Table 30-16 Attributes for &lt;xsql:update-request&gt;</p>
<table class="cellalignment1211" title="Attributes for &lt;xsql:update-request&gt; " summary="Attribute Name and Description are the columns." dir="ltr">
<thead>
<tr class="cellalignment1205">
<th class="cellalignment1212" id="r1c1-t18">Attribute Name</th>
<th class="cellalignment1212" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r2c1-t18" headers="r1c1-t18">
<pre dir="ltr">
<span class="bold">table = "</span><span class="bolditalic">string</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r2c1-t18 r1c2-t18">
<p>Name of the table, view, or synonym to use for updating the XML data.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r3c1-t18" headers="r1c1-t18">
<pre dir="ltr">
<span class="bold">key_columns = "</span><span class="bolditalic">string string ...</span><span class="bold">"</span>
</pre></td>
<td class="cellalignment1213" headers="r3c1-t18 r1c2-t18">
<p>Space-delimited or comma-delimited list of one or more column names. The processor uses the values of these names in the posted XML document to identify the existing rows to update.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r4c1-t18" headers="r1c1-t18">
<pre dir="ltr">
transform = "<span class="italic">URL</span>"
</pre></td>
<td class="cellalignment1213" headers="r4c1-t18 r1c2-t18">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be updated into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r5c1-t18" headers="r1c1-t18">
<pre dir="ltr">
columns = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r5c1-t18 r1c2-t18">
<p>Relative or absolute URL of the XSLT transformation to use to transform the document to be updated into canonical ROWSET/ROW format.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r6c1-t18" headers="r1c1-t18">
<pre dir="ltr">
commit = "<span class="italic">boolean</span>"
</pre></td>
<td class="cellalignment1213" headers="r6c1-t18 r1c2-t18">
<p>If set to <code dir="ltr">yes</code> (default), calls <code dir="ltr">COMMIT</code> on the current connection after a successful execution of the update. Valid values are <code dir="ltr">yes</code> and <code dir="ltr">no</code>.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r7c1-t18" headers="r1c1-t18">
<pre dir="ltr">
commit-batch-size = "<span class="italic">integer</span>"
</pre></td>
<td class="cellalignment1213" headers="r7c1-t18 r1c2-t18">
<p>If a positive, nonzero <code dir="ltr"><span class="codeinlineitalic">integer</span></code> is specified, then after each batch of <code dir="ltr"><span class="codeinlineitalic">integer</span></code> updated records, the processor issues a <code dir="ltr">COMMIT</code>. The default batch size is zero (<code dir="ltr">0</code>) if not specified, which means that the processor does not commit interim batches.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r8c1-t18" headers="r1c1-t18">
<pre dir="ltr">
date-format = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r8c1-t18 r1c2-t18">
<p>Date format mask to use for interpreting date field values in XML being updated. Valid values are those for the <code dir="ltr">java.text.SimpleDateFormat</code> class.</p>
</td>
</tr>
<tr class="cellalignment1205">
<td class="cellalignment1213" id="r9c1-t18" headers="r1c1-t18">
<pre dir="ltr">
error-param = "<span class="italic">string</span>"
</pre></td>
<td class="cellalignment1213" headers="r9c1-t18 r1c2-t18">
<p>Name of a page-private parameter that must be set to <code dir="ltr">Error</code> if a nonfatal error occurs while processing this action. Valid value is any parameter name.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref749"></a>Examples</p>
<p><a href="#BJEHGEJJ">Example 30-32</a> parses and transforms the contents of the posted XML document or HTML Form for update.</p>
<div id="ADXDK20020" class="example">
<p class="titleinexample"><a id="BJEHGEJJ"></a>Example 30-32 Updating XML Received in a Parameter</p>
<pre dir="ltr">
&lt;?xml version="1.0"?&gt;
&lt;xsql:update-request table="purchase_order"   key-columns="department_id"
                     connection="demo"        transform="doc-to-departments.xsl"
 xmlns:xsql="urn:oracle-xsql/&gt;
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1204">
<tr>
<td class="cellalignment1213">
<table class="cellalignment1209">
<tr>
<td class="cellalignment1208"><a href="adx_pt_ref.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1208"><a href="adx_ref_standards.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2001, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1216">
<table class="cellalignment1207">
<tr>
<td class="cellalignment1208"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1208"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1208"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1208"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1208"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1208"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
