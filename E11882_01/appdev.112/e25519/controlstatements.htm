<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Control Statements</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:56Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="datatypes.htm" title="Previous" type="text/html" />
<link rel="Next" href="composites.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">11/99</span> <!-- End Header -->
<div id="LNPLS004" class="chapter"><a id="CIHIAGAF"></a>
<h1 class="chapter"><span class="secnum">4</span> PL/SQL Control Statements</h1>
<p><a id="LNPLS00401"></a><a id="sthref291"></a>PL/SQL has three categories of control statements:</p>
<ul>
<li>
<p><span class="bold">Conditional selection statements</span>, which run different statements for different data values.</p>
<p>The conditional selection statements are <code dir="ltr">IF</code> and and <code dir="ltr">CASE</code>.</p>
</li>
<li>
<p><span class="bold">Loop statements</span>, which run the same statements with a series of different data values.</p>
<p>The loop statements are the basic <code dir="ltr">LOOP</code>, <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code>, and <code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code>.</p>
<p>The <code dir="ltr">EXIT</code> statement transfers control to the end of a loop. The <code dir="ltr">CONTINUE</code> statement exits the current iteration of a loop and transfers control to the next iteration. Both <code dir="ltr">EXIT</code> and <code dir="ltr">CONTINUE</code> have an optional <code dir="ltr">WHEN</code> clause, where you can specify a condition.</p>
</li>
<li>
<p><span class="bold">Sequential control statements</span>, which are not crucial to PL/SQL programming.</p>
<p>The sequential control statements are <code dir="ltr">GOTO</code>, which goes to a specified statement, and <code dir="ltr">NULL</code>, which does nothing.</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS338"></a>Topics</p>
<ul>
<li>
<p><a href="#i2866">Conditional Selection Statements</a></p>
</li>
<li>
<p><a href="#i8296">LOOP Statements</a></p>
</li>
<li>
<p><a href="#i2909">Sequential Control Statements</a></p>
</li>
</ul>
<a id="i2866"></a>
<div id="LNPLS00402" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Conditional Selection Statements</h2>
<p>The <a id="sthref292"></a><span class="bold">conditional selection statements</span>, <code dir="ltr">IF</code> and <code dir="ltr">CASE</code>, run different statements for different data values.</p>
<p>The <a id="sthref293"></a><code dir="ltr">IF</code> statement either runs or skips a sequence of one or more statements, depending on a condition. The <code dir="ltr">IF</code> statement has these forms:</p>
<ul>
<li>
<p><code dir="ltr">IF</code> <code dir="ltr">THEN</code></p>
</li>
<li>
<p><code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSE</code></p>
</li>
<li>
<p><code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code></p>
</li>
</ul>
<p>The <a id="sthref294"></a><code dir="ltr">CASE</code> statement chooses from a sequence of conditions, and runs the corresponding statement. The <code dir="ltr">CASE</code> statement has these forms:</p>
<ul>
<li>
<p>Simple, which evaluates a single expression and compares it to several potential values.</p>
</li>
<li>
<p>Searched, which evaluates multiple conditions and chooses the first one that is true.</p>
</li>
</ul>
<p>The <code dir="ltr">CASE</code> statement is appropriate when a different action is to be taken for each alternative.</p>
<p class="subhead2"><a id="LNPLS339"></a>Topics</p>
<ul>
<li>
<p><a href="#CJAEDEIH">IF THEN Statement</a></p>
</li>
<li>
<p><a href="#CJACFICE">IF THEN ELSE Statement</a></p>
</li>
<li>
<p><a href="#CJAJGBEE">IF THEN ELSIF Statement</a></p>
</li>
<li>
<p><a href="#i8305">Simple CASE Statement</a></p>
</li>
<li>
<p><a href="#CIHIHGHE">Searched CASE Statement</a></p>
</li>
</ul>
<a id="CJAEDEIH"></a>
<div id="LNPLS386" class="sect2">
<h3 class="sect2">IF THEN Statement</h3>
<p>The <a id="sthref295"></a><code dir="ltr">IF</code> <code dir="ltr">THEN</code> statement has this structure:</p>
<pre dir="ltr">
IF <span class="italic">condition</span> THEN
  <span class="italic">statements</span>
END IF;
</pre>
<p>If the <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true, the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> run; otherwise, the <code dir="ltr">IF</code> statement does nothing. (For complete syntax, see <a href="if_statement.htm#i34570">"IF Statement"</a>.)</p>
<p>In <a href="#BABDAEGB">Example 4-1</a>, the statements between <code dir="ltr">THEN</code> and <code dir="ltr">END</code> <code dir="ltr">IF</code> run if and only if the value of <code dir="ltr">sales</code> is greater than <code dir="ltr">quota</code>+200.</p>
<div id="LNPLS387" class="example">
<p class="titleinexample"><a id="BABDAEGB"></a>Example 4-1 IF THEN Statement</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p (
    sales  NUMBER,
    quota  NUMBER,
    emp_id NUMBER
  )
  IS
    bonus    NUMBER := 0;
    updated  VARCHAR2(3) := 'No';
  BEGIN
    <span class="bold">IF sales &gt; (quota + 200) THEN</span>
      bonus := (sales - quota)/4;
 
      UPDATE employees
      SET salary = salary + bonus 
      WHERE employee_id = emp_id;
 
      updated := 'Yes';
    <span class="bold">END IF;</span>
 
    DBMS_OUTPUT.PUT_LINE (
      'Table updated?  ' || updated || ', ' || 
      'bonus = ' || bonus || '.'
    );
  END p;
BEGIN
  p(10100, 10000, 120);
  p(10500, 10000, 121);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Table updated?  No, bonus = 0.
Table updated?  Yes, bonus = 125.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Avoid clumsy <code dir="ltr">IF</code> statements such as:
<pre dir="ltr">
IF new_balance &lt; minimum_balance THEN
  overdrawn := TRUE;
ELSE
  overdrawn := FALSE;
END IF;
</pre>
<p>Instead, assign the value of the <code dir="ltr">BOOLEAN</code> expression directly to a <code dir="ltr">BOOLEAN</code> variable:</p>
<pre dir="ltr">
overdrawn := new_balance &lt; minimum_balance;
</pre>
<p>A <code dir="ltr">BOOLEAN</code> variable is either <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>. Do not write:</p>
<pre dir="ltr">
IF overdrawn = TRUE THEN
  RAISE insufficient_funds;
END IF;
</pre>
<p>Instead, write:</p>
<pre dir="ltr">
IF overdrawn THEN
  RAISE insufficient_funds;
END IF;
</pre></div>
</div>
<!-- class="sect2" -->
<a id="CJACFICE"></a>
<div id="LNPLS388" class="sect2">
<h3 class="sect2">IF THEN ELSE Statement</h3>
<p>The <a id="sthref296"></a><code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSE</code> statement has this structure:</p>
<pre dir="ltr">
IF <span class="italic">condition</span> THEN
  <span class="italic">statements</span>
ELSE
  <span class="italic">else_statements</span>
END IF;
</pre>
<p>If the value of <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true, the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> run; otherwise, the <code dir="ltr"><span class="codeinlineitalic">else_statements</span></code> run. (For complete syntax, see <a href="if_statement.htm#i34570">"IF Statement"</a>.)</p>
<p>In <a href="#BABGBDCB">Example 4-2</a>, the statement between <code dir="ltr">THEN</code> and <code dir="ltr">ELSE</code> runs if and only if the value of <code dir="ltr">sales</code> is greater than <code dir="ltr">quota</code>+200; otherwise, the statement between <code dir="ltr">ELSE</code> and <code dir="ltr">END</code> <code dir="ltr">IF</code> runs.</p>
<div id="LNPLS389" class="example">
<p class="titleinexample"><a id="BABGBDCB"></a>Example 4-2 IF THEN ELSE Statement</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p (
    sales  NUMBER,
    quota  NUMBER,
    emp_id NUMBER
  )
  IS
    bonus  NUMBER := 0;
  BEGIN
    <span class="bold">IF sales &gt; (quota + 200) THEN</span>
      bonus := (sales - quota)/4;
    <span class="bold">ELSE</span>
      bonus := 50;
    <span class="bold">END IF;</span>
 
    DBMS_OUTPUT.PUT_LINE('bonus = ' || bonus);
 
    UPDATE employees
    SET salary = salary + bonus 
    WHERE employee_id = emp_id;
  END p;
BEGIN
  p(10100, 10000, 120);
  p(10500, 10000, 121);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
bonus = 50
bonus = 125
</pre></div>
<!-- class="example" -->
<p><a id="sthref297"></a><a id="sthref298"></a><code dir="ltr">IF</code> statements can be nested, as in <a href="#BABHIAAC">Example 4-3</a>.</p>
<div id="LNPLS390" class="example">
<p class="titleinexample"><a id="BABHIAAC"></a>Example 4-3 Nested IF THEN ELSE Statements</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p (
    sales  NUMBER,
    quota  NUMBER,
    emp_id NUMBER
  )
  IS
    bonus  NUMBER := 0;
  BEGIN
    <span class="bold">IF sales &gt; (quota + 200) THEN</span>
      bonus := (sales - quota)/4;
    <span class="bold">ELSE</span>
      <span class="bold">IF sales &gt; quota THEN</span>
        bonus := 50;
      <span class="bold">ELSE</span>
        bonus := 0;
      <span class="bold">END IF;</span>
    <span class="bold">END IF;</span>
 
    DBMS_OUTPUT.PUT_LINE('bonus = ' || bonus);
 
    UPDATE employees
    SET salary = salary + bonus 
    WHERE employee_id = emp_id;
  END p;
BEGIN
  p(10100, 10000, 120);
  p(10500, 10000, 121);
  p(9500, 10000, 122);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
bonus = 50
bonus = 125
bonus = 0
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CJAJGBEE"></a>
<div id="LNPLS391" class="sect2">
<h3 class="sect2">IF THEN ELSIF Statement</h3>
<p>The <a id="sthref299"></a><code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement has this structure:</p>
<pre dir="ltr">
IF <span class="italic">condition_1</span> THEN
  <span class="italic">statements_1</span>
ELSIF <span class="italic">condition_2</span> THEN
  <span class="italic">statements_2</span>
[ ELSIF <span class="italic">condition_3</span> THEN
    <span class="italic">statements_3</span>
]...
[ ELSE
  <span class="italic">  else_statements</span>
]
END IF;
</pre>
<p>The <code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement runs the first <code dir="ltr"><span class="codeinlineitalic">statements</span></code> for which <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true. Remaining conditions are not evaluated. If no <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true, the <code dir="ltr"><span class="codeinlineitalic">else_statements</span></code> run, if they exist; otherwise, the <code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement does nothing. (For complete syntax, see <a href="if_statement.htm#i34570">"IF Statement"</a>.)</p>
<p>In <a href="#BABGEHAI">Example 4-4</a>, when the value of <code dir="ltr">sales</code> is larger than 50000, both the first and second conditions are true. However, because the first condition is true, <code dir="ltr">bonus</code> is assigned the value 1500, and the second condition is never tested. After <code dir="ltr">bonus</code> is assigned the value 1500, control passes to the <code dir="ltr">DBMS_OUTPUT</code>.<code dir="ltr">PUT_LINE</code> invocation.</p>
<div id="LNPLS392" class="example">
<p class="titleinexample"><a id="BABGEHAI"></a>Example 4-4 IF THEN ELSIF Statement</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p (sales NUMBER)
  IS
    bonus  NUMBER := 0;
  BEGIN 
    <span class="bold">IF sales &gt; 50000 THEN</span>
      bonus := 1500;
    <span class="bold">ELSIF sales &gt; 35000 THEN</span>
      bonus := 500;
    <span class="bold">ELSE</span>
      bonus := 100;
    <span class="bold">END IF;</span>
 
    DBMS_OUTPUT.PUT_LINE (
      'Sales = ' || sales || ', bonus = ' || bonus || '.'
    );
  END p;
BEGIN
  p(55000);
  p(40000);
  p(30000);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Sales = 55000, bonus = 1500.
Sales = 40000, bonus = 500.
Sales = 30000, bonus = 100.
</pre></div>
<!-- class="example" -->
<p>A single <a id="sthref300"></a><code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement is easier to understand than a logically equivalent <a id="sthref301"></a>nested <code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSE</code> statement:</p>
<pre dir="ltr">
<span class="bold">-- IF THEN ELSIF statement</span>

IF <span class="italic">condition_1</span> THEN <span class="italic">statements_1</span>;
  ELSIF <span class="italic">condition_2</span> THEN <span class="italic">statements_2</span>;
  ELSIF <span class="italic">condition_3</span> THEN <span class="italic">statement_3</span>;
END IF;

<span class="bold">-- Logically equivalent nested IF THEN ELSE statements</span>

IF <span class="italic">condition_1</span> THEN
  <span class="italic">statements_1</span>;
ELSE
  IF <span class="italic">condition_2</span> THEN
    <span class="italic">statements_2</span>;
  ELSE
    IF <span class="italic">condition_3</span> THEN
      <span class="italic">statements_3</span>;
    END IF;
  END IF;
END IF;
</pre>
<p><a id="sthref302"></a><a id="sthref303"></a><a id="sthref304"></a><a href="#BCGJGBEF">Example 4-5</a> uses an <code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement with many <code dir="ltr">ELSIF</code> clauses to compare a single value to many possible values. For this purpose, a simple <code dir="ltr">CASE</code> statement is clearer&mdash;see <a href="#BABCEEEI">Example 4-6</a>.</p>
<div id="LNPLS393" class="example">
<p class="titleinexample"><a id="BCGJGBEF"></a>Example 4-5 IF THEN ELSIF Statement Simulates Simple CASE Statement</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1);
BEGIN
  grade := 'B';
  
  IF grade = 'A' THEN
    DBMS_OUTPUT.PUT_LINE('Excellent');
  ELSIF grade = 'B' THEN
    DBMS_OUTPUT.PUT_LINE('Very Good');
  ELSIF grade = 'C' THEN
    DBMS_OUTPUT.PUT_LINE('Good');
  ELSIF grade = 'D' THEN
    DBMS_OUTPUT. PUT_LINE('Fair');
  ELSIF grade = 'F' THEN
    DBMS_OUTPUT.PUT_LINE('Poor');
  ELSE
    DBMS_OUTPUT.PUT_LINE('No such grade');
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Very Good
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i8305"></a>
<div id="LNPLS394" class="sect2">
<h3 class="sect2">Simple CASE Statement</h3>
<p>The <a id="sthref305"></a><a id="sthref306"></a>simple <code dir="ltr">CASE</code> statement has this structure:</p>
<pre dir="ltr">
CASE <a id="sthref307"></a><span class="italic">selector</span>
WHEN <span class="italic">selector_value_1</span> THEN <span class="italic">statements_1</span>
WHEN <span class="italic">selector_value_2</span> THEN <span class="italic">statements_2</span>
...
WHEN <span class="italic">selector_value_</span>n THEN <span class="italic">statements_</span>n
[ ELSE
  <span class="italic">else_statements</span> ]
END CASE;]
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">selector</span></code> is an expression (typically a single variable). Each <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> can be either a literal or an expression. (For complete syntax, see <a href="case_statement.htm#i36967">"CASE Statement"</a>.)</p>
<p>The simple <code dir="ltr">CASE</code> statement runs the first <code dir="ltr"><span class="codeinlineitalic">statements</span></code> for which <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> equals <code dir="ltr"><span class="codeinlineitalic">selector</span></code>. Remaining conditions are not evaluated. If no <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> equals <code dir="ltr"><span class="codeinlineitalic">selector</span></code>, the <code dir="ltr">CASE</code> statement runs <code dir="ltr"><span class="codeinlineitalic">else_statements</span></code> if they exist and raises the predefined exception <code dir="ltr">CASE_NOT_FOUND</code> otherwise.</p>
<p><a href="#BABCEEEI">Example 4-6</a> uses a simple <code dir="ltr">CASE</code> statement to compare a single value to many possible values. The <code dir="ltr">CASE</code> statement in <a href="#BABCEEEI">Example 4-6</a> is logically equivalent to the <code dir="ltr">IF</code> <code dir="ltr">THEN</code> <code dir="ltr">ELSIF</code> statement in <a href="#BCGJGBEF">Example 4-5</a>.</p>
<div id="LNPLS395" class="example">
<p class="titleinexample"><a id="BABCEEEI"></a>Example 4-6 Simple CASE Statement</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1);
BEGIN
  grade := 'B';

  <span class="bold">CASE grade</span>
    <span class="bold">WHEN 'A' THEN</span> DBMS_OUTPUT.PUT_LINE('Excellent');
    <span class="bold">WHEN 'B' THEN</span> DBMS_OUTPUT.PUT_LINE('Very Good');
    <span class="bold">WHEN 'C' THEN</span> DBMS_OUTPUT.PUT_LINE('Good');
    <span class="bold">WHEN 'D' THEN</span> DBMS_OUTPUT.PUT_LINE('Fair');
    <span class="bold">WHEN 'F' THEN</span> DBMS_OUTPUT.PUT_LINE('Poor');
    <span class="bold">ELSE</span> DBMS_OUTPUT.PUT_LINE('No such grade');
  <span class="bold">END CASE;</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Very Good
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
As in a simple <code dir="ltr">CASE</code> expression, if the selector in a simple <code dir="ltr">CASE</code> statement has the value <a id="sthref308"></a><code dir="ltr">NULL</code>, it cannot be matched by <code dir="ltr">WHEN</code> <code dir="ltr">NULL</code> (see <a href="fundamentals.htm#CIHIJABF">Example 2-51, "Simple CASE Expression with WHEN NULL"</a>). Instead, use a searched <code dir="ltr">CASE</code> statement with <code dir="ltr">WHEN</code> <code dir="ltr"><span class="codeinlineitalic">condition</span></code> <code dir="ltr">IS</code> <code dir="ltr">NULL</code> (see <a href="fundamentals.htm#CIHDDFHC">Example 2-53, "Searched CASE Expression with WHEN ... IS NULL"</a>).</div>
</div>
<!-- class="sect2" -->
<a id="CIHIHGHE"></a>
<div id="LNPLS99972" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Searched CASE Statement</h3>
<p>The <a id="sthref309"></a><a id="sthref310"></a>searched <code dir="ltr">CASE</code> statement has this structure:</p>
<pre dir="ltr">
CASE
WHEN <span class="italic">condition_1</span> THEN <span class="italic">statements_1</span>
WHEN <span class="italic">condition_2</span> THEN <span class="italic">statements_2</span>
...
WHEN <span class="italic">condition_</span>n THEN <span class="italic">statements_</span>n
[ ELSE
  <span class="italic">else_statements</span> ]
END CASE;]
</pre>
<p>The searched <code dir="ltr">CASE</code> statement runs the first <code dir="ltr"><span class="codeinlineitalic">statements</span></code> for which <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true. Remaining conditions are not evaluated. If no <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true, the <code dir="ltr">CASE</code> statement runs <code dir="ltr"><span class="codeinlineitalic">else_statements</span></code> if they exist and raises the predefined exception <code dir="ltr">CASE_NOT_FOUND</code> otherwise. (For complete syntax, see <a href="case_statement.htm#i36967">"CASE Statement"</a>.)</p>
<p>The searched <code dir="ltr">CASE</code> statement in <a href="#CJAHCDFB">Example 4-7</a> is logically equivalent to the simple <code dir="ltr">CASE</code> statement in <a href="#BABCEEEI">Example 4-6</a>.</p>
<div id="LNPLS340" class="example">
<p class="titleinexample"><a id="CJAHCDFB"></a>Example 4-7 Searched CASE Statement</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1);
BEGIN
  grade := 'B';
  
  <span class="bold">CASE</span>
    <span class="bold">WHEN grade = 'A' THEN</span> DBMS_OUTPUT.PUT_LINE('Excellent');
    <span class="bold">WHEN grade = 'B' THEN</span> DBMS_OUTPUT.PUT_LINE('Very Good');
    <span class="bold">WHEN grade = 'C'</span> THEN DBMS_OUTPUT.PUT_LINE('Good');
    <span class="bold">WHEN grade = 'D'</span> THEN DBMS_OUTPUT.PUT_LINE('Fair');
    <span class="bold">WHEN grade = 'F'</span> THEN DBMS_OUTPUT.PUT_LINE('Poor');
    <span class="bold">ELSE</span> DBMS_OUTPUT.PUT_LINE('No such grade');
  <span class="bold">END CASE;</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Very Good
</pre></div>
<!-- class="example" -->
<p>In both <a href="#CJAHCDFB">Example 4-7</a> and <a href="#BABCEEEI">Example 4-6</a>, the <code dir="ltr">ELSE</code> clause can be replaced by an <code dir="ltr">EXCEPTION</code> part. <a href="#CJAEIEID">Example 4-8</a> is logically equivalent to <a href="#CJAHCDFB">Example 4-7</a>.</p>
<div id="LNPLS341" class="example">
<p class="titleinexample"><a id="CJAEIEID"></a>Example 4-8 EXCEPTION Instead of ELSE Clause in CASE Statement</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1);
BEGIN
  grade := 'B';
  
  CASE
    WHEN grade = 'A' THEN DBMS_OUTPUT.PUT_LINE('Excellent');
    WHEN grade = 'B' THEN DBMS_OUTPUT.PUT_LINE('Very Good');
    WHEN grade = 'C' THEN DBMS_OUTPUT.PUT_LINE('Good');
    WHEN grade = 'D' THEN DBMS_OUTPUT.PUT_LINE('Fair');
    WHEN grade = 'F' THEN DBMS_OUTPUT.PUT_LINE('Poor');
  END CASE;
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN CASE_NOT_FOUND THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE('No such grade');</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Very Good
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i8296"></a>
<div id="LNPLS00403" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">LOOP Statements</h2>
<p><a id="sthref311"></a><span class="bold">Loop statements</span> run the same statements with a series of different values. The loop statements are:</p>
<ul>
<li>
<p>Basic <code dir="ltr">LOOP</code></p>
</li>
<li>
<p><code dir="ltr">FOR</code> <code dir="ltr">LOOP</code></p>
</li>
<li>
<p>Cursor <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code></p>
</li>
<li>
<p><code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code></p>
</li>
</ul>
<p>The statements that exit a loop are:</p>
<ul>
<li>
<p><code dir="ltr">EXIT</code></p>
</li>
<li>
<p><code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code></p>
</li>
</ul>
<p>The statements that exit the current iteration of a loop are:</p>
<ul>
<li>
<p><code dir="ltr">CONTINUE</code></p>
</li>
<li>
<p><code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code></p>
</li>
</ul>
<p><a id="sthref312"></a><a id="sthref313"></a><code dir="ltr">EXIT</code>, <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code>, <code dir="ltr">CONTINUE</code>, and <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> and can appear anywhere inside a loop, but not outside a loop. Oracle recommends using these statements instead of the <a href="#i1505">"GOTO Statement"</a>, which can exit a loop or the current iteration of a loop by transferring control to a statement outside the loop. (A raised exception also exits a loop. For information about exceptions, see <a href="errors.htm#i3336">"Overview of Exception Handling"</a>.)</p>
<p><a id="sthref314"></a><code dir="ltr">LOOP</code> statements can be labeled, and <code dir="ltr">LOOP</code> statements can be nested. Labels are recommended for nested loops to improve readability. You must ensure that the label in the <code dir="ltr">END</code> <code dir="ltr">LOOP</code> statement matches the label at the beginning of the same loop statement (the compiler does not check).</p>
<p class="subhead2"><a id="LNPLS342"></a>Topics</p>
<ul>
<li>
<p><a href="#CJAFAJIA">Basic LOOP Statement</a></p>
</li>
<li>
<p><a href="#CJACJHIE">EXIT Statement</a></p>
</li>
<li>
<p><a href="#CJAGIGDC">EXIT WHEN Statement</a></p>
</li>
<li>
<p><a href="#CJAJAAFG">CONTINUE Statement</a></p>
</li>
<li>
<p><a href="#CIHDACFA">CONTINUE WHEN Statement</a></p>
</li>
<li>
<p><a href="#CJAIJFCI">FOR LOOP Statement</a></p>
</li>
<li>
<p><a href="#CJACCEAC">WHILE LOOP Statement</a></p>
</li>
</ul>
<p>For information about the cursor <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code>, see <a href="static.htm#CIHCGJAD">"Query Result Set Processing With Cursor FOR LOOP Statements"</a>.</p>
<a id="CJAFAJIA"></a>
<div id="LNPLS399" class="sect2">
<h3 class="sect2">Basic LOOP Statement</h3>
<p>The <a id="sthref315"></a>basic <code dir="ltr">LOOP</code> statement has this structure:</p>
<pre dir="ltr">
[ <span class="italic">label</span> ] LOOP
  <span class="italic">statements</span>
END LOOP [ <span class="italic">label</span> ];
</pre>
<p>With each iteration of the loop, the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> run and control returns to the top of the loop. To prevent an <a id="sthref316"></a>infinite loop, a statement or raised exception must exit the loop.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="basic_loop_statement.htm#i34785">"Basic LOOP Statement"</a></div>
</div>
<!-- class="sect2" -->
<a id="CJACJHIE"></a>
<div id="LNPLS400" class="sect2">
<h3 class="sect2">EXIT Statement</h3>
<p>The <a id="sthref317"></a><code dir="ltr">EXIT</code> statement exits the current iteration of a loop unconditionally and transfers control to the end of either the current loop or an enclosing labeled loop.</p>
<p>In <a href="#BABGDICE">Example 4-9</a>, the <code dir="ltr">EXIT</code> statement inside the basic <code dir="ltr">LOOP</code> statement transfers control unconditionally to the end of the current loop.</p>
<div id="LNPLS343" class="example">
<p class="titleinexample"><a id="BABGDICE"></a>Example 4-9 Basic LOOP Statement with EXIT Statement</p>
<pre dir="ltr">
DECLARE
  x NUMBER := 0;
BEGIN
  <span class="bold">LOOP</span>
    DBMS_OUTPUT.PUT_LINE ('Inside loop:  x = ' || TO_CHAR(x));
    x := x + 1;
    IF x &gt; 3 THEN
      <span class="bold">EXIT;</span>
    END IF;
  <span class="bold">END LOOP;</span>
  <span class="bold">-- After EXIT, control resumes here</span>
  DBMS_OUTPUT.PUT_LINE(' After loop:  x = ' || TO_CHAR(x));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside loop:  x = 0
Inside loop:  x = 1
Inside loop:  x = 2
Inside loop:  x = 3
After loop:  x = 4
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="exit_statement.htm#i33962">"EXIT Statement"</a></div>
</div>
<!-- class="sect2" -->
<a id="CJAGIGDC"></a>
<div id="LNPLS402" class="sect2">
<h3 class="sect2">EXIT WHEN Statement</h3>
<p>The <a id="sthref318"></a><code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement exits the current iteration of a loop when the condition in its <code dir="ltr">WHEN</code> clause is true, and transfers control to the end of either the current loop or an enclosing labeled loop.</p>
<p>Each time control reaches the <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement, the condition in its <code dir="ltr">WHEN</code> clause is evaluated. If the condition is not true, the <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement does nothing. To prevent an infinite loop, a statement inside the loop must make the condition true, as in <a href="#BABDGJDG">Example 4-10</a>.</p>
<p>In <a href="#BABDGJDG">Example 4-10</a>, the <a id="sthref319"></a><code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement inside the basic <code dir="ltr">LOOP</code> statement transfers control to the end of the current loop when <code dir="ltr">x</code> is greater than 3. <a href="#BABDGJDG">Example 4-10</a> is logically equivalent to <a href="#BABGDICE">Example 4-9</a>.</p>
<div id="LNPLS344" class="example">
<p class="titleinexample"><a id="BABDGJDG"></a>Example 4-10 Basic LOOP Statement with EXIT WHEN Statement</p>
<pre dir="ltr">
DECLARE
  x NUMBER := 0;
BEGIN
  <span class="bold">LOOP</span>
    DBMS_OUTPUT.PUT_LINE('Inside loop:  x = ' || TO_CHAR(x));
    <span class="bold">x := x + 1;  -- prevents infinite loop</span>
    <span class="bold">EXIT WHEN x &gt; 3;</span>
  <span class="bold">END LOOP;</span>
  <span class="bold">-- After EXIT statement, control resumes here</span>
  DBMS_OUTPUT.PUT_LINE('After loop:  x = ' || TO_CHAR(x));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside loop:  x = 0
Inside loop:  x = 1
Inside loop:  x = 2
Inside loop:  x = 3
After loop:  x = 4
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="exit_statement.htm#i33962">"EXIT Statement"</a></div>
<p>In <a href="#BCGBGDFF">Example 4-11</a>, one basic <code dir="ltr">LOOP</code> statement is <a id="sthref320"></a><a id="sthref321"></a>nested inside the other, and both have <a id="sthref322"></a><a id="sthref323"></a>labels. The inner loop has two <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statements; one that exits the inner loop and one that exits the outer loop.</p>
<div id="LNPLS409" class="example">
<p class="titleinexample"><a id="BCGBGDFF"></a>Example 4-11 Nested, Labeled Basic LOOP Statements with EXIT WHEN Statements</p>
<pre dir="ltr">
DECLARE
  s  PLS_INTEGER := 0;
  i  PLS_INTEGER := 0;
  j  PLS_INTEGER;
BEGIN
  <span class="bold">&lt;&lt;outer_loop&gt;&gt;</span>
  LOOP
    i := i + 1;
    j := 0;
    <span class="bold">&lt;&lt;inner_loop&gt;&gt;</span>
    LOOP
      j := j + 1;
      s := s + i * j; -- Sum several products
      <span class="bold">EXIT inner_loop WHEN (j &gt; 5);</span>
      <span class="bold">EXIT outer_loop WHEN ((i * j) &gt; 15);</span>
    END LOOP inner_loop;
  END LOOP outer_loop;
  DBMS_OUTPUT.PUT_LINE
    ('The sum of products equals: ' || TO_CHAR(s));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
The sum of products equals: 166
</pre></div>
<!-- class="example" -->
<p>An <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement in an inner loop can transfer control to an outer loop only if the outer loop is labeled.</p>
<p>In <a href="#CIHCGDHC">Example 4-12</a>, the outer loop is not labeled; therefore, the inner loop cannot transfer control to it.</p>
<div id="LNPLS334" class="example">
<p class="titleinexample"><a id="CIHCGDHC"></a>Example 4-12 Nested, Unabeled Basic LOOP Statements with EXIT WHEN Statements</p>
<pre dir="ltr">
DECLARE
  i PLS_INTEGER := 0;
  j PLS_INTEGER := 0;
 
BEGIN
  LOOP
    i := i + 1;
    DBMS_OUTPUT.PUT_LINE ('i = ' || i);
    
    LOOP
      j := j + 1;
      DBMS_OUTPUT.PUT_LINE ('j = ' || j);
      <span class="bold">EXIT WHEN (j &gt; 3);</span>
    END LOOP;
 
    DBMS_OUTPUT.PUT_LINE ('Exited inner loop');
 
    <span class="bold">EXIT WHEN (i &gt; 2);</span>
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE ('Exited outer loop');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
i = 1
j = 1
j = 2
j = 3
j = 4
Exited inner loop
i = 2
j = 5
Exited inner loop
i = 3
j = 6
Exited inner loop
Exited outer loop
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CJAJAAFG"></a>
<div id="LNPLS404" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">CONTINUE Statement</h3>
<p>The <a id="sthref324"></a><code dir="ltr">CONTINUE</code> statement exits the current iteration of a loop unconditionally and transfers control to the next iteration of either the current loop or an enclosing labeled loop.</p>
<p>In <a href="#BABHCHIG">Example 4-13</a>, the <code dir="ltr">CONTINUE</code> statement inside the basic <code dir="ltr">LOOP</code> statement transfers control unconditionally to the next iteration of the current loop.</p>
<div id="LNPLS345" class="example">
<p class="titleinexample"><a id="BABHCHIG"></a>Example 4-13 CONTINUE Statement in Basic LOOP Statement</p>
<pre dir="ltr">
DECLARE
  x NUMBER := 0;
BEGIN
  <span class="bold">LOOP -- After CONTINUE statement, control resumes here</span>
    DBMS_OUTPUT.PUT_LINE ('Inside loop:  x = ' || TO_CHAR(x));
    x := x + 1;
    IF x &lt; 3 THEN
      <span class="bold">CONTINUE;</span>
    END IF;
    DBMS_OUTPUT.PUT_LINE
      ('Inside loop, after CONTINUE:  x = ' || TO_CHAR(x));
    EXIT WHEN x = 5;
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE (' After loop:  x = ' || TO_CHAR(x));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside loop:  x = 0
Inside loop:  x = 1
Inside loop:  x = 2
Inside loop, after CONTINUE:  x = 3
Inside loop:  x = 3
Inside loop, after CONTINUE:  x = 4
Inside loop:  x = 4
Inside loop, after CONTINUE:  x = 5
After loop:  x = 5
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="continue_statement.htm#CJAHCFBF">"CONTINUE Statement"</a></div>
</div>
<!-- class="sect2" -->
<a id="CIHDACFA"></a>
<div id="LNPLS406" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">CONTINUE WHEN Statement</h3>
<p>The <a id="sthref325"></a><code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> statement exits the current iteration of a loop when the condition in its <code dir="ltr">WHEN</code> clause is true, and transfers control to the next iteration of either the current loop or an enclosing labeled loop.</p>
<p>Each time control reaches the <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> statement, the condition in its <code dir="ltr">WHEN</code> clause is evaluated. If the condition is not true, the <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> statement does nothing.</p>
<p>In <a href="#BABHGEDC">Example 4-14</a>, the <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> statement inside the basic <code dir="ltr">LOOP</code> statement transfers control to the next iteration of the current loop when <code dir="ltr">x</code> is less than 3. <a href="#BABHGEDC">Example 4-14</a> is logically equivalent to <a href="#BABHCHIG">Example 4-13</a>.</p>
<div id="LNPLS349" class="example">
<p class="titleinexample"><a id="BABHGEDC"></a>Example 4-14 CONTINUE WHEN Statement in Basic LOOP Statement</p>
<pre dir="ltr">
DECLARE
  x NUMBER := 0;
BEGIN
  <span class="bold">LOOP -- After CONTINUE statement, control resumes here</span>
    DBMS_OUTPUT.PUT_LINE ('Inside loop:  x = ' || TO_CHAR(x));
    x := x + 1;
    <span class="bold">CONTINUE WHEN x &lt; 3;</span>
    DBMS_OUTPUT.PUT_LINE
      ('Inside loop, after CONTINUE:  x = ' || TO_CHAR(x));
    EXIT WHEN x = 5;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE (' After loop:  x = ' || TO_CHAR(x));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside loop:  x = 0
Inside loop:  x = 1
Inside loop:  x = 2
Inside loop, after CONTINUE:  x = 3
Inside loop:  x = 3
Inside loop, after CONTINUE:  x = 4
Inside loop:  x = 4
Inside loop, after CONTINUE:  x = 5
After loop:  x = 5
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="continue_statement.htm#CJAHCFBF">"CONTINUE Statement"</a></div>
</div>
<!-- class="sect2" -->
<a id="CJAIJFCI"></a>
<div id="LNPLS411" class="sect2">
<h3 class="sect2">FOR LOOP Statement</h3>
<p>The <a id="sthref326"></a><code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement runs one or more statements while the loop index is in a specified range. The statement has this structure:</p>
<pre dir="ltr">
[ <span class="italic">label</span> ] FOR <span class="italic">index</span> IN [ REVERSE ] <span class="italic">lower_bound</span>..<span class="italic">upper_bound</span> LOOP
  <span class="italic">statements</span>
END LOOP [ <span class="italic">label</span> ];
</pre>
<p>Without <code dir="ltr">REVERSE</code>, the value of <code dir="ltr"><span class="codeinlineitalic">index</span></code> starts at <code dir="ltr"><span class="codeinlineitalic">lower_bound</span></code> and increases by one with each iteration of the loop until it reaches <code dir="ltr"><span class="codeinlineitalic">upper_bound</span></code>. If <code dir="ltr"><span class="codeinlineitalic">lower_bound</span></code> is greater than <code dir="ltr"><span class="codeinlineitalic">upper_bound</span></code>, then the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> never run.</p>
<p>With <code dir="ltr">REVERSE</code>, the value of <code dir="ltr"><span class="codeinlineitalic">index</span></code> starts at <code dir="ltr"><span class="codeinlineitalic">upper_bound</span></code> and decreases by one with each iteration of the loop until it reaches <code dir="ltr"><span class="codeinlineitalic">lower_bound</span></code>. If <code dir="ltr"><span class="codeinlineitalic">upper_bound</span></code> is less than <code dir="ltr"><span class="codeinlineitalic">lower_bound</span></code>, then the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> never run.</p>
<p>An <code dir="ltr">EXIT</code>, <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code>, <code dir="ltr">CONTINUE</code>, or <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> in the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> can cause the loop or the current iteration of the loop to end early.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To process the rows of a query result set, use a cursor <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code>, which has a query instead of a range of integers. For details, see <a href="static.htm#CIHCGJAD">"Query Result Set Processing With Cursor FOR LOOP Statements"</a>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="for_loop_statement.htm#CJAJGAHA">"FOR LOOP Statement"</a></div>
<p>In <a href="#BABEFFDC">Example 4-15</a>, <code dir="ltr"><span class="codeinlineitalic">index</span></code> is <code dir="ltr">i</code>, <code dir="ltr"><span class="codeinlineitalic">lower_bound</span></code> is 1, and <code dir="ltr"><span class="codeinlineitalic">upper_bound</span></code> is 3. The loop prints the numbers from 1 to 3.</p>
<div id="LNPLS412" class="example">
<p class="titleinexample"><a id="BABEFFDC"></a>Example 4-15 FOR LOOP Statements</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE ('lower_bound &lt; upper_bound');
 
  FOR i IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE ('lower_bound = upper_bound');
 
  FOR i IN 2..2 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE ('lower_bound &gt; upper_bound');
 
  FOR i IN 3..1 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
lower_bound &lt; upper_bound
1
2
3
lower_bound = upper_bound
2
lower_bound &gt; upper_bound
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement in <a href="#BABGDDBJ">Example 4-16</a> is the reverse of the one in <a href="#BABEFFDC">Example 4-15</a>: It prints the numbers from 3 to 1.</p>
<div id="LNPLS413" class="example">
<p class="titleinexample"><a id="BABGDDBJ"></a>Example 4-16 Reverse FOR LOOP Statements</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE ('upper_bound &gt; lower_bound');
 
  FOR i IN REVERSE 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE ('upper_bound = lower_bound');
 
  FOR i IN REVERSE 2..2 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE ('upper_bound &lt; lower_bound');
 
  FOR i IN REVERSE 3..1 LOOP
    DBMS_OUTPUT.PUT_LINE (i);
  END LOOP;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
upper_bound &gt; lower_bound
3
2
1
upper_bound = lower_bound
2
upper_bound &lt; lower_bound
</pre></div>
<!-- class="example" -->
<p>In some languages, the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> has a <a id="sthref327"></a><code dir="ltr">STEP</code> clause that lets you specify a loop index increment other than 1. To simulate the <code dir="ltr">STEP</code> clause in PL/SQL, multiply each reference to the loop index by the desired increment.</p>
<p>In <a href="#BCGJHACI">Example 4-17</a>, the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> effectively increments the index by five.</p>
<div id="LNPLS416" class="example">
<p class="titleinexample"><a id="BCGJHACI"></a>Example 4-17 Simulating STEP Clause in FOR LOOP Statement</p>
<pre dir="ltr">
DECLARE
  <span class="bold">step  PLS_INTEGER := 5;</span>
BEGIN
  FOR i IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE (<span class="bold">i*step</span>);
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
5
10
15
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="LNPLS350"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHJFDGJ">FOR LOOP Index</a></p>
</li>
<li>
<p><a href="#CIHIIABG">Lower Bound and Upper Bound</a></p>
</li>
<li>
<p><a href="#CIHDBFFC">EXIT WHEN or CONTINUE WHEN Statement in FOR LOOP Statement</a></p>
</li>
</ul>
<a id="CIHJFDGJ"></a>
<div id="LNPLS420" class="sect3">
<h4 class="sect3">FOR LOOP Index</h4>
<p>The index of a <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement is implicitly declared as a variable of type <code dir="ltr">PLS_INTEGER</code> that is local to the loop. The statements in the loop can read the value of the index, but cannot change it. Statements outside the loop cannot reference the index. After the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement runs, the index is undefined. (A loop index is sometimes called a loop counter.)</p>
<p>In <a href="#BABEAEFI">Example 4-18</a>, the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement tries to change the value of its index, causing an error.</p>
<div id="LNPLS351" class="example">
<p class="titleinexample"><a id="BABEAEFI"></a>Example 4-18 FOR LOOP Statement Tries to Change Index Value</p>
<pre dir="ltr">
BEGIN
  FOR <span class="bold">i</span> IN 1..3 LOOP
    IF i &lt; 3 THEN
      DBMS_OUTPUT.PUT_LINE (TO_CHAR(i));
    ELSE
      <span class="bold">i := 2;</span>
    END IF;
  END LOOP;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
       <span class="bold">i := 2;</span>
       <span class="bold">*</span>
<span class="bold">ERROR at line 6:</span>
<span class="bold">ORA-06550: line 6, column 8:</span>
<span class="bold">PLS-00363: expression 'I' cannot be used as an assignment target</span>
ORA-06550: line 6, column 8:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJAGHDEI">Example 4-19</a>, a statement outside the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement references the loop index, causing an error.</p>
<div id="LNPLS421" class="example">
<p class="titleinexample"><a id="CJAGHDEI"></a>Example 4-19 Outside Statement References FOR LOOP Statement Index</p>
<pre dir="ltr">
BEGIN
  FOR <span class="bold">i</span> IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE ('Inside loop, i is ' || TO_CHAR(i));
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE ('Outside loop, i is ' || TO_CHAR(<span class="bold">i</span>));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
  DBMS_OUTPUT.PUT_LINE ('Outside loop, i is ' || TO_CHAR(i));
                                                         *
ERROR at line 6:
ORA-06550: line 6, column 58:
PLS-00201: identifier 'I' must be declared
ORA-06550: line 6, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<p>If the index of a <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement has the same name as a variable declared in an enclosing block, the local implicit declaration hides the other declaration, as <a href="#CJAHEEJE">Example 4-20</a> shows.</p>
<div id="LNPLS422" class="example">
<p class="titleinexample"><a id="CJAHEEJE"></a>Example 4-20 FOR LOOP Statement Index with Same Name as Variable</p>
<pre dir="ltr">
DECLARE
  <span class="bold">i</span> NUMBER := 5;
BEGIN
  FOR <span class="bold">i</span> IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE ('Inside loop, i is ' || TO_CHAR(<span class="bold">i</span>));
  END LOOP;
  
  DBMS_OUTPUT.PUT_LINE ('Outside loop, i is ' || TO_CHAR(<span class="bold">i</span>));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside loop, i is 1
Inside loop, i is 2
Inside loop, i is 3
Outside loop, i is 5
</pre></div>
<!-- class="example" -->
<p><a href="#BABIIIDH">Example 4-21</a> shows how to change <a href="#CJAHEEJE">Example 4-20</a> to allow the statement inside the loop to reference the variable declared in the enclosing block.</p>
<div id="LNPLS423" class="example">
<p class="titleinexample"><a id="BABIIIDH"></a>Example 4-21 FOR LOOP Statement References Variable with Same Name as Index</p>
<pre dir="ltr">
<span class="bold">&lt;&lt;main&gt;&gt;  -- Label block.</span>
DECLARE
  i NUMBER := 5;
BEGIN
  FOR i IN 1..3 LOOP
    DBMS_OUTPUT.PUT_LINE (
      'local: ' || TO_CHAR(i) || ', global: ' ||
      TO_CHAR(<span class="bold">main.i</span>)  <span class="bold">-- Qualify reference with block label.</span>
    );
  END LOOP;
END main;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
local: 1, global: 5
local: 2, global: 5
local: 3, global: 5
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABIFDBA">Example 4-22</a>, the indexes of the nested <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statements have the same name. The inner loop references the index of the outer loop by qualifying the reference with the label of the outer loop. For clarity only, the inner loop also qualifies the reference to its own index with its own label.</p>
<div id="LNPLS424" class="example">
<p class="titleinexample"><a id="BABIFDBA"></a>Example 4-22 Nested FOR LOOP Statements with Same Index Name</p>
<pre dir="ltr">
BEGIN
  <span class="bold">&lt;&lt;outer_loop&gt;&gt;</span>
  FOR i IN 1..3 LOOP
    <span class="bold">&lt;&lt;inner_loop&gt;&gt;</span>
    FOR i IN 1..3 LOOP
      IF <span class="bold">outer_loop.i</span> = 2 THEN
        DBMS_OUTPUT.PUT_LINE
          ('outer: ' || TO_CHAR(<span class="bold">outer_loop.i</span>) || ' inner: '
           || TO_CHAR(<span class="bold">inner_loop.i</span>));
      END IF;
    END LOOP inner_loop;
  END LOOP outer_loop;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
outer: 2 inner: 1
outer: 2 inner: 2
outer: 2 inner: 3
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHIIABG"></a>
<div id="LNPLS414" class="sect3">
<h4 class="sect3">Lower Bound and Upper Bound</h4>
<p>The lower and upper <a id="sthref328"></a>bounds of a <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement can be either numeric literals, numeric variables, or numeric expressions. If a bound does not have a numeric value, then PL/SQL raises the predefined exception <code dir="ltr">VALUE_ERROR</code>.</p>
<div id="LNPLS415" class="example">
<p class="titleinexample"><a id="BABGFABI"></a>Example 4-23 FOR LOOP Statement Bounds</p>
<pre dir="ltr">
DECLARE
  first  INTEGER := 1;
  last   INTEGER := 10;
  high   INTEGER := 100;
  low    INTEGER := 12;
BEGIN
  <span class="bold">-- Bounds are numeric literals:</span>
  FOR j IN -5..5 LOOP
    NULL;
  END LOOP;
 
  <span class="bold">-- Bounds are numeric variables:</span>
  FOR k IN REVERSE first..last LOOP
    NULL;
  END LOOP;
 
 <span class="bold">-- Lower bound is numeric literal,</span>
 <span class="bold">-- Upper bound is numeric expression:</span>
  FOR step IN 0..(TRUNC(high/low) * 2) LOOP
    NULL;
  END LOOP;
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABCGEIF">Example 4-24</a>, the upper bound of the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement is a variable whose value is determined at run time.</p>
<div id="LNPLS418" class="example">
<p class="titleinexample"><a id="BABCGEIF"></a>Example 4-24 Specifying FOR LOOP Statement Bounds at Run Time</p>
<pre dir="ltr">
DROP TABLE temp;
CREATE TABLE temp (
  emp_no      NUMBER,
  email_addr  VARCHAR2(50)
);
 
DECLARE
  emp_count  NUMBER;
BEGIN
  <span class="bold">SELECT COUNT(employee_id) INTO emp_count</span>
  FROM employees;
  
  <span class="bold">FOR i IN 1..emp_count LOOP</span>
    INSERT INTO temp (emp_no, email_addr)
    VALUES(i, 'to be added later');
  END LOOP;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHDBFFC"></a>
<div id="LNPLS425" class="sect3">
<h4 class="sect3">EXIT WHEN or CONTINUE WHEN Statement in FOR LOOP Statement</h4>
<p>Suppose that you must exit a <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement immediately if a certain condition arises. You can put the condition in an <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement inside the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement.</p>
<p>In <a href="#CIHGGFCG">Example 4-25</a>, the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement executes 10 times unless the <code dir="ltr">FETCH</code> statement inside it fails to return a row, in which case it ends immediately.</p>
<div id="LNPLS352" class="example">
<p class="titleinexample"><a id="CIHGGFCG"></a>Example 4-25 EXIT WHEN Statement in FOR LOOP Statement</p>
<pre dir="ltr">
DECLARE
  v_employees employees%ROWTYPE;
  CURSOR c1 is SELECT * FROM employees;
BEGIN
  OPEN c1;
  -- Fetch entire row into v_employees record:
  FOR i IN 1..10 LOOP
    FETCH c1 INTO v_employees;
    <span class="bold">EXIT WHEN c1%NOTFOUND;</span>
    -- Process data here
  END LOOP;
  CLOSE c1;
END;
/
</pre></div>
<!-- class="example" -->
<p>Now suppose that the <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement that you must exit early is nested inside another <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement. If, when you exit the inner loop early, you also want to exit the outer loop, then label the outer loop and specify its name in the <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement, as in <a href="#CIHBBDBF">Example 4-26</a>.</p>
<p>If you want to exit the inner loop early but complete the current iteration of the outer loop, then label the outer loop and specify its name in the <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> statement, as in <a href="#CIHJDJIA">Example 4-27</a>.</p>
<div id="LNPLS353" class="example">
<p class="titleinexample"><a id="CIHBBDBF"></a>Example 4-26 EXIT WHEN Statement in Inner FOR LOOP Statement</p>
<pre dir="ltr">
DECLARE
  v_employees employees%ROWTYPE;
  CURSOR c1 is SELECT * FROM employees;
BEGIN
  OPEN c1;
  
  -- Fetch entire row into v_employees record:
  <span class="bold">&lt;&lt;outer_loop&gt;&gt;</span>
  FOR i IN 1..10 LOOP
    -- Process data here
    FOR j IN 1..10 LOOP
      FETCH c1 INTO v_employees;
      <span class="bold">EXIT outer_loop WHEN c1%NOTFOUND;</span>
      -- Process data here
    END LOOP;
  END LOOP outer_loop;
 
  CLOSE c1;
END;
/
</pre></div>
<!-- class="example" -->
<div id="LNPLS354" class="example">
<p class="titleinexample"><a id="CIHJDJIA"></a>Example 4-27 CONTINUE WHEN Statement in Inner FOR LOOP Statement</p>
<pre dir="ltr">
DECLARE
  v_employees employees%ROWTYPE;
  CURSOR c1 is SELECT * FROM employees;
BEGIN
  OPEN c1;
  
  -- Fetch entire row into v_employees record:
  <span class="bold">&lt;&lt;outer_loop&gt;&gt;</span>
  FOR i IN 1..10 LOOP
    -- Process data here
    FOR j IN 1..10 LOOP
      FETCH c1 INTO v_employees;
      <span class="bold">CONTINUE outer_loop WHEN c1%NOTFOUND;</span>
      -- Process data here
    END LOOP;
  END LOOP outer_loop;
 
  CLOSE c1;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="errors.htm#i3336">"Overview of Exception Handling"</a> for information about exceptions, which can also cause a loop to end immediately if a certain condition arises</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJACCEAC"></a>
<div id="LNPLS410" class="sect2">
<h3 class="sect2">WHILE LOOP Statement</h3>
<p>The <a id="sthref329"></a><code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code> statement runs one or more statements while a condition is true. It has this structure:</p>
<pre dir="ltr">
[ <span class="italic">label</span> ] WHILE <span class="italic">condition</span> LOOP
  <span class="italic">statements</span>
END LOOP [ <span class="italic">label</span> ];
</pre>
<p>If the <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is true, the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> run and control returns to the top of the loop, where <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is evaluated again. If the <code dir="ltr"><span class="codeinlineitalic">condition</span></code> is not true, control transfers to the statement after the <code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code> statement. To prevent an infinite loop, a statement inside the loop must make the condition false or null. For complete syntax, see <a href="while_loop_statement.htm#CJAGGHBB">"WHILE LOOP Statement"</a>.</p>
<p>An <code dir="ltr">EXIT</code>, <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code>, <code dir="ltr">CONTINUE</code>, or <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code> in the <code dir="ltr"><span class="codeinlineitalic">statements</span></code> can cause the loop or the current iteration of the loop to end early.</p>
<p>In <a href="#BABGGBCJ">Example 4-28</a>, the statements in the first <code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code> statement never run, and the statements in the second <code dir="ltr">WHILE</code> <code dir="ltr">LOOP</code> statement run once.</p>
<div id="LNPLS355" class="example">
<p class="titleinexample"><a id="BABGGBCJ"></a>Example 4-28 WHILE LOOP Statements</p>
<pre dir="ltr">
DECLARE
  done  BOOLEAN := FALSE;
BEGIN
  WHILE done LOOP
    DBMS_OUTPUT.PUT_LINE ('This line does not print.');
    done := TRUE;  -- This assignment is not made.
  END LOOP;

  WHILE NOT done LOOP
    DBMS_OUTPUT.PUT_LINE ('Hello, world!');
    done := TRUE;
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Hello, world!
</pre></div>
<!-- class="example" -->
<p>Some languages have a <a id="sthref330"></a><code dir="ltr">LOOP</code> <code dir="ltr">UNTIL</code> or <a id="sthref331"></a><code dir="ltr">REPEAT</code> <code dir="ltr">UNTIL</code> structure, which tests a condition at the bottom of the loop instead of at the top, so that the statements run at least once. To simulate this structure in PL/SQL, use a basic <code dir="ltr">LOOP</code> statement with an <code dir="ltr">EXIT</code> <code dir="ltr">WHEN</code> statement:</p>
<pre dir="ltr">
LOOP
  <span class="italic">statements</span>
  EXIT WHEN <span class="italic">condition</span>;
END LOOP;
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i2909"></a>
<div id="LNPLS00404" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Sequential Control Statements</h2>
<p>Unlike the <code dir="ltr">IF</code> and <code dir="ltr">LOOP</code> statements, the <a id="sthref332"></a><span class="bold">sequential control statements</span> <code dir="ltr">GOTO</code> and <code dir="ltr">NULL</code> are not crucial to PL/SQL programming.</p>
<p>The <code dir="ltr">GOTO</code> statement, which goes to a specified statement, is seldom needed. Occasionally, it simplifies logic enough to warrant its use.</p>
<p>The <code dir="ltr">NULL</code> statement, which does nothing, can improve readability by making the meaning and action of conditional statements clear.</p>
<p class="subhead2"><a id="LNPLS356"></a>Topics</p>
<ul>
<li>
<p><a href="#i1505">GOTO Statement</a></p>
</li>
<li>
<p><a href="#i1506">NULL Statement</a></p>
</li>
</ul>
<a id="i1505"></a>
<div id="LNPLS428" class="sect2">
<h3 class="sect2">GOTO Statement</h3>
<p>The <a id="sthref333"></a><code dir="ltr">GOTO</code> statement transfers control to a label unconditionally. The label must be unique in its scope and must precede an executable statement or a PL/SQL block. When run, the <code dir="ltr">GOTO</code> statement transfers control to the labeled statement or block. For <code dir="ltr">GOTO</code> statement restrictions, see <a href="goto_statement.htm#i34507">"GOTO Statement"</a>.</p>
<p>Use <code dir="ltr">GOTO</code> statements sparingly&mdash;overusing them results in code that is hard to understand and maintain. Do not use a <code dir="ltr">GOTO</code> statement to transfer control from a deeply nested structure to an exception handler. Instead, raise an exception. For information about the PL/SQL exception-handling mechanism, see <a href="errors.htm#CHDFGBJI">Chapter 11, "PL/SQL Error Handling."</a></p>
<div id="LNPLS429" class="example">
<p class="titleinexample"><a id="BABDBCFF"></a>Example 4-29 GOTO Statement</p>
<pre dir="ltr">
DECLARE
  p  VARCHAR2(30);
  n  PLS_INTEGER := 37;
BEGIN
  FOR j in 2..ROUND(SQRT(n)) LOOP
    IF n MOD j = 0 THEN
      p := ' is not a prime number';
      <span class="bold">GOTO print_now;</span>
    END IF;
  END LOOP;

  p := ' is a prime number';
 
  <span class="bold">&lt;&lt;print_now&gt;&gt;</span>
  DBMS_OUTPUT.PUT_LINE(TO_CHAR(n) || p);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
37 is a prime number
</pre></div>
<!-- class="example" -->
<p>A label can appear only before a block (as in <a href="#BABIIIDH">Example 4-21</a>) or before a statement (as in <a href="#BABDBCFF">Example 4-29</a>), not in a statement, as in <a href="#CJAJGGAC">Example 4-30</a>.</p>
<div id="LNPLS430" class="example">
<p class="titleinexample"><a id="CJAJGGAC"></a>Example 4-30 Incorrect Label Placement</p>
<pre dir="ltr">
DECLARE
  done  BOOLEAN;
BEGIN
  FOR i IN 1..50 LOOP
    IF done THEN
       GOTO end_loop;
    END IF;
    <span class="bold">&lt;&lt;end_loop&gt;&gt;</span>
  END LOOP;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">  END LOOP;</span>
  <span class="bold">*</span>
<span class="bold">ERROR at line 9:</span>
<span class="bold">ORA-06550: line 9, column 3:</span>
<span class="bold">PLS-00103: Encountered the symbol "END" when expecting one of the following:</span>
( begin case declare exit for goto if loop mod null raise
return select update while with &lt;an identifier&gt;
&lt;a double-quoted delimited-identifier&gt; &lt;a bind variable&gt; &lt;&lt;
continue close current delete fetch lock insert open rollback
savepoint set sql run commit forall merge pipe purge
</pre></div>
<!-- class="example" -->
<p>To correct <a href="#CJAJGGAC">Example 4-30</a>, add a <code dir="ltr">NULL</code> statement, as in <a href="#BCGFGDAA">Example 4-31</a>.</p>
<div id="LNPLS431" class="example">
<p class="titleinexample"><a id="BCGFGDAA"></a>Example 4-31 GOTO Statement Goes to Labeled NULL Statement</p>
<pre dir="ltr">
DECLARE
  done  BOOLEAN;
BEGIN
  FOR i IN 1..50 LOOP
    IF done THEN
      <span class="bold">GOTO end_loop;</span>
    END IF;
    <span class="bold">&lt;&lt;end_loop&gt;&gt;</span>
    <span class="bold">NULL;</span>
  END LOOP;
END;
/
</pre></div>
<!-- class="example" -->
<p>A <code dir="ltr">GOTO</code> statement can transfer control to an enclosing block from the current block, as in <a href="#BABEAEJI">Example 4-32</a>.</p>
<div id="LNPLS432" class="example">
<p class="titleinexample"><a id="BABEAEJI"></a>Example 4-32 GOTO Statement Transfers Control to Enclosing Block</p>
<pre dir="ltr">
DECLARE
  v_last_name  VARCHAR2(25);
  v_emp_id     NUMBER(6) := 120;
BEGIN
  <span class="bold">&lt;&lt;get_name&gt;&gt;</span>
  SELECT last_name INTO v_last_name
  FROM employees
  WHERE employee_id = v_emp_id;
  
  BEGIN
    DBMS_OUTPUT.PUT_LINE (v_last_name);
    v_emp_id := v_emp_id + 5;
 
    IF v_emp_id &lt; 120 THEN
      <span class="bold">GOTO get_name;</span>
    END IF;
  END;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Weiss
</pre></div>
<!-- class="example" -->
<p>The <code dir="ltr">GOTO</code> statement transfers control to the first enclosing block in which the referenced label appears.</p>
<p>The <code dir="ltr">GOTO</code> statement in <a href="#CJADEFJC">Example 4-33</a> transfers control into an <code dir="ltr">IF</code> statement, causing an error.</p>
<div id="LNPLS434" class="example">
<p class="titleinexample"><a id="CJADEFJC"></a>Example 4-33 GOTO Statement Cannot Transfer Control into IF Statement</p>
<pre dir="ltr">
DECLARE
  valid BOOLEAN := TRUE;
BEGIN
  <span class="bold">GOTO update_row;</span>
  
  IF valid THEN
  <span class="bold">&lt;&lt;update_row&gt;&gt;</span>
    NULL;
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">  GOTO update_row;</span>
  <span class="bold">*</span>
<span class="bold">ERROR at line 4:</span>
<span class="bold">ORA-06550: line 4, column 3:</span>
<span class="bold">PLS-00375: illegal GOTO statement; this GOTO cannot transfer control to label</span>
<span class="bold">'UPDATE_ROW'</span>
ORA-06550: line 6, column 12:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i1506"></a>
<div id="LNPLS435" class="sect2">
<h3 class="sect2">NULL Statement</h3>
<p>The <a id="sthref334"></a><code dir="ltr">NULL</code> statement only passes control to the next statement. Some languages refer to such an instruction as a <a id="sthref335"></a>no-op (no operation).</p>
<p>Some uses for the <code dir="ltr">NULL</code> statement are:</p>
<ul>
<li>
<p>To provide a target for a <code dir="ltr">GOTO</code> statement, as in <a href="#BCGFGDAA">Example 4-31</a>.</p>
</li>
<li>
<p>To improve readability by making the meaning and action of conditional statements clear, as in <a href="#BCGFJJIG">Example 4-34</a></p>
</li>
<li>
<p>To create placeholders and stub subprograms, as in <a href="#BABDHJDA">Example 4-35</a></p>
</li>
<li>
<p>To show that you are aware of a possibility, but that no action is necessary, as in <a href="#CJAFFFAB">Example 4-36</a></p>
</li>
</ul>
<p>In <a href="#BCGFJJIG">Example 4-34</a>, the <code dir="ltr">NULL</code> statement emphasizes that only salespersons receive commissions.</p>
<div id="LNPLS436" class="example">
<p class="titleinexample"><a id="BCGFJJIG"></a>Example 4-34 NULL Statement Showing No Action</p>
<pre dir="ltr">
DECLARE
  v_job_id  VARCHAR2(10);
   v_emp_id  NUMBER(6) := 110;
BEGIN
  SELECT job_id INTO v_job_id
  FROM employees
  WHERE employee_id = v_emp_id;
  
  IF v_job_id = 'SA_REP' THEN
    UPDATE employees
    SET commission_pct = commission_pct * 1.2;
  ELSE
    <span class="bold">NULL;  -- Employee is not a sales rep</span>
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABDHJDA">Example 4-35</a>, the <code dir="ltr">NULL</code> statement lets you compile this subprogram and fill in the real body later.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using the <code dir="ltr">NULL</code> statement might raise an <code dir="ltr">unreachable</code> <code dir="ltr">code</code> warning if warnings are enabled. For information about warnings, see <a href="errors.htm#i9084">"Compile-Time Warnings"</a>.</div>
<div id="LNPLS437" class="example">
<p class="titleinexample"><a id="BABDHJDA"></a>Example 4-35 NULL Statement as Placeholder During Subprogram Creation</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE award_bonus (
  emp_id NUMBER,
  bonus NUMBER
) AS
BEGIN    -- Executable part starts here
  <span class="bold">NULL;  -- Placeholder</span>
  <span class="bold">-- (raises "unreachable code" if warnings enabled</span>)
END award_bonus;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CJAFFFAB">Example 4-36</a>, the <code dir="ltr">NULL</code> statement shows that you have chosen to take no action for grades other than A, B, C, D, and F.</p>
<div id="LNPLS438" class="example">
<p class="titleinexample"><a id="CJAFFFAB"></a>Example 4-36 NULL Statement in ELSE Clause of Simple CASE Statement</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE print_grade (
  grade CHAR
) AUTHID DEFINER AS
BEGIN
  CASE grade
    WHEN 'A' THEN DBMS_OUTPUT.PUT_LINE('Excellent');
    WHEN 'B' THEN DBMS_OUTPUT.PUT_LINE('Very Good');
    WHEN 'C' THEN DBMS_OUTPUT.PUT_LINE('Good');
    WHEN 'D' THEN DBMS_OUTPUT.PUT_LINE('Fair');
    WHEN 'F' THEN DBMS_OUTPUT.PUT_LINE('Poor');
    <span class="bold">ELSE NULL;</span>
  END CASE;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="datatypes.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="composites.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
