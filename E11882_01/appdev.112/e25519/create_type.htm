<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>CREATE TYPE Statement</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:53:6Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="create_trigger.htm" title="Previous" type="text/html" />
<link rel="Next" href="create_type_body.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">85/99</span> <!-- End Header --><a id="BABHJHEB"></a>
<div id="LNPLS01375" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h1 class="refsect1">CREATE TYPE Statement</h1>
<p>The <a id="sthref1375"></a><code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> statement creates or replaces the specification of one of these:</p>
<ul>
<li>
<p><a id="sthref1376"></a>Abstract Data Type (ADT) (including a <a id="sthref1377"></a>SQLJ object type)</p>
</li>
<li>
<p>Standalone varying array (varray) type</p>
</li>
<li>
<p>Standalone nested table type</p>
</li>
<li>
<p>Incomplete object type</p>
<p>An <span class="bold">incomplete type</span> is a type created by a forward type definition. It is called incomplete because it has a name but no attributes or methods. It can be referenced by other types, allowing you define types that refer to each other. However, you must fully specify the type before you can use it to create a table or an object column or a column of a nested table type.</p>
</li>
</ul>
<p>The <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> statement specifies the name of the type and its attributes, methods, and other properties. The <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> <code dir="ltr">BODY</code> statement contains the code for the methods that implement the type.</p>
<div class="infobox-note">
<p class="notep1">Notes:</p>
<ul>
<li>
<p>If you create a type whose specification declares only attributes but no methods, then you need not specify a type body.</p>
</li>
<li>
<p>If you create a SQLJ object type, then you cannot specify a type body. The implementation of the type is specified as a Java class.</p>
</li>
<li>
<p>A standalone collection type that you create with the <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> statement differs from a collection type that you define with the keyword <code dir="ltr">TYPE</code> in a PL/SQL block or package. For information about the latter, see <a href="collection.htm#i33100">"Collection Variable Declaration"</a>.</p>
</li>
<li>
<p>With the <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> statement, you can create nested table and <code dir="ltr">VARRAY</code> types, but not associative arrays. In a PL/SQL block or package, you can define all three collection types.</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="LNPLS2013"></a>Topics</p>
<ul>
<li>
<p><a href="#BABCHABE">Prerequisites</a></p>
</li>
<li>
<p><a href="#i2064507">Syntax</a></p>
</li>
<li>
<p><a href="#BABGEFCH">Semantics</a></p>
</li>
<li>
<p><a href="#i2095312">Examples</a></p>
</li>
<li>
<p><a href="#BABIGECI">Related Topics</a></p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2064507"></a>Syntax</p>
<p class="subhead2"><a id="LNPLS1619"></a><span class="italic">create_type</span> ::=</p>
<img width="711" height="194" src="img/create_type.gif" alt="Description of create_type.gif follows" /><br />
<a id="sthref1378" href="img_text/create_type.htm">Description of the illustration create_type.gif</a><br />
<br />
<p>See:</p>
<ul>
<li>
<p><a href="collection.htm#CJAFJBHF">"<span class="italic">nested_table_type_def</span> ::="</a></p>
</li>
<li>
<p><a href="collection.htm#CJAEAJJA">"<span class="italic">varray_type_def</span> ::="</a></p>
</li>
</ul>
<p class="subhead2"><a id="i2121845"></a><a id="LNPLS1620"></a><span class="italic">object_type_def</span> ::=</p>
<img width="675" height="326" src="img/object_type_def.gif" alt="Description of object_type_def.gif follows" /><br />
<a id="sthref1379" href="img_text/object_type_def.htm">Description of the illustration object_type_def.gif</a><br />
<br />
<p>See <a href="#i2121918">"<span class="italic">element_spec</span> ::="</a>.</p>
<p class="subhead2"><a id="i2186958"></a><a id="LNPLS1621"></a><span class="italic">invoker_rights_clause</span> ::=</p>
<img width="237" height="58" src="img/invoker_rights_clause.gif" alt="Description of invoker_rights_clause.gif follows" /><br />
<a id="sthref1380" href="img_text/invoker_rights_clause.htm">Description of the illustration invoker_rights_clause.gif</a><br />
<br />
<p class="subhead2"><a id="LNPLS1622"></a><span class="italic">sqlj_object_type</span> ::=</p>
<img width="602" height="91" src="img/sqlj_object_type.gif" alt="Description of sqlj_object_type.gif follows" /><br />
<a id="sthref1381" href="img_text/sqlj_object_type.htm">Description of the illustration sqlj_object_type.gif</a><br />
<br />
<p class="subhead2"><a id="LNPLS1623"></a><span class="italic">sqlj_object_type_attr</span> ::=</p>
<img width="301" height="27" src="img/sqlj_object_type_attr.gif" alt="Description of sqlj_object_type_attr.gif follows" /><br />
<a id="sthref1382" href="img_text/sqlj_object_type_attr.htm">Description of the illustration sqlj_object_type_attr.gif</a><br />
<br />
<p class="subhead2"><a id="i2121918"></a><a id="LNPLS1624"></a><span class="italic">element_spec</span> ::=</p>
<img width="654" height="103" src="img/element_spec.gif" alt="Description of element_spec.gif follows" /><br />
<a id="sthref1383" href="img_text/element_spec.htm">Description of the illustration element_spec.gif</a><br />
<br />
<p>See:</p>
<ul>
<li>
<p><a href="#i2121973">"<span class="italic">constructor_spec</span> ::="</a></p>
</li>
<li>
<p><a href="#i2121991">"<span class="italic">map_order_function_spec</span> ::="</a></p>
</li>
<li>
<p><a href="restrictreferences_pragma.htm#CJAIBIIG">"<span class="italic">restrict_references_pragma</span> ::="</a></p>
</li>
</ul>
<p class="subhead2"><a id="i2121937"></a><a id="LNPLS1625"></a><span class="italic">inheritance_clauses</span> ::=</p>
<img width="284" height="103" src="img/inheritance_clauses.gif" alt="Description of inheritance_clauses.gif follows" /><br />
<a id="sthref1384" href="img_text/inheritance_clauses.htm">Description of the illustration inheritance_clauses.gif</a><br />
<br />
<p class="subhead2"><a id="i2121955"></a><a id="LNPLS1626"></a><span class="italic">subprogram_spec</span> ::=</p>
<img width="265" height="58" src="img/subprogram_spec.gif" alt="Description of subprogram_spec.gif follows" /><br />
<a id="sthref1385" href="img_text/subprogram_spec.htm">Description of the illustration subprogram_spec.gif</a><br />
<br />
<p class="subhead2"><a id="i2122028"></a><a id="LNPLS1627"></a><span class="italic">procedure_spec</span> ::=</p>
<img width="661" height="79" src="img/procedure_spec.gif" alt="Description of procedure_spec.gif follows" /><br />
<a id="sthref1386" href="img_text/procedure_spec.htm">Description of the illustration procedure_spec.gif</a><br />
<br />
<p>See <a href="create_function.htm#CJADHIEA">"<span class="italic">call_spec</span> ::="</a>.</p>
<p class="subhead2"><a id="i2122046"></a><a id="LNPLS1628"></a><span class="italic">function_spec</span> ::=</p>
<img width="491" height="58" src="img/function_spec.gif" alt="Description of function_spec.gif follows" /><br />
<a id="sthref1387" href="img_text/function_spec.htm">Description of the illustration function_spec.gif</a><br />
<br />
<p class="subhead2"><a id="i2122084"></a><a id="LNPLS1631"></a><span class="italic">return_clause</span> ::=</p>
<img width="385" height="110" src="img/return_clause.gif" alt="Description of return_clause.gif follows" /><br />
<a id="sthref1388" href="img_text/return_clause.htm">Description of the illustration return_clause.gif</a><br />
<br />
<p>See <a href="create_function.htm#CJADHIEA">"<span class="italic">call_spec</span> ::="</a>.</p>
<p class="subhead2"><a id="i2121973"></a><a id="LNPLS1629"></a><span class="italic">constructor_spec</span> ::=</p>
<img width="591" height="249" src="img/constructor_spec.gif" alt="Description of constructor_spec.gif follows" /><br />
<a id="sthref1389" href="img_text/constructor_spec.htm">Description of the illustration constructor_spec.gif</a><br />
<br />
<p>See <a href="create_function.htm#CJADHIEA">"<span class="italic">call_spec</span> ::="</a>.</p>
<p class="subhead2"><a id="i2121991"></a><a id="LNPLS1630"></a><span class="italic">map_order_function_spec</span> ::=</p>
<img width="289" height="58" src="img/map_order_function_spec.gif" alt="Description of map_order_function_spec.gif follows" /><br />
<a id="sthref1390" href="img_text/map_order_function_spec.htm">Description of the illustration map_order_function_spec.gif</a><br />
<br />
<p>See <a href="#i2122046">"<span class="italic">function_spec</span> ::="</a>.</p>
<p class="subhead2"><a id="i2122154"></a><a id="LNPLS1632"></a><span class="italic">sqlj_object_type_sig</span> ::=</p>
<img width="746" height="58" src="img/sqlj_object_type_sig.gif" alt="Description of sqlj_object_type_sig.gif follows" /><br />
<a id="sthref1391" href="img_text/sqlj_object_type_sig.htm">Description of the illustration sqlj_object_type_sig.gif</a><br />
<br /></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABCHABE"></a>Prerequisites</p>
<p>To create a type in your schema, you must have the <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> system privilege. To create a type in another user's schema, you must have the <code dir="ltr">CREATE</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege. You can acquire these privileges explicitly or be granted them through a role.</p>
<p>To create a subtype, you must have the <code dir="ltr">UNDER</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege or the <code dir="ltr">UNDER</code> object privilege on the supertype.</p>
<p>The owner of the type must be explicitly granted the <code dir="ltr">EXECUTE</code> object privilege to access all other types referenced in the definition of the type, or the type owner must be granted the <code dir="ltr">EXECUTE</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege. The owner cannot obtain these privileges through roles.</p>
<p>If the type owner intends to grant other users access to the type, then the owner must be granted the <code dir="ltr">EXECUTE</code> object privilege on the referenced types with the <code dir="ltr">GRANT</code> <code dir="ltr">OPTION</code> or the <code dir="ltr">EXECUTE</code> <code dir="ltr">ANY</code> <code dir="ltr">TYPE</code> system privilege with the <code dir="ltr">ADMIN</code> <code dir="ltr">OPTION</code>. Otherwise, the type owner has insufficient privileges to grant access on the type to other users.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABGEFCH"></a>Semantics</p>
<p class="subhead2"><a id="LNPLS2015"></a>OR REPLACE</p>
<p>Re-creates the type if it exists, and recompiles it.</p>
<p>Users who were granted privileges on the type before it was redefined can still access the type without being regranted the privileges.</p>
<p>If any function-based indexes depend on the type, then the database marks the indexes <code dir="ltr">DISABLED</code>.</p>
<p class="subhead2"><a id="LNPLS1638"></a><span class="italic">schema</span></p>
<p>Name of the schema containing the type. <span class="bold">Default:</span> your schema.</p>
<p class="subhead2"><a id="LNPLS1639"></a><span class="italic">type_name</span></p>
<p>Name of an ADT, a nested table type, or a <code dir="ltr">VARRAY</code> type.</p>
<p>If creating the type results in compilation errors, then the database returns an error. You can see the associated compiler error messages with the SQL*Plus command <code dir="ltr">SHOW</code> <code dir="ltr">ERRORS</code>.</p>
<p>The database implicitly defines a constructor method for each user-defined type that you create. A <span class="bold">constructor</span> is a system-supplied procedure that is used in SQL statements or in PL/SQL code to construct an instance of the type value. The name of the constructor method is the name of the user-defined type. You can also create a user-defined constructor using the <code dir="ltr"><span class="codeinlineitalic">constructor_spec</span></code> syntax.</p>
<p>The parameters of the ADT constructor method are the data attributes of the ADT. They occur in the same order as the attribute definition order for the ADT. The parameters of a nested table or varray constructor are the elements of the nested table or the varray.</p>
<p class="subhead2"><a id="LNPLS1640"></a>FORCE</p>
<p>If <code dir="ltr"><span class="codeinlineitalic">type_name</span></code> exists and has type dependents, but not table dependents, <code dir="ltr">FORCE</code> forces the statement to replace the type. (If <code dir="ltr"><span class="codeinlineitalic">type_name</span></code> has table dependents, the statement fails with or without <code dir="ltr">FORCE</code>.)</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If type <code dir="ltr">t1</code> has type dependent <code dir="ltr">t2</code>, and type <code dir="ltr">t2</code> has table dependents, then type <code dir="ltr">t1</code> also has table dependents.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ00402" href="../../appdev.112/e11822/adobjmng.htm#ADOBJ00402"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a></div>
<p class="subhead2"><a id="i2064608"></a><a id="LNPLS1641"></a><span class="italic">object_type_def</span></p>
<p>Creates an ADT. The variables that form the data structure are called <span class="bold">attributes</span>. The member subprograms that define the behavior of the ADT are called <span class="bold">methods</span>. The keywords <code dir="ltr">AS</code> <code dir="ltr">OBJECT</code> are required when creating an ADT.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2083561">"ADT Examples"</a></div>
<p class="subhead2"><a id="i2185309"></a><a id="LNPLS1642"></a>OID '<span class="italic">object_identifier</span>'</p>
<p>Establishes type equivalence of identical objects in multiple databases. See <a class="olink ADOBJ00513" href="../../appdev.112/e11822/adobjvew.htm#ADOBJ00513"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for information about this clause.</p>
<p class="subhead2"><a id="i2185294"></a><a id="LNPLS1643"></a><span class="italic">invoker_rights_clause</span></p>
<p>Specifies the <code dir="ltr">AUTHID</code> property of the member functions and procedures of the ADT. For information about the <code dir="ltr">AUTHID</code> property, see <a href="subprograms.htm#i18574">"Invoker's Rights and Definer's Rights (AUTHID Property)"</a>.</p>
<p><a id="i2168070"></a><a id="LNPLS1644"></a><span class="subhead3">Restrictions on <span class="italic">invoker_rights_clause</span>&nbsp;</span>This clause is subject to these restrictions:</p>
<ul>
<li>
<p>You can specify this clause only for an ADT, not for a nested table or <code dir="ltr">VARRAY</code> type.</p>
</li>
<li>
<p>You can specify this clause for clarity if you are creating a subtype. However, a subtype inherits the <code dir="ltr">AUTHID</code> property of its supertype, so you cannot specify a different value than was specified for the supertype.</p>
</li>
<li>
<p>If the supertype was created with <code dir="ltr">AUTHID</code> <code dir="ltr">DEFINER</code>, then you must create the subtype in the same schema as the supertype.</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS1645"></a>AS OBJECT</p>
<p>Creates a schema-level ADT. Such ADTs are sometimes called <span class="bold">root</span> ADTs.</p>
<p class="subhead2"><a id="LNPLS1646"></a>UNDER <span class="italic">supertype</span></p>
<p>Creates a subtype of an existing type. The existing supertype must be an ADT. The subtype you create in this statement inherits the properties of its supertype. It must either override some of those properties or add properties to distinguish it from the supertype.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2126475">"Subtype Example"</a> and <a href="#i2088454">"Type Hierarchy Example"</a></div>
<p class="subhead2"><a id="i2089317"></a><a id="LNPLS1647"></a><span class="italic">sqlj_object_type</span></p>
<p>Creates a <span class="bold">SQLJ</span> <span class="bold">object type</span>. With a SQLJ object type, you map a Java class to a SQL user-defined type. You can then define tables or columns of the SQLJ object type as you can with any other user-defined type.</p>
<p>You can map one Java class to multiple SQLJ object types. If there exists a subtype or supertype of a SQLJ object type, then it must also be a SQLJ object type. All types in the hierarchy must be SQLJ object types.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ00301" href="../../appdev.112/e11822/adobjenv.htm#ADOBJ00301"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about creating SQLJ object types</div>
<p class="subhead2"><a id="LNPLS1648"></a><span class="italic">java_ext_name</span></p>
<p>Name of the Java class. If the class exists, then it must be public. The Java external name, including the schema, is validated.</p>
<p>Multiple SQLJ object types can be mapped to the same class. However:</p>
<ul>
<li>
<p>A subtype must be mapped to a class that is an immediate subclass of the class to which its supertype is mapped.</p>
</li>
<li>
<p>Two subtypes of a common supertype cannot be mapped to the same class.</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS1649"></a>SQLData | CustomDatum | OraData</p>
<p>Specifies the mechanism for creating the Java instance of the type. <code dir="ltr">SQLData</code>, <code dir="ltr">CustomDatum</code>, and <code dir="ltr">OraData</code> are the interfaces that determine which mechanism to use.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a> for information about these three interfaces and <a href="#i2126486">"SQLJ Object Type Example"</a></div>
<p class="subhead2"><a id="LNPLS1650"></a><span class="italic">element_spec</span></p>
<p>Specifies each attribute of the ADT.</p>
<p class="subhead2"><a id="LNPLS1651"></a><span class="italic">attribute</span></p>
<p>Name of an ADT attribute. An ADT attribute is a data item with a name and a type specifier that forms the structure of the ADT. You must specify at least one attribute for each ADT. The name must be unique in the ADT, but can be used in other ADTs.</p>
<p>If you are creating a subtype, then the attribute name cannot be the same as any attribute or method name declared in the supertype chain.</p>
<p class="subhead2"><a id="LNPLS1652"></a><span class="italic">datatype</span></p>
<p>The data type of an ADT attribute. This data type must be stored in the database; that is, either a predefined data type or a user-defined standalone collection type. For information about predefined data types, see <a href="datatypes.htm#CJAEDAEA">Chapter 3, "PL/SQL Data Types."</a> For information about user-defined standalone collection types, see <a href="composites.htm#CHDBHJEI">"Collection Types"</a>.</p>
<p><a id="BABEHDBJ"></a><a id="LNPLS1653"></a><span class="subhead3">Restrictions on <span class="italic">datatype</span>&nbsp;</span></p>
<ul>
<li>
<p>You cannot impose the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint on an attribute.</p>
</li>
<li>
<p>You cannot specify attributes of type <code dir="ltr">ROWID</code>, <code dir="ltr">LONG</code>, or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>.</p>
</li>
<li>
<p>You cannot specify a data type of <code dir="ltr">UROWID</code> for an ADT.</p>
</li>
<li>
<p>If you specify an object of type <code dir="ltr">REF</code>, then the target object must have an object identifier.</p>
</li>
<li>
<p>If you are creating a collection type for use as a nested table or varray column of a table, then you cannot specify attributes of type <code dir="ltr">ANYTYPE</code>, <code dir="ltr">ANYDATA</code>, or <code dir="ltr">ANYDATASET</code>.</p>
</li>
</ul>
<p class="subhead2"><a id="i2089337"></a><a id="LNPLS1654"></a><span class="italic">sqlj_object_type_attr</span></p>
<p>This clause is valid only if you have specified the <code dir="ltr"><span class="codeinlineitalic">sqlj_object_type</span></code> clause to map a Java class to a SQLJ object type. Specify the external name of the Java field that corresponds to the attribute of the SQLJ object type. The Java <code dir="ltr"><span class="codeinlineitalic">field_name</span></code> must exist in the class. You cannot map a Java <code dir="ltr"><span class="codeinlineitalic">field_name</span></code> to multiple SQLJ object type attributes in the same type hierarchy.</p>
<p>This clause is optional when you create a SQLJ object type.</p>
<p class="subhead2"><a id="i2082294"></a><a id="LNPLS1655"></a><span class="italic">subprogram_spec</span></p>
<p>Associates a procedure subprogram with the ADT.</p>
<p class="subhead2"><a id="LNPLS1656"></a>MEMBER</p>
<p>A function or procedure subprogram associated with the ADT that is referenced as an attribute. Typically, you invoke <code dir="ltr">MEMBER</code> methods in a selfish style, such as <code dir="ltr"><span class="codeinlineitalic">object_expression.method</span></code><code dir="ltr">()</code>. This class of method has an implicit first argument referenced as <code dir="ltr">SELF</code> in the method body, which represents the object on which the method was invoked.</p>
<p><a id="LNPLS1657"></a><span class="subhead3">Restriction on MEMBER&nbsp;</span>You cannot specify a <code dir="ltr">MEMBER</code> method if you are mapping a Java class to a SQLJ object type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2126584">"Creating a Member Method: Example"</a></div>
<p class="subhead2"><a id="LNPLS1658"></a>STATIC</p>
<p>A function or procedure subprogram associated with the ADT. Unlike <code dir="ltr">MEMBER</code> methods, <code dir="ltr">STATIC</code> methods do not have any implicit parameters. You cannot reference <code dir="ltr">SELF</code> in their body. They are typically invoked as <code dir="ltr"><span class="codeinlineitalic">type_name.method</span></code><code dir="ltr">()</code>.</p>
<p><a id="LNPLS1659"></a><span class="subhead3">Restrictions on STATIC&nbsp;</span></p>
<ul>
<li>
<p>You cannot map a <code dir="ltr">MEMBER</code> method in a Java class to a <code dir="ltr">STATIC</code> method in a SQLJ object type.</p>
</li>
<li>
<p>For both <code dir="ltr">MEMBER</code> and <code dir="ltr">STATIC</code> methods, you must specify a corresponding method body in the type body for each procedure or function specification.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2126601">"Creating a Static Method: Example"</a></div>
<p class="subhead2"><a id="LNPLS1660"></a>[NOT] FINAL, [NOT] INSTANTIABLE</p>
<p>At the schema level of the syntax, these clauses specify the inheritance attributes of the type.</p>
<p>Use the [<code dir="ltr">NOT</code>] <code dir="ltr">FINAL</code> clause to indicate whether any further subtypes can be created for this type:</p>
<ul>
<li>
<p><span class="bold">(Default)</span> Specify <code dir="ltr">FINAL</code> if no further subtypes can be created for this type.</p>
</li>
<li>
<p>Specify <code dir="ltr">NOT</code> <code dir="ltr">FINAL</code> if further subtypes can be created under this type.</p>
</li>
</ul>
<p>Use the [<code dir="ltr">NOT</code>] <code dir="ltr">INSTANTIABLE</code> clause to indicate whether any object instances of this type can be constructed:</p>
<ul>
<li>
<p><span class="bold">(Default)</span> Specify <code dir="ltr">INSTANTIABLE</code> if object instances of this type can be constructed.</p>
</li>
<li>
<p>Specify <code dir="ltr">NOT</code> <code dir="ltr">INSTANTIABLE</code> if no default or user-defined constructor exists for this ADT. You must specify these keywords for any type with noninstantiable methods and for any type that has no attributes, either inherited or specified in this statement.</p>
</li>
</ul>
<p class="subhead2"><a id="i2174986"></a><a id="LNPLS1661"></a><span class="italic">inheritance_clauses</span></p>
<p>Specify the relationship between supertypes and subtypes.</p>
<p class="subhead2"><a id="LNPLS1662"></a>OVERRIDING</p>
<p>Specifies that this method overrides a <code dir="ltr">MEMBER</code> method defined in the supertype. This keyword is required if the method redefines a supertype method. <span class="bold">Default:</span> <code dir="ltr">NOT</code> <code dir="ltr">OVERRIDING</code>.</p>
<p><a id="LNPLS1663"></a><span class="subhead3">Restriction on OVERRIDING&nbsp;</span>The <code dir="ltr">OVERRIDING</code> clause is not valid for a <code dir="ltr">STATIC</code> method or for a SQLJ object type.</p>
<p class="subhead2"><a id="LNPLS1664"></a>FINAL</p>
<p>Specifies that this method cannot be overridden by any subtype of this type. <span class="bold">Default:</span> <code dir="ltr">NOT</code> <code dir="ltr">FINAL</code>.</p>
<p class="subhead2"><a id="LNPLS1665"></a>NOT INSTANTIABLE</p>
<p>Specifies that the type does not provide an implementation for this method. <span class="bold">Default:</span> all methods are <code dir="ltr">INSTANTIABLE</code>.</p>
<p><a id="LNPLS1666"></a><span class="subhead3">Restriction on NOT INSTANTIABLE&nbsp;</span>If you specify <code dir="ltr">NOT</code> <code dir="ltr">INSTANTIABLE</code>, then you cannot specify <code dir="ltr">FINAL</code> or <code dir="ltr">STATIC</code>.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a href="#i2076738"><span class="xreftitleitalic"><span class="italic">constructor_spec</span></span></a></div>
<p class="subhead2"><a id="i2082270"></a><a id="LNPLS1667"></a><span class="italic">procedure_spec</span> or <span class="italic">function_spec</span></p>
<p>Specifies the parameters and data types of the procedure or function. If this subprogram does not include the declaration of the procedure or function, then you must issue a corresponding <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> <code dir="ltr">BODY</code> statement.</p>
<p><a id="LNPLS1668"></a><span class="subhead3">Restriction on <span class="italic">procedure_spec</span> or <span class="italic">function_spec</span>&nbsp;</span>If you are creating a subtype, then the name of the procedure or function cannot be the same as the name of any attribute, whether inherited or not, declared in the supertype chain.</p>
<p class="subhead2"><a id="i2089344"></a><a id="LNPLS1669"></a><span class="italic">return_clause</span></p>
<p>The first form of the <code dir="ltr"><span class="codeinlineitalic">return_clause</span></code> is valid only for a function. The syntax shown is an abbreviated form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="collection_method.htm#i33024">"Collection Method Invocation"</a> for information about method invocation and methods</p>
</li>
<li>
<p><a href="create_procedure.htm#i2072424">"CREATE PROCEDURE Statement"</a> and <a href="create_function.htm#i2153260">"CREATE FUNCTION Statement"</a> for the full syntax with all possible clauses</p>
</li>
</ul>
</div>
<p class="subhead2"><a id="i2089360"></a><a id="LNPLS1670"></a><span class="italic">sqlj_object_type_sig</span></p>
<p>Use this form of the <code dir="ltr"><span class="codeinlineitalic">return_clause</span></code> if you intend to create SQLJ object type functions or procedures.</p>
<ul>
<li>
<p>If you are mapping a Java class to a SQLJ object type and you specify <code dir="ltr">EXTERNAL</code> <code dir="ltr">NAME</code>, then the value of the Java method returned must be compatible with the SQL returned value, and the Java method must be public. Also, the method signature (method name plus parameter types) must be unique in the type hierarchy.</p>
</li>
<li>
<p>If you specify <code dir="ltr">EXTERNAL</code> <code dir="ltr">VARIABLE</code> <code dir="ltr">NAME</code>, then the type of the Java static field must be compatible with the return type.</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS2016"></a><span class="italic">call_spec</span>, EXTERNAL</p>
<p>See <a href="create_function.htm#BABIBEBE">"<span class="italic">call_spec</span>"</a> and <a href="create_function.htm#CIHDFDFG">"EXTERNAL"</a>.</p>
<p class="subhead2"><a id="i2076501"></a><a id="LNPLS01386"></a><span class="italic">restrict_references_pragma</span></p>
<p>Deprecated clause, described in <a href="restrictreferences_pragma.htm#i35854">"RESTRICT_REFERENCES Pragma"</a>.</p>
<p class="subhead2"><a id="i2076738"></a><a id="LNPLS1679"></a><span class="italic">constructor_spec</span></p>
<p>Creates a user-defined constructor, which is a function that returns an initialized instance of an ADT. You can declare multiple constructors for a single ADT, if the parameters of each constructor differ in number, order, or data type.</p>
<ul>
<li>
<p>User-defined constructor functions are always <code dir="ltr">FINAL</code> and <code dir="ltr">INSTANTIABLE</code>, so these keywords are optional.</p>
</li>
<li>
<p>The parameter-passing mode of user-defined constructors is always <code dir="ltr">SELF</code> <code dir="ltr">IN</code> <code dir="ltr">OUT</code>. Therefore you need not specify this clause unless you want to do so for clarity.</p>
</li>
<li>
<p><code dir="ltr">RETURN</code> <code dir="ltr">SELF</code> <code dir="ltr">AS</code> <code dir="ltr">RESULT</code> specifies that the runtime type of the value returned by the constructor is runtime type of the <code dir="ltr">SELF</code> argument.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ006" href="../../appdev.112/e11822/adobjadv.htm#ADOBJ006"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about and examples of user-defined constructors and <a href="#i2126568">"Constructor Example"</a></div>
<p class="subhead2"><a id="LNPLS01385"></a><span class="italic">map_order_function_spec</span></p>
<p>You can define either one <code dir="ltr">MAP</code> method or one <code dir="ltr">ORDER</code> method in a type specification, regardless of how many <code dir="ltr">MEMBER</code> or <code dir="ltr">STATIC</code> methods you define. If you declare either method, then you can compare object instances in SQL.</p>
<p>You cannot define either <code dir="ltr">MAP</code> or <code dir="ltr">ORDER</code> methods for subtypes. However, a subtype can override a <code dir="ltr">MAP</code> method if the supertype defines a nonfinal <code dir="ltr">MAP</code> method. A subtype cannot override an <code dir="ltr">ORDER</code> method at all.</p>
<p>You can specify either <code dir="ltr">MAP</code> or <code dir="ltr">ORDER</code> when mapping a Java class to a SQL type. However, the <code dir="ltr">MAP</code> or <code dir="ltr">ORDER</code> methods must map to <code dir="ltr">MEMBER</code> functions in the Java class.</p>
<p>If neither a <code dir="ltr">MAP</code> nor an <code dir="ltr">ORDER</code> method is specified, then only comparisons for equality or inequality can be performed. Therefore object instances cannot be ordered. Instances of the same type definition are equal only if each pair of their corresponding attributes is equal. No comparison method must be specified to determine the equality of two ADTs.</p>
<p>Use <code dir="ltr">MAP</code> if you are performing extensive sorting or hash join operations on object instances. <code dir="ltr">MAP</code> is applied once to map the objects to scalar values, and then the database uses the scalars during sorting and merging. A <code dir="ltr">MAP</code> method is more efficient than an <code dir="ltr">ORDER</code> method, which must invoke the method for each object comparison. You must use a <code dir="ltr">MAP</code> method for hash joins. You cannot use an <code dir="ltr">ORDER</code> method because the hash mechanism hashes on the object value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ00803" href="../../appdev.112/e11822/adobjdes.htm#ADOBJ00803"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about object value comparisons</div>
<p class="subhead2"><a id="LNPLS1680"></a>MAP MEMBER</p>
<p>Specifies a <code dir="ltr">MAP</code> member function that returns the relative position of a given instance in the ordering of all instances of the object. A <code dir="ltr">MAP</code> method is called implicitly and induces an ordering of object instances by mapping them to values of a predefined scalar type. PL/SQL uses the ordering to evaluate Boolean expressions and to perform comparisons.</p>
<p>If the argument to the <code dir="ltr">MAP</code> method is null, then the <code dir="ltr">MAP</code> method returns null and the method is not invoked.</p>
<p>An object specification can contain only one <code dir="ltr">MAP</code> method, which must be a function. The result type must be a predefined SQL scalar type, and the <code dir="ltr">MAP</code> method can have no arguments other than the implicit <code dir="ltr">SELF</code> argument.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr"><span class="codeinlineitalic">type_name</span></code> is to be referenced in queries containing sorts (through an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code>, <code dir="ltr">GROUP</code> <code dir="ltr">BY</code>, <code dir="ltr">DISTINCT</code>, or <code dir="ltr">UNION</code> clause) or containing joins, and you want those queries to be parallelized, then you must specify a <code dir="ltr">MAP</code> member function.</div>
<p>A subtype cannot define a new <code dir="ltr">MAP</code> method, but it can override an inherited <code dir="ltr">MAP</code> method.</p>
<p class="subhead2"><a id="LNPLS1681"></a>ORDER MEMBER</p>
<p>Specifies an <code dir="ltr">ORDER</code> member function that takes an instance of an object as an explicit argument and the implicit <code dir="ltr">SELF</code> argument and returns either a negative, zero, or positive integer. The negative, positive, or zero indicates that the implicit <code dir="ltr">SELF</code> argument is less than, equal to, or greater than the explicit argument.</p>
<p>If either argument to the <code dir="ltr">ORDER</code> method is null, then the <code dir="ltr">ORDER</code> method returns null and the method is not invoked.</p>
<p>When instances of the same ADT definition are compared in an <code dir="ltr">ORDER</code> <code dir="ltr">BY</code> clause, the <code dir="ltr">ORDER</code> method <code dir="ltr"><span class="codeinlineitalic">map_order_function_spec</span></code> is invoked.</p>
<p>An object specification can contain only one <code dir="ltr">ORDER</code> method, which must be a function having the return type <code dir="ltr">NUMBER</code>.</p>
<p>A subtype can neither define nor override an <code dir="ltr">ORDER</code> method.</p>
<p class="subhead2"><a id="i2064906"></a><a id="LNPLS1682"></a><span class="italic">varray_type_def</span></p>
<p>Creates the type as an ordered set of elements, each of which has the same data type.</p>
<p><a id="LNPLS1683"></a><span class="subhead3">Restrictions on <span class="italic">varray_type_def</span>&nbsp;</span>You can create a <code dir="ltr">VARRAY</code> type of <code dir="ltr">XMLType</code> or of a LOB type for procedural purposes, for example, in PL/SQL or in view queries. However, database storage of such a varray is not supported, so you cannot create an object table or an column of such a <code dir="ltr">VARRAY</code> type.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i2126512">"Varray Type Example"</a></div>
<p class="subhead2"><a id="i2089410"></a><a id="LNPLS1684"></a><span class="italic">nested_table_type_def</span></p>
<p>Creates a named nested table of type <code dir="ltr"><span class="codeinlineitalic">datatype</span></code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i2126557">"Nested Table Type Example"</a></p>
</li>
<li>
<p><a href="#i2126543">"Nested Table Type Containing a Varray"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i2095312"></a>Examples</p>
<p><a id="i2083561"></a><a id="LNPLS01379"></a><span class="subhead3">ADT Examples&nbsp;</span>This example shows how the sample type <code dir="ltr">customer_typ</code> was created for the sample Order Entry (<code dir="ltr">oe</code>) schema. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">
CREATE TYPE customer_typ_demo AS OBJECT
    ( customer_id        NUMBER(6)
    , cust_first_name    VARCHAR2(20)
    , cust_last_name     VARCHAR2(20)
    , cust_address       CUST_ADDRESS_TYP
    , phone_numbers      PHONE_LIST_TYP
    , nls_language       VARCHAR2(3)
    , nls_territory      VARCHAR2(30)
    , credit_limit       NUMBER(9,2)
    , cust_email         VARCHAR2(30)
    , cust_orders        ORDER_LIST_TYP
    ) ;
/
</pre>
<p>In this example, the <code dir="ltr">data_typ1</code> ADT is created with one member function <code dir="ltr">prod</code>, which is implemented in the <code dir="ltr">CREATE</code> <code dir="ltr">TYPE</code> <code dir="ltr">BODY</code> statement:</p>
<pre dir="ltr">
CREATE TYPE data_typ1 AS OBJECT 
   ( year NUMBER, 
     MEMBER FUNCTION prod(invent NUMBER) RETURN NUMBER 
   ); 
/
 
CREATE TYPE BODY data_typ1 IS   
      MEMBER FUNCTION prod (invent NUMBER) RETURN NUMBER IS 
         BEGIN 
             RETURN (year + invent);
         END; 
      END; 
/
</pre>
<p><a id="i2126475"></a><a id="LNPLS1685"></a><span class="subhead3">Subtype Example&nbsp;</span>This statement shows how the subtype <code dir="ltr">corporate_customer_typ</code> in the sample <code dir="ltr">oe</code> schema was created. It is based on the <code dir="ltr">customer_typ</code> supertype created in the preceding example and adds the <code dir="ltr">account_mgr_id</code> attribute. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">
CREATE TYPE corporate_customer_typ_demo UNDER customer_typ
    ( account_mgr_id     NUMBER(6)
    );
</pre>
<p><a id="i2126486"></a><a id="LNPLS1686"></a><span class="subhead3">SQLJ Object Type Example&nbsp;</span>These examples create a SQLJ object type and subtype. The <code dir="ltr">address_t</code> type maps to the Java class <code dir="ltr">Examples.Address</code>. The subtype <code dir="ltr">long_address_t</code> maps to the Java class <code dir="ltr">Examples.LongAddress</code>. The examples specify SQLData as the mechanism used to create the Java instance of these types. Each of the functions in these type specifications has a corresponding implementation in the Java class.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ008" href="../../appdev.112/e11822/adobjdes.htm#ADOBJ008"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for the Java implementation of the functions in these type specifications</div>
<pre dir="ltr">
CREATE TYPE address_t AS OBJECT
  EXTERNAL NAME 'Examples.Address' LANGUAGE JAVA 
  USING SQLData(
    street_attr varchar(250) EXTERNAL NAME 'street',
    city_attr varchar(50) EXTERNAL NAME 'city',
    state varchar(50) EXTERNAL NAME 'state',
    zip_code_attr number EXTERNAL NAME 'zipCode',
    STATIC FUNCTION recom_width RETURN NUMBER
      EXTERNAL VARIABLE NAME 'recommendedWidth',
    STATIC FUNCTION create_address RETURN address_t
      EXTERNAL NAME 'create() return Examples.Address',
    STATIC FUNCTION construct RETURN address_t
      EXTERNAL NAME 'create() return Examples.Address',
    STATIC FUNCTION create_address (street VARCHAR, city VARCHAR, 
        state VARCHAR, zip NUMBER) RETURN address_t
      EXTERNAL NAME 'create (java.lang.String, java.lang.String, java.lang.String, int) return Examples.Address',
    STATIC FUNCTION construct (street VARCHAR, city VARCHAR, 
        state VARCHAR, zip NUMBER) RETURN address_t
      EXTERNAL NAME 
        'create (java.lang.String, java.lang.String, java.lang.String, int) return Examples.Address',
    MEMBER FUNCTION to_string RETURN VARCHAR
      EXTERNAL NAME 'tojava.lang.String() return java.lang.String',
    MEMBER FUNCTION strip RETURN SELF AS RESULT 
      EXTERNAL NAME 'removeLeadingBlanks () return Examples.Address'
  ) NOT FINAL;
/

CREATE OR REPLACE TYPE long_address_t
UNDER address_t
EXTERNAL NAME 'Examples.LongAddress' LANGUAGE JAVA 
USING SQLData(
    street2_attr VARCHAR(250) EXTERNAL NAME 'street2',
    country_attr VARCHAR (200) EXTERNAL NAME 'country',
    address_code_attr VARCHAR (50) EXTERNAL NAME 'addrCode',    
    STATIC FUNCTION create_address RETURN long_address_t 
      EXTERNAL NAME 'create() return Examples.LongAddress',
    STATIC FUNCTION  construct (street VARCHAR, city VARCHAR, 
        state VARCHAR, country VARCHAR, addrs_cd VARCHAR) 
      RETURN long_address_t 
      EXTERNAL NAME 
        'create(java.lang.String, java.lang.String,
        java.lang.String, java.lang.String, java.lang.String) 
          return Examples.LongAddress',
    STATIC FUNCTION construct RETURN long_address_t
      EXTERNAL NAME 'Examples.LongAddress() 
        return Examples.LongAddress',
    STATIC FUNCTION create_longaddress (
      street VARCHAR, city VARCHAR, state VARCHAR, country VARCHAR, 
      addrs_cd VARCHAR) return long_address_t
      EXTERNAL NAME 
        'Examples.LongAddress (java.lang.String, java.lang.String,
         java.lang.String, java.lang.String, java.lang.String)
           return Examples.LongAddress',
    MEMBER FUNCTION get_country RETURN VARCHAR
      EXTERNAL NAME 'country_with_code () return java.lang.String'
  );
/
</pre>
<p><a id="i2088454"></a><a id="LNPLS01383"></a><span class="subhead3">Type Hierarchy Example&nbsp;</span>These statements create a type hierarchy. Type <code dir="ltr">employee_t</code> inherits the <code dir="ltr">name</code> and <code dir="ltr">ssn</code> attributes from type <code dir="ltr">person_t</code> and in addition has <code dir="ltr">department_id</code> and <code dir="ltr">salary</code> attributes. Type <code dir="ltr">part_time_emp_t</code> inherits all of the attributes from <code dir="ltr">employee_t</code> and, through <code dir="ltr">employee_t</code>, those of <code dir="ltr">person_t</code> and in addition has a <code dir="ltr">num_hrs</code> attribute. Type <code dir="ltr">part_time_emp_t</code> is final by default, so no further subtypes can be created under it.</p>
<pre dir="ltr">
CREATE TYPE person_t AS OBJECT (name VARCHAR2(100), ssn NUMBER) 
   NOT FINAL;
/

CREATE TYPE employee_t UNDER person_t 
   (department_id NUMBER, salary NUMBER) NOT FINAL;
/

CREATE TYPE part_time_emp_t UNDER employee_t (num_hrs NUMBER);
/
</pre>
<p>You can use type hierarchies to create substitutable tables and tables with substitutable columns.</p>
<p><a id="i2126512"></a><a id="LNPLS01380"></a><span class="subhead3">Varray Type Example&nbsp;</span>This statement shows how the <code dir="ltr">phone_list_typ</code> <code dir="ltr">VARRAY</code> type with five elements in the sample <code dir="ltr">oe</code> schema was created. A hypothetical name is given to the table so that you can duplicate this example in your test database:</p>
<pre dir="ltr">
CREATE TYPE phone_list_typ_demo AS VARRAY(5) OF VARCHAR2(25);
</pre>
<p><a id="i2126557"></a><a id="LNPLS1687"></a><span class="subhead3">Nested Table Type Example&nbsp;</span>This example from the sample schema <code dir="ltr">pm</code> creates the table type <code dir="ltr">textdoc_tab</code> of type <code dir="ltr">textdoc_typ</code>:</p>
<pre dir="ltr">
CREATE TYPE textdoc_typ AS OBJECT
    ( document_typ      VARCHAR2(32)
    , formatted_doc     BLOB
    ) ;

CREATE TYPE textdoc_tab AS TABLE OF textdoc_typ;
</pre>
<p><a id="i2126543"></a><a id="LNPLS1688"></a><span class="subhead3">Nested Table Type Containing a Varray&nbsp;</span>This example of multilevel collections is a variation of the sample table <code dir="ltr">oe.customers</code>. In this example, the <code dir="ltr">cust_address</code> object column becomes a nested table column with the <code dir="ltr">phone_list_typ</code> varray column embedded in it. The phone_list_typ type was created in <a href="#i2126512">"Varray Type Example"</a>.</p>
<pre dir="ltr">
CREATE TYPE cust_address_typ2 AS OBJECT
       ( street_address     VARCHAR2(40)
       , postal_code        VARCHAR2(10)
       , city               VARCHAR2(30)
       , state_province     VARCHAR2(10)
       , country_id         CHAR(2)
       , phone              phone_list_typ_demo
       );

CREATE TYPE cust_nt_address_typ
   AS TABLE OF cust_address_typ2;
</pre>
<p><a id="i2126568"></a><a id="LNPLS1689"></a><span class="subhead3">Constructor Example&nbsp;</span>This example invokes the system-defined constructor to construct the <code dir="ltr">demo_typ</code> object and insert it into the <code dir="ltr">demo_tab</code> table:</p>
<pre dir="ltr">
CREATE TYPE demo_typ1 AS OBJECT (a1 NUMBER, a2 NUMBER);

CREATE TABLE demo_tab1 (b1 NUMBER, b2 demo_typ1);

INSERT INTO demo_tab1 VALUES (1, demo_typ1(2,3));
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ006" href="../../appdev.112/e11822/adobjadv.htm#ADOBJ006"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about constructors</div>
<p><a id="i2126584"></a><a id="LNPLS1690"></a><span class="subhead3">Creating a Member Method: Example&nbsp;</span>This example invokes method constructor <code dir="ltr">col.get_square</code>. First the type is created:</p>
<pre dir="ltr">
CREATE TYPE demo_typ2 AS OBJECT (a1 NUMBER,  
   MEMBER FUNCTION get_square RETURN NUMBER); 
</pre>
<p>Next a table is created with an ADT column and some data is inserted into the table:</p>
<pre dir="ltr">
CREATE TABLE demo_tab2(col demo_typ2); 

INSERT INTO demo_tab2 VALUES (demo_typ2(2));
</pre>
<p>The type body is created to define the member function, and the member method is invoked:</p>
<pre dir="ltr">
CREATE TYPE BODY demo_typ2 IS
   MEMBER FUNCTION get_square
   RETURN NUMBER
   IS x NUMBER;
   BEGIN
      SELECT c.col.a1*c.col.a1 INTO x
      FROM demo_tab2 c;
      RETURN (x);
   END;
END;
/
 
SELECT t.col.get_square() FROM demo_tab2 t;

T.COL.GET_SQUARE()
------------------
                 4
</pre>
<p>Unlike function invocations, method invocations require parentheses, even when the methods do not have additional arguments.</p>
<p><a id="i2126601"></a><a id="LNPLS1691"></a><span class="subhead3">Creating a Static Method: Example&nbsp;</span>This example changes the definition of the <code dir="ltr">employee_t</code> type to associate it with the <code dir="ltr">construct_emp</code> function. The example first creates an ADT <code dir="ltr">department_t</code> and then an ADT <code dir="ltr">employee_t</code> containing an attribute of type <code dir="ltr">department_t</code>:</p>
<pre dir="ltr">
CREATE OR REPLACE TYPE department_t AS OBJECT (
   deptno number(10),
   dname CHAR(30));

CREATE OR REPLACE TYPE employee_t AS OBJECT(
   empid RAW(16),
   ename CHAR(31),
   dept REF department_t,
      STATIC function construct_emp
      (name VARCHAR2, dept REF department_t)
      RETURN employee_t
);
</pre>
<p>This statement requires this type body statement.</p>
<pre dir="ltr">
CREATE OR REPLACE TYPE BODY employee_t IS
   STATIC FUNCTION construct_emp
   (name varchar2, dept REF department_t)
   RETURN employee_t IS
      BEGIN
         return employee_t(SYS_GUID(),name,dept);
      END;
END;
</pre>
<p>Next create an object table and insert into the table:</p>
<pre dir="ltr">
CREATE TABLE emptab OF employee_t;
INSERT INTO emptab
   VALUES (employee_t.construct_emp('John Smith', NULL));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABIGECI"></a>Related Topics</p>
<p class="subhead2"><a id="LNPLS2017"></a>In this chapter:</p>
<ul>
<li>
<p><a href="alter_type.htm#i2057828">"ALTER TYPE Statement"</a></p>
</li>
<li>
<p><a href="create_type_body.htm#i2064997">"CREATE TYPE BODY Statement"</a></p>
</li>
<li>
<p><a href="drop_type.htm#CJAEEEJI">"DROP TYPE Statement"</a></p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS2018"></a>In other chapters:</p>
<ul>
<li>
<p><a href="overview.htm#BABJCCAI">"Abstract Data Types"</a></p>
</li>
<li>
<p><a href="fundamentals.htm#CHDBGHHF">"Conditional Compilation Directive Restrictions"</a></p>
</li>
<li>
<p><a href="collection.htm#i33100">"Collection Variable Declaration"</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for more information about objects, incomplete types, varrays, and nested tables</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect1" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="create_trigger.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="create_type_body.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
