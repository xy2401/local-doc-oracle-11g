<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Data Types</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:56Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="fundamentals.htm" title="Previous" type="text/html" />
<link rel="Next" href="controlstatements.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">10/99</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='datatypes'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="LNPLS003" class="chapter"><a id="CJAEDAEA"></a>
<h1 class="chapter"><span class="secnum">3</span> PL/SQL Data Types</h1>
<p>Every PL/SQL constant, variable, parameter, and function return value has a <a id="sthref226"></a><span class="bold">data type</span> that determines its storage format and its valid values and operations.</p>
<p>This chapter explains <a id="sthref227"></a><a id="sthref228"></a><span class="bold">scalar data types</span>, which store values with no internal components. For information about <span class="bold">composite data types</span>, see <a href="composites.htm#CIHIEBJC">Chapter 5, "PL/SQL Collections and Records"</a>.</p>
<p>A scalar data type can have subtypes. A <a id="sthref229"></a><span class="bold">subtype</span> is a data type that is a subset of another data type, which is its <a id="sthref230"></a><span class="bold">base type</span>. A subtype has the same valid operations as its base type. A data type and its subtypes comprise a <a id="sthref231"></a><span class="bold">data type family</span>.</p>
<p>PL/SQL predefines many types and subtypes in the package <code >STANDARD</code> and lets you define your own subtypes.</p>
<p>The PL/SQL scalar data types are:</p>
<ul>
<li>
<p>The SQL data types</p>
</li>
<li>
<p><code dir="ltr">BOOLEAN</code></p>
</li>
<li>
<p><code dir="ltr">PLS_INTEGER</code></p>
</li>
<li>
<p><code dir="ltr">BINARY_INTEGER</code></p>
</li>
<li>
<p><code dir="ltr">REF</code> <code dir="ltr">CURSOR</code>, explained in <a href="static.htm#i7106">"Cursor Variables"</a></p>
</li>
<li>
<p>User-defined subtypes</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS309"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDHAEGF">SQL Data Types</a></p>
</li>
<li>
<p><a href="#CJACJGBG">BOOLEAN Data Type</a></p>
</li>
<li>
<p><a href="#i10726">PLS_INTEGER and BINARY_INTEGER Data Types</a></p>
</li>
<li>
<p><a href="#CIHGBFGB">SIMPLE_INTEGER Subtype of PLS_INTEGER</a></p>
</li>
<li>
<p><a href="#CHDEAFDJ">User-Defined PL/SQL Subtypes</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="create_type.htm#BABHJHEB">"CREATE TYPE Statement"</a> for information about creating schema-level user-defined data types</p>
</li>
<li>
<p><a href="predefined.htm#CJAEFDAD">Appendix E, "PL/SQL Predefined Data Types"</a> for the predefined PL/SQL data types and subtypes, grouped by data type family</p>
</li>
</ul>
</div>
<a id="CHDHAEGF"></a>
<div id="LNPLS311" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">SQL Data Types</h2>
<p>The PL/SQL data types include the <a id="sthref232"></a><a id="sthref233"></a>SQL data types. For information about the SQL data types, see <a class="olink SQLRF002" href="../../server.112/e41084/sql_elements.htm#SQLRF002"><span class="italic">Oracle Database SQL Language Reference</span></a>&mdash;all information there about data types and subtypes, data type comparison rules, <a id="sthref234"></a>data conversion, literals, and format models applies to both SQL and PL/SQL, except as noted here:</p>
<ul>
<li>
<p><a href="#CHDDCGEE">Different Maximum Sizes</a></p>
</li>
<li>
<p><a href="#CIHFFDDA">Additional PL/SQL Constants for BINARY_FLOAT and BINARY_DOUBLE</a></p>
</li>
<li>
<p><a href="#CHDJFIJA">Additional PL/SQL Subtypes of BINARY_FLOAT and BINARY_DOUBLE</a></p>
</li>
</ul>
<p>Unlike SQL, PL/SQL lets you declare variables, to which the following topics apply:</p>
<ul>
<li>
<p><a href="#CIHGBBIG">CHAR and VARCHAR2 Variables</a></p>
</li>
<li>
<p><a href="#CJAEGDEB">LONG and LONG RAW Variables</a></p>
</li>
<li>
<p><a href="#i27947">ROWID and UROWID Variables</a></p>
</li>
</ul>
<a id="CHDDCGEE"></a>
<div id="LNPLS99943" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Different Maximum Sizes</h3>
<p>The SQL data types listed in <a href="#CHDEDFJE">Table 3-1</a> have different maximum sizes in PL/SQL and SQL.</p>
<div id="LNPLS314" class="tblformal">
<p class="titleintable"><a id="sthref235"></a><a id="CHDEDFJE"></a>Table 3-1 Data Types with Different Maximum Sizes in PL/SQL and SQL</p>
<table class="cellalignment1092" title="Data Types with Different Maximum Sizes in PL/SQL and SQL" summary="This table has three columns. The first column lists the predefined SQL data types that have different maximum values in PL/SQL and SQL, the second column gives their maximum sizes in PL/SQL, and the third column gives their maximum values in SQL." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t3">Data Type</th>
<th class="cellalignment1090" id="r1c2-t3">Maximum Size in PL/SQL</th>
<th class="cellalignment1090" id="r1c3-t3">Maximum Size in SQL</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">CHAR</code><a id="CHDIEDJI" href="#CHDIEDJI" onclick='footdisplay(1,"When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1091" headers="r2c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
<td class="cellalignment1091" headers="r2c1-t3 r1c3-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NCHAR</code><a id="sthref236" href="#sthref236" onclick='footdisplay(1,"When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r3c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
<td class="cellalignment1091" headers="r3c1-t3 r1c3-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">RAW</code><a id="sthref237" href="#sthref237" onclick='footdisplay(1,"When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r4c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
<td class="cellalignment1091" headers="r4c1-t3 r1c3-t3">
<p>2,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">VARCHAR2</code><a id="sthref238" href="#sthref238" onclick='footdisplay(1,"When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r5c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
<td class="cellalignment1091" headers="r5c1-t3 r1c3-t3">
<p>4,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NVARCHAR2</code><a id="sthref239" href="#sthref239" onclick='footdisplay(1,"When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r6c1-t3 r1c2-t3">
<p>32,767 bytes</p>
</td>
<td class="cellalignment1091" headers="r6c1-t3 r1c3-t3">
<p>4,000 bytes</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t3" headers="r1c1-t3">
<p><code dir="ltr">LONG</code><a id="CHDECHII" href="#CHDECHII" onclick='footdisplay(2,"Supported only for backward compatibility with existing applications.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1091" headers="r7c1-t3 r1c2-t3">
<p>32,760 bytes</p>
</td>
<td class="cellalignment1091" headers="r7c1-t3 r1c3-t3">
<p>2 gigabytes (GB) - 1</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t3" headers="r1c1-t3">
<p><code dir="ltr">LONG</code> <code dir="ltr">RAW</code><a id="sthref240" href="#sthref240" onclick='footdisplay(2,"Supported only for backward compatibility with existing applications.")'><sup class="footnotenumber">Footref&nbsp;2</sup></a></p>
</td>
<td class="cellalignment1091" headers="r8c1-t3 r1c2-t3">
<p>32,760 bytes</p>
</td>
<td class="cellalignment1091" headers="r8c1-t3 r1c3-t3">
<p>2 GB</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t3" headers="r1c1-t3">
<p><code dir="ltr">BLOB</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t3 r1c2-t3">
<p>128 terabytes (TB)</p>
</td>
<td class="cellalignment1091" headers="r9c1-t3 r1c3-t3">
<p>(4 GB - 1) * <code dir="ltr"><span class="codeinlineitalic">database_block_size</span></code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t3" headers="r1c1-t3">
<p><code dir="ltr">CLOB</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t3 r1c2-t3">
<p>128 TB</p>
</td>
<td class="cellalignment1091" headers="r10c1-t3 r1c3-t3">
<p>(4 GB - 1) * <code dir="ltr"><span class="codeinlineitalic">database_block_size</span></code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r11c1-t3" headers="r1c1-t3">
<p><code dir="ltr">NCLOB</code></p>
</td>
<td class="cellalignment1091" headers="r11c1-t3 r1c2-t3">
<p>128 TB</p>
</td>
<td class="cellalignment1091" headers="r11c1-t3 r1c3-t3">
<p>(4 GB - 1) * <code dir="ltr"><span class="codeinlineitalic">database_block_size</span></code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>When specifying the maximum size of a value of this data type in PL/SQL, use an integer literal (not a constant or variable) whose value is in the range from 1 through 32,767.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup>Supported only for backward compatibility with existing applications.</p>
</div>
<!-- class="sect2" -->
<a id="CIHFFDDA"></a>
<div id="LNPLS326" class="sect2">
<h3 class="sect2">Additional PL/SQL Constants for BINARY_FLOAT and BINARY_DOUBLE</h3>
<p>The SQL data types <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> represent single-precision and double-precision IEEE 754-format floating-point numbers, respectively.</p>
<p><code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code> computations do not raise exceptions, so you must check the values that they produce for conditions such as overflow and underflow by comparing them to predefined constants (for examples, see <a class="olink SQLRF51060" href="../../server.112/e41084/sql_elements003.htm#SQLRF51060"><span class="italic">Oracle Database SQL Language Reference</span></a>). PL/SQL has more of these constants than SQL does.</p>
<p><a href="#CIHHEAFG">Table 3-2</a> lists and describes the <a id="sthref241"></a>predefined PL/SQL constants for <a id="sthref242"></a><a id="sthref243"></a><code dir="ltr">BINARY_FLOAT</code> and <a id="sthref244"></a><code dir="ltr">BINARY_DOUBLE</code>, and identifies those that SQL also defines.</p>
<div id="LNPLS327" class="tblformal">
<p class="titleintable"><a id="sthref245"></a><a id="CIHHEAFG"></a>Table 3-2 Predefined PL/SQL BINARY_FLOAT and BINARY_DOUBLE Constants<a id="CIHIEHBB" href="#CIHIEHBB" onclick='footdisplay(1,"SQL also predefines this constant.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
<table class="cellalignment1092" title="Predefined PL/SQL BINARY_FLOAT and BINARY_DOUBLE Constants" summary="This table summarizes the predefined PL/SQL BINARY_FLOAT and BINARY_DOUBLE constants (with asterisks indicating which constants SQL also defines)." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t4">Constant</th>
<th class="cellalignment1090" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_NAN</code><a id="sthref246" href="#sthref246" onclick='footdisplay(1,"SQL also predefines this constant.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r2c1-t4 r1c2-t4">
<p><code dir="ltr">BINARY_FLOAT</code> value for which the condition <code dir="ltr">IS</code> <code dir="ltr">NAN</code> (not a number) is true</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_INFINITY</code><a id="sthref247" href="#sthref247" onclick='footdisplay(1,"SQL also predefines this constant.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r3c1-t4 r1c2-t4">
<p>Single-precision positive infinity</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_MAX_NORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t4 r1c2-t4">
<p>Maximum normal <code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_MIN_NORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t4 r1c2-t4">
<p>Minimum normal <code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_MAX_SUBNORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t4 r1c2-t4">
<p>Maximum subnormal <code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_FLOAT_MIN_SUBNORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t4 r1c2-t4">
<p>Minimum subnormal <code dir="ltr">BINARY_FLOAT</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_NAN</code><a id="sthref248" href="#sthref248" onclick='footdisplay(1,"SQL also predefines this constant.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r8c1-t4 r1c2-t4">
<p><code dir="ltr">BINARY_DOUBLE</code> value for which the condition <code dir="ltr">IS</code> <code dir="ltr">NAN</code> (not a number) is true</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_INFINITY</code><a id="sthref249" href="#sthref249" onclick='footdisplay(1,"SQL also predefines this constant.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
<td class="cellalignment1091" headers="r9c1-t4 r1c2-t4">
<p>Double-precision positive infinity</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_MAX_NORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t4 r1c2-t4">
<p>Maximum normal <code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r11c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_MIN_NORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r11c1-t4 r1c2-t4">
<p>Minimum normal <code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r12c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_MAX_SUBNORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r12c1-t4 r1c2-t4">
<p>Maximum subnormal <code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r13c1-t4" headers="r1c1-t4">
<p><code dir="ltr">BINARY_DOUBLE_MIN_SUBNORMAL</code></p>
</td>
<td class="cellalignment1091" headers="r13c1-t4 r1c2-t4">
<p>Minimum subnormal <code dir="ltr">BINARY_DOUBLE</code> value</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>SQL also predefines this constant.</p>
</div>
<!-- class="sect2" -->
<a id="CHDJFIJA"></a>
<div id="LNPLS99942" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Additional PL/SQL Subtypes of BINARY_FLOAT and BINARY_DOUBLE</h3>
<p>PL/SQL predefines these subtypes:</p>
<ul>
<li>
<p><a id="sthref250"></a><code dir="ltr">SIMPLE_FLOAT</code>, a subtype of SQL data type <a id="sthref251"></a><a id="sthref252"></a><code dir="ltr">BINARY_FLOAT</code></p>
</li>
<li>
<p><a id="sthref253"></a><code dir="ltr">SIMPLE_DOUBLE</code>, a subtype of SQL data type <a id="sthref254"></a><a id="sthref255"></a><code dir="ltr">BINARY_DOUBLE</code></p>
</li>
</ul>
<p>Each subtype has the same range as its base type and has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint (explained in <a href="fundamentals.htm#CIHCJJAG">"NOT NULL Constraint"</a>).</p>
<p>If you know that a variable will never have the value <code dir="ltr">NULL</code>, declare it as <code dir="ltr">SIMPLE_FLOAT</code> or <code dir="ltr">SIMPLE_DOUBLE</code>, rather than <code dir="ltr">BINARY_FLOAT</code> or <code dir="ltr">BINARY_DOUBLE</code>. Without the overhead of checking for nullness, the subtypes provide significantly better performance than their base types. The performance improvement is greater with <code dir="ltr">PLSQL_CODE_TYPE='NATIVE'</code> than with <code dir="ltr">PLSQL_CODE_TYPE='INTERPRETED'</code> (for more information, see <a href="tuning.htm#BABEJFDG">"Use Data Types that Use Hardware Arithmetic"</a>).</p>
</div>
<!-- class="sect2" -->
<a id="CIHGBBIG"></a>
<div id="LNPLS332" class="sect2">
<h3 class="sect2">CHAR and VARCHAR2 Variables</h3>
<p class="subhead2"><a id="LNPLS315"></a><a id="sthref256"></a><a id="sthref257"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDFJCDF">Assigning or Inserting Too-Long Values</a></p>
</li>
<li>
<p><a href="#CHDEDACE">Declaring Variables for Multibyte Characters</a></p>
</li>
<li>
<p><a href="#CHDJAJHH">Differences Between CHAR and VARCHAR2 Data Types</a></p>
</li>
</ul>
<a id="CHDFJCDF"></a>
<div id="LNPLS99941" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Assigning or Inserting Too-Long Values</h4>
<p>If the value that you assign to a character variable is longer than the maximum size of the variable, an error occurs. For example:</p>
<pre dir="ltr">
DECLARE
  c VARCHAR2(<span class="bold">3 CHAR</span>);
BEGIN
  c := <span class="bold">'abc  '</span>;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
<span class="bold">ORA-06502: PL/SQL: numeric or value error: character string buffer too small</span>
<span class="bold">ORA-06512: at line 4</span>
</pre>
<p>Similarly, if you insert a character variable into a column, and the value of the variable is longer than the defined width of the column, an error occurs. For example:</p>
<pre dir="ltr">
DROP TABLE t;
CREATE TABLE t (c CHAR(<span class="bold">3 CHAR</span>));
 
DECLARE
  <span class="bold">s VARCHAR2(5 CHAR) := 'abc  '</span>;
BEGIN
  INSERT INTO t(c) VALUES(<span class="bold">s</span>);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
BEGIN
*
ERROR at line 1:
<span class="bold">ORA-12899: value too large for column "HR"."T"."C" (actual: 5, maximum: 3)</span>
<span class="bold">ORA-06512: at line 4</span>
</pre>
<p>To strip trailing blanks from a character value before assigning it to a variable or inserting it into a column, use the <code dir="ltr">RTRIM</code> function, explained in <a class="olink SQLRF06104" href="../../server.112/e41084/functions160.htm#SQLRF06104"><span class="italic">Oracle Database SQL Language Reference</span></a>. For example:</p>
<pre dir="ltr">
DECLARE
  c VARCHAR2(3 CHAR);
BEGIN
  c := <span class="bold">RTRIM('abc  ')</span>;
  INSERT INTO t(c) VALUES(<span class="bold">RTRIM('abc  ')</span>);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="sect3" -->
<a id="CHDEDACE"></a>
<div id="LNPLS99940" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Declaring Variables for Multibyte Characters</h4>
<p>The maximum <span class="italic">size</span> of a <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> variable is 32,767 bytes, whether you specify the maximum size in characters or bytes. The maximum <span class="italic">number of characters</span> in the variable depends on the character set type and sometimes on the characters themselves:</p>
<div class="inftblinformal">
<table class="cellalignment1089" title="Character Set Type and Maximum Number of Characters" summary="The left column lists the types of character sets and the right column lists the maximum number of characters that the character set type can have." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t5">Character Set Type</th>
<th class="cellalignment1090" id="r1c2-t5">Maximum Number of Characters</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t5" headers="r1c1-t5">Single-byte character set</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c2-t5">32,767</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t5" headers="r1c1-t5"><span class="italic">n</span>-byte fixed-width multibyte character set (for example, AL16UTF16)</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c2-t5"><code dir="ltr">FLOOR(32,767/</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code></td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t5" headers="r1c1-t5"><span class="italic">n</span>-byte variable-width multibyte character set with character widths between 1 and <span class="italic">n</span> bytes (for example, JA16SJIS or AL32UTF8)</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c2-t5">Depends on characters themselves&mdash;can be anything from 32,767 (for a string containing only 1-byte characters) through <code dir="ltr">FLOOR(32,767/</code><code dir="ltr"><span class="codeinlineitalic">n</span></code><code dir="ltr">)</code> (for a string containing only <span class="italic">n</span>-byte characters).</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>When declaring a <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> variable, to ensure that it can always hold <span class="italic">n</span> characters in any <a id="sthref258"></a>multibyte character set, declare its length in characters&mdash;that is, <code dir="ltr">CHAR(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">CHAR)</code> or <code dir="ltr">VARCHAR2(</code><code dir="ltr"><span class="codeinlineitalic">n</span></code> <code dir="ltr">CHAR)</code>, where <span class="italic">n</span> does not exceed <code dir="ltr">FLOOR(32767/4)</code> = 8191.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG153" href="../../server.112/e10729/ch1overview.htm#NLSPG153"><span class="italic">Oracle Database Globalization Support Guide</span></a> for information about Oracle Database character set support</div>
</div>
<!-- class="sect3" -->
<a id="CHDJAJHH"></a>
<div id="LNPLS99939" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Differences Between CHAR and VARCHAR2 Data Types</h4>
<p><code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> data types differ in:</p>
<ul>
<li>
<p><a href="#CIHJHIDI">Predefined Subtypes</a></p>
</li>
<li>
<p><a href="#CIHDICEH">Blank-Padding</a></p>
</li>
<li>
<p><a href="#CIHEHGHI">Value Comparisons</a></p>
</li>
</ul>
<a id="CIHJHIDI"></a>
<div id="LNPLS333" class="sect4">
<h5 class="sect4">Predefined Subtypes</h5>
<p>The <code dir="ltr">CHAR</code> data type has one predefined subtype in both PL/SQL and SQL&mdash;<code dir="ltr">CHARACTER</code>.</p>
<p>The <code dir="ltr">VARCHAR2</code> data type has one predefined subtype in both PL/SQL and SQL, <a id="sthref259"></a><code dir="ltr">VARCHAR</code>, and an additional predefined subtype in PL/SQL, <a id="sthref260"></a><code dir="ltr">STRING</code>.</p>
<p>Each subtype has the same range of values as its base type.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a future PL/SQL release, to accommodate emerging SQL standards, <code dir="ltr">VARCHAR</code> might become a separate data type, no longer synonymous with <code dir="ltr">VARCHAR2</code>.</div>
</div>
<!-- class="sect4" -->
<a id="CIHDICEH"></a>
<div id="LNPLS335" class="sect4">
<h5 class="sect4">Blank-Padding</h5>
<p><a id="sthref261"></a>Consider these situations:</p>
<ul>
<li>
<p>The value that you assign to a variable is shorter than the maximum size of the variable.</p>
</li>
<li>
<p>The value that you insert into a column is shorter than the defined width of the column.</p>
</li>
<li>
<p>The value that you retrieve from a column into a variable is shorter than the maximum size of the variable.</p>
</li>
</ul>
<p>If the data type of the receiver is <code dir="ltr">CHAR</code>, PL/SQL blank-pads the value to the maximum size. Information about trailing blanks in the original value is lost.</p>
<p>If the data type of the receiver is <code dir="ltr">VARCHAR2</code>, PL/SQL neither blank-pads the value nor strips trailing blanks. Character values are assigned intact, and no information is lost.</p>
<p>In <a href="#CHDBABGF">Example 3-1</a>, both the <code dir="ltr">CHAR</code> variable and the <code dir="ltr">VARCHAR2</code> variable have the maximum size of 10 characters. Each variable receives a five-character value with one trailing blank. The value assigned to the <code dir="ltr">CHAR</code> variable is blank-padded to 10 characters, and you cannot tell that one of the six trailing blanks in the resulting value was in the original value. The value assigned to the <code dir="ltr">VARCHAR2</code> variable is not changed, and you can see that it has one trailing blank.</p>
<div id="LNPLS316" class="example">
<p class="titleinexample"><a id="CHDBABGF"></a>Example 3-1 CHAR and VARCHAR2 Blank-Padding Difference</p>
<pre dir="ltr">
DECLARE
  first_name  CHAR(10 CHAR);
  last_name   VARCHAR2(10 CHAR);
BEGIN
  first_name := 'John ';
  last_name  := 'Chen ';
 
  DBMS_OUTPUT.PUT_LINE('*' || first_name || '*');
  DBMS_OUTPUT.PUT_LINE('*' || last_name || '*');
END;
/
</pre></div>
<!-- class="example" -->
<p>Result:</p>
<pre dir="ltr">
*John      *
*Chen *
</pre></div>
<!-- class="sect4" -->
<a id="CIHEHGHI"></a>
<div id="LNPLS336" class="sect4">
<h5 class="sect4">Value Comparisons</h5>
<p>The SQL rules for comparing character values apply to PL/SQL character variables. Whenever one or both values in the comparison have the data type <code dir="ltr">VARCHAR2</code> or <code dir="ltr">NVARCHAR2</code>, <a id="sthref262"></a>nonpadded comparison semantics apply; otherwise, <a id="sthref263"></a>blank-padded semantics apply. For more information, see <a class="olink SQLRF51040" href="../../server.112/e41084/sql_elements002.htm#SQLRF51040"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CJAEGDEB"></a>
<div id="LNPLS346" class="sect2">
<h3 class="sect2">LONG and LONG RAW Variables</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle supports the <a id="sthref264"></a><code dir="ltr">LONG</code> and <a id="sthref265"></a><code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types only for backward compatibility with existing applications. For new applications:
<ul>
<li>
<p>Instead of <code dir="ltr">LONG</code>, use <code dir="ltr">VARCHAR2(32760)</code>, <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code> or <code dir="ltr">NCLOB</code>.</p>
</li>
<li>
<p>Instead of <code dir="ltr">LONG</code> <code dir="ltr">RAW</code>, use <code dir="ltr">BLOB</code>.</p>
</li>
</ul>
</div>
<p>You can insert any <code dir="ltr">LONG</code> value into a <code dir="ltr">LONG</code> column. You can insert any <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> value into a <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column. You cannot retrieve a value longer than 32,760 bytes from a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column into a <code dir="ltr">LONG</code> or <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> variable.</p>
<p>You can insert any <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> value into a <code dir="ltr">LONG</code> column. You cannot retrieve a value longer than 32,767 bytes from a <code dir="ltr">LONG</code> column into a <code dir="ltr">CHAR</code> or <code dir="ltr">VARCHAR2</code> variable.</p>
<p>You can insert any <code dir="ltr">RAW</code> value into a <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column. You cannot retrieve a value longer than 32,767 bytes from a <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> column into a <code dir="ltr">RAW</code> variable.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="triggers.htm#g1699536">"Trigger LONG and LONG RAW Data Type Restrictions"</a> for restrictions on <code dir="ltr">LONG</code> and <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> data types in triggers</div>
</div>
<!-- class="sect2" -->
<a id="i27947"></a>
<div id="LNPLS347" class="sect2">
<h3 class="sect2">ROWID and UROWID Variables</h3>
<p>When you retrieve a <a id="sthref266"></a>rowid into a <a id="sthref267"></a><code dir="ltr">ROWID</code> variable, use the <code dir="ltr">ROWIDTOCHAR</code> function to convert the binary value to a character value. For information about this function, see <a class="olink SQLRF06101" href="../../server.112/e41084/functions157.htm#SQLRF06101"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>To convert the value of a <code dir="ltr">ROWID</code> variable to a rowid, use the <code dir="ltr">CHARTOROWID</code> function, explained in <a class="olink SQLRF00615" href="../../server.112/e41084/functions025.htm#SQLRF00615"><span class="italic">Oracle Database SQL Language Reference</span></a>. If the value does not represent a valid rowid, PL/SQL raises the predefined exception <code dir="ltr">SYS_INVALID_ROWID</code>.</p>
<p>To retrieve a rowid into a <a id="sthref268"></a><code dir="ltr">UROWID</code> variable, or to convert the value of a <code dir="ltr">UROWID</code> variable to a rowid, use an assignment statement; conversion is implicit.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p><code dir="ltr">UROWID</code> is a more versatile data type than <code dir="ltr">ROWID</code>, because it is compatible with both logical and physical rowids.</p>
</li>
<li>
<p>When you update a row in a table compressed with Hybrid Columnar Compression (HCC), the <code dir="ltr">ROWID</code> of the row changes. HCC, a feature of certain Oracle storage systems, is described in <a class="olink CNCPT89198" href="../../server.112/e40540/tablecls.htm#CNCPT89198"><span class="italic">Oracle Database Concepts</span></a>.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS053" href="../../appdev.112/e40758/d_rowid.htm#ARPLS053"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_ROWID</code> package, whose subprograms let you create and return information about <code dir="ltr">ROWID</code> values (but not <code dir="ltr">UROWID</code> values)</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CJACJGBG"></a>
<div id="LNPLS348" class="sect1">
<h2 class="sect1">BOOLEAN Data Type</h2>
<p>The PL/SQL data type <a id="sthref269"></a><code dir="ltr">BOOLEAN</code> stores <a id="sthref270"></a><span class="bold">logical values</span>, which are the Boolean values <code dir="ltr">TRUE</code> and <code dir="ltr">FALSE</code> and the value <code dir="ltr">NULL</code>. <code dir="ltr">NULL</code> represents an unknown value.</p>
<p>The syntax for declaring an <code dir="ltr">BOOLEAN</code> variable is:</p>
<pre dir="ltr">
<span class="italic">variable_name</span> BOOLEAN
</pre>
<p>The only value that you can assign to a <code dir="ltr">BOOLEAN</code> variable is a <code dir="ltr">BOOLEAN</code> expression. For details, see <a href="fundamentals.htm#CHDCGDDH">"BOOLEAN Expressions"</a>.</p>
<p>Because SQL has no data type equivalent to <code dir="ltr">BOOLEAN</code>, you cannot:</p>
<ul>
<li>
<p>Assign a <code dir="ltr">BOOLEAN</code> value to a database table column</p>
</li>
<li>
<p>Select or fetch the value of a database table column into a <code dir="ltr">BOOLEAN</code> variable</p>
</li>
<li>
<p>Use a <code dir="ltr">BOOLEAN</code> value in a SQL statement, SQL function, or PL/SQL function invoked from a SQL statement</p>
</li>
</ul>
<p>You cannot pass a <code dir="ltr">BOOLEAN</code> value to the <code dir="ltr">DBMS_OUTPUT</code>.<code dir="ltr">PUT</code> or <code dir="ltr">DBMS_OUTPUT</code>.<code dir="ltr">PUTLINE</code> subprogram. To print a <code dir="ltr">BOOLEAN</code> value, use an <code dir="ltr">IF</code> or <code dir="ltr">CASE</code> statement to translate it to a character value (for information about these statements, see <a href="controlstatements.htm#i2866">"Conditional Selection Statements"</a>).</p>
<p>In <a href="#CHDHDHHA">Example 3-2</a>, the procedure accepts a <code dir="ltr">BOOLEAN</code> parameter and uses a <code dir="ltr">CASE</code> statement to print <code dir="ltr">Unknown</code> if the value of the parameter is <code dir="ltr">NULL</code>, <code dir="ltr">Yes</code> if it is <code dir="ltr">TRUE</code>, and <code dir="ltr">No</code> if it is <code dir="ltr">FALSE</code>.</p>
<div id="LNPLS317" class="example">
<p class="titleinexample"><a id="CHDHDHHA"></a>Example 3-2 Printing BOOLEAN Values</p>
<pre dir="ltr">
CREATE PROCEDURE print_boolean (b BOOLEAN) AUTHID DEFINER
AS
BEGIN
  DBMS_OUTPUT.put_line (
    CASE
      WHEN b IS NULL THEN 'Unknown'
      WHEN b THEN 'Yes'
      WHEN NOT b THEN 'No'
    END
  );
END;
/
BEGIN
  print_boolean(TRUE);
  print_boolean(FALSE);
  print_boolean(NULL);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Yes
No
Unknown
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="fundamentals.htm#CIHIIBAC">Example 2-35</a>, which creates a <code dir="ltr">print_boolean</code> procedure that uses an <code dir="ltr">IF</code> statement.</div>
</div>
<!-- class="sect1" -->
<a id="i10726"></a>
<div id="LNPLS319" class="sect1">
<h2 class="sect1">PLS_INTEGER and BINARY_INTEGER Data Types</h2>
<p>The PL/SQL data types <a id="sthref271"></a><code dir="ltr">PLS_INTEGER</code> and <code dir="ltr">BINARY_INTEGER</code> are identical. For simplicity, this document uses <code dir="ltr">PLS_INTEGER</code> to mean both <code dir="ltr">PLS_INTEGER</code> and <code dir="ltr">BINARY_INTEGER</code>.</p>
<p>The <code dir="ltr">PLS_INTEGER</code> data type stores signed integers in the range -2,147,483,648 through 2,147,483,647, represented in 32 bits.</p>
<p>The <code dir="ltr">PLS_INTEGER</code> data type has these advantages over the <code dir="ltr">NUMBER</code> data type and <code dir="ltr">NUMBER</code> subtypes:</p>
<ul>
<li>
<p><code dir="ltr">PLS_INTEGER</code> values require less storage.</p>
</li>
<li>
<p><code dir="ltr">PLS_INTEGER</code> operations use hardware arithmetic, so they are faster than <code dir="ltr">NUMBER</code> operations, which use library arithmetic.</p>
</li>
</ul>
<p>For efficiency, use <code dir="ltr">PLS_INTEGER</code> values for all calculations in its range.</p>
<p class="subhead2"><a id="LNPLS318"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDHGIGI">Preventing PLS_INTEGER Overflow</a></p>
</li>
<li>
<p><a href="#CHDIBECH">Predefined PLS_INTEGER Subtypes</a></p>
</li>
<li>
<p><a href="#CIHGBFGB">SIMPLE_INTEGER Subtype of PLS_INTEGER</a></p>
</li>
</ul>
<a id="CHDHGIGI"></a>
<div id="LNPLS99938" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Preventing PLS_INTEGER Overflow</h3>
<p>A calculation with two <code dir="ltr">PLS_INTEGER</code> values that overflows the <code dir="ltr">PLS_INTEGER</code> range raises an overflow exception, even if you assign the result to a <code dir="ltr">NUMBER</code> data type (as in <a href="#CHDDIAEG">Example 3-3</a>). For calculations outside the <code dir="ltr">PLS_INTEGER</code> range, use <code dir="ltr">INTEGER</code>, a predefined subtype of the <code dir="ltr">NUMBER</code> data type (as in <a href="#CHDEDAGD">Example 3-4</a>).</p>
<div id="LNPLS320" class="example">
<p class="titleinexample"><a id="CHDDIAEG"></a>Example 3-3 PLS_INTEGER Calculation Raises Overflow Exception</p>
<pre dir="ltr">
DECLARE
  p1 PLS_INTEGER := 2147483647;
  p2 PLS_INTEGER := 1;
  n NUMBER;
BEGIN
  n := p1 + p2;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
<span class="bold">ORA-01426: numeric overflow</span>
ORA-06512: at line 6
</pre></div>
<!-- class="example" -->
<div id="LNPLS322" class="example">
<p class="titleinexample"><a id="CHDEDAGD"></a>Example 3-4 Preventing <a href="#CHDDIAEG">Example 3-3</a> Overflow</p>
<pre dir="ltr">
DECLARE
  p1 PLS_INTEGER := 2147483647;
  p2 <span class="bold">INTEGER</span> := 1;
  n NUMBER;
BEGIN
  n := p1 + p2;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDIBECH"></a>
<div id="LNPLS99937" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Predefined PLS_INTEGER Subtypes</h3>
<p><a href="#CHDDFGFG">Table 3-3</a> lists the predefined <a id="sthref272"></a>subtypes of the <code dir="ltr">PLS_INTEGER</code> data type and describes the data they store.</p>
<div id="LNPLS324" class="tblformal">
<p class="titleintable"><a id="sthref273"></a><a id="CHDDFGFG"></a>Table 3-3 Predefined Subtypes of PLS_INTEGER Data Type</p>
<table class="cellalignment1092" title="Predefined Subtypes of PLS_INTEGER Data Type" summary="This table summarizes the predefined subtypes of the PLS_INTEGER datatype." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t13">Data Type</th>
<th class="cellalignment1090" id="r1c2-t13">Data Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t13" headers="r1c1-t13">
<p><a id="sthref274"></a><code dir="ltr">NATURAL</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t13 r1c2-t13">
<p>Nonnegative <code dir="ltr">PLS_INTEGER</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t13" headers="r1c1-t13">
<p><a id="sthref275"></a><code dir="ltr">NATURALN</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t13 r1c2-t13">
<p>Nonnegative <code dir="ltr">PLS_INTEGER</code> value with <code dir="ltr">NOT NULL</code> constraint<a id="CHDCEBDJ" href="#CHDCEBDJ" onclick='footdisplay(1,"For information about the \u003ccode dir=\"ltr\"\u003eNOT\u003c/code\u003e \u003ccode dir=\"ltr\"\u003eNULL\u003c/code\u003e constraint, see \u003ca target=\"datatypes\" href=\"fundamentals.htm#CIHCJJAG\"\u003e\"NOT NULL Constraint\"\u003c/a\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t13" headers="r1c1-t13">
<p><a id="sthref276"></a><code dir="ltr">POSITIVE</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t13 r1c2-t13">
<p>Positive <code dir="ltr">PLS_INTEGER</code> value</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t13" headers="r1c1-t13">
<p><a id="sthref277"></a><code dir="ltr">POSITIVEN</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t13 r1c2-t13">
<p>Positive <code dir="ltr">PLS_INTEGER</code> value with <code dir="ltr">NOT NULL</code> constraint<a id="sthref278" href="#sthref278" onclick='footdisplay(1,"For information about the \u003ccode dir=\"ltr\"\u003eNOT\u003c/code\u003e \u003ccode dir=\"ltr\"\u003eNULL\u003c/code\u003e constraint, see \u003ca target=\"datatypes\" href=\"fundamentals.htm#CIHCJJAG\"\u003e\"NOT NULL Constraint\"\u003c/a\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t13" headers="r1c1-t13">
<p><a id="sthref279"></a><code dir="ltr">SIGNTYPE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t13 r1c2-t13">
<p><code dir="ltr">PLS_INTEGER</code> value -1, 0, or 1 (useful for programming tri-state logic)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t13" headers="r1c1-t13">
<p><code dir="ltr">SIMPLE_INTEGER</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t13 r1c2-t13">
<p><code dir="ltr">PLS_INTEGER</code> value with <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint. For more information, see <a href="#CIHGBFGB">"SIMPLE_INTEGER Subtype of PLS_INTEGER"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>For information about the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, see <a href="fundamentals.htm#CIHCJJAG">"NOT NULL Constraint"</a>.</p>
<p><code dir="ltr">PLS_INTEGER</code> and its subtypes can be implicitly converted to these data types:</p>
<ul>
<li>
<p><code dir="ltr">CHAR</code></p>
</li>
<li>
<p><code dir="ltr">VARCHAR2</code></p>
</li>
<li>
<p><code dir="ltr">NUMBER</code></p>
</li>
<li>
<p><code dir="ltr">LONG</code></p>
</li>
</ul>
<p>All of the preceding data types except <code dir="ltr">LONG</code>, and all <code dir="ltr">PLS_INTEGER</code> subtypes, can be implicitly converted to <code dir="ltr">PLS_INTEGER</code>.</p>
<p>A <code dir="ltr">PLS_INTEGER</code> value can be implicitly converted to a <code dir="ltr">PLS_INTEGER</code> subtype only if the value does not violate a constraint of the subtype. For example, casting the <code dir="ltr">PLS_INTEGER</code> value <code dir="ltr">NULL</code> to the <code dir="ltr">SIMPLE_INTEGER</code> subtype raises an exception, as <a href="#CHDBJFJE">Example 3-5</a> shows.</p>
<div id="LNPLS325" class="example">
<p class="titleinexample"><a id="CHDBJFJE"></a>Example 3-5 Violating Constraint of SIMPLE_INTEGER Subtype</p>
<pre dir="ltr">
DECLARE
  a SIMPLE_INTEGER := 1;
  b PLS_INTEGER := NULL;
BEGIN
  a := b;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error
ORA-06512: at line 5
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGBFGB"></a>
<div id="LNPLS00305" class="sect2">
<h3 class="sect2">SIMPLE_INTEGER Subtype of PLS_INTEGER</h3>
<p><a id="sthref280"></a><code dir="ltr">SIMPLE_INTEGER</code> is a predefined subtype of the <code dir="ltr">PLS_INTEGER</code> data type that has the same range as <code dir="ltr">PLS_INTEGER</code> and has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint (explained in <a href="fundamentals.htm#CIHCJJAG">"NOT NULL Constraint"</a>). It differs significantly from <code dir="ltr">PLS_INTEGER</code> in its overflow semantics.</p>
<p>If you know that a variable will never have the value <code dir="ltr">NULL</code> or need overflow checking, declare it as <code dir="ltr">SIMPLE_INTEGER</code> rather than <code dir="ltr">PLS_INTEGER</code>. Without the overhead of checking for nullness and overflow, <code dir="ltr">SIMPLE_INTEGER</code> performs significantly better than <code dir="ltr">PLS_INTEGER</code>.</p>
<p class="subhead2"><a id="LNPLS328"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHCHHBJ">SIMPLE_INTEGER Overflow Semantics</a></p>
</li>
<li>
<p><a href="#CHDBHEEE">Expressions with Both SIMPLE_INTEGER and Other Operands</a></p>
</li>
<li>
<p><a href="#CIHBAGBD">Integer Literals in SIMPLE_INTEGER Range</a></p>
</li>
</ul>
<a id="CIHCHHBJ"></a>
<div id="LNPLS321" class="sect3">
<h4 class="sect3">SIMPLE_INTEGER Overflow Semantics</h4>
<p>If and only if all operands in an expression have the data type <code dir="ltr">SIMPLE_INTEGER</code>, PL/SQL uses two's complement arithmetic and ignores overflows. Because overflows are ignored, values can wrap from positive to negative or from negative to positive; for example:</p>
<p>2<sup>30</sup> + 2<sup>30</sup> = 0x40000000 + 0x40000000 = 0x80000000 = -2<sup>31</sup></p>
<p>-2<sup>31</sup> + -2<sup>31</sup> = 0x80000000 + 0x80000000 = 0x00000000 = 0</p>
<p>For example, this block runs without errors:</p>
<pre dir="ltr">
DECLARE
  n <span class="bold">SIMPLE_INTEGER</span> := 2147483645;
BEGIN
  FOR j IN 1..4 LOOP
    n := n + 1;
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
  END LOOP;
  FOR j IN 1..4 LOOP
   n := n - 1;
   DBMS_OUTPUT.PUT_LINE(TO_CHAR(n, 'S9999999999'));
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
+2147483646
+2147483647
-2147483648
-2147483647
-2147483648
+2147483647
+2147483646
+2147483645

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="sect3" -->
<a id="CHDBHEEE"></a>
<div id="LNPLS99936" class="sect3">
<h4 class="sect3">Expressions with Both SIMPLE_INTEGER and Other Operands</h4>
<p>If an expression has both <code dir="ltr">SIMPLE_INTEGER</code> and other operands, PL/SQL implicitly converts the <code dir="ltr">SIMPLE_INTEGER</code> values to <code dir="ltr">PLS_INTEGER</code> <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>.</p>
<p>The PL/SQL compiler issues a warning when <code dir="ltr">SIMPLE_INTEGER</code> and other values are mixed in a way that might negatively impact performance by inhibiting some optimizations.</p>
</div>
<!-- class="sect3" -->
<a id="CIHBAGBD"></a>
<div id="LNPLS323" class="sect3">
<h4 class="sect3">Integer Literals in SIMPLE_INTEGER Range</h4>
<p>Integer literals in the <code dir="ltr">SIMPLE_INTEGER</code> range have the data type <code dir="ltr">SIMPLE_INTEGER</code>. However, to ensure backward compatibility, when all operands in an arithmetic expression are integer literals, PL/SQL treats the integer literals as if they were cast to <code dir="ltr">PLS_INTEGER</code>.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDEAFDJ"></a>
<div id="LNPLS99935" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">User-Defined PL/SQL Subtypes</h2>
<p><a id="sthref281"></a><a id="sthref282"></a>PL/SQL lets you define your own subtypes. The base type can be any scalar or user-defined PL/SQL data type specifier such as <code dir="ltr">CHAR</code>, <code dir="ltr">DATE</code>, or <code dir="ltr">RECORD</code> (including a previously defined user-defined subtype).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The information in this topic applies to both user-defined subtypes and the predefined subtypes listed in <a href="predefined.htm#CJAEFDAD">Appendix E, "PL/SQL Predefined Data Types"</a>.</div>
<p>Subtypes can:</p>
<ul>
<li>
<p>Provide compatibility with ANSI/ISO data types</p>
</li>
<li>
<p>Show the intended use of data items of that type</p>
</li>
<li>
<p>Detect out-of-range values</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS329"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDEDEIG">Unconstrained Subtypes</a></p>
</li>
<li>
<p><a href="#CHDBBCIE">Constrained Subtypes</a></p>
</li>
<li>
<p><a href="#CHDEEDIH">Subtypes with Base Types in Same Data Type Family</a></p>
</li>
</ul>
<a id="CHDEDEIG"></a>
<div id="LNPLS99934" class="sect2">
<h3 class="sect2">Unconstrained Subtypes</h3>
<p>An <a id="sthref283"></a><a id="sthref284"></a><span class="bold">unconstrained subtype</span> has the same set of values as its base type, so it is only another name for the base type. Therefore, unconstrained subtypes of the same base type are interchangeable with each other and with the base type. No <a id="sthref285"></a>data type conversion occurs.</p>
<p>To define an unconstrained subtype, use this syntax:</p>
<pre dir="ltr">
SUBTYPE <span class="italic">subtype_name</span> IS <span class="italic">base_type</span>
</pre>
<p>For information about <code dir="ltr"><span class="codeinlineitalic">subtype_name</span></code> and <code dir="ltr"><span class="codeinlineitalic">base_type</span></code>, see <a href="block.htm#CHDECJAH"><span class="xreftitlebold"><span class="italic">subtype_definition</span></span></a>.</p>
<p>An example of an unconstrained subtype, which PL/SQL predefines for compatibility with ANSI, is:</p>
<pre dir="ltr">
SUBTYPE "DOUBLE PRECISION" IS FLOAT
</pre>
<p>In <a href="#BABEDFGH">Example 3-6</a>, the unconstrained subtypes <code dir="ltr">Balance</code> and <code dir="ltr">Counter</code> show the intended uses of data items of their types.</p>
<div id="LNPLS330" class="example">
<p class="titleinexample"><a id="BABEDFGH"></a>Example 3-6 User-Defined Unconstrained Subtypes Show Intended Use</p>
<pre dir="ltr">
DECLARE
  <span class="bold">SUBTYPE Balance IS NUMBER</span>;

  checking_account        Balance(6,2);
  savings_account         Balance(8,2);
  certificate_of_deposit  Balance(8,2);
  max_insured  CONSTANT   Balance(8,2) := 250000.00;

  <span class="bold">SUBTYPE Counter IS NATURAL</span>;

  accounts     Counter := 1;
  deposits     Counter := 0;
  withdrawals  Counter := 0;
  overdrafts   Counter := 0;

  PROCEDURE deposit (
    account  IN OUT Balance,
    amount   IN     Balance
  ) IS
  BEGIN
    account  := account + amount;
    deposits := deposits + 1;
  END;
  
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDBBCIE"></a>
<div id="LNPLS99933" class="sect2">
<h3 class="sect2">Constrained Subtypes</h3>
<p>A <a id="sthref286"></a><a id="sthref287"></a><span class="bold">constrained subtype</span> has only a subset of the values of its base type.</p>
<p>If the base type lets you specify size, precision and scale, or a range of values, then you can specify them for its subtypes. The subtype definition syntax is:</p>
<pre dir="ltr">
SUBTYPE <span class="italic">subtype_name</span> IS <span class="italic">base_type</span>
  { <span class="italic">precision</span> [, <span class="italic">scale</span> ] | RANGE <span class="italic">low_value</span> .. <span class="italic">high_value</span> } [ NOT NULL ]
</pre>
<p>Otherwise, the only constraint that you can put on its subtypes is <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> (described in <a href="fundamentals.htm#CIHCJJAG">"NOT NULL Constraint"</a>):</p>
<pre dir="ltr">
SUBTYPE <span class="italic">subtype_name</span> IS <span class="italic">base_type</span> [ NOT NULL ]
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The only base types for which you can specify a range of values are <code dir="ltr">PLS_INTEGER</code> and its subtypes (both predefined and user-defined).</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
Syntax diagram <a href="block.htm#CHDCIGAD">"<span class="italic">subtype_definition</span> ::="</a> and semantic description <a href="block.htm#CHDECJAH">"<span class="italic">subtype_definition</span>"</a>.</div>
<p>In <a href="#CJABHGBG">Example 3-7</a>, the constrained subtype <code dir="ltr">Balance</code> detects out-of-range values.</p>
<div id="LNPLS374" class="example">
<p class="titleinexample"><a id="CJABHGBG"></a>Example 3-7 User-Defined Constrained Subtype Detects Out-of-Range Values</p>
<pre dir="ltr">
DECLARE
  <span class="bold">SUBTYPE Balance IS NUMBER(8,2)</span>;
 
  checking_account  Balance;
  <span class="bold">savings_account   Balance</span>;
 
BEGIN
  checking_account := 2000.00;
  <span class="bold">savings_account  := 1000000.00</span>;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
<span class="bold">ORA-06502: PL/SQL: numeric or value error: number precision too large</span>
ORA-06512: at line 9
</pre></div>
<!-- class="example" -->
<p>A <a id="sthref288"></a>constrained subtype can be implicitly converted to its base type, but the base type can be implicitly converted to the constrained subtype only if the value does not violate a constraint of the subtype (see <a href="#CHDBJFJE">Example 3-5</a>).</p>
<p>A constrained subtype can be implicitly converted to another constrained subtype with the same base type only if the source value does not violate a constraint of the target subtype.</p>
<p>In <a href="#CHDDEEJC">Example 3-8</a>, the three constrained subtypes have the same base type. The first two subtypes can be implicitly converted to the third subtype, but not to each other.</p>
<div id="LNPLS331" class="example">
<p class="titleinexample"><a id="CHDDEEJC"></a>Example 3-8 Implicit Conversion Between Constrained Subtypes with Same Base Type</p>
<pre dir="ltr">
DECLARE
  SUBTYPE Digit        IS PLS_INTEGER RANGE 0..9;
  SUBTYPE Double_digit IS PLS_INTEGER RANGE 10..99;
  SUBTYPE Under_100    IS PLS_INTEGER RANGE 0..99;
 
  d   Digit        :=  4;
  dd  Double_digit := 35;
  u   Under_100;
BEGIN
  u := d;   -- Succeeds; Under_100 range includes Digit range
  u := dd;  -- Succeeds; Under_100 range includes Double_digit range
  dd := d;  -- Raises error; Double_digit range does not include Digit range
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error
ORA-06512: at line 12
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="subprograms.htm#i4100">"Formal and Actual Subprogram Parameters"</a> for information about subprogram parameters of constrained data types</div>
</div>
<!-- class="sect2" -->
<a id="CHDEEDIH"></a>
<div id="LNPLS99932" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Subtypes with Base Types in Same Data Type Family</h3>
<p><a id="sthref289"></a><a id="sthref290"></a>If two subtypes have different base types in the same data type family, then one subtype can be implicitly converted to the other only if the source value does not violate a constraint of the target subtype. (For the predefined PL/SQL data types and subtypes, grouped by data type family, see <a href="predefined.htm#CJAEFDAD">Appendix E, "PL/SQL Predefined Data Types"</a>.)</p>
<p>In <a href="#CHDIIGEA">Example 3-9</a>, the subtypes <code dir="ltr">Word</code> and <code dir="ltr">Text</code> have different base types in the same data type family. The first assignment statement implicitly converts a <code dir="ltr">Word</code> value to <code dir="ltr">Text</code>. The second assignment statement implicitly converts a <code dir="ltr">Text</code> value to <code dir="ltr">Word</code>. The third assignment statement cannot implicitly convert the <code dir="ltr">Text</code> value to <code dir="ltr">Word</code>, because the value is too long.</p>
<div id="LNPLS337" class="example">
<p class="titleinexample"><a id="CHDIIGEA"></a>Example 3-9 Implicit Conversion Between Subtypes with Base Types in Same Family</p>
<pre dir="ltr">
DECLARE
  SUBTYPE Word IS CHAR(6);
  SUBTYPE Text IS VARCHAR2(15);
 
  verb       Word := 'run';
  sentence1  Text;
  sentence2  Text := 'Hurry!';
  sentence3  Text := 'See Tom run.';
 
BEGIN
  sentence1 := verb;  -- 3-character value, 15-character limit
  verb := sentence2;  -- 5-character value, 6-character limit
  verb := sentence3;  -- 12-character value, 6-character limit
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: character string buffer too small
ORA-06512: at line 13
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="fundamentals.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="controlstatements.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
