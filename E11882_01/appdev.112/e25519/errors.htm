<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Error Handling</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:57Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="packages.htm" title="Previous" type="text/html" />
<link rel="Next" href="tuning.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">18/99</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='errors'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="LNPLS007" class="chapter"><a id="CHDFGBJI"></a>
<h1 class="chapter"><span class="secnum">11</span> PL/SQL Error Handling</h1>
<p><a id="sthref871"></a>This chapter explains how to handle PL/SQL compile-time warnings and PL/SQL runtime errors. The latter are called <span class="bold">exceptions</span>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The language of warning and error messages depends on the <code >NLS_LANGUAGE</code> parameter. For information about this parameter, see <a class="olink NLSPG199" href="../../server.112/e10729/ch3globenv.htm#NLSPG199"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</div>
<p class="subhead2"><a id="LNPLS748"></a>Topics</p>
<ul>
<li>
<p><a href="#i9084">Compile-Time Warnings</a></p>
</li>
<li>
<p><a href="#i3336">Overview of Exception Handling</a></p>
</li>
<li>
<p><a href="#BABIIEFC">Internally Defined Exceptions</a></p>
</li>
<li>
<p><a href="#i9355">Predefined Exceptions</a></p>
</li>
<li>
<p><a href="#i3329">User-Defined Exceptions</a></p>
</li>
<li>
<p><a href="#BABHCBIG">Redeclared Predefined Exceptions</a></p>
</li>
<li>
<p><a href="#BABFHFBI">Raising Exceptions Explicitly</a></p>
</li>
<li>
<p><a href="#i3365">Exception Propagation</a></p>
</li>
<li>
<p><a href="#i1889">Unhandled Exceptions</a></p>
</li>
<li>
<p><a href="#i8845">Error Code and Error Message Retrieval</a></p>
</li>
<li>
<p><a href="#BABGFCDD">Continuing Execution After Handling Exceptions</a></p>
</li>
<li>
<p><a href="#BCFJCECJ">Retrying Transactions After Handling Exceptions</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="triggers.htm#CIHGJCFI">"Exception Handling in Triggers"</a></p>
</li>
<li>
<p><a href="tuning.htm#i49099">"Handling FORALL Exceptions After FORALL Statement Completes"</a></p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
If you have problems creating or running PL/SQL code, check the Oracle Database <a id="sthref872"></a>trace files. The <a id="sthref873"></a><code dir="ltr">USER_DUMP_DEST</code> initialization parameter specifies the current location of the trace files. You can find the value of this parameter by issuing <code dir="ltr">SHOW</code> <code dir="ltr">PARAMETER</code> <code dir="ltr">USER_DUMP_DEST</code>. For more information about trace files, see <a class="olink PFGRF010" href="../../server.112/e41573/sqltrace.htm#PFGRF010"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</div>
<a id="i9084"></a>
<div id="LNPLS00711" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Compile-Time Warnings</h2>
<p>While compiling stored PL/SQL units, the PL/SQL compiler generates <a id="sthref874"></a><a id="sthref875"></a>warnings for conditions that are not serious enough to cause errors and prevent compilation&mdash;for example, using a deprecated PL/SQL feature.</p>
<p>To see warnings (and errors) generated during compilation, either query the static data dictionary view <code dir="ltr">*_ERRORS</code> (described in <a class="olink REFRN20065" href="../../server.112/e40402/statviews_1086.htm#REFRN20065"><span class="italic">Oracle Database Reference</span></a>) or, in the SQL*Plus environment, use the command <code dir="ltr">SHOW</code> <code dir="ltr">ERRORS</code>.</p>
<p>The message code of a PL/SQL warning has the form PLW-<span class="italic">nnnnn</span>. For the message codes of all PL/SQL warnings, see <a class="olink ERRMG" href="../../server.112/e17766/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>.</p>
<p><a href="#BCFFJBII">Table 11-1</a> summarizes the categories of warnings.</p>
<div id="LNPLS858" class="tblformal">
<p class="titleintable"><a id="sthref876"></a><a id="BCFFJBII"></a>Table 11-1 Compile-Time Warning Categories</p>
<table class="cellalignment1092" title="Compile-Time Warning Categories" summary="This table summarizes the categories of PL/SQL warnings." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t5">Category</th>
<th class="cellalignment1090" id="r1c2-t5">Description</th>
<th class="cellalignment1090" id="r1c3-t5">Example</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t5" headers="r1c1-t5">
<p><a id="sthref877"></a><code dir="ltr">SEVERE</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c2-t5">
<p>Condition might cause unexpected action or wrong results.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c3-t5">
<p>Aliasing problems with parameters</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t5" headers="r1c1-t5">
<p><a id="sthref878"></a><code dir="ltr">PERFORMANCE</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c2-t5">
<p>Condition might cause performance problems.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c3-t5">
<p>Passing a <code dir="ltr">VARCHAR2</code> value to a <code dir="ltr">NUMBER</code> column in an <code dir="ltr">INSERT</code> statement</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t5" headers="r1c1-t5">
<p><a id="sthref879"></a><code dir="ltr">INFORMATIONAL</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c2-t5">
<p>Condition does not affect performance or correctness, but you might want to change it to make the code more maintainable.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c3-t5">
<p>Code that can never run</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>By setting the compilation parameter <a id="sthref880"></a><code dir="ltr">PLSQL_WARNINGS</code>, you can:</p>
<ul>
<li>
<p>Enable and disable all warnings, one or more categories of warnings, or specific warnings</p>
</li>
<li>
<p>Treat specific warnings as errors (so that those conditions must be corrected before you can compile the PL/SQL unit)</p>
</li>
</ul>
<p>You can set the value of <code dir="ltr">PLSQL_WARNINGS</code> for:</p>
<ul>
<li>
<p>Your Oracle database instance</p>
<p>Use the <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code> statement, described in <a class="olink SQLRF00902" href="../../server.112/e41084/statements_2014.htm#SQLRF00902"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p>Your session</p>
<p>Use the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement, described in <a class="olink SQLRF00901" href="../../server.112/e41084/statements_2013.htm#SQLRF00901"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p>A stored PL/SQL unit</p>
<p>Use an <code dir="ltr">ALTER</code> statement from <a href="sqlstatements.htm#BABEFIJF">"ALTER Statements"</a> with its <code dir="ltr"><span class="codeinlineitalic">compiler_parameters_clause</span></code>. For more information about PL/SQL units and compiler parameters, see <a href="overview.htm#BABBDFJF">"PL/SQL Units and Compilation Parameters"</a>.</p>
</li>
</ul>
<p>In any of the preceding <code dir="ltr">ALTER</code> statements, you set the value of <code dir="ltr">PLSQL_WARNINGS</code> with this syntax:</p>
<pre dir="ltr">
PLSQL_WARNINGS = '<span class="italic">value_clause</span>' [, '<span class="italic">value_clause</span>' ] ...
</pre>
<p>For the syntax of <code dir="ltr"><span class="codeinlineitalic">value_clause</span></code>, see <a class="olink REFRN10249" href="../../server.112/e40402/initparams200.htm#REFRN10249"><span class="italic">Oracle Database Reference</span></a>.</p>
<p><a href="#CHDIDDFJ">Example 11-1</a> shows several <code dir="ltr">ALTER</code> statements that set the value of <code dir="ltr">PLSQL_WARNINGS</code>.</p>
<div id="LNPLS860" class="example">
<p class="titleinexample"><a id="CHDIDDFJ"></a>Example 11-1 Setting Value of PLSQL_WARNINGS Compilation Parameter</p>
<p>For the session, enable all warnings&mdash;highly recommended during development:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_WARNINGS='ENABLE:ALL';
</pre>
<p>For the session, enable <code dir="ltr">PERFORMANCE</code> warnings:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_WARNINGS='ENABLE:PERFORMANCE';
</pre>
<p>For the procedure <code dir="ltr">loc_var</code>, enable <code dir="ltr">PERFORMANCE</code> warnings, and reuse settings:</p>
<pre dir="ltr">
ALTER PROCEDURE loc_var
  COMPILE PLSQL_WARNINGS='ENABLE:PERFORMANCE'
  REUSE SETTINGS;
</pre>
<p>For the session, enable <code dir="ltr">SEVERE</code> warnings, disable <code dir="ltr">PERFORMANCE</code> warnings, and treat PLW-06002 warnings as errors:</p>
<pre dir="ltr">
ALTER SESSION
  SET PLSQL_WARNINGS='ENABLE:SEVERE', 'DISABLE:PERFORMANCE', 'ERROR:06002';
</pre>
<p>For the session, disable all warnings:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_WARNINGS='DISABLE:ALL';
</pre></div>
<!-- class="example" -->
<p>To <a id="sthref881"></a>display the current value of <code dir="ltr">PLSQL_WARNINGS</code>, query the static data dictionary view <code dir="ltr">ALL_PLSQL_OBJECT_SETTINGS</code>, described in <a class="olink REFRN20385" href="../../server.112/e40402/statviews_2009.htm#REFRN20385"><span class="italic">Oracle Database Reference</span></a>.</p>
<a id="BCFCBIHF"></a>
<div id="LNPLS861" class="sect2">
<h3 class="sect2">DBMS_WARNING Package</h3>
<p>If you are writing PL/SQL units in a development environment that compiles them (such as SQL*Plus), you can <a id="sthref882"></a>display and <a id="sthref883"></a>set the value of <code dir="ltr">PLSQL_WARNINGS</code> by invoking subprograms in the <a id="sthref884"></a><code dir="ltr">DBMS_WARNING</code> package.</p>
<p><a href="#BABDGEJA">Example 11-2</a> uses an <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement to disable all warning messages for the session and then compiles a procedure that has unreachable code. The procedure compiles without warnings. Next, the example enables all warnings for the session by invoking <code dir="ltr">DBMS_WARNING.set_warning_setting_string</code> and displays the value of <code dir="ltr">PLSQL_WARNINGS</code> by invoking <code dir="ltr">DBMS_WARNING.get_warning_setting_string</code>. Finally, the example recompiles the procedure, and the compiler generates a warning about the unreachable code.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Unreachable code could represent a mistake or be intentionally hidden by a debug flag.</div>
<div id="LNPLS862" class="example">
<p class="titleinexample"><a id="BABDGEJA"></a>Example 11-2 Displaying and Setting PLSQL_WARNINGS with DBMS_WARNING Subprograms</p>
<p>Disable all warning messages for this session:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_WARNINGS='DISABLE:ALL';
</pre>
<p>With warnings disabled, this procedure compiles with no warnings:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE unreachable_code AUTHID DEFINER AS
  x CONSTANT BOOLEAN := TRUE;
BEGIN
  IF x THEN
    DBMS_OUTPUT.PUT_LINE('TRUE');
  ELSE
    DBMS_OUTPUT.PUT_LINE('FALSE');
  END IF;
END unreachable_code;
/
</pre>
<p>Enable all warning messages for this session:</p>
<pre dir="ltr">
<span class="bold">CALL DBMS_WARNING.set_warning_setting_string ('ENABLE:ALL', 'SESSION');</span>
</pre>
<p>Check warning setting:</p>
<pre dir="ltr">
<span class="bold">SELECT DBMS_WARNING.get_warning_setting_string() FROM DUAL;</span>
</pre>
<p>Result:</p>
<pre dir="ltr">
DBMS_WARNING.GET_WARNING_SETTING_STRING()
-----------------------------------------
 
ENABLE:ALL
 
1 row selected.
</pre>
<p>Recompile procedure:</p>
<pre dir="ltr">
ALTER PROCEDURE unreachable_code COMPILE;
</pre>
<p>Result:</p>
<pre dir="ltr">
SP2-0805: Procedure altered with compilation warnings
</pre>
<p>Show errors:</p>
<pre dir="ltr">
SHOW ERRORS
</pre>
<p>Result:</p>
<pre dir="ltr">
Errors for PROCEDURE UNREACHABLE_CODE:
 
LINE/COL ERROR
-------- -----------------------------------------------------------------
7/5      PLW-06002: Unreachable code
</pre></div>
<!-- class="example" -->
<p><code dir="ltr">DBMS_WARNING</code> subprograms are useful when you are compiling a complex application composed of several nested SQL*Plus scripts, where different subprograms need different <code dir="ltr">PLSQL_WARNINGS</code> settings. With <code dir="ltr">DBMS_WARNING</code> subprograms, you can save the current <code dir="ltr">PLSQL_WARNINGS</code> setting, change the setting to compile a particular set of subprograms, and then restore the setting to its original value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS370" href="../../appdev.112/e40758/d_warn.htm#ARPLS370"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code dir="ltr">DBMS_WARNING</code> package</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i3336"></a>
<div id="LNPLS00701" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Overview of Exception Handling</h2>
<p><a id="sthref885"></a>Exceptions (PL/SQL runtime errors) can arise from design faults, coding mistakes, hardware failures, and many other sources. You cannot anticipate all possible exceptions, but you can write <a id="sthref886"></a>exception handlers that let your program to continue to operate in their presence.</p>
<p>Any PL/SQL block can have an exception-handling part, which can have one or more exception handlers. For example, an exception-handling part could have this syntax:</p>
<pre dir="ltr">
EXCEPTION
  WHEN <span class="italic">ex_name_1</span> THEN <span class="italic">statements_1</span>                 -- Exception handler
  WHEN <span class="italic">ex_name_2</span> OR <span class="italic">ex_name_3</span> THEN <span class="italic">statements_2</span>  -- Exception handler
  WHEN OTHERS THEN <span class="italic">statements_3</span>                      -- Exception handler
END;
</pre>
<p>In the preceding syntax example, <code dir="ltr"><span class="codeinlineitalic">ex_name_</span></code><code dir="ltr">n</code> is the name of an exception and <code dir="ltr"><span class="codeinlineitalic">statements_</span></code><code dir="ltr">n</code> is one or more statements. (For complete syntax and semantics, see <a href="exception_handler.htm#i33826">"Exception Handler"</a>.)</p>
<p>When an exception is raised in the executable part of the block, the executable part stops and control transfers to the exception-handling part. If <code dir="ltr"><span class="codeinlineitalic">ex_name_1</span></code> was raised, then <code dir="ltr"><span class="codeinlineitalic">statements_1</span></code> run. If either <code dir="ltr"><span class="codeinlineitalic">ex_name_2</span></code> or <code dir="ltr"><span class="codeinlineitalic">ex_name_3</span></code> was raised, then <code dir="ltr"><span class="codeinlineitalic">statements_2</span></code> run. If any other exception was raised, then <code dir="ltr"><span class="codeinlineitalic">statements_3</span></code> run.</p>
<p>After an exception handler runs, control transfers to the next statement of the enclosing block. If there is no enclosing block, then:</p>
<ul>
<li>
<p>If the exception handler is in a subprogram, then control returns to the invoker, at the statement after the invocation.</p>
</li>
<li>
<p>If the exception handler is in an anonymous block, then control transfers to the host environment (for example, SQL*Plus)</p>
</li>
</ul>
<p>If an exception is raised in a block that has no exception handler for it, then the exception propagates. That is, the exception reproduces itself in successive enclosing blocks until a block has a handler for it or there is no enclosing block (for more information, see <a href="#i3365">"Exception Propagation"</a>). If there is no handler for the exception, then PL/SQL returns an unhandled exception error to the invoker or host environment, which determines the outcome (for more information, see <a href="#i1889">"Unhandled Exceptions"</a>).</p>
<p class="subhead2"><a id="LNPLS749"></a>Topics</p>
<ul>
<li>
<p><a href="#BABFIEBF">Exception Categories</a></p>
</li>
<li>
<p><a href="#i3880">Advantages of Exception Handlers</a></p>
</li>
<li>
<p><a href="#BCFEBJBF">Guidelines for Avoiding and Handling Exceptions</a></p>
</li>
</ul>
<a id="BABFIEBF"></a>
<div id="LNPLS99872" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Exception Categories</h3>
<p>The exception categories are:</p>
<ul>
<li>
<p><span class="bold">Internally defined</span></p>
<p>The runtime system raises internally defined exceptions implicitly (automatically). Examples of internally defined exceptions are ORA-00060 (deadlock detected while waiting for resource) and ORA-27102 (out of memory).</p>
<p>An internally defined exception always has an error code, but does not have a name unless PL/SQL gives it one or you give it one.</p>
<p>For more information, see <a href="#BABIIEFC">"Internally Defined Exceptions"</a>.</p>
</li>
<li>
<p><span class="bold">Predefined</span></p>
<p>A predefined exception is an internally defined exception that PL/SQL has given a name. For example, ORA-06500 (PL/SQL: storage error) has the predefined name <code dir="ltr">STORAGE_ERROR</code>.</p>
<p>For more information, see <a href="#i9355">"Predefined Exceptions"</a>.</p>
</li>
<li>
<p><span class="bold">User-defined</span></p>
<p>You can declare your own exceptions in the declarative part of any PL/SQL anonymous block, subprogram, or package. For example, you might declare an exception named <code dir="ltr">insufficient_funds</code> to flag overdrawn bank accounts.</p>
<p>You must raise user-defined exceptions explicitly.</p>
<p>For more information, see <a href="#i3329">"User-Defined Exceptions"</a>.</p>
</li>
</ul>
<p><a href="#BABEDCFJ">Table 11-2</a> summarizes the exception categories.</p>
<div id="LNPLS757" class="tblformal">
<p class="titleintable"><a id="sthref887"></a><a id="BABEDCFJ"></a>Table 11-2 Exception Categories</p>
<table class="cellalignment1092" title="Exception Categories" summary="This table summarizes the information in the preceding text. It has three rows, one for each exception category, and six columns." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t8">Category</th>
<th class="cellalignment1090" id="r1c2-t8">Definer</th>
<th class="cellalignment1090" id="r1c3-t8">Has Error Code</th>
<th class="cellalignment1090" id="r1c4-t8">Has Name</th>
<th class="cellalignment1090" id="r1c5-t8">Raised Implicitly</th>
<th class="cellalignment1090" id="r1c6-t8">Raised Explicitly</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t8" headers="r1c1-t8">
<p>Internally defined</p>
</td>
<td class="cellalignment1091" headers="r2c1-t8 r1c2-t8">
<p>Runtime system</p>
</td>
<td class="cellalignment1091" headers="r2c1-t8 r1c3-t8">
<p>Always</p>
</td>
<td class="cellalignment1091" headers="r2c1-t8 r1c4-t8">
<p>Only if you assign one</p>
</td>
<td class="cellalignment1091" headers="r2c1-t8 r1c5-t8">
<p>Yes</p>
</td>
<td class="cellalignment1091" headers="r2c1-t8 r1c6-t8">
<p>Optionally<a id="BABDABEJ" href="#BABDABEJ" onclick='footdisplay(1,"For details, see \u003ca target=\"errors\" href=\"#i3355\"\u003e\"Raising Internally Defined Exception with RAISE Statement\"\u003c/a\u003e.")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t8" headers="r1c1-t8">
<p>Predefined</p>
</td>
<td class="cellalignment1091" headers="r3c1-t8 r1c2-t8">
<p>Runtime system</p>
</td>
<td class="cellalignment1091" headers="r3c1-t8 r1c3-t8">
<p>Always</p>
</td>
<td class="cellalignment1091" headers="r3c1-t8 r1c4-t8">
<p>Always</p>
</td>
<td class="cellalignment1091" headers="r3c1-t8 r1c5-t8">
<p>Yes</p>
</td>
<td class="cellalignment1091" headers="r3c1-t8 r1c6-t8">
<p>Optionally<a id="sthref888" href="#sthref888" onclick='footdisplay(1,"For details, see \u003ca target=\"errors\" href=\"#i3355\"\u003e\"Raising Internally Defined Exception with RAISE Statement\"\u003c/a\u003e.")'><sup class="footnotenumber">Footref&nbsp;1</sup></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t8" headers="r1c1-t8">
<p>User-defined</p>
</td>
<td class="cellalignment1091" headers="r4c1-t8 r1c2-t8">
<p>User</p>
</td>
<td class="cellalignment1091" headers="r4c1-t8 r1c3-t8">
<p>Only if you assign one</p>
</td>
<td class="cellalignment1091" headers="r4c1-t8 r1c4-t8">
<p>Always</p>
</td>
<td class="cellalignment1091" headers="r4c1-t8 r1c5-t8">
<p>No</p>
</td>
<td class="cellalignment1091" headers="r4c1-t8 r1c6-t8">
<p>Always</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>For details, see <a href="#i3355">"Raising Internally Defined Exception with RAISE Statement"</a>.</p>
<p>For a named exception, you can write a specific exception handler, instead of handling it with an <code dir="ltr">OTHERS</code> exception handler. A specific exception handler is more efficient than an <code dir="ltr">OTHERS</code> exception handler, because the latter must invoke a function to determine which exception it is handling. For details, see <a href="#i8845">"Error Code and Error Message Retrieval"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i3880"></a>
<div id="LNPLS00702" class="sect2">
<h3 class="sect2">Advantages of Exception Handlers</h3>
<p>Using exception handlers for error-handling makes programs easier to write and understand, and reduces the likelihood of unhandled exceptions.</p>
<p>Without exception handlers, you must check for every possible error, everywhere that it might occur, and then handle it. It is easy to overlook a possible error or a place where it might occur, especially if the error is not immediately detectable (for example, bad data might be undetectable until you use it in a calculation). Error-handling code is scattered throughout the program.</p>
<p>With exception handlers, you need not know every possible error or everywhere that it might occur. You need only include an exception-handling part in each block where errors might occur. In the exception-handling part, you can include exception handlers for both specific and unknown errors. If an error occurs anywhere in the block (including inside a sub-block), then an exception handler handles it. Error-handling code is isolated in the exception-handling parts of the blocks.</p>
<p>In <a href="#BABFBHGA">Example 11-3</a>, a procedure uses a single exception handler to handle the predefined exception <code dir="ltr">NO_DATA_FOUND</code>, which can occur in either of two <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statements.</p>
<div id="LNPLS828" class="example">
<p class="titleinexample"><a id="BABFBHGA"></a>Example 11-3 Single Exception Handler for Multiple Exceptions</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE select_item (
  t_column VARCHAR2,
  t_name   VARCHAR2
) AUTHID DEFINER
IS
  temp VARCHAR2(30);
BEGIN
  temp := t_column;  -- For error message if next SELECT fails
 
  -- Fails if table t_name does not have column t_column:
 
  SELECT COLUMN_NAME INTO temp
  FROM USER_TAB_COLS 
  WHERE TABLE_NAME = UPPER(t_name)
  AND COLUMN_NAME = UPPER(t_column);
 
  temp := t_name;  -- For error message if next SELECT fails
 
  -- Fails if there is no table named t_name:
 
  SELECT OBJECT_NAME INTO temp
  FROM USER_OBJECTS
  WHERE OBJECT_NAME = UPPER(t_name)
  AND OBJECT_TYPE = 'TABLE';
 
EXCEPTION
  <span class="bold">WHEN NO_DATA_FOUND THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE ('No Data found for SELECT on ' || temp);</span>
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE ('Unexpected error');
    RAISE;
END;
/
</pre>
<p>Invoke procedure (there is a <code dir="ltr">DEPARTMENTS</code> table, but it does not have a <code dir="ltr">LAST_NAME</code> column):</p>
<pre dir="ltr">
BEGIN
  select_item('departments', 'last_name');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">No Data found for SELECT on departments</span>
</pre>
<p>Invoke procedure (there is no <code dir="ltr">EMP</code> table):</p>
<pre dir="ltr">
BEGIN
  select_item('emp', 'last_name');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">No Data found for SELECT on emp</span>
</pre></div>
<!-- class="example" -->
<p>If multiple statements use the same exception handler, and you want to know which statement failed, you can use <a id="sthref889"></a><a id="sthref890"></a><a id="sthref891"></a>locator variables, as in <a href="#BCFCFBDD">Example 11-4</a>.</p>
<div id="LNPLS856" class="example">
<p class="titleinexample"><a id="BCFCFBDD"></a>Example 11-4 Locator Variables for Statements that Share Exception Handler</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE loc_var AUTHID DEFINER IS
  stmt_no  POSITIVE;
  name_    VARCHAR2(100);
BEGIN
  <span class="bold">stmt_no := 1;</span>

  SELECT table_name INTO name_
  FROM user_tables
  WHERE table_name LIKE 'ABC%';

  <span class="bold">stmt_no := 2;</span>

  SELECT table_name INTO name_
  FROM user_tables
  WHERE table_name LIKE 'XYZ%';
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('Table name not found in query ' || <span class="bold">stmt_no</span>);
END;
/
CALL loc_var();
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">Table name not found in query 1</span>
</pre></div>
<!-- class="example" -->
<p>You determine the precision of your error-handling code. You can have a single exception handler for all division-by-zero errors, bad array indexes, and so on. You can also check for errors in a single statement by putting that statement inside a block with its own exception handler.</p>
</div>
<!-- class="sect2" -->
<a id="BCFEBJBF"></a>
<div id="LNPLS00712" class="sect2">
<h3 class="sect2">Guidelines for Avoiding and Handling Exceptions</h3>
<p>To make your programs as reliable and safe as possible:</p>
<ul>
<li>
<p>Use both error-checking code and exception handlers.</p>
<p>Use error-checking code wherever bad input data can cause an error. Examples of bad input data are incorrect or null actual parameters and queries that return no rows or more rows than you expect. Test your code with different combinations of bad input data to see what potential errors arise.</p>
<p>Sometimes you can use error-checking code to avoid raising an exception, as in <a href="#CHDIFEDH">Example 11-7</a>.</p>
</li>
<li>
<p>Add exception handlers wherever errors can occur.</p>
<p>Errors are especially likely during arithmetic calculations, string manipulation, and database operations. Errors can also arise from problems that are independent of your code&mdash;for example, disk storage or memory hardware failure&mdash;but your code still must take corrective action.</p>
</li>
<li>
<p>Design your programs to work when the database is not in the state you expect.</p>
<p>For example, a table you query might have columns added or deleted, or their types might have changed. You can avoid problems by declaring scalar variables with <code dir="ltr">%TYPE</code> qualifiers and record variables to hold query results with <code dir="ltr">%ROWTYPE</code> qualifiers.</p>
</li>
<li>
<p>Whenever possible, write exception handlers for named exceptions instead of using <code dir="ltr">OTHERS</code> exception handlers.</p>
<p>Learn the names and causes of the predefined exceptions. If you know that your database operations might raise specific internally defined exceptions that do not have names, then give them names so that you can write exception handlers specifically for them.</p>
</li>
<li>
<p>Have your exception handlers output debugging information.</p>
<p>If you store the debugging information in a separate table, do it with an autonomous routine, so that you can commit your debugging information even if you roll back the work that the main subprogram did. For information about autonomous routines, see <a href="autotransaction_pragma.htm#i32731">"AUTONOMOUS_TRANSACTION Pragma"</a>.</p>
</li>
<li>
<p>For each exception handler, carefully decide whether to have it commit the transaction, roll it back, or let it continue.</p>
<p>Regardless of the severity of the error, you want to leave the database in a consistent state and avoid storing bad data.</p>
</li>
<li>
<p>Avoid unhandled exceptions by including an <code dir="ltr">OTHERS</code> exception handler at the top level of every PL/SQL program.</p>
<p>Make the last statement in the <code dir="ltr">OTHERS</code> exception handler either <code dir="ltr">RAISE</code> or an invocation of the <code dir="ltr">RAISE_APPLICATION_ERROR</code> procedure. (If you do not follow this practice, and PL/SQL warnings are enabled, then you get PLW-06009.) For information about <code dir="ltr">RAISE</code> or an invocation of the <code dir="ltr">RAISE_APPLICATION_ERROR</code>, see <a href="#BABFHFBI">"Raising Exceptions Explicitly"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIIEFC"></a>
<div id="LNPLS99871" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Internally Defined Exceptions</h2>
<p><a id="sthref892"></a><span class="bold">Internally defined exceptions</span> (ORA-<span class="italic">n</span> errors) are described in <a class="olink ERRMG" href="../../server.112/e17766/toc.htm"><span class="italic">Oracle Database Error Messages</span></a>. The runtime system raises them implicitly (automatically).</p>
<p>An internally defined exception does not have a name unless either PL/SQL gives it one (see <a href="#i9355">"Predefined Exceptions"</a>) or you give it one.</p>
<p>If you know that your database operations might raise specific internally defined exceptions that do not have names, then give them names so that you can write exception handlers specifically for them. Otherwise, you can handle them only with <code dir="ltr">OTHERS</code> exception handlers.</p>
<p>To give a <a id="sthref893"></a><a id="sthref894"></a>name to an internally defined exception, do the following in the declarative part of the appropriate anonymous block, subprogram, or package. (To determine the appropriate block, see <a href="#i3365">"Exception Propagation"</a>.)</p>
<ol>
<li>
<p>Declare the name.</p>
<p>An exception name declaration has this syntax:</p>
<pre dir="ltr">
<span class="italic">exception_name</span> EXCEPTION;
</pre>
<p>For semantic information, see <a href="exception_declaration.htm#CJABADFA">"Exception Declaration"</a>.</p>
</li>
<li>
<p>Associate the name with the error code of the internally defined exception.</p>
<p>The syntax is:</p>
<pre dir="ltr">
PRAGMA EXCEPTION_INIT (<span class="italic">exception_name</span>, <span class="italic">error_code</span>)
</pre>
<p>For semantic information, see <a href="exceptioninit_pragma.htm#i33787">"EXCEPTION_INIT Pragma"</a>.</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
An internally defined exception with a user-declared name is still an internally defined exception, not a user-defined exception.</div>
<p><a href="#BABBDJAB">Example 11-5</a> gives the name <code dir="ltr">deadlock_detected</code> to the internally defined exception ORA-00060 (deadlock detected while waiting for resource) and uses the name in an exception handler.</p>
<div id="LNPLS761" class="example">
<p class="titleinexample"><a id="BABBDJAB"></a>Example 11-5 Naming Internally Defined Exception</p>
<pre dir="ltr">
DECLARE
  <span class="bold">deadlock_detected EXCEPTION;</span>
  <span class="bold">PRAGMA EXCEPTION_INIT(deadlock_detected, -60);</span>
BEGIN
  ...
EXCEPTION
  <span class="bold">WHEN deadlock_detected THEN</span>
    ...
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i3355">"Raising Internally Defined Exception with RAISE Statement"</a></div>
</div>
<!-- class="sect1" -->
<a id="i9355"></a>
<div id="LNPLS00703" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Predefined Exceptions</h2>
<p><a id="sthref895"></a><span class="bold">Predefined exceptions</span> are internally defined exceptions that have predefined names, which PL/SQL declares globally in the package <code dir="ltr">STANDARD</code>. The runtime system raises predefined exceptions implicitly (automatically). Because predefined exceptions have names, you can write exception handlers specifically for them.</p>
<p><a href="#CIHHGGDI">Table 11-3</a> lists the names and error codes of the predefined exceptions.</p>
<div id="LNPLS762" class="tblformal">
<p class="titleintable"><a id="sthref896"></a><a id="CIHHGGDI"></a>Table 11-3 PL/SQL Predefined Exceptions</p>
<table class="cellalignment1092" title="PL/SQL Predefined Exceptions" summary="This table gives the names and error numbers of the PL/SQL predefined exceptions." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t11"><span class="bold">Exception Name</span></th>
<th class="cellalignment1090" id="r1c2-t11">Error Code</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t11" headers="r1c1-t11">
<p><a id="sthref897"></a><code dir="ltr">ACCESS_INTO_NULL</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t11 r1c2-t11">
<p><code dir="ltr">-6530</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t11" headers="r1c1-t11">
<p><a id="sthref898"></a><code dir="ltr">CASE_NOT_FOUND</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t11 r1c2-t11">
<p><code dir="ltr">-6592</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t11" headers="r1c1-t11">
<p><a id="sthref899"></a><code dir="ltr">COLLECTION_IS_NULL</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t11 r1c2-t11">
<p><code dir="ltr">-6531</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t11" headers="r1c1-t11">
<p><a id="sthref900"></a><code dir="ltr">CURSOR_ALREADY_OPEN</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t11 r1c2-t11">
<p><code dir="ltr">-6511</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t11" headers="r1c1-t11">
<p><a id="sthref901"></a><code dir="ltr">DUP_VAL_ON_INDEX</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t11 r1c2-t11">
<p><code dir="ltr">-1</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t11" headers="r1c1-t11">
<p><a id="sthref902"></a><code dir="ltr">INVALID_CURSOR</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t11 r1c2-t11">
<p><code dir="ltr">-1001</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t11" headers="r1c1-t11">
<p><a id="sthref903"></a><code dir="ltr">INVALID_NUMBER</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t11 r1c2-t11">
<p><code dir="ltr">-1722</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t11" headers="r1c1-t11">
<p><a id="sthref904"></a><code dir="ltr">LOGIN_DENIED</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t11 r1c2-t11">
<p><code dir="ltr">-1017</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t11" headers="r1c1-t11">
<p><a id="sthref905"></a><code dir="ltr">NO_DATA_FOUND</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t11 r1c2-t11">
<p><code dir="ltr">+100</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r11c1-t11" headers="r1c1-t11">
<p><a id="sthref906"></a><code dir="ltr">NO_DATA_NEEDED</code></p>
</td>
<td class="cellalignment1091" headers="r11c1-t11 r1c2-t11">
<p><code dir="ltr">-6548</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r12c1-t11" headers="r1c1-t11">
<p><a id="sthref907"></a><code dir="ltr">NOT_LOGGED_ON</code></p>
</td>
<td class="cellalignment1091" headers="r12c1-t11 r1c2-t11">
<p><code dir="ltr">-1012</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r13c1-t11" headers="r1c1-t11">
<p><a id="sthref908"></a><code dir="ltr">PROGRAM_ERROR</code></p>
</td>
<td class="cellalignment1091" headers="r13c1-t11 r1c2-t11">
<p><code dir="ltr">-6501</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r14c1-t11" headers="r1c1-t11">
<p><a id="sthref909"></a><code dir="ltr">ROWTYPE_MISMATCH</code></p>
</td>
<td class="cellalignment1091" headers="r14c1-t11 r1c2-t11">
<p><code dir="ltr">-6504</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r15c1-t11" headers="r1c1-t11">
<p><a id="sthref910"></a><code dir="ltr">SELF_IS_NULL</code></p>
</td>
<td class="cellalignment1091" headers="r15c1-t11 r1c2-t11">
<p><code dir="ltr">-30625</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r16c1-t11" headers="r1c1-t11">
<p><a id="sthref911"></a><code dir="ltr">STORAGE_ERROR</code></p>
</td>
<td class="cellalignment1091" headers="r16c1-t11 r1c2-t11">
<p><code dir="ltr">-6500</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r17c1-t11" headers="r1c1-t11">
<p><a id="sthref912"></a><code dir="ltr">SUBSCRIPT_BEYOND_COUNT</code></p>
</td>
<td class="cellalignment1091" headers="r17c1-t11 r1c2-t11">
<p><code dir="ltr">-6533</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r18c1-t11" headers="r1c1-t11">
<p><a id="sthref913"></a><code dir="ltr">SUBSCRIPT_OUTSIDE_LIMIT</code></p>
</td>
<td class="cellalignment1091" headers="r18c1-t11 r1c2-t11">
<p><code dir="ltr">-6532</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r19c1-t11" headers="r1c1-t11">
<p><a id="sthref914"></a><code dir="ltr">SYS_INVALID_ROWID</code></p>
</td>
<td class="cellalignment1091" headers="r19c1-t11 r1c2-t11">
<p><code dir="ltr">-1410</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r20c1-t11" headers="r1c1-t11">
<p><a id="sthref915"></a><code dir="ltr">TIMEOUT_ON_RESOURCE</code></p>
</td>
<td class="cellalignment1091" headers="r20c1-t11 r1c2-t11">
<p><code dir="ltr">-51</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r21c1-t11" headers="r1c1-t11">
<p><a id="sthref916"></a><code dir="ltr">TOO_MANY_ROWS</code></p>
</td>
<td class="cellalignment1091" headers="r21c1-t11 r1c2-t11">
<p><code dir="ltr">-1422</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r22c1-t11" headers="r1c1-t11">
<p><a id="sthref917"></a><code dir="ltr">VALUE_ERROR</code></p>
</td>
<td class="cellalignment1091" headers="r22c1-t11 r1c2-t11">
<p><code dir="ltr">-6502</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r23c1-t11" headers="r1c1-t11">
<p><a id="sthref918"></a><code dir="ltr">ZERO_DIVIDE</code></p>
</td>
<td class="cellalignment1091" headers="r23c1-t11 r1c2-t11">
<p><code dir="ltr">-1476</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BABCBAEE">Example 11-6</a> calculates a price-to-earnings ratio for a company. If the company has zero earnings, the division operation raises the predefined exception <code dir="ltr">ZERO_DIVIDE</code> and the executable part of the block transfers control to the exception-handling part.</p>
<div id="LNPLS827" class="example">
<p class="titleinexample"><a id="BABCBAEE"></a>Example 11-6 Anonymous Block Handles ZERO_DIVIDE</p>
<pre dir="ltr">
DECLARE
  stock_price   NUMBER := 9.73;
  <span class="bold">net_earnings  NUMBER := 0</span>;
  pe_ratio      NUMBER;
BEGIN
  pe_ratio := <span class="bold">stock_price / net_earnings</span>;  -- raises ZERO_DIVIDE exception
  DBMS_OUTPUT.PUT_LINE('Price/earnings ratio = ' || pe_ratio);
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN ZERO_DIVIDE</span> THEN
    DBMS_OUTPUT.PUT_LINE('Company had zero earnings.');
    pe_ratio := NULL;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Company had zero earnings.
</pre></div>
<!-- class="example" -->
<p><a href="#CHDIFEDH">Example 11-7</a> uses error-checking code to avoid the exception that <a href="#BABCBAEE">Example 11-6</a> handles.</p>
<div id="LNPLS763" class="example">
<p class="titleinexample"><a id="CHDIFEDH"></a>Example 11-7 Anonymous Block Avoids ZERO_DIVIDE</p>
<pre dir="ltr">
DECLARE
  stock_price   NUMBER := 9.73;
  net_earnings  NUMBER := 0;
  pe_ratio      NUMBER;
BEGIN
  pe_ratio :=
    CASE net_earnings
      <span class="bold">WHEN 0 THEN NULL</span>
      <span class="bold">ELSE stock_price / net_earnings</span>
    END;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i3355">"Raising Internally Defined Exception with RAISE Statement"</a></div>
</div>
<!-- class="sect1" -->
<a id="i3329"></a>
<div id="LNPLS00704" class="sect1">
<h2 class="sect1">User-Defined Exceptions</h2>
<p><a id="sthref919"></a>You can declare your own exceptions in the declarative part of any PL/SQL anonymous block, subprogram, or package.</p>
<p>An exception name declaration has this syntax:</p>
<pre dir="ltr">
<span class="italic">exception_name</span> EXCEPTION;
</pre>
<p>For semantic information, see <a href="exception_declaration.htm#CJABADFA">"Exception Declaration"</a>.</p>
<p>You must raise a user-defined exception explicitly. For details, see <a href="#BABFHFBI">"Raising Exceptions Explicitly"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="BABHCBIG"></a>
<div id="LNPLS99870" class="sect1">
<h2 class="sect1">Redeclared Predefined Exceptions</h2>
<p>Oracle recommends against <a id="sthref920"></a>redeclaring predefined exceptions&mdash;that is, declaring a user-defined exception name that is a predefined exception name. (For a list of predefined exception names, see <a href="#CIHHGGDI">Table 11-3</a>.)</p>
<p>If you redeclare a predefined exception, your local declaration overrides the global declaration in package <code dir="ltr">STANDARD</code>. Exception handlers written for the globally declared exception become unable to handle it&mdash;unless you qualify its name with the package name <code dir="ltr">STANDARD</code>.</p>
<p><a href="#BABCGABI">Example 11-8</a> shows this.</p>
<div id="LNPLS764" class="example">
<p class="titleinexample"><a id="BABCGABI"></a>Example 11-8 Redeclared Predefined Identifier</p>
<pre dir="ltr">
DROP TABLE t;
CREATE TABLE t (c NUMBER);
 
</pre>
<p>In the following block, the <code dir="ltr">INSERT</code> statement implicitly raises the predefined exception <code dir="ltr">INVALID_NUMBER</code>, which the exception handler handles.</p>
<pre dir="ltr">
DECLARE
  default_number NUMBER := 0;
BEGIN
  <span class="bold">INSERT INTO t VALUES(TO_NUMBER('100.00', '9G999'));</span>
EXCEPTION
  <span class="bold">WHEN INVALID_NUMBER THEN</span>
    <span class="bold">DBMS_OUTPUT.PUT_LINE('Substituting default value for invalid number.');</span>
    <span class="bold">INSERT INTO t VALUES(default_number);</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">Substituting default value for invalid number.</span>
 
</pre>
<p>The following block redeclares the predefined exception <code dir="ltr">INVALID_NUMBER</code>. When the <code dir="ltr">INSERT</code> statement implicitly raises the predefined exception <code dir="ltr">INVALID_NUMBER</code>, the exception handler does not handle it.</p>
<pre dir="ltr">
DECLARE
  default_number NUMBER := 0;
  i NUMBER := 5;
  <span class="bold">invalid_number EXCEPTION;    -- redeclare predefined exception</span>
BEGIN
  <span class="bold">INSERT INTO t VALUES(TO_NUMBER('100.00', '9G999'));</span>
EXCEPTION
  WHEN INVALID_NUMBER THEN
    DBMS_OUTPUT.PUT_LINE('Substituting default value for invalid number.');
    INSERT INTO t VALUES(default_number); 
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
<span class="bold">ORA-01722: invalid number</span>
ORA-06512: at line 6
</pre>
<p>The exception handler in the preceding block handles the predefined exception <code dir="ltr">INVALID_NUMBER</code> if you qualify the exception name in the exception handler:</p>
<pre dir="ltr">
DECLARE
  default_number NUMBER := 0;
  i NUMBER := 5;
  <span class="bold">invalid_number EXCEPTION;    -- redeclare predefined exception</span>
BEGIN
  <span class="bold">INSERT INTO t VALUES(TO_NUMBER('100.00', '9G999'));</span>
EXCEPTION
  WHEN <span class="bold">STANDARD.INVALID_NUMBER</span> THEN
    DBMS_OUTPUT.PUT_LINE('Substituting default value for invalid number.');
    INSERT INTO t VALUES(default_number); 
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">Substituting default value for invalid number.</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BABFHFBI"></a>
<div id="LNPLS00705" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Raising Exceptions Explicitly</h2>
<p>To <a id="sthref921"></a><a id="sthref922"></a>raise an exception explicitly, use either the <code dir="ltr">RAISE</code> statement or <code dir="ltr">RAISE_APPLICATION_ERROR</code> procedure.</p>
<p class="subhead2"><a id="LNPLS765"></a>Topics</p>
<ul>
<li>
<p><a href="#BABBAAIE">RAISE Statement</a></p>
</li>
<li>
<p><a href="#i1871">RAISE_APPLICATION_ERROR Procedure</a></p>
</li>
</ul>
<a id="BABBAAIE"></a>
<div id="LNPLS99869" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">RAISE Statement</h3>
<p>The <a id="sthref923"></a><code dir="ltr">RAISE</code> statement explicitly raises an exception. Outside an exception handler, you must specify the exception name. Inside an exception handler, if you omit the exception name, the <code dir="ltr">RAISE</code> statement reraises the current exception.</p>
<p class="subhead2"><a id="LNPLS766"></a>Topics</p>
<ul>
<li>
<p><a href="#BABJCHGC">Raising User-Defined Exception with RAISE Statement</a></p>
</li>
<li>
<p><a href="#i3355">Raising Internally Defined Exception with RAISE Statement</a></p>
</li>
<li>
<p><a href="#i3359">Reraising Current Exception with RAISE Statement</a></p>
</li>
</ul>
<a id="BABJCHGC"></a>
<div id="LNPLS99866" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Raising User-Defined Exception with RAISE Statement</h4>
<p><a id="sthref924"></a>In <a href="#BABBCBII">Example 11-9</a>, the procedure declares an exception named <code dir="ltr">past_due</code>, raises it explicitly with the <code dir="ltr">RAISE</code> statement, and handles it with an exception handler.</p>
<div id="LNPLS767" class="example">
<p class="titleinexample"><a id="BABBCBII"></a>Example 11-9 Declaring, Raising, and Handling User-Defined Exception</p>
<pre dir="ltr">
CREATE PROCEDURE account_status (
  due_date DATE,
  today    DATE
) AUTHID DEFINER
IS
  <span class="bold">past_due  EXCEPTION;  -- declare exception</span>
BEGIN
  IF due_date &lt; today THEN
    <span class="bold">RAISE past_due;  -- explicitly raise exception</span>
  END IF;
EXCEPTION
  <span class="bold">WHEN past_due THEN  -- handle exception</span>
    DBMS_OUTPUT.PUT_LINE ('Account past due.');
END;
/
 
BEGIN
  account_status ('1-JUL-10', '9-JUL-10');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Account past due.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="i3355"></a>
<div id="LNPLS99863" class="sect3">
<h4 class="sect3">Raising Internally Defined Exception with RAISE Statement</h4>
<p>Although the runtime system raises <a id="sthref925"></a>internally defined exceptions implicitly, you can raise them explicitly with the <code dir="ltr">RAISE</code> statement if they have names. <a href="#CIHHGGDI">Table 11-3</a> lists the internally defined exceptions that have <a id="sthref926"></a>predefined names. <a href="#BABIIEFC">"Internally Defined Exceptions"</a> explains how to give user-declared names to internally defined exceptions.</p>
<p>An exception handler for a named internally defined exception handles that exception whether it is raised implicitly or explicitly.</p>
<p>In <a href="#BABHAIAI">Example 11-10</a>, the procedure raises the predefined exception <code dir="ltr">INVALID_NUMBER</code> either explicitly or implicitly, and the <code dir="ltr">INVALID_NUMBER</code> exception handler always handles it.</p>
<div id="LNPLS838" class="example">
<p class="titleinexample"><a id="BABHAIAI"></a>Example 11-10 Explicitly Raising Predefined Exception</p>
<pre dir="ltr">
DROP TABLE t;
CREATE TABLE t (c NUMBER);
 
CREATE PROCEDURE p (n NUMBER) AUTHID DEFINER IS
  default_number NUMBER := 0;
BEGIN
  IF n &lt; 0 THEN
    <span class="bold">RAISE INVALID_NUMBER;  -- raise explicitly</span>
  ELSE
    <span class="bold">INSERT INTO t VALUES(TO_NUMBER('100.00', '9G999'));  -- raise implicitly</span>
  END IF;
EXCEPTION
  <span class="bold">WHEN INVALID_NUMBER THEN</span>
    DBMS_OUTPUT.PUT_LINE('Substituting default value for invalid number.');
    INSERT INTO t VALUES(default_number);
END;
/
 
BEGIN
  p(-1);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Substituting default value for invalid number.
 
BEGIN
  p(1);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Substituting default value for invalid number.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="i3359"></a>
<div id="LNPLS00707" class="sect3">
<h4 class="sect3">Reraising Current Exception with RAISE Statement</h4>
<p>In an exception handler, you can use the <code dir="ltr">RAISE</code> statement to"<a id="sthref927"></a><a id="sthref928"></a>reraise" the exception being handled. Reraising the exception passes it to the enclosing block, which can handle it further. (If the enclosing block cannot handle the reraised exception, then the exception propagates&mdash;see <a href="#i3365">"Exception Propagation"</a>.) When reraising the current exception, you need not specify an exception name.</p>
<p>In <a href="#BABJBBHG">Example 11-11</a>, the handling of the exception starts in the inner block and finishes in the outer block. The outer block declares the exception, so the exception name exists in both blocks, and each block has an exception handler specifically for that exception. The inner block raises the exception, and its exception handler does the initial handling and then reraises the exception, passing it to the outer block for further handling.</p>
<div id="LNPLS843" class="example">
<p class="titleinexample"><a id="BABJBBHG"></a>Example 11-11 Reraising Exception</p>
<pre dir="ltr">
DECLARE
  <span class="bold">salary_too_high   EXCEPTION;</span>
  current_salary    NUMBER := 20000;
  max_salary        NUMBER := 10000;
  erroneous_salary  NUMBER;
BEGIN

  BEGIN
    IF current_salary &gt; max_salary THEN
      <span class="bold">RAISE salary_too_high;   -- raise exception</span>
    END IF;
  EXCEPTION
    <span class="bold">WHEN salary_too_high THEN  -- start handling exception</span>
      erroneous_salary := current_salary;
      DBMS_OUTPUT.PUT_LINE('Salary ' || erroneous_salary ||' is out of range.');
      DBMS_OUTPUT.PUT_LINE ('Maximum salary is ' || max_salary || '.');
      <span class="bold">RAISE;  -- reraise current exception (exception name is optional)</span>
  END;

EXCEPTION
  <span class="bold">WHEN salary_too_high THEN    -- finish handling exception</span>
    current_salary := max_salary;

    DBMS_OUTPUT.PUT_LINE (
      'Revising salary from ' || erroneous_salary ||
      ' to ' || current_salary || '.'
    );
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Salary 20000 is out of range.
Maximum salary is 10000.
Revising salary from 20000 to 10000.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1871"></a>
<div id="LNPLS99960" class="sect2">
<h3 class="sect2">RAISE_APPLICATION_ERROR Procedure</h3>
<p>You can invoke the <a id="sthref929"></a><code dir="ltr">RAISE_APPLICATION_ERROR</code> procedure (defined in the <code dir="ltr">DBMS_STANDARD</code> package) only from a stored subprogram or method. Typically, you invoke this procedure to raise a <a id="sthref930"></a>user-defined exception and return its error code and error message to the invoker.</p>
<p>To invoke <code dir="ltr">RAISE_APPLICATION_ERROR</code>, use this syntax:</p>
<pre dir="ltr">
RAISE_APPLICATION_ERROR (<span class="italic">error_code</span>, <span class="italic">message</span>[, {TRUE | FALSE}]);
</pre>
<p>You must have assigned <code dir="ltr"><span class="codeinlineitalic">error_code</span></code> to the user-defined exception with the <a id="sthref931"></a><a id="sthref932"></a><code dir="ltr">EXCEPTION_INIT</code> pragma. The syntax is:</p>
<pre dir="ltr">
PRAGMA EXCEPTION_INIT (<span class="italic">exception_name</span>, <span class="italic">error_code</span>)
</pre>
<p>For semantic information, see <a href="exceptioninit_pragma.htm#i33787">"EXCEPTION_INIT Pragma"</a>.</p>
<p>The <code dir="ltr"><span class="codeinlineitalic">error_code</span></code> is an integer in the range -20000..-20999 and the <code dir="ltr"><span class="codeinlineitalic">message</span></code> is a character string of at most 2048 bytes.</p>
<p>If you specify <code dir="ltr">TRUE</code>, PL/SQL puts <code dir="ltr"><span class="codeinlineitalic">error_code</span></code> on top of the error stack. Otherwise, PL/SQL replaces the error stack with <code dir="ltr"><span class="codeinlineitalic">error_code</span></code>.</p>
<p>In <a href="#BABIHIBC">Example 11-12</a>, an anonymous block declares an exception named <code dir="ltr">past_due</code>, assigns the error code -20000 to it, and invokes a stored procedure. The stored procedure invokes the <code dir="ltr">RAISE_APPLICATION_ERROR</code> procedure with the error code -20000 and a message, whereupon control returns to the anonymous block, which handles the exception. To retrieve the message associated with the exception, the exception handler in the anonymous block invokes the <code dir="ltr">SQLERRM</code> function, described in <a href="#i8845">"Error Code and Error Message Retrieval"</a>.</p>
<div id="LNPLS768" class="example">
<p class="titleinexample"><a id="BABIHIBC"></a>Example 11-12 Raising User-Defined Exception with RAISE_APPLICATION_ERROR</p>
<pre dir="ltr">
CREATE PROCEDURE account_status (
  due_date DATE,
  today    DATE
) AUTHID DEFINER
IS
BEGIN
  IF due_date &lt; today THEN                   <span class="bold">-- explicitly raise exception</span>
    <span class="bold">RAISE_APPLICATION_ERROR(-20000, 'Account past due.');</span>
  END IF;
END;
/
 
DECLARE
  <span class="bold">past_due  EXCEPTION;                       -- declare exception</span>
  <span class="bold">PRAGMA EXCEPTION_INIT (past_due, -20000);  -- assign error code to exception</span>
BEGIN
  <span class="bold">account_status ('1-JUL-10', '9-JUL-10');   -- invoke procedure</span>
EXCEPTION
  <span class="bold">WHEN past_due THEN                         -- handle exception</span>
    DBMS_OUTPUT.PUT_LINE(TO_CHAR(<span class="bold">SQLERRM(-20000)</span>));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
ORA-20000: Account past due.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i3365"></a>
<div id="LNPLS00706" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Exception Propagation</h2>
<p>If an exception is raised in a block that has no exception handler for it, then the exception <span class="bold">propagates</span>. That is, the exception reproduces itself in successive enclosing blocks until either a block has a handler for it or there is no enclosing block. If there is no handler for the exception, then PL/SQL returns an unhandled exception error to the invoker or host environment, which determines the outcome (for more information, see <a href="#i1889">"Unhandled Exceptions"</a>).</p>
<p>In <a href="#i5473">Figure 11-1</a>, one block is nested inside another. The inner block raises exception A. The inner block has an exception handler for A, so A does not propagate. After the exception handler runs, control transfers to the next statement of the outer block.</p>
<div id="LNPLS839" class="figure">
<p class="titleinfigure"><a id="i5473"></a>Figure 11-1 Exception Does Not Propagate</p>
<img width="439" height="306" src="img/lnpls009.gif" alt="Description of Figure 11-1 follows" /><br />
<a id="sthref933" href="img_text/lnpls009.htm">Description of "Figure 11-1 Exception Does Not Propagate"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#i5479">Figure 11-2</a>, the inner block raises exception B. The inner block does not have an exception handler for exception B, so B propagates to the outer block, which does have an exception handler for it. After the exception handler runs, control transfers to the host environment.</p>
<div id="LNPLS840" class="figure">
<p class="titleinfigure"><a id="i5479"></a>Figure 11-2 Exception Propagates from Inner Block to Outer Block</p>
<img width="427" height="309" src="img/lnpls010.gif" alt="Description of Figure 11-2 follows" /><br />
<a id="sthref934" href="img_text/lnpls010.htm">Description of "Figure 11-2 Exception Propagates from Inner Block to Outer Block"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#i2641">Figure 11-3</a>, the inner block raises exception C. The inner block does not have an exception handler for C, so exception C propagates to the outer block. The outer block does not have an exception handler for C, so PL/SQL returns an unhandled exception error to the host environment.</p>
<div id="LNPLS841" class="figure">
<p class="titleinfigure"><a id="i2641"></a>Figure 11-3 PL/SQL Returns Unhandled Exception Error to Host Environment</p>
<img width="439" height="324" src="img/lnpls011.gif" alt="Description of Figure 11-3 follows" /><br />
<a id="sthref935" href="img_text/lnpls011.htm">Description of "Figure 11-3 PL/SQL Returns Unhandled Exception Error to Host Environment"</a><br />
<br /></div>
<!-- class="figure" -->
<p>A user-defined exception can propagate beyond its scope (that is, beyond the block that declares it), but its name does not exist beyond its scope. Therefore, beyond its scope, a user-defined exception can be handled only with an <code dir="ltr">OTHERS</code> exception handler.</p>
<p>In <a href="#BABIIGCJ">Example 11-13</a>, the inner block declares an exception named <code dir="ltr">past_due</code>, for which it has no exception handler. When the inner block raises <code dir="ltr">past_due</code>, the exception propagates to the outer block, where the name <code dir="ltr">past_due</code> does not exist. The outer block handles the exception with an <code dir="ltr">OTHERS</code> exception handler.</p>
<div id="LNPLS842" class="example">
<p class="titleinexample"><a id="BABIIGCJ"></a>Example 11-13 Exception that Propagates Beyond Scope is Handled</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p AUTHID DEFINER AS
BEGIN

  DECLARE
    <span class="bold">past_due     EXCEPTION;</span>
    due_date     DATE := trunc(SYSDATE) - 1;
    todays_date  DATE := trunc(SYSDATE);
  BEGIN
    IF due_date &lt; todays_date THEN
      RAISE past_due;
    END IF;
  END;

EXCEPTION
  <span class="bold">WHEN OTHERS THEN</span>
    ROLLBACK;
    RAISE;
END;
/
</pre></div>
<!-- class="example" -->
<p>If the outer block does not handle the user-defined exception, then an error occurs, as in <a href="#BABDJCDH">Example 11-14</a>.</p>
<div id="LNPLS791" class="example">
<p class="titleinexample"><a id="BABDJCDH"></a>Example 11-14 Exception that Propagates Beyond Scope is Not Handled</p>
<pre dir="ltr">
BEGIN

  DECLARE
    <span class="bold">past_due     EXCEPTION;</span>
    due_date     DATE := trunc(SYSDATE) - 1;
    todays_date  DATE := trunc(SYSDATE);
  BEGIN
    IF due_date &lt; todays_date THEN
      RAISE past_due;
    END IF;
  END;

END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
BEGIN
*
ERROR at line 1:
<span class="bold">ORA-06510: PL/SQL: unhandled user-defined exception</span>
ORA-06512: at line 9
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Exceptions cannot propagate across remote subprogram invocations. Therefore, a PL/SQL block cannot handle an exception raised by a <a id="sthref936"></a>remote subprogram.</div>
<p class="subhead2"><a id="LNPLS792"></a>Topics</p>
<ul>
<li>
<p><a href="#BCFCBFFC">Propagation of Exceptions Raised in Declarations</a></p>
</li>
<li>
<p><a href="#BCFDEJDF">Propagation of Exceptions Raised in Exception Handlers</a></p>
</li>
</ul>
<a id="BCFCBFFC"></a>
<div id="LNPLS844" class="sect2">
<h3 class="sect2">Propagation of Exceptions Raised in Declarations</h3>
<p>An <a id="sthref937"></a><a id="sthref938"></a>exception raised in a declaration propagates immediately to the enclosing block (or to the invoker or host environment if there is no enclosing block). Therefore, the exception handler must be in an enclosing or invoking block, not in the same block as the declaration.</p>
<p>In <a href="#BABBIACC">Example 11-15</a>, the <code dir="ltr">VALUE_ERROR</code> exception handler is in the same block as the declaration that raises <code dir="ltr">VALUE_ERROR</code>. Because the exception propagates immediately to the host environment, the exception handler does not handle it.</p>
<div id="LNPLS845" class="example">
<p class="titleinexample"><a id="BABBIACC"></a>Example 11-15 Exception Raised in Declaration is Not Handled</p>
<pre dir="ltr">
<span class="bold">DECLARE</span>
  <span class="bold">credit_limit CONSTANT NUMBER(3) := 5000;  -- Maximum value is 999</span>
<span class="bold">BEGIN</span>
  NULL;
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN VALUE_ERROR THEN</span>
    DBMS_OUTPUT.PUT_LINE('Exception raised in declaration.');
<span class="bold">END;</span>
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
ORA-06502: PL/SQL: numeric or value error: number precision too large
ORA-06512: at line 2
</pre></div>
<!-- class="example" -->
<p><a href="#BABFDAJH">Example 11-16</a> is like <a href="#BABBIACC">Example 11-15</a> except that an enclosing block handles the <code dir="ltr">VALUE_ERROR</code> exception that the declaration in the inner block raises.</p>
<div id="LNPLS793" class="example">
<p class="titleinexample"><a id="BABFDAJH"></a>Example 11-16 Exception Raised in Declaration is Handled by Enclosing Block</p>
<pre dir="ltr">
<span class="bold">BEGIN</span>
 
  DECLARE
    <span class="bold">credit_limit CONSTANT NUMBER(3) := 5000;</span>
  BEGIN
    NULL;
  END;
 
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN VALUE_ERROR THEN</span>
    DBMS_OUTPUT.PUT_LINE('Exception raised in declaration.');
<span class="bold">END;</span>
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Exception raised in declaration.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BCFDEJDF"></a>
<div id="LNPLS846" class="sect2">
<h3 class="sect2">Propagation of Exceptions Raised in Exception Handlers</h3>
<p>An <a id="sthref939"></a><a id="sthref940"></a>exception raised in an exception handler propagates immediately to the enclosing block (or to the invoker or host environment if there is no enclosing block). Therefore, the exception handler must be in an enclosing or invoking block.</p>
<p>In <a href="#BABHJJAF">Example 11-17</a>, when <code dir="ltr">n</code> is zero, the calculation <code dir="ltr">1/n</code> raises the predefined exception <code dir="ltr">ZERO_DIVIDE</code>, and control transfers to the <code dir="ltr">ZERO_DIVIDE</code> exception handler in the same block. When the exception hander raises <code dir="ltr">ZERO_DIVIDE</code>, the exception propagates immediately to the invoker. The invoker does not handle the exception, so PL/SQL returns an unhandled exception error to the host environment.</p>
<div id="LNPLS799" class="example">
<p class="titleinexample"><a id="BABHJJAF"></a>Example 11-17 Exception Raised in Exception Handler is Not Handled</p>
<pre dir="ltr">
CREATE PROCEDURE print_reciprocal (n NUMBER) AUTHID DEFINER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(<span class="bold">1/n</span>);  <span class="bold">-- handled</span>
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('<span class="bold">Error:</span>');
    DBMS_OUTPUT.PUT_LINE(<span class="bold">1/n</span> || ' is undefined');  <span class="bold">-- not handled</span>
END;
/
 
BEGIN  <span class="bold">-- invoking block</span>
  print_reciprocal(0);
END;
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">Error:</span>
BEGIN
*
ERROR at line 1:
<span class="bold">ORA-01476: divisor is equal to zero</span>
ORA-06512: at "HR.PRINT_RECIPROCAL", line 7
ORA-01476: divisor is equal to zero
ORA-06512: at line 2
</pre></div>
<!-- class="example" -->
<p><a href="#BABDJDGH">Example 11-18</a> is like <a href="#BABHJJAF">Example 11-17</a> except that when the procedure returns an unhandled exception error to the invoker, the invoker handles it.</p>
<div id="LNPLS800" class="example">
<p class="titleinexample"><a id="BABDJDGH"></a>Example 11-18 Exception Raised in Exception Handler is Handled by Invoker</p>
<pre dir="ltr">
CREATE PROCEDURE print_reciprocal (n NUMBER) AUTHID DEFINER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(1/n);
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('Error:');
    DBMS_OUTPUT.PUT_LINE(1/n || ' is undefined');
END;
/
 
BEGIN  <span class="bold">-- invoking block</span>
  print_reciprocal(0);
EXCEPTION
  <span class="bold">WHEN ZERO_DIVIDE THEN  -- handles exception raised in exception handler</span>
    DBMS_OUTPUT.PUT_LINE('1/0 is undefined.');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Error:
1/0 is undefined.
</pre></div>
<!-- class="example" -->
<p><a href="#BABHBEGA">Example 11-19</a> is like <a href="#BABHJJAF">Example 11-17</a> except that an enclosing block handles the exception that the exception handler in the inner block raises.</p>
<div id="LNPLS801" class="example">
<p class="titleinexample"><a id="BABHBEGA"></a>Example 11-19 Exception Raised in Exception Handler is Handled by Enclosing Block</p>
<pre dir="ltr">
CREATE PROCEDURE print_reciprocal (n NUMBER) AUTHID DEFINER IS
<span class="bold">BEGIN</span>
 
  <span class="bold">BEGIN</span>
    DBMS_OUTPUT.PUT_LINE(1/n);
  <span class="bold">EXCEPTION</span>
    WHEN ZERO_DIVIDE THEN
      DBMS_OUTPUT.PUT_LINE('Error in inner block:');
      DBMS_OUTPUT.PUT_LINE(1/n || ' is undefined.');
  <span class="bold">END;</span>
 
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN ZERO_DIVIDE THEN  -- handles exception raised in exception handler</span>
    DBMS_OUTPUT.PUT('Error in outer block: ');
    DBMS_OUTPUT.PUT_LINE('1/0 is undefined.');
<span class="bold">END;</span>
/
 
BEGIN
  print_reciprocal(0);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Error in inner block:
Error in outer block: 1/0 is undefined.
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABEGCDH">Example 11-20</a>, the exception-handling part of the procedure has exception handlers for user-defined exception <code dir="ltr">i_is_one</code> and predefined exception <code dir="ltr">ZERO_DIVIDE</code>. When the <code dir="ltr">i_is_one</code> exception handler raises <code dir="ltr">ZERO_DIVIDE</code>, the exception propagates immediately to the invoker (therefore, the <code dir="ltr">ZERO_DIVIDE</code> exception handler does not handle it). The invoker does not handle the exception, so PL/SQL returns an unhandled exception error to the host environment.</p>
<div id="LNPLS802" class="example">
<p class="titleinexample"><a id="BABEGCDH"></a>Example 11-20 Exception Raised in Exception Handler is Not Handled</p>
<pre dir="ltr">
CREATE PROCEDURE descending_reciprocals (n INTEGER) AUTHID DEFINER IS
  i INTEGER;
  <span class="bold">i_is_one EXCEPTION;</span>
BEGIN
  i := n;
 
  LOOP
    IF i = 1 THEN
      <span class="bold">RAISE i_is_one;</span>
    ELSE
      DBMS_OUTPUT.PUT_LINE('Reciprocal of ' || i || ' is ' || <span class="bold">1/i</span>);
    END IF;
 
    i := i - 1;
  END LOOP;
EXCEPTION
  <span class="bold">WHEN i_is_one THEN</span>
    DBMS_OUTPUT.PUT_LINE('<span class="bold">1 is its own reciprocal.</span>');
    DBMS_OUTPUT.PUT_LINE('Reciprocal of ' || TO_CHAR(i-1) ||
                         ' is ' || TO_CHAR(<span class="bold">1/(i-1)</span>));
                           
  <span class="bold">WHEN ZERO_DIVIDE THEN</span>
    DBMS_OUTPUT.PUT_LINE('Error:');
    DBMS_OUTPUT.PUT_LINE(1/n || ' is undefined');
END;
/
 
BEGIN
  descending_reciprocals(3);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Reciprocal of 3 is .3333333333333333333333333333333333333333
Reciprocal of 2 is .5
<span class="bold">1 is its own reciprocal.</span>
BEGIN
*
ERROR at line 1:
<span class="bold">ORA-01476: divisor is equal to zero</span>
ORA-06512: at "HR.DESCENDING_RECIPROCALS", line 19
ORA-06510: PL/SQL: unhandled user-defined exception
ORA-06512: at line 2
</pre></div>
<!-- class="example" -->
<p><a href="#BABDIHFC">Example 11-21</a> is like <a href="#BABEGCDH">Example 11-20</a> except that an enclosing block handles the <code dir="ltr">ZERO_DIVIDE</code> exception that the <code dir="ltr">i_is_one</code> exception handler raises.</p>
<div id="LNPLS803" class="example">
<p class="titleinexample"><a id="BABDIHFC"></a>Example 11-21 Exception Raised in Exception Handler is Handled by Enclosing Block</p>
<pre dir="ltr">
CREATE PROCEDURE descending_reciprocals (n INTEGER) AUTHID DEFINER IS
  i INTEGER;
  i_is_one EXCEPTION;
<span class="bold">BEGIN</span>
 
  <span class="bold">BEGIN</span>
    i := n;
 
    LOOP
      IF i = 1 THEN
        RAISE i_is_one;
      ELSE
        DBMS_OUTPUT.PUT_LINE('Reciprocal of ' || i || ' is ' || 1/i);
      END IF;
 
      i := i - 1;
    END LOOP;
  <span class="bold">EXCEPTION</span>
    WHEN i_is_one THEN
      DBMS_OUTPUT.PUT_LINE('1 is its own reciprocal.');
      DBMS_OUTPUT.PUT_LINE('Reciprocal of ' || TO_CHAR(i-1) ||
                           ' is ' || TO_CHAR(1/(i-1)));
                           
    WHEN ZERO_DIVIDE THEN
      DBMS_OUTPUT.PUT_LINE('Error:');
      DBMS_OUTPUT.PUT_LINE(1/n || ' is undefined');
  <span class="bold">END;</span>
 
<span class="bold">EXCEPTION</span>
  <span class="bold">WHEN ZERO_DIVIDE THEN  -- handles exception raised in exception handler</span>
    DBMS_OUTPUT.PUT_LINE('Error:');
    DBMS_OUTPUT.PUT_LINE('1/0 is undefined');
<span class="bold">END;</span>
/
 
BEGIN
  descending_reciprocals(3);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Reciprocal of 3 is .3333333333333333333333333333333333333333
Reciprocal of 2 is .5
1 is its own reciprocal.
Error:
1/0 is undefined
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1889"></a>
<div id="LNPLS850" class="sect1">
<h2 class="sect1">Unhandled Exceptions</h2>
<p><a id="sthref941"></a><a id="sthref942"></a>If there is no handler for a raised exception, PL/SQL returns an unhandled exception error to the invoker or host environment, which determines the outcome.</p>
<p>If a <a id="sthref943"></a>subprogram exits with an unhandled exception, then actual parameters for <code dir="ltr">OUT</code> and <code dir="ltr">IN</code> <code dir="ltr">OUT</code> formal parameters passed by value (the default) retain the values that they had before the subprogram invocation (see <a href="subprograms.htm#CHDBGIHE">Example 8-15</a>).</p>
<p>If a <a id="sthref944"></a>stored subprogram exits with an unhandled exception, PL/SQL does not roll back database changes made by the subprogram.</p>
<p>The <code dir="ltr">FORALL</code> statement runs one DML statement multiple times, with different values in the <code dir="ltr">VALUES</code> and <code dir="ltr">WHERE</code> clauses. If one set of values raises an unhandled exception, then PL/SQL rolls back all database changes made earlier in the <code dir="ltr">FORALL</code> statement. For more information, see <a href="tuning.htm#BCGDBDAI">"Handling FORALL Exceptions Immediately"</a> and <a href="tuning.htm#i49099">"Handling FORALL Exceptions After FORALL Statement Completes"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Avoid unhandled exceptions by including an <code dir="ltr">OTHERS</code> exception handler at the top level of every PL/SQL program.</div>
</div>
<!-- class="sect1" -->
<a id="i8845"></a>
<div id="LNPLS848" class="sect1">
<h2 class="sect1">Error Code and Error Message Retrieval</h2>
<p>In an <a id="sthref945"></a>exception handler, for the exception being handled:</p>
<ul>
<li>
<p>You can retrieve the error code with the PL/SQL function <code dir="ltr">SQLCODE</code>, described in <a href="sqlcode_function.htm#i36302">"SQLCODE Function"</a>.</p>
</li>
<li>
<p>You can retrieve the error message with either:</p>
<ul>
<li>
<p>The PL/SQL function <code dir="ltr">SQLERRM</code>, described in <a href="sqlerrm_function.htm#i38980">"SQLERRM Function"</a></p>
<p>This function returns a maximum of 512 bytes, which is the maximum length of an Oracle Database error message (including the error code, nested messages, and message inserts such as table and column names).</p>
</li>
<li>
<p>The package function <code dir="ltr">DBMS_UTILITY</code>.<code dir="ltr">FORMAT_ERROR_STACK</code>, described in <a class="olink ARPLS68986" href="http://www.oracle.com/pls/topic/lookup?ctx=db112&amp;id=ARPLS68986"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
<p>This function returns the full error stack, up to 2000 bytes.</p>
</li>
</ul>
<p>Oracle recommends using <code dir="ltr">DBMS_UTILITY</code>.<code dir="ltr">FORMAT_ERROR_STACK</code>, except when using the <code dir="ltr">FORALL</code> statement with its <code dir="ltr">SAVE</code> <code dir="ltr">EXCEPTIONS</code> clause, as in <a href="tuning.htm#BABGBABA">Example 12-13</a>.</p>
</li>
</ul>
<p>A SQL statement cannot invoke <code dir="ltr">SQLCODE</code> or <code dir="ltr">SQLERRM</code>. To use their values in a SQL statement, assign them to local variables first, as in <a href="#CJAJBAJG">Example 11-22</a>.</p>
<div id="LNPLS849" class="example">
<p class="titleinexample"><a id="CJAJBAJG"></a>Example 11-22 Displaying SQLCODE and SQLERRM Values</p>
<pre dir="ltr">
DROP TABLE errors;
CREATE TABLE errors (
  code      NUMBER,
  message   VARCHAR2(64)
);

CREATE OR REPLACE PROCEDURE p AUTHID DEFINER AS
  name    EMPLOYEES.LAST_NAME%TYPE;
  v_code  NUMBER;
  v_errm  VARCHAR2(64);
BEGIN
  SELECT last_name INTO name
  FROM EMPLOYEES
  WHERE EMPLOYEE_ID = -1;
EXCEPTION
  WHEN OTHERS THEN
    <span class="bold">v_code := SQLCODE;</span>
    <span class="bold">v_errm := SUBSTR(SQLERRM, 1, 64);</span>
    DBMS_OUTPUT.PUT_LINE
      ('Error code ' || v_code || ': ' || v_errm);
 
    /* Invoke another procedure,
       declared with PRAGMA AUTONOMOUS_TRANSACTION,
       to insert information about errors. */
 
    <span class="bold">INSERT INTO errors (code, message)</span>
    <span class="bold">VALUES (v_code, v_errm);</span>

    RAISE;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Error code 100: ORA-01403: no data found
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS73241" href="../../appdev.112/e40758/d_util.htm#ARPLS73241"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for information about the <code dir="ltr">DBMS_UTILITY</code>.<code dir="ltr">FORMAT_ERROR_BACKTRACE</code> function, which displays the call stack at the point where an exception was raised, even if the subprogram is called from an exception handler in an outer scope</div>
</div>
<!-- class="sect1" -->
<a id="BABGFCDD"></a>
<div id="LNPLS851" class="sect1">
<h2 class="sect1">Continuing Execution After Handling Exceptions</h2>
<p>After an <a id="sthref946"></a>exception handler runs, control transfers to the next statement of the enclosing block (or to the invoker or host environment if there is no enclosing block). The exception handler cannot transfer control back to its own block.</p>
<p>For example, in <a href="#CHDGAJIF">Example 11-23</a>, after the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement raises <code dir="ltr">ZERO_DIVIDE</code> and the exception handler handles it, execution cannot continue from the <code dir="ltr">INSERT</code> statement that follows the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement.</p>
<div id="LNPLS805" class="example">
<p class="titleinexample"><a id="CHDGAJIF"></a>Example 11-23 Exception Handler Runs and Execution Ends</p>
<pre dir="ltr">
DROP TABLE employees_temp;
CREATE TABLE employees_temp AS
  SELECT employee_id, salary, commission_pct
  FROM employees;
 
DECLARE
  sal_calc NUMBER(8,2);
BEGIN
  INSERT INTO employees_temp (employee_id, salary, commission_pct)
  VALUES (301, 2500, 0);
 
  <span class="bold">SELECT (salary / commission_pct) INTO sal_calc</span>
  FROM employees_temp
  WHERE employee_id = 301;
 
  <span class="bold">INSERT INTO employees_temp VALUES (302, sal_calc/100, .1);</span>
  DBMS_OUTPUT.PUT_LINE('<span class="bold">Row inserted.</span>');
EXCEPTION
  <span class="bold">WHEN ZERO_DIVIDE THEN</span>
    DBMS_OUTPUT.PUT_LINE('<span class="bold">Division by zero.</span>');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Division by zero.
</pre></div>
<!-- class="example" -->
<p>If you want execution to resume with the <code dir="ltr">INSERT</code> statement that follows the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement, then put the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement in an inner block with its own <code dir="ltr">ZERO_DIVIDE</code> exception handler, as in <a href="#BABJCEEC">Example 11-24</a>.</p>
<div id="LNPLS852" class="example">
<p class="titleinexample"><a id="BABJCEEC"></a>Example 11-24 Exception Handler Runs and Execution Continues</p>
<pre dir="ltr">
DECLARE
  sal_calc NUMBER(8,2);
BEGIN
  INSERT INTO employees_temp (employee_id, salary, commission_pct)
  VALUES (301, 2500, 0);
 
  <span class="bold">BEGIN</span>
    SELECT (salary / commission_pct) INTO sal_calc
    FROM employees_temp
    WHERE employee_id = 301;
  <span class="bold">EXCEPTION</span>
    <span class="bold">WHEN ZERO_DIVIDE THEN</span>
      DBMS_OUTPUT.PUT_LINE('<span class="bold">Substituting 2500 for undefined number.</span>');
      sal_calc := 2500;
  <span class="bold">END;</span>
 
  INSERT INTO employees_temp VALUES (302, sal_calc/100, .1);
  DBMS_OUTPUT.PUT_LINE('<span class="bold">Enclosing block: Row inserted.</span>');
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('<span class="bold">Enclosing block: Division by zero.</span>');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Substituting 2500 for undefined number.
Enclosing block: Row inserted.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="tuning.htm#BABGBABA">Example 12-13</a>, where a bulk SQL operation continues despite exceptions</div>
</div>
<!-- class="sect1" -->
<a id="BCFJCECJ"></a>
<div id="LNPLS853" class="sect1">
<h2 class="sect1">Retrying Transactions After Handling Exceptions</h2>
<p>To <a id="sthref947"></a><a id="sthref948"></a>retry a transaction after handling an exception that it raised, use this technique:</p>
<ol>
<li>
<p>Enclose the transaction in a sub-block that has an exception-handling part.</p>
</li>
<li>
<p>In the sub-block, before the transaction starts, mark a savepoint.</p>
</li>
<li>
<p>In the exception-handling part of the sub-block, put an exception handler that rolls back to the savepoint and then tries to correct the problem.</p>
</li>
<li>
<p>Put the sub-block inside a <code dir="ltr">LOOP</code> statement.</p>
</li>
<li>
<p>In the sub-block, after the <code dir="ltr">COMMIT</code> statement that ends the transaction, put an <code dir="ltr">EXIT</code> statement.</p>
<p>If the transaction succeeds, the <code dir="ltr">COMMIT</code> and <code dir="ltr">EXIT</code> statements execute.</p>
<p>If the transaction fails, control transfers to the exception-handling part of the sub-block, and after the exception handler runs, the loop repeats.</p>
</li>
</ol>
<p><a href="#BABGHCEH">Example 11-25</a> uses the preceding technique to retry a transaction whose <code dir="ltr">INSERT</code> statement raises the predefined exception <code dir="ltr">DUP_VAL_ON_INDEX</code> if the value of <code dir="ltr">res_name</code> is not unique.</p>
<div id="LNPLS854" class="example">
<p class="titleinexample"><a id="BABGHCEH"></a>Example 11-25 Retrying Transaction After Handling Exception</p>
<pre dir="ltr">
DROP TABLE results;
CREATE TABLE results (
  res_name   VARCHAR(20),
  res_answer VARCHAR2(3)
);
 
<span class="bold">CREATE UNIQUE INDEX res_name_ix ON results (res_name);</span>
INSERT INTO results (res_name, res_answer) VALUES ('SMYTHE', 'YES');
INSERT INTO results (res_name, res_answer) VALUES ('JONES', 'NO');
 
DECLARE
  name    VARCHAR2(20) := 'SMYTHE';
  answer  VARCHAR2(3) := 'NO';
  suffix  NUMBER := 1;
BEGIN
  <span class="bold">FOR i IN 1..5 LOOP  -- Try transaction at most 5 times.</span>
 
    DBMS_OUTPUT.PUT('Try #' || i);
 
    <span class="bold">BEGIN  -- sub-block begins</span>
 
       <span class="bold">SAVEPOINT start_transaction;</span>
 
       <span class="bold">-- transaction begins</span>
 
       DELETE FROM results WHERE res_answer = 'NO';
 
       INSERT INTO results (res_name, res_answer) VALUES (name, answer);
 
       <span class="bold">-- Nonunique name raises DUP_VAL_ON_INDEX.</span>
 
       <span class="bold">-- If transaction succeeded:</span>
 
       COMMIT;
       DBMS_OUTPUT.PUT_LINE(' succeeded.');
       EXIT;
 
    <span class="bold">EXCEPTION</span>
      <span class="bold">WHEN DUP_VAL_ON_INDEX THEN</span>
        DBMS_OUTPUT.PUT_LINE(' failed; trying again.');
        <span class="bold">ROLLBACK TO start_transaction;</span>    -- Undo changes.
        suffix := suffix + 1;             -- Try to fix problem.
        name := name || TO_CHAR(suffix);
    <span class="bold">END;  -- sub-block ends</span>
 
  <span class="bold">END LOOP;</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Try #1 failed; trying again.
Try #2 succeeded.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="packages.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="tuning.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
