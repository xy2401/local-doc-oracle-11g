<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Language Fundamentals</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:55Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="overview.htm" title="Previous" type="text/html" />
<link rel="Next" href="datatypes.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/99</span> <!-- End Header -->
<div id="LNPLS002" class="chapter"><a id="CIHEAFBJ"></a>
<h1 class="chapter"><span class="secnum">2</span> PL/SQL Language Fundamentals</h1>
<p>This chapter explains these aspects of the PL/SQL language:</p>
<ul>
<li>
<p><a href="#CIHEGGJG">Character Sets</a></p>
</li>
<li>
<p><a href="#CIHJCJAD">Lexical Units</a></p>
</li>
<li>
<p><a href="#i27306">Declarations</a></p>
</li>
<li>
<p><a href="#CIHBICEG">References to Identifiers</a></p>
</li>
<li>
<p><a href="#CIHBJJJJ">Scope and Visibility of Identifiers</a></p>
</li>
<li>
<p><a href="#i16001">Assigning Values to Variables</a></p>
</li>
<li>
<p><a href="#i16003">Expressions</a></p>
</li>
<li>
<p><a href="#CHDJDFFG">Error-Reporting Functions</a></p>
</li>
<li>
<p><a href="#CHDJAEED">SQL Functions in PL/SQL Expressions</a></p>
</li>
<li>
<p><a href="#CIHDDJCC">Pragmas</a></p>
</li>
<li>
<p><a href="#BABIHIHF">Conditional Compilation</a></p>
</li>
</ul>
<a id="CIHEGGJG"></a>
<div id="LNPLS00201" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Character Sets</h2>
<p>Any character data to be processed by PL/SQL or stored in a database must be represented as a sequence of bytes. The byte representation of a single character is called a <a id="sthref37"></a><span class="bold">character code</span>. A set of character codes is called a <a id="sthref38"></a><span class="bold">character set</span>.</p>
<p>Every Oracle database supports a database character set and a national character set. PL/SQL also supports these character sets. This document explains how PL/SQL uses the database character set and national character set.</p>
<p class="subhead2"><a id="LNPLS160"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHFGDFJ">Database Character Set</a></p>
</li>
<li>
<p><a href="#CIHIBEDE">National Character Set</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG002" href="../../server.112/e10729/ch2charset.htm#NLSPG002"><span class="italic">Oracle Database Globalization Support Guide</span></a> for general information about character sets</div>
<a id="CIHFGDFJ"></a>
<div id="LNPLS99920" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Database Character Set</h3>
<p>PL/SQL uses the <a id="sthref39"></a><span class="bold">database character set</span> to represent:</p>
<ul>
<li>
<p>Stored source text of PL/SQL units</p>
<p>For information about PL/SQL units, see <a href="overview.htm#BABBDFJF">"PL/SQL Units and Compilation Parameters"</a>.</p>
</li>
<li>
<p>Character values of data types <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, <code dir="ltr">CLOB</code>, and <code dir="ltr">LONG</code></p>
<p>For information about these data types, see <a href="datatypes.htm#CHDHAEGF">"SQL Data Types"</a>.</p>
</li>
</ul>
<p>The database character set can be either single-byte, mapping each supported character to one particular byte, or multibyte-varying-width, <a id="sthref40"></a>mapping each supported character to a sequence of one, two, three, or four bytes. The maximum number of bytes in a character code depends on the particular character set.</p>
<p>Every database character set includes these basic characters:</p>
<ul>
<li>
<p><span class="bold">Latin letters:</span> <span class="italic">A</span> through <span class="italic">Z</span> and <span class="italic">a</span> through <span class="italic">z</span></p>
</li>
<li>
<p><span class="bold">Decimal digits:</span> <span class="italic">0</span> through <span class="italic">9</span></p>
</li>
<li>
<p><span class="bold">Punctuation characters</span> in <a href="#CIHCHIGC">Table 2-1</a></p>
</li>
<li>
<p><a id="sthref41"></a><span class="bold">Whitespace characters:</span> <span class="italic">space</span>, <span class="italic">tab</span>, <span class="italic">new line</span>, and <span class="italic">carriage return</span></p>
</li>
</ul>
<p>PL/SQL source text that uses only the basic characters can be stored and compiled in any database. PL/SQL source text that uses nonbasic characters can be stored and compiled only in databases whose database character sets support those nonbasic characters.</p>
<div id="LNPLS161" class="tblformal">
<p class="titleintable"><a id="sthref42"></a><a id="CIHCHIGC"></a>Table 2-1 Punctuation Characters in Every Database Character Set</p>
<table class="cellalignment1092" title="Punctuation Characters in Every Database Character Set" summary="This table has two columns. The first column lists the symbols in the database character set. The second column lists their names." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t3">Symbol</th>
<th class="cellalignment1090" id="r1c2-t3">Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t3" headers="r1c1-t3">
<p><code dir="ltr">(</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t3 r1c2-t3">
<p>Left parenthesis</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t3" headers="r1c1-t3">
<p><code dir="ltr">)</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t3 r1c2-t3">
<p>Right parenthesis</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t3" headers="r1c1-t3">
<p><code dir="ltr">&lt;</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t3 r1c2-t3">
<p>Left angle bracket</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t3" headers="r1c1-t3">
<p><code dir="ltr">&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t3 r1c2-t3">
<p>Right angle bracket</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t3" headers="r1c1-t3">
<p><code dir="ltr">+</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t3 r1c2-t3">
<p>Plus sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t3" headers="r1c1-t3">
<p><code dir="ltr">-</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t3 r1c2-t3">
<p>Hyphen <span class="italic">or</span> minus sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t3" headers="r1c1-t3">
<p><code dir="ltr">*</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t3 r1c2-t3">
<p>Asterisk</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t3" headers="r1c1-t3">
<p><code dir="ltr">/</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t3 r1c2-t3">
<p>Slash</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t3" headers="r1c1-t3">
<p><code dir="ltr">=</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t3 r1c2-t3">
<p>Equal sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r11c1-t3" headers="r1c1-t3">
<p><code dir="ltr">,</code></p>
</td>
<td class="cellalignment1091" headers="r11c1-t3 r1c2-t3">
<p>Comma</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r12c1-t3" headers="r1c1-t3">
<p><code dir="ltr">;</code></p>
</td>
<td class="cellalignment1091" headers="r12c1-t3 r1c2-t3">
<p>Semicolon</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r13c1-t3" headers="r1c1-t3">
<p><code dir="ltr">:</code></p>
</td>
<td class="cellalignment1091" headers="r13c1-t3 r1c2-t3">
<p>Colon</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r14c1-t3" headers="r1c1-t3">
<p><code dir="ltr">.</code></p>
</td>
<td class="cellalignment1091" headers="r14c1-t3 r1c2-t3">
<p>Period</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r15c1-t3" headers="r1c1-t3">
<p><code dir="ltr">!</code></p>
</td>
<td class="cellalignment1091" headers="r15c1-t3 r1c2-t3">
<p>Exclamation point</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r16c1-t3" headers="r1c1-t3">
<p><code dir="ltr">?</code></p>
</td>
<td class="cellalignment1091" headers="r16c1-t3 r1c2-t3">
<p>Question mark</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r17c1-t3" headers="r1c1-t3">
<p><code dir="ltr">'</code></p>
</td>
<td class="cellalignment1091" headers="r17c1-t3 r1c2-t3">
<p>Apostrophe <span class="italic">or</span> <a id="sthref43"></a>single quotation mark</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r18c1-t3" headers="r1c1-t3">
<p>"</p>
</td>
<td class="cellalignment1091" headers="r18c1-t3 r1c2-t3">
<p><a id="sthref44"></a>Quotation mark <span class="italic">or</span> <a id="sthref45"></a>double quotation mark</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r19c1-t3" headers="r1c1-t3">
<p><code dir="ltr">@</code></p>
</td>
<td class="cellalignment1091" headers="r19c1-t3 r1c2-t3">
<p>At sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r20c1-t3" headers="r1c1-t3">
<p><code dir="ltr">%</code></p>
</td>
<td class="cellalignment1091" headers="r20c1-t3 r1c2-t3">
<p>Percent sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r21c1-t3" headers="r1c1-t3">
<p><code dir="ltr">#</code></p>
</td>
<td class="cellalignment1091" headers="r21c1-t3 r1c2-t3">
<p>Number sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r22c1-t3" headers="r1c1-t3">
<p><code dir="ltr">$</code></p>
</td>
<td class="cellalignment1091" headers="r22c1-t3 r1c2-t3">
<p>Dollar sign</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r23c1-t3" headers="r1c1-t3">
<p><code dir="ltr">_</code></p>
</td>
<td class="cellalignment1091" headers="r23c1-t3 r1c2-t3">
<p>Underscore</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r24c1-t3" headers="r1c1-t3">
<p><code dir="ltr">|</code></p>
</td>
<td class="cellalignment1091" headers="r24c1-t3 r1c2-t3">
<p>Vertical bar</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG171" href="../../server.112/e10729/ch2charset.htm#NLSPG171"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about the database character set</div>
</div>
<!-- class="sect2" -->
<a id="CIHIBEDE"></a>
<div id="LNPLS99919" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">National Character Set</h3>
<p>PL/SQL uses the <a id="sthref46"></a><span class="bold">national character set</span> to represent character values of data types <code dir="ltr">NCHAR</code>, <code dir="ltr">NVARCHAR2</code> and <code dir="ltr">NCLOB</code>. For information about these data types, see <a href="datatypes.htm#CHDHAEGF">"SQL Data Types"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink NLSPG180" href="../../server.112/e10729/ch2charset.htm#NLSPG180"><span class="italic">Oracle Database Globalization Support Guide</span></a> for more information about the national character set</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHJCJAD"></a>
<div id="LNPLS162" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Lexical Units</h2>
<p>The <a id="sthref47"></a><a id="sthref48"></a><a id="sthref49"></a><span class="bold">lexical units</span> of PL/SQL are its smallest individual components&mdash;delimiters, identifiers, literals, and comments.</p>
<p class="subhead2"><a id="LNPLS164"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDJAFIF">Delimiters</a></p>
</li>
<li>
<p><a href="#i6075">Identifiers</a></p>
</li>
<li>
<p><a href="#i6078">Literals</a></p>
</li>
<li>
<p><a href="#i6074">Comments</a></p>
</li>
<li>
<p><a href="#CIHFCEAH">Whitespace Characters Between Lexical Units</a></p>
</li>
</ul>
<a id="CHDJAFIF"></a>
<div id="LNPLS189" class="sect2">
<h3 class="sect2">Delimiters</h3>
<p>A <a id="sthref50"></a><span class="bold">delimiter</span> is a character, or character combination, that has a special meaning in PL/SQL. Do not embed any others characters (including whitespace characters) inside a delimiter.</p>
<p><a href="#CBJIIIEA">Table 2-2</a> summarizes the PL/SQL delimiters.</p>
<div id="LNPLS190" class="tblformal">
<p class="titleintable"><a id="sthref51"></a><a id="CBJIIIEA"></a>Table 2-2 PL/SQL Delimiters</p>
<table class="cellalignment1092" title="PL/SQL Delimiters" summary="This table has two columns. The first column lists the PL/SQL delimiters themselves (their characters or character combinations). The second column gives their meanings." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t6">Delimiter</th>
<th class="cellalignment1090" id="r1c2-t6">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t6" headers="r1c1-t6">
<p><code dir="ltr">+</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t6 r1c2-t6">
<p>Addition operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t6" headers="r1c1-t6">
<p><code dir="ltr">:=</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t6 r1c2-t6">
<p>Assignment operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t6" headers="r1c1-t6">
<p><code dir="ltr">=&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t6 r1c2-t6">
<p>Association operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t6" headers="r1c1-t6">
<p><code dir="ltr">%</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t6 r1c2-t6">
<p>Attribute indicator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t6" headers="r1c1-t6">
<p><code dir="ltr">'</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t6 r1c2-t6">
<p>Character string delimiter</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t6" headers="r1c1-t6">
<p><code dir="ltr">.</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t6 r1c2-t6">
<p>Component indicator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t6" headers="r1c1-t6">
<p><code dir="ltr">||</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t6 r1c2-t6">
<p>Concatenation operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t6" headers="r1c1-t6">
<p><code dir="ltr">/</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t6 r1c2-t6">
<p>Division operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t6" headers="r1c1-t6">
<p><code dir="ltr">**</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t6 r1c2-t6">
<p>Exponentiation operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r11c1-t6" headers="r1c1-t6">
<p><code dir="ltr">(</code></p>
</td>
<td class="cellalignment1091" headers="r11c1-t6 r1c2-t6">
<p>Expression or list delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r12c1-t6" headers="r1c1-t6">
<p><code dir="ltr">)</code></p>
</td>
<td class="cellalignment1091" headers="r12c1-t6 r1c2-t6">
<p>Expression or list delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r13c1-t6" headers="r1c1-t6">
<p><code dir="ltr">:</code></p>
</td>
<td class="cellalignment1091" headers="r13c1-t6 r1c2-t6">
<p>Host variable indicator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r14c1-t6" headers="r1c1-t6">
<p><code dir="ltr">,</code></p>
</td>
<td class="cellalignment1091" headers="r14c1-t6 r1c2-t6">
<p>Item separator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r15c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&lt;&lt;</code></p>
</td>
<td class="cellalignment1091" headers="r15c1-t6 r1c2-t6">
<p>Label delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r16c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&gt;&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r16c1-t6 r1c2-t6">
<p>Label delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r17c1-t6" headers="r1c1-t6">
<p><code dir="ltr">/*</code></p>
</td>
<td class="cellalignment1091" headers="r17c1-t6 r1c2-t6">
<p>Multiline comment delimiter (begin)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r18c1-t6" headers="r1c1-t6">
<p><code dir="ltr">*/</code></p>
</td>
<td class="cellalignment1091" headers="r18c1-t6 r1c2-t6">
<p>Multiline comment delimiter (end)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r19c1-t6" headers="r1c1-t6">
<p><code dir="ltr">*</code></p>
</td>
<td class="cellalignment1091" headers="r19c1-t6 r1c2-t6">
<p>Multiplication operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r20c1-t6" headers="r1c1-t6">
<p><code dir="ltr">"</code></p>
</td>
<td class="cellalignment1091" headers="r20c1-t6 r1c2-t6">
<p>Quoted identifier delimiter</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r21c1-t6" headers="r1c1-t6">
<p><code dir="ltr">..</code></p>
</td>
<td class="cellalignment1091" headers="r21c1-t6 r1c2-t6">
<p>Range operator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r22c1-t6" headers="r1c1-t6">
<p><code dir="ltr">=</code></p>
</td>
<td class="cellalignment1091" headers="r22c1-t6 r1c2-t6">
<p>Relational operator (equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r23c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&lt;&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r23c1-t6 r1c2-t6">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r24c1-t6" headers="r1c1-t6">
<p><code dir="ltr">!=</code></p>
</td>
<td class="cellalignment1091" headers="r24c1-t6 r1c2-t6">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r25c1-t6" headers="r1c1-t6">
<p><code dir="ltr">~=</code></p>
</td>
<td class="cellalignment1091" headers="r25c1-t6 r1c2-t6">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r26c1-t6" headers="r1c1-t6">
<p><code dir="ltr">^=</code></p>
</td>
<td class="cellalignment1091" headers="r26c1-t6 r1c2-t6">
<p>Relational operator (not equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r27c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&lt;</code></p>
</td>
<td class="cellalignment1091" headers="r27c1-t6 r1c2-t6">
<p>Relational operator (less than)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r28c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r28c1-t6 r1c2-t6">
<p>Relational operator (greater than)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r29c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&lt;=</code></p>
</td>
<td class="cellalignment1091" headers="r29c1-t6 r1c2-t6">
<p>Relational operator (less than or equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r30c1-t6" headers="r1c1-t6">
<p><code dir="ltr">&gt;=</code></p>
</td>
<td class="cellalignment1091" headers="r30c1-t6 r1c2-t6">
<p>Relational operator (greater than or equal)</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r31c1-t6" headers="r1c1-t6">
<p><code dir="ltr">@</code></p>
</td>
<td class="cellalignment1091" headers="r31c1-t6 r1c2-t6">
<p>Remote access indicator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r32c1-t6" headers="r1c1-t6">
<p><code dir="ltr">--</code></p>
</td>
<td class="cellalignment1091" headers="r32c1-t6 r1c2-t6">
<p>Single-line comment indicator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r33c1-t6" headers="r1c1-t6">
<p><code dir="ltr">;</code></p>
</td>
<td class="cellalignment1091" headers="r33c1-t6 r1c2-t6">
<p>Statement terminator</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r34c1-t6" headers="r1c1-t6">
<p><code dir="ltr">-</code></p>
</td>
<td class="cellalignment1091" headers="r34c1-t6 r1c2-t6">
<p>Subtraction or negation operator</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="i6075"></a>
<div id="LNPLS99973" class="sect2">
<h3 class="sect2">Identifiers</h3>
<p><a id="sthref52"></a><span class="bold">Identifiers</span> name PL/SQL elements, which include:</p>
<ul>
<li>
<p>Constants</p>
</li>
<li>
<p>Cursors</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Keywords</p>
</li>
<li>
<p>Labels</p>
</li>
<li>
<p>Packages</p>
</li>
<li>
<p>Reserved words</p>
</li>
<li>
<p>Subprograms</p>
</li>
<li>
<p>Types</p>
</li>
<li>
<p>Variables</p>
</li>
</ul>
<p>Every character in an identifier, alphabetic or not, is significant. For example, the identifiers <code dir="ltr">lastname</code> and <code dir="ltr">last_name</code> are different.</p>
<p>You must separate adjacent identifiers by one or more whitespace characters or a punctuation character.</p>
<p>Except as explained in <a href="#CIHIADCI">"Quoted User-Defined Identifiers"</a>, PL/SQL is <a id="sthref53"></a>case-insensitive for identifiers. For example, the identifiers <code dir="ltr">lastname</code>, <code dir="ltr">LastName</code>, and <code dir="ltr">LASTNAME</code> are the same.</p>
<p class="subhead2"><a id="LNPLS166"></a>Topics</p>
<ul>
<li>
<p><a href="#CBJGBIGI">Reserved Words and Keywords</a></p>
</li>
<li>
<p><a href="#CHDGFDJB">Predefined Identifiers</a></p>
</li>
<li>
<p><a href="#CIHHAEFE">User-Defined Identifiers</a></p>
</li>
</ul>
<a id="CBJGBIGI"></a>
<div id="LNPLS191" class="sect3">
<h4 class="sect3">Reserved Words and Keywords</h4>
<p><a id="sthref54"></a><span class="bold">Reserved words</span> and <a id="sthref55"></a><span class="bold">keywords</span> are identifiers that have special meaning in PL/SQL.</p>
<p>You cannot use reserved words as ordinary user-defined identifiers. You can use them as quoted user-defined identifiers, but it is not recommended. For more information, see <a href="#CIHIADCI">"Quoted User-Defined Identifiers"</a>.</p>
<p>You can use keywords as ordinary user-defined identifiers, but it is not recommended.</p>
<p>For lists of PL/SQL reserved words and keywords, see <a href="reservewords.htm#CIHDHDCH">Table D-1</a> and <a href="reservewords.htm#CIHFDHGB">Table D-2</a>, respectively.</p>
</div>
<!-- class="sect3" -->
<a id="CHDGFDJB"></a>
<div id="LNPLS192" class="sect3">
<h4 class="sect3">Predefined Identifiers</h4>
<p><a id="sthref56"></a><span class="bold">Predefined identifiers</span> are declared in the predefined package <code dir="ltr">STANDARD</code>. An example of a predefined identifier is the exception <code dir="ltr">INVALID_NUMBER</code>.</p>
<p>For a list of predefined identifiers, connect to Oracle Database as a user who has the DBA role and use this query:</p>
<pre dir="ltr">
SELECT TYPE_NAME FROM ALL_TYPES WHERE PREDEFINED='YES';
</pre>
<p>You can use predefined identifiers as user-defined identifiers, but it is not recommended. Your local declaration overrides the global declaration (see <a href="#CIHBJJJJ">"Scope and Visibility of Identifiers"</a>).</p>
</div>
<!-- class="sect3" -->
<a id="CIHHAEFE"></a>
<div id="LNPLS167" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">User-Defined Identifiers</h4>
<p>A <a id="sthref57"></a><a id="sthref58"></a><span class="bold">user-defined identifier</span> is:</p>
<ul>
<li>
<p>Composed of characters from the database character set</p>
</li>
<li>
<p>Either ordinary or quoted</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Make user-defined identifiers meaningful. For example, the meaning of <code dir="ltr">cost_per_thousand</code> is obvious, but the meaning of <code dir="ltr">cpt</code> is not.</div>
<div id="LNPLS168" class="sect4"><!-- infolevel="all" infotype="General" --><a id="sthref59"></a>
<h5 class="sect4">Ordinary User-Defined Identifiers</h5>
<p>An <a id="sthref60"></a>ordinary user-defined identifier:</p>
<ul>
<li>
<p>Begins with a letter</p>
</li>
<li>
<p>Can include letters, digits, and these symbols:</p>
<ul>
<li>
<p>Dollar sign ($)</p>
</li>
<li>
<p>Number sign (#)</p>
</li>
<li>
<p>Underscore (_)</p>
</li>
</ul>
</li>
<li>
<p>Is not a reserved word (listed in <a href="reservewords.htm#CIHDHDCH">Table D-1</a>).</p>
</li>
</ul>
<p>The database character set defines which characters are classified as letters and digits. The representation of the identifier in the database character set cannot exceed 30 bytes.</p>
<p>Examples of acceptable ordinary user-defined identifiers:</p>
<pre dir="ltr">
X
t2
phone#
credit_limit
LastName
oracle$number
money$$$tree
SN##
try_again_
</pre>
<p>Examples of unacceptable ordinary user-defined identifiers:</p>
<pre dir="ltr">
mine&amp;yours
debit-amount
on/off
user id
</pre></div>
<!-- class="sect4" -->
<a id="CIHIADCI"></a>
<div id="LNPLS169" class="sect4">
<h5 class="sect4">Quoted User-Defined Identifiers</h5>
<p>A <a id="sthref61"></a>quoted user-defined identifier is enclosed in double quotation marks. Between the double quotation marks, any characters from the database character set are allowed except double quotation marks, new line characters, and null characters. For example, these identifiers are acceptable:</p>
<pre dir="ltr">
"X+Y"
"last name"
"on/off switch"
"employee(s)"
"*** header info ***"
</pre>
<p>The representation of the quoted identifier in the database character set cannot exceed 30 bytes (excluding the double quotation marks).</p>
<p>A quoted user-defined identifier is <a id="sthref62"></a>case-sensitive, with one exception: If a quoted user-defined identifier, without its enclosing double quotation marks, is a valid <span class="italic">ordinary</span> user-defined identifier, then the double quotation marks are optional in references to the identifier, and if you omit them, then the identifier is case-insensitive.</p>
<p>In <a href="#CIHDCHBF">Example 2-1</a>, the quoted user-defined identifier <code dir="ltr">"HELLO"</code>, without its enclosing double quotation marks, is a valid ordinary user-defined identifier. Therefore, the reference <code dir="ltr">Hello</code> is valid.</p>
<div id="LNPLS170" class="example">
<p class="titleinexample"><a id="CIHDCHBF"></a>Example 2-1 Valid Case-Insensitive Reference to Quoted User-Defined Identifier</p>
<pre dir="ltr">
DECLARE
  "HELLO" varchar2(10) := 'hello';
BEGIN
  DBMS_Output.Put_Line(Hello);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
hello
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHCADFI">Example 2-2</a>, the reference <code dir="ltr">"Hello"</code> is invalid, because the double quotation marks make the identifier case-sensitive.</p>
<div id="LNPLS171" class="example">
<p class="titleinexample"><a id="CIHCADFI"></a>Example 2-2 Invalid Case-Insensitive Reference to Quoted User-Defined Identifier</p>
<pre dir="ltr">
DECLARE
  "HELLO" varchar2(10) := 'hello';
BEGIN
  DBMS_Output.Put_Line("Hello");
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
  DBMS_Output.Put_Line("Hello");
                        *
ERROR at line 4:
ORA-06550: line 4, column 25:
PLS-00201: identifier 'Hello' must be declared
ORA-06550: line 4, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<p>It is not recommended, but you can use a reserved word as a quoted user-defined identifier. Because a reserved word is not a valid ordinary user-defined identifier, you must always enclose the identifier in double quotation marks, and it is always case-sensitive.</p>
<p><a href="#CIHGBJDH">Example 2-3</a> declares quoted user-defined identifiers <code dir="ltr">"BEGIN"</code>, <code dir="ltr">"Begin"</code>, and <code dir="ltr">"begin"</code>. Although <code dir="ltr">BEGIN</code>, <code dir="ltr">Begin</code>, and <code dir="ltr">begin</code> represent the same reserved word, <code dir="ltr">"BEGIN"</code>, <code dir="ltr">"Begin"</code>, and <code dir="ltr">"begin"</code> represent different identifiers.</p>
<div id="LNPLS172" class="example">
<p class="titleinexample"><a id="CIHGBJDH"></a>Example 2-3 Reserved Word as Quoted User-Defined Identifier</p>
<pre dir="ltr">
DECLARE
  "BEGIN" varchar2(15) := 'UPPERCASE';
  "Begin" varchar2(15) := 'Initial Capital';
  "begin" varchar2(15) := 'lowercase';
BEGIN
  DBMS_Output.Put_Line("BEGIN");
  DBMS_Output.Put_Line("Begin");
  DBMS_Output.Put_Line("begin");
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
UPPERCASE
Initial Capital
lowercase
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDHFDB">Example 2-4</a> references a quoted user-defined identifier that is a reserved word, neglecting to enclose it in double quotation marks.</p>
<div id="LNPLS173" class="example">
<p class="titleinexample"><a id="CIHDHFDB"></a>Example 2-4 Neglecting Double Quotation Marks</p>
<pre dir="ltr">
DECLARE
  "HELLO" varchar2(10) := 'hello';  -- HELLO is not a reserved word
  "BEGIN" varchar2(10) := 'begin';  -- BEGIN is a reserved word
BEGIN
  DBMS_Output.Put_Line(Hello);      -- Double quotation marks are optional
  DBMS_Output.Put_Line(<span class="bold">BEGIN</span>);      <span class="bold">-- Double quotation marks are required</span>
end;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
  DBMS_Output.Put_Line(BEGIN);      -- Double quotation marks are required
                       *
ERROR at line 6:
ORA-06550: line 6, column 24:
PLS-00103: Encountered the symbol "BEGIN" when expecting one of the following:
( ) - + case mod new not null &lt;an identifier&gt;
&lt;a double-quoted delimited-identifier&gt; &lt;a bind variable&gt;
table continue avg count current exists max min prior sql
stddev sum variance execute multiset the both leading
trailing forall merge year month day hour minute second
timezone_hour timezone_minute timezone_region timezone_abbr
time timestamp interval date
&lt;a string literal with character set specificat
</pre></div>
<!-- class="example" -->
<p><a href="#CIHEHGEI">Example 2-5</a> references a quoted user-defined identifier that is a reserved word, neglecting its case-sensitivity.</p>
<div id="LNPLS175" class="example">
<p class="titleinexample"><a id="CIHEHGEI"></a>Example 2-5 Neglecting Case-Sensitivity</p>
<pre dir="ltr">
DECLARE
  "HELLO" varchar2(10) := 'hello';  -- HELLO is not a reserved word
  "BEGIN" varchar2(10) := 'begin';  -- BEGIN is a reserved word
BEGIN
  DBMS_Output.Put_Line(Hello);      -- Identifier is case-insensitive
  DBMS_Output.Put_Line(<span class="bold">"Begin"</span>);    <span class="bold">-- Identifier is case-sensitive</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
  DBMS_Output.Put_Line("Begin");    -- Identifier is case-sensitive
                        *
ERROR at line 6:
ORA-06550: line 6, column 25:
PLS-00201: identifier 'Begin' must be declared
ORA-06550: line 6, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i6078"></a>
<div id="LNPLS194" class="sect2">
<h3 class="sect2">Literals</h3>
<p><a id="sthref63"></a>A <span class="bold">literal</span> is a value that is neither represented by an identifier nor calculated from other values. For example, <code dir="ltr">123</code> is an integer literal and <code dir="ltr">'abc'</code> is a character literal, but <code dir="ltr">1+2</code> is not a literal.</p>
<p>PL/SQL literals include all SQL literals (described in <a class="olink SQLRF00217" href="../../server.112/e41084/sql_elements003.htm#SQLRF00217"><span class="italic">Oracle Database SQL Language Reference</span></a>) and <code dir="ltr">BOOLEAN</code> literals (which SQL does not have). A <code dir="ltr">BOOLEAN</code> literal is the predefined logical value <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>. <code dir="ltr">NULL</code> represents an unknown value.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Like <span class="italic">Oracle Database SQL Language Reference</span>, this document uses the terms <span class="italic">character literal</span> and <span class="italic">string</span> interchangeably.</div>
<p>When using <a id="sthref64"></a>character literals in PL/SQL, remember:</p>
<ul>
<li>
<p>Character literals are <a id="sthref65"></a>case-sensitive.</p>
<p>For example, <code dir="ltr">'Z'</code> and <code dir="ltr">'z'</code> are different.</p>
</li>
<li>
<p><a id="sthref66"></a>Whitespace characters are significant.</p>
<p>For example, these literals are different:</p>
<pre dir="ltr">
'abc'
' abc'
'abc '
' abc '
'a b c'
</pre></li>
<li>
<p>PL/SQL has no <a id="sthref67"></a>line-continuation character that means "this string continues on the next source line." If you continue a string on the next source line, then the string includes a line-break character.</p>
<p>For example, this PL/SQL code:</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE('This string breaks
here.');
END;
/
</pre>
<p>Prints this:</p>
<pre dir="ltr">
This string breaks
here.
</pre>
<p>If your string does not fit on a source line and you do not want it to include a line-break character, then construct the string with the concatenation operator (<code dir="ltr">||</code>).</p>
<p>For example, this PL/SQL code:</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE('This string ' ||
                       'contains no line-break character.');
END;
/
</pre>
<p>Prints this:</p>
<pre dir="ltr">
This string contains no line-break character.
</pre>
<p>For more information about the concatenation operator, see <a href="#CIHHHEJG">"Concatenation Operator"</a>.</p>
</li>
<li>
<p><code dir="ltr">'0'</code> through <code dir="ltr">'9'</code> are not equivalent to the integer literals 0 through 9.</p>
<p>However, because PL/SQL converts them to integers, you can use them in arithmetic expressions.</p>
</li>
<li>
<p>A character literal with zero characters has the value <code dir="ltr">NULL</code> and is called a <a id="sthref68"></a><a id="sthref69"></a><a id="sthref70"></a><a id="sthref71"></a><span class="bold">null string</span>.</p>
<p>However, this <code dir="ltr">NULL</code> value is not the <code dir="ltr">BOOLEAN</code> value <code dir="ltr">NULL</code>.</p>
</li>
<li>
<p>An <span class="bold">ordinary character literal</span> is composed of characters in the <span class="bold">database character set</span>.</p>
<p>For information about the database character set, see <a class="olink NLSPG171" href="../../server.112/e10729/ch2charset.htm#NLSPG171"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</li>
<li>
<p>A <span class="bold">national character literal</span> is composed of characters in the <span class="bold">national character set</span>.</p>
<p>For information about the national character set, see <a class="olink NLSPG180" href="../../server.112/e10729/ch2charset.htm#NLSPG180"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i6074"></a>
<div id="LNPLS203" class="sect2">
<h3 class="sect2">Comments</h3>
<p><a id="sthref72"></a>The PL/SQL compiler ignores comments. Their purpose is to help other application developers understand your source text. Typically, you use comments to describe the purpose and use of each code segment. You can also disable obsolete or unfinished pieces of code by turning them into comments.</p>
<p class="subhead2"><a id="LNPLS176"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDGEDJA">Single-Line Comments</a></p>
</li>
<li>
<p><a href="#CHDFDDBC">Multiline Comments</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="comment.htm#i33226">"Comment"</a></div>
<a id="CHDGEDJA"></a>
<div id="LNPLS204" class="sect3">
<h4 class="sect3">Single-Line Comments</h4>
<p><a id="sthref73"></a>A single-line comment begins with <code dir="ltr">--</code> and extends to the end of the line.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Do not put a single-line comment in a PL/SQL block to be processed dynamically by an Oracle Precompiler program. The Oracle Precompiler program ignores end-of-line characters, which means that a single-line comment ends when the block ends.</div>
<p><a href="#BEICABIJ">Example 2-6</a> has three single-line comments.</p>
<div id="LNPLS205" class="example">
<p class="titleinexample"><a id="BEICABIJ"></a>Example 2-6 Single-Line Comments</p>
<pre dir="ltr">
DECLARE
  howmany     NUMBER;
  num_tables  NUMBER;
BEGIN
  <span class="bold">-- Begin processing</span>
  SELECT COUNT(*) INTO howmany
  FROM USER_OBJECTS
  WHERE OBJECT_TYPE = 'TABLE'; <span class="bold">-- Check number of tables</span>
  num_tables := howmany;       <span class="bold">-- Compute another value</span>
END;
/
</pre></div>
<!-- class="example" -->
<p>While testing or debugging a program, you can disable a line of code by making it a comment. For example:</p>
<pre dir="ltr">
<span class="bold">--</span> DELETE FROM employees WHERE comm_pct IS NULL
</pre></div>
<!-- class="sect3" -->
<a id="CHDFDDBC"></a>
<div id="LNPLS206" class="sect3">
<h4 class="sect3">Multiline Comments</h4>
<p><a id="sthref74"></a>A multiline comment begins with <code dir="ltr">/*</code>, ends with <code dir="ltr">*/</code>, and can span multiple lines.</p>
<p><a href="#CIHGEJDF">Example 2-7</a> has two multiline comments. (The SQL function <code dir="ltr">TO_CHAR</code> returns the character equivalent of its argument. For more information about <code dir="ltr">TO_CHAR</code>, see <a class="olink SQLRF06128" href="../../server.112/e41084/functions199.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<div id="LNPLS177" class="example">
<p class="titleinexample"><a id="CIHGEJDF"></a>Example 2-7 Multiline Comments</p>
<pre dir="ltr">
DECLARE
  some_condition  BOOLEAN;
  pi              NUMBER := 3.1415926;
  radius          NUMBER := 15;
  area            NUMBER;
BEGIN
  <span class="bold">/* Perform some simple tests and assignments */</span>
 
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  /* We expect this THEN to always be performed */
  END IF;
 
  <span class="bold">/* This line computes the area of a circle using pi,</span>
  <span class="bold">which is the ratio between the circumference and diameter.</span>
  <span class="bold">After the area is computed, the result is displayed. */</span>
 
  area := pi * radius**2;
  DBMS_OUTPUT.PUT_LINE('The area is: ' || TO_CHAR(area));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
The area is: 706.858335
</pre></div>
<!-- class="example" -->
<p>You can use multiline comment delimiters to "comment out" sections of code. When doing so, be careful not to cause <a id="sthref75"></a><a id="sthref76"></a>nested multiline comments. One multiline comment cannot contain another multiline comment. However, a multiline comment can contain a single-line comment. For example, this causes a syntax error:</p>
<pre dir="ltr">
<span class="bold">/*</span>
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  <span class="bold">/*</span> We expect this THEN to always be performed <span class="bold">*/</span>
  END IF;
<span class="bold">*/</span>
</pre>
<p>This does not cause a syntax error:</p>
<pre dir="ltr">
<span class="bold">/*</span>
  IF 2 + 2 = 4 THEN
    some_condition := TRUE;
  <span class="bold">--</span> We expect this THEN to always be performed
  END IF;
<span class="bold">*/</span>
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHFCEAH"></a>
<div id="LNPLS178" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Whitespace Characters Between Lexical Units</h3>
<p>You can put <a id="sthref77"></a>whitespace characters between lexical units, which often makes your source text easier to read, as <a href="#CIHBEDFE">Example 2-8</a> shows.</p>
<div id="LNPLS180" class="example">
<p class="titleinexample"><a id="CIHBEDFE"></a>Example 2-8 Whitespace Characters Improving Source Text Readability</p>
<pre dir="ltr">
DECLARE
  x    NUMBER := 10;
  y    NUMBER := 5;
  max  NUMBER;
BEGIN
  IF x&gt;y THEN max:=x;ELSE max:=y;END IF;  <span class="bold">-- correct but hard to read</span>
  
  <span class="bold">-- Easier to read:</span>
  
  IF x &gt; y THEN
    max:=x;
  ELSE
    max:=y;
  END IF;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i27306"></a>
<div id="LNPLS00202" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Declarations</h2>
<p>A <a id="sthref78"></a>declaration allocates storage space for a value of a specified data type, and names the storage location so that you can reference it. You must declare objects before you can reference them. Declarations can appear in the declarative part of any block, subprogram, or package.</p>
<p class="subhead2"><a id="LNPLS182"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHGGIAH">Variable Declarations</a></p>
</li>
<li>
<p><a href="#BEIJHGDF">Constant Declarations</a></p>
</li>
<li>
<p><a href="#CIHHEIGG">Initial Values of Variables and Constants</a></p>
</li>
<li>
<p><a href="#CIHCJJAG">NOT NULL Constraint</a></p>
</li>
<li>
<p><a href="#i6080">%TYPE Attribute</a></p>
</li>
</ul>
<p>For information about declaring objects other than variables and constants, see the syntax of <code dir="ltr"><span class="codeinlineitalic">declare_section</span></code> in <a href="block.htm#i32791">"Block"</a>.</p>
<a id="CIHGGIAH"></a>
<div id="LNPLS208" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Variable Declarations</h3>
<p>A variable declaration always specifies the name and data type of the variable. For most data types, a variable declaration can also specify an initial value.</p>
<p>The variable name must be a valid user-defined identifier (see <a href="#CIHHAEFE">"User-Defined Identifiers"</a>).</p>
<p>The data type can be any PL/SQL data type. The PL/SQL data types include the SQL data types. A data type is either <a id="sthref79"></a>scalar (without internal components) or composite (with internal components).</p>
<p><a href="#BABEABGF">Example 2-9</a> declares several variables with scalar data types.</p>
<div id="LNPLS183" class="example">
<p class="titleinexample"><a id="BABEABGF"></a>Example 2-9 Scalar Variable Declarations</p>
<pre dir="ltr">
DECLARE
  part_number       NUMBER(6);     -- SQL data type
  part_name         VARCHAR2(20);  -- SQL data type
  in_stock          BOOLEAN;       -- PL/SQL-only data type
  part_price        NUMBER(6,2);   -- SQL data type
  part_description  VARCHAR2(50);  -- SQL data type
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="variable_declaration.htm#CJAGIBHH">"Scalar Variable Declaration"</a> for scalar variable declaration syntax</p>
</li>
<li>
<p><a href="datatypes.htm#CJAEDAEA">Chapter 3, "PL/SQL Data Types"</a> for information about scalar data types</p>
</li>
<li>
<p><a href="composites.htm#CIHIEBJC">Chapter 5, "PL/SQL Collections and Records,"</a> for information about composite data types and variables</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="BEIJHGDF"></a>
<div id="LNPLS210" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Constant Declarations</h3>
<p><a id="sthref80"></a>The information in <a href="#CIHGGIAH">"Variable Declarations"</a> also applies to constant declarations, but a constant declaration has two more requirements: the keyword <code dir="ltr">CONSTANT</code> and the initial value of the constant. (The initial value of a constant is its permanent value.)</p>
<p><a href="#CIHFHFEB">Example 2-10</a> declares three constants with scalar data types.</p>
<div id="LNPLS193" class="example">
<p class="titleinexample"><a id="CIHFHFEB"></a>Example 2-10 Constant Declarations</p>
<pre dir="ltr">
DECLARE
  credit_limit     <span class="bold">CONSTANT</span> REAL    <span class="bold">:= 5000.00</span>;  -- SQL data type
  max_days_in_year <span class="bold">CONSTANT</span> INTEGER <span class="bold">:= 366</span>;      -- SQL data type
  urban_legend     <span class="bold">CONSTANT</span> BOOLEAN <span class="bold">:= FALSE</span>;    -- PL/SQL-only data type
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="constant.htm#i33299">"Constant Declaration"</a> for constant declaration syntax</div>
</div>
<!-- class="sect2" -->
<a id="CIHHEIGG"></a>
<div id="LNPLS195" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Initial Values of Variables and Constants</h3>
<p>In a variable declaration, the <a id="sthref81"></a><a id="sthref82"></a>initial value is optional unless you specify the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint (for details, see <a href="#CIHCJJAG">"NOT NULL Constraint"</a>). In a constant declaration, the <a id="sthref83"></a><a id="sthref84"></a>initial value is required.</p>
<p>If the declaration is in a block or subprogram, the initial value is assigned to the variable or constant every time control passes to the block or subprogram. If the declaration is in a package specification, the initial value is assigned to the variable or constant for each session (whether the variable or constant is public or private).</p>
<p>To specify the initial value, use either the assignment operator (<code dir="ltr">:=</code>) or the keyword <code dir="ltr">DEFAULT</code>, followed by an expression. The expression can include previously declared constants and previously initialized variables.</p>
<p><a href="#CIHBCHCE">Example 2-11</a> assigns initial values to the constant and variables that it declares. The initial value of <code dir="ltr">area</code> depends on the previously declared constant <code dir="ltr">pi</code> and the previously initialized variable <code dir="ltr">radius</code>.</p>
<div id="LNPLS196" class="example">
<p class="titleinexample"><a id="CIHBCHCE"></a>Example 2-11 Variable and Constant Declarations with Initial Values</p>
<pre dir="ltr">
DECLARE
  hours_worked    INTEGER <span class="bold">:= 40</span>;
  employee_count  INTEGER <span class="bold">:= 0</span>;

  pi     CONSTANT REAL <span class="bold">:= 3.14159</span>;
  radius          REAL <span class="bold">:= 1</span>;
  area            REAL <span class="bold">:= (pi * radius**2)</span>;
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<p>If you do not specify an initial value for a variable, assign a value to it before using it in any other context.</p>
<p>In <a href="#CIHIBJJF">Example 2-12</a>, the variable <code dir="ltr">counter</code> has the initial value <code dir="ltr">NULL</code>, by default. As the example shows (using the <a href="#CIHDCCGF">"IS [NOT] NULL Operator"</a>) <code dir="ltr">NULL</code> is different from zero.</p>
<div id="LNPLS241" class="example">
<p class="titleinexample"><a id="CIHIBJJF"></a>Example 2-12 Variable Initialized to NULL by Default</p>
<pre dir="ltr">
DECLARE
  counter INTEGER;  -- initial value is NULL by default
BEGIN
  counter := counter + 1;  -- NULL + 1 is still NULL
  
  IF counter IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('counter is NULL.');
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
counter is NULL.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="composites.htm#BABEADJA">"Declaring Associative Array Constants"</a> for information about declaring constant associative arrays</p>
</li>
<li>
<p><a href="composites.htm#BABGGGGB">"Declaring Record Constants"</a> for information about declaring constant records</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHCJJAG"></a>
<div id="LNPLS197" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">NOT NULL Constraint</h3>
<p>You can impose the <a id="sthref85"></a><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint on a scalar variable or constant (or scalar component of a composite variable or constant). The <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint prevents assigning a null value to the item. The item can acquire this constraint either implicitly (from its data type) or explicitly.</p>
<p>A scalar variable declaration that specifies <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>, either implicitly or explicitly, must assign an <a id="sthref86"></a>initial value to the variable (because the default initial value for a scalar variable is <code dir="ltr">NULL</code>).</p>
<p>In <a href="#CIHJJHCE">Example 2-13</a>, the variable <code dir="ltr">acct_id</code> acquires the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint explicitly, and the variables <code dir="ltr">a</code>, <code dir="ltr">b</code>, and <code dir="ltr">c</code> acquire it from their data types.</p>
<div id="LNPLS198" class="example">
<p class="titleinexample"><a id="CIHJJHCE"></a>Example 2-13 Variable Declaration with NOT NULL Constraint</p>
<pre dir="ltr">
DECLARE
  acct_id INTEGER(4) <span class="bold">NOT NULL := 9999</span>;
  a <span class="bold">NATURALN                  := 9999</span>;
  b <span class="bold">POSITIVEN                 := 9999</span>;
  c <span class="bold">SIMPLE_INTEGER            := 9999</span>;
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<p>PL/SQL treats any zero-length string as a <code dir="ltr">NULL</code> value. This includes values returned by character functions and <code dir="ltr">BOOLEAN</code> expressions.</p>
<p>In <a href="#CIHFHGHF">Example 2-14</a>, all variables are initialized to <code dir="ltr">NULL</code>.</p>
<div id="LNPLS199" class="example">
<p class="titleinexample"><a id="CIHFHGHF"></a>Example 2-14 Variables Initialized to NULL Values</p>
<pre dir="ltr">
DECLARE
  null_string  VARCHAR2(80) := TO_CHAR('');
  address      VARCHAR2(80);
  zip_code     VARCHAR2(80) := SUBSTR(address, 25, 0);
  name         VARCHAR2(80);
  valid        BOOLEAN      := (name != '');
BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" -->
<p>To test for a <code dir="ltr">NULL</code> value, use the <a href="#CIHDCCGF">"IS [NOT] NULL Operator"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i6080"></a>
<div id="LNPLS99970" class="sect2">
<h3 class="sect2">%TYPE Attribute</h3>
<p>The <a id="sthref87"></a><code dir="ltr">%TYPE</code> attribute lets you declare a data item of the same data type as a previously declared variable or column (without knowing what that type is). If the declaration of the referenced item changes, then the declaration of the referencing item changes accordingly.</p>
<p>The syntax of the declaration is:</p>
<pre dir="ltr">
<span class="italic">referencing_item</span> <span class="italic">referenced_item</span>%TYPE;
</pre>
<p>For the kinds of items that can be referencing and referenced items, see <a href="type_attribute.htm#i36397">"%TYPE Attribute"</a>.</p>
<p>The referencing item inherits the following from the referenced item:</p>
<ul>
<li>
<p>Data type and size</p>
</li>
<li>
<p>Constraints (unless the referenced item is a column)</p>
</li>
</ul>
<p>The referencing item does not inherit the <a id="sthref88"></a><a id="sthref89"></a>initial value of the referenced item. Therefore, if the referencing item specifies or inherits the <a id="sthref90"></a><a id="sthref91"></a><code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, you must specify an initial value for it.</p>
<p>The <code dir="ltr">%TYPE</code> attribute is particularly useful when declaring variables to hold database values. The syntax for declaring a variable of the same type as a column is:</p>
<pre dir="ltr">
<span class="italic">variable_name</span> <span class="italic">table_name</span>.<span class="italic">column_name</span>%TYPE;
</pre>
<p>In <a href="#CIHCGIGG">Example 2-15</a>, the variable <code dir="ltr">surname</code> inherits the data type and size of the column <code dir="ltr">employees</code>.<code dir="ltr">last_name</code>, which has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint. Because <code dir="ltr">surname</code> does not inherit the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, its declaration does not need an initial value.</p>
<div id="LNPLS200" class="example">
<p class="titleinexample"><a id="CIHCGIGG"></a>Example 2-15 Declaring Variable of Same Type as Column</p>
<pre dir="ltr">
DECLARE
  surname  employees.last_name%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE('surname=' || surname);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
surname=
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHJEIEE">Example 2-16</a>, the variable <code dir="ltr">surname</code> inherits the data type, size, and <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint of the variable <code dir="ltr">name</code>. Because <code dir="ltr">surname</code> does not inherit the initial value of <code dir="ltr">name</code>, its declaration needs an initial value (which cannot exceed 25 characters).</p>
<div id="LNPLS201" class="example">
<p class="titleinexample"><a id="CIHJEIEE"></a>Example 2-16 Declaring Variable of Same Type as Another Variable</p>
<pre dir="ltr">
DECLARE
  name     VARCHAR(25) NOT NULL := 'Smith';
  surname  name%TYPE <span class="bold">:= 'Jones'</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE('name=' || name);
  DBMS_OUTPUT.PUT_LINE('surname=' || surname);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
name=Smith
surname=Jones
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="composites.htm#i6079">"%ROWTYPE Attribute"</a>, which lets you declare a record variable that represents either a full or partial row of a database table or view</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBICEG"></a>
<div id="LNPLS202" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">References to Identifiers</h2>
<p><a id="sthref92"></a>When referencing an identifier, you use a name that is either simple, qualified, remote, or both qualified and remote.</p>
<p>The <a id="sthref93"></a><a id="sthref94"></a><span class="bold">simple name</span> of an identifier is the name in its declaration. For example:</p>
<pre dir="ltr">
DECLARE
  <span class="bold">a</span> INTEGER;  -- Declaration
BEGIN
  <span class="bold">a</span> := 1;     -- Reference with simple name
END;
/
</pre>
<p>If an identifier is declared in a named PL/SQL unit, you can (and sometimes must) reference it with its <span class="bold">qualified name</span>. The syntax (called <a id="sthref95"></a><span class="bold">dot notation</span>) is:</p>
<pre dir="ltr">
<span class="italic">unit_name</span>.<span class="italic">simple_identifier_name</span>
</pre>
<p>For example, if package <code dir="ltr">p</code> declares identifier <code dir="ltr">a</code>, you can reference the identifier with the qualified name <code dir="ltr">p</code>.<code dir="ltr">a</code>. The unit name also can (and sometimes must) be qualified. You <span class="italic">must</span> qualify an identifier when it is not visible (see <a href="#CIHBJJJJ">"Scope and Visibility of Identifiers"</a>).</p>
<p>If the identifier names an object on a remote database, you must reference it with its <a id="sthref96"></a><a id="sthref97"></a><span class="bold">remote name</span>. The syntax is:</p>
<pre dir="ltr">
<span class="italic">simple_identifier_name</span>@<span class="italic">link_to_remote_database</span>
</pre>
<p>If the identifier is declared in a PL/SQL unit on a remote database, you must reference it with its <a id="sthref98"></a><a id="sthref99"></a><span class="bold">qualified remote name</span>. The syntax is:</p>
<pre dir="ltr">
<span class="italic">unit_name</span>.<span class="italic">simple_identifier_name</span>@<span class="italic">link_to_remote_database</span>
</pre>
<p>You can create <a id="sthref100"></a>synonyms for remote schema objects, but you cannot create synonyms for objects declared in PL/SQL subprograms or packages. To create a synonym, use the SQL statement <code dir="ltr">CREATE</code> <code dir="ltr">SYNONYM</code>, explained in <a class="olink SQLRF01401" href="../../server.112/e41084/statements_7001.htm#SQLRF01401"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>For information about how PL/SQL resolves ambiguous names, see <a href="nameresolution.htm#CHDGABGF">Appendix B, "PL/SQL Name Resolution"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can reference identifiers declared in the packages <a id="sthref101"></a><code dir="ltr">STANDARD</code> and <a id="sthref102"></a><a id="sthref103"></a><code dir="ltr">DBMS_STANDARD</code> without qualifying them with the package names, unless you have declared a local identifier with the same name (see <a href="#CIHBJJJJ">"Scope and Visibility of Identifiers"</a>).</div>
</div>
<!-- class="sect1" -->
<a id="CIHBJJJJ"></a>
<div id="LNPLS99945" class="sect1">
<h2 class="sect1">Scope and Visibility of Identifiers</h2>
<p>The <a id="sthref104"></a><a id="sthref105"></a><span class="bold">scope</span> of an identifier is the region of a PL/SQL unit from which you can reference the identifier. The <a id="sthref106"></a><a id="sthref107"></a><span class="bold">visibility</span> of an identifier is the region of a PL/SQL unit from which you can reference the identifier without qualifying it. An identifier is <a id="sthref108"></a><a id="sthref109"></a><span class="bold">local</span> to the PL/SQL unit that declares it. If that unit has subunits, the identifier is <a id="sthref110"></a><a id="sthref111"></a><span class="bold">global</span> to them.</p>
<p>If a subunit redeclares a global identifier, then inside the subunit, both identifiers are in scope, but only the local identifier is visible. To reference the global identifier, the subunit must qualify it with the name of the unit that declared it. If that unit has no name, then the subunit cannot reference the global identifier.</p>
<p>A PL/SQL unit cannot reference identifiers declared in other units at the same level, because those identifiers are neither local nor global to the block.</p>
<p><a href="#BEIGJIBA">Example 2-17</a> shows the scope and visibility of several identifiers. The first sub-block redeclares the global identifier <code dir="ltr">a</code>. To reference the global variable <code dir="ltr">a</code>, the first sub-block would have to qualify it with the name of the outer block&mdash;but the outer block has no name. Therefore, the first sub-block cannot reference the global variable <code dir="ltr">a</code>; it can reference only its local variable <code dir="ltr">a</code>. Because the sub-blocks are at the same level, the first sub-block cannot reference <code dir="ltr">d</code>, and the second sub-block cannot reference <code dir="ltr">c</code>.</p>
<div id="LNPLS207" class="example">
<p class="titleinexample"><a id="BEIGJIBA"></a>Example 2-17 Scope and Visibility of Identifiers</p>
<pre dir="ltr">
-- Outer block:
DECLARE
  <span class="bold">a CHAR;</span>  -- Scope of a (CHAR) begins
  b REAL;    -- Scope of b begins
BEGIN
  -- Visible: a (CHAR), b
  
  -- First sub-block:
  DECLARE
    <span class="bold">a INTEGER;</span>  -- Scope of a (INTEGER) begins
    c REAL;       -- Scope of c begins
  BEGIN
    -- Visible: a (INTEGER), b, c
    NULL;
  END;          -- Scopes of a (INTEGER) and c end

  -- Second sub-block:
  DECLARE
    d REAL;     -- Scope of d begins
  BEGIN
    -- Visible: a (CHAR), b, d
    NULL;
  END;          -- Scope of d ends

-- Visible: a (CHAR), b
END;            -- Scopes of a (CHAR) and b end
/
</pre></div>
<!-- class="example" -->
<p><a href="#CIHEFEEH">Example 2-18</a> labels the outer block with the name <code dir="ltr">outer</code>. Therefore, after the sub-block redeclares the global variable <code dir="ltr">birthdate</code>, it can reference that global variable by qualifying its name with the block label. The sub-block can also reference its local variable <code dir="ltr">birthdate</code>, by its simple name.</p>
<div id="LNPLS209" class="example">
<p class="titleinexample"><a id="CIHEFEEH"></a>Example 2-18 Qualifying Redeclared Global Identifier with Block Label</p>
<pre dir="ltr">
&lt;&lt;<span class="bold">outer</span>&gt;&gt;  -- label
DECLARE
  <span class="bold">birthdate</span> DATE := '09-AUG-70';
BEGIN
  DECLARE
    <span class="bold">birthdate</span> DATE := '29-SEP-70';
  BEGIN
    IF <span class="bold">birthdate</span> = <span class="bold">outer.birthdate</span> THEN
      DBMS_OUTPUT.PUT_LINE ('Same Birthday');
    ELSE
      DBMS_OUTPUT.PUT_LINE ('Different Birthday');
    END IF;
  END;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Different Birthday
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHIGGDA">Example 2-19</a>, the procedure <code dir="ltr">check_credit</code> declares a variable, <code dir="ltr">rating</code>, and a function, <code dir="ltr">check_rating</code>. The function redeclares the variable. Then the function references the global variable by qualifying it with the procedure name.</p>
<div id="LNPLS211" class="example">
<p class="titleinexample"><a id="CIHIGGDA"></a>Example 2-19 Qualifying Identifier with Subprogram Name</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE check_credit (credit_limit NUMBER) AS
  <span class="bold">rating</span> NUMBER := 3;
  
  FUNCTION check_rating RETURN BOOLEAN IS
    <span class="bold">rating</span>  NUMBER := 1;
    over_limit  BOOLEAN;
  BEGIN
    IF <span class="bold">check_credit.rating</span> &lt;= credit_limit THEN  -- reference global variable
      over_limit := FALSE;
    ELSE
      over_limit := TRUE;
      <span class="bold">rating</span> := credit_limit;                    -- reference local variable
    END IF;
    RETURN over_limit;
  END check_rating;
BEGIN
  IF check_rating THEN
    DBMS_OUTPUT.PUT_LINE
      ('Credit rating over limit (' || TO_CHAR(credit_limit) || ').  '
      || 'Rating: ' || TO_CHAR(rating));
  ELSE
    DBMS_OUTPUT.PUT_LINE
      ('Credit rating OK.  ' || 'Rating: ' || TO_CHAR(rating));
  END IF;
END;
/
 
BEGIN
  check_credit(1);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Credit rating over limit (1).  Rating: 3
</pre></div>
<!-- class="example" -->
<p>You cannot declare the same identifier twice in the same PL/SQL unit. If you do, an error occurs when you reference the duplicate identifier, as <a href="#BEIFFHGF">Example 2-20</a> shows.</p>
<div id="LNPLS229" class="example">
<p class="titleinexample"><a id="BEIFFHGF"></a>Example 2-20 Duplicate Identifiers in Same Scope</p>
<pre dir="ltr">
DECLARE
  id  BOOLEAN;
  id  VARCHAR2(5);  -- duplicate identifier
BEGIN
  <span class="bold">id := FALSE;</span>
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
  id := FALSE;
  *
ERROR at line 5:
ORA-06550: line 5, column 3:
PLS-00371: at most one declaration for 'ID' is permitted
ORA-06550: line 5, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<p>You can declare the same identifier in two different units. The two objects represented by the identifier are distinct. Changing one does not affect the other, as <a href="#CIHHIDJI">Example 2-21</a> shows.</p>
<div id="LNPLS212" class="example">
<p class="titleinexample"><a id="CIHHIDJI"></a>Example 2-21 Declaring Same Identifier in Different Units</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p
  IS
    <span class="bold">x</span> VARCHAR2(1);
  BEGIN
    <span class="bold">x := 'a';</span>  -- Assign the value 'a' to x
    DBMS_OUTPUT.PUT_LINE('In procedure p, x = ' || x);
  END;
 
  PROCEDURE q
  IS
    <span class="bold">x</span> VARCHAR2(1);
  BEGIN
    <span class="bold">x := 'b';</span>  -- Assign the value 'b' to x
    DBMS_OUTPUT.PUT_LINE('In procedure q, x = ' || x);
  END;
 
BEGIN
  p;
  q;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
In procedure p, x = a
In procedure q, x = b
</pre></div>
<!-- class="example" -->
<p>In the same scope, give labels and subprograms unique names to avoid confusion and unexpected results.</p>
<p>In <a href="#CIHIHCEJ">Example 2-22</a>, <code dir="ltr">echo</code> is the name of both a block and a subprogram. Both the block and the subprogram declare a variable named <code dir="ltr">x</code>. In the subprogram, <code dir="ltr">echo</code>.<code dir="ltr">x</code> refers to the local variable <code dir="ltr">x</code>, not to the global variable <code dir="ltr">x</code>.</p>
<div id="LNPLS213" class="example">
<p class="titleinexample"><a id="CIHIHCEJ"></a>Example 2-22 Label and Subprogram with Same Name in Same Scope</p>
<pre dir="ltr">
&lt;&lt;<span class="bold">echo</span>&gt;&gt;
DECLARE
  <span class="bold">x</span>  NUMBER := 5;
  
  PROCEDURE <span class="bold">echo</span> AS
    <span class="bold">x</span>  NUMBER := 0;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('x = ' || x);
    DBMS_OUTPUT.PUT_LINE('echo.x = ' || echo.x);
  END;
 
BEGIN
  echo;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
x = 0
echo.x = 0
</pre></div>
<!-- class="example" -->
<p><a href="#CJAGDGJE">Example 2-23</a> has two labels for the outer block, <code dir="ltr">compute_ratio</code> and <code dir="ltr">another_label</code>. The second label appears again in the inner block. In the inner block, <code dir="ltr">another_label</code>.<code dir="ltr">denominator</code> refers to the local variable <code dir="ltr">denominator</code>, not to the global variable <code dir="ltr">denominator</code>, which results in the error <code dir="ltr">ZERO_DIVIDE</code>.</p>
<div id="LNPLS214" class="example">
<p class="titleinexample"><a id="CJAGDGJE"></a>Example 2-23 Block with Multiple and Duplicate Labels</p>
<pre dir="ltr">
<span class="bold">&lt;&lt;compute_ratio&gt;&gt;</span>
<span class="bold">&lt;&lt;another_label&gt;&gt;</span>
DECLARE
  numerator   NUMBER := 22;
  <span class="bold">denominator NUMBER := 7;</span>
BEGIN
  <span class="bold">&lt;&lt;another_label&gt;&gt;</span>
  DECLARE
    <span class="bold">denominator NUMBER := 0;</span>
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Ratio with compute_ratio.denominator = ');
    DBMS_OUTPUT.PUT_LINE(numerator/<span class="bold">compute_ratio.denominator</span>);
 
    DBMS_OUTPUT.PUT_LINE('Ratio with another_label.denominator = ');
    DBMS_OUTPUT.PUT_LINE(numerator/<span class="bold">another_label.denominator</span>);
 
  EXCEPTION
    WHEN ZERO_DIVIDE THEN
      DBMS_OUTPUT.PUT_LINE('Divide-by-zero error: can''t divide '
        || numerator || ' by ' || denominator);
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Unexpected error.');
  END another_label;
END compute_ratio;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Ratio with compute_ratio.denominator =
3.14285714285714285714285714285714285714
<span class="bold">Ratio with another_label.denominator =</span>
<span class="bold">Divide-by-zero error: cannot divide 22 by 0</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i16001"></a>
<div id="LNPLS00205" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Assigning Values to Variables</h2>
<p><a id="sthref112"></a><a id="sthref113"></a>After declaring a variable, you can assign a value to it in these ways:</p>
<ul>
<li>
<p>Use the assignment statement to assign it the value of an expression.</p>
</li>
<li>
<p>Use the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> or <code dir="ltr">FETCH</code> statement to assign it a value from a table.</p>
</li>
<li>
<p>Pass it to a subprogram as an <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter, and then assign the value inside the subprogram.</p>
</li>
</ul>
<p>The variable and the value must have compatible data types. One data type is <a id="sthref114"></a><a id="sthref115"></a><a id="sthref116"></a><span class="bold">compatible</span> with another data type if it can be implicitly converted to that type. For information about implicit data conversion, see <a class="olink SQLRF51047" href="../../server.112/e41084/sql_elements002.htm#SQLRF51047"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p class="subhead2"><a id="LNPLS215"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHHFHJG">Assigning Values to Variables with the Assignment Statement</a></p>
</li>
<li>
<p><a href="#CIHGGGGI">Assigning Values to Variables with the SELECT INTO Statement</a></p>
</li>
<li>
<p><a href="#CIHGDGCH">Assigning Values to Variables as Parameters of a Subprogram</a></p>
</li>
<li>
<p><a href="#CHDFFIEA">Assigning Values to BOOLEAN Variables</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="composites.htm#i20985">"Assigning Values to Collection Variables"</a></p>
</li>
<li>
<p><a href="composites.htm#i20483">"Assigning Values to Record Variables"</a></p>
</li>
<li>
<p><a href="fetch_statement.htm#i34221">"FETCH Statement"</a></p>
</li>
</ul>
</div>
<a id="CIHHFHJG"></a>
<div id="LNPLS216" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Assigning Values to Variables with the Assignment Statement</h3>
<p>To assign the value of an expression to a variable, use this form of the <a id="sthref117"></a>assignment statement:</p>
<pre dir="ltr">
<span class="italic">variable_name</span> := <span class="italic">expression</span>;
</pre>
<p>For the complete syntax of the assignment statement, see <a href="assignment_statement.htm#CHDIGIFB">"Assignment Statement"</a>. For the syntax of an expression, see <a href="expression.htm#i34030">"Expression"</a>.</p>
<p><a href="#BABBDCEC">Example 2-24</a> declares several variables (specifying initial values for some) and then uses assignment statements to assign the values of expressions to them.</p>
<div id="LNPLS217" class="example">
<p class="titleinexample"><a id="BABBDCEC"></a>Example 2-24 Assigning Values to Variables with Assignment Statement</p>
<pre dir="ltr">
DECLARE  -- You can assign initial values here
  wages          NUMBER;
  hours_worked   NUMBER := 40;
  hourly_salary  NUMBER := 22.50;
  bonus          NUMBER := 150;
  country        VARCHAR2(128);
  counter        NUMBER := 0;
  done           BOOLEAN;
  valid_id       BOOLEAN;
  emp_rec1       employees%ROWTYPE;
  emp_rec2       employees%ROWTYPE;
  TYPE commissions IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
  comm_tab       commissions;
 
BEGIN  -- You can assign values here too
  wages := (hours_worked * hourly_salary) + bonus;
  country := 'France';
  country := UPPER('Canada');
  done := (counter &gt; 100);
  valid_id := TRUE;
  emp_rec1.first_name := 'Antonio';
  emp_rec1.last_name := 'Ortiz';
  emp_rec1 := emp_rec2;
  comm_tab(5) := 20000 * 0.15;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGGGGI"></a>
<div id="LNPLS218" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Assigning Values to Variables with the SELECT INTO Statement</h3>
<p>A simple form of the <a id="sthref118"></a><code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement is:</p>
<pre dir="ltr">
SELECT <span class="italic">select_item</span> [, <span class="italic">select_item</span> ]... 
INTO <span class="italic">variable_name</span> [, <span class="italic">variable_name</span> ]...
FROM <span class="italic">table_name</span>;
</pre>
<p>For each <code dir="ltr"><span class="codeinlineitalic">select_item</span></code>, there must be a corresponding, type-compatible <code dir="ltr"><span class="codeinlineitalic">variable_name</span></code>. Because SQL does not have a <code dir="ltr">BOOLEAN</code> type, <code dir="ltr"><span class="codeinlineitalic">variable_name</span></code> cannot be a <code dir="ltr">BOOLEAN</code> variable. For the complete syntax of the <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement, see <a href="selectinto_statement.htm#i36066">"SELECT INTO Statement"</a>.</p>
<p><a href="#BABHFEHA">Example 2-25</a> uses a <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement to assign to the variable <code dir="ltr">bonus</code> the value that is 10% of the salary of the employee whose <code dir="ltr">employee_id</code> is 100.</p>
<div id="LNPLS150" class="example">
<p class="titleinexample"><a id="BABHFEHA"></a>Example 2-25 Assigning Value to Variable with SELECT INTO Statement</p>
<pre dir="ltr">
DECLARE
  bonus   NUMBER(8,2);
BEGIN
  <span class="bold">SELECT salary * 0.10 INTO bonus</span>
  <span class="bold">FROM employees</span>
  <span class="bold">WHERE employee_id = 100;</span>
END;

DBMS_OUTPUT.PUT_LINE('bonus = ' || TO_CHAR(bonus));
/
</pre>
<p>Result:</p>
<pre dir="ltr">
bonus = 2646
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGDGCH"></a>
<div id="LNPLS222" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Assigning Values to Variables as Parameters of a Subprogram</h3>
<p>If you pass a variable to a subprogram as an <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter, and the subprogram assigns a value to the parameter, the variable retains that value after the subprogram finishes running. For more information, see <a href="subprograms.htm#i23202">"Subprogram Parameters"</a>.</p>
<p><a href="#BABIIBDF">Example 2-26</a> passes the variable <code dir="ltr">new_sal</code> to the procedure <code dir="ltr">adjust_salary</code>. The procedure assigns a value to the corresponding formal parameter, <code dir="ltr">sal</code>. Because <code dir="ltr">sal</code> is an <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter, the variable <code dir="ltr">new_sal</code> retains the assigned value after the procedure finishes running.</p>
<div id="LNPLS151" class="example">
<p class="titleinexample"><a id="BABIIBDF"></a>Example 2-26 Assigning Value to Variable as IN OUT Subprogram Parameter</p>
<pre dir="ltr">
DECLARE
  emp_salary  NUMBER(8,2);
 
  PROCEDURE adjust_salary (
    emp        NUMBER, 
    sal IN OUT NUMBER,
    adjustment NUMBER
  ) IS
  BEGIN
    sal := sal + adjustment;
  END;
 
BEGIN
  SELECT salary INTO emp_salary
  FROM employees
  WHERE employee_id = 100;
 
  DBMS_OUTPUT.PUT_LINE
   ('Before invoking procedure, emp_salary: ' || emp_salary);
 
  adjust_salary (100, emp_salary, 1000);
 
  DBMS_OUTPUT.PUT_LINE
   ('After invoking procedure, emp_salary: ' || emp_salary);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Before invoking procedure, emp_salary: 24000
After invoking procedure, emp_salary: 25000
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDFFIEA"></a>
<div id="LNPLS242" class="sect2">
<h3 class="sect2">Assigning Values to BOOLEAN Variables</h3>
<p>The only values that you can assign to a <a id="sthref119"></a><a id="sthref120"></a><code dir="ltr">BOOLEAN</code> variable are <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, and <code dir="ltr">NULL</code>.</p>
<p><a href="#CIHEFBAD">Example 2-27</a> initializes the <code dir="ltr">BOOLEAN</code> variable <code dir="ltr">done</code> to <code dir="ltr">NULL</code> by default, assigns it the literal value <code dir="ltr">FALSE</code>, compares it to the literal value <code dir="ltr">TRUE</code>, and assigns it the value of a <code dir="ltr">BOOLEAN</code> expression.</p>
<div id="LNPLS243" class="example">
<p class="titleinexample"><a id="CIHEFBAD"></a>Example 2-27 Assigning Value to BOOLEAN Variable</p>
<pre dir="ltr">
DECLARE
  <span class="bold">done    BOOLEAN;              -- Initial value is NULL by default</span>
  counter NUMBER := 0;
BEGIN
  <span class="bold">done := FALSE;                -- Assign literal value</span>
  WHILE <span class="bold">done != TRUE            -- Compare to literal value</span>
    LOOP
      counter := counter + 1;
      <span class="bold">done := (counter &gt; 500);  -- Assign value of BOOLEAN expression</span>
    END LOOP;
END;
/
</pre></div>
<!-- class="example" -->
<p>For more information about the <code dir="ltr">BOOLEAN</code> data type, see <a href="datatypes.htm#CJACJGBG">"BOOLEAN Data Type"</a>.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i16003"></a>
<div id="LNPLS00206" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Expressions</h2>
<p><a id="sthref121"></a>An expression always returns a single value. The simplest expressions, in order of increasing complexity, are:</p>
<ol>
<li>
<p>A single constant or variable (for example, <code dir="ltr">a</code>)</p>
</li>
<li>
<p>A unary operator and its single operand (for example, <code dir="ltr">-a</code>)</p>
</li>
<li>
<p>A binary operator and its two operands (for example, <code dir="ltr">a+b</code>)</p>
</li>
</ol>
<p>An <span class="bold">operand</span> can be a variable, constant, literal, operator, function invocation, or placeholder&mdash;or another expression. Therefore, expressions can be arbitrarily complex. For expression syntax, see <a href="expression.htm#i34030">"Expression"</a>.</p>
<p>The data types of the operands determine the data type of the expression. Every time the expression is evaluated, a single value of that data type results. The data type of that result is the <a id="sthref122"></a>data type of the <a id="sthref123"></a>expression.</p>
<p class="subhead2"><a id="LNPLS223"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHHHEJG">Concatenation Operator</a></p>
</li>
<li>
<p><a href="#CHDCDGCF">Operator Precedence</a></p>
</li>
<li>
<p><a href="#i6076">Logical Operators</a></p>
</li>
<li>
<p><a href="#CBJIGIFG">Short-Circuit Evaluation</a></p>
</li>
<li>
<p><a href="#CBJJAJCH">Comparison Operators</a></p>
</li>
<li>
<p><a href="#CHDCGDDH">BOOLEAN Expressions</a></p>
</li>
<li>
<p><a href="#i37590">CASE Expressions</a></p>
</li>
<li>
<p><a href="#CHDJAEED">SQL Functions in PL/SQL Expressions</a></p>
</li>
</ul>
<a id="CIHHHEJG"></a>
<div id="LNPLS246" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Concatenation Operator</h3>
<p>The <a id="sthref124"></a>concatenation operator (<code dir="ltr">||</code>) appends one string operand to another, as <a href="#CIHEGDBG">Example 2-28</a> shows.</p>
<div id="LNPLS247" class="example">
<p class="titleinexample"><a id="CIHEGDBG"></a>Example 2-28 Concatenation Operator</p>
<pre dir="ltr">
DECLARE
  <span class="bold">x VARCHAR2(4) := 'suit';</span>
  <span class="bold">y VARCHAR2(4) := 'case';</span>
BEGIN
  DBMS_OUTPUT.PUT_LINE (<span class="bold">x || y</span>);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">suitcase</span>
</pre></div>
<!-- class="example" -->
<p>The concatenation operator ignores <a id="sthref125"></a>null operands, as <a href="#CIHFJBCJ">Example 2-29</a> shows.</p>
<div id="LNPLS224" class="example">
<p class="titleinexample"><a id="CIHFJBCJ"></a>Example 2-29 Concatenation Operator with NULL Operands</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE ('apple' || NULL || NULL || 'sauce');
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
applesauce
</pre></div>
<!-- class="example" -->
<p>For more information about the syntax of the concatenation operator, see <a href="expression.htm#CHDGJCJE">"<span class="italic">character_expression</span> ::="</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDCDGCF"></a>
<div id="LNPLS248" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Operator Precedence</h3>
<p>An <a id="sthref126"></a><span class="bold">operation</span> is either a unary operator and its single operand or a binary operator and its two operands. The operations in an expression are evaluated in order of <a id="sthref127"></a><a id="sthref128"></a><a id="sthref129"></a>operator precedence.</p>
<p><a href="#g962825">Table 2-3</a> shows operator precedence from highest to lowest. Operators with equal precedence are evaluated in no particular order.</p>
<div id="LNPLS249" class="tblformal">
<p class="titleintable"><a id="sthref130"></a><a id="g962825"></a>Table 2-3 Operator Precedence</p>
<table class="cellalignment1092" title="Operator Precedence" summary="This table shows the default order of operations." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t17">Operator</th>
<th class="cellalignment1090" id="r1c2-t17">Operation</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t17" headers="r1c1-t17">
<p><code dir="ltr">**</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t17 r1c2-t17">
<p>exponentiation</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t17" headers="r1c1-t17">
<p><code dir="ltr">+</code>, <code dir="ltr">-</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t17 r1c2-t17">
<p>identity, negation</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t17" headers="r1c1-t17">
<p><code dir="ltr">*</code>, <code dir="ltr">/</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t17 r1c2-t17">
<p>multiplication, division</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t17" headers="r1c1-t17">
<p><code dir="ltr">+</code>, <code dir="ltr">-</code>, <code dir="ltr">||</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t17 r1c2-t17">
<p>addition, subtraction, concatenation</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t17" headers="r1c1-t17">
<p><code dir="ltr">=</code>, <code dir="ltr">&lt;</code>, <code dir="ltr">&gt;</code>, <code dir="ltr">&lt;=</code>, <code dir="ltr">&gt;=</code>, <code dir="ltr">&lt;&gt;</code>, <code dir="ltr">!=</code>, <code dir="ltr">~=</code>, <code dir="ltr">^=</code>, <code dir="ltr">IS</code> <code dir="ltr">NULL</code>, <code dir="ltr">LIKE</code>, <code dir="ltr">BETWEEN</code>, <code dir="ltr">IN</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t17 r1c2-t17">
<p>comparison</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t17" headers="r1c1-t17">
<p><code dir="ltr">NOT</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t17 r1c2-t17">
<p>negation</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t17" headers="r1c1-t17">
<p><code dir="ltr">AND</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t17 r1c2-t17">
<p>conjunction</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t17" headers="r1c1-t17">
<p><code dir="ltr">OR</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t17 r1c2-t17">
<p>inclusion</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To control the order of evaluation, enclose operations in <a id="sthref131"></a>parentheses, as in <a href="#CIHGCAFE">Example 2-30</a>.</p>
<div id="LNPLS226" class="example">
<p class="titleinexample"><a id="CIHGCAFE"></a>Example 2-30 Controlling Evaluation Order with Parentheses</p>
<pre dir="ltr">
DECLARE
  a INTEGER := 1+2**2;
  b INTEGER := <span class="bold">(1+2)**2</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE('a = ' || TO_CHAR(a));
  DBMS_OUTPUT.PUT_LINE('b = ' || TO_CHAR(b));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
a = 5
b = 9
</pre></div>
<!-- class="example" -->
<p>When <a id="sthref132"></a>parentheses are nested, the most deeply nested operations are evaluated first.</p>
<p>In <a href="#CIHEIEHG">Example 2-31</a>, the operations (1+2) and (3+4) are evaluated first, producing the values 3 and 7, respectively. Next, the operation 3*7 is evaluated, producing the result 21. Finally, the operation 21/7 is evaluated, producing the final value 3.</p>
<div id="LNPLS227" class="example">
<p class="titleinexample"><a id="CIHEIEHG"></a>Example 2-31 Expression with Nested Parentheses</p>
<pre dir="ltr">
DECLARE
  a INTEGER := <span class="bold">((1+2)*(3+4))/7</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE('a = ' || TO_CHAR(a));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
a = 3
</pre></div>
<!-- class="example" -->
<p>You can also use <a id="sthref133"></a>parentheses to improve readability, as in <a href="#CIHBDCGA">Example 2-32</a>, where the parentheses do not affect evaluation order.</p>
<div id="LNPLS228" class="example">
<p class="titleinexample"><a id="CIHBDCGA"></a>Example 2-32 Improving Readability with Parentheses</p>
<pre dir="ltr">
DECLARE
  a INTEGER := <span class="bold">2**2*3**2</span>;
  b INTEGER := <span class="bold">(2**2)*(3**2)</span>;
BEGIN
  DBMS_OUTPUT.PUT_LINE('a = ' || TO_CHAR(a));
  DBMS_OUTPUT.PUT_LINE('b = ' || TO_CHAR(b));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
a = 36
b = 36
</pre></div>
<!-- class="example" -->
<p><a href="#CIHIIGAG">Example 2-33</a> shows the effect of operator precedence and parentheses in several more complex expressions.</p>
<div id="LNPLS250" class="example">
<p class="titleinexample"><a id="CIHIIGAG"></a>Example 2-33 Operator Precedence</p>
<pre dir="ltr">
DECLARE
  salary      NUMBER := 60000;
  commission  NUMBER := 0.10;
BEGIN
  -- Division has higher precedence than addition:
  
  DBMS_OUTPUT.PUT_LINE('5 + 12 / 4 = ' || TO_CHAR(5 + 12 / 4));
  DBMS_OUTPUT.PUT_LINE('12 / 4 + 5 = ' || TO_CHAR(12 / 4 + 5));
  
 -- Parentheses override default operator precedence:
 
  DBMS_OUTPUT.PUT_LINE('8 + 6 / 2 = ' || TO_CHAR(8 + 6 / 2));
  DBMS_OUTPUT.PUT_LINE('(8 + 6) / 2 = ' || TO_CHAR((8 + 6) / 2));
 
  -- Most deeply nested operation is evaluated first:
 
  DBMS_OUTPUT.PUT_LINE('100 + (20 / 5 + (7 - 3)) = '
                      || TO_CHAR(100 + (20 / 5 + (7 - 3))));
 
  -- Parentheses, even when unnecessary, improve readability:
 
  DBMS_OUTPUT.PUT_LINE('(salary * 0.05) + (commission * 0.25) = '
    || TO_CHAR((salary * 0.05) + (commission * 0.25))
  );
 
  DBMS_OUTPUT.PUT_LINE('salary * 0.05 + commission * 0.25 = '
    || TO_CHAR(salary * 0.05 + commission * 0.25)
  );
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
5 + 12 / 4 = 8
12 / 4 + 5 = 8
8 + 6 / 2 = 11
(8 + 6) / 2 = 7
100 + (20 / 5 + (7 - 3)) = 108
(salary * 0.05) + (commission * 0.25) = 3000.025
salary * 0.05 + commission * 0.25 = 3000.025
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i6076"></a>
<div id="LNPLS251" class="sect2">
<h3 class="sect2">Logical Operators</h3>
<p>The <a id="sthref134"></a><a id="sthref135"></a>logical operators <code dir="ltr">AND</code>, <code dir="ltr">OR</code>, and <code dir="ltr">NOT</code> follow the <a id="sthref136"></a>tri-state logic shown in <a href="#CIHIICAC">Table 2-4</a>. <code dir="ltr">AND</code> and <code dir="ltr">OR</code> are binary operators; <code dir="ltr">NOT</code> is a unary operator.</p>
<div id="LNPLS252" class="tblformal">
<p class="titleintable"><a id="sthref137"></a><a id="CIHIICAC"></a>Table 2-4 Logical Truth Table</p>
<table class="cellalignment1092" title="Logical Truth Table" summary="This table summarizes the logical operators." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t18">x</th>
<th class="cellalignment1090" id="r1c2-t18">y</th>
<th class="cellalignment1090" id="r1c3-t18">x AND y</th>
<th class="cellalignment1090" id="r1c4-t18">x OR y</th>
<th class="cellalignment1090" id="r1c5-t18">NOT x</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t18" headers="r1c1-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t18 r1c2-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t18 r1c3-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t18 r1c4-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t18 r1c5-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t18" headers="r1c1-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t18 r1c2-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t18 r1c3-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t18 r1c4-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t18 r1c5-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t18" headers="r1c1-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t18 r1c2-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t18 r1c3-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t18 r1c4-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t18 r1c5-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t18" headers="r1c1-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t18 r1c2-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t18 r1c3-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t18 r1c4-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t18 r1c5-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t18" headers="r1c1-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t18 r1c2-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t18 r1c3-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t18 r1c4-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t18 r1c5-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t18" headers="r1c1-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t18 r1c2-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t18 r1c3-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t18 r1c4-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t18 r1c5-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t18" headers="r1c1-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t18 r1c2-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t18 r1c3-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t18 r1c4-t18">
<p><code dir="ltr">TRUE</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t18 r1c5-t18">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r9c1-t18" headers="r1c1-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t18 r1c2-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t18 r1c3-t18">
<p><code dir="ltr">FALSE</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t18 r1c4-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r9c1-t18 r1c5-t18">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r10c1-t18" headers="r1c1-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t18 r1c2-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t18 r1c3-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t18 r1c4-t18">
<p><code dir="ltr">NULL</code></p>
</td>
<td class="cellalignment1091" headers="r10c1-t18 r1c5-t18">
<p><code dir="ltr">NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CIHDAFEJ">Example 2-34</a> creates a procedure, <code dir="ltr">print_boolean</code>, that prints the value of a <code dir="ltr">BOOLEAN</code> variable. The procedure uses the <a href="#CIHDCCGF">"IS [NOT] NULL Operator"</a>. Several examples in this chapter invoke <code dir="ltr">print_boolean</code>.</p>
<div id="LNPLS230" class="example">
<p class="titleinexample"><a id="CIHDAFEJ"></a>Example 2-34 Procedure Prints BOOLEAN Variable</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE print_boolean (
  b_name   VARCHAR2,
  b_value  BOOLEAN
) IS
BEGIN
  IF b_value IS NULL THEN
    DBMS_OUTPUT.PUT_LINE (b_name || ' = NULL');
  ELSIF b_value = TRUE THEN
    DBMS_OUTPUT.PUT_LINE (b_name || ' = TRUE');
  ELSE
    DBMS_OUTPUT.PUT_LINE (b_name || ' = FALSE');
  END IF;
END;
/
 
</pre></div>
<!-- class="example" -->
<p>As <a href="#CIHIICAC">Table 2-4</a> and <a href="#CIHIIBAC">Example 2-35</a> show, <a id="sthref138"></a><code dir="ltr">AND</code> returns <code dir="ltr">TRUE</code> if and only if both operands are <code dir="ltr">TRUE</code>.</p>
<div id="LNPLS253" class="example">
<p class="titleinexample"><a id="CIHIIBAC"></a>Example 2-35 AND Operator</p>
<pre dir="ltr">
DECLARE
  PROCEDURE print_x_and_y (
    x  BOOLEAN,
    y  BOOLEAN
  ) IS
  BEGIN
   print_boolean ('x', x);
   print_boolean ('y', y);
   print_boolean ('x AND y', x AND y);
 END print_x_and_y;
 
BEGIN
 print_x_and_y (FALSE, FALSE);
 print_x_and_y (TRUE, FALSE);
 print_x_and_y (FALSE, TRUE);
 print_x_and_y (TRUE, TRUE);
 
 print_x_and_y (TRUE, NULL);
 print_x_and_y (FALSE, NULL);
 print_x_and_y (NULL, TRUE);
 print_x_and_y (NULL, FALSE);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
x = FALSE
y = FALSE
x AND y = FALSE
x = TRUE
y = FALSE
x AND y = FALSE
x = FALSE
y = TRUE
x AND y = FALSE
<span class="bold">x = TRUE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x AND y = TRUE</span>
x = TRUE
y = NULL
x AND y = NULL
x = FALSE
y = NULL
x AND y = FALSE
x = NULL
y = TRUE
x AND y = NULL
x = NULL
y = FALSE
x AND y = FALSE
</pre></div>
<!-- class="example" -->
<p>As <a href="#CIHIICAC">Table 2-4</a> and <a href="#CIHDABEC">Example 2-36</a> show, <a id="sthref139"></a><code dir="ltr">OR</code> returns <code dir="ltr">TRUE</code> if either operand is <code dir="ltr">TRUE</code>. (<a href="#CIHDABEC">Example 2-36</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a>.)</p>
<div id="LNPLS254" class="example">
<p class="titleinexample"><a id="CIHDABEC"></a>Example 2-36 OR Operator</p>
<pre dir="ltr">
DECLARE
  PROCEDURE print_x_or_y (
    x  BOOLEAN,
    y  BOOLEAN
  ) IS
  BEGIN
    print_boolean ('x', x);
    print_boolean ('y', y);
    print_boolean ('x OR y', x OR y);
  END print_x_or_y;
 
BEGIN
  print_x_or_y (FALSE, FALSE);
  print_x_or_y (TRUE, FALSE);
  print_x_or_y (FALSE, TRUE);
  print_x_or_y (TRUE, TRUE);
 
  print_x_or_y (TRUE, NULL);
  print_x_or_y (FALSE, NULL);
  print_x_or_y (NULL, TRUE);
  print_x_or_y (NULL, FALSE);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
x = FALSE
y = FALSE
x OR y = FALSE
<span class="bold">x = TRUE</span>
<span class="bold">y = FALSE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = FALSE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = TRUE</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
<span class="bold">x = TRUE</span>
<span class="bold">y = NULL</span>
<span class="bold">x OR y = TRUE</span>
x = FALSE
y = NULL
x OR y = NULL
<span class="bold">x = NULL</span>
<span class="bold">y = TRUE</span>
<span class="bold">x OR y = TRUE</span>
x = NULL
y = FALSE
x OR y = NULL
</pre></div>
<!-- class="example" -->
<p>As <a href="#CIHIICAC">Table 2-4</a> and <a href="#CIHEBJED">Example 2-37</a> show, <a id="sthref140"></a><code dir="ltr">NOT</code> returns the opposite of its operand, unless the operand is <code dir="ltr">NULL</code>. <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> returns <code dir="ltr">NULL</code>, because <code dir="ltr">NULL</code> is an indeterminate value. (<a href="#CIHEBJED">Example 2-37</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a>.)</p>
<div id="LNPLS255" class="example">
<p class="titleinexample"><a id="CIHEBJED"></a>Example 2-37 NOT Operator</p>
<pre dir="ltr">
DECLARE
  PROCEDURE print_not_x (
    x  BOOLEAN
  ) IS
  BEGIN
    print_boolean ('x', x);
    print_boolean ('NOT x', NOT x);
  END print_not_x;
 
BEGIN
  print_not_x (TRUE);
  print_not_x (FALSE);
  print_not_x (NULL);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
x = TRUE
NOT x = FALSE
x = FALSE
NOT x = TRUE
x = NULL
NOT x = NULL
</pre></div>
<!-- class="example" -->
<p>In <a href="#BEIIDBHJ">Example 2-38</a>, you might expect the sequence of statements to run because <code dir="ltr">x</code> and <code dir="ltr">y</code> seem unequal. But, <code dir="ltr">NULL</code> values are indeterminate. Whether <code dir="ltr">x</code> equals <code dir="ltr">y</code> is unknown. Therefore, the <code dir="ltr">IF</code> condition yields <code dir="ltr">NULL</code> and the sequence of statements is bypassed.</p>
<div id="LNPLS284" class="example">
<p class="titleinexample"><a id="BEIIDBHJ"></a>Example 2-38 NULL Value in Unequal Comparison</p>
<pre dir="ltr">
DECLARE
  <span class="bold">x NUMBER := 5;</span>
  <span class="bold">y NUMBER := NULL;</span>
BEGIN
  <span class="bold">IF x != y THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE('x != y');  <span class="bold">-- not run</span>
  <span class="bold">ELSIF x = y THEN -- also yields NULL</span>
    DBMS_OUTPUT.PUT_LINE('x = y');
  ELSE
    DBMS_OUTPUT.PUT_LINE
      ('Can''t tell if x and y are equal or not.');
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Can't tell if x and y are equal or not.
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHJIFDG">Example 2-39</a>, you might expect the sequence of statements to run because <code dir="ltr">a</code> and <code dir="ltr">b</code> seem equal. But, again, that is unknown, so the <code dir="ltr">IF</code> condition yields <code dir="ltr">NULL</code> and the sequence of statements is bypassed.</p>
<div id="LNPLS285" class="example">
<p class="titleinexample"><a id="CIHJIFDG"></a>Example 2-39 NULL Value in Equal Comparison</p>
<pre dir="ltr">
DECLARE
  <span class="bold">a NUMBER := NULL;</span>
  <span class="bold">b NUMBER := NULL;</span>
BEGIN
  <span class="bold">IF a = b THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE('a = b');  <span class="bold">-- not run</span>
  <span class="bold">ELSIF a != b THEN  -- yields NULL, not TRUE</span>
    DBMS_OUTPUT.PUT_LINE('a != b');  <span class="bold">-- not run</span>
  ELSE
    DBMS_OUTPUT.PUT_LINE('Can''t tell if two NULLs are equal');
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Can't tell if two NULLs are equal
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHHIBCE">Example 2-40</a>, the two <code dir="ltr">IF</code> statements appear to be equivalent. However, if either <code dir="ltr">x</code> or <code dir="ltr">y</code> is <a id="sthref141"></a><code dir="ltr">NULL</code>, then the first <code dir="ltr">IF</code> statement assigns the value of <code dir="ltr">y</code> to <code dir="ltr">high</code> and the second <code dir="ltr">IF</code> statement assigns the value of <code dir="ltr">x</code> to <code dir="ltr">high</code>.</p>
<div id="LNPLS231" class="example">
<p class="titleinexample"><a id="CIHHIBCE"></a>Example 2-40 NOT NULL Equals NULL</p>
<pre dir="ltr">
DECLARE
  x    INTEGER := 2;
  Y    INTEGER := 5;
  high INTEGER;
BEGIN
  <span class="bold">IF (x &gt; y)</span>       -- If x or y is NULL, then (x &gt; y) is NULL
    THEN high := x;  -- run if (x &gt; y) is TRUE
    ELSE high := y;  -- run if (x &gt; y) is FALSE or NULL
  END IF;
  
  <span class="bold">IF NOT (x &gt; y)</span>   -- If x or y is NULL, then NOT (x &gt; y) is NULL
    THEN high := y;  -- run if NOT (x &gt; y) is TRUE
    ELSE high := x;  -- run if NOT (x &gt; y) is FALSE or NULL
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CIHEHAGE">Example 2-41</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a> three times. The third and first invocation are logically equivalent&mdash;the parentheses in the third invocation only improve readability. The parentheses in the second invocation change the order of operation.</p>
<div id="LNPLS257" class="example">
<p class="titleinexample"><a id="CIHEHAGE"></a>Example 2-41 Changing Evaluation Order of Logical Operators</p>
<pre dir="ltr">
DECLARE
  x  BOOLEAN := FALSE;
  y  BOOLEAN := FALSE;
  
BEGIN
  print_boolean ('NOT x AND y', NOT x AND y);
  print_boolean ('NOT (x AND y)', NOT (x AND y));
  print_boolean ('(NOT x) AND y', (NOT x) AND y);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
NOT x AND y = FALSE
NOT (x AND y) = TRUE
(NOT x) AND y = FALSE
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBJIGIFG"></a>
<div id="LNPLS258" class="sect2">
<h3 class="sect2">Short-Circuit Evaluation</h3>
<p>When evaluating a logical expression, PL/SQL uses <a id="sthref142"></a><span class="bold">short-circuit evaluation</span>. That is, PL/SQL stops evaluating the expression as soon as it can determine the result. Therefore, you can write expressions that might otherwise cause errors.</p>
<p>In <a href="#CIHGJBFD">Example 2-42</a>, short-circuit evaluation prevents the <code dir="ltr">OR</code> expression from causing a divide-by-zero error. When the value of <code dir="ltr">on_hand</code> is zero, the value of the left operand is <code dir="ltr">TRUE</code>, so PL/SQL does not evaluate the right operand. If PL/SQL evaluated both operands before applying the <code dir="ltr">OR</code> operator, the right operand would cause a division by zero error.</p>
<div id="LNPLS259" class="example">
<p class="titleinexample"><a id="CIHGJBFD"></a>Example 2-42 Short-Circuit Evaluation</p>
<pre dir="ltr">
DECLARE
  on_hand  INTEGER := 0;
  on_order INTEGER := 100;
BEGIN
  -- Does not cause divide-by-zero error;
  -- evaluation stops after first expression
  
  IF <span class="bold">(on_hand = 0) OR ((on_order / on_hand) &lt; 5)</span> THEN
    DBMS_OUTPUT.PUT_LINE('On hand quantity is zero.');
  END IF;
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
On hand quantity is zero.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CBJJAJCH"></a>
<div id="LNPLS260" class="sect2">
<h3 class="sect2">Comparison Operators</h3>
<p><a id="sthref143"></a><a id="sthref144"></a>Comparison operators compare one expression to another. The result is always either <code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>. If the value of one expression is <a id="sthref145"></a><code dir="ltr">NULL</code>, then the result of the comparison is also <code dir="ltr">NULL</code>.</p>
<p>The comparison operators are:</p>
<ul>
<li>
<p><a href="#CIHDCCGF">IS [NOT] NULL Operator</a></p>
</li>
<li>
<p><a href="#CIHFCIBG">Relational Operators</a></p>
</li>
<li>
<p><a href="#CIHGFFGC">LIKE Operator</a></p>
</li>
<li>
<p><a href="#CIHCBJDF">BETWEEN Operator</a></p>
</li>
<li>
<p><a href="#CIHEEGEE">IN Operator</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Character comparisons are affected by NLS parameter settings, which can change at runtime. Therefore, character comparisons are evaluated at runtime, and the same character comparison can have different values at different times. For information about NLS parameters that affect character comparisons, see <a class="olink NLSPG005" href="../../server.112/e10729/ch5lingsort.htm#NLSPG005"><span class="italic">Oracle Database Globalization Support Guide</span></a>.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using <a id="sthref146"></a><code dir="ltr">CLOB</code> values with comparison operators can create temporary LOB values. Ensure that your temporary tablespace is large enough to handle them.</div>
<a id="CIHDCCGF"></a>
<div id="LNPLS263" class="sect3">
<h4 class="sect3">IS [NOT] NULL Operator</h4>
<p>The <a id="sthref147"></a><code dir="ltr">IS</code> <code dir="ltr">NULL</code> operator returns the <code dir="ltr">BOOLEAN</code> value <code dir="ltr">TRUE</code> if its operand is <code dir="ltr">NULL</code> or <code dir="ltr">FALSE</code> if it is not <code dir="ltr">NULL</code>. The <code dir="ltr">IS</code> <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> operator does the opposite. Comparisons involving <code dir="ltr">NULL</code> values always yield <code dir="ltr">NULL</code>.</p>
<p>To test whether a value is <code dir="ltr">NULL</code>, use <code dir="ltr">IF</code> <code dir="ltr"><span class="codeinlineitalic">value</span></code> <code dir="ltr">IS</code> <code dir="ltr">NULL</code>, as in these examples:</p>
<ul>
<li>
<p><a href="#CIHIBJJF">Example 2-12</a></p>
</li>
<li>
<p><a href="#CIHDAFEJ">Example 2-34</a></p>
</li>
<li>
<p><a href="#CIHDDFHC">Example 2-53</a></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHFCIBG"></a>
<div id="LNPLS232" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Relational Operators</h4>
<p><a href="#CIHCCCBB">Table 2-5</a> summarizes the <a id="sthref148"></a><a id="sthref149"></a>relational operators.</p>
<div id="LNPLS235" class="tblformal">
<p class="titleintable"><a id="sthref150"></a><a id="CIHCCCBB"></a>Table 2-5 Relational Operators</p>
<table class="cellalignment1092" title="Relational Operators" summary="This table lists the relational operators and gives their meanings." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t21">Operator</th>
<th class="cellalignment1090" id="r1c2-t21">Meaning</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t21" headers="r1c1-t21">
<p><code dir="ltr">=</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t21 r1c2-t21">
<p>equal to</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t21" headers="r1c1-t21">
<p><code dir="ltr">&lt;&gt;</code>, <code dir="ltr">!=</code>, <code dir="ltr">~=</code>, <code dir="ltr">^=</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t21 r1c2-t21">
<p>not equal to</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t21" headers="r1c1-t21">
<p><code dir="ltr">&lt;</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t21 r1c2-t21">
<p>less than</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t21" headers="r1c1-t21">
<p><code dir="ltr">&gt;</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t21 r1c2-t21">
<p>greater than</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t21" headers="r1c1-t21">
<p><code dir="ltr">&lt;=</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t21 r1c2-t21">
<p>less than or equal to</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t21" headers="r1c1-t21">
<p><code dir="ltr">&gt;=</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t21 r1c2-t21">
<p>greater than or equal to</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="LNPLS236"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDGACDH">Arithmetic Comparisons</a></p>
</li>
<li>
<p><a href="#CIHBDAED">BOOLEAN Comparisons</a></p>
</li>
<li>
<p><a href="#CHDEABID">Character Comparisons</a></p>
</li>
<li>
<p><a href="#CHDCHHJI">Date Comparisons</a></p>
</li>
</ul>
<a id="CHDGACDH"></a>
<div id="LNPLS237" class="sect4">
<h5 class="sect4">Arithmetic Comparisons</h5>
<p>One number is greater than another if it represents a larger quantity. Real numbers are stored as approximate values, so Oracle recommends comparing them for equality or inequality.</p>
<p><a href="#CIHFFBCI">Example 2-43</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a> to print the values of expressions that use relational operators to compare arithmetic values.</p>
<div id="LNPLS238" class="example">
<p class="titleinexample"><a id="CIHFFBCI"></a>Example 2-43 Relational Operators in Expressions</p>
<pre dir="ltr">
BEGIN
  print_boolean ('(2 + 2 =  4)', 2 + 2 <span class="bold">=</span> 4);
  
  print_boolean ('(2 + 2 &lt;&gt; 4)', 2 + 2 <span class="bold">&lt;&gt;</span> 4);
  print_boolean ('(2 + 2 != 4)', 2 + 2 <span class="bold">!=</span> 4);
  print_boolean ('(2 + 2 ~= 4)', 2 + 2 <span class="bold">~=</span> 4);
  print_boolean ('(2 + 2 ^= 4)', 2 + 2 <span class="bold">^=</span> 4);
  
  print_boolean ('(1 &lt; 2)', 1 <span class="bold">&lt;</span> 2);
 
  print_boolean ('(1 &gt; 2)', 1 <span class="bold">&gt;</span> 2);
 
  print_boolean ('(1 &lt;= 2)', 1 <span class="bold">&lt;=</span> 2);
 
  print_boolean ('(1 &gt;= 1)', 1 <span class="bold">&gt;=</span> 1);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
(2 + 2 =  4) = TRUE
(2 + 2 &lt;&gt; 4) = FALSE
(2 + 2 != 4) = FALSE
(2 + 2 ~= 4) = FALSE
(2 + 2 ^= 4) = FALSE
(1 &lt; 2) = TRUE
(1 &gt; 2) = FALSE
(1 &lt;= 2) = TRUE
(1 &gt;= 1) = TRUE
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" -->
<a id="CIHBDAED"></a>
<div id="LNPLS239" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">BOOLEAN Comparisons</h5>
<p>By definition, <code dir="ltr">TRUE</code> is greater than <code dir="ltr">FALSE</code>. Any comparison with <code dir="ltr">NULL</code> returns <code dir="ltr">NULL</code>.</p>
</div>
<!-- class="sect4" -->
<a id="CHDEABID"></a>
<div id="LNPLS240" class="sect4">
<h5 class="sect4">Character Comparisons</h5>
<p>By default, one character is greater than another if its binary value is larger. For example, this expression is true:</p>
<pre dir="ltr">
'y' &gt; 'r'
</pre>
<p>Strings are compared character by character. For example, this expression is true:</p>
<pre dir="ltr">
'Kath<span class="bold">y</span>' &gt; 'Kath<span class="bold">r</span>yn'
</pre>
<p>If you set the initialization parameter <a id="sthref151"></a><code dir="ltr">NLS_COMP=ANSI</code>, string comparisons use the collating sequence identified by the <code dir="ltr">NLS_SORT</code> initialization parameter.</p>
<p>A <a id="sthref152"></a><span class="bold">collating sequence</span> is an internal ordering of the character set in which a range of numeric codes represents the individual characters. One character value is greater than another if its internal numeric value is larger. Each language might have different rules about where such characters occur in the collating sequence. For example, an accented letter might be sorted differently depending on the database character set, even though the binary value is the same in each case.</p>
<p>By changing the value of the <code dir="ltr">NLS_SORT</code> parameter, you can perform comparisons that are case-insensitive and accent-insensitive.</p>
<p>A <a id="sthref153"></a><a id="sthref154"></a><span class="bold">case-insensitive comparison</span> treats corresponding uppercase and lowercase letters as the same letter. For example, these expressions are true:</p>
<pre dir="ltr">
'a' = 'A'
'Alpha' = 'ALPHA'
</pre>
<p>To make comparisons case-insensitive, append <code dir="ltr">_CI</code> to the value of the <code dir="ltr">NLS_SORT</code> parameter (for example, <code dir="ltr">BINARY_CI</code> or <code dir="ltr">XGERMAN_CI</code>).</p>
<p>An <a id="sthref155"></a><span class="bold">accent-insensitive comparison</span> is case-insensitive, and also treats letters that differ only in accents or punctuation characters as the same letter. For example, these expressions are true:</p>
<pre dir="ltr">
'Cooperate' = 'Co-Operate'
'Co-Operate' = 'co&ouml;perate'
</pre>
<p>To make comparisons both case-insensitive and accent-insensitive, append <code dir="ltr">_AI</code> to the value of the <code dir="ltr">NLS_SORT</code> parameter (for example, <code dir="ltr">BINARY_AI</code> or <code dir="ltr">FRENCH_M_AI</code>).</p>
<p>Semantic differences between the <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> data types affect character comparisons. For more information, see <a href="datatypes.htm#CIHEHGHI">"Value Comparisons"</a>.</p>
</div>
<!-- class="sect4" -->
<a id="CHDCHHJI"></a>
<div id="LNPLS244" class="sect4">
<h5 class="sect4">Date Comparisons</h5>
<p>One date is greater than another if it is more recent. For example, this expression is true:</p>
<pre dir="ltr">
'01-JAN-91' &gt; '31-DEC-90'
</pre></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIHGFFGC"></a>
<div id="LNPLS264" class="sect3">
<h4 class="sect3">LIKE Operator</h4>
<p>The <a id="sthref156"></a><code dir="ltr">LIKE</code> operator compares a character, string, or <code dir="ltr">CLOB</code> value to a pattern and returns <code dir="ltr">TRUE</code> if the value matches the pattern and <code dir="ltr">FALSE</code> if it does not.</p>
<p>The <a id="sthref157"></a>pattern can include the two <a id="sthref158"></a><span class="bold">wildcard characters</span> <a id="sthref159"></a><a id="sthref160"></a>underscore (<code dir="ltr">_</code>) and <a id="sthref161"></a><a id="sthref162"></a>percent sign (%). Underscore matches exactly one character. Percent sign (<code dir="ltr">%</code>) matches zero or more characters.</p>
<p><a id="sthref163"></a>Case is significant. The string <code dir="ltr">'Johnson'</code> matches the pattern <code dir="ltr">'J%s_n'</code> but not <code dir="ltr">'J%S_N'</code>, as <a href="#CIHECJJB">Example 2-44</a> shows.</p>
<div id="LNPLS265" class="example">
<p class="titleinexample"><a id="CIHECJJB"></a>Example 2-44 LIKE Operator in Expression</p>
<pre dir="ltr">
DECLARE
  PROCEDURE compare (
    value   VARCHAR2,
    pattern VARCHAR2
  ) IS
  BEGIN
    IF <span class="bold">value LIKE pattern</span> THEN
      DBMS_OUTPUT.PUT_LINE ('TRUE');
    ELSE
      DBMS_OUTPUT.PUT_LINE ('FALSE');
    END IF;
  END;
BEGIN
  compare('Johnson', 'J%s_n');
  compare('Johnson', 'J%S_N');
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
TRUE
FALSE
</pre></div>
<!-- class="example" -->
<p>To search for the percent sign or underscore, define an <a id="sthref164"></a>escape character and put it before the percent sign or underscore.</p>
<p><a href="#CIHFIIEA">Example 2-45</a> uses the backslash as the escape character, so that the percent sign in the string does not act as a wildcard.</p>
<div id="LNPLS266" class="example">
<p class="titleinexample"><a id="CIHFIIEA"></a>Example 2-45 Escape Character in Pattern</p>
<pre dir="ltr">
DECLARE
  PROCEDURE half_off (sale_sign VARCHAR2) IS
  BEGIN
    <span class="bold">IF sale_sign LIKE '50\% off!' ESCAPE '\'</span> THEN
      DBMS_OUTPUT.PUT_LINE ('TRUE');
    ELSE
      DBMS_OUTPUT.PUT_LINE ('FALSE');
    END IF;
  END;
BEGIN
  half_off('Going out of business!');
  half_off('50% off!');
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
FALSE
TRUE
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQLRF52142" href="../../server.112/e41084/conditions007.htm#SQLRF52142"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">LIKE</code></p>
</li>
<li>
<p><a class="olink SQLRF00501" href="../../server.112/e41084/conditions007.htm#SQLRF00501"><span class="italic">Oracle Database SQL Language Reference</span></a> for information about <code dir="ltr">REGEXP_LIKE</code>, which is similar to <code dir="ltr">LIKE</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect3" -->
<a id="CIHCBJDF"></a>
<div id="LNPLS267" class="sect3">
<h4 class="sect3">BETWEEN Operator</h4>
<p>The <a id="sthref165"></a><code dir="ltr">BETWEEN</code> operator tests whether a value lies in a specified <a id="sthref166"></a>range. <code dir="ltr">x</code> <code dir="ltr">BETWEEN</code> <code dir="ltr">a</code> <code dir="ltr">AND</code> <code dir="ltr">b</code> returns the same value as <code dir="ltr">(x&gt;=a)</code>&nbsp;<code dir="ltr">AND</code>&nbsp;<code dir="ltr">(x&lt;=b)</code>.</p>
<p><a href="#CIHDEEAG">Example 2-46</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a> to print the values of expressions that include the <code dir="ltr">BETWEEN</code> operator.</p>
<div id="LNPLS268" class="example">
<p class="titleinexample"><a id="CIHDEEAG"></a>Example 2-46 BETWEEN Operator in Expressions</p>
<pre dir="ltr">
BEGIN
  print_boolean ('2 BETWEEN 1 AND 3', 2 <span class="bold">BETWEEN</span> 1 AND 3);
  print_boolean ('2 BETWEEN 2 AND 3', 2 <span class="bold">BETWEEN</span> 2 AND 3);
  print_boolean ('2 BETWEEN 1 AND 2', 2 <span class="bold">BETWEEN</span> 1 AND 2);
  print_boolean ('2 BETWEEN 3 AND 4', 2 <span class="bold">BETWEEN</span> 3 AND 4);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
2 BETWEEN 1 AND 3 = TRUE
2 BETWEEN 2 AND 3 = TRUE
2 BETWEEN 1 AND 2 = TRUE
2 BETWEEN 3 AND 4 = FALSE
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52164" href="../../server.112/e41084/conditions011.htm#SQLRF52164"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">BETWEEN</code></div>
</div>
<!-- class="sect3" -->
<a id="CIHEEGEE"></a>
<div id="LNPLS269" class="sect3">
<h4 class="sect3">IN Operator</h4>
<p>The <a id="sthref167"></a><code dir="ltr">IN</code> operator tests <a id="sthref168"></a><a id="sthref169"></a>set membership. <code dir="ltr">x</code> <code dir="ltr">IN</code> <code dir="ltr">(</code><code dir="ltr"><span class="codeinlineitalic">set</span></code><code dir="ltr">)</code> returns <code dir="ltr">TRUE</code> only if <code dir="ltr">x</code> equals a member of <code dir="ltr"><span class="codeinlineitalic">set</span></code>.</p>
<p><a href="#CIHJEGAE">Example 2-47</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a> to print the values of expressions that include the <code dir="ltr">IN</code> operator.</p>
<div id="LNPLS270" class="example">
<p class="titleinexample"><a id="CIHJEGAE"></a>Example 2-47 IN Operator in Expressions</p>
<pre dir="ltr">
DECLARE
  letter VARCHAR2(1) := 'm';
BEGIN
  print_boolean (
    'letter IN (''a'', ''b'', ''c'')',
    letter <span class="bold">IN</span> ('a', 'b', 'c')
  );
  print_boolean (
    'letter IN (''z'', ''m'', ''y'', ''p'')',
    letter <span class="bold">IN</span> ('z', 'm', 'y', 'p')
  );
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
letter IN ('a', 'b', 'c') = FALSE
letter IN ('z', 'm', 'y', 'p') = TRUE
 
</pre></div>
<!-- class="example" -->
<p><a href="#CIHFHEIE">Example 2-48</a> shows what happens when <code dir="ltr"><span class="codeinlineitalic">set</span></code> includes a <a id="sthref170"></a><a id="sthref171"></a><code dir="ltr">NULL</code> value. (<a href="#CIHFHEIE">Example 2-48</a> invokes the <code dir="ltr">print_boolean</code> procedure from <a href="#CIHIIBAC">Example 2-35</a>.)</p>
<div id="LNPLS271" class="example">
<p class="titleinexample"><a id="CIHFHEIE"></a>Example 2-48 IN Operator with Sets with NULL Values</p>
<pre dir="ltr">
DECLARE
  <span class="bold">a INTEGER; -- Initialized to NULL by default</span>
  b INTEGER := 10;
  c INTEGER := 100;
BEGIN
  print_boolean ('100 IN (a, b, c)', 100 <span class="bold">IN</span> (<span class="bold">a</span>, b, c));
  print_boolean ('100 NOT IN (a, b, c)', 100 <span class="bold">NOT IN</span> (<span class="bold">a</span>, b, c));
  
  print_boolean ('100 IN (a, b)', 100 <span class="bold">IN</span> (<span class="bold">a</span>, b));
  print_boolean ('100 NOT IN (a, b)', 100 <span class="bold">NOT IN</span> (<span class="bold">a</span>, b));
 
  print_boolean ('a IN (a, b)', a <span class="bold">IN</span> (<span class="bold">a</span>, b));
  print_boolean ('a NOT IN (a, b)', a <span class="bold">NOT IN</span> (<span class="bold">a</span>, b));
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
100 IN (a, b, c) = TRUE
100 NOT IN (a, b, c) = FALSE
100 IN (a, b) = NULL
100 NOT IN (a, b) = NULL
a IN (a, b) = NULL
a NOT IN (a, b) = NULL
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink SQLRF52169" href="../../server.112/e41084/conditions013.htm#SQLRF52169"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about <code dir="ltr">IN</code></div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDCGDDH"></a>
<div id="LNPLS272" class="sect2">
<h3 class="sect2">BOOLEAN Expressions</h3>
<p><a id="sthref172"></a>A <code dir="ltr"><span class="codeinlinebold">BOOLEAN</span></code> <span class="bold">expression</span> is an expression that returns a <code dir="ltr">BOOLEAN</code> value&mdash;<code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>. The simplest <code dir="ltr">BOOLEAN</code> expression is a <code dir="ltr">BOOLEAN</code> literal, constant, or variable. The following are also <code dir="ltr">BOOLEAN</code> expressions:</p>
<pre dir="ltr">
NOT <span class="italic">boolean_expression</span>
<span class="italic">boolean_expression</span> <span class="italic">relational_operator</span> <span class="italic">boolean_expression</span>
<span class="italic">boolean_expression</span> { AND | OR } <span class="italic">boolean_expression</span>
</pre>
<p>For a list of relational operators, see <a href="#CIHCCCBB">Table 2-5</a>. For the complete syntax of a <code dir="ltr">BOOLEAN</code> expression, see <a href="expression.htm#CHDDGEFH">"<span class="italic">boolean_expression</span> ::="</a>.</p>
<p>Typically, you use <code dir="ltr">BOOLEAN</code> expressions as conditions in control statements (explained in <a href="controlstatements.htm#CIHIAGAF">Chapter 4, "PL/SQL Control Statements"</a>) and in <code dir="ltr">WHERE</code> clauses of DML statements.</p>
<p>You can use a <code dir="ltr">BOOLEAN</code> variable itself as a condition; you need not compare it to the value <code dir="ltr">TRUE</code> or <code dir="ltr">FALSE</code>. In <a href="#CIHBABAD">Example 2-49</a>, the conditions in the loops are equivalent.</p>
<div id="LNPLS245" class="example">
<p class="titleinexample"><a id="CIHBABAD"></a>Example 2-49 Equivalent BOOLEAN Expressions</p>
<pre dir="ltr">
DECLARE
  done BOOLEAN;
BEGIN
  -- These WHILE loops are equivalent
  
  done := FALSE;
  WHILE <span class="bold">done = FALSE</span>
    LOOP
      done := TRUE;
    END LOOP;
 
  done := FALSE;
  WHILE <span class="bold">NOT (done = TRUE)</span>
    LOOP
      done := TRUE;
    END LOOP;
 
  done := FALSE;
  WHILE <span class="bold">NOT done</span>
    LOOP
      done := TRUE;
    END LOOP;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i37590"></a>
<div id="LNPLS278" class="sect2">
<h3 class="sect2">CASE Expressions</h3>
<p class="subhead2"><a id="LNPLS256"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDJCCGI">Simple CASE Expression</a></p>
</li>
<li>
<p><a href="#CHDDJIFJ">Searched CASE Expression</a></p>
</li>
</ul>
<a id="CHDJCCGI"></a>
<div id="LNPLS279" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Simple CASE Expression</h4>
<p>For this explanation, assume that a <a id="sthref173"></a><a id="sthref174"></a>simple <code dir="ltr">CASE</code> expression has this syntax:</p>
<pre dir="ltr">
CASE <a id="sthref175"></a><span class="italic">selector</span>
WHEN <span class="italic">selector_value_1</span> THEN <span class="italic">result_1</span>
WHEN <span class="italic">selector_value_2</span> THEN <span class="italic">result_2</span>
...
WHEN <span class="italic">selector_value_</span>n THEN <span class="italic">result_</span>n
[ ELSE
  <span class="italic">else_result</span> ]
END
</pre>
<p>The <code dir="ltr"><span class="codeinlineitalic">selector</span></code> is an expression (typically a single variable). Each <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> and each <code dir="ltr"><span class="codeinlineitalic">result</span></code> can be either a literal or an expression. At least one <code dir="ltr"><span class="codeinlineitalic">result</span></code> must not be the literal <code dir="ltr">NULL</code>.</p>
<p>The simple <code dir="ltr">CASE</code> expression returns the first <code dir="ltr"><span class="codeinlineitalic">result</span></code> for which <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> matches <code dir="ltr"><span class="codeinlineitalic">selector</span></code>. Remaining expressions are not evaluated. If no <code dir="ltr"><span class="codeinlineitalic">selector_value</span></code> matches <code dir="ltr"><span class="codeinlineitalic">selector</span></code>, the <code dir="ltr">CASE</code> expression returns <code dir="ltr"><span class="codeinlineitalic">else_result</span></code> if it exists and <code dir="ltr">NULL</code> otherwise.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expression.htm#CHDIFFCB">"<span class="italic">simple_case_expression</span> ::="</a> for the complete syntax</div>
<p><a href="#BEIFHCJE">Example 2-50</a> assigns the value of a simple <code dir="ltr">CASE</code> expression to the variable <code dir="ltr">appraisal</code>. The <code dir="ltr"><span class="codeinlineitalic">selector</span></code> is <code dir="ltr">grade</code>.</p>
<div id="LNPLS261" class="example">
<p class="titleinexample"><a id="BEIFHCJE"></a>Example 2-50 Simple CASE Expression</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1) := 'B';
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
    <span class="bold">CASE grade</span>
      <span class="bold">WHEN 'A' THEN 'Excellent'</span>
      <span class="bold">WHEN 'B' THEN 'Very Good'</span>
      <span class="bold">WHEN 'C' THEN 'Good'</span>
      <span class="bold">WHEN 'D' THEN 'Fair'</span>
      <span class="bold">WHEN 'F' THEN 'Poor'</span>
      <span class="bold">ELSE 'No such grade'</span>
    <span class="bold">END</span>;
    DBMS_OUTPUT.PUT_LINE ('Grade ' || grade || ' is ' || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Grade B is Very Good
</pre></div>
<!-- class="example" -->
<p>If <code dir="ltr"><span class="codeinlineitalic">selector</span></code> has the value <a id="sthref176"></a><code dir="ltr">NULL</code>, it cannot be matched by <code dir="ltr">WHEN</code> <code dir="ltr">NULL</code>, as <a href="#CIHIJABF">Example 2-51</a> shows. Instead, use a searched <code dir="ltr">CASE</code> expression with <code dir="ltr">WHEN</code> <code dir="ltr"><span class="codeinlineitalic">boolean_expression</span></code> <code dir="ltr">IS</code> <code dir="ltr">NULL</code>, as in <a href="#CIHDDFHC">Example 2-53</a>.</p>
<div id="LNPLS262" class="example">
<p class="titleinexample"><a id="CIHIJABF"></a>Example 2-51 Simple CASE Expression with WHEN NULL</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1); <span class="bold">-- NULL by default</span>
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
  CASE grade
    <span class="bold">WHEN NULL THEN 'No grade assigned'</span>
    WHEN 'A' THEN 'Excellent'
    WHEN 'B' THEN 'Very Good'
    WHEN 'C' THEN 'Good'
    WHEN 'D' THEN 'Fair'
    WHEN 'F' THEN 'Poor'
    <span class="bold">ELSE 'No such grade'</span>
  END;
  DBMS_OUTPUT.PUT_LINE ('Grade ' || grade || ' is ' || appraisal);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Grade  is <span class="bold">No such grade</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDDJIFJ"></a>
<div id="LNPLS281" class="sect3">
<h4 class="sect3">Searched CASE Expression</h4>
<p>For this explanation, assume that a <a id="sthref177"></a><a id="sthref178"></a>searched <code dir="ltr">CASE</code> expression has this syntax:</p>
<pre dir="ltr">
CASE
WHEN <span class="italic">boolean_expression_1</span> THEN <span class="italic">result_1</span>
WHEN <span class="italic">boolean_expression_2</span> THEN <span class="italic">result_2</span>
...
WHEN <span class="italic">boolean_expression_</span>n THEN <span class="italic">result_</span>n
[ ELSE
  <span class="italic">else_result</span> ]
END]
</pre>
<p>The searched <code dir="ltr">CASE</code> expression returns the first <code dir="ltr"><span class="codeinlineitalic">result</span></code> for which <code dir="ltr"><span class="codeinlineitalic">boolean_expression</span></code> is <code dir="ltr">TRUE</code>. Remaining expressions are not evaluated. If no <code dir="ltr"><span class="codeinlineitalic">boolean_expression</span></code> is <code dir="ltr">TRUE</code>, the <code dir="ltr">CASE</code> expression returns <code dir="ltr"><span class="codeinlineitalic">else_result</span></code> if it exists and <code dir="ltr">NULL</code> otherwise.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="expression.htm#CHDGJEJJ">"<span class="italic">searched_case_expression</span> ::="</a> for the complete syntax</div>
<p><a href="#BEIBCGID">Example 2-52</a> assigns the value of a searched <code dir="ltr">CASE</code> expression to the variable <code dir="ltr">appraisal</code>.</p>
<div id="LNPLS282" class="example">
<p class="titleinexample"><a id="BEIBCGID"></a>Example 2-52 Searched CASE Expression</p>
<pre dir="ltr">
DECLARE
  grade      CHAR(1) := 'B';
  appraisal  VARCHAR2(120);
  id         NUMBER  := 8429862;
  attendance NUMBER := 150;
  min_days   CONSTANT NUMBER := 200;
  
  FUNCTION attends_this_school (id NUMBER)
    RETURN BOOLEAN IS
  BEGIN
    RETURN TRUE;
  END;
BEGIN
  appraisal :=
  <span class="bold">CASE</span>
    <span class="bold">WHEN attends_this_school(id) = FALSE</span>
      <span class="bold">THEN 'Student not enrolled'</span>
    <span class="bold">WHEN grade = 'F' OR attendance &lt; min_days</span>
      <span class="bold">THEN 'Poor (poor performance or bad attendance)'</span>
    <span class="bold">WHEN grade = 'A' THEN 'Excellent'</span>
    <span class="bold">WHEN grade = 'B' THEN 'Very Good'</span>
    <span class="bold">WHEN grade = 'C' THEN 'Good'</span>
    <span class="bold">WHEN grade = 'D' THEN 'Fair'</span>
    <span class="bold">ELSE 'No such grade'</span>
  <span class="bold">END</span>;
  DBMS_OUTPUT.PUT_LINE
    ('Result for student ' || id || ' is ' || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Result for student 8429862 is Poor (poor performance or bad attendance)
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDDFHC">Example 2-53</a> uses a searched <code dir="ltr">CASE</code> expression to solve the problem in <a href="#CIHIJABF">Example 2-51</a>.</p>
<div id="LNPLS273" class="example">
<p class="titleinexample"><a id="CIHDDFHC"></a>Example 2-53 Searched CASE Expression with WHEN ... IS NULL</p>
<pre dir="ltr">
DECLARE
  grade CHAR(1); <span class="bold">-- NULL by default</span>
  appraisal VARCHAR2(20);
BEGIN
  appraisal :=
    CASE
      <span class="bold">WHEN grade IS NULL THEN 'No grade assigned'</span>
      WHEN grade = 'A' THEN 'Excellent'
      WHEN grade = 'B' THEN 'Very Good'
      WHEN grade = 'C' THEN 'Good'
      WHEN grade = 'D' THEN 'Fair'
      WHEN grade = 'F' THEN 'Poor'
      <span class="bold">ELSE 'No such grade'</span>
    END;
    DBMS_OUTPUT.PUT_LINE ('Grade ' || grade || ' is ' || appraisal);
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Grade  is <span class="bold">No grade assigned</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDJAEED"></a>
<div id="LNPLS00212" class="sect2">
<h3 class="sect2">SQL Functions in PL/SQL Expressions</h3>
<p>In PL/SQL expressions, you can use all <a id="sthref179"></a><a id="sthref180"></a>SQL functions except:</p>
<ul>
<li>
<p><a id="sthref181"></a>Aggregate functions (such as <code dir="ltr">AVG</code> and <code dir="ltr">COUNT</code>)</p>
</li>
<li>
<p>Analytic functions (such as <code dir="ltr">LAG</code> and <code dir="ltr">RATIO_TO_REPORT</code>)</p>
</li>
<li>
<p>Data mining functions (such as <code dir="ltr">CLUSTER_ID</code> and <code dir="ltr">FEATURE_VALUE</code>)</p>
</li>
<li>
<p>Encoding and decoding functions (such as <code dir="ltr">DECODE</code> and <code dir="ltr">DUMP</code>)</p>
</li>
<li>
<p>Model functions (such as <code dir="ltr">ITERATION_NUMBER</code> and <code dir="ltr">PREVIOUS</code>)</p>
</li>
<li>
<p>Object reference functions (such as <code dir="ltr">REF</code> and <code dir="ltr">VALUE</code>)</p>
</li>
<li>
<p>XML functions (such as <code dir="ltr">APPENDCHILDXML</code> and <code dir="ltr">EXISTSNODE</code>)</p>
</li>
<li>
<p>These conversion functions:</p>
<ul>
<li>
<p><code dir="ltr">BIN_TO_NUM</code></p>
</li>
</ul>
</li>
<li>
<p>These miscellaneous functions:</p>
<ul>
<li>
<p><code dir="ltr">CUBE_TABLE</code></p>
</li>
<li>
<p><code dir="ltr">DATAOBJ_TO_PARTITION</code></p>
</li>
<li>
<p><code dir="ltr">LNNVL</code></p>
</li>
<li>
<p><code dir="ltr">NVL2</code></p>
</li>
<li>
<p><code dir="ltr">SYS_CONNECT_BY_PATH</code></p>
</li>
<li>
<p><code dir="ltr">SYS_TYPEID</code></p>
</li>
<li>
<p><code dir="ltr">WIDTH_BUCKET</code></p>
</li>
</ul>
</li>
</ul>
<p>PL/SQL supports an overload of <code dir="ltr">BITAND</code> for which the arguments and result are <code dir="ltr">BINARY_INTEGER</code>.</p>
<p>When used in a PL/SQL expression, the <code dir="ltr">RAWTOHEX</code> function accepts an argument of data type <code dir="ltr">RAW</code> and returns a <code dir="ltr">VARCHAR2</code> value with the hexadecimal representation of bytes that comprise the value of the argument. Arguments of types other than <code dir="ltr">RAW</code> can be specified only if they can be implicitly converted to <code dir="ltr">RAW</code>. This conversion is possible for <code dir="ltr">CHAR</code>, <code dir="ltr">VARCHAR2</code>, and <code dir="ltr">LONG</code> values that are valid arguments of the <code dir="ltr">HEXTORAW</code> function, and for <code dir="ltr">LONG</code> <code dir="ltr">RAW</code> and <code dir="ltr">BLOB</code> values of up to 16380 bytes.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJDFFG"></a>
<div id="LNPLS00299" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Error-Reporting Functions</h2>
<p>PL/SQL has two error-reporting functions, <code dir="ltr">SQLCODE</code> and <code dir="ltr">SQLERRM</code>, for use in PL/SQL exception-handling code. For their descriptions, see <a href="sqlcode_function.htm#i36302">"SQLCODE Function"</a> and <a href="sqlerrm_function.htm#i38980">"SQLERRM Function"</a>.</p>
<p>You cannot use the <code dir="ltr">SQLCODE</code> and <code dir="ltr">SQLERRM</code> functions in SQL statements.</p>
</div>
<!-- class="sect1" -->
<a id="CIHDDJCC"></a>
<div id="LNPLS99954" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Pragmas</h2>
<p>A <a id="sthref182"></a><span class="bold">pragma</span> is an instruction to the compiler that it processes at compile time. For information about pragmas, see:</p>
<ul>
<li>
<p><a href="autotransaction_pragma.htm#i32731">"AUTONOMOUS_TRANSACTION Pragma"</a></p>
</li>
<li>
<p><a href="exceptioninit_pragma.htm#i33787">"EXCEPTION_INIT Pragma"</a></p>
</li>
<li>
<p><a href="inline_pragma.htm#CJAEHDEB">"INLINE Pragma"</a></p>
</li>
<li>
<p><a href="restrictreferences_pragma.htm#i35854">"RESTRICT_REFERENCES Pragma"</a></p>
</li>
<li>
<p><a href="seriallyreusable_pragma.htm#i36155">"SERIALLY_REUSABLE Pragma"</a></p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BABIHIHF"></a>
<div id="LNPLS00210" class="sect1">
<h2 class="sect1">Conditional Compilation</h2>
<p><a id="sthref183"></a><a id="sthref184"></a>Conditional compilation lets you customize the functionality of a PL/SQL application without removing source text. For example, you can:</p>
<ul>
<li>
<p>Use new features with the latest database release and disable them when running the application in an older database release.</p>
</li>
<li>
<p>Activate debugging or tracing statements in the development environment and hide them when running the application at a production site.</p>
</li>
</ul>
<p class="subhead2"><a id="LNPLS274"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDEDHAF">How Conditional Compilation Works</a></p>
</li>
<li>
<p><a href="#CHDIBFGC">Conditional Compilation Examples</a></p>
</li>
<li>
<p><a href="#CIHHEHDA">Retrieving and Printing Post-Processed Source Text</a></p>
</li>
<li>
<p><a href="#CHDBGHHF">Conditional Compilation Directive Restrictions</a></p>
</li>
</ul>
<a id="CHDEDHAF"></a>
<div id="LNPLS294" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">How Conditional Compilation Works</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
The conditional compilation feature and related PL/SQL packages are available for Oracle Database 10<span class="italic">g</span> Release 1 (10.1.0.4) and later releases.</div>
<p>Conditional compilation uses selection directives, which are similar to <code dir="ltr">IF</code> statements, to select source text for compilation. The condition in a selection directive usually includes an inquiry directive. Error directives raise user-defined errors. All <a id="sthref185"></a>conditional compilation directives are built from preprocessor control tokens and PL/SQL text.</p>
<p class="subhead2"><a id="LNPLS275"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDFBBCB">Preprocessor Control Tokens</a></p>
</li>
<li>
<p><a href="#CHDBEIHI">Selection Directives</a></p>
</li>
<li>
<p><a href="#CHDEJHBF">Error Directives</a></p>
</li>
<li>
<p><a href="#CHDIDJFE">Inquiry Directives</a></p>
</li>
<li>
<p><a href="#BEIGHEEC">Static Expressions</a></p>
</li>
</ul>
<a id="CHDFBBCB"></a>
<div id="LNPLS295" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Preprocessor Control Tokens</h4>
<p><a id="sthref186"></a><a id="sthref187"></a>A preprocessor control token identifies code that is processed before the PL/SQL unit is compiled.</p>
<p class="subhead2"><a id="LNPLS276"></a>Syntax</p>
<pre dir="ltr">
$<span class="italic">plsql_identifier</span>
</pre>
<p>There cannot be space between <code dir="ltr">$</code> and <code dir="ltr"><span class="codeinlineitalic">plsql_identifier</span></code>. For information about <code dir="ltr"><span class="codeinlineitalic">plsql_identifier</span></code>, see <a href="#i6075">"Identifiers"</a>. The character <code dir="ltr">$</code> can also appear inside <code dir="ltr"><span class="codeinlineitalic">plsql_identifier</span></code>, but it has no special meaning there.</p>
<p>These preprocessor control tokens are <a id="sthref188"></a>reserved:</p>
<ul>
<li>
<p><code dir="ltr">$IF</code></p>
</li>
<li>
<p><code dir="ltr">$THEN</code></p>
</li>
<li>
<p><code dir="ltr">$ELSE</code></p>
</li>
<li>
<p><code dir="ltr">$ELSIF</code></p>
</li>
<li>
<p><code dir="ltr">$ERROR</code></p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CHDBEIHI"></a>
<div id="LNPLS296" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Selection Directives</h4>
<p>A <a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a><span class="bold">selection directive</span> selects source text to compile.</p>
<p class="subhead2"><a id="LNPLS277"></a>Syntax</p>
<pre dir="ltr">
$IF <span class="italic">boolean_static_expression</span> $THEN
   <span class="italic">text</span>
[ $ELSIF <span class="italic">boolean_static_expression</span> $THEN
   <span class="italic">text</span>
]...
[ $ELSE
   <span class="italic">text</span>
$END
]
</pre>
<p>For the syntax of <code dir="ltr"><span class="codeinlineitalic">boolean_static_expression</span></code>, see <a href="#CHDIGDHA">"BOOLEAN Static Expressions"</a>. The <code dir="ltr"><span class="codeinlineitalic">text</span></code> can be anything, but typically, it is either a statement (see <a href="block.htm#CJACJBCH">"<span class="italic">statement</span> ::="</a>) or an error directive (explained in <a href="#CHDEJHBF">"Error Directives"</a>).</p>
<p>The selection directive evaluates the <code dir="ltr">BOOLEAN</code> static expressions in the order that they appear until either one expression has the value <code dir="ltr">TRUE</code> or the list of expressions is exhausted. If one expression has the value <code dir="ltr">TRUE</code>, its text is compiled, the remaining expressions are not evaluated, and their text is not analyzed. If no expression has the value <code dir="ltr">TRUE</code>, then if <code dir="ltr">$ELSE</code> is present, its text is compiled; otherwise, no text is compiled.</p>
<p>For examples of selection directives, see <a href="#CHDIBFGC">"Conditional Compilation Examples"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="controlstatements.htm#i2866">"Conditional Selection Statements"</a> for information about the <code dir="ltr">IF</code> statement, which has the same logic as the selection directive</div>
</div>
<!-- class="sect3" -->
<a id="CHDEJHBF"></a>
<div id="LNPLS297" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Error Directives</h4>
<p>An <a id="sthref192"></a><a id="sthref193"></a><a id="sthref194"></a><span class="bold">error directive</span> produces a user-defined error message during compilation.</p>
<p class="subhead2"><a id="LNPLS280"></a>Syntax</p>
<pre dir="ltr">
$ERROR <span class="italic">varchar2_static_expression</span> $END
</pre>
<p>It produces this compile-time error message, where <code dir="ltr"><span class="codeinlineitalic">string</span></code> is the value of <code dir="ltr"><span class="codeinlineitalic">varchar2_static_expression</span></code>:</p>
<pre dir="ltr">
PLS-00179: $ERROR: <span class="italic">string</span>
</pre>
<p>For the syntax of <code dir="ltr"><span class="codeinlineitalic">varchar2_static_expression</span></code>, see <a href="#CHDEIHCJ">"VARCHAR2 Static Expressions"</a>.</p>
<p>For an example of an error directive, see <a href="#BEIJFDHG">Example 2-58</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CHDIDJFE"></a>
<div id="LNPLS298" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Inquiry Directives</h4>
<p>An <a id="sthref195"></a><a id="sthref196"></a><a id="sthref197"></a><span class="bold">inquiry directive</span> provides information about the compilation environment.</p>
<p class="subhead2"><a id="LNPLS283"></a>Syntax</p>
<pre dir="ltr">
$$<span class="italic">name</span>
</pre>
<p>For information about <code dir="ltr"><span class="codeinlineitalic">name</span></code>, which is an unquoted PL/SQL identifier, see <a href="#i6075">"Identifiers"</a>.</p>
<p>An inquiry directive typically appears in the <code dir="ltr"><span class="codeinlineitalic">boolean_static_expression</span></code> of a selection directive, but it can appear anywhere that a variable or literal of its type can appear. Moreover, it can appear where regular PL/SQL allows only a literal (not a variable)&mdash; for example, to specify the size of a <code dir="ltr">VARCHAR2</code> variable.</p>
<p class="subhead2"><a id="LNPLS286"></a>Topics</p>
<ul>
<li>
<p><a href="#BEIBIDCE">Predefined Inquiry Directives</a></p>
</li>
<li>
<p><a href="#CIHCDGEA">Assigning Values to Inquiry Directives</a></p>
</li>
<li>
<p><a href="#CIHIBFAB">Unresolvable Inquiry Directives</a></p>
</li>
</ul>
<a id="BEIBIDCE"></a>
<div id="LNPLS299" class="sect4">
<h5 class="sect4">Predefined Inquiry Directives</h5>
<p>The <a id="sthref198"></a>predefined inquiry directives are:</p>
<ul>
<li>
<p><a id="sthref199"></a><code dir="ltr">$$PLSQL_LINE</code></p>
<p>A <code dir="ltr">PLS_INTEGER</code> literal whose value is the number of the source line on which the directive appears in the current PL/SQL unit. An example of <code dir="ltr">$$PLSQL_LINE</code> in a selection directive is:</p>
<pre dir="ltr">
$IF <span class="bold">$$PLSQL_LINE = 32</span> $THEN ...
</pre></li>
<li>
<p><a id="sthref200"></a><code dir="ltr">$$PLSQL_UNIT</code></p>
<p>A <code dir="ltr">VARCHAR2</code> literal that contains the name of the current PL/SQL unit. If the current PL/SQL unit is an anonymous block, <code dir="ltr">$$PLSQL_UNIT</code> contains a <a id="sthref201"></a><code dir="ltr">NULL</code> value. An example of <code dir="ltr">$$PLSQL_UNIT</code> in a selection directive is:</p>
<pre dir="ltr">
$IF <span class="bold">$$PLSQL_UNIT IS NULL</span> $THEN ...
</pre>
<p>Because a selection directive needs a <code dir="ltr">BOOLEAN</code> static expression, you cannot use a <code dir="ltr">VARCHAR2</code> comparison such as:</p>
<pre dir="ltr">
$IF <span class="bold">$$PLSQL_UNIT = 'AWARD_BONUS'</span> $THEN ...
</pre></li>
<li>
<p><code dir="ltr">$$</code><code dir="ltr"><span class="codeinlineitalic">plsql_compilation_parameter</span></code></p>
<p><a id="sthref202"></a>The name <code dir="ltr"><span class="codeinlineitalic">plsql_compilation_parameter</span></code> is a PL/SQL compilation parameter (for example, <code dir="ltr">PLSCOPE_SETTINGS</code>). For descriptions of these parameters, see <a href="overview.htm#g3260498">Table 1-2</a>.</p>
</li>
</ul>
<p><a href="#CIHHCCFE">Example 2-54</a>, a SQL*Plus script, uses the predefined inquiry directives <code dir="ltr">$$PLSQL_LINE</code> and <code dir="ltr">$$PLSQL_UNIT</code> as ordinary <code dir="ltr">PLS_INTEGER</code> and <code dir="ltr">VARCHAR2</code> literals, respectively, to show how their values are assigned.</p>
<div id="LNPLS287" class="example">
<p class="titleinexample"><a id="CIHHCCFE"></a>Example 2-54 Predefined Inquiry Directives $$PLSQL_LINE and $$PLSQL_UNIT</p>
<pre dir="ltr">
SQL&gt; CREATE OR REPLACE PROCEDURE p
  2  IS
  3    i PLS_INTEGER;
  4  BEGIN
  5    DBMS_OUTPUT.PUT_LINE('Inside p');
  <span class="bold">6</span>    <span class="bold">i := $$PLSQL_LINE</span>;
  7    DBMS_OUTPUT.PUT_LINE('i = ' || i);
  <span class="bold">8</span>    DBMS_OUTPUT.PUT_LINE('$$PLSQL_LINE = ' || <span class="bold">$$PLSQL_LINE</span>);
  9    DBMS_OUTPUT.PUT_LINE('$$PLSQL_UNIT = ' || <span class="bold">$$PLSQL_UNIT</span>);
 10  END;
 11  /
 
Procedure created.
 
SQL&gt; BEGIN
  2   p;
  3   DBMS_OUTPUT.PUT_LINE('Outside p');
  4   DBMS_OUTPUT.PUT_LINE('$$PLSQL_UNIT = ' || <span class="bold">$$PLSQL_UNIT</span>);
  5  END;
  6  /
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside p
i = 6
$$PLSQL_LINE = 8
$$PLSQL_UNIT = P
Outside p
$$PLSQL_UNIT =
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p><a id="sthref203"></a><a href="#CIHDHADG">Example 2-55</a> displays the current values of PL/SQL the compilation parameters.</p>
<div id="LNPLS288" class="example">
<p class="titleinexample"><a id="CIHDHADG"></a>Example 2-55 Displaying Values of PL/SQL Compilation Parameters</p>
<pre dir="ltr">
BEGIN
  DBMS_OUTPUT.PUT_LINE('$$PLSCOPE_SETTINGS = '     || $$PLSCOPE_SETTINGS);
  DBMS_OUTPUT.PUT_LINE('$$PLSQL_CCFLAGS = '        || $$PLSQL_CCFLAGS);
  DBMS_OUTPUT.PUT_LINE('$$PLSQL_CODE_TYPE = '      || $$PLSQL_CODE_TYPE);
  DBMS_OUTPUT.PUT_LINE('$$PLSQL_OPTIMIZE_LEVEL = ' || $$PLSQL_OPTIMIZE_LEVEL);
  DBMS_OUTPUT.PUT_LINE('$$PLSQL_WARNINGS = '       || $$PLSQL_WARNINGS);
  DBMS_OUTPUT.PUT_LINE('$$NLS_LENGTH_SEMANTICS = ' || $$NLS_LENGTH_SEMANTICS);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
$$PLSCOPE_SETTINGS =
$$PLSQL_CCFLAGS = 99
$$PLSQL_CODE_TYPE = INTERPRETED
$$PLSQL_OPTIMIZE_LEVEL = 2
$$PLSQL_WARNINGS = ENABLE:ALL
$$NLS_LENGTH_SEMANTICS = BYTE
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
In the SQL*Plus environment, you can display the current values of initialization parameters, including the PL/SQL compilation parameters, with the command <code dir="ltr">SHOW</code> <code dir="ltr">PARAMETERS</code>. For more information about the <code dir="ltr">SHOW</code> command and its <code dir="ltr">PARAMETERS</code> option, see <a class="olink SQPUG123" href="../../server.112/e16604/ch_twelve040.htm#SQPUG123"><span class="italic">SQL*Plus User's Guide and Reference</span></a>.</div>
</div>
<!-- class="sect4" -->
<a id="CIHCDGEA"></a>
<div id="LNPLS289" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Assigning Values to Inquiry Directives</h5>
<p>You can assign values to inquiry directives with the <a id="sthref204"></a><code dir="ltr">PLSQL_CCFLAGS</code> compilation parameter. For example:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_CCFLAGS = 
  '<span class="italic">name1</span>:<span class="italic">value1</span>, <span class="italic">name2</span>:<span class="italic">value2</span>, ... <span class="italic">name</span>n:<span class="italic">value</span>n'
</pre>
<p>Each <code dir="ltr"><span class="codeinlineitalic">value</span></code> must be either a <code dir="ltr">BOOLEAN</code> literal (<code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>) or <code dir="ltr">PLS_INTEGER</code> literal. The data type of <code dir="ltr"><span class="codeinlineitalic">value</span></code> determines the data type of <code dir="ltr"><span class="codeinlineitalic">name</span></code>.</p>
<p>The same <code dir="ltr"><span class="codeinlineitalic">name</span></code> can appear multiple times, with values of the same or different data types. Later assignments override earlier assignments. For example, this command sets the value of <code dir="ltr">$$flag</code> to 5 and its data type to <code dir="ltr">PLS_INTEGER</code>:</p>
<pre dir="ltr">
ALTER SESSION SET PLSQL_CCFLAGS = 'flag:TRUE, flag:5'
</pre>
<p>Oracle recommends against using <code dir="ltr">PLSQL_CCFLAGS</code> to assign values to predefined inquiry directives, including compilation parameters. To assign values to compilation parameters, Oracle recommends using the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement. For more information about the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement, see <a class="olink SQLRF00901" href="../../server.112/e41084/statements_2013.htm#SQLRF00901"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p><a href="#CIHHDCIE">Example 2-56</a> uses <code dir="ltr">PLSQL_CCFLAGS</code> to assign a value to the user-defined inquiry directive <code dir="ltr">$$Some_Flag</code> and (though not recommended) to itself. Because later assignments override earlier assignments, the resulting value of <code dir="ltr">$$Some_Flag</code> is 2 and the resulting value of <code dir="ltr">PLSQL_CCFLAGS</code> is the value that it assigns to itself (99), not the value that the <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement assigns to it (<code dir="ltr">'Some_Flag:1, Some_Flag:2, PLSQL_CCFlags:99'</code>).</p>
<div id="LNPLS290" class="example">
<p class="titleinexample"><a id="CIHHDCIE"></a>Example 2-56 PLSQL_CCFLAGS Assigns Value to Itself</p>
<pre dir="ltr">
ALTER SESSION SET
<span class="bold">PLSQL_CCFlags = 'Some_Flag:1, Some_Flag:2, PLSQL_CCFlags:99'</span>
/
BEGIN
  DBMS_OUTPUT.PUT_LINE($$Some_Flag);
  DBMS_OUTPUT.PUT_LINE($$PLSQL_CCFlags);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
2
99
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The compile-time value of <code dir="ltr">PLSQL_CCFLAGS</code> is stored with the metadata of stored PL/SQL units, which means that you can reuse the value when you explicitly recompile the units. For more information, see <a href="overview.htm#BABBDFJF">"PL/SQL Units and Compilation Parameters"</a>.</div>
<p>For more information about <code dir="ltr">PLSQL_CCFLAGS</code>, see <a class="olink REFRN10261" href="../../server.112/e40402/initparams195.htm#REFRN10261"><span class="italic">Oracle Database Reference</span></a>.</p>
</div>
<!-- class="sect4" -->
<a id="CIHIBFAB"></a>
<div id="LNPLS291" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Unresolvable Inquiry Directives</h5>
<p>If an inquiry directive (<code dir="ltr">$$</code><code dir="ltr"><span class="codeinlineitalic">name</span></code>) cannot be resolved (that is, if its value cannot be determined) and the source text is not <a id="sthref205"></a>wrapped, then PL/SQL issues the warning <code dir="ltr">PLW-6003</code> and substitutes <a id="sthref206"></a><code dir="ltr">NULL</code> for the value of the unresolved inquiry directive. If the source text is wrapped, the warning message is disabled, so that the unresolved inquiry directive is not revealed. For information about wrapping PL/SQL source text, see <a href="wrap.htm#BABEFEJF">Appendix A, "PL/SQL Source Text Wrapping"</a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="BEIGHEEC"></a>
<div id="LNPLS300" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Static Expressions</h4>
<p>A <a id="sthref207"></a><a id="sthref208"></a><span class="bold">static expression</span> is an expression whose value can be determined at compile time&mdash;that is, it does not include character comparisons, variables, or function invocations. Static expressions are the only expressions that can appear in conditional compilation directives.</p>
<p>A <a id="sthref209"></a><a id="sthref210"></a><span class="bold">static expression</span> is an expression whose value can be determined at compilation time (that is, it does not include references to variables or functions). Static expressions are the only expressions that can appear in conditional compilation directives.</p>
<p class="subhead2"><a id="LNPLS292"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDEAIED">PLS_INTEGER Static Expressions</a></p>
</li>
<li>
<p><a href="#CHDIGDHA">BOOLEAN Static Expressions</a></p>
</li>
<li>
<p><a href="#CHDEIHCJ">VARCHAR2 Static Expressions</a></p>
</li>
<li>
<p><a href="#CHDBICJF">Static Constants</a></p>
</li>
<li>
<p><a href="#CHDFGCIG">DBMS_DB_VERSION Package</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i16003">"Expressions"</a> for general information about expressions</div>
<a id="CHDEAIED"></a>
<div id="LNPLS302" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">PLS_INTEGER Static Expressions</h5>
<p><a id="sthref211"></a><code dir="ltr">PLS_INTEGER</code> static expressions are:</p>
<ul>
<li>
<p><code dir="ltr">PLS_INTEGER</code> literals</p>
<p>For information about literals, see <a href="#i6078">"Literals"</a>.</p>
</li>
<li>
<p><code dir="ltr">PLS_INTEGER</code> static constants</p>
<p>For information about static constants, see <a href="#CHDBICJF">"Static Constants"</a>.</p>
</li>
<li>
<p><code dir="ltr">NULL</code></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datatypes.htm#i10726">"PLS_INTEGER and BINARY_INTEGER Data Types"</a> for information about the <code dir="ltr">PLS_INTEGER</code> data type</div>
</div>
<!-- class="sect4" -->
<a id="CHDIGDHA"></a>
<div id="LNPLS301" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">BOOLEAN Static Expressions</h5>
<p><a id="sthref212"></a><code dir="ltr">BOOLEAN</code> static expressions are:</p>
<ul>
<li>
<p><code dir="ltr">BOOLEAN</code> literals (<code dir="ltr">TRUE</code>, <code dir="ltr">FALSE</code>, or <code dir="ltr">NULL</code>)</p>
</li>
<li>
<p><code dir="ltr">BOOLEAN</code> static constants</p>
<p>For information about static constants, see <a href="#CHDBICJF">"Static Constants"</a>.</p>
</li>
<li>
<p>Where <code dir="ltr"><span class="codeinlineitalic">x</span></code> and <code dir="ltr"><span class="codeinlineitalic">y</span></code> are <code dir="ltr">PLS_INTEGER</code> static expressions:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&gt;</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&lt;</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&gt;=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&lt;=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&lt;&gt;</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
</ul>
<p>For information about <code dir="ltr">PLS_INTEGER</code> static expressions, see <a href="#CHDEAIED">"PLS_INTEGER Static Expressions"</a>.</p>
</li>
<li>
<p>Where <code dir="ltr"><span class="codeinlineitalic">x</span></code> and <code dir="ltr"><span class="codeinlineitalic">y</span></code> are <code dir="ltr">BOOLEAN</code> expressions:</p>
<ul>
<li>
<p><code dir="ltr">NOT</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">AND</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">OR</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&gt;</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&gt;=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&lt;=</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">&lt;&gt;</code> <code dir="ltr"><span class="codeinlineitalic">y</span></code></p>
</li>
</ul>
<p>For information about <code dir="ltr">BOOLEAN</code> expressions, see <a href="#CHDCGDDH">"BOOLEAN Expressions"</a>.</p>
</li>
<li>
<p>Where <code dir="ltr">x</code> is a static expression:</p>
<ul>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">IS</code> <code dir="ltr">NULL</code></p>
</li>
<li>
<p><code dir="ltr"><span class="codeinlineitalic">x</span></code> <code dir="ltr">IS</code> <code dir="ltr">NOT</code> <code dir="ltr">NULL</code></p>
</li>
</ul>
<p>For information about static expressions, see <a href="#BEIGHEEC">"Static Expressions"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datatypes.htm#CJACJGBG">"BOOLEAN Data Type"</a> for information about the <code dir="ltr">BOOLEAN</code> data type</div>
</div>
<!-- class="sect4" -->
<a id="CHDEIHCJ"></a>
<div id="LNPLS303" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">VARCHAR2 Static Expressions</h5>
<p><a id="sthref213"></a><code dir="ltr">VARCHAR2</code> static expressions are:</p>
<ul>
<li>
<p>String literal with maximum size of 32,767 bytes</p>
<p>For information about literals, see <a href="#i6078">"Literals"</a>.</p>
</li>
<li>
<p><code dir="ltr">NULL</code></p>
</li>
<li>
<p><code dir="ltr">TO_CHAR(x)</code>, where <code dir="ltr">x</code> is a <code dir="ltr">PLS_INTEGER</code> static expression</p>
<p>For information about the <code dir="ltr">TO_CHAR</code> function, see <a class="olink SQLRF06128" href="../../server.112/e41084/functions199.htm#SQLRF06128"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><code dir="ltr">TO_CHAR(x</code>, <code dir="ltr">f</code>, <code dir="ltr">n)</code> where <code dir="ltr">x</code> is a <code dir="ltr">PLS_INTEGER</code> static expression and <code dir="ltr">f</code> and <code dir="ltr">n</code> are <code dir="ltr">VARCHAR2</code> static expressions</p>
<p>For information about the <code dir="ltr">TO_CHAR</code> function, see <a class="olink SQLRF06130" href="../../server.112/e41084/functions201.htm#SQLRF06130"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
<li>
<p><code dir="ltr">x</code> <code dir="ltr">||</code> <code dir="ltr">y</code> where <code dir="ltr">x</code> and <code dir="ltr">y</code> are <code dir="ltr">VARCHAR2</code> or <code dir="ltr">PLS_INTEGER</code> static expressions</p>
<p>For information about <code dir="ltr">PLS_INTEGER</code> static expressions, see <a href="#CHDEAIED">"PLS_INTEGER Static Expressions"</a>.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="datatypes.htm#CIHGBBIG">"CHAR and VARCHAR2 Variables"</a> for information about the <code dir="ltr">VARCHAR2</code> data type</div>
</div>
<!-- class="sect4" -->
<a id="CHDBICJF"></a>
<div id="LNPLS304" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">Static Constants</h5>
<p>A <a id="sthref214"></a><a id="sthref215"></a><span class="bold">static constant</span> is declared in a package specification with this syntax:</p>
<pre dir="ltr">
<span class="italic">constant_name</span> CONSTANT <span class="italic">data_type</span> := <span class="italic">static_expression</span>;
</pre>
<p>The type of <code dir="ltr"><span class="codeinlineitalic">static_expression</span></code> must be the same as <code dir="ltr"><span class="codeinlineitalic">data_type</span></code> (either <code dir="ltr">BOOLEAN</code> or <code dir="ltr">PLS_INTEGER</code>).</p>
<p>The static constant must always be referenced as <code dir="ltr"><span class="codeinlineitalic">package_name</span></code>.<code dir="ltr"><span class="codeinlineitalic">constant_name</span></code>, even in the body of the <code dir="ltr"><span class="codeinlineitalic">package_name</span></code> package.</p>
<p>If you use <code dir="ltr"><span class="codeinlineitalic">constant_name</span></code> in the <code dir="ltr">BOOLEAN</code> expression in a conditional compilation directive in a PL/SQL unit, then the PL/SQL unit depends on the package <code dir="ltr"><span class="codeinlineitalic">package_name</span></code>. If you alter the package specification, the dependent PL/SQL unit might become invalid and need recompilation (for information about the invalidation of dependent objects, see <a class="olink ADFNS99992" href="../../appdev.112/e41502/adfns_dependencies.htm#ADFNS99992"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>).</p>
<p>If you use a <a id="sthref216"></a>package with static constants to control conditional compilation in multiple PL/SQL units, Oracle recommends that you create only the package specification, and dedicate it exclusively to controlling conditional compilation. This practice minimizes invalidations caused by altering the package specification.</p>
<p>To control conditional compilation in a single PL/SQL unit, you can set flags in the <code dir="ltr">PLSQL_CCFLAGS</code> compilation parameter. For information about this parameter, see <a href="#CIHCDGEA">"Assigning Values to Inquiry Directives"</a> and <a class="olink REFRN10261" href="../../server.112/e40402/initparams195.htm#REFRN10261"><span class="italic">Oracle Database Reference</span></a>.</p>
<p>In <a href="#CIHEBFHF">Example 2-57</a>, the package <code dir="ltr">my_debug</code> defines the static constants <code dir="ltr">debug</code> and <code dir="ltr">trace</code> to control debugging and tracing in multiple PL/SQL units. The procedure <code dir="ltr">my_proc1</code> uses only <code dir="ltr">debug</code>, and the procedure <code dir="ltr">my_proc2</code> uses only <code dir="ltr">trace</code>, but both procedures depend on the package. However, the recompiled code might not be different. For example, if you only change the value of <code dir="ltr">debug</code> to <code dir="ltr">FALSE</code> and then recompile the two procedures, the compiled code for <code dir="ltr">my_proc1</code> changes, but the compiled code for <code dir="ltr">my_proc2</code> does not.</p>
<div id="LNPLS305" class="example">
<p class="titleinexample"><a id="CIHEBFHF"></a>Example 2-57 Static Constants</p>
<pre dir="ltr">
CREATE PACKAGE my_debug IS
  <span class="bold">debug</span> CONSTANT BOOLEAN := TRUE;
  <span class="bold">trace</span> CONSTANT BOOLEAN := TRUE;
END my_debug;
/
 
CREATE PROCEDURE my_proc1 IS
BEGIN
  $IF <span class="bold">my_debug.debug</span> $THEN
    DBMS_OUTPUT.put_line('Debugging ON');
  $ELSE
    DBMS_OUTPUT.put_line('Debugging OFF');
  $END
END my_proc1;
/
 
CREATE PROCEDURE my_proc2 IS
BEGIN
  $IF <span class="bold">my_debug.trace</span> $THEN
    DBMS_OUTPUT.put_line('Tracing ON');
  $ELSE
    DBMS_OUTPUT.put_line('Tracing OFF');
  $END
END my_proc2;
/
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BEIJHGDF">"Constant Declarations"</a> for general information about declaring constants</p>
</li>
<li>
<p><a href="packages.htm#CIHIJECJ">Chapter 10, "PL/SQL Packages"</a> for more information about packages</p>
</li>
<li>
<p><a class="olink ADFNS99967" href="../../appdev.112/e41502/adfns_dependencies.htm#ADFNS99967"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about schema object dependencies</p>
</li>
</ul>
</div>
</div>
<!-- class="sect4" -->
<a id="CHDFGCIG"></a>
<div id="LNPLS306" class="sect4">
<h5 class="sect4">DBMS_DB_VERSION Package</h5>
<p>The <a id="sthref217"></a><code dir="ltr">DBMS_DB_VERSION</code> package provides these <a id="sthref218"></a><a id="sthref219"></a>static constants:</p>
<ul>
<li>
<p>The <code dir="ltr">PLS_INTEGER</code> constant <a id="sthref220"></a><code dir="ltr">VERSION</code> identifies the current Oracle Database version.</p>
</li>
<li>
<p>The <code dir="ltr">PLS_INTEGER</code> constant <a id="sthref221"></a><code dir="ltr">RELEASE</code> identifies the current Oracle Database release number.</p>
</li>
<li>
<p>Each <code dir="ltr">BOOLEAN</code> constant of the form <code dir="ltr">VER_LE_</code><code dir="ltr"><span class="codeinlineitalic">v</span></code> has the value <code dir="ltr">TRUE</code> if the database version is less than or equal to <code dir="ltr"><span class="codeinlineitalic">v</span></code>; otherwise, it has the value <code dir="ltr">FALSE</code>.</p>
</li>
<li>
<p>Each <code dir="ltr">BOOLEAN</code> constant of the form <code dir="ltr">VER_LE_</code><code dir="ltr"><span class="codeinlineitalic">v_r</span></code> has the value <code dir="ltr">TRUE</code> if the database version is less than or equal to <code dir="ltr"><span class="codeinlineitalic">v</span></code> and release is less than or equal to <code dir="ltr"><span class="codeinlineitalic">r</span></code>; otherwise, it has the value <code dir="ltr">FALSE</code>.</p>
</li>
<li>
<p>All constants representing Oracle Database 10<span class="italic">g</span> or earlier have the value <code dir="ltr">FALSE</code>.</p>
</li>
</ul>
<p>For more information about the <code dir="ltr">DBMS_DB_VERSION</code> package, see <a class="olink ARPLS223" href="../../appdev.112/e40758/d_dbver.htm#ARPLS223"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIBFGC"></a>
<div id="LNPLS308" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Conditional Compilation Examples</h3>
<p><a href="#BEIJFDHG">Example 2-58</a> generates an error message if the database version and release is less than Oracle Database 10<span class="italic">g</span> Release 2 ; otherwise, it displays a message saying that the version and release are supported and uses a <code dir="ltr">COMMIT</code> statement that became available at Oracle Database 10<span class="italic">g</span> Release 2 .</p>
<div id="LNPLS307" class="example">
<p class="titleinexample"><a id="BEIJFDHG"></a>Example 2-58 Code for Checking Database Version</p>
<pre dir="ltr">
BEGIN
  <span class="bold">$IF DBMS_DB_VERSION.VER_LE_10_1 $THEN</span>  -- selection directive begins
    <span class="bold">$ERROR 'unsupported database release' $END</span>  -- error directive
  <span class="bold">$ELSE</span>
    DBMS_OUTPUT.PUT_LINE (
      'Release ' || <span class="bold">DBMS_DB_VERSION.VERSION</span> || '.' ||
      <span class="bold">DBMS_DB_VERSION.RELEASE</span> || ' is supported.'
    );
  -- This COMMIT syntax is newly supported in 10.2:
  COMMIT WRITE IMMEDIATE NOWAIT;
  <span class="bold">$END</span>  -- selection directive ends
END;
/
 
</pre>
<p>Result:</p>
<pre dir="ltr">
Release 11.1 is supported.
</pre></div>
<!-- class="example" -->
<p><a href="#CBJBAEAA">Example 2-59</a> sets the values of the user-defined inquiry directives <code dir="ltr">$$my_debug</code> and <code dir="ltr">$$my_tracing</code> and then uses conditional compilation:</p>
<ul>
<li>
<p>In the specification of package <code dir="ltr">my_pkg</code>, to determine the base type of the subtype <code dir="ltr">my_real</code> (<code dir="ltr">BINARY_DOUBLE</code> is available only for Oracle Database versions 10<span class="italic">g</span> and later.)</p>
</li>
<li>
<p>In the body of package <code dir="ltr">my_pkg</code>, to compute the values of <code dir="ltr">my_pi</code> and <code dir="ltr">my_e</code> differently for different database versions</p>
</li>
<li>
<p>In the procedure <code dir="ltr">circle_area</code>, to compile some code only if the inquiry directive <code dir="ltr">$$my_debug</code> has the value <code dir="ltr">TRUE</code>.</p>
</li>
</ul>
<div id="LNPLS310" class="example">
<p class="titleinexample"><a id="CBJBAEAA"></a>Example 2-59 Compiling Different Code for Different Database Versions</p>
<pre dir="ltr">
ALTER SESSION SET <span class="bold">PLSQL_CCFLAGS = 'my_debug:FALSE, my_tracing:FALSE'</span>;
 
CREATE OR REPLACE PACKAGE my_pkg AS
  SUBTYPE my_real IS
    <span class="bold">$IF DBMS_DB_VERSION.VERSION &lt; 10 $THEN</span>
      <span class="bold">NUMBER;</span>
    <span class="bold">$ELSE</span>
      <span class="bold">BINARY_DOUBLE;</span>
    <span class="bold">$END</span>
  
  my_pi my_real;
  my_e  my_real;
END my_pkg;
/
 
CREATE OR REPLACE PACKAGE BODY my_pkg AS
BEGIN
  <span class="bold">$IF DBMS_DB_VERSION.VERSION &lt; 10 $THEN</span>
    <span class="bold">my_pi := 3.14159265358979323846264338327950288420;</span>
    <span class="bold">my_e  := 2.71828182845904523536028747135266249775;</span>
  <span class="bold">$ELSE</span>
    <span class="bold">my_pi := 3.14159265358979323846264338327950288420d;</span>
    <span class="bold">my_e  := 2.71828182845904523536028747135266249775d;</span>
  <span class="bold">$END</span>
END my_pkg;
/
 
CREATE OR REPLACE PROCEDURE circle_area(radius my_pkg.my_real) IS
  my_area       my_pkg.my_real;
  my_data_type  VARCHAR2(30);
BEGIN
  my_area := my_pkg.my_pi * (radius**2);
  
  DBMS_OUTPUT.PUT_LINE
    ('Radius: ' || TO_CHAR(radius) || ' Area: ' || TO_CHAR(my_area));
  
  <span class="bold">$IF $$my_debug $THEN</span>
    SELECT DATA_TYPE INTO my_data_type
    FROM USER_ARGUMENTS
    WHERE OBJECT_NAME = 'CIRCLE_AREA'
    AND ARGUMENT_NAME = 'RADIUS';
 
    DBMS_OUTPUT.PUT_LINE
      ('Data type of the RADIUS argument is: ' || my_data_type);
  <span class="bold">$END</span>
END;
/

CALL DBMS_PREPROCESSOR.PRINT_POST_PROCESSED_SOURCE
 ('PACKAGE', 'HR', 'MY_PKG');
</pre>
<p>Result:</p>
<pre dir="ltr">
PACKAGE my_pkg AS
SUBTYPE my_real IS
BINARY_DOUBLE;
my_pi my_real;
my_e my_real;
END my_pkg;
 
Call completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHHEHDA"></a>
<div id="LNPLS293" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Retrieving and Printing Post-Processed Source Text</h3>
<p>The <a id="sthref222"></a><code dir="ltr">DBMS_PREPROCESSOR</code> package provides subprograms that retrieve and print the source text of a PL/SQL unit in its <a id="sthref223"></a>post-processed form. For information about the <code dir="ltr">DBMS_PREPROCESSOR</code> package, see <a class="olink ARPLS222" href="../../appdev.112/e40758/d_preproc.htm#ARPLS222"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<p><a href="#CIHHCGII">Example 2-60</a> invokes the procedure <code dir="ltr">DBMS_PREPROCESSOR</code>.<code dir="ltr">PRINT_POST_PROCESSED_SOURCE</code> to print the post-processed form of <code dir="ltr">my_pkg</code> (from <a href="#CBJBAEAA">Example 2-59</a>). Lines of code in <a href="#CBJBAEAA">Example 2-59</a> that are not included in the post-processed text appear as blank lines.</p>
<div id="LNPLS312" class="example">
<p class="titleinexample"><a id="CIHHCGII"></a>Example 2-60 Displaying Post-Processed Source Textsource text</p>
<pre dir="ltr">
CALL DBMS_PREPROCESSOR.PRINT_POST_PROCESSED_SOURCE (
  'PACKAGE', 'HR', 'MY_PKG'
);
</pre>
<p>Result:</p>
<pre dir="ltr">
PACKAGE my_pkg AS
SUBTYPE my_real IS
BINARY_DOUBLE;
my_pi my_real;
my_e my_real;
END my_pkg;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDBGHHF"></a>
<div id="LNPLS313" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Conditional Compilation Directive Restrictions</h3>
<p>A <a id="sthref224"></a>conditional compilation directive cannot appear in the specification of a schema-level user-defined type (created with the <a href="create_type.htm#BABHJHEB">"CREATE TYPE Statement"</a>). This type specification specifies the attribute structure of the type, which determines the attribute structure of dependent types and the column structure of dependent tables.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
Using a conditional compilation directive to change the attribute structure of a type can cause dependent objects to "go out of sync" or dependent tables to become inaccessible. Oracle recommends that you change the attribute structure of a type only with the <a href="alter_type.htm#i2057828">"ALTER TYPE Statement"</a>. The <code dir="ltr">ALTER</code> <code dir="ltr">TYPE</code> statement propagates changes to dependent objects.</div>
<p>The SQL parser imposes these restrictions on the location of the first conditional compilation directive in a stored PL/SQL unit or anonymous block:</p>
<ul>
<li>
<p>In a package specification, a package body, a type body, and in a schema-level subprogram with no formal parameters, the first conditional compilation directive cannot appear before the keyword <code dir="ltr">IS</code> or <code dir="ltr">AS</code>.</p>
</li>
<li>
<p>In a schema-level subprogram with at least one formal parameter, the first conditional compilation directive cannot appear before the left parenthesis that follows the subprogram name.</p>
<p>This example is correct:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE <span class="bold">my_proc (</span>
  <span class="bold">$IF</span> $$xxx $THEN i IN PLS_INTEGER $ELSE i IN INTEGER $END
) IS BEGIN NULL; END my_proc;
/
</pre></li>
<li>
<p>In a trigger or an anonymous block, the first conditional compilation directive cannot appear before the keyword <code dir="ltr">DECLARE</code> or <code dir="ltr">BEGIN</code>, whichever comes first.</p>
</li>
</ul>
<p>The SQL parser also imposes this restriction: If an anonymous block uses a placeholder, the <a id="sthref225"></a>placeholder cannot appear in a conditional compilation directive. For example:</p>
<pre dir="ltr">
BEGIN
  :n := 1; -- valid use of placeholder
  <span class="bold">$IF ... $THEN</span>
    <span class="bold">:n</span> := 1; -- invalid use of placeholder
$END
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="overview.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="datatypes.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
