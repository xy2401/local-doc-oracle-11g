<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>List of Examples</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:53:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="toc.htm" title="Previous" type="text/html" />
<link rel="Next" href="lof.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">2/99</span> <!-- End Header -->
<h1 class="listofeft">List of Examples</h1>
<ul style="list-style-type:none">
<li><a href="overview.htm#BABDHBBA">1-1 PL/SQL Block Structure</a></li>
<li><a href="overview.htm#BABCFJII">1-2 Processing Query Result Rows One at a Time</a></li>
<li><a href="fundamentals.htm#CIHDCHBF">2-1 Valid Case-Insensitive Reference to Quoted User-Defined Identifier</a></li>
<li><a href="fundamentals.htm#CIHCADFI">2-2 Invalid Case-Insensitive Reference to Quoted User-Defined Identifier</a></li>
<li><a href="fundamentals.htm#CIHGBJDH">2-3 Reserved Word as Quoted User-Defined Identifier</a></li>
<li><a href="fundamentals.htm#CIHDHFDB">2-4 Neglecting Double Quotation Marks</a></li>
<li><a href="fundamentals.htm#CIHEHGEI">2-5 Neglecting Case-Sensitivity</a></li>
<li><a href="fundamentals.htm#BEICABIJ">2-6 Single-Line Comments</a></li>
<li><a href="fundamentals.htm#CIHGEJDF">2-7 Multiline Comments</a></li>
<li><a href="fundamentals.htm#CIHBEDFE">2-8 Whitespace Characters Improving Source Text Readability</a></li>
<li><a href="fundamentals.htm#BABEABGF">2-9 Scalar Variable Declarations</a></li>
<li><a href="fundamentals.htm#CIHFHFEB">2-10 Constant Declarations</a></li>
<li><a href="fundamentals.htm#CIHBCHCE">2-11 Variable and Constant Declarations with Initial Values</a></li>
<li><a href="fundamentals.htm#CIHIBJJF">2-12 Variable Initialized to NULL by Default</a></li>
<li><a href="fundamentals.htm#CIHJJHCE">2-13 Variable Declaration with NOT NULL Constraint</a></li>
<li><a href="fundamentals.htm#CIHFHGHF">2-14 Variables Initialized to NULL Values</a></li>
<li><a href="fundamentals.htm#CIHCGIGG">2-15 Declaring Variable of Same Type as Column</a></li>
<li><a href="fundamentals.htm#CIHJEIEE">2-16 Declaring Variable of Same Type as Another Variable</a></li>
<li><a href="fundamentals.htm#BEIGJIBA">2-17 Scope and Visibility of Identifiers</a></li>
<li><a href="fundamentals.htm#CIHEFEEH">2-18 Qualifying Redeclared Global Identifier with Block Label</a></li>
<li><a href="fundamentals.htm#CIHIGGDA">2-19 Qualifying Identifier with Subprogram Name</a></li>
<li><a href="fundamentals.htm#BEIFFHGF">2-20 Duplicate Identifiers in Same Scope</a></li>
<li><a href="fundamentals.htm#CIHHIDJI">2-21 Declaring Same Identifier in Different Units</a></li>
<li><a href="fundamentals.htm#CIHIHCEJ">2-22 Label and Subprogram with Same Name in Same Scope</a></li>
<li><a href="fundamentals.htm#CJAGDGJE">2-23 Block with Multiple and Duplicate Labels</a></li>
<li><a href="fundamentals.htm#BABBDCEC">2-24 Assigning Values to Variables with Assignment Statement</a></li>
<li><a href="fundamentals.htm#BABHFEHA">2-25 Assigning Value to Variable with SELECT INTO Statement</a></li>
<li><a href="fundamentals.htm#BABIIBDF">2-26 Assigning Value to Variable as IN OUT Subprogram Parameter</a></li>
<li><a href="fundamentals.htm#CIHEFBAD">2-27 Assigning Value to BOOLEAN Variable</a></li>
<li><a href="fundamentals.htm#CIHEGDBG">2-28 Concatenation Operator</a></li>
<li><a href="fundamentals.htm#CIHFJBCJ">2-29 Concatenation Operator with NULL Operands</a></li>
<li><a href="fundamentals.htm#CIHGCAFE">2-30 Controlling Evaluation Order with Parentheses</a></li>
<li><a href="fundamentals.htm#CIHEIEHG">2-31 Expression with Nested Parentheses</a></li>
<li><a href="fundamentals.htm#CIHBDCGA">2-32 Improving Readability with Parentheses</a></li>
<li><a href="fundamentals.htm#CIHIIGAG">2-33 Operator Precedence</a></li>
<li><a href="fundamentals.htm#CIHDAFEJ">2-34 Procedure Prints BOOLEAN Variable</a></li>
<li><a href="fundamentals.htm#CIHIIBAC">2-35 AND Operator</a></li>
<li><a href="fundamentals.htm#CIHDABEC">2-36 OR Operator</a></li>
<li><a href="fundamentals.htm#CIHEBJED">2-37 NOT Operator</a></li>
<li><a href="fundamentals.htm#BEIIDBHJ">2-38 NULL Value in Unequal Comparison</a></li>
<li><a href="fundamentals.htm#CIHJIFDG">2-39 NULL Value in Equal Comparison</a></li>
<li><a href="fundamentals.htm#CIHHIBCE">2-40 NOT NULL Equals NULL</a></li>
<li><a href="fundamentals.htm#CIHEHAGE">2-41 Changing Evaluation Order of Logical Operators</a></li>
<li><a href="fundamentals.htm#CIHGJBFD">2-42 Short-Circuit Evaluation</a></li>
<li><a href="fundamentals.htm#CIHFFBCI">2-43 Relational Operators in Expressions</a></li>
<li><a href="fundamentals.htm#CIHECJJB">2-44 LIKE Operator in Expression</a></li>
<li><a href="fundamentals.htm#CIHFIIEA">2-45 Escape Character in Pattern</a></li>
<li><a href="fundamentals.htm#CIHDEEAG">2-46 BETWEEN Operator in Expressions</a></li>
<li><a href="fundamentals.htm#CIHJEGAE">2-47 IN Operator in Expressions</a></li>
<li><a href="fundamentals.htm#CIHFHEIE">2-48 IN Operator with Sets with NULL Values</a></li>
<li><a href="fundamentals.htm#CIHBABAD">2-49 Equivalent BOOLEAN Expressions</a></li>
<li><a href="fundamentals.htm#BEIFHCJE">2-50 Simple CASE Expression</a></li>
<li><a href="fundamentals.htm#CIHIJABF">2-51 Simple CASE Expression with WHEN NULL</a></li>
<li><a href="fundamentals.htm#BEIBCGID">2-52 Searched CASE Expression</a></li>
<li><a href="fundamentals.htm#CIHDDFHC">2-53 Searched CASE Expression with WHEN ... IS NULL</a></li>
<li><a href="fundamentals.htm#CIHHCCFE">2-54 Predefined Inquiry Directives $$PLSQL_LINE and $$PLSQL_UNIT</a></li>
<li><a href="fundamentals.htm#CIHDHADG">2-55 Displaying Values of PL/SQL Compilation Parameters</a></li>
<li><a href="fundamentals.htm#CIHHDCIE">2-56 PLSQL_CCFLAGS Assigns Value to Itself</a></li>
<li><a href="fundamentals.htm#CIHEBFHF">2-57 Static Constants</a></li>
<li><a href="fundamentals.htm#BEIJFDHG">2-58 Code for Checking Database Version</a></li>
<li><a href="fundamentals.htm#CBJBAEAA">2-59 Compiling Different Code for Different Database Versions</a></li>
<li><a href="fundamentals.htm#CIHHCGII">2-60 Displaying Post-Processed Source Textsource text</a></li>
<li><a href="datatypes.htm#CHDBABGF">3-1 CHAR and VARCHAR2 Blank-Padding Difference</a></li>
<li><a href="datatypes.htm#CHDHDHHA">3-2 Printing BOOLEAN Values</a></li>
<li><a href="datatypes.htm#CHDDIAEG">3-3 PLS_INTEGER Calculation Raises Overflow Exception</a></li>
<li><a href="datatypes.htm#CHDEDAGD">3-4 Preventing Example 3-3 Overflow</a></li>
<li><a href="datatypes.htm#CHDBJFJE">3-5 Violating Constraint of SIMPLE_INTEGER Subtype</a></li>
<li><a href="datatypes.htm#BABEDFGH">3-6 User-Defined Unconstrained Subtypes Show Intended Use</a></li>
<li><a href="datatypes.htm#CJABHGBG">3-7 User-Defined Constrained Subtype Detects Out-of-Range Values</a></li>
<li><a href="datatypes.htm#CHDDEEJC">3-8 Implicit Conversion Between Constrained Subtypes with Same Base Type</a></li>
<li><a href="datatypes.htm#CHDIIGEA">3-9 Implicit Conversion Between Subtypes with Base Types in Same Family</a></li>
<li><a href="controlstatements.htm#BABDAEGB">4-1 IF THEN Statement</a></li>
<li><a href="controlstatements.htm#BABGBDCB">4-2 IF THEN ELSE Statement</a></li>
<li><a href="controlstatements.htm#BABHIAAC">4-3 Nested IF THEN ELSE Statements</a></li>
<li><a href="controlstatements.htm#BABGEHAI">4-4 IF THEN ELSIF Statement</a></li>
<li><a href="controlstatements.htm#BCGJGBEF">4-5 IF THEN ELSIF Statement Simulates Simple CASE Statement</a></li>
<li><a href="controlstatements.htm#BABCEEEI">4-6 Simple CASE Statement</a></li>
<li><a href="controlstatements.htm#CJAHCDFB">4-7 Searched CASE Statement</a></li>
<li><a href="controlstatements.htm#CJAEIEID">4-8 EXCEPTION Instead of ELSE Clause in CASE Statement</a></li>
<li><a href="controlstatements.htm#BABGDICE">4-9 Basic LOOP Statement with EXIT Statement</a></li>
<li><a href="controlstatements.htm#BABDGJDG">4-10 Basic LOOP Statement with EXIT WHEN Statement</a></li>
<li><a href="controlstatements.htm#BCGBGDFF">4-11 Nested, Labeled Basic LOOP Statements with EXIT WHEN Statements</a></li>
<li><a href="controlstatements.htm#CIHCGDHC">4-12 Nested, Unabeled Basic LOOP Statements with EXIT WHEN Statements</a></li>
<li><a href="controlstatements.htm#BABHCHIG">4-13 CONTINUE Statement in Basic LOOP Statement</a></li>
<li><a href="controlstatements.htm#BABHGEDC">4-14 CONTINUE WHEN Statement in Basic LOOP Statement</a></li>
<li><a href="controlstatements.htm#BABEFFDC">4-15 FOR LOOP Statements</a></li>
<li><a href="controlstatements.htm#BABGDDBJ">4-16 Reverse FOR LOOP Statements</a></li>
<li><a href="controlstatements.htm#BCGJHACI">4-17 Simulating STEP Clause in FOR LOOP Statement</a></li>
<li><a href="controlstatements.htm#BABEAEFI">4-18 FOR LOOP Statement Tries to Change Index Value</a></li>
<li><a href="controlstatements.htm#CJAGHDEI">4-19 Outside Statement References FOR LOOP Statement Index</a></li>
<li><a href="controlstatements.htm#CJAHEEJE">4-20 FOR LOOP Statement Index with Same Name as Variable</a></li>
<li><a href="controlstatements.htm#BABIIIDH">4-21 FOR LOOP Statement References Variable with Same Name as Index</a></li>
<li><a href="controlstatements.htm#BABIFDBA">4-22 Nested FOR LOOP Statements with Same Index Name</a></li>
<li><a href="controlstatements.htm#BABGFABI">4-23 FOR LOOP Statement Bounds</a></li>
<li><a href="controlstatements.htm#BABCGEIF">4-24 Specifying FOR LOOP Statement Bounds at Run Time</a></li>
<li><a href="controlstatements.htm#CIHGGFCG">4-25 EXIT WHEN Statement in FOR LOOP Statement</a></li>
<li><a href="controlstatements.htm#CIHBBDBF">4-26 EXIT WHEN Statement in Inner FOR LOOP Statement</a></li>
<li><a href="controlstatements.htm#CIHJDJIA">4-27 CONTINUE WHEN Statement in Inner FOR LOOP Statement</a></li>
<li><a href="controlstatements.htm#BABGGBCJ">4-28 WHILE LOOP Statements</a></li>
<li><a href="controlstatements.htm#BABDBCFF">4-29 GOTO Statement</a></li>
<li><a href="controlstatements.htm#CJAJGGAC">4-30 Incorrect Label Placement</a></li>
<li><a href="controlstatements.htm#BCGFGDAA">4-31 GOTO Statement Goes to Labeled NULL Statement</a></li>
<li><a href="controlstatements.htm#BABEAEJI">4-32 GOTO Statement Transfers Control to Enclosing Block</a></li>
<li><a href="controlstatements.htm#CJADEFJC">4-33 GOTO Statement Cannot Transfer Control into IF Statement</a></li>
<li><a href="controlstatements.htm#BCGFJJIG">4-34 NULL Statement Showing No Action</a></li>
<li><a href="controlstatements.htm#BABDHJDA">4-35 NULL Statement as Placeholder During Subprogram Creation</a></li>
<li><a href="controlstatements.htm#CJAFFFAB">4-36 NULL Statement in ELSE Clause of Simple CASE Statement</a></li>
<li><a href="composites.htm#BABHGFHJ">5-1 Associative Array Indexed by String</a></li>
<li><a href="composites.htm#BEIEBJJI">5-2 Function Returns Associative Array Indexed by PLS_INTEGER</a></li>
<li><a href="composites.htm#BABIBCCB">5-3 Declaring Associative Array Constant</a></li>
<li><a href="composites.htm#CIHFJAAD">5-4 Varray (Variable-Size Array)</a></li>
<li><a href="composites.htm#CIHCICAE">5-5 Nested Table of Local Type</a></li>
<li><a href="composites.htm#CIHDEIIG">5-6 Nested Table of Standalone Type</a></li>
<li><a href="composites.htm#CIHCBBJJ">5-7 Initializing Collection (Varray) Variable to Empty</a></li>
<li><a href="composites.htm#BABHBDJJ">5-8 Data Type Compatibility for Collection Assignment</a></li>
<li><a href="composites.htm#BABEFBBB">5-9 Assigning Null Value to Nested Table Variable</a></li>
<li><a href="composites.htm#BABFIDIG">5-10 Assigning Set Operation Results to Nested Table Variable</a></li>
<li><a href="composites.htm#BABHFDCF">5-11 Two-Dimensional Varray (Varray of Varrays)</a></li>
<li><a href="composites.htm#BABBHGFG">5-12 Nested Tables of Nested Tables and Varrays of Integers</a></li>
<li><a href="composites.htm#BABIBDDG">5-13 Nested Tables of Associative Arrays and Varrays of Strings</a></li>
<li><a href="composites.htm#CIHCGJIC">5-14 Comparing Varray and Nested Table Variables to NULL</a></li>
<li><a href="composites.htm#BABCBFHA">5-15 Comparing Nested Tables for Equality and Inequality</a></li>
<li><a href="composites.htm#BABCDABC">5-16 Comparing Nested Tables with SQL Multiset Conditions</a></li>
<li><a href="composites.htm#CIHJFHJE">5-17 DELETE Method with Nested Table</a></li>
<li><a href="composites.htm#CIHHFHFJ">5-18 DELETE Method with Associative Array Indexed by String</a></li>
<li><a href="composites.htm#BABHDBGC">5-19 TRIM Method with Nested Table</a></li>
<li><a href="composites.htm#BABBGAIB">5-20 EXTEND Method with Nested Table</a></li>
<li><a href="composites.htm#BABEDEGG">5-21 EXISTS Method with Nested Table</a></li>
<li><a href="composites.htm#CIHCAHDE">5-22 FIRST and LAST Values for Associative Array Indexed by PLS_INTEGER</a></li>
<li><a href="composites.htm#CIHFDDDJ">5-23 FIRST and LAST Values for Associative Array Indexed by String</a></li>
<li><a href="composites.htm#CIHHAEGC">5-24 Printing Varray with FIRST and LAST in FOR LOOP</a></li>
<li><a href="composites.htm#CIHGFDJA">5-25 Printing Nested Table with FIRST and LAST in FOR LOOP</a></li>
<li><a href="composites.htm#CIHIHFGI">5-26 COUNT and LAST Values for Varray</a></li>
<li><a href="composites.htm#BABHFIGG">5-27 COUNT and LAST Values for Nested Table</a></li>
<li><a href="composites.htm#BABFCAGJ">5-28 LIMIT and COUNT Values for Different Collection Types</a></li>
<li><a href="composites.htm#CIHHHICG">5-29 PRIOR and NEXT Methods</a></li>
<li><a href="composites.htm#BEIBJDBF">5-30 Printing Elements of Sparse Nested Table</a></li>
<li><a href="composites.htm#CHDIHDIJ">5-31 Identically Defined Package and Local Collection Types</a></li>
<li><a href="composites.htm#CIHBGBBH">5-32 Identically Defined Package and Standalone Collection Types</a></li>
<li><a href="composites.htm#BABCGFCE">5-33 Declaring Record Constant</a></li>
<li><a href="composites.htm#CIHHBIDA">5-34 RECORD Type Definition and Variable Declarations</a></li>
<li><a href="composites.htm#CIHEGIFD">5-35 RECORD Type with RECORD Field (Nested Record)</a></li>
<li><a href="composites.htm#CIHDJFDB">5-36 RECORD Type with Varray Field</a></li>
<li><a href="composites.htm#CIHFBIAF">5-37 Identically Defined Package and Local RECORD Types</a></li>
<li><a href="composites.htm#CIHJDGEJ">5-38 %ROWTYPE Variable Represents Full Database Table Row</a></li>
<li><a href="composites.htm#BEIBGEFH">5-39 %ROWTYPE Variable Does Not Inherit Initial Values or Constraints</a></li>
<li><a href="composites.htm#CBJCGDHB">5-40 %ROWTYPE Variable Represents Partial Database Table Row</a></li>
<li><a href="composites.htm#CIHIFJHG">5-41 %ROWTYPE Variable Represents Join Row</a></li>
<li><a href="composites.htm#BABEHIII">5-42 Inserting %ROWTYPE Record into Table (Wrong)</a></li>
<li><a href="composites.htm#BABECFBJ">5-43 Inserting %ROWTYPE Record into Table (Right)</a></li>
<li><a href="composites.htm#CIHDEIBG">5-44 Assigning Record to Another Record of Same RECORD Type</a></li>
<li><a href="composites.htm#CIHDGDHE">5-45 Assigning %ROWTYPE Record to RECORD Type Record</a></li>
<li><a href="composites.htm#BEIDCCBE">5-46 Assigning Nested Record to Another Record of Same RECORD Type</a></li>
<li><a href="composites.htm#CIHBFCAE">5-47 SELECT INTO Assigns Values to Record Variable</a></li>
<li><a href="composites.htm#BEIDDADJ">5-48 FETCH Assigns Values to Record that Function Returns</a></li>
<li><a href="composites.htm#BABHDGIG">5-49 UPDATE Statement Assigns Values to Record Variable</a></li>
<li><a href="composites.htm#BABHJAID">5-50 Assigning NULL to Record Variable</a></li>
<li><a href="composites.htm#CHDBEBEB">5-51 Initializing Table by Inserting Record of Default Values</a></li>
<li><a href="composites.htm#BABDGCDI">5-52 Updating Rows with Record</a></li>
<li><a href="static.htm#BABIEJGE">6-1 Static SQL Statements</a></li>
<li><a href="static.htm#BABDDFGI">6-2 CURRVAL and NEXTVAL Pseudocolumns</a></li>
<li><a href="static.htm#BABJGHAI">6-3 SQL%FOUND Implicit Cursor Attribute</a></li>
<li><a href="static.htm#BABJCAAG">6-4 SQL%ROWCOUNT Implicit Cursor Attribute</a></li>
<li><a href="static.htm#BABHICAF">6-5 Explicit Cursor Declaration and Definition</a></li>
<li><a href="static.htm#BABCFDJE">6-6 FETCH Statements Inside LOOP Statements</a></li>
<li><a href="static.htm#CJADGBJE">6-7 Fetching Same Explicit Cursor into Different Variables</a></li>
<li><a href="static.htm#CJAJAIFF">6-8 Variable in Explicit Cursor Query&mdash;No Result Set Change</a></li>
<li><a href="static.htm#BABCAAFB">6-9 Variable in Explicit Cursor Query&mdash;Result Set Change</a></li>
<li><a href="static.htm#CHDCEGIF">6-10 Explicit Cursor with Virtual Column that Needs Alias</a></li>
<li><a href="static.htm#BABHBHIC">6-11 Explicit Cursor that Accepts Parameters</a></li>
<li><a href="static.htm#BABHCIAC">6-12 Cursor Parameters with Default Values</a></li>
<li><a href="static.htm#BABCBJGC">6-13 Adding Formal Parameter to Existing Cursor</a></li>
<li><a href="static.htm#BABJHBGA">6-14 %ISOPEN Explicit Cursor Attribute</a></li>
<li><a href="static.htm#CJAEDJEE">6-15 %FOUND Explicit Cursor Attribute</a></li>
<li><a href="static.htm#CJAHDJIF">6-16 %NOTFOUND Explicit Cursor Attribute</a></li>
<li><a href="static.htm#CJAFIFIB">6-17 %ROWCOUNT Explicit Cursor Attribute</a></li>
<li><a href="static.htm#CHDBJBJE">6-18 Implicit Cursor FOR LOOP Statement</a></li>
<li><a href="static.htm#BABGJBEA">6-19 Explicit Cursor FOR LOOP Statement</a></li>
<li><a href="static.htm#i45976">6-20 Passing Parameters to Explicit Cursor FOR LOOP Statement</a></li>
<li><a href="static.htm#CJAIBIDJ">6-21 Cursor FOR Loop References Virtual Columns</a></li>
<li><a href="static.htm#CJABHDCB">6-22 Subquery in FROM Clause of Parent Query</a></li>
<li><a href="static.htm#BABCEJBA">6-23 Correlated Subquery</a></li>
<li><a href="static.htm#BABFHFHH">6-24 Cursor Variable Declarations</a></li>
<li><a href="static.htm#BABHIJGD">6-25 Cursor Variable with User-Defined Return Type</a></li>
<li><a href="static.htm#BABDJIFB">6-26 Fetching Data with Cursor Variables</a></li>
<li><a href="static.htm#BABGAICI">6-27 Fetching from Cursor Variable into Collections</a></li>
<li><a href="static.htm#BABCHEGG">6-28 Variable in Cursor Variable Query&mdash;No Result Set Change</a></li>
<li><a href="static.htm#BABIHIBA">6-29 Variable in Cursor Variable Query&mdash;Result Set Change</a></li>
<li><a href="static.htm#BABIIGAG">6-30 Procedure to Open Cursor Variable for One Query</a></li>
<li><a href="static.htm#BABFEJED">6-31 Opening Cursor Variable for Chosen Query (Same Return Type)</a></li>
<li><a href="static.htm#BABEJEII">6-32 Opening Cursor Variable for Chosen Query (Different Return Types)</a></li>
<li><a href="static.htm#CHDJEEFC">6-33 Cursor Variable as Host Variable in Pro*C Client Program</a></li>
<li><a href="static.htm#BABFGHDG">6-34 CURSOR Expression</a></li>
<li><a href="static.htm#CJAIDJID">6-35 COMMIT Statement with COMMENT and WRITE Clauses</a></li>
<li><a href="static.htm#CJACGAFD">6-36 ROLLBACK Statement</a></li>
<li><a href="static.htm#BABGAAIG">6-37 SAVEPOINT and ROLLBACK Statements</a></li>
<li><a href="static.htm#CJABIBIC">6-38 Reusing SAVEPOINT with ROLLBACK</a></li>
<li><a href="static.htm#BABJIHCC">6-39 SET TRANSACTION Statement in Read-Only Transaction</a></li>
<li><a href="static.htm#CHDGEHBF">6-40 FOR UPDATE Cursor in CURRENT OF Clause of UPDATE Statement</a></li>
<li><a href="static.htm#CHDGCCGC">6-41 SELECT FOR UPDATE Statement for Multiple Tables</a></li>
<li><a href="static.htm#CHDHIIAI">6-42 FETCH with FOR UPDATE Cursor After COMMIT Statement</a></li>
<li><a href="static.htm#CIHIJAAE">6-43 Simulating CURRENT OF Clause with ROWID Pseudocolumn</a></li>
<li><a href="static.htm#BABIIHBJ">6-44 Declaring Autonomous Function in Package</a></li>
<li><a href="static.htm#BABEECAF">6-45 Declaring Autonomous Standalone Procedure</a></li>
<li><a href="static.htm#BABIJEID">6-46 Declaring Autonomous PL/SQL Block</a></li>
<li><a href="static.htm#CJAICEDA">6-47 Autonomous Trigger Logs INSERT Statements</a></li>
<li><a href="static.htm#CHDFJBDA">6-48 Autonomous Trigger Uses Native Dynamic SQL for DDL</a></li>
<li><a href="static.htm#CJAIGCJF">6-49 Invoking Autonomous Function</a></li>
<li><a href="dynamic.htm#CHDIEFCJ">7-1 Invoking Subprogram from Dynamic PL/SQL Block</a></li>
<li><a href="dynamic.htm#BHCEJIDC">7-2 Unsupported Data Type in Native Dynamic SQL</a></li>
<li><a href="dynamic.htm#BHCBIICB">7-3 Uninitialized Variable Represents NULL in USING Clause</a></li>
<li><a href="dynamic.htm#BHCFDIAI">7-4 Native Dynamic SQL with OPEN FOR, FETCH, and CLOSE Statements</a></li>
<li><a href="dynamic.htm#CHDFHEAG">7-5 Repeated Placeholder Names in Dynamic PL/SQL Block</a></li>
<li><a href="dynamic.htm#g1777282">7-6 Switching from DBMS_SQL Package to Native Dynamic SQL</a></li>
<li><a href="dynamic.htm#BHCHJBHJ">7-7 Switching from Native Dynamic SQL to DBMS_SQL Package</a></li>
<li><a href="dynamic.htm#CHDBJCFF">7-8 Setup for SQL Injection Examples</a></li>
<li><a href="dynamic.htm#BJEJABIC">7-9 Procedure Vulnerable to Statement Modification</a></li>
<li><a href="dynamic.htm#BJEHHAFF">7-10 Procedure Vulnerable to Statement Injection</a></li>
<li><a href="dynamic.htm#CHDEIABG">7-11 Procedure Vulnerable to SQL Injection Through Data Type Conversion</a></li>
<li><a href="dynamic.htm#BJEIJEBJ">7-12 Bind Variables Guarding Against SQL Injection</a></li>
<li><a href="dynamic.htm#CHDGJEGD">7-13 Validation Checks Guarding Against SQL Injection</a></li>
<li><a href="dynamic.htm#CHDFIIEF">7-14 Explicit Format Models Guarding Against SQL Injection</a></li>
<li><a href="subprograms.htm#CHDBIEEE">8-1 Declaring, Defining, and Invoking a Simple PL/SQL Procedure</a></li>
<li><a href="subprograms.htm#CIHBEGEG">8-2 Declaring, Defining, and Invoking a Simple PL/SQL Function</a></li>
<li><a href="subprograms.htm#CIHEHEHB">8-3 Execution Resumes After RETURN Statement in Function</a></li>
<li><a href="subprograms.htm#CIHFDEBC">8-4 Function Where Not Every Execution Path Leads to RETURN Statement</a></li>
<li><a href="subprograms.htm#CIHDHIDD">8-5 Function Where Every Execution Path Leads to RETURN Statement</a></li>
<li><a href="subprograms.htm#CIHHFGDG">8-6 Execution Resumes After RETURN Statement in Procedure</a></li>
<li><a href="subprograms.htm#CIHGCFCC">8-7 Execution Resumes After RETURN Statement in Anonymous Block</a></li>
<li><a href="subprograms.htm#CHDGICCH">8-8 Nested Subprograms Invoke Each Other</a></li>
<li><a href="subprograms.htm#CIHJHJDE">8-9 Formal Parameters and Actual Parameters</a></li>
<li><a href="subprograms.htm#CJAJAHJD">8-10 Actual Parameter Inherits Only NOT NULL from Subtype</a></li>
<li><a href="subprograms.htm#CHDEGCDH">8-11 Actual Parameter and Return Value Inherit Only Range From Subtype</a></li>
<li><a href="subprograms.htm#CHDGIHAA">8-12 Function Implicitly Converts Formal Parameter to Constrained Subtype</a></li>
<li><a href="subprograms.htm#CIHFEEIJ">8-13 Avoiding Implicit Conversion of Actual Parameters</a></li>
<li><a href="subprograms.htm#g1170259">8-14 Parameter Values Before, During, and After Procedure Invocation</a></li>
<li><a href="subprograms.htm#CHDBGIHE">8-15 OUT and IN OUT Parameter Values After Unhandled Exception</a></li>
<li><a href="subprograms.htm#CHDBGJCE">8-16 OUT Formal Parameter of Record Type with Non-NULL Default Value</a></li>
<li><a href="subprograms.htm#CIHBCCHI">8-17 Aliasing from Global Variable as Actual Parameter</a></li>
<li><a href="subprograms.htm#CIHJIDAB">8-18 Aliasing from Same Actual Parameter for Multiple Formal Parameters</a></li>
<li><a href="subprograms.htm#CIHBIFGC">8-19 Aliasing from Cursor Variable Subprogram Parameters</a></li>
<li><a href="subprograms.htm#CIHICIAH">8-20 Procedure with Default Parameter Values</a></li>
<li><a href="subprograms.htm#g1782475">8-21 Function Provides Default Parameter Value</a></li>
<li><a href="subprograms.htm#CHDHECGF">8-22 Adding Subprogram Parameter Without Changing Existing Invocations</a></li>
<li><a href="subprograms.htm#CIHHBJDE">8-23 Equivalent Invocations with Different Notations in Anonymous Block</a></li>
<li><a href="subprograms.htm#CHDDBJGC">8-24 Equivalent Invocations with Different Notations in SELECT Statements</a></li>
<li><a href="subprograms.htm#CHDECFCH">8-25 Resolving PL/SQL Procedure Names</a></li>
<li><a href="subprograms.htm#CIHFCEBD">8-26 Overloaded Subprogram</a></li>
<li><a href="subprograms.htm#BABHJBBI">8-27 Overload Error Causes Compile-Time Error</a></li>
<li><a href="subprograms.htm#BABEHEGI">8-28 Overload Error Compiles Successfully</a></li>
<li><a href="subprograms.htm#BABEBCCA">8-29 Invoking Subprogram in Example 8-28 Causes Compile-Time Error</a></li>
<li><a href="subprograms.htm#CIHBEGCB">8-30 Correcting Overload Error in Example 8-28</a></li>
<li><a href="subprograms.htm#CIHEEDIJ">8-31 Invoking Subprogram in Example 8-30</a></li>
<li><a href="subprograms.htm#BABJDDCJ">8-32 Package Specification Without Overload Errors</a></li>
<li><a href="subprograms.htm#BABHCIFC">8-33 Improper Invocation of Properly Overloaded Subprogram</a></li>
<li><a href="subprograms.htm#CHDICIIG">8-34 Implicit Conversion of Parameters Causes Overload Error</a></li>
<li><a href="subprograms.htm#CHDGEBJC">8-35 Recursive Function Returns n Factorial (n!)</a></li>
<li><a href="subprograms.htm#CHDBEFAJ">8-36 Recursive Function Returns nth Fibonacci Number</a></li>
<li><a href="subprograms.htm#g3307801">8-37 Declaring and Defining Result-Cached Function</a></li>
<li><a href="subprograms.htm#g3299007">8-38 Result-Cached Function Returns Configuration Parameter Setting</a></li>
<li><a href="subprograms.htm#sthref713">8-39 Result-Cached Function Handles Session-Specific Settings</a></li>
<li><a href="subprograms.htm#g3297326">8-40 Result-Cached Function Handles Session-Specific Application Context</a></li>
<li><a href="subprograms.htm#BABDDJCD">8-41 Caching One Name at a Time (Finer Granularity)</a></li>
<li><a href="subprograms.htm#BABCDECH">8-42 Caching Translated Names One Language at a Time (Coarser Granularity)</a></li>
<li><a href="subprograms.htm#CIHJCCHH">8-43 ADT for Use in Any Schema</a></li>
<li><a href="subprograms.htm#CHDBCGGH">8-44 Invoking IR Instance Method</a></li>
<li><a href="subprograms.htm#CHDHHBGB">8-45 PL/SQL Anonymous Block Invokes External Procedure</a></li>
<li><a href="subprograms.htm#CHDFAGDA">8-46 PL/SQL Standalone Procedure Invokes External Procedure</a></li>
<li><a href="triggers.htm#CIHBCDJH">9-1 Trigger Uses Conditional Predicates to Detect Triggering Statement</a></li>
<li><a href="triggers.htm#BCFBDJEC">9-2 Trigger Logs Changes to EMPLOYEES.SALARY</a></li>
<li><a href="triggers.htm#CIHHEJCD">9-3 Conditional Trigger Prints Salary Change Information</a></li>
<li><a href="triggers.htm#BCFJDBEH">9-4 Trigger Modifies LOB Columns</a></li>
<li><a href="triggers.htm#BCFIAABG">9-5 Trigger with REFERENCING Clause</a></li>
<li><a href="triggers.htm#BCFFIBBA">9-6 Trigger References OBJECT_VALUE Pseudocolumn</a></li>
<li><a href="triggers.htm#CIHFGDJG">9-7 INSTEAD OF Trigger</a></li>
<li><a href="triggers.htm#CIHFBGDC">9-8 INSTEAD OF Trigger on Nested Table Column of View</a></li>
<li><a href="triggers.htm#CIHGJFAB">9-9 Compound Trigger Logs Changes to One Table in Another Table</a></li>
<li><a href="triggers.htm#CHDFGDAH">9-10 Compound Trigger Avoids Mutating-Table Error</a></li>
<li><a href="triggers.htm#BCFGAHIB">9-11 Foreign Key Trigger for Child Table</a></li>
<li><a href="triggers.htm#BCFCCBAF">9-12 UPDATE and DELETE RESTRICT Trigger for Parent Table</a></li>
<li><a href="triggers.htm#BCFBGFDJ">9-13 UPDATE and DELETE SET NULL Trigger for Parent Table</a></li>
<li><a href="triggers.htm#BCFHHHBD">9-14 DELETE CASCADE Trigger for Parent Table</a></li>
<li><a href="triggers.htm#BCFDBJDA">9-15 UPDATE CASCADE Trigger for Parent Table</a></li>
<li><a href="triggers.htm#BCFECGBI">9-16 Trigger Checks Complex Constraints</a></li>
<li><a href="triggers.htm#BCFGEBAA">9-17 Trigger Enforces Security Authorizations</a></li>
<li><a href="triggers.htm#BCFDEHHE">9-18 Trigger Derives New Column Values</a></li>
<li><a href="triggers.htm#CIHFGGEH">9-19 BEFORE Statement Trigger on Sample Schema HR</a></li>
<li><a href="triggers.htm#CIHEBJDD">9-20 AFTER Statement Trigger on Database</a></li>
<li><a href="triggers.htm#CIHEFABC">9-21 Trigger Monitors Logons</a></li>
<li><a href="triggers.htm#CIHGIHFA">9-22 INSTEAD OF CREATE Trigger on Schema</a></li>
<li><a href="triggers.htm#CIHGEEIC">9-23 Trigger Invokes Java Subprogram</a></li>
<li><a href="triggers.htm#BCFDBDJH">9-24 Trigger Cannot Handle Exception if Remote Database is Unavailable</a></li>
<li><a href="triggers.htm#BCFEHHDA">9-25 Workaround for Example 9-24</a></li>
<li><a href="triggers.htm#BCFHJBBE">9-26 Trigger Causes Mutating-Table Error</a></li>
<li><a href="triggers.htm#BCFEFDIA">9-27 Update Cascade</a></li>
<li><a href="triggers.htm#BCFHCBGE">9-28 Viewing Information About Triggers</a></li>
<li><a href="packages.htm#CIHEJJHJ">10-1 Simple Package Specification</a></li>
<li><a href="packages.htm#BABDFGED">10-2 Passing Associative Array to Standalone Subprogram</a></li>
<li><a href="packages.htm#CJAGEFEB">10-3 Matching Package Specification and Body</a></li>
<li><a href="packages.htm#BABBIBDC">10-4 Creating SERIALLY_REUSABLE Packages</a></li>
<li><a href="packages.htm#BABFAFDC">10-5 Effect of SERIALLY_REUSABLE Pragma</a></li>
<li><a href="packages.htm#BABHACDC">10-6 Cursor in SERIALLY_REUSABLE Package Open at Call Boundary</a></li>
<li><a href="packages.htm#CIHFBJCG">10-7 Separating Cursor Declaration and Definition in Package</a></li>
<li><a href="packages.htm#CJAIICFE">10-8 Creating emp_admin Package</a></li>
<li><a href="errors.htm#CHDIDDFJ">11-1 Setting Value of PLSQL_WARNINGS Compilation Parameter</a></li>
<li><a href="errors.htm#BABDGEJA">11-2 Displaying and Setting PLSQL_WARNINGS with DBMS_WARNING Subprograms</a></li>
<li><a href="errors.htm#BABFBHGA">11-3 Single Exception Handler for Multiple Exceptions</a></li>
<li><a href="errors.htm#BCFCFBDD">11-4 Locator Variables for Statements that Share Exception Handler</a></li>
<li><a href="errors.htm#BABBDJAB">11-5 Naming Internally Defined Exception</a></li>
<li><a href="errors.htm#BABCBAEE">11-6 Anonymous Block Handles ZERO_DIVIDE</a></li>
<li><a href="errors.htm#CHDIFEDH">11-7 Anonymous Block Avoids ZERO_DIVIDE</a></li>
<li><a href="errors.htm#BABCGABI">11-8 Redeclared Predefined Identifier</a></li>
<li><a href="errors.htm#BABBCBII">11-9 Declaring, Raising, and Handling User-Defined Exception</a></li>
<li><a href="errors.htm#BABHAIAI">11-10 Explicitly Raising Predefined Exception</a></li>
<li><a href="errors.htm#BABJBBHG">11-11 Reraising Exception</a></li>
<li><a href="errors.htm#BABIHIBC">11-12 Raising User-Defined Exception with RAISE_APPLICATION_ERROR</a></li>
<li><a href="errors.htm#BABIIGCJ">11-13 Exception that Propagates Beyond Scope is Handled</a></li>
<li><a href="errors.htm#BABDJCDH">11-14 Exception that Propagates Beyond Scope is Not Handled</a></li>
<li><a href="errors.htm#BABBIACC">11-15 Exception Raised in Declaration is Not Handled</a></li>
<li><a href="errors.htm#BABFDAJH">11-16 Exception Raised in Declaration is Handled by Enclosing Block</a></li>
<li><a href="errors.htm#BABHJJAF">11-17 Exception Raised in Exception Handler is Not Handled</a></li>
<li><a href="errors.htm#BABDJDGH">11-18 Exception Raised in Exception Handler is Handled by Invoker</a></li>
<li><a href="errors.htm#BABHBEGA">11-19 Exception Raised in Exception Handler is Handled by Enclosing Block</a></li>
<li><a href="errors.htm#BABEGCDH">11-20 Exception Raised in Exception Handler is Not Handled</a></li>
<li><a href="errors.htm#BABDIHFC">11-21 Exception Raised in Exception Handler is Handled by Enclosing Block</a></li>
<li><a href="errors.htm#CJAJBAJG">11-22 Displaying SQLCODE and SQLERRM Values</a></li>
<li><a href="errors.htm#CHDGAJIF">11-23 Exception Handler Runs and Execution Ends</a></li>
<li><a href="errors.htm#BABJCEEC">11-24 Exception Handler Runs and Execution Continues</a></li>
<li><a href="errors.htm#BABGHCEH">11-25 Retrying Transaction After Handling Exception</a></li>
<li><a href="tuning.htm#CHDBGJDJ">12-1 Specifying that Subprogram Is To Be Inlined</a></li>
<li><a href="tuning.htm#CHDIJCGI">12-2 Specifying that Overloaded Subprogram Is To Be Inlined</a></li>
<li><a href="tuning.htm#CHDGAGBH">12-3 Specifying that Subprogram Is Not To Be Inlined</a></li>
<li><a href="tuning.htm#CHDJCIEJ">12-4 PRAGMA INLINE ... 'NO' Overrides PRAGMA INLINE ... 'YES'</a></li>
<li><a href="tuning.htm#BABFCFDB">12-5 Nested Query Improves Performance</a></li>
<li><a href="tuning.htm#BABDDAFG">12-6 NOCOPY Subprogram Parameters</a></li>
<li><a href="tuning.htm#BABBCECH">12-7 DELETE Statement in FOR LOOP Statement</a></li>
<li><a href="tuning.htm#BABDBAAJ">12-8 DELETE Statement in FORALL Statement</a></li>
<li><a href="tuning.htm#BABEDFJE">12-9 Time Difference for INSERT Statement in FOR LOOP and FORALL Statements</a></li>
<li><a href="tuning.htm#BABIIEEI">12-10 FORALL Statement for Subset of Collection</a></li>
<li><a href="tuning.htm#BABJCEFE">12-11 FORALL Statements for Sparse Collection and Its Subsets</a></li>
<li><a href="tuning.htm#BABBBJCF">12-12 Handling FORALL Exceptions Immediately</a></li>
<li><a href="tuning.htm#BABGBABA">12-13 Handling FORALL Exceptions After FORALL Statement Completes</a></li>
<li><a href="tuning.htm#BABDJBDH">12-14 Showing Number of Rows Affected by Each DELETE in FORALL</a></li>
<li><a href="tuning.htm#BABICGJE">12-15 Showing Number of Rows Affected by Each INSERT SELECT in FORALL</a></li>
<li><a href="tuning.htm#BABJCBGD">12-16 Bulk-Selecting Two Database Columns into Two Nested Tables</a></li>
<li><a href="tuning.htm#CIHGGBGF">12-17 Bulk-Selecting into Nested Table of Records</a></li>
<li><a href="tuning.htm#BABGIGII">12-18 SELECT BULK COLLECT INTO Statement with Unexpected Results</a></li>
<li><a href="tuning.htm#BABCEEDG">12-19 Cursor Workaround for Example 12-18</a></li>
<li><a href="tuning.htm#BABGHCAJ">12-20 Second Collection Workaround for Example 12-18</a></li>
<li><a href="tuning.htm#BCGFEDDI">12-21 Limiting Bulk Selection with ROWNUM and SAMPLE</a></li>
<li><a href="tuning.htm#BABCCJCB">12-22 Bulk-Fetching into Two Nested Tables</a></li>
<li><a href="tuning.htm#CIHBDHIB">12-23 Bulk-Fetching into Nested Table of Records</a></li>
<li><a href="tuning.htm#BABJIAFH">12-24 Limiting Bulk FETCH with LIMIT</a></li>
<li><a href="tuning.htm#BABHDFDE">12-25 Returning Deleted Rows in Two Nested Tables</a></li>
<li><a href="tuning.htm#BABEJHDE">12-26 DELETE with RETURN BULK COLLECT INTO in FORALL Statement</a></li>
<li><a href="tuning.htm#BABDCEBE">12-27 DELETE with RETURN BULK COLLECT INTO in FOR LOOP Statement</a></li>
<li><a href="tuning.htm#BABJFFFB">12-28 Anonymous Block Bulk-Binds Input Host Array</a></li>
<li><a href="tuning.htm#BABDGCDH">12-29 Creating and Invoking Pipelined Table Function</a></li>
<li><a href="tuning.htm#BABIEICA">12-30 Pipelined Table Function Transforms Each Row to Two Rows</a></li>
<li><a href="tuning.htm#BABFHAIG">12-31 Fetching from Results of Pipelined Table Functions</a></li>
<li><a href="tuning.htm#BABEIAIG">12-32 Pipelined Table Function with Two Cursor Variable Parameters</a></li>
<li><a href="tuning.htm#BABEEIHA">12-33 Pipelined Table Function as Aggregate Function</a></li>
<li><a href="tuning.htm#CHDEEGJD">12-34 Pipelined Table Function Does Not Handle NO_DATA_NEEDED</a></li>
<li><a href="tuning.htm#CHDIAFFB">12-35 Pipelined Table Function Handles NO_DATA_NEEDED</a></li>
<li><a href="wrap.htm#CEGCHAJJ">A-1 SQL File with Two Wrappable PL/SQL Units</a></li>
<li><a href="wrap.htm#CEGGEEFH">A-2 Wrapping File with PL/SQL Wrapper Utility</a></li>
<li><a href="wrap.htm#CEGGHABG">A-3 Running Wrapped File and Viewing Wrapped PL/SQL Units</a></li>
<li><a href="wrap.htm#CEGJGBGE">A-4 Creating Wrapped Package Body with CREATE_WRAPPED Procedure</a></li>
<li><a href="wrap.htm#CEGICAJG">A-5 Viewing Package with Wrapped Body and Invoking Package Procedure</a></li>
<li><a href="nameresolution.htm#CHDBCGDB">B-1 Qualified Names</a></li>
<li><a href="nameresolution.htm#CBJCHFHC">B-2 Variable Name Interpreted as Column Name Causes Unintended Result</a></li>
<li><a href="nameresolution.htm#BABJJEBG">B-3 Fixing Example B-2 with Different Variable Name</a></li>
<li><a href="nameresolution.htm#BABGGJJG">B-4 Fixing Example B-2 with Block Label</a></li>
<li><a href="nameresolution.htm#BEIFDBJD">B-5 Subprogram Name for Name Resolution</a></li>
<li><a href="nameresolution.htm#BABGHDAJ">B-6 Inner Capture of Column Reference</a></li>
<li><a href="nameresolution.htm#BABGIFBD">B-7 Inner Capture of Attribute Reference</a></li>
<li><a href="nameresolution.htm#BABFBEBJ">B-8 Qualifying ADT Attribute References</a></li>
<li><a href="nameresolution.htm#BABICCCJ">B-9 Qualifying References to Row Expressions</a></li>
</ul>
</div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="lof.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
