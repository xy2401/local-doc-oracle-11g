<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Overview of PL/SQL</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:55Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="whatsnew.htm" title="Previous" type="text/html" />
<link rel="Next" href="fundamentals.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">8/99</span> <!-- End Header -->
<div id="LNPLS001" class="chapter"><a id="CEGGFECE"></a>
<h1 class="chapter"><span class="secnum">1</span> Overview of PL/SQL</h1>
<p>PL/SQL, the Oracle procedural extension of SQL, is a portable, high-performance transaction-processing language. This chapter explains its advantages and briefly describes its main features and its architecture.</p>
<p class="subhead2"><a id="LNPLS140"></a>Topics</p>
<ul>
<li>
<p><a href="#i9141">Advantages of PL/SQL</a></p>
</li>
<li>
<p><a href="#i8854">Main Features of PL/SQL</a></p>
</li>
<li>
<p><a href="#i4603">Architecture of PL/SQL</a></p>
</li>
</ul>
<a id="i9141"></a>
<div id="LNPLS00101" class="sect1"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages" -->
<h2 class="sect1">Advantages of PL/SQL</h2>
<p><a id="sthref6"></a>PL/SQL has these advantages:</p>
<ul>
<li>
<p><a href="#CJAGBBAD">Tight Integration with SQL</a></p>
</li>
<li>
<p><a href="#CJAHAGEF">High Performance</a></p>
</li>
<li>
<p><a href="#CJABDHHJ">High Productivity</a></p>
</li>
<li>
<p><a href="#CJADFBDD">Portability</a></p>
</li>
<li>
<p><a href="#CJADJAAG">Scalability</a></p>
</li>
<li>
<p><a href="#CJAJBCDA">Manageability</a></p>
</li>
<li>
<p><a href="#CJAFFJDB">Support for Object-Oriented Programming</a></p>
</li>
<li>
<p><a href="#CIHDJJDI">Support for Developing Web Applications</a></p>
</li>
<li>
<p><a href="#CIHFHCCA">Support for Developing Server Pages</a></p>
</li>
</ul>
<a id="CJAGBBAD"></a>
<div id="LNPLS128" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages integration" -->
<h3 class="sect2">Tight Integration with SQL</h3>
<p><a id="sthref7"></a><a id="sthref8"></a>PL/SQL is tightly integrated with SQL, the most widely used database manipulation language. For example:</p>
<ul>
<li>
<p>PL/SQL lets you use all SQL data manipulation, cursor control, and transaction control statements, and all SQL functions, operators, and pseudocolumns.</p>
</li>
<li>
<p>PL/SQL fully supports SQL data types.</p>
<p>You need not convert between PL/SQL and SQL data types. For example, if your PL/SQL program retrieves a value from a column of the SQL type <code dir="ltr">VARCHAR2</code>, it can store that value in a PL/SQL variable of the type <code dir="ltr">VARCHAR2</code>.</p>
<p>You can give a PL/SQL data item the data type of a column or row of a database table without explicitly specifying that data type (see <a href="#g12611">"%TYPE Attribute"</a> and <a href="#g12629">"%ROWTYPE Attribute"</a>).</p>
</li>
<li>
<p>PL/SQL lets you run a SQL query and process the rows of the result set one at a time (see <a href="#g12862">"Processing a Query Result Set One Row at a Time"</a>).</p>
</li>
</ul>
<p>PL/SQL supports both static and dynamic SQL. <span class="bold">Static SQL</span> is SQL whose full text is known at compilation time. <span class="bold">Dynamic SQL</span> is SQL whose full text is not known until run time. Dynamic SQL lets you make your applications more flexible and versatile. For more information, see <a href="static.htm#BABGEDAE">Chapter 6, "PL/SQL Static SQL"</a> and <a href="dynamic.htm#CACDDACH">Chapter 7, "PL/SQL Dynamic SQL"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CJAHAGEF"></a>
<div id="LNPLS129" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages performance" -->
<h3 class="sect2">High Performance</h3>
<p><a id="sthref9"></a>PL/SQL lets you send a block of statements to the database, significantly reducing traffic between the application and the database.</p>
<p class="subhead2"><a id="LNPLS142"></a>Bind Variables</p>
<p>When you embed a SQL <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, <code dir="ltr">MERGE</code>, or <code dir="ltr">SELECT</code> statement directly in your PL/SQL code, the PL/SQL compiler turns the variables in the <code dir="ltr">WHERE</code> and <code dir="ltr">VALUES</code> clauses into bind variables (for details, see <a href="nameresolution.htm#BABDCBJD">"Resolution of Names in Static SQL Statements"</a>). Oracle Database can reuse these SQL statements each time the same code runs, which improves performance.</p>
<p>PL/SQL does not create bind variables automatically when you use dynamic SQL, but you can use them with dynamic SQL by specifying them explicitly (for details, see <a href="dynamic.htm#BHCEBBAI">"EXECUTE IMMEDIATE Statement"</a>).</p>
<p class="subhead2"><a id="LNPLS146"></a>Subprograms</p>
<p>PL/SQL subprograms are stored in executable form, which can be invoked repeatedly. Because stored subprograms run in the database server, a single invocation over the network can start a large job. This division of work reduces network traffic and improves response times. Stored subprograms are cached and shared among users, which lowers memory requirements and invocation overhead. For more information about subprograms, see <a href="#g1461293">"Subprograms"</a>.</p>
<p class="subhead2"><a id="LNPLS147"></a>Optimizer</p>
<p>The PL/SQL compiler has an optimizer that can rearrange code for better performance. For more information about the optimizer, see <a href="tuning.htm#i53930">"PL/SQL Optimizer"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CJABDHHJ"></a>
<div id="LNPLS131" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages productivity" -->
<h3 class="sect2">High Productivity</h3>
<p><a id="sthref10"></a>PL/SQL lets you write compact code for manipulating data. Just as a scripting language like PERL can read, transform, and write data in files, PL/SQL can query, transform, and update data in a database.</p>
<p>PL/SQL has many features that save designing and debugging time, and it is the same in all environments. If you learn to use PL/SQL with one Oracle tool, you can transfer your knowledge to other Oracle tools. For example, you can create a PL/SQL block in SQL&nbsp;Developer and then use it in an Oracle Forms trigger. For an overview of PL/SQL features, see <a href="#i8854">"Main Features of PL/SQL"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CJADFBDD"></a>
<div id="LNPLS132" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages portability" -->
<h3 class="sect2">Portability</h3>
<p><a id="sthref11"></a><a id="sthref12"></a>You can run PL/SQL applications on any operating system and platform where Oracle Database runs.</p>
</div>
<!-- class="sect2" -->
<a id="CJADJAAG"></a>
<div id="LNPLS133" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Scalability</h3>
<p><a id="sthref13"></a><a id="sthref14"></a>PL/SQL stored subprograms increase scalability by centralizing application processing on the database server. The shared memory facilities of the shared server let Oracle Database support thousands of concurrent users on a single node. For more information about subprograms, see <a href="#g1461293">"Subprograms"</a>.</p>
<p>For further scalability, you can use Oracle Connection Manager to multiplex network connections. For information about Oracle Connection Manager, see <a class="olink NETRF002" href="../../network.112/e10835/cmctl.htm#NETRF002"><span class="italic">Oracle Database Net Services Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="CJAJBCDA"></a>
<div id="LNPLS134" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Manageability</h3>
<p><a id="sthref15"></a><a id="sthref16"></a>PL/SQL stored subprograms increase manageability because you can maintain only one copy of a subprogram, on the database server, rather than one copy on each client system. Any number of applications can use the subprograms, and you can change the subprograms without affecting the applications that invoke them. For more information about subprograms, see <a href="#g1461293">"Subprograms"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CJAFFJDB"></a>
<div id="LNPLS137" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview advantages objects" -->
<h3 class="sect2">Support for Object-Oriented Programming</h3>
<p>PL/SQL supports object-oriented programming with <a href="#BABJCCAI">"Abstract Data Types"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CIHDJJDI"></a>
<div id="LNPLS00211" class="sect2">
<h3 class="sect2">Support for Developing Web Applications</h3>
<p>PL/SQL lets you create applications that generate web pages directly from the database, allowing you to make your database available on the Web and make back-office data accessible on the intranet.</p>
<p>The program flow of a PL/SQL Web application is similar to that in a CGI PERL script. Developers often use CGI scripts to produce web pages dynamically, but such scripts are often not optimal for accessing the database. Delivering Web content with PL/SQL stored subprograms provides the power and flexibility of database processing. For example, you can use DML statements, dynamic SQL, and cursors. You also eliminate the process overhead of forking a new CGI process to handle each HTTP request.</p>
<p>You can implement a Web browser-based application entirely in PL/SQL with PL/SQL Gateway and the PL/SQL Web Toolkit.</p>
<p>PL/SQL Gateway lets a Web browser invoke a PL/SQL stored subprogram through an HTTP listener. <code dir="ltr">mod_plsql</code>, one implementation of the PL/SQL Gateway, is a plug-in of Oracle HTTP Server and lets Web browsers invoke PL/SQL stored subprograms.</p>
<p>PL/SQL Web Toolkit is a set of PL/SQL packages that provides a generic interface to use stored subprograms invoked by <code dir="ltr">mod_plsql</code> at run time. For information about packages, see <a href="#BABFHIEE">"Packages"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS015" href="../../appdev.112/e41502/adfns_web.htm#ADFNS015"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about developing PL/SQL Web applications</div>
</div>
<!-- class="sect2" -->
<a id="CIHFHCCA"></a>
<div id="LNPLS99980" class="sect2">
<h3 class="sect2">Support for Developing Server Pages</h3>
<p>PL/SQL Server Pages (PSPs) let you develop web pages with dynamic content. PSPs are an alternative to coding a stored subprogram that writes the HTML code for a web page one line at a time.</p>
<p>Special tags let you embed PL/SQL scripts into HTML source text. The scripts run when Web clients, such as browsers, request the pages. A script can accept parameters, query or update the database, and then display a customized page showing the results.</p>
<p>During development, PSPs can act like templates, with a static part for page layout and a dynamic part for content. You can design the layouts using your favorite HTML authoring tools, leaving placeholders for the dynamic content. Then, you can write the PL/SQL scripts that generate the content. When finished, you simply load the resulting PSP files into the database as stored subprograms.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS016" href="../../appdev.112/e41502/adfns_psp.htm#ADFNS016"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about developing PSPs</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i8854"></a>
<div id="LNPLS00102" class="sect1"><!-- infolevel="all" infotype="Concept" infolabel="overview features" -->
<h2 class="sect1">Main Features of PL/SQL</h2>
<p><a id="sthref17"></a>PL/SQL combines the data-manipulating power of SQL with the processing power of procedural languages.</p>
<p>When you can solve a problem with SQL, you can issue SQL statements from your PL/SQL program, without learning new APIs.</p>
<p>Like other procedural programming languages, PL/SQL lets you declare constants and variables, control program flow, define subprograms, and trap runtime errors.</p>
<p>You can break complex problems into easily understandable subprograms, which you can reuse in multiple applications.</p>
<p class="subhead2"><a id="LNPLS148"></a>Topics</p>
<ul>
<li>
<p><a href="#g12979">Error Handling</a></p>
</li>
<li>
<p><a href="#i8859">Blocks</a></p>
</li>
<li>
<p><a href="#g12828">Variables and Constants</a></p>
</li>
<li>
<p><a href="#g1461293">Subprograms</a></p>
</li>
<li>
<p><a href="#BABFHIEE">Packages</a></p>
</li>
<li>
<p><a href="#g12758">Triggers</a></p>
</li>
<li>
<p><a href="#CBJGHHBG">Input and Output</a></p>
</li>
<li>
<p><a href="#g12947">Data Abstraction</a></p>
</li>
<li>
<p><a href="#i7369">Control Statements</a></p>
</li>
<li>
<p><a href="#g1115615">Conditional Compilation</a></p>
</li>
<li>
<p><a href="#g12862">Processing a Query Result Set One Row at a Time</a></p>
</li>
</ul>
<a id="g12979"></a>
<div id="LNPLS143" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features error handling" -->
<h3 class="sect2">Error Handling</h3>
<p>PL/SQL makes it easy to detect and handle errors. When an error occurs, PL/SQL raises an exception. Normal execution stops and control transfers to the exception-handling part of the PL/SQL block. You do not have to check every operation to ensure that it succeeded, as in a C program. For more information, see <a href="errors.htm#CHDFGBJI">Chapter 11, "PL/SQL Error Handling"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i8859"></a>
<div id="LNPLS141" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features block structure" -->
<h3 class="sect2">Blocks</h3>
<p>The basic unit of a PL/SQL source program is the <a id="sthref18"></a><span class="bold">block</span>, which groups related declarations and statements.</p>
<p>A PL/SQL block is defined by the keywords <code dir="ltr">DECLARE</code>, <code dir="ltr">BEGIN</code>, <code dir="ltr">EXCEPTION</code>, and <code dir="ltr">END</code>. These keywords divide the block into a declarative part, an executable part, and an exception-handling part. Only the executable part is required. A block can have a label.</p>
<p><a href="#BABDHBBA">Example 1-1</a> shows the basic structure of a PL/SQL block. For syntax details, see <a href="block.htm#i32791">"Block"</a>.</p>
<div id="LNPLS149" class="example">
<p class="titleinexample"><a id="BABDHBBA"></a>Example 1-1 PL/SQL Block Structure</p>
<pre dir="ltr">
&lt;&lt; label &gt;&gt; (optional)
DECLARE    -- Declarative part (optional)
  -- Declarations of local types, variables, &amp; subprograms

BEGIN      -- Executable part (required)
  -- Statements (which can use items declared in declarative part)

[EXCEPTION -- Exception-handling part (optional)
  -- Exception handlers for exceptions (errors) raised in executable part]
END;
</pre></div>
<!-- class="example" -->
<p>Declarations are local to the block and cease to exist when the block completes execution, helping to avoid cluttered namespaces for variables and subprograms.</p>
<p>Blocks can be nested: Because a block is an executable statement, it can appear in another block wherever an executable statement is allowed.</p>
<p>You can submit a block to an interactive tool (such as SQL*Plus or Enterprise Manager) or embed it in an Oracle Precompiler or OCI program. The interactive tool or program runs the block one time. The block is not stored in the database, and for that reason, it is called an <a id="sthref19"></a><span class="bold">anonymous block</span> (even if it has a label).</p>
<p>An anonymous block is compiled each time it is loaded into memory, and its compilation has three stages:</p>
<ol>
<li>
<p>Syntax checking: PL/SQL syntax is checked, and a parse tree is generated.</p>
</li>
<li>
<p>Semantic checking: Type checking and further processing on the parse tree.</p>
</li>
<li>
<p>Code generation</p>
</li>
</ol>
<div class="infobox-note">
<p class="notep1">Note:</p>
An anonymous block is a SQL statement.</div>
</div>
<!-- class="sect2" -->
<a id="g12828"></a>
<div id="LNPLS145" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features variables constants" -->
<h3 class="sect2">Variables and Constants</h3>
<p>PL/SQL lets you declare variables and constants, and then use them wherever you can use an expression. As the program runs, the values of variables can change, but the values of constants cannot. For more information, see <a href="fundamentals.htm#i27306">"Declarations"</a> and <a href="fundamentals.htm#i16001">"Assigning Values to Variables"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="g1461293"></a>
<div id="LNPLS174" class="sect2"><!-- infolevel="all" infotype="General" infolabel="overview features subprograms" -->
<h3 class="sect2">Subprograms</h3>
<p>A PL/SQL <span class="bold">subprogram</span> is a named PL/SQL block that can be invoked repeatedly. If the subprogram has parameters, their values can differ for each invocation. PL/SQL has two types of subprograms, procedures and functions. A function returns a result. For more information about PL/SQL subprograms, see <a href="subprograms.htm#CHDBEJGF">Chapter 8, "PL/SQL Subprograms."</a></p>
<p>PL/SQL also lets you invoke external programs written in other languages. For more information, see <a href="subprograms.htm#i17145">"External Subprograms"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="BABFHIEE"></a>
<div id="LNPLS181" class="sect2">
<h3 class="sect2">Packages</h3>
<p>A <span class="bold">package</span> is a schema object that groups logically related PL/SQL types, variables, constants, subprograms, cursors, and exceptions. A package is compiled and stored in the database, where many applications can share its contents. You can think of a package as an application.</p>
<p>You can write your own packages&mdash;for details, see <a href="packages.htm#CIHIJECJ">Chapter 10, "PL/SQL Packages."</a> You can also use the many product-specific packages that Oracle Database supplies. For information about these, see <a class="olink ARPLS" href="../e40758/toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</div>
<!-- class="sect2" -->
<a id="g12758"></a>
<div id="LNPLS179" class="sect2">
<h3 class="sect2">Triggers</h3>
<p>A <span class="bold">trigger</span> is a named PL/SQL unit that is stored in the database and run in response to an event that occurs in the database. You can specify the event, whether the trigger fires before or after the event, and whether the trigger runs for each event or for each row affected by the event. For example, you can create a trigger that runs every time an <code dir="ltr">INSERT</code> statement affects the <code dir="ltr">EMPLOYEES</code> table.</p>
<p>For more information about triggers, see <a href="triggers.htm#g1043102">Chapter 9, "PL/SQL Triggers."</a></p>
</div>
<!-- class="sect2" -->
<a id="CBJGHHBG"></a>
<div id="LNPLS144" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features input output data" -->
<h3 class="sect2">Input and Output</h3>
<p>Most PL/SQL <a id="sthref20"></a>input and <a id="sthref21"></a>output (I/O) is done with SQL statements that store data in database tables or query those tables. For information about SQL statements, see <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p>All other PL/SQL I/O is done with PL/SQL packages that Oracle Database supplies, which <a href="#CJACADID">Table 1-1</a> summarizes.</p>
<div id="LNPLS152" class="tblformal">
<p class="titleintable"><a id="sthref22"></a><a id="CJACADID"></a>Table 1-1 PL/SQL I/O-Processing Packages</p>
<table class="cellalignment1092" title="PL/SQL I/O-Processing Packages" summary="This table summarizes the packages that implement the PL/SQL APIs for processing I/O. The first column lists the names of the packages, the second column briefly describes each package, and the third column has a link to the complete documentation for the package." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t5">Package</th>
<th class="cellalignment1090" id="r1c2-t5">Description</th>
<th class="cellalignment1090" id="r1c3-t5">More Information</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DBMS_OUTPUT</code></p>
</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c2-t5">
<p>Lets PL/SQL blocks, subprograms, packages, and triggers display output. Especially useful for displaying PL/SQL debugging information.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c3-t5">
<p><a class="olink ARPLS036" href="../../appdev.112/e40758/d_output.htm#ARPLS036"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t5" headers="r1c1-t5">
<p><code dir="ltr">HTF</code></p>
</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c2-t5">
<p>Has hypertext functions that generate HTML tags (for example, the <code dir="ltr">HTF</code>.<code dir="ltr">ANCHOR</code> function generates the HTML anchor tag <code dir="ltr">&lt;A&gt;</code>).</p>
</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c3-t5">
<p><a class="olink ARPLS390" href="../../appdev.112/e40758/w_htf.htm#ARPLS390"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t5" headers="r1c1-t5">
<p><code dir="ltr">HTP</code></p>
</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c2-t5">
<p>Has hypertext procedures that generate HTML tags.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c3-t5">
<p><a class="olink ARPLS391" href="../../appdev.112/e40758/w_htp.htm#ARPLS391"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t5" headers="r1c1-t5">
<p><code dir="ltr">DBMS_PIPE</code></p>
</td>
<td class="cellalignment1091" headers="r5c1-t5 r1c2-t5">
<p>Lets two or more sessions in the same instance communicate.</p>
</td>
<td class="cellalignment1091" headers="r5c1-t5 r1c3-t5">
<p><a class="olink ARPLS038" href="../../appdev.112/e40758/d_pipe.htm#ARPLS038"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t5" headers="r1c1-t5">
<p><code dir="ltr">UTL_FILE</code></p>
</td>
<td class="cellalignment1091" headers="r6c1-t5 r1c2-t5">
<p>Lets PL/SQL programs read and write operating system files.</p>
</td>
<td class="cellalignment1091" headers="r6c1-t5 r1c3-t5">
<p><a class="olink ARPLS069" href="../../appdev.112/e40758/u_file.htm#ARPLS069"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t5" headers="r1c1-t5">
<p><code dir="ltr">UTL_HTTP</code></p>
</td>
<td class="cellalignment1091" headers="r7c1-t5 r1c2-t5">
<p>Lets PL/SQL programs make Hypertext Transfer Protocol (HTTP) callouts, and access data on the Internet over HTTP.</p>
</td>
<td class="cellalignment1091" headers="r7c1-t5 r1c3-t5">
<p><a class="olink ARPLS070" href="../../appdev.112/e40758/u_http.htm#ARPLS070"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t5" headers="r1c1-t5">
<p><code dir="ltr">UTL_SMTP</code></p>
</td>
<td class="cellalignment1091" headers="r8c1-t5 r1c2-t5">
<p>Sends electronic mails (emails) over Simple Mail Transfer Protocol (SMTP) as specified by RFC821.</p>
</td>
<td class="cellalignment1091" headers="r8c1-t5 r1c3-t5">
<p><a class="olink ARPLS074" href="../../appdev.112/e40758/u_smtp.htm#ARPLS074"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>To display output passed to <code dir="ltr">DBMS_OUTPUT</code>, you need another program, such as SQL*Plus. To see <code dir="ltr">DBMS_OUTPUT</code> output with SQL*Plus, you must first issue the SQL*Plus command <code dir="ltr">SET</code> <code dir="ltr">SERVEROUTPUT</code> <code dir="ltr">ON</code>.</p>
<p>Some subprograms in the packages in <a href="#CJACADID">Table 1-1</a> can both accept input and display output, but they cannot accept data directly from the keyboard. To accept data directly from the keyboard, use the SQL*Plus commands <code dir="ltr">PROMPT</code> and <code dir="ltr">ACCEPT</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink SQPUG099" href="../../server.112/e16604/ch_twelve040.htm#SQPUG099"><span class="italic">SQL*Plus User's Guide and Reference</span></a> for information about the SQL*Plus command <code dir="ltr">SET</code> <code dir="ltr">SERVEROUTPUT</code> <code dir="ltr">ON</code></p>
</li>
<li>
<p><a class="olink SQPUG052" href="../../server.112/e16604/ch_twelve032.htm#SQPUG052"><span class="italic">SQL*Plus User's Guide and Reference</span></a> for information about the SQL*Plus command <code dir="ltr">PROMPT</code></p>
</li>
<li>
<p><a class="olink SQPUG026" href="../../server.112/e16604/ch_twelve005.htm#SQPUG026"><span class="italic">SQL*Plus User's Guide and Reference</span></a> for information about the SQL*Plus command <code dir="ltr">ACCEPT</code></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="g12947"></a>
<div id="LNPLS154" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features data abstraction" -->
<h3 class="sect2">Data Abstraction</h3>
<p><a id="sthref23"></a>Data abstraction lets you work with the essential properties of data without being too involved with details. You can design a data structure first, and then design algorithms that manipulate it.</p>
<p class="subhead2"><a id="LNPLS153"></a>Topics</p>
<ul>
<li>
<p><a href="#BABHIDEG">Cursors</a></p>
</li>
<li>
<p><a href="#CJAGEBCI">Composite Variables</a></p>
</li>
<li>
<p><a href="#g12629">%ROWTYPE Attribute</a></p>
</li>
<li>
<p><a href="#g12611">%TYPE Attribute</a></p>
</li>
<li>
<p><a href="#BABJCCAI">Abstract Data Types</a></p>
</li>
</ul>
<a id="BABHIDEG"></a>
<div id="LNPLS155" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Cursors</h4>
<p>A <span class="bold">cursor</span> is a pointer to a private SQL area that stores information about processing a specific SQL statement or PL/SQL <code dir="ltr">SELECT</code> <code dir="ltr">INTO</code> statement. You can use the cursor to retrieve the rows of the result set one at a time. You can use cursor attributes to get information about the state of the cursor&mdash;for example, how many rows the statement has affected so far. For more information about cursors, see <a href="static.htm#BABDHAED">"Cursors"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="CJAGEBCI"></a>
<div id="LNPLS158" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Composite Variables</h4>
<p>A <span class="bold">composite variable</span> has internal components, which you can access individually. You can pass entire composite variables to subprograms as parameters. PL/SQL has two kinds of composite variables, collections and records.</p>
<p>In a <span class="bold">collection</span>, the internal components are always of the same data type, and are called <span class="bold">elements</span>. You access each element by its unique index. Lists and arrays are classic examples of collections.</p>
<p>In a <span class="bold">record</span>, the internal components can be of different data types, and are called <span class="bold">fields</span>. You access each field by its name. A record variable can hold a table row, or some columns from a table row.</p>
<p>For more information about composite variables, see <a href="composites.htm#CIHIEBJC">Chapter 5, "PL/SQL Collections and Records."</a></p>
</div>
<!-- class="sect3" -->
<a id="g12629"></a>
<div id="LNPLS157" class="sect3">
<h4 class="sect3">%ROWTYPE Attribute</h4>
<p>The <code dir="ltr">%ROWTYPE</code> attribute lets you declare a record that represents either a full or partial row of a database table or view. For every column of the full or partial row, the record has a field with the same name and data type. If the structure of the row changes, then the structure of the record changes accordingly. For more information about <code dir="ltr">%ROWTYPE</code>, see <a href="composites.htm#i6079">"%ROWTYPE Attribute"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="g12611"></a>
<div id="LNPLS156" class="sect3">
<h4 class="sect3">%TYPE Attribute</h4>
<p>The <code dir="ltr">%TYPE</code> attribute lets you declare a data item of the same data type as a previously declared variable or column (without knowing what that type is). If the declaration of the referenced item changes, then the declaration of the referencing item changes accordingly. The <code dir="ltr">%TYPE</code> attribute is particularly useful when declaring variables to hold database values. For more information about <code dir="ltr">%TYPE</code>, see <a href="fundamentals.htm#i6080">"%TYPE Attribute"</a>.</p>
</div>
<!-- class="sect3" -->
<a id="BABJCCAI"></a>
<div id="LNPLS163" class="sect3">
<h4 class="sect3">Abstract Data Types</h4>
<p>An <span class="bold"><a id="sthref24"></a>Abstract Data Type (ADT)</span> consists of a data structure and subprograms that manipulate the data. The variables that form the data structure are called <span class="bold">attributes</span>. The subprograms that manipulate the attributes are called <span class="bold">methods</span>.</p>
<p>ADTs are stored in the database. Instances of ADTs can be stored in tables and used as PL/SQL variables.</p>
<p>ADTs let you reduce complexity by separating a large system into logical components, which you can reuse.</p>
<p>In the static data dictionary view <code dir="ltr">*_OBJECTS</code>, the <code dir="ltr">OBJECT_TYPE</code> of an ADT is <code dir="ltr">TYPE</code>. In the static data dictionary view <code dir="ltr">*_TYPES</code>, the <code dir="ltr">TYPECODE</code> of an ADT is <code dir="ltr">OBJECT</code>.</p>
<p>For more information about ADTs, see <a href="create_type.htm#BABHJHEB">"CREATE TYPE Statement"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
ADTs are also called <span class="bold">user-defined types</span> and <span class="bold">object types</span>.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a> for information about ADTs</div>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i7369"></a>
<div id="LNPLS165" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features control structures" -->
<h3 class="sect2">Control Statements</h3>
<p>Control statements are the most important PL/SQL extension to SQL.</p>
<p>PL/SQL has three categories of control statements:</p>
<ul>
<li>
<p><span class="bold">Conditional selection statements</span>, which let you run different statements for different data values.</p>
<p>For more information, see <a href="controlstatements.htm#i2866">"Conditional Selection Statements"</a>.</p>
</li>
<li>
<p><span class="bold">Loop statements</span>, which let you repeat the same statements with a series of different data values.</p>
<p>For more information, see <a href="controlstatements.htm#i8296">"LOOP Statements"</a>.</p>
</li>
<li>
<p><span class="bold">Sequential control statements</span>, which allow you to go to a specified, labeled statement, or to do nothing.</p>
<p>For more information, see <a href="controlstatements.htm#i2909">"Sequential Control Statements"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="g1115615"></a>
<div id="LNPLS184" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features conditional compilation" -->
<h3 class="sect2">Conditional Compilation</h3>
<p>Conditional compilation lets you customize the functionality in a PL/SQL application without removing source text. For example, you can:</p>
<ul>
<li>
<p>Use new features with the latest database release, and disable them when running the application in an older database release.</p>
</li>
<li>
<p>Activate debugging or tracing statements in the development environment, and hide them when running the application at a production site.</p>
</li>
</ul>
<p>For more information, see <a href="fundamentals.htm#BABIHIHF">"Conditional Compilation"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="g12862"></a>
<div id="LNPLS185" class="sect2"><!-- infolevel="all" infotype="Concept" infolabel="overview features queries" -->
<h3 class="sect2">Processing a Query Result Set One Row at a Time</h3>
<p>PL/SQL lets you issue a SQL query and process the rows of the result set one at a time. You can use a basic loop, as in <a href="#BABCFJII">Example 1-2</a>, or you can control the process precisely by using individual statements to run the query, retrieve the results, and finish processing.</p>
<div id="LNPLS186" class="example">
<p class="titleinexample"><a id="BABCFJII"></a>Example 1-2 Processing Query Result Rows One at a Time</p>
<pre dir="ltr">
BEGIN
  FOR someone IN (
    SELECT * FROM employees
    WHERE employee_id &lt; 120
    ORDER BY employee_id
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE('First name = ' || someone.first_name ||
                         ', Last name = ' || someone.last_name);
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
First name = Steven, Last name = King
First name = Neena, Last name = Kochhar
First name = Lex, Last name = De Haan
First name = Alexander, Last name = Hunold
First name = Bruce, Last name = Ernst
First name = David, Last name = Austin
First name = Valli, Last name = Pataballa
First name = Diana, Last name = Lorentz
First name = Nancy, Last name = Greenberg
First name = Daniel, Last name = Faviet
First name = John, Last name = Chen
First name = Ismael, Last name = Sciarra
First name = Jose Manuel, Last name = Urman
First name = Luis, Last name = Popp
First name = Den, Last name = Raphaely
First name = Alexander, Last name = Khoo
First name = Shelli, Last name = Baida
First name = Sigal, Last name = Tobias
First name = Guy, Last name = Himuro
First name = Karen, Last name = Colmenares
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i4603"></a>
<div id="LNPLS00103" class="sect1"><!-- infolevel="all" infotype="Concept" infolabel="overview architecture" -->
<h2 class="sect1">Architecture of PL/SQL</h2>
<p class="subhead2"><a id="LNPLS159"></a><a id="sthref25"></a><a id="sthref26"></a>Topics</p>
<ul>
<li>
<p><a href="#BABGEABB">PL/SQL Engine</a></p>
</li>
<li>
<p><a href="#BABBDFJF">PL/SQL Units and Compilation Parameters</a></p>
</li>
</ul>
<a id="BABGEABB"></a>
<div id="LNPLS00104" class="sect2">
<h3 class="sect2">PL/SQL Engine</h3>
<p><a id="sthref27"></a><a id="sthref28"></a>The PL/SQL compilation and runtime system is an engine that compiles and runs PL/SQL units. The engine can be installed in the database or in an application development tool, such as Oracle Forms.</p>
<p>In either environment, the PL/SQL engine accepts as input any valid PL/SQL unit. The engine runs procedural statements, but sends SQL statements to the SQL engine in the database, as shown in <a href="#i6945">Figure 1-1</a>.</p>
<div id="LNPLS187" class="figure">
<p class="titleinfigure"><a id="i6945"></a>Figure 1-1 PL/SQL Engine</p>
<img width="410" height="279" src="img/lnpls004.gif" alt="Description of Figure 1-1 follows" /><br />
<a id="sthref29" href="img_text/lnpls004.htm">Description of "Figure 1-1 PL/SQL Engine"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Typically, the database processes PL/SQL units.</p>
<p>When an application development tool processes PL/SQL units, it passes them to its local PL/SQL engine. If a PL/SQL unit contains no SQL statements, the local engine processes the entire PL/SQL unit. This is useful if the application development tool can benefit from conditional and iterative control.</p>
<p>For example, Oracle Forms applications frequently use SQL statements to test the values of field entries and do simple computations. By using PL/SQL instead of SQL, these applications can avoid calls to the database.</p>
</div>
<!-- class="sect2" -->
<a id="BABBDFJF"></a>
<div id="LNPLS0121" class="sect2">
<h3 class="sect2">PL/SQL Units and Compilation Parameters</h3>
<p>A <a id="sthref30"></a>PL/SQL unit is one of these:</p>
<ul>
<li>
<p>PL/SQL anonymous block</p>
</li>
<li>
<p><code dir="ltr">FUNCTION</code></p>
</li>
<li>
<p><code dir="ltr">LIBRARY</code></p>
</li>
<li>
<p><code dir="ltr">PACKAGE</code></p>
</li>
<li>
<p><code dir="ltr">PACKAGE</code> <code dir="ltr">BODY</code></p>
</li>
<li>
<p><code dir="ltr">PROCEDURE</code></p>
</li>
<li>
<p><code dir="ltr">TRIGGER</code></p>
</li>
<li>
<p><code dir="ltr">TYPE</code></p>
</li>
<li>
<p><code dir="ltr">TYPE</code> <code dir="ltr">BODY</code></p>
</li>
</ul>
<p>PL/SQL units are affected by <a id="sthref31"></a>PL/SQL compilation parameters (a category of database <a id="sthref32"></a><a id="sthref33"></a>initialization parameters). Different PL/SQL units&mdash;for example, a package specification and its body&mdash;can have different compilation parameter settings.</p>
<p><a href="#g3260498">Table 1-2</a> summarizes the PL/SQL compilation parameters. To display the values of these parameters for specified or all PL/SQL units, query the static data dictionary view <code dir="ltr">ALL_PLSQL_OBJECT_SETTINGS</code>. For information about this view, see <a class="olink REFRN20385" href="../../server.112/e40402/statviews_2009.htm#REFRN20385"><span class="italic">Oracle Database Reference</span></a>.</p>
<div id="LNPLS188" class="tblformal">
<p class="titleintable"><a id="sthref34"></a><a id="g3260498"></a>Table 1-2 PL/SQL Compilation Parameters</p>
<table class="cellalignment1092" title="PL/SQL Compilation Parameters" summary="This table summarizes the initialization parameters for PL/SQL compilation." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t9">Parameter</th>
<th class="cellalignment1090" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10271" href="../../server.112/e40402/initparams194.htm#REFRN10271"><code dir="ltr">PLSCOPE_SETTINGS</code></a></p>
</td>
<td class="cellalignment1091" headers="r2c1-t9 r1c2-t9">
<p>Controls the compile-time collection, cross-reference, and storage of PL/SQL source text identifier data. Used by the PL/Scope tool (see <a class="olink ADFNS022" href="../../appdev.112/e41502/adfns_plscope.htm#ADFNS022"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a>).</p>
<p>For more information about <code dir="ltr">PLSCOPE_SETTINGS</code>, see <a class="olink REFRN10271" href="../../server.112/e40402/initparams194.htm#REFRN10271"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10261" href="../../server.112/e40402/initparams195.htm#REFRN10261"><code dir="ltr">PLSQL_CCFLAGS</code></a></p>
</td>
<td class="cellalignment1091" headers="r3c1-t9 r1c2-t9">
<p>Lets you control conditional compilation of each PL/SQL unit independently.</p>
<p>For more information about <code dir="ltr">PLSQL_CCFLAGS</code>, see <a href="fundamentals.htm#CHDEDHAF">"How Conditional Compilation Works"</a> and <a class="olink REFRN10261" href="../../server.112/e40402/initparams195.htm#REFRN10261"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10253" href="../../server.112/e40402/initparams196.htm#REFRN10253"><code dir="ltr">PLSQL_CODE_TYPE</code></a></p>
</td>
<td class="cellalignment1091" headers="r4c1-t9 r1c2-t9">
<p>Specifies the compilation mode for PL/SQL units&mdash;<code dir="ltr">INTERPRETED</code> (the default) or <code dir="ltr">NATIVE</code>. For information about which mode to use, see <a href="tuning.htm#BABIBCBE">"Determining Whether to Use PL/SQL Native Compilation"</a>.</p>
<p>If the optimization level (set by <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code>) is less than 2:</p>
<ul>
<li>
<p>The compiler generates interpreted code, regardless of <code dir="ltr">PLSQL_CODE_TYPE</code>.</p>
</li>
<li>
<p>If you specify <code dir="ltr">NATIVE</code>, the compiler warns you that <code dir="ltr">NATIVE</code> was ignored.</p>
</li>
</ul>
<p>For more information about <code dir="ltr">PLSQL_CODE_TYPE</code>, see <a class="olink REFRN10253" href="../../server.112/e40402/initparams196.htm#REFRN10253"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10255" href="../../server.112/e40402/initparams198.htm#REFRN10255"><code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code></a></p>
</td>
<td class="cellalignment1091" headers="r5c1-t9 r1c2-t9">
<p>Specifies the optimization level at which to compile PL/SQL units (the higher the level, the more optimizations the compiler tries to make).</p>
<p><code dir="ltr">PLSQL_OPTIMIZE_LEVEL=1</code> instructs the PL/SQL compiler to generate and store code for use by the PL/SQL debugger.</p>
<p>For more information about <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code>, see <a href="tuning.htm#i53930">"PL/SQL Optimizer"</a> and <a class="olink REFRN10254" href="../../server.112/e40402/initparams197.htm#REFRN10254"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10249" href="../../server.112/e40402/initparams200.htm#REFRN10249"><code dir="ltr">PLSQL_WARNINGS</code></a></p>
</td>
<td class="cellalignment1091" headers="r6c1-t9 r1c2-t9">
<p>Enables or disables the reporting of warning messages by the PL/SQL compiler, and specifies which warning messages to show as errors.</p>
<p>For more information about <code dir="ltr">PLSQL_WARNINGS</code>, see <a href="errors.htm#i9084">"Compile-Time Warnings"</a> and <a class="olink REFRN10249" href="../../server.112/e40402/initparams200.htm#REFRN10249"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r7c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10124" href="../../server.112/e40402/initparams152.htm#REFRN10124"><code dir="ltr">NLS_LENGTH_SEMANTICS</code></a></p>
</td>
<td class="cellalignment1091" headers="r7c1-t9 r1c2-t9">
<p>Lets you create <code dir="ltr">CHAR</code> and <code dir="ltr">VARCHAR2</code> columns using either byte-length or character-length semantics.</p>
<p>For more information about byte and character length semantics, see <a href="datatypes.htm#CIHGBBIG">"CHAR and VARCHAR2 Variables"</a>.</p>
<p>For more information about <code dir="ltr">NLS_LENGTH_SEMANTICS</code>, see <a class="olink REFRN10124" href="../../server.112/e40402/initparams152.htm#REFRN10124"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r8c1-t9" headers="r1c1-t9">
<p><a class="olink REFRN10317" href="../../server.112/e40402/initparams192.htm#REFRN10317"><code dir="ltr">PERMIT_92_WRAP_FORMAT</code></a></p>
</td>
<td class="cellalignment1091" headers="r8c1-t9 r1c2-t9">
<p>Specifies whether the 11.2 PL/SQL compiler can use wrapped packages that were compiled with the 9.2 PL/SQL compiler. The default value is <code dir="ltr">TRUE</code>.</p>
<p>For more information about wrapped packages, see <a href="wrap.htm#BABEFEJF">Appendix A, "PL/SQL Source Text Wrapping."</a></p>
<p>For more information about <code dir="ltr">PERMIT_92_WRAP_FORMAT</code>, see <a class="olink REFRN10317" href="../../server.112/e40402/initparams192.htm#REFRN10317"><span class="italic">Oracle Database Reference</span></a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The compiler parameter <code dir="ltr">PLSQL_DEBUG</code>, which specifies whether to compile PL/SQL units for debugging, is deprecated. To compile PL/SQL units for debugging, specify <code dir="ltr">PLSQL_OPTIMIZE_LEVEL=1</code>.</div>
<p>The compile-time values of the parameters in <a href="#g3260498">Table 1-2</a> are stored with the metadata of each stored PL/SQL unit, which means that you can reuse those values when you explicitly recompile the unit. (A <a id="sthref35"></a><span class="bold">stored PL/SQL unit</span> is created with one of the <a href="sqlstatements.htm#BABBEFJD">"CREATE [OR REPLACE] Statements"</a>. An anonymous block is not a stored PL/SQL unit.)</p>
<p>To explicitly recompile a stored PL/SQL unit and reuse its parameter values, you must use an <code dir="ltr">ALTER</code> statement with both the <code dir="ltr">COMPILE</code> clause and the <a id="sthref36"></a><code dir="ltr">REUSE</code> <code dir="ltr">SETTINGS</code> clause. For more information about <code dir="ltr">REUSE</code> <code dir="ltr">SETTINGS</code>, see <a href="alter_function.htm#BGBHCICA">"<span class="italic">compiler_parameters_clause</span>"</a>. (All <code dir="ltr">ALTER</code> statements have this clause. For a list of <code dir="ltr">ALTER</code> statements, see <a href="sqlstatements.htm#BABEFIJF">"ALTER Statements"</a>.)</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="whatsnew.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="fundamentals.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
