<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Subprograms</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:57Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="dynamic.htm" title="Previous" type="text/html" />
<link rel="Next" href="triggers.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/99</span> <!-- End Header -->
<div id="LNPLS008" class="chapter"><a id="CHDBEJGF"></a>
<h1 class="chapter"><span class="secnum">8</span> PL/SQL Subprograms</h1>
<p>A PL/SQL <a id="sthref660"></a><span class="bold">subprogram</span> is a named PL/SQL block that can be invoked repeatedly. If the subprogram has parameters, their values can differ for each invocation.</p>
<p>A subprogram is either a procedure or a function. Typically, you use a procedure to perform an action and a function to compute and return a value.</p>
<p class="subhead2"><a id="LNPLS539"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHHJEDF">Reasons to Use Subprograms</a></p>
</li>
<li>
<p><a href="#CIHCBDHB">Nested, Package, and Standalone Subprograms</a></p>
</li>
<li>
<p><a href="#CIHCHAGG">Subprogram Invocations</a></p>
</li>
<li>
<p><a href="#CHDDCFHD">Subprogram Parts</a></p>
</li>
<li>
<p><a href="#CIHIAEDF">Forward Declaration</a></p>
</li>
<li>
<p><a href="#i23202">Subprogram Parameters</a></p>
</li>
<li>
<p><a href="#i17794">Subprogram Invocation Resolution</a></p>
</li>
<li>
<p><a href="#i12352">Overloaded Subprograms</a></p>
</li>
<li>
<p><a href="#i2884">Recursive Subprograms</a></p>
</li>
<li>
<p><a href="#i22204">Subprogram Side Effects</a></p>
</li>
<li>
<p><a href="#BABFHACJ">PL/SQL Function Result Cache</a></p>
</li>
<li>
<p><a href="#CHDJJCEC">PL/SQL Functions that SQL Statements Can Invoke</a></p>
</li>
<li>
<p><a href="#i18574">Invoker's Rights and Definer's Rights (AUTHID Property)</a></p>
</li>
<li>
<p><a href="#i17145">External Subprograms</a></p>
</li>
</ul>
<a id="CIHHJEDF"></a>
<div id="LNPLS99900" class="sect1">
<h2 class="sect1">Reasons to Use Subprograms</h2>
<p>Subprograms support the development and maintenance of reliable, reusable code with the following features:</p>
<ul>
<li>
<p><span class="bold">Modularity</span></p>
<p>Subprograms let you break a program into manageable, well-defined modules.</p>
</li>
<li>
<p><span class="bold">Easier Application Design</span></p>
<p>When designing an application, you can defer the implementation details of the subprograms until you have tested the main program, and then refine them one step at a time. (To define a subprogram without implementation details, use the <code dir="ltr">NULL</code> statement, as in <a href="controlstatements.htm#BABDHJDA">Example 4-35</a>.)</p>
</li>
<li>
<p><span class="bold">Maintainability</span></p>
<p>You can change the implementation details of a subprogram without changing its invokers.</p>
</li>
<li>
<p><span class="bold">Packageability</span></p>
<p>Subprograms can be grouped into packages, whose advantages are explained in <a href="packages.htm#i2408">"Reasons to Use Packages"</a>.</p>
</li>
<li>
<p><span class="bold">Reusability</span></p>
<p>Any number of applications, in many different environments, can use the same package subprogram or standalone subprogram.</p>
</li>
<li>
<p><span class="bold">Better Performance</span></p>
<p>Each subprogram is compiled and stored in executable form, which can be invoked repeatedly. Because stored subprograms run in the database server, a single invocation over the network can start a large job. This division of work reduces network traffic and improves response times. Stored subprograms are cached and shared among users, which lowers memory requirements and invocation overhead.</p>
</li>
</ul>
<p>Subprograms are an important component of other maintainability features, such as packages (explained in <a href="packages.htm#CIHIJECJ">Chapter 10, "PL/SQL Packages"</a>) and Abstract Data Types (explained in <a href="overview.htm#BABJCCAI">"Abstract Data Types"</a>).</p>
</div>
<!-- class="sect1" -->
<a id="CIHCBDHB"></a>
<div id="LNPLS99899" class="sect1">
<h2 class="sect1">Nested, Package, and Standalone Subprograms</h2>
<p>You can create a subprogram either inside a PL/SQL block (which can be another subprogram), inside a package, or at schema level.</p>
<p>A subprogram created inside a PL/SQL block is a <a id="sthref661"></a><span class="bold">nested subprogram</span>. You can either <a id="sthref662"></a>declare and define it at the same time, or you can declare it first and then define it later in the same block (see <a href="#CIHIAEDF">"Forward Declaration"</a>). A nested subprogram is stored in the database only if it is nested in a standalone or package subprogram.</p>
<p>A subprogram created inside a package is a <a id="sthref663"></a><span class="bold">package subprogram</span>. You declare it in the package specification and define it in the package body. It is stored in the database until you drop the package. (Packages are described in <a href="packages.htm#CIHIJECJ">Chapter 10, "PL/SQL Packages."</a>)</p>
<p>A subprogram created at schema level is a <a id="sthref664"></a><span class="bold">standalone subprogram</span>. You create it with the <code dir="ltr">CREATE</code> <code dir="ltr">PROCEDURE</code> or <code dir="ltr">CREATE</code> <code dir="ltr">FUNCTION</code> statement. It is stored in the database until you drop it with the <code dir="ltr">DROP</code> <code dir="ltr">PROCEDURE</code> or <code dir="ltr">DROP</code> <code dir="ltr">FUNCTION</code> statement. (These statements are described in <a href="sqlstatements.htm#CIHBEABD">Chapter 14, "SQL Statements for Stored PL/SQL Units."</a>)</p>
<p>A <a id="sthref665"></a><span class="bold">stored subprogram</span> is either a package subprogram or a standalone subprogram.</p>
<p>When you create a standalone subprogram or package, you can specify the <code dir="ltr">AUTHID</code> property, which affects the name resolution and privilege checking of SQL statements that the subprogram issues at run time. For more information, see <a href="#i18574">"Invoker's Rights and Definer's Rights (AUTHID Property)"</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHCHAGG"></a>
<div id="LNPLS99901" class="sect1">
<h2 class="sect1">Subprogram Invocations</h2>
<p>A <a id="sthref666"></a>subprogram invocation has this form:</p>
<pre dir="ltr">
<span class="italic">subprogram_name</span> [ ( [ <span class="italic">parameter</span> [, <span class="italic">parameter</span>]... ] ) ]
</pre>
<p>If the subprogram has no parameters, or specifies a default value for every parameter, you can either omit the parameter list or specify an empty parameter list.</p>
<p>A <a id="sthref667"></a>procedure invocation is a PL/SQL statement. For example:</p>
<pre dir="ltr">
raise_salary(employee_id, amount);
</pre>
<p>A <a id="sthref668"></a>function invocation is an expression. For example:</p>
<pre dir="ltr">
new_salary := get_salary(employee_id);
IF salary_ok(new_salary, new_title) THEN ...
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i23202">"Subprogram Parameters"</a> for more information about specifying parameters in subprogram invocations</div>
</div>
<!-- class="sect1" -->
<a id="CHDDCFHD"></a>
<div id="LNPLS653" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Subprogram Parts</h2>
<p>A subprogram begins with a <span class="bold">subprogram heading</span>, which specifies its name and (optionally) its parameter list.</p>
<p>Like an anonymous block, a subprogram has these parts:</p>
<ul>
<li>
<p><span class="bold">Declarative part (optional)</span></p>
<p>This part declares and defines local types, cursors, constants, variables, exceptions, and nested subprograms. These items cease to exist when the subprogram completes execution.</p>
<p>This part can also specify pragmas (described in <a href="fundamentals.htm#CIHDDJCC">"Pragmas"</a>).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The declarative part of a subprogram does not begin with the keyword <code dir="ltr">DECLARE</code>, as the declarative part of an anonymous block does.</div>
</li>
<li>
<p><span class="bold">Executable part (required)</span></p>
<p>This part contains one or more statements that assign values, control execution, and manipulate data. (Early in the application design process, this part might contain only a <code dir="ltr">NULL</code> statement, as in <a href="controlstatements.htm#BABDHJDA">Example 4-35</a>.)</p>
</li>
<li>
<p><span class="bold">Exception-handling part (optional)</span></p>
<p>This part contains code that handles runtime errors.</p>
</li>
</ul>
<p>In <a href="#CHDBIEEE">Example 8-1</a>, an anonymous block simultaneously declares and defines a procedure and invokes it three times. The third invocation raises the exception that the exception-handling part of the procedure handles.</p>
<div id="LNPLS654" class="example">
<p class="titleinexample"><a id="CHDBIEEE"></a>Example 8-1 Declaring, Defining, and Invoking a Simple PL/SQL Procedure</p>
<pre dir="ltr">
DECLARE
  first_name employees.first_name%TYPE;
  last_name  employees.last_name%TYPE;
  email      employees.email%TYPE;
  employer   VARCHAR2(8) := 'AcmeCorp';
 
  <span class="bold">-- Declare and define procedure</span>
 
  PROCEDURE create_email (  <span class="bold">-- Subprogram heading begins</span>
    name1   VARCHAR2,
    name2   VARCHAR2,
    company VARCHAR2
  )                         <span class="bold">-- Subprogram heading ends</span>
  IS
                            <span class="bold">-- Declarative part begins</span>
    error_message VARCHAR2(30) := 'Email address is too long.';
  BEGIN                     <span class="bold">-- Executable part begins</span>
    email := name1 || '.' || name2 || '@' || company;
  EXCEPTION                      <span class="bold">-- Exception-handling part begins</span>
    WHEN VALUE_ERROR THEN
      DBMS_OUTPUT.PUT_LINE(error_message);
  END create_email;
 
BEGIN
  first_name := 'John';
  last_name  := 'Doe';
 
  create_email(first_name, last_name, employer);  <span class="bold">-- invocation</span>
  DBMS_OUTPUT.PUT_LINE ('With first name first, email is: ' || email);
 
  create_email(last_name, first_name, employer);  <span class="bold">-- invocation</span>
  DBMS_OUTPUT.PUT_LINE ('With last name first, email is: ' || email);
 
  first_name := 'Elizabeth';
  last_name  := 'MacDonald';
  create_email(first_name, last_name, employer);  <span class="bold">-- invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
With first name first, email is: John.Doe@AcmeCorp
With last name first, email is: Doe.John@AcmeCorp
Email address is too long.
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="LNPLS540"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHGHIAE">Additional Parts for Functions</a></p>
</li>
<li>
<p><a href="#CIHCJFCF">RETURN Statement</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="procedure.htm#i35564">"Procedure Declaration and Definition"</a> for the syntax of procedure declarations and definitions</p>
</li>
<li>
<p><a href="#i23202">"Subprogram Parameters"</a> for more information about subprogram parameters</p>
</li>
</ul>
</div>
<a id="CIHGHIAE"></a>
<div id="LNPLS99898" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Additional Parts for Functions</h3>
<p>A <a id="sthref669"></a>function has the same structure as a <a id="sthref670"></a>procedure, except that:</p>
<ul>
<li>
<p>A function heading must include a <a id="sthref671"></a><code dir="ltr"><span class="codeinlinebold">RETURN</span></code> <span class="bold">clause</span>, which specifies the data type of the value that the function returns. (A procedure heading cannot have a <code dir="ltr">RETURN</code> clause.)</p>
</li>
<li>
<p>In the executable part of a function, every execution path must lead to a <code dir="ltr"><span class="codeinlinebold">RETURN</span></code> <span class="bold">statement</span>. Otherwise, the PL/SQL compiler issues a compile-time warning. (In a procedure, the <code dir="ltr">RETURN</code> statement is optional and not recommended. For details, see <a href="#CIHCJFCF">"RETURN Statement"</a>.)</p>
</li>
<li>
<p>Only a <a id="sthref672"></a>function heading can include these options:</p>
</li>
</ul>
<div class="inftblinformal">
<table class="cellalignment1089" title="This table lists (in the first column) and describes (in the second column) the syntax items that only functions have. Procedures do not have these items." summary="This table summarizes subprogram types in terms of their clauses, statements, and options." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t5">Option</th>
<th class="cellalignment1090" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t5" headers="r1c1-t5"><code dir="ltr">DETERMINISTIC</code> option</td>
<td class="cellalignment1091" headers="r2c1-t5 r1c2-t5">Helps the optimizer avoid redundant function invocations.</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t5" headers="r1c1-t5"><code dir="ltr">PARALLEL_ENABLE</code> option</td>
<td class="cellalignment1091" headers="r3c1-t5 r1c2-t5">Enables the function for parallel execution, making it safe for use in slave sessions of parallel DML evaluations.</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t5" headers="r1c1-t5"><code dir="ltr">PIPELINED</code> option</td>
<td class="cellalignment1091" headers="r4c1-t5 r1c2-t5">Makes a table function pipelined, for use as a row source.</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t5" headers="r1c1-t5"><code dir="ltr">RESULT_CACHE</code> option</td>
<td class="cellalignment1091" headers="r5c1-t5 r1c2-t5">Stores function results in the PL/SQL function result cache (appears only in declaration).</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t5" headers="r1c1-t5"><code dir="ltr">RESULT_CACHE</code> clause</td>
<td class="cellalignment1091" headers="r6c1-t5 r1c2-t5">Stores function results in the PL/SQL function result cache (appears only in definition).</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="function.htm#i34368">"Function Declaration and Definition"</a> for the syntax of function declarations and definitions, including descriptions of the items in the preceding table</p>
</li>
<li>
<p><a href="#BABFHACJ">"PL/SQL Function Result Cache"</a> for more information about the <code dir="ltr">RESULT_CACHE</code> option and clause</p>
</li>
</ul>
</div>
<p>In <a href="#CIHBEGEG">Example 8-2</a>, an anonymous block simultaneously declares and defines a function and invokes it.</p>
<div id="LNPLS550" class="example">
<p class="titleinexample"><a id="CIHBEGEG"></a>Example 8-2 Declaring, Defining, and Invoking a Simple PL/SQL Function</p>
<pre dir="ltr">
DECLARE
  <span class="bold">-- Declare and define function</span>

  FUNCTION square (original NUMBER)   <span class="bold">-- parameter list</span>
    RETURN NUMBER                     <span class="bold">-- RETURN clause</span>
  AS
                                      <span class="bold">-- Declarative part begins</span>
    original_squared NUMBER;
  BEGIN                               <span class="bold">-- Executable part begins</span>
    original_squared := original * original;
    RETURN original_squared;          <span class="bold">-- RETURN statement</span>
  END;
BEGIN
  DBMS_OUTPUT.PUT_LINE(square(100));  <span class="bold">-- invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
10000
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHCJFCF"></a>
<div id="LNPLS99897" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">RETURN Statement</h3>
<p>The <a id="sthref673"></a><code dir="ltr">RETURN</code> statement immediately ends the execution of the subprogram or anonymous block that contains it. A subprogram or anonymous block can contain multiple <code dir="ltr">RETURN</code> statements.</p>
<p class="subhead2"><a id="LNPLS552"></a>Topics</p>
<ul>
<li>
<p><a href="#CIHCCBFJ">RETURN Statement in Function</a></p>
</li>
<li>
<p><a href="#CIHIIJEE">RETURN Statement in Procedure</a></p>
</li>
<li>
<p><a href="#CIHIAADB">RETURN Statement in Anonymous Block</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="return_statement.htm#i35913">"RETURN Statement"</a> for the syntax of the <code dir="ltr">RETURN</code> statement</div>
<a id="CIHCCBFJ"></a>
<div id="LNPLS99895" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">RETURN Statement in Function</h4>
<p>In a function, every execution path must lead to a <code dir="ltr">RETURN</code> statement and every <code dir="ltr">RETURN</code> statement must specify an expression. The <code dir="ltr">RETURN</code> statement assigns the value of the expression to the function identifier and returns control to the invoker, where execution resumes immediately after the invocation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a pipelined table function, a <code dir="ltr">RETURN</code> statement need not specify an expression. For information about the parts of a pipelined table function, see <a href="tuning.htm#i53109">"Creating Pipelined Table Functions"</a>.</div>
<p>In <a href="#CIHEHEHB">Example 8-3</a>, the anonymous block invokes the same function twice. The first time, the <code dir="ltr">RETURN</code> statement returns control to the inside of the invoking statement. The second time, the <code dir="ltr">RETURN</code> statement returns control to the statement immediately after the invoking statement.</p>
<div id="LNPLS555" class="example">
<p class="titleinexample"><a id="CIHEHEHB"></a>Example 8-3 Execution Resumes After RETURN Statement in Function</p>
<pre dir="ltr">
DECLARE
  x INTEGER;
 
  FUNCTION f (n INTEGER)
  RETURN INTEGER
  IS
  BEGIN
    <span class="bold">RETURN (n*n);</span>
  END;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE (
    'f returns ' || <span class="bold">f(2)</span> <span class="bold">|| '. Execution returns here (1).'</span>
  );
  
  x := <span class="bold">f(2)</span>;
  <span class="bold">DBMS_OUTPUT.PUT_LINE('Execution returns here (2).');</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
f returns 4. Execution returns here (1).Execution returns here (2).
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHFDEBC">Example 8-4</a>, the function has multiple <code dir="ltr">RETURN</code> statements, but if the parameter is not 0 or 1, then no execution path leads to a <code dir="ltr">RETURN</code> statement. The function compiles with warning PLW-05005: subprogram F returns without value at line 10.</p>
<div id="LNPLS556" class="example">
<p class="titleinexample"><a id="CIHFDEBC"></a>Example 8-4 Function Where Not Every Execution Path Leads to RETURN Statement</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION f (n INTEGER)
  RETURN INTEGER
IS
BEGIN
  <span class="bold">IF n = 0</span> THEN
    RETURN 1;
  <span class="bold">ELSIF n = 1</span> THEN
    RETURN n;
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CIHDHIDD">Example 8-5</a> is like <a href="#CIHFDEBC">Example 8-4</a>, except for the addition of the <code dir="ltr">ELSE</code> clause. Every execution path leads to a <code dir="ltr">RETURN</code> statement, and the function compiles without warning PLW-05005.</p>
<div id="LNPLS557" class="example">
<p class="titleinexample"><a id="CIHDHIDD"></a>Example 8-5 Function Where Every Execution Path Leads to RETURN Statement</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION f (n INTEGER)
  RETURN INTEGER
IS
BEGIN
  IF n = 0 THEN
    RETURN 1;
  ELSIF n = 1 THEN
    RETURN n;
  <span class="bold">ELSE</span>
    RETURN n*n;
  END IF;
END;
/
BEGIN
  FOR i IN 0 .. 3 LOOP
    DBMS_OUTPUT.PUT_LINE('f(' || i || ') = ' || f(i));
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
f(0) = 1
f(1) = 1
f(2) = 4
f(3) = 9
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHIIJEE"></a>
<div id="LNPLS99894" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">RETURN Statement in Procedure</h4>
<p>In a procedure, the <code dir="ltr">RETURN</code> statement returns control to the invoker, where execution resumes immediately after the invocation. The <code dir="ltr">RETURN</code> statement cannot specify an expression.</p>
<p>In <a href="#CIHHFGDG">Example 8-6</a>, the <code dir="ltr">RETURN</code> statement returns control to the statement immediately after the invoking statement.</p>
<div id="LNPLS558" class="example">
<p class="titleinexample"><a id="CIHHFGDG"></a>Example 8-6 Execution Resumes After RETURN Statement in Procedure</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Inside p');
    <span class="bold">RETURN;</span>
    DBMS_OUTPUT.PUT_LINE(<span class="bold">'Unreachable statement.'</span>);
  END;
BEGIN
  <span class="bold">p;</span>
  <span class="bold">DBMS_OUTPUT.PUT_LINE('Control returns here.');</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside p
Control returns here.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHIAADB"></a>
<div id="LNPLS99893" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">RETURN Statement in Anonymous Block</h4>
<p>In an anonymous block, the <code dir="ltr">RETURN</code> statement exits its own block and all enclosing blocks. The <code dir="ltr">RETURN</code> statement cannot specify an expression.</p>
<p>In <a href="#CIHGCFCC">Example 8-7</a>, the <code dir="ltr">RETURN</code> statement exits both the inner and outer block.</p>
<div id="LNPLS560" class="example">
<p class="titleinexample"><a id="CIHGCFCC"></a>Example 8-7 Execution Resumes After RETURN Statement in Anonymous Block</p>
<pre dir="ltr">
BEGIN
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Inside inner block.');
    <span class="bold">RETURN;</span>
    DBMS_OUTPUT.PUT_LINE(<span class="bold">'Unreachable statement.'</span>);
  END;
  DBMS_OUTPUT.PUT_LINE(<span class="bold">'Inside outer block. Unreachable statement.'</span>);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Inside inner block.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHIAEDF"></a>
<div id="LNPLS99896" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Forward Declaration</h2>
<p>If <a id="sthref674"></a>nested subprograms in the same PL/SQL block invoke each other, then one requires a forward declaration, because a subprogram must be declared before it can be invoked.</p>
<p>A <a id="sthref675"></a><span class="bold">forward declaration</span> declares a nested subprogram but does not define it. You must define it later in the same block. The forward declaration and the definition must have the same subprogram heading.</p>
<p>In <a href="#CHDGICCH">Example 8-8</a>, an anonymous block creates two procedures that invoke each other.</p>
<div id="LNPLS656" class="example">
<p class="titleinexample"><a id="CHDGICCH"></a>Example 8-8 Nested Subprograms Invoke Each Other</p>
<pre dir="ltr">
DECLARE
  <span class="bold">-- Declare proc1 (forward declaration):</span>
  PROCEDURE proc1(number1 NUMBER);

  <span class="bold">-- Declare and define proc2:</span>
  PROCEDURE proc2(number2 NUMBER) IS
  BEGIN
    proc1(number2);
  END;

  <span class="bold">-- Define proc 1:</span>
  PROCEDURE proc1(number1 NUMBER) IS
  BEGIN
    proc2 (number1);
  END;

BEGIN
  NULL;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i23202"></a>
<div id="LNPLS00806" class="sect1"><!-- infotype="General" -->
<h2 class="sect1">Subprogram Parameters</h2>
<p>If a subprogram has <a id="sthref676"></a>parameters, their values can differ for each invocation.</p>
<p class="subhead2"><a id="LNPLS562"></a>Topics</p>
<ul>
<li>
<p><a href="#i4100">Formal and Actual Subprogram Parameters</a></p>
</li>
<li>
<p><a href="#CIHGFAFI">Subprogram Parameter Passing Methods</a></p>
</li>
<li>
<p><a href="#i4107">Subprogram Parameter Modes</a></p>
</li>
<li>
<p><a href="#i23489">Subprogram Parameter Aliasing</a></p>
</li>
<li>
<p><a href="#i6821">Default Values for IN Subprogram Parameters</a></p>
</li>
<li>
<p><a href="#i4072">Positional, Named, and Mixed Notation for Actual Parameters</a></p>
</li>
</ul>
<a id="i4100"></a>
<div id="LNPLS657" class="sect2">
<h3 class="sect2">Formal and Actual Subprogram Parameters</h3>
<p>If you want a subprogram to have parameters, declare <span class="bold">formal parameters</span> in the subprogram heading. In each formal parameter declaration, specify the name and data type of the parameter, and (optionally) its mode and default value. In the execution part of the subprogram, reference the formal parameters by their names.</p>
<p>When invoking the subprogram, specify the <span class="bold">actual parameters</span> whose values are to be assigned to the formal parameters. Corresponding actual and formal parameters must have compatible data types.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can declare a formal parameter of a constrained subtype, like this:
<pre dir="ltr">
DECLARE
  <span class="bold">SUBTYPE n1 IS NUMBER(1);</span>
  <span class="bold">SUBTYPE v1 IS VARCHAR2(1);</span>
 
  PROCEDURE p (n <span class="bold">n1</span>, v <span class="bold">v1</span>) IS ...
</pre>
<p>But you cannot include a constraint in a formal parameter declaration, like this:</p>
<pre dir="ltr">
DECLARE
  PROCEDURE p (n <span class="bold">NUMBER(1)</span>, v <span class="bold">VARCHAR2(1)</span>) IS ...
</pre></div>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
To avoid confusion, use different names for formal and actual parameters.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
Formal parameters can be evaluated in any order. If a program determines order of evaluation, then at the point where the program does so, its behavior is undefined.</div>
<p>In <a href="#CIHJHJDE">Example 8-9</a>, the procedure has formal parameters <code dir="ltr">emp_id</code> and <code dir="ltr">amount</code>. In the first procedure invocation, the corresponding actual parameters are <code dir="ltr">emp_num</code> and <code dir="ltr">bonus</code>, whose value are 120 and 100, respectively. In the second procedure invocation, the actual parameters are <code dir="ltr">emp_num</code> and <code dir="ltr">merit</code> + <code dir="ltr">bonus</code>, whose value are 120 and 150, respectively.</p>
<div id="LNPLS658" class="example">
<p class="titleinexample"><a id="CIHJHJDE"></a>Example 8-9 Formal Parameters and Actual Parameters</p>
<pre dir="ltr">
DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 100;
  merit   NUMBER(4) := 50;

  PROCEDURE raise_salary (
    <span class="bold">emp_id NUMBER,  -- formal parameter</span>
    <span class="bold">amount NUMBER   -- formal parameter</span>
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + <span class="bold">amount</span>  <span class="bold">-- reference to formal parameter</span>
    WHERE employee_id = <span class="bold">emp_id</span>;   <span class="bold">-- reference to formal parameter</span>
  END raise_salary;

BEGIN
  raise_salary(<span class="bold">emp_num, bonus</span>);          <span class="bold">-- actual parameters</span>

  /* raise_salary runs this statement:
       UPDATE employees
       SET salary = salary + <span class="bold">100</span>
       WHERE employee_id = <span class="bold">120</span>;       */

  raise_salary(<span class="bold">emp_num, merit + bonus</span>);  <span class="bold">-- actual parameters</span>

  /* raise_salary runs this statement:
       UPDATE employees
       SET salary = salary + <span class="bold">150</span>
       WHERE employee_id = <span class="bold">120</span>;       */
END;
/
</pre></div>
<!-- class="example" -->
<p class="subhead2"><a id="CHDFAIEH"></a><a id="LNPLS566"></a>Formal Parameters of Constrained Subtypes</p>
<p>If the data type of a formal parameter is a <a id="sthref677"></a><a id="sthref678"></a>constrained subtype, then:</p>
<ul>
<li>
<p>If the subtype has the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint, then the actual parameter inherits it.</p>
</li>
<li>
<p>If the subtype has the base type <code dir="ltr">VARCHAR2</code>, then the actual parameter does not inherit the size of the subtype.</p>
</li>
<li>
<p>If the subtype has a numeric base type, then the actual parameter inherits the range of the subtype, but not the precision or scale.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
In a function, the clause <code dir="ltr">RETURN</code> <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> declares a hidden formal parameter and the statement <code dir="ltr">RETURN</code> <code dir="ltr"><span class="codeinlineitalic">value</span></code> specifies the corresponding actual parameter. Therefore, if <code dir="ltr"><span class="codeinlineitalic">datatype</span></code> is a constrained data type, then the preceding rules apply to <code dir="ltr"><span class="codeinlineitalic">value</span></code> (see <a href="#CHDEGCDH">Example 8-11</a>).</div>
<p><a href="#CJAJAHJD">Example 8-10</a> shows that an actual subprogram parameter inherits the <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint but not the size of a <code dir="ltr">VARCHAR2</code> subtype.</p>
<div id="LNPLS379" class="example">
<p class="titleinexample"><a id="CJAJAHJD"></a>Example 8-10 Actual Parameter Inherits Only NOT NULL from Subtype</p>
<pre dir="ltr">
DECLARE
  <span class="bold">SUBTYPE License IS VARCHAR2(7) NOT NULL</span>;
  n  License := 'DLLLDDD';
 
  PROCEDURE p (<span class="bold">x License</span>) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE(x);
  END;
 
BEGIN
  p('1ABC123456789');  <span class="bold">-- Succeeds; size is not inherited</span>
  p(NULL);             <span class="bold">-- Raises error; NOT NULL is inherited</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
  p(NULL);             -- Raises error; NOT NULL is inherited
    *
ERROR at line 12:
ORA-06550: line 12, column 5:
PLS-00567: cannot pass NULL to a NOT NULL constrained formal parameter
ORA-06550: line 12, column 3:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" -->
<p>As <a href="predefined.htm#CJAEFDAD">Appendix E, "PL/SQL Predefined Data Types"</a> shows, PL/SQL has many predefined data types that are constrained subtypes of other data types. For example, <code dir="ltr">INTEGER</code> is a constrained subtype of <code dir="ltr">NUMBER</code>:</p>
<pre dir="ltr">
SUBTYPE INTEGER IS NUMBER(38,0);
</pre>
<p>In <a href="#CHDEGCDH">Example 8-11</a>, the function has both an <code dir="ltr">INTEGER</code> formal parameter and an <code dir="ltr">INTEGER</code> return type. The anonymous block invokes the function with an actual parameter that is not an integer. Because the actual parameter inherits the range but not the precision and scale of <code dir="ltr">INTEGER</code>, and the actual parameter is in the <code dir="ltr">INTEGER</code> range, the invocation succeeds. For the same reason, the <code dir="ltr">RETURN</code> statement succeeds in returning the noninteger value.</p>
<div id="LNPLS567" class="example">
<p class="titleinexample"><a id="CHDEGCDH"></a>Example 8-11 Actual Parameter and Return Value Inherit Only Range From Subtype</p>
<pre dir="ltr">
DECLARE
  FUNCTION test <span class="bold">(p INTEGER) RETURN INTEGER</span> IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('p = ' || p);
    RETURN p;
  END test;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE('test(p) = ' || test(0.66));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">p = .66</span>
<span class="bold">test(p) = .66</span>
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDGIHAA">Example 8-12</a>, the function implicitly converts its formal parameter to the constrained subtype <code dir="ltr">INTEGER</code> before returning it.</p>
<div id="LNPLS569" class="example">
<p class="titleinexample"><a id="CHDGIHAA"></a>Example 8-12 Function Implicitly Converts Formal Parameter to Constrained Subtype</p>
<pre dir="ltr">
DECLARE
  FUNCTION test <span class="bold">(p NUMBER) RETURN NUMBER</span> IS
    <span class="bold">q INTEGER := p;  -- Implicitly converts p to INTEGER</span>
  BEGIN
    DBMS_OUTPUT.PUT_LINE('p = ' || <span class="bold">q</span>);  -- Display q, not p
    RETURN <span class="bold">q</span>;                           -- Return q, not p
  END test;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE('test(p) = ' || test(0.66));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">p = 1</span>
<span class="bold">test(p) = 1</span>
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="parameter_declaration.htm#CJADCJFE">"Formal Parameter Declaration"</a> for the syntax and semantics of a formal parameter declaration</p>
</li>
<li>
<p><a href="expression.htm#CHDBCJGE">"<span class="italic">function_call</span> ::="</a> and <a href="expression.htm#CHDEBDGB">"<span class="italic">function_call</span>"</a> for the syntax and semantics of a function invocation</p>
</li>
<li>
<p><a href="block.htm#CJAEJGEA">"<span class="italic">procedure_call</span> ::="</a> and <a href="block.htm#CHDIICHC">"<span class="italic">procedure_call</span>"</a> for the syntax and semantics of a procedure invocation</p>
</li>
<li>
<p><a href="datatypes.htm#CHDBBCIE">"Constrained Subtypes"</a> for general information about constrained subtypes</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CIHGFAFI"></a>
<div id="LNPLS99952" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Subprogram Parameter Passing Methods</h3>
<p>The PL/SQL compiler has two ways of passing an actual parameter to a subprogram:</p>
<ul>
<li>
<p><span class="bold">By reference</span></p>
<p>The compiler passes the subprogram a pointer to the actual parameter. The actual and formal parameters refer to the same memory location.</p>
</li>
<li>
<p><span class="bold">By value</span></p>
<p>The compiler assigns the value of the actual parameter to the corresponding formal parameter. The actual and formal parameters refer to different memory locations.</p>
<p>If necessary, the compiler <a id="sthref679"></a>implicitly converts the data type of the actual parameter to the data type of the formal parameter. For information about implicit data conversion, see <a class="olink SQLRF51047" href="../../server.112/e41084/sql_elements002.htm#SQLRF51047"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Avoid implicit data conversion (for the reasons in <a class="olink SQLRF51046" href="../../server.112/e41084/sql_elements002.htm#SQLRF51046"><span class="italic">Oracle Database SQL Language Reference</span></a>), in either of these ways:
<ul>
<li>
<p>Declare the variables that you intend to use as actual parameters with the same data types as their corresponding formal parameters (as in the declaration of variable <code dir="ltr">x</code> in <a href="#CIHFEEIJ">Example 8-13</a>).</p>
</li>
<li>
<p>Explicitly convert actual parameters to the data types of their corresponding formal parameters, using the SQL conversion functions described in <a class="olink SQLRF51054" href="../../server.112/e41084/sql_elements002.htm#SQLRF51054"><span class="italic">Oracle Database SQL Language Reference</span></a> (as in the third invocation of the procedure in <a href="#CIHFEEIJ">Example 8-13</a>).</p>
</li>
</ul>
</div>
</li>
</ul>
<p>In <a href="#CIHFEEIJ">Example 8-13</a>, the procedure <code dir="ltr">p</code> has one parameter, <code dir="ltr">n</code>, which is passed by value. The anonymous block invokes <code dir="ltr">p</code> three times, avoiding implicit conversion twice.</p>
<div id="LNPLS570" class="example">
<p class="titleinexample"><a id="CIHFEEIJ"></a>Example 8-13 Avoiding Implicit Conversion of Actual Parameters</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p (
  <span class="bold">n NUMBER</span>
) IS
BEGIN
  NULL;
END;
/
DECLARE
  <span class="bold">x NUMBER</span>      :=  1;
  y VARCHAR2(1) := '1';
BEGIN
  p(<span class="bold">x</span>);             <span class="bold">-- No conversion needed</span>
  p(y);             -- z implicitly converted from VARCHAR2 to NUMBER
  p(<span class="bold">TO_NUMBER(y)</span>);  <span class="bold">-- z explicitly converted from VARCHAR2 to NUMBER</span>
END;
/
</pre></div>
<!-- class="example" -->
<p>The method by which the compiler passes a specific actual parameter depends on its mode, as explained in <a href="#i4107">"Subprogram Parameter Modes"</a>.</p>
</div>
<!-- class="sect2" -->
<a id="i4107"></a>
<div id="LNPLS659" class="sect2">
<h3 class="sect2">Subprogram Parameter Modes</h3>
<p>The <a id="sthref680"></a><a id="sthref681"></a><span class="bold">mode</span> of a formal parameter determines its behavior.</p>
<p><a href="#BCFHBGBI">Table 8-1</a> summarizes and compares the characteristics of the subprogram parameter modes.</p>
<div id="LNPLS665" class="tblformal">
<p class="titleintable"><a id="sthref682"></a><a id="BCFHBGBI"></a>Table 8-1 PL/SQL Subprogram Parameter Modes</p>
<table class="cellalignment1092" title="PL/SQL Subprogram Parameter Modes" summary="This table summarizes and compares the parameter modes of subprogram parameters." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t15"><a id="sthref683"></a>IN</th>
<th class="cellalignment1090" id="r1c2-t15"><a id="sthref684"></a>OUT</th>
<th class="cellalignment1090" id="r1c3-t15"><a id="sthref685"></a>IN OUT</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t15" headers="r1c1-t15">
<p>Default mode</p>
</td>
<td class="cellalignment1091" headers="r2c1-t15 r1c2-t15">
<p>Must be specified.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t15 r1c3-t15">
<p>Must be specified.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t15" headers="r1c1-t15">
<p>Passes a value to the subprogram.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t15 r1c2-t15">
<p>Returns a value to the invoker.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t15 r1c3-t15">
<p>Passes an initial value to the subprogram and returns an updated value to the invoker.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t15" headers="r1c1-t15">
<p>Formal parameter acts like a constant: When the subprogram begins, its value is that of either its actual parameter or default value, and the subprogram cannot change this value.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t15 r1c2-t15">
<p>Formal parameter is initialized to the default value of its type. The default value of the type is <code dir="ltr">NULL</code> except for a record type with a non-<code dir="ltr">NULL</code> default value (see <a href="#CHDBGJCE">Example 8-16</a>).</p>
<p>When the subprogram begins, the formal parameter has its initial value regardless of the value of its actual parameter. Oracle recommends that the subprogram assign a value to the formal parameter.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t15 r1c3-t15">
<p>Formal parameter acts like an initialized variable: When the subprogram begins, its value is that of its actual parameter. Oracle recommends that the subprogram update its value.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t15" headers="r1c1-t15">
<p>Actual parameter can be a constant, initialized variable, literal, or expression.</p>
</td>
<td class="cellalignment1091" headers="r5c1-t15 r1c2-t15">
<p>If the default value of the formal parameter type is <code dir="ltr">NULL</code>, then the actual parameter must be a variable whose data type is not defined as <code dir="ltr">NOT</code> <code dir="ltr">NULL</code>.</p>
</td>
<td class="cellalignment1091" headers="r5c1-t15 r1c3-t15">
<p>Actual parameter must be a variable (typically, it is a string buffer or numeric accumulator).</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t15" headers="r1c1-t15">
<p>Actual parameter is passed by reference.</p>
</td>
<td class="cellalignment1091" headers="r6c1-t15 r1c2-t15">
<p>By default, actual parameter is passed by value; if you specify <code dir="ltr">NOCOPY</code>, it might be passed by reference.</p>
</td>
<td class="cellalignment1091" headers="r6c1-t15 r1c3-t15">
<p>By default, actual parameter is passed by value (in both directions); if you specify <code dir="ltr">NOCOPY</code>, it might be passed by reference.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Do not use <code dir="ltr">OUT</code> and <code dir="ltr">IN</code> <code dir="ltr">OUT</code> for function parameters. Ideally, a function takes zero or more parameters and returns a single value. A function with <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameters returns multiple values and has side effects.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The specifications of many packages and types that Oracle Database supplies declare formal parameters with this notation:
<pre dir="ltr">
i1 IN VARCHAR2 CHARACTER SET ANY_CS
i2 IN VARCHAR2 CHARACTER SET i1%CHARSET
</pre>
<p>Do not use this notation when declaring your own formal or actual parameters. It is reserved for Oracle implementation of the supplied packages types.</p>
</div>
<p>Regardless of how an <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter is passed:</p>
<ul>
<li>
<p>If the subprogram exits successfully, then the value of the actual parameter is the final value assigned to the formal parameter. (The formal parameter is assigned at least one value&mdash;the initial value.)</p>
</li>
<li>
<p>If the subprogram ends with an exception, then the value of the actual parameter is undefined.</p>
</li>
<li>
<p>Formal <code dir="ltr">OUT</code> and <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameters can be returned in any order. In this example, the final values of <code dir="ltr">x</code> and <code dir="ltr">y</code> are undefined:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p (x OUT INTEGER, y OUT INTEGER) AS
BEGIN
  x := 17; y := 93;
END;
/
</pre></li>
</ul>
<p>When an <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter is passed by reference, the actual and formal parameters refer to the same memory location. Therefore, if the subprogram changes the value of the formal parameter, the change shows immediately in the actual parameter (see <a href="#CHDGBIEC">"Subprogram Parameter Aliasing with Parameters Passed by Reference"</a>).</p>
<p>In <a href="#g1170259">Example 8-14</a>, the procedure <code dir="ltr">p</code> has two <code dir="ltr">IN</code> parameters, one <code dir="ltr">OUT</code> parameter, and one <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter. The <code dir="ltr">OUT</code> and <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameters are passed by value (the default). The anonymous block invokes <code dir="ltr">p</code> twice, with different actual parameters. Before each invocation, the anonymous block prints the values of the actual parameters. The procedure <code dir="ltr">p</code> prints the initial values of its formal parameters. After each invocation, the anonymous block prints the values of the actual parameters again. (Both the anonymous block and <code dir="ltr">p</code> invoke the procedure <code dir="ltr">print</code>, which is created first.)</p>
<div id="LNPLS662" class="example">
<p class="titleinexample"><a id="g1170259"></a>Example 8-14 Parameter Values Before, During, and After Procedure Invocation</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE print (x PLS_INTEGER) IS
BEGIN
  IF x IS NOT NULL THEN
    DBMS_OUTPUT.PUT_LINE(x);
  ELSE
    DBMS_OUTPUT.PUT_LINE('NULL');
  END IF;
END print;
/
CREATE OR REPLACE PROCEDURE p (
  a        PLS_INTEGER,  <span class="bold">-- IN by default</span>
  b     <span class="bold">IN</span> PLS_INTEGER,
  c    <span class="bold">OUT</span> PLS_INTEGER,
  d <span class="bold">IN OUT</span> BINARY_FLOAT
) IS
BEGIN
  -- Print values of parameters:
 
  DBMS_OUTPUT.PUT_LINE('Inside procedure p:');
  DBMS_OUTPUT.PUT('IN a = '); print(a);
  DBMS_OUTPUT.PUT('IN b = '); print(b);
  DBMS_OUTPUT.PUT('OUT c = '); print(c);
  DBMS_OUTPUT.PUT_LINE('IN OUT d = ' || TO_CHAR(d));
 
  <span class="bold">-- Can reference IN parameters a and b,</span>
  <span class="bold">-- but cannot assign values to them.</span>
 
  c := a+10;  <span class="bold">-- Assign value to OUT parameter</span>
  d := 10/b;  <span class="bold">-- Assign value to IN OUT parameter</span>
END;
/
DECLARE
  aa  CONSTANT PLS_INTEGER := 1;
  bb  PLS_INTEGER  := 2;
  cc  PLS_INTEGER  := 3;
  dd  BINARY_FLOAT := 4;
  ee  PLS_INTEGER;
  ff  BINARY_FLOAT := 5;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Before invoking procedure p:');
  DBMS_OUTPUT.PUT('aa = '); print(aa);
  DBMS_OUTPUT.PUT('bb = '); print(bb);
  DBMS_OUTPUT.PUT('cc = '); print(cc);
  DBMS_OUTPUT.PUT_LINE('dd = ' || TO_CHAR(dd));
 
  p (aa, -- constant
     bb, -- initialized variable
     cc, -- initialized variable 
     dd  -- initialized variable
  );
 
  DBMS_OUTPUT.PUT_LINE('After invoking procedure p:');
  DBMS_OUTPUT.PUT('aa = '); print(aa);
  DBMS_OUTPUT.PUT('bb = '); print(bb);
  DBMS_OUTPUT.PUT('cc = '); print(cc);
  DBMS_OUTPUT.PUT_LINE('dd = ' || TO_CHAR(dd));
 
  DBMS_OUTPUT.PUT_LINE('Before invoking procedure p:');
  DBMS_OUTPUT.PUT('ee = '); print(ee);
  DBMS_OUTPUT.PUT_LINE('ff = ' || TO_CHAR(ff));
 
  p (1,        -- literal 
     (bb+3)*4, -- expression 
     ee,       -- uninitialized variable 
     ff        -- initialized variable
   );
 
  DBMS_OUTPUT.PUT_LINE('After invoking procedure p:');
  DBMS_OUTPUT.PUT('ee = '); print(ee);
  DBMS_OUTPUT.PUT_LINE('ff = ' || TO_CHAR(ff));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Before invoking procedure p:
aa = 1
bb = 2
cc = 3
dd = 4.0E+000
Inside procedure p:
IN a = 1
IN b = 2
OUT c = NULL
IN OUT d = 4.0E+000
After invoking procedure p:
aa = 1
bb = 2
cc = 11
dd = 5.0E+000
Before invoking procedure p:
ee = NULL
ff = 5.0E+000
Inside procedure p:
IN a = 1
IN b = 20
OUT c = NULL
IN OUT d = 5.0E+000
After invoking procedure p:
ee = 11
ff = 5.0E-001
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBGIHE">Example 8-15</a>, the anonymous block invokes procedure <code dir="ltr">p</code> (from <a href="#g1170259">Example 8-14</a>) with an actual parameter that causes <code dir="ltr">p</code> to raise the predefined exception <code dir="ltr">ZERO_DIVIDE</code>, which <code dir="ltr">p</code> does not handle. The exception propagates to the anonymous block, which handles <code dir="ltr">ZERO_DIVIDE</code> and shows that the actual parameters for the <code dir="ltr">IN</code> and <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameters of <code dir="ltr">p</code> have retained the values that they had before the invocation. (Exception propagation is explained in <a href="errors.htm#i3365">"Exception Propagation"</a>.)</p>
<div id="LNPLS573" class="example">
<p class="titleinexample"><a id="CHDBGIHE"></a>Example 8-15 OUT and IN OUT Parameter Values After Unhandled Exception</p>
<pre dir="ltr">
DECLARE
  j  PLS_INTEGER  := 10;
  k  BINARY_FLOAT := 15;
BEGIN
  DBMS_OUTPUT.PUT_LINE('Before invoking procedure p:');
  DBMS_OUTPUT.PUT('j = '); print(j);
  DBMS_OUTPUT.PUT_LINE('k = ' || TO_CHAR(k));
 
  p(4, 0, j, k);  -- causes p to exit with exception ZERO_DIVIDE
 
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('After invoking procedure p:');
    DBMS_OUTPUT.PUT('j = '); print(j);
    DBMS_OUTPUT.PUT_LINE('k = ' || TO_CHAR(k));
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Before invoking procedure p:
j = 10
k = 1.5E+001
Inside procedure p:
IN a = 4
IN b = 0
OUT c = NULL
d = 1.5E+001
After invoking procedure p:
j = 10
k = 1.5E+001
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBGJCE">Example 8-16</a>, the procedure <code dir="ltr">p</code> has three <code dir="ltr">OUT</code> formal parameters: <code dir="ltr">x</code>, of a record type with a non-<code dir="ltr">NULL</code> default value; <code dir="ltr">y</code>, of a record type with no non-<code dir="ltr">NULL</code> default value; and <code dir="ltr">z</code>, which is not a record.</p>
<p>The corresponding actual parameters for <code dir="ltr">x</code>, <code dir="ltr">y</code>, and <code dir="ltr">z</code> are <code dir="ltr">r1</code>, <code dir="ltr">r2</code>, and <code dir="ltr">s</code>, respectively. <code dir="ltr">s</code> is declared with an initial value. However, when <code dir="ltr">p</code> is invoked, the value of <code dir="ltr">s</code> is initialized to <code dir="ltr">NULL</code>. The values of <code dir="ltr">r1</code> and <code dir="ltr">r2</code> are initialized to the default values of their record types, <code dir="ltr">'abcde'</code> and <code dir="ltr">NULL</code>, respectively.</p>
<div id="LNPLS574" class="example">
<p class="titleinexample"><a id="CHDBGJCE"></a>Example 8-16 OUT Formal Parameter of Record Type with Non-NULL Default Value</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE r_types AUTHID DEFINER IS
  TYPE r_type_1 IS RECORD (f VARCHAR2(5) := 'abcde');
  TYPE r_type_2 IS RECORD (f VARCHAR2(5));
END;
/
 
CREATE OR REPLACE PROCEDURE p (
  x OUT r_types.r_type_1,
  y OUT r_types.r_type_2,
  z OUT VARCHAR2) 
AUTHID DEFINER IS
BEGIN
  DBMS_OUTPUT.PUT_LINE('x.f is ' || NVL(x.f,'NULL'));
  DBMS_OUTPUT.PUT_LINE('y.f is ' || NVL(y.f,'NULL'));
  DBMS_OUTPUT.PUT_LINE('z is ' || NVL(z,'NULL'));
END;
/
DECLARE
  r1 r_types.r_type_1;
  r2 r_types.r_type_2;
  s  VARCHAR2(5) := 'fghij';
BEGIN
  p (r1, r2, s);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
x.f is abcde
y.f is NULL
z is NULL
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i23489"></a>
<div id="LNPLS00815" class="sect2">
<h3 class="sect2">Subprogram Parameter Aliasing</h3>
<p><a id="sthref686"></a><span class="bold">Aliasing</span> is having two different names for the same memory location. If a stored item is visible by more than one path, and you can change the item by one path, then you can see the change by all paths.</p>
<p>Subprogram parameter aliasing always occurs when the compiler passes an actual parameter by reference, and can also occur when a subprogram has cursor variable parameters.</p>
<p class="subhead2"><a id="LNPLS576"></a>Topics</p>
<ul>
<li>
<p><a href="#CHDGBIEC">Subprogram Parameter Aliasing with Parameters Passed by Reference</a></p>
</li>
<li>
<p><a href="#CHDEBECB">Subprogram Parameter Aliasing with Cursor Variable Parameters</a></p>
</li>
</ul>
<a id="CHDGBIEC"></a>
<div id="LNPLS99892" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Subprogram Parameter Aliasing with Parameters Passed by Reference</h4>
<p>When the compiler passes an actual parameter by reference, the actual and formal parameters refer to the same memory location. Therefore, if the subprogram changes the value of the formal parameter, the change shows immediately in the actual parameter.</p>
<p>The compiler always passes <code dir="ltr">IN</code> parameters by reference, but the resulting aliasing cannot cause problems, because subprograms cannot assign values to <code dir="ltr">IN</code> parameters.</p>
<p>The compiler <span class="italic">might</span> pass an <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter by reference, if you specify <a id="sthref687"></a><code dir="ltr">NOCOPY</code> for that parameter. <code dir="ltr">NOCOPY</code> is only a hint&mdash;each time the subprogram is invoked, the compiler decides, silently, whether to obey or ignore <code dir="ltr">NOCOPY</code>. Therefore, aliasing can occur for one invocation but not another, making subprogram results indeterminate. For example:</p>
<ul>
<li>
<p>If the actual parameter is a global variable, then an assignment to the formal parameter <span class="italic">might</span> show in the global parameter (see <a href="#CIHBCCHI">Example 8-17</a>).</p>
</li>
<li>
<p>If the same variable is the actual parameter for two formal parameters, then an assignment to either formal parameter <span class="italic">might</span> show immediately in both formal parameters (see <a href="#CIHJIDAB">Example 8-18</a>).</p>
</li>
<li>
<p>If the actual parameter is a package variable, then an assignment to either the formal parameter or the package variable <span class="italic">might</span> show immediately in both the formal parameter and the package variable.</p>
</li>
<li>
<p>If the subprogram is exited with an unhandled exception, then an assignment to the formal parameter <span class="italic">might</span> show in the actual parameter.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="parameter_declaration.htm#CJACJCGJ">"NOCOPY"</a> for the cases in which the compiler always ignores <code dir="ltr">NOCOPY</code></div>
<p>In <a href="#CIHBCCHI">Example 8-17</a>, the procedure has an <code dir="ltr">IN</code> <code dir="ltr">OUT</code> <code dir="ltr">NOCOPY</code> formal parameter, to which it assigns the value <code dir="ltr">'aardvark'</code>. The anonymous block assigns the value <code dir="ltr">'aardwolf'</code> to a global variable and then passes the global variable to the procedure. If the compiler obeys the <code dir="ltr">NOCOPY</code> hint, then the final value of the global variable is <code dir="ltr">'aardvark'</code>. If the compiler ignores the <code dir="ltr">NOCOPY</code> hint, then the final value of the global variable is <code dir="ltr">'aardwolf'</code>.</p>
<div id="LNPLS695" class="example">
<p class="titleinexample"><a id="CIHBCCHI"></a>Example 8-17 Aliasing from Global Variable as Actual Parameter</p>
<pre dir="ltr">
DECLARE
  TYPE Definition IS RECORD (
    word     VARCHAR2(20),
    meaning  VARCHAR2(200)
  );

  TYPE Dictionary IS VARRAY(2000) OF Definition;

  lexicon  Dictionary := Dictionary();  -- global variable

  PROCEDURE add_entry (
    word_list IN OUT NOCOPY Dictionary  -- formal NOCOPY parameter
  ) IS
  BEGIN
    word_list(1).word := 'aardvark';
  END;

BEGIN
  lexicon.EXTEND;
  lexicon(1).word := 'aardwolf';
  <span class="bold">add_entry(lexicon);  -- global variable is actual parameter</span>
  DBMS_OUTPUT.PUT_LINE(lexicon(1).word);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
aardvark
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHJIDAB">Example 8-18</a>, the procedure has an <code dir="ltr">IN</code> parameter, an <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter, and an <code dir="ltr">IN</code> <code dir="ltr">OUT</code> <code dir="ltr">NOCOPY</code> parameter. The anonymous block invokes the procedure, using the same actual parameter, a global variable, for all three formal parameters. The procedure changes the value of the <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter before it changes the value of the <code dir="ltr">IN</code> <code dir="ltr">OUT</code> <code dir="ltr">NOCOPY</code> parameter. However, if the compiler obeys the <code dir="ltr">NOCOPY</code> hint, then the latter change shows in the actual parameter immediately. The former change shows in the actual parameter after the procedure is exited successfully and control returns to the anonymous block.</p>
<div id="LNPLS696" class="example">
<p class="titleinexample"><a id="CIHJIDAB"></a>Example 8-18 Aliasing from Same Actual Parameter for Multiple Formal Parameters</p>
<pre dir="ltr">
DECLARE
  n NUMBER := 10;

  PROCEDURE p (
    n1 IN NUMBER,
    n2 IN OUT NUMBER,
    n3 IN OUT NOCOPY NUMBER
  ) IS
  BEGIN
    n2 := 20;  <span class="bold">-- actual parameter is 20 only after procedure succeeds</span>
    DBMS_OUTPUT.put_line(n1);  <span class="bold">-- actual parameter value is still 10</span>
    n3 := 30;  <span class="bold">-- might change actual parameter immediately</span>
    DBMS_OUTPUT.put_line(n1);  <span class="bold">-- actual parameter value is either 10 or 30</span>
  END;

BEGIN
  p(n, n, n);
  DBMS_OUTPUT.put_line(n);
END;
/
</pre>
<p>Result if the compiler obeys the <code dir="ltr">NOCOPY</code> hint:</p>
<pre dir="ltr">
10
30
20
</pre>
<p>Result if the compiler ignores the <code dir="ltr">NOCOPY</code> hint:</p>
<pre dir="ltr">
10
10
30
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CHDEBECB"></a>
<div id="LNPLS99891" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Subprogram Parameter Aliasing with Cursor Variable Parameters</h4>
<p>Cursor variable parameters are pointers. Therefore, if a subprogram assigns one cursor variable parameter to another, they refer to the same memory location. This aliasing can have unintended results.</p>
<p>In <a href="#CIHBIFGC">Example 8-19</a>, the procedure has two cursor variable parameters, <code dir="ltr">emp_cv1</code> and <code dir="ltr">emp_cv2</code>. The procedure opens <code dir="ltr">emp_cv1</code> and assigns its value (which is a pointer) to <code dir="ltr">emp_cv2</code>. Now <code dir="ltr">emp_cv1</code> and <code dir="ltr">emp_cv2</code> refer to the same memory location. When the procedure closes <code dir="ltr">emp_cv1</code>, it also closes <code dir="ltr">emp_cv2</code>. Therefore, when the procedure tries to fetch from <code dir="ltr">emp_cv2</code>, PL/SQL raises an exception.</p>
<div id="LNPLS697" class="example">
<p class="titleinexample"><a id="CIHBIFGC"></a>Example 8-19 Aliasing from Cursor Variable Subprogram Parameters</p>
<pre dir="ltr">
DECLARE
  TYPE EmpCurTyp IS REF CURSOR;
  c1 EmpCurTyp;
  c2 EmpCurTyp;

  PROCEDURE get_emp_data (
    emp_cv1 IN OUT EmpCurTyp,
    emp_cv2 IN OUT EmpCurTyp
  )
  IS
    emp_rec employees%ROWTYPE;
  BEGIN
    OPEN emp_cv1 FOR SELECT * FROM employees;
    <span class="bold">emp_cv2 := emp_cv1;  -- now both variables refer to same location</span>
    FETCH emp_cv1 INTO emp_rec;  -- fetches first row of employees
    FETCH emp_cv1 INTO emp_rec;  -- fetches second row of employees
    FETCH emp_cv2 INTO emp_rec;  -- fetches third row of employees
    <span class="bold">CLOSE emp_cv1;  -- closes both variables</span>
    <span class="bold">FETCH emp_cv2 INTO emp_rec; -- causes error when get_emp_data is invoked</span>
  END;
BEGIN
  get_emp_data(c1, c2);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
DECLARE
*
ERROR at line 1:
ORA-01001: invalid cursor
ORA-06512: at line 19
ORA-06512: at line 22
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i6821"></a>
<div id="LNPLS666" class="sect2">
<h3 class="sect2">Default Values for IN Subprogram Parameters</h3>
<p>When you declare a formal <code dir="ltr">IN</code> parameter, you can specify a <a id="sthref688"></a>default value for it. A formal parameter with a default value is called an <a id="sthref689"></a><span class="bold">optional parameter</span>, because its corresponding actual parameter is optional in a subprogram invocation. If the actual parameter is omitted, then the invocation assigns the default value to the formal parameter. A formal parameter with no default value is called a <a id="sthref690"></a><span class="bold">required parameter</span>, because its corresponding actual parameter is required in a subprogram invocation.</p>
<p>Omitting an actual parameter does not make the value of the corresponding formal parameter <a id="sthref691"></a><code dir="ltr">NULL</code>. To make the value of a formal parameter <code dir="ltr">NULL</code>, specify <code dir="ltr">NULL</code> as either the default value or the actual parameter.</p>
<p>In <a href="#CIHICIAH">Example 8-20</a>, the procedure has one required parameter and two optional parameters.</p>
<div id="LNPLS667" class="example">
<p class="titleinexample"><a id="CIHICIAH"></a>Example 8-20 Procedure with Default Parameter Values</p>
<pre dir="ltr">
DECLARE
  PROCEDURE raise_salary (
    emp_id IN employees.employee_id%TYPE,
    amount IN employees.salary%TYPE <span class="bold">:= 100</span>,
    extra  IN employees.salary%TYPE <span class="bold">:= 50</span>
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + amount + extra
    WHERE employee_id = emp_id;
  END raise_salary;
 
BEGIN
  raise_salary(120);       -- same as raise_salary(120, <span class="bold">100</span>, <span class="bold">50</span>)
  raise_salary(121, 200);  -- same as raise_salary(121, 200, <span class="bold">50</span>)
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CIHICIAH">Example 8-20</a>, the procedure invocations specify the actual parameters in the same order as their corresponding formal parameters are declared&mdash;that is, the invocations use positional notation. Positional notation does not let you omit the second parameter of <code dir="ltr">raise_salary</code> but specify the third; to do that, you must use either named or mixed notation. For more information, see <a href="#i4072">"Positional, Named, and Mixed Notation for Actual Parameters"</a>.</p>
<p>The default value of a formal parameter can be any expression whose value can be assigned to the parameter; that is, the value and parameter must have compatible data types. If a subprogram invocation specifies an actual parameter for the formal parameter, then that invocation does not evaluate the default value.</p>
<p>In <a href="#g1782475">Example 8-21</a>, the procedure <code dir="ltr">p</code> has a parameter whose default value is an invocation of the function <code dir="ltr">f</code>. The function <code dir="ltr">f</code> increments the value of a global variable. When <code dir="ltr">p</code> is invoked without an actual parameter, <code dir="ltr">p</code> invokes <code dir="ltr">f</code>, and <code dir="ltr">f</code> increments the global variable. When <code dir="ltr">p</code> is invoked with an actual parameter, <code dir="ltr">p</code> does not invoke <code dir="ltr">f</code>, and value of the global variable does not change.</p>
<div id="LNPLS668" class="example">
<p class="titleinexample"><a id="g1782475"></a>Example 8-21 Function Provides Default Parameter Value</p>
<pre dir="ltr">
DECLARE
  global PLS_INTEGER := 0;
 
  FUNCTION f RETURN PLS_INTEGER IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Inside f.');
    global := global + 1;
    RETURN global * 2;
  END f;
 
  PROCEDURE p (
    <span class="bold">x IN PLS_INTEGER := f()</span>
  ) IS
  BEGIN  
    DBMS_OUTPUT.PUT_LINE (
      'Inside p. ' || 
      '  global = ' || global ||
      ', x = ' || x || '.'
    );
    DBMS_OUTPUT.PUT_LINE('--------------------------------');
  END p;
 
  PROCEDURE pre_p IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE (
     'Before invoking p,  global = ' || global || '.'
    );
    DBMS_OUTPUT.PUT_LINE('Invoking p.');
  END pre_p;
 
BEGIN
  pre_p;
  <span class="bold">p();     -- default expression is evaluated</span>
 
  pre_p;
  <span class="bold">p(100);  -- default expression is not evaluated</span>
 
  pre_p;
  <span class="bold">p();     -- default expression is evaluated</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Before invoking p,  global = 0.
Invoking p.
<span class="bold">Inside f.</span>
Inside p.   global = 1, x = 2.
--------------------------------
Before invoking p,  global = 1.
Invoking p.
Inside p.   global = 1, x = 100.
--------------------------------
Before invoking p,  global = 1.
Invoking p.
<span class="bold">Inside f.</span>
Inside p.   global = 2, x = 4.
--------------------------------
</pre></div>
<!-- class="example" -->
<p><a href="#CHDHECGF">Example 8-22</a> creates a procedure with two required parameters, invokes it, and then adds a third, optional parameter. Because the third parameter is optional, the original invocation remains valid.</p>
<div id="LNPLS582" class="example">
<p class="titleinexample"><a id="CHDHECGF"></a>Example 8-22 Adding Subprogram Parameter Without Changing Existing Invocations</p>
<p>Create procedure:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE print_name (
  first VARCHAR2,
  last VARCHAR2
) IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(first || ' ' || last);
END print_name;
/
</pre>
<p>Invoke procedure:</p>
<pre dir="ltr">
BEGIN
  print_name('John', 'Doe');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
John Doe
</pre>
<p>Add third parameter with default value:</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE print_name (
  first VARCHAR2,
  last VARCHAR2,
  <span class="bold">mi   VARCHAR2 := NULL</span>
) IS
BEGIN
  IF mi IS NULL THEN
    DBMS_OUTPUT.PUT_LINE(first || ' ' || last);
  ELSE
    DBMS_OUTPUT.PUT_LINE(first || ' ' || mi || '. ' || last);
  END IF;
END print_name;
/
</pre>
<p>Invoke procedure:</p>
<pre dir="ltr">
BEGIN
  print_name('John', 'Doe');          <span class="bold">-- original invocation</span>
  print_name('John', 'Public', 'Q');  <span class="bold">-- new invocation</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
John Doe
John Q. Public
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="i4072"></a>
<div id="LNPLS00825" class="sect2">
<h3 class="sect2">Positional, Named, and Mixed Notation for Actual Parameters</h3>
<p>When invoking a subprogram, you can specify the actual parameters using either <a id="sthref692"></a>positional, <a id="sthref693"></a>named, or <a id="sthref694"></a>mixed notation. <a href="#CHDBDFEH">Table 8-2</a> summarizes and compares these notations.</p>
<div id="LNPLS584" class="tblformal">
<p class="titleintable"><a id="sthref695"></a><a id="CHDBDFEH"></a>Table 8-2 PL/SQL Actual Parameter Notations</p>
<table class="cellalignment1092" title="PL/SQL Actual Parameter Notations" summary="This table summarizes and compares the PL/SQL subprogram parameter notations." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t19">Positional</th>
<th class="cellalignment1090" id="r1c2-t19">Named</th>
<th class="cellalignment1090" id="r1c3-t19">Mixed</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t19" headers="r1c1-t19">
<p>Specify the actual parameters in the same order as the formal parameters are declared.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t19 r1c2-t19">
<p>Specify the actual parameters in any order, using this syntax:</p>
<pre dir="ltr">
<span class="italic">formal</span> =&gt; <span class="italic">actual</span>
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">formal</span></code> is the name of the formal parameter and <code dir="ltr"><span class="codeinlineitalic">actual</span></code> is the actual parameter.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t19 r1c3-t19">
<p>Start with positional notation, then use named notation for the remaining parameters.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t19" headers="r1c1-t19">
<p>You can omit trailing optional parameters.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t19 r1c2-t19">
<p>You can omit any optional parameters.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t19 r1c3-t19">
<p>In the positional notation, you can omit trailing optional parameters; in the named notation, you can omit any optional parameters.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t19" headers="r1c1-t19">
<p>Specifying actual parameters in the wrong order can cause problems that are hard to detect, especially if the actual parameters are literals.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t19 r1c2-t19">
<p>There is no wrong order for specifying actual parameters.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t19 r1c3-t19">
<p>In the positional notation, the wrong order can cause problems that are hard to detect, especially if the actual parameters are literals.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t19" headers="r1c1-t19">
<p>Subprogram invocations must change if the formal parameter list changes, unless the list only acquires new trailing optional parameters (as in <a href="#CHDHECGF">Example 8-22</a>).</p>
</td>
<td class="cellalignment1091" headers="r5c1-t19 r1c2-t19">
<p>Subprogram invocations must change only if the formal parameter list acquires new required parameters.</p>
</td>
<td class="cellalignment1091" headers="r5c1-t19 r1c3-t19">
<p>Changes to the formal parameter list might require changes in the positional notation.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r6c1-t19" headers="r1c1-t19">&nbsp;</td>
<td class="cellalignment1091" headers="r6c1-t19 r1c2-t19">
<p>Recommended when you invoke a subprogram defined or maintained by someone else.</p>
</td>
<td class="cellalignment1091" headers="r6c1-t19 r1c3-t19">
<p>Convenient when you invoke a subprogram that has required parameters followed by optional parameters, and you must specify only a few of the optional parameters.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In <a href="#CIHHBJDE">Example 8-23</a>, the procedure invocations use different notations, but are equivalent.</p>
<div id="LNPLS670" class="example">
<p class="titleinexample"><a id="CIHHBJDE"></a>Example 8-23 Equivalent Invocations with Different Notations in Anonymous Block</p>
<pre dir="ltr">
DECLARE
  emp_num NUMBER(6) := 120;
  bonus   NUMBER(6) := 50;

  PROCEDURE raise_salary (
    emp_id NUMBER,
    amount NUMBER
  ) IS
  BEGIN
    UPDATE employees
    SET salary = salary + amount
    WHERE employee_id = emp_id;
  END raise_salary;

BEGIN
  <span class="bold">-- Equivalent invocations:</span>

  raise_salary(emp_num, bonus);                      <span class="bold">-- positional notation</span>
  raise_salary(amount =&gt; bonus, emp_id =&gt; emp_num);  <span class="bold">-- named notation</span>
  raise_salary(emp_id =&gt; emp_num, amount =&gt; bonus);  <span class="bold">-- named notation</span>
  raise_salary(emp_num, amount =&gt; bonus);            <span class="bold">-- mixed notation</span>
END;
/
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDDBJGC">Example 8-24</a>, the SQL <code dir="ltr">SELECT</code> statements invoke the PL/SQL function <code dir="ltr">compute_bonus</code>, using equivalent invocations with different notations.</p>
<div id="LNPLS585" class="example">
<p class="titleinexample"><a id="CHDDBJGC"></a>Example 8-24 Equivalent Invocations with Different Notations in SELECT Statements</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION compute_bonus (
  emp_id NUMBER,
  bonus NUMBER
)  RETURN NUMBER
IS
  emp_sal NUMBER;
BEGIN
  SELECT salary INTO emp_sal
  FROM employees
  WHERE employee_id = emp_id;

  RETURN emp_sal + bonus;
END compute_bonus;
/
SELECT compute_bonus(120, 50) FROM DUAL;                   <span class="bold">-- positional</span>
SELECT compute_bonus(bonus =&gt; 50, emp_id =&gt; 120) FROM DUAL; <span class="bold">-- named</span>
SELECT compute_bonus(120, bonus =&gt; 50) FROM DUAL;           <span class="bold">-- mixed</span>
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i17794"></a>
<div id="LNPLS00808" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Subprogram Invocation Resolution</h2>
<p>When the PL/SQL compiler encounters a <a id="sthref696"></a>subprogram invocation, it searches for a matching subprogram declaration&mdash;first in the current scope and then, if necessary, in successive enclosing scopes.</p>
<p>A declaration and invocation match if their subprogram names and parameter lists match. The parameter lists match if each required formal parameter in the declaration has a corresponding actual parameter in the invocation.</p>
<p>If the compiler finds no matching declaration for an invocation, then it generates a semantic error.</p>
<p><a href="#i19285">Figure 8-1</a> shows how the PL/SQL compiler resolves a subprogram invocation.</p>
<div id="LNPLS680" class="figure">
<p class="titleinfigure"><a id="i19285"></a>Figure 8-1 How PL/SQL Compiler Resolves Invocations</p>
<img width="319" height="633" src="img/lnpls012.gif" alt="Description of Figure 8-1 follows" /><br />
<a id="sthref697" href="img_text/lnpls012.htm">Description of "Figure 8-1 How PL/SQL Compiler Resolves Invocations"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#CHDECFCH">Example 8-25</a>, the function <code dir="ltr">balance</code> tries to invoke the enclosing procedure <code dir="ltr">swap</code>, using appropriate actual parameters. However, <code dir="ltr">balance</code> contains two nested procedures named <code dir="ltr">swap</code>, and neither has parameters of the same type as the enclosing procedure <code dir="ltr">swap</code>. Therefore, the invocation causes compilation error PLS-00306.</p>
<div id="LNPLS681" class="example">
<p class="titleinexample"><a id="CHDECFCH"></a>Example 8-25 Resolving PL/SQL Procedure Names</p>
<pre dir="ltr">
DECLARE
  PROCEDURE swap (
    n1 NUMBER,
    n2 NUMBER
  )
  IS
    <span class="bold">num1 NUMBER;</span>
    <span class="bold">num2 NUMBER;</span>

    FUNCTION balance
      (bal NUMBER)
      RETURN NUMBER
    IS
      x NUMBER := 10;

      PROCEDURE swap (
        d1 DATE,
        d2 DATE
      ) IS
      BEGIN
        NULL;
      END;

      PROCEDURE swap (
        b1 BOOLEAN,
        b2 BOOLEAN
      ) IS
      BEGIN
        NULL;
      END;

    BEGIN  -- balance
      <span class="bold">swap(num1, num2);</span>
      RETURN x;
    END balance;

  BEGIN  -- enclosing procedure swap
    NULL;
  END swap;

BEGIN  -- anonymous block
  NULL;
END;   -- anonymous block
/
</pre>
<p>Result:</p>
<pre dir="ltr">
      swap(num1, num2);
      *
ERROR at line 33:
ORA-06550: line 33, column 7:
PLS-00306: wrong number or types of arguments in call to 'SWAP'
ORA-06550: line 33, column 7:
PL/SQL: Statement ignored
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="i12352"></a>
<div id="LNPLS00807" class="sect1">
<h2 class="sect1">Overloaded Subprograms</h2>
<p>PL/SQL lets you <a id="sthref698"></a>overload nested subprograms, package subprograms, and type methods. You can use the same name for several different subprograms if their formal parameters differ in name, number, order, or data type family. (A <a id="sthref699"></a><span class="bold">data type family</span> is a data type and its subtypes. For the data type families of predefined PL/SQL data types, see <a href="predefined.htm#CJAEFDAD">Appendix E, "PL/SQL Predefined Data Types"</a>. For information about user-defined PL/SQL subtypes, see <a href="datatypes.htm#CHDEAFDJ">"User-Defined PL/SQL Subtypes"</a>.) If formal parameters differ only in name, then you must use named notation to specify the corresponding actual parameters. (For information about named notation, see <a href="#i4072">"Positional, Named, and Mixed Notation for Actual Parameters"</a>.)</p>
<p><a href="#CIHFCEBD">Example 8-26</a> defines two subprograms with the same name, <code dir="ltr">initialize</code>. The procedures initialize different types of collections. Because the processing in the procedures is the same, it is logical to give them the same name.</p>
<p>You can put the two <code dir="ltr">initialize</code> procedures in the same block, subprogram, package, or type body. PL/SQL determines which procedure to invoke by checking their formal parameters. The version of <code dir="ltr">initialize</code> that PL/SQL uses depends on whether you invoke the procedure with a <code dir="ltr">date_tab_typ</code> or <code dir="ltr">num_tab_typ</code> parameter.</p>
<div id="LNPLS671" class="example">
<p class="titleinexample"><a id="CIHFCEBD"></a>Example 8-26 Overloaded Subprogram</p>
<pre dir="ltr">
DECLARE
  TYPE date_tab_typ IS TABLE OF DATE   INDEX BY PLS_INTEGER;
  TYPE num_tab_typ  IS TABLE OF NUMBER INDEX BY PLS_INTEGER;

  hiredate_tab  date_tab_typ;
  sal_tab       num_tab_typ;

  PROCEDURE initialize (tab OUT <span class="bold">date_tab_typ</span>, n INTEGER) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Invoked first version');
    FOR i IN 1..n LOOP
      tab(i) := SYSDATE;
    END LOOP;
  END initialize;

  PROCEDURE initialize (tab OUT <span class="bold">num_tab_typ</span>, n INTEGER) IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Invoked second version');
    FOR i IN 1..n LOOP
      tab(i) := 0.0;
    END LOOP;
  END initialize;

BEGIN
  <span class="bold">initialize(hiredate_tab, 50);</span>
  <span class="bold">initialize(sal_tab, 100);</span>
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
<span class="bold">Invoked first version</span>
<span class="bold">Invoked second version</span>
</pre></div>
<!-- class="example" -->
<p>For an example of an overloaded procedure in a package, see <a href="packages.htm#CJAIICFE">Example 10-8</a>.</p>
<p class="subhead2"><a id="LNPLS586"></a>Topics</p>
<ul>
<li>
<p><a href="#i23492">Formal Parameters that Differ Only in Numeric Data Type</a></p>
</li>
<li>
<p><a href="#BABJJIAD">Subprograms that You Cannot Overload</a></p>
</li>
<li>
<p><a href="#BABCFIJD">Subprogram Overload Errors</a></p>
</li>
</ul>
<a id="i23492"></a>
<div id="LNPLS672" class="sect2">
<h3 class="sect2">Formal Parameters that Differ Only in Numeric Data Type</h3>
<p>You can overload subprograms if their formal parameters differ only in numeric data type. This technique is useful in writing mathematical application programming interfaces (APIs), because several versions of a function can use the same name, and each can accept a different numeric type. For example, a function that accepts <code dir="ltr">BINARY_FLOAT</code> might be faster, while a function that accepts <code dir="ltr">BINARY_DOUBLE</code> might be more precise.</p>
<p>To avoid problems or unexpected results when passing parameters to such overloaded subprograms:</p>
<ul>
<li>
<p>Ensure that the expected version of a subprogram is invoked for each set of expected parameters.</p>
<p>For example, if you have overloaded functions that accept <code dir="ltr">BINARY_FLOAT</code> and <code dir="ltr">BINARY_DOUBLE</code>, which is invoked if you pass a <code dir="ltr">VARCHAR2</code> literal like <code dir="ltr">'5.0'</code>?</p>
</li>
<li>
<p>Qualify numeric literals and use conversion functions to make clear what the intended parameter types are.</p>
<p>For example, use literals such as <code dir="ltr">5.0f</code> (for <code dir="ltr">BINARY_FLOAT</code>), <code dir="ltr">5.0d</code> (for <code dir="ltr">BINARY_DOUBLE</code>), or conversion functions such as <code dir="ltr">TO_BINARY_FLOAT</code>, <code dir="ltr">TO_BINARY_DOUBLE</code>, and <code dir="ltr">TO_NUMBER</code>.</p>
</li>
</ul>
<p>PL/SQL looks for matching numeric parameters in this order:</p>
<ol>
<li>
<p><code dir="ltr">PLS_INTEGER</code> (or <code dir="ltr">BINARY_INTEGER</code>, an identical data type)</p>
</li>
<li>
<p><code dir="ltr">NUMBER</code></p>
</li>
<li>
<p><code dir="ltr">BINARY_FLOAT</code></p>
</li>
<li>
<p><code dir="ltr">BINARY_DOUBLE</code></p>
</li>
</ol>
<p>A <code dir="ltr">VARCHAR2</code> value can match a <code dir="ltr">NUMBER</code>, <code dir="ltr">BINARY_FLOAT</code>, or <code dir="ltr">BINARY_DOUBLE</code> parameter.</p>
<p>PL/SQL uses the first overloaded subprogram that matches the supplied parameters. For example, the <code dir="ltr">SQRT</code> function takes a single parameter. There are overloaded versions that accept a <code dir="ltr">NUMBER</code>, a <code dir="ltr">BINARY_FLOAT</code>, or a <code dir="ltr">BINARY_DOUBLE</code> parameter. If you pass a <code dir="ltr">PLS_INTEGER</code> parameter, the first matching overload is the one with a <code dir="ltr">NUMBER</code> parameter.</p>
<p>The <code dir="ltr">SQRT</code> function that takes a <code dir="ltr">NUMBER</code> parameter is likely to be slowest. To use a faster version, use the <code dir="ltr">TO_BINARY_FLOAT</code> or <code dir="ltr">TO_BINARY_DOUBLE</code> function to convert the parameter to another data type before passing it to the <code dir="ltr">SQRT</code> function.</p>
<p>If PL/SQL must convert a parameter to another data type, it first tries to convert it to a higher data type. For example:</p>
<ul>
<li>
<p>The <code dir="ltr">ATAN2</code> function takes two parameters of the same type. If you pass parameters of different types&mdash;for example, one <code dir="ltr">PLS_INTEGER</code> and one <code dir="ltr">BINARY_FLOAT</code>&mdash;PL/SQL tries to find a match where both parameters use the higher type. In this case, that is the version of <code dir="ltr">ATAN2</code> that takes two <code dir="ltr">BINARY_FLOAT</code> parameters; the <code dir="ltr">PLS_INTEGER</code> parameter is converted upwards.</p>
</li>
<li>
<p>A function takes two parameters of different types. One overloaded version takes a <code dir="ltr">PLS_INTEGER</code> and a <code dir="ltr">BINARY_FLOAT</code> parameter. Another overloaded version takes a <code dir="ltr">NUMBER</code> and a <code dir="ltr">BINARY_DOUBLE</code> parameter. If you invoke this function and pass two <code dir="ltr">NUMBER</code> parameters, PL/SQL first finds the overloaded version where the second parameter is <code dir="ltr">BINARY_FLOAT</code>. Because this parameter is a closer match than the <code dir="ltr">BINARY_DOUBLE</code> parameter in the other overload, PL/SQL then looks downward and converts the first <code dir="ltr">NUMBER</code> parameter to <code dir="ltr">PLS_INTEGER</code>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABJJIAD"></a>
<div id="LNPLS673" class="sect2">
<h3 class="sect2">Subprograms that You Cannot Overload</h3>
<p>You cannot overload these subprograms:</p>
<ul>
<li>
<p>Standalone subprograms</p>
</li>
<li>
<p>Subprograms whose formal parameters differ only in mode; for example:</p>
<pre dir="ltr">
PROCEDURE s (p <span class="bold">IN</span>  VARCHAR2) IS ...
PROCEDURE s (p <span class="bold">OUT</span> VARCHAR2) IS ...
</pre></li>
<li>
<p>Subprograms whose formal parameters differ only in subtype; for example:</p>
<pre dir="ltr">
PROCEDURE s (p <span class="bold">INTEGER</span>) IS ...
PROCEDURE s (p <span class="bold">REAL</span>) IS ...
</pre>
<p><code dir="ltr">INTEGER</code> and <code dir="ltr">REAL</code> are subtypes of <code dir="ltr">NUMBER</code>, so they belong to the same data type family.</p>
</li>
<li>
<p>Functions that differ only in return value data type, even if the data types are in different families; for example:</p>
<pre dir="ltr">
FUNCTION f (p INTEGER) RETURN <span class="bold">BOOLEAN</span> IS ...
FUNCTION f (p INTEGER) RETURN <span class="bold">INTEGER</span> IS ...
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCFIJD"></a>
<div id="LNPLS674" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Subprogram Overload Errors</h3>
<p>The PL/SQL compiler catches overload errors as soon as it determines that it cannot tell which subprogram was invoked. When subprograms have identical headings, the compiler catches the overload error when you try to compile the subprograms themselves (if they are nested) or when you try to compile the package specification that declares them. Otherwise, the compiler catches the error when you try to compile an ambiguous invocation of a subprogram.</p>
<p>When you try to compile the package specification in <a href="#BABHJBBI">Example 8-27</a>, which declares subprograms with identical headings, you get compile-time error PLS-00305.</p>
<div id="LNPLS675" class="example">
<p class="titleinexample"><a id="BABHJBBI"></a>Example 8-27 Overload Error Causes Compile-Time Error</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pkg1 IS
  PROCEDURE s (p VARCHAR2);
  PROCEDURE s (p VARCHAR2);
END pkg1;
/
</pre></div>
<!-- class="example" -->
<p>Although the package specification in <a href="#BABEHEGI">Example 8-28</a> violates the rule that you cannot overload subprograms whose formal parameters differ only in subtype, you can compile it without error.</p>
<div id="LNPLS676" class="example">
<p class="titleinexample"><a id="BABEHEGI"></a>Example 8-28 Overload Error Compiles Successfully</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pkg2 IS
  SUBTYPE t1 IS VARCHAR2(10);
  SUBTYPE t2 IS VARCHAR2(10);
  PROCEDURE s (p <span class="bold">t1</span>);
  PROCEDURE s (p <span class="bold">t2</span>);
END pkg2;
/
</pre></div>
<!-- class="example" -->
<p>However, when you try to compile an invocation of <code dir="ltr">pkg2</code>.<code dir="ltr">s</code>, as in <a href="#BABEBCCA">Example 8-29</a>, you get compile-time error PLS-00307.</p>
<div id="LNPLS677" class="example">
<p class="titleinexample"><a id="BABEBCCA"></a>Example 8-29 Invoking Subprogram in <a href="#BABEHEGI">Example 8-28</a> Causes Compile-Time Error</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p IS
  a pkg2.t1 := 'a';
BEGIN
  <span class="bold">pkg2.s(a);  -- Causes compile-time error PLS-00307</span>
END p;
/
</pre></div>
<!-- class="example" -->
<p>Suppose that you correct the overload error in <a href="#BABEHEGI">Example 8-28</a> by giving the formal parameters of the overloaded subprograms different names, as in <a href="#CIHBEGCB">Example 8-30</a>.</p>
<div id="LNPLS587" class="example">
<p class="titleinexample"><a id="CIHBEGCB"></a>Example 8-30 Correcting Overload Error in <a href="#BABEHEGI">Example 8-28</a></p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pkg2 IS
  SUBTYPE t1 IS VARCHAR2(10);
  SUBTYPE t2 IS VARCHAR2(10);
  PROCEDURE s (<span class="bold">p1</span> t1);
  PROCEDURE s (<span class="bold">p2</span> t2);
END pkg2;
/
</pre></div>
<!-- class="example" -->
<p>Now you can compile an invocation of <code dir="ltr">pkg2</code>.<code dir="ltr">s</code> without error if you specify the actual parameter with named notation, as in <a href="#CIHEEDIJ">Example 8-31</a>. (If you specify the actual parameter with positional notation, as in <a href="#BABEBCCA">Example 8-29</a>, you still get compile-time error PLS-00307.)</p>
<div id="LNPLS588" class="example">
<p class="titleinexample"><a id="CIHEEDIJ"></a>Example 8-31 Invoking Subprogram in <a href="#CIHBEGCB">Example 8-30</a></p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p IS
  a pkg2.t1 := 'a';
BEGIN
  <span class="bold">pkg2.s(p1=&gt;a);  -- Compiles without error</span>
END p;
/
</pre></div>
<!-- class="example" -->
<p>The package specification in <a href="#BABJDDCJ">Example 8-32</a> violates no overload rules and compiles without error. However, you can still get compile-time error PLS-00307 when invoking its overloaded procedure, as in the second invocation in <a href="#BABHCIFC">Example 8-33</a>.</p>
<div id="LNPLS678" class="example">
<p class="titleinexample"><a id="BABJDDCJ"></a>Example 8-32 Package Specification Without Overload Errors</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pkg3 IS
  PROCEDURE s (p1 VARCHAR2);
  PROCEDURE s (p1 VARCHAR2, p2 VARCHAR2 := 'p2');
END pkg3;
/
</pre></div>
<!-- class="example" -->
<div id="LNPLS679" class="example">
<p class="titleinexample"><a id="BABHCIFC"></a>Example 8-33 Improper Invocation of Properly Overloaded Subprogram</p>
<pre dir="ltr">
CREATE OR REPLACE PROCEDURE p IS
  a1 VARCHAR2(10) := 'a1';
  a2 VARCHAR2(10) := 'a2';
BEGIN
  <span class="bold">pkg3.s(p1=&gt;a1, p2=&gt;a2);  -- Compiles without error</span>
  <span class="bold">pkg3.s(p1=&gt;a1);          -- Causes compile-time error PLS-00307</span>
END p;
/
</pre></div>
<!-- class="example" -->
<p>When trying to determine which subprogram was invoked, if the PL/SQL compiler implicitly converts one parameter to a matching type, then the compiler looks for other parameters that it can <a id="sthref700"></a>implicitly convert to matching types. If there is more than one match, then compile-time error PLS-00307 occurs, as in <a href="#CHDICIIG">Example 8-34</a>.</p>
<div id="LNPLS1966" class="example">
<p class="titleinexample"><a id="CHDICIIG"></a>Example 8-34 Implicit Conversion of Parameters Causes Overload Error</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE pack1 AUTHID DEFINER AS
  PROCEDURE proc1 (a NUMBER, b VARCHAR2);
  PROCEDURE proc1 (a NUMBER, b NUMBER);
END;
/
CREATE OR REPLACE PACKAGE BODY pack1 AS
  PROCEDURE proc1 (a NUMBER, b VARCHAR2) IS BEGIN NULL; END;
  PROCEDURE proc1 (a NUMBER, b NUMBER) IS BEGIN NULL; END;
END;
/
BEGIN
  <span class="bold">pack1.proc1(1,'2');    -- Compiles without error</span>
  <span class="bold">pack1.proc1(1,2);      -- Compiles without error</span>
  <span class="bold">pack1.proc1('1','2');  -- Causes compile-time error PLS-00307</span>
  <span class="bold">pack1.proc1('1',2);    -- Causes compile-time error PLS-00307</span>
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i2884"></a>
<div id="LNPLS00810" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Recursive Subprograms</h2>
<p>A <a id="sthref701"></a><span class="bold">recursive subprogram</span> invokes itself. Recursion is a powerful technique for simplifying an algorithm.</p>
<p>A recursive subprogram must have at least two execution paths&mdash;one leading to the recursive invocation and one leading to a terminating condition. Without the latter, recursion continues until PL/SQL runs out of memory and raises the predefined exception <a id="sthref702"></a><code dir="ltr">STORAGE_ERROR</code>.</p>
<p>In <a href="#CHDGEBJC">Example 8-35</a>, the function implements the following recursive definition of <span class="italic">n</span> factorial (<span class="italic">n!</span>), the product of all integers from 1 to <span class="italic">n</span>:</p>
<pre dir="ltr">
n! = n * (n - 1)!
</pre>
<div id="LNPLS590" class="example">
<p class="titleinexample"><a id="CHDGEBJC"></a>Example 8-35 Recursive Function Returns n Factorial (n!)</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION factorial (
  n POSITIVE
) RETURN POSITIVE
IS
BEGIN
  IF <span class="bold">n = 1</span> THEN                 <span class="bold">-- terminating condition</span>
    RETURN n;
  ELSE
    RETURN n * <span class="bold">factorial(n-1</span>);  <span class="bold">-- recursive invocation</span>
  END IF;
END;
/
BEGIN
  FOR i IN 1..5 LOOP
    DBMS_OUTPUT.PUT_LINE(i || '! = ' || <span class="bold">factorial(i)</span>);
  END LOOP;
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
1! = 1
2! = 2
3! = 6
4! = 24
5! = 120
</pre></div>
<!-- class="example" -->
<p>In <a href="#CHDBEFAJ">Example 8-36</a>, the function returns the <span class="italic">n</span>th Fibonacci number, which is the sum of the <span class="italic">n</span>-1st and <span class="italic">n</span>-2nd Fibonacci numbers. The first and second Fibonacci numbers are zero and one, respectively.</p>
<div id="LNPLS591" class="example">
<p class="titleinexample"><a id="CHDBEFAJ"></a>Example 8-36 Recursive Function Returns nth Fibonacci Number</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION fibonacci (
  n PLS_INTEGER
) RETURN PLS_INTEGER
IS
  fib_1 PLS_INTEGER := 0;
  fib_2 PLS_INTEGER := 1;
BEGIN
  IF <span class="bold">n = 1</span> THEN                              <span class="bold">-- terminating condition</span>
    RETURN fib_1;
  ELSIF <span class="bold">n = 2</span> THEN
    RETURN fib_2;                           <span class="bold">-- terminating condition</span>
  ELSE
    RETURN <span class="bold">fibonacci(n-2)</span> + <span class="bold">fibonacci(n-1)</span>;  <span class="bold">-- recursive invocations</span>
  END IF;
END;
/
BEGIN
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT(<span class="bold">fibonacci(i)</span>);
    IF i &lt; 10 THEN
      DBMS_OUTPUT.PUT(', ');
    END IF;
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE(' ...');
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ...
</pre></div>
<!-- class="example" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The function in <a href="#CHDBEFAJ">Example 8-36</a> is a good candidate for result caching. For more information, see <a href="#BABFGHGF">"Result-Cached Recursive Function"</a>.</div>
<p>Each recursive invocation of a subprogram creates an instance of each item that the subprogram declares and each SQL statement that it executes.</p>
<p>A recursive invocation inside a <a id="sthref703"></a>cursor <code dir="ltr">FOR</code> <code dir="ltr">LOOP</code> statement, or between an <a id="sthref704"></a><code dir="ltr">OPEN</code> or <a id="sthref705"></a><code dir="ltr">OPEN</code> <code dir="ltr">FOR</code> statement and a <code dir="ltr">CLOSE</code> statement, opens another cursor at each invocation, which might cause the number of open cursors to exceed the limit set by the database initialization parameter <code dir="ltr">OPEN_CURSORS</code>.</p>
</div>
<!-- class="sect1" -->
<a id="i22204"></a>
<div id="LNPLS00814" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Subprogram Side Effects</h2>
<p>A subprogram has <a id="sthref706"></a>side effects if it changes anything except the values of its own local variables. For example, a subprogram that changes any of the following has side effects:</p>
<ul>
<li>
<p>Its own <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameter</p>
</li>
<li>
<p>A global variable</p>
</li>
<li>
<p>A public variable in a package</p>
</li>
<li>
<p>A database table</p>
</li>
<li>
<p>The database</p>
</li>
<li>
<p>The external state (by invoking <code dir="ltr">DBMS_OUTPUT</code> or sending e-mail, for example)</p>
</li>
</ul>
<p>Minimizing side effects is especially important when defining a result-cached function or a stored function for SQL statements to invoke.</p>
</div>
<!-- class="sect1" -->
<a id="BABFHACJ"></a>
<div id="LNPLS00817" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">PL/SQL Function Result Cache</h2>
<p><a id="sthref707"></a><a id="sthref708"></a><a id="sthref709"></a><a id="sthref710"></a>The PL/SQL function result caching mechanism provides a language-supported and system-managed way to cache the results of PL/SQL functions in a shared global area (SGA), which is available to every session that runs your application. The caching mechanism is both efficient and easy to use, and relieves you of the burden of designing and developing your own caches and cache-management policies.</p>
<p>When a result-cached function is invoked, the system checks the cache. If the cache contains the result from a previous invocation of the function with the same parameter values, the system returns the cached result to the invoker and does not reexecute the function body. If the cache does not contain the result, the system runs the function body and adds the result (for these parameter values) to the cache before returning control to the invoker.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If function execution results in an unhandled exception, the exception result is not stored in the cache.</div>
<p>The cache can accumulate very many results&mdash;one result for every unique combination of parameter values with which each result-cached function was invoked. If the system needs more memory, it <span class="bold">ages out</span> (deletes) one or more cached results.</p>
<p>Oracle Database automatically detects all data sources (tables and views) that are queried while a result-cached function is running. If changes to any of these data sources are committed, the cached result becomes invalid and must be recomputed. The best candidates for result-caching are functions that are invoked frequently but depend on information that changes infrequently or never.</p>
<p class="subhead2"><a id="LNPLS599"></a>Topics</p>
<ul>
<li>
<p><a href="#BABCDCFA">Enabling Result-Caching for a Function</a></p>
</li>
<li>
<p><a href="#g3294931">Developing Applications with Result-Cached Functions</a></p>
</li>
<li>
<p><a href="#g3335204">Restrictions on Result-Cached Functions</a></p>
</li>
<li>
<p><a href="#g3298100">Examples of Result-Cached Functions</a></p>
</li>
<li>
<p><a href="#g3336645">Advanced Result-Cached Function Topics</a></p>
</li>
</ul>
<a id="BABCDCFA"></a>
<div id="LNPLS698" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Enabling Result-Caching for a Function</h3>
<p>To make a function result-cached, include the <a id="sthref711"></a><code dir="ltr">RESULT_CACHE</code> clause in the function definition. (If you declare the function before defining it, you must also include the <code dir="ltr">RESULT_CACHE</code> option in the function declaration.) For syntax details, see <a href="function.htm#i34368">"Function Declaration and Definition"</a>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The database initialization parameter <code dir="ltr">RESULT_CACHE_MODE</code> <span class="italic">does</span> <span class="italic">not</span> make a PL/SQL function result-cached. However, when <code dir="ltr">RESULT_CACHE_MODE=FORCE</code>, the database stores the results of <span class="italic">all</span> <span class="italic">queries</span> in the SQL query result cache, including queries issued by PL/SQL code and queries that call nondeterministic PL/SQL functions.
<p>For information about <code dir="ltr">RESULT_CACHE_MODE</code>, see <a class="olink REFRN10270" href="../../server.112/e40402/initparams221.htm#REFRN10270"><span class="italic">Oracle Database Reference</span></a> and <a class="olink PFGRF979" href="../../server.112/e41573/memory.htm#PFGRF979"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
</div>
<p>In <a href="#g3307801">Example 8-37</a>, the package <code dir="ltr">department_pkg</code> declares and then defines a result-cached function, <code dir="ltr">get_dept_info</code>, which returns a record of information about a given department. The function depends on the database tables <code dir="ltr">DEPARTMENTS</code> and <code dir="ltr">EMPLOYEES</code>.</p>
<div id="LNPLS699" class="example">
<p class="titleinexample"><a id="g3307801"></a>Example 8-37 Declaring and Defining Result-Cached Function</p>
<pre dir="ltr">
CREATE OR REPLACE PACKAGE department_pkg IS
 
  TYPE dept_info_record IS RECORD (
    dept_name  departments.department_name%TYPE,
    mgr_name   employees.last_name%TYPE,
    dept_size  PLS_INTEGER
  );
 
  <span class="bold">-- Function declaration</span>
 
  FUNCTION get_dept_info (dept_id PLS_INTEGER)
    RETURN dept_info_record
    <span class="bold">RESULT_CACHE</span>;
 
END department_pkg;
/
CREATE OR REPLACE PACKAGE BODY department_pkg IS
  <span class="bold">-- Function definition</span>
  FUNCTION get_dept_info (dept_id PLS_INTEGER)
    RETURN dept_info_record
    <span class="bold">RESULT_CACHE RELIES_ON (DEPARTMENTS, EMPLOYEES)</span>
  IS
    rec  dept_info_record;
  BEGIN
    SELECT department_name INTO rec.dept_name
    FROM departments
    WHERE department_id = dept_id;
 
    SELECT e.last_name INTO rec.mgr_name
    FROM departments d, employees e
    WHERE d.department_id = dept_id
    AND d.manager_id = e.employee_id;
 
    SELECT COUNT(*) INTO rec.dept_size
    FROM EMPLOYEES
    WHERE department_id = dept_id;
 
    RETURN rec;
  END get_dept_info;
END department_pkg;
/
</pre></div>
<!-- class="example" -->
<p>You invoke the function <code dir="ltr">get_dept_info</code> as you invoke any function. For example, this invocation returns a record of information about department number 10:</p>
<pre dir="ltr">
department_pkg.get_dept_info(10);
</pre>
<p>This invocation returns only the name of department number 10:</p>
<pre dir="ltr">
department_pkg.get_dept_info(10).department_name;
</pre>
<p>If the result for <code dir="ltr">get_dept_info(10)</code> is in the result cache, the result is returned from the cache; otherwise, the result is computed and added to the cache. Because <code dir="ltr">get_dept_info</code> depends on the <code dir="ltr">DEPARTMENTS</code> and <code dir="ltr">EMPLOYEES</code> tables, any committed change to <code dir="ltr">DEPARTMENTS</code> or <code dir="ltr">EMPLOYEES</code> invalidates all cached results for <code dir="ltr">get_dept_info</code>, relieving you of programming cache invalidation logic everywhere that <code dir="ltr">DEPARTMENTS</code> or <code dir="ltr">EMPLOYEES</code> might change.</p>
</div>
<!-- class="sect2" -->
<a id="g3294931"></a>
<div id="LNPLS700" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Developing Applications with Result-Cached Functions</h3>
<p>When developing an application that uses a result-cached function, make no assumptions about the number of times the body of the function will run for a given set of parameter values.</p>
<p>Some situations in which the body of a result-cached function runs are:</p>
<ul>
<li>
<p>The first time a session on this database instance invokes the function with these parameter values</p>
</li>
<li>
<p>When the cached result for these parameter values is <span class="bold">invalid</span></p>
<p>When a change to any data source on which the function depends is committed, the cached result becomes invalid.</p>
</li>
<li>
<p>When the cached results for these parameter values have aged out</p>
<p>If the system needs memory, it might discard the oldest cached values.</p>
</li>
<li>
<p>When the function bypasses the cache (see <a href="#BABDGDCJ">"Result Cache Bypass"</a>)</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="g3335204"></a>
<div id="LNPLS701" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Restrictions on Result-Cached Functions</h3>
<p>To be result-cached, a function must meet all of these criteria:</p>
<ul>
<li>
<p>It is not defined in a module that has invoker's rights or in an anonymous block.</p>
</li>
<li>
<p>It is not a pipelined table function.</p>
</li>
<li>
<p>It does not reference dictionary tables, temporary tables, sequences, or nondeterministic SQL functions.</p>
<p>For more information, see <a class="olink PFGRF975" href="../../server.112/e41573/memory.htm#PFGRF975"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
</li>
<li>
<p>It has no <code dir="ltr">OUT</code> or <code dir="ltr">IN</code> <code dir="ltr">OUT</code> parameters.</p>
</li>
<li>
<p>No <code dir="ltr">IN</code> parameter has one of these types:</p>
<ul>
<li>
<p><code dir="ltr">BLOB</code></p>
</li>
<li>
<p><code dir="ltr">CLOB</code></p>
</li>
<li>
<p><code dir="ltr">NCLOB</code></p>
</li>
<li>
<p><code dir="ltr">REF</code> <code dir="ltr">CURSOR</code></p>
</li>
<li>
<p>Collection</p>
</li>
<li>
<p>Object</p>
</li>
<li>
<p>Record</p>
</li>
</ul>
</li>
<li>
<p>The return type is none of these:</p>
<ul>
<li>
<p><code dir="ltr">BLOB</code></p>
</li>
<li>
<p><code dir="ltr">CLOB</code></p>
</li>
<li>
<p><code dir="ltr">NCLOB</code></p>
</li>
<li>
<p><code dir="ltr">REF</code> <code dir="ltr">CURSOR</code></p>
</li>
<li>
<p>Object</p>
</li>
<li>
<p>Record or PL/SQL collection that contains an unsupported return type</p>
</li>
</ul>
</li>
</ul>
<p>It is recommended that a result-cached function also meet these criteria:</p>
<ul>
<li>
<p>It has no side effects.</p>
<p>For information about side effects, see <a href="#i22204">"Subprogram Side Effects"</a>.</p>
</li>
<li>
<p>It does not depend on session-specific settings.</p>
<p>For more information, see <a href="#g3336053">"Making Result-Cached Functions Handle Session-Specific Settings"</a>.</p>
</li>
<li>
<p>It does not depend on session-specific application contexts.</p>
<p>For more information, see <a href="#g3336065">"Making Result-Cached Functions Handle Session-Specific Application Contexts"</a>.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="g3298100"></a>
<div id="LNPLS702" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Examples of Result-Cached Functions</h3>
<p>The best candidates for result-caching are functions that are invoked frequently but depend on information that changes infrequently (as might be the case in the first example). Result-caching avoids redundant computations in recursive functions.</p>
<p>Examples:</p>
<ul>
<li>
<p><a href="#BABCCCIE">Result-Cached Application Configuration Parameters</a></p>
</li>
<li>
<p><a href="#BABFGHGF">Result-Cached Recursive Function</a></p>
</li>
</ul>
<a id="BABCCCIE"></a>
<div id="LNPLS703" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Result-Cached Application Configuration Parameters</h4>
<p>Consider an application that has configuration parameters that can be set at either the global level, the application level, or the role level. The application stores the configuration information in these tables:</p>
<pre dir="ltr">
-- Global Configuration Settings
DROP TABLE global_config_params;
CREATE TABLE global_config_params
  (name  VARCHAR2(20), -- parameter NAME
   val   VARCHAR2(20), -- parameter VALUE
   PRIMARY KEY (name)
  );

-- Application-Level Configuration Settings
CREATE TABLE app_level_config_params
  (app_id  VARCHAR2(20), -- application ID
   name    VARCHAR2(20), -- parameter NAME
   val     VARCHAR2(20), -- parameter VALUE
   PRIMARY KEY (app_id, name)
  );

-- Role-Level Configuration Settings
CREATE TABLE role_level_config_params
  (role_id  VARCHAR2(20), -- application (role) ID
   name     VARCHAR2(20),  -- parameter NAME
   val      VARCHAR2(20),  -- parameter VALUE
   PRIMARY KEY (role_id, name)
  );
</pre>
<p>For each configuration parameter, the role-level setting overrides the application-level setting, which overrides the global setting. To determine which setting applies to a parameter, the application defines the PL/SQL function <code dir="ltr">get_value</code>. Given a parameter name, application ID, and role ID, <code dir="ltr">get_value</code> returns the setting that applies to the parameter.</p>
<p>The function <code dir="ltr">get_value</code> is a good candidate for result-caching if it is invoked frequently and if the configuration information changes infrequently.</p>
<p><a href="#g3299007">Example 8-38</a> shows a possible definition for <code dir="ltr">get_value</code>. Suppose that for one set of parameter values, the global setting determines the result of <code dir="ltr">get_value</code>. While <code dir="ltr">get_value</code> is running, the database detects that three tables are queried&mdash;<code dir="ltr">role_level_config_params</code>, <code dir="ltr">app_level_config_params</code>, and <code dir="ltr">global_config_params</code>. If a change to any of these three tables is committed, the cached result for this set of parameter values is invalidated and must be recomputed.</p>
<p>Now suppose that, for a second set of parameter values, the role-level setting determines the result of <code dir="ltr">get_value</code>. While <code dir="ltr">get_value</code> is running, the database detects that only the <code dir="ltr">role_level_config_params</code> table is queried. If a change to <code dir="ltr">role_level_config_params</code> is committed, the cached result for the second set of parameter values is invalidated; however, committed changes to <code dir="ltr">app_level_config_params</code> or <code dir="ltr">global_config_params</code> do not affect the cached result.</p>
<div id="LNPLS704" class="example">
<p class="titleinexample"><a id="g3299007"></a>Example 8-38 Result-Cached Function Returns Configuration Parameter Setting</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_value
  (p_param VARCHAR2,
   p_app_id  NUMBER,
   p_role_id NUMBER
  )
  RETURN VARCHAR2
  <span class="bold">RESULT_CACHE</span>
IS
  answer VARCHAR2(20);
BEGIN
  <span class="bold">-- Is parameter set at role level?</span>
  BEGIN
    SELECT val INTO answer
      FROM <span class="bold">role_level_config_params</span>
        WHERE role_id = p_role_id
          AND name = p_param;
    RETURN answer;  -- Found
    EXCEPTION
      WHEN no_data_found THEN
        NULL;  -- Fall through to following code
  END;
 <span class="bold"> -- Is parameter set at application level?</span>
  BEGIN
    SELECT val INTO answer
      FROM <span class="bold">app_level_config_params</span>
        WHERE app_id = p_app_id
          AND name = p_param;
    RETURN answer;  -- Found
    EXCEPTION
      WHEN no_data_found THEN
        NULL;  -- Fall through to following code
  END;
 <span class="bold"> -- Is parameter set at global level?</span>
    SELECT val INTO answer
     FROM <span class="bold">global_config_params</span>
      WHERE name = p_param;
    RETURN answer;
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="BABFGHGF"></a>
<div id="LNPLS705" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Result-Cached Recursive Function</h4>
<p>A <a id="sthref712"></a>recursive function for finding the <span class="italic">n</span>th term of a Fibonacci series that mirrors the mathematical definition of the series might do many redundant computations. For example, to evaluate <code dir="ltr">fibonacci(7)</code>, the function must compute <code dir="ltr">fibonacci(6)</code> and <code dir="ltr">fibonacci(5)</code>. To compute <code dir="ltr">fibonacci(6)</code>, the function must compute <code dir="ltr">fibonacci(5)</code> and <code dir="ltr">fibonacci(4)</code>. Therefore, <code dir="ltr">fibonacci(5)</code> and several other terms are computed redundantly. Result-caching avoids these redundant computations.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The maximum number of recursive invocations cached is 128.</div>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION fibonacci (n NUMBER)
   RETURN NUMBER <span class="bold">RESULT_CACHE</span> IS
BEGIN
  IF (n =0) OR (n =1) THEN
    RETURN 1;
  ELSE
    RETURN fibonacci(n - 1) + fibonacci(n - 2);
  END IF;
END;
/
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="g3336645"></a>
<div id="LNPLS706" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Advanced Result-Cached Function Topics</h3>
<p class="subhead2"><a id="LNPLS601"></a>Topics</p>
<ul>
<li>
<p><a href="#BABFAHBI">Rules for a Cache Hit</a></p>
</li>
<li>
<p><a href="#BABDGDCJ">Result Cache Bypass</a></p>
</li>
<li>
<p><a href="#g3336053">Making Result-Cached Functions Handle Session-Specific Settings</a></p>
</li>
<li>
<p><a href="#g3336065">Making Result-Cached Functions Handle Session-Specific Application Contexts</a></p>
</li>
<li>
<p><a href="#g3335224">Choosing Result-Caching Granularity</a></p>
</li>
<li>
<p><a href="#g3340664">Result Caches in Oracle RAC Environment</a></p>
</li>
<li>
<p><a href="#BABGBIGI">Result Cache Management</a></p>
</li>
<li>
<p><a href="#BABIICDH">Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend</a></p>
</li>
</ul>
<a id="BABFAHBI"></a>
<div id="LNPLS707" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Rules for a Cache Hit</h4>
<p>Each time a result-cached function is invoked with different parameter values, those parameters and their result are stored in the cache. Subsequently, when the same function is invoked with the same parameter values (that is, when there is a <span class="bold">cache hit</span>), the result is retrieved from the cache, instead of being recomputed.</p>
<p>The rules for parameter comparison for a cache hit differ from the rules for the PL/SQL "equal to" (=) operator, as follows:</p>
<div class="inftblinformal">
<table class="cellalignment1089" title="This table compares the rules for a cache hit to the rules for the &quot;equal to&quot; operator." summary="This table compares the rules for determining whether two parameter values are the same (for a cache hit) to the rules for determining whether two values are equal." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t24">Cache Hit Rules</th>
<th class="cellalignment1090" id="r1c2-t24">"Equal To" Operator Rules</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t24" headers="r1c1-t24"><code dir="ltr">NULL</code> equals <code dir="ltr">NULL</code></td>
<td class="cellalignment1091" headers="r2c1-t24 r1c2-t24"><code dir="ltr">NULL = NULL</code> evaluates to <code dir="ltr">NULL</code>.</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t24" headers="r1c1-t24">Non-null scalars are the same if and only if their values are identical; that is, if and only if their values have identical bit patterns on the given platform. For example, <code dir="ltr">CHAR</code> values <code dir="ltr">'AA'</code> and <code dir="ltr">'AA '</code> are different. (This rule is stricter than the rule for the "equal to" operator.)</td>
<td class="cellalignment1091" headers="r3c1-t24 r1c2-t24">Non-null scalars can be equal even if their values do not have identical bit patterns on the given platform; for example, <code dir="ltr">CHAR</code> values <code dir="ltr">'AA'</code> and <code dir="ltr">'AA '</code> are equal.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect3" -->
<a id="BABDGDCJ"></a>
<div id="LNPLS708" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Result Cache Bypass</h4>
<p>In some situations, the cache is bypassed. When the cache is bypassed:</p>
<ul>
<li>
<p>The function computes the result instead of retrieving it from the cache.</p>
</li>
<li>
<p>The result that the function computes is not added to the cache.</p>
</li>
</ul>
<p>Some examples of situations in which the cache is bypassed are:</p>
<ul>
<li>
<p>The cache is unavailable to all sessions.</p>
<p>For example, the database administrator has disabled the use of the result cache during application patching (as in <a href="#BABIICDH">"Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend"</a>).</p>
</li>
<li>
<p>A session is performing a DML statement on a table or view on which a result-cached function depends.</p>
<p>The session bypasses the result cache for that function until the DML statement is completed&mdash;either committed or rolled back. If the statement is rolled back, the session resumes using the cache for that function.</p>
<p>Cache bypass ensures that:</p>
<ul>
<li>
<p>The user of each session sees his or her own uncommitted changes.</p>
</li>
<li>
<p>The PL/SQL function result cache has only committed changes that are visible to all sessions, so that uncommitted changes in one session are not visible to other sessions.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="g3336053"></a>
<div id="LNPLS709" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Making Result-Cached Functions Handle Session-Specific Settings</h4>
<p>If a function depends on settings that might vary from session to session (such as <code dir="ltr">NLS_DATE_FORMAT</code> and <code dir="ltr">TIME ZONE</code>), make the function result-cached only if you can modify it to handle the various settings.</p>
<p>Consider this function:</p>
<div id="LNPLS710" class="example">
<p class="titleinexample"><a id="sthref713"></a>Example 8-39 Result-Cached Function Handles Session-Specific Settings</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_hire_date (emp_id NUMBER) RETURN VARCHAR
 <span class="bold">RESULT_CACHE</span>
IS
  date_hired DATE;
BEGIN
  SELECT hire_date INTO date_hired
    FROM HR.EMPLOYEES
      WHERE EMPLOYEE_ID = emp_id;
  RETURN <span class="bold">TO_CHAR</span>(date_hired);
END;
/
</pre></div>
<!-- class="example" -->
<p>The preceding function, <code dir="ltr">get_hire_date</code>, uses the <code dir="ltr">TO_CHAR</code> function to convert a <code dir="ltr">DATE</code> item to a <code dir="ltr">VARCHAR</code> item. The function <code dir="ltr">get_hire_date</code> does not specify a format mask, so the format mask defaults to the one that <code dir="ltr">NLS_DATE_FORMAT</code> specifies. If sessions that invoke <code dir="ltr">get_hire_date</code> have different <code dir="ltr">NLS_DATE_FORMAT</code> settings, cached results can have different formats. If a cached result computed by one session ages out, and another session recomputes it, the format might vary even for the same parameter value. If a session gets a cached result whose format differs from its own format, that result is probably incorrect.</p>
<p>Some possible solutions to this problem are:</p>
<ul>
<li>
<p>Change the return type of <code dir="ltr">get_hire_date</code> to <code dir="ltr">DATE</code> and have each session invoke the <code dir="ltr">TO_CHAR</code> function.</p>
</li>
<li>
<p>If a common format is acceptable to all sessions, specify a format mask, removing the dependency on <code dir="ltr">NLS_DATE_FORMAT</code>. For example:</p>
<pre dir="ltr">
TO_CHAR(date_hired, 'mm/dd/yy');
</pre></li>
<li>
<p>Add a format mask parameter to <code dir="ltr">get_hire_date</code>. For example:</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_hire_date
  (emp_id NUMBER, <span class="bold">fmt VARCHAR</span>) RETURN VARCHAR
  RESULT_CACHE
IS
  date_hired DATE;
BEGIN
  SELECT hire_date INTO date_hired
    FROM HR.EMPLOYEES
      WHERE EMPLOYEE_ID = emp_id;
  RETURN TO_CHAR(date_hired, <span class="bold">fmt</span>);
END;
/
</pre></li>
</ul>
</div>
<!-- class="sect3" -->
<a id="g3336065"></a>
<div id="LNPLS711" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Making Result-Cached Functions Handle Session-Specific Application Contexts</h4>
<p>An <span class="bold">application context</span>, which can be either global or session-specific, is a set of attributes and their values. A PL/SQL function depends on session-specific application contexts if it does one or more of the following:</p>
<ul>
<li>
<p>Directly invokes the SQL function <code dir="ltr">SYS_CONTEXT</code>, which returns the value of a specified attribute in a specified context</p>
</li>
<li>
<p>Indirectly invokes <code dir="ltr">SYS_CONTEXT</code> by using Virtual Private Database (VPD) mechanisms for fine-grained security</p>
<p>(For information about VPD, see <a class="olink DBSEG007" href="../../network.112/e36292/vpd.htm#DBSEG007"><span class="italic">Oracle Database Security Guide</span></a>.)</p>
</li>
</ul>
<p>The PL/SQL function result-caching feature does not automatically handle dependence on session-specific application contexts. If you must cache the results of a function that depends on session-specific application contexts, you must pass the application context to the function as a parameter. You can give the parameter a default value, so that not every user must specify it.</p>
<p>In <a href="#g3297326">Example 8-40</a>, assume that a table, <code dir="ltr">config_tab</code>, has a VPD policy that translates this query:</p>
<pre dir="ltr">
SELECT value FROM config_tab WHERE name = param_name;
</pre>
<p>To this query:</p>
<pre dir="ltr">
SELECT value FROM config_tab
WHERE name = param_name
<span class="bold">AND app_id = SYS_CONTEXT('Config', 'App_ID')</span>;
</pre>
<div id="LNPLS712" class="example">
<p class="titleinexample"><a id="g3297326"></a>Example 8-40 Result-Cached Function Handles Session-Specific Application Context</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_param_value (
  param_name VARCHAR,
  appctx     VARCHAR  DEFAULT SYS_CONTEXT('Config', 'App_ID')
) RETURN VARCHAR
  RESULT_CACHE
IS
  rec VARCHAR(2000);
BEGIN
  SELECT val INTO rec
  FROM config_tab
  WHERE name = param_name;
 
  RETURN rec;
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="g3335224"></a>
<div id="LNPLS713" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Choosing Result-Caching Granularity</h4>
<p>PL/SQL provides the function result cache, but you choose the caching granularity. To understand the concept of granularity, consider the <code dir="ltr">Product_Descriptions</code> table in the Order Entry (<code dir="ltr">OE</code>) sample schema:</p>
<pre dir="ltr">
NAME                     NULL?      TYPE
----------------------   --------   ---------------
PRODUCT_ID               NOT NULL   NUMBER(6)
LANGUAGE_ID              NOT NULL   VARCHAR2(3)
TRANSLATED_NAME          NOT NULL   NVARCHAR2(50)
TRANSLATED_DESCRIPTION   NOT NULL   NVARCHAR2(2000)
</pre>
<p>The table has the name and description of each product in several languages. The unique key for each row is <code dir="ltr">PRODUCT_ID,LANGUAGE_ID</code>.</p>
<p>Suppose that you must define a function that takes a <code dir="ltr">PRODUCT_ID</code> and a <code dir="ltr">LANGUAGE_ID</code> and returns the associated <code dir="ltr">TRANSLATED_NAME</code>. You also want to cache the translated names. Some of the granularity choices for caching the names are:</p>
<ul>
<li>
<p>One name at a time (finer granularity)</p>
</li>
<li>
<p>One language at a time (coarser granularity)</p>
</li>
</ul>
<div id="LNPLS714" class="tblformal">
<p class="titleintable"><a id="sthref714"></a><a id="sthref715"></a>Table 8-3 Finer and Coarser Caching Granularity</p>
<table class="cellalignment1092" title="Finer and Coarser Caching Granularity" summary="This table compares finest- and coarsest-grained function result caching." dir="ltr">
<thead>
<tr class="cellalignment1083">
<th class="cellalignment1090" id="r1c1-t25">Finer Granularity</th>
<th class="cellalignment1090" id="r1c2-t25">Coarser Granularity</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r2c1-t25" headers="r1c1-t25">
<p>Each function result corresponds to one logical result.</p>
</td>
<td class="cellalignment1091" headers="r2c1-t25 r1c2-t25">
<p>Each function result contains many logical subresults.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r3c1-t25" headers="r1c1-t25">
<p>Stores only data that is needed at least once.</p>
</td>
<td class="cellalignment1091" headers="r3c1-t25 r1c2-t25">
<p>Might store data that is never used.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r4c1-t25" headers="r1c1-t25">
<p>Each data item ages out individually.</p>
</td>
<td class="cellalignment1091" headers="r4c1-t25 r1c2-t25">
<p>One aged-out data item ages out the whole set.</p>
</td>
</tr>
<tr class="cellalignment1083">
<td class="cellalignment1091" id="r5c1-t25" headers="r1c1-t25">
<p>Does not allow bulk loading optimizations.</p>
</td>
<td class="cellalignment1091" headers="r5c1-t25 r1c2-t25">
<p>Allows bulk loading optimizations.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In <a href="#BABDDJCD">Example 8-41</a> and <a href="#BABCDECH">Example 8-42</a>, the function <code dir="ltr">productName</code> takes a <code dir="ltr">PRODUCT_ID</code> and a <code dir="ltr">LANGUAGE_ID</code> and returns the associated <code dir="ltr">TRANSLATED_NAME</code>. Each version of <code dir="ltr">productName</code> caches translated names, but at a different granularity.</p>
<p>In <a href="#BABDDJCD">Example 8-41</a>, <code dir="ltr">get_product_name_1</code> is a result-cached function. Whenever <code dir="ltr">get_product_name_1</code> is invoked with a different <code dir="ltr">PRODUCT_ID</code> and <code dir="ltr">LANGUAGE_ID</code>, it caches the associated <code dir="ltr">TRANSLATED_NAME</code>. Each invocation of <code dir="ltr">get_product_name_1</code> adds at most one <code dir="ltr">TRANSLATED_NAME</code> to the cache.</p>
<div id="LNPLS715" class="example">
<p class="titleinexample"><a id="BABDDJCD"></a>Example 8-41 Caching One Name at a Time (Finer Granularity)</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_product_name_1 (prod_id NUMBER, lang_id VARCHAR2)
  RETURN NVARCHAR2
  <span class="bold">RESULT_CACHE</span>
IS
  result VARCHAR2(50);
BEGIN
  SELECT translated_name INTO result
    FROM Product_Descriptions
      WHERE PRODUCT_ID = prod_id
        AND LANGUAGE_ID = lang_id;
  RETURN result;
END;
</pre></div>
<!-- class="example" -->
<p>In <a href="#BABCDECH">Example 8-42</a>, <code dir="ltr">get_product_name_2</code> defines a result-cached function, <code dir="ltr">all_product_names</code>. Whenever <code dir="ltr">get_product_name_2</code> invokes <code dir="ltr">all_product_names</code> with a different <code dir="ltr">LANGUAGE_ID</code>, <code dir="ltr">all_product_names</code> caches every <code dir="ltr">TRANSLATED_NAME</code> associated with that <code dir="ltr">LANGUAGE_ID</code>. Each invocation of <code dir="ltr">all_product_names</code> adds every <code dir="ltr">TRANSLATED_NAME</code> of at most one <code dir="ltr">LANGUAGE_ID</code> to the cache.</p>
<div id="LNPLS716" class="example">
<p class="titleinexample"><a id="BABCDECH"></a>Example 8-42 Caching Translated Names One Language at a Time (Coarser Granularity)</p>
<pre dir="ltr">
CREATE OR REPLACE FUNCTION get_product_name_2 (prod_id NUMBER, lang_id VARCHAR2)
  RETURN NVARCHAR2
IS
  TYPE product_names IS TABLE OF NVARCHAR2(50) INDEX BY PLS_INTEGER;

  FUNCTION all_product_names (lang_id NUMBER) RETURN product_names
    <span class="bold">RESULT_CACHE</span>
  IS
    all_names product_names;
  BEGIN
    FOR c IN (SELECT * FROM Product_Descriptions
      WHERE LANGUAGE_ID = lang_id) LOOP
        all_names(c.PRODUCT_ID) := c.TRANSLATED_NAME;
    END LOOP;
    RETURN all_names;
  END;
BEGIN
  RETURN all_product_names(lang_id)(prod_id);
END;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="g3340664"></a>
<div id="LNPLS717" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Result Caches in Oracle RAC Environment</h4>
<p>Cached results are stored in the system global area (SGA). In an <a id="sthref716"></a>Oracle RAC environment, each database instance manages its own local function result cache. However, the contents of the local result cache are accessible to sessions attached to other Oracle RAC instances. If a required result is missing from the result cache of the local instance, the result might be retrieved from the local cache of another instance, instead of being locally computed.</p>
<p>The access pattern and work load of an instance determine the set of results in its local cache; therefore, the local caches of different instances can have different sets of results.</p>
<p>Although each database instance might have its own set of cached results, the mechanisms for handling invalid results are Oracle RAC environment-wide. If results were invalidated only in the local instance's result cache, other instances might use invalid results. For example, consider a result cache of item prices that are computed from data in database tables. If any of these database tables is updated in a way that affects the price of an item, the cached price of that item must be invalidated in every database instance in the Oracle RAC environment.</p>
</div>
<!-- class="sect3" -->
<a id="BABGBIGI"></a>
<div id="LNPLS718" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Result Cache Management</h4>
<p>The PL/SQL function result cache shares its administrative and manageability infrastructure with the Result Cache. For information about the Result Cache, see <a class="olink PFGRF986" href="../../server.112/e41573/memory.htm#PFGRF986"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p>The database administrator can use the following to manage the Result Cache:</p>
<ul>
<li>
<p><code dir="ltr">RESULT_CACHE_MAX_SIZE</code> and <code dir="ltr">RESULT_CACHE_MAX_RESULT</code> initialization parameters</p>
<p><code dir="ltr">RESULT_CACHE_MAX_SIZE</code> specifies the maximum amount of SGA memory (in bytes) that the Result Cache can use, and <code dir="ltr">RESULT_CACHE_MAX_RESULT</code> specifies the maximum percentage of the Result Cache that any single result can use. For more information about these parameters, see <a class="olink REFRN10272" href="../../server.112/e40402/initparams220.htm#REFRN10272"><span class="italic">Oracle Database Reference</span></a> and <a class="olink PFGRF986" href="../../server.112/e41573/memory.htm#PFGRF986"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink REFRN10272" href="../../server.112/e40402/initparams220.htm#REFRN10272"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">RESULT_CACHE_MAX_SIZE</code></p>
</li>
<li>
<p><a class="olink REFRN10298" href="../../server.112/e40402/initparams219.htm#REFRN10298"><span class="italic">Oracle Database Reference</span></a> for more information about <code dir="ltr">RESULT_CACHE_MAX_RESULT</code></p>
</li>
<li>
<p><a class="olink PFGRF986" href="../../server.112/e41573/memory.htm#PFGRF986"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about Result Cache concepts</p>
</li>
</ul>
</div>
</li>
<li>
<p><code dir="ltr">DBMS_RESULT_CACHE</code> package</p>
<p>The <code dir="ltr">DBMS_RESULT_CACHE</code> package provides an interface to allow the DBA to administer that part of the shared pool that is used by the SQL result cache and the PL/SQL function result cache. For more information about this package, see <a class="olink ARPLS202" href="../../appdev.112/e40758/d_result_cache.htm#ARPLS202"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
</li>
<li>
<p>Dynamic performance views:</p>
<ul>
<li>
<p><code dir="ltr">[G]V$RESULT_CACHE_STATISTICS</code></p>
</li>
<li>
<p><code dir="ltr">[G]V$RESULT_CACHE_MEMORY</code></p>
</li>
<li>
<p><code dir="ltr">[G]V$RESULT_CACHE_OBJECTS</code></p>
</li>
<li>
<p><code dir="ltr">[G]V$RESULT_CACHE_DEPENDENCY</code></p>
</li>
</ul>
<p>See <span class="italic">Oracle Database Reference</span> for more information about <a class="olink REFRN30439" href="../../server.112/e40402/dynviews_2141.htm#REFRN30439"><code dir="ltr">[G]V$RESULT_CACHE_STATISTICS</code></a>, <a class="olink REFRN30437" href="../../server.112/e40402/dynviews_2139.htm#REFRN30437"><code dir="ltr">[G]V$RESULT_CACHE_MEMORY</code></a>, <a class="olink REFRN30438" href="../../server.112/e40402/dynviews_2140.htm#REFRN30438"><code dir="ltr">[G]V$RESULT_CACHE_OBJECTS</code></a>, and <a class="olink REFRN30436" href="../../server.112/e40402/dynviews_2138.htm#REFRN30436"><code dir="ltr">[G]V$RESULT_CACHE_DEPENDENCY</code></a>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BABIICDH"></a>
<div id="LNPLS719" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Hot-Patching PL/SQL Units on Which Result-Cached Functions Depend</h4>
<p>When you hot-patch a PL/SQL unit on which a result-cached function depends (directly or indirectly), the cached results associated with the result-cached function might not be automatically flushed in all cases.</p>
<p>For example, suppose that the result-cached function <code dir="ltr">P1</code>.<code dir="ltr">foo()</code> depends on the package subprogram <code dir="ltr">P2</code>.<code dir="ltr">bar()</code>. If a new version of the body of package <code dir="ltr">P2</code> is loaded, the cached results associated with <code dir="ltr">P1</code>.<code dir="ltr">foo()</code> are not automatically flushed.</p>
<p>Therefore, this is the recommended procedure for hot-patching a PL/SQL unit:</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To follow these steps, you must have the <code dir="ltr">EXECUTE</code> privilege on the package <code dir="ltr">DBMS_RESULT_CACHE</code>.</div>
<ol>
<li>
<p>Put the result cache in bypass mode and flush existing results:</p>
<pre dir="ltr">
BEGIN
  DBMS_RESULT_CACHE.Bypass(TRUE);
  DBMS_RESULT_CACHE.Flush;
END;
/
</pre>
<p>In an Oracle RAC environment, perform this step for each database instance.</p>
</li>
<li>
<p>Patch the PL/SQL code.</p>
</li>
<li>
<p>Resume using the result cache:</p>
<pre dir="ltr">
BEGIN
  DBMS_RESULT_CACHE.Bypass(FALSE);
END;
/
</pre>
<p>In an Oracle RAC environment, perform this step for each database instance.</p>
</li>
</ol>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJJCEC"></a>
<div id="LNPLS99890" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">PL/SQL Functions that SQL Statements Can Invoke</h2>
<p>To be invocable from <a id="sthref717"></a><a id="sthref718"></a>SQL statements, a stored function (and any subprograms that it invokes) must obey these <a id="sthref719"></a><span class="bold">purity rules</span>, which are meant to control side effects:</p>
<ul>
<li>
<p>When invoked from a <code dir="ltr">SELECT</code> statement or a parallelized <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, or <code dir="ltr">MERGE</code> statement, the subprogram cannot modify any database tables.</p>
</li>
<li>
<p>When invoked from an <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, or <code dir="ltr">MERGE</code> statement, the subprogram cannot query or modify any database tables modified by that statement.</p>
<p>If a function either queries or modifies a table, and a DML statement on that table invokes the function, then ORA-04091 (<a id="sthref720"></a>mutating-table error) occurs. There is one exception: ORA-04091 does not occur if a single-row <code dir="ltr">INSERT</code> statement that is not in a <code dir="ltr">FORALL</code> statement invokes the function in a <code dir="ltr">VALUES</code> clause.</p>
</li>
<li>
<p>When invoked from a <code dir="ltr">SELECT</code>, <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, <code dir="ltr">DELETE</code>, or <code dir="ltr">MERGE</code> statement, the subprogram cannot execute any of the following SQL statements (unless <code dir="ltr">PRAGMA</code> <code dir="ltr">AUTONOMOUS_TRANSACTION</code> was specified):</p>
<ul>
<li>
<p>Transaction control statements (such as <code dir="ltr">COMMIT</code>)</p>
</li>
<li>
<p>Session control statements (such as <code dir="ltr">SET</code> <code dir="ltr">ROLE</code>)</p>
</li>
<li>
<p>System control statements (such as <code dir="ltr">ALTER</code> <code dir="ltr">SYSTEM</code>)</p>
</li>
<li>
<p>Database definition language (<a id="sthref721"></a>DDL) statements (such as <code dir="ltr">CREATE</code>), which are committed automatically</p>
</li>
</ul>
<p>(For the description of <code dir="ltr">PRAGMA</code> <code dir="ltr">AUTONOMOUS_TRANSACTION</code>, see <a href="autotransaction_pragma.htm#i32731">"AUTONOMOUS_TRANSACTION Pragma"</a>.)</p>
</li>
</ul>
<p>If any SQL statement in the execution part of the function violates a rule, then a runtime error occurs when that statement is parsed.</p>
<p>The fewer side effects a function has, the better it can be optimized in a <code dir="ltr">SELECT</code> statement, especially if the function is declared with the option <code dir="ltr">DETERMINISTIC</code> or <code dir="ltr">PARALLEL_ENABLE</code> (for descriptions of these options, see <a href="function.htm#CJAFICJJ">"DETERMINISTIC"</a> and <a href="function.htm#CJADIICA">"PARALLEL_ENABLE"</a>).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS00908" href="../../appdev.112/e41502/adfns_packages.htm#ADFNS00908"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about restrictions on PL/SQL functions that SQL statements can invoke</p>
</li>
<li>
<p><a href="tuning.htm#BCGFFFIF">"Tune Function Invocations in Queries"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i18574"></a>
<div id="LNPLS00809" class="sect1"><!-- infotype="Concept" -->
<h2 class="sect1">Invoker's Rights and Definer's Rights (AUTHID Property)</h2>
<p>The <a id="sthref722"></a><code dir="ltr">AUTHID</code> property of a stored PL/SQL unit affects the name resolution and privilege checking of SQL statements that the unit issues at run time. The <code dir="ltr">AUTHID</code> property does not affect compilation, and has no meaning for units that have no code, such as collection types.</p>
<p><code dir="ltr">AUTHID</code> property values are exposed in the static data dictionary view <code dir="ltr">*_PROCEDURES</code>. For units for which <code dir="ltr">AUTHID</code> has meaning, the view shows the value <code dir="ltr">CURRENT_USER</code> or <code dir="ltr">DEFINER</code>; for other units, the view shows <code dir="ltr">NULL</code>.</p>
<p>For stored PL/SQL units that you create or alter with the following statements, you can use the optional <code dir="ltr">AUTHID</code> clause to specify either <code dir="ltr">DEFINER</code> (the default) or <code dir="ltr">CURRENT_USER</code>:</p>
<ul>
<li>
<p><a href="create_function.htm#i2153260">"CREATE FUNCTION Statement"</a></p>
</li>
<li>
<p><a href="create_package.htm#i2091914">"CREATE PACKAGE Statement"</a></p>
</li>
<li>
<p><a href="create_procedure.htm#i2072424">"CREATE PROCEDURE Statement"</a></p>
</li>
<li>
<p><a href="create_type.htm#BABHJHEB">"CREATE TYPE Statement"</a></p>
</li>
<li>
<p><a href="alter_type.htm#i2057828">"ALTER TYPE Statement"</a></p>
</li>
</ul>
<p>A unit whose <code dir="ltr">AUTHID</code> value is <code dir="ltr">CURRENT_USER</code> is called an <span class="bold">invoker's rights unit</span>, or <span class="bold">IR unit</span>. A unit whose <code dir="ltr">AUTHID</code> value is <code dir="ltr">DEFINER</code> is called a <span class="bold">definer's rights unit</span>, or <span class="bold">DR unit</span>. An <a id="sthref723"></a>anonymous block always behaves like an IR unit. A <a id="sthref724"></a>trigger or <a id="sthref725"></a>view always behaves like a DR unit.</p>
<p>The <code dir="ltr">AUTHID</code> property of a unit determines whether the unit is IR or DR, and it affects both <a id="sthref726"></a><a id="sthref727"></a><a id="sthref728"></a>name resolution and <a id="sthref729"></a><a id="sthref730"></a><a id="sthref731"></a>privilege checking at run time:</p>
<ul>
<li>
<p>The context for name resolution is <code dir="ltr">CURRENT_SCHEMA</code>.</p>
</li>
<li>
<p>The privileges checked are those of the <code dir="ltr">CURRENT_USER</code> and the enabled roles.</p>
</li>
</ul>
<p>When a session starts, <code dir="ltr">CURRENT_SCHEMA</code> has the value of the schema owned by <code dir="ltr">SESSION_USER</code>, and <code dir="ltr">CURRENT_USER</code> has the same value as <code dir="ltr">SESSION_USER</code>. (To get the current value of <code dir="ltr">CURRENT_SCHEMA</code>, <code dir="ltr">CURRENT_USER</code>, or <code dir="ltr">SESSION_USER</code>, use the <code dir="ltr">SYS_CONTEXT</code> function, documented in <a class="olink SQLRF06117" href="../../server.112/e41084/functions184.htm#SQLRF06117"><span class="italic">Oracle Database SQL Language Reference</span></a>.)</p>
<p><code dir="ltr">CURRENT_SCHEMA</code> can be changed during the session with the SQL statement <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <code dir="ltr">SET</code> <code dir="ltr">CURRENT_SCHEMA</code>. <code dir="ltr">CURRENT_USER</code> cannot be changed programmatically, but it might change when a PL/SQL unit or a view is pushed onto, or popped from, the call stack.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends against issuing <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <code dir="ltr">SET</code> <code dir="ltr">CURRENT_SCHEMA</code> from in a stored PL/SQL unit.</div>
<p>During a server call, when a DR unit is pushed onto the <a id="sthref732"></a><a id="sthref733"></a><a id="sthref734"></a>call stack, the database stores the currently enabled roles and the current values of <code dir="ltr">CURRENT_USER</code> and <code dir="ltr">CURRENT_SCHEMA</code>. It then changes both <code dir="ltr">CURRENT_USER</code> and <code dir="ltr">CURRENT_SCHEMA</code> to the owner of the DR unit, and enables only the role <code dir="ltr">PUBLIC</code>. (The stored and new roles and values are not necessarily different.) When the DR unit is popped from the call stack, the database restores the stored roles and values. In contrast, when an IR unit is pushed onto, or popped from, the call stack, the values of <code dir="ltr">CURRENT_USER</code> and <code dir="ltr">CURRENT_SCHEMA</code>, and the currently enabled roles do not change.</p>
<p>For <a id="sthref735"></a><a id="sthref736"></a><a id="sthref737"></a>dynamic SQL statements issued by a PL/SQL unit, name resolution and privilege checking are done once, at run time. For <a id="sthref738"></a><a id="sthref739"></a><a id="sthref740"></a>static SQL statements, name resolution and privilege checking are done twice: first, when the PL/SQL unit is compiled, and then again at run time. At compilation time, the <code dir="ltr">AUTHID</code> property has no effect&mdash;both DR and IR units are treated like DR units. At run time, however, the <code dir="ltr">AUTHID</code> property determines whether a unit is IR or DR, and the unit is treated accordingly.</p>
<p class="subhead2"><a id="LNPLS604"></a>Topics</p>
<ul>
<li>
<p><a href="#BABDGGBE">Choosing AUTHID CURRENT_USER or AUTHID DEFINER</a></p>
</li>
<li>
<p><a href="#CHDDABCG">AUTHID and SQL Command SET ROLE</a></p>
</li>
<li>
<p><a href="#BABFDIHA">Need for Template Objects in IR Units</a></p>
</li>
<li>
<p><a href="#BABFAEHF">Overriding Default Name Resolution in IR Units</a></p>
</li>
<li>
<p><a href="#BABBFHFC">IR Subprograms, Views, and Database Triggers</a></p>
</li>
<li>
<p><a href="#BABDICHG">IR Database Links</a></p>
</li>
<li>
<p><a href="#BABHBDHG">IR ADTs</a></p>
</li>
<li>
<p><a href="#BABCHDEF">IR Instance Methods</a></p>
</li>
</ul>
<a id="BABDGGBE"></a>
<div id="LNPLS682" class="sect2">
<h3 class="sect2">Choosing AUTHID CURRENT_USER or AUTHID DEFINER</h3>
<p><a id="sthref741"></a><a id="sthref742"></a><span class="bold">Scenario:</span> Suppose that you must create an API whose procedures have unrestricted access to its tables, but you want to prevent ordinary users from selecting table data directly, and from changing it with <code dir="ltr">INSERT</code>, <code dir="ltr">UPDATE</code>, and <code dir="ltr">DELETE</code> statements.</p>
<p><span class="bold">Solution:</span> In a special schema, create the tables and the procedures that comprise the API. By default, each procedure is a DR unit, so you need not specify <code dir="ltr">AUTHID</code> <code dir="ltr">DEFINER</code> when you create it. To other users, grant the <code dir="ltr">EXECUTE</code> privilege, but do not grant any privileges that allow data access.</p>
<p><span class="bold">Scenario:</span> Suppose that you must write a PL/SQL procedure that presents compilation errors to a developer. The procedure is to join the static data dictionary views <code dir="ltr">ALL_SOURCE</code> and <code dir="ltr">ALL_ERRORS</code> and use the procedure <code dir="ltr">DBMS_OUTPUT</code>.<code dir="ltr">PUT_LINE</code> to show a window of numbered source lines around each error, following the list of errors for that window. You want the developers to be able to run the procedure, and you want the procedure to treat each developer as the <code dir="ltr">CURRENT_USER</code> for <code dir="ltr">ALL_SOURCE</code> and <code dir="ltr">ALL_ERRORS</code>.</p>
<p><span class="bold">Solution:</span> When you create the procedure, specify <code dir="ltr">AUTHID</code> <code dir="ltr">CURRENT_USER</code>. Grant the <code dir="ltr">EXECUTE</code> privilege to the developers who must use the procedure. Because the procedure is an IR unit, <code dir="ltr">ALL_SOURCE</code> and <code dir="ltr">ALL_ERRORS</code> operate from the perspective of the user who invokes the procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Another solution is to make the procedure a DR unit and grant its owner the <code dir="ltr">SELECT</code> privilege on both <code dir="ltr">DBA_SOURCE</code> and <code dir="ltr">DBA_ERRORS</code>. However, this solution is harder to program, and far harder to check for the criterion that a user must never see source text for units for which he or she does not have the <code dir="ltr">EXECUTE</code> privilege.</div>
</div>
<!-- class="sect2" -->
<a id="CHDDABCG"></a>
<div id="LNPLS683" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">AUTHID and SQL Command SET ROLE</h3>
<p>The SQL command <a id="sthref743"></a><code dir="ltr">SET</code> <code dir="ltr">ROLE</code> succeeds only if there are no <a id="sthref744"></a>DR units on the call stack. If at least one DR unit is on the call stack, issuing the <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> command causes ORA-06565.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
To run the <code dir="ltr">SET</code> <code dir="ltr">ROLE</code> command from PL/SQL, you must use dynamic SQL, preferably the <code dir="ltr">EXECUTE</code> <code dir="ltr">IMMEDIATE</code> statement. For information about this statement, see <a href="dynamic.htm#BHCEBBAI">"EXECUTE IMMEDIATE Statement"</a>.</div>
</div>
<!-- class="sect2" -->
<a id="BABFDIHA"></a>
<div id="LNPLS684" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Need for Template Objects in IR Units</h3>
<p>The PL/SQL compiler must resolve all references to tables and other objects at compile time. The owner of an <a id="sthref745"></a>IR unit must have objects in the same schema with the right names and columns, even if they do not contain any data. At run time, the corresponding objects in the invoker's schema must have matching definitions. Otherwise, you get an error or unexpected results, such as ignoring table columns that exist in the invoker's schema but not in the schema that contains the unit.</p>
</div>
<!-- class="sect2" -->
<a id="BABFAEHF"></a>
<div id="LNPLS685" class="sect2">
<h3 class="sect2">Overriding Default Name Resolution in IR Units</h3>
<p>Sometimes, the runtime name resolution rules for an <a id="sthref746"></a><a id="sthref747"></a>IR unit (that cause different invocations to resolve the same unqualified name to different objects) are not desired. Rather, it is required that a specific object be used on every invocation. Nevertheless, an IR unit is needed for other reasons. For example, it might be critical that privileges are evaluated for the <code dir="ltr">CURRENT_USER</code>. Under these circumstances, qualify the name with the schema that owns the object.</p>
<p>An unqualified name for a public synonym is exposed to the risk of capture if the schema of the <code dir="ltr">CURRENT_USER</code> has a colliding name. A public synonym can be qualified with "PUBLIC". You must enclose PUBLIC in double quotation marks. For example:</p>
<pre dir="ltr">
DECLARE
  today  DATE;
BEGIN
  SELECT sysdate INTO today FROM <span class="bold">"PUBLIC".DUAL</span>;
END;
/
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends against issuing the SQL statement <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> <code dir="ltr">SET</code> <code dir="ltr">CURRENT_SCHEMA</code> from in a stored PL/SQL unit.</div>
</div>
<!-- class="sect2" -->
<a id="BABBFHFC"></a>
<div id="LNPLS686" class="sect2">
<h3 class="sect2">IR Subprograms, Views, and Database Triggers</h3>
<p>If a <a id="sthref748"></a><a id="sthref749"></a>view expression invokes an IR subprogram, then the user who created the view, not the user who is querying the view, is the current user.</p>
<p>If a <a id="sthref750"></a><a id="sthref751"></a>trigger invokes an IR subprogram, then the user who created the trigger, not the user who is running the triggering statement, is the current user.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr">SYS_CONTEXT</code> is used directly in the defining SQL statement of a view, then the value it returns for <code dir="ltr">CURRENT_USER</code> is the querying user and not the owner of the view.</div>
</div>
<!-- class="sect2" -->
<a id="BABDICHG"></a>
<div id="LNPLS687" class="sect2">
<h3 class="sect2">IR Database Links</h3>
<p><a id="sthref752"></a><a id="sthref753"></a>You can create a database link to use invoker's rights:</p>
<pre dir="ltr">
CREATE DATABASE LINK <span class="italic">link_name</span> CONNECT TO CURRENT_USER
  USING <span class="italic">connect_string</span>;
</pre>
<p>A current-user link lets you connect to a remote database as another user, with that user's privileges. To connect, the database uses the user name of the current user (who must be a global user). Suppose an IR subprogram owned by user <code dir="ltr">OE</code> references this database link:</p>
<pre dir="ltr">
CREATE DATABASE LINK dallas CONNECT TO CURRENT_USER USING ...
</pre>
<p>If global user <code dir="ltr">HR</code> invokes the subprogram, it connects to the Dallas database as user <code dir="ltr">HR</code>, who is the current user. If it were a definer's rights subprogram, the current user would be <code dir="ltr">OE</code>, and the subprogram would connect to the Dallas database as global user <code dir="ltr">OE</code>.</p>
</div>
<!-- class="sect2" -->
<a id="BABHBDHG"></a>
<div id="LNPLS688" class="sect2">
<h3 class="sect2">IR ADTs</h3>
<p>To define <a id="sthref754"></a><a id="sthref755"></a>ADTs for use in any schema, specify the <code dir="ltr">AUTHID</code> <code dir="ltr">CURRENT_USER</code> clause. For information about ADTs, see <a class="olink ADOBJ001" href="../../appdev.112/e11822/adobjint.htm#ADOBJ001"><span class="italic">Oracle Database Object-Relational Developer's Guide</span></a>.</p>
<p>Suppose that user <code dir="ltr">HR</code> creates the ADT in <a href="#CIHJCCHH">Example 8-43</a>.</p>
<div id="LNPLS689" class="example">
<p class="titleinexample"><a id="CIHJCCHH"></a>Example 8-43 ADT for Use in Any Schema</p>
<pre dir="ltr">
CREATE TYPE person_typ <span class="bold">AUTHID CURRENT_USER</span> AS OBJECT (
  person_id    NUMBER,
  person_name  VARCHAR2(30),
  person_job   VARCHAR2(10),

  STATIC PROCEDURE new_person_typ (
    person_id NUMBER,
    person_name VARCHAR2,
    person_job VARCHAR2,
    schema_name VARCHAR2,
    table_name VARCHAR2
  ),

  MEMBER PROCEDURE change_job (
   SELF IN OUT NOCOPY person_typ,
   new_job VARCHAR2
  )
);
/
CREATE TYPE BODY person_typ AS
  STATIC PROCEDURE new_person_typ (
    person_id NUMBER,
    person_name VARCHAR2,
    person_job VARCHAR2,
    schema_name VARCHAR2,
    table_name VARCHAR2
  )
  IS
    sql_stmt VARCHAR2(200);
  BEGIN
    sql_stmt := 'INSERT INTO ' || schema_name || '.'
       || table_name || ' VALUES (HR.person_typ(:1, :2, :3))';

    EXECUTE IMMEDIATE sql_stmt
      USING person_id, person_name, person_job;
  END;

  MEMBER PROCEDURE change_job (
    SELF IN OUT NOCOPY person_typ,
    new_job VARCHAR2
  )
  IS
  BEGIN
    person_job := new_job;
  END;
END;
/
</pre></div>
<!-- class="example" -->
<p>Then user <code dir="ltr">HR</code> grants the <code dir="ltr">EXECUTE</code> privilege on <code dir="ltr">person_typ</code> to user <code dir="ltr">OE</code>:</p>
<pre dir="ltr">
GRANT EXECUTE ON person_typ TO OE;
</pre>
<p>User <code dir="ltr">OE</code> creates an object table to store objects of type <code dir="ltr">person_typ</code> and then invokes procedure <code dir="ltr">new_person_typ</code> to populate the table:</p>
<pre dir="ltr">
DROP TABLE person_tab;
CREATE TABLE person_tab OF <span class="bold">hr.person_typ</span>;

BEGIN
  <span class="bold">hr.person_typ.new_person_typ</span>(1001,
                               'Jane Smith',
                               'CLERK',
                               'oe',
                               'person_tab');
  <span class="bold">hr.person_typ.new_person_typ</span>(1002,
                               'Joe Perkins',
                               'SALES',
                               'oe',
                               'person_tab');
  <span class="bold">hr.person_typ.new_person_typ</span>(1003,
                               'Robert Lange',
                               'DEV',
                               'oe',
                               'person_tab');
END;
/
</pre>
<p>The invocations succeed because the procedure runs with the privileges of its current user (<code dir="ltr">OE</code>), not its owner (<code dir="ltr">HR</code>).</p>
<p>For subtypes in an ADT hierarchy, these rules apply:</p>
<ul>
<li>
<p>If a subtype does not explicitly specify an <code dir="ltr">AUTHID</code> clause, it inherits the <code dir="ltr">AUTHID</code> of its supertype.</p>
</li>
<li>
<p>If a subtype does specify an <code dir="ltr">AUTHID</code> clause, its <code dir="ltr">AUTHID</code> must match the <code dir="ltr">AUTHID</code> of its supertype. Also, if the <code dir="ltr">AUTHID</code> is <code dir="ltr">DEFINER</code>, both the supertype and subtype must have been created in the same schema.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABCHDEF"></a>
<div id="LNPLS690" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">IR Instance Methods</h3>
<p>An <a id="sthref756"></a><a id="sthref757"></a>IR instance method runs with the privileges of the invoker, not the creator of the instance. Suppose that <code dir="ltr">person_typ</code> is the IR ADT created in <a href="#CIHJCCHH">Example 8-43</a> and user <code dir="ltr">HR</code> creates <code dir="ltr">p1</code>, an object of type <code dir="ltr">person_typ</code>. If user <code dir="ltr">OE</code> invokes instance method <code dir="ltr">change_job</code> to operate on object <code dir="ltr">p1</code>, the current user of the method is <code dir="ltr">OE</code>, not <code dir="ltr">HR</code>, as <a href="#CHDBCGGH">Example 8-44</a> shows.</p>
<div id="LNPLS691" class="example">
<p class="titleinexample"><a id="CHDBCGGH"></a>Example 8-44 Invoking IR Instance Method</p>
<pre dir="ltr">
-- OE creates procedure that invokes change_job:

CREATE OR REPLACE PROCEDURE reassign (
  p IN OUT NOCOPY hr.person_typ,
  new_job VARCHAR2
) AS
BEGIN
  p.change_job(new_job);  -- runs with privileges of OE
END;
/
-- OE grants EXECUTE privilege on procedure reassign to HR:

GRANT EXECUTE ON reassign to HR;

-- HR passes person_typ object to procedure reassign:

DECLARE
  p1  person_typ;
BEGIN
  p1 := person_typ(1004, 'June Washburn', 'SALES');
  oe.reassign(p1, 'CLERK');  -- current user is OE, not HR
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i17145"></a>
<div id="LNPLS00812" class="sect1">
<h2 class="sect1">External Subprograms</h2>
<p>If a <a id="sthref758"></a>C procedure or <a id="sthref759"></a>Java method is stored in the database, you can publish it as an <a id="sthref760"></a>external subprogram and then invoke it from PL/SQL.</p>
<p>To publish an external subprogram, define a stored PL/SQL subprogram with a <a id="sthref761"></a>call specification. The call specification maps the name, parameter types, and return type of the external subprogram to PL/SQL equivalents. Invoke the published external subprogram by its PL/SQL name.</p>
<p>For example, suppose that this Java class, <code dir="ltr">Adjuster</code>, is stored in the database:</p>
<pre dir="ltr">
import java.sql.*;
import oracle.jdbc.driver.*;
<span class="bold">public class Adjuster</span> {
  <span class="bold">public static void raiseSalary (int empNo, float percent)</span>
  throws SQLException {
    Connection conn = new OracleDriver().defaultConnection();
    String sql = "UPDATE employees SET salary = salary * ?
                    WHERE employee_id = ?";
    try {
      PreparedStatement pstmt = conn.prepareStatement(sql);
      pstmt.setFloat(1, (1 + percent / 100));
      pstmt.setInt(2, empNo);
      pstmt.executeUpdate();
      pstmt.close();
    } catch (SQLException e)
          {System.err.println(e.getMessage());}
    }
}
</pre>
<p>The Java class <code dir="ltr">Adjuster</code> has one method, <code dir="ltr">raiseSalary</code>, which raises the salary of a specified employee by a specified percentage. Because <code dir="ltr">raiseSalary</code> is a <code dir="ltr">void</code> method, you publish it as a PL/SQL procedure (rather than a function).</p>
<p><a href="#CHDHHBGB">Example 8-45</a> publishes the stored Java method <code dir="ltr">Adjuster.raiseSalary</code> as a PL/SQL standalone procedure, mapping the Java method name <code dir="ltr">Adjuster.raiseSalary</code> to the PL/SQL procedure name <code dir="ltr">raise_salary</code> and the Java data types <code dir="ltr">int</code> and <code dir="ltr">float</code> to the PL/SQL data type <code dir="ltr">NUMBER</code>. Then the anonymous block invokes <code dir="ltr">raise_salary</code>.</p>
<div id="LNPLS609" class="example">
<p class="titleinexample"><a id="CHDHHBGB"></a>Example 8-45 PL/SQL Anonymous Block Invokes External Procedure</p>
<pre dir="ltr">
-- Publish Adjuster.raiseSalary as standalone PL/SQL procedure:

CREATE OR REPLACE PROCEDURE raise_salary (
  empid NUMBER,
  pct   NUMBER
) AS
  LANGUAGE JAVA NAME 'Adjuster.raiseSalary (int, float)';  -- call specification
/

BEGIN
  raise_salary(120, 10);  -- invoke Adjuster.raiseSalary by PL/SQL name
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CHDFAGDA">Example 8-46</a> publishes the stored Java method <code dir="ltr">java.lang.Thread.sleep</code> as a PL/SQL standalone procedure, mapping the Java method name to the PL/SQL procedure name <code dir="ltr">java_sleep</code> and the Java data type <code dir="ltr">long</code> to the PL/SQL data type <code dir="ltr">NUMBER</code>. The PL/SQL standalone procedure <code dir="ltr">sleep</code> invokes <code dir="ltr">java_sleep</code>.</p>
<div id="LNPLS693" class="example">
<p class="titleinexample"><a id="CHDFAGDA"></a>Example 8-46 PL/SQL Standalone Procedure Invokes External Procedure</p>
<pre dir="ltr">
-- Java call specification:

CREATE PROCEDURE java_sleep (
  milli_seconds IN NUMBER
) AS <span class="bold">LANGUAGE JAVA NAME 'java.lang.Thread.sleep(long)'</span>;
/

CREATE OR REPLACE PROCEDURE sleep (
  milli_seconds IN NUMBER
) IS
BEGIN
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.get_time());
  <span class="bold">java_sleep (milli_seconds);</span>
  DBMS_OUTPUT.PUT_LINE(DBMS_UTILITY.get_time());
END;
/
</pre></div>
<!-- class="example" -->
<p>Call specifications can appear in PL/SQL standalone subprograms, package specifications and bodies, and type specifications and bodies. They cannot appear inside PL/SQL blocks.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS010" href="../../appdev.112/e41502/adfns_externproc.htm#ADFNS010"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for more information about calling external programs</div>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="dynamic.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="triggers.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
