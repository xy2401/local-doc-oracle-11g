<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>What's New in PL/SQL?</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:52:55Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="preface.htm" title="Previous" type="text/html" />
<link rel="Next" href="overview.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">7/99</span> <!-- End Header -->
<div id="LNPLS00000" class="preface"><a id="CJAEGHHH"></a>
<h1 class="preface">What's New in PL/SQL?</h1>
<p><a id="sthref4"></a><a id="sthref5"></a>This topic briefly describes the new PL/SQL features that this book documents and provides links to more information.</p>
<p class="subhead2"><a id="LNPLS105"></a>Topics</p>
<ul>
<li>
<p><a href="#CEGCGBJD">PL/SQL Feature for Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2)</a></p>
</li>
<li>
<p><a href="#CEGGBGFF">PL/SQL Features for Oracle Database 11<span class="italic">g</span> Release 2</a></p>
</li>
<li>
<p><a href="#g1769644">PL/SQL Features for Oracle Database 11<span class="italic">g</span> Release 1</a></p>
</li>
</ul>
<div id="LNPLS110" class="prefsect1"><a id="CEGCGBJD"></a>
<h2 class="prefsect1">PL/SQL Feature for Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2)</h2>
<p class="subhead1"><a id="LNPLS111"></a>Package Treated as Stateless if State is Constant for Life of Session</p>
<p>Before Release 11.2.0.2, if a session recompiled the body of a stateful package, and then another session that had instantiated that package referenced it, the latter session got the severely disruptive error ORA-04068 (&rdquo;existing state of packages &hellip; has been discarded&rdquo;). Therefore, "hot patching" packages was likely to disrupt their users.</p>
<p>As of Release 11.2.0.2, Oracle Database treats a package as stateless if its state is constant for the life of a session (or longer). This is the case for a package whose items are all compile-time constants. Therefore, "hot patching" packages (especially noneditioned packages) is much less likely to disrupt sessions that are using them.</p>
<p>For more information, see <a href="packages.htm#CJADDABG">"Package State"</a>.</p>
</div>
<!-- class="prefsect1" -->
<div id="LNPLS109" class="prefsect1"><a id="CEGGBGFF"></a>
<h2 class="prefsect1">PL/SQL Features for Oracle Database 11<span class="italic">g</span> Release 2</h2>
<p>The PL/SQL features for Oracle Database 11<span class="italic">g</span> Release 2 are:</p>
<ul>
<li>
<p><a href="#CJADFHHG">DBMS_PARALLEL_EXECUTE Package</a></p>
</li>
<li>
<p><a href="#CJAFBCBH">FORCE Option in CREATE TYPE Statement</a></p>
</li>
<li>
<p><a href="#CJACJEHC">Crossedition Triggers</a></p>
</li>
<li>
<p><a href="#CJAJBFGD">ALTER TYPE Statement Restrictions for Editioned ADTs</a></p>
</li>
<li>
<p><a href="#CJACEHIG">RESET option for ALTER TYPE Statement</a></p>
</li>
<li>
<p><a href="#CJAGBBEC">Automatic Detection of Data Sources of Result-Cached Function</a></p>
</li>
<li>
<p><a href="#CJACABII">Result Caches in Oracle RAC Environment Are No Longer Private</a></p>
</li>
</ul>
<p class="subhead1"><a id="CJADFHHG"></a><a id="LNPLS112"></a>DBMS_PARALLEL_EXECUTE Package</p>
<p>The <code dir="ltr">DBMS_PARALLEL_EXECUTE</code> package lets you incrementally update the data in a large table in parallel, in two high-level steps:</p>
<ol>
<li>
<p>Group sets of rows in the table into smaller chunks.</p>
</li>
<li>
<p>Apply the desired <code dir="ltr">UPDATE</code> statement to the chunks in parallel, committing each time you have finished processing a chunk.</p>
</li>
</ol>
<p>Oracle recommends this technique whenever you are updating a lot of data. It improves performance, reduces rollback space consumption, and reduces the number of row locks held.</p>
<p>For more information, see <a href="tuning.htm#BABCFCJC">"Updating Large Tables in Parallel"</a>.</p>
<p class="subhead1"><a id="CJAFBCBH"></a><a id="LNPLS123"></a>FORCE Option in CREATE TYPE Statement</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 2, if a <code dir="ltr">CREATE</code> <code dir="ltr">OR</code> <code dir="ltr">REPLACE</code> <code dir="ltr">TYPE</code> statement specified an existing type that had either type dependents or table dependents, the statement failed with error ORA-02303.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 2, if you specify <code dir="ltr">FORCE</code> in this situation, the statement fails only if the existing type has table dependents, <span class="italic">not</span> if it has type dependents. For more information, see <a href="create_type.htm#BABHJHEB">"CREATE TYPE Statement"</a>.</p>
<p class="subhead1"><a id="CJACJEHC"></a><a id="LNPLS130"></a>Crossedition Triggers</p>
<p>Crossedition triggers are intended to fire when database manipulation language (DML) statements change database tables while an online application that uses the tables is being patched or upgraded with edition-based redefinition. The body of a crossedition trigger is designed to handle these changes so that they can be appropriately applied after the changes to the application code are completed.</p>
<p>For more information, see <a href="create_trigger.htm#i2235611">"CREATE TRIGGER Statement"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about edition-based redefinition in general and crossedition triggers in particular, including the relationship between crossedition triggers and editions</div>
<p class="subhead1"><a id="CJAJBFGD"></a><a id="LNPLS135"></a>ALTER TYPE Statement Restrictions for Editioned ADTs</p>
<p>If you use edition-based redefinition to patch or upgrade an application, you use editioned objects. If any of your editioned objects are Abstract Data Types (ADTs), see <a href="alter_type.htm#BABHBGBE">"Restriction on <span class="italic">type</span>"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS020" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS020"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about edition-based redefinition in general and editioned objects in particular</div>
<p class="subhead1"><a id="CJACEHIG"></a><a id="LNPLS136"></a>RESET option for ALTER TYPE Statement</p>
<p>The <code dir="ltr">RESET</code> option of the <code dir="ltr">ALTER</code> <code dir="ltr">TYPE</code> statement resets the version of a type to&nbsp;1, so that it is no longer considered to be evolved. <code dir="ltr">RESET</code> is intended for evolved ADTs that are preventing their owners from being editions-enabled. For more information, see <a href="alter_type.htm#i2057828">"ALTER TYPE Statement"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS99878" href="../../appdev.112/e41502/adfns_editions.htm#ADFNS99878"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about enabling editions for users</div>
<p class="subhead1"><a id="CJAGBBEC"></a><a id="LNPLS138"></a>Automatic Detection of Data Sources of Result-Cached Function</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 2, you had to specify any data sources on which a result-cached function depended.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 2, Oracle Database automatically detects all data sources that are queried while a result-cached function is running. For more information, see <a href="subprograms.htm#BABFHACJ">"PL/SQL Function Result Cache"</a>.</p>
<p class="subhead1"><a id="CJACABII"></a><a id="LNPLS139"></a>Result Caches in Oracle RAC Environment Are No Longer Private</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 2, each database instance in an Oracle RAC environment had a private function result cache, available only to sessions on that instance. If a required result was missing from the private cache of the local instance, the body of the function ran to compute the result, which was then added to the local cache. The result was not retrieved from the private cache of another instance.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 2, each database instance manages its own local result cache, but the local result cache is no longer private&mdash;sessions attached to remote database instances can access its contents. If a required result is missing from the result cache of the local instance, the result might be retrieved from the local cache of another instance, instead of being locally computed. For more information, see <a href="subprograms.htm#g3340664">"Result Caches in Oracle RAC Environment"</a>.</p>
</div>
<!-- class="prefsect1" -->
<div id="LNPLS113" class="prefsect1"><a id="g1769644"></a>
<h2 class="prefsect1">PL/SQL Features for Oracle Database 11<span class="italic">g</span> Release 1</h2>
<p>The PL/SQL features for Oracle Database 11<span class="italic">g</span> Release 1 are:</p>
<ul>
<li>
<p><a href="#CHDIEEDD">Enhancements to Regular Expression SQL Functions</a></p>
</li>
<li>
<p><a href="#CHDJJJEA">SIMPLE_INTEGER, SIMPLE_FLOAT, and SIMPLE_DOUBLE Data Types</a></p>
</li>
<li>
<p><a href="#CHDDIIJA">CONTINUE Statement</a></p>
</li>
<li>
<p><a href="#CHDEDABE">Sequences in PL/SQL Expressions</a></p>
</li>
<li>
<p><a href="#CHDGIGFJ">Dynamic SQL Enhancements</a></p>
</li>
<li>
<p><a href="#CHDDDAAJ">Named and Mixed Notation in PL/SQL Subprogram Invocations</a></p>
</li>
<li>
<p><a href="#CHDGIJFA">PL/SQL Function Result Cache</a></p>
</li>
<li>
<p><a href="#CEGEFAHF">Compound DML Triggers</a></p>
</li>
<li>
<p><a href="#CEGEHCGJ">More Control Over Triggers</a></p>
</li>
<li>
<p><a href="#CHDHFCFB">Automatic Subprogram Inlining</a></p>
</li>
<li>
<p><a href="#CHDJFGEB">PL/Scope</a></p>
</li>
<li>
<p><a href="#CHDGDEHB">PL/SQL Hierarchical Profiler</a></p>
</li>
<li>
<p><a href="#CHDHFGED">PL/SQL Native Compiler Generates Native Code Directly</a></p>
</li>
</ul>
<p class="subhead1"><a id="CHDIEEDD"></a><a id="LNPLS114"></a>Enhancements to Regular Expression SQL Functions</p>
<p>The regular expression SQL functions <code dir="ltr">REGEXP_INSTR</code> and <code dir="ltr">REGEXP_SUBSTR</code> have increased functionality. A new regular expression SQL function, <code dir="ltr">REGEXP_COUNT</code>, returns the number of times a pattern appears in a string. These functions act the same in SQL and PL/SQL.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink ADFNS9999" href="../../appdev.112/e41502/adfns_regexp.htm#ADFNS9999"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a> for information about the implementation of regular expressions</p>
</li>
<li>
<p><span class="italic">Oracle Database SQL Language Reference</span> for detailed descriptions of the <a class="olink SQLRF06300" href="../../server.112/e41084/functions148.htm#SQLRF06300"><code dir="ltr">REGEXP_INSTR</code></a>, <a class="olink SQLRF06303" href="../../server.112/e41084/functions150.htm#SQLRF06303"><code dir="ltr">REGEXP_SUBSTR</code></a>, and <a class="olink SQLRF20014" href="../../server.112/e41084/functions147.htm#SQLRF20014"><code dir="ltr">REGEXP_COUNT</code></a> functions</p>
</li>
</ul>
</div>
<p class="subhead1"><a id="CHDJJJEA"></a><a id="LNPLS115"></a>SIMPLE_INTEGER, SIMPLE_FLOAT, and SIMPLE_DOUBLE Data Types</p>
<p>The <code dir="ltr">SIMPLE_INTEGER</code>, <code dir="ltr">SIMPLE_FLOAT</code>, and <code dir="ltr">SIMPLE_DOUBLE</code> data types are predefined subtypes of <code dir="ltr">PLS_INTEGER</code>, <code dir="ltr">BINARY_FLOAT</code>, and <code dir="ltr">BINARY_DOUBLE</code>, respectively. Each subtype has the same range as its base type and has a <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint.</p>
<p><code dir="ltr">SIMPLE_INTEGER</code> differs significantly from <code dir="ltr">PLS_INTEGER</code> in its overflow semantics, but <code dir="ltr">SIMPLE_FLOAT</code> and <code dir="ltr">SIMPLE_DOUBLE</code> are identical to their base types, except for their <code dir="ltr">NOT</code> <code dir="ltr">NULL</code> constraint.</p>
<p>You can use <code dir="ltr">SIMPLE_INTEGER</code> when the value will never be <code dir="ltr">NULL</code> and overflow checking is unnecessary. You can use <code dir="ltr">SIMPLE_FLOAT</code> and <code dir="ltr">SIMPLE_DOUBLE</code> when the value will never be <code dir="ltr">NULL</code>. Without the overhead of checking for nullness and overflow, these subtypes provide significantly better performance than their base types when <code dir="ltr">PLSQL_CODE_TYPE='NATIVE'</code>, because arithmetic operations on <code dir="ltr">SIMPLE_INTEGER</code> values are done directly in the hardware. When <code dir="ltr">PLSQL_CODE_TYPE='INTERPRETED'</code>, the performance improvement is smaller.</p>
<p>For more information, see:</p>
<ul>
<li>
<p><a href="datatypes.htm#CIHGBFGB">"SIMPLE_INTEGER Subtype of PLS_INTEGER"</a></p>
</li>
<li>
<p><a href="datatypes.htm#CIHFFDDA">"Additional PL/SQL Constants for BINARY_FLOAT and BINARY_DOUBLE"</a></p>
</li>
<li>
<p><a href="tuning.htm#BABEJFDG">"Use Data Types that Use Hardware Arithmetic"</a></p>
</li>
</ul>
<p class="subhead1"><a id="CHDDIIJA"></a><a id="LNPLS116"></a>CONTINUE Statement</p>
<p>The <code dir="ltr">CONTINUE</code> statement exits the current iteration of a loop and transfers control to the next iteration (in contrast with the <code dir="ltr">EXIT</code> statement, which exits a loop and transfers control to the end of the loop). The <code dir="ltr">CONTINUE</code> statement has two forms: the unconditional <code dir="ltr">CONTINUE</code> and the conditional <code dir="ltr">CONTINUE</code> <code dir="ltr">WHEN</code>.</p>
<p>For more information, see:</p>
<ul>
<li>
<p><a href="controlstatements.htm#i8296">"LOOP Statements"</a></p>
</li>
<li>
<p><a href="continue_statement.htm#CJAHCFBF">"CONTINUE Statement"</a></p>
</li>
</ul>
<p class="subhead1"><a id="CHDEDABE"></a><a id="LNPLS117"></a>Sequences in PL/SQL Expressions</p>
<p>The pseudocolumns <code dir="ltr">CURRVAL</code> and <code dir="ltr">NEXTVAL</code> make writing PL/SQL source text easier for you and improve runtime performance and scalability. You can use <code dir="ltr"><span class="codeinlineitalic">sequence_name</span></code>.<code dir="ltr">CURRVAL</code> and <code dir="ltr"><span class="codeinlineitalic">sequence_name</span></code>.<code dir="ltr">NEXTVAL</code> wherever you can use a <code dir="ltr">NUMBER</code> expression.</p>
<p>For more information, see <a href="static.htm#CIHCBFIJ">"CURRVAL and NEXTVAL in PL/SQL"</a>.</p>
<p class="subhead1"><a id="CHDGIGFJ"></a><a id="LNPLS118"></a>Dynamic SQL Enhancements</p>
<p>Both native dynamic SQL and the <code dir="ltr">DBMS_SQL</code> package have been enhanced.</p>
<p>Native dynamic SQL now supports a dynamic SQL statement larger than 32 KB by allowing it to be a <code dir="ltr">CLOB</code>&mdash;see <a href="executeimmediate_statement.htm#i33888">"EXECUTE IMMEDIATE Statement"</a> and <a href="openfor_statement.htm#i35231">"OPEN FOR Statement"</a>.</p>
<p>In the <code dir="ltr">DBMS_SQL</code> package:</p>
<ul>
<li>
<p>All data types that native dynamic SQL supports are supported.</p>
</li>
<li>
<p>The <code dir="ltr">DBMS_SQL.PARSE</code> function accepts a <code dir="ltr">CLOB</code> argument, allowing dynamic SQL statements larger than 32 KB.</p>
</li>
<li>
<p>The new <a href="dynamic.htm#BHCECGGF">"DBMS_SQL.TO_REFCURSOR Function"</a> lets you switch from the <code dir="ltr">DBMS_SQL</code> package to native dynamic SQL.</p>
</li>
<li>
<p>The new <a href="dynamic.htm#BHCBJGEH">"DBMS_SQL.TO_CURSOR_NUMBER Function"</a> lets you switch from native dynamic SQL to the <code dir="ltr">DBMS_SQL</code> package.</p>
</li>
</ul>
<p class="subhead1"><a id="CHDDDAAJ"></a><a id="LNPLS119"></a>Named and Mixed Notation in PL/SQL Subprogram Invocations</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 1, a SQL statement that invoked a PL/SQL subprogram had to specify the actual parameters in positional notation. As of Oracle Database 11<span class="italic">g</span> Release 1, named and mixed notation are also allowed. This improves usability when a SQL statement invokes a PL/SQL subprogram that has many defaulted parameters, and few of the actual parameters must differ from their default values.</p>
<p>For an example, see the <code dir="ltr">SELECT</code> statements in <a href="subprograms.htm#CHDDBJGC">Example 8-24</a>.</p>
<p class="subhead1"><a id="CHDGIJFA"></a><a id="LNPLS120"></a>PL/SQL Function Result Cache</p>
<p>A function result cache can save significant space and time. Each time a result-cached function is invoked with different parameter values, those parameters and their result are stored in the cache. Subsequently, when the same function is invoked with the same parameter values, the result is retrieved from the cache, instead of being recomputed.</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 1, if you wanted your PL/SQL application to cache the results of a function, you had to design and code the cache and cache-management subprograms. If multiple sessions ran your application, each session had to have its own copy of the cache and cache-management subprograms. Sometimes each session had to perform the same expensive computations.</p>
<p>As of Oracle Database 11<span class="italic">g</span> Release 1, PL/SQL provides a function result cache. To use it, use the <code dir="ltr">RESULT_CACHE</code> clause in each PL/SQL function whose results you want cached. Because the function result cache resides in a shared global area (SGA), it is available to any session that runs your application.</p>
<p>After you convert your application to PL/SQL function result caching, it uses more SGA, but significantly less total system memory.</p>
<p>For more information, see:</p>
<ul>
<li>
<p><a href="subprograms.htm#BABFHACJ">"PL/SQL Function Result Cache"</a></p>
</li>
<li>
<p><a href="function.htm#i34368">"Function Declaration and Definition"</a></p>
</li>
</ul>
<p class="subhead1"><a id="CEGEFAHF"></a><a id="LNPLS121"></a>Compound DML Triggers</p>
<p>A compound DML trigger created on a table or editioning view can fire at multiple timing points. Each timing point section has its own executable part and optional exception-handling part, but all of these parts can access a common PL/SQL state. The common state arises when the triggering statement starts and disappears when the triggering statement completes, even when the triggering statement causes an error.</p>
<p>Before Oracle Database 11<span class="italic">g</span> Release 1, application developers modeled the common state with an ancillary package. This approach was both cumbersome to program and subject to memory leak when the triggering statement caused an error and the after-statement trigger did not fire. Compound triggers help program an approach where you want the actions you implement for the various timing points to share common data.</p>
<p>For more information, see <a href="triggers.htm#CIHEFGFD">"Compound DML Triggers"</a>.</p>
<p class="subhead1"><a id="CEGEHCGJ"></a><a id="LNPLS122"></a>More Control Over Triggers</p>
<p>The SQL statement <code dir="ltr">CREATE</code> <code dir="ltr">TRIGGER</code> now supports <code dir="ltr">ENABLE</code>, <code dir="ltr">DISABLE</code>, and <code dir="ltr">FOLLOWS</code> clauses that give you more control over triggers. The <code dir="ltr">DISABLE</code> clause lets you create a trigger in the disabled state, so that you can ensure that your code compiles successfully before you enable the trigger. The <code dir="ltr">ENABLE</code> clause explicitly specifies the default state. The <code dir="ltr">FOLLOWS</code> clause lets you control the firing order of triggers that are defined on the same table and have the same timing point.</p>
<p>For more information, see:</p>
<ul>
<li>
<p><a href="triggers.htm#g1041767">"Order in Which Triggers Fire"</a></p>
</li>
<li>
<p><a href="triggers.htm#CIHJJJHG">"Trigger Enabling and Disabling"</a></p>
</li>
</ul>
<p class="subhead1"><a id="CHDHFCFB"></a><a id="LNPLS124"></a>Automatic Subprogram Inlining</p>
<p>Subprogram inlining replaces a subprogram invocation (to a subprogram in the same PL/SQL unit) with a copy of the invoked subprogram, which almost always improves program performance.</p>
<p>You can use <code dir="ltr">PRAGMA INLINE</code> to specify that individual subprogram invocations are, or are not, to be inlined. You can also turn on automatic inlining&mdash;that is, ask the compiler to search for inlining opportunities&mdash;by setting the compilation parameter <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code> to 3 (the default is 2).</p>
<p>In the rare cases when automatic inlining does not improve program performance, you can use the PL/SQL hierarchical profiler to identify subprograms for which you want to turn off inlining.</p>
<p>For more information, see:</p>
<ul>
<li>
<p><a href="tuning.htm#BABBHCEI">"Subprogram Inlining"</a></p>
</li>
<li>
<p><a href="inline_pragma.htm#CJAEHDEB">"INLINE Pragma"</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink REFRN10255" href="../../server.112/e40402/initparams198.htm#REFRN10255"><span class="italic">Oracle Database Reference</span></a> for information about the compilation parameter <code dir="ltr">PLSQL_OPTIMIZE_LEVEL</code></div>
<p class="subhead1"><a id="CHDJFGEB"></a><a id="LNPLS125"></a>PL/Scope</p>
<p>PL/Scope is a compiler-driven tool that collects and organizes data about user-defined identifiers from PL/SQL source text. Because PL/Scope is a compiler-driven tool, you use it through interactive development environments (such as SQL Developer and JDeveloper), rather than directly.</p>
<p>PL/Scope enables the development of powerful and effective PL/Scope source text browsers that increase PL/SQL developer productivity by minimizing time spent browsing and understanding source text.</p>
<p>For more information, see <a href="tuning.htm#g3143398">"Collecting Data About User-Defined Identifiers"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS022" href="../../appdev.112/e41502/adfns_plscope.htm#ADFNS022"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a></div>
<p class="subhead1"><a id="CHDGDEHB"></a><a id="LNPLS126"></a>PL/SQL Hierarchical Profiler</p>
<p>The PL/SQL hierarchical profiler reports the dynamic execution profile of your PL/SQL program, organized by subprogram invocations. It accounts for SQL and PL/SQL execution times separately. Each subprogram-level summary in the dynamic execution profile includes information such as number of invocations to the subprogram, time spent in the subprogram itself, time spent in the subprogram's subtree (that is, in its descendent subprograms), and detailed parent-children information.</p>
<p>You can browse the generated HTML reports in any browser. The browser's navigational capabilities, combined with well chosen links, provide a powerful way to analyze performance of large applications, improve application performance, and lower development costs.</p>
<p>For more information, see <a href="tuning.htm#i48283">"Profiling and Tracing PL/SQL Programs"</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADFNS023" href="../../appdev.112/e41502/adfns_profiler.htm#ADFNS023"><span class="italic">Oracle Database Advanced Application Developer's Guide</span></a></div>
<p class="subhead1"><a id="CHDHFGED"></a><a id="LNPLS127"></a>PL/SQL Native Compiler Generates Native Code Directly</p>
<p>The PL/SQL native compiler now generates native code directly, instead of translating PL/SQL code to C code and having the C compiler generate the native code. An individual developer can now compile PL/SQL units for native execution without any set-up on the part of the DBA. Execution speed of natively compiled PL/SQL programs improves, in some cases by an order of magnitude.</p>
<p>For more information, see <a href="tuning.htm#i48528">"Compiling PL/SQL Units for Native Execution"</a>.</p>
</div>
<!-- class="prefsect1" --></div>
<!-- class="preface" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="preface.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="overview.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
