<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>PL/SQL Source Text Wrapping</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-05T11:53:7Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Language Reference" />
<meta name="dcterms.identifier" content="E25519-13" />
<meta name="dcterms.isVersionOf" content="LNPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="drop_type_body.htm" title="Previous" type="text/html" />
<link rel="Next" href="nameresolution.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25519.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">94/99</span> <!-- End Header -->
<div id="LNPLS016" class="appendix"><a id="BABEFEJF"></a>
<h1 class="appendix"><span class="secnum">A</span> PL/SQL Source Text Wrapping</h1>
<p><a id="sthref1417"></a>You can wrap the PL/SQL source text for any of these <a id="sthref1418"></a><a id="sthref1419"></a><a id="sthref1420"></a>stored PL/SQL units, thereby <a id="sthref1421"></a>preventing anyone from displaying that text with the static data dictionary views <code dir="ltr">*_SOURCE</code>:</p>
<ul>
<li>
<p>Package specification</p>
</li>
<li>
<p>Package body</p>
</li>
<li>
<p>Type specification</p>
</li>
<li>
<p>Type body</p>
</li>
<li>
<p>Function</p>
</li>
<li>
<p>Procedure</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
Wrapping text is low-assurance security. For high-assurance security, use Oracle Database Vault, described in <a class="olink DVADM" href="../../server.112/e23090/toc.htm"><span class="italic">Oracle Database Vault Administrator's Guide</span></a>.</div>
<p>A file containing wrapped PL/SQL source text is called a <span class="bold">wrapped file</span>. A wrapped file can be moved, backed up, or processed by SQL*Plus or the Import and Export utilities.</p>
<p>To produce a wrapped file, use either the PL/SQL Wrapper utility or a <code dir="ltr">DBMS_DDL</code> subprogram. The PL/SQL Wrapper utility wraps the source text of every wrappable PL/SQL unit created by a specified SQL file. The <code dir="ltr">DBMS_DDL</code> subprograms wrap the source text of single dynamically generated wrappable PL/SQL units.</p>
<p>Both the PL/SQL Wrapper utility and <code dir="ltr">DBMS_DDL</code> subprograms detect tokenization errors (for example, runaway strings), but not syntax or semantic errors (for example, nonexistent tables or views).</p>
<p>By default, the 11.2 PL/SQL compiler can use use wrapped packages that were compiled with the 9.2 PL/SQL compiler. To prevent the 11.2 PL/SQL compiler from using wrapped packages that were compiled with the 9.2 PL/SQL compiler, set the PL/SQL compilation parameter <code dir="ltr">PERMIT_92_WRAP_FORMAT</code> to <code dir="ltr">FALSE</code>. For more information about <code dir="ltr">PERMIT_92_WRAP_FORMAT</code>, see <a class="olink REFRN10317" href="../../server.112/e40402/initparams192.htm#REFRN10317"><span class="italic">Oracle Database Reference</span></a>. For more information about PL/SQL compilation parameters, see <a href="overview.htm#BABBDFJF">"PL/SQL Units and Compilation Parameters"</a>.</p>
<p class="subhead2"><a id="LNPLS2032"></a>Topics</p>
<ul>
<li>
<p><a href="#BEHGBJAA">PL/SQL Source Text Wrapping Limitations</a></p>
</li>
<li>
<p><a href="#BEHJJHAG">PL/SQL Source Text Wrapping Guidelines</a></p>
</li>
<li>
<p><a href="#i3532">PL/SQL Source Text Wrapping with PL/SQL Wrapper Utility</a></p>
</li>
<li>
<p><a href="#BEHGEBGI">PL/SQL Source Text Wrapping with DBMS_DDL Subprograms</a></p>
</li>
</ul>
<a id="BEHGBJAA"></a>
<div id="LNPLS1744" class="sect1">
<h2 class="sect1">PL/SQL Source Text Wrapping Limitations</h2>
<ul>
<li>
<p>Wrapped files are not downward-compatible between Oracle Database releases.</p>
<p>For example, you cannot load files produced by the version <span class="italic">n</span>.1 PL/SQL Wrapper utility into a version (<span class="italic">n</span>-1).2 Oracle Database. Nor can you load files produced by the version <span class="italic">n</span>.2 PL/SQL Wrapper utility into a version <span class="italic">n</span>.1 Oracle Database. Wrapped files are both upward- and downward-compatible across patch sets.</p>
</li>
<li>
<p><a id="sthref1422"></a>Wrapping PL/SQL source text is not a secure way to hide passwords or table names.</p>
<p>For high-assurance security, use Oracle Database Vault, described in <a class="olink DVADM" href="../../server.112/e23090/toc.htm"><span class="italic">Oracle Database Vault Administrator's Guide</span></a>.</p>
</li>
<li>
<p>You cannot wrap the PL/SQL source text of triggers.</p>
<p>To <a id="sthref1423"></a>hide the implementation details of a trigger, put them in a stored subprogram, wrap the subprogram, and write a one-line trigger that invokes the subprogram.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BEHJJHAG"></a>
<div id="LNPLS1743" class="sect1">
<h2 class="sect1">PL/SQL Source Text Wrapping Guidelines</h2>
<ul>
<li>
<p>Wrap only the body of a <a id="sthref1424"></a>package or type, not the specification.</p>
<p>Leaving the specification unwrapped allows other developers to see the information needed to use the package or type (see <a href="#CEGICAJG">Example A-5</a>). Wrapping the body prevents them from seeing the package or type implementation.</p>
</li>
<li>
<p>Wrap files only after you have finished editing them.</p>
<p>You cannot edit wrapped files. If a wrapped file needs changes, you must edit the original unwrapped file and then wrap it.</p>
</li>
<li>
<p>Before distributing a wrapped file, view it in a text editor and ensure that all important parts are wrapped.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i3532"></a>
<div id="LNPLS01602" class="sect1">
<h2 class="sect1">PL/SQL Source Text Wrapping with PL/SQL Wrapper Utility</h2>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends using PL/SQL Wrapper Utility version 10 or later.</div>
<p>The <a id="sthref1425"></a>PL/SQL Wrapper utility takes a single SQL file (such as a SQL*Plus script) and produces an equivalent text file in which the PL/SQL source text of each wrappable PL/SQL unit is wrapped. (For the list of wrappable PL/SQL units, see the introduction to <a href="#BABEFEJF">"PL/SQL Source Text Wrapping"</a>.)</p>
<p>The PL/SQL Wrapper utility cannot connect to Oracle Database. To run the PL/SQL Wrapper utility, enter this command at the operating system prompt (with no spaces around the equal signs):</p>
<pre dir="ltr">
wrap iname=<span class="italic">input_file</span> [ oname=<span class="italic">output_file</span> ]
</pre>
<p><code dir="ltr"><span class="codeinlineitalic">input_file</span></code> is the name of an existing file that contains any combination of SQL statements. <code dir="ltr"><span class="codeinlineitalic">output_file</span></code> is the name of the file that the PL/SQL Wrapper utility creates&mdash;the wrapped file.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code dir="ltr"><span class="codeinlineitalic">input_file</span></code> cannot include substitution variables specified with the SQL*Plus <code dir="ltr"><a id="sthref1426"></a>DEFINE</code> notation, because <code dir="ltr"><span class="codeinlineitalic">output_file</span></code> is parsed by the PL/SQL compiler, not by SQL*Plus.</div>
<p>The PL/SQL Wrapper utility deletes from the wrapped file all <a id="sthref1427"></a>comments except:</p>
<ul>
<li>
<p>Comments in <code dir="ltr">CREATE</code> statement headers (that is, between <code dir="ltr">CREATE</code> and <code dir="ltr"><span class="codeinlineitalic">plsql_source</span></code> in the syntax diagram in <span class="italic">Oracle Database SQL Language Reference</span>)</p>
</li>
<li>
<p>Comments delimited by <code dir="ltr">/*</code> and <code dir="ltr">*/</code></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
If <code dir="ltr"><span class="codeinlineitalic">input_file</span></code> is a wrapped file, then <code dir="ltr"><span class="codeinlineitalic">input_file</span></code> and <code dir="ltr"><span class="codeinlineitalic">output_file</span></code> have identical contents.</div>
<p>The default file extension for <code dir="ltr"><span class="codeinlineitalic">input_file</span></code> is <code dir="ltr">sql</code>. The default name of <code dir="ltr"><span class="codeinlineitalic">output_file</span></code> is <code dir="ltr"><span class="codeinlineitalic">input_file</span></code><code dir="ltr">.plb</code>. Therefore, these commands are equivalent:</p>
<pre dir="ltr">
wrap iname=/mydir/myfile
wrap iname=/mydir/myfile.sql oname=/mydir/myfile.plb
</pre>
<p>This example specifies a different file extension for <code dir="ltr"><span class="codeinlineitalic">input_file</span></code> and a different name for <code dir="ltr"><span class="codeinlineitalic">output_file</span></code>:</p>
<pre dir="ltr">
wrap iname=/mydir/myfile<span class="bold">.src</span> oname=<span class="bold">/yourdir/yourfile.out</span>
</pre>
<p>You can run <code dir="ltr"><span class="codeinlineitalic">output_file</span></code> as a script in SQL*Plus. For example:</p>
<pre dir="ltr">
SQL&gt; @myfile.plb;
</pre>
<p><a href="#CEGCHAJJ">Example A-1</a> shows the text of a SQL file, <code dir="ltr">wraptest2.sql</code>, that contains two wrappable PL/SQL units&mdash;the procedure <code dir="ltr">wraptest</code> and the function <code dir="ltr">fibonacci</code>. The file also contains two comments and a SQL <code dir="ltr">SELECT</code> statement.</p>
<div id="LNPLS2033" class="example">
<p class="titleinexample"><a id="CEGCHAJJ"></a>Example A-1 SQL File with Two Wrappable PL/SQL Units</p>
<pre dir="ltr">
<span class="bold">-- The following statement will not change. This comment will be deleted.</span>
 
SELECT COUNT(*) FROM EMPLOYEES
/
 
<span class="bold">/* The PL/SQL source text of the following two CREATE statements</span>
<span class="bold">will be wrapped. This commment will not be deleted. */</span>
 
CREATE PROCEDURE wraptest AUTHID DEFINER IS
  TYPE emp_tab IS TABLE OF employees%ROWTYPE INDEX BY PLS_INTEGER;
  all_emps  emp_tab;
BEGIN
  SELECT * BULK COLLECT INTO all_emps FROM employees;
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT_LINE('Emp Id: ' || all_emps(i).employee_id);
  END LOOP;
END;
/
 
CREATE OR REPLACE FUNCTION fibonacci (
  n PLS_INTEGER
) RETURN PLS_INTEGER
AUTHID DEFINER
IS
  fib_1 PLS_INTEGER := 0;
  fib_2 PLS_INTEGER := 1;
BEGIN
  IF n = 1 THEN                              -- terminating condition
    RETURN fib_1;
  ELSIF n = 2 THEN
    RETURN fib_2;                           -- terminating condition
  ELSE
    RETURN fibonacci(n-2) + fibonacci(n-1);  -- recursive invocations
  END IF;
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CEGGEEFH">Example A-2</a> uses the PL/SQL Wrapper utility to wrap <code dir="ltr">wraptest2.sql</code> and shows the wrapped file, <code dir="ltr">wraptest2.plb</code>. The wrapped file shows that the utility deleted the comment that begins with <code dir="ltr">--</code> and wrapped (made unreadable) the PL/SQL source text of the procedure <code dir="ltr">wraptest</code> and the function <code dir="ltr">fibonacci</code>, but did not change the <code dir="ltr">SELECT</code> statement or the comment delimited by <code dir="ltr">/*</code> and <code dir="ltr">*/</code>.</p>
<div id="LNPLS2034" class="example">
<p class="titleinexample"><a id="CEGGEEFH"></a>Example A-2 Wrapping File with PL/SQL Wrapper Utility</p>
<p>Assume that the operating system prompt is <code dir="ltr">&gt;</code>. Wrap the file <code dir="ltr">wraptest.sql</code>:</p>
<pre dir="ltr">
&gt; wrap iname=wraptest2.sql
</pre>
<p>Result:</p>
<pre dir="ltr">
PL/SQL Wrapper: Release 11.2.0.1.0- Production on Wed Sep 15 08:10:15 2010
 
Copyright (c) 1993, 2009, Oracle.  All rights reserved.
 
Processing wraptest2.sql to wraptest2.plb
</pre>
<p>Contents of <code dir="ltr">wraptest.plb</code>:</p>
<pre dir="ltr">
SELECT COUNT(*) FROM EMPLOYEES
/
/* The PL/SQL source text of the following two CREATE statements
will be wrapped. This commment will not be deleted. */
CREATE PROCEDURE wraptest wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
121 134
Pf3/wD+9ncRZhp3XxTMUO3yIRvswg+nQ7UhqfHRG2vg+SD7x9XzsDUFWbdwCJVEOLKBBRuH6
VMoRHfX6apzfyMkvWhzQLCYvAcq6Zu7++E7PrXNxUJzk/FZW8P9eRgyyyMFnDj53aP1cDje9
ZdGr2VmJHIw0ZNHBYhDdR+du5U5Yy47a6dJHXFW9eNyxBHtXZDuiWYTUtlnueHQV9iYDwE+r
jFn+eZm4jgDcTLTEzfmIVtPDRNhYCY3xhPo7vJeS8M1AvP+4xh9+uO35XsRIsRl1PTFVrGwg
6iuxETwA5Pu2mwx3
 
/
CREATE OR REPLACE FUNCTION fibonacci wrapped 
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
14a fb
e1Yq3QQJoEoNKIeJlbgLoLdSgogwgxDcf8vWfHSKbuowFOXFKoj9MqYGqWyRxeeCUVqNVIO1
ICqJa3yPr6e7z8GZpMH3J0Cx0uQ0B1JuysymdNDlzfTvb7QWsrLU4jGs3h8Mm49/L9nyO4Xh
Ae06nawFpOJIAYpBf9wBVC+ZrjU/nuEtokBqCce6HWIoF6rYgz0V0W/47x5KpOnQ2i7X3kFe
FR8K7jT7X58k8xK9uYlZv5LhV71a7A==
 
/
</pre></div>
<!-- class="example" -->
<p>In SQL*Plus, <a href="#CEGGHABG">Example A-3</a> runs the wrapped file <code dir="ltr">wraptest.plb</code>, creating the procedure <code dir="ltr">wraptest</code> and the function <code dir="ltr">fibonacci</code>; selects the text of the subprograms (which is wrapped and therefore unreadable), and then invokes the subprograms.</p>
<div id="LNPLS2035" class="example">
<p class="titleinexample"><a id="CEGGHABG"></a>Example A-3 Running Wrapped File and Viewing Wrapped PL/SQL Units</p>
<pre dir="ltr">
SQL&gt; <span class="bold">-- Run wrapped file:</span>
SQL&gt; 
SQL&gt; <span class="bold">@wraptest2.plb</span>
SQL&gt; SELECT COUNT(*) FROM EMPLOYEES
  2  /
 
  COUNT(*)
----------
       107
 
1 row selected.
 
SQL&gt; /* The PL/SQL source text of the following two CREATE statements
SQL&gt; will be wrapped. This commment will not be deleted. */
SQL&gt; CREATE PROCEDURE wraptest wrapped
  2  a000000
  3  b2
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  7
 20  121 134
 21  Pf3/wD+9ncRZhp3XxTMUO3yIRvswg+nQ7UhqfHRG2vg+SD7x9XzsDUFWbdwCJVEOLKBBRuH6
 22  VMoRHfX6apzfyMkvWhzQLCYvAcq6Zu7++E7PrXNxUJzk/FZW8P9eRgyyyMFnDj53aP1cDje9
 23  ZdGr2VmJHIw0ZNHBYhDdR+du5U5Yy47a6dJHXFW9eNyxBHtXZDuiWYTUtlnueHQV9iYDwE+r
 24  jFn+eZm4jgDcTLTEzfmIVtPDRNhYCY3xhPo7vJeS8M1AvP+4xh9+uO35XsRIsRl1PTFVrGwg
 25  6iuxETwA5Pu2mwx3
 26  
 27  /
 
<span class="bold">Procedure created.</span>
 
SQL&gt; CREATE OR REPLACE FUNCTION fibonacci wrapped
  2  a000000
  3  b2
  4  abcd
  5  abcd
  6  abcd
  7  abcd
  8  abcd
  9  abcd
 10  abcd
 11  abcd
 12  abcd
 13  abcd
 14  abcd
 15  abcd
 16  abcd
 17  abcd
 18  abcd
 19  8
 20  14a fb
 21  e1Yq3QQJoEoNKIeJlbgLoLdSgogwgxDcf8vWfHSKbuowFOXFKoj9MqYGqWyRxeeCUVqNVIO1
 22  ICqJa3yPr6e7z8GZpMH3J0Cx0uQ0B1JuysymdNDlzfTvb7QWsrLU4jGs3h8Mm49/L9nyO4Xh
 23  Ae06nawFpOJIAYpBf9wBVC+ZrjU/nuEtokBqCce6HWIoF6rYgz0V0W/47x5KpOnQ2i7X3kFe
 24  FR8K7jT7X58k8xK9uYlZv5LhV71a7A==
 25  
 26  /
 
<span class="bold">Function created.</span>
 
SQL&gt; 
SQL&gt; <span class="bold">-- Try to display procedure source text:</span>
SQL&gt; 
SQL&gt; <span class="bold">SELECT text FROM USER_SOURCE WHERE name='WRAPTEST';</span>
 
TEXT
--------------------------------------------------------------------------------
PROCEDURE wraptest <span class="bold">wrapped</span>
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
7
121 134
Pf3/wD+9ncRZhp3XxTMUO3yIRvswg+nQ7UhqfHRG2vg+SD7x9XzsDUFWbdwCJVEOLKBBRuH6
VMoRHfX6apzfyMkvWhzQLCYvAcq6Zu7++E7PrXNxUJzk/FZW8P9eRgyyyMFnDj53aP1cDje9
ZdGr2VmJHIw0ZNHBYhDdR+du5U5Yy47a6dJHXFW9eNyxBHtXZDuiWYTUtlnueHQV9iYDwE+r
jFn+eZm4jgDcTLTEzfmIVtPDRNhYCY3xhPo7vJeS8M1AvP+4xh9+uO35XsRIsRl1PTFVrGwg
6iuxETwA5Pu2mwx3
 
 
1 row selected.
 
SQL&gt; 
SQL&gt; <span class="bold">-- Try to display function source text:</span>
SQL&gt; 
SQL&gt; <span class="bold">SELECT text FROM USER_SOURCE WHERE name='FIBONACCI';</span>
 
TEXT
--------------------------------------------------------------------------------
FUNCTION fibonacci <span class="bold">wrapped</span>
a000000
b2
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
8
14a fb
e1Yq3QQJoEoNKIeJlbgLoLdSgogwgxDcf8vWfHSKbuowFOXFKoj9MqYGqWyRxeeCUVqNVIO1
ICqJa3yPr6e7z8GZpMH3J0Cx0uQ0B1JuysymdNDlzfTvb7QWsrLU4jGs3h8Mm49/L9nyO4Xh
Ae06nawFpOJIAYpBf9wBVC+ZrjU/nuEtokBqCce6HWIoF6rYgz0V0W/47x5KpOnQ2i7X3kFe
FR8K7jT7X58k8xK9uYlZv5LhV71a7A==
 
 
1 row selected.
 
SQL&gt; 
SQL&gt; BEGIN
  2    <span class="bold">wraptest;  -- invoke procedure</span>
  3    <span class="bold">DBMS_OUTPUT.PUT_LINE('fibonacci(5) = ' || fibonacci(5));</span>
  4  END;
  5  /
Emp Id: 198
Emp Id: 199
Emp Id: 200
Emp Id: 201
Emp Id: 202
Emp Id: 203
Emp Id: 204
Emp Id: 205
Emp Id: 206
Emp Id: 100
fibonacci(5) = 3
 
PL/SQL procedure successfully completed.
 
SQL&gt; 
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="BEHGEBGI"></a>
<div id="LNPLS01603" class="sect1">
<h2 class="sect1">PL/SQL Source Text Wrapping with DBMS_DDL Subprograms</h2>
<p>The <a id="sthref1428"></a><code dir="ltr">DBMS_DDL</code> package provides <a id="sthref1429"></a><code dir="ltr">WRAP</code> functions and <a id="sthref1430"></a><code dir="ltr">CREATE_WRAPPED</code> procedures, each of which wraps the PL/SQL source text of a single dynamically generated wrappable PL/SQL unit. The <code dir="ltr">DBMS_DDL</code> package also provides the exception <a id="sthref1431"></a><code dir="ltr">MALFORMED_WRAP_INPUT</code> (ORA-24230), which is raised if the input to <code dir="ltr">WRAP</code> or <code dir="ltr">CREATE_WRAPPED</code> is not a valid wrappable PL/SQL unit. (For the list of wrappable PL/SQL units, see the introduction to <a href="#BABEFEJF">"PL/SQL Source Text Wrapping"</a>.)</p>
<p>Each <code dir="ltr">WRAP</code> function takes as input a single <code dir="ltr">CREATE</code> statement that creates a wrappable PL/SQL unit and returns an equivalent <code dir="ltr">CREATE</code> statement in which the PL/SQL source text is wrapped. For more information about the <code dir="ltr">WRAP</code> functions, see <a class="olink ARPLS66090" href="../../appdev.112/e40758/d_ddl.htm#ARPLS66090"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div class="infobox-note">
<p class="notep1">Caution:</p>
If you pass the statement that <code dir="ltr">DBMS_DDL</code>.<code dir="ltr">WRAP</code> returns to the <code dir="ltr">DBMS_SQL</code>.<code dir="ltr">PARSE</code> procedure whose formal parameter <code dir="ltr">statement</code> has data type <code dir="ltr">VARCHAR2A</code>, then you must set the <code dir="ltr">lfflg</code> parameter of <code dir="ltr">DBMS_SQL</code>.<code dir="ltr">PARSE</code> to <code dir="ltr">FALSE</code>. Otherwise, <code dir="ltr">DBMS_SQL</code>.<code dir="ltr">PARSE</code> adds lines to the wrapped PL/SQL unit, corrupting it. (For the syntax of <code dir="ltr">DBMS_SQL</code>.<code dir="ltr">PARSE</code>, see <a class="olink ARPLS68277" href="../../appdev.112/e40758/d_sql.htm#ARPLS68277"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.)</div>
<p>Each <code dir="ltr">CREATE_WRAPPED</code> procedure does what its corresponding <code dir="ltr">WRAP</code> function does and then runs the returned <code dir="ltr">CREATE</code> statement, creating the specified PL/SQL unit. For more information about the <code dir="ltr">CREATE_WRAPPED</code> procedures, see <a class="olink ARPLS66086" href="../../appdev.112/e40758/d_ddl.htm#ARPLS66086"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a>.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
When invoking a <code dir="ltr">DBMS_DDL</code> subprogram, use the fully qualified package name, <code dir="ltr">SYS.DBMS_DDL</code>, to avoid name conflict if someone creates a local package named <code dir="ltr">DBMS_DDL</code> or defines the public synonym <code dir="ltr">DBMS_DDL</code>.</div>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code dir="ltr">CREATE</code> statement that is input to a <code dir="ltr">WRAP</code> function or <code dir="ltr">CREATE_WRAPPED</code> procedure runs with the privileges of the user who invoked the subprogram.</div>
<p><a href="#CEGJGBGE">Example A-4</a> dynamically creates a package specification (using the <code dir="ltr">EXECUTE</code> <code dir="ltr">IMMEDIATE</code> statement) and a wrapped package body, using a <code dir="ltr">CREATE_WRAPPED</code> procedure.</p>
<div id="LNPLS1748" class="example">
<p class="titleinexample"><a id="CEGJGBGE"></a>Example A-4 Creating Wrapped Package Body with CREATE_WRAPPED Procedure</p>
<pre dir="ltr">
DECLARE
  package_text  VARCHAR2(32767); -- text for creating package spec and body
 
  FUNCTION generate_spec (pkgname VARCHAR2) RETURN VARCHAR2 AS
  BEGIN
    RETURN 'CREATE PACKAGE ' || pkgname || ' AUTHID DEFINER AS
      PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER);
      PROCEDURE fire_employee (emp_id NUMBER);
      END ' || pkgname || ';';
  END generate_spec;
 
  FUNCTION generate_body (pkgname VARCHAR2) RETURN VARCHAR2 AS
  BEGIN
    RETURN 'CREATE PACKAGE BODY ' || pkgname || ' AS
      PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER) IS
      BEGIN
        UPDATE employees
          SET salary = salary + amount WHERE employee_id = emp_id;
      END raise_salary;
      PROCEDURE fire_employee (emp_id NUMBER) IS
      BEGIN
        DELETE FROM employees WHERE employee_id = emp_id;
      END fire_employee;
    END ' || pkgname || ';';
  END generate_body;
 
BEGIN
  package_text := generate_spec('emp_actions');  -- Generate package spec
  EXECUTE IMMEDIATE package_text;                -- Create package spec
  package_text := generate_body('emp_actions');  -- Generate package body
  <span class="bold">SYS.DBMS_DDL.CREATE_WRAPPED(package_text);     -- Create wrapped package body</span>
END;
/
</pre></div>
<!-- class="example" -->
<p><a href="#CEGICAJG">Example A-5</a> selects the text of the package that <a href="#CEGJGBGE">Example A-4</a> created, <code dir="ltr">emp_actions</code>, and then invokes the procedure <code dir="ltr">emp_actions.raise_salary</code>. If the package specification were wrapped, then the information needed to invoke the procedure would be unreadable, like the PL/SQL source text of the package body.</p>
<div id="LNPLS2036" class="example">
<p class="titleinexample"><a id="CEGICAJG"></a>Example A-5 Viewing Package with Wrapped Body and Invoking Package Procedure</p>
<p>Select text of package:</p>
<pre dir="ltr">
SELECT text FROM USER_SOURCE WHERE name = 'EMP_ACTIONS';
</pre>
<p>Result:</p>
<pre dir="ltr">
TEXT
------------------------------------------------------------------------
 
PACKAGE emp_actions AUTHID DEFINER AS
      PROCEDURE raise_salary (emp_id NUMBER, amount NUMBER);
      PROCEDURE fire_employee (emp_id NUMBER);
      END emp_actions;
PACKAGE BODY emp_actions wrapped
a000000
369
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
b
180 113
1fOVodewm7j9dBOmBsiEQz0BKCgwg/BKoZ4VZy/pTBIYo8Uj1sjpbEz08Ck3HMjYq/Mf0XZn
u9D0Kd+i89g9ZO61I6vZYjw2AuBidnLESyR63LHZpFD/7lyDTfF1eDY5vmNwLTXrFaxGy243
0lHKAzmOlwwfBWylkZZNi2UnpmSIe6z/BU2nhbwfpqd224p69FwYVXmFX2H5IMsdZ2/vWsK9
cDMCD1KEqOnPpbU2yXdpW3GIbGD8JFIbKAfpJLkoLfVxoRPXQfj0h1k=
</pre>
<p>Invoke <code dir="ltr">raised_salary</code> and show its effect:</p>
<pre dir="ltr">
DECLARE
  s employees.salary%TYPE;
BEGIN
  SELECT salary INTO s FROM employees WHERE employee_id=130;
  DBMS_OUTPUT.PUT_LINE('Old salary: ' || s);
  <span class="bold">emp_actions.raise_salary(130, 100);</span>
  SELECT salary INTO s FROM employees WHERE employee_id=130;
  DBMS_OUTPUT.PUT_LINE('New salary: ' || s);
END;
/
</pre>
<p>Result:</p>
<pre dir="ltr">
Old salary: 2800
New salary: 2900
 
PL/SQL procedure successfully completed.
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" --></div>
<!-- class="appendix" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1082">
<tr>
<td class="cellalignment1091">
<table class="cellalignment1087">
<tr>
<td class="cellalignment1086"><a href="drop_type_body.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1086"><a href="nameresolution.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1094">
<table class="cellalignment1085">
<tr>
<td class="cellalignment1086"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1086"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1086"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1086"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1086"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1086"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
