<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Oracle Database Semantic Technologies Overview</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information about Oracle Database support for semantic technologies, including storage, inference, and query capabilities for data and ontologies based on Resource Description Framework (RDF), RDF Schema (RDFS), and Web Ontology Language (OWL)." />
<meta name="dcterms.created" content="2014-01-26T18:14:10Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Semantic Technologies Developer's Guide" />
<meta name="dcterms.identifier" content="E25609-06" />
<meta name="dcterms.isVersionOf" content="RDFRM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="sem_glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="sem_prtusage.htm" title="Previous" type="text/html" />
<link rel="Next" href="owl_concepts.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25609.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">9/26</span> <!-- End Header -->
<div id="RDFRM100" class="chapter"><a id="CIHHEDAC"></a>
<h1 class="chapter"><span class="secnum">1</span> Oracle Database Semantic Technologies <a id="sthref43"></a>Overview</h1>
<p>This chapter describes the support in Oracle Database Enterprise Edition for semantic technologies, specifically Resource Description Framework (RDF) and a subset of the Web Ontology Language (OWL). It assumes that you are familiar with the major concepts associated with RDF and OWL, such as {subject, predicate, object} triples, URIs, blank nodes, plain and typed literals, and ontologies. This chapter does not explain these concepts in detail, but focuses instead on how the concepts are implemented in Oracle.</p>
<ul>
<li>
<p>For an excellent explanation of RDF concepts, see the World Wide Web Consortium (W3C) <span class="italic">RDF Primer</span> at <code><a href="http://www.w3.org/TR/rdf-primer/">http://www.w3.org/TR/rdf-primer/</a></code>.</p>
</li>
<li>
<p>For information about OWL, see the <span class="italic">OWL Web Ontology Language Reference</span> at <code><a href="http://www.w3.org/TR/owl-ref/">http://www.w3.org/TR/owl-ref/</a></code>.</p>
</li>
</ul>
<p>The PL/SQL subprograms for working with semantic data are in the SEM_APIS package, which is documented in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>.</p>
<p>The RDF and OWL support are features of Oracle Spatial, which must be installed for these features to be used. However, the use of RDF and OWL is not restricted to spatial data.</p>
<p>This chapter contains the following major sections:</p>
<ul>
<li>
<p><a href="#CIHECGII">Section 1.1, "Introduction to Oracle Semantic Technologies"</a></p>
</li>
<li>
<p><a href="#CIHIHCHB">Section 1.2, "Semantic Data Modeling"</a></p>
</li>
<li>
<p><a href="#CHDFFGCD">Section 1.3, "Semantic Data in the Database"</a></p>
</li>
<li>
<p><a href="#CIHEDHIF">Section 1.4, "Semantic Metadata Tables and Views"</a></p>
</li>
<li>
<p><a href="#CIHIAIJC">Section 1.5, "Semantic Data Types, Constructors, and Methods"</a></p>
</li>
<li>
<p><a href="#CHDJACII">Section 1.6, "Using the SEM_MATCH Table Function to Query Semantic Data"</a></p>
</li>
<li>
<p><a href="#CHDCEFIE">Section 1.7, "Loading and Exporting Semantic Data"</a></p>
</li>
<li>
<p><a href="#CIHBEBIB">Section 1.8, "Using Semantic Network Indexes"</a></p>
</li>
<li>
<p><a href="#CIHBJEDA">Section 1.9, "Using Data Type Indexes"</a></p>
</li>
<li>
<p><a href="#CHDEDFFA">Section 1.10, "Quick Start for Using Semantic Data"</a></p>
</li>
<li>
<p><a href="#CIHDIBDE">Section 1.11, "Semantic Data Examples (PL/SQL and Java)"</a></p>
</li>
<li>
<p><a href="#CIHGJFEJ">Section 1.12, "Software Naming Changes for Semantic Technologies"</a></p>
</li>
</ul>
<p>For information about OWL concepts and the Oracle Database support for OWL capabilities, see <a href="owl_concepts.htm#CHDJBGFI">Chapter 2</a>.</p>
<div class="infobox-note">
<p class="notep1">Required Actions to Enable Semantic Technologies Support:</p>
Before performing any operations described in this guide, you must enable semantic technologies support in the database and meet other prerequisites, as explained in <a href="sem_enable.htm#CHDHEABD">Section A.1, "Enabling Semantic Technologies Support"</a>.</div>
<div class="infobox-note">
<p class="notep1">Release 11.2.0.2: Required Actions if Semantic Technologies Installation is Invalid:</p>
Further action may be required if your Semantic Technologies installation is invalid after upgrading to Release 11.2.0.2.0. For information, see <a href="sem_enable.htm#BABECFJJ">Section A.1.4</a>.</div>
<a id="CIHECGII"></a>
<div id="RDFRM560" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.1</span> Introduction to Oracle Semantic Technologies</h2>
<p>Oracle Database enables you to store semantic data and ontologies, to query semantic data and to perform ontology-assisted query of enterprise relational data, and to use supplied or user-defined inferencing to expand the power of querying on semantic data. <a href="#CHDJHFDA">Figure 1-1</a> shows how these capabilities interact.</p>
<div id="RDFRM561" class="figure">
<p class="titleinfigure"><a id="CHDJHFDA"></a>Figure 1-1 Oracle Semantic Capabilities</p>
<img width="371" height="254" src="img/sem_overview.gif" alt="Description of Figure 1-1 follows" /><br />
<a id="sthref44" href="img_text/sem_overview.htm">Description of "Figure 1-1 Oracle Semantic Capabilities"</a><br />
<br /></div>
<!-- class="figure" -->
<p>As shown in <a href="#CHDJHFDA">Figure 1-1</a>, the database contains semantic data and ontologies (RDF/OWL models), as well as traditional relational data. To load semantic data, bulk loading is the most efficient approach, although you can load data incrementally using transactional INSERT statements.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If you want to use existing semantic data from a release before Oracle Database 11.1, the data must be upgraded as described in <a href="sem_enable.htm#CHDHEABD">Section A.1</a>.</div>
<p>You can query semantic data and ontologies, and you can also perform ontology-assisted queries of semantic and traditional relational data to find semantic relationships. To perform ontology-assisted queries, use the SEM_RELATED operator, which is described in <a href="owl_concepts.htm#CHDBAGBH">Section 2.3</a>.</p>
<p>You can expand the power of queries on semantic data by using inferencing, which uses rules in rulebases. Inferencing enables you to make logical deductions based on the data and the rules. For information about using rules and rulebases for inferencing, see <a href="#CHDHFEGD">Section 1.3.6</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHIHCHB"></a>
<div id="RDFRM562" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.2</span> <a id="sthref45"></a><a id="sthref46"></a>Semantic Data Modeling</h2>
<p>In addition to its formal semantics, semantic data has a simple data structure that is effectively modeled using a directed graph. The metadata statements are represented as triples: nodes are used to represent two parts of the triple, and the third part is represented by a directed link that describes the relationship between the nodes. The triples are stored in a semantic data network. In addition, information is maintained about specific semantic data models created by database users. A user-created <span class="bold">model</span> has a model name, and refers to triples stored in a specified table column.</p>
<p>Statements are expressed in triples: {subject or resource, predicate or property, object or value}. In this manual, {subject, property, object} is used to describe a triple, and the terms <span class="italic">statement</span> and <span class="italic">triple</span> may sometimes be used interchangeably. Each triple is a complete and unique fact about a specific domain, and can be represented by a link in a directed graph.</p>
</div>
<!-- class="sect1" -->
<a id="CHDFFGCD"></a>
<div id="RDFRM563" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.3</span> <a id="sthref47"></a>Semantic Data in the Database</h2>
<p>There is one universe for all semantic data stored in the database. All triples are parsed and stored in the system as entries in tables under the MDSYS schema. A triple {subject, property, object} is treated as one database object. As a result, a single document containing multiple triples results in multiple database objects.</p>
<p>All the subjects and objects of triples are mapped to nodes in a semantic data network, and properties are mapped to network links that have their start node and end node as subject and object, respectively. The possible node types are blank nodes, URIs, plain literals, and typed literals.</p>
<p>The following requirements apply to the specifications of URIs and the storage of semantic data in the database:</p>
<ul>
<li>
<p>A subject must be a URI or a blank node.</p>
</li>
<li>
<p>A property must be a URI.</p>
</li>
<li>
<p>An object can be any type, such as a URI, a blank node, or a literal. (However, null values and null strings are not supported.)</p>
</li>
</ul>
<a id="CHDIGEFJ"></a>
<div id="RDFRM564" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.1</span> <a id="sthref48"></a><a id="sthref49"></a><a id="sthref50"></a>Metadata for Models</h3>
<p>The MDSYS.SEM_MODEL$ view contains information about all models defined in the database. When you create a model using the <a href="sem_apis_ref.htm#CHDBIGAF">SEM_APIS.CREATE_SEM_MODEL</a> procedure, you specify a name for the model, as well as a table and column to hold references to the semantic data, and the system automatically generates a model ID.</p>
<p>Oracle maintains the MDSYS.SEM_MODEL$ view automatically when you create and drop models. Users should never modify this view directly. For example, do not use SQL INSERT, UPDATE, or DELETE statements with this view.</p>
<p>The MDSYS.SEM_MODEL$ view contains the columns shown in <a href="#CHDDBDII">Table 1-1</a>.</p>
<div id="RDFRM565" class="tblformal">
<p class="titleintable"><a id="sthref51"></a><a id="CHDDBDII"></a>Table 1-1 MDSYS.SEM_MODEL$ View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_MODEL$ View Columns" summary="SEM_MODEL$ view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t5">Column Name</th>
<th class="cellalignment981" id="r1c2-t5">Data Type</th>
<th class="cellalignment981" id="r1c3-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t5" headers="r1c1-t5">
<p>OWNER</p>
</td>
<td class="cellalignment982" headers="r2c1-t5 r1c2-t5">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t5 r1c3-t5">
<p>Schema of the owner of the model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t5" headers="r1c1-t5">
<p>MODEL_ID</p>
</td>
<td class="cellalignment982" headers="r3c1-t5 r1c2-t5">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r3c1-t5 r1c3-t5">
<p>Unique model ID number, automatically generated.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t5" headers="r1c1-t5">
<p>MODEL_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t5 r1c2-t5">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r4c1-t5 r1c3-t5">
<p>Name of the model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t5" headers="r1c1-t5">
<p>TABLE_NAME</p>
</td>
<td class="cellalignment982" headers="r5c1-t5 r1c2-t5">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t5 r1c3-t5">
<p>Name of the table to hold references to semantic data for the model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t5" headers="r1c1-t5">
<p>COLUMN_NAME</p>
</td>
<td class="cellalignment982" headers="r6c1-t5 r1c2-t5">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r6c1-t5 r1c3-t5">
<p>Name of the column of type SDO_RDF_TRIPLE_S in the table to hold references to semantic data for the model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t5" headers="r1c1-t5">
<p>MODEL_TABLESPACE_NAME</p>
</td>
<td class="cellalignment982" headers="r7c1-t5 r1c2-t5">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r7c1-t5 r1c3-t5">
<p>Name of the tablespace to be used for storing the triples for this model.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref52"></a><a id="sthref53"></a>When you create a model, a view for the triples associated with the model is also created under the MDSYS schema. This view has a name in the format SEMM_<span class="italic">model-name</span>, and it is visible only to the owner of the model and to users with suitable privileges. Each MDSYS.SEMM_<span class="italic">model-name</span> view contains a row for each triple (stored as a link in a network), and it has the columns shown in <a href="#CHDDFJCF">Table 1-2</a>.</p>
<div id="RDFRM566" class="tblformal">
<p class="titleintable"><a id="sthref54"></a><a id="CHDDFJCF"></a>Table 1-2 MDSYS.SEMM_model-name View Columns</p>
<table class="cellalignment980" title="MDSYS.SEMM_model-name View Columns" summary="MDSYS.SEMM_model-name View Columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t6">Column Name</th>
<th class="cellalignment981" id="r1c2-t6">Data Type</th>
<th class="cellalignment981" id="r1c3-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t6" headers="r1c1-t6">
<p>P_VALUE_ID</p>
</td>
<td class="cellalignment982" headers="r2c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r2c1-t6 r1c3-t6">
<p>The VALUE_ID for the text value of the predicate of the triple. Part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t6" headers="r1c1-t6">
<p>START_NODE_ID</p>
</td>
<td class="cellalignment982" headers="r3c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r3c1-t6 r1c3-t6">
<p>The VALUE_ID for the text value of the subject of the triple. Also part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t6" headers="r1c1-t6">
<p>CANON_END_NODE_ID</p>
</td>
<td class="cellalignment982" headers="r4c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r4c1-t6 r1c3-t6">
<p>The VALUE_ID for the text value of the canonical form of the object of the triple. Also part of the primary key.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t6" headers="r1c1-t6">
<p>END_NODE_ID</p>
</td>
<td class="cellalignment982" headers="r5c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r5c1-t6 r1c3-t6">
<p>The VALUE_ID for the text value of the object of the triple</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t6" headers="r1c1-t6">
<p>MODEL_ID</p>
</td>
<td class="cellalignment982" headers="r6c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r6c1-t6 r1c3-t6">
<p>The ID for the RDF model to which the triple belongs.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t6" headers="r1c1-t6">
<p>COST</p>
</td>
<td class="cellalignment982" headers="r7c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r7c1-t6 r1c3-t6">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t6" headers="r1c1-t6">
<p>CTXT1</p>
</td>
<td class="cellalignment982" headers="r8c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r8c1-t6 r1c3-t6">
<p>(Reserved column; can be used for fine-grained access control)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t6" headers="r1c1-t6">
<p>CTXT2</p>
</td>
<td class="cellalignment982" headers="r9c1-t6 r1c2-t6">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r9c1-t6 r1c3-t6">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r10c1-t6" headers="r1c1-t6">
<p>DISTANCE</p>
</td>
<td class="cellalignment982" headers="r10c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r10c1-t6 r1c3-t6">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r11c1-t6" headers="r1c1-t6">
<p>EXPLAIN</p>
</td>
<td class="cellalignment982" headers="r11c1-t6 r1c2-t6">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r11c1-t6 r1c3-t6">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r12c1-t6" headers="r1c1-t6">
<p>PATH</p>
</td>
<td class="cellalignment982" headers="r12c1-t6 r1c2-t6">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r12c1-t6 r1c3-t6">
<p>(Reserved for future use)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r13c1-t6" headers="r1c1-t6">
<p>G_ID</p>
</td>
<td class="cellalignment982" headers="r13c1-t6 r1c2-t6">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r13c1-t6 r1c3-t6">
<p>The VALUE_ID for the text value of the graph name for the triple. Null indicates the default graph (see <a href="#CIHJECEF">Section 1.3.9, "Named Graphs"</a>).</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r14c1-t6" headers="r1c1-t6">
<p>LINK_ID</p>
</td>
<td class="cellalignment982" headers="r14c1-t6 r1c2-t6">
<p>VARCHAR2(71)</p>
</td>
<td class="cellalignment982" headers="r14c1-t6 r1c3-t6">
<p>Unique triple identifier value. (It is currently a computed column, and its definition may change in a future release.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
In <a href="#CHDDFJCF">Table 1-2</a>, for columns P_VALUE_ID, START_NODE_ID, END_NODE_ID, CANON_END_NODE_ID, and G_ID, the actual ID values are computed from the corresponding lexical values. However, a lexical value may not always map to the same ID value.</div>
</div>
<!-- class="sect2" -->
<a id="CHDEJDCA"></a>
<div id="RDFRM567" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.2</span> <a id="sthref55"></a><a id="sthref56"></a><a id="sthref57"></a>Statements</h3>
<p>The MDSYS.RDF_VALUE$ table contains information about the subjects, properties, and objects used to represent RDF statements. It uniquely stores the text values (URIs or literals) for these three pieces of information, using a separate row for each part of each triple.</p>
<p>Oracle maintains the MDSYS.RDF_VALUE$ table automatically. Users should never modify this view directly. For example, do not use SQL INSERT, UPDATE, or DELETE statements with this view.</p>
<p>The RDF_VALUE$ table contains the columns shown in <a href="#CHDBFGII">Table 1-3</a>.</p>
<div id="RDFRM568" class="tblformal">
<p class="titleintable"><a id="sthref58"></a><a id="CHDBFGII"></a>Table 1-3 MDSYS.RDF_VALUE$ Table Columns</p>
<table class="cellalignment980" title="MDSYS.RDF_VALUE$ Table Columns" summary="RDF_VALUE$ table columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t8">Column Name</th>
<th class="cellalignment981" id="r1c2-t8">Data Type</th>
<th class="cellalignment981" id="r1c3-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t8" headers="r1c1-t8">
<p>VALUE_ID</p>
</td>
<td class="cellalignment982" headers="r2c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r2c1-t8 r1c3-t8">
<p>Unique value ID number, automatically generated.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t8" headers="r1c1-t8">
<p>VALUE_TYPE</p>
</td>
<td class="cellalignment982" headers="r3c1-t8 r1c2-t8">
<p>VARCHAR2(10)</p>
</td>
<td class="cellalignment982" headers="r3c1-t8 r1c3-t8">
<p>The type of text information stored in the VALUE_NAME column. Possible values: <code>UR</code> for URI, <code>BN</code> for blank node, <code>PL</code> for plain literal, <code>PL@</code> for plain literal with a language tag, <code>PLL</code> for plain long literal, <code>PLL@</code> for plain long literal with a language tag, <code>TL</code> for typed literal, or <code>TLL</code> for typed long literal. A long literal is a literal with more than 4000 bytes.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t8" headers="r1c1-t8">
<p>VNAME_PREFIX</p>
</td>
<td class="cellalignment982" headers="r4c1-t8 r1c2-t8">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r4c1-t8 r1c3-t8">
<p>If the length of the lexical value is 4000 bytes or less, this column stores a prefix of a portion of the lexical value. The <a href="sem_apis_ref.htm#CHEBBFCD">SEM_APIS.VALUE_NAME_PREFIX</a> function can be used for prefix computation. For example, the prefix for the portion of the lexical value <code>&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;</code> without the angle brackets is <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#</code>.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t8" headers="r1c1-t8">
<p>VNAME_SUFFIX</p>
</td>
<td class="cellalignment982" headers="r5c1-t8 r1c2-t8">
<p>VARCHAR2(512)</p>
</td>
<td class="cellalignment982" headers="r5c1-t8 r1c3-t8">
<p>If the length of the lexical value is 4000 bytes or less, this column stores a suffix of a portion of the lexical value. The <a href="sem_apis_ref.htm#CHEECEIB">SEM_APIS.VALUE_NAME_SUFFIX</a> function can be used for suffix computation. For the lexical value mentioned in the description of the VNAME_PREFIX column, the suffix is <code>type</code>.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t8" headers="r1c1-t8">
<p>LITERAL_TYPE</p>
</td>
<td class="cellalignment982" headers="r6c1-t8 r1c2-t8">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r6c1-t8 r1c3-t8">
<p>For typed literals, the type information; otherwise, null. For example, for a row representing a creation date of 1999-08-16, the VALUE_TYPE column can contain <code>TL</code>, and the LITERAL_TYPE column can contain <code>http://www.w3.org/2001/XMLSchema#date</code>.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t8" headers="r1c1-t8">
<p>LANGUAGE_TYPE</p>
</td>
<td class="cellalignment982" headers="r7c1-t8 r1c2-t8">
<p>VARCHAR2(80)</p>
</td>
<td class="cellalignment982" headers="r7c1-t8 r1c3-t8">
<p>Language tag (for example, <code>fr</code> for French) for a literal with a language tag (that is, if VALUE_TYPE is <code>PL@</code> or <code>PLL@</code>). Otherwise, this column has a null value.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t8" headers="r1c1-t8">
<p>CANON_ID</p>
</td>
<td class="cellalignment982" headers="r8c1-t8 r1c2-t8">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r8c1-t8 r1c3-t8">
<p>The ID for the canonical lexical value for the current lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t8" headers="r1c1-t8">
<p>COLLISION_EXT</p>
</td>
<td class="cellalignment982" headers="r9c1-t8 r1c2-t8">
<p>VARCHAR2(64)</p>
</td>
<td class="cellalignment982" headers="r9c1-t8 r1c3-t8">
<p>Used for collision handling for the lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r10c1-t8" headers="r1c1-t8">
<p>CANON_COLLISION_EXT</p>
</td>
<td class="cellalignment982" headers="r10c1-t8 r1c2-t8">
<p>VARCHAR2(64)</p>
</td>
<td class="cellalignment982" headers="r10c1-t8 r1c3-t8">
<p>Used for collision handling for the canonical lexical value. (The use of this column may change in a future release.)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r11c1-t8" headers="r1c1-t8">
<p>LONG_VALUE</p>
</td>
<td class="cellalignment982" headers="r11c1-t8 r1c2-t8">
<p>CLOB</p>
</td>
<td class="cellalignment982" headers="r11c1-t8 r1c3-t8">
<p>The character string if the length of the lexical value is greater than 4000 bytes. Otherwise, this column has a null value.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r12c1-t8" headers="r1c1-t8">
<p>VALUE_NAME</p>
</td>
<td class="cellalignment982" headers="r12c1-t8 r1c2-t8">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r12c1-t8 r1c3-t8">
<p>This is a computed column. If length of the lexical value is 4000 bytes or less, the value of this column is the concatenation of the values of VNAME_PREFIX column and the VNAME_SUFFIX column.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="RDFRM569" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref59"></a>
<h4 class="sect3"><span class="secnum">1.3.2.1</span> <a id="sthref60"></a><a id="sthref61"></a><a id="sthref62"></a><a id="sthref63"></a><a id="sthref64"></a>Triple Uniqueness and Data Types for Literals</h4>
<p>Duplicate triples are not stored in the database. To check if a triple is a duplicate of an existing triple, the subject, property, and object of the incoming triple are checked against triple values in the specified model. If the incoming subject, property, and object are all URIs, an exact match of their values determines a duplicate. However, if the object of incoming triple is a literal, an exact match of the subject and property, and a value (canonical) match of the object, determine a duplicate. For example, the following two triples are duplicates:</p>
<pre>
&lt;eg:a&gt; &lt;eg:b&gt; &lt;"123"^^http://www.w3.org/2001/XMLSchema#int&gt;
&lt;eg:a&gt; &lt;eg:b&gt; &lt;"123"^^http://www.w3.org/2001/XMLSchema#unsignedByte&gt;
</pre>
<p>The second triple is treated as a duplicate of the first, because <code>"123"^^&lt;http://www.w3.org/2001/XMLSchema#int&gt;</code> has an equivalent value (is canonically equivalent) to <code>"123"^^&lt;http://www.w3.org/2001/XMLSchema#unsignedByte&gt;</code>. Two entities are canonically equivalent if they can be reduced to the same value.</p>
<p>To use a non-RDF example, <code>A*(B-C)</code>, <code>A*B-C*A</code>, <code>(B-C)*A</code>, and <code>-A*C+A*B</code> all convert into the same canonical form.</p>
<p>Value-based matching of lexical forms is supported for the following data types:</p>
<ul>
<li>
<p>STRING: plain literal, xsd:string and some of its XML Schema subtypes</p>
</li>
<li>
<p>NUMERIC: xsd:decimal and its XML Schema subtypes, xsd:float, and xsd:double. (Support is not provided for float/double INF, -INF, and NaN values.)</p>
</li>
<li>
<p>DATETIME: xsd:datetime, with support for time zone. (Without time zone there are still multiple representations for a single value, for example, <code>"2004-02-18T15:12:54"</code> and <code>"2004-02-18T15:12:54.0000"</code>.)</p>
</li>
<li>
<p>DATE: xsd:date, with or without time zone</p>
</li>
<li>
<p>OTHER: Everything else. (No attempt is made to match different representations).</p>
</li>
</ul>
<p>Canonicalization is performed when the time zone is present for literals of type xsd:time and xsd:dateTime.</p>
<p>The following namespace definition is used: <code>xmlns:xsd="http://www.w3.org/2001/XMLSchema"</code></p>
<p>The first occurrence of a literal in the RDF_VALUE$ table is taken as the canonical form and given the VALUE_TYPE value of <code>CPL</code>, <code>CPL@</code>, <code>CTL</code>, <code>CPLL</code>, <code>CPLL@</code>, or <code>CTLL</code> as appropriate; that is, a <code>C</code> for canonical is prefixed to the actual value type. If a literal with the same canonical form (but a different lexical representation) as a previously inserted literal is inserted into the RDF_VALUE$ table, the VALUE_TYPE value assigned to the new insert is <code>PL</code>, <code>PL@</code>, <code>TL</code>, <code>PLL</code>, <code>PLL@</code>, or <code>TLL</code> as appropriate.</p>
<p>Canonically equivalent text values having different lexical representations are thus stored in the RDF_VALUE$ table; however, canonically equivalent triples are not stored in the database.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHBDAE"></a>
<div id="RDFRM570" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.3</span> <a id="sthref65"></a><a id="sthref66"></a><a id="sthref67"></a><a id="sthref68"></a>Subjects and Objects</h3>
<p>RDF subjects and objects are mapped to nodes in a semantic data network. Subject nodes are the start nodes of links, and object nodes are the end nodes of links. Non-literal nodes (that is, URIs and blank nodes) can be used as both subject and object nodes. Literals can be used only as object nodes.</p>
</div>
<!-- class="sect2" -->
<a id="CHDHEECH"></a>
<div id="RDFRM571" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.4</span> <a id="sthref69"></a><a id="sthref70"></a>Blank Nodes</h3>
<p>Blank nodes can be used as subject and object nodes in the semantic network. Blank node identifiers are different from URIs in that they are scoped within a semantic model. Thus, although multiple occurrences of the same blank node identifier within a single semantic model necessarily refer to the same resource, occurrences of the same blank node identifier in two different semantic models do not refer to the same resource.</p>
<p>In an Oracle semantic network, this behavior is modeled by requiring that blank nodes are always reused (that is, are used to represent the same resource if the same blank node identifier is used) within a semantic model, and never reused between two different models. Thus, when inserting triples involving blank nodes into a model, you must use the SDO_RDF_TRIPLE_S constructor that supports reuse of blank nodes.</p>
</div>
<!-- class="sect2" -->
<a id="CHDBCGFA"></a>
<div id="RDFRM572" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.5</span> <a id="sthref71"></a><a id="sthref72"></a>Properties</h3>
<p>Properties are mapped to links that have their start node and end node as subjects and objects, respectively. Therefore, a link represents a complete triple.</p>
<p>When a triple is inserted into a model, the subject, property, and object text values are checked to see if they already exist in the database. If they already exist (due to previous statements in other models), no new entries are made; if they do not exist, three new rows are inserted into the RDF_VALUE$ table (described in <a href="#CHDEJDCA">Section 1.3.2</a>).</p>
</div>
<!-- class="sect2" -->
<a id="CHDHFEGD"></a>
<div id="RDFRM573" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.6</span> <a id="sthref73"></a><a id="sthref74"></a><a id="sthref75"></a>Inferencing: Rules and Rulebases</h3>
<p>Inferencing is the ability to make logical deductions based on rules. Inferencing enables you to construct queries that perform semantic matching based on meaningful relationships among pieces of data, as opposed to just syntactic matching based on string or other values. Inferencing involves the use of rules, either supplied by Oracle or user-defined, placed in rulebases.</p>
<p><a href="#CHDJBHEB">Figure 1-2</a> shows triple sets being inferred from model data and the application of rules in one or more rulebases. In this illustration, the database can have any number of semantic models, rulebases, and inferred triple sets, and an inferred triple set can be derived using rules in one or more rulebases.</p>
<div id="RDFRM574" class="figure">
<p class="titleinfigure"><a id="CHDJBHEB"></a>Figure 1-2 Inferencing</p>
<img width="326" height="186" src="img/inferencing.gif" alt="Description of Figure 1-2 follows" /><br />
<a id="sthref76" href="img_text/inferencing.htm">Description of "Figure 1-2 Inferencing"</a><br />
<br /></div>
<!-- class="figure" -->
<p>A <span class="bold">rule</span> is an object that can be applied to draw inferences from semantic data. A rule is identified by a name and consists of:</p>
<ul>
<li>
<p>An IF side pattern for the antecedents</p>
</li>
<li>
<p>An optional filter condition that further restricts the subgraphs matched by the IF side pattern</p>
</li>
<li>
<p>A THEN side pattern for the consequents</p>
</li>
</ul>
<p>For example, the rule that <span class="italic">a chairperson of a conference is also a reviewer of the conference</span> could be represented as follows:</p>
<pre>
('chairpersonRule', -- rule name
 '(?r :ChairPersonOf ?c)', -- IF side pattern
 NULL,  -- filter condition
 '(?r :ReviewerOf ?c)', -- THEN side pattern
 SEM_ALIASES (SEM_ALIAS('', 'http://some.org/test/'))
)
</pre>
<p>In this case, the rule does not have a filter condition, so that component of the representation is NULL. For best performance, use a single-triple pattern on the THEN side of the rule. If a rule has multiple triple patterns on the THEN side, you can easily break it into multiple rules, each with a single-triple pattern, on the THEN side.</p>
<p>A <span class="bold">rulebase</span> is an object that contains rules. <a id="sthref77"></a><a id="sthref78"></a><a id="sthref79"></a><a id="sthref80"></a>The following Oracle-supplied rulebases are provided:</p>
<ul>
<li>
<p>RDFS</p>
</li>
<li>
<p>RDF (a subset of RDFS)</p>
</li>
<li>
<p>OWLSIF (empty)</p>
</li>
<li>
<p>RDFS++ (empty)</p>
</li>
<li>
<p>OWL2RL (empty)</p>
</li>
<li>
<p>OWLPrime (empty)</p>
</li>
<li>
<p>SKOSCORE (empty)</p>
</li>
</ul>
<p>The RDFS and RDF rulebases are created when you call the <a href="sem_apis_ref.htm#BABFAFJC">SEM_APIS.CREATE_SEM_NETWORK</a> procedure to add RDF support to the database. The RDFS rulebase implements the RDFS entailment rules, as described in the World Wide Web Consortium (W3C) <span class="italic">RDF Semantics</span> document at <code><a href="http://www.w3.org/TR/rdf-mt/">http://www.w3.org/TR/rdf-mt/</a></code>. The RDF rulebase represents the RDF entailment rules, which are a subset of the RDFS entailment rules. You can see the contents of these rulebases by examining the MDSYS.SEMR_RDFS and MDSYS.SEMR_RDF views.</p>
<p>You can also create user-defined rulebases using the <a href="sem_apis_ref.htm#CACBJAAF">SEM_APIS.CREATE_RULEBASE</a> procedure. User-defined rulebases enable you to provide additional specialized inferencing capabilities.</p>
<p><a id="sthref81"></a><a id="sthref82"></a>For each rulebase, a system table is created to hold rules in the rulebase, along with a system view with a name in the format MDSYS.SEMR_<span class="italic">rulebase-name</span> (for example, MDSYS.SEMR_FAMILY_RB for a rulebase named <code>FAMILY_RB</code>). You must use this view to insert, delete, and modify rules in the rulebase. Each MDSYS.SEMR_<span class="italic">rulebase-name</span> view has the columns shown in <a href="#CHDFDCHJ">Table 1-4</a>.</p>
<div id="RDFRM575" class="tblformal">
<p class="titleintable"><a id="sthref83"></a><a id="CHDFDCHJ"></a>Table 1-4 MDSYS.SEMR_rulebase-name View Columns</p>
<table class="cellalignment980" title="MDSYS.SEMR_rulebase-name View Columns" summary="SEMR_rulebase-name view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t9">Column Name</th>
<th class="cellalignment981" id="r1c2-t9">Data Type</th>
<th class="cellalignment981" id="r1c3-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t9" headers="r1c1-t9">
<p>RULE_NAME</p>
</td>
<td class="cellalignment982" headers="r2c1-t9 r1c2-t9">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t9 r1c3-t9">
<p>Name of the rule</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t9" headers="r1c1-t9">
<p>ANTECEDENTS</p>
</td>
<td class="cellalignment982" headers="r3c1-t9 r1c2-t9">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r3c1-t9 r1c3-t9">
<p>IF side pattern for the antecedents</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t9" headers="r1c1-t9">
<p>FILTER</p>
</td>
<td class="cellalignment982" headers="r4c1-t9 r1c2-t9">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r4c1-t9 r1c3-t9">
<p>Filter condition that further restricts the subgraphs matched by the IF side pattern. Null indicates no filter condition is to be applied.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t9" headers="r1c1-t9">
<p>CONSEQUENTS</p>
</td>
<td class="cellalignment982" headers="r5c1-t9 r1c2-t9">
<p>VARCHAR2(4000)</p>
</td>
<td class="cellalignment982" headers="r5c1-t9 r1c3-t9">
<p>THEN side pattern for the consequents</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t9" headers="r1c1-t9">
<p>ALIASES</p>
</td>
<td class="cellalignment982" headers="r6c1-t9 r1c2-t9">
<p>SEM_ALIASES</p>
</td>
<td class="cellalignment982" headers="r6c1-t9 r1c3-t9">
<p>One or more namespaces to be used. (The SEM_ALIASES data type is described in <a href="#CHDJACII">Section 1.6</a>.)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref84"></a><a id="sthref85"></a>Information about all rulebases is maintained in the MDSYS.SEM_RULEBASE_INFO view, which has the columns shown in <a href="#CHDIDJBF">Table 1-5</a> and one row for each rulebase.</p>
<div id="RDFRM576" class="tblformal">
<p class="titleintable"><a id="sthref86"></a><a id="CHDIDJBF"></a>Table 1-5 MDSYS.SEM_RULEBASE_INFO View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_RULEBASE_INFO View Columns" summary="SEM_RULEBASE_INFO view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t10">Column Name</th>
<th class="cellalignment981" id="r1c2-t10">Data Type</th>
<th class="cellalignment981" id="r1c3-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t10" headers="r1c1-t10">
<p>OWNER</p>
</td>
<td class="cellalignment982" headers="r2c1-t10 r1c2-t10">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t10 r1c3-t10">
<p>Owner of the rulebase</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t10" headers="r1c1-t10">
<p>RULEBASE_NAME</p>
</td>
<td class="cellalignment982" headers="r3c1-t10 r1c2-t10">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r3c1-t10 r1c3-t10">
<p>Name of the rulebase</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t10" headers="r1c1-t10">
<p>RULEBASE_VIEW_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t10 r1c2-t10">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r4c1-t10 r1c3-t10">
<p>Name of the view that you must use for any SQL statements that insert, delete, or modify rules in the rulebase</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t10" headers="r1c1-t10">
<p>STATUS</p>
</td>
<td class="cellalignment982" headers="r5c1-t10 r1c2-t10">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t10 r1c3-t10">
<p>Contains <code>VALID</code> if the rulebase is valid, <code>INPROGRESS</code> if the rulebase is being created, or <code>FAILED</code> if a system failure occurred during the creation of the rulebase.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CHDEBEGA">Example 1-1</a> creates a rulebase named <code>family_rb</code>, and then inserts a rule named <code>grandparent_rule</code> into the <code>family_rb</code> rulebase. This rule says that if a person is the parent of a child who is the parent of a child, that person is a grandparent of (that is, has the <code>grandParentOf</code> relationship with respect to) his or her child's child. It also specifies a namespace to be used. (This example is an excerpt from <a href="#CHDGCDGI">Example 1-44</a> in <a href="#CHDJBDHF">Section 1.11.2</a>.)</p>
<div id="RDFRM577" class="example">
<p class="titleinexample"><a id="CHDEBEGA"></a>Example 1-1 Inserting a Rule into a Rulebase</p>
<pre>
EXECUTE SEM_APIS.CREATE_RULEBASE('family_rb');

INSERT INTO mdsys.semr_family_rb VALUES(
  'grandparent_rule',
  '(?x :parentOf ?y) (?y :parentOf ?z)',
  NULL,
  '(?x :grandParentOf ?z)', 
  SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')));
</pre></div>
<!-- class="example" -->
<p>Note that the kind of grandparent rule shown in <a href="#CHDEBEGA">Example 1-1</a> can be implemented using the OWL 2 property chain construct. For information about property chain handling, see <a href="skos.htm#BACIADBD">Section 3.2.2</a>.</p>
<p>You can specify one or more rulebases when calling the SEM_MATCH table function (described in <a href="#CHDJACII">Section 1.6</a>), to control the behavior of queries against semantic data. <a href="#CHDECGII">Example 1-2</a> refers to the <code>family_rb</code> rulebase and to the <code>grandParentOf</code> relationship created in <a href="#CHDEBEGA">Example 1-1</a>, to find all grandfathers (grandparents who are male) and their grandchildren. (This example is an excerpt from <a href="#CHDGCDGI">Example 1-44</a> in <a href="#CHDJBDHF">Section 1.11.2</a>.)</p>
<div id="RDFRM578" class="example">
<p class="titleinexample"><a id="CHDECGII"></a>Example 1-2 Using Rulebases for Inferencing</p>
<pre>
-- Select all grandfathers and their grandchildren from the family model.
-- Use inferencing from both the RDFS and family_rb rulebases.
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p>For information about support for native OWL inferencing, see <a href="owl_concepts.htm#CIHHIHJI">Section 2.2</a>.</p>
</div>
<!-- class="sect2" -->
<a id="CHDGBACI"></a>
<div id="RDFRM579" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.7</span> <a id="sthref87"></a>Entailments (Rules Indexes)</h3>
<p>An <span class="bold">entailment</span> (rules index) is an object containing precomputed triples that can be inferred from applying a specified set of rulebases to a specified set of models. If a SEM_MATCH query refers to any rulebases, an entailment must exist for each rulebase-model combination in the query.</p>
<p>To create an entailment, use the <a href="sem_apis_ref.htm#CHEHDGBD">SEM_APIS.CREATE_ENTAILMENT</a> procedure. To drop (delete) an entailment, use the <a href="sem_apis_ref.htm#CHEDGDGI">SEM_APIS.DROP_ENTAILMENT</a> procedure.</p>
<p><a id="sthref88"></a><a id="sthref89"></a>When you create an entailment, a view for the triples associated with the entailment is also created under the MDSYS schema. This view has a name in the format SEMI_<span class="italic">entailment-name</span>, and it is visible only to the owner of the entailment and to users with suitable privileges. Each MDSYS.SEMI_<span class="italic">entailment-name</span> view contains a row for each triple (stored as a link in a network), and it has the same columns as the SEMM_<span class="italic">model-name</span> view, which is described in <a href="#CHDDFJCF">Table 1-2</a> in <a href="#CHDIGEFJ">Section 1.3.1</a>.</p>
<p><a id="sthref90"></a><a id="sthref91"></a>Information about all entailments is maintained in the MDSYS.SEM_RULES_INDEX_INFO view, which has the columns shown in <a href="#CHDFBHGJ">Table 1-6</a> and one row for each entailment.</p>
<div id="RDFRM580" class="tblformal">
<p class="titleintable"><a id="sthref92"></a><a id="CHDFBHGJ"></a>Table 1-6 MDSYS.SEM_RULES_INDEX_INFO View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_RULES_INDEX_INFO View Columns" summary="SEM_RULES_INDEX_INFO view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t11">Column Name</th>
<th class="cellalignment981" id="r1c2-t11">Data Type</th>
<th class="cellalignment981" id="r1c3-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t11" headers="r1c1-t11">
<p>OWNER</p>
</td>
<td class="cellalignment982" headers="r2c1-t11 r1c2-t11">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t11 r1c3-t11">
<p>Owner of the entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t11" headers="r1c1-t11">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment982" headers="r3c1-t11 r1c2-t11">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r3c1-t11 r1c3-t11">
<p>Name of the entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t11" headers="r1c1-t11">
<p>INDEX_VIEW_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t11 r1c2-t11">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r4c1-t11 r1c3-t11">
<p>Name of the view that you must use for any SQL statements that insert, delete, or modify rules in the entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t11" headers="r1c1-t11">
<p>STATUS</p>
</td>
<td class="cellalignment982" headers="r5c1-t11 r1c2-t11">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t11 r1c3-t11">
<p>Contains <code>VALID</code> if the entailment is valid, <code>INVALID</code> if the entailment is not valid, <code>INCOMPLETE</code> if the entailment is incomplete (similar to <code>INVALID</code> but requiring less time to re-create), <code>INPROGRESS</code> if the entailment is being created, or <code>FAILED</code> if a system failure occurred during the creation of the entailment.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t11" headers="r1c1-t11">
<p>MODEL_COUNT</p>
</td>
<td class="cellalignment982" headers="r6c1-t11 r1c2-t11">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r6c1-t11 r1c3-t11">
<p>Number of models included in the entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t11" headers="r1c1-t11">
<p>RULEBASE_COUNT</p>
</td>
<td class="cellalignment982" headers="r7c1-t11 r1c2-t11">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r7c1-t11 r1c3-t11">
<p>Number of rulebases included in the entailment</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref93"></a><a id="sthref94"></a>Information about all database objects, such as models and rulebases, related to entailments is maintained in the MDSYS.SEM_RULES_INDEX_DATASETS view. This view has the columns shown in <a href="#CHDIAJAI">Table 1-7</a> and one row for each unique combination of values of all the columns.</p>
<div id="RDFRM581" class="tblformal">
<p class="titleintable"><a id="sthref95"></a><a id="CHDIAJAI"></a>Table 1-7 MDSYS.SEM_RULES_INDEX_DATASETS View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_RULES_INDEX_DATASETS View Columns" summary="SEM_RULES_INDEX_DATASETS view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t12">Column Name</th>
<th class="cellalignment981" id="r1c2-t12">Data Type</th>
<th class="cellalignment981" id="r1c3-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t12" headers="r1c1-t12">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment982" headers="r2c1-t12 r1c2-t12">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r2c1-t12 r1c3-t12">
<p>Name of the entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t12" headers="r1c1-t12">
<p>DATA_TYPE</p>
</td>
<td class="cellalignment982" headers="r3c1-t12 r1c2-t12">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment982" headers="r3c1-t12 r1c3-t12">
<p>Type of data included in the entailment. Examples: <code>MODEL</code> and <code>RULEBASE</code></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t12" headers="r1c1-t12">
<p>DATA_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t12 r1c2-t12">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r4c1-t12 r1c3-t12">
<p>Name of the object of the type in the DATA_TYPE column</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#CHDJIFAI">Example 1-3</a> creates an entailment named <code>family_rb_rix_family</code>, using the <code>family</code> model and the <code>RDFS</code> and <code>family_rb</code> rulebases. (This example is an excerpt from <a href="#CHDGCDGI">Example 1-44</a> in <a href="#CHDJBDHF">Section 1.11.2</a>.)</p>
<div id="RDFRM582" class="example">
<p class="titleinexample"><a id="CHDJIFAI"></a>Example 1-3 Creating an Entailment</p>
<pre>
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    'rdfs_rix_family',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'));
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHGEAHG"></a>
<div id="RDFRM99894" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.8</span> <a id="sthref96"></a><a id="sthref97"></a>Virtual Models</h3>
<p>A virtual model is a logical graph that can be used in a SEM_MATCH query. A virtual model is the result of a UNION or UNION ALL operation on one or more models and optionally the corresponding entailment.</p>
<p>Using a virtual model can provide several benefits:</p>
<ul>
<li>
<p>It can simplify management of access privileges for semantic data. For example, assume that you have created three semantic models and one entailment based on the three models and the OWLPrime rulebase. Without a virtual model, you must individually grant and revoke access privileges for each model and the entailment. However, if you create a virtual model that contains the three models and the entailment, you will only need to grant and revoke access privileges for the single virtual model.</p>
</li>
<li>
<p>It can facilitate rapid updates to semantic models. For example, assume that virtual model VM1 contains model M1 and entailment R1 (that is, VM1 = M1 UNION ALL R1), and assume that semantic model M1_UPD is a copy of M1 that has been updated with additional triples and that R1_UPD is an entailment created for M1_UPD. Now, to have user queries over VM1 go to the updated model and entailment, you can redefine virtual model VM1 (that is, VM1 = M1_UPD UNION ALL R1_UPD).</p>
</li>
<li>
<p>It can simplify query specification because querying a virtual model is equivalent to querying multiple models in a SEM_MATCH query. For example, assume that models m1, m2, and m3 already exist, and that an entailment has been created for m1, m2 ,and m3 using the OWLPrime rulebase. You could create a virtual model vm1 as follows:</p>
<pre>
EXECUTE sem_apis.create_virtual_model('vm1', sem_models('m1', 'm2', 'm3'), 
                                      sem_rulebases('OWLPRIME'));
</pre>
<p>To query the virtual model, use the virtual model name as if it were a model in a SEM_MATCH query. For example, the following query on the virtual model:</p>
<pre>
SELECT * FROM TABLE (sem_match('{&hellip;}', sem_models('vm1'), null, &hellip;));
</pre>
<p>is equivalent to the following query on all the individual models:</p>
<pre>
SELECT * FROM TABLE (sem_match('{&hellip;}', sem_models('m1', 'm2', 'm3'), 
                                      sem_rulebases('OWLPRIME'), &hellip;));
</pre>
<p>A SEM_MATCH query over a virtual model will query either the <span class="italic">SEMV</span> or <span class="italic">SEMU</span> view (<span class="italic">SEMU</span> by default and <span class="italic">SEMV</span> if the 'ALLOW_DUP=T' option is specified) rather than querying the UNION or UNION ALL of each model and entailment. For information about these views and options, see the reference section for the <a href="sem_apis_ref.htm#CHECAJFI">SEM_APIS.CREATE_VIRTUAL_MODEL</a> procedure.</p>
</li>
</ul>
<p>Note that you cannot use Oracle Workspace Manager version-enabling on a model that participates in a virtual model. (Workspace Manager support for RDF data is described in <a href="workspace_mgr.htm#CJGJECDI">Chapter 6</a>.)</p>
<p>Virtual models use views (described later in this section) and add some metadata entries, but do not significantly increase system storage requirements.</p>
<p>To create a virtual model, use the <a href="sem_apis_ref.htm#CHECAJFI">SEM_APIS.CREATE_VIRTUAL_MODEL</a> procedure. To drop (delete) a virtual model, use the <a href="sem_apis_ref.htm#CHEGGBDE">SEM_APIS.DROP_VIRTUAL_MODEL</a> procedure. A virtual model is dropped automatically if any of its component models, rulebases, or entailment are dropped.</p>
<p>To query a virtual model, specify the virtual model name in the <code>models</code> parameter of the SEM_MATCH table function, as shown in <a href="#CIHHIJII">Example 1-4</a>.</p>
<div id="RDFRM99895" class="example">
<p class="titleinexample"><a id="CIHHIJII"></a>Example 1-4 Querying a Virtual Model</p>
<pre>
SELECT COUNT(protein)
  FROM TABLE (SEM_MATCH (
  FROM TABLE (SEM_MATCH (
    '{?protein rdf:type :Protein .
      ?protein :citation ?citation . 
      ?citation :author "Bairoch A."}',
    SEM_MODELS('<span class="bold">UNIPROT_VM</span>'), 
    NULL, 
    SEM_ALIASES(SEM_ALIAS('', 'http://purl.uniprot.org/core/')),
    NULL, 
    NULL, 
    'ALLOW_DUP=T'));
</pre></div>
<!-- class="example" -->
<p>For information about the SEM_MATCH table function, see <a href="#CHDJACII">Section 1.6</a>, which includes information using certain attributes when querying a virtual model.</p>
<p><a id="sthref98"></a><a id="sthref99"></a>When you create a virtual model, an entry is created for it in the MDSYS.SEM_MODEL$ view, which is described in <a href="#CHDDBDII">Table 1-1</a> in <a href="#CHDIGEFJ">Section 1.3.1</a>. However, the values in several of the columns are different for virtual models as opposed to semantic models, as explained in <a href="#CIHCEBAD">Table 1-8</a>.</p>
<div id="RDFRM99876" class="tblformal">
<p class="titleintable"><a id="sthref100"></a><a id="CIHCEBAD"></a>Table 1-8 MDSYS.SEM_MODEL$ View Column Explanations for Virtual Models</p>
<table class="cellalignment980" title="MDSYS.SEM_MODEL$ View Column Explanations for Virtual Models" summary="SEM_MODEL$ view columns (for virtual models)" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t13">Column Name</th>
<th class="cellalignment981" id="r1c2-t13">Data Type</th>
<th class="cellalignment981" id="r1c3-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t13" headers="r1c1-t13">
<p>OWNER</p>
</td>
<td class="cellalignment982" headers="r2c1-t13 r1c2-t13">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t13 r1c3-t13">
<p>Schema of the owner of the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t13" headers="r1c1-t13">
<p>MODEL_ID</p>
</td>
<td class="cellalignment982" headers="r3c1-t13 r1c2-t13">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r3c1-t13 r1c3-t13">
<p>Unique model ID number, automatically generated. Will be a negative number, to indicate that this is a virtual model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t13" headers="r1c1-t13">
<p>MODEL_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t13 r1c2-t13">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r4c1-t13 r1c3-t13">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t13" headers="r1c1-t13">
<p>TABLE_NAME</p>
</td>
<td class="cellalignment982" headers="r5c1-t13 r1c2-t13">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t13 r1c3-t13">
<p>Null for a virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t13" headers="r1c1-t13">
<p>COLUMN_NAME</p>
</td>
<td class="cellalignment982" headers="r6c1-t13 r1c2-t13">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r6c1-t13 r1c3-t13">
<p>Null for a virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t13" headers="r1c1-t13">
<p>MODEL_TABLESPACE_NAME</p>
</td>
<td class="cellalignment982" headers="r7c1-t13 r1c2-t13">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r7c1-t13 r1c3-t13">
<p>Null for a virtual model</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref101"></a><a id="sthref102"></a>Information about all virtual models is maintained in the MDSYS.SEM_VMODEL_INFO view, which has the columns shown in <a href="#CIHHBDHI">Table 1-9</a> and one row for each virtual model.</p>
<div id="RDFRM99896" class="tblformal">
<p class="titleintable"><a id="sthref103"></a><a id="CIHHBDHI"></a>Table 1-9 MDSYS.SEM_VMODEL_INFO View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_VMODEL_INFO View Columns" summary="SEM_VMODEL_INFO view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t14">Column Name</th>
<th class="cellalignment981" id="r1c2-t14">Data Type</th>
<th class="cellalignment981" id="r1c3-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t14" headers="r1c1-t14">
<p>OWNER</p>
</td>
<td class="cellalignment982" headers="r2c1-t14 r1c2-t14">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t14 r1c3-t14">
<p>Owner of the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t14" headers="r1c1-t14">
<p>VIRTUAL_MODEL_NAME</p>
</td>
<td class="cellalignment982" headers="r3c1-t14 r1c2-t14">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r3c1-t14 r1c3-t14">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t14" headers="r1c1-t14">
<p>UNIQUE_VIEW_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t14 r1c2-t14">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r4c1-t14 r1c3-t14">
<p>Name of the view that contains unique triples in the virtual model, or null if the view was not created</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t14" headers="r1c1-t14">
<p>DUPLICATE_VIEW_NAME</p>
</td>
<td class="cellalignment982" headers="r5c1-t14 r1c2-t14">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t14 r1c3-t14">
<p>Name of the view that contains duplicate triples (if any) in the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t14" headers="r1c1-t14">
<p>STATUS</p>
</td>
<td class="cellalignment982" headers="r6c1-t14 r1c2-t14">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r6c1-t14 r1c3-t14">
<p>Contains <code>VALID</code> if the associated entailment is valid, <code>INVALID</code> if the entailment is not valid, <code>INCOMPLETE</code> if the entailment is incomplete (similar to <code>INVALID</code> but requiring less time to re-create), <code>INPROGRESS</code> if the entailment is being created, <code>FAILED</code> if a system failure occurred during the creation of the entailment, or <code>NORIDX</code> if no entailment is associated with the virtual model.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t14" headers="r1c1-t14">
<p>MODEL_COUNT</p>
</td>
<td class="cellalignment982" headers="r7c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r7c1-t14 r1c3-t14">
<p>Number of models in the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t14" headers="r1c1-t14">
<p>RULEBASE_COUNT</p>
</td>
<td class="cellalignment982" headers="r8c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r8c1-t14 r1c3-t14">
<p>Number of rulebases used for the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t14" headers="r1c1-t14">
<p>RULES_INDEX_COUNT</p>
</td>
<td class="cellalignment982" headers="r9c1-t14 r1c2-t14">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r9c1-t14 r1c3-t14">
<p>Number of entailments in the virtual model</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="sthref104"></a><a id="sthref105"></a>Information about all objects (models, rulebases, and entailment) related to virtual models is maintained in the MDSYS.SEM_VMODEL_DATASETS view. This view has the columns shown in <a href="#CIHBHJGE">Table 1-10</a> and one row for each unique combination of values of all the columns.</p>
<div id="RDFRM99897" class="tblformal">
<p class="titleintable"><a id="sthref106"></a><a id="CIHBHJGE"></a>Table 1-10 MDSYS.SEM_VMODEL_DATASETS View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_VMODEL_DATASETS View Columns" summary="SEM_VMODEL_DATASETS view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t15">Column Name</th>
<th class="cellalignment981" id="r1c2-t15">Data Type</th>
<th class="cellalignment981" id="r1c3-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t15" headers="r1c1-t15">
<p>VIRTUAL_MODEL_NAME</p>
</td>
<td class="cellalignment982" headers="r2c1-t15 r1c2-t15">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r2c1-t15 r1c3-t15">
<p>Name of the virtual model</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t15" headers="r1c1-t15">
<p>DATA_TYPE</p>
</td>
<td class="cellalignment982" headers="r3c1-t15 r1c2-t15">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment982" headers="r3c1-t15 r1c3-t15">
<p>Type of object included in the virtual model. Examples: <code>MODEL</code> for a semantic model, <code>RULEBASE</code> for a rulebase, or <code>RULEIDX</code> for an entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t15" headers="r1c1-t15">
<p>DATA_NAME</p>
</td>
<td class="cellalignment982" headers="r4c1-t15 r1c2-t15">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r4c1-t15 r1c3-t15">
<p>Name of the object of the type in the DATA_TYPE column</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect2" -->
<a id="CIHJECEF"></a>
<div id="RDFRM164" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.3.9</span> Named Graphs<a id="sthref107"></a></h3>
<p>Oracle Database Semantic Technologies supports the use of named graphs, which are described in the "RDF Dataset" section of the W3C <span class="italic">SPARQL Query Language for RDF</span> recommendation (<code><a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset">http://www.w3.org/TR/rdf-sparql-query/#rdfDataset</a></code>).</p>
<p>This support is provided by extending an RDF triple consisting of the traditional subject, predicate, and object, to include an additional component to represent a <span class="bold">graph name</span>. The extended RDF triple, despite having four components, will continue to be referred to as an <span class="italic">RDF triple</span> in this document. In addition, the following terms are sometimes used:</p>
<ul>
<li>
<p><span class="bold"><a id="sthref108"></a>N-Triple</span> is a format that does not allow extended triples. Thus, n-triples can include only triples with three components.</p>
</li>
<li>
<p><a id="sthref109"></a><span class="bold">N-Quad</span> is a format that allows both "regular" triples (three components) and extended triples (four components, including the graph name). For more information, see <code><a href="http://www.w3.org/TR/2013/NOTE-n-quads-20130409/">http://www.w3.org/TR/2013/NOTE-n-quads-20130409/</a></code>.</p>
<p>To load a file containing extended triples (possibly mixed with regular triples) into an Oracle database, the input file must be in N-Quad format.</p>
</li>
</ul>
<p>The graph name component of an RDF triple must either be null or a URI. If it is null, the RDF triple is said to belong to a <span class="bold">default graph</span>; otherwise it is said to belong to a named graph whose name is designated by the URI.</p>
<p>Additionally, to support named graphs in SDO_RDF_TRIPLE_S object type (described in <a href="#CIHIAIJC">Section 1.5</a>), a new syntax is provided for specifying a model-graph, that is, a combination of model and graph (if any) together, and the RDF_M_ID attribute holds the identifier for a model-graph: a combination of model ID and value ID for the graph (if any). The name of a model-graph is specified as <span class="italic">model_name</span>, and if a graph is present, followed by the colon (<code>:</code>) separator character and the graph name (which must be a URI and enclosed within angle brackets <code>&lt; &gt;</code>).</p>
<p>For example, in a medical data set the named graph component for each RDF triple might be a URI based on patient identifier, so there could be as many named graphs as there are unique patients, with each named graph consisting of data for a specific patient.</p>
<p>For information about performing specific operations with named graphs, see the following:</p>
<ul>
<li>
<p>Using constructors and methods: <a href="#CIHIAIJC">Section 1.5, "Semantic Data Types, Constructors, and Methods"</a></p>
</li>
<li>
<p>Loading: <a href="#CIHJFFDG">Section 1.7.1.1.2, "Loading N-Quad Format Data into a Staging Table Using an External Table"</a> and <a href="#CIHEDEDE">Section 1.7.3.1, "Loading Data into Named Graphs Using INSERT Statements"</a></p>
</li>
<li>
<p>Querying: <a href="#CIHGBBFE">Section 1.6.2.1, "GRAPH Keyword Support"</a> and <a href="#CIHIJEDJ">Section 1.6.3, "Graph Patterns: Support for SPARQL SELECT Syntax"</a></p>
</li>
<li>
<p>Inferencing: <a href="owl_concepts.htm#CIHIDAFB">Section 2.2.11, "Using Named Graph Based Inferencing (Global and Local)"</a></p>
</li>
</ul>
<div id="RDFRM375" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref110"></a>
<h4 class="sect3"><span class="secnum">1.3.9.1</span> <a id="sthref111"></a><a id="sthref112"></a>Data Formats Related to Named Graph Support</h4>
<p>TriG (<code><a href="http://wifo5-03.informatik.uni-mannheim.de/bizer/trig/">http://wifo5-03.informatik.uni-mannheim.de/bizer/trig/</a></code>) and N-QUADS (<code><a href="http://www.w3.org/TR/2013/NOTE-n-quads-20130409/">http://www.w3.org/TR/2013/NOTE-n-quads-20130409/</a></code>) are two popular data formats that provide graph names (or context) to triple data. (Note that as on November 2011, neither format is a standard.) The graph names (context) can be used in a variety of different ways. Typical usage includes, but is not limited to, the grouping of triples for ease of management, localized query, localized inference, and provenance.</p>
<p><a href="#CIHGHHIA">Example 1-5</a> shows an RDF data set encoded in TriG format. It contains a default graph and a named graph.</p>
<div id="RDFRM376" class="example">
<p class="titleinexample"><a id="CIHGHHIA"></a>Example 1-5 RDF Data Encoded in TriG Format</p>
<pre>
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix dc: &lt;http://purl.org/dc/elements/1.1/&gt; .
 
# Default graph
{
  &lt;http://my.com/John&gt; dc:publisher &lt;http://publisher/Xyz&gt; .
}
 
# A named graph
&lt;http://my.com/John&gt; {
  &lt;http://my.com/John&gt; foaf:name "John Doe" .
}
</pre></div>
<!-- class="example" -->
<p>When loading the TriG file from <a href="#CIHGHHIA">Example 1-5</a> into a <code>DatasetGraphOracleSem</code> object (for example, using <a href="sem_jena.htm#BGBFBJEF">Example 7-10</a> in <a href="sem_jena.htm#BGBCHIED">Section 7.11, "Bulk Loading Using the Jena Adapter"</a>, but replacing the constant <code>"N-QUADS"</code> with <code>"TRIG"</code>), the triples in the default graph will be loaded into Oracle Database as triples with null graph names, and the triples in the named graphs will be loaded into Oracle Database with the designated graph names.</p>
<p>N-QUADS format is a simple extension of the existing N-TRIPLES format by adding an optional fourth column (graph name or context). <a href="#CIHJADFH">Example 1-6</a> shows the N-QUADS format representation of the TriG file from <a href="#CIHGHHIA">Example 1-5</a>.</p>
<div id="RDFRM377" class="example">
<p class="titleinexample"><a id="CIHJADFH"></a>Example 1-6 N-QUADS Format Representation</p>
<pre>
&lt;http://my.com/John&gt; &lt;http://purl.org/dc/elements/1.1/publisher&gt; &lt;http://publisher/Xyz&gt; .
&lt;http://my.com/John&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "John Doe" &lt;http://my.com/John&gt;
</pre></div>
<!-- class="example" -->
<p>When loading an N-QUADS file into a <code>DatasetGraphOracleSem</code> object (see <a href="sem_jena.htm#BGBFBJEF">Example 7-10</a>), lines without the fourth column will be loaded into Oracle Database as triples with null graph names, and lines with a fourth column will be loaded into Oracle Database with the designated graph names.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="RDFRM583" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref113"></a>
<h3 class="sect2"><span class="secnum">1.3.10</span> <a id="sthref114"></a><a id="sthref115"></a>Semantic Data Security Considerations</h3>
<p>The following database security considerations apply to the use of semantic data:</p>
<ul>
<li>
<p>When a model or entailment is created, the owner gets the SELECT privilege with the GRANT option on the associated view. Users that have the SELECT privilege on these views can perform SEM_MATCH queries against the associated model or entailment.</p>
</li>
<li>
<p>When a rulebase is created, the owner gets the SELECT, INSERT, UPDATE, and DELETE privileges on the rulebase, with the GRANT option. Users that have the SELECT privilege on a rulebase can create an entailment that includes the rulebase. The INSERT, UPDATE, and DELETE privileges control which users can modify the rulebase and how they can modify it.</p>
</li>
<li>
<p>To perform data manipulation language (DML) operations on a model, a user must have DML privileges for the corresponding base table.</p>
</li>
<li>
<p>The creator of the base table corresponding to a model can grant privileges to other users.</p>
</li>
<li>
<p>To perform data manipulation language (DML) operations on a rulebase, a user must have the appropriate privileges on the corresponding database view.</p>
</li>
<li>
<p>The creator of a model can grant SELECT privileges on the corresponding database view to other users.</p>
</li>
<li>
<p>A user can query only those models for which that user has SELECT privileges to the corresponding database views.</p>
</li>
<li>
<p>Only the creator of a model or a rulebase can drop it.</p>
</li>
</ul>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHEDHIF"></a>
<div id="RDFRM584" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.4</span> <a id="sthref116"></a><a id="sthref117"></a>Semantic Metadata Tables and Views</h2>
<p>Oracle Database maintains several tables and views in the MDSYS schema to hold metadata related to semantic data. (Some of these tables and views are created by the <a href="sem_apis_ref.htm#BABFAFJC">SEM_APIS.CREATE_SEM_NETWORK</a> procedure, as explained in <a href="#CHDEDFFA">Section 1.10</a>, and some are created only as needed.) <a href="#CHDIDCED">Table 1-11</a> lists the tables and views in alphabetical order. (In addition, several tables and views are created for Oracle internal use, and these are accessible only by users with DBA privileges.)</p>
<div id="RDFRM585" class="tblformal">
<p class="titleintable"><a id="sthref118"></a><a id="CHDIDCED"></a>Table 1-11 Semantic Metadata Tables and Views</p>
<table class="cellalignment980" title="Semantic Metadata Tables and Views" summary="RDF metadata tables and views" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t16">Name</th>
<th class="cellalignment981" id="r1c2-t16">Contains Information About</th>
<th class="cellalignment981" id="r1c3-t16">Described In</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t16" headers="r1c1-t16">
<p>RDF_VALUE$</p>
</td>
<td class="cellalignment982" headers="r2c1-t16 r1c2-t16">
<p>Subjects, properties, and objects used to represent statements</p>
</td>
<td class="cellalignment982" headers="r2c1-t16 r1c3-t16">
<p><a href="#CHDEJDCA">Section 1.3.2</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t16" headers="r1c1-t16">
<p>RDFOLS_SECURE_RESOURCE</p>
</td>
<td class="cellalignment982" headers="r3c1-t16 r1c2-t16">
<p>Resources secured with Oracle Label Security (OLS) policies and the sensitivity labels associated with these resources</p>
</td>
<td class="cellalignment982" headers="r3c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHDFCAB">Section 5.2.2.6</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t16" headers="r1c1-t16">
<p>RDFVPD_MODELS</p>
</td>
<td class="cellalignment982" headers="r4c1-t16 r1c2-t16">
<p>RDF models and their associated VPD policies</p>
</td>
<td class="cellalignment982" headers="r4c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHCCCGA">Section 5.1.5</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t16" headers="r1c1-t16">
<p>RDFVPD_POLICIES</p>
</td>
<td class="cellalignment982" headers="r5c1-t16 r1c2-t16">
<p>All VPD policies defined in the schema or the policies to which the user has FULL access</p>
</td>
<td class="cellalignment982" headers="r5c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHEHGCH">Section 5.1.4</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t16" headers="r1c1-t16">
<p>RDFVPD_POLICY_CONSTRAINTS</p>
</td>
<td class="cellalignment982" headers="r6c1-t16 r1c2-t16">
<p>Constraints defined in the VPD policy that are accessible to the current user</p>
</td>
<td class="cellalignment982" headers="r6c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHHHIAD">Section 5.1.6</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t16" headers="r1c1-t16">
<p>RDFVPD_PREDICATE_MDATA</p>
</td>
<td class="cellalignment982" headers="r7c1-t16 r1c2-t16">
<p>Predicate metadata associated with a VPD policy</p>
</td>
<td class="cellalignment982" headers="r7c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHIDGEI">Section 5.1.7</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t16" headers="r1c1-t16">
<p>RDFVPD_RESOURCE_REL</p>
</td>
<td class="cellalignment982" headers="r8c1-t16 r1c2-t16">
<p>Subclass, subproperty, and equivalence property relationships that are defined between resources in a VPD policy</p>
</td>
<td class="cellalignment982" headers="r8c1-t16 r1c3-t16">
<p><a href="fine_grained_acc.htm#CIHGJHCJ">Section 5.1.8</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t16" headers="r1c1-t16">
<p>SEM_DTYPE_INDEX_INFO</p>
</td>
<td class="cellalignment982" headers="r9c1-t16 r1c2-t16">
<p>All data type indexes in the network</p>
</td>
<td class="cellalignment982" headers="r9c1-t16 r1c3-t16">
<p><a href="#CIHBJEDA">Section 1.9</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r10c1-t16" headers="r1c1-t16">
<p>SEM_MODEL$</p>
</td>
<td class="cellalignment982" headers="r10c1-t16 r1c2-t16">
<p>All models defined in the database</p>
</td>
<td class="cellalignment982" headers="r10c1-t16 r1c3-t16">
<p><a href="#CHDIGEFJ">Section 1.3.1</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r11c1-t16" headers="r1c1-t16">
<p>SEM_NETWORK_INDEX_INFO$</p>
</td>
<td class="cellalignment982" headers="r11c1-t16 r1c2-t16">
<p>Semantic network indexes</p>
</td>
<td class="cellalignment982" headers="r11c1-t16 r1c3-t16">
<p><a href="#CIHDHGGH">Section 1.8.1</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r12c1-t16" headers="r1c1-t16">
<p>SEM_RULEBASE_INFO</p>
</td>
<td class="cellalignment982" headers="r12c1-t16 r1c2-t16">
<p>Rulebases</p>
</td>
<td class="cellalignment982" headers="r12c1-t16 r1c3-t16">
<p><a href="#CHDHFEGD">Section 1.3.6</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r13c1-t16" headers="r1c1-t16">
<p>SEM_RULES_INDEX_DATASETS</p>
</td>
<td class="cellalignment982" headers="r13c1-t16 r1c2-t16">
<p>Database objects used in entailments</p>
</td>
<td class="cellalignment982" headers="r13c1-t16 r1c3-t16">
<p><a href="#CHDGBACI">Section 1.3.7</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r14c1-t16" headers="r1c1-t16">
<p>SEM_RULES_INDEX_INFO</p>
</td>
<td class="cellalignment982" headers="r14c1-t16 r1c2-t16">
<p>Entailments (rules indexes)</p>
</td>
<td class="cellalignment982" headers="r14c1-t16 r1c3-t16">
<p><a href="#CHDGBACI">Section 1.3.7</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r15c1-t16" headers="r1c1-t16">
<p>SEM_VMODEL_INFO</p>
</td>
<td class="cellalignment982" headers="r15c1-t16 r1c2-t16">
<p>Virtual models</p>
</td>
<td class="cellalignment982" headers="r15c1-t16 r1c3-t16">
<p><a href="#CIHGEAHG">Section 1.3.8</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r16c1-t16" headers="r1c1-t16">
<p>SEM_VMODEL_DATASETS</p>
</td>
<td class="cellalignment982" headers="r16c1-t16 r1c2-t16">
<p>Database objects used in virtual models</p>
</td>
<td class="cellalignment982" headers="r16c1-t16 r1c3-t16">
<p><a href="#CIHGEAHG">Section 1.3.8</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r17c1-t16" headers="r1c1-t16">
<p>SEMCL_<span class="italic">entailment-name</span></p>
</td>
<td class="cellalignment982" headers="r17c1-t16 r1c2-t16">
<p><code>owl:sameAs</code> clique members and canonical representatives</p>
</td>
<td class="cellalignment982" headers="r17c1-t16 r1c3-t16">
<p><a href="owl_concepts.htm#CIHGBHFF">Section 2.2.8</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r18c1-t16" headers="r1c1-t16">
<p>SEMI_<span class="italic">entailment-name</span></p>
</td>
<td class="cellalignment982" headers="r18c1-t16 r1c2-t16">
<p>Triples in the specified entailment</p>
</td>
<td class="cellalignment982" headers="r18c1-t16 r1c3-t16">
<p><a href="#CHDGBACI">Section 1.3.7</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r19c1-t16" headers="r1c1-t16">
<p>SEMM_<span class="italic">model-name</span></p>
</td>
<td class="cellalignment982" headers="r19c1-t16 r1c2-t16">
<p>Triples in the specified model</p>
</td>
<td class="cellalignment982" headers="r19c1-t16 r1c3-t16">
<p><a href="#CHDIGEFJ">Section 1.3.1</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r20c1-t16" headers="r1c1-t16">
<p>SEMR_<span class="italic">rulebase-name</span></p>
</td>
<td class="cellalignment982" headers="r20c1-t16 r1c2-t16">
<p>Rules in the specified rulebase</p>
</td>
<td class="cellalignment982" headers="r20c1-t16 r1c3-t16">
<p><a href="#CHDHFEGD">Section 1.3.6</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r21c1-t16" headers="r1c1-t16">
<p>SEMU_<span class="italic">virtual-model-name</span></p>
</td>
<td class="cellalignment982" headers="r21c1-t16 r1c2-t16">
<p>Unique triples in the virtual model</p>
</td>
<td class="cellalignment982" headers="r21c1-t16 r1c3-t16">
<p><a href="#CIHGEAHG">Section 1.3.8</a></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r22c1-t16" headers="r1c1-t16">
<p>SEMV_<span class="italic">virtual-model-name</span></p>
</td>
<td class="cellalignment982" headers="r22c1-t16 r1c2-t16">
<p>Triples in the virtual model</p>
</td>
<td class="cellalignment982" headers="r22c1-t16 r1c3-t16">
<p><a href="#CIHGEAHG">Section 1.3.8</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<a id="CIHIAIJC"></a>
<div id="RDFRM586" class="sect1">
<h2 class="sect1"><span class="secnum">1.5</span> <a id="sthref119"></a><a id="sthref120"></a><a id="sthref121"></a><a id="sthref122"></a><a id="sthref123"></a><a id="sthref124"></a>Semantic Data Types, Constructors, and Methods</h2>
<p>The SDO_RDF_TRIPLE object type represents semantic data in triple format, and the SDO_RDF_TRIPLE_S object type (the _S for storage) stores persistent semantic data in the database. The SDO_RDF_TRIPLE_S type has references to the data, because the actual semantic data is stored only in the central RDF schema. This type has methods to retrieve the entire triple or part of the triple.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Blank nodes are always reused within an RDF model and cannot be reused across models</div>
<p>The SDO_RDF_TRIPLE type is used to display triples, whereas the SDO_RDF_TRIPLE_S type is used to store the triples in database tables.</p>
<p>The SDO_RDF_TRIPLE object type has the following attributes:</p>
<pre>
SDO_RDF_TRIPLE (
  subject VARCHAR2(4000), 
  property VARCHAR2(4000), 
  object VARCHAR2(10000))
</pre>
<p>The SDO_RDF_TRIPLE_S object type has the following attributes:</p>
<pre>
SDO_RDF_TRIPLE_S (
  RDF_C_ID  NUMBER,  -- Canonical object value ID
  RDF_M_ID NUMBER,  -- Model (or Model-Graph) ID 
  RDF_S_ID  NUMBER,  -- Subject value ID
  RDF_P_ID NUMBER, -- Property value ID
  RDF_O_ID  NUMBER)  -- Object value ID
</pre>
<p>The SDO_RDF_TRIPLE_S type has the following methods that retrieve the name of the RDF model (or model-graph), a triple, or a part (subject, property, or object) of a triple:</p>
<pre>
GET_MODEL() RETURNS VARCHAR2
GET_TRIPLE() RETURNS SDO_RDF_TRIPLE
GET_SUBJECT() RETURNS VARCHAR2
GET_PROPERTY() RETURNS VARCHAR2
GET_OBJECT() RETURNS CLOB
</pre>
<p><a href="#CHDCCHFJ">Example 1-7</a> shows the SDO_RDF_TRIPLE_S methods.</p>
<div id="RDFRM587" class="example">
<p class="titleinexample"><a id="CHDCCHFJ"></a>Example 1-7 SDO_RDF_TRIPLE_S Methods</p>
<pre>
SELECT a.triple.<span class="bold">GET_MODEL()</span> AS model_graph, a.triple.GET_TRIPLE() AS triple
  FROM articles_rdf_data a WHERE a.id = 99;
 
MODEL_GRAPH
--------------------------------------------------------------------------------
TRIPLE(SUBJECT, PROPERTY, OBJECT)
--------------------------------------------------------------------------------
ARTICLES:&lt;http://examples.com/ns#Graph1&gt;
SDO_RDF_TRIPLE('&lt;http://nature.example.com/Article101&gt;', '&lt;http://purl.org/dc/elements/1.1/creator&gt;', '"John Smith"')

SELECT a.triple.<span class="bold">GET_TRIPLE()</span> AS triple
  FROM articles_rdf_data a WHERE a.id = 1;
 
TRIPLE(SUBJECT, PROPERTY, OBJECT)
--------------------------------------------------------------------------------
SDO_RDF_TRIPLE('&lt;http://nature.example.com/Article1&gt;', '&lt;http://purl.org/dc/elem
ents/1.1/title&gt;', '&lt;All about XYZ&gt;')
 
SELECT a.triple.<span class="bold">GET_SUBJECT()</span> AS subject
  FROM articles_rdf_data a WHERE a.id = 1;
 
SUBJECT                                                                         
--------------------------------------------------------------------------------
&lt;http://nature.example.com/Article1&gt;                                           
 
SELECT a.triple.<span class="bold">GET_PROPERTY()</span> AS property
  FROM articles_rdf_data a WHERE a.id = 1;
 
PROPERTY                                                                        
--------------------------------------------------------------------------------
&lt;http://purl.org/dc/elements/1.1/title&gt;                                         
 
SELECT a.triple.<span class="bold">GET_OBJECT()</span> AS object
  FROM articles_rdf_data a WHERE a.id = 1;
 
OBJECT                                                                          
--------------------------------------------------------------------------------
&lt;All about XYZ&gt;
</pre></div>
<!-- class="example" -->
<a id="CHDCDDHI"></a>
<div id="RDFRM588" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.5.1</span> <a id="sthref125"></a>Constructors for Inserting Triples</h3>
<p>The following constructor formats are available for inserting triples into a model table. The only difference is that in the second format the data type for the object is CLOB, to accommodate very long literals.</p>
<pre>
SDO_RDF_TRIPLE_S (
  model_name VARCHAR2, -- Model name
  subject    VARCHAR2, -- Subject
  property   VARCHAR2, -- Property
  object     VARCHAR2) -- Object
  RETURN     SELF;

SDO_RDF_TRIPLE_S (
  model_name VARCHAR2, -- Model name
  subject    VARCHAR2, -- Subject
  property   VARCHAR2, -- Property
  object     CLOB) -- Object
  RETURN SELF;

GET_OBJ_VALUE() RETURN VARCHAR2;
</pre>
<p><a href="#CHDCCCIC">Example 1-8</a> uses the first constructor format to insert several triples.</p>
<div id="RDFRM589" class="example">
<p class="titleinexample"><a id="CHDCCCIC"></a>Example 1-8 SDO_RDF_TRIPLE_S Constructor to Insert Triples</p>
<pre>
INSERT INTO articles_rdf_data VALUES (2,
  SDO_RDF_TRIPLE_S ('articles','&lt;http://nature.example.com/Article1&gt;',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '"Jane Smith"'));

INSERT INTO articles_rdf_data VALUES (98,
  SDO_RDF_TRIPLE_S ('articles:&lt;http://examples.com/ns#Graph1&gt;',
    '&lt;http://nature.example.com/Article102&gt;',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '_:b1'));
 
INSERT INTO articles_rdf_data VALUES (97,
  SDO_RDF_TRIPLE_S ('articles:&lt;http://examples.com/ns#Graph1&gt;',
    '_:b2',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '_:b1'));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDJACII"></a>
<div id="RDFRM592" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.6</span> <a id="sthref126"></a><a id="sthref127"></a><a id="sthref128"></a>Using the SEM_MATCH Table Function to Query Semantic Data</h2>
<p>To query semantic data, use the SEM_MATCH table function. This function has the following attributes:</p>
<pre>
SEM_MATCH(
  query        VARCHAR2,
  models       SEM_MODELS,
  rulebases    SEM_RULEBASES,
  aliases      SEM_ALIASES,
  filter       VARCHAR2,
  index_status VARCHAR2,
  options      VARCHAR2,
  graphs       SEM_GRAPHS,
  named_graphs SEM_GRAPHS
 ) RETURN ANYDATASET;
</pre>
<p>The <code>query</code> attribute is required. The other attributes are optional (that is, each can be a null value).</p>
<p>The <code>query</code> attribute is a string literal (or concatenation of string literals) with one or more triple patterns, usually containing variables. (The <code>query</code> attribute cannot be a bind variable or an expression involving a bind variable.) A triple pattern is a triple of atoms followed by a period. Each atom can be a variable (for example, <code>?x</code>), a qualified name (for example, <code>rdf:type</code>) that is expanded based on the default namespaces and the value of the aliases attribute, or a full URI (for example, <code>&lt;http://www.example.org/family/Male&gt;</code>). In addition, the third atom can be a numeric literal (for example, <code>3.14</code>), a plain literal (for example, <code>"Herman"</code>), a language-tagged plain literal (for example, <code>"Herman"@en</code>), or a typed literal (for example, <code>"123"^^xsd:int</code>).</p>
<p>For example, the following <code>query</code> attribute specifies three triple patterns to find grandfathers (that is, grandparents who are also male) and the height of each of their grandchildren:</p>
<pre>
'{ ?x :grandParentOf ?y . ?x rdf:type :Male . ?y :height ?h }'
</pre>
<p><a id="sthref129"></a><a id="sthref130"></a>The <code>models</code> attribute identifies the model or models to use. Its data type is SEM_MODELS, which has the following definition: <code>TABLE OF VARCHAR2(25)</code>. If you are querying a virtual model, specify only the name of the virtual model and no other models. (Virtual models are explained in <a href="#CIHGEAHG">Section 1.3.8</a>.)</p>
<p><a id="sthref131"></a><a id="sthref132"></a>The <code>rulebases</code> attribute identifies one or more rulebases whose rules are to be applied to the query. Its data type is SDO_RDF_RULEBASES, which has the following definition: <code>TABLE OF VARCHAR2(25)</code>. If you are querying a virtual model, this attribute must be null.</p>
<p><a id="sthref133"></a><a id="sthref134"></a><a id="sthref135"></a>The <code>aliases</code> attribute identifies one or more namespaces, in addition to the default namespaces, to be used for expansion of qualified names in the query pattern. Its data type is SEM_ALIASES, which has the following definition: <code>TABLE OF SEM_ALIAS</code>, where each SEM_ALIAS element identifies a namespace ID and namespace value. The SEM_ALIAS data type has the following definition: <code>(namespace_id VARCHAR2(30), namespace_val VARCHAR2(4000))</code></p>
<p>The following default namespaces (<code>namespace_id</code> and <code>namespace_val</code> attributes) are used by the SEM_MATCH table function and the SEM_CONTAINS and SEM_RELATED operators:</p>
<pre>
('orardf', 'http://xmlns.oracle.com/rdf/')
('orageo', 'http://xmlns.oracle.com/rdf/geo/')
('owl',    'http://www.w3.org/2002/07/owl#')
('rdf',    'http://www.w3.org/1999/02/22-rdf-syntax-ns#')
('rdfs',   'http://www.w3.org/2000/01/rdf-schema#')
('xsd',    'http://www.w3.org/2001/XMLSchema#')
</pre>
<p>You can override any of these defaults by specifying the <code>namespace_id</code> value and a different <code>namespace_val</code> value in the <code>aliases</code> attribute.</p>
<p><a id="sthref136"></a>The <code>filter</code> attribute identifies any additional selection criteria. If this attribute is not null, it should be a string in the form of a <code>WHERE</code> clause without the <code>WHERE</code> keyword. For example: <code>'(h &gt;= ''6'')'</code> to limit the result to cases where the height of the grandfather's grandchild is 6 or greater (using the example of triple patterns earlier in this section).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Instead of using the <code>filter</code> attribute, you are encouraged to use the FILTER keyword inside your query pattern whenever possible (as explained in <a href="#CIHEHAAD">Section 1.6.2</a>). Using the FILTER keyword is likely to give better performance because of internal optimizations. The <code>filter</code> argument, however, can be useful if you require SQL constructs that cannot be expressed with the FILTER keyword.</div>
<p><a id="sthref137"></a><a id="sthref138"></a><a id="sthref139"></a>The <code>index_status</code> attribute lets you query semantic data even when the relevant entailment does not have a valid status. (If you are querying a virtual model, this attribute refers to the entailment associated with the virtual model.) If this attribute is null, the query returns an error if the entailment does not have a valid status. If this attribute is not null, it must be the string <code>INCOMPLETE</code> or <code>INVALID</code>. For an explanation of query behavior with different <code>index_status</code> values, see <a href="#CHDGJADB">Section 1.6.1</a>.</p>
<p><a id="sthref140"></a>The <code>options</code> attribute identifies options that can affect the results of queries. Options are expressed as keyword-value pairs. The following options are supported:</p>
<ul>
<li>
<p><a id="sthref141"></a><a id="sthref142"></a><a id="sthref143"></a><a id="sthref144"></a><code>ALL_BGP_HASH</code> and <code>ALL_BGP_NL</code> are global query optimizer hints that specify that all inter-BGP joins (for example. the join between the root BGP and an OPTIONAL BGP) should use the specified join type. (BGP stands for <span class="italic">basic graph pattern</span>. From the W3C SPARQL Query Language for RDF Recommendation: "SPARQL graph pattern matching is defined in terms of combining the results from matching basic graph patterns. A sequence of triple patterns interrupted by a filter comprises a single basic graph pattern. Any graph pattern terminates a basic graph pattern."</p>
<p><a href="#CIHHGHED">Example 1-14</a> shows the ALL_BGP_HASH option used in a SEM_MATCH query.</p>
</li>
<li>
<p><a id="sthref145"></a><a id="sthref146"></a><code>ALL_LINK_HASH</code> and <code>ALL_LINK_NL</code> are global query optimizer hints that specify the join type for all LINK$ joins (that is, all joins between triple patterns within a BGP). If <code>ALL_LINK_HASH</code> or <code>ALL_LINK_NL</code> is used with a HINT0 hint, the HINT0 hint overrides the ALL_ORDERED hint.</p>
</li>
<li>
<p><a id="sthref147"></a><code>ALL_ORDERED</code> is a global query optimizer hint that specifies that the triple patterns in each BGP in the query should be evaluated in order. If ALL_ORDERED is used with a HINT0 hint, the HINT0 hint overrides the ALL_ORDERED hint.</p>
<p><a href="#CIHHGHED">Example 1-14</a> shows the ALL_ORDERED option used in a SEM_MATCH query.</p>
</li>
<li>
<p><a id="sthref148"></a><code>ALLOW_DUP=T</code> generates an underlying SQL statement that performs a "union all" instead of a union of the semantic models and inferred data (if applicable). This option may introduce more rows (duplicate triples) in the result set, and you may need to adjust the application logic accordingly. If you do not specify this option, duplicate triples are automatically removed across all the models and inferred data to maintain the set semantics of merged RDF graphs; however, removing duplicate triples increases query processing time. In general, specifying <code>'ALLOW_DUP=T'</code> improves performance significantly when multiple semantic models are involved in a SEM_MATCH query.</p>
<p>If you are querying a virtual model, specifying <code>ALLOW_DUP=T</code> causes the SEMV_<span class="italic">vm_name</span> view to be queried; otherwise, the SEMU_<span class="italic">vm_name</span> view is queried.</p>
</li>
<li>
<p><a id="sthref149"></a><code>DO_UNESCAPE=T</code> causes characters in the following return columns to be unescaped according to the W3C N-Triples specification (<code><a href="http://www.w3.org/TR/rdf-testcases/#ntriples">http://www.w3.org/TR/rdf-testcases/#ntriples</a></code>): var, var$_PREFIX, var$_SUFFIX, var$RDFCLOB, var$RDFLTYP, var$RDFLANG, and var$RDFTERM. See also <a href="sem_apis_ref.htm#CACDGBDI">SEM_APIS.ESCAPE_CLOB_TERM</a>, <a href="sem_apis_ref.htm#CACHGAEA">SEM_APIS.UNESCAPE_CLOB_VALUE</a>, <a href="sem_apis_ref.htm#CACGGIGI">SEM_APIS.ESCAPE_RDF_TERM</a>, <a href="sem_apis_ref.htm#CACJBGJD">SEM_APIS.ESCAPE_RDF_VALUE</a>, <a href="sem_apis_ref.htm#CACBEBJJ">SEM_APIS.UNESCAPE_CLOB_TERM</a>, <a href="sem_apis_ref.htm#CACHGAEA">SEM_APIS.UNESCAPE_CLOB_VALUE</a>, <a href="sem_apis_ref.htm#CACECFBI">SEM_APIS.UNESCAPE_RDF_TERM</a>, and <a href="sem_apis_ref.htm#CACJAEGD">SEM_APIS.UNESCAPE_RDF_VALUE</a>.</p>
</li>
<li>
<p><a id="sthref150"></a><a id="sthref151"></a><code>FINAL_VALUE_HASH</code> and <code>FINAL_VALUE_NL</code> are global query optimizer hints that specify the join method that should be used to obtain the lexical values for any query variables that are not used in a FILTER clause.</p>
</li>
<li>
<p><a id="sthref152"></a><code>GRAPH_MATCH_UNNAMED=T</code> allows unnamed triples (null <code>G_ID</code>) to be matched inside GRAPH clauses. That is, two triples will satisfy the graph join condition if their graphs are equal or if one or both of the graphs are null. This option may be useful when your dataset includes unnamed TBOX triples or unnamed entailed triples.</p>
</li>
<li>
<p><a id="sthref153"></a><code>HINT0={&lt;hint-string&gt;}</code> (pronounced and written "hint" and the number zero) specifies one or more keywords with hints to influence the execution plan and results of queries. Conceptually, a graph pattern with <span class="italic">n</span> triple patterns and referring to <span class="italic">m</span> distinct variables results in an (<span class="italic">n</span>+<span class="italic">m</span>)-way join: <span class="italic">n</span>-way self-join of the target RDF model or models and optionally the corresponding entailment, and then <span class="italic">m</span> joins with RDF_VALUE$ for looking up the values for the <span class="italic">m</span> variables. A hint specification affects the join order and join type used for the query execution.</p>
<p>The hint specification, <span class="italic">&lt;hint-string&gt;</span>, uses keywords, some of which have parameters consisting of a sequence or set of aliases, or references, for individual triple patterns and variables used in the query. Aliases for triple patterns are of the form t<span class="italic">i</span> where <span class="italic">i</span> refers to the 0-based ordinal numbers of triple patterns in the query. For example, the alias for the first triple pattern in a query is <code>t0</code>, the alias for the second one is <code>t1</code>, and so on. Aliases for the variables used in a query are simply the names of those variables. Thus, <code>?x</code> will be used in the hint specification as the alias for a variable <code>?x</code> used in the graph pattern.</p>
<p>Hints used for influencing query execution plans include LEADING(<span class="italic">&lt;sequence of aliases&gt;</span>), USE_NL(<span class="italic">&lt;set of aliases&gt;</span>), USE_HASH(<span class="italic">&lt;set of aliases&gt;</span>), and INDEX(<span class="italic">&lt;alias&gt; &lt;index_name&gt;</span>). These hints have the same format and basic meaning as hints in SQL statements, which are explained in <a class="olink SQLRF002" href="../../server.112/e41084/sql_elements.htm#SQLRF002"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
<p><a href="#CIHJJFHE">Example 1-10</a> shows the HINT0 option used in a SEM_MATCH query.</p>
</li>
<li>
<p><code><a id="sthref154"></a>INF_ONLY=T</code> queries only the entailed graph for the specified models and rulebases.</p>
</li>
<li>
<p><code><a id="sthref155"></a>PLUS_RDFT=T</code> can be used with SPARQL SELECT syntax (see <a href="#CIHIJEDJ">Section 1.6.3, "Graph Patterns: Support for SPARQL SELECT Syntax"</a>) to additionally return a <span class="italic">var</span>$RDFTERM CLOB column for each projected query variable. The value for this column is equivalent to the result of <a href="sem_apis_ref.htm#CHEBDAJJ">SEM_APIS.COMPOSE_RDF_TERM</a>(<span class="italic">var</span>, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFLTYP, <span class="italic">var</span>$RDFLANG, <span class="italic">var</span>$RDFCLOB). When using this option, the return columns for each variable var will be <span class="italic">var</span>, <span class="italic">var</span>$RDFVID, <span class="italic">var</span>$_PREFIX, <span class="italic">var</span>$_SUFFIX, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFCLOB, <span class="italic">var</span>$RDFLTYP, <span class="italic">var</span>$RDFLANG, and <span class="italic">var</span>$RDFTERM.</p>
</li>
<li>
<p><code><a id="sthref156"></a>STRICT_DEFAULT=T</code> restricts the default graph to unnamed triples when no dataset information is specified.</p>
</li>
</ul>
<p><a id="sthref157"></a>The <code>graphs</code> attribute specifies the set of named graphs from which to construct the default graph for a SEM_MACH query. Its data type is SEM_GRAPHS, which has the following definition: <code>TABLE OF VARCHAR2(4000)</code>. The default value for this attribute is <code>NULL</code>. When <code>graphs</code> is <code>NULL</code>, the "union all" of all graphs in the set of query models is used as the default graph.</p>
<p><a id="sthref158"></a>The <code>named_graphs</code> attribute specifies the set of named graphs that can be matched by a GRAPH clause. Its data type is SEM_GRAPHS, which has the following definition: <code>TABLE OF VARCHAR2(4000)</code>. The default value for this attribute is <code>NULL</code>. When named_graphs is <code>NULL</code>, all named graphs in the set of query models can be matched by a GRAPH clause.</p>
<p>The SEM_MATCH table function returns an object of type ANYDATASET, with elements that depend on the input variables. In the following explanations, <span class="italic">var</span> represents the name of a variable used in the query. For each variable <span class="italic">var</span>, the result elements have the following attributes: <span class="italic">var</span>, <span class="italic">var</span>$RDFVID, <span class="italic">var</span>$_PREFIX, <span class="italic">var</span>$_SUFFIX, <span class="italic">var</span>$RDFVTYP, <span class="italic">var</span>$RDFCLOB, <span class="italic">var</span>$RDFLTYP, and <span class="italic">var</span>$RDFLANG.</p>
<p>In such cases, <span class="italic">var</span> has the lexical value bound to the variable, <span class="italic">var</span>$RDFVID has the VALUE_ID of the value bound to the variable, <span class="italic">var</span>$_PREFIX and <span class="italic">var</span>$_SUFFIX are the <span class="italic">prefix</span> and <span class="italic">suffix</span> of the value bound to the variable, <span class="italic">var</span>$RDFVTYP indicates the type of value bound to the variable (<code>URI</code>, <code>LIT</code> [literal], or <code>BLN</code> [blank node]), <span class="italic">var</span>$RDFCLOB has the lexical value bound to the variable if the value is a long literal, <span class="italic">var</span>$RDFLTYP indicates the type of literal bound if a literal is bound, and <span class="italic">var</span>$RDFLANG has the language tag of the bound literal if a literal with language tag is bound. <span class="italic">var</span>$RDFCLOB is of type CLOB, while all other attributes are of type VARCHAR2.</p>
<p>For a literal value or a blank node, its prefix is the value itself and its suffix is null. For a URI value, its prefix is the left portion of the value up to and including the rightmost occurrence of any of the three characters <span class="italic">/</span> (slash), <span class="italic">#</span> (pound), or <span class="italic">:</span> (colon), and its suffix is the remaining portion of the value to the right. For example, the prefix and suffix for the URI value <code>http://www.example.org/family/grandParentOf</code> are <code>http://www.example.org/family/</code> and <code>grandParentOf</code>, respectively.</p>
<p>Along with columns for variable values, a SEM_MATCH query that uses SPARQL SELECT syntax returns one additional NUMBER column, SEM$ROWNUM, which can be used to ensure the correct result ordering for queries that involve a SPARQL ORDER BY clause.</p>
<p><a href="#CHDDBEHI">Example 1-9</a> selects all grandfathers (grandparents who are male) and their grandchildren from the <code>family</code> model, using inferencing from both the <code>RDFS</code> and <code>family_rb</code> rulebases. (This example is an excerpt from <a href="#CHDGCDGI">Example 1-44</a> in <a href="#CHDJBDHF">Section 1.11.2</a>.)</p>
<div id="RDFRM593" class="example">
<p class="titleinexample"><a id="CHDDBEHI"></a>Example 1-9 SEM_MATCH Table Function</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHJJFHE">Example 1-10</a> is functionally the same as <a href="#CHDDBEHI">Example 1-9</a>, but it adds the <code>HINT0</code> option.</p>
<div id="RDFRM99898" class="example">
<p class="titleinexample"><a id="CIHJJFHE"></a>Example 1-10 HINT0 Option with SEM_MATCH Table Function</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_Aliases(SEM_ALIAS('','http://www.example.org/family/')),
    null,
    null,
    <span class="bold">'HINT0={LEADING(t0 t1) USE_NL(?x ?y) GET_CANON_VALUE(?x ?y)}'</span>));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHJJAGJ">Example 1-11</a> uses the Pathway/Genome <code>BioPax</code> ontology to get all chemical compound types that belong to both <code>Proteins</code> and <code>Complexes</code>:</p>
<div id="RDFRM594" class="example">
<p class="titleinexample"><a id="CIHJJAGJ"></a>Example 1-11 SEM_MATCH Table Function</p>
<pre>
SELECT t.r 
  FROM TABLE (SEM_MATCH ( 
      '{?r rdfs:subClassOf :Proteins .  
        ?r rdfs:subClassOf :Complexes}', 
      SEM_Models ('BioPax'), 
      SEM_Rulebases ('rdfs'), 
      SEM_Aliases (SEM_ALIAS('', 'http://www.biopax.org/release1/biopax-release1.owl')),
      NULL)) t;
</pre></div>
<!-- class="example" -->
<p>As shown in <a href="#CIHJJAGJ">Example 1-11</a>, the search pattern for the SEM_MATCH table function is specified using SPARQL-like syntax where the variable starts with the question-mark character (<code>?</code>). In this example, the variable <code>?r</code> must match to the same term, and thus is must be a subclass of both <code>Proteins</code> and <code>Complexes</code>.</p>
<p>To use the SEM_RELATED operator to query an OWL ontology, see <a href="owl_concepts.htm#CHDBAGBH">Section 2.3</a>.</p>
<p>When you are querying multiple models or querying one or more models and the corresponding entailment, consider using virtual models (explained in <a href="#CIHGEAHG">Section 1.3.8</a>) because of the potential performance benefits.</p>
<a id="CHDGJADB"></a>
<div id="RDFRM595" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.1</span> Performing Queries with Incomplete or Invalid Entailments</h3>
<p>You can query semantic data even when the relevant entailment does not have a valid status if you specify the string value <code>INCOMPLETE</code> or <code>INVALID</code> for the <code>index_status</code> attribute of the SEM_MATCH table function. (The entailment status is stored in the STATUS column of the MDSYS.SEM_RULES_INDEX_INFO view, which is described in <a href="#CHDGBACI">Section 1.3.7</a>. The SEM_MATCH table function is described in <a href="#CHDJACII">Section 1.6</a>.)</p>
<p>The index_status attribute value affects the query behavior as follows:</p>
<ul>
<li>
<p>If the entailment has a valid status, the query behavior is not affected by the value of the <code>index_status</code> attribute.</p>
</li>
<li>
<p>If you provide no value or specify a null value for <code>index_status</code>, the query returns an error if the entailment does not have a valid status.</p>
</li>
<li>
<p>If you specify the string <code>INCOMPLETE</code> for the <code>index_status</code> attribute, the query is performed if the status of the entailment is incomplete or valid.</p>
</li>
<li>
<p>If you specify the string <code>INVALID</code> for the <code>index_status</code> attribute, the query is performed regardless of the actual status of the entailment (invalid, incomplete, or valid).</p>
</li>
</ul>
<p>However, the following considerations apply if the status of the entailment is incomplete or invalid:</p>
<ul>
<li>
<p>If the status is incomplete, the content of an entailment may be approximate, because some triples that are inferable (due to the recent insertions into the underlying models) may not actually be present in the entailment, and therefore results returned by the query may be inaccurate.</p>
</li>
<li>
<p>If the status is invalid, the content of the entailment may be approximate, because some triples that are no longer inferable (due to recent modifications to the underlying models or rulebases, or both) may still be present in the entailment, and this may affect the accuracy of the result returned by the query. In addition to possible presence of triples that are no longer inferable, some inferable rows may not actually be present in the entailment.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CIHEHAAD"></a>
<div id="RDFRM99899" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.2</span> Graph Patterns: Support for Curly Brace Syntax, and OPTIONAL, FILTER, UNION, and GRAPH Keywords</h3>
<p>The SEM_MATCH table function accepts the syntax for the graph pattern in which a sequence of triple patterns is enclosed within curly braces. The period is usually required as a separator unless followed by the OPTIONAL, FILTER, UNION, or GRAPH keyword. With this syntax, you can do any combination of the following:</p>
<ul>
<li>
<p>Use the OPTIONAL construct to retrieve results even in the case of a partial match</p>
</li>
<li>
<p>Use the FILTER construct to specify a filter expression in the graph pattern to restrict the solutions to a query</p>
</li>
<li>
<p>Use the UNION construct to match one of multiple alternative graph patterns</p>
</li>
<li>
<p>Use the GRAPH construct (explained in <a href="#CIHGBBFE">Section 1.6.2.1</a>) to scope graph pattern matching to a set of named graphs</p>
</li>
</ul>
<p><a href="#CIHHDGDI">Example 1-12</a> is functionally the same as <a href="#CHDDBEHI">Example 1-9</a>, but it uses the syntax with curly braces and a period to express a graph pattern in the SEM_MATCH table function.</p>
<div id="RDFRM99900" class="example">
<p class="titleinexample"><a id="CIHHDGDI"></a>Example 1-12 Curly Brace Syntax</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '<span class="bold">{</span>?x :grandParentOf ?y <span class="bold">.</span> ?x rdf:type :Male<span class="bold">}</span>',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHEDCIB">Example 1-13</a> uses the OPTIONAL construct to modify <a href="#CIHHDGDI">Example 1-12</a>, so that it also returns, for each grandfather, the names of the games that he plays or null if he does not play any games.</p>
<div id="RDFRM99901" class="example">
<p class="titleinexample"><a id="CIHEDCIB"></a>Example 1-13 Curly Brace Syntax and OPTIONAL Construct</p>
<pre>
SELECT x, y, game
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . 
      <span class="bold">OPTIONAL{?x :plays ?game}</span> 
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null,
    null,
    'HINT0={LEADING(t0 t1) USE_NL(?x ?y)}'));
</pre></div>
<!-- class="example" -->
<p>When multiple triple patterns are present in an OPTIONAL graph pattern, values for optional variables are returned only if a match is found for each triple pattern in the OPTIONAL graph pattern. <a href="#CIHHGHED">Example 1-14</a> modifies <a href="#CIHEDCIB">Example 1-13</a> so that it returns, for each grandfather, the names of the games both he and his grandchildren play, or null if he and his grandchildren have no such games in common. It also uses global query optimizer hints to specify that triple patterns should be evaluated in order within each BGP and that a hash join should be used to join the root BGP with the OPTIONAL BGP.</p>
<div id="RDFRM165" class="example">
<p class="titleinexample"><a id="CIHHGHED"></a>Example 1-14 Curly Brace Syntax and Multi-Pattern OPTIONAL Construct</p>
<pre>
SELECT x, y, game
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game . ?y :plays ?game} 
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null,
    'ALL_ORDERED ALL_BGP_HASH'));
</pre></div>
<!-- class="example" -->
<p>A single query can contain multiple OPTIONAL graph patterns, which can be nested or parallel. <a href="#CIHGDEFG">Example 1-15</a> modifies <a href="#CIHHGHED">Example 1-14</a> with a nested OPTIONAL graph pattern. This example returns, for each grandfather, (1) the games he plays or null if he plays no games and (2) if he plays games, the ages of his grandchildren that play the same game, or null if he has no games in common with his grandchildren. Note that in <a href="#CIHGDEFG">Example 1-15</a> a value is returned for <code>?game</code> even if the nested OPTIONAL graph pattern <code>?y :plays ?game . ?y :age ?age</code> is not matched.</p>
<div id="RDFRM166" class="example">
<p class="titleinexample"><a id="CIHGDEFG"></a>Example 1-15 Curly Brace Syntax and Nested OPTIONAL Construct</p>
<pre>
SELECT x, y, game, age
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game 
                          OPTIONAL {?y :plays ?game . ?y :age ?age} } 
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHBDFEE">Example 1-16</a> modifies <a href="#CIHHGHED">Example 1-14</a> with a parallel OPTIONAL graph pattern. This example returns, for each grandfather, (1) the games he plays or null if he plays no games and (2) his email address or null if he has no email address. Note that, unlike nested OPTIONAL graph patterns, parallel OPTIONAL graph patterns are treated independently. That is, if an email address is found, it will be returned regardless of whether or not a game was found; and if a game was found, it will be returned regardless of whether an email address was found.</p>
<div id="RDFRM167" class="example">
<p class="titleinexample"><a id="CIHBDFEE"></a>Example 1-16 Curly Brace Syntax and Parallel OPTIONAL Construct</p>
<pre>
SELECT x, y, game, email
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . 
      OPTIONAL{?x :plays ?game}
      OPTIONAL{?x :email ?email} 
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHCBHAC">Example 1-17</a> uses the FILTER construct to modify <a href="#CIHHDGDI">Example 1-12</a>, so that it returns grandchildren information for only those grandfathers who are residents of either NY or CA.</p>
<div id="RDFRM99902" class="example">
<p class="titleinexample"><a id="CIHCBHAC"></a>Example 1-17 Curly Brace Syntax and FILTER Construct</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :residentOf ?z
       <span class="bold">FILTER (?z = "NY"  || ?z = "CA")</span>}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p>In addition to arithmetic operators (+, -, *, /), boolean operators and logical connectives (||, &amp;&amp;, !), and comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), several built-in functions are available for use in FILTER clauses. <a href="#CIHHJDHG">Table 1-12</a> lists built-in functions that you can use in the FILTER clause. In the Description column of <a href="#CIHHJDHG">Table 1-12</a>, <span class="italic">x</span>, <span class="italic">y</span>, and <span class="italic">z</span> are arguments of the appropriate types.</p>
<div id="RDFRM168" class="tblformal">
<p class="titleintable"><a id="sthref159"></a><a id="CIHHJDHG"></a>Table 1-12 Built-in Functions Available for FILTER Clause</p>
<table class="cellalignment980" title="Built-in Functions Available for FILTER Clause" summary="Built-in Functions Available for FILTER Clause" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t19">Function</th>
<th class="cellalignment981" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t19" headers="r1c1-t19">
<p>BOUND(variable)</p>
</td>
<td class="cellalignment982" headers="r2c1-t19 r1c2-t19">
<p>BOUND(x) returns true if x is bound (that is, non-null) in the result, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td>&nbsp;</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t19" headers="r1c1-t19">
<p>DATATYPE(literal)</p>
</td>
<td class="cellalignment982" headers="r4c1-t19 r1c2-t19">
<p>DATATYPE(x) returns a URI representing the datatype of x.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t19" headers="r1c1-t19">
<p>isBLANK(RDF term)</p>
</td>
<td class="cellalignment982" headers="r5c1-t19 r1c2-t19">
<p>isBLANK(x) returns true if x is a blank node, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t19" headers="r1c1-t19">
<p>isIRI(RDF term)</p>
</td>
<td class="cellalignment982" headers="r6c1-t19 r1c2-t19">
<p>isIRI(x) returns true if x is an IRI, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t19" headers="r1c1-t19">
<p>isLITERAL(RDF term)</p>
</td>
<td class="cellalignment982" headers="r7c1-t19 r1c2-t19">
<p>isLiteral(x) returns true if x is a literal, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t19" headers="r1c1-t19">
<p>isURI(RDF term)</p>
</td>
<td class="cellalignment982" headers="r8c1-t19 r1c2-t19">
<p>isURI(x) returns true if x is a URI, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t19" headers="r1c1-t19">
<p>LANG(literal)</p>
</td>
<td class="cellalignment982" headers="r9c1-t19 r1c2-t19">
<p>LANG(x) returns a plain literal serializing the language tag of x.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r10c1-t19" headers="r1c1-t19">
<p>langMATCHES(literal, literal)</p>
</td>
<td class="cellalignment982" headers="r10c1-t19 r1c2-t19">
<p>langMATCHES(x, y) returns true if language tag x matches language range y, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r11c1-t19" headers="r1c1-t19">
<p>REGEX(string, pattern)</p>
</td>
<td class="cellalignment982" headers="r11c1-t19 r1c2-t19">
<p>REGEX(x,y) returns true if x matches the regular expression y, false otherwise. For more information about the regular expressions supported, see the Oracle Regular Expression Support appendix in <a class="olink SQLRF020" href="../../server.112/e41084/ap_posix.htm#SQLRF020"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r12c1-t19" headers="r1c1-t19">
<p>REGEX(string, pattern, flags)</p>
</td>
<td class="cellalignment982" headers="r12c1-t19 r1c2-t19">
<p>REGEX(x,y,z) returns true if x matches the regular expression y using the options given in z, false otherwise. Available options: 's' &ndash; dot all mode ('.' matches any character including the newline character); 'm' &ndash; multiline mode ('^' matches the beginning of any line and '$' matches the end of any line); 'i' &ndash; case insensitive mode; 'x' &ndash; remove whitespace characters from the regular expression before matching.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r13c1-t19" headers="r1c1-t19">
<p>sameTERM(RDF term, RDF term)</p>
</td>
<td class="cellalignment982" headers="r13c1-t19 r1c2-t19">
<p>sameTERM(x, y) returns true if x and y are the same RDF term, false otherwise.</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r14c1-t19" headers="r1c1-t19">
<p>STR(RDF term)</p>
</td>
<td class="cellalignment982" headers="r14c1-t19 r1c2-t19">
<p>STR(x) returns a plain literal of the string representation of x (that is, what would be stored in the VALUE_NAME column of MDSYS.RDF_VALUE$ enclosed within double quotes).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>See also the descriptions of the built-in functions defined in the SPARQL query language specification (<code><a href="http://www.w3.org/TR/rdf-sparql-query/">http://www.w3.org/TR/rdf-sparql-query/</a></code>), to better understand the built-in functions available in SEM_MATCH.</p>
<p><a href="#CIHEFIAC">Example 1-18</a> uses the REGEX built-in function to select all grandfathers that have an Oracle email address. Note that backslash (<code>\</code>) characters in the regular expression pattern must be escaped in the query string; for example, <code>\\.</code> produces the following pattern: <code>\.</code></p>
<div id="RDFRM169" class="example">
<p class="titleinexample"><a id="CIHEFIAC"></a>Example 1-18 Curly Brace Syntax and FILTER with REGEX and STR Built-In Constructs</p>
<pre>
SELECT x, y, z
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :email ?z
       <span class="bold">FILTER (REGEX(STR(?z), "@oracle\\.com$"))</span>}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHCJGGG">Example 1-19</a> uses the UNION construct to modify <a href="#CIHCBHAC">Example 1-17</a>, so that grandfathers are returned only if they are residents of NY or CA or own property in NY or CA, or if both conditions are true (they reside in and own property in NY or CA).</p>
<div id="RDFRM99903" class="example">
<p class="titleinexample"><a id="CIHCJGGG"></a>Example 1-19 Curly Brace Syntax and UNION and FILTER Constructs</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male 
       {{?x :residentOf ?z} <span class="bold">UNION {?x :ownsPropertyIn ?z}</span>}
       <span class="bold">FILTER (?z = "NY"  || ?z = "CA")</span>}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p>If you use the syntax with curly braces to express a graph pattern:</p>
<ul>
<li>
<p>The query always returns canonical lexical forms for the matching values for the variables.</p>
</li>
<li>
<p>Any hints specified in the <code>options</code> argument using HINT0={<span class="italic">&lt;hint-string&gt;</span>} (explained in <a href="#CHDJACII">Section 1.6</a>), should be constructed only on the basis of the portion of the graph pattern inside the root BGP. For example, the only valid aliases for use in a hint specification for the query in <a href="#CIHEDCIB">Example 1-13</a> are <code>t0</code>, <code>t1</code>, <code>?x</code>, and <code>?y</code>. Inline query optimizer hints can be used to influence other parts of the graph pattern (see <a href="#CIHJGCCA">Section 1.6.4</a>).</p>
</li>
<li>
<p>The FILTER construct is not supported for variables bound to long literals.</p>
</li>
</ul>
<a id="CIHGBBFE"></a>
<div id="RDFRM170" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.2.1</span> GRAPH Keyword Support</h4>
<p>A SEM_MATCH query is executed against an RDF Dataset. An RDF Dataset is a collection of graphs that includes one unnamed graph, known as the default graph, and one or more named graphs, which are identified by a URI. Graph patterns that appear inside a GRAPH clause are matched against the set of named graphs, and graph patterns that do not appear inside a graph clause are matched against the default graph. The <code>graphs</code> and <code>named_graphs</code> SEM_MATCH parameters are used to construct the default graph and set of named graphs for a given SEM_MATCH query. A summary of possible dataset configurations is shown in <a href="#CIHHJFED">Table 1-13</a>.</p>
<div id="RDFRM171" class="tblformalwide">
<p class="titleintable"><a id="sthref160"></a><a id="CIHHJFED"></a>Table 1-13 SEM_MATCH graphs and named_graphs Values, and Resulting Dataset Configurations</p>
<table class="cellalignment987" title="SEM_MATCH graphs and named_graphs Values, and Resulting Dataset Configurations" summary="SEM_MATCH graphs and named_graphs Values, and Resulting Data Set Configurations" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t20">Parameter Values</th>
<th class="cellalignment981" id="r1c2-t20">Default Graph</th>
<th class="cellalignment981" id="r1c3-t20">Set of Named Graphs</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t20" headers="r1c1-t20">
<p><code>graphs</code>: NULL</p>
<p><code>named_graphs</code>: NULL</p>
</td>
<td class="cellalignment982" headers="r2c1-t20 r1c2-t20">
<p>Union All of all unnamed triples and all named graph triples. (But if the <code>options</code> parameter contains <code>STRICT_DEFAULT=T</code>, only unnamed triples are included in the default graph.)</p>
</td>
<td class="cellalignment982" headers="r2c1-t20 r1c3-t20">
<p>All named graphs</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t20" headers="r1c1-t20">
<p><code>graphs</code>: NULL</p>
<p><code>named_graphs</code>: {g1,&hellip;, gn}</p>
</td>
<td class="cellalignment982" headers="r3c1-t20 r1c2-t20">
<p>Empty set</p>
</td>
<td class="cellalignment982" headers="r3c1-t20 r1c3-t20">
<p>{g1,&hellip;, gn}</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t20" headers="r1c1-t20">
<p><code>graphs</code>: {g1,&hellip;, gm}</p>
<p><code>named_graphs</code>: NULL</p>
</td>
<td class="cellalignment982" headers="r4c1-t20 r1c2-t20">
<p>Union All of {g1,&hellip;, gm}</p>
</td>
<td class="cellalignment982" headers="r4c1-t20 r1c3-t20">
<p>Empty set</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t20" headers="r1c1-t20">
<p><code>graphs</code>: {g1,&hellip;, gm}</p>
<p><code>named_graphs</code>: {gn,&hellip;, gz}</p>
</td>
<td class="cellalignment982" headers="r5c1-t20 r1c2-t20">
<p>Union All of {g1,&hellip;, gm}</p>
</td>
<td class="cellalignment982" headers="r5c1-t20 r1c3-t20">
<p>{gn,&hellip;, gz}</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<p><a href="#CIHFAIJF">Example 1-20</a> uses the GRAPH construct to scope graph pattern matching to a specific named graph. This example finds the names and email addresses of all people in the <code>&lt;http://www.example.org/family/Smith&gt;</code> named graph.</p>
<div id="RDFRM172" class="example">
<p class="titleinexample"><a id="CIHFAIJF"></a>Example 1-20 Named Graph Construct</p>
<pre>
SELECT name, email
  FROM TABLE(SEM_MATCH(
    '{GRAPH :Smith {
       ?x :name ?name . ?x :email ?email } }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p>In addition to URIs, variables can appear after the GRAPH keyword. <a href="#CIHJAJCC">Example 1-21</a> uses a variable, <code>?g</code>, with the GRAPH keyword, and uses the <code>named_graphs</code> parameter to restrict the possible values of <code>?g</code> to the <code>&lt;http://www.example.org/family/Smith&gt;</code> and <code>&lt;http://www.example.org/family/Jones&gt;</code> named graphs. Note that aliases specified in SEM_ALIASES argument can be used in the <code>graphs</code> and <code>named_graphs</code> parameters.</p>
<div id="RDFRM173" class="example">
<p class="titleinexample"><a id="CIHJAJCC"></a>Example 1-21 Using the named_graphs Parameter</p>
<pre>
SELECT name, email
  FROM TABLE(SEM_MATCH(
    '{GRAPH ?g {
       ?x :name ?name . ?x :email ?email } }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null,null,null,null,
    SEM_GRAPHS('&lt;http://www.example.org/family/Smith&gt;',
               ':Jones')));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHIIHGC">Example 1-22</a> uses the default graph to query the union of the <code>&lt;http://www.example.org/family/Smith&gt;</code> and <code>&lt;http://www.example.org/family/Jones&gt;</code> named graphs.</p>
<div id="RDFRM174" class="example">
<p class="titleinexample"><a id="CIHIIHGC"></a>Example 1-22 Using the graphs Parameter</p>
<pre>
FROM TABLE(SEM_MATCH(
    '{?x :name ?name . ?x :email ?email }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null,null,null,
    SEM_GRAPHS('&lt;http://www.example.org/family/Smith&gt;', 
               ':Jones'),
    null));
</pre></div>
<!-- class="example" -->
<p>See also the W3C SPARQL specification for more information on RDF Datasets and the GRAPH construct, specifically: <code><a href="http://www.w3.org/TR/rdf-sparql-query/#rdfDataset">http://www.w3.org/TR/rdf-sparql-query/#rdfDataset</a></code></p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIJEDJ"></a>
<div id="RDFRM175" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.3</span> Graph Patterns: Support for SPARQL SELECT Syntax</h3>
<p>In addition to curly-brace graph patterns, SEM_MATCH allows fully-specified SPARQL SELECT queries in the <code>query</code> parameter. When using the SPARQL SELECT syntax option, SEM_MATCH supports the following query constructs: PREFIX, SELECT, SELECT DISTINCT, FROM, FROM NAMED, WHERE, ORDER BY, LIMIT, and OFFSET. Each SPARQL SELECT syntax query must include a SELECT clause and a graph pattern.</p>
<p>A key difference between curly-brace and SPARQL SELECT syntax when using SEM_MATCH is that only variables appearing in the SPARQL SELECT clause are returned from SEM_MATCH when using SPARQL SELECT syntax.</p>
<p>One additional column, SEM$ROWNUM, is returned from SEM_MATCH when using SPARQL SELECT syntax. This NUMBER column can be used to order the results of a SEM_MATCH query so that the result order matches the ordering specified by a SPARQL ORDER BY clause.</p>
<p><a href="#CIHCEJII">Example 1-23</a> uses the following SPARQL constructs:</p>
<ul>
<li>
<p>SPARQL PREFIX clause to specify an abbreviation for the <code>http://www.example.org/family/</code> and <code>http://xmlns.com/foaf/0.1/</code> namespaces</p>
</li>
<li>
<p>SPARQL SELECT clause to specify the set of variables to project out of the query</p>
</li>
<li>
<p>SPARQL WHERE clause to specify the query graph pattern</p>
</li>
</ul>
<div id="RDFRM176" class="example">
<p class="titleinexample"><a id="CIHCEJII"></a>Example 1-23 SPARQL PREFIX, SELECT, and WHERE Clauses</p>
<pre>
SELECT y, name
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     SELECT ?y ?name
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    null, null));
</pre></div>
<!-- class="example" -->
<p><a href="#CIHCEJII">Example 1-23</a> returns the following columns: y, y$RDFVID, y$_PREFIX, y$_SUFFIX, y$RDFVTYP, y$RDFCLOB, y$RDFLTYP, y$RDFLANG, name, name$RDFVID, name$_PREFIX, name$_SUFFIX, name$RDFVTYP, name$RDFCLOB, name$RDFLTYP, name$RDFLANG, and SEM$ROWNUM.</p>
<p>The SPARQL SELECT clause specifies either (A) a sequence of variables and/or expressions, or (B) *, which projects all variables that appear in a specified triple pattern. <a href="#CIHCFEIJ">Example 1-24</a> uses the SPARQL SELECT clause to select all variables that appear in a specified triple pattern.</p>
<div id="RDFRM177" class="example">
<p class="titleinexample"><a id="CIHCFEIJ"></a>Example 1-24 SPARQL SELECT * (All Variables in Triple Pattern)</p>
<pre>
SELECT x, y, name
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     <span class="bold">SELECT *</span>
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    null, null));
</pre></div>
<!-- class="example" -->
<p>The DISTINCT keyword can be used after SELECT to remove duplicate result rows. <a href="#CIHIGGCB">Example 1-25</a> uses SELECT DISTINCT to select only the distinct names.</p>
<div id="RDFRM178" class="example">
<p class="titleinexample"><a id="CIHIGGCB"></a>Example 1-25 SPARQL SELECT DISTINCT</p>
<pre>
SELECT name
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     <span class="bold">SELECT DISTINCT ?name</span>
     WHERE
     {?x :grandParentOf ?y . 
      ?x foaf:name ?name }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    null, null));
</pre></div>
<!-- class="example" -->
<p>SPARQL FROM and FROM NAMED are used to specify the RDF dataset for a query. FROM clauses are used to specify the set of graphs that make up the default graph, and FROM NAMED clauses are used to specify the set of graphs that make up the set of named graphs. <a href="#CIHDFCHI">Example 1-26</a> uses FROM and FROM NAMED to select email addresses and friend of relationships from the union of the <code>&lt;http://www.friends.com/friends&gt;</code> and <code>&lt;http://www.contacts.com/contacts&gt;</code> graphs and grandparent information from the <code>&lt;http://www.example.org/family/Smith&gt;</code> and <code>&lt;http://www.example.org/family/Jones&gt;</code> graphs.</p>
<div id="RDFRM179" class="example">
<p class="titleinexample"><a id="CIHDFCHI"></a>Example 1-26 RDF Dataset Specification Using FROM and FROM NAMED</p>
<pre>
SELECT x, y, z, email
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/family/&gt; 
     PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
     PREFIX friends: &lt;http://www.friends.com/&gt;
     PREFIX contacts: &lt;http://www.contacts.com/&gt;
     SELECT *
     <span class="bold">FROM friends:friends</span>
     <span class="bold">FROM contacts:contacts</span>
     <span class="bold">FROM NAMED :Smith</span>
     <span class="bold">FROM NAMED :Jones</span>
     WHERE
     {?x foaf:frendOf ?y .
      ?x :email ?email .
      GRAPH ?g {
        ?x :grandParentOf ?z }
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    null, null));
</pre></div>
<!-- class="example" -->
<p>The SPARQL ORDER BY clause can be used to order the results of SEM_MATCH queries. This clause specifies a sequence of comparators used to order the results of a given query. A comparator consists of an expression composed of variables, RDF terms, arithmetic operators (+, -, *, /), boolean operators and logical connectives (||, &amp;&amp;, !), comparison operators (&lt;, &gt;, &lt;=, &gt;=, =, !=), and any functions available for use in FILTER expressions.</p>
<p>In a SPARQL ORDER BY clause:</p>
<ul>
<li>
<p>Single variable ordering conditions do not require enclosing parenthesis, but parentheses are required for more complex ordering conditions.</p>
</li>
<li>
<p>An optional ASC() or DESC() order modifier can be used to indicate the desired order (ascending or descending, respectively). Ascending is the default order.</p>
</li>
<li>
<p>When using SPARQL ORDER BY in SEM_MATCH, the containing SQL query should be ordered by SEM$ROWNUM to ensure that the desired ordering is maintained through any enclosing SQL blocks.</p>
</li>
</ul>
<p><a href="#CIHEBHCF">Example 1-27</a> uses a SPARQL ORDER BY clause to select all cameras, and it specifies ordering by descending type and ascending total price (<code>price * (1 - discount) * (1 + tax)</code>).</p>
<div id="RDFRM180" class="example">
<p class="titleinexample"><a id="CIHEBHCF"></a>Example 1-27 SPARQL ORDER BY</p>
<pre>
SELECT *
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT * 
     WHERE
      {?x :price ?p .
       ?x :discount ?d .
       ?x :tax ?t .
       ?x :cameraType ?cType .
      }
     <span class="bold">ORDER BY DESC(?cType) ASC(?p * (1-?d) * (1+?t))'</span>,
    SEM_Models('electronics'),
    SEM_Rulebases('RDFS'), 
    null, null))
<span class="bold">ORDER BY SEM$ROWNUM</span>;
</pre></div>
<!-- class="example" -->
<p>SPARQL LIMIT and SPARQL OFFSET can be used to select different subsets of the query solutions. <a href="#CIHCBBDI">Example 1-28</a> uses SPARQL LIMIT to select the five cheapest cameras, and <a href="#CIHGDEJD">Example 1-29</a> uses SPARQL LIMIT and OFFSET to select the fifth through tenth cheapest cameras.</p>
<div id="RDFRM181" class="example">
<p class="titleinexample"><a id="CIHCBBDI"></a>Example 1-28 SPARQL LIMIT</p>
<pre>
SELECT *
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
      }
     ORDER BY ASC(?p)
     LIMIT 5',
    SEM_Models('electronics'),
    SEM_Rulebases('RDFS'), 
    null, null))
ORDER BY SEM$ROWNUM;
</pre></div>
<!-- class="example" -->
<div id="RDFRM182" class="example">
<p class="titleinexample"><a id="CIHGDEJD"></a>Example 1-29 SPARQL OFFSET</p>
<pre>
SELECT *
  FROM TABLE(SEM_MATCH(
    'PREFIX : &lt;http://www.example.org/electronics/&gt; 
     SELECT ?x ?cType ?p
     WHERE
      {?x :price ?p .
       ?x :cameraType ?cType .
      }
     ORDER BY ASC(?p)
     LIMIT 5
     <span class="bold">OFFSET 5</span>',
    SEM_Models('electronics'),
    SEM_Rulebases('RDFS'), 
    null, null))
ORDER BY SEM$ROWNUM;
</pre></div>
<!-- class="example" -->
<p>See also the W3C SPARQL specification for more information on SPARQL PREFIX, SELECT, SELECT DISTINCT, FROM, FROM NAMED, WHERE, ORDER BY, LIMIT, and OFFSET constructs, specifically: <code><a href="http://www.w3.org/TR/rdf-sparql-query/">http://www.w3.org/TR/rdf-sparql-query/</a></code></p>
</div>
<!-- class="sect2" -->
<a id="CIHJGCCA"></a>
<div id="RDFRM183" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.4</span> Inline Query Optimizer Hints</h3>
<p>In SEM_MATCH, the SPARQL comment construct has been overloaded to allow inline HINT0 query optimizer hints. In SPARQL, the hash (#) character indicates that the remainder of the line is a comment. To associate an inline hint with a particular BGP, place a HINT0 hint string inside a SPARQL comment and insert the comment between the opening curly bracket ({) and the first triple pattern in the BGP. Inline hints enable you to influence the execution plan for each BGP in a query. <a href="#CIHHIAIA">Example 1-30</a> shows a query with inline query optimizer hints.</p>
<div id="RDFRM184" class="example">
<p class="titleinexample"><a id="CIHHIAIA"></a>Example 1-30 Inline Query Optimizer Hints</p>
<pre>
SELECT x, y, hp, cp
  FROM TABLE(SEM_MATCH(
    '{ <span class="bold"># HINT0={ LEADING(t0) USE_NL(?x ?y ?bd) }</span>
      ?x :grandParentOf ?y . ?x rdf:type :Male . ?x :birthDate ?bd
      OPTIONAL { <span class="bold"># HINT0={ LEADING(t0 t1) BGP_JOIN(USE_HASH) }</span>
                 ?x :homepage ?hp . ?x :cellPhoneNum ?cp }
     }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
</pre></div>
<!-- class="example" -->
<p>The BGP_JOIN hint influences inter-BGP joins and has the following syntax: <code>BGP_JOIN</code>(<code>&lt;join_type&gt;</code><code>)</code>, where <span class="italic">&lt;join_type&gt;</span> is USE_HASH or USE_NL. <a href="#CIHHIAIA">Example 1-30</a> uses the BGP_JOIN(USE_HASH) hint to specify that a hash join should be used when joining the OPTIONAL BGP with its parent BGP.</p>
<p>Inline optimizer hints override any hints passed to SEM_MATCH through the <code>options</code> argument. For example, a global ALL_ORDERED hint applies to each BGP that does not specify an inline optimizer hint, but those BGPs with an inline hint use the inline hint instead of the ALL_ORDERED hint.</p>
</div>
<!-- class="sect2" -->
<a id="CIHJCHBJ"></a>
<div id="RDFRM185" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.5</span> Full-Text Search</h3>
<p>The Oracle-specific <code>orardf:textContains</code> SPARQL FILTER function uses full-text indexes on the MDSYS.RDF_VALUE$ table. This function has the following syntax (where <code>orardf</code> is a built-in prefix that expands to <code>&lt;http://xmlns.oracle.com/rdf/&gt;</code>):</p>
<pre>
orardf:textContains(<span class="italic">variable</span>, <span class="italic">pattern</span>)
</pre>
<p>The first argument to <code>orardf:textContains</code> must be a local variable (that is, a variable present in the BGP that contains the <code>orardf:textContains</code> filter), and the second argument must be a constant plain literal.</p>
<p>For example, <code>orardf:textContains(x, y)</code> returns true if <code>x</code> matches the expression <code>y</code>, where <code>y</code> is a valid expression for the Oracle Text SQL operator CONTAINS. For more information about such expressions, see <a class="olink CCREF0104" href="../../text.112/e24436/csql.htm#CCREF0104"><span class="italic">Oracle Text Reference</span></a>.</p>
<p>Before using <code>orardf:textContains</code>, you must create an Oracle Text index for the RDF network. To create such an index, invoke the <a href="sem_apis_ref.htm#CACGCIDC">SEM_APIS.ADD_DATATYPE_INDEX</a> procedure as follows:</p>
<pre>
EXECUTE SEM_APIS.ADD_DATATYPE_INDEX('http://xmlns.oracle.com/rdf/text');
</pre>
<p>When performing large bulk loads into a semantic network with a text index, the overall load time may be faster if you drop the text index, perform the bulk load, and then re-create the text index. See <a href="#CIHBJEDA">Section 1.9</a> for more information about data type indexing.</p>
<p>After creating a text index, you can use the <code>orardf:textContains</code> FILTER function in SEM_MATCH queries. <a href="#CIHCAJHI">Example 1-31</a> uses <code>orardf:textContains</code> to find all grandfathers whose names start with the letter <span class="italic">A</span> or <span class="italic">B</span>.</p>
<div id="RDFRM186" class="example">
<p class="titleinexample"><a id="CIHCAJHI"></a>Example 1-31 Full-Text Search</p>
<pre>
SELECT x, y, hp, cp
  FROM TABLE(SEM_MATCH(
    '{ ?x :grandParentOf ?y . ?x rdf:type :Male . ?x :name ?n 
       <span class="bold">FILTER (orardf:textContains(?n, " A% | B% "))</span> }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
          null));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CIHHAEIH"></a>
<div id="RDFRM187" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.6.6</span> Spatial Support</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
Before using spatial support in Oracle Database Semantic Technologies, be sure that Oracle Spatial Patch 11828358: <span class="italic">ORA-7445 ON SELECT WITH SDO_RELATE IN WHERE CLAUSE</span> has been applied.</div>
<p>Oracle Database Semantic Technologies supports storage of spatial geometry data encoded as <code>orageo:WKTLiteral</code> typed literals, and it provides a set of query functions for spatial operations. (<code>orageo</code> is a built-in prefix that expands to: <code>&lt;http://xmlns.oracle.com/rdf/geo/&gt;</code>)</p>
<p>This section covers the following topics:</p>
<ul>
<li>
<p><a href="#CIHIAGCC">Representing Spatial Data in RDF</a></p>
</li>
<li>
<p><a href="#CIHEABGJ">Indexing Spatial Data</a></p>
</li>
<li>
<p><a href="#CIHGCBIG">Querying Spatial Data</a></p>
</li>
</ul>
<a id="CIHIAGCC"></a>
<div id="RDFRM188" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.6.1</span> Representing Spatial Data in RDF</h4>
<p>Spatial geometries can be represented in RDF as <code>orageo:WKTLiteral</code> typed literals. <a href="#CIHBCHDC">Example 1-32</a> shows the <code>orageo:WKTLiteral</code> encoding for a simple point geometry.</p>
<div id="RDFRM189" class="example">
<p class="titleinexample"><a id="CIHBCHDC"></a>Example 1-32 Spatial Point Geometry Represented as orageo:WKTLiteral</p>
<pre>
"Point(-83.4 34.3)"^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt;
</pre></div>
<!-- class="example" -->
<p><code>orageo:WKTLiteral</code> encodings consist of an optional spatial reference system URI, followed by a Well-Known Text (WKT) string that encodes a geometry value. The spatial reference system URI and the WKT string should be separated by a whitespace character.</p>
<p>Spatial reference system URIs have the following form <code>&lt;http://xmlns.oracle.com/rdf/geo/srid/</code><code><span class="codeinlineitalic">{srid}</span></code><code>&gt;</code>, where {srid} is a valid spatial reference system id from Oracle Spatial. If an <code>orageo:WKTLiteral</code> value does not include a spatial reference system URI, then the default spatial reference system, WGS84 Longitude-Latitude (URI <code>&lt;http://xmlns.oracle.com/rdf/geo/srid/8307&gt;</code>), is used. The same default spatial reference system is used when <code>orageo:WKTLiteral</code> values are encountered in a query string.</p>
<p>Several geometry types can be represented as <code>orageo:WKTLiteral</code> values, including point, linestring, polygon, polyhedral surface, triangle, TIN, multipoint, multi-linestring, multipolygon, and geometry collection. Up to 500,000 vertices per geometry are supported for two-dimensional geometries.</p>
<p><a href="#CIHDGJCD">Example 1-33</a> shows some RDF spatial data (in N-triple format) encoded using <code>orageo:WKTLiteral</code> values. In this example, the first two geometries (in lot1) use the default coordinate system (SRID 8307), but the other two geometries (in lot2) specify SRID 8265.</p>
<div id="RDFRM190" class="example">
<p class="titleinexample"><a id="CIHDGJCD"></a>Example 1-33 Spatial Data Encoded Using orageo:WKTLiteral Values</p>
<pre>
# spatial data for lot1 using the default WGS84 Longitude-Latitude spatial reference system
&lt;urn:lot1&gt; &lt;urn:hasExactGeometry&gt; "Polygon((-83.6 34.1, -83.6 34.5, -83.2 34.5, -83.2 34.1, -83.6 34.1))"^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
&lt;urn:lot1&gt; &lt;urn:hasPointGeometry&gt; "Point(-83.4 34.3)"^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
# spatial data for lot2 using the NAD83 Longitude-Latitude spatial reference system
&lt;urn:lot2&gt; &lt;urn:hasExactGeometry&gt; "&lt;http://xmlns.oracle.com/rdf/geo/srid/8265&gt; Polygon((-83.6  34.1, -83.6 34.3, -83.4 34.3, -83.4 34.1, -83.6 34.1))"^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
&lt;urn:lot2&gt; &lt;urn:hasPointGeometry&gt; "&lt;http://xmlns.oracle.com/rdf/geo/srid/8265&gt; Point(-83.5 34.2)"^^&lt;http://xmlns.oracle.com/rdf/geo/WKTLiteral&gt; .
</pre></div>
<!-- class="example" -->
<p>For more information, see the chapter about coordinate systems (spatial reference systems) in <a class="olink SPATL050" href="../../appdev.112/e11830/sdo_cs_concepts.htm#SPATL050"><span class="italic">Oracle Spatial Developer's Guide</span></a>. See also the material about the WKT geometry representation in the Open Geospatial Consortium (OGC) Simple Features document: <code><a href="http://portal.opengeospatial.org/files/?artifact_id=25355">http://portal.opengeospatial.org/files/?artifact_id=25355</a></code></p>
</div>
<!-- class="sect3" -->
<a id="CIHEABGJ"></a>
<div id="RDFRM191" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.6.2</span> Indexing Spatial Data</h4>
<p>Before you can use any of the SPARQL extension functions (introduced in <a href="#CIHGCBIG">Section 1.6.6.3</a>) to query spatial data, you must create a spatial index on the RDF network by calling the <a href="sem_apis_ref.htm#CACGCIDC">SEM_APIS.ADD_DATATYPE_INDEX</a> procedure.</p>
<p>When you create the spatial index, you must specify the following information:</p>
<ul>
<li>
<p>SRID - The ID for the spatial reference system in which to create the spatial index. Any valid spatial reference system ID from Oracle Spatial can be used as an SRID value.</p>
</li>
<li>
<p>TOLERANCE &ndash; The tolerance value for the spatial index. Tolerance is a positive number indicating how close together two points must be to be considered the same point. The units for this value are determined by the default units for the SRID used (for example, meters for WGS84 Long-Lat). Tolerance is explained in detail in <a class="olink SPATL450" href="../../appdev.112/e11830/sdo_intro.htm#SPATL450"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
</li>
<li>
<p>DIMENSIONS - A text string encoding dimension information for the spatial index. Each dimension is represented by a sequence of three comma-separated values: name, minimum value, and maximum value. Each dimension is enclosed in parentheses, and the set of dimensions is enclosed by an outer parenthesis.</p>
</li>
</ul>
<p><a href="#CIHJGJHB">Example 1-34</a> adds a spatial data type index on the RDF network, specifying the WGS84 Longitude-Latitude spatial reference system, a tolerance value of 10 meters, and the recommended dimensions for the indexing of spatial data that uses this coordinate system. Note that the TOLERANCE, SRID, and DIMENSIONS keywords are case sensitive.</p>
<div id="RDFRM192" class="example">
<p class="titleinexample"><a id="CIHJGJHB"></a>Example 1-34 Adding a Spatial Data Type Index on RDF Data</p>
<pre>
EXECUTE sem_apis.add_datatype_index('http://xmlns.oracle.com/rdf/geo/WKTLiteral',  options=&gt;'TOLERANCE=10 SRID=8307 DIMENSIONS=((LONGITUDE,-180,180) (LATITUDE,-90,90))');
</pre></div>
<!-- class="example" -->
<p>No more than one spatial data type index is supported for an RDF network. <code>orageo:WKTLiteral</code> values stored in the RDF network are automatically normalized to the spatial reference system used for the index, so a single spatial index can simultaneously support <code>orageo:WKTLiteral</code> values from different spatial reference systems. This coordinate transformation is done transparently for indexing and spatial computations. When <code>orageo:WKTLiteral</code> values are returned from a SEM_MATCH query, the original, untransformed geometry is returned.</p>
<p>For more information about spatial indexing, see the chapter about indexing and querying spatial data in <a class="olink SPATL040" href="../../appdev.112/e11830/sdo_index_query.htm#SPATL040"><span class="italic">Oracle Spatial Developer's Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="CIHGCBIG"></a>
<div id="RDFRM193" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.6.3</span> Querying Spatial Data</h4>
<p>Several SPARQL extension functions are available for performing spatial queries in SEM_MATCH. For example, for spatial RDF data, you can find the area and perimeter (length) of a geometry, the distance between two geometries, and the centroid and the minimum bounding rectangle (MBR) of a geometry, and you can check various topological relationships between geometries.</p>
<p><a href="sem_spatial_orageo.htm#BABFDIGE">Appendix B</a> contains reference and usage information about the following functions:</p>
<ul>
<li>
<p><a href="sem_spatial_orageo.htm#BABBHDGF">orageo:area</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABBJIFE">orageo:buffer</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABBFFEH">orageo:centroid</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABDEJFE">orageo:convexHull</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABCBBEC">orageo:difference</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABGIFFF">orageo:distance</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABCFCFF">orageo:intersection</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABCDEFB">orageo:length</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABGCGHC">orageo:mbr</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABCDDDD">orageo:nearestNeighbor</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABCGGAI">orageo:relate</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABHGAAG">orageo:union</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABGEGBF">orageo:withinDistance</a></p>
</li>
<li>
<p><a href="sem_spatial_orageo.htm#BABFFEBJ">orageo:xor</a></p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="RDFRM194" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref161"></a>
<h3 class="sect2"><span class="secnum">1.6.7</span> Best Practices for Query Performance</h3>
<p>This section describes some recommended practices for using the SEM_MATCH table function to query semantic data. It includes the following subsections:</p>
<ul>
<li>
<p><a href="#CIHDEJAA">Section 1.6.7.1, "FILTER Constructs Involving xsd:dateTime, xsd:date, and xsd:time"</a></p>
</li>
<li>
<p><a href="#CIHFAIGG">Section 1.6.7.2, "Function-Based Indexes for FILTER Constructs Involving Typed Literals"</a></p>
</li>
<li>
<p><a href="#CIHFBEGA">Section 1.6.7.3, "FILTER Constructs Involving Relational Expressions"</a></p>
</li>
<li>
<p><a href="#CIHIHAAE">Section 1.6.7.4, "Optimizer Statistics and Dynamic Sampling"</a></p>
</li>
<li>
<p><a href="#CIHIGJAB">Section 1.6.7.5, "Multi-Partition Queries"</a></p>
</li>
</ul>
<a id="CIHDEJAA"></a>
<div id="RDFRM195" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.7.1</span> FILTER Constructs Involving xsd:dateTime, xsd:date, and xsd:time</h4>
<p>By default, SEM_MATCH complies with the XML Schema standard for comparison of xsd:date, xsd:time, and xsd:dateTime values. According to this standard, when comparing two calendar values c1 and c2 where c1 has an explicitly specified time zone and c2 does not have a specified time zone, c2 is converted into the interval [c2-14:00, c2+14:00]. If c2-14:00 &lt;= c1 &lt;= c2+14:00, then the comparison is undefined and will always evaluate to false. If c1 is outside this interval, then the comparison is defined.</p>
<p>However, the extra logic required to evaluate such comparisons (value with a time zone and value without a time zone) can significantly slow down queries with FILTER constructs that involve calendar values. For improved query performance, you can disable this extra logic by specifying <code>FAST_DATE_FILTER=T</code> in the <code>options</code> parameter of the SEM_MATCH table function. When <code>FAST_DATE_FILTER=T</code> is specified, all calendar values without time zones are assumed to be in Greenwich Mean Time (GMT).</p>
<p>Note that using <code>FAST_DATE_FILTER=T</code> does <span class="italic">not</span> affect query <span class="italic">correctness</span> when either (1) all calendar values in the data set have a time zone or (2) all calendar values in the data set do not have a time zone.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFAIGG"></a>
<div id="RDFRM196" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.7.2</span> Function-Based Indexes for FILTER Constructs Involving Typed Literals</h4>
<p>The evaluation of SEM_MATCH queries involving the FILTER construct often requires executing one or more SQL functions against the RDF_VALUE$ table. For example, the filter <code>(?x &lt; "1929-11-16Z"^^xsd:date)</code> invokes the <a href="sem_apis_ref.htm#CHEFDDHH">SEM_APIS.GETV$DATETZVAL</a> function.</p>
<p>Function-based indexes can be used to improve the performance of queries that contain a filter condition involving a typed literal. For example, an <code>xsd:date</code> function-based index may speed up evaluation of the filter <code>(?x &lt; "1929-11-16Z"^^xsd:date)</code>.</p>
<p>Convenient interfaces are provided for creating, altering, and dropping these function-based indexes. For more information, see <a href="#CIHBJEDA">Section 1.9, "Using Data Type Indexes"</a>.</p>
<p>Note, however, that the existence of these function-based indexes on the MDSYS.RDF_VALUE$ table can significantly slow down bulk load operations. In many cases it may be faster to drop the indexes, perform the bulk load, and then re-create the indexes, as opposed to doing the bulk load with the indexes in place.</p>
</div>
<!-- class="sect3" -->
<a id="CIHFBEGA"></a>
<div id="RDFRM197" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.7.3</span> FILTER Constructs Involving Relational Expressions</h4>
<p>The following recommendations apply to FILTER constructs involving relational expressions:</p>
<ul>
<li>
<p><a id="sthref162"></a>The <code>sameTerm</code> built-in function is more efficient than using <code>=</code> or <code>!=</code> when comparing two variables in a FILTER clause, so (for example) use <code>sameTerm(?a, ?b)</code> instead of <code>(?a = ?b)</code> and use <code>(!sameTerm(?a, ?b))</code> instead of <code>(?a != ?b)</code> whenever possible.</p>
</li>
<li>
<p>When comparing values in FILTER expressions, you may get better performance by reducing the use of negation. For example, it is more efficient to evaluate <code>(?x &lt;= "10"^^xsd:int)</code> than it is to evaluate the expression <code>(!(?x &gt; "10"^^xsd:int))</code>.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="CIHIHAAE"></a>
<div id="RDFRM198" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.7.4</span> Optimizer Statistics and Dynamic Sampling</h4>
<p>Having sufficient statistics for the query optimizer is critical for good query performance. In general, you should ensure that you have gathered basic statistics for the semantic network using the <a href="sem_perf_ref.htm#CHEIJACB">SEM_PERF.GATHER_STATS</a> procedure (described in <a href="sem_perf_ref.htm#CHEBGBCI">Chapter 11</a>).</p>
<p>Due to the inherent flexibility of the RDF data model, static information may not produce optimal execution plans for SEM_MATCH queries. Dynamic sampling can often produce much better query execution plans. Dynamic sampling levels can be set at the session or system level using the <code>optimizer_dynamic_sampling</code> parameter, and at the individual query level using the <code>dynamic_sampling</code><code><span class="codeinlineitalic">(level)</span></code> SQL query hint. In general, it is good to experiment with dynamic sampling levels between 3 and 6. For information about estimating statistics with dynamic sampling, see <a class="olink PFGRF30101" href="../../server.112/e41573/stats.htm#PFGRF30101"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.</p>
<p><a href="#CIHBDHEJ">Example 1-35</a> uses a SQL hint for a dynamic sampling level of 6.</p>
<div id="RDFRM199" class="example">
<p class="titleinexample"><a id="CIHBDHEJ"></a>Example 1-35 SQL Hint for Dynamic Sampling</p>
<pre>
SELECT <span class="bold">/*+ DYNAMIC_SAMPLING(6) */</span> x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . 
      ?x rdf:type :Male . 
      ?x :birthDate ?bd }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null, null, '' ));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHIGJAB"></a>
<div id="RDFRM201" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.6.7.5</span> Multi-Partition Queries</h4>
<p>The following recommendations apply to the use of multiple semantic models, semantic models plus entailments, and virtual models:</p>
<ul>
<li>
<p>If you execute SEM_MATCH queries against multiple semantic models or against semantic models plus entailments, you can probably improve query performance if you create a virtual model (see <a href="#CIHGEAHG">Section 1.3.8</a>) that contains all the models and entailments you are querying and then query this single virtual model.</p>
</li>
<li>
<p>Use the <code>ALLOW_DUP=T</code> query option. If you do not use this option, then an expensive (in terms of processing) duplicate-elimination step is required during query processing, in order to maintain set semantics for RDF data. However, if you use this option, the duplicate-elimination step is not performed, and this results in significant performance gains.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CHDCEFIE"></a>
<div id="RDFRM596" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.7</span> <a id="sthref163"></a><a id="sthref164"></a>Loading and Exporting Semantic Data</h2>
<p>To load semantic data into a model, use one or more of the following options:</p>
<ul>
<li>
<p>Bulk load or append data into the semantic data store from a staging table, with each row containing the three components -- subject, predicate, and object -- of an RDF triple and optionally a named graph. This is explained in <a href="#CIHBFEGC">Section 1.7.1</a>.</p>
<p>This is the fastest option for loading large amounts of data; however, it cannot handle triples containing object values with more than 4000 bytes.</p>
</li>
<li>
<p>Batch load using a Java client interface to load or append data from an N-Triple format file into the semantic data store (see <a href="#CHDIHAGI">Section 1.7.2</a>).</p>
<p>This option is slower than bulk loading, but it handles triples containing object values with more than 4000 bytes. However, this option does not handle named graphs.</p>
</li>
<li>
<p>Load into the application table using SQL INSERT statements that call the SDO_RDF_TRIPLE_S constructor, which results in the corresponding RDF triple, possibly including a graph name, to be inserted into the semantic data store, as explained in <a href="#CHDHCDFH">Section 1.7.3</a>.</p>
<p>This option is convenient for loading small amounts of data. However, this option does not handle named graphs.</p>
</li>
</ul>
<p>To export semantic data, see <a href="#CHDHAEFI">Section 1.7.4, "Exporting Semantic Data"</a>.</p>
<p>To purge values that are in the RDF_VALUE$ table but that have become unused in any of the RDF triples or rules currently in the semantic network, see <a href="#CIHIJJJI">Section 1.7.5, "Purging Unused Values"</a>.</p>
<a id="CIHBFEGC"></a>
<div id="RDFRM597" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.7.1</span> <a id="sthref165"></a><a id="sthref166"></a>Bulk Loading Semantic Data Using a Staging Table</h3>
<p>You can load semantic data (and optionally associated non-semantic data) in bulk using a staging table. Call the <a href="sem_apis_ref.htm#CACBDFGH">SEM_APIS.LOAD_INTO_STAGING_TABLE</a> procedure (described in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>) to load the data, and you can have during the load operation to check for syntax correctness. Then, you can call the <a href="sem_apis_ref.htm#CACGCDFF">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure to load the data into the semantic store from the staging table. (If the data was not parsed during the load operation into the staging table, you must specify the <code>PARSE</code> keyword in the <code>flags</code> parameter when you call the <a href="sem_apis_ref.htm#CACGCDFF">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure.)</p>
<p>The following example shows the format for the staging table, including all required columns and the required names for these columns, plus the optional RDF$STC_graph column which must be included if one or more of the RDF triples to be loaded include a graph name:</p>
<pre>
CREATE TABLE stage_table (
                     RDF$STC_sub varchar2(4000) not null,
                     RDF$STC_pred varchar2(4000) not null,
                     RDF$STC_obj varchar2(4000) not null,
                     RDF$STC_graph varchar2(4000)
);
</pre>
<p>If you also want to load non-semantic data, specify additional columns for the non-semantic data in the CREATE TABLE statement. The non-semantic column names must be different from the names of the required columns. The following example creates the staging table with two additional columns (SOURCE and ID) for non-semantic attributes.</p>
<pre>
CREATE TABLE stage_table_with_extra_cols (
                     source VARCHAR2(4000),
                     id NUMBER,
                     RDF$STC_sub varchar2(4000) not null,
                     RDF$STC_pred varchar2(4000) not null,
                     RDF$STC_obj varchar2(4000) not null,
                     RDF$STC_graph varchar2(4000)
);
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
For either form of the CREATE TABLE statement, you may want to add the COMPRESS clause to use table compression, which will reduce the disk space requirements and may improve bulk-load performance.</div>
<p>Both the invoker and the MDSYS user must have the following privileges: SELECT privilege on the staging table, and INSERT privilege on the application table.</p>
<p>See also the following:</p>
<ul>
<li>
<p><a href="#CIHIIEAC">Section 1.7.1.1, "Loading the Staging Table"</a></p>
</li>
<li>
<p><a href="#CIHJFJIJ">Section 1.7.1.2, "Recording Event Traces During Bulk Loading"</a></p>
</li>
</ul>
<a id="CIHIIEAC"></a>
<div id="RDFRM202" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.1.1</span> Loading the Staging Table</h4>
<p>You can load semantic data into the staging table, as a preparation for loading it into the semantic store, in several ways. Some of the common ways are the following:</p>
<ul>
<li>
<p>Using Oracle SQL*Loader to load the staging table, as described in <a href="#CIHDEBIH">Section 1.7.1.1.1</a></p>
</li>
<li>
<p>Using an external table to load the staging table, as described in <a href="#CIHJFFDG">Section 1.7.1.1.2</a></p>
</li>
</ul>
<a id="CIHDEBIH"></a>
<div id="RDFRM203" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">1.7.1.1.1</span> Loading N-Triple Format Data into a Staging Table Using SQL*Loader</h5>
<p>You can use the SQL*Loader utility to parse and load semantic data into a staging table. If you installed the demo files from the Oracle Database Examples media (see <a class="olink EXMPL" href="../../install.112/e24501/toc.htm"><span class="italic">Oracle Database Examples Installation Guide</span></a>), a sample control file is available at <code>$ORACLE_HOME/md/demo/network/rdf_demos/bulkload.ctl</code>. You can modify and use this file if the input data is in N-Triple format.</p>
<p>Objects longer than 4000 bytes cannot be loaded. If you use the sample SQL*Loader control file, triples (rows) containing such long values will be automatically rejected and stored in a SQL*Loader "bad" file. However, you can load these rejected rows by inserting them into the application table using SQL INSERT statements (see <a href="#CHDHCDFH">Section 1.7.3</a>).</p>
</div>
<!-- class="sect4" -->
<a id="CIHJFFDG"></a>
<div id="RDFRM204" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4"><span class="secnum">1.7.1.1.2</span> Loading N-Quad Format Data into a Staging Table Using an External Table</h5>
<p>You can use an Oracle external table to load N-Quad format data (extended triple having four components) into a staging table, as follows:</p>
<ol>
<li>
<p>Call the <a href="sem_apis_ref.htm#CACBFIGJ">SEM_APIS.CREATE_SOURCE_EXTERNAL_TABLE</a> procedure to create an external table, and then use the SQL STATEMENT ALTER TABLE to alter the external table to include the relevant input file name or names. You must have READ and WRITE privileges for the directory object associated with folder containing the input file or files.</p>
</li>
<li>
<p>After you create the external table, grant the MDSYS user SELECT and INSERT privileges on the table.</p>
</li>
<li>
<p>Call the <a href="sem_apis_ref.htm#CACBDFGH">SEM_APIS.LOAD_INTO_STAGING_TABLE</a> procedure to populate the staging table.</p>
</li>
<li>
<p>After the loading is finished, issue a COMMIT statement to complete the transaction.</p>
</li>
</ol>
<p>Rows where the objects and graph URIs (combined) are longer than 4000 bytes will be rejected and stored in a "bad" file. However, you can load these rejected rows by inserting them into the application table using SQL INSERT statements (see <a href="#CHDHCDFH">Section 1.7.3</a>).</p>
<p><a href="#CIHFFBHH">Example 1-36</a> shows the use of an external table to load a staging table.</p>
<div id="RDFRM205" class="example">
<p class="titleinexample"><a id="CIHFFBHH"></a>Example 1-36 Using an External Table to Load a Staging Table</p>
<pre>
-- Create a source external table (note: table names are case sensitive)
BEGIN
  sem_apis.create_source_external_table(
    source_table    =&gt; 'stage_table_source'
   ,def_directory   =&gt; 'DATA_DIR'
   ,bad_file        =&gt; 'CLOBrows.bad'
   );
END;
/
grant SELECT on "stage_table_source" to MDSYS;
 
-- Use ALTER TABLE to target the appropriate file(s)
alter table "stage_table_source" location ('demo_datafile.nt');
 
-- Load the staging table (note: table names are case sensitive)
BEGIN
  sem_apis.load_into_staging_table(
    staging_table =&gt; 'STAGE_TABLE'
   ,source_table  =&gt; 'stage_table_source'
   ,input_format  =&gt; 'N-QUAD');
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="CIHJFJIJ"></a>
<div id="RDFRM99904" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.1.2</span> <a id="sthref167"></a>Recording Event Traces During Bulk Loading</h4>
<p>If a table named RDF$ET_TAB exists in the invoker's schema and if the MDSYS user has been granted the INSERT and UPDATE privileges on this table, event traces for some of the tasks performed during executions of the <a href="sem_apis_ref.htm#CACGCDFF">SEM_APIS.BULK_LOAD_FROM_STAGING_TABLE</a> procedure will be added to the table. You may find the content of this table useful if you ever need to report any problems in bulk load. The RDF$ET_TAB table must be created as follows:</p>
<pre>
CREATE TABLE RDF$ET_TAB (
  proc_sid VARCHAR2(30), 
  proc_sig VARCHAR2(200),
  event_name varchar2(200),
  start_time timestamp,
  end_time timestamp,
  start_comment varchar2(1000) DEFAULT NULL,
  end_comment varchar2(1000) DEFAULT NULL
);
GRANT INSERT, UPDATE on RDF$ET_TAB to MDSYS;
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDIHAGI"></a>
<div id="RDFRM598" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.7.2</span> <a id="sthref168"></a>Batch Loading N-Triple Format Semantic Data Using the Java API</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Java class <code>oracle.spatial.rdf.client.BatchLoader</code> described in this section has been deprecated, and it does not support loading of N-Quad data.
<p>You are instead encouraged to use the bulk loading capabilities of the Jena Adapter, as described in <a href="sem_jena.htm#BGBCHIED">Section 7.11, "Bulk Loading Using the Jena Adapter"</a>.</p>
</div>
<p>You can perform a batch (bulk) load operation for N-Triple format semantic data using the Java class <code>oracle.spatial.rdf.client.BatchLoader</code>, which is packaged in <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/md/jlib/sdordf.jar</code>. Before performing a batch load operation, ensure that the following are true:</p>
<ul>
<li>
<p>The semantic data is in N-Triple format. (Several tools are available for converting RDF/XML to N-Triple format; see the Oracle Technology Network or perform a Web search for information about RDF/XML to N-Triple conversion.)</p>
</li>
<li>
<p>Oracle Database Release 11, with Oracle Spatial, is installed, and partitioning is enabled.</p>
</li>
<li>
<p>A semantic technologies network, an application table, and its corresponding semantic model have been created in the database.</p>
</li>
<li>
<p>The CLASSPATH definition includes <code>ojdbc6.jar</code>.</p>
</li>
<li>
<p>You are using JDK version 1.5 or later. (You can use the Java version packaged under <code><span class="codeinlineitalic">&lt;ORACLE_HOME&gt;</span></code><code>/jdk/bin</code>.)</p>
</li>
</ul>
<p>To run the <code>oracle.spatial.rdf.client.BatchLoader</code> class, use a command (on a single command line) in the following general form (replacing the sample example database connection information with your own connection information).</p>
<ul>
<li>
<p>Linux systems:</p>
<pre>
java -Ddb.user=scott -Ddb.password=<span class="italic">password </span>-Ddb.host=127.0.0.1 -Ddb.port=1522 -Ddb.sid=orcl -classpath ${ORACLE_HOME}/md/jlib/sdordf.jar:${ORACLE_HOME}/jdbc/lib/ojdbc6.jar oracle.spatial.rdf.client.BatchLoader &lt;N-TripleFile&gt; &lt;tablename&gt; &lt;tablespaceName&gt; &lt;modelName&gt;
</pre></li>
<li>
<p>Windows systems:</p>
<pre>
java -Ddb.user=scott -Ddb.password=<span class="italic">password</span> -Ddb.host=127.0.0.1 -Ddb.port=1522 -Ddb.sid=orcl -classpath %ORACLE_HOME%\md\jlib\sdordf.jar;%ORACLE_HOME%\jdbc\lib\ojdbc6.jar oracle.spatial.rdf.client.BatchLoader &lt;N-TripleFile&gt; &lt;tablename&gt; &lt;tablespaceName&gt; &lt;modelName&gt;
</pre></li>
</ul>
<p>The values for <code>-Ddb.user</code> and <code>-Ddb.password</code> must correspond either to the owner of the model <code><span class="codeinlineitalic">&lt;modelName&gt;</span></code> or to a DBA user.</p>
<p>By default, <code>BatchLoader</code> assumes there are at least two columns, a column named ID of type NUMBER and a column named TRIPLE of type SDO_RDF_TRIPLE_S, in the user's application table. However, you can override the default names by using the JVM properties <code>-DidColumn=&lt;idColumnName&gt;</code> and <code>-DtripleColumn=&lt;tripleColumnName&gt;</code>. Note that the ID column is not required; and to prevent <code>BatchLoader</code> from generating a sequence-like identifier in the ID column for each triple inserted, specify the JVM property <code>-DjustTriple=true</code>.</p>
<p>If the application table is not empty and if you want the batch loading to be done in append mode, specify an additional JVM property: <code>-Dappend=true</code>. Moreover, in append mode you might want to choose a different starting value for ID column in user's application table, and to accomplish this you can add the JVM property <code>-DstartID=&lt;startingIntegerValue&gt;</code> to the command line. By default, the ID column starts at 1 and is increased sequentially as new triples are inserted into the application table.</p>
<p>To skip the first <span class="italic">n</span> triples in <code>&lt;N-TripleFile&gt;</code>, add the JVM property <code>-Dskip=&lt;numberOfTriplesSkipped&gt;</code> to the command line.</p>
<p>To load an N-Triple file with a character set different from the default, specify the JVM property <code>-Dcharset=&lt;charsetName&gt;</code>. For example, <code>-Dcharset="UTF-8"</code> will recognize UTF-8 encoding. However, for UTF-8 characters to be stored properly in the N-Triple file, the Oracle database must be configured to use a corresponding universal character set, such as AL32UTF8.</p>
<p>The <code>BatchLoader</code> class supports loading an N-Triple file in compressed format. If the <code>&lt;N-TripleFile&gt;</code> has a file extension of .zip or .jar, the file will be uncompressed and loaded at the same time.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="sem_jena.htm#BGBCHIED">Section 7.11, "Bulk Loading Using the Jena Adapter"</a></div>
</div>
<!-- class="sect2" -->
<a id="CHDHCDFH"></a>
<div id="RDFRM600" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.7.3</span> Loading Semantic Data Using INSERT Statements</h3>
<p>To load semantic data using INSERT statements, the data should be encoded using <code>&lt; &gt;</code> (angle brackets) for URIs, <code>_:</code> (underscore colon) for blank nodes, and <code>" "</code> (quotation marks) for literals. Spaces are not allowed in URIs or blank nodes. Use the SDO_RDF_TRIPLE_S constructor to insert the data, as described in <a href="#CHDCDDHI">Section 1.5.1</a>. You must have INSERT privilege on the application table.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
If URIs are not encoded with <code>&lt; &gt;</code> and literals with <code>" "</code>, statements will still be processed. However, the statements will take longer to load, since they will have to be further processed to determine their VALUE_TYPE values.</div>
<p>The following example includes statements with URIs, a blank node, a literal, a literal with a language tag, and a typed literal:</p>
<pre>
INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S('nsu', '&lt;http://nature.example.com/nsu/rss.rdf&gt;',
  '&lt;http://purl.org/rss/1.0/title&gt;', '"Nature''s Science Update"'));
INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S('nsu', '_:BNSEQN1001A',
  '&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;', 
  '&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Seq&gt;'));
INSERT INTO nsu_data VALUES (SDO_RDF_TRIPLE_S('nsu',
  '&lt;http://nature.example.com/cgi-taf/dynapage.taf?file=/nature/journal/v428/n6978/index.html&gt;',
  '&lt;http://purl.org/dc/elements/1.1/language&gt;', '"English"@en-GB'));
INSERT INTO nature VALUES (SDO_RDF_TRIPLE_S('nsu', '&lt;http://dx.doi.org/10.1038/428004b&gt;',
  '&lt;http://purl.org/dc/elements/1.1/date&gt;', '"2004-03-04"^^xsd:date'));
</pre>
<p>To convert semantic XML data to INSERT statements, you can edit the sample <code>rss2insert.xsl</code> XSLT file to convert all the features in the semantic data XML file. The blank node constructor is used to insert statements with blank nodes. After editing the XSLT, download the Xalan XSLT processor (<code><a href="http://xml.apache.org/xalan-j/index.html">http://xml.apache.org/xalan-j/index.html</a></code>) and follow the installation instructions. To convert a semantic data XML file to INSERT statements using your edited version of the <code>rss2insert.xsl</code> file, use a command in the following format:</p>
<pre>
java org.apache.xalan.xslt.Process &ndash;in <span class="italic">input</span>.rdf -xsl rss2insert.xsl &ndash;out <span class="italic">output</span>.nt
</pre>
<a id="CIHEDEDE"></a>
<div id="RDFRM206" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.3.1</span> Loading Data into Named Graphs Using INSERT Statements</h4>
<p>To load an RDF triple with a non-null graph name using an INSERT statement, you must append the graph name, enclosed within angle brackets (<code>&lt; &gt;</code>), after the model name and colon (<code>:</code>) separator character, as shown in the following example:</p>
<pre>
INSERT INTO articles_rdf_data VALUES (99,
  SDO_RDF_TRIPLE_S ('<span class="bold">articles:&lt;http://examples.com/ns#Graph1&gt;</span>',
    '&lt;http://nature.example.com/Article101&gt;',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '"John Smith"'));
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CHDHAEFI"></a>
<div id="RDFRM601" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.7.4</span> Exporting Semantic Data</h3>
<p>This section contains the following topics related to exporting semantic data, that is, retrieving semantic data from Oracle Database:</p>
<ul>
<li>
<p><a href="#CIHECFGH">Retrieving Semantic Data from an Application Table</a></p>
</li>
<li>
<p><a href="#CIHBGCCG">Retrieving Semantic Data from an RDF Model</a></p>
</li>
<li>
<p><a href="#CIHFGDBA">Removing Model and Graph Information from Retrieved Blank Node Identifiers</a></p>
</li>
</ul>
<a id="CIHECFGH"></a>
<div id="RDFRM440" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.4.1</span> Retrieving Semantic Data from an Application Table</h4>
<p>Semantic data can be retrieved from an application table using the member functions of SDO_RDF_TRIPLE_S, as shown in <a href="#CIHHFEGG">Example 1-37</a>.</p>
<div id="RDFRM441" class="example">
<p class="titleinexample"><a id="CIHHFEGG"></a>Example 1-37 Retrieving Semantic Data from an Application Table</p>
<pre>
--
-- Retrieves model-graph, subject, predicate, and object
--
SQL&gt; SELECT a.triple.GET_MODEL() AS model_graph, a.triple.GET_SUBJECT() AS sub, a.triple.GET_PROPERTY() pred, a.triple.GET_OBJECT() obj FROM articles_rdf_data a where id in (2,99);
 
MODEL_GRAPH
------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
------------------------------------------------------------
ARTICLES
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"Jane Smith"
 
ARTICLES:&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"John Smith"
 
--
-- Retrieves graph, subject, predicate, and object
--
SQL&gt; select (case sep_pos when 0 then NULL else substr(model_graph,sep_pos+1) end) graph, sub, pred, obj from (SELECT instr(a.triple.GET_MODEL(),':') AS sep_pos, a.triple.GET_MODEL() AS model_graph, a.triple.GET_SUBJECT() AS sub, a.triple.GET_PROPERTY() pred, a.triple.GET_OBJECT() obj FROM articles_rdf_data a where id in (2,99));
 
GRAPH
--------------------------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
------------------------------------------------------------
 
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"Jane Smith"
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"John Smith"
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHBGCCG"></a>
<div id="RDFRM442" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.4.2</span> Retrieving Semantic Data from an RDF Model</h4>
<p>Semantic data can be retrieved from an RDF model using the SEM_MATCH table function (described in <a href="#CHDJACII">Section 1.6</a>), as shown in <a href="#CIHHDCCJ">Example 1-38</a>.</p>
<div id="RDFRM443" class="example">
<p class="titleinexample"><a id="CIHHDCCJ"></a>Example 1-38 Retrieving Semantic Data from an RDF Model</p>
<pre>
--
-- Retrieves graph, subject, predicate, and object
--
SQL&gt; select to_char(g$rdfterm) graph, to_char(x$rdfterm) sub, to_char(p$rdfterm) pred, y$rdfterm obj from table(sem_match('Select ?g ?x ?p ?y FROM NAMED &lt;http://examples.com/ns#Graph1&gt; {GRAPH ?g {?x ?p ?y}}',sem_models('articles'),null,null,null,null,' GRAPH_MATCH_UNNAMED=T PLUS_RDFT=T '));
 
GRAPH
------------------------------------------------------------
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
---------------------------------------------------------------------------
&lt;http://examples.com/ns#Graph1&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb2
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb1
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article102&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:m99g3C687474703A2F2F6578616D706C65732E636F6D2F6E73234772617068313Egmb1
 
&lt;http://examples.com/ns#Graph1&gt;
&lt;http://nature.example.com/Article101&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"John Smith"
 
&lt;http://nature.example.com/Article1&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
"Jane Smith"
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" -->
<a id="CIHFGDBA"></a>
<div id="RDFRM444" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">1.7.4.3</span> Removing Model and Graph Information from Retrieved Blank Node Identifiers</h4>
<p>Blank node identifiers retrieved during the retrieval of semantic data) can be trimmed to remove the occurrence of model and graph information using the transformations shown in the code excerpt in <a href="#CIHIJIFE">Example 1-39</a>, which are applicable to a VARCHAR2 (for example, subject component) and a CLOB (for example, object component), respectively.</p>
<div id="RDFRM445" class="example">
<p class="titleinexample"><a id="CIHIJIFE"></a>Example 1-39 Retrieving Semantic Data from an Application Table</p>
<pre>
--
-- Transformation on column "sub VARCHAR2" 
-- holding blank node identifier values
--
Select (case substr(sub,1,2) when '_:' then '_:' || substr(sub,instr(sub,'m',1,2)+1) else sub end) from &hellip;
--
-- Transformation on column "obj CLOB" 
-- holding blank node identifier values
--
Select (case dbms_lob.substr(obj,2,1) when '_:' then to_clob('_:' || substr(obj,instr(obj,'m',1,2)+1)) else obj end) from &hellip;
</pre></div>
<!-- class="example" -->
<p><a href="#CIHHCFFA">Example 1-40</a> shows the results obtained after using these two transformations in <a href="#CIHIJIFE">Example 1-39</a> on the <code>sub</code> and <code>obj</code> columns, respectively, using the semantic data retrieval query described in <a href="#CIHBGCCG">Section 1.7.4.2</a>.</p>
<div id="RDFRM446" class="example">
<p class="titleinexample"><a id="CIHHCFFA"></a>Example 1-40 Results from Applying Transformations from <a href="#CIHIJIFE">Example 1-39</a></p>
<pre>
--
-- Results obtained by applying transformations on the sub and pred cols
-- 
SQL&gt; select (case substr(sub,1,2) when '_:' then '_:' || substr(sub,instr(sub,'m',1,2)+1) else sub end) sub, pred, (case dbms_lob.substr(obj,2,1) when '_:' then to_clob('_:' || substr(obj,instr(obj,'m',1,2)+1)) else obj end) obj from (select to_char(g$rdfterm) graph, to_char(x$rdfterm) sub, to_char(p$rdfterm) pred, y$rdfterm obj from table(sem_match('Select ?g ?x ?p ?y FROM NAMED &lt;http://examples.com/ns#Graph1&gt; {GRAPH ?g {?x ?p ?y}}',sem_models('articles'),null,null,null,null,' GRAPH_MATCH_UNNAMED=T PLUS_RDFT=T ')));
 
SUB
------------------------------------------------------------
PRED
------------------------------------------------------------
OBJ
---------------------------------------------------------------------------
_:b2
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:b1
 
&lt;http://nature.example.com/Article102&gt;
&lt;http://purl.org/dc/elements/1.1/creator&gt;
_:b1
</pre></div>
<!-- class="example" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="CIHIJJJI"></a>
<div id="RDFRM447" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.7.5</span> Purging Unused Values</h3>
<p>Deletion of triples over time may lead to a subset of the values in the RDF_VALUE$ table becoming unused in any of the RDF triples or rules currently in the semantic network. If the count of such unused values becomes large and a significant portion of the RDF_VALUE$ table, you may want to purge the unused values using the <a href="sem_apis_ref.htm#CACBJCEJ">SEM_APIS.PURGE_UNUSED_VALUES</a> subprogram.</p>
<p>Before the purging, MDSYS must be granted SELECT privilege on application tables for all the RDF models. This can be done directly using the GRANT command or by using the <a href="sem_apis_ref.htm#CACCCGIJ">SEM_APIS.PRIVILEGE_ON_APP_TABLES</a> subprogram.</p>
<p>Event traces for tasks performed during the purge operation may be recorded into the RDF$ET_TAB table, if present in the invoker's schema, as described in <a href="#CIHJFJIJ">Section 1.7.1.2, "Recording Event Traces During Bulk Loading"</a>.</p>
<p><a href="#CIHCADGC">Example 1-41</a> purges unused values from the RDF_VALUE$ table. The example does not consider named graphs or CLOBs. It also assumes that the data from the example in <a href="#CHDBHJCB">Section 1.11.1, "Example: Journal Article Information"</a> has been loaded.</p>
<div id="RDFRM448" class="example">
<p class="titleinexample"><a id="CIHCADGC"></a>Example 1-41 Purging Unused Values</p>
<pre>
-- Purging unused values
set numwidth 20

-- Create view to show the values actually used in the RDF model
CREATE VIEW values_used_in_model (value_id) as
  SELECT a.triple.rdf_s_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_p_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_c_id FROM articles_rdf_data a UNION
  SELECT a.triple.rdf_o_id FROM articles_rdf_data a;
 
View created.

-- Create views to show triples in the model
CREATE VIEW triples_in_app_table as
  SELECT a.triple.GET_SUBJECT() AS s, a.triple.GET_PROPERTY() AS p, a.triple.GET_OBJ_VALUE() AS o
    FROM articles_rdf_data a;
 
View created.

CREATE VIEW triples_in_rdf_model as
  SELECT s, p, o FROM TABLE ( SEM_MATCH('{?s ?p ?o}', SEM_MODELS('articles'), null, null, null ));
 
View created.

--
-- Content before deletion
--

-- Values in mdsys.RDF_VALUE$
CREATE TABLE values_before_deletion as select value_id from mdsys.rdf_value$;
 
Table created.

-- Values used in the RDF model
CREATE TABLE used_values_before_deletion as
  SELECT * FROM values_used_in_model;
 
Table created.

-- Content of RDF model
CREATE TABLE atab_triples_before_deletion
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_before_deletion
  as select * from triples_in_rdf_model;
 
Table created.

-- Delete some triples so that some of the values become unused
DELETE FROM articles_rdf_data a
   WHERE a.triple.GET_PROPERTY() = '&lt;http://purl.org/dc/elements/1.1/title&gt;'
     OR a.triple.GET_SUBJECT() = '&lt;http://nature.example.com/Article1&gt;';
 
5 rows deleted.

-- Content of RDF model after deletion
CREATE TABLE atab_triples_after_deletion
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_after_deletion
  as select * from triples_in_rdf_model;
 
Table created.

-- Values that became unused in the RDF model
SELECT * from used_values_before_deletion
  MINUS
  SELECT * FROM values_used_in_model;
 
VALUE_ID
--------------------
 1399113999628774496
 4597469165946334122
 6345024408674005890
 7299961478807817799
 7995347759607176041

-- RDF_VALUE$ content, however, is unchanged
SELECT value_id from values_before_deletion
  MINUS
  select value_id from mdsys.rdf_value$;
 
no rows selected

-- Now purge the values from RDF_VALUE$ (requires that MDSYS has
-- SELECT privilege on *all* the app tables in the semantic network)
EXECUTE sem_apis.privilege_on_app_tables;
 
PL/SQL procedure successfully completed.
 
EXECUTE sem_apis.purge_unused_values;
 
PL/SQL procedure successfully completed.

-- RDF_VALUE$ content is NOW changed due to the purge of unused values
SELECT value_id from values_before_deletion
  MINUS
  select value_id from mdsys.rdf_value$;
 
VALUE_ID
--------------------
 1399113999628774496
 4597469165946334122
 6345024408674005890
 7299961478807817799
 7995347759607176041

-- Content of RDF model after purge
CREATE TABLE atab_triples_after_purge
  as select * from triples_in_app_table;
 
Table created.

CREATE TABLE model_triples_after_purge
  as select * from triples_in_rdf_model;
 
Table created.

-- Compare triples present before purging of values and after purging
SELECT * from atab_triples_after_deletion
  MINUS
  SELECT * FROM atab_triples_after_purge;
 
no rows selected

SELECT * from model_triples_after_deletion
  MINUS
  SELECT * FROM model_triples_after_purge;
 
no rows selected
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBEBIB"></a>
<div id="RDFRM99905" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.8</span> <a id="sthref169"></a>Using Semantic Network Indexes</h2>
<p>Semantic network indexes are nonunique B-tree indexes that you can add, alter, and drop for use with models and entailments in a semantic network. You can use such indexes to tune the performance of SEM_MATCH queries on the models and entailments in the network. As with any indexes, semantic network indexes enable index-based access that suits your query workload. This can lead to substantial performance benefits, such as in the following example scenarios:</p>
<ul>
<li>
<p>If your graph pattern is <code>'{&lt;John&gt; ?p &lt;Mary&gt;}'</code>, you may want to have a usable <code>'CSP</code>' or <code>'SCP'</code> index for the target model or models and on the corresponding entailment, if used in the query.</p>
</li>
<li>
<p>If your graph pattern is <code>'{?x &lt;talksTo&gt; ?y . ?z ?p ?y}'</code>, you may want to have a usable semantic network index on the relevant model or models and entailment, with <code>C</code> as the leading key (for example, <code>'C'</code> or <code>'CPS'</code>).</p>
</li>
</ul>
<p>However, using semantic network indexes can affect overall performance by increasing the time required for DML, load, and inference operations.</p>
<p>You can create and manage semantic network indexes using the following subprograms:</p>
<ul>
<li>
<p><a href="sem_apis_ref.htm#CHEIEGEH">SEM_APIS.ADD_SEM_INDEX</a></p>
</li>
<li>
<p><a href="sem_apis_ref.htm#CHEJAEHD">SEM_APIS.ALTER_SEM_INDEX_ON_MODEL</a></p>
</li>
<li>
<p><a href="sem_apis_ref.htm#CHECCAEA">SEM_APIS.ALTER_SEM_INDEX_ON_ENTAILMENT</a></p>
</li>
<li>
<p><a href="sem_apis_ref.htm#CHEGDDCA">SEM_APIS.DROP_SEM_INDEX</a></p>
</li>
</ul>
<p>All of these subprograms have an <code>index_code</code> parameter, which can contain any sequence of the following letters (without repetition): <code>P</code>, <code>C</code>, <code>S</code>, <code>G</code>, <code>M</code>. These letters used in the index_code correspond to the following columns in the SEMM_* and SEMI_* views: P_VALUE_ID, CANON_END_NODE_ID, START_NODE_ID, G_ID, and MODEL_ID.</p>
<p>The <a href="sem_apis_ref.htm#CHEIEGEH">SEM_APIS.ADD_SEM_INDEX</a> procedure creates a semantic network index that results in creation of a nonunique B-tree index in UNUSABLE status for each of the existing models and entailments. The name of the index is RDF_LNK_<span class="italic">&lt;index_code&gt;</span>_IDX and the index is owned by MDSYS. This operation is allowed only if the invoker has DBA role. The following example shows creation of the <code>PSCGM</code> index with the following key: &lt;P_VALUE_ID, START_NODE_ID, CANON_END_NODE_ID, G_ID, MODEL_ID&gt;.</p>
<pre>
EXECUTE SEM_APIS.ADD_SEM_INDEX('PSCGM');
</pre>
<p>After you create a semantic network index, each of the corresponding nonunique B-tree indexes is in the UNUSABLE status, because making it usable can cause significant time and resources to be used, and because subsequent index maintenance operations might involve performance costs that you do not want to incur. You can make a semantic network index usable or unusable for specific models or entailments that you own by calling the <a href="sem_apis_ref.htm#CHEJAEHD">SEM_APIS.ALTER_SEM_INDEX_ON_MODEL</a> and <a href="sem_apis_ref.htm#CHECCAEA">SEM_APIS.ALTER_SEM_INDEX_ON_ENTAILMENT</a> procedures and specifying <code>'REBUILD'</code> or <code>'UNUSABLE'</code> as the <code>command</code> parameter. Thus, you can experiment by making different semantic network indexes usable and unusable, and checking for any differences in performance. For example, the following statement makes the <code>PSCGM</code> index usable for the <code>FAMILY</code> model:</p>
<pre>
EXECUTE SEM_APIS.ALTER_SEM_INDEX_ON_MODEL('FAMILY','PSCGM','REBUILD');
</pre>
<p>Also note the following:</p>
<ul>
<li>
<p>Independent of any semantic network indexes that you create, when a semantic network is created, one of the indexes that is automatically created is an index that you can manage by referring to the <code>index_code</code> as <code>'PSCGM'</code> when you call the subprograms mentioned in this section.</p>
</li>
<li>
<p>When you create a new model or a new entailment, a new nonunique B-tree index is created for each of the semantic network indexes, and each such B-tree index is in the USABLE status.</p>
</li>
<li>
<p>Including the MODEL_ID column in a semantic network index key (by including 'M' in the <code>index_code</code> value) may improve query performance. This is particularly relevant when virtual models are used.</p>
</li>
</ul>
<a id="CIHDHGGH"></a>
<div id="RDFRM207" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.8.1</span> <a id="sthref170"></a><a id="sthref171"></a>MDSYS.SEM_NETWORK_INDEX_INFO View</h3>
<p>Information about all network indexes on models and entailments is maintained in the MDSYS.SEM_NETWORK_INDEX_INFO view, which includes (a partial list) the columns shown in <a href="#CIHCBJII">Table 1-14</a> and one row for each network index.</p>
<div id="RDFRM208" class="tblformal">
<p class="titleintable"><a id="sthref172"></a><a id="CIHCBJII"></a>Table 1-14 MDSYS.SEM_NETWORK_INDEX_INFO View Columns (Partial List)</p>
<table class="cellalignment980" title="MDSYS.SEM_NETWORK_INDEX_INFO View Columns (Partial List)" summary="SEM_NETWORK_INDEX_INFO view columns (partial list)" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t26">Column Name</th>
<th class="cellalignment981" id="r1c2-t26">Data Type</th>
<th class="cellalignment981" id="r1c3-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t26" headers="r1c1-t26">
<p>NAME</p>
</td>
<td class="cellalignment982" headers="r2c1-t26 r1c2-t26">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r2c1-t26 r1c3-t26">
<p>Name of the RDF model or entailment</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t26" headers="r1c1-t26">
<p>TYPE</p>
</td>
<td class="cellalignment982" headers="r3c1-t26 r1c2-t26">
<p>VARCHAR2(10)</p>
</td>
<td class="cellalignment982" headers="r3c1-t26 r1c3-t26">
<p>Type of object on which the index is built: <code>MODEL</code>, <code>ENTAILMENT</code>, or <code>NETWORK</code></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t26" headers="r1c1-t26">
<p>ID</p>
</td>
<td class="cellalignment982" headers="r4c1-t26 r1c2-t26">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r4c1-t26 r1c3-t26">
<p>ID number for the model or entailment, or zero (0) for an index on the network</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t26" headers="r1c1-t26">
<p>INDEX_CODE</p>
</td>
<td class="cellalignment982" headers="r5c1-t26 r1c2-t26">
<p>VARCHAR2(25)</p>
</td>
<td class="cellalignment982" headers="r5c1-t26 r1c3-t26">
<p>Code for the index (for example, <code>PSCGM</code>).</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t26" headers="r1c1-t26">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment982" headers="r6c1-t26 r1c2-t26">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r6c1-t26 r1c3-t26">
<p>Name of the index (for example, <code>RDF_LNK_PSCGM_IDX</code>)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t26" headers="r1c1-t26">
<p>LAST_REFRESH</p>
</td>
<td class="cellalignment982" headers="r7c1-t26 r1c2-t26">
<p>TIMESTAMP(6) WITH TIME ZONE</p>
</td>
<td class="cellalignment982" headers="r7c1-t26 r1c3-t26">
<p>Timestamp for the last time this content was refreshed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>In addition to the columns listed in <a href="#CIHCBJII">Table 1-14</a>, the MDSYS.SEM_NETWORK_INDEX_INFO view contains columns from the <a class="olink REFRN20088" href="../../server.112/e40402/statviews_1109.htm#REFRN20088">ALL_INDEXES</a> and <a class="olink REFRN20086" href="../../server.112/e40402/statviews_1105.htm#REFRN20086">ALL_IND_PARTITIONS</a> views (both described in <a class="olink REFRN" href="../../server.112/e40402/toc.htm"><span class="italic">Oracle Database Reference</span></a>), including:</p>
<ul>
<li>
<p>From the ALL_INDEXES view: UNIQUENESS, COMPRESSION, PREFIX_LENGTH</p>
</li>
<li>
<p>From the ALL_IND_PARTITIONS view: STATUS, TABLESPACE_NAME, BLEVEL, LEAF_BLOCKS, NUM_ROWS, DISTINCT_KEYS, AVG_LEAF_BLOCKS_PER_KEY, AVG_DATA_BLOCKS_PER_KEY, CLUSTERING_FACTOR, SAMPLE_SIZE, LAST_ANALYZED</p>
</li>
</ul>
<p>Note that the information in the MDSYS.SEM_NETWORK_INDEX_INFO view may sometimes be stale. You can refresh this information by using the <a href="sem_apis_ref.htm#CACEAFGB">SEM_APIS.REFRESH_SEM_NETWORK_INDEX_INFO</a> procedure.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHBJEDA"></a>
<div id="RDFRM209" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.9</span> Using <a id="sthref173"></a>Data Type Indexes</h2>
<p>Data type indexes are indexes on the values of typed literals stored in a semantic network. These indexes may significantly improve the performance of SEM_MATCH queries involving certain types of FILTER expressions. For example, a data type index on <code>xsd:dateTime</code> literals may speed up evaluation of the filter <code>(?x &lt; "1929-11-16T13:45:00Z"^^xsd:dateTime)</code>. Indexes can be created for several data types, which are listed in <a href="#CIHIFBFD">Table 1-15</a>.</p>
<div id="RDFRM210" class="tblformal">
<p class="titleintable"><a id="sthref174"></a><a id="CIHIFBFD"></a>Table 1-15 Data Types for Data Type Indexing</p>
<table class="cellalignment980" title="Data Types for Data Type Indexing" summary="Data Types for Data Type Indexing of RDF Data" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t27">Data Type URI</th>
<th class="cellalignment981" id="r1c2-t27">Oracle Type</th>
<th class="cellalignment981" id="r1c3-t27">Index Type</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t27" headers="r1c1-t27">
<p>http://www.w3.org/2001/XMLSchema#decimal</p>
</td>
<td class="cellalignment982" headers="r2c1-t27 r1c2-t27">
<p>NUMBER</p>
</td>
<td class="cellalignment982" headers="r2c1-t27 r1c3-t27">
<p>Non-unique B-tree (creates a single index for all xsd numeric types, including <code>xsd:float</code>, <code>xsd:double</code>, and <code>xsd:decimal</code> and all of its subtypes)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t27" headers="r1c1-t27">
<p>http://www.w3.org/2001/XMLSchema#string</p>
</td>
<td class="cellalignment982" headers="r3c1-t27 r1c2-t27">
<p>VARCHAR2</p>
</td>
<td class="cellalignment982" headers="r3c1-t27 r1c3-t27">
<p>Non-unique B-tree (creates a single index for <code>xsd:string</code> typed literals and plain literals)</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t27" headers="r1c1-t27">
<p>http://www.w3.org/2001/XMLSchema#time</p>
</td>
<td class="cellalignment982" headers="r4c1-t27 r1c2-t27">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment982" headers="r4c1-t27 r1c3-t27">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t27" headers="r1c1-t27">
<p>http://www.w3.org/2001/XMLSchema#date</p>
</td>
<td class="cellalignment982" headers="r5c1-t27 r1c2-t27">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment982" headers="r5c1-t27 r1c3-t27">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t27" headers="r1c1-t27">
<p>http://www.w3.org/2001/XMLSchema#dateTime</p>
</td>
<td class="cellalignment982" headers="r6c1-t27 r1c2-t27">
<p>TIMESTAMP WITH TIMEZONE</p>
</td>
<td class="cellalignment982" headers="r6c1-t27 r1c3-t27">
<p>Non-unique B-tree</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t27" headers="r1c1-t27">
<p>http://xmlns.oracle.com/rdf/text</p>
</td>
<td class="cellalignment982" headers="r7c1-t27 r1c2-t27">
<p>(Not applicable)</p>
</td>
<td class="cellalignment982" headers="r7c1-t27 r1c3-t27">
<p>CTXSYS.CONTEXT</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t27" headers="r1c1-t27">
<p>http://xmlns.oracle.com/rdf/geo/WKTLiteral</p>
</td>
<td class="cellalignment982" headers="r8c1-t27 r1c2-t27">
<p>SDO_GEOMETRY</p>
</td>
<td class="cellalignment982" headers="r8c1-t27 r1c3-t27">
<p>MDSYS.SPATIAL_INDEX</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The suitability of data type indexes depends on your query workload. Data type indexes on <code>xsd</code> data types can be used for filters that compare a variable with a constant value, and are particularly useful when queries have an unselective graph pattern with a very selective filter condition. Appropriate data type indexes are required for queries with spatial or text filters.</p>
<p>While data type indexes improve query performance, overhead from incremental index maintenance can degrade the performance of DML and bulk load operations on the semantic network. For bulk load operations, it may often be faster to drop data type indexes, perform the bulk load, and then re-create the data type indexes.</p>
<p>You can add, alter, and drop data type indexes using the following procedures, which are described in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>:</p>
<ul>
<li>
<p><a href="sem_apis_ref.htm#CACGCIDC">SEM_APIS.ADD_DATATYPE_INDEX</a></p>
</li>
<li>
<p><a href="sem_apis_ref.htm#CACEHIHH">SEM_APIS.ALTER_DATATYPE_INDEX</a></p>
</li>
<li>
<p><a href="sem_apis_ref.htm#CACBHHIF">SEM_APIS.DROP_DATATYPE_INDEX</a></p>
</li>
</ul>
<p><a id="sthref175"></a><a id="sthref176"></a>Information about existing data type indexes is maintained in the MDSYS.SEM_DTYPE_INDEX_INFO view, which has the columns shown in <a href="#CIHGDJFG">Table 1-16</a> and one row for each data type index.</p>
<div id="RDFRM211" class="tblformal">
<p class="titleintable"><a id="sthref177"></a><a id="CIHGDJFG"></a>Table 1-16 MDSYS.SEM_DTYPE_INDEX_INFO View Columns</p>
<table class="cellalignment980" title="MDSYS.SEM_DTYPE_INDEX_INFO View Columns" summary="SEM_DTYPE_INDEX_INFO view columns" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t28">Column Name</th>
<th class="cellalignment981" id="r1c2-t28">Data Type</th>
<th class="cellalignment981" id="r1c3-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t28" headers="r1c1-t28">
<p>DATATYPE</p>
</td>
<td class="cellalignment982" headers="r2c1-t28 r1c2-t28">
<p>VARCHAR2(51)</p>
</td>
<td class="cellalignment982" headers="r2c1-t28 r1c3-t28">
<p>Data type URI</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t28" headers="r1c1-t28">
<p>INDEX_NAME</p>
</td>
<td class="cellalignment982" headers="r3c1-t28 r1c2-t28">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r3c1-t28 r1c3-t28">
<p>Name of the index</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t28" headers="r1c1-t28">
<p>STATUS</p>
</td>
<td class="cellalignment982" headers="r4c1-t28 r1c2-t28">
<p>VARCHAR2(8)</p>
</td>
<td class="cellalignment982" headers="r4c1-t28 r1c3-t28">
<p>Status of the index: <code>USABLE</code> or <code>UNUSABLE</code></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t28" headers="r1c1-t28">
<p>TABLESPACE_NAME</p>
</td>
<td class="cellalignment982" headers="r5c1-t28 r1c2-t28">
<p>VARCHAR2(30)</p>
</td>
<td class="cellalignment982" headers="r5c1-t28 r1c3-t28">
<p>Tablespace for the index</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>You can use the <code>HINT0</code> hint to ensure that data type indexes are used during query evaluation, as shown in <a href="#CIHJAFFJ">Example 1-42</a>, which finds all grandfathers who were born before November 16, 1929.</p>
<div id="RDFRM212" class="example">
<p class="titleinexample"><a id="CIHJAFFJ"></a>Example 1-42 Using HINT0 to Ensure Use of Data Type Index</p>
<pre>
SELECT x, y
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male . ?x :birthDate ?bd
       FILTER (?bd &lt;= "1929-11-15T23:59:59Z"^^xsd:dateTime) }',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null, null, 
    '<span class="bold">HINT0</span>={ LEADING(?bd) INDEX(?bd rdf_v$dateTime_idx) } 
             FAST_DATE_FILTER=T' ));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect1" -->
<a id="CHDEDFFA"></a>
<div id="RDFRM602" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.10</span> <a id="sthref178"></a>Quick Start for Using Semantic Data</h2>
<p>To work with semantic data in an Oracle database, follow these general steps:</p>
<ol>
<li>
<p>Create a tablespace for the system tables. You must be connected as a user with appropriate privileges to create the tablespace. The following example creates a tablespace named RDF_TBLSPACE:</p>
<pre>
CREATE TABLESPACE rdf_tblspace
 DATAFILE '/oradata/orcl/rdf_tblspace.dat' SIZE 1024M REUSE
 AUTOEXTEND ON NEXT 256M MAXSIZE UNLIMITED
 SEGMENT SPACE MANAGEMENT AUTO;
</pre></li>
<li>
<p>Create a semantic data network.</p>
<p>Creating a semantic data network adds semantic data support to an Oracle database. You must create a semantic data network as a user with DBA privileges, specifying a valid tablespace with adequate space. Create the network only once for an Oracle database.</p>
<p>The following example creates a semantic data network using a tablespace named RDF_TBLSPACE (which must already exist):</p>
<pre>
EXECUTE SEM_APIS.CREATE_SEM_NETWORK('rdf_tblspace');
</pre></li>
<li>
<p>Connect as the database user under whose schema you will store your semantic data; do not perform the following steps while connected as SYS, SYSTEM, or MDSYS.</p>
</li>
<li>
<p>Create a table to store references to the semantic data. (You do not need to be connected as a user with DBA privileges for this step and the remaining steps.)</p>
<p>This table must contain a column of type SDO_RDF_TRIPLE_S, which will contain references to all data associated with a single model.</p>
<p>The following example creates a table named ARTICLES_RDF_DATA:</p>
<pre>
CREATE TABLE articles_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
</pre></li>
<li>
<p>Create a model.</p>
<p>When you create a model, you specify the model name, the table to hold references to semantic data for the model, and the column of type SDO_RDF_TRIPLE_S in that table.</p>
<p>The following command creates a model named ARTICLES, which will use the table created in the preceding step.</p>
<pre>
EXECUTE SEM_APIS.CREATE_SEM_MODEL('articles', 'articles_rdf_data', 'triple');
</pre></li>
<li>
<p>Where possible, create Oracle database indexes on conditions that will be specified in the WHERE clause of SELECT statements, to provide better performance for direct queries against the application table's SDO_RDF_TRIPLE_S column. (These indexes are not relevant if the SEM_MATCH table function is being used.) The following example creates such indexes:</p>
<pre>
-- Create indexes on the subjects, properties, and objects
-- in the ARTICLES_RDF_DATA table.
CREATE INDEX articles_sub_idx ON articles_rdf_data (triple.GET_SUBJECT());
CREATE INDEX articles_prop_idx ON articles_rdf_data (triple.GET_PROPERTY());
CREATE INDEX articles_obj_idx ON articles_rdf_data (TO_CHAR(triple.GET_OBJECT()));
</pre></li>
</ol>
<p>After you create the model, you can insert triples into the table, as shown in the examples in <a href="#CIHDIBDE">Section 1.11</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CIHDIBDE"></a>
<div id="RDFRM603" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.11</span> Semantic <a id="sthref179"></a><a id="sthref180"></a>Data <a id="sthref181"></a><a id="sthref182"></a><a id="sthref183"></a><a id="sthref184"></a><a id="sthref185"></a>Examples (PL/SQL and Java)</h2>
<p>This section contains the following PL/SQL examples:</p>
<ul>
<li>
<p><a href="#CHDBHJCB">Section 1.11.1, "Example: Journal Article Information"</a></p>
</li>
<li>
<p><a href="#CHDJBDHF">Section 1.11.2, "Example: Family Information"</a></p>
</li>
</ul>
<p>In addition to the examples in this guide, see the sample code at <code><a href="http://www.oracle.com/technetwork/indexes/samplecode/semantic-sample-522114.html">http://www.oracle.com/technetwork/indexes/samplecode/semantic-sample-522114.html</a></code>.</p>
<a id="CHDBHJCB"></a>
<div id="RDFRM604" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.11.1</span> Example: Journal Article Information</h3>
<p>This section presents a simplified PL/SQL example of model for statements about journal articles. <a href="#CHDCECBB">Example 1-43</a> contains descriptive comments, refer to concepts that are explained in this chapter, and uses functions and procedures documented in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>.</p>
<div id="RDFRM605" class="example">
<p class="titleinexample"><a id="CHDCECBB"></a>Example 1-43 Using a Model for Journal Article Information</p>
<pre>
-- Basic steps:
-- After you have connected as a privileged user and called 
-- SEM_APIS.CREATE_SEM_NETWORK to add RDF support,
-- connect as a regular database user and do the following.
-- 1. For each desired model, create a table to hold its data.
-- 2. For each model, create a model (SEM_APIS.CREATE_RDF_MODEL).
-- 3. For each table to hold semantic data, insert data into the table.
-- 4. Use various subprograms and constructors.
 
-- Create the table to hold data for the model.
CREATE TABLE articles_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
 
-- Create the model.
EXECUTE SEM_APIS.CREATE_SEM_MODEL('articles', 'articles_rdf_data', 'triple');
 
-- Information to be stored about some fictitious articles:
-- Article1, titled "All about XYZ" and written by Jane Smith, refers 
--   to Article2 and Article3.
-- Article2, titled "A review of ABC" and written by Joe Bloggs, 
--   refers to Article3.
-- Seven SQL statements to store the information. In each statement:
-- Each article is referred to by its complete URI The URIs in
--   this example are fictitious.
-- Each property is referred to by the URL for its definition, as 
--   created by the Dublin Core Metadata Initiative.
 
-- Insert rows into the table.
 
-- Article1 has the title "All about XYZ".
INSERT INTO articles_rdf_data VALUES (1,
  SDO_RDF_TRIPLE_S ('articles','&lt;http://nature.example.com/Article1&gt;',
    '&lt;http://purl.org/dc/elements/1.1/title&gt;','"All about XYZ"'));
 
-- Article1 was created (written) by Jane Smith.
INSERT INTO articles_rdf_data VALUES (2,
  SDO_RDF_TRIPLE_S ('articles','&lt;http://nature.example.com/Article1&gt;',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '"Jane Smith"'));
 
-- Article1 references (refers to) Article2.
INSERT INTO articles_rdf_data VALUES (3,
  SDO_RDF_TRIPLE_S ('articles',
    '&lt;http://nature.example.com/Article1&gt;',
    '&lt;http://purl.org/dc/terms/references&gt;',
    '&lt;http://nature.example.com/Article2&gt;'));
 
-- Article1 references (refers to) Article3.
INSERT INTO articles_rdf_data VALUES (4,
  SDO_RDF_TRIPLE_S ('articles',
    '&lt;http://nature.example.com/Article1&gt;',
    '&lt;http://purl.org/dc/terms/references&gt;',
    '&lt;http://nature.example.com/Article3&gt;'));
 
-- Article2 has the title "A review of ABC".
INSERT INTO articles_rdf_data VALUES (5,
  SDO_RDF_TRIPLE_S ('articles',
    '&lt;http://nature.example.com/Article2&gt;',
    '&lt;http://purl.org/dc/elements/1.1/title&gt;',
    '"A review of ABC"'));
 
-- Article2 was created (written) by Joe Bloggs.
INSERT INTO articles_rdf_data VALUES (6,
  SDO_RDF_TRIPLE_S ('articles',
    '&lt;http://nature.example.com/Article2&gt;',
    '&lt;http://purl.org/dc/elements/1.1/creator&gt;',
    '"Joe Bloggs"'));
 
-- Article2 references (refers to) Article3.
INSERT INTO articles_rdf_data VALUES (7,
  SDO_RDF_TRIPLE_S ('articles',
    '&lt;http://nature.example.com/Article2&gt;',
    '&lt;http://purl.org/dc/terms/references&gt;',
    '&lt;http://nature.example.com/Article3&gt;'));
 
COMMIT;
 
-- Query semantic data.
 
SELECT SEM_APIS.GET_MODEL_ID('articles') AS model_id FROM DUAL;
 
SELECT SEM_APIS.GET_TRIPLE_ID(
  'articles',
  '&lt;http://nature.example.com/Article2&gt;',
  '&lt;http://purl.org/dc/terms/references&gt;',
  '&lt;http://nature.example.com/Article3&gt;') AS RDF_triple_id FROM DUAL;
 
SELECT SEM_APIS.IS_TRIPLE(
  'articles',
  '&lt;http://nature.example.com/Article2&gt;',
  '&lt;http://purl.org/dc/terms/references&gt;',
  '&lt;http://nature.example.com/Article3&gt;') AS is_triple FROM DUAL;
 
-- Use SDO_RDF_TRIPLE_S member functions in queries.
 
SELECT a.triple.GET_TRIPLE() AS triple 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_SUBJECT() AS subject 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_PROPERTY() AS property 
  FROM articles_rdf_data a WHERE a.id = 1;
SELECT a.triple.GET_OBJECT() AS object 
  FROM articles_rdf_data a WHERE a.id = 1;
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="CHDJBDHF"></a>
<div id="RDFRM606" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">1.11.2</span> Example: Family Information</h3>
<p>This section presents a simplified PL/SQL example of a model for statements about family tree (genealogy) information. <a href="#CHDCECBB">Example 1-43</a> contains descriptive comments, refer to concepts that are explained in this chapter, and uses functions and procedures documented in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>.</p>
<p>The family relationships in this example reflect the family tree shown in <a href="#CHDIIFJE">Figure 1-3</a>. This figure also shows some of the information directly stated in the example: Cathy is the sister of Jack, Jack and Tom are male, and Cindy is female.</p>
<div id="RDFRM607" class="figure">
<p class="titleinfigure"><a id="CHDIIFJE"></a>Figure 1-3 Family Tree for RDF Example</p>
<img width="314" height="153" src="img/family.gif" alt="Description of Figure 1-3 follows" /><br />
<a id="sthref186" href="img_text/family.htm">Description of "Figure 1-3 Family Tree for RDF Example"</a><br />
<br /></div>
<!-- class="figure" -->
<div id="RDFRM608" class="example">
<p class="titleinexample"><a id="CHDGCDGI"></a>Example 1-44 Using a Model for Family Information</p>
<pre>
-- Basic steps:
-- After you have connected as a privileged user and called 
-- SEM_APIS.CREATE_SEM_NETWORK to enable RDF support,
-- connect as a regular database user and do the following.
-- 1. For each desired model, create a table to hold its data.
-- 2. For each model, create a model (SEM_APIS.CREATE_SEM_MODEL).
-- 3. For each table to hold semantic data, insert data into the table.
-- 4. Use various subprograms and constructors.
 
-- Create the table to hold data for the model.
CREATE TABLE family_rdf_data (id NUMBER, triple SDO_RDF_TRIPLE_S);
 
-- Create the model.
execute SEM_APIS.create_sem_model('family', 'family_rdf_data', 'triple');
 
-- Insert rows into the table. These express the following information:
-----------------
-- John and Janice have two children, Suzie and Matt.
-- Matt married Martha, and they have two children:
--   Tom (male, height 5.75) and Cindy (female, height 06.00).
-- Suzie married Sammy, and they have two children:
--   Cathy (height 5.8) and Jack (male, height 6).
 
-- Person is a class that has two subslasses: Male and Female.
-- parentOf is a property that has two subproperties: fatherOf and motherOf.
-- siblingOf is a property that has two subproperties: brotherOf and sisterOf.
-- The domain of the fatherOf and brotherOf properties is Male.
-- The domain of the motherOf and sisterOf properties is Female.
------------------------
 
-- John is the father of Suzie.
INSERT INTO family_rdf_data VALUES (1, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/John&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Suzie&gt;'));
 
-- John is the father of Matt.
INSERT INTO family_rdf_data VALUES (2, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/John&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Matt&gt;'));
 
-- Janice is the mother of Suzie.
INSERT INTO family_rdf_data VALUES (3, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Janice&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Suzie&gt;'));
 
-- Janice is the mother of Matt.
INSERT INTO family_rdf_data VALUES (4, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Janice&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Matt&gt;'));
 
-- Sammy is the father of Cathy.
INSERT INTO family_rdf_data VALUES (5, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Sammy&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Cathy&gt;'));
 
-- Sammy is the father of Jack.
INSERT INTO family_rdf_data VALUES (6, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Sammy&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Jack&gt;'));
 
-- Suzie is the mother of Cathy.
INSERT INTO family_rdf_data VALUES (7, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Suzie&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Cathy&gt;'));
 
-- Suzie is the mother of Jack.
INSERT INTO family_rdf_data VALUES (8, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Suzie&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Jack&gt;'));
 
-- Matt is the father of Tom.
INSERT INTO family_rdf_data VALUES (9, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Matt&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Tom&gt;'));
 
-- Matt is the father of Cindy
INSERT INTO family_rdf_data VALUES (10, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Matt&gt;', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.example.org/family/Cindy&gt;'));
 
-- Martha is the mother of Tom.
INSERT INTO family_rdf_data VALUES (11, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Martha&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Tom&gt;'));
 
-- Martha is the mother of Cindy. 
INSERT INTO family_rdf_data VALUES (12, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Martha&gt;', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.example.org/family/Cindy&gt;'));
 
-- Cathy is the sister of Jack.
INSERT INTO family_rdf_data VALUES (13, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Cathy&gt;', 
'&lt;http://www.example.org/family/sisterOf&gt;', 
'&lt;http://www.example.org/family/Jack&gt;'));
 
-- Jack is male.
INSERT INTO family_rdf_data VALUES (14, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Jack&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.example.org/family/Male&gt;'));
 
-- Tom is male.
INSERT INTO family_rdf_data VALUES (15, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Tom&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.example.org/family/Male&gt;'));
 
-- Cindy is female.
INSERT INTO family_rdf_data VALUES (16, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Cindy&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.example.org/family/Female&gt;'));
 
-- Person is a class.
INSERT INTO family_rdf_data VALUES (17, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Person&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.w3.org/2000/01/rdf-schema#Class&gt;'));
 
-- Male is a subclass of Person.
INSERT INTO family_rdf_data VALUES (18, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Male&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;',
'&lt;http://www.example.org/family/Person&gt;'));
 
-- Female is a subclass of Person. 
INSERT INTO family_rdf_data VALUES (19, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Female&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subClassOf&gt;',
'&lt;http://www.example.org/family/Person&gt;'));
 
-- siblingOf is a property.
INSERT INTO family_rdf_data VALUES (20, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/siblingOf&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&gt;'));
 
-- parentOf is a property.
INSERT INTO family_rdf_data VALUES (21, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/parentOf&gt;', 
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;',
'&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#Property&gt;'));
 
-- brotherOf is a subproperty of siblingOf.
INSERT INTO family_rdf_data VALUES (22, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/brotherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;',
'&lt;http://www.example.org/family/siblingOf&gt;'));
 
-- sisterOf is a subproperty of siblingOf.
INSERT INTO family_rdf_data VALUES (23, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/sisterOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;',
'&lt;http://www.example.org/family/siblingOf&gt;'));
 
-- A brother is male.
INSERT INTO family_rdf_data VALUES (24, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/brotherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;',
'&lt;http://www.example.org/family/Male&gt;'));
 
-- A sister is female.
INSERT INTO family_rdf_data VALUES (25, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/sisterOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;',
'&lt;http://www.example.org/family/Female&gt;'));
 
-- fatherOf is a subproperty of parentOf.
INSERT INTO family_rdf_data VALUES (26, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;',
'&lt;http://www.example.org/family/parentOf&gt;'));
 
-- motherOf is a subproperty of parentOf.
INSERT INTO family_rdf_data VALUES (27, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#subPropertyOf&gt;',
'&lt;http://www.example.org/family/parentOf&gt;'));
 
-- A father is male.
INSERT INTO family_rdf_data VALUES (28, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/fatherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;',
'&lt;http://www.example.org/family/Male&gt;'));
 
-- A mother is female.
INSERT INTO family_rdf_data VALUES (29, 
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/motherOf&gt;', 
'&lt;http://www.w3.org/2000/01/rdf-schema#domain&gt;',
'&lt;http://www.example.org/family/Female&gt;'));
 
-- Use SET ESCAPE OFF to prevent the caret (^) from being
-- interpreted as an escape character. Two carets (^^) are
-- used to represent typed literals.
SET ESCAPE OFF;
 
-- Cathy's height is 5.8 (decimal).
INSERT INTO family_rdf_data VALUES (30,
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Cathy&gt;', 
'&lt;http://www.example.org/family/height&gt;',
'"5.8"^^xsd:decimal'));
 
-- Jack's height is 6 (integer).
INSERT INTO family_rdf_data VALUES (31,
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Jack&gt;', 
'&lt;http://www.example.org/family/height&gt;',
'"6"^^xsd:integer'));
 
-- Tom's height is 05.75 (decimal).
INSERT INTO family_rdf_data VALUES (32,
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Tom&gt;', 
'&lt;http://www.example.org/family/height&gt;',
'"05.75"^^xsd:decimal'));
 
-- Cindy's height is 06.00 (decimal).
INSERT INTO family_rdf_data VALUES (33,
SDO_RDF_TRIPLE_S('family', 
'&lt;http://www.example.org/family/Cindy&gt;', 
'&lt;http://www.example.org/family/height&gt;',
'"06.00"^^xsd:decimal'));
 
COMMIT;
 
-- RDFS inferencing in the family model
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    'rdfs_rix_family',
    SEM_Models('family'),
    SEM_Rulebases('RDFS'));
END;
/
 
-- Select all males from the family model, without inferencing.
SELECT m
  FROM TABLE(SEM_MATCH(
    '{?m rdf:type :Male}',
    SEM_Models('family'),
    null,
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
 
-- Select all males from the family model, with RDFS inferencing.
SELECT m
  FROM TABLE(SEM_MATCH(
    '{?m rdf:type :Male}',
    SEM_Models('family'),
    SDO_RDF_Rulebases('RDFS'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
 
-- General inferencing in the family model
 
EXECUTE SEM_APIS.CREATE_RULEBASE('family_rb');
 
INSERT INTO mdsys.semr_family_rb VALUES(
  'grandparent_rule',
  '(?x :parentOf ?y) (?y :parentOf ?z)',
  NULL,
  '(?x :grandParentOf ?z)', 
  SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')));
 
COMMIT;
 
-- Because a new rulebase has been created, and it will be used in the
-- entailment, drop the preceding entailment and then re-create it.
EXECUTE SEM_APIS.DROP_ENTAILMENT ('rdfs_rix_family');
 
-- Re-create the entailment.
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    'rdfs_rix_family',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'));
END;
/
 
-- Select all grandfathers and their grandchildren from the family model, 
-- without inferencing. (With no inferencing, no results are returned.)
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    null, 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
 
-- Select all grandfathers and their grandchildren from the family model.
-- Use inferencing from both the RDFS and family_rb rulebases.
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')),
    null));
 
-- Set up to find grandfathers of tall (&gt;= 6) grandchildren
-- from the family model, with RDFS inferencing and
-- inferencing using the "family_rb" rulebase.
 
UPDATE mdsys.semr_family_rb SET
  antecedents = '(?x :parentOf ?y) (?y :parentOf ?z) (?z :height ?h)',
  filter = '(h &gt;= ''6'')',
  aliases = SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/'))
WHERE rule_name = 'GRANDPARENT_RULE';
 
-- Because the rulebase has been updated, drop the preceding entailment, 
-- and then re-create it.
EXECUTE SEM_APIS.DROP_ENTAILMENT ('rdfs_rix_family');
 
-- Re-create the entailment.
BEGIN
  SEM_APIS.CREATE_ENTAILMENT(
    'rdfs_rix_family',
    SEM_Models('family'),
    SEM_Rulebases('RDFS','family_rb'));
END;
/
 
-- Find the entailment that was just created (that is, the
-- one based on the specified model and rulebases).
SELECT SEM_APIS.LOOKUP_ENTAILMENT(SEM_MODELS('family'),
  SEM_RULEBASES('RDFS','family_rb')) AS lookup_entailment FROM DUAL;
 
-- Select grandfathers of tall (&gt;= 6) grandchildren, and their
-- tall grandchildren.
SELECT x grandfather, y grandchild
  FROM TABLE(SEM_MATCH(
    '{?x :grandParentOf ?y . ?x rdf:type :Male}',
    SEM_Models('family'),
    SEM_RuleBases('RDFS','family_rb'), 
    SEM_ALIASES(SEM_ALIAS('','http://www.example.org/family/')), 
    null));
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CIHGJFEJ"></a>
<div id="RDFRM612" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">1.12</span> Software Naming Changes for Semantic Technologies</h2>
<p>Because the support for semantic data has been expanded beyond the original focus on RDF, the names of many software objects (PL/SQL packages, functions and procedures, system tables and views, and so on) have been changed as of Oracle Database Release 11.1. In most cases, the change is to replace the string <span class="italic">RDF</span> with <span class="italic">SEM</span>. although in some cases it may be to replace <span class="italic">SDO_RDF</span> with <span class="italic">SEM</span>.</p>
<p><span class="bolditalic">All valid code that used the pre-Release 11.1 names will continue to work; your existing applications will not be broken.</span> However, it is suggested that you change old applications to use new object names, and you should use the new names for any new applications. This manual will document only the new names.</p>
<p><a href="#CIHEJBFJ">Table 1-17</a> lists the old and new names for some objects related to support for semantic technologies, in alphabetical order by old name.</p>
<div id="RDFRM613" class="tblformal">
<p class="titleintable"><a id="sthref187"></a><a id="CIHEJBFJ"></a>Table 1-17 Semantic Technology Software Objects: Old and New Names</p>
<table class="cellalignment980" title="Semantic Technology Software Objects: Old and New Names" summary="Semantic Technology Software Objects: Old and New Names" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t29">Old Name</th>
<th class="cellalignment981" id="r1c2-t29">New Name</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t29" headers="r1c1-t29">
<p>RDF_ALIAS data type</p>
</td>
<td class="cellalignment982" headers="r2c1-t29 r1c2-t29">
<p>SEM_ALIAS</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t29" headers="r1c1-t29">
<p>RDF_MODEL$ view</p>
</td>
<td class="cellalignment982" headers="r3c1-t29 r1c2-t29">
<p>SEM_MODEL$</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t29" headers="r1c1-t29">
<p>RDF_RULEBASE_INFO view</p>
</td>
<td class="cellalignment982" headers="r4c1-t29 r1c2-t29">
<p>SEM_RULEBASE_INFO</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t29" headers="r1c1-t29">
<p>RDF_RULES_INDEX_DATASETS view</p>
</td>
<td class="cellalignment982" headers="r5c1-t29 r1c2-t29">
<p>SEM_RULES_INDEX_DATASETS</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t29" headers="r1c1-t29">
<p>RDF_RULES_INDEX_INFO view</p>
</td>
<td class="cellalignment982" headers="r6c1-t29 r1c2-t29">
<p>SEM_RULES_INDEX_INFO</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r7c1-t29" headers="r1c1-t29">
<p>RDFI_<span class="italic">rules-index-name</span> view</p>
</td>
<td class="cellalignment982" headers="r7c1-t29 r1c2-t29">
<p>SEMI_<span class="italic">rules-index-name</span></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r8c1-t29" headers="r1c1-t29">
<p>RDFM_<span class="italic">model-name</span> view</p>
</td>
<td class="cellalignment982" headers="r8c1-t29 r1c2-t29">
<p>SEMM_<span class="italic">model-name</span></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r9c1-t29" headers="r1c1-t29">
<p>RDFR_<span class="italic">rulebase-name</span> view</p>
</td>
<td class="cellalignment982" headers="r9c1-t29 r1c2-t29">
<p>SEMR_<span class="italic">rulebase-name</span></p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r10c1-t29" headers="r1c1-t29">
<p>SDO_RDF package</p>
</td>
<td class="cellalignment982" headers="r10c1-t29 r1c2-t29">
<p>SEM_APIS</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r11c1-t29" headers="r1c1-t29">
<p>SDO_RDF_INFERENCE package</p>
</td>
<td class="cellalignment982" headers="r11c1-t29 r1c2-t29">
<p>SEM_APIS</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r12c1-t29" headers="r1c1-t29">
<p>SDO_RDF_MATCH table function</p>
</td>
<td class="cellalignment982" headers="r12c1-t29 r1c2-t29">
<p>SEM_MATCH</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r13c1-t29" headers="r1c1-t29">
<p>SDO_RDF_MODELS data type</p>
</td>
<td class="cellalignment982" headers="r13c1-t29 r1c2-t29">
<p>SEM_MODELS</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r14c1-t29" headers="r1c1-t29">
<p>SDO_RDF_RULEBASES data type</p>
</td>
<td class="cellalignment982" headers="r14c1-t29 r1c2-t29">
<p>SEM_RULEBASES</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="sect1" -->
<div id="RDFRM213" class="sect1"><!-- infolevel="all" infotype="General" --><a id="sthref188"></a>
<h2 class="sect1"><span class="secnum">1.13</span> For More Information About Semantic Technologies</h2>
<p>For more information about Oracle Database semantic technology support and related topics, you may find the following resources helpful:</p>
<ul>
<li>
<p><a id="sthref189"></a><a id="sthref190"></a><a id="sthref191"></a>Semantic Technologies Center (OTN), which includes links for downloads, technical and business white papers, a discussion forum, and other sources of information: <code><a href="http://www.oracle.com/technetwork/database/options/semantic-tech/">http://www.oracle.com/technetwork/database/options/semantic-tech/</a></code></p>
</li>
<li>
<p>World Wide Web Consortium (W3C) <span class="italic">RDF Primer</span>: <code><a href="http://www.w3.org/TR/rdf-primer/">http://www.w3.org/TR/rdf-primer/</a></code></p>
</li>
<li>
<p>World Wide Web Consortium (W3C) <span class="italic">OWL Web Ontology Language Reference</span>: <code><a href="http://www.w3.org/TR/owl-ref/">http://www.w3.org/TR/owl-ref/</a></code></p>
</li>
</ul>
</div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment973">
<tr>
<td class="cellalignment982">
<table class="cellalignment978">
<tr>
<td class="cellalignment977"><a href="sem_prtusage.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment977"><a href="owl_concepts.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment984">
<table class="cellalignment976">
<tr>
<td class="cellalignment977"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment977"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment977"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment977"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment977"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment977"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
