<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Jena Adapter for Oracle Database</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 743" />
<meta name="description" content="Provides usage and reference information about Oracle Database support for semantic technologies, including storage, inference, and query capabilities for data and ontologies based on Resource Description Framework (RDF), RDF Schema (RDFS), and Web Ontology Language (OWL)." />
<meta name="dcterms.created" content="2014-01-26T18:14:11Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Semantic Technologies Developer's Guide" />
<meta name="dcterms.identifier" content="E25609-06" />
<meta name="dcterms.isVersionOf" content="RDFRM" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;2005, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Glossary" href="sem_glossary.htm" title="Glossary" type="text/html" />
<link rel="Prev" href="workspace_mgr.htm" title="Previous" type="text/html" />
<link rel="Next" href="sem_sesame.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e25609.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">15/26</span> <!-- End Header -->
<div id="RDFRM234" class="chapter"><a id="CBBJJJJB"></a>
<h1 class="chapter"><span class="secnum">7</span> <a id="sthref341"></a>Jena Adapter for Oracle Database</h1>
<p>The Jena Adapter for Oracle Database (referred to here as the Jena Adapter) provides a Java-based interface to Oracle Database Semantic Technologies by implementing the well-known Jena Graph, Model, and DatasetGraph APIs. (Apache Jena is an open source framework, and its license and copyright conditions are described in <code><a href="http://jena.sourceforge.net/license.html">http://jena.sourceforge.net/license.html</a></code>.)</p>
<p>The DatasetGraph APIs are for managing named graph data, also referred to as <span class="bold">quads</span>. In addition, the Jena Adapter provides network analytical functions on top of semantic data through integrating with the Oracle Spatial network data model.</p>
<p>This chapter assumes that you are familiar with major concepts explained in <a href="sdo_rdf_concepts.htm#CIHHEDAC">Chapter 1, "Oracle Database Semantic Technologies Overview"</a> and <a href="owl_concepts.htm#CHDJBGFI">Chapter 2, "OWL Concepts"</a>. It also assumes that you are familiar with the overall capabilities and use of the Jena Java framework. For information about the Jena framework, see <code><a href="http://jena.apache.org/">http://jena.apache.org/</a></code>, especially the Documentation link under Quick Links. If you use the network analytical function, you should also be familiar with the Oracle Spatial network data model, which is documented in <a class="olink TOPOL" href="../e11831/toc.htm"><span class="italic">Oracle Spatial Topology and Network Data Models Developer's Guide</span></a>.</p>
<p>The Jena Adapter extends the semantic data management capabilities of Oracle Database Release 11.2 RDF/OWL.</p>
<p>This chapter includes the following major topics:</p>
<ul>
<li>
<p><a href="#DAIBDFGG">Section 7.1, "Setting Up the Software Environment"</a></p>
</li>
<li>
<p><a href="#CBBBGFHI">Section 7.2, "Setting Up the SPARQL Service"</a></p>
</li>
<li>
<p><a href="#CBBFCJAH">Section 7.3, "Setting Up the Semantic Technologies Environment"</a></p>
</li>
<li>
<p><a href="#CBBEBECH">Section 7.4, "SEM_MATCH and Jena Adapter Queries Compared"</a></p>
</li>
<li>
<p><a href="#CBBBEBEB">Section 7.5, "Optimized Handling of SPARQL Queries"</a></p>
</li>
<li>
<p><a href="#CBBIAGAF">Section 7.6, "Additions to the SPARQL Syntax to Support Other Features"</a></p>
</li>
<li>
<p><a href="#CBBBFHGJ">Section 7.7, "Functions Supported in SPARQL Queries through the Jena Adapter"</a></p>
</li>
<li>
<p><a href="#BGBEBBGA">Section 7.8, "SPARQL Update Support"</a></p>
</li>
<li>
<p><a href="#BGBCCGFJ">Section 7.9, "Analytical Functions for RDF Data"</a></p>
</li>
<li>
<p><a href="#CBBJBDEG">Section 7.10, "Support for Server-Side APIs"</a></p>
</li>
<li>
<p><a href="#BGBCHIED">Section 7.11, "Bulk Loading Using the Jena Adapter"</a></p>
</li>
<li>
<p><a href="#BGBCIIBD">Section 7.12, "Automatic Variable Renaming"</a></p>
</li>
<li>
<p><a href="#BGBEEAFC">Section 7.13, "JavaScript Object Notation (JSON) Format Support"</a></p>
</li>
<li>
<p><a href="#BGBIACIB">Section 7.14, "Other Recommendations and Guidelines"</a></p>
</li>
<li>
<p><a href="#CBBCIJAD">Section 7.15, "Example Queries Using the Jena Adapter"</a></p>
</li>
<li>
<p><a href="#BGBIIABE">Section 7.16, "SPARQL Gateway and Semantic Data"</a></p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Disclaimer:</p>
The current Jena Adapter release has been tested against Jena 2.6.4, ARQ 2.8.8, and Joseki 3.4.4. Because of the nature of open source projects, you should not use this Jena Adapter with later versions of Jena, ARQ, or Joseki.</div>
<a id="DAIBDFGG"></a>
<div id="RDFRM235" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.1</span> <a id="sthref342"></a>Setting Up the Software Environment</h2>
<p>To use the Jena Adapter, you must first ensure that the system environment has the necessary software, including Oracle Database 11<span class="italic">g</span> Release 2 with the Spatial and Partitioning options and with Semantic Technologies support enabled, Jena version 2.6.4, the Jena Adapter, and JDK 1.6. You can set up the software environment by performing these actions:</p>
<ol>
<li>
<p>Install Oracle Database Release 11.2 Enterprise Edition with the Oracle Spatial and Partitioning Options.</p>
</li>
<li>
<p>If you have not yet installed Release 11.2.0.3 or later, install the 11.2.0.2 Patch Set for Oracle Database Server (<code><a href="https://updates.oracle.com/Orion/PatchDetails/process_form?patch_num=10098816">https://updates.oracle.com/Orion/PatchDetails/process_form?patch_num=10098816</a></code>).</p>
</li>
<li>
<p>Enable the support for Semantic Technologies, as explained in <a href="sem_enable.htm#CHDHEABD">Section A.1</a>.</p>
</li>
<li>
<p>Install Jena (version 2.6.4): download the .zip file from <code><a href="http://sourceforge.net/projects/jena/files/Jena/Jena-2.6.4/jena-2.6.4.zip/download">http://sourceforge.net/projects/jena/files/Jena/Jena-2.6.4/jena-2.6.4.zip/download</a></code> and unzip it. (The directory or folder into which you unzip it will be referred to as <span class="italic">&lt;Jena_DIR&gt;</span>.)</p>
<p>The Java package will be unpacked into <span class="italic">&lt;Jena_DIR&gt;</span>.</p>
<p>Note that Jena 2.6.4 comes with ARQ version 2.8.7 (<code>arq-2.8.7.jar</code>); however, this version of the Jena Adapter actually requires a newer ARQ version (<code>arq-2.8.8.jar</code>). You can download <code>arq-2.8.8.jar</code> from <code><a href="http://sourceforge.net/projects/jena/files/ARQ/ARQ-2.8.8/arq-2.8.8.zip/download">http://sourceforge.net/projects/jena/files/ARQ/ARQ-2.8.8/arq-2.8.8.zip/download</a></code> and unzip it to a temporary directory. Remove the <code>arq-2.8.7.jar</code> file from <code>&lt;Jena_DIR&gt;/Jena-2.6.4/lib/</code>, and copy <code>arq-2.8.8.jar</code> from the temporary directory into <code>&lt;Jena_DIR&gt;/Jena-2.6.4/lib/</code>.</p>
</li>
<li>
<p>Download the Jena Adapter (<code>jena_adaptor_for_release11.2.0.3.zip</code>) from the Oracle Database Semantic Technologies page (<code><a href="http://www.oracle.com/technetwork/database/options/semantic-tech/">http://www.oracle.com/technetwork/database/options/semantic-tech/</a></code>and click <span class="bold">Downloads</span>), and unzip it into a temporary directory, such as (on a Linux system) <code>/tmp/jena_adapter</code>. (If this temporary directory does not already exist, create it before the unzip operation.)</p>
<p>The Jena Adapter directories and files have the following structure:</p>
<pre>
 examples/
   examples/Test10.java
   examples/Test11.java
   examples/Test12.java
   examples/Test13.java
   examples/Test14.java
   examples/Test15.java
   examples/Test16.java
   examples/Test17.java
   examples/Test18.java
   examples/Test19.java
   examples/Test20.java
   examples/Test6.java
   examples/Test7.java
   examples/Test8.java
   examples/Test9.java
   examples/Test.java
jar/
   jar/sdordfclient.jar
javadoc/
  javadoc/javadoc.zip
joseki/
   joseki/index.html
   joseki/application.xml
   joseki/update.html
   joseki/xml-to-html.xsl
   joseki/joseki-config.ttl
sparqlgateway/ 
  default.xslt
  noop.xslt
  qb1.sparql
  . . .
  browse.jsp
  index.html
  . . .
  application.xml
  WEB-INF/
    WEB-INF/web.xml
    WEB-INF/weblogic.xml
  WEB-INF/lib/
  StyleSheets/
    StyleSheets/paginator.css
    StyleSheets/sg.css
    StyleSheets/sgmin.css
  Scripts/
    Scripts/load.js
    Scripts/paginator.js
    Scripts/tooltip.js
  admin/
    admin/sparql.jsp
    admin/xslt.jsp
web/
  web/web.xml
</pre></li>
<li>
<p>Copy <code>ojdbc6.jar</code> into <span class="italic">&lt;Jena_DIR&gt;</span><code>/lib</code> (Linux) or <span class="italic">&lt;Jena_DIR&gt;</span><code>\lib</code> (Windows). (<code>ojdbc6.jar</code> is in <code>$ORACLE_HOME/jdbc/lib</code> or <code>%ORACLE_HOME%\jdbc\lib</code>.)</p>
</li>
<li>
<p>Copy <code>sdordf.jar</code> into <span class="italic">&lt;Jena_DIR&gt;</span><code>/lib</code> (Linux) or <span class="italic">&lt;Jena_DIR&gt;</span><code>\lib</code> (Windows). (<code>sdordf.jar</code> is in <code>$ORACLE_HOME/md/jlib</code> or <code>%ORACLE_HOME%\md\jlib</code>.)</p>
</li>
<li>
<p>If JDK 1.6 is not already installed, install it.</p>
</li>
<li>
<p>If the JAVA_HOME environment variable does not already refer to the JDK 1.6 installation, define it accordingly. For example:</p>
<pre>
setenv JAVA_HOME /usr/local/packages/jdk16/
</pre></li>
<li>
<p>If the SPARQL service to support the SPARQL protocol is not set up, set it up as explained in <a href="#CBBBGFHI">Section 7.2</a>.</p>
</li>
</ol>
<p>After setting up the software environment, ensure that your Semantic Technologies environment can enable you to use the Jena Adapter to perform queries, as explained in <a href="#CBBFCJAH">Section 7.3</a>.</p>
</div>
<!-- class="sect1" -->
<a id="CBBBGFHI"></a>
<div id="RDFRM236" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.2</span> <a id="sthref343"></a><a id="sthref344"></a>Setting Up the SPARQL Service</h2>
<p>Setting up a SPARQL endpoint using the Jena Adapter involves downloading Joseki, an open source HTTP engine that supports the SPARQL protocol and SPARQL queries. This section explains how to set up a SPARQL service using a servlet deployed in WebLogic Server. The number and complexity of the steps reflect the fact that Oracle is not permitted to bundle all the dependent third-party libraries in a <code>.war</code> or <code>.ear</code> file.</p>
<ol>
<li>
<p>Download and Install Oracle WebLogic Server 11g Release 1 (10.3.1). For details, see <code><a href="http://www.oracle.com/technology/products/weblogic/">http://www.oracle.com/technology/products/weblogic/</a></code> and <code><a href="http://www.oracle.com/technetwork/middleware/ias/downloads/wls-main-097127.html">http://www.oracle.com/technetwork/middleware/ias/downloads/wls-main-097127.html</a></code>.</p>
</li>
<li>
<p>Ensure that you have Java 6 installed, because it is required by Joseki 3.4.4.</p>
</li>
<li>
<p><a id="sthref345"></a>Download Joseki 3.4.4 (<code>joseki-3.4.4.zip</code>) from <code><a href="http://sourceforge.net/projects/joseki/files/Joseki-SPARQL/">http://sourceforge.net/projects/joseki/files/Joseki-SPARQL/</a></code>.</p>
</li>
<li>
<p>Unpack <code>joseki-3.4.4.zip</code> into a temporary directory. For example:</p>
<pre>
mkdir /tmp/joseki
cp joseki-3.4.4.zip /tmp/joseki
cd /tmp/joseki
unzip joseki-3.4.4.zip
</pre></li>
<li>
<p>Ensure that you have downloaded and unzipped the Jena Adapter for Oracle Database, as explained in <a href="#DAIBDFGG">Section 7.1</a>.</p>
</li>
<li>
<p>Create a directory named <code>joseki.war</code> at the same level as the <code>jena_adapter</code> directory, and go to it. For example:</p>
<pre>
mkdir /tmp/joseki.war
cd /tmp/joseki.war
</pre></li>
<li>
<p>Copy necessary files into the directory created in the preceding step:</p>
<pre>
cp /tmp/jena_adapter/joseki/*  /tmp/joseki.war
cp -rf /tmp/joseki/Joseki-3.4.4/webapps/joseki/StyleSheets  /tmp/joseki.war
</pre></li>
<li>
<p>Create directories and copy necessary files into them, as follows:</p>
<pre>
mkdir /tmp/joseki.war/WEB-INF
cp /tmp/jena_adapter/web/*  /tmp/joseki.war/WEB-INF
 
mkdir /tmp/joseki.war/WEB-INF/lib
cp /tmp/joseki/Joseki-3.4.4/lib/*.jar   /tmp/joseki.war/WEB-INF/lib
cp /tmp/jena_adapter/jar/*.jar   /tmp/joseki.war/WEB-INF/lib
##
## Assume ORACLE_HOME points to the home directory of a Release 11.2.0.3 Oracle Database.
##
cp $ORACLE_HOME/md/jlib/sdordf.jar /tmp/joseki.war/WEB-INF/lib
cp $ORACLE_HOME/jdbc/lib/ojdbc6.jar /tmp/joseki.war/WEB-INF/lib
</pre></li>
<li>
<p>Using the WebLogic Server Administration console, create a J2EE data source named <span class="italic">OracleSemDS</span>. During the data source creation, you can specify a user and password for the database schema that contains the relevant semantic data against which SPARQL queries are to be executed.</p>
<p>If you need help in creating this data source, see <a href="#CBBBFDJC">Section 7.2.1, "Creating the Required Data Source Using WebLogic Server"</a>.</p>
</li>
<li>
<p>Go to the <code>autodeploy</code> directory of WebLogic Server and copy files, as follows. (For information about auto-deploying applications in development domains, see: <code><a href="http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html">http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html</a></code>)</p>
<pre>
cd <span class="italic">&lt;domain_name&gt;</span>/autodeploy
cp -rf  /tmp/joseki.war  <span class="italic">&lt;domain_name&gt;</span>/autodeploy
</pre>
<p>In the preceding example, <span class="italic">&lt;domain_name&gt;</span> is the name of a WebLogic Server domain.</p>
<p>Note that while you can run a WebLogic Server domain in two different modes, development and production, only development mode allows you use the auto-deployment feature.</p>
</li>
<li>
<p>Check the files and the directory structure to see if they reflect the following:</p>
<pre>
.
|-- META-INF
|   `-- MANIFEST.MF
|-- StyleSheets
|   `-- joseki.css
|-- WEB-INF
|   |-- lib
|   |   |-- arq-2.8.8-tests.jar
|   |   |-- arq-2.8.8.jar
|   |   |-- icu4j-3.4.4.jar
|   |   |-- iri-0.8.jar
|   |   |-- jena-2.6.4-tests.jar
|   |   |-- jena-2.6.4.jar
|   |   |-- jetty-6.1.25.jar
|   |   |-- jetty-util-6.1.25.jar
|   |   |-- joseki-3.4.4.jar
|   |   |-- junit-4.5.jar
|   |   |-- log4j-1.2.14.jar
|   |   |-- lucene-core-2.3.1.jar
|   |   |-- ojdbc6.jar
|   |   |-- sdb-1.3.4.jar
|   |   |-- sdordf.jar
|   |   |-- sdordfclient.jar
|   |   |-- servlet-api-2.5-20081211.jar
|   |   |-- slf4j-api-1.5.8.jar
|   |   |-- slf4j-log4j12-1.5.8.jar
|   |   |-- stax-api-1.0.1.jar
|   |   |-- tdb-0.8.10.jar
|   |   |-- wstx-asl-3.2.9.jar
|   |   `-- xercesImpl-2.7.1.jar
|   `-- web.xml
|-- application.xml
|-- index.html
|-- joseki-config.ttl
|-- update.html
`-- xml-to-html.xsl
</pre></li>
<li>
<p>If you want to build a .<code>war</code> file from the <code>/tmp/joseki.war</code> directory (note that a <code>.wa</code>r file is required if you want to deploy Joseki to an OC4J container), enter the following commands:</p>
<pre>
cd /tmp/joseki.war
jar cvf /tmp/joseki_app.war *
</pre></li>
<li>
<p>Start or restart WebLogic Server.</p>
</li>
<li>
<p>Verify your deployment by using your Web browser to connect to a URL in the following format (assume that the Web application is deployed at port 7001): <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki</code></p>
<p>You should see a page titled <span class="italic">Oracle SPARQL Service Endpoint using Joseki</span>, and the first text box should contain an example SPARQL query.</p>
</li>
<li>
<p>Click <span class="bold">Submit Query</span>.</p>
<p>You should see a page titled <span class="italic">Oracle SPARQL Endpoint Query Results</span>. There may or may not be any results, depending on the underlying semantic model against which the query is executed.</p>
</li>
</ol>
<p>By default, the <code>joseki-config.ttl</code> file contains an <code>oracle:Dataset</code> definition using a model named <code>M_NAMED_GRAPHS</code>. The following snippet shows the configuration. The <code>oracle:allGraphs</code> predicate denotes that the SPARQL service endpoint will serve queries using all graphs stored in the <code>M_NAMED_GRAPHS</code> model.</p>
<pre>
&lt;#oracle&gt; rdf:type oracle:Dataset;
    joseki:poolSize     1 ;         ## Number of concurrent connections allowed to this dataset.
    oracle:connection
    [ a oracle:OracleConnection ;
    ];
    oracle:allGraphs [ oracle:firstModel "M_NAMED_GRAPHS" ] .
</pre>
<p>The <code>M_NAMED_GRAPHS</code> model will be created automatically (if it does not already exist) upon the first SPARQL query request. You can add a few example triples and quads to test the named graph functions; for example:</p>
<pre>
SQL&gt; CONNECT <span class="italic">username/password</span>
SQL&gt; INSERT INTO m_named_graphs_tpl VALUES(sdo_rdf_triple_s('m_named_graphs','&lt;urn:s&gt;','&lt;urn:p&gt;','&lt;urn:o&gt;'));
SQL&gt; INSERT INTO m_named_graphs_tpl VALUES(sdo_rdf_triple_s('m_named_graphs:&lt;urn:G1&gt;','&lt;urn:g1_s&gt;','&lt;urn:g1_p&gt;','&lt;urn:g1_o&gt;'));
SQL&gt; INSERT INTO m_named_graphs_tpl VALUES(sdo_rdf_triple_s('m_named_graphs:&lt;urn:G2&gt;','&lt;urn:g2_s&gt;','&lt;urn:g2_p&gt;','&lt;urn:g2_o&gt;'));
SQL&gt; COMMIT;
</pre>
<p>After inserting the rows, go to <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki</code>, type the following SPARQL query, and click <span class="bold">Submit Query</span>:</p>
<pre>
SELECT ?g ?s ?p ?o
WHERE 
  { GRAPH ?g { ?s ?p ?o} }
</pre>
<p>The result should be an HTML table with four columns and two sets of result bindings.</p>
<p>The <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki</code> page also contains a <span class="bold">JSON Output</span> option. If this option is selected (enabled), the SPARQL query response is converted to JSON format.</p>
<a id="CBBBFDJC"></a>
<div id="RDFRM237" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.2.1</span> Creating the Required Data Source Using WebLogic Server</h3>
<p>If you need help creating the required J2EE data source using the WebLogic Server admin console, you can follow these steps:</p>
<ol>
<li>
<p>Login to: <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/console</code></p>
</li>
<li>
<p>In the Domain Structure panel, click <span class="bold">Services</span>.</p>
</li>
<li>
<p>Click <span class="bold">JDBC</span></p>
</li>
<li>
<p>Click <span class="bold">Data Sources</span>.</p>
</li>
<li>
<p>In the Summary of JDBC Data Sources panel, click <span class="bold">New</span> under the Data Sources table.</p>
</li>
<li>
<p>In the Create a New JDBC Data Source panel, enter or select the following values.</p>
<p><span class="bold">Name</span>: <code>OracleSemDS</code></p>
<p><span class="bold">JNDI Name</span>: <code>OracleSemDS</code></p>
<p><span class="bold">Database Type</span>: <code>Oracle</code></p>
<p><span class="bold">Database Driver</span>: <code>Oracle's Driver (Thin) Versions: 9.0.1,9.2.0,10,11</code></p>
</li>
<li>
<p>Click <span class="bold">Next</span> twice.</p>
</li>
<li>
<p>In the Connection Properties panel, enter the appropriate values for the <span class="bold">Database Name</span>, <span class="bold">Host Name</span>, <span class="bold">Port</span>, <span class="bold">Database User Name</span> (schema that contains semantic data), <span class="bold">Password</span> fields.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>.</p>
</li>
<li>
<p>Select (check) the target server or servers to which you want to deploy this <code>OracleSemDS</code> data source.</p>
</li>
<li>
<p>Click <span class="bold">Finish</span>.</p>
<p>You should see a message that all changes have been activated and no restart is necessary.</p>
</li>
</ol>
</div>
<!-- class="sect2" -->
<a id="BGBDBJGI"></a>
<div id="RDFRM238" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.2.2</span> <a id="sthref346"></a>Configuring the SPARQL Service</h3>
<p>By default, the SPARQL Service endpoint assumes that the queries are to be executed against a semantic model with a pre-set name. This semantic model is owned by the schema specified in the J2EE data source with JNDI name <span class="italic">OracleSemDS</span>. Note that you do not need to create this model explicitly using PL/SQL or Java; if the model does not exist in the network, it will be automatically created, along with the necessary application table and index.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Effective with the Jena Adapter release in November 2011, the application table index (<span class="italic">&lt;model_name&gt;</span>_idx) definition is changed to accommodate named graph data (quads).
<p>For existing models created by an older version of the Jena Adapter, you can migrate the application table index name and definition by using the <code>static OracleUtils.migrateApplicationTableIndex(oracle, graph, dop)</code> method in the <code>oracle.spatial.rdf.client.jena</code> package. (See the Javadoc for more information.) Note that the new index definition is <span class="italic">critical</span> to the performance of DML operations against the application table.</p>
</div>
<p>However, you must configure the SPARQL service by editing the <code>joseki-config.ttl</code> configuration file, which is in <code><span class="codeinlineitalic">&lt;domain_name&gt;</span></code><code>/autodeploy/joseki.war</code>.</p>
<p>The supplied <code>joseki-config.ttl</code> file includes a section similar to the following for the Oracle data set:</p>
<pre>
#
## Datasets
#
[] ja:loadClass "oracle.spatial.rdf.client.jena.assembler.OracleAssemblerVocab" .
 
oracle:Dataset  rdfs:subClassOf  ja:RDFDataset .
 
&lt;#oracle&gt; rdf:type oracle:Dataset;
    joseki:poolSize     1 ;         ## Number of concurrent connections allowed to this dataset.
    oracle:connection
    [ a oracle:OracleConnection ;
    ];
    oracle:defaultModel [ oracle:firstModel "TEST_MODEL" ] .
</pre>
<p>In this section of the file, you can:</p>
<ul>
<li>
<p>Modify the <code>joseki:poolSize</code> value, which specifies the number of concurrent connections allowed to this Oracle data set (<code>&lt;#oracle&gt; rdf:type oracle:Dataset;</code>), which points to various RDF models in the database.</p>
</li>
<li>
<p>Modify the name (or the object value of <code>oracle:firstModel</code> predicate) of the <code>defaultModel</code>, to use a different semantic model for queries. You can also specify multiple models, and one or more rulebases for this <code>defaultModel</code>.</p>
<p>For example, the following specifies two models (named <code>ABOX</code> and <code>TBOX</code>) and an OWLPRIME rulebase for the default model. Note that models specified using the <code>oracle:modelName</code> predicate must exist; they <span class="italic">will not</span> be created automatically.</p>
<pre>
&lt;#oracle&gt; rdf:type oracle:Dataset;
    joseki:poolSize 1 ; ## Number of concurrent connections allowed to this dataset.
    oracle:connection
    [ a oracle:OracleConnection ;
    ];
    oracle:defaultModel [ oracle:firstModel "ABOX";
                                      oracle:modelName "TBOX";
                                      oracle:rulebaseName "OWLPRIME" ] .
</pre></li>
<li>
<p>Specify named graphs in the dataset. For example, you can create a named graph called <code>&lt;http://G1&gt;</code> based on two Oracle models and an entailment, as follows.</p>
<pre>
&lt;#oracle&gt; rdf:type oracle:Dataset;
    joseki:poolSize 1 ; ## Number of concurrent connections allowed to this dataset.
      oracle:connection
      [ a oracle:OracleConnection ;
      ];
      oracle:namedModel [ oracle:firstModel "ABOX";
                          oracle:modelName "TBOX";
                          oracle:rulebaseName "OWLPRIME";
                          <span class="bold">oracle:namedModelURI &lt;http://G1&gt;</span> ]  .
</pre>
<p>The object of <code>namedModel</code> can take the same specifications as <code>defaultModel</code>, so virtual models are supported here as well (see also the next item).</p>
</li>
<li>
<p>Use a virtual model for queries by adding <code>oracle:useVM "TRUE"</code>, as shown in the following example. Note that if the specified virtual model does not exist, it <span class="italic">will</span> automatically be created on demand.</p>
<pre>
&lt;#oracle&gt; rdf:type oracle:Dataset;
    joseki:poolSize 1 ; ## Number of concurrent connections allowed to this dataset.
    oracle:connection
    [ a oracle:OracleConnection ;
    ];
    oracle:defaultModel [ oracle:firstModel "ABOX";
                                     oracle:modelName "TBOX";
                                     oracle:rulebaseName "OWLPRIME";
                                     <span class="bold">oracle:useVM "TRUE"</span>
    ] .
</pre>
<p>For more information, see <a href="#CBBCEDGB">Section 7.10.1, "Virtual Models Support"</a>.</p>
</li>
<li>
<p>Specify a virtual model as the default model to answer SPARQL queries by using the predicate <code>oracle:virtualModelName</code>, as shown in the following example with a virtual model named <code>TRIPLE_DATA_VM_0</code>:</p>
<pre>
oracle:defaultModel [ oracle:virtualModelName "TRIPLE_DATA_VM_0" ] .
</pre>
<p>If the underlying data consists of quads, you can use <code>oracle:virtualModelName</code> with <code>oracle:allGraphs</code>. The presence of <code>oracle:allGraphs</code> causes an instantiation of <code>DatasetGraphOracleSem</code> objects to answer named graph queries. An example is as follows:</p>
<pre>
oracle:allGraphs [ oracle:virtualModelName "QUAD_DATA_VM_0" ] .
</pre>
<p>Note that when a virtual model name is specified as the default graph, the endpoint can serve only query requests; SPARQL Update operations are not supported.</p>
</li>
<li>
<p>Set the <code>queryOptions</code> and <code>inferenceMaintenance</code> properties to change the query behavior and inference update mode. (See the Javadoc for information about <code>QueryOptions</code> and <code>InferenceMaintenanceMode</code>.)</p>
<p>By default, <code>QueryOptions.ALLOW_QUERY_INVALID_AND_DUP</code> and <code>InferenceMaintenanceMode.NO_UPDATE</code> are set, for maximum query flexibility and efficiency.</p>
</li>
</ul>
<div id="RDFRM239" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref347"></a>
<h4 class="sect3"><span class="secnum">7.2.2.1</span> <a id="sthref348"></a>Client Identifiers</h4>
<p>For every database connection created or used by the Jena Adapter, a client identifier is associated with the connection. The client identifier can be helpful, especially in a Real Application Cluster (Oracle RAC) environment, for isolating Jena Adapter-related activities from other database activities when you are doing performance analysis and tuning.</p>
<p>By default, the client identifier assigned is <code>JenaAdapter</code>. However, you can specify a different value by setting the Java VM <code>clientIdentifier</code> property using the following format:</p>
<pre>
-Doracle.spatial.rdf.client.jena.clientIdentifier=<span class="italic">&lt;identificationString&gt;</span>
</pre>
<p>To start the tracing of only Jena Adapter-related activities on the database side, you can use the DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE procedure. For example:</p>
<pre>
SQL&gt; EXECUTE DBMS_MONITOR.CLIENT_ID_TRACE_ENABLE('JenaAdapter', true, true);
</pre></div>
<!-- class="sect3" -->
<div id="RDFRM475" class="sect3"><!-- infolevel="all" infotype="General" --><a id="sthref349"></a>
<h4 class="sect3"><span class="secnum">7.2.2.2</span> <a id="sthref350"></a><a id="sthref351"></a><a id="sthref352"></a><a id="sthref353"></a>Using OLTP Compression for Application Tables and Staging Tables</h4>
<p>By default, the Jena Adapter creates the application tables and any staging tables (the latter used for bulk loading, as explained in <a href="#BGBCHIED">Section 7.11</a>) using basic table compression with the following syntax:</p>
<pre>
CREATE TABLE .... (... <span class="italic">column definitions</span> ...) ... compress;
</pre>
<p>However, if you are licensed to use the Oracle Advanced Compression option no the database, you can set the following JVM property to turn on OLTP compression, which compresses data during all DML operations against the underlying application tables and staging tables:</p>
<pre>
-Doracle.spatial.rdf.client.jena.advancedCompression="compress for oltp"
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="RDFRM240" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref354"></a>
<h3 class="sect2"><span class="secnum">7.2.3</span> Terminating Long-Running SPARQL Queries</h3>
<p>Because some applications need to be able to terminate long-running SPARQL queries, an abort framework has been introduced with the Jena Adapter and the Joseki setup. Basically, for queries that may take a long time to run, you must stamp each with a unique query ID (qid) value.</p>
<p>For example, the following SPARQL query selects out the subject of all triples. A query ID (qid) is set so that this query can be terminated upon request.</p>
<pre>
PREFIX ORACLE_SEM_FS_NS:  &lt;http://example.com/semtech#qid=8761&gt;
SELECT ?subject WHERE {?subject ?property ?object }
</pre>
<p>The <code>qid</code> attribute value is of long integer type. You can choose a value for the <code>qid</code> for a particular query based on your own application needs.</p>
<p>To terminate a SPARQL query that has been submitted with a qid value, applications can send an abort request to a servlet in the following format and specify a matching QID value</p>
<pre>
http://<span class="italic">&lt;hostname&gt;</span>:7001/joseki/querymgt?abortqid=8761
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM241" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref355"></a>
<h3 class="sect2"><span class="secnum">7.2.4</span> N-Triples Encoding for Non-ASCII Characters</h3>
<p>For any non-ASCII characters in the lexical representation of RDF resources, <code>\uHHHH</code> N-Triples encoding is used when the characters are inserted into the Oracle database. (For details about N-Triples encoding, see <code><a href="http://www.w3.org/TR/rdf-testcases/#ntrip_grammar">http://www.w3.org/TR/rdf-testcases/#ntrip_grammar</a></code>.) Encoding of the constant resources in a SPARQL query is handled in a similar fashion.</p>
<p>Using <code>\uHHHH</code> N-Triples encoding enables support for international characters, such as a mix of Norwegian and Swedish characters, in the Oracle database even if a supported Unicode character set is not being used.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBFCJAH"></a>
<div id="RDFRM242" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.3</span> Setting Up the Semantic Technologies Environment</h2>
<p>To use the Jena Adapter to perform queries, you can connect as any user (with suitable privileges) and use any models in the semantic network. If your Semantic Technologies environment already meets the requirements, you can go directly to compiling and running Java code that uses the Jena Adapter. If your Semantic Technologies environment is not yet set up to be able to use the Jena Adapter, you can perform actions similar to the following example steps:</p>
<ol>
<li>
<p>Connect as SYS with the SYSDBA role:</p>
<pre>
sqlplus sys/<span class="italic">&lt;password-for-sys&gt;</span> as sysdba
</pre></li>
<li>
<p>Create a tablespace for the system tables. For example:</p>
<pre>
CREATE TABLESPACE rdf_users datafile 'rdf_users01.dbf' 
    size 128M reuse autoextend on next 64M 
    maxsize unlimited segment space management auto;
</pre></li>
<li>
<p>Create the semantic network. For example:</p>
<pre>
EXECUTE sem_apis.create_sem_network('RDF_USERS');
</pre></li>
<li>
<p>Create a database user (for connecting to the database to use the semantic network and the Jena Adapter). For example:</p>
<pre>
CREATE USER rdfusr IDENTIFIED BY &lt;password-for-udfusr&gt;
                   DEFAULT TABLESPACE rdf_users;
</pre></li>
<li>
<p>Grant the necessary privileges to this database user. For example:</p>
<pre>
GRANT connect, resource TO rdfusr;
</pre></li>
<li>
<p>To use the Jena Adapter with your own semantic data, perform the appropriate steps to store data, create a model, and create database indexes, as explained in <a href="sdo_rdf_concepts.htm#CHDEDFFA">Section 1.10, "Quick Start for Using Semantic Data"</a>. Then perform queries by compiling and running Java code; see <a href="#CBBCIJAD">Section 7.15</a> for information about example queries.</p>
<p>To use the Jena Adapter with supplied example data, see <a href="#CBBCIJAD">Section 7.15</a>.</p>
</li>
</ol>
</div>
<!-- class="sect1" -->
<a id="CBBEBECH"></a>
<div id="RDFRM243" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.4</span> <a id="sthref356"></a>SEM_MATCH and Jena Adapter Queries Compared</h2>
<p>There are two ways to query semantic data stored in Oracle Database: SEM_MATCH-based SQL statements and SPARQL queries through the Jena Adapter. Queries using each approach are similar in appearance, but there are important behavioral differences. To ensure consistent application behavior, you must understand the differences and use care when dealing with query results coming from SEM_MATCH queries and SPARQL queries.</p>
<p>The following simple examples show the two approaches.</p>
<p><span class="bold">Query 1 (SEM_MATCH-based)</span></p>
<pre>
select s, p, o
    from table(sem_match('{?s ?p ?o}', sem_models('Test_Model'), ....))
</pre>
<p><span class="bold">Query 2 (SPARQL query through the Jena Adapter)</span></p>
<pre>
select ?s ?p ?o
where {?s ?p ?o}
</pre>
<p>These two queries perform the same kind of functions; however, there are some important differences. Query 1 (SEM_MATCH-based):</p>
<ul>
<li>
<p>Reads all triples out of <code>Test_Model</code>.</p>
</li>
<li>
<p>Does not differentiate among URI, bNode, plain literals, and typed literals, and it does not handle long literals.</p>
</li>
<li>
<p>Does not unescape certain characters (such as <code>'\n'</code>).</p>
</li>
</ul>
<p>Query 2 (SPARQL query executed through the Jena Adapter) also reads all triples out of <code>Test_Model</code> (assume it executed a call to <code>ModelOracleSem</code> referring to the same underlying <code>Test_Model</code>). However, Query 2:</p>
<ul>
<li>
<p>Reads out additional columns (as opposed to just the <code>s</code>, <code>p</code>, and <code>o</code> columns with the SEM_MATCH table function), to differentiate URI, bNodes, plain literals, typed literals, and long literals. This is to ensure proper creation of Jena Node objects.</p>
</li>
<li>
<p>Unescapes those characters that are escaped when stored in Oracle Database</p>
</li>
</ul>
<p>Blank node handling is another difference between the two approaches:</p>
<ul>
<li>
<p>In a SEM_MATCH-based query, blank nodes are always treated as constants.</p>
</li>
<li>
<p>In a SPARQL query, a blank node that <span class="italic">is not</span> wrapped inside <code>&lt;</code> and <code>&gt;</code> is treated as a variable when the query is executed through the Jena Adapter. This matches the SPARQL standard semantics. However, a blank node that <span class="italic">is</span> wrapped inside <code>&lt;</code> and <code>&gt;</code> is treated as a constant when the query is executed, and the Jena Adapter adds a proper prefix to the blank node label as required by the underlying data modeling.</p>
</li>
</ul>
<p>The maximum length for the name of a semantic model created using the Jena Adapter API is 22 characters.</p>
</div>
<!-- class="sect1" -->
<a id="CBBBEBEB"></a>
<div id="RDFRM244" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.5</span> <a id="sthref357"></a><a id="sthref358"></a>Optimized Handling of SPARQL Queries</h2>
<p>This section describes some performance-related features of the Jena Adapter that can enhance SPARQL query processing. These features are performed automatically by default.</p>
<p>This section assumes that you are familiar with SPARQL, including the CONSTRUCT feature and property paths.</p>
<div id="RDFRM245" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref359"></a>
<h3 class="sect2"><span class="secnum">7.5.1</span> Compilation of SPARQL queries to a single SEM_MATCH Call</h3>
<p>SPARQL queries involving DISTINCT, OPTIONAL, FILTER, UNION, ORDER BY, and LIMIT are converted to a single Oracle SEM_MATCH table function. If a query cannot be converted directly to SEM_MATCH because it uses SPARQL features not supported by SEM_MATCH (for example, CONSTRUCT), the Jena Adapter employs a hybrid approach and tries to execute the largest portion of the query using a single SEM_MATCH function while executing the rest using the Jena ARQ query engine.</p>
<p>For example, the following SPARQL query is directly translated to a single SEM_MATCH table function:</p>
<pre>
PREFIX dc:  &lt;http://purl.org/dc/elements/1.1/&gt; 
PREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt; 
SELECT ?person ?name 
  WHERE {
                 {?alice foaf:knows ?person . }
               UNION { 
                 ?person ?p ?name. OPTIONAL { ?person ?x ?name1 } 
                     }
        }
</pre>
<p>However, the following example query is not directly translatable to a single SEM_MATCH table function because of the CONSTRUCT keyword:</p>
<pre>
PREFIX vcard: &lt;http://www.w3.org/2001/vcard-rdf/3.0#&gt; 
CONSTRUCT  { &lt;http://example.org/person#Alice&gt; vcard:FN ?obj } 
  WHERE  { { ?x &lt;http://pred/a&gt; ?obj.}
         UNION
         { ?x &lt;http://pred/b&gt; ?obj.}  }
</pre>
<p>In this case, the Jena Adapter converts the inner UNION query into a single SEM_MATCH table function, and then passes on the result set to the Jena ARQ query engine for further evaluation.</p>
</div>
<!-- class="sect2" -->
<a id="CBBIIBAE"></a>
<div id="RDFRM246" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.5.2</span> <a id="sthref360"></a><a id="sthref361"></a>Optimized Handling of Property Paths</h3>
<p>As defined in Jena, a property path is a possible route through an RDF graph between two graph nodes. Property paths are an extension of SPARQL and are more expressive than basic graph pattern queries, because regular expressions can be used over properties for pattern matching RDF graphs. For more information about property paths, see the documentation for the Jena ARQ query engine.</p>
<p>The Jena Adapter supports all Jena property path types through the integration with the Jena ARQ query engine, but it converts some common path types directly to native SQL hierarchical queries (not based on SEM_MATCH) to improve performance. The following types of property paths are directly converted to SQL by the Jena Adapter when dealing with triple data:</p>
<ul>
<li>
<p>Predicate alternatives: (p1 | p2 | &hellip; | p<span class="italic">n</span>) where p<span class="italic">i</span> is a property URI</p>
</li>
<li>
<p>Predicate sequences: (p1 / p2 / &hellip; / p<span class="italic">n</span>) where p<span class="italic">i</span> is a property URI</p>
</li>
<li>
<p>Reverse paths : ( ^ p ) where p is a predicate URI</p>
</li>
<li>
<p>Complex paths: p+, p*, p{0, <span class="italic">n</span>} where p could be an alternative, sequence, reverse path, or property URI</p>
</li>
</ul>
<p>Path expressions that cannot be captured in this grammar are not translated directly to SQL by the Jena Adapter, and they are answered using the Jena query engine.</p>
<p>The following example contains a code snippet using a property path expression with path sequences:</p>
<pre>
String m = "PROP_PATH";
 
ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, m);
 
GraphOracleSem graph = new GraphOracleSem(oracle, m);    
    
// populate the RDF Graph
    graph.add(Triple.create(Node.createURI("http://a"),
    Node.createURI("http://p1"),
    Node.createURI("http://b")));
 
graph.add(Triple.create(Node.createURI("http://b"),
 Node.createURI("http://p2"),
 Node.createURI("http://c")));
 
graph.add(Triple.create(Node.createURI("http://c"),
 Node.createURI("http://p5"),
 Node.createURI("http://d")));
 
String query =
" SELECT ?s  " +
" WHERE {?s (&lt;http://p1&gt;/&lt;http://p2&gt;/&lt;http://p5&gt;)+ &lt;http://d&gt;.}";
   
QueryExecution qexec = 
      QueryExecutionFactory.create(QueryFactory.create(query, 
 Syntax.syntaxARQ), model);
 
try {
  ResultSet results = qexec.execSelect();
  ResultSetFormatter.out(System.out, results);
}
finally {
  if (qexec != null)
    qexec.close();
}
     
OracleUtils.dropSemanticModel(oracle, m);
model.close();
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBIAGAF"></a>
<div id="RDFRM248" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.6</span> Additions to the SPARQL Syntax to Support Other Features</h2>
<p>The Jena Adapter allows you to pass in hints and additional query options. It implements these capabilities by overloading the SPARQL namespace prefix syntax by using Oracle-specific namespaces that contain query options. The namespaces are in the form <code><span class="codeinlineitalic">PREFIX ORACLE_SEM_</span></code>xx<code>_NS</code>, where <span class="italic">xx</span> indicates the type of feature (such as <code>HT</code> for hint or <code>AP</code> for additional predicate)</p>
<div id="RDFRM249" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref362"></a>
<h3 class="sect2"><span class="secnum">7.6.1</span> SQL Hints</h3>
<p>SQL hints can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre>
PREFIX ORACLE_SEM_<span class="bold">HT</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">hint</span>&gt;
</pre>
<p>Where <span class="italic">hint</span> can be any hint supported by SEM_MATCH. For example:</p>
<pre>
PREFIX ORACLE_SEM_HT_NS: &lt;http://oracle.com/semtech#leading(t0,t1)&gt; 
SELECT ?book ?title ?isbn     
WHERE { ?book &lt;http://title&gt; ?title. ?book &lt;http://ISBN&gt; ?isbn }
</pre>
<p>In this example, <code>t0,t1</code> refers to the first and second patterns in the query.</p>
<p>Note the slight difference in specifying hints when compared to SEM_MATCH. Due to restrictions of namespace value syntax, a comma (<code>,</code>) must be used to separate <code>t0</code> and <code>t1</code> (or other hint components) instead of a space.</p>
<p>For more information about using SQL hints, see <a href="sdo_rdf_concepts.htm#CHDJACII">Section 1.6, "Using the SEM_MATCH Table Function to Query Semantic Data"</a>, specifically the material about the <code>HINT0</code> keyword in the <code>options</code> attribute.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM250" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref363"></a>
<h3 class="sect2"><span class="secnum">7.6.2</span> Using Bind Variables in SPARQL Queries</h3>
<p>In Oracle Database, using bind variables can reduce query parsing time and increase query efficiency and concurrency. Bind variable support in SPARQL queries is provided through namespace pragma specifications similar to ORACLE_SEM_FS_NS.</p>
<p>Consider a case where an application runs two SPARQL queries, where the second (Query 2) depends on the partial or complete results of the first (Query 1). Some approaches that do not involve bind variables include:</p>
<ul>
<li>
<p>Iterating through results of Query 1 and generating a set of queries. (However, this approach requires as many queries as the number of results of Query 1.)</p>
</li>
<li>
<p>Constructing a SPARQL filter expression based on results of Query 1.</p>
</li>
<li>
<p>Treating Query 1 as a subquery.</p>
</li>
</ul>
<p>Another approach in this case is to use bind variables, as in the following sample scenario:</p>
<pre>
<span class="bold">Query 1</span>:
 
  SELECT ?x
    WHERE { ... <span class="italic">&lt;some complex query&gt;</span> ... };
 
 
<span class="bold">Query 2</span>:
 
  SELECT ?subject ?x
    WHERE {?subject &lt;urn:related&gt; ?x .};
</pre>
<p>The following example shows Query 2 with the syntax for using bind variables with the Jena Adapter:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#no_fall_back,s2s&gt;
PREFIX <span class="bold">ORACLE_SEM_UEAP_NS</span>: &lt;http://oracle.com/semtech#x$RDFVID%20in(<span class="bold">?,?,?</span>)&gt;
PREFIX <span class="bold">ORACLE_SEM_UEPJ_NS</span>: &lt;http://oracle.com/semtech#<span class="bold">x$RDFVID</span>&gt;
PREFIX <span class="bold">ORACLE_SEM_UEBV_NS</span>: &lt;http://oracle.com/semtech#<span class="bold">1,2,3</span>&gt;
SELECT ?subject ?x
WHERE {
  ?subject &lt;urn:related&gt;  ?x
};
</pre>
<p>This syntax includes using the following namespaces:</p>
<ul>
<li>
<p>ORACLE_SEM_UEAP_NS is like ORACLE_SEM_AP_NS, but the value portion of ORACLE_SEM_UEAP_NS is URL Encoded. Before the value portion is used, it must be URL decoded, and then it will be treated as an additional predicate to the SPARQL query.</p>
<p>In this example, after URL decoding, the value portion (following the <code>#</code> character) of this ORACLE_SEM_UEAP_NS prefix becomes "<code>x$RDFVID in(?,?,?)</code>". The three question marks imply a binding to three values coming from Query 1.</p>
</li>
<li>
<p>ORACLE_SEM_UEPJ_NS specifies the additional projections involved. In this case, because ORACLE_SEM_UEAP_NS references the x$RDFVID column, which does not appear in the SELECT clause of the query, it must be specified. Multiple projections are separated by commas.</p>
</li>
<li>
<p>ORACLE_SEM_UEBV_NS specifies the list of bind values that are URL encoded first, and then concatenated and delimited by commas.</p>
</li>
</ul>
<p>Conceptually, the preceding example query is equivalent to the following non-SPARQL syntax query, in which 1, 2, and 3 are treated as bind values:</p>
<pre>
SELECT ?subject ?x
  WHERE {
    ?subject &lt;urn:related&gt;  ?x
  }
  AND ?x$RDFVID in (1,2,3);
</pre>
<p>In the preceding SPARQL example of Query 2, the three integers 1, 2, and 3 come from Query 1. You can use the <code>oext:build-uri-for-id</code> function to generate such internal integer IDs for RDF resources. The following example gets the internal integer IDs from Query 1:</p>
<pre>
PREFIX oext: &lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;
SELECT ?x  (<span class="bold">oext:build-uri-for-id(?x)</span> as <span class="bold">?xid</span>)
WHERE { ... <span class="italic">&lt;some complex query&gt;</span> ... };
</pre>
<p>The values of <code>?xid</code> have the form of &lt;rdfvid:<span class="italic">integer-value</span>&gt;. The application can strip out the angle brackets and the "rdfvid:" strings to get the integer values and pass them to Query 2.</p>
<p>Consider another case, with a single query structure but potentially many different constants. For example, the following SPARQL query finds the hobby for each user who has a hobby and who logs in to an application. Obviously, different users will provide different &lt;uri&gt; values to this SPARQL query, because users of the application are represented using different URIs.</p>
<pre>
SELECT ?hobby
  WHERE { &lt;uri&gt; &lt;urn:hasHobby&gt; ?hobby };
</pre>
<p>One approach, which would not use bind variables, is to generate a different SPARQL query for each different &lt;uri&gt; value. For example, user Jane Doe might trigger the execution of the following SPARQL query:</p>
<pre>
SELECT ?hobby WHERE {
&lt;http://www.example.com/Jane_Doe&gt; &lt;urn:hasHobby&gt; ?hobby };
</pre>
<p>However, another approach is to use bind variables, as in the following example specifying user Jane Doe:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#no_fall_back,s2s&gt;
PREFIX ORACLE_SEM_UEAP_NS: &lt;http://oracle.com/semtech#subject$RDFVID%20in(ORACLE_ORARDF_RES2VID(?))&gt;
PREFIX ORACLE_SEM_UEPJ_NS: &lt;http://oracle.com/semtech#subject$RDFVID&gt;
PREFIX ORACLE_SEM_UEBV_NS: &lt;http://oracle.com/semtech#http%3a%2f%2fwww.example.com%2fJohn_Doe&gt;
SELECT ?subject ?hobby
  WHERE {
    ?subject &lt;urn:hasHobby&gt;  ?hobby
  };
</pre>
<p>Conceptually, the preceding example query is equivalent to the following non-SPARQL syntax query, in which <code>http://www.example.com/Jane_Doe</code> is treated as a bind variable:</p>
<pre>
SELECT ?subject ?hobby
WHERE {
  ?subject &lt;urn:hasHobby&gt;  ?hobby
}
AND ?subject$RDFVID in (ORACLE_ORARDF_RES2VID('http://www.example.com/Jane_Doe'));
</pre>
<p>In this example, ORACLE_ORARDF_RES2VID is a function that translates URIs and literals into their internal integer ID representation. This function is created automatically when the Jena Adapter is used to connect to an Oracle database.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM251" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref364"></a>
<h3 class="sect2"><span class="secnum">7.6.3</span> Additional WHERE Clause Predicates</h3>
<p>The SEM_MATCH <code>filter</code> attribute can specify additional selection criteria as a string in the form of a WHERE clause without the WHERE keyword. Additional WHERE clause predicates can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre>
PREFIX ORACLE_SEM_<span class="bold">AP</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">pred</span>&gt;
</pre>
<p>Where <span class="italic">pred</span> reflects the WHERE clause content to be appended to the query. For example:</p>
<pre>
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX ORACLE_SEM_AP_NS:&lt;http://www.oracle.com/semtech#label$RDFLANG='fr'&gt;  
SELECT DISTINCT ?inst ?label
  WHERE { ?inst a &lt;http://someCLass&gt;. ?inst rdfs:label ?label . }
  ORDER BY (?label) LIMIT 20
</pre>
<p>In this example, a restriction is added to the query that the language type of the label variable must be <code>'fr'</code>.</p>
</div>
<!-- class="sect2" -->
<a id="BGBFCCJC"></a>
<div id="RDFRM252" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.6.4</span> Additional Query Options</h3>
<p>Additional query options can be passed to a SEM_MATCH query including a line in the following form:</p>
<pre>
PREFIX ORACLE_SEM_<span class="bold">FS</span>_NS: &lt;http://oracle.com/semtech#<span class="italic">option</span>&gt;
</pre>
<p>Where <span class="italic">option</span> reflects a query option (or multiple query options delimited by commas) to be appended to the query. For example:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS:   
&lt;http://oracle.com/semtech#timeout=3,dop=4,INF_ONLY,ORDERED,ALLOW_DUP=T&gt;
SELECT * WHERE {?subject ?property ?object }
</pre>
<p>The following query options are supported:</p>
<ul>
<li>
<p><code>ALLOW_DUP=t</code> chooses a faster way to query multiple semantic models, although duplicate results may occur.</p>
</li>
<li>
<p><code>BEST_EFFORT_QUERY=t</code>, when used with the <code>TIMEOUT=</code><code><span class="codeinlineitalic">n</span></code> option, returns all matches found in <span class="italic">n</span> seconds for the SPARQL query.</p>
</li>
<li>
<p><code>DEGREE=</code><span class="italic">n</span> specifies, at the statement level, the degree of parallelism (<span class="italic">n</span>) for the query. With multi-core or multi-CPU processors, experimenting with different <code>DOP</code> values (such as 4 or 8) may improve performance.</p>
<p>Contrast <code>DEGREE</code> with <code>DOP</code>, which specifies parallelism at the session level. <code>DEGREE</code> is recommended over <code>DOP</code> for use with the Jena Adapter, because <code>DEGREE</code> involves less processing overhead.</p>
</li>
<li>
<p><code>DOP=</code><span class="italic">n</span> specifies, at the session level, the degree of parallelism (<span class="italic">n</span>) for the query. With multi-core or multi-CPU processors, experimenting with different <code>DOP</code> values (such as 4 or 8) may improve performance.</p>
</li>
<li>
<p><code>INF_ONLY</code> causes only the inferred model to be queried.</p>
</li>
<li>
<p><code>JENA_EXECUTOR</code> disables the compilation of SPARQL queries to SEM_MATCH (or native SQL); instead, the Jena native query executor will be used.</p>
</li>
<li>
<p><code>JOIN=</code><code><span class="codeinlineitalic">n</span></code> specifies how results from a SPARQL SERVICE call to a federated query can be joined with other parts of the query. For information about federated queries and the <code>JOIN</code> option, see <a href="#BGBFGHFH">Section 7.6.4.1</a>.</p>
</li>
<li>
<p><code>NO_FALL_BACK</code> causes the underlying query execution engine not to fall back on the Jena execution mechanism if a SQL exception occurs.</p>
</li>
<li>
<p><code>ODS=</code><code><span class="codeinlineitalic">n</span></code> specifies, at the statement level, the level of dynamic sampling. (For an explanation of dynamic sampling, see the section about estimating statistics with dynamic sampling in <a class="olink PFGRF30101" href="../../server.112/e41573/stats.htm#PFGRF30101"><span class="italic">Oracle Database Performance Tuning Guide</span></a>.) Valid values for <span class="italic">n</span> are 1 through 10. For example, you could try <code>ODS=3</code> for complex queries.</p>
</li>
<li>
<p><code>ORDERED</code> is translated to a LEADING SQL hint for the query triple pattern joins, while performing the necessary RDF_VALUE$ joins last.</p>
</li>
<li>
<p><code>PLAIN_SQL_OPT=F</code> disables the native compilation of queries directly to SQL.</p>
</li>
<li>
<p><code>QID=</code><span class="italic">n</span> specifies a query ID number; this feature can be used to cancel the query if it is not responding.</p>
</li>
<li>
<p><code>RESULT_CACHE</code> uses the Oracle RESULT_CACHE directive for the query.</p>
</li>
<li>
<p><code>REWRITE=F</code> disables ODCI_Table_Rewrite for the SEM_MATCH table function.</p>
</li>
<li>
<p><code>SKIP_CLOB=T</code> causes CLOB values not to be returned for the query.</p>
</li>
<li>
<p><code>S2S</code> (SPARQL to pure SQL) causes the underlying SEM_MATCH-based query or queries generated based on the SPARQL query to be further converted into SQL queries <span class="bolditalic">without</span> using the SEM_MATCH table function. The resulting SQL queries are executed by the Oracle cost-based optimizer, and the results are processed by the Jena Adapter before being passed on to the client. For more information about the <code>S2S</code> option, including benefits and usage information, see <a href="#BGBBFBCA">Section 7.6.4.2</a>.</p>
<p><code>S2S</code> is enabled by default for all SPARQL queries. If you want to disable S2S, set the following JVM system property:</p>
<pre>
-Doracle.spatial.rdf.client.jena.defaultS2S=false
</pre></li>
<li>
<p><code>TIMEOUT=</code><code><span class="codeinlineitalic">n</span></code> (query timeout) specifies the number of seconds (<span class="italic">n</span>) that the query will run until it is terminated. The underlying SQL generated from a SPARQL query can return many matches and can use features like subqueries and assignments, all of which can take considerable time. The <code>TIMEOUT</code> and <code>BEST_EFFORT_QUERY=t</code> options can be used to prevent what you consider excessive processing time for the query.</p>
</li>
</ul>
<a id="BGBFGHFH"></a>
<div id="RDFRM253" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">7.6.4.1</span> <a id="sthref365"></a>JOIN Option and Federated Queries</h4>
<p>A SPARQL federated query, as described in W3C documents, is a query "over distributed data" that entails "querying one source and using the acquired information to constrain queries of the next source." For more information, see <span class="italic">SPARQL 1.1 Federation Extensions</span> (<code><a href="http://www.w3.org/2009/sparql/docs/fed/service">http://www.w3.org/2009/sparql/docs/fed/service</a></code>).</p>
<p>You can use the JOIN option (described in <a href="#BGBFCCJC">Section 7.6.4</a>) and the SERVICE keyword in a federated query that uses the Jena Adapter. For example, assume the following query:</p>
<pre>
SELECT ?s ?s1 ?o
 WHERE { ?s1 ?p1 ?s .
                    {
                     SERVICE &lt;http://sparql.org/books&gt; { ?s ?p ?o }
                    }
                 }
</pre>
<p>If the <span class="italic">local</span> query portion (<code>?s1 ?p1 ?s,</code>) is very selective, you can specify <code>join=2</code>, as shown in the following query:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS:   &lt;http://oracle.com/semtech#<span class="bold">join=2</span>&gt;
SELECT ?s ?s1 ?o
 WHERE { ?s1 ?p1 ?s .
                    {
                     SERVICE &lt;http://sparql.org/books&gt; { ?s ?p ?o }
                    }
                 }
</pre>
<p>In this case, the local query portion (<code>?s1 ?p1 ?s,</code>) is executed locally against the Oracle database. Each binding of <code>?s</code> from the results is then pushed into the SERVICE part (remote query portion), and a call is made to the service endpoint specified. Conceptually, this approach is somewhat like nested loop join.</p>
<p>If the <span class="italic">remote</span> query portion (<code>?s ?s1 ?o</code>) is very selective, you can specify <code>join=3</code>, as shown in the following query, so that the remote portion is executed first and results are used to drive the execution of local portion:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS:   &lt;http://oracle.com/semtech#<span class="bold">join=3</span>&gt;
SELECT ?s ?s1 ?o
 WHERE { ?s1 ?p1 ?s .
                    {
                     SERVICE &lt;http://sparql.org/books&gt; { ?s ?p ?o }
                    }
                  }
</pre>
<p>In this case, a single call is made to the remote service endpoint and each binding of <code>?s</code> triggers a local query. As with <code>join=2</code>, this approach is conceptually a nested loop based join, but the difference is that the order is switched.</p>
<p>If neither the local query portion nor the remote query portion is very selective, then we can choose join=1, as shown in the following query:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS:   &lt;http://oracle.com/semtech#<span class="bold">join=1</span>&gt;
SELECT ?s ?s1 ?o
 WHERE { ?s1 ?p1 ?s .
                    {
                     SERVICE &lt;http://sparql.org/books&gt; { ?s ?p ?o }
                    }
                }
</pre>
<p>In this case, the remote query portion and the local portion are executed independently, and the results are joined together by Jena. Conceptually, this approach is somewhat like a hash join.</p>
<p>For debugging or tracing federated queries, you can use the HTTP Analyzer in Oracle JDeveloper to see the underlying SERVICE calls.</p>
</div>
<!-- class="sect3" -->
<a id="BGBBFBCA"></a>
<div id="RDFRM254" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3"><span class="secnum">7.6.4.2</span> S2S Option Benefits and Usage Information</h4>
<p>The <code>S2S</code> option, described in <a href="#BGBFCCJC">Section 7.6.4</a>, provides the following potential benefits:</p>
<ul>
<li>
<p>It works well with the <code>RESULT_CACHE</code> option to improve query performance. Using the <code>S2S</code> and <code>RESULT_CACHE</code> options is especially helpful for queries that are executed frequently.</p>
</li>
<li>
<p>It reduces the parsing time of the SEM_MATCH table function, which can be helpful for applications that involve many dynamically generated SPARQL queries.</p>
</li>
<li>
<p>It eliminates the limit of 4000 bytes for the query body (the first parameter of the SEM_MATCH table function), which means that longer, more complex queries are supported.</p>
</li>
</ul>
<p>The S2S option causes an internal in-memory cache to be used for translated SQL query statements. The default size of this internal cache is 1024 (that is, 1024 SQL queries); however, you can adjust the size by using the following Java VM property:</p>
<pre>
-Doracle.spatial.rdf.client.jena.queryCacheSize=<span class="italic">&lt;size&gt;</span>
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<div id="RDFRM255" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref366"></a>
<h3 class="sect2"><span class="secnum">7.6.5</span> Midtier Resource Caching</h3>
<p>When semantic data is stored, all of the resource values are hashed into IDs, which are stored in the triples table. The mappings from value IDs to full resource values are stored in the MDSYS.RDF_VALUE$ table. At query time, for each selected variable, Oracle Database must perform a join with the RDF_VALUE$ table to retrieve the resource.</p>
<p>However, to reduce the number of joins, you can use the midtier cache option, which causes an in-memory cache on the middle tier to be used for storing mappings between value IDs and resource values. To use this feature, include the following PREFIX pragma in the SPARQL query:</p>
<pre>
PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#midtier_cache&gt;
</pre>
<p>To control the maximum size (in bytes) of the in-memory cache, use the <code>oracle.spatial.rdf.client.jena.cacheMaxSize</code> system property. The default cache maximum size is 1GB.</p>
<p>Note that midtier resource caching is most effective for queries using ORDER BY or DISTINCT (or both) constructs, or queries with multiple projection variables. Midtier cache can be combined with the other options specified in <a href="#BGBFCCJC">Section 7.6.4</a>.</p>
<p>If you want to pre-populate the cache with all of the resources in a model, use the <code>GraphOracleSem.populateCache</code> or <code>DatasetGraphOracleSem.populateCache</code> method. Both methods take a parameter specifying the number of threads used to build the internal midtier cache. Running either method in parallel can significantly increase the cache building performance on a machine with multiple CPUs (cores).</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBBFHGJ"></a>
<div id="RDFRM256" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.7</span> <a id="sthref367"></a>Functions Supported in SPARQL Queries through the Jena Adapter</h2>
<p>SPARQL queries through the Jena Adapter can use the following kinds of functions:</p>
<ul>
<li>
<p>Functions in the function library of the Jena ARQ query engine</p>
</li>
<li>
<p>Native Oracle Database functions for projected variables</p>
</li>
<li>
<p>User-defined functions</p>
</li>
</ul>
<a id="CBBCBEGA"></a>
<div id="RDFRM257" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.7.1</span> Functions in the ARQ Function Library</h3>
<p>SPARQL queries through the Jena Adapter can use functions in the function library of the Jena ARQ query engine. These queries are executed in the middle tier.</p>
<p>The following examples use the <code>upper-case</code> and <code>namespace</code> functions. In these examples, the prefix <code>fn</code> is <code>&lt;http://www.w3.org/2005/xpath-functions#&gt;</code> and the prefix <code>afn</code> is <code>&lt;http://jena.hpl.hp.com/ARQ/function#&gt;</code>.</p>
<pre>
PREFIX  fn: &lt;http://www.w3.org/2005/xpath-functions#&gt;
PREFIX  afn: &lt;http://jena.hpl.hp.com/ARQ/function#&gt;
SELECT (fn:upper-case(?object) as ?object1)
WHERE { ?subject dc:title ?object }

PREFIX  fn: &lt;http://www.w3.org/2005/xpath-functions#&gt;
PREFIX  afn: &lt;http://jena.hpl.hp.com/ARQ/function#&gt;
SELECT ?subject (afn:namespace(?object) as ?object1)
WHERE { ?subject &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; ?object } 
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM258" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref368"></a>
<h3 class="sect2"><span class="secnum">7.7.2</span> Native Oracle Database Functions for Projected Variables</h3>
<p>SPARQL queries through the Jena Adapter can use native Oracle Database functions for projected variables. These queries and the functions are executed inside the database. Note that the functions described in this section should not be used together with ARQ functions (described in <a href="#CBBCBEGA">Section 7.7.1</a>).</p>
<p>This section lists the supported native functions and provides some examples. In the examples, the prefix <code>oext</code> is <code>&lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In the preceding URL, note the spelling <code>jena-adapt</code><code><span class="codeinlinebold">or</span></code>, which is retained for compatibility with existing applications and which must be used in queries. The <span class="italic">adapt</span><span class="bolditalic">er</span> spelling is used in regular text, to follow Oracle documentation style guidelines.</div>
<ul>
<li>
<p><code><span class="codeinlinebold">oext:upper-literal</span></code> converts literal values (except for long literals) to uppercase. For example:</p>
<pre>
PREFIX  oext: &lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;
SELECT (oext:upper-literal(?object) as ?object1)
WHERE { ?subject dc:title ?object }
</pre></li>
<li>
<p><code><span class="codeinlinebold">oext:lower-literal</span></code> converts literal values (except for long literals) to lowercase. For example:</p>
<pre>
PREFIX  oext: &lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;
SELECT (oext:lower-literal(?object) as ?object1)
WHERE { ?subject dc:title ?object }
</pre></li>
<li>
<p><code><span class="codeinlinebold">oext:build-uri-for-id</span></code> converts the value ID of a URI, bNode, or literal into a URI form. For example:</p>
<pre>
PREFIX  oext: &lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;
SELECT (oext:build-uri-for-id(?object) as ?object1)
WHERE { ?subject dc:title ?object }
</pre>
<p>An example of the output might be: <code>&lt;rdfvid:1716368199350136353&gt;</code></p>
<p>One use of this function is to allow Java applications to maintain in memory a mapping of those value IDs to the lexical form of URIs, bNodes, or literals. The MDSYS.RDF_VALUE$ table provides such a mapping in Oracle Database.</p>
<p>For a given variable <code>?var</code>, if only <code>oext:build-uri-for-id(?var)</code> is projected, the query performance is likely to be faster because fewer internal table join operations are needed to answer the query.</p>
</li>
<li>
<p><code><span class="codeinlinebold">oext:literal-strlen</span></code> returns the length of literal values (except for long literals). For example:</p>
<pre>
PREFIX  oext: &lt;http://oracle.com/semtech/jena-adaptor/ext/function#&gt;
SELECT (oext:literal-strlen(?object) as ?objlen)
WHERE { ?subject dc:title ?object }
</pre></li>
</ul>
</div>
<!-- class="sect2" -->
<div id="RDFRM259" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref369"></a>
<h3 class="sect2"><span class="secnum">7.7.3</span> User-Defined Functions</h3>
<p>SPARQL queries through the Jena Adapter can use user-defined functions that are stored in the database.</p>
<p>In the following example, assume that you want to define a string length function (<code>my_strlen</code>) that handles long literals (CLOB) as well as short literals. On the SPARQL query side, this function can be referenced under the namespace of <code>ouext</code>, which is <code>http://oracle.com/semtech/jena-adaptor/ext/user-def-function#</code>.</p>
<pre>
PREFIX  ouext: &lt;http://oracle.com/semtech/jena-adaptor/ext/user-def-function#&gt;
SELECT ?subject ?object (ouext:my_strlen(?object) as ?obj1)
WHERE { ?subject dc:title ?object }
</pre>
<p>Inside the database, functions including <code>my_strlen</code>, <code>my_strlen_cl</code>, <code>my_strlen_la</code>, <code>my_strlen_lt</code>, and <code>my_strlen_vt</code> are defined to implement this capability. Conceptually, the return values of these functions are mapped as shown in <a href="#CBBJIJEE">Table 7-1</a>.</p>
<div id="RDFRM260" class="tblformal">
<p class="titleintable"><a id="sthref370"></a><a id="CBBJIJEE"></a>Table 7-1 Functions and Return Values for my_strlen Example</p>
<table class="cellalignment980" title="Functions and Return Values for my_strlen Example" summary="Mapping of functions and return values for my_strlen example" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t5">Function Name</th>
<th class="cellalignment981" id="r1c2-t5">Return Value</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t5" headers="r1c1-t5">
<p>my_strlen</p>
</td>
<td class="cellalignment982" headers="r2c1-t5 r1c2-t5">
<p>&lt;VAR&gt;</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t5" headers="r1c1-t5">
<p>my_strlen_cl</p>
</td>
<td class="cellalignment982" headers="r3c1-t5 r1c2-t5">
<p>&lt;VAR&gt;$RDFCLOB</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t5" headers="r1c1-t5">
<p>my_strlen_la</p>
</td>
<td class="cellalignment982" headers="r4c1-t5 r1c2-t5">
<p>&lt;VAR&gt;$RDFLANG</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t5" headers="r1c1-t5">
<p>my_strlen_lt</p>
</td>
<td class="cellalignment982" headers="r5c1-t5 r1c2-t5">
<p>&lt;VAR&gt;$RDFLTYP</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t5" headers="r1c1-t5">
<p>my_strlen_vt</p>
</td>
<td class="cellalignment982" headers="r6c1-t5 r1c2-t5">
<p>&lt;VAR&gt;$RDFVTYP</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>A set of functions (five in all) is used to implement a user-defined function that can be referenced from SPARQL, because this aligns with the internal representation of an RDF resource (in MDSYS.RDF_VALUE$). There are five major columns describing an RDF resource in terms of its value, language, literal type, long value, and value type, and these five columns can be selected out using SEM_MATCH. In this context, a user-defined function simply converts one RDF resource that is represented by five columns to another RDF resource.</p>
<p>These functions are defined as follows:</p>
<pre>
create or replace function <span class="bold">my_strlen</span>(rdfvtyp in varchar2,
                              rdfltyp in varchar2,
                              rdflang in varchar2,
                              rdfclob in clob,
                              value   in varchar2
                              ) return varchar2
 as
   ret_val  varchar2(4000);
 begin
   -- value
   if (rdfvtyp = 'LIT') then
     if (rdfclob is null) then
       return length(value);
     else
       return dbms_lob.getlength(rdfclob);
     end if;
   else
     -- Assign -1 for non-literal values so that application can
     -- easily differentiate
     return '-1';
   end if;
 end;
 /
 
 create or replace function <span class="bold">my_strlen_cl</span>(rdfvtyp in varchar2,
                              rdfltyp in varchar2,
                              rdflang in varchar2,
                              rdfclob in clob,
                              value   in varchar2
                              ) return clob
 as
 begin
   return null;
 end;
 /
 
 create or replace function <span class="bold">my_strlen_la</span>(rdfvtyp in varchar2,
                              rdfltyp in varchar2,
                              rdflang in varchar2,
                              rdfclob in clob,
                              value   in varchar2
                              ) return varchar2
 as
 begin
   return null;
 end;
 /
 
 create or replace function <span class="bold">my_strlen_lt</span>(rdfvtyp in varchar2,
                              rdfltyp in varchar2,
                              rdflang in varchar2,
                              rdfclob in clob,
                              value   in varchar2
                              ) return varchar2
 as
   ret_val  varchar2(4000);
 begin
   -- literal type
   return 'http://www.w3.org/2001/XMLSchema#integer';
 end;
 /
 
 create or replace function <span class="bold">my_strlen_vt</span>(rdfvtyp in varchar2,
                              rdfltyp in varchar2,
                              rdflang in varchar2,
                              rdfclob in clob,
                              value   in varchar2
                              ) return varchar2
 as
   ret_val  varchar2(3);
 begin
   return 'LIT';
 end;
 /
</pre>
<p>User-defined functions can also accept a parameter of VARCHAR2 type. The following five functions together define a <code>my_shorten_str</code> function that accepts an integer (in VARCHAR2 form) for the substring length and returns the substring. (The substring in this example is 12 characters, and it must not be greater than 4000 bytes.)</p>
<pre>
-- SPARQL query that returns the first 12 characters of literal values.
-- 
PREFIX  ouext: &lt;http://oracle.com/semtech/jena-adaptor/ext/user-def-function#&gt;
SELECT (ouext:my_shorten_str(?object, "12") as ?obj1) ?subject
WHERE { ?subject dc:title ?object }
 
create or replace function <span class="bold">my_shorten_str</span>(rdfvtyp in varchar2,
                            rdfltyp in varchar2,
                            rdflang in varchar2,
                            rdfclob in clob,
                            value   in varchar2,
                            arg     in varchar2
                            ) return varchar2
as
 ret_val  varchar2(4000);
begin
 -- value
 if (rdfvtyp = 'LIT') then
   if (rdfclob is null) then
     return substr(value, 1, to_number(arg));
   else
     return dbms_lob.substr(rdfclob, to_number(arg), 1);
   end if;
 else
   return null;
 end if;
end;
/
 
create or replace function <span class="bold">my_shorten_str_cl</span>(rdfvtyp in varchar2,
                            rdfltyp in varchar2,
                            rdflang in varchar2,
                            rdfclob in clob,
                            value   in varchar2,
                            arg     in varchar2
                            ) return clob
as
 ret_val  clob;
begin
 -- lob
 return null;
end;
/
 
create or replace function <span class="bold">my_shorten_str_la</span>(rdfvtyp in varchar2,
                            rdfltyp in varchar2,
                            rdflang in varchar2,
                            rdfclob in clob,
                            value   in varchar2,
                            arg     in varchar2
                            ) return varchar2
as
 ret_val  varchar2(4000);
begin
 -- lang
 if (rdfvtyp = 'LIT') then
   return rdflang;
 else
   return null;
 end if;
end;
/
 
create or replace function <span class="bold">my_shorten_str_lt</span>(rdfvtyp in varchar2,
                            rdfltyp in varchar2,
                            rdflang in varchar2,
                            rdfclob in clob,
                            value   in varchar2,
                            arg     in varchar2
                            ) return varchar2
as
 ret_val  varchar2(4000);
begin
 -- literal type
 ret_val := rdfltyp;
 return ret_val;
end;
/
 
create or replace function <span class="bold">my_shorten_str_vt</span>(rdfvtyp in varchar2,
                            rdfltyp in varchar2,
                            rdflang in varchar2,
                            rdfclob in clob,
                            value   in varchar2,
                            arg     in varchar2
                            ) return varchar2
as
 ret_val  varchar2(3);
begin
 return 'LIT';
end;
/
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBEBBGA"></a>
<div id="RDFRM476" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.8</span> SPARQL Update Support</h2>
<p>The Jena Adapter supports SPARQL Update (<code>http://www.w3.org/TR/sparql11-update/</code>), also referred to as SPARUL. The primary programming APIs involve the Jena class <code>UpdateAction</code> (in package <code>com.hp.hpl.jena.update</code>) and the Jena Adapter classes <code>GraphOracleSem</code> and <code>DatasetGraphOracleSem</code>. <a href="#BGBCBEDB">Example 7-1</a> shows a SPARQL Update operation removes all triples in named graph <code>&lt;http://example/graph&gt;</code> from the relevant model stored in the database.</p>
<div id="RDFRM477" class="example">
<p class="titleinexample"><a id="BGBCBEDB"></a>Example 7-1 Simple SPARQL Update</p>
<pre>
GraphOracleSem graphOracleSem = .... ;
DatasetGraphOracleSem dsgos = DatasetGraphOracleSem.createFrom(graphOracleSem);
 
// SPARQL Update operation
String szUpdateAction = "DROP GRAPH &lt;http://example/graph&gt;";
 
// Execute the Update against a DatasetGraph instance (can be a Jena Model as well)
UpdateAction.parseExecute(szUpdateAction, dsgos);
</pre></div>
<!-- class="example" -->
<p>Note that Oracle Database does not keep any information about an empty named graph. This implies if you invoke CREATE GRAPH <span class="italic">&lt;graph_name&gt;</span> without adding any triples into this graph, then no additional rows in the application table or the underlying RDF_LINK$ table will be created. To an Oracle database, you can safely skip the CREATE GRAPH step, as is the case in <a href="#BGBCBEDB">Example 7-1</a>.</p>
<p><a href="#BGBHAHII">Example 7-2</a> shows a SPARQL Update operation (from ARQ 2.8.8) involving multiple insert and delete operations.</p>
<div id="RDFRM478" class="example">
<p class="titleinexample"><a id="BGBHAHII"></a>Example 7-2 SPARQL Update with Insert and Delete Operations</p>
<pre>
PREFIX : &lt;http://example/&gt;
CREATE GRAPH &lt;http://example/graph&gt; ;
INSERT DATA { :r :p 123 } ;
INSERT DATA { :r :p 1066 } ;
DELETE DATA { :r :p 1066 } ;
INSERT DATA {
  GRAPH &lt;http://example/graph&gt; { :r :p 123 . :r :p 1066 }
} ;
DELETE DATA {
  GRAPH &lt;http://example/graph&gt;  { :r :p 123 }
}
</pre></div>
<!-- class="example" -->
<p>After running the update operation in <a href="#BGBHAHII">Example 7-2</a> against an empty <code>DatasetGraphOracleSem</code>, running the SPARQL query <code>SELECT ?s ?p ?o WHERE {?s ?p ?o}</code> generates the following response:</p>
<pre>
-----------------------------------------------------------------------------------------------
| s                  | p                  | o                                                 |
===============================================================================================
| &lt;http://example/r&gt; | &lt;http://example/p&gt; | "123"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; |
-----------------------------------------------------------------------------------------------
</pre>
<p>Using the same data, running the SPARQL query <code>SELECT ?g ?s ?p ?o where {GRAPH ?g {?s ?p ?o}}</code> generates the following response:</p>
<pre>
-------------------------------------------------------------------------------------------------------------------------
| g                      | s                  | p                  | o                                                  |
=========================================================================================================================
| &lt;http://example/graph&gt; | &lt;http://example/r&gt; | &lt;http://example/p&gt; | "1066"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; |
-------------------------------------------------------------------------------------------------------------------------
</pre>
<p>In addition to using the Java API for SPARQL Update operations, you can configure Joseki to accept SPARQL Update operations by removing the comment (<code>##</code>) characters at the start of the following lines in the <code>joseki-config.ttl</code> file.</p>
<pre>
## &lt;#serviceUpdate&gt;
##     rdf:type            joseki:Service ;
##     rdfs:label          "SPARQL/Update" ;
##     joseki:serviceRef   "update/service" ;
##     # dataset part
##     joseki:dataset      &lt;#oracle&gt;;
##     # Service part.    
##     # This processor will not allow either the protocol,
##     # nor the query, to specify the dataset.
##     joseki:processor    joseki:ProcessorSPARQLUpdate
##     .
## 
## &lt;#serviceRead&gt;
##     rdf:type            joseki:Service ;
##     rdfs:label          "SPARQL" ;
##     joseki:serviceRef   "sparql/read" ;
##     # dataset part
##     joseki:dataset      &lt;#oracle&gt; ;     ## Same dataset
##     # Service part. 
##     # This processor will not allow either the protocol,
##     # nor the query, to specify the dataset.
##     joseki:processor    joseki:ProcessorSPARQL_FixedDS ;
##     .
</pre>
<p>After you edit the <code>joseki-config.ttl</code> file, you must restart the Joseki Web application. You can then try a simple update operation, as follows:</p>
<ol>
<li>
<p>In your browser, go to: <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki/update.html</code></p>
</li>
<li>
<p>Type or paste the following into the text box:</p>
<pre>
PREFIX : &lt;http://example/&gt;
INSERT DATA {
  GRAPH &lt;http://example/g1&gt; { :r :p 455 }
}
</pre></li>
<li>
<p>Click <span class="bold">Perform SPARQL Update</span>.</p>
</li>
</ol>
<p>To verify that the update operation was successful, go to <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki</code> and enter the following query:</p>
<pre>
SELECT *
WHERE
  {  GRAPH &lt;http://example/g1&gt; {?s ?p ?o}};
</pre>
<p>The response should contain the following triple:</p>
<pre>
&lt;http://example/r&gt;     &lt;http://example/p&gt;    "455"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt;
</pre>
<p>A SPARQL Update can also be sent using an HTTP POST operation to the <code>http://</code><code><span class="codeinlineitalic">&lt;hostname&gt;</span></code><code>:7001/joseki/update/</code>service. For example, you can use <code>curl</code> (<code><a href="http://en.wikipedia.org/wiki/CURL">http://en.wikipedia.org/wiki/CURL</a></code>) to send an HTTP POST request to perform the update operation:</p>
<pre>
curl --data "request=PREFIX%20%3A%20%3Chttp%3A%2F%2Fexample%2F%3E%20%0AINSERT%20DATA%20%7B%0A%20%20GRAPH%20%3Chttp%3A%2F%2Fexample%2Fg1%3E%20%7B%20%3Ar%20%3Ap%20888%20%7D%0A%7D%0A"  http://<span class="italic">hostname</span>:7001/joseki/update/service
</pre>
<p>In the preceding example, the URL encoded string is a simple INSERT operation into a named graph. After decoding, it reads as follows:</p>
<pre>
PREFIX : &lt;http://example/&gt;
INSERT DATA {
  GRAPH &lt;http://example/g1&gt; { :r :p 888 }
</pre></div>
<!-- class="sect1" -->
<a id="BGBCCGFJ"></a>
<div id="RDFRM479" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.9</span> Analytical Functions for RDF Data</h2>
<p>You can perform analytical functions on RDF data by using the <code>SemNetworkAnalyst</code> class in the <code>oracle.spatial.rdf.client.jena</code> package. This support integrates the Oracle Spatial network data model (NDM) logic with the underlying RDF data structures. Therefore, to use analytical functions on RDF data, you must be familiar with the Oracle Spatial NDM, which is documented in <a class="olink TOPOL" href="../e11831/toc.htm"><span class="italic">Oracle Spatial Topology and Network Data Models Developer's Guide</span></a>.</p>
<p>The required NDM Java libraries, including <code>sdonm.jar</code> and <code>sdoutl.jar</code>, are under the directory <code>$ORACLE_HOME/md/jlib</code>. Note that <code>xmlparserv2.jar</code> (under <code>$ORACLE_HOME/xdk/lib</code>) must be included in the <code>classpath</code> definition.</p>
<p><a href="#BGBDIHEA">Example 7-3</a> uses the <code>SemNetworkAnalyst</code> class, which internally uses the NDM <code>NetworkAnalyst</code> API</p>
<div id="RDFRM480" class="example">
<p class="titleinexample"><a id="BGBDIHEA"></a>Example 7-3 Performing Analytical functions on RDF Data</p>
<pre>
Oracle oracle = new Oracle(jdbcUrl, user, password);
GraphOracleSem graph = new GraphOracleSem(oracle, modelName);
 
Node nodeA = Node.createURI("http://A");
Node nodeB = Node.createURI("http://B");
Node nodeC = Node.createURI("http://C");
Node nodeD = Node.createURI("http://D");
Node nodeE = Node.createURI("http://E");
Node nodeF = Node.createURI("http://F");
Node nodeG = Node.createURI("http://G");
Node nodeX = Node.createURI("http://X");
 
// An anonymous node
Node ano = Node.createAnon(new AnonId("m1"));
 
Node relL = Node.createURI("http://likes");
Node relD = Node.createURI("http://dislikes");
Node relK = Node.createURI("http://knows");
Node relC = Node.createURI("http://differs");
 
graph.add(new Triple(nodeA, relL, nodeB));
graph.add(new Triple(nodeA, relC, nodeD));
graph.add(new Triple(nodeB, relL, nodeC));
graph.add(new Triple(nodeA, relD, nodeC));
 
graph.add(new Triple(nodeB, relD, ano));
graph.add(new Triple(nodeC, relL, nodeD));
graph.add(new Triple(nodeC, relK, nodeE));
graph.add(new Triple(ano,   relL, nodeD));
graph.add(new Triple(ano,   relL, nodeF));
graph.add(new Triple(ano,   relD, nodeB));
 
// X only likes itself
graph.add(new Triple(nodeX, relL, nodeX));
 
graph.commitTransaction();
HashMap&lt;Node, Double&gt; costMap = new HashMap&lt;Node, Double&gt;();
costMap.put(relL, Double.valueOf((double)0.5));
costMap.put(relD, Double.valueOf((double)1.5));
costMap.put(relC, Double.valueOf((double)5.5));
 
graph.setDOP(4); // this allows the underlying LINK/NODE tables
                 // and indexes to be created in parallel.
 
SemNetworkAnalyst sna = SemNetworkAnalyst.getInstance(
    graph,   // network data source
    true,    // directed graph
    true,    // cleanup existing NODE and LINK table
    costMap
    );
 
psOut.println("From nodeA to nodeC");
Node[] nodeArray = sna.shortestPathDijkstra(nodeA, nodeC);
printNodeArray(nodeArray, psOut);
 
psOut.println("From nodeA to nodeD"); 
nodeArray = sna.shortestPathDijkstra( nodeA, nodeD);
printNodeArray(nodeArray, psOut);
 
psOut.println("From nodeA to nodeF");
nodeArray = sna.shortestPathAStar(nodeA, nodeF);
printNodeArray(nodeArray, psOut);
 
psOut.println("From ano to nodeC");
nodeArray = sna.shortestPathAStar(ano, nodeC);
printNodeArray(nodeArray, psOut);
 
psOut.println("From ano to nodeX");
nodeArray = sna.shortestPathAStar(ano, nodeX);
printNodeArray(nodeArray, psOut);
 
graph.close();
oracle.dispose();
...
...
   
// A helper function to print out a path
public static void printNodeArray(Node[] nodeArray, PrintStream psOut)
{
  if (nodeArray == null) {
    psOut.println("Node Array is null");
    return;
  }
  if (nodeArray.length == 0) {psOut.println("Node Array is empty"); }
  int iFlag = 0;
  psOut.println("printNodeArray: full path starts");
  for (int iHops = 0; iHops &lt; nodeArray.length; iHops++) {
    psOut.println("printNodeArray: full path item " + iHops + " = "
        + ((iFlag == 0) ? "[n] ":"[e] ") + nodeArray[iHops]);
    iFlag = 1 - iFlag;
  }
}
</pre></div>
<!-- class="example" -->
<p>In <a href="#BGBDIHEA">Example 7-3</a>:</p>
<ul>
<li>
<p>A <code>GraphOracleSem</code> object is constructed and a few triples are added to the <code>GraphOracleSem</code> object. These triples describe several individuals and their relationships including <span class="italic">likes</span>, <span class="italic">dislikes</span>, <span class="italic">knows</span>, and <span class="italic">differs</span>.</p>
</li>
<li>
<p>A cost mapping is constructed to assign a numeric cost value to different links/predicates (of the RDF graph). In this case, 0.5, 1.5, and 5.5 are assigned to predicates <span class="italic">likes</span>, <span class="italic">dislikes</span>, and <span class="italic">differs</span>, respectively. This cost mapping is optional. If the mapping is absent, then all predicates will be assigned the same cost 1. When cost mapping is specified, this mapping does not need to be complete; for predicates not included in the cost mapping, a default value of 1 is assigned.</p>
</li>
</ul>
<p>The output of <a href="#BGBDIHEA">Example 7-3</a> is as follows. In this output, the shortest paths are listed for the given start and end nodes. Note that the return value of <code>sna.shortestPathAStar(ano, nodeX)</code> is null because there is no path between these two nodes.</p>
<pre>
From nodeA to nodeC
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://A           ## "n" denotes Node             
printNodeArray: full path item 1 = [e] http://likes       ## "e" denotes Edge (Link)
printNodeArray: full path item 2 = [n] http://B
printNodeArray: full path item 3 = [e] http://likes
printNodeArray: full path item 4 = [n] http://C
 
From nodeA to nodeD
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://A
printNodeArray: full path item 1 = [e] http://likes
printNodeArray: full path item 2 = [n] http://B
printNodeArray: full path item 3 = [e] http://likes
printNodeArray: full path item 4 = [n] http://C
printNodeArray: full path item 5 = [e] http://likes
printNodeArray: full path item 6 = [n] http://D
 
From nodeA to nodeF
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://A
printNodeArray: full path item 1 = [e] http://likes
printNodeArray: full path item 2 = [n] http://B
printNodeArray: full path item 3 = [e] http://dislikes
printNodeArray: full path item 4 = [n] m1
printNodeArray: full path item 5 = [e] http://likes
printNodeArray: full path item 6 = [n] http://F
 
From ano to nodeC
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] m1
printNodeArray: full path item 1 = [e] http://dislikes
printNodeArray: full path item 2 = [n] http://B
printNodeArray: full path item 3 = [e] http://likes
printNodeArray: full path item 4 = [n] http://C
 
From ano to nodeX
Node Array is null
</pre>
<p>The underlying RDF graph view (SEMM_<span class="italic">&lt;model_name&gt;</span> or RDFM_<span class="italic">&lt;model_name&gt;</span>) cannot be used directly by NDM functions, and so <code>SemNetworkAnalyst</code> creates necessary tables that contain the nodes and links that are derived from a given RDF graph. These tables are not updated automatically when the RDF graph changes; rather, you can set the <code>cleanup</code> parameter in <code>SemNetworkAnalyst.getInstance</code> to <code>true</code>, to remove old node and link tables and to rebuild updated tables.</p>
<p><a href="#BGBHAABI">Example 7-4</a> implements the NDM' <code>nearestNeighbors</code> function on top of semantic data. This gets a <code>NetworkAnalyst</code> object from the <code>SemNetworkAnalyst</code> instance, gets the node ID, creates <code>PointOnNet</code> objects, and processes <code>LogicalSubPath</code> objects.</p>
<div id="RDFRM481" class="example">
<p class="titleinexample"><a id="BGBHAABI"></a>Example 7-4 Implementing NDM nearestNeighbors Function on Top of Semantic Data</p>
<pre>
%cat TestNearestNeighbor.java 
 
import java.io.*;
import java.util.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
import com.hp.hpl.jena.sparql.core.DataSourceImpl;
 
import oracle.spatial.rdf.client.jena.*;
 
import oracle.spatial.rdf.client.jena.SemNetworkAnalyst;
import oracle.spatial.network.lod.LODGoalNode;
import oracle.spatial.network.lod.LODNetworkConstraint;
import oracle.spatial.network.lod.NetworkAnalyst;
import oracle.spatial.network.lod.PointOnNet;
import oracle.spatial.network.lod.LogicalSubPath;
 
 
/**
 * This class implements a nearestNeighbors function on top of semantic data
 * using public APIs provided in SemNetworkAnalyst and Oracle Spatial NDM
 */
public class TestNearestNeighbor
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
 
    PrintStream psOut = System.out;
 
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    
    String szModelName = "test_nn";
    // First construct a TBox and load a few axioms
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    String insertString =  
      " PREFIX my:  &lt;http://my.com/&gt; " +
      " INSERT DATA "                             +
      " { my:A   my:likes my:B .                " +
      "   my:A   my:likes my:C .                " +
      "   my:A   my:knows my:D .                " +
      "   my:A   my:dislikes my:X .             " +
      "   my:A   my:dislikes my:Y .             " +
      "   my:C   my:likes my:E .                " +
      "   my:C   my:likes my:F .                " +
      "   my:C   my:dislikes my:M .             " +
      "   my:D   my:likes my:G .                " +
      "   my:D   my:likes my:H .                " +
      "   my:F   my:likes my:M .                " +
      " }   ";
    UpdateAction.parseExecute(insertString,  model);
 
    GraphOracleSem g = model.getGraph();
    g.commitTransaction();
    g.setDOP(4);
 
    HashMap&lt;Node, Double&gt; costMap = new HashMap&lt;Node, Double&gt;();
    costMap.put(Node.createURI("http://my.com/likes"),    Double.valueOf(1.0));
    costMap.put(Node.createURI("http://my.com/dislikes"), Double.valueOf(4.0));
    costMap.put(Node.createURI("http://my.com/knows"),    Double.valueOf(2.0));
 
    SemNetworkAnalyst sna = SemNetworkAnalyst.getInstance(
        g,     // source RDF graph
        true,  // directed graph
        true,  // cleanup old Node/Link tables
        costMap
        );
 
    Node nodeStart = Node.createURI("http://my.com/A");
    long origNodeID = sna.getNodeID(nodeStart);
 
    long[] lIDs = {origNodeID};
 
    // translate from the original ID
    long nodeID = (sna.mapNodeIDs(lIDs))[0]; 
 
    NetworkAnalyst networkAnalyst = sna.getEmbeddedNetworkAnalyst();
 
    LogicalSubPath[] lsps = networkAnalyst.nearestNeighbors(
      new PointOnNet(nodeID),      // startPoint
      6,                           // numberOfNeighbors
      1,                           // searchLinkLevel
      1,                           // targetLinkLevel
      (LODNetworkConstraint) null, // constraint
      (LODGoalNode) null           // goalNodeFilter
      );
 
    if (lsps != null) {
      for (int idx = 0; idx &lt; lsps.length; idx++) {
        LogicalSubPath lsp = lsps[idx];
        Node[] nodePath = sna.processLogicalSubPath(lsp, nodeStart);
        psOut.println("Path " + idx);
        printNodeArray(nodePath, psOut);
      }
    }
 
    g.close();
    sna.close();
    oracle.dispose();
  }
 
 
  public static void printNodeArray(Node[] nodeArray, PrintStream psOut)
  {
    if (nodeArray == null) {
      psOut.println("Node Array is null");
      return;
    }
    if (nodeArray.length == 0) {
      psOut.println("Node Array is empty");
    }
    int iFlag = 0;
    psOut.println("printNodeArray: full path starts");
    for (int iHops = 0; iHops &lt; nodeArray.length; iHops++) {
      psOut.println("printNodeArray: full path item " + iHops + " = "
          + ((iFlag == 0) ? "[n] ":"[e] ") + nodeArray[iHops]);
      iFlag = 1 - iFlag;
    }
  }
}
</pre></div>
<!-- class="example" -->
<p>The output of <a href="#BGBHAABI">Example 7-4</a> is as follows.</p>
<pre>
Path 0
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/likes
printNodeArray: full path item 2 = [n] http://my.com/C
 
Path 1
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/likes
printNodeArray: full path item 2 = [n] http://my.com/B
 
Path 2
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/knows
printNodeArray: full path item 2 = [n] http://my.com/D
 
Path 3
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/likes
printNodeArray: full path item 2 = [n] http://my.com/C
printNodeArray: full path item 3 = [e] http://my.com/likes
printNodeArray: full path item 4 = [n] http://my.com/E
 
Path 4
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/likes
printNodeArray: full path item 2 = [n] http://my.com/C
printNodeArray: full path item 3 = [e] http://my.com/likes
printNodeArray: full path item 4 = [n] http://my.com/F
 
Path 5
printNodeArray: full path starts
printNodeArray: full path item 0 = [n] http://my.com/A
printNodeArray: full path item 1 = [e] http://my.com/knows
printNodeArray: full path item 2 = [n] http://my.com/D
printNodeArray: full path item 3 = [e] http://my.com/likes
printNodeArray: full path item 4 = [n] http://my.com/H
</pre>
<div id="RDFRM482" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref371"></a>
<h3 class="sect2"><span class="secnum">7.9.1</span> <a id="sthref372"></a><a id="sthref373"></a>Generating Contextual Information about a Path in a Graph</h3>
<p>It is sometimes useful to see contextual information about a path in a graph, in addition to the path itself. The <code>buildSurroundingSubGraph</code> method in the <code>SemNetworkAnalyst</code> class can output a DOT file (graph description language file, extension <code>.gv</code>) into the specified <code>Writer</code> object. For each node in the path, up to ten direct neighbors are used to produce a surrounding subgraph for the path. <a href="#BGBHDIIG">Example 7-5</a> shows the usage, specifically the output from the analytical functions used in <a href="#BGBDIHEA">Example 7-3, "Performing Analytical functions on RDF Data"</a>.</p>
<div id="RDFRM483" class="example">
<p class="titleinexample"><a id="BGBHDIIG"></a>Example 7-5 Generating a DOT File with Contextual Information</p>
<pre>
nodeArray = sna.shortestPathDijkstra(nodeA, nodeD);
printNodeArray(nodeArray, psOut);
 
FileWriter dotWriter = new FileWriter("Shortest_Path_A_to_D.gv");
sna.buildSurroundingSubGraph(nodeArray, dotWriter);
</pre></div>
<!-- class="example" -->
<p>The generated output DOT file from <a href="#BGBHDIIG">Example 7-5</a> is straightforward, as shown in the following example:</p>
<pre>
% cat Shortest_Path_A_to_D.gv
digraph { rankdir = LR; charset="utf-8"; 
 
"Rhttp://A" [ label="http://A" shape=rectangle,color=red,style = filled, ];
"Rhttp://B" [ label="http://B" shape=rectangle,color=red,style = filled, ];
"Rhttp://A" -&gt; "Rhttp://B" [ label="http://likes"  color=red, style=bold, ];
"Rhttp://C" [ label="http://C" shape=rectangle,color=red,style = filled, ];
"Rhttp://A" -&gt; "Rhttp://C" [ label="http://dislikes" ];
"Rhttp://D" [ label="http://D" shape=rectangle,color=red,style = filled, ];
"Rhttp://A" -&gt; "Rhttp://D" [ label="http://differs" ];
"Rhttp://B" -&gt; "Rhttp://C" [ label="http://likes"  color=red, style=bold, ];
"Rm1" [ label="m1" shape=ellipse,color=blue, ];
"Rhttp://B" -&gt; "Rm1" [ label="http://dislikes" ];
"Rm1" -&gt; "Rhttp://B" [ label="http://dislikes" ];
"Rhttp://C" -&gt; "Rhttp://D" [ label="http://likes"  color=red, style=bold, ];
"Rhttp://E" [ label="http://E" shape=ellipse,color=blue, ];
"Rhttp://C" -&gt; "Rhttp://E" [ label="http://knows" ];
"Rm1" -&gt; "Rhttp://D" [ label="http://likes" ];
}
</pre>
<p>You can also use methods in the <code>SemNetworkAnalyst</code> and <code>GraphOracleSem</code> classes to produce more sophisticated visualization of the analytical function output.</p>
<p>You can convert the preceding DOT file into a variety of image formats. <a href="#BGBECIFH">Figure 7-1</a> is an image representing the information in the preceding DOT file.</p>
<div id="RDFRM484" class="figure">
<p class="titleinfigure"><a id="BGBECIFH"></a>Figure 7-1 Visual Representation of Analytical Function Output</p>
<img width="776" height="191" src="img/shortest_a_to_d.jpg" alt="Description of Figure 7-1 follows" /><br />
<a id="sthref374" href="img_text/shortest_a_to_d.htm">Description of "Figure 7-1 Visual Representation of Analytical Function Output"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBJBDEG"></a>
<div id="RDFRM261" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.10</span> Support for Server-Side APIs</h2>
<p>This section describes some of the Oracle Database Semantic Technologies features that are exposed by the Jena Adapter. For comprehensive documentation of the API calls that support the available features, see the Jena Adapter reference information (Javadoc). For additional information about the server-side features exposed by the Jena Adapter, see the relevant chapters in this manual.</p>
<a id="CBBCEDGB"></a>
<div id="RDFRM262" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.10.1</span> <a id="sthref375"></a><a id="sthref376"></a>Virtual Models Support</h3>
<p>Virtual models (explained in <a href="sdo_rdf_concepts.htm#CIHGEAHG">Section 1.3.8</a>) are specified in the <code>GraphOracleSem</code> constructor, and they are handled transparently. If a virtual model exists for the model-rulebase combination, it is used in query answering; if such a virtual model does not exist, it is created in the database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Virtual model support through the Jena Adapter is available only with Oracle Database Release 11.2 or later.</div>
<p>The following example reuses an existing virtual model.</p>
<pre>
String modelName = "EX";
String m1 = "EX_1";
 
ModelOracleSem defaultModel = 
  ModelOracleSem.createOracleSemModel(oracle, modelName);
 
// create these models in case they don't exist
ModelOracleSem model1 = ModelOracleSem.createOracleSemModel(oracle, m1);
 
String vmName = "VM_" + modelName;
 
 
//create a virtual model containing EX and EX_1
oracle.executeCall(
"begin sem_apis.create_virtual_model(?,sem_models('"+ m1 + "','"+ modelName+"'),null); end;",vmName);
 
String[] modelNames = {m1};
String[] rulebaseNames = {};
 
Attachment attachment = Attachment.createInstance(modelNames, rulebaseNames, 
InferenceMaintenanceMode.NO_UPDATE, QueryOptions.ALLOW_QUERY_VALID_AND_DUP);
 
// vmName is passed to the constructor, so GraphOracleSem will use the virtual 
// model named vmname (if the current user has read privileges on it)
<span class="bold">GraphOracleSem graph = new GraphOracleSem(oracle, modelName, attachment, vmName);</span>
graph.add(Triple.create(Node.createURI("urn:alice"),
                        Node.createURI("http://xmlns.com/foaf/0.1/mbox"),
                        Node.createURI("mailto:alice@example")));
ModelOracleSem model = new ModelOracleSem(graph);          
 
String queryString =
 
   " SELECT ?subject ?object WHERE { ?subject ?p ?object } ";
 
Query query = QueryFactory.create(queryString) ;
QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
try {
   ResultSet results = qexec.execSelect() ;
   for ( ; results.hasNext() ; ) {
      QuerySolution soln = results.nextSolution() ;
      psOut.println("soln " + soln);
   }
} 
finally { 
   qexec.close() ; 
}
 
OracleUtils.dropSemanticModel(oracle, modelName);
OracleUtils.dropSemanticModel(oracle, m1);
 
oracle.dispose();
</pre>
<p>You can also use the GraphOracleSem constructor to create a virtual model, as in the following example:</p>
<pre>
GraphOracleSem graph = new GraphOracleSem(oracle, modelName, attachment, <span class="bold">true</span>);
</pre>
<p>In this example, the fourth parameter (<code>true</code>) specifies that a virtual model needs to be created for the specified <code>modelName</code> and <code>attachment</code>.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM263" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref377"></a>
<h3 class="sect2"><span class="secnum">7.10.2</span> <a id="sthref378"></a><a id="sthref379"></a>Connection Pooling Support</h3>
<p>Oracle Database Connection Pooling is provided through the Jena Adapter <code>OraclePool</code> class. Once this class is initialized, it can return Oracle objects out of its pool of available connections. Oracle objects are essentially database connection wrappers. After <code>dispose</code> is called on the Oracle object, the connection is returned to the pool. More information about using <code>OraclePool</code> can be found in the API reference information (Javadoc).</p>
<p>The following example sets up an OraclePool object with five (5) initial connections.</p>
<pre>
public static void main(String[] args) throws Exception
  {      
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
 
    // test with connection properties 
    java.util.Properties prop = new java.util.Properties();
    prop.setProperty("MinLimit", "2");     // the cache size is 2 at least 
    prop.setProperty("MaxLimit", "10");
    prop.setProperty("InitialLimit", "2"); // create 2 connections at startup
    prop.setProperty("InactivityTimeout", "1800");    //  seconds
    prop.setProperty("AbandonedConnectionTimeout", "900");  //  seconds
    prop.setProperty("MaxStatementsLimit", "10");
    prop.setProperty("PropertyCheckInterval", "60"); // seconds
 
    System.out.println("Creating OraclePool");
    <span class="bold">OraclePool op = new OraclePool(szJdbcURL, szUser, szPasswd, prop,</span> 
               <span class="bold">"OracleSemConnPool");</span>
    System.out.println("Done creating OraclePool");
 
    // grab an Oracle and do something with it
    System.out.println("Getting an Oracle from OraclePool");
    Oracle oracle = op.getOracle();
    System.out.println("Done");
    System.out.println("Is logical connection:" +
        oracle.getConnection().isLogicalConnection());
    GraphOracleSem g = new GraphOracleSem(oracle, szModelName);
    g.add(Triple.create(Node.createURI("u:John"), 
                        Node.createURI("u:parentOf"), 
                        Node.createURI("u:Mary")));
    g.close();
    // return the Oracle back to the pool
    oracle.dispose();
    
    // grab another Oracle and do something else 
    System.out.println("Getting an Oracle from OraclePool");
    oracle = op.getOracle();
    System.out.println("Done");
    System.out.println("Is logical connection:" +
        oracle.getConnection().isLogicalConnection());
    g = new GraphOracleSem(oracle, szModelName);
    g.add(Triple.create(Node.createURI("u:John"), 
                        Node.createURI("u:parentOf"), 
                        Node.createURI("u:Jack")));
    g.close();
    
    OracleUtils.dropSemanticModel(oracle, szModelName); 
    
    // return the Oracle object back to the pool
    oracle.dispose();
}
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM264" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref380"></a>
<h3 class="sect2"><span class="secnum">7.10.3</span> <a id="sthref381"></a>Semantic Model PL/SQL Interfaces</h3>
<p>Several semantic PL/SQL subprograms are available through the Jena Adapter. <a href="#CBBJFIFG">Table 7-2</a> lists the subprograms and their corresponding Java class and methods.</p>
<div id="RDFRM265" class="tblformal">
<p class="titleintable"><a id="sthref382"></a><a id="CBBJFIFG"></a>Table 7-2 PL/SQL Subprograms and Corresponding Jena Adapter Java Class and Methods</p>
<table class="cellalignment980" title="PL/SQL Subprograms and Corresponding Jena Adapter Java Class and Methods" summary="Pl/SQL Subprograms and Corresponding Jena Adaptor Java Class and Methods" dir="ltr">
<thead>
<tr class="cellalignment974">
<th class="cellalignment981" id="r1c1-t7">PL/SQL Subprogram</th>
<th class="cellalignment981" id="r1c2-t7">Corresponding Java Class and Methods</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment974">
<td class="cellalignment982" id="r2c1-t7" headers="r1c1-t7">
<p><a href="sem_apis_ref.htm#BABCJBFJ">SEM_APIS.DROP_SEM_MODEL</a></p>
</td>
<td class="cellalignment982" headers="r2c1-t7 r1c2-t7">
<p>OracleUtils.dropSemanticModel</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r3c1-t7" headers="r1c1-t7">
<p><a href="sem_apis_ref.htm#CHEBACHD">SEM_APIS.MERGE_MODELS</a></p>
</td>
<td class="cellalignment982" headers="r3c1-t7 r1c2-t7">
<p>OracleUtils.mergeModels</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r4c1-t7" headers="r1c1-t7">
<p><a href="sem_apis_ref.htm#CHEBFECD">SEM_APIS.SWAP_NAMES</a></p>
</td>
<td class="cellalignment982" headers="r4c1-t7 r1c2-t7">
<p>OracleUtils.swapNames</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r5c1-t7" headers="r1c1-t7">
<p><a href="sem_apis_ref.htm#CHEEHJAJ">SEM_APIS.REMOVE_DUPLICATES</a></p>
</td>
<td class="cellalignment982" headers="r5c1-t7 r1c2-t7">
<p>OracleUtils.removeDuplicates</p>
</td>
</tr>
<tr class="cellalignment974">
<td class="cellalignment982" id="r6c1-t7" headers="r1c1-t7">
<p><a href="sem_apis_ref.htm#CHEGGJHH">SEM_APIS.RENAME_MODEL</a></p>
</td>
<td class="cellalignment982" headers="r6c1-t7 r1c2-t7">
<p>OracleUtils.renameModels</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>For information about these PL/SQL utility subprograms, see the reference information in <a href="sem_apis_ref.htm#CHDDAHAF">Chapter 9</a>. For information about the corresponding Java class and methods, see the Jena Adapter API Reference documentation (Javadoc).</p>
</div>
<!-- class="sect2" -->
<a id="BGBFFEEE"></a>
<div id="RDFRM266" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.10.4</span> Inference Options</h3>
<p>You can add options to entailment calls by using the following methods in the <code>Attachment</code> class (in package <code>oracle.spatial.rdf.client.jena</code>):</p>
<pre>
public void setUseLocalInference(boolean useLocalInference)
public boolean getUseLocalInference()
 
public void setDefGraphForLocalInference(String defaultGraphName)
public String getDefGraphForLocalInference()
 
public String getInferenceOption()
public void setInferenceOption(String inferenceOption)
</pre>
<p>For more information about these methods, see the Javadoc.</p>
<p><a href="#BGBDCIID">Example 7-6</a> enables parallel inference (with a degree of 4) and RAW format when creating an entailment. The example also uses the <code>performInference</code> method to create the entailment (comparable to using the <a href="sem_apis_ref.htm#CHEHDGBD">SEM_APIS.CREATE_ENTAILMENT</a> PL/SQL procedure).</p>
<div id="RDFRM485" class="example">
<p class="titleinexample"><a id="BGBDCIID"></a>Example 7-6 Specifying Inference Options</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
import com.hp.hpl.jena.sparql.core.DataSourceImpl;
 
public class TestNewInference
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
 
    PrintStream psOut = System.out;
 
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    
    String szTBoxName = "test_new_tbox";
    {
      // First construct a TBox and load a few axioms
      ModelOracleSem modelTBox = ModelOracleSem.createOracleSemModel(oracle, szTBoxName);
      String insertString =  
        " PREFIX my:  &lt;http://my.com/&gt; " +
        " PREFIX rdfs:  &lt;http://www.w3.org/2000/01/rdf-schema#&gt; " +
        " INSERT DATA "                                     +
        " { my:C1  rdfs:subClassOf my:C2 .                " +
        "   my:C2  rdfs:subClassOf my:C3 .                " +
        "   my:C3  rdfs:subClassOf my:C4 .                " +
        " }   ";
      UpdateAction.parseExecute(insertString,  modelTBox);
      modelTBox.close();
    }
 
    String szABoxName = "test_new_abox";
    {
      // Construct an ABox and load a few quads
      ModelOracleSem modelABox = ModelOracleSem.createOracleSemModel(oracle, szABoxName);
      DatasetGraphOracleSem dataset = DatasetGraphOracleSem.createFrom(modelABox.getGraph());
      modelABox.close();
 
      String insertString =  
        " PREFIX my:    &lt;http://my.com/&gt; " +
        " PREFIX rdf:   &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; " +
        " INSERT DATA                                                 " +
        " { GRAPH my:G1 { my:I1  rdf:type my:C1 .                     " +
        "                 my:I2  rdf:type my:C2 .                     " +
        "               }                                             " +
        " };                                                          " +
        " INSERT DATA                                                 " +
        " { GRAPH my:G2 { my:J1  rdf:type my:C3 .                     " +
        "               }                                             " +
        " }    ";
      UpdateAction.parseExecute(insertString,  dataset);
      dataset.close();
    }
 
 
    String[] attachedModels = new String[1];
    attachedModels[0] = szTBoxName;
 
    String[] attachedRBs = {"OWL2RL"};
 
    Attachment attachment = Attachment.createInstance(
        attachedModels, attachedRBs,
        InferenceMaintenanceMode.NO_UPDATE,
        QueryOptions.ALLOW_QUERY_INVALID);
 
    // We are going to run named graph based local inference
    attachment.setUseLocalInference(true);
 
    // Set the default graph (TBox)
    attachment.setDefGraphForLocalInference(szTBoxName);
 
    // Set the inference option to use parallel inference 
    // with a degree of 4, and RAW format.
    <span class="bold">attachment.setInferenceOption("DOP=4,RAW8=T");</span>
 
    GraphOracleSem graph = new GraphOracleSem(
        oracle, 
        szABoxName, 
        attachment
        );
    DatasetGraphOracleSem dsgos = DatasetGraphOracleSem.createFrom(graph);
    graph.close();
 
    // Invoke create_entailment PL/SQL API
    <span class="bold">dsgos.performInference();</span>
 
    psOut.println("TestNewInference: # of inferred graph " + 
        Long.toString(dsgos.getInferredGraphSize()));
 
    String queryString = 
      " SELECT ?g ?s ?p ?o WHERE {  GRAPH ?g {?s ?p ?o } } " ;
 
    Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
    QueryExecution qexec = QueryExecutionFactory.create(
        query, DataSourceImpl.wrap(dsgos));
    ResultSet results = qexec.execSelect();
 
    ResultSetFormatter.out(psOut, results);
 
    dsgos.close();
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The output of <a href="#BGBDCIID">Example 7-6</a> is as follows.</p>
<pre>
TestNewInference: # of inferred graph 9
 
--------------------------------------------------------------------------------------------------------------------
| g                  | s                  | p                                                 | o                  |
====================================================================================================================
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I2&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C3&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I2&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C2&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I2&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C4&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C3&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C1&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C2&gt; |
| &lt;http://my.com/G1&gt; | &lt;http://my.com/I1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C4&gt; |
| &lt;http://my.com/G2&gt; | &lt;http://my.com/J1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C3&gt; |
| &lt;http://my.com/G2&gt; | &lt;http://my.com/J1&gt; | &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; | &lt;http://my.com/C4&gt; |
--------------------------------------------------------------------------------------------------------------------
</pre>
<p>For information about using OWL inferencing, see <a href="owl_concepts.htm#CIHHIHJI">Section 2.2</a>.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM267" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref383"></a>
<h3 class="sect2"><span class="secnum">7.10.5</span> <a id="sthref384"></a>PelletInfGraph Class Support Deprecated</h3>
<p>The support for the <code>PelletInfGraph</code> class within the Jena Adapter is deprecated. You should instead use the more optimized Oracle/Pellet integration through the PelletDb OWL 2 reasoner for Oracle Database 11<span class="italic">g</span>. (For information about PelletDb, see <code><a href="http://clarkparsia.com/pelletdb/">http://clarkparsia.com/pelletdb/</a></code>.)</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCHIED"></a>
<div id="RDFRM268" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.11</span> Bulk Loading Using the Jena Adapter</h2>
<p>To load thousands to hundreds of thousands of RDF/OWL data files into an Oracle database, you can use the <code>prepareBulk</code> and <code>completeBulk</code> methods in the <code>OracleBulkUpdateHandler</code> Java class to simplify the task.</p>
<p>The <code>addInBulk</code> method in the <code>OracleBulkUpdateHandler</code> class can load triples of a graph or model into an Oracle database in bulk loading style. If the graph or model is a Jena in-memory graph or model, the operation is limited by the size of the physical memory. The <code>prepareBulk</code> method bypasses the Jena in-memory graph or model and takes a direct input stream to an RDF data file, parses the data, and load the triples into an underlying staging table. If the staging table and an accompanying table for storing long literals do not already exist, they are created automatically.</p>
<p>The <code>prepareBulk</code> method can be invoked multiple times to load multiple data files into the same underlying staging table. It can also be invoked concurrently, assuming the hardware system is balanced and there are multiple CPU cores and sufficient I/O capacity.</p>
<p>Once all the data files are processed by the <code>prepareBulk</code> method, you can invoke <code>completeBulk</code> to load all the data into the semantic network.</p>
<p><a href="#BGBIAHIJ">Example 7-7</a> shows how to load all data files in directory <code>dir_1</code> into the underlying staging table. Long literals are supported and will be stored in a separate table. The data files can be compressed using GZIP to save storage space, and the <code>prepareBulk</code> method can detect automatically if a data file is compressed using GZIP or not.</p>
<div id="RDFRM269" class="example">
<p class="titleinexample"><a id="BGBIAHIJ"></a>Example 7-7 Loading Data into the Staging Table (prepareBulk)</p>
<pre>
Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
GraphOracleSem graph = new GraphOracleSem(oracle, szModelName);
 
PrintStream psOut = System.out;

String dirname = "dir_1";
File fileDir = new File(dirname);
String[] szAllFiles = fileDir.list();

// loop through all the files in a directory
for (int idx = 0; idx &lt; szAllFiles.length; idx++) {
  String szIndFileName = dirname + File.separator + szAllFiles[idx];
  psOut.println("process to [ID = " + idx + " ] file " + szIndFileName);
  psOut.flush();
 
  try {
    InputStream is = new FileInputStream(szIndFileName);
    graph.getBulkUpdateHandler().prepareBulk(
        is,                    // input stream
        "http://example.com",  // base URI
        "RDF/XML",             // data file type: can be RDF/XML, N-TRIPLE, etc.
        "SEMTS",               // tablespace
        null,                  // flags
        null,                  // listener
        null                   // staging table name.
        );
    is.close();
  }
  catch (Throwable t) {
    psOut.println("Hit exception " + t.getMessage());
  }
}
 
graph.close();
oracle.dispose();
</pre></div>
<!-- class="example" -->
<p>The code in <a href="#BGBIAHIJ">Example 7-7</a>, starting from creating a new Oracle object and ending with disposing of the Oracle object, can be executed in parallel. Assume there is a quad-core CPU and enough I/O capacity on the database hardware system; you can divide up all the data files and save them into four separate directories: <code>dir_1</code>, <code>dir_2</code>, <code>dir_3</code>, and <code>dir_4</code>. Four Java threads of processes can be started to work on those directories separately and concurrently. (For more information, see <a href="#BGBJHBIE">Section 7.11.1, "Using prepareBulk in Parallel (Multithreaded) Mode"</a>.)</p>
<p>After all data files are processed, you can invoke, just once, the <code>completeBulk</code> method to load the data from staging table into the semantic network, as shown in <a href="#BGBCCJJE">Example 7-8</a>. Triples with long literals will be loaded also.</p>
<div id="RDFRM270" class="example">
<p class="titleinexample"><a id="BGBCCJJE"></a>Example 7-8 Loading Data from the Staging Table into the Semantic Network (completeBulk)</p>
<pre>
graph.getBulkUpdateHandler().completeBulk(
  null,  // flags for invoking SEM_APIS.bulk_load_from_staging_table
  null   // staging table name
);
</pre></div>
<!-- class="example" -->
<p>The <code>prepareBulk</code> method can also take a Jena model as an input data source, in which case triples in that Jena model are loaded into the underlying staging table. For more information, see the Javadoc.</p>
<p><a id="sthref385"></a><a id="sthref386"></a>In addition to loading triples from Jena models and data files, the <code>prepareBulk</code> method supports RDFa, as shown in <a href="#BGBEBAED">Example 7-9</a>. (RDFa is explained in <code><a href="http://www.w3.org/TR/xhtml-rdfa-primer/">http://www.w3.org/TR/xhtml-rdfa-primer/</a></code>.)</p>
<div id="RDFRM271" class="example">
<p class="titleinexample"><a id="BGBEBAED"></a>Example 7-9 Using prepareBulk with RDFa</p>
<pre>
graph.getBulkUpdateHandler().prepareBulk(
  rdfaUrl,   // url to a web page using RDFa
  "SEMTS",   // tablespace
  null,      // flags
  null,      // listener
  null       // staging table name
);
</pre></div>
<!-- class="example" -->
<p>To parse RDFa, the relevant <code>java-rdfa</code> libraries must be included in the classpath. No additional setup or API calls are required. (For information about java-rdfa, see <code><a href="http://www.rootdev.net/maven/projects/java-rdfa/">http://www.rootdev.net/maven/projects/java-rdfa/</a></code> and the other topics there under Project Information.)</p>
<p>Note that if the <code>rdfaUrl</code> is located outside a firewall, you may need to set the following HTTP Proxy-related Java VM properties:</p>
<pre>
-Dhttp.proxyPort=...
-Dhttp.proxyHost=...
</pre>
<p>The preceding examples in this section load triple data into a single graph. Loading quad data that may span across multiple named graphs (such as data in NQUADS format) requires the use of the <code>DatasetGraphOracleSem</code> class. The <code>DatasetGraphOracleSem</code> class does not use the <code>BulkUpdateHandler</code> API, but does provide a similar <code>prepareBulk</code> and <code>completeBulk</code> interface, as shown in <a href="#BGBFBJEF">Example 7-10</a>.</p>
<div id="RDFRM486" class="example">
<p class="titleinexample"><a id="BGBFBJEF"></a>Example 7-10 Loading Quads into a DatasetGraph</p>
<pre>
Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
 
// Can only create DatasetGraphOracleSem from an existing GraphOracleSem
GraphOracleSem graph = new GraphOracleSem(oracle, szModelName);
DatasetGraphOracleSem dataset = DatasetGraphOracleSem.createFrom(graph);
 
// Don't need graph anymore, close it to free resources
graph.close();
 
try {
    InputStream is = new FileInputStream(szFileName);
    // load NQUADS file into a staging table. This file can be gzipp'ed.
    dataset.prepareBulk(
        is,                // input stream
        "http://my.base/", // base URI
        "N-QUADS",         // data file type; can be "TRIG"
        "SEMTS",           // tablespace
        null,              // flags
        null,              // listener
        null,              // staging table name
        false              // truncate staging table before load
    );
    // Load quads from staging table into the dataset
    dataset.completeBulk(
        null, // flags; can be "PARSE PARALLEL_CREATE_INDEX PARALLEL=4 
              //                mbv_method=shadow" on a quad core machine
        null  // staging table name
    );
} 
catch (Throwable t) {
    System.out.println("Hit exception " + t.getMessage());
}
finally {
    dataset.close();
    oracle.dispose();
}
</pre></div>
<!-- class="example" -->
<a id="BGBJHBIE"></a>
<div id="RDFRM487" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.11.1</span> Using prepareBulk in Parallel (Multithreaded) Mode</h3>
<p><a href="#BGBIAHIJ">Example 7-7, "Loading Data into the Staging Table (prepareBulk)"</a> provided a way to load, sequentially, a set of files under a file system directory to an Oracle Database table (staging table). <a href="#BGBDJCHC">Example 7-11</a> loads, concurrently, a set of files to an Oracle table (staging table). The degree of parallelism is controlled by the input parameter <code>iMaxThreads</code>.</p>
<p>On a balanced hardware setup with 4 or more CPU cores, setting <code>iMaxThreads</code> to 8 (or 16) can improve significantly the speed of <code>prepareBulk</code> operation when there are many data files to be processed.</p>
<div id="RDFRM488" class="example">
<p class="titleinexample"><a id="BGBDJCHC"></a>Example 7-11 Using prepareBulk with iMaxThreads</p>
<pre>
public void testPrepareInParallel(String jdbcUrl, String user,
                       String password, String modelName,
                       String lang,
                       String tbs,
                       String dirname,
                       int iMaxThreads,
                       PrintStream psOut)
   throws SQLException, IOException,  InterruptedException
 {
   File dir = new File(dirname);
   File[] files = dir.listFiles();

   // create a set of physical Oracle connections and graph objects
   Oracle[] oracles = new Oracle[iMaxThreads];
   GraphOracleSem[] graphs = new GraphOracleSem[iMaxThreads];
   for (int idx = 0; idx &lt; iMaxThreads; idx++) {
     oracles[idx] = new Oracle(jdbcUrl, user, password);
     graphs[idx] = new GraphOracleSem(oracles[idx], modelName);
   }

   PrepareWorker[] workers = new PrepareWorker[iMaxThreads];
   Thread[] threads = new Thread[iMaxThreads];
   for (int idx = 0; idx &lt; iMaxThreads; idx++) {
     workers[idx] = new PrepareWorker(
         graphs[idx],
         files,
         idx,
         iMaxThreads,
         lang,
         tbs,
         psOut
         );
     threads[idx] = new Thread(workers[idx], workers[idx].getName());
     psOut.println("testPrepareInParallel: PrepareWorker " + idx + " running");
     threads[idx].start();
   }

   psOut.println("testPrepareInParallel: all threads started");

   for (int idx = 0; idx &lt; iMaxThreads; idx++) {
     threads[idx].join();
   }
   for (int idx = 0; idx &lt; iMaxThreads; idx++) {
     graphs[idx].close();
     oracles[idx].dispose();
   }
 }

 static class PrepareWorker implements Runnable
 {
   GraphOracleSem graph = null;
   int idx;
   int threads;
   File[] files = null;
   String lang = null;
   String tbs  = null;
   PrintStream psOut;

   public void run()
   {
     long lStartTime = System.currentTimeMillis();
     for (int idxFile = idx; idxFile &lt; files.length; idxFile += threads) {
       File file = files[idxFile];
       try {
         FileInputStream fis = new FileInputStream(file);
         graph.getBulkUpdateHandler().prepareBulk(
             fis,
             "http://base.com/",
             lang,
             tbs,
             null,                   // flags
             new MyListener(psOut),  // listener
             null                    // table name
             );
         fis.close();
       }
       catch (Exception e) {
         psOut.println("PrepareWorker: thread ["+getName()+"] error "+ e.getMessage());
       }
       psOut.println("PrepareWorker: thread ["+getName()+"] done to "
           + idxFile + ", file = " + file.toString()
           + " in (ms) " + (System.currentTimeMillis() - lStartTime));
     }
   }

   public PrepareWorker(GraphOracleSem graph,
                        File[] files,
                        int idx,
                        int threads,
                        String lang,
                        String tbs,
                        PrintStream psOut)
   {
     this.graph   = graph;
     this.files   = files;
     this.psOut   = psOut;
     this.idx     = idx;
     this.threads = threads;
     this.files   = files;
     this.lang    = lang;
     this.tbs     = tbs ;
   }

   public String getName()
   {
     return "PrepareWorker" + idx;
   }
 } 
 
 static class MyListener implements StatusListener 
 {
   PrintStream m_ps = null;
   public MyListener(PrintStream ps) { m_ps = ps; }
   long lLastBatch = 0;

   public void statusChanged(long count)
   {
     if (count - lLastBatch &gt;= 10000) {
       m_ps.println("process to " + Long.toString(count));
       lLastBatch = count;
     }
   }

   public int illegalStmtEncountered(Node graphNode, Triple triple, long count)
   {
     m_ps.println("hit illegal statement with object " + triple.getObject().toString());
     return 0; // skip it
   }
 }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<div id="RDFRM489" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref387"></a>
<h3 class="sect2"><span class="secnum">7.11.2</span> Handling Illegal Syntax During Data Loading</h3>
<p>You can skip illegal triples and quads when using <code>prepareBulk</code>. This feature is useful if the source RDF data may contain syntax errors. In <a href="#BGBHCIIA">Example 7-12</a>, a customized implementation of the <code>StatusListener</code> interface (defined in package <code>oracle.spatial.rdf.client.jena</code>) is passed as a parameter to prepareBulk. In this example, the <code>illegalStmtEncountered</code> method prints the object field of the illegal triple, and returns 0 so that <code>prepareBulk</code> can skip that illegal triple and move on.</p>
<div id="RDFRM490" class="example">
<p class="titleinexample"><a id="BGBHCIIA"></a>Example 7-12 Skipping Triples with Illegal Syntax</p>
<pre>
....
 
Oracle oracle = new Oracle(jdbcUrl, user, password);
GraphOracleSem graph = new GraphOracleSem(oracle, modelName);
PrintStream psOut = System.err;
 
graph.getBulkUpdateHandler().prepareBulk(
  new FileInputStream(rdfDataFilename),
  "http://base.com/",    // base 
  lang,                  // data format, can be "N-TRIPLES" "RDF/XML" ...
  tbs,                   // tablespace name
  null,                  // flags
  new MyListener(psOut), // call back to show progress and also process illegal triples/quads
  null,                  // tableName, if null use default names
  false                  // truncate existing staging tables
  );
 
 graph.close();
 oracle.dispose();
 .... 
 
 // A customized StatusListener interface implementation
  public class MyListener implements StatusListener
 {
   PrintStream m_ps = null;
   public MyListener(PrintStream ps) { m_ps = ps; }
 
   public void statusChanged(long count)
   {
     // m_ps.println("process to " + Long.toString(count));
   }
 
  public int illegalStmtEncountered(Node graphNode, Triple triple, long count)
  {
    m_ps.println("hit illegal statement with object " + triple.getObject().toString());
    return 0; // skip it
  }
 }
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBCIIBD"></a>
<div id="RDFRM491" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.12</span> Automatic Variable Renaming</h2>
<p>Previously, variable names used in SPARQL queries were passed directly on to Oracle Database as a part of a SQL statement. If the variable names included a SQL or PL/SQL reserved keyword, the query failed to execute. For example, the following SPARQL query used to fail because the word date as a special meaning to the Oracle Database SQL processing engine.</p>
<pre>
select ?date { :event  :happenedOn ?date }
</pre>
<p>Currently, this query does not fail, because a "smart scan" is performed and automatic replacement is done on certain reserved variable names (or variable names that are very long) before the query is sent to Oracle database for execution. The replacement is based on a list of reserved keywords that are stored in the following file embedded in <code>sdordfclient.jar</code>:</p>
<pre>
oracle/spatial/rdf/client/jena/oracle_sem_reserved_keywords.lst
</pre>
<p>This file contains over 100 entries, and you can edit the file to add entries if necessary.</p>
<p>The following are examples of SPARQL queries that use SQL or PL/SQL reserved keywords as variables, and that will succeed because of automatic variable renaming:</p>
<ul>
<li>
<p>Query using <code>SELECT</code> as a variable name:</p>
<pre>
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
select ?SELECT ?z
where
{    ?SELECT foaf:name ?y.
     optional {?SELECT foaf:knows ?z.}
}
</pre></li>
<li>
<p>Query using <code>ARRAY</code> and <code>DATE</code> as variable names:</p>
<pre>
PREFIX x:    &lt;http://example.com#&gt;
construct {
    ?ARRAY x:date ?date .
}
where {
    ?ARRAY x:happenedOn ?date .
}
</pre></li>
</ul>
</div>
<!-- class="sect1" -->
<a id="BGBEEAFC"></a>
<div id="RDFRM492" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.13</span> <a id="sthref388"></a><a id="sthref389"></a>JavaScript Object Notation (JSON) Format Support</h2>
<p>JavaScript Object Notation (JSON) format is supported for SPARQL query responses. JSON data format is simple, compact, and well suited for JavaScript programs.</p>
<p>For example, assume the following Java code snippet, which calls the <code>ResultSetFormatter.outputAsJSON</code> method:</p>
<pre>
Oracle oracle = new Oracle(jdbcUrl, user, password);
 
GraphOracleSem graph = new GraphOracleSem(oracle, modelName);
ModelOracleSem model = new ModelOracleSem(graph);
 
graph.add(new Triple(
                   Node.createURI("http://ds1"),
                   Node.createURI("http://dp1"),
                   Node.createURI("http://do1")
                   )
         );
 
graph.add(new Triple(
                   Node.createURI("http://ds2"),
                   Node.createURI("http://dp2"),
                   Node.createURI("http://do2")
                   )
         );
graph.commitTransaction();
 
Query q = QueryFactory.create("select ?s ?p ?o where {?s ?p ?o}",
                              Syntax.syntaxARQ);
QueryExecution qexec = QueryExecutionFactory.create(q, model);
 
ResultSet results = qexec.execSelect();
<span class="bold">ResultSetFormatter.outputAsJSON(System.out, results);</span>
</pre>
<p>The JSON output is as follows:</p>
<pre>
{
  "head": {
    "vars": [ "s" , "p" , "o" ]
  } ,
  "results": {
    "bindings": [
      {
        "s": { "type": "uri" , "value": "http://ds1" } ,
        "p": { "type": "uri" , "value": "http://dp1" } ,
        "o": { "type": "uri" , "value": "http://do1" }
      } ,
      {
        "s": { "type": "uri" , "value": "http://ds2" } ,
        "p": { "type": "uri" , "value": "http://dp2" } ,
        "o": { "type": "uri" , "value": "http://do2" }
      }
    ]
  }
}
</pre>
<p>The preceding example can be changed as follows to query a remote SPARQL endpoint instead of directly against an Oracle database. (If the remote SPARQL endpoint is outside a firewall, then the HTTP Proxy probably needs to be set.)</p>
<pre>
Query q = QueryFactory.create("select ?s ?p ?o where {?s ?p ?o}",
                              Syntax.syntaxARQ);
QueryExecution qe = QueryExecutionFactory.sparqlService(sparqlURL, q);
 
ResultSet results = qexec.execSelect();
ResultSetFormatter.outputAsJSON(System.out, results);
</pre>
<p>To extend the first example in this section to named graphs, the following code snippet adds two quads to the same Oracle model, executes a named graph-based SPARQL query, and serializes the query output into JSON format:</p>
<pre>
DatasetGraphOracleSem dsgos = DatasetGraphOracleSem.createFrom(graph);
graph.close();
 
dsgos.add(new Quad(Node.createURI("http://g1"),
                   Node.createURI("http://s1"),
                   Node.createURI("http://p1"),
                   Node.createURI("http://o1")
                   )
         );
dsgos.add(new Quad(Node.createURI("http://g2"),
                   Node.createURI("http://s2"),
                   Node.createURI("http://p2"),
                   Node.createURI("http://o2")
                   )
         );
 
Query q1 = QueryFactory.create(
  "select ?g ?s ?p ?o where { GRAPH ?g {?s ?p ?o} }");
 
QueryExecution qexec1 = QueryExecutionFactory.create(q1,
    DataSourceImpl.wrap(dsgos));
 
ResultSet results1 = qexec1.execSelect();
<span class="bold">ResultSetFormatter.outputAsJSON(System.out, results1);</span>
 
dsgos.close();
oracle.dispose();
</pre>
<p>The JSON output is as follows:</p>
<pre>
{
  "head": {
    "vars": [ "g" , "s" , "p" , "o" ]
  } ,
  "results": {
    "bindings": [
      {
        "g": { "type": "uri" , "value": "http://g1" } ,
        "s": { "type": "uri" , "value": "http://s1" } ,
        "p": { "type": "uri" , "value": "http://p1" } ,
        "o": { "type": "uri" , "value": "http://o1" }
      } ,
      {
        "g": { "type": "uri" , "value": "http://g2" } ,
        "s": { "type": "uri" , "value": "http://s2" } ,
        "p": { "type": "uri" , "value": "http://p2" } ,
        "o": { "type": "uri" , "value": "http://o2" }
      }
    ]
  }
}
</pre>
<p>You can also get a JSON response through HTTP against a Joseki-based SPARQL endpoint, as in the following example. Normally, when executing a SPARQL query against a SPARQL Web service endpoint, the <code>Accept request-head</code> field is set to be <code>application/sparql-results+xm</code>l. For JSON output format, replace the <code>Accept request-head</code> field with <code>application/sparql-results+json</code>.</p>
<pre>
http://<span class="italic">hostname</span>:7001/joseki/oracle?query=&lt;URL_ENCODED_SPARQL_QUERY&gt;<span class="bold">&amp;output=json</span>
</pre></div>
<!-- class="sect1" -->
<a id="BGBIACIB"></a>
<div id="RDFRM493" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.14</span> Other Recommendations and Guidelines</h2>
<p>This section contains various recommendations and other information related to SPARQL queries.</p>
<div id="RDFRM494" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref390"></a>
<h3 class="sect2"><span class="secnum">7.14.1</span> BOUND or !BOUND Instead of EXISTS or NOT EXISTS</h3>
<p>For better performance, use <code>BOUND</code> or <code>!BOUND</code> instead of <code>EXISTS</code> or <code>NOT EXISTS</code>.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM495" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref391"></a>
<h3 class="sect2"><span class="secnum">7.14.2</span> SPARQL 1.1 SELECT Expressions</h3>
<p>You can use SPARQL 1.1 SELECT expressions without any significant performance overhead, even if the function is not currently supported within Oracle Database. Examples include the following:</p>
<pre>
-- Quyery using MD5 and SHA1 functions
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
PREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX eg:   &lt;http://biometrics.example/ns#&gt;
SELECT ?name (md5(?name) as ?name_in_md5) (sha1(?email) as ?sha1) 
WHERE 
{ 
  ?x foaf:name  ?name ; eg:email ?email .
}

-- Quyery using CONCAT function
PREFIX foaf:   &lt;http://xmlns.com/foaf/0.1/&gt;
SELECT ( CONCAT(?G, " ", ?S) AS ?name )
WHERE  
{ 
  ?P foaf:givenName ?G ; foaf:surname ?S 
}
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM496" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref392"></a>
<h3 class="sect2"><span class="secnum">7.14.3</span> Syntax Involving Bnodes (Blank Nodes)</h3>
<p>Syntax involving bnodes can be used freely in query patterns. For example, the following bnode-related syntax is supported at the parser level, so each is equivalent to its full triple-query-pattern-based version.</p>
<pre>
:x :q [ :p "v" ] .
 
(1 ?x 3 4) :p "w" .
 
(1 [:p :q] ( 2 ) ) .
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM497" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref393"></a>
<h3 class="sect2"><span class="secnum">7.14.4</span> Limit in the SERVICE Clause</h3>
<p>When writing a SPARQL 1.1 federated query, you can set a limit on returned rows in the subquery inside the SERVICE clause. This can effectively constrain the amount of data to be transported between the local repository and the remote SPARQL endpoint.</p>
<p>For example, the following query specifies <code>limit 100</code> in the subquery in the SERVICE clause:</p>
<pre>
PREFIX : &lt;http://example.com/&gt;
SELECT ?s ?o 
 WHERE 
     { 
       ?s :name "CA"  
       <span class="bold">SERVICE</span> &lt;http://REMOTE_SPARQL_ENDPOINT_HERE&gt;
          {
             select ?s  ?o 
                 {?s :info ?o} 
              <span class="bold">limit 100</span> 
           } 
     }
</pre></div>
<!-- class="sect2" -->
<a id="BGBDDECD"></a>
<div id="RDFRM498" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.14.5</span> OracleGraphWrapperForOntModel Class for Better Performance</h3>
<p>The Jena <code>OntModel</code> class lets you create, modify, and analyze an ontology stored in a Jena model. However, the <code>OntModel</code> implementation is not optimized for semantic data stored in a database. This results in suboptimal performance when using <code>OntModel</code> with an Oracle model. Therefore, the class <code>OracleGraphWrapperForOntModel</code> has been created to alleviate this performance issue.</p>
<p>The <code>OracleGraphWrapperForOntModel</code> class implements the Jena <code>Graph</code> interface and represents a graph backed by an Oracle RDF/OWL model that is meant for use with the Jena <code>OntModel</code> API. The <code>OracleGraphWrapperForOntModel</code> class uses two semantic stores in a hybrid approach for persisting changes and responding to queries. Both semantic stores contain the same data, but one resides in memory while the other resides in the Oracle database.</p>
<p>When queried through <code>OntModel</code>, the <code>OracleGraphWrapperForOntModel</code> graph runs the queries against the in-memory store to improve performance. However, the <code>OracleGraphWrapperForOntModel</code> class persists changes made through <code>OntModel</code>, such as adding or removing classes, by applying changes to both stores.</p>
<p>Due to its hybrid approach, an <code>OracleGraphWrapperForOntModel</code> graph requires that sufficient memory be allocated to the JVM to store a copy of the ontology in memory. In internal experiments, it was found that an ontology with approximately 3 million triples requires 6 or more GB of physical memory.</p>
<p><a href="#BGBCIBHF">Example 7-13</a> shows how to use the <code>OntModel</code> APIs with an existing ontology stored in an Oracle model.</p>
<div id="RDFRM499" class="example">
<p class="titleinexample"><a id="BGBCIBHF"></a>Example 7-13 Using OntModel with Ontology Stored in Oracle Database</p>
<pre>
// Set up connection to Oracle semantic store and the Oracle model
// containing the ontology
Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
GraphOracleSem oracleGraph = new GraphOracleSem(oracle, szModelName);
 
// Create a new hybrid graph using the oracle graph to persist
// changes.  This method will copy all the data from the oracle graph
// into an in-memory graph, which may significantly increase JVM memory
// usage.
Graph hybridGraph = OracleGraphWrapperForOntModel.getInstance(oracleGraph);
 
// Build a model around the hybrid graph and wrap the model with Jena's
// OntModel
Model model = ModelFactory.createModelForGraph(hybridGraph);
OntModel ontModel = ModelFactory.createOntologyModel(ontModelSpec, model);
 
// Perform operations on the ontology
OntClass personClass = ontModel.createClass("&lt;http://someuri/person&gt;");
ontModel.createIndividual(personClass);
 
// Close resources (will also close oracleGraph)!
hybridGraph.close();
ontModel.close();
</pre></div>
<!-- class="example" -->
<p>Note that any <code>OntModel</code> object created using <code>OracleGraphWrapperForOntModel</code> will not reflect changes made to the underlying Oracle model by another process, through a separate <code>OntModel</code>, or through a separate Oracle graph referencing the same underlying model. All changes to an ontology should go through a single <code>OntModel</code> object and its underlying <code>OracleGraphWrapperForOntModel</code> graph until the model or graph have been closed.</p>
<p>If the default in-memory semantic store used by <code>OracleGraphWrapperForOntModel</code> is not sufficient for an ontology and system, the class provides an interface for specifying a custom graph to use as the in-memory store. <a href="#BGBBFEHH">Example 7-14</a> shows how to create an <code>OracleGraphWrapperForOntModel</code> that uses a custom in-memory graph to answer queries from <code>OntModel</code>.</p>
<div id="RDFRM501" class="example">
<p class="titleinexample"><a id="BGBBFEHH"></a>Example 7-14 Using a Custom In-Memory Graph</p>
<pre>
// Set up connection to Oracle semantic store and the Oracle model
// containing the ontology
Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
GraphOracleSem oracleGraph = new GraphOracleSem(oracle, szModelName);
 
// Create a custom in-memory graph to use instead of the default
// Jena in-memory graph for quickly answering OntModel queries.
// Note that this graph does not *need* to be in-memory, but in-memory
// is preferred.
GraphBase queryGraph = new CustomInMemoryGraphImpl();
 
// Create a new hybrid graph using the oracle graph to persist
// changes and the custom in-memory graph to answer queries. 
// Also set the degree of parallelism to use when copying data from
// the oracle graph to the querying graph.
int degreeOfParallelism = 4;
Graph hybridGraph = OracleGraphWrapperForOntModel.getInstance(oracleGraph, queryGraph, degreeOfParallelism);
 
// Build a model and wrap the model with Jena's OntModel
Model model = ModelFactory.createModelForGraph(hybridGraph);
OntModel ontModel = ModelFactory.createOntologyModel(ontModelSpec, model);
 
// Perform operations on the ontology
// ...
 
// Close resources (will close oracleGraph and queryGraph)!
hybridGraph.close();
ontModel.close();
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="CBBCIJAD"></a>
<div id="RDFRM272" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1"><span class="secnum">7.15</span> <a id="sthref394"></a>Example Queries Using the Jena Adapter</h2>
<p>This section includes example queries using the Jena Adapter. Each example is self-contained: it typically creates a model, creates triples, performs a query that may involve inference, displays the result, and drops the model.</p>
<p>This section includes queries that do the following:</p>
<ul>
<li>
<p>Count asserted triples and asserted plus inferred triples in an example "university" ontology, both by referencing the ontology by a URL and by bulk loading the ontology from a local file</p>
</li>
<li>
<p>Run several SPARQL queries using a "family" ontology, including features such as LIMIT, OFFSET, TIMEOUT, DOP (degree of parallelism), ASK, DESCRIBE, CONSTRUCT, GRAPH, ALLOW_DUP (duplicate triples with multiple models), SPARUL (inserting data)</p>
</li>
<li>
<p>Use the ARQ built-in function</p>
</li>
<li>
<p>Use a SELECT cast query</p>
</li>
<li>
<p>Instantiate Oracle Database using OracleConnection</p>
</li>
<li>
<p>Use Oracle Database connection pooling</p>
</li>
</ul>
<p>To run a query, you must do the following:</p>
<ol>
<li>
<p>Include the code in a Java source file. The examples used in this section are supplied in files in the <code>examples</code> directory of the Jena Adapter download.</p>
</li>
<li>
<p>Compile the Java source file. For example:</p>
<pre>
&gt; javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test.java
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>javac</code> and <code>java</code> commands must each be on a single command line.</div>
</li>
<li>
<p>Run the compiled file. For example:</p>
<pre>
&gt; java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
</pre></li>
</ol>
<div id="RDFRM273" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref395"></a>
<h3 class="sect2"><span class="secnum">7.15.1</span> Test.java: Query Family Relationships</h3>
<p><a href="#CBBHGFFA">Example 7-15</a> specifies that John is the father of Mary, and it selects and displays the subject and object in each <code>fatherOf</code> relationship</p>
<div id="RDFRM274" class="example">
<p class="titleinexample"><a id="CBBHGFFA"></a>Example 7-15 Query Family Relationships</p>
<pre>
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.query.*;
public class Test {
 
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
          
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    Model model = ModelOracleSem.createOracleSemModel(
      oracle, szModelName);
 
    model.getGraph().add(Triple.create(
          Node.createURI("http://example.com/John"),
          Node.createURI("http://example.com/fatherOf"),
          Node.createURI("http://example.com/Mary")));
    Query query = QueryFactory.create(
        "select ?f ?k WHERE {?f &lt;http://example.com/fatherOf&gt; ?k .}");
    QueryExecution qexec = QueryExecutionFactory.create(query, model);
    ResultSet results = qexec.execSelect();
    ResultSetFormatter.out(System.out, results, query);
    model.close();
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBHGFFA">Example 7-15</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
 
---------------------------------------------------------
| f                         | k                         |
=========================================================
| &lt;http://example.com/John&gt; | &lt;http://example.com/Mary&gt; |
---------------------------------------------------------
</pre></div>
<!-- class="sect2" -->
<a id="CBBBGIFG"></a>
<div id="RDFRM275" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.15.2</span> Test6.java: Load OWL Ontology and Perform OWLPrime inference</h3>
<p><a href="#CBBGDAED">Example 7-16</a> loads an OWL ontology and performs OWLPrime inference. Note that the OWL ontology is in RDF/XML format, and after it is loaded into Oracle it will be serialized out in N-TRIPLE form. The example also queries for the number of asserted and inferred triples.</p>
<p>The ontology in this example can be retrieved from <code><a href="http://swat.cse.lehigh.edu/onto/univ-bench.owl">http://swat.cse.lehigh.edu/onto/univ-bench.owl</a></code>, and it describes roles, resources, and relationships in a university environment.</p>
<div id="RDFRM276" class="example">
<p class="titleinexample"><a id="CBBGDAED"></a>Example 7-16 Load OWL Ontology and Perform OWLPrime inference</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
public class Test6 {
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    Model model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
        
    // load UNIV ontology
    InputStream in = FileManager.get().open("./univ-bench.owl" );
    model.read(in, null);
    OutputStream os = new FileOutputStream("./univ-bench.nt");
    model.write(os, "N-TRIPLE");
    os.close();
 
    String queryString =
      " SELECT ?subject ?prop ?object WHERE { ?subject ?prop ?object } ";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
    try {
      int iTriplesCount = 0;
      ResultSet results = qexec.execSelect() ;
      for ( ; results.hasNext() ; ) {
        QuerySolution soln = results.nextSolution() ;
        iTriplesCount++;
      }
      System.out.println("Asserted  triples count: " + iTriplesCount);
    } 
    finally { 
      qexec.close() ; 
    }
    
    Attachment attachment = Attachment.createInstance(
        new String[] {}, "OWLPRIME",
        InferenceMaintenanceMode.NO_UPDATE, QueryOptions.DEFAULT);
 
    GraphOracleSem graph = new GraphOracleSem(oracle, szModelName, attachment);
    graph.analyze();
    graph.performInference();
 
    query = QueryFactory.create(queryString) ;
    qexec = QueryExecutionFactory.create(query,new ModelOracleSem(graph)) ;
 
    try {
      int iTriplesCount = 0;
      ResultSet results = qexec.execSelect() ;
      for ( ; results.hasNext() ; ) {
        QuerySolution soln = results.nextSolution() ;
        iTriplesCount++;
      }
      System.out.println("Asserted + Infered triples count: " + iTriplesCount);
    } 
    finally { 
      qexec.close() ; 
    }
    model.close();    
 
    OracleUtils.dropSemanticModel(oracle, szModelName);    
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBGDAED">Example 7-16</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test6.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test6 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
Asserted  triples count: 294
Asserted + Infered triples count: 341
</pre>
<p>Note that this output reflects an older version of the LUBM ontology. The latest version of the ontology has more triples.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM277" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref396"></a>
<h3 class="sect2"><span class="secnum">7.15.3</span> Test7.java: Bulk Load OWL Ontology and Perform OWLPrime inference</h3>
<p><a href="#CBBFBCDB">Example 7-17</a> loads the same OWL ontology as in <a href="#CBBBGIFG">Section 7.15.2</a>, but stored in a local file using Bulk Loader. Ontologies can also be loaded using an incremental and batch loader; these two methods are also listed in the example for completeness.</p>
<div id="RDFRM278" class="example">
<p class="titleinexample"><a id="CBBFBCDB"></a>Example 7-17 Bulk Load OWL Ontology and Perform OWLPrime inference</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.util.*;
import oracle.spatial.rdf.client.jena.*;
 
public class Test7 
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    // in memory Jena Model
    Model model = ModelFactory.createDefaultModel();
    InputStream is = FileManager.get().open("./univ-bench.owl");
    model.read(is, "", "RDF/XML");
    is.close();
 
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem modelDest = ModelOracleSem.createOracleSemModel(oracle, 
szModelName);
 
    GraphOracleSem g = modelDest.getGraph();
    g.dropApplicationTableIndex();
 
    int method = 2; // try bulk loader
    String tbs = "SYSAUX"; // can be customized
    if (method == 0) {
      System.out.println("start incremental");
      modelDest.add(model);
      System.out.println("end size " + modelDest.size());
    }
    else if (method == 1) {
      System.out.println("start batch load");
      g.getBulkUpdateHandler().addInBatch(
          GraphUtil.findAll(model.getGraph()), tbs);
      System.out.println("end size " + modelDest.size());
    }
    else {
      System.out.println("start bulk load");
      g.getBulkUpdateHandler().addInBulk(
          GraphUtil.findAll(model.getGraph()), tbs);
      System.out.println("end size " + modelDest.size());
    }
    g.rebuildApplicationTableIndex();
 
    long lCount = g.getCount(Triple.ANY);
    System.out.println("Asserted  triples count: " + lCount);
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBFBCDB">Example 7-17</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test7.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test7 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
start bulk load
end size 293
Asserted  triples count: 293
</pre>
<p>Note that this output reflects an older version of the LUBM ontology. The latest version of the ontology has more triples.</p>
</div>
<!-- class="sect2" -->
<div id="RDFRM279" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref397"></a>
<h3 class="sect2"><span class="secnum">7.15.4</span> Test8.java: SPARQL OPTIONAL Query</h3>
<p><a href="#CBBDCIJJ">Example 7-18</a> shows a SPARQL OPTIONAL query. It inserts triples that postulate the following:</p>
<ul>
<li>
<p>John is a parent of Mary.</p>
</li>
<li>
<p>John is a parent of Jack.</p>
</li>
<li>
<p>Mary is a parent of Jill.</p>
</li>
</ul>
<p>It then finds parent-child relationships, optionally including any grandchild (gkid) relationships.</p>
<div id="RDFRM280" class="example">
<p class="titleinexample"><a id="CBBDCIJJ"></a>Example 7-18 SPARQL OPTIONAL Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
 
public class Test8 
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, 
szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(
          Node.createURI("u:John"), Node.createURI("u:parentOf"), 
Node.createURI("u:Mary")));
    g.add(Triple.create(
          Node.createURI("u:John"), Node.createURI("u:parentOf"), 
Node.createURI("u:Jack")));
    g.add(Triple.create(
          Node.createURI("u:Mary"), Node.createURI("u:parentOf"), 
Node.createURI("u:Jill")));
        
    String queryString =
  " SELECT ?s ?o ?gkid " +
  " WHERE { ?s &lt;u:parentOf&gt; ?o . <span class="bold">OPTIONAL</span> {?o &lt;u:parentOf&gt; ?gkid }} ";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
    try {
      int iMatchCount = 0;
      ResultSet results = qexec.execSelect() ;
      ResultSetFormatter.out(System.out, results, query);
    } 
    finally { 
      qexec.close() ; 
    }
    model.close();    
 
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBDCIJJ">Example 7-18</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test8.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test8 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
----------------------------------
| s        | o        | gkid     |
==================================
| &lt;u:John&gt; | &lt;u:Mary&gt; | &lt;u:Jill&gt; |
| &lt;u:Mary&gt; | &lt;u:Jill&gt; |          |
| &lt;u:John&gt; | &lt;u:Jack&gt; |          |
---------------------------------- 
</pre></div>
<!-- class="sect2" -->
<a id="CBBCIEDH"></a>
<div id="RDFRM281" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.15.5</span> Test9.java: SPARQL Query with LIMIT and OFFSET</h3>
<p><a href="#CBBJFJFB">Example 7-19</a> shows a SPARQL query with LIMIT and OFFSET. It inserts triples that postulate the following:</p>
<ul>
<li>
<p>John is a parent of Mary.</p>
</li>
<li>
<p>John is a parent of Jack.</p>
</li>
<li>
<p>Mary is a parent of Jill.</p>
</li>
</ul>
<p>It then finds one parent-child relationship (LIMIT 1), skipping the first two parent-child relationships encountered (OFFSET 2), and optionally includes any grandchild (gkid) relationships for the one found.</p>
<div id="RDFRM282" class="example">
<p class="titleinexample"><a id="CBBJFJFB"></a>Example 7-19 SPARQL Query with LIMIT and OFFSET</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
public class Test9 
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, 
szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"),
                    Node.createURI("u:Mary")));
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"),
                    Node.createURI("u:Jack")));
    g.add(Triple.create(Node.createURI("u:Mary"), Node.createURI("u:parentOf"),              
                    Node.createURI("u:Jill")));
        
    String queryString =
      " SELECT ?s ?o ?gkid " +
      " WHERE { ?s &lt;u:parentOf&gt; ?o . <span class="bold">OPTIONAL</span> {?o &lt;u:parentOf&gt; ?gkid }} " +
      " <span class="bold">LIMIT 1 OFFSET 2</span>";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
    int iMatchCount = 0;
    ResultSet results = qexec.execSelect() ;
    ResultSetFormatter.out(System.out, results, query);
    qexec.close() ; 
    model.close();    
 
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBJFJFB">Example 7-19</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test9.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test9 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
------------------------------
| s        | o        | gkid |
==============================
| &lt;u:John&gt; | &lt;u:Jack&gt; |      |
------------------------------ 
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM283" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref398"></a>
<h3 class="sect2"><span class="secnum">7.15.6</span> Test10.java: SPARQL Query with TIMEOUT and DOP</h3>
<p><a href="#CBBECFAE">Example 7-20</a> shows the SPARQL query from <a href="#CBBCIEDH">Section 7.15.5</a> with additional features, including a timeout setting (TIMEOUT=1, in seconds) and parallel execution setting (DOP=4).</p>
<div id="RDFRM284" class="example">
<p class="titleinexample"><a id="CBBECFAE"></a>Example 7-20 SPARQL Query with TIMEOUT and DOP</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
 
public class Test10 {
  public static void main(String[] args) throws Exception  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                            Node.createURI("u:Mary")));
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Jack")));
    g.add(Triple.create(Node.createURI("u:Mary"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Jill")));
    String queryString =
        " PREFIX ORACLE_SEM_FS_NS: &lt;http://oracle.com/semtech#<span class="bold">dop=4,timeout=1</span>&gt; " 
      + " SELECT ?s ?o ?gkid WHERE { ?s &lt;u:parentOf&gt; ?o . " 
      + " OPTIONAL {?o &lt;u:parentOf&gt; ?gkid }} "
      + " LIMIT 1 OFFSET 2";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
    int iMatchCount = 0;
    ResultSet results = qexec.execSelect() ;
    ResultSetFormatter.out(System.out, results, query);
    qexec.close() ; 
    model.close();    
 
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBECFAE">Example 7-20</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test10.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test10 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
------------------------------
| s        | o        | gkid |
==============================
| &lt;u:Mary&gt; | &lt;u:Jill&gt; |      |
------------------------------
</pre></div>
<!-- class="sect2" -->
<a id="BGBBJFJC"></a>
<div id="RDFRM285" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2"><span class="secnum">7.15.7</span> Test11.java: Query Involving Named Graphs</h3>
<p><a href="#CBBDDEJG">Example 7-21</a> shows a query involving named graphs. It involves a default graph that has information about named graph URIs and their publishers. The query finds graph names, their publishers, and within each named graph finds the mailbox value using the <code>foaf:mbox</code> predicate.</p>
<div id="RDFRM286" class="example">
<p class="titleinexample"><a id="CBBDDEJG"></a>Example 7-21 Named Graph Based Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.sparql.core.*;
import com.hp.hpl.jena.query.*;
import oracle.spatial.rdf.client.jena.*;
 
public class Test11
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    GraphOracleSem graph = new GraphOracleSem(oracle, szModelName);
    DatasetGraphOracleSem dataset = DatasetGraphOracleSem.createFrom(graph);
    
    // don't need the GraphOracleSem anymore, release resources
    graph.close();
    
    // add data to the default graph
    dataset.add(new Quad(
          Quad.defaultGraphIRI, // specifies default graph
          Node.createURI("http://example.org/bob"),
          Node.createURI("http://purl.org/dc/elements/1.1/publisher"),
          Node.createLiteral("Bob Hacker")));
    dataset.add(new Quad(
          Quad.defaultGraphIRI, // specifies default graph
          Node.createURI("http://example.org/alice"),
          Node.createURI("http://purl.org/dc/elements/1.1/publisher"),
          Node.createLiteral("alice Hacker")));
    
    // add data to the bob named graph
    dataset.add(new Quad(
          Node.createURI("http://example.org/bob"), // graph name
          Node.createURI("urn:bob"),
          Node.createURI("http://xmlns.com/foaf/0.1/name"),
          Node.createLiteral("Bob")));
    dataset.add(new Quad(
          Node.createURI("http://example.org/bob"), // graph name
          Node.createURI("urn:bob"),
          Node.createURI("http://xmlns.com/foaf/0.1/mbox"),
          Node.createURI("mailto:bob@example")));
    
    // add data to the alice named graph
    dataset.add(new Quad(
          Node.createURI("http://example.org/alice"), // graph name
          Node.createURI("urn:alice"),
          Node.createURI("http://xmlns.com/foaf/0.1/name"),
          Node.createLiteral("Alice")));
    dataset.add(new Quad(
          Node.createURI("http://example.org/alice"), // graph name
          Node.createURI("urn:alice"),
          Node.createURI("http://xmlns.com/foaf/0.1/mbox"),
          Node.createURI("mailto:alice@example")));
    
    DataSource ds = DatasetFactory.create(dataset);
    
    String queryString =  
          " PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt; "
        + " PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt; "
        + " SELECT ?who ?graph ?mbox "
        + " FROM NAMED &lt;http://example.org/alice&gt; "
        + " FROM NAMED &lt;http://example.org/bob&gt; "
        + " WHERE "
        + " { " 
        + "    ?graph dc:publisher ?who . "
        + "    GRAPH ?graph { ?x foaf:mbox ?mbox } "
        + " } ";
    
    Query query = QueryFactory.create(queryString);
    QueryExecution qexec = QueryExecutionFactory.create(query, ds);
    
    ResultSet results = qexec.execSelect();
    ResultSetFormatter.out(System.out, results, query);
    
    qexec.close();
    dataset.close();
    
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBDDEJG">Example 7-21</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test11.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test11 jdbc:oracle:thin:@localhost:1521:orcl scott &lt;password-for-scott&gt; M1
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM287" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref399"></a>
<h3 class="sect2"><span class="secnum">7.15.8</span> Test12.java: SPARQL ASK Query</h3>
<p><a href="#CBBCFIAJ">Example 7-22</a> shows a SPARQL ASK query. It inserts a triple that postulates that John is a parent of Mary. It then finds whether John is a parent of Mary.</p>
<div id="RDFRM288" class="example">
<p class="titleinexample"><a id="CBBCFIAJ"></a>Example 7-22 SPARQL ASK Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
public class Test12
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, 
          szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Mary")));
    String queryString = " <span class="bold">ASK</span> { &lt;u:John&gt; &lt;u:parentOf&gt; &lt;u:Mary&gt; } ";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
    boolean b = qexec.execAsk();
    System.out.println("ask result = " + ((b)?"TRUE":"FALSE"));
    qexec.close() ; 
    
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBCFIAJ">Example 7-22</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test12.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test12 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
ask result = TRUE
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM289" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref400"></a>
<h3 class="sect2"><span class="secnum">7.15.9</span> Test13.java: SPARQL DESCRIBE Query</h3>
<p><a href="#CBBCDBJH">Example 7-23</a> shows a SPARQL DESCRIBE query. It inserts triples that postulate the following:</p>
<ul>
<li>
<p>John is a parent of Mary.</p>
</li>
<li>
<p>John is a parent of Jack.</p>
</li>
<li>
<p>Amy is a parent of Jack.</p>
</li>
</ul>
<p>It then finds all relationships that involve any parents of Jack.</p>
<div id="RDFRM290" class="example">
<p class="titleinexample"><a id="CBBCDBJH"></a>Example 7-23 SPARQL DESCRIBE Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
 
public class Test13
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                    Node.createURI("u:Mary")));
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
 Node.createURI("u:Jack")));
    g.add(Triple.create(Node.createURI("u:Amy"), Node.createURI("u:parentOf"), 
 Node.createURI("u:Jack")));
    String queryString = " <span class="bold">DESCRIBE</span> ?x WHERE {?x &lt;u:parentOf&gt; &lt;u:Jack&gt;}";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
    Model m = qexec.execDescribe();
    System.out.println("describe result = " + m.toString());
 
    qexec.close() ; 
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBCDBJH">Example 7-23</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test13.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test13 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
describe result = &lt;ModelCom   {u:Amy @u:parentOf u:Jack; u:John @u:parentOf u:Jack; u:John @u:parentOf u:Mary} | &gt;
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM291" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref401"></a>
<h3 class="sect2"><span class="secnum">7.15.10</span> Test14.java: SPARQL CONSTRUCT Query</h3>
<p><a href="#CBBEAHCH">Example 7-24</a> shows a SPARQL CONSTRUCT query. It inserts triples that postulate the following:</p>
<ul>
<li>
<p>John is a parent of Mary.</p>
</li>
<li>
<p>John is a parent of Jack.</p>
</li>
<li>
<p>Amy is a parent of Jack.</p>
</li>
<li>
<p>Each parent loves all of his or her children.</p>
</li>
</ul>
<p>It then constructs an RDF graph with information about who loves whom.</p>
<div id="RDFRM292" class="example">
<p class="titleinexample"><a id="CBBEAHCH"></a>Example 7-24 SPARQL CONSTRUCT Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
 
public class Test14
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
 Node.createURI("u:Mary")));
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
 Node.createURI("u:Jack")));
    g.add(Triple.create(Node.createURI("u:Amy"), Node.createURI("u:parentOf"), 
 Node.createURI("u:Jack")));
    String queryString = " <span class="bold">CONSTRUCT</span> { ?s &lt;u:loves&gt; ?o } WHERE {?s &lt;u:parentOf&gt; ?o}";
 
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
    Model m = qexec.execConstruct();
    System.out.println("Construct result = " + m.toString());
 
    qexec.close() ; 
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBEAHCH">Example 7-24</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test14.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test14 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
Construct result = &lt;ModelCom   {u:Amy @u:loves u:Jack; u:John @u:loves u:Jack; u:John @u:loves u:Mary} | &gt;
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM293" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref402"></a>
<h3 class="sect2"><span class="secnum">7.15.11</span> Test15.java: Query Multiple Models and Specify "Allow Duplicates"</h3>
<p><a href="#CBBDECHB">Example 7-25</a> queries multiple models and uses the "allow duplicates" option. It inserts triples that postulate the following:</p>
<ul>
<li>
<p>John is a parent of Jack (in Model 1).</p>
</li>
<li>
<p>Mary is a parent of Jack (in Model 2).</p>
</li>
<li>
<p>Each parent loves all of his or her children.</p>
</li>
</ul>
<p>It then finds out who loves whom. It searches both models and allows for the possibility of duplicate triples in the models (although there are no duplicates in this example).</p>
<div id="RDFRM294" class="example">
<p class="titleinexample"><a id="CBBDECHB"></a>Example 7-25 Query Multiple Models and Specify "Allow Duplicates"</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
 
public class Test15
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName1 = args[3];
    String szModelName2 = args[4];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model1 = ModelOracleSem.createOracleSemModel(oracle, szModelName1);
    model1.getGraph().add(Triple.create(Node.createURI("u:John"), 
                     Node.createURI("u:parentOf"), Node.createURI("u:Jack")));
    model1.close();
 
    ModelOracleSem model2 = ModelOracleSem.createOracleSemModel(oracle, szModelName2);
    model2.getGraph().add(Triple.create(Node.createURI("u:Mary"), 
                     Node.createURI("u:parentOf"), Node.createURI("u:Jack")));
    model2.close();
 
    String[] modelNamesList = {szModelName2};
    String[] rulebasesList  = {};
    Attachment attachment = Attachment.createInstance(modelNamesList, rulebasesList, 
              InferenceMaintenanceMode.NO_UPDATE,
              <span class="bold">QueryOptions.ALLOW_QUERY_VALID_AND_DUP</span>);
 
    GraphOracleSem graph = new GraphOracleSem(oracle, szModelName1, attachment);
    ModelOracleSem model = new ModelOracleSem(graph);
 
    String queryString = " CONSTRUCT { ?s &lt;u:loves&gt; ?o } WHERE {?s &lt;u:parentOf&gt; ?o}";
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
    Model m = qexec.execConstruct();
    System.out.println("Construct result = " + m.toString());
 
    qexec.close() ; 
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName1);
    OracleUtils.dropSemanticModel(oracle, szModelName2);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBDECHB">Example 7-25</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test15.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test15 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1 M2
Construct result = &lt;ModelCom   {u:Mary @u:loves u:Jack; u:John @u:loves u:Jack} | &gt;
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM295" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref403"></a>
<h3 class="sect2"><span class="secnum">7.15.12</span> Test16.java: SPARQL Update</h3>
<p><a href="#CBBFJAHG">Example 7-26</a> inserts two triples into a model.</p>
<div id="RDFRM296" class="example">
<p class="titleinexample"><a id="CBBFJAHG"></a>Example 7-26 SPARQL Update</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
 
public class Test16
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    GraphOracleSem g = model.getGraph();
    String insertString =  
      " PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt; "         + 
      " INSERT DATA "                                           +
      " { &lt;http://example/book3&gt; dc:title    \"A new book\" ; " +
      "                         dc:creator  \"A.N.Other\" . "   + 
      " }   ";
 
    UpdateAction.parseExecute(insertString,  model);
    ExtendedIterator ei = GraphUtil.findAll(g);
    while (ei.hasNext()) {
      System.out.println("Triple " + ei.next().toString());
    }
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBFJAHG">Example 7-26</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test16.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test16 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
Triple http://example/book3 @dc:title "A new book"
Triple http://example/book3 @dc:creator "A.N.Other"
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM297" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref404"></a>
<h3 class="sect2"><span class="secnum">7.15.13</span> Test17.java: SPARQL Query with ARQ Built-In Functions</h3>
<p><a href="#CBBBFAHI">Example 7-27</a> inserts data about two books, and it displays the book titles in all uppercase characters and the length of each title string.</p>
<div id="RDFRM298" class="example">
<p class="titleinexample"><a id="CBBBFAHI"></a>Example 7-27 SPARQL Query with ARQ Built-In Functions</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
 
public class Test17 {
  public static void main(String[] args) throws Exception  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, szModelName);
    GraphOracleSem g = model.getGraph();
    String insertString =  
      " PREFIX dc: &lt;http://purl.org/dc/elements/1.1/&gt; "         + 
      " INSERT DATA "                                           +
      " { &lt;http://example/book3&gt; dc:title    \"A new book\" ; " +
      "                         dc:creator  \"A.N.Other\" . "   + 
      "   &lt;http://example/book4&gt; dc:title    \"Semantic Web Rocks\" ; " +
      "                         dc:creator  \"TB\" . "   + 
      " }   ";
 
    UpdateAction.parseExecute(insertString,  model);
    String queryString = "PREFIX  dc:   &lt;http://purl.org/dc/elements/1.1/&gt; " +
      " PREFIX  fn: &lt;http://www.w3.org/2005/xpath-functions#&gt; " + 
      " SELECT ?subject (<span class="bold">fn:upper-case</span>(?object) as ?object1)  " + 
      "                 (<span class="bold">fn:string-length</span>(?object) as ?strlen) " + 
      " WHERE { ?subject dc:title ?object } " 
      ;
    Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
    QueryExecution qexec = QueryExecutionFactory.create(query, model);
    ResultSet results = qexec.execSelect();
    ResultSetFormatter.out(System.out, results, query);
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBBFAHI">Example 7-27</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test17.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test17 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
----------------------------------------------------------
| subject                | object1              | strlen |
==========================================================
| &lt;http://example/book3&gt; | "A NEW BOOK"         | 10     |
| &lt;http://example/book4&gt; | "SEMANTIC WEB ROCKS" | 18     |
----------------------------------------------------------
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM299" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref405"></a>
<h3 class="sect2"><span class="secnum">7.15.14</span> Test18.java: SELECT Cast Query</h3>
<p><a href="#CBBBBIJG">Example 7-28</a> "converts" two Fahrenheit temperatures (18.1 and 32.0) to Celsius temperatures.</p>
<div id="RDFRM300" class="example">
<p class="titleinexample"><a id="CBBBBIJG"></a>Example 7-28 SELECT Cast Query</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import oracle.spatial.rdf.client.jena.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
 
public class Test18 {
  public static void main(String[] args) throws Exception  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
    
    Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd);
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, 
szModelName);
    GraphOracleSem g = model.getGraph();
    String insertString =  
      " PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; " +
      " INSERT DATA "                                     +
      " { &lt;u:Object1&gt; &lt;u:temp&gt;    \"18.1\"^^xsd:float ; " +
      "               &lt;u:name&gt;    \"Foo... \" . "         + 
      "   &lt;u:Object2&gt; &lt;u:temp&gt;    \"32.0\"^^xsd:float ; " +
      "               &lt;u:name&gt;    \"Bar... \" . "         + 
      " }   ";
 
    UpdateAction.parseExecute(insertString,  model);
    String queryString = 
      " PREFIX  fn: &lt;http://www.w3.org/2005/xpath-functions#&gt; " + 
      " SELECT ?subject ((?temp - 32.0)*5/9 as ?celsius_temp) " +
      "WHERE { ?subject &lt;u:temp&gt; ?temp } " 
      ;
    Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
    QueryExecution qexec = QueryExecutionFactory.create(query, model);
    ResultSet results = qexec.execSelect();
    ResultSetFormatter.out(System.out, results, query);
 
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBBBIJG">Example 7-28</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test18.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test18 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
------------------------------------------------------------------------
| subject     | celsius_temp                                           |
========================================================================
| &lt;u:Object1&gt; | "-7.7222223"^^&lt;http://www.w3.org/2001/XMLSchema#float&gt; |
| &lt;u:Object2&gt; | "0.0"^^&lt;http://www.w3.org/2001/XMLSchema#float&gt;        |
------------------------------------------------------------------------
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM301" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref406"></a>
<h3 class="sect2"><span class="secnum">7.15.15</span> Test19.java: Instantiate Oracle Database Using OracleConnection</h3>
<p><a href="#CBBFBDEJ">Example 7-29</a> shows a different way to instantiate an Oracle object using a given <code>OracleConnection</code> object. (In a J2EE Web application, users can normally get an <code>OracleConnection</code> object from a J2EE data source.)</p>
<div id="RDFRM302" class="example">
<p class="titleinexample"><a id="CBBFBDEJ"></a>Example 7-29 Instantiate Oracle Database Using OracleConnection</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
import oracle.spatial.rdf.client.jena.*;
import oracle.jdbc.pool.*;
import oracle.jdbc.*;
        
public class Test19 {
  public static void main(String[] args) throws Exception {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
 
    OracleDataSource ds = new OracleDataSource();
    ds.setURL(szJdbcURL);
    ds.setUser(szUser);
    ds.setPassword(szPasswd);
    OracleConnection conn = (OracleConnection) ds.getConnection();
    Oracle oracle = new Oracle(conn);
 
    ModelOracleSem model = ModelOracleSem.createOracleSemModel(oracle, 
szModelName);
    GraphOracleSem g = model.getGraph();
 
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Mary")));
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"),   
                        Node.createURI("u:Jack")));
    g.add(Triple.create(Node.createURI("u:Mary"), Node.createURI("u:parentOf"), 
         Node.createURI("u:Jill")));
    String queryString =
       " SELECT ?s ?o  WHERE { ?s &lt;u:parentOf&gt; ?o .} ";
    Query query = QueryFactory.create(queryString) ;
    QueryExecution qexec = QueryExecutionFactory.create(query, model) ;
 
    ResultSet results = qexec.execSelect() ;
    ResultSetFormatter.out(System.out, results, query);
    qexec.close() ; 
    model.close();    
    OracleUtils.dropSemanticModel(oracle, szModelName);
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBFBDEJ">Example 7-29</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test19.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test19 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
-----------------------
| s        | o        |
=======================
| &lt;u:John&gt; | &lt;u:Mary&gt; |
| &lt;u:John&gt; | &lt;u:Jack&gt; |
| &lt;u:Mary&gt; | &lt;u:Jill&gt; |
-----------------------
</pre></div>
<!-- class="sect2" -->
<div id="RDFRM303" class="sect2"><!-- infolevel="all" infotype="General" --><a id="sthref407"></a>
<h3 class="sect2"><span class="secnum">7.15.16</span> Test20.java: Oracle Database Connection Pooling</h3>
<p><a href="#CBBGHEEI">Example 7-30</a> uses Oracle Database connection pooling.</p>
<div id="RDFRM304" class="example">
<p class="titleinexample"><a id="CBBGHEEI"></a>Example 7-30 Oracle Database Connection Pooling</p>
<pre>
import java.io.*;
import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.util.iterator.*;
import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.update.*;
import oracle.spatial.rdf.client.jena.*;
import oracle.jdbc.pool.*;
import oracle.jdbc.*;
 
public class Test20
{
  public static void main(String[] args) throws Exception
  {
    String szJdbcURL = args[0];
    String szUser    = args[1];
    String szPasswd  = args[2];
    String szModelName = args[3];
 
    // test with connection properties (taken from some example)
    java.util.Properties prop = new java.util.Properties();
    prop.setProperty("MinLimit", "2");     // the cache size is 2 at least 
    prop.setProperty("MaxLimit", "10");
    prop.setProperty("InitialLimit", "2"); // create 2 connections at startup
    prop.setProperty("InactivityTimeout", "1800");    //  seconds
    prop.setProperty("AbandonedConnectionTimeout", "900");  //  seconds
    prop.setProperty("MaxStatementsLimit", "10");
    prop.setProperty("PropertyCheckInterval", "60"); // seconds
 
    System.out.println("Creating OraclePool");
    OraclePool op = new OraclePool(szJdbcURL, szUser, szPasswd, prop, 
               "OracleSemConnPool");
    System.out.println("Done creating OraclePool");
 
    // grab an Oracle and do something with it
    System.out.println("Getting an Oracle from OraclePool");
    Oracle oracle = op.getOracle();
    System.out.println("Done");
    System.out.println("Is logical connection:" +
        oracle.getConnection().isLogicalConnection());
    GraphOracleSem g = new GraphOracleSem(oracle, szModelName);
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Mary")));
    g.close();
    // return the Oracle back to the pool
    oracle.dispose();
    
    // grab another Oracle and do something else 
    System.out.println("Getting an Oracle from OraclePool");
    oracle = op.getOracle();
    System.out.println("Done");
    System.out.println("Is logical connection:" +
        oracle.getConnection().isLogicalConnection());
    g = new GraphOracleSem(oracle, szModelName);
    g.add(Triple.create(Node.createURI("u:John"), Node.createURI("u:parentOf"), 
                        Node.createURI("u:Jack")));
    g.close();
    
    OracleUtils.dropSemanticModel(oracle, szModelName); 
    
    // return the Oracle back to the pool
    oracle.dispose();
  }
}
</pre></div>
<!-- class="example" -->
<p>The following are the commands to compile and run <a href="#CBBGHEEI">Example 7-30</a>, as well as the expected output of the <code>java</code> command.</p>
<pre>
javac -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:/slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar Test20.java
java -classpath ./:./jena-2.6.4.jar:./sdordfclient.jar:./ojdbc6.jar:./slf4j-api-1.5.8.jar:./slf4j-log4j12-1.5.8.jar:./arq-2.8.8.jar:./xercesImpl-2.7.1.jar:./iri-0.8.jar:./icu4j-3.4.4.jar:./log4j-1.2.14.jar  Test20 jdbc:oracle:thin:@localhost:1521:orcl scott <span class="italic">&lt;password-for-scott&gt;</span> M1
Creating OraclePool
Done creating OraclePool
Getting an Oracle from OraclePool
Done
Is logical connection:true
Getting an Oracle from OraclePool
Done
Is logical connection:true
</pre></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BGBIIABE"></a>
<div id="RDFRM502" class="sect1">
<h2 class="sect1"><span class="secnum">7.16</span> <a id="sthref408"></a>SPARQL Gateway and Semantic Data</h2>
<p>SPARQL Gateway is a J2EE web application that is included with the Jena Adapter for Oracle Database. It is designed to make semantic data (RDF/OWL/SKOS) easily available to applications that operate on relational and XML data, including Oracle Business Intelligence Enterprise Edition (OBIEE) 11<span class="italic">g</span>.</p>
<p>This section includes the following major topics:</p>
<ul>
<li>
<p><a href="#BGBECHHI">Section 7.16.1, "SPARQL Gateway Features and Benefits Overview"</a></p>
</li>
<li>
<p><a href="#BGBBGBJE">Section 7.16.2, "Installing and Configuring SPARQL Gateway"</a></p>
</li>
<li>
<p><a href="#BGBIHIII">Section 7.16.3, "Using SPARQL Gateway with Semantic Data"</a></p>
</li>
<li>
<p><a href="#BGBJIFHA">Section 7.16.4, "Customizing the Default XSLT File"</a></p>
</li>
<li>
<p><a href="#BGBGFIGH">Section 7.16.5, "Using the SPARQL Gateway Java API"</a></p>
</li>
<li>
<p><a href="#BGBGAGEJ">Section 7.16.6, "Using the SPARQL Gateway Graphical Web Interface"</a></p>
</li>
<li>
<p><a href="#BGBBIDHD">Section 7.16.7, "Using SPARQL Gateway as an XML Data Source to OBIEE"</a></p>
</li>
</ul>
<a id="BGBECHHI"></a>
<div id="RDFRM503" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.1</span> <a id="sthref409"></a>SPARQL Gateway Features and Benefits Overview</h3>
<p>SPQRQL Gateway handles several challenges in exposing semantic data to a non-semantic application:</p>
<ul>
<li>
<p>RDF syntax, SPARQL query syntax and SPARQL protocol must be understood.</p>
</li>
<li>
<p>The SPARQL query response syntax must be understood.</p>
</li>
<li>
<p>A transformation must convert a SPARQL query response to something that the application can consume.</p>
</li>
</ul>
<p>To address these challenges, SPARQL Gateway manages SPARQL queries and XSLT operations, executes SPARQL queries against any arbitrary standard-compliant SPARQL endpoints, and performs necessary XSL transformations before passing the response back to applications. Applications can then consume semantic data as if it is coming from an existing data source.</p>
<p>Different triple stores or quad stores often have different capabilities. For example, the SPARQL endpoint supported by Oracle Database, with the Jena Adapter and Joseki, allows parallel execution, query timeout, dynamic sampling, result cache, and other features, in addition to the core function of parsing and answering a given standard-compliant SPARQL query. However, these features may not be available from another given semantic data store.</p>
<p>With the Oracle Semantic Technologies SPARQL Gateway, you get certain highly desirable capabilities, such as the ability to set a timeout on a long running query and the ability to get partial results from a complex query in a given amount of time. Waiting indefinitely for a query to finish is a challenge for end users, as is an application with a response time constraint. SPARQL Gateway provides both timeout and best effort query functions on top of a SPARQL endpoint. This effectively removes some uncertainty from consuming semantic data through SPARQL query executions. (See <a href="#BGBEIJJE">Section 7.16.3.2, "Specifying a Timeout Value"</a> and <a href="#BGBJJJAD">Section 7.16.3.3, "Specifying Best Effort Query Execution"</a>.)</p>
</div>
<!-- class="sect2" -->
<a id="BGBBGBJE"></a>
<div id="RDFRM504" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.2</span> <a id="sthref410"></a>Installing and Configuring SPARQL Gateway</h3>
<p>To install and configure SPARQL Gateway, follow these major steps, which are explained in subsections that follow:</p>
<ol>
<li>
<p><a href="#BGBFDGCI">Download the Jena Adapter .zip File (if Not Already Done)</a></p>
</li>
<li>
<p><a href="#BGBFECED">Deploy SPARQL Gateway in WebLogic Server</a></p>
</li>
<li>
<p><a href="#BGBHHDCI">Modify Proxy Settings, if Necessary</a></p>
</li>
<li>
<p><a href="#BGBHBEFE">Configure the OracleSGDS Data Source, if Necessary</a></p>
</li>
<li>
<p><a href="#BGBGDHIJ">Add and Configure the SparqlGatewayAdminGroup Group, if Desired</a></p>
</li>
</ol>
<a id="BGBFDGCI"></a>
<div id="RDFRM505" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.2.1</span> Download the Jena Adapter .zip File (if Not Already Done)</h4>
<p>If you have not already done so, download the Jena Adapter (<code>jena_adaptor_for_release11.2.0.3.zip</code>) from the Oracle Database Semantic Technologies page and unzip it into a temporary directory, as explained in <a href="#DAIBDFGG">Section 7.1</a>.</p>
<p>Note that the SPARQL Gateway Java class implementations are embedded in <code>sdordfclient.jar</code> (see <a href="#BGBGFIGH">Section 7.16.5, "Using the SPARQL Gateway Java API"</a>).</p>
</div>
<!-- class="sect3" -->
<a id="BGBFECED"></a>
<div id="RDFRM506" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.2.2</span> Deploy SPARQL Gateway in WebLogic Server</h4>
<p>Deploy SPARQL Gateway in Oracle WebLogic Server, as follows:</p>
<ol>
<li>
<p>Create a temporary directory, for example, <code>/tmp/sg</code>.</p>
</li>
<li>
<p>From the directory into which you unzipped the SPARQL Gateway file that you downloaded, copy the <code>sparqlgateway</code> directory and everything under it (including subdirectories) into the temporary directory you created in step 1. For example:</p>
<pre>
cd /tmp
cp -rf  sparqlgateway/*  /tmp/sg
</pre>
<p>(This sample directory structure is assumed in some later steps.)</p>
</li>
<li>
<p>If you do not already have the ARQ 2.8.8 package, download it from <code><a href="http://sourceforge.net/projects/jena/files/ARQ/ARQ-2.8.8/arq-2.8.8.zip/download">http://sourceforge.net/projects/jena/files/ARQ/ARQ-2.8.8/arq-2.8.8.zip/download</a></code>.</p>
</li>
<li>
<p>Copy the following libraries from the ARQ 2.8.8 package to <code>/tmp/sg/WEB-INF/lib</code>:</p>
<pre>
arq-2.8.8.jar
icu4j-3.4.4.jar
iri-0.8.jar
jena-2.6.4.jar
junit-4.5.jar
log4j-1.2.14.jar
lucene-core-2.3.1.jar
slf4j-api-1.5.8.jar
slf4j-log4j12-1.5.8.jar
stax-api-1.0.1.jar
wstx-asl-3.2.9.jar
xercesImpl-2.7.1.jar
</pre></li>
<li>
<p>Copy the following libraries to <code>/tmp/sg/WEB-INF/lib</code>:</p>
<pre>
ojdbc6.jar  (from $ORACLE_HOME/jdbc/lib/ojdbc6.jar )
sdordfclient.jar  (from jena_adaptor_for_release11.2.0.3.zip under the jar/ directory)
sdordf.jar  from $ORACLE_HOME/md/jlib/sdordf.jar )
</pre></li>
<li>
<p>Customize the <code>/tmp/sg/WEB-INF/web.xml</code> file as needed. Be sure to specify appropriate values for the <code>sparql_gateway_repository_filedir</code> and <code>sparql_gateway_repository_url</code> parameters.</p>
</li>
<li>
<p>Add XSLT files or SPARQL query files to the <code>/tmp/sg</code> directory, if necessary.</p>
<p>The following files are provided by Oracle in that directory: <code>default.xslt</code>, <code>noop.xslt</code>, and <code>qb1.sparql</code>. The <code>default.xslt</code> file is intended mainly for transforming SPARQL query responses (XML) to a format acceptable to Oracle Business Intelligence Enterprise Edition (OBIEE).</p>
<p>(These files are described in <a href="#BGBGIECF">Section 7.16.3.1, "Storing SPARQL Queries and XSL Transformations"</a>; using SPARQL Gateway with OBIEE is explained in <a href="#BGBBIDHD">Section 7.16.7, "Using SPARQL Gateway as an XML Data Source to OBIEE"</a>.)</p>
</li>
<li>
<p>Go to the autodeploy directory of WebLogic Server, create directory sparqlgateway.war, and copy files, as follows. (For information about auto-deploying applications in development domains, see: <code><a href="http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html">http://docs.oracle.com/cd/E11035_01/wls100/deployment/autodeploy.html</a></code>)</p>
<pre>
cd <span class="italic">&lt;domain_name&gt;</span>/autodeploy
mkdir sparqlgateway.war  
cp -rf  /tmp/sg/*  <span class="italic">&lt;domain_name&gt;</span>/autodeploy/sparqgateway.war
  
</pre>
<p>In this example, <span class="italic">&lt;domain_name&gt;</span> is the name of a WebLogic Server domain.</p>
</li>
<li>
<p>If you want to build a .war file from the /tmp/sg directory, enter the following commands:</p>
<pre>
cd /tmp/sg
jar cvf /tmp/sparqlgateway.war *
</pre></li>
<li>
<p>Start or restart WebLogic Server.</p>
</li>
<li>
<p>Verify your deployment by using your Web browser to connect to a URL in the following format (assume that the Web application is deployed at port 7001):</p>
<pre>
http://<span class="italic">&lt;hostname&gt;</span>:7001/sparqlgateway
</pre></li>
</ol>
</div>
<!-- class="sect3" -->
<a id="BGBHHDCI"></a>
<div id="RDFRM507" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.2.3</span> Modify Proxy Settings, if Necessary</h4>
<p>If your SPARQL Gateway is behind a firewall and you want SPARQL Gateway to communicate with SPARQL endpoints on the Internet as well as those inside the firewall, you probably need to use the following JVM settings:</p>
<pre>
-Dhttp.proxyHost=&lt;<span class="italic">your_proxy_host&gt;</span>
-Dhttp.proxyPort=<span class="italic">&lt;your_proxy_port&gt;</span>
-Dhttp.nonProxyHosts=127.0.0.1|<span class="italic">&lt;hostname_1_for_sparql_endpoint_inside_firewall&gt;</span>|<span class="italic">&lt;hostname_2_for_sparql_endpoint_inside_firewall&gt;</span>|...|<span class="italic">&lt;hostname_n_for_sparql_endpoint_inside_firewall&gt;</span>
</pre>
<p>You can specify these settings in the <code>startWebLogic.sh</code> script.</p>
</div>
<!-- class="sect3" -->
<a id="BGBHBEFE"></a>
<div id="RDFRM508" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.2.4</span> Configure the OracleSGDS Data Source, if Necessary</h4>
<p>If an Oracle database is used for storage of and access to SPARQL queries and XSL transformations for SPARQL Gateway, then you must configure a data source named <code>OracleSGDS</code>.</p>
<p>To create this data source, follow the instructions in <a href="#CBBBFDJC">Section 7.2.1, "Creating the Required Data Source Using WebLogic Server"</a>; however, specify <code><span class="codeinlinebold">OracleSGDS</span></code> as the data source name instead of <code>OracleSemDS</code>.</p>
<p>If the <code>OracleSGDS</code> data source is configured and available, SPARQL Gateway servlet will automatically create all the necessary tables and indexes upon initialization.</p>
</div>
<!-- class="sect3" -->
<a id="BGBGDHIJ"></a>
<div id="RDFRM509" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.2.5</span> Add and Configure the SparqlGatewayAdminGroup Group, if Desired</h4>
<p>The following JSP files in SPARQL Gateway can help you to view, edit, and update SPARQL queries and XSL transformations that are stored in an Oracle database:</p>
<pre>
http://<span class="italic">&lt;host&gt;</span>:7001/sparqlgateway/admin/sparql.jsp
http://<span class="italic">&lt;host&gt;</span>:7001/sparqlgateway/admin/xslt.jsp
</pre>
<p>These files are protected by HTTP Basic Authentication. In <code>WEB-INF/weblogic.xml</code>, a principal named <code>SparqlGatewayAdminGroup</code> is defined.</p>
<p>To be able to log in to either of these JSP pages, you must use the WebLogic Server to add a group named <code>SparqlGatewayAdminGroup</code>, and create a new user or assign an existing user to this group.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBIHIII"></a>
<div id="RDFRM510" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.3</span> <a id="sthref411"></a>Using SPARQL Gateway with Semantic Data</h3>
<p>The primary interface for an application to interact with SPARQL Gateway is through a URL with the following format:</p>
<pre>
http://host:port/sparqlgateway/sg?<span class="italic">&lt;SPARQL_ENDPOINT&gt;</span>&amp;<span class="italic">&lt;SPARQL_QUERY&gt;</span>&amp;<span class="italic">&lt;XSLT&gt;</span>
</pre>
<p>In the preceding format:</p>
<ul>
<li>
<p><span class="italic">&lt;SPARQL_ENDPOINT&gt;</span> specifies the <code>ee</code> parameter, which contains a URL encoded form of a SPARQL endpoint.</p>
<p>For example, <code>ee=http%3A%2F%2Fsparql.org%2Fbooks</code> is the URL encoded string for SPARQL endpoint <code>http://sparql.org/books</code>. It means that SPARQL queries are to be executed against endpoint <code>http://sparql.org/books</code>.</p>
</li>
<li>
<p><span class="italic">&lt;SPARQL_QUERY&gt;</span> specifies either the SPARQL query, or the location of the SPARQL query.</p>
<p>If it is feasible for an application to accept a very long URL, you can encode the whole SPARQL query and set <code>eq=</code><code><span class="codeinlineitalic">&lt;encoded_SPARQL_query&gt;</span></code> in the URL If it is not feasible for an application to accept a very long URL, you can store the SPARQL queries and make them available to SPARQL Gateway using one of the approaches described in <a href="#BGBGIECF">Section 7.16.3.1</a>.</p>
</li>
<li>
<p><span class="italic">&lt;XSLT&gt;</span> specifies either the XSL transformation, or the location of the XSL transformation.</p>
<p>If it is feasible for an application to accept a very long URL, you can encode the whole XSL transformation and set <code>ex=</code><code><span class="codeinlineitalic">&lt;encoded_XSLT&gt;</span></code> in the URL If it is not feasible for an application to accept a very long URL, you can store the XSL transformations and make them available to SPARQL Gateway using one of the approaches described in <a href="#BGBGIECF">Section 7.16.3.1</a>.</p>
</li>
</ul>
<p>Related topics:</p>
<ul>
<li>
<p><a href="#BGBGIECF">Storing SPARQL Queries and XSL Transformations</a></p>
</li>
<li>
<p><a href="#BGBEIJJE">Specifying a Timeout Value</a></p>
</li>
<li>
<p><a href="#BGBJJJAD">Specifying Best Effort Query Execution</a></p>
</li>
<li>
<p><a href="#BGBHGGDH">Specifying a Content Type Other Than text/xml</a></p>
</li>
</ul>
<a id="BGBGIECF"></a>
<div id="RDFRM511" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.3.1</span> Storing SPARQL Queries and XSL Transformations</h4>
<p>If it is not feasible for an application to accept a very long URL, you can specify the location of the SPARQL query and the XSL transformation in the <span class="italic">&lt;SPARQL_QUERY&gt;</span> and <span class="italic">&lt;XSLT&gt;</span> portions of the URL format described in <a href="#BGBIHIII">Section 7.16.3</a>, using any of the following approaches:</p>
<ul>
<li>
<p>Store the SPARQL queries and XSL transformations in the SPARQL Gateway Web application itself.</p>
<p>To do this, unpack the <code>sparqlgateway.war</code> file, and store the SPARQL queries and XSL transformations in the top-level directory; then pack the <code>sparqlgateway.war</code> file and redeploy it.</p>
<p>The <code>sparqlgateway.war</code> file includes the following example files: <code>qb1.sparql</code> (SPARQL query) and <code>default.xslt</code> (XSL transformation).</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Use the file extension <code>.sparql</code> for SPARQL query files, and the file extension <code>.xslt</code> for XSL transformation files.</div>
<p>The syntax for specifying these files (using the provided example file names) is <code><span class="codeinlinebold">wq</span></code><code>=qb1</code>.sparql for a SPARQL query file and <code><span class="codeinlinebold">wx</span></code><code>=default.xslt</code> for an XSL transformation file.</p>
<p>If you want to customize the default XSL transformations, see the examples in <a href="#BGBJIFHA">Section 7.16.4, "Customizing the Default XSLT File"</a>.</p>
<p>If you specify <code>wx=noop.xslt</code>, XSL transformation is not performed and the SPARQL response is returned "as is" to the client.</p>
</li>
<li>
<p>Store the SPARQL queries and XSL transformations in a file system directory, and make sure that the directory is accessible for the deployed SPARQL Gateway Web application.</p>
<p>By default, the directory is set to <code>/tmp</code>, as shown in the following <code>&lt;init-param&gt;</code> setting:</p>
<pre>
&lt;init-param&gt;
   &lt;param-name&gt;sparql_gateway_repository_<span class="bold">filedir</span>&lt;/param-name&gt;
   &lt;param-value&gt;<span class="bold">/tmp/</span>&lt;/param-value&gt;
&lt;/init-param&gt;
</pre>
<p>It is recommended that you customize this directory before deploying the SPARQL Gateway. To change the directory setting, edit the text in between the <code>&lt;param-value&gt;</code> and <code>&lt;/param-value&gt;</code> tags.</p>
<p>The following example specifies a SPARQL query file and an XSL transformation file that are in the directory specified in the <code>&lt;init-param&gt;</code> element for <code>sparql_gateway_repository_filedir</code>:</p>
<pre>
<span class="bold">fq</span>=qb1.sparql
<span class="bold">fx</span>=myxslt1.xslt
</pre></li>
<li>
<p>Make the SPARQL queries and XSL transformations accessible from a website.</p>
<p>By default, the website directory is set to <code>http://127.0.0.1/queries/</code>, as shown in the following <code>&lt;init-param&gt;</code> setting:</p>
<pre>
&lt;init-param&gt;
   &lt;param-name&gt;sparql_gateway_repository_<span class="bold">url</span>&lt;/param-name&gt;
   &lt;param-value&gt;<span class="bold">http://127.0.0.1/queries/</span>&lt;/param-value&gt;
&lt;/init-param&gt;
</pre>
<p>Customize this directory before deploying the SPARQL Gateway. To change the website setting, edit the text in between the <code>&lt;param-value&gt;</code> and <code>&lt;/param-value&gt;</code> tags.</p>
<p>The following example specifies a SPARQL query file and an XSL transformation file that are in the URL specified in the <code>&lt;init-param&gt;</code> element for <code>sparql_gateway_repository_url</code>.</p>
<pre>
<span class="bold">uq</span>=qb1.sparql
<span class="bold">ux</span>=myxslt1.xslt
</pre>
<p>Internally, SPARQL Gateway computes the appropriate complete URL, fetches the content, starts query execution, and applies the XSL transformation to the query response XML.</p>
</li>
<li>
<p>Store the SPARQL queries and XSL transformations in an Oracle database.</p>
<p>This approach requires that the J2EE data source <code>OracleSGDS</code> be defined. After SPARQL Gateway retrieves a database connection from the OracleSGDS data source, a SPARQL query is read from the database table ORACLE_ORARDF_SG_QUERY using the integer ID provided.</p>
<p>The syntax for fetching a SPARQL query from an Oracle database is <code><span class="codeinlinebold">dq=</span></code><code>&lt;integer-id&gt;</code>, and the syntax for fetching an XSL transformation from an Oracle database is <code><span class="codeinlinebold">dx=</span></code><code>&lt;integer-id&gt;</code>.</p>
<p>Upon servlet initialization, the following tables are created automatically if they do not already exist (you do not need to create them manually):</p>
<ul>
<li>
<p>ORACLE_ORARDF_SG_QUERY with a primary key of QID (integer type)</p>
</li>
<li>
<p>ORACLE_ORARDF_SG_XSLT with a primary key of XID (integer type)</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="BGBEIJJE"></a>
<div id="RDFRM512" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.3.2</span> <a id="sthref412"></a><a id="sthref413"></a>Specifying a Timeout Value</h4>
<p>When you submit a potentially long-running query using the URL format described in <a href="#BGBIHIII">Section 7.16.3</a>, you can limit the execution time by specifying a timeout value in milliseconds. For example, the following shows the URL format and a timeout specification that the SPARQL query execution started from SPARQL Gateway is to be ended after 1000 milliseconds (1 second):</p>
<pre>
http://<span class="italic">host:port</span>/sparqlgateway/sg?<span class="italic">&lt;SPARQL_ENDPOINT&gt;</span>&amp;<span class="italic">&lt;SPARQL_QUERY&gt;</span>&amp;<span class="italic">&lt;XSLT&gt;</span><span class="bold">&amp;t=1000</span>
</pre>
<p>If a query does not finish when timeout occurs, then an empty SPARQL response is constructed by SPARQL Gateway.</p>
<p>Note that even if SPARQL Gateway times out a query execution at the HTTP connection level, the query may still be running on the server side. The actual behavior will be vendor-dependent.</p>
</div>
<!-- class="sect3" -->
<a id="BGBJJJAD"></a>
<div id="RDFRM513" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.3.3</span> <a id="sthref414"></a><a id="sthref415"></a>Specifying Best Effort Query Execution</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
You can specify best effort query execution only if you also specify a timeout value (described in <a href="#BGBEIJJE">Section 7.16.3.2</a>).</div>
<p>When you submit a potentially long-running query using the URL format described in <a href="#BGBIHIII">Section 7.16.3</a>, if you specify a timeout value, you can also specify a "best effort" limitation on the query. For example, the following shows the URL format with a timeout specification of 1000 milliseconds (1 second) and a best effort specification (<code>&amp;b=t</code>):</p>
<pre>
http://<span class="italic">host:port</span>/sparqlgateway/sg?<span class="italic">&lt;SPARQL_ENDPOINT&gt;</span>&amp;<span class="italic">&lt;SPARQL_QUERY&gt;</span>&amp;<span class="italic">&lt;XSLT&gt;</span><span class="bold">&amp;t=1000</span><span class="bold">&amp;b=t</span>
</pre>
<p>The web.xml file includes two parameter settings that affect the behavior of the best effort option: <code>sparql_gateway_besteffort_maxrounds</code> and <code>sparql_gateway_besteffort_maxthreads</code>. The following show the default definitions:</p>
<pre>
&lt;init-param&gt;
  &lt;param-name&gt;sparql_gateway_besteffort_maxrounds&lt;/param-name&gt;
  &lt;param-value&gt;10&lt;/param-value&gt;
&lt;/init-param&gt;
 
&lt;init-param&gt;
  &lt;param-name&gt;sparql_gateway_besteffort_maxthreads&lt;/param-name&gt;
  &lt;param-value&gt;3&lt;/param-value&gt;
&lt;/init-param&gt;
</pre>
<p>When a SPARQL SELECT query is executed in best effort style, a series of queries will be executed with an increasing LIMIT value setting in the SPARQL query body. (The core idea is based on the observation that a SPARQL query runs faster with a smaller LIMIT setting.) SPARQL Gateway starts query execution with a "LIMIT 1" setting. Ideally, this query can finish before the timeout is due. Assume that is the case, the next query will have its LIMIT setting is increased, and subsequent queries have higher limits. The maximum number of query executions is controlled by the <code>sparql_gateway_besteffort_maxrounds</code> parameter.</p>
<p>If it is possible to run the series of queries in parallel, the <code>sparql_gateway_besteffort_maxthreads</code> parameter controls the degree of parallelism.</p>
</div>
<!-- class="sect3" -->
<a id="BGBHGGDH"></a>
<div id="RDFRM514" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.3.4</span> <a id="sthref416"></a>Specifying a Content Type Other Than text/xml</h4>
<p>By default, SPARQL Gateway assumes that XSL transformations generate XML, and so the default content type set for HTTP response is <code>text/xml</code>. However, if your application requires a response format other than XML, you can specify the format in an additional URL parameter (with syntax <code>&amp;rt=</code>), using the following format:</p>
<pre>
http://<span class="italic">host</span>:<span class="italic">port</span>/sparqlgateway/sg?<span class="italic">&lt;SPARQL_ENDPOINT&gt;</span>&amp;<span class="italic">&lt;SPARQL_QUERY&gt;</span>&amp;&lt;XSLT&gt;<span class="bold">&amp;rt=</span><span class="bolditalic">&lt;content_type&gt;</span>
</pre>
<p>Note that <span class="italic">&lt;content_type&gt;</span> must be URL encoded.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBJIFHA"></a>
<div id="RDFRM515" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.4</span> <a id="sthref417"></a><a id="sthref418"></a><a id="sthref419"></a>Customizing the Default XSLT File</h3>
<p>You can customize the default XSL transformation file (the one referenced using <code>wx=default.xslt</code>). This section presents some examples of customizations.</p>
<p>The following example implements this namespace prefix replacement logic: if a variable binding returns a URI that starts with <code>http://purl.org/goodrelations/v1#</code>, that portion is replaced by <code>gr:</code>; and if a variable binding returns a URI that starts with <code>http://www.w3.org/2000/01/rdf-schema#</code>, that portion is replaced by <code>rdfs:</code>.</p>
<pre>
&lt;xsl:when test="starts-with(text(),'http://purl.org/goodrelations/v1#')"&gt;
   &lt;xsl:value-of select="concat('gr:',substring-after(text(),'http://purl.org/goodrelations/v1#'))"/&gt;
&lt;/xsl:when&gt;
...
&lt;xsl:when test="starts-with(text(),'http://www.w3.org/2000/01/rdf-schema#')"&gt;
   &lt;xsl:value-of select="concat('rdfs:',substring-after(text(),'http://www.w3.org/2000/01/rdf-schema#'))"/&gt;
&lt;/xsl:when&gt;
</pre>
<p>The following example implements logic to trim a leading <code>http://localhost/</code> or a leading <code>http://127.0.0.1/</code>.</p>
<pre>
&lt;xsl:when test="starts-with(text(),'http://localhost/')"&gt;
  &lt;xsl:value-of select="substring-after(text(),'http://localhost/')"/&gt;
&lt;/xsl:when&gt;
&lt;xsl:when test="starts-with(text(),'http://127.0.0.1/')"&gt;
  &lt;xsl:value-of select="substring-after(text(),'http://127.0.0.1/')"/&gt;
&lt;/xsl:when&gt;
</pre></div>
<!-- class="sect2" -->
<a id="BGBGFIGH"></a>
<div id="RDFRM516" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.5</span> <a id="sthref420"></a>Using the SPARQL Gateway Java API</h3>
<p>In addition to a Web interface, the SPARQL Gateway administration service provides a convenient Java application programming interface (API) for managing SPARQL queries and their associated XSL transformations. The Java API is included in the Jena Adapter library, <code>sdordfclient.jar</code>.</p>
<p>Java API reference information is available in the <code>javadoc_sparqlgateway.zip</code> file that is included in the SPARQL Gateway .zip file (described in <a href="#BGBFDGCI">Section 7.16.2.1</a>).</p>
<p>The main entry point for this API is the <code>oracle.spatial.rdf.client.jena.SGDBHandler</code> class (SPARQL Gateway Database Handler), which provides the following static methods for managing queries and transformations:</p>
<ul>
<li>
<p><code>deleteSparqlQuery(Connection, int)</code></p>
</li>
<li>
<p><code>deleteXslt(Connection, int)</code></p>
</li>
<li>
<p><code>insertSparqlQuery(Connection, int, String, String, boolean)</code></p>
</li>
<li>
<p><code>insertXslt(Connection, int, String, String, boolean)</code></p>
</li>
<li>
<p><code>getSparqlQuery(Connection, int, StringBuilder, StringBuilder)</code></p>
</li>
<li>
<p><code>getXslt(Connection, int, StringBuilder, StringBuilder)</code></p>
</li>
</ul>
<p>These methods manipulate and retrieve entries in the SPARQL Gateway associated tables that are stored in an Oracle Database instance. To use these methods, the necessary associated tables must already exist. If the tables do not exist, deploy the SPARQL Gateway on a Web server and access a URL in the following format:</p>
<pre>
http://<span class="italic">&lt;host&gt;</span>:<span class="italic">&lt;port&gt;</span>/sparqlgateway/sg?
</pre>
<p>where <span class="italic">&lt;host&gt;</span> is the host name of the Web server and <span class="italic">&lt;port&gt;</span> is the listening port of the Web server. Accessing this URL will automatically create the necessary tables if they do not already exist.</p>
<p>Any changes made through the Java API affect the SPARQL Gateway Web service in the same way as changes made through the administration Web interface. This provides the flexibility to manage queries and transformations using the interface you find most convenient.</p>
<p>Note that the insert methods provided by the Java API will not replace existing queries or transformations stored in the tables. Attempting to replace an existing query or transformation will fail. To replace a query or transformation, you must remove the existing entry in the table using one of the delete methods, and then insert the new query or transformation using one of the insert methods.</p>
<p>The following examples demonstrate how to perform common management tasks using the Java API. The examples assume a connection has already been established to the underlying Oracle Database instance backing the SPARQL Gateway.</p>
<p><a href="#BGBJHJCH">Example 7-31</a> adds a query and an XSL transformation to the database backing the SPARQL Gateway. After the query and transformation are added, other programs can use the query and transformation through the gateway by specifying the appropriate query ID (<code>qid</code>) and XSL transformation ID (<code>xid</code>) in the request URL.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Although <a href="#BGBJHJCH">Example 7-31</a> inserts both a query and transformation, the query and transformation are not necessarily related and do not need to be used together when accessing SPARQL Gateway. Any query in the database can be used with any transformation in the database when submitting a request to SPARQL Gateway.</div>
<div id="RDFRM517" class="example">
<p class="titleinexample"><a id="BGBJHJCH"></a>Example 7-31 Storing a SPARQL Query and an XSL Transformation</p>
<pre>
String query = "PREFIX ... SELECT ..."; // full SPARQL query text
String xslt  = "&lt;?xml ...&gt; ...";        // full XSLT transformation text
 
String queryDesc = "Conference attendee information"; // description of SPARQL query
String xsltDesc = "BIEE table widget transformation"; // description of XSLT transformation
 
int queryId = queryIdCounter++; // assign a unique ID to this query
int xsltId  = xsltIdCounter++;  // assign a unique ID to this transformation
 
// Inserting a query or transformation will fail if the table already contains
// an entry with the same ID.  Setting this boolean to true will ignore these
// exceptions (but the table will remain unchanged). Here we specify that we
// want an exception thrown if we encounter a duplicate ID.
boolean ignoreDupException = false;
 
// add the query
try {
  // Delete query if one already exists with this ID (this will <span class="bold">not</span> throw an
  // error if no such entry exists)
  SGDBHandler.deleteSparqlQuery( connection, queryId );
  SGDBHandler.insertSparqlQuery( connection, queryId, query, queryDesc, ignoreDupException );
} catch( SQLException sqle ) {
  // Handle exception
} catch( QueryException qe ) {
  // Handle query syntax exception
}
 
// add the XSLT
try {
  // Delete xslt if one already exists with this ID (this will <span class="bold">not</span> throw an
  // error if no such entry exists)
  SGDBHandler.deleteXslt( connection, xsltId );
  SGDBHandler.insertXslt( connection, xsltId, xslt, xsltDesc, ignoreDupException );
}  catch( SQLException sqle ) {
  // Handle database exception
} catch( TransformerConfigurationException tce ) {
  // Handle XSLT syntax exception
}
</pre></div>
<!-- class="example" -->
<p><a href="#BGBFGBGJ">Example 7-32</a> retrieves an existing query from the database, modifies it, then stores the updated version of the query back in the database. These steps simulate editing a query and saving the changes. (Note that if the query does not exist, an exception is thrown.)</p>
<div id="RDFRM518" class="example">
<p class="titleinexample"><a id="BGBFGBGJ"></a>Example 7-32 Modifying a Query</p>
<pre>
StringBuilder query;
StringBuilder description;
 
// Populate these with the query text and description from the database
query = new StringBuilder( );
description = new StringBuilder( );
 
// Get the query from the database
try {
  SGDBHandler.getSparqlQuery( connection, queryId, query, description );
} catch( SQLException sqle ) {
  // Handle exception
  // NOTE: exception is thrown if query with specified ID does not exist
}
 
// The query and description should be populated now
 
// Modify the query 
String updatedQuery = query.toString( ).replaceAll("invite", "attendee");
 
// Insert the query back into the database
boolean ignoreDup = false;
try {
  // First must delete the old query
  SGDBHandler.deleteSparqlQuery( connection, queryId );
  // Now we can add
  SGDBHandler.insertSparqlQuery( connection, queryId, updatedQuery, description.toString( ), ignoreDup );
} catch( SQLException sqle ) {
  // Handle exception
} catch( QueryException qe ) {
  // Handle query syntax exception
}
</pre></div>
<!-- class="example" -->
<p><a href="#BGBDCGFC">Example 7-33</a> retrieves an existing XSL transformation and prints it to standard output. (Note that if the transformation does not exist, an exception is thrown.)</p>
<div id="RDFRM519" class="example">
<p class="titleinexample"><a id="BGBDCGFC"></a>Example 7-33 Retrieving and Printing an XSL Transformation</p>
<pre>
StringBuilder xslt;
StringBuilder description;
 
// Populate these with the XSLT text and description from the database
xslt = new StringBuilder( );
description = new StringBuilder( );
 
try {
  SGDBHandler.getXslt( connection, xsltId, xslt, description );
} catch( SQLException sqle ) {
  // Handle exception
  // NOTE: exception is thrown if transformation with specified ID does not exist
}
 
// Print it to standard output
System.out.printf( "XSLT description: %s\n", description.toString( ) );
System.out.printf( "XSLT body:\n%s\n", xslt.toString( ) );
</pre></div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BGBGAGEJ"></a>
<div id="RDFRM520" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.6</span> Using the SPARQL Gateway Graphical Web Interface</h3>
<p>SPARQL Gateway provides several browser-based interfaces to help you test queries, navigate semantic data, and manage SPQARQL query and XSLT files:</p>
<ul>
<li>
<p><a href="#BGBHIAGG">Main Page (index.html)</a></p>
</li>
<li>
<p><a href="#BGBCEECH">Navigation and Browsing Page (browse.jsp)</a></p>
</li>
<li>
<p><a href="#BGBFGBGF">XSLT Management Page (xslt.jsp)</a></p>
</li>
<li>
<p><a href="#BGBEGEGJ">SPARQL Management Page (sparql.jsp)</a></p>
</li>
</ul>
<a id="BGBHIAGG"></a>
<div id="RDFRM521" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.6.1</span> Main Page (index.html)</h4>
<p><code>http://</code><code><span class="codeinlineitalic">&lt;host&gt;:&lt;port&gt;</span></code><code>/sparqlgateway/index.html</code> provides a simple interface for executing SPARQL queries and then applying the transformations in the default.xslt file to the response. <a href="#BGBHAFBF">Figure 7-2</a> shows this interface for executing a query.</p>
<div id="RDFRM522" class="figure">
<p class="titleinfigure"><a id="BGBHAFBF"></a>Figure 7-2 Graphical Interface Main Page (index.html)</p>
<img width="1070" height="609" src="img/spgateway_index_1.jpg" alt="Description of Figure 7-2 follows" /><br />
<a id="sthref421" href="img_text/spgateway_index_1.htm">Description of "Figure 7-2 Graphical Interface Main Page (index.html)"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Enter or select a <span class="bold">SPARQL Endpoint</span>, specify the <span class="bold">SPARQL SELECT Query Body,</span> and press <span class="bold">Submit Query</span>.</p>
<p>For example, if you specify <code>http://dbpedia.org/sparql</code> as the SPARQL endpoint and use the SPARQL query body from <a href="#BGBHAFBF">Figure 7-2</a>, the response will be similar to <a href="#BGBDHAAF">Figure 7-3</a>. Note that the default transformations (in <code>default.xslt</code>) have been applied to the XML output in this figure.</p>
<div id="RDFRM523" class="figure">
<p class="titleinfigure"><a id="BGBDHAAF"></a>Figure 7-3 SPARQL Query Main Page Response</p>
<img width="921" height="772" src="img/spgateway_index_2.jpg" alt="Description of Figure 7-3 follows" /><br />
<a id="sthref422" href="img_text/spgateway_index_2.htm">Description of "Figure 7-3 SPARQL Query Main Page Response"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="BGBCEECH"></a>
<div id="RDFRM524" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.6.2</span> Navigation and Browsing Page (browse.jsp)</h4>
<p><code>http://&lt;host&gt;:&lt;port&gt;/sparqlgateway/browse.jsp</code> provides navigation and browsing capabilities for semantic data. It works against any standard compliant SPARQL endpoint. <a href="#BGBBDEBF">Figure 7-4</a> shows this interface for executing a query.</p>
<div id="RDFRM525" class="figure">
<p class="titleinfigure"><a id="BGBBDEBF"></a>Figure 7-4 Graphical Interface Navigation and Browsing Page (browse.jsp)</p>
<img width="676" height="486" src="img/spgateway_browse_1.jpg" alt="Description of Figure 7-4 follows" /><br />
<a id="sthref423" href="img_text/spgateway_browse_1.htm">Description of "Figure 7-4 Graphical Interface Navigation and Browsing Page (browse.jsp)"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Enter or select a <span class="bold">SPARQL Endpoint</span>, specify the <span class="bold">SPARQL SELECT Query Body,</span> optionally specify a <span class="bold">Timeout (ms)</span> value in milliseconds and the <span class="bold">Best Effort</span> option, and press <span class="bold">Submit Query</span>.</p>
<p>The SPARQL response is parsed and then presented in table form, as shown in <a href="#BGBIHACE">Figure 7-5</a>.</p>
<div id="RDFRM526" class="figure">
<p class="titleinfigure"><a id="BGBIHACE"></a>Figure 7-5 Browsing and Navigation Page: Response</p>
<img width="938" height="217" src="img/spgateway_browse_1a.jpg" alt="Description of Figure 7-5 follows" /><br />
<a id="sthref424" href="img_text/spgateway_browse_1a.htm">Description of "Figure 7-5 Browsing and Navigation Page: Response"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In <a href="#BGBIHACE">Figure 7-5</a>, note that URIs are clickable to allow navigation, and that when users move the cursor over a URI, tool tips are shown for the URIs which have been shortened for readability (as in <code>http://purl.org.dc/elements/1.1/title</code> being displayed as the tool tip for <code>dc:title</code> in the figure).</p>
<p>If you click the URI <code>http://example.org/book/book5</code> in the output shown in <a href="#BGBIHACE">Figure 7-5</a>, a new SPARQL query is automatically generated and executed. This generated SPARQL query has three query patterns that use this particular URI as subject, predicate, and object, as shown in <a href="#BGBCHGIF">Figure 7-6</a>. Such a query can give you a good idea about how this URI is used and how it is related to other resources in the data set.</p>
<div id="RDFRM527" class="figure">
<p class="titleinfigure"><a id="BGBCHGIF"></a>Figure 7-6 Query and Response from Clicking URI Link</p>
<img width="1006" height="663" src="img/spgateway_browse_3.jpg" alt="Description of Figure 7-6 follows" /><br />
<a id="sthref425" href="img_text/spgateway_browse_3.htm">Description of "Figure 7-6 Query and Response from Clicking URI Link"</a><br />
<br /></div>
<!-- class="figure" -->
<p><a id="sthref426"></a>When there are many matches of a query, the results are organized in pages and you can click on any page. The page size by default is 50 results. To display more (or fewer) than 50 rows per page in a response with the Browsing and Navigation Page (<code>browse.jsp</code>), you can specify the <code>&amp;resultsPerPage</code> parameter in the URL. For example, to allow 100 rows per page, include the following in the URL:</p>
<pre>
&amp;resultsPerPage=100
</pre></div>
<!-- class="sect3" -->
<a id="BGBFGBGF"></a>
<div id="RDFRM528" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.6.3</span> XSLT Management Page (xslt.jsp)</h4>
<p><code>http://</code><code><span class="codeinlineitalic">&lt;host&gt;:&lt;port&gt;</span></code><code>/sparqlgateway/admin/xslt.jsp</code> provides a simple XSLT management interface. You can enter an XSLT ID (integer) and click <span class="bold">Get XSLT</span> to retrieve both the Description and XSLT Body. You can modify the XSLT Body text and then save the changes by clicking <span class="bold">Save XSLT</span>. Note that there is a previewer to help you navigate among available XSLT definitions.</p>
<p><a href="#BGBFJFEA">Figure 7-7</a> shows the XSLT Management Page.</p>
<div id="RDFRM529" class="figure">
<p class="titleinfigure"><a id="BGBFJFEA"></a>Figure 7-7 XSLT Management Page</p>
<img width="891" height="656" src="img/spgateway_xslt.jpg" alt="Description of Figure 7-7 follows" /><br />
<a id="sthref427" href="img_text/spgateway_xslt.htm">Description of "Figure 7-7 XSLT Management Page"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" -->
<a id="BGBEGEGJ"></a>
<div id="RDFRM530" class="sect3">
<h4 class="sect3"><span class="secnum">7.16.6.4</span> SPARQL Management Page (sparql.jsp)</h4>
<p><code>http://</code><code><span class="codeinlineitalic">&lt;host&gt;:&lt;port&gt;</span></code><code>/sparqlgateway/admin/xslt.jsp</code> provides a simple SPARQL management interface. You can enter a SPARQL ID (integer) and click <span class="bold">Get SPARQL</span> to retrieve both the Description and SPARQL Body. You can modify the SPARQL Body text and then save the changes by clicking <span class="bold">Save SPARQL</span>. Note that there is a previewer to help you navigate among available SPARQL queries.</p>
<p><a href="#BGBHIJEB">Figure 7-8</a> shows the SPARQL Management Page.</p>
<div id="RDFRM531" class="figure">
<p class="titleinfigure"><a id="BGBHIJEB"></a>Figure 7-8 SPARQL Management Page</p>
<img width="964" height="677" src="img/spgateway_sparql_mgmt.jpg" alt="Description of Figure 7-8 follows" /><br />
<a id="sthref428" href="img_text/spgateway_sparql_mgmt.htm">Description of "Figure 7-8 SPARQL Management Page"</a><br />
<br /></div>
<!-- class="figure" --></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BGBBIDHD"></a>
<div id="RDFRM532" class="sect2">
<h3 class="sect2"><span class="secnum">7.16.7</span> <a id="sthref429"></a><a id="sthref430"></a><a id="sthref431"></a>Using SPARQL Gateway as an XML Data Source to OBIEE</h3>
<p>This section explains how to create an XML Data source for Oracle Business Intelligence Enterprise Edition (OBIEE), by integrating OBIEE with RDF using SPARQL Gateway as a bridge. (The specific steps and illustrations reflect the Oracle BI Administration Tool Version 11.1.1.3.0.100806.0408.000.)</p>
<ol>
<li>
<p>Start the Oracle BI Administration Tool.</p>
</li>
<li>
<p>Click <span class="bold">File</span>, then <span class="bold">Import Metadata</span>. The first page of the Import Metadata wizard is displayed, as shown in <a href="#BGBDEFCG">Figure 7-9</a>.</p>
<div id="RDFRM533" class="figure">
<p class="titleinfigure"><a id="BGBDEFCG"></a>Figure 7-9 Import Metadata - Select Data Source</p>
<img width="816" height="500" src="img/obiee_impmeta_datasource.jpg" alt="Description of Figure 7-9 follows" /><br />
<a id="sthref432" href="img_text/obiee_impmeta_datasource.htm">Description of "Figure 7-9 Import Metadata - Select Data Source"</a><br />
<br /></div>
<!-- class="figure" -->
<p><span class="bold">Connection Type</span>: Select <code>XML</code>.</p>
<p><span class="bold">URL</span>: URL for an application to interact with SPARQL Gateway, as explained in <a href="#BGBIHIII">Section 7.16.3</a>. You can also include the timeout and best effort options.</p>
<p>Ignore the <span class="bold">User Name</span> and <span class="bold">Password</span> fields.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>. The second page of the Import Metadata wizard is displayed, as shown in <a href="#BGBCCHFH">Figure 7-10</a>.</p>
<div id="RDFRM534" class="figure">
<p class="titleinfigure"><a id="BGBCCHFH"></a>Figure 7-10 Import Metadata - Select Metadata Types</p>
<img width="816" height="498" src="img/obiee_impmeta_metatypes.jpg" alt="Description of Figure 7-10 follows" /><br />
<a id="sthref433" href="img_text/obiee_impmeta_metatypes.htm">Description of "Figure 7-10 Import Metadata - Select Metadata Types"</a><br />
<br /></div>
<!-- class="figure" -->
<p>Select the desired metadata types to be imported. Be sure that <span class="bold">Tables</span> is included in the selected types.</p>
</li>
<li>
<p>Click <span class="bold">Next</span>. The third page of the Import Metadata wizard is displayed, as shown in <a href="#BGBHEEIG">Figure 7-11</a>.</p>
<div id="RDFRM535" class="figure">
<p class="titleinfigure"><a id="BGBHEEIG"></a>Figure 7-11 Import Metadata - Select Metadata Objects</p>
<img width="817" height="497" src="img/obiee_impmeta_metaobjects.jpg" alt="Description of Figure 7-11 follows" /><br />
<a id="sthref434" href="img_text/obiee_impmeta_metaobjects.htm">Description of "Figure 7-11 Import Metadata - Select Metadata Objects"</a><br />
<br /></div>
<!-- class="figure" -->
<p>In the <span class="bold">Data Source View</span>, expand the node that has the table icon, select the column names (mapped from projected variables defined in the SPARQL SELECT statement), and click the right-arrow (<span class="bold">&gt;</span>) button to move the selected columns to the <span class="bold">Repository View</span>.</p>
</li>
<li>
<p>Click <span class="bold">Finish</span>.</p>
</li>
<li>
<p>Complete the remaining steps for the usual BI Business Model work and Mapping and Presentation definition work, which are not specific to SPARQL Gateway or RDF data.</p>
</li>
</ol>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment973">
<tr>
<td class="cellalignment982">
<table class="cellalignment978">
<tr>
<td class="cellalignment977"><a href="workspace_mgr.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment977"><a href="sem_sesame.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;2005, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment984">
<table class="cellalignment976">
<tr>
<td class="cellalignment977"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment977"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment977"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment977"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment977"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment977"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
