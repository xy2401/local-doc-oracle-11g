<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_APPLY_ADM</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:54:59Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_appinf.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_aq.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">25/265</span> <!-- End Header -->
<div id="ARPLS300" class="chapter"><a id="BGBBCABB"></a><a id="i996728"></a>
<h1 class="chapter"><span class="secnum">21</span> DBMS_APPLY_ADM</h1>
<p><a id="sthref525"></a><a id="sthref526"></a>The <code>DBMS_APPLY_ADM</code> package provides subprograms to configure and manage Oracle Streams apply processes, XStream outbound servers, and XStream inbound servers.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABHHFJG">Using DBMS_APPLY_ADM</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#BGBDFEJD">Summary of DBMS_APPLY_ADM Subprograms</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a class="olink STRMS004" href="../../server.112/e17069/strms_apply.htm#STRMS004"><span class="italic">Oracle Streams Concepts and Administration</span></a> and <a class="olink STREP" href="../../server.112/e10705/toc.htm"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about this package and apply processes</p>
</li>
<li>
<p><a class="olink XSTRM" href="../../server.112/e16545/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a> for more information about XStream outbound servers and inbound servers</p>
</li>
</ul>
</div>
<div class="refentry"><a id="BABHHFJG"></a>
<hr />
<div id="ARPLS72207" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_APPLY_ADM</h2>
<p>This section contains topics which relate to using the <code>DBMS_APPLY_ADM</code> package.</p>
<ul>
<li>
<p><a href="#BABBABBH">Overview</a></p>
</li>
<li>
<p><a href="#CHDHAIGD">Security Model</a></p>
</li>
<li>
<p><a href="#BABDHEGH">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS72208" class="refsect2"><a id="BABBABBH"></a>
<hr />
<h3 class="refsect2">Overview</h3>
<p>This package provides interfaces to start, stop, and configure Oracle Streams apply processes, XStream outbound servers, and XStream inbound servers. This package includes subprograms for configuring apply handlers, setting enqueue destinations for messages, and specifying execution directives for messages. This package also provides administrative subprograms that set the instantiation SCN for objects at a destination database. This package also includes subprograms for managing apply errors.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>For simplicity, this chapter refers to apply processes, XStream outbound servers, and XStream inbound servers as <span class="bold">apply components</span>. This chapter identifies a specific type of apply component when necessary.</p>
</li>
<li>
<p>Using XStream requires purchasing a license for the Oracle GoldenGate product.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STRMS" href="../../server.112/e17069/toc.htm"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
<li>
<p><a class="olink STREP" href="../../server.112/e10705/toc.htm"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
<li>
<p><a class="olink XSTRM" href="../../server.112/e16545/toc.htm"><span class="italic">Oracle Database XStream Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73153" class="refsect2"><a id="CHDHAIGD"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>Security on this package can be controlled in either of the following ways:</p>
<ul>
<li>
<p>Granting <code>EXECUTE</code> on this package to selected users or roles.</p>
</li>
<li>
<p>Granting <code>EXECUTE_CATALOG_ROLE</code> to selected users or roles.</p>
</li>
</ul>
<p>If subprograms in the package are run from within a stored procedure, then the user who runs the subprograms must be granted <code>EXECUTE</code> privilege on the package directly. It cannot be granted through a role.</p>
<p>When the <code>DBMS_APPLY_ADM</code> package is used to manage an Oracle Streams configuration, it requires that the user is granted the privileges of an Oracle Streams administrator.</p>
<p>When the <code>DBMS_APPLY_ADM</code> package is used to manage an XStream configuration, it requires that the user is granted the privileges of an XStream administrator.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The user must be granted additional privileges to perform some administrative tasks using the subprograms in this package, such as setting an apply user. If additional privileges are required for a subprogram, then the privileges are documented in the section that describes the subprogram.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink STREP200" href="../../server.112/e10705/prep_rep.htm#STREP200"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about configuring an Oracle Streams administrator</p>
</li>
<li>
<p><a class="olink XSTRM72553" href="../../server.112/e16545/xstrm_config.htm#XSTRM72553"><span class="italic">Oracle Database XStream Guide</span></a> for information about configuring an XStream administrator</p>
</li>
</ul>
</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72209" class="refsect2"><a id="BABDHEGH"></a>
<hr />
<h3 class="refsect2">Operational Notes</h3>
<p>The following sections contain operational notes for this package:</p>
<ul>
<li>
<p><a href="#BABFEGGJ">Deprecated Apply Component Parameter Value</a></p>
</li>
</ul>
<div id="ARPLS72897" class="refsect3"><a id="BABFEGGJ"></a>
<h4 class="refsect3">Deprecated Apply Component Parameter Value</h4>
<div class="infobox-note">
<p class="notep1">Note:</p>
Oracle recommends that you do not use deprecated apply component parameter values. Support for deprecated features is for backward compatibility only.</div>
<p>The <code>NONE</code> value for the <code>commit_serialization</code> apply component parameter is deprecated. It is replaced by the <code>DEPENDENT_TRANSACTIONS</code> value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997629">SET_PARAMETER Procedure</a></div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" -->
<div class="refentry"><a id="BGBDFEJD"></a>
<hr />
<div id="ARPLS527" class="refsect1">
<h2 class="refsect1">Summary of DBMS_APPLY_ADM Subprograms</h2>
<div id="ARPLS65243" class="tblformal">
<p class="titleintable"><a id="sthref527"></a><a id="sthref528"></a>Table 21-1 DBMS_APPLY_ADM Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_APPLY_ADM Package Subprograms" summary="This table lists the DBMS_APPLY_ADM subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><a href="#BABDGCEF">ADD_STMT_HANDLER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>Adds a statement DML handler for a specified operation on a specified database object to a single apply component or to all apply components in the database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><a href="#BGBGGBJJ">ALTER_APPLY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p>Alters an apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t9" headers="r1c1-t9">
<p><a href="#i1006610">COMPARE_OLD_VALUES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t9 r1c2-t9">
<p>Specifies whether to compare the old value of one or more columns in a row logical change record (row LCR) with the current value of the corresponding columns at the destination site during apply</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t9" headers="r1c1-t9">
<p><a href="#i997054">CREATE_APPLY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t9 r1c2-t9">
<p>Creates an apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t9" headers="r1c1-t9">
<p><a href="#BGBEFFJI">CREATE_OBJECT_DEPENDENCY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t9 r1c2-t9">
<p>Creates an object dependency</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t9" headers="r1c1-t9">
<p><a href="#i997195">DELETE_ALL_ERRORS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t9 r1c2-t9">
<p>Deletes all the error transactions for the specified apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t9" headers="r1c1-t9">
<p><a href="#BGBBFIDA">DELETE_ERROR Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t9 r1c2-t9">
<p>Deletes the specified error transaction</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t9" headers="r1c1-t9">
<p><a href="#i997247">DROP_APPLY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t9 r1c2-t9">
<p>Drops an apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t9" headers="r1c1-t9">
<p><a href="#BGBCEFDA">DROP_OBJECT_DEPENDENCY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t9 r1c2-t9">
<p>Drops an object dependency</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t9" headers="r1c1-t9">
<p><a href="#i997272">EXECUTE_ALL_ERRORS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t9 r1c2-t9">
<p>Reexecutes the error transactions for the specified apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t9" headers="r1c1-t9">
<p><a href="#i997305">EXECUTE_ERROR Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t9 r1c2-t9">
<p>Reexecutes the specified error transaction</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t9" headers="r1c1-t9">
<p><a href="#i997336">GET_ERROR_MESSAGE Function</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t9 r1c2-t9">
<p>Returns the message payload from the error queue for the specified message number and transaction identifier</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t9" headers="r1c1-t9">
<p><a href="#BABGGEFH">REMOVE_STMT_HANDLER</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t9 r1c2-t9">
<p>Removes a statement DML handler for a specified operation on a specified database object from a single apply component or from all apply components in the database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t9" headers="r1c1-t9">
<p><a href="#BABIFHAI">SET_CHANGE_HANDLER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t9 r1c2-t9">
<p>Sets or unsets a statement DML handler that tracks changes for a specified operation on a specified database object for a single apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t9" headers="r1c1-t9">
<p><a href="#i997367">SET_DML_HANDLER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t9 r1c2-t9">
<p>Sets a user procedure as a procedure DML handler for a specified operation on a specified database object for a single apply component or for all apply components in the database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t9" headers="r1c1-t9">
<p><a href="#i1008434">SET_ENQUEUE_DESTINATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t9 r1c2-t9">
<p>Sets the queue where the apply component automatically enqueues a message that satisfies the specified rule</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t9" headers="r1c1-t9">
<p><a href="#i1008473">SET_EXECUTE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t9 r1c2-t9">
<p>Specifies whether a message that satisfies the specified rule is executed by an apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t9" headers="r1c1-t9">
<p><a href="#BGBHIICJ">SET_GLOBAL_INSTANTIATION_SCN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t9 r1c2-t9">
<p>Records the specified instantiation SCN for the specified source database and, optionally, for the schemas at the source database and the tables owned by these schemas</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t9" headers="r1c1-t9">
<p><a href="#i997574">SET_KEY_COLUMNS Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t9 r1c2-t9">
<p>Records the set of columns to be used as the substitute primary key for local apply purposes and removes existing substitute primary key columns for the specified object if they exist</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t9" headers="r1c1-t9">
<p><a href="#i997629">SET_PARAMETER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t9 r1c2-t9">
<p>Sets an apply parameter to the specified value</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t9" headers="r1c1-t9">
<p><a href="#i1008880">SET_SCHEMA_INSTANTIATION_SCN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t9 r1c2-t9">
<p>Records the specified instantiation SCN for the specified schema in the specified source database and, optionally, for the tables owned by the schema at the source database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t9" headers="r1c1-t9">
<p><a href="#i997895">SET_TABLE_INSTANTIATION_SCN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t9 r1c2-t9">
<p>Records the specified instantiation SCN for the specified table in the specified source database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t9" headers="r1c1-t9">
<p><a href="#i997985">SET_UPDATE_CONFLICT_HANDLER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t9 r1c2-t9">
<p>Adds, updates, or drops an update conflict handler for the specified object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t9" headers="r1c1-t9">
<p><a href="#BGBIFHEH">SET_VALUE_DEPENDENCY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t9 r1c2-t9">
<p>Sets or removes a value dependency</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t9" headers="r1c1-t9">
<p><a href="#i998078">START_APPLY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t9 r1c2-t9">
<p>Directs the apply component to start applying messages</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t9" headers="r1c1-t9">
<p><a href="#i998119">STOP_APPLY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t9 r1c2-t9">
<p>Stops the apply component from applying any messages and rolls back any unfinished transactions being applied</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
All procedures commit unless specified otherwise. However, the <code>GET_ERROR_MESSAGE</code> function does not commit.</div>
<div id="ARPLS72072" class="refsect2"><a id="BABDGCEF"></a>
<hr />
<h3 class="refsect2">ADD_STMT_HANDLER Procedure<a id="sthref529"></a><a id="sthref530"></a></h3>
<p>This procedure adds a statement DML handler for a specified operation on a specified database object. The procedure adds the statement DML handler to a single apply component or to all apply components in the database.</p>
<p>This procedure is overloaded. One version of this procedure contains the <code>statement</code> and <code>comment</code> parameters, and the other does not. The <code>statement</code> parameter enables you to create the statement DML handler and add it to one or more processes in one step. Otherwise, create the statement DML handler using the <code>DBMS_STREAMS_HANDLER_ADM</code> package before adding it to one or more processes.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="d_streams_hand.htm#BEIBCJEA">Chapter 148, "DBMS_STREAMS_HANDLER_ADM"</a></p>
</li>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref531"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.ADD_STMT_HANDLER(
   object_name     IN  VARCHAR2,
   operation_name  IN  VARCHAR2,
   handler_name    IN  VARCHAR2,
   statement       IN  CLOB,
   apply_name      IN  VARCHAR2  DEFAULT NULL,
   comment         IN  VARCHAR2  DEFAULT NULL);

DBMS_APPLY_ADM.ADD_STMT_HANDLER(
   object_name     IN  VARCHAR2,
   operation_name  IN  VARCHAR2,
   handler_name    IN  VARCHAR2,
   apply_name      IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref532"></a>Parameters</p>
<div id="ARPLS72073" class="tblformal">
<p class="titleintable"><a id="sthref533"></a><a id="sthref534"></a>Table 21-2 ADD_STMT_HANDLER Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_STMT_HANDLER Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.ADD_STMT_HANDLER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Parameter</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>The name of the source object specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>operation_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>The name of the operation, which can be specified as:</p>
<ul>
<li>
<p><code>INSERT</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
<li>
<p><code>DELETE</code></p>
</li>
</ul>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> Statement DML handlers cannot be specified for LOB operations.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t12" headers="r1c1-t12">
<p><code>handler_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t12 r1c2-t12">
<p>The name of the statement DML handler.</p>
<p>If the specified statement DML handler exists, then the statement in the <code>statement</code> parameter is added to the existing handler. Ensure that the existing statement DML handler is for the same operation on the same database object as the settings for the <code>operation_name</code> and <code>object_name</code> parameters, respectively. If the existing handler is for a different operation or database object, then an apply error results when the handler is invoked.</p>
<p>If the specified statement DML handler does not exist and a non-<code>NULL</code> statement parameter is specified, then this procedure creates the statement DML handler.</p>
<p>If the specified statement DML handler does not exist and the <code>statement</code> parameter is not specified or is <code>NULL</code>, then this procedure raises an error.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t12" headers="r1c1-t12">
<p><code>statement</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t12 r1c2-t12">
<p>The text of the SQL statement to add to the statement DML handler.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t12" headers="r1c1-t12">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t12 r1c2-t12">
<p>The name of the apply component that uses the statement DML handler.</p>
<p>If <code>NULL</code>, then the procedure adds the statement DML handler as a general handler to all apply components in the database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t12" headers="r1c1-t12">
<p><code>comment</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t12 r1c2-t12">
<p>A comment for the statement DML handler.</p>
<p>If <code>NULL</code>, then no comment is recorded for the statement DML handler.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref535"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDDHDDB">The ADD_STMT_HANDLER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDBHEGI">The ADD_STMT_HANDLER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDDHDDB"></a><a id="ARPLS73307"></a>The ADD_STMT_HANDLER Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers. Outbound servers ignore all apply handlers.</p>
<p class="subhead2"><a id="CHDBHEGI"></a><a id="ARPLS73308"></a>The ADD_STMT_HANDLER Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS512" class="refsect2"><a id="BGBGGBJJ"></a>
<hr />
<h3 class="refsect2">ALTER_APPLY Procedure<a id="sthref536"></a><a id="sthref537"></a><a id="sthref538"></a><a id="sthref539"></a><a id="sthref540"></a></h3>
<p>This procedure alters an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref541"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.ALTER_APPLY(
   apply_name                IN  VARCHAR2,
   rule_set_name             IN  VARCHAR2  DEFAULT NULL,
   remove_rule_set           IN  BOOLEAN   DEFAULT FALSE,
   message_handler           IN  VARCHAR2  DEFAULT NULL
   remove_message_handler    IN  BOOLEAN   DEFAULT FALSE,
   ddl_handler               IN  VARCHAR2  DEFAULT NULL,
   remove_ddl_handler        IN  BOOLEAN   DEFAULT FALSE,
   apply_user                IN  VARCHAR2  DEFAULT NULL,
   apply_tag                 IN  RAW       DEFAULT NULL,
   remove_apply_tag          IN  BOOLEAN   DEFAULT FALSE,
   precommit_handler         IN  VARCHAR2  DEFAULT NULL,
   remove_precommit_handler  IN  BOOLEAN   DEFAULT FALSE,
   negative_rule_set_name    IN  VARCHAR2  DEFAULT NULL,
   remove_negative_rule_set  IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref542"></a>Parameters</p>
<div id="ARPLS65244" class="tblformal">
<p class="titleintable"><a id="sthref543"></a><a id="sthref544"></a>Table 21-3 ALTER_APPLY Procedure Parameters</p>
<table class="cellalignment1229" title="ALTER_APPLY Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.ALTER_APPLY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Parameter</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>The name of the apply component being altered. You must specify the name of an existing apply component. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><code>rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p>The name of the positive rule set for the apply component. The positive rule set contains the rules that instruct the apply component to apply messages.</p>
<p>If you want to use a positive rule set for the apply component, then you must specify an existing rule set in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_set_name</span></code>. For example, to specify a positive rule set in the <code>hr</code> schema named <code>job_apply_rules</code>, enter <code>hr.job_apply_rules</code>. If the schema is not specified, then the current user is the default.</p>
<p>An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the <code>DBMS_STREAMS_ADM</code> package or the <code>DBMS_RULE_ADM</code> package.</p>
<p>If you specify <code>NULL</code> and the <code>remove_rule_set</code> parameter is set to <code>FALSE</code>, then this procedure retains any existing positive rule set for the specified apply component. If you specify <code>NULL</code> and the <code>remove_rule_set</code> parameter is set to <code>TRUE</code>, then this procedure removes any existing positive rule set from the specified apply component.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t13" headers="r1c1-t13">
<p><code>remove_rule_set</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure removes the positive rule set for the specified apply component. If you remove the positive rule set for an apply component, and the apply component does not have a negative rule set, then the apply component dequeues all messages in its queue.</p>
<p>If you remove the positive rule set for an apply component, and a negative rule set exists for the apply component, then the apply component dequeues all messages in its queue that are not discarded by the negative rule set.</p>
<p>If <code>FALSE</code>, then the procedure retains the positive rule set for the specified apply component.</p>
<p>If the <code>rule_set_name</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t13" headers="r1c1-t13">
<p><code>message_handler</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t13 r1c2-t13">
<p>A user-defined procedure that processes non-LCR messages in the queue for the apply component.</p>
<p>See <a href="#i997179">"Usage Notes"</a> in the <a href="#i997054">CREATE_APPLY Procedure</a> for more information about a message handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t13" headers="r1c1-t13">
<p><code>remove_message_handler</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure removes the message handler for the specified apply component.</p>
<p>If <code>FALSE</code>, then the procedure retains any message handler for the specified apply component.</p>
<p>If the <code>message_handler</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t13" headers="r1c1-t13">
<p><code>ddl_handler</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t13 r1c2-t13">
<p>A user-defined procedure that processes DDL logical change records (DDL LCRs) in the queue for the apply component.</p>
<p>All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the <code>EXECUTE</code> member procedure of a DDL LCR, then a commit is performed automatically.</p>
<p>See <a href="#i997179">"Usage Notes"</a> in the <a href="#i997054">CREATE_APPLY Procedure</a> for more information about a DDL handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t13" headers="r1c1-t13">
<p><code>remove_ddl_handler</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure removes the DDL handler for the specified apply component.</p>
<p>If <code>FALSE</code>, then the procedure retains any DDL handler for the specified apply component.</p>
<p>If the <code>ddl_handler</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t13" headers="r1c1-t13">
<p><code>apply_user</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t13 r1c2-t13">
<p>The user in whose security domain an apply component dequeues messages that satisfy its rule sets, applies messages directly to database objects, runs custom rule-based transformations, and runs apply handlers. If <code>NULL</code>, then the apply user is not changed.</p>
<p>If a non-<code>NULL</code> value is specified to change the apply user, then the user who invokes the <code>ALTER_APPLY</code> procedure must be granted the <code>DBA</code> role. Only the <code>SYS</code> user can set the <code>apply_user</code> to <code>SYS</code>.</p>
<p>If you change the apply user, then this procedure grants the new apply user dequeue privilege on the queue used by the apply component. It also configures the user as a secure queue user of the queue.</p>
<p>In addition to the privileges granted by this procedure, you also should grant the following privileges to the apply user:</p>
<ul>
<li>
<p>The necessary privileges to perform DML and DDL changes on the apply objects</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on the rule sets used by the apply component</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all rule-based transformation functions used in the rule set</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all apply handler procedures</p>
</li>
</ul>
<p>These privileges can be granted directly to the apply user, or they can be granted through roles.</p>
<p>In addition, the apply user must be granted the <code>EXECUTE</code> privilege on all packages, including Oracle-supplied packages, that are invoked in subprograms run by the apply component. These privileges must be granted directly to the apply user. They cannot be granted through roles.</p>
<p>By default, this parameter is set to the user who created the apply component by running either the <code>CREATE_APPLY</code> procedure in this package or a procedure in the <code>DBMS_STREAMS_ADM</code> package.</p>
<p><span class="bold">Note:</span> If the apply user for an apply component is dropped using <code>DROP</code> <code>USER . . .</code> <code>CASCADE</code>, then the apply component is also dropped automatically.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t13" headers="r1c1-t13">
<p><code>apply_tag</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t13 r1c2-t13">
<p>A binary tag that is added to redo entries generated by the specified apply component. The tag is a binary value that can be used to track LCRs.</p>
<p>The tag is relevant only if a capture process at the database where the apply component is running captures changes made by the apply component. If so, then the captured changes include the tag specified by this parameter.</p>
<p>If <code>NULL</code>, the default, then the apply tag for the apply component is not changed.</p>
<p>The following is an example of a tag with a hexadecimal value of <code>17</code>:</p>
<p><code>HEXTORAW('17')</code></p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../../server.112/e10705/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t13" headers="r1c1-t13">
<p><code>remove_apply_tag</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure sets the apply tag for the specified apply component to <code>NULL</code>, and the apply component generates redo entries with <code>NULL</code> tags.</p>
<p>If <code>FALSE</code>, then the procedure retains any apply tag for the specified apply component.</p>
<p>If the <code>apply_tag</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t13" headers="r1c1-t13">
<p><code>precommit_handler</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t13 r1c2-t13">
<p>A user-defined procedure that can receive internal commit directives in the queue for the apply component before they are processed by the apply component. Typically, precommit handlers are used for auditing commit information for transactions processed by an apply component.</p>
<p>An internal commit directive is enqueued in the following ways:</p>
<ul>
<li>
<p>When a capture process captures row LCRs, the capture process enqueues the commit directive for the transaction that contains the row LCRs.</p>
</li>
<li>
<p>When a user or application enqueues messages and then issues a <code>COMMIT</code> statement, the commit directive is enqueued automatically.</p>
</li>
</ul>
<p>For a captured row LCR, a commit directive contains the commit SCN of the transaction from the source database. For a user message, the commit SCN is generated by the apply component.</p>
<p>The precommit handler procedure must conform to the following restrictions:</p>
<ul>
<li>
<p>Any work that commits must be an autonomous transaction.</p>
</li>
<li>
<p>Any rollback must be to a named savepoint created in the procedure.</p>
</li>
</ul>
<p>If a precommit handler raises an exception, then the entire apply transaction is rolled back, and all of the messages in the transaction are moved to the error queue.</p>
<p>See <a href="#i997179">"Usage Notes"</a> in the <a href="#i997054">CREATE_APPLY Procedure</a> for more information about a precommit handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t13" headers="r1c1-t13">
<p><code>remove_precommit_handler</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure removes the precommit handler for the specified apply component.</p>
<p>If <code>FALSE</code>, then the procedure retains any precommit handler for the specified apply component.</p>
<p>If the <code>precommit_handler</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t13" headers="r1c1-t13">
<p><code>negative_rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t13 r1c2-t13">
<p>The name of the negative rule set for the apply component. The negative rule set contains the rules that instruct the apply component to discard messages.</p>
<p>If you want to use a negative rule set for the apply component, then you must specify an existing rule set in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_set_name</span></code>. For example, to specify a negative rule set in the <code>hr</code> schema named <code>neg_apply_rules</code>, enter <code>hr.neg_apply_rules</code>. If the schema is not specified, then the current user is the default.</p>
<p>An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the <code>DBMS_STREAMS_ADM</code> package or the <code>DBMS_RULE_ADM</code> package.</p>
<p>If you specify <code>NULL</code> and the <code>remove_negative_rule_set</code> parameter is set to <code>FALSE</code>, then the procedure retains any existing negative rule set. If you specify <code>NULL</code> and the <code>remove_negative_rule_set</code> parameter is set to <code>TRUE</code>, then the procedure removes any existing negative rule set.</p>
<p>If you specify both a positive and a negative rule set for an apply component, then the negative rule set is always evaluated first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t13" headers="r1c1-t13">
<p><code>remove_negative_rule_set</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t13 r1c2-t13">
<p>If <code>TRUE</code>, then the procedure removes the negative rule set for the specified apply component. If you remove the negative rule set for an apply component, and the apply component does not have a positive rule set, then the apply component dequeues all messages in its queue.</p>
<p>If you remove the negative rule set for an apply component, and a positive rule set exists for the apply component, then the apply component dequeues all messages in its queue that are not discarded by the positive rule set.</p>
<p>If <code>FALSE</code>, then the procedure retains the negative rule set for the specified apply component.</p>
<p>If the <code>negative_rule_set_name</code> parameter is non-<code>NULL</code>, then this parameter should be set to <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref545"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDHHFGI">Automatic Restart of Apply Components</a></p>
</li>
<li>
<p><a href="#CHDJGDCH">The ALTER_APPLY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDJIHIA">The ALTER_APPLY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDHHFGI"></a><a id="ARPLS73309"></a>Automatic Restart of Apply Components</p>
<p>An apply component is stopped and restarted automatically when you change the value of one or more of the following <code>ALTER_APPLY</code> procedure parameters:</p>
<ul>
<li>
<p><code>message_handler</code></p>
</li>
<li>
<p><code>ddl_handler</code></p>
</li>
<li>
<p><code>apply_user</code></p>
</li>
<li>
<p><code>apply_tag</code></p>
</li>
<li>
<p><code>precommit_handler</code></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="CHDJGDCH"></a><a id="ARPLS73310"></a>The ALTER_APPLY Procedure and XStream Outbound Servers</p>
<p>The following usage notes apply to this procedure and XStream outbound servers:</p>
<ul>
<li>
<p>The <code>apply_user</code> parameter can change the connect user for an outbound server.</p>
</li>
<li>
<p>You cannot specify an apply handler for an outbound server. An outbound server ignores the settings for the following parameters: <code>message_handler</code>, <code>ddl_handler</code>, and <code>precommit_handler</code>.</p>
<p>The client application can perform custom processing of the LCRs instead if necessary. However, if apply processes are configured in the same database as the outbound server, then you can specify apply handlers for these apply processes. In addition, you can configure general apply handlers for the database. An outbound server ignores general apply handlers.</p>
</li>
<li>
<p>An outbound server cannot set an apply tag for the changes it processes. An outbound server ignores the setting for the <code>apply_tag</code> parameter.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDJIHIA"></a><a id="ARPLS73311"></a>The ALTER_APPLY Procedure and XStream Inbound Servers</p>
<p>Inbound servers can use apply handlers. However, inbound servers only process LCRs. Therefore, inbound servers ignore message handlers specified in the <code>message_handler</code> parameter.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS526" class="refsect2"><a id="i1006610"></a>
<hr />
<h3 class="refsect2">COMPARE_OLD_VALUES Procedure<a id="sthref546"></a><a id="sthref547"></a></h3>
<p><a id="i1006129"></a>This procedure specifies whether to compare the old values of one or more columns in a row logical change record (row LCR) with the current values of the corresponding columns at the destination site during apply. This procedure is relevant only for <code>UPDATE</code> and <code>DELETE</code> operations because only these operations result in old column values in row LCRs. The default is to compare old values for all columns.</p>
<p>This procedure is overloaded. The <code>column_list</code> and <code>column_table</code> parameters are mutually exclusive.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP001" href="../../server.112/e10705/conflict.htm#STREP001"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about conflict detection and resolution in an Oracle Streams environment</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref548"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.COMPARE_OLD_VALUES(
   object_name         IN VARCHAR2,
   column_list         IN VARCHAR2,
   operation           IN VARCHAR2 DEFAULT 'UPDATE',
   compare             IN BOOLEAN  DEFAULT TRUE,
   apply_database_link IN VARCHAR2 DEFAULT NULL);

DBMS_APPLY_ADM.COMPARE_OLD_VALUES(
   object_name         IN VARCHAR2,
   column_table        IN DBMS_UTILITY.LNAME_ARRAY,
   operation           IN VARCHAR2 DEFAULT 'UPDATE',
   compare             IN BOOLEAN  DEFAULT TRUE,
   apply_database_link IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref549"></a>Parameters</p>
<div id="ARPLS65245" class="tblformal">
<p class="titleintable"><a id="sthref550"></a><a id="sthref551"></a>Table 21-4 COMPARE_OLD_VALUES Procedure Parameters</p>
<table class="cellalignment1229" title="COMPARE_OLD_VALUES Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.COMPARE_OLD_VALUES." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>The name of the source table specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>column_list</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p>A comma-delimited list of column names in the table. There must be no spaces between entries.</p>
<p>Specify <code>*</code> to include all nonkey columns.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t15" headers="r1c1-t15">
<p><code>column_table</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t15 r1c2-t15">
<p>A PL/SQL associative array of type <code>DBMS_UTILITY.LNAME_ARRAY</code> that contains names of columns in the table. The first column name should be at position 1, the second at position 2, and so on. The table does not need to be <code>NULL</code> terminated.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t15" headers="r1c1-t15">
<p><code>operation</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t15 r1c2-t15">
<p>The name of the operation, which can be specified as:</p>
<ul>
<li>
<p><code>UPDATE</code> for <code>UPDATE</code> operations</p>
</li>
<li>
<p><code>DELETE</code> for <code>DELETE</code> operations</p>
</li>
<li>
<p><code>*</code> for both <code>UPDATE</code> and <code>DELETE</code> operations</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t15" headers="r1c1-t15">
<p><code>compare</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t15 r1c2-t15">
<p>If <code>compare</code> is <code>TRUE</code>, the old values of the specified columns are compared during apply.</p>
<p>If <code>compare</code> is <code>FALSE</code>, the old values of the specified columns are not compared during apply.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t15" headers="r1c1-t15">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t15 r1c2-t15">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref552"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDJGGGI">Conflict Detection</a></p>
</li>
<li>
<p><a href="#CHDBDEEI">The COMPARE_OLD_VALUES Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDDBGEE">The COMPARE_OLD_VALUES Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDJGGGI"></a><a id="ARPLS73312"></a>Conflict Detection</p>
<p>By default, an apply component uses the old column values in a row LCR to detect conflicts. You can choose not to compare old column values to avoid conflict detection for specific tables. For example, if you do not want to compare the old values for a set of columns during apply, then, using the <code>COMPARE_OLD_VALUES</code> procedure, specify the set of columns in the <code>column_list</code> or <code>column_table</code> parameter, and set the <code>compare</code> parameter to <code>FALSE</code>.</p>
<p>In addition, when the <code>compare_key_only</code> apply component parameter is set to <code>Y</code>, automatic conflict detection is disabled, and the apply component only uses primary key and unique key columns to identify the table row for a row LCR. When the <code>compare_key_only</code> apply component parameter is set to <code>N</code>, automatic conflict detection is enabled, and the apply component uses all of the old values in a row LCR to identify the table row for a row LCR.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>An apply component compares old values for non-key columns when they are present in a row LCR and when the apply component parameter <code>compare_key_only</code> is set to&nbsp;<code>N</code>.</p>
</li>
<li>
<p>This procedure raises an error if a key column is specified in <code>column_list</code> or <code>column_table</code> and the <code>compare</code> parameter is set to <code>FALSE</code>.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997629">SET_PARAMETER Procedure</a> for more information about the <code>compare_key_only</code> apply component parameter</div>
<p class="subhead2"><a id="CHDBDEEI"></a><a id="ARPLS73313"></a>The COMPARE_OLD_VALUES Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDDBGEE"></a><a id="ARPLS73314"></a>The COMPARE_OLD_VALUES Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS313" class="refsect2"><a id="i997054"></a>
<hr />
<h3 class="refsect2">CREATE_APPLY Procedure<a id="sthref553"></a><a id="sthref554"></a><a id="sthref555"></a><a id="sthref556"></a><a id="sthref557"></a></h3>
<p>This procedure creates an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref558"></a>Syntax</p>
<pre>
  DBMS_APPLY_ADM.CREATE_APPLY(
     queue_name              IN  VARCHAR2,
     apply_name              IN  VARCHAR2,
     rule_set_name           IN  VARCHAR2  DEFAULT NULL,
     message_handler         IN  VARCHAR2  DEFAULT NULL,
     ddl_handler             IN  VARCHAR2  DEFAULT NULL,
     apply_user              IN  VARCHAR2  DEFAULT NULL,
     apply_database_link     IN  VARCHAR2  DEFAULT NULL,
     apply_tag               IN  RAW       DEFAULT '00',
     apply_captured          IN  BOOLEAN   DEFAULT FALSE,
     precommit_handler       IN  VARCHAR2  DEFAULT NULL,
     negative_rule_set_name  IN  VARCHAR2  DEFAULT NULL,
     source_database         IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref559"></a>Parameters</p>
<div id="ARPLS65246" class="tblformal">
<p class="titleintable"><a id="sthref560"></a><a id="sthref561"></a>Table 21-5 CREATE_APPLY Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_APPLY Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.CREATE_APPLY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Parameter</th>
<th class="cellalignment1227" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p><code>queue_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<p>The name of the queue from which the apply component dequeues messages. You must specify an existing queue in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">queue_name</span></code>. For example, to specify a queue in the <code>hr</code> schema named <code>streams_queue</code>, enter <code>hr.streams_queue</code>. If the schema is not specified, then the current user is the default.</p>
<p><span class="bold">Note:</span> The <code>queue_name</code> setting cannot be altered after the apply component is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t18" headers="r1c1-t18">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t18 r1c2-t18">
<p>The name of the apply component being created. A <code>NULL</code> specification is not allowed. Do not specify an owner.</p>
<p>The specified name must not match the name of an existing apply component or messaging client.</p>
<p><span class="bold">Note:</span> The <code>apply_name</code> setting cannot be altered after the apply component is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t18" headers="r1c1-t18">
<p><code>rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t18 r1c2-t18">
<p>The name of the positive rule set for the apply component. The positive rule set contains the rules that instruct the apply component to apply messages.</p>
<p>If you want to use a positive rule set for the apply component, then you must specify an existing rule set in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_set_name</span></code>. For example, to specify a positive rule set in the <code>hr</code> schema named <code>job_apply_rules</code>, enter <code>hr.job_apply_rules</code>. If the schema is not specified, then the current user is the default.</p>
<p>If you specify <code>NULL</code>, and no negative rule set is specified, then the apply component applies either all captured messages or all messages in the persistent queue, depending on the setting of the <code>apply_captured</code> parameter.</p>
<p>An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the <code>DBMS_STREAMS_ADM</code> package or the <code>DBMS_RULE_ADM</code> package.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t18" headers="r1c1-t18">
<p><code>message_handler</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t18 r1c2-t18">
<p>A user-defined procedure that processes non-LCR messages in the queue for the apply component.</p>
<p>See <a href="#i997179">"Usage Notes"</a> for more information about a message handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t18" headers="r1c1-t18">
<p><code>ddl_handler</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t18 r1c2-t18">
<p>A user-defined procedure that processes DDL logical change record (DDL LCRs) in the queue for the apply component.</p>
<p>All applied DDL LCRs commit automatically. Therefore, if a DDL handler calls the <code>EXECUTE</code> member procedure of a DDL LCR, then a commit is performed automatically.</p>
<p>See <a href="#i997179">"Usage Notes"</a> for more information about a DDL handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t18" headers="r1c1-t18">
<p><code>apply_user</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t18 r1c2-t18">
<p>The user who applies all DML and DDL changes that satisfy the apply component rule sets and who runs user-defined apply handlers. If <code>NULL</code>, then the user who runs the <code>CREATE_APPLY</code> procedure is used.</p>
<p>The apply user is the user in whose security domain an apply component dequeues messages that satisfy its rule sets, applies messages directly to database objects, runs custom rule-based transformations configured for apply component rules, and runs apply handlers configured for the apply component. This user must have the necessary privileges to apply changes. This procedure grants the apply user dequeue privilege on the queue used by the apply component and configures the user as a secure queue user of the queue.</p>
<p>In addition to the privileges granted by this procedure, you also should grant the following privileges to the apply user:</p>
<ul>
<li>
<p>The necessary privileges to perform DML and DDL changes on the apply objects</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on the rule sets used by the apply component</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all rule-based transformation functions used in the rule set</p>
</li>
<li>
<p><code>EXECUTE</code> privilege on all apply handler procedures</p>
</li>
</ul>
<p>These privileges can be granted directly to the apply user, or they can be granted through roles.</p>
<p>In addition, the apply user must be granted <code>EXECUTE</code> privilege on all packages, including Oracle-supplied packages, that are invoked in subprograms run by the apply component. These privileges must be granted directly to the apply user. They cannot be granted through roles.</p>
<p><span class="bold">Note:</span> If the apply user for an apply component is dropped using <code>DROP</code> <code>USER . . .</code> <code>CASCADE</code>, then the apply component is also dropped automatically.</p>
<p>See <a href="#i997179">"Usage Notes"</a> for more information about this parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t18" headers="r1c1-t18">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t18 r1c2-t18">
<p>The database at which the apply component applies messages. This parameter is used by an apply component when applying changes from Oracle to non-Oracle systems, such as Sybase. Set this parameter to <code>NULL</code> to specify that the apply component applies messages at the local database.</p>
<p><span class="bold">Note:</span> The <code>apply_database_link</code> setting cannot be altered after the apply component is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t18" headers="r1c1-t18">
<p><code>apply_tag</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t18 r1c2-t18">
<p>A binary tag that is added to redo entries generated by the specified apply component. The tag is a binary value that can be used to track LCRs.</p>
<p>The tag is relevant only if a capture process at the database where the apply component is running captures changes made by the apply component. If so, then the captured changes include the tag specified by this parameter.</p>
<p>By default, the tag for an apply component is the hexadecimal equivalent of <code>'00'</code> (double zero).</p>
<p>The following is an example of a tag with a hexadecimal value of <code>17</code>:</p>
<pre>
HEXTORAW('17')
</pre>
<p>If <code>NULL</code>, then the apply component generates redo entries with <code>NULL</code> tags.</p>
<p><span class="bold">See Also:</span> <a class="olink STREP008" href="../../server.112/e10705/rep_tags.htm#STREP008"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about tags</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t18" headers="r1c1-t18">
<p><code>apply_captured</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t18 r1c2-t18">
<p>Either <code>TRUE</code> or <code>FALSE</code>.</p>
<p>If <code>TRUE</code>, then the apply component applies only the captured LCRs in the queue. Captured LCRs are LCRs that were captured by an Oracle Streams capture process.</p>
<p>If <code>FALSE</code>, then the apply component applies only the messages in a persistent queue. These are messages that were not captured by an Oracle Streams capture process, such as persistent LCRs or user messages.</p>
<p>To apply both captured LCRs and messages in a persistent queue, you must create at least two apply components.</p>
<p><span class="bold">Note:</span> The <code>apply_captured</code> setting cannot be altered after the apply component is created.</p>
<p><span class="bold">See Also:</span> <a class="olink STRMS104" href="../../server.112/e17069/strms_apply.htm#STRMS104"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about processing messages with an apply component</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t18" headers="r1c1-t18">
<p><code>precommit_handler</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t18 r1c2-t18">
<p>A user-defined procedure that can receive internal commit directives in the queue for the apply component before they are processed by the apply component. Typically, precommit handlers are used for auditing commit information for transactions processed by an apply component.</p>
<p>An internal commit directive is enqueued in the following ways:</p>
<ul>
<li>
<p>When a capture process captures row LCRs, the capture process enqueues the commit directive for the transaction that contains the row LCRs.</p>
</li>
<li>
<p>When a synchronous capture captures row LCRs, the persistent LCRs that were enqueued by the synchronous capture are organized into a message group. The synchronous capture records the transaction identifier in each persistent LCR in a transaction.</p>
</li>
<li>
<p>When a user or application enqueues messages and then issues a <code>COMMIT</code> statement, the commit directive is enqueued automatically.</p>
</li>
</ul>
<p>For a row LCR captured by a capture process or synchronous capture, a commit directive contains the commit SCN of the transaction from the source database. For a message enqueued by a user or application, the commit SCN is generated by the apply component.</p>
<p>The precommit handler procedure must conform to the following restrictions:</p>
<ul>
<li>
<p>Any work that commits must be an autonomous transaction.</p>
</li>
<li>
<p>Any rollback must be to a named savepoint created in the procedure.</p>
</li>
</ul>
<p>If a precommit handler raises an exception, then the entire apply transaction is rolled back, and all of the messages in the transaction are moved to the error queue.</p>
<p>See <a href="#i997179">"Usage Notes"</a> for more information about a precommit handler procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t18" headers="r1c1-t18">
<p><code>negative_rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t18 r1c2-t18">
<p>The name of the negative rule set for the apply component. The negative rule set contains the rules that instruct the apply component to discard messages.</p>
<p>If you want to use a negative rule set for the apply component, then you must specify an existing rule set in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_set_name</span></code>. For example, to specify a negative rule set in the <code>hr</code> schema named <code>neg_apply_rules</code>, enter <code>hr.neg_apply_rules</code>. If the schema is not specified, then the current user is the default.</p>
<p>If you specify <code>NULL</code>, and no positive rule set is specified, then the apply component applies either all captured LCRs or all of the messages in the persistent queue, depending on the setting of the <code>apply_captured</code> parameter.</p>
<p>An error is returned if the specified rule set does not exist. You can create a rule set and add rules to it using the <code>DBMS_STREAMS_ADM</code> package or the <code>DBMS_RULE_ADM</code> package.</p>
<p>If you specify both a positive and a negative rule set for an apply component, then the negative rule set is always evaluated first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t18" headers="r1c1-t18">
<p><code>source_database</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t18 r1c2-t18">
<p>The global name of the source database for the changes that will be applied by the apply component. The source database is the database where the changes originated. If an apply component applies captured messages, then the apply component can apply messages from only one capture process at one source database.</p>
<p>If <code>NULL</code>, then the source database name of the first LCR received by the apply component is used for the source database.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code>DBS1</code> and the domain is <code>NET</code>, then the procedure specifies <code>DBS1.NET</code> automatically.</p>
<p>The rules in the apply component rule sets determine which messages are dequeued by the apply component. If the apply component dequeues an LCR with a source database that is different than the source database for the apply component, then an error is raised. You can determine the source database for an apply component by querying the <code>DBA_APPLY_PROGRESS</code> data dictionary view.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997179"></a>Usage Notes</p>
<p>The following sections describe usage notes for this procedure:</p>
<ul>
<li>
<p><a href="#CHDJCBJD">DBA Role Requirement</a></p>
</li>
<li>
<p><a href="#CHDDAGGF">Handler Procedure Names</a></p>
</li>
<li>
<p><a href="#CHDGJGGA">Message Handler and DDL Handler Procedure</a></p>
</li>
<li>
<p><a href="#CHDIIEEF">Precommit Handler Procedure</a></p>
</li>
<li>
<p><a href="#CHDHBJAF">The CREATE_APPLY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDHBGCB">The CREATE_APPLY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDJCBJD"></a><a id="ARPLS73154"></a>DBA Role Requirement</p>
<p>If the user who invokes this procedure is different from the user specified in the <code>apply_user</code> parameter, then the invoking user must be granted the <code>DBA</code> role. If the user who invokes this procedure is the same as the user specified in the <code>apply_user</code> parameter, then the <code>DBA</code> role is not required for the invoking user. Only the <code>SYS</code> user can set the <code>apply_user</code> to <code>SYS</code>.</p>
<p class="subhead2"><a id="CHDDAGGF"></a><a id="ARPLS65247"></a>Handler Procedure Names</p>
<p>For the <code>message_handler</code>, <code>ddl_handler</code>, and <code>precommit_handler</code> parameters, specify an existing procedure in one of the following forms:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">[schema_name.]procedure_name</span></code></p>
</li>
<li>
<p><code><span class="codeinlineitalic">[schema_name.]package_name.procedure_name</span></code></p>
</li>
</ul>
<p>If the procedure is in a package, then the package_name must be specified. For example, to specify a procedure in the <code>apply_pkg</code> package in the <code>hr</code> schema named <code>process_ddls</code>, enter <code>hr.apply_pkg.process_ddls</code>. An error is returned if the specified procedure does not exist.</p>
<p>The user who invokes the <code>CREATE_APPLY</code> procedure must have <code>EXECUTE</code> privilege on a specified handler procedure. Also, if the <code><span class="codeinlineitalic">schema_name</span></code> is not specified, then the user who invokes the <code>CREATE_APPLY</code> procedure is the default.</p>
<p class="subhead2"><a id="CHDGJGGA"></a><a id="ARPLS65248"></a>Message Handler and DDL Handler Procedure</p>
<p>The procedure specified in both the <code>message_handler</code> parameter and the <code>ddl_handler</code> parameter must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">handler_procedure</span> (
   <span class="italic">parameter_name</span>  IN  ANYDATA);
</pre>
<p>Here, <code><span class="codeinlineitalic">handler_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. For the message handler, the parameter passed to the procedure is a <code>ANYDATA</code> encapsulation of a user message. For the DDL handler procedure, the parameter passed to the procedure is a <code>ANYDATA</code> encapsulation of a DDL LCR.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="t_lcr.htm#BABGGBHF">Chapter 249, "Logical Change Record TYPEs"</a> for information about DDL LCRs</div>
<p class="subhead2"><a id="CHDIIEEF"></a><a id="ARPLS65249"></a>Precommit Handler Procedure</p>
<p>The procedure specified in the <code>precommit_handler</code> parameter must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">handler_procedure</span> (
   <span class="italic">parameter_name</span>   IN  NUMBER);
</pre>
<p>Here, <code><span class="codeinlineitalic">handler_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. The parameter passed to the procedure is the commit SCN of a commit&nbsp;directive.</p>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="CHDHBJAF"></a><a id="ARPLS73315"></a>The CREATE_APPLY Procedure and XStream Outbound Servers</p>
<p>This procedure cannot create an XStream outbound servers. To create an XStream outbound server, use the <code>DBMS_XSTREAM_ADM</code> package.</p>
<p class="subhead2"><a id="CHDHBGCB"></a><a id="ARPLS73316"></a>The CREATE_APPLY Procedure and XStream Inbound Servers</p>
<p>The following usage notes apply to this procedure and XStream inbound servers:</p>
<ul>
<li>
<p>The <code>CREATE_APPLY</code> procedure always creates an apply process. The apply process remains an apply process if it receives messages from a source other than an XStream client application, such as a capture process. The apply process can become an inbound server if an XStream client application attaches to it before it receives messages from any other source. After the initial contact, an apply process cannot be changed into an inbound server, and an inbound server cannot be changed into an apply process.</p>
</li>
<li>
<p>When creating an inbound server using the <code>CREATE_APPLY</code> procedure, set the <code>apply_captured</code> parameter to <code>TRUE</code>. Inbound servers only process LCRs captured by a capture process.</p>
</li>
<li>
<p>Inbound servers can use apply handlers. However, inbound servers only process LCRs. Therefore, inbound servers ignore message handlers specified in the <code>message_handler</code> parameter.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS832" class="refsect2"><a id="BGBEFFJI"></a>
<hr />
<h3 class="refsect2">CREATE_OBJECT_DEPENDENCY Procedure<a id="sthref562"></a><a id="sthref563"></a></h3>
<p>This procedure creates an object dependency. An object dependency is a virtual dependency definition that defines a parent-child relationship between two objects at a destination database.</p>
<p>An apply component schedules execution of transactions that involve the child object after all transactions with a lower commit system change number (commit SCN) that involve the parent object have been committed. An apply component uses the object identifier of the objects in the logical change records (LCRs) to detect dependencies. The apply component does not use column values in the LCRs to detect dependencies.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
An error is raised if <code>NULL</code> is specified for either of the procedure parameters.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBCEFDA">DROP_OBJECT_DEPENDENCY Procedure</a></p>
</li>
<li>
<p><a class="olink STRMS207" href="../../server.112/e17069/strms_adapply.htm#STRMS207"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref564"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.CREATE_OBJECT_DEPENDENCY(
   object_name         IN  VARCHAR2,
   parent_object_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref565"></a>Parameters</p>
<div id="ARPLS65250" class="tblformal">
<p class="titleintable"><a id="sthref566"></a><a id="sthref567"></a>Table 21-6 CREATE_OBJECT_DEPENDENCY Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_OBJECT_DEPENDENCY Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.CREATE_OBJECT_DEPENDENCY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>The name of the child database object, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t22" headers="r1c1-t22">
<p><code>parent_object_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t22 r1c2-t22">
<p>The name of the parent database object, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.departments</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref568"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBJHGB">The CREATE_OBJECT_DEPENDENCY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDGIFCI">The CREATE_OBJECT_DEPENDENCY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDBJHGB"></a><a id="ARPLS73317"></a>The CREATE_OBJECT_DEPENDENCY Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDGIFCI"></a><a id="ARPLS73318"></a>The CREATE_OBJECT_DEPENDENCY Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS510" class="refsect2"><a id="i997195"></a>
<hr />
<h3 class="refsect2">DELETE_ALL_ERRORS Procedure<a id="sthref569"></a><a id="sthref570"></a><a id="sthref571"></a></h3>
<p>This procedure deletes all the error transactions for the specified apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref572"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.DELETE_ALL_ERRORS(
   apply_name  IN  VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref573"></a>Parameter</p>
<div id="ARPLS65251" class="tblformal">
<p class="titleintable"><a id="sthref574"></a><a id="sthref575"></a>Table 21-7 DELETE_ALL_ERRORS Procedure Parameter</p>
<table class="cellalignment1229" title="DELETE_ALL_ERRORS Procedure Parameter" summary="This table describes the parameters of DBMS_APPLY_ADM.DELETE_ALL_ERRORS." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Parameter</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>The name of the apply component that raised the errors while processing the transactions. Do not specify an owner.</p>
<p>If <code>NULL</code>, then all error transactions for all apply components are deleted.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref576"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDIAHFI">The DELETE_ALL_ERRORS Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDCFBAG">The DELETE_ALL_ERRORS Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="CHDIAHFI"></a><a id="ARPLS73319"></a>The DELETE_ALL_ERRORS Procedure and XStream Outbound Servers</p>
<p>Outbound servers do not enqueue error transactions into an error queue. This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDCFBAG"></a><a id="ARPLS73320"></a>The DELETE_ALL_ERRORS Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS534" class="refsect2"><a id="BGBBFIDA"></a>
<hr />
<h3 class="refsect2">DELETE_ERROR Procedure<a id="sthref577"></a><a id="sthref578"></a><a id="sthref579"></a></h3>
<p>This procedure deletes the specified error transaction.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref580"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.DELETE_ERROR(
   local_transaction_id  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref581"></a>Parameter</p>
<div id="ARPLS65252" class="tblformal">
<p class="titleintable"><a id="sthref582"></a><a id="sthref583"></a>Table 21-8 DELETE_ERROR Procedure Parameter</p>
<table class="cellalignment1229" title="DELETE_ERROR Procedure Parameter" summary="This table describes the parameters of DBMS_APPLY_ADM.DELETE_ERROR." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Parameter</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>local_transaction_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>The identification number of the error transaction to delete. If the specified transaction does not exist in the error queue, then an error is raised.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref584"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="ARPLS73321"></a>The DELETE_ERROR Procedure and XStream Outbound Servers</p>
<p>Outbound servers do not enqueue error transactions into an error queue. This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="ARPLS73322"></a>The DELETE_ERROR Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS535" class="refsect2"><a id="i997247"></a>
<hr />
<h3 class="refsect2">DROP_APPLY Procedure<a id="sthref585"></a><a id="sthref586"></a></h3>
<p>This procedure drops an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref587"></a>Syntax</p>
<pre>
  DBMS_APPLY_ADM.DROP_APPLY(
     apply_name             IN  VARCHAR2,
     drop_unused_rule_sets  IN  BOOLEAN  DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref588"></a>Parameters</p>
<div id="ARPLS65253" class="tblformal">
<p class="titleintable"><a id="sthref589"></a><a id="sthref590"></a>Table 21-9 DROP_APPLY Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_APPLY Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.DROP_APPLY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Parameter</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>The name of the apply component being dropped. You must specify an existing apply component name. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><code>drop_unused_rule_sets</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p>If <code>TRUE</code>, then the procedure drops any rule sets, positive and negative, used by the specified apply component if these rule sets are not used by any other Oracle Streams or XStream component. These components include capture processes, propagations, apply processes, inbound servers, and messaging clients. If this procedure drops a rule set, then this procedure also drops any rules in the rule set that are not in another rule set.</p>
<p>If <code>FALSE</code>, then the procedure does not drop the rule sets used by the specified apply component, and the rule sets retain their rules.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref591"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBDHFA">The DROP_APPLY Procedure and Rules</a></p>
</li>
<li>
<p><a href="#CHDIJDDB">The DROP_APPLY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDIADCD">The DROP_APPLY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDBDHFA"></a><a id="ARPLS73323"></a>The DROP_APPLY Procedure and Rules</p>
<p>When you use this procedure to drop an apply component, information about rules created for the apply component using the <code>DBMS_STREAMS_ADM</code> package is removed from the data dictionary views for rules. Information about such a rule is removed even if the rule is not in either the positive or negative rule set for the apply component. The following are the data dictionary views for rules:</p>
<ul>
<li>
<p><code>ALL_STREAMS_GLOBAL_RULES</code></p>
</li>
<li>
<p><code>DBA_STREAMS_GLOBAL_RULES</code></p>
</li>
<li>
<p><code>ALL_STREAMS_MESSAGE_RULES</code></p>
</li>
<li>
<p><code>DBA_STREAMS_MESSAGE_RULES</code></p>
</li>
<li>
<p><code>ALL_STREAMS_SCHEMA_RULES</code></p>
</li>
<li>
<p><code>DBA_STREAMS_SCHEMA_RULES</code></p>
</li>
<li>
<p><code>ALL_STREAMS_TABLE_RULES</code></p>
</li>
<li>
<p><code>DBA_STREAMS_TABLE_RULES</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS118" href="../../server.112/e17069/strms_monitor.htm#STRMS118"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about Oracle Streams data dictionary views</div>
</li>
</ul>
<p class="subhead2"><a id="CHDIJDDB"></a><a id="ARPLS73324"></a>The DROP_APPLY Procedure and XStream Outbound Servers</p>
<p>When the <code>DROP_APPLY</code> procedure is executed on an outbound server, it runs the <code>DROP_OUTBOUND</code> procedure in the <code>DBMS_XSTREAM_ADM</code> package. Therefore, it might also drop the outbound server's capture process and queue.</p>
<p class="subhead2"><a id="CHDIADCD"></a><a id="ARPLS73325"></a>The DROP_APPLY Procedure and XStream Inbound Servers</p>
<p>When the <code>DROP_APPLY</code> procedure is executed on an inbound server, it runs the <code>DROP_INBOUND</code> procedure in the <code>DBMS_XSTREAM_ADM</code> package. Therefore, it might also drop the inbound server's queue.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS833" class="refsect2"><a id="BGBCEFDA"></a>
<hr />
<h3 class="refsect2">DROP_OBJECT_DEPENDENCY Procedure<a id="sthref592"></a><a id="sthref593"></a></h3>
<p>This procedure drops an object dependency. An object dependency is a virtual dependency definition that defines a parent-child relationship between two objects at a destination database.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>An error is raised if an object dependency does not exist for the specified database objects.</p>
</li>
<li>
<p>An error is raised if <code>NULL</code> is specified for either of the procedure parameters.</p>
</li>
</ul>
</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBEFFJI">CREATE_OBJECT_DEPENDENCY Procedure</a></p>
</li>
<li>
<p><a class="olink STRMS207" href="../../server.112/e17069/strms_adapply.htm#STRMS207"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref594"></a>Syntax</p>
<pre>
  DBMS_APPLY_ADM.DROP_OBJECT_DEPENDENCY(
     object_name         IN  VARCHAR2,
     parent_object_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref595"></a>Parameters</p>
<div id="ARPLS65254" class="tblformal">
<p class="titleintable"><a id="sthref596"></a><a id="sthref597"></a>Table 21-10 DROP_OBJECT_DEPENDENCY Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_OBJECT_DEPENDENCY Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.DROP_OBJECT_DEPENDENCY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Parameter</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>The name of the child database object, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t29" headers="r1c1-t29">
<p><code>parent_object_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t29 r1c2-t29">
<p>The name of the parent database object, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.departments</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref598"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<p class="subhead2"><a id="ARPLS73326"></a>The DROP_OBJECT_DEPENDENCY Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="ARPLS73327"></a>The DROP_OBJECT_DEPENDENCY Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS536" class="refsect2"><a id="i997272"></a>
<hr />
<h3 class="refsect2">EXECUTE_ALL_ERRORS Procedure<a id="sthref599"></a><a id="sthref600"></a><a id="sthref601"></a></h3>
<p>This procedure reexecutes the error transactions in the error queue for the specified apply component.</p>
<p>The transactions are reexecuted in commit SCN order. Error reexecution stops if an error is raised.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS156" href="../../server.112/e17069/strms_apply.htm#STRMS156"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the error queue</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref602"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.EXECUTE_ALL_ERRORS(
   apply_name       IN  VARCHAR2  DEFAULT NULL,
   execute_as_user  IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref603"></a>Parameters</p>
<div id="ARPLS65255" class="tblformal">
<p class="titleintable"><a id="sthref604"></a><a id="sthref605"></a>Table 21-11 EXECUTE_ALL_ERRORS Procedure Parameters</p>
<table class="cellalignment1229" title="EXECUTE_ALL_ERRORS Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.EXECUTE_ALL_ERRORS." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t31">Parameter</th>
<th class="cellalignment1227" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t31" headers="r1c1-t31">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c2-t31">
<p>The name of the apply component that raised the errors while processing the transactions. Do not specify an owner.</p>
<p>If <code>NULL</code>, then all error transactions for all apply components are reexecuted.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t31" headers="r1c1-t31">
<p><code>execute_as_user</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c2-t31">
<p>If <code>TRUE</code>, then the procedure reexecutes the transactions in the security context of the current user.</p>
<p>If <code>FALSE</code>, then the procedure reexecutes each transaction in the security context of the original receiver of the transaction. The original receiver is the user who was processing the transaction when the error was raised. The <code>DBA_APPLY_ERROR</code> data dictionary view lists the original receiver for each error transaction.</p>
<p>The user who executes the transactions must have privileges to perform DML and DDL changes on the apply objects and to run any apply handlers. This user must also have dequeue privileges on the queue used by the apply component.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref606"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDFGIBD">The EXECUTE_ALL_ERRORS Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDBIDJI">The EXECUTE_ALL_ERRORS Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDFGIBD"></a><a id="ARPLS73329"></a>The EXECUTE_ALL_ERRORS Procedure and XStream Outbound Servers</p>
<p>Outbound servers do not enqueue error transactions into an error queue. This procedure cannot be used with XStream outbound servers.</p>
<p class="subhead2"><a id="CHDBIDJI"></a><a id="ARPLS73330"></a>The EXECUTE_ALL_ERRORS Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS326" class="refsect2"><a id="i997305"></a>
<hr />
<h3 class="refsect2">EXECUTE_ERROR Procedure<a id="sthref607"></a><a id="sthref608"></a><a id="sthref609"></a></h3>
<p>This procedure reexecutes the specified error transaction in the error queue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS156" href="../../server.112/e17069/strms_apply.htm#STRMS156"><span class="italic">Oracle Streams Concepts and Administration</span></a> for more information about the error queue</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref610"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.EXECUTE_ERROR(
   local_transaction_id  IN  VARCHAR2,
   execute_as_user       IN  BOOLEAN   DEFAULT FALSE,
   user_procedure        IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref611"></a>Parameters</p>
<div id="ARPLS65256" class="tblformal">
<p class="titleintable"><a id="sthref612"></a><a id="sthref613"></a>Table 21-12 EXECUTE_ERROR Procedure Parameters</p>
<table class="cellalignment1229" title="EXECUTE_ERROR Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.EXECUTE_ERRORS." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t33">Parameter</th>
<th class="cellalignment1227" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t33" headers="r1c1-t33">
<p><code>local_transaction_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t33 r1c2-t33">
<p>The identification number of the error transaction to execute. If the specified transaction does not exist in the error queue, then an error is raised.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t33" headers="r1c1-t33">
<p><code>execute_as_user</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t33 r1c2-t33">
<p>If <code>TRUE</code>, then the procedure reexecutes the transaction in the security context of the current user.</p>
<p>If <code>FALSE</code>, then the procedure reexecutes the transaction in the security context of the original receiver of the transaction. The original receiver is the user who was processing the transaction when the error was raised. The <code>DBA_APPLY_ERROR</code> data dictionary view lists the original receiver for each error transaction.</p>
<p>The user who executes the transaction must have privileges to perform DML and DDL changes on the apply objects and to run any apply handlers. This user must also have dequeue privileges on the queue used by the apply component.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t33" headers="r1c1-t33">
<p><code>user_procedure</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t33 r1c2-t33">
<p>A user-defined procedure that modifies the error transaction so that it can be successfully executed.</p>
<p>Specify <code>NULL</code> to execute the error transaction without running a user procedure.</p>
<p><span class="bold">See Also:</span> <a href="#BGBDEDCI">"Usage Notes"</a> for more information about the user procedure</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBDEDCI"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDGHIBA">The User Procedure</a></p>
</li>
<li>
<p><a href="#CHDJIDAJ">The EXECUTE_ERROR Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDCIGIE">The EXECUTE_ERROR Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDGHIBA"></a><a id="ARPLS73331"></a>The User Procedure</p>
<p>You must specify the full procedure name for the <code>user_procedure</code> parameter in one of the following forms:</p>
<ul>
<li>
<p><code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">package_name.procedure_name</span></code></p>
</li>
<li>
<p><code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">procedure_name</span></code></p>
</li>
</ul>
<p>If the procedure is in a package, then the <code><span class="codeinlineitalic">package_name</span></code> must be specified. The user who invokes the <code>EXECUTE_ERROR</code> procedure must have <code>EXECUTE</code> privilege on the specified procedure. Also, if the <code><span class="codeinlineitalic">schema_name</span></code> is not specified, then the user who invokes the <code>EXECUTE_ERROR</code> procedure is the default.</p>
<p>For example, suppose the <code>procedure_name</code> has the following properties:</p>
<ul>
<li>
<p><code>strmadmin</code> is the <code><span class="codeinlineitalic">schema_name</span></code>.</p>
</li>
<li>
<p><code>fix_errors</code> is the <code><span class="codeinlineitalic">package_name</span></code>.</p>
</li>
<li>
<p><code>fix_hr_errors</code> is the <code><span class="codeinlineitalic">procedure_name</span></code>.</p>
</li>
</ul>
<p>In this case, specify the following:</p>
<pre>
strmadmin.fix_errors.fix_hr_errors
</pre></div>
<!-- class="refsubsect" -->
<p>The procedure you create for error handling must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">user_procedure</span> (
     in_anydata                    IN      ANYDATA,
     error_record                  IN      DBA_APPLY_ERROR%ROWTYPE,
     error_message_number          IN      NUMBER,
     messaging_default_processing  IN OUT  BOOLEAN,
     out_anydata                   OUT     ANYDATA);
</pre>
<p>The user procedure has the following parameters:</p>
<ul>
<li>
<p><code>in_anydata</code>: The <code>ANYDATA</code> encapsulation of a message that the apply component passes to the procedure. A single transaction can include multiple messages. A message can be a row logical change record (row LCR), a DDL logical change record (DDL LCR), or a user message.</p>
</li>
<li>
<p><code>error_record</code>: The row in the <code>DBA_APPLY_ERROR</code> data dictionary view that identifies the transaction</p>
</li>
<li>
<p><code>error_message_number</code>: The message number of the <code>ANYDATA</code> object in the <code>in_anydata</code> parameter, starting at 1</p>
</li>
<li>
<p><code>messaging_default_processing</code>: If <code>TRUE</code>, then the apply component continues processing the message in the <code>in_anydata</code> parameter, which can include executing DML or DDL statements and invoking apply handlers.</p>
<p>If <code>FALSE</code>, then the apply component skips processing the message in the <code>in_anydata</code> parameter and moves on to the next message in the <code>in_anydata</code> parameter.</p>
</li>
<li>
<p><code>out_anydata</code>: The <code>ANYDATA</code> object processed by the user procedure and used by the apply component if <code>messaging_default_processing</code> is <code>TRUE</code>.</p>
</li>
</ul>
<p>If an LCR is executed using the <code>EXECUTE</code> LCR member procedure in the user procedure, then the LCR is executed directly, and the <code>messaging_default_processing</code> parameter should be set to <code>FALSE</code>. In this case, the LCR is not passed to any apply handlers.</p>
<p>Processing an error transaction with a user procedure results in one of the following outcomes:</p>
<ul>
<li>
<p>The user procedure modifies the transaction so that it can be executed successfully.</p>
</li>
<li>
<p>The user procedure fails to make the necessary modifications, and an error is raised when transaction execution is attempted. In this case, the transaction is rolled back and remains in the error queue.</p>
</li>
</ul>
<p>The following restrictions apply to the user procedure:</p>
<ul>
<li>
<p>Do not execute <code>COMMIT</code> or <code>ROLLBACK</code> statements. Doing so can endanger the consistency of the transaction.</p>
</li>
<li>
<p>Do not modify <code>LONG</code>, <code>LONG</code> <code>RAW</code> or LOB column data in an LCR.</p>
</li>
<li>
<p>If the <code>ANYDATA</code> object in the <code>in_anydata</code> parameter is a row LCR, then the <code>out_anydata</code> parameter must be row LCR if the <code>messaging_default_processing</code> parameter is set to <code>TRUE</code>.</p>
</li>
<li>
<p>If the <code>ANYDATA</code> object in the <code>in_anydata</code> parameter is a DDL LCR, then the <code>out_anydata</code> parameter must be DDL LCR if the <code>messaging_default_processing</code> parameter is set to <code>TRUE</code>.</p>
</li>
<li>
<p>The user who runs the user procedure must have <code>SELECT</code> privilege on the <code>DBA_APPLY_ERROR</code> data dictionary view.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
LCRs containing transactional directives, such as <code>COMMIT</code> and <code>ROLLBACK</code>, are not passed to the user procedure.</div>
<p class="subhead2"><a id="CHDJIDAJ"></a><a id="ARPLS73332"></a>The EXECUTE_ERROR Procedure and XStream Outbound Servers</p>
<p>Outbound servers do not enqueue error transactions into an error queue. This procedure cannot be used with XStream outbound servers.</p>
<p class="subhead2"><a id="CHDCIGIE"></a><a id="ARPLS73333"></a>The EXECUTE_ERROR Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS537" class="refsect2"><a id="i997336"></a>
<hr />
<h3 class="refsect2">GET_ERROR_MESSAGE Function<a id="sthref614"></a><a id="sthref615"></a><a id="sthref616"></a></h3>
<p>This function returns the message payload from the error queue for the specified message number and transaction identifier. The message can be a logical change record (LCR) or a non-LCR message.</p>
<p>This function is overloaded. One version of this function contains two <code>OUT</code> parameters. These <code>OUT</code> parameters contain the destination queue into which the message should be enqueued, if one exists, and whether the message should be executed. The destination queue is specified using the <code>SET_ENQUEUE_DESTINATION</code> procedure, and the execution directive is specified using the <code>SET_EXECUTE</code> procedure.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1008434">SET_ENQUEUE_DESTINATION Procedure</a></p>
</li>
<li>
<p><a href="#i1008473">SET_EXECUTE Procedure</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref617"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.GET_ERROR_MESSAGE(
   message_number          IN   NUMBER, 
   local_transaction_id    IN   VARCHAR2,
   destination_queue_name  OUT  VARCHAR2, 
   execute                 OUT  BOOLEAN)
RETURN ANYDATA;

DBMS_APPLY_ADM.GET_ERROR_MESSAGE(
   message_number          IN   NUMBER, 
   local_transaction_id    IN   VARCHAR2)
RETURN ANYDATA;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref618"></a>Parameters</p>
<div id="ARPLS65257" class="tblformal">
<p class="titleintable"><a id="sthref619"></a><a id="sthref620"></a>Table 21-13 GET_ERROR_MESSAGE Function Parameters</p>
<table class="cellalignment1229" title="GET_ERROR_MESSAGE Function Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.GET_ERROR_MESSAGE." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t36">Parameter</th>
<th class="cellalignment1227" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t36" headers="r1c1-t36">
<p><code>message_number</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t36 r1c2-t36">
<p>The identification number of the message. This number identifies the position of the message in the transaction. Query the <code>DBA_APPLY_ERROR</code> data dictionary view to view the message number of each apply error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t36" headers="r1c1-t36">
<p><code>local_transaction_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t36 r1c2-t36">
<p>Identifier of the error transaction for which to return a message</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t36" headers="r1c1-t36">
<p><code>destination_queue_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t36 r1c2-t36">
<p>Contains the name of the queue into which the message should be enqueued. If the message should not be enqueued into a queue, then this parameter contains <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t36" headers="r1c1-t36">
<p><code>execute</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t36 r1c2-t36">
<p>Contains <code>TRUE</code> if the message should be executed</p>
<p>Contains <code>FALSE</code> if the message should not be executed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref621"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDDBEIG">The GET_ERROR_MESSAGE Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDICJIF">The GET_ERROR_MESSAGE Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDDBEIG"></a><a id="ARPLS73334"></a>The GET_ERROR_MESSAGE Procedure and XStream Outbound Servers</p>
<p>Outbound servers do not enqueue error transactions into an error queue. This procedure cannot be used with XStream outbound servers.</p>
<p class="subhead2"><a id="CHDICJIF"></a><a id="ARPLS73335"></a>The GET_ERROR_MESSAGE Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72074" class="refsect2"><a id="BABGGEFH"></a>
<hr />
<h3 class="refsect2">REMOVE_STMT_HANDLER<a id="sthref622"></a></h3>
<p>This procedure removes a statement DML handler for a specified operation on a specified database object from a single apply component or from all apply components in the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="d_streams_hand.htm#BEIBCJEA">Chapter 148, "DBMS_STREAMS_HANDLER_ADM"</a></p>
</li>
<li>
<p><a class="olink STRMS175" href="../../server.112/e17069/strms_apply.htm#STRMS175"><span class="italic">Oracle Streams Concepts and Administration</span></a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref623"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.REMOVE_STMT_HANDLER(
   object_name     IN  VARCHAR2,
   operation_name  IN  VARCHAR2,
   handler_name    IN  VARCHAR2,
   apply_name      IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref624"></a>Parameters</p>
<div id="ARPLS72075" class="tblformal">
<p class="titleintable"><a id="sthref625"></a><a id="sthref626"></a>Table 21-14 REMOVE_STMT_HANDLER Procedure Parameters</p>
<table class="cellalignment1229" title="REMOVE_STMT_HANDLER Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.REMOVE_STMT_HANDLER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t38">Parameter</th>
<th class="cellalignment1227" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t38" headers="r1c1-t38">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t38 r1c2-t38">
<p>The name of the source object specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t38" headers="r1c1-t38">
<p><code>operation_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t38 r1c2-t38">
<p>The name of the operation, which can be specified as:</p>
<ul>
<li>
<p><code>INSERT</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
<li>
<p><code>DELETE</code></p>
</li>
</ul>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t38" headers="r1c1-t38">
<p><code>handler_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t38 r1c2-t38">
<p>The name of the statement DML handler.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t38" headers="r1c1-t38">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t38 r1c2-t38">
<p>The name of the apply component that uses the statement DML handler.</p>
<p>If <code>NULL</code>, then the procedure removes the statement DML handler from all apply components in the database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref627"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDGEDJG">The REMOVE_STMT_HANDLER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDDDJCJ">The REMOVE_STMT_HANDLER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDGEDJG"></a><a id="ARPLS73336"></a>The REMOVE_STMT_HANDLER Procedure and XStream Outbound Servers</p>
<p>Outbound servers ignore all apply handlers. This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDDDJCJ"></a><a id="ARPLS73337"></a>The REMOVE_STMT_HANDLER Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72211" class="refsect2"><a id="BABIFHAI"></a>
<hr />
<h3 class="refsect2">SET_CHANGE_HANDLER Procedure<a id="sthref628"></a><a id="sthref629"></a><a id="sthref630"></a></h3>
<p>This procedure sets or unsets a change handler that tracks changes for a specified operation on a specified database object for a single apply component.</p>
<p>A change handler is a special type of statement DML handler that tracks table changes and was created by either the <code>DBMS_STREAMS_ADM.MAINTAIN_CHANGE_TABLE</code> procedure or this <code>SET_CHANGE_HANDLER</code> procedure. Information about change handlers is stored in the <code>ALL_APPLY_CHANGE_HANDLERS</code> and <code>DBA_APPLY_CHANGE_HANDLERS</code> views.</p>
<p>This procedure automatically generates the statement that is added to the change handler based on values specified in the procedure parameters. You should only run this procedure when a configuration that tracks database changes exists.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Use the <a href="d_streams_adm.htm#CACBEIJI">MAINTAIN_CHANGE_TABLE Procedure</a> to configure an environment that tracks table changes</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref631"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_CHANGE_HANDLER(
   change_table_name    IN  VARCHAR2,
   source_table_name    IN  VARCHAR2,
   capture_values       IN  VARCHAR2,
   apply_name           IN  VARCHAR2,
   operation_name       IN  VARCHAR2,
   change_handler_name  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref632"></a>Parameters</p>
<div id="ARPLS72212" class="tblformal">
<p class="titleintable"><a id="sthref633"></a><a id="sthref634"></a>Table 21-15 SET_CHANGE_HANDLER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_CHANGE_HANDLER Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_CHANGE_HANDLER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t40">Parameter</th>
<th class="cellalignment1227" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t40" headers="r1c1-t40">
<p><code>change_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t40 r1c2-t40">
<p>The table that records changes to the source table.</p>
<p>Specify the table as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">table_name</span></code>. For example, <code>hr.jobs_change_table</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t40" headers="r1c1-t40">
<p><code>source_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t40 r1c2-t40">
<p>The table at the source database for which changes are recorded.</p>
<p>Specify the table as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">table_name</span></code>. For example, <code>hr.jobs</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t40" headers="r1c1-t40">
<p><code>capture_values</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t40 r1c2-t40">
<p>Specify which values to record in the change table when update operations are performed on the source table:</p>
<ul>
<li>
<p><code>old</code> - To record the original values for an updated column in the source table</p>
</li>
<li>
<p><code>new</code> - To record the new values for an updated column in the source table</p>
</li>
<li>
<p><code>*</code> - To record both the original and the new values for an updated column in the source table</p>
</li>
</ul>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> For insert operations, only new column values are captured. For delete operations, only old column values are captured.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t40" headers="r1c1-t40">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t40 r1c2-t40">
<p>The name of the apply component that applies changes to the change table. Do not specify an owner.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t40" headers="r1c1-t40">
<p><code>operation_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t40 r1c2-t40">
<p>The name of the operation, which can be specified as:</p>
<ul>
<li>
<p><code>INSERT</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
<li>
<p><code>DELETE</code></p>
</li>
</ul>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
<p><span class="bold">Note:</span> Change handlers cannot be specified for LOB operations.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t40" headers="r1c1-t40">
<p><code>change_handler_name</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t40 r1c2-t40">
<p>The name of the change handler.</p>
<p>If the specified change handler exists, then a statement is added to the existing handler. Ensure that the existing change handler is for the same operation on the same table as the settings for the <code>operation_name</code> and <code>source_table_name</code> parameters, respectively. If the existing handler is for a different operation or table, then an apply error results when the handler is invoked.</p>
<p>If non-<code>NULL</code> and the specified change handler does not exist, then this procedure creates the change handler.</p>
<p>If <code>NULL</code> and a change handler exists for the same operation on the same table as the settings for the <code>operation_name</code> and <code>source_table_name</code> parameters, respectively, then the existing change handler is removed.</p>
<p>If <code>NULL</code> and the specified change handler does not exist, then the procedure raises an error.</p>
<p><span class="bold">See Also:</span> <a href="#BABDHECG">"Usage Notes"</a> for more information about this parameter.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABDHECG"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBHEBJ">Checking for an Existing Change Handler</a></p>
</li>
<li>
<p><a href="#CHDCAGIG">The SET_CHANGE_HANDLER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDBIJGB">The SET_CHANGE_HANDLER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDBHEBJ"></a><a id="ARPLS73338"></a>Checking for an Existing Change Handler</p>
<p>To check for an existing change handler for a specific operation on a specific source table, run the following query:</p>
<pre>
 SELECT HANDLER_NAME, APPLY_NAME FROM DBA_APPLY_CHANGE_HANDLERS
  WHERE  operation_name     = '<span class="italic">operation</span>'
    AND  source_table_owner = '<span class="italic">source_table_owner</span>'
    AND  source_table_name  = '<span class="italic">source_table_name</span>'
    AND  change_table_owner = '<span class="italic">change_table_owner</span>'
    AND  change_table_name  = '<span class="italic">change_table_name</span>';
</pre>
<p>where:</p>
<ul>
<li>
<p><span class="italic">operation</span> is operation specified for the new handler, either <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code></p>
</li>
<li>
<p><span class="italic">source_table_owner</span> is the owner of the source table</p>
</li>
<li>
<p><span class="italic">source_table_name</span> is the name of the source table</p>
</li>
<li>
<p><span class="italic">change_table_owner</span> is the owner of the change table</p>
</li>
<li>
<p><span class="italic">change_table_owner</span> is the owner of the change table</p>
</li>
</ul>
<p class="subhead2"><a id="CHDCAGIG"></a><a id="ARPLS73339"></a>The SET_CHANGE_HANDLER Procedure and XStream Outbound Servers</p>
<p>Outbound servers ignore all apply handlers. This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDBIJGB"></a><a id="ARPLS73340"></a>The SET_CHANGE_HANDLER Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS324" class="refsect2"><a id="i997367"></a>
<hr />
<h3 class="refsect2">SET_DML_HANDLER Procedure<a id="sthref635"></a><a id="sthref636"></a><a id="sthref637"></a></h3>
<p>This procedure sets or unsets a user procedure as a procedure DML handler for a specified operation on a specified database object for a single apply component or for all apply components in the database. The user procedure alters the apply behavior for the specified operation on the specified object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref638"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_DML_HANDLER(
   object_name          IN  VARCHAR2,
   object_type          IN  VARCHAR2,
   operation_name       IN  VARCHAR2,
   error_handler        IN  BOOLEAN   DEFAULT FALSE,
   user_procedure       IN  VARCHAR2,
   apply_database_link  IN  VARCHAR2  DEFAULT NULL,
   apply_name           IN  VARCHAR2  DEFAULT NULL,
   assemble_lobs        IN  BOOLEAN   DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref639"></a>Parameters</p>
<div id="ARPLS65258" class="tblformal">
<p class="titleintable"><a id="sthref640"></a><a id="sthref641"></a>Table 21-16 SET_DML_HANDLER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_DML_HANDLER Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.SET_DML_HANDLER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t41">Parameter</th>
<th class="cellalignment1227" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t41" headers="r1c1-t41">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t41 r1c2-t41">
<p>The name of the source object specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default. The specified object does not need to exist when you run this procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t41" headers="r1c1-t41">
<p><code>object_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t41 r1c2-t41">
<p>The type of the source object. Currently, <code>TABLE</code> is the only possible source object type.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t41" headers="r1c1-t41">
<p><code>operation_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t41 r1c2-t41">
<p>The name of the operation, which can be specified as:</p>
<ul>
<li>
<p><code>INSERT</code></p>
</li>
<li>
<p><code>UPDATE</code></p>
</li>
<li>
<p><code>DELETE</code></p>
</li>
<li>
<p><code>LOB_UPDATE</code></p>
</li>
<li>
<p><code>DEFAULT</code></p>
</li>
</ul>
<p>For example, suppose you run this procedure twice for the <code>hr.employees</code> table. In one call, you set <code>operation_name</code> to <code>UPDATE</code> and <code>user_procedure</code> to <code>employees_update</code>. In another call, you set <code>operation_name</code> to <code>INSERT</code> and <code>user_procedure</code> to <code>employees_insert</code>. Both times, you set <code>error_handler</code> to <code>FALSE</code>. In this case, the <code>employees_update</code> procedure is run for <code>UPDATE</code> operations on the <code>hr.employees</code> table, and the <code>employees_insert</code> procedure is run for <code>INSERT</code> operations on the <code>hr.employees</code> table.</p>
<p>Specify <code>DEFAULT</code> to set the procedure as the default procedure DML handler for the database object. In this case, the procedure DML handler is used for any <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>LOB_WRITE</code> on the database object, if another procedure DML handler is not specifically set for the operation on the database object.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t41" headers="r1c1-t41">
<p><code>error_handler</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t41 r1c2-t41">
<p>If <code>TRUE</code>, then the specified user procedure is run when a row logical change record (row LCR) involving the specified operation on the specified object raises an apply error. You can code the user procedure to resolve possible error conditions, notify administrators of the error, log the error, or any combination of these actions.</p>
<p>If <code>FALSE</code>, then the handler being set is run for all row LCRs involving the specified operation on the specified object.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t41" headers="r1c1-t41">
<p><code>user_procedure</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t41 r1c2-t41">
<p>A user-defined procedure that is invoked during apply for the specified operation on the specified object. If the procedure is a procedure DML handler, then it is invoked instead of the default apply performed by Oracle. If the procedure is an error handler, then it is invoked when an apply error is encountered.</p>
<p>Specify <code>NULL</code> to unset a procedure DML handler that is set for the specified operation on the specified object.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t41" headers="r1c1-t41">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t41 r1c2-t41">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t41" headers="r1c1-t41">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t41 r1c2-t41">
<p>The name of the apply component that uses the procedure DML handler or error handler.</p>
<p>If <code>NULL</code>, then the procedure sets the procedure DML handler or error handler as a general handler for all apply components in the database.</p>
<p>If the <code>user_procedure</code> parameter is set to <code>NULL</code> to unset a handler, and the handler being unset is set for a specific apply component, then use the <code>apply_name</code> parameter to specify the apply component to unset the handler.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t41" headers="r1c1-t41">
<p><code>assemble_lobs</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t41 r1c2-t41">
<p>If <code>TRUE</code>, then LOB assembly is used for LOB columns in LCRs processed by the handler. LOB assembly combines multiple LCRs for a LOB column resulting from a single row change into one row LCR before passing the LCR to the handler. Database compatibility must be <code>10.2.0</code> or higher to use LOB assembly.</p>
<p>If <code>FALSE</code>, then LOB assembly is not used for LOB columns in LCRs processed by the handler.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBCDHEJ"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDEFJHH">Run the SET_DML_HANDLER Procedure at the Destination Database</a></p>
</li>
<li>
<p><a href="#CHDHBEJF">Procedure DML Handlers and Error Handlers</a></p>
</li>
<li>
<p><a href="#CHDHAHCI">The apply_name Parameter</a></p>
</li>
<li>
<p><a href="#CHDDAGHF">Signature of a DML Handler Procedure or Error Handler Procedure</a></p>
</li>
<li>
<p><a href="#CHDDJGGE">LOB Assembly</a></p>
</li>
<li>
<p><a href="#CHDJDHFC">The SET_DML_HANDLER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDHAGJE">The SET_DML_HANDLER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDEFJHH"></a><a id="ARPLS73370"></a>Run the SET_DML_HANDLER Procedure at the Destination Database</p>
<p>Run this procedure at the destination database. The <code>SET_DML_HANDLER</code> procedure provides a way for users to apply logical change records containing DML changes (row LCRs) using a customized apply.</p>
<p class="subhead2"><a id="CHDHBEJF"></a><a id="ARPLS73371"></a>Procedure DML Handlers and Error Handlers</p>
<p>If the <code>error_handler</code> parameter is set to <code>TRUE</code>, then it specifies that the user procedure is an error handler. An error handler is invoked only when a row LCR raises an apply error. Such an error can result from a data conflict if no conflict handler is specified or if the update conflict handler cannot resolve the conflict. If the <code>error_handler</code> parameter is set to <code>FALSE</code>, then the user procedure is a procedure DML handler, not an error handler, and a procedure DML handler is always run instead of performing the specified operation on the specified object.</p>
<p>This procedure either sets a procedure DML handler or an error handler for a particular operation on an object. It cannot set both a procedure DML handler and an error handler for the same object and operation.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Currently, setting an error handler for an apply component that is applying changes to a non-Oracle database is not supported.</div>
<p class="subhead2"><a id="CHDHAHCI"></a><a id="ARPLS73372"></a>The apply_name Parameter</p>
<p>If the <code>apply_name</code> parameter is non-<code>NULL</code>, then the procedure DML handler or error handler is set for the specified apply component. In this case, this handler is not invoked for other apply components at the local destination database. If the <code>apply_name</code> parameter is <code>NULL</code>, the default, then the handler is set as a general handler for all apply components at the destination database. When a handler is set for a specific apply component, then this handler takes precedence over any general handlers. For example, consider the following scenario:</p>
<ul>
<li>
<p>A procedure DML handler named <code>handler_hr</code> is specified for an apply component named <code>apply_hr</code> for <code>UPDATE</code> operations on the <code>hr.employees</code> table.</p>
</li>
<li>
<p>A general procedure DML handler named <code>handler_gen</code> also exists for <code>UPDATE</code> operations on the <code>hr.employees</code> table.</p>
</li>
</ul>
<p>In this case, the <code>apply_hr</code> apply component uses the <code>handler_hr</code> procedure DML handler for <code>UPDATE</code> operations on the <code>hr.employees</code> table.</p>
<p>At the source database, you must specify an unconditional supplemental log group for the columns needed by a DML or error handler.</p>
<p class="subhead2"><a id="CHDDAGHF"></a><a id="ARPLS65259"></a>Signature of a DML Handler Procedure or Error Handler Procedure</p>
<p>You can use the <code>SET_DML_HANDLER</code> procedure to set either a procedure DML handler or an error handler for row LCRs that perform a specified operation on a specified object. The signatures of a DML handler procedure and of an error handler procedure are described following this section.</p>
<p>In either case, you must specify the full procedure name for the <code>user_procedure</code> parameter in one of the following forms:</p>
<ul>
<li>
<p><code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">package_name.procedure_name</span></code></p>
</li>
<li>
<p><code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">procedure_name</span></code></p>
</li>
</ul>
<p>If the procedure is in a package, then the <code><span class="codeinlineitalic">package_name</span></code> must be specified. The user who invokes the <code>SET_DML_HANDLER</code> procedure must have <code>EXECUTE</code> privilege on the specified procedure. Also, if the <code><span class="codeinlineitalic">schema_name</span></code> is not specified, then the user who invokes the <code>SET_DML_HANDLER</code> procedure is the default.</p>
<p>For example, suppose the <code>procedure_name</code> has the following properties:</p>
<ul>
<li>
<p><code>hr</code> is the <code><span class="codeinlineitalic">schema_name</span></code>.</p>
</li>
<li>
<p><code>apply_pkg</code> is the <code><span class="codeinlineitalic">package_name</span></code>.</p>
</li>
<li>
<p><code>employees_default</code> is the <code><span class="codeinlineitalic">procedure_name</span></code>.</p>
</li>
</ul>
<p>In this case, specify the following:</p>
<pre>
hr.apply_pkg.employees_default
</pre>
<p>The following restrictions apply to the user procedure:</p>
<ul>
<li>
<p>Do not execute <code>COMMIT</code> or <code>ROLLBACK</code> statements. Doing so can endanger the consistency of the transaction that contains the LCR.</p>
</li>
<li>
<p>If you are manipulating a row using the <code>EXECUTE</code> member procedure for the row LCR, then do not attempt to manipulate more than one row in a row operation. You must construct and execute manually any DML statements that manipulate more than one row.</p>
</li>
<li>
<p>If the command type is <code>UPDATE</code> or <code>DELETE</code>, then row operations resubmitted using the <code>EXECUTE</code> member procedure for the LCR must include the entire key in the list of old values. The key is the primary key or the smallest unique index that has at least one <code>NOT</code> <code>NULL</code> column, unless a substitute key has been specified by the <code>SET_KEY_COLUMNS</code> procedure. If there is no specified key, then the key consists of all non <code>LOB</code>, non <code>LONG</code>, and non <code>LONG</code> <code>RAW</code> columns.</p>
</li>
<li>
<p>If the command type is <code>INSERT</code>, then row operations resubmitted using the <code>EXECUTE</code> member procedure for the LCR should include the entire key in the list of new values. Otherwise, duplicate rows are possible. The key is the primary key or the smallest unique index that has at least one <code>NOT</code> <code>NULL</code> column, unless a substitute key has been specified by the <code>SET_KEY_COLUMNS</code> procedure. If there is no specified key, then the key consists of all of the table columns, except for&nbsp; columns of the following data types: LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, user-defined types (including object types, <code>REF</code>s, varrays, nested tables), and Oracle-supplied types (including <code>Any</code> types, XML types, spatial types, and media types).</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP009" href="../../server.112/e10705/man_lcrs.htm#STREP009"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for information about and restrictions regarding procedure DML handlers and LOB, <code>LONG</code>, and <code>LONG</code> <code>RAW</code> data types</div>
</div>
<!-- class="refsubsect" -->
<p>The procedure specified in the <code>user_procedure</code> parameter must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">user_procedure</span> (
   <span class="italic">parameter_name</span>  IN  ANYDATA);
</pre>
<p>Here, <code><span class="codeinlineitalic">user_procedure</span></code> stands for the name of the procedure and <code><span class="codeinlineitalic">parameter_name</span></code> stands for the name of the parameter passed to the procedure. The parameter passed to the procedure is a <code>ANYDATA</code> encapsulation of a row LCR.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="t_lcr.htm#BABGGBHF">Chapter 249, "Logical Change Record TYPEs"</a> for more information about LCRs</div>
<p>The procedure you create for error handling must have the following signature:</p>
<pre>
PROCEDURE <span class="italic">user_procedure</span> (
     message            IN  ANYDATA,
     error_stack_depth  IN  NUMBER,
     error_numbers      IN  DBMS_UTILITY.NUMBER_ARRAY,
     error_messages     IN  emsg_array);
</pre>
<p>If you want to retry the DML operation within the error handler, then have the error handler procedure run the <code>EXECUTE</code> member procedure for the LCR. The last error raised is on top of the error stack. To specify the error message at the top of the error stack, use <code>error_numbers(1)</code> and <code>error_messages(1)</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<ul>
<li>
<p>Each parameter is required and must have the specified data type. However, you can change the names of the parameters.</p>
</li>
<li>
<p>The <code>emsg_array</code> value must be a user-defined array that is a table of type <code>VARCHAR2</code> with at least 76 characters.</p>
</li>
</ul>
</div>
<p>Running an error handler results in one of the following outcomes:</p>
<ul>
<li>
<p>The error handler successfully resolves the error and returns control to the apply component.</p>
</li>
<li>
<p>The error handler fails to resolve the error, and the error is raised. The raised error causes the transaction to be rolled back and placed in the error queue.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDDJGGE"></a><a id="ARPLS73373"></a>LOB Assembly</p>
<p>Do not modify <code>LONG</code>, <code>LONG</code> <code>RAW</code>, or nonassembled LOB column data in an LCR with procedure DML handlers, error handlers, or custom rule-based transformation functions. Procedure DML handlers and error handlers can modify LOB columns in row LCRs that have been constructed by LOB assembly.</p>
<p class="subhead2"><a id="CHDJDHFC"></a><a id="ARPLS73374"></a>The SET_DML_HANDLER Procedure and XStream Outbound Servers</p>
<p>Outbound servers ignore all apply handlers. This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDHAGJE"></a><a id="ARPLS73375"></a>The SET_DML_HANDLER Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS595" class="refsect2"><a id="i1008434"></a>
<hr />
<h3 class="refsect2">SET_ENQUEUE_DESTINATION Procedure<a id="sthref642"></a><a id="sthref643"></a></h3>
<p>This procedure sets the queue where the apply component automatically enqueues a message that satisfies the specified rule.</p>
<p>This procedure modifies the specified rule's action context to specify the queue. A rule action context is optional information associated with a rule that is interpreted by the client of the rules engine after the rule evaluates to <code>TRUE</code> for a message. In this case, the client of the rules engine is an apply component. The information in an action context is an object of type <code>SYS.RE$NV_LIST</code>, which consists of a list of name-value pairs.</p>
<p><a id="sthref644"></a>A queue destination specified by this procedure always consists of the following name-value pair in an action context:</p>
<ul>
<li>
<p>The name is <code>APPLY$_ENQUEUE</code>.</p>
</li>
<li>
<p>The value is an <code>ANYDATA</code> instance containing the queue name specified as a <code>VARCHAR2</code>.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref645"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_ENQUEUE_DESTINATION(
  rule_name               IN  VARCHAR2,
  destination_queue_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref646"></a>Parameters</p>
<div id="ARPLS65261" class="tblformal">
<p class="titleintable"><a id="sthref647"></a><a id="sthref648"></a>Table 21-17 SET_ENQUEUE_DESTINATION Procedure Parameters</p>
<table class="cellalignment1229" title="SET_ENQUEUE_DESTINATION Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_ENQUEUE_DESTINATION." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t46">Parameter</th>
<th class="cellalignment1227" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t46" headers="r1c1-t46">
<p><code>rule_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t46 r1c2-t46">
<p>The name of the rule, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_name</span></code>. For example, to specify a rule named <code>hr5</code> in the <code>hr</code> schema, enter <code>hr.hr5</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t46" headers="r1c1-t46">
<p><code>destination_queue_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t46 r1c2-t46">
<p>The name of the queue into which the apply component enqueues the message. Specify the queue in the form <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">queue_name</span></code>. Only local queues can be specified.</p>
<p>For example, to specify a queue in the <code>hr</code> schema named <code>streams_queue</code>, enter <code>hr.streams_queue</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code>NULL</code>, then an existing name-value pair with the name <code>APPLY$_ENQUEUE</code> is removed. If no name-value pair exists with the name <code>APPLY$_ENQUEUE</code> for the rule, then no action is taken.</p>
<p>If non-<code>NULL</code> and a name-value pair exists for the rule with the name <code>APPLY$_ENQUEUE</code>, then it is removed, and a new name-value pair with the value specified by this parameter is added.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref649"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDHGHGI">The SET_ENQUEUE_DESTINATION Procedure and Apply Handlers</a></p>
</li>
<li>
<p><a href="#CHDCIJHI">Considerations for the SET_ENQUEUE_DESTINATION Procedure</a></p>
</li>
<li>
<p><a href="#CHDFCBGC">The SET_ENQUEUE_DESTINATION Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDBIJJH">The SET_ENQUEUE_DESTINATION Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDHGHGI"></a><a id="ARPLS73376"></a>The SET_ENQUEUE_DESTINATION Procedure and Apply Handlers</p>
<p>If an apply handler, such as a procedure DML handler, DDL handler, or message handler, processes a message that also is enqueued into a destination queue, then the apply handler processes the message before it is enqueued.</p>
<p class="subhead2"><a id="CHDCIJHI"></a><a id="ARPLS73377"></a>Considerations for the SET_ENQUEUE_DESTINATION Procedure</p>
<p>The following are considerations for using this procedure:</p>
<ul>
<li>
<p>This procedure does not verify that the specified queue exists. If the queue does not exist, then an error is raised when an apply component tries to enqueue a message into it.</p>
</li>
<li>
<p>Oracle Streams capture processes, propagations, and messaging clients ignore the action context created by this procedure.</p>
</li>
<li>
<p>The apply user of the apply component using the specified rule must have the necessary privileges to enqueue messages into the specified queue. If the queue is a secure queue, then the apply user must be a secure queue user of the queue.</p>
</li>
<li>
<p>The specified rule must be in the positive rule set for an apply component. If the rule is in the negative rule set for an apply component, then the apply component does not enqueue the message into the destination queue.</p>
</li>
<li>
<p>If the commit SCN for a message is less than or equal to the relevant instantiation SCN for the message, then the message is not enqueued into the destination queue, even if the message satisfies the apply component rule sets.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDFCBGC"></a><a id="ARPLS73378"></a>The SET_ENQUEUE_DESTINATION Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDBIJJH"></a><a id="ARPLS73379"></a>The SET_ENQUEUE_DESTINATION Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS596" class="refsect2"><a id="i1008473"></a>
<hr />
<h3 class="refsect2">SET_EXECUTE Procedure<a id="sthref650"></a><a id="sthref651"></a></h3>
<p>This procedure specifies whether a message that satisfies the specified rule is executed by an apply component.</p>
<p>This procedure modifies the specified rule's action context to specify message execution. A rule action context is optional information associated with a rule that is interpreted by the client of the rules engine after the rule evaluates to <code>TRUE</code> for a message. In this case, the client of the rules engine is an apply component. The information in an action context is an object of type <code>SYS.RE$NV_LIST</code>, which consists of a list of name-value pairs.</p>
<p><a id="sthref652"></a>A message execution directive specified by this procedure always consists of the following name-value pair in an action context:</p>
<ul>
<li>
<p>The name is <code>APPLY$_EXECUTE</code>.</p>
</li>
<li>
<p>The value is an <code>ANYDATA</code> instance that contains <code>NO</code> as a <code>VARCHAR2</code>. When the value is <code>NO</code>, an apply component does not execute the message and does not send the message to any apply handler.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref653"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_EXECUTE(
  rule_name  IN  VARCHAR2,
  execute    IN  BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref654"></a>Parameters</p>
<div id="ARPLS65262" class="tblformal">
<p class="titleintable"><a id="sthref655"></a><a id="sthref656"></a>Table 21-18 SET_EXECUTE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_EXECUTE Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_EXECUTE." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t47">Parameter</th>
<th class="cellalignment1227" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t47" headers="r1c1-t47">
<p><code>rule_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t47 r1c2-t47">
<p>The name of the rule, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">rule_name</span></code>. For example, to specify a rule named <code>hr5</code> in the <code>hr</code> schema, enter <code>hr.hr5</code> for this parameter. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t47" headers="r1c1-t47">
<p><code>execute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t47 r1c2-t47">
<p>If <code>TRUE</code>, then the procedure removes the name-value pair with the name <code>APPLY$_EXECUTE</code> for the specified rule. Removing the name-value pair means that the apply component executes messages that satisfy the rule. If no name-value pair with name <code>APPLY$_EXECUTE</code> exists for the rule, then no action is taken.</p>
<p>If <code>FALSE</code>, then the procedure adds a name-value pair to the rule's action context. The name is <code>APPLY$_EXECUTE</code> and the value is <code>NO</code>. An apply component does not execute a message that satisfies the rule and does not send the message to any apply handler. If a name-value pair exists for the rule with the name <code>APPLY$_EXECUTE</code>, then it is removed, and a new one with the value <code>NO</code> is added.</p>
<p>If <code>NULL</code>, then the procedure raises an error.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref657"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDICGCI">Considerations for the SET_EXECUTE Procedure</a></p>
</li>
<li>
<p><a href="#CHDJEGEA">The SET_EXECUTE Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDFFIEA">The SET_EXECUTE Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDICGCI"></a><a id="ARPLS73380"></a>Considerations for the SET_EXECUTE Procedure</p>
<p>The following are considerations for using this procedure:</p>
<ul>
<li>
<p>If the message is a logical change record (LCR) and the message is not executed, then the change encapsulated in the LCR is not made to the relevant local database object. Also, if the message is not executed, then it is not sent to any apply handler.</p>
</li>
<li>
<p>Oracle Streams capture processes, propagations, and messaging clients ignore the action context created by this procedure.</p>
</li>
<li>
<p>The specified rule must be in the positive rule set for an apply component for the apply component to follow the execution directive. If the rule is in the negative rule set for an apply component, then the apply component ignores the execution directive for the rule.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDJEGEA"></a><a id="ARPLS73381"></a>The SET_EXECUTE Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDFFIEA"></a><a id="ARPLS73382"></a>The SET_EXECUTE Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS538" class="refsect2"><a id="BGBHIICJ"></a>
<hr />
<h3 class="refsect2">SET_GLOBAL_INSTANTIATION_SCN Procedure<a id="sthref658"></a><a id="sthref659"></a><a id="sthref660"></a></h3>
<p>This procedure records the specified instantiation SCN for the specified source database and, optionally, for the schemas at the source database and the tables owned by these schemas. This procedure overwrites any existing instantiation SCN for the database, and, if it sets the instantiation SCN for a schema or a table, then it overwrites any existing instantiation SCN for the schema or table.</p>
<p>This procedure gives you precise control over which DDL logical change records (DDL LCRs) from a source database are ignored and which DDL LCRs are applied by an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref661"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_GLOBAL_INSTANTIATION_SCN(
  source_database_name  IN  VARCHAR2,
  instantiation_scn     IN  NUMBER,
  apply_database_link   IN  VARCHAR2  DEFAULT NULL,
  recursive             IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref662"></a>Parameters</p>
<div id="ARPLS65263" class="tblformal">
<p class="titleintable"><a id="sthref663"></a><a id="sthref664"></a>Table 21-19 SET_GLOBAL_INSTANTIATION_SCN Procedure Parameters</p>
<table class="cellalignment1229" title="SET_GLOBAL_INSTANTIATION_SCN Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.SET_GLOBAL_INSTANTIATION_SCN." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t48">Parameter</th>
<th class="cellalignment1227" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t48" headers="r1c1-t48">
<p><code>source_database_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t48 r1c2-t48">
<p>The global name of the source database. For example, <code>DBS1.NET</code>.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code>DBS1</code> and the domain is <code>NET</code>, then the procedure specifies <code>DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t48" headers="r1c1-t48">
<p><code>instantiation_scn</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t48 r1c2-t48">
<p>The instantiation SCN. Specify <code>NULL</code> to remove the instantiation SCN metadata for the source database from the data dictionary.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t48" headers="r1c1-t48">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t48 r1c2-t48">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t48" headers="r1c1-t48">
<p><code>recursive</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t48 r1c2-t48">
<p>If <code>TRUE</code>, then the procedure sets the instantiation SCN for the source database, all schemas in the source database, and all tables owned by the schemas in the source database. This procedure selects the schemas and tables from the <code>ALL_USERS</code> and <code>ALL_TABLES</code> data dictionary views, respectively, at the source database under the security context of the current user.</p>
<p>If <code>FALSE</code>, then the procedure sets the global instantiation SCN for the source database, but does not set the instantiation SCN for any schemas or tables</p>
<p><span class="bold">Note:</span> If <code>recursive</code> is set to <code>TRUE</code>, then a database link from the destination database to the source database is required. This database link must have the same name as the global name of the source database and must be accessible to the current user. Also, a table must be accessible to the current user in either the <code>ALL_TABLES</code> or <code>DBA_TABLES</code> data dictionary view at the source database for this procedure to set the instantiation SCN for the table at the destination database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BGBJADBB"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBECGI">Instantiation SCNs and DDL LCRs</a></p>
</li>
<li>
<p><a href="#CHDIDGJG">The recursive Parameter</a></p>
</li>
<li>
<p><a href="#CHDHHHIF">Considerations for the SET_GLOBAL_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="#CHDIFDII">The SET_GLOBAL_INSTANTIATION_SCN Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDDBIHI">The SET_GLOBAL_INSTANTIATION_SCN Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1008880">SET_SCHEMA_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="#i997895">SET_TABLE_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="t_lcr.htm#BABJIDHC">LCR$_DDL_RECORD Type</a> for more information about DDL LCRs</p>
</li>
<li>
<p><a class="olink STREP117" href="../../server.112/e10705/instant.htm#STREP117"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CHDBECGI"></a><a id="ARPLS73383"></a>Instantiation SCNs and DDL LCRs</p>
<p>If the commit SCN of a DDL LCR for a database object from a source database is less than or equal to the instantiation SCN for that source database at a destination database, then the apply component at the destination database disregards the DDL LCR. Otherwise, the apply component applies the DDL LCR.</p>
<p>The global instantiation SCN specified by this procedure is used for a DDL LCR only if the DDL LCR does not have <code>object_owner</code>, <code>base_table_owner</code>, <code>and base_table_name</code> specified. For example, the global instantiation SCN set by this procedure is used for DDL LCRs with a <code>command_type</code> of <code>CREATE</code> <code>USER</code>.</p>
<p class="subhead2"><a id="CHDIDGJG"></a><a id="ARPLS73384"></a>The recursive Parameter</p>
<p>If the <code>recursive</code> parameter is set to <code>TRUE</code>, then this procedure sets the instantiation SCN for each schema at a source database and for the tables owned by these schemas. This procedure uses the <code>SET_SCHEMA_INSTANTIATION_SCN</code> procedure to set the instantiation SCN for each schema, and it uses the <code>SET_TABLE_INSTANTIATION_SCN</code> procedure to set the instantiation SCN for each table. Each schema instantiation SCN is used for DDL LCRs on the schema, and each table instantiation SCN is used for DDL LCRs and row LCRs on the table.</p>
<p>If the <code>recursive</code> parameter is set to <code>FALSE</code>, then this procedure does not set the instantiation SCN for any schemas or tables.</p>
<p class="subhead2"><a id="CHDHHHIF"></a><a id="ARPLS73385"></a>Considerations for the SET_GLOBAL_INSTANTIATION_SCN Procedure</p>
<p>The following are considerations for using this procedure:</p>
<ul>
<li>
<p>Any instantiation SCN specified by this procedure is used only for LCRs captured by a capture process. It is not used for user-created LCRs.</p>
</li>
<li>
<p>The instantiation SCN is not set for the <code>SYS</code> or <code>SYSTEM</code> schemas.</p>
</li>
</ul>
<p class="subhead2"><a id="CHDIFDII"></a><a id="ARPLS73386"></a>The SET_GLOBAL_INSTANTIATION_SCN Procedure and XStream Outbound Servers</p>
<p>Instantiation SCNs are not required for database objects processed by an outbound server. If an instantiation SCN is set for a database object, then the outbound server only sends the LCRs for the database object with SCN values that are greater than the instantiation SCN value. If a database object does not have an instantiation SCN set, then the outbound server skips the instantiation SCN check and sends all LCRs for that database object. In both cases, the outbound server only sends LCRs that satisfy its rule sets.</p>
<p>The <code>apply_database_link</code> parameter must be set to <code>NULL</code> or to the local database for this procedure to set an instantiation SCN for an outbound server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM1435" href="../../server.112/e16545/xstrm_cncpt.htm#XSTRM1435"><span class="italic">Oracle Database XStream Guide</span></a> for more information about outbound servers and instantiation SCNs</div>
<p class="subhead2"><a id="CHDDBIHI"></a><a id="ARPLS73387"></a>The SET_GLOBAL_INSTANTIATION_SCN Procedure and XStream Inbound Servers</p>
<p>Inbound servers ignore instantiation SCNs. This procedure has no effect on XStream inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS315" class="refsect2"><a id="i997574"></a>
<hr />
<h3 class="refsect2">SET_KEY_COLUMNS Procedures<a id="sthref665"></a><a id="sthref666"></a></h3>
<p>This procedure records the set of columns to be used as the substitute primary key for apply purposes and removes existing substitute primary key columns for the specified object if they exist.</p>
<p>This procedure is overloaded. The <code>column_list</code> and <code>column_table</code> parameters are mutually exclusive.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref667"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_KEY_COLUMNS(
   object_name          IN  VARCHAR2,
   column_list          IN  VARCHAR2,
   apply_database_link  IN  VARCHAR2  DEFAULT NULL);

DBMS_APPLY_ADM.SET_KEY_COLUMNS(
   object_name          IN  VARCHAR2,
   column_table         IN  DBMS_UTILITY.NAME_ARRAY,
   apply_database_link  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref668"></a>Parameters</p>
<div id="ARPLS65264" class="tblformal">
<p class="titleintable"><a id="sthref669"></a><a id="sthref670"></a>Table 21-20 SET_KEY_COLUMNS Procedure Parameters</p>
<table class="cellalignment1229" title="SET_KEY_COLUMNS Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_KEY_COLUMNS." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t51">Parameter</th>
<th class="cellalignment1227" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t51" headers="r1c1-t51">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t51 r1c2-t51">
<p>The name of the table specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default. If the apply component is applying changes to a non-Oracle database in a heterogeneous environment, then the object name is not verified.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t51" headers="r1c1-t51">
<p><code>column_list</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t51 r1c2-t51">
<p>A comma-delimited list of the columns in the table to use as the substitute primary key, with no spaces between the column names.</p>
<p>If the <code>column_list</code> parameter is empty or <code>NULL</code>, then the current set of key columns is removed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t51" headers="r1c1-t51">
<p><code>column_table</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t51 r1c2-t51">
<p>A PL/SQL associative array of type <code>DBMS_UTILITY.NAME_ARRAY</code> of the columns in the table to use as the substitute primary key. The index for <code>column_table</code> must be 1-based, increasing, dense, and terminated by a <code>NULL</code>.</p>
<p>If the <code>column_table</code> parameter is empty or <code>NULL</code>, then the current set of key columns is removed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t51" headers="r1c1-t51">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t51 r1c2-t51">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref671"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDCEEJC">Considerations for the SET_KEY_COLUMNS Procedure</a></p>
</li>
<li>
<p><a href="#BGBGCBEI">Duplicate Rows and Substitute Primary Key Columns</a></p>
</li>
<li>
<p><a href="#CHDEEDEF">The SET_KEY_COLUMNS Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDJGAGJ">The SET_KEY_COLUMNS Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDCEEJC"></a><a id="ARPLS73388"></a>Considerations for the SET_KEY_COLUMNS Procedure</p>
<p>The following are considerations for using this procedure:</p>
<ul>
<li>
<p>When not empty, the specified set of columns takes precedence over any primary key for the specified object. Do not specify substitute key columns if the object has primary key columns and you want to use those primary key columns as the key.</p>
</li>
<li>
<p>Run this procedure at the destination database. At the source database, you must specify an unconditional supplemental log group for the substitute key columns.</p>
</li>
<li>
<p>Unlike true primary keys, columns specified as substitute key column columns can contain <code>NULL</code>s. However, Oracle recommends that each column you specify as a substitute key column be a <code>NOT</code> <code>NULL</code> column. You also should create a single index that includes all of the columns in a substitute key. Following these guidelines improves performance for updates, deletes, and piecewise updates to LOBs because Oracle can locate the relevant row more efficiently.</p>
</li>
<li>
<p>Do not permit applications to update the primary key or substitute key columns of a table. This ensures that Oracle can identify rows and preserve the integrity of the data.</p>
</li>
<li>
<p>If there is neither a primary key, nor a unique index that has at least one <code>NOT</code> <code>NULL</code> column, nor a substitute key for a table, then the key consists of all of the table columns, except for columns of the following data types: LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, user-defined types (including object types, <code>REF</code>s, varrays, nested tables), and Oracle-supplied types (including <code>Any</code> types, XML types, spatial types, and media types).</p>
</li>
</ul>
<p class="subhead2"><a id="BGBGCBEI"></a><a id="ARPLS65267"></a>Duplicate Rows and Substitute Primary Key Columns</p>
<p>A table has duplicate rows when all of the column values are identical for two or more rows in the table, excluding LOB, <code>LONG</code>, and <code>LONG</code> <code>RAW</code> columns. You can specify substitute primary key columns for a table at a destination database using by the <code>SET_KEY_COLUMNS</code> procedure. When substitute primary key columns are specified for a table with duplicate rows at a destination database, and the <code>allow_duplicate_rows</code> apply component parameter is set to <code>Y</code>, meet the following requirements to keep the table data synchronized at the source and destination databases:</p>
<ul>
<li>
<p>Ensure that supplemental logging is specified at source database for the columns specified as substitute key columns at the destination database. The substitute key columns must be in an unconditional log group at the source database.</p>
</li>
<li>
<p>Ensure that the substitute key columns uniquely identify each row in the table at the destination database.</p>
</li>
</ul>
<p>The rest of this section provides more details about these requirements.</p>
<p>When there is no key for a table and the <code>allow_duplicate_rows</code> apply component parameter is set to <code>Y</code>, a single row LCR with an <code>UPDATE</code> or <code>DELETE</code> command type only is applied to one of the duplicate rows. In this case, if the table at the source database and the table at the destination database have corresponding duplicate rows, then a change that changes all of the duplicate rows at the source database also changes all the duplicate rows at the destination database when the row LCRs resulting from the change are applied.</p>
<p>For example, suppose a table at a source database has two duplicate rows. An update is performed on the duplicate rows, resulting in two row LCRs. At the destination database, one row LCR is applied to one of the duplicate rows. At this point, the rows are no longer duplicate at the destination database because one of the rows has changed. When the second row LCR is applied at the destination database, the rows are duplicate again. Similarly, if a delete is performed on these duplicate rows at the source database, then both rows are deleted at the destination database when the row LCRs resulting from the source change are applied.</p>
<p>When substitute primary key columns are specified for a table, row LCRs are identified with rows in the table during apply using the substitute primary key columns. If substitute primary key columns are specified for a table with duplicate rows at a destination database, and the <code>allow_duplicate_rows</code> apply component parameter is set to <code>Y</code>, then an update performed on duplicate rows at the source database can result in different changes when the row LCRs are applied at the destination database. Specifically, if the update does not change one of the columns specified as a substitute primary key column, then the same duplicate row can be updated multiple times at the destination database, while other duplicate rows might not be updated.</p>
<p>Also, if the substitute key columns do not identify each row in the table at the destination database uniquely, then a row LCR identified with multiple rows can update any one of the rows. In this case, the update in the row LCR might not be applied to the correct row in the table at the destination database.</p>
<p>An apply component ignores substitute primary key columns when it determines whether rows in a table are duplicates. An apply component determines that rows are duplicates only if all of the column values in the rows are identical (excluding LOB, <code>LONG</code>, and <code>LONG</code> <code>RAW</code> columns). Therefore, an apply component always raises an error if a single update or delete changes two or more nonduplicate rows in a table.</p>
<p>For example, consider a table with columns <code>c1</code>, <code>c2</code>, and <code>c3</code> on which the <code>SET_KEY_COLUMNS</code> procedure is used to designate column <code>c1</code> as the substitute primary key. If two rows have the same key value for the <code>c1</code> column, but different value for the <code>c2</code> or <code>c3</code> columns, then an apply component does not treat the rows as duplicates. If an update or delete modifies more than one row because the <code>c1</code> values in the rows are the same, then the apply component raises an error regardless of the setting for the <code>allow_duplicate_rows</code> apply component parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997629">SET_PARAMETER Procedure</a> for more information about the <code>allow_duplicate_rows</code> apply component parameter</div>
<p class="subhead2"><a id="CHDEEDEF"></a><a id="ARPLS73389"></a>The SET_KEY_COLUMNS Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDJGAGJ"></a><a id="ARPLS73390"></a>The SET_KEY_COLUMNS Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS314" class="refsect2"><a id="i997629"></a>
<hr />
<h3 class="refsect2">SET_PARAMETER Procedure<a id="sthref672"></a><a id="sthref673"></a></h3>
<p>This procedure sets an apply parameter to the specified value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref674"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_PARAMETER (
   apply_name  IN  VARCHAR2, 
   parameter   IN  VARCHAR2, 
   value       IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref675"></a>Parameters</p>
<div id="ARPLS65265" class="tblformal">
<p class="titleintable"><a id="sthref676"></a><a id="sthref677"></a>Table 21-21 SET_PARAMETER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_PARAMETER Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_PARAMETER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t53">Parameter</th>
<th class="cellalignment1227" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t53" headers="r1c1-t53">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t53 r1c2-t53">
<p>The apply component name. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t53" headers="r1c1-t53">
<p><code>parameter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t53 r1c2-t53">
<p>The name of the parameter you are setting. See <a href="#i997670">"Apply Component Parameters"</a> for a list of these parameters.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t53" headers="r1c1-t53">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t53 r1c2-t53">
<p>The value to which the parameter is set.</p>
<p>If <code>NULL</code>, then the parameter is set to its default value.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i997670"></a>Apply Component Parameters</p>
<p>The following table lists the parameters for an apply component.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2), this subprogram includes the following new parameters: <code>apply_sequence_nextval</code>, <code>compare_key_only</code>, <code>grouptransops</code>, <code>ignore_transaction</code>, and <code>max_sga_size</code>.</div>
<div id="ARPLS65266" class="tblformalwidemax">
<p class="titleintable"><a id="sthref678"></a><a id="sthref679"></a>Table 21-22 Apply Component Parameters</p>
<table class="cellalignment1226" title="Apply Component Parameters " summary="This table lists the parameters for the apply process." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t55">Parameter Name</th>
<th class="cellalignment1227" id="r1c2-t55">Possible Values</th>
<th class="cellalignment1227" id="r1c3-t55">Default</th>
<th class="cellalignment1227" id="r1c4-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t55" headers="r1c1-t55">
<p><code><a id="sthref680"></a>allow_duplicate_rows</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t55 r1c3-t55">
<p><code>N</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t55 r1c4-t55">
<p>If <code>Y</code> and more than one row is changed by a single row logical change record (row LCR) with an <code>UPDATE</code> or <code>DELETE</code> command type, then the apply component only updates or deletes one of the rows.</p>
<p>If <code>N</code>, then the apply component raises an error when it encounters a single row LCR with an <code>UPDATE</code> or <code>DELETE</code> command type that changes more than one row in a table.</p>
<p><span class="bold">Note:</span> Regardless of the setting for this parameter, apply components do not allow changes to duplicate rows for tables with LOB, <code>LONG</code>, or <code>LONG</code> <code>RAW</code> columns.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a> and <a href="#BGBGCBEI">"Duplicate Rows and Substitute Primary Key Columns"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t55" headers="r1c1-t55">
<p><code><a id="sthref681"></a>apply_sequence_nextval</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t55 r1c3-t55">
<p><code>N</code> for apply processes</p>
<p><code>Y</code> for XStream outbound servers and XStream inbound servers</p>
</td>
<td class="cellalignment1228" headers="r3c1-t55 r1c4-t55">
<p>Controls whether the apply component checks and adjusts sequence values.</p>
<p>If <code>Y</code>, then the apply component checks and adjusts sequence values.</p>
<p>For ascending sequences, setting this parameter to <code>Y</code> ensures that the destination sequence values are equal to or greater than the source sequence values.</p>
<p>For descending sequences, setting this parameter to <code>Y</code> ensures that the destination sequence values are equal to or less than the source sequence values.</p>
<p>If <code>N</code>, then the apply component does not check or adjust sequence values.</p>
<p><span class="bold">Note:</span> This parameter is intended for XStream. Do not set this parameter to <code>Y</code> for an apply process in an Oracle Streams replication environment unless XStream capabilities are enabled by the <code>DBMS_XSTREAM_ADM.ENABLE_GG_XSTREAM_FOR_STREAMS</code> procedure. See <a class="olink XSTRM72566" href="../../server.112/e16545/xstrm_xstream_adm.htm#XSTRM72566"><span class="italic">Oracle Database XStream Guide</span></a> for information about enabling XStream capabilities.</p>
<p><span class="bold">See Also:</span> <a href="d_cap_a.htm#i997253">SET_PARAMETER Procedure</a> for information about the <code>capture_sequence_nextval</code> capture process parameter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t55" headers="r1c1-t55">
<p><code><a id="sthref682"></a>commit_serialization</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t55 r1c2-t55">
<p><code>DEPENDENT_TRANSACTIONS</code> or <code>FULL</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t55 r1c3-t55">
<p><code>DEPENDENT_TRANSACTIONS</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t55 r1c4-t55">
<p>The order in which applied transactions are committed.</p>
<p>Apply servers can apply nondependent transactions at the destination database in an order that is different from the commit order at the source database. Dependent transactions are always applied at the destination database in the same order as they were committed at the source database.</p>
<p>You control whether the apply servers can apply nondependent transactions in a different order at the destination database using the <code>commit_serialization</code> apply parameter. This parameter has the following settings:</p>
<ul>
<li>
<p><code>DEPENDENT_TRANSACTIONS</code> - The apply component can commit nondependent transactions in any order. Performance is best if you specify <code>DEPENDENT_TRANSACTIONS</code>.</p>
</li>
<li>
<p><code>FULL</code> - The apply component commits applied transactions in the order in which they were committed at the source database.</p>
</li>
</ul>
<p>Regardless of the specification, applied transactions can execute in parallel subject to data dependencies and constraint dependencies.</p>
<p>If you specify <code>DEPENDENT_TRANSACTIONS</code>, then a destination database might commit changes in a different order than the source database. For example, suppose two nondependent transactions are committed at the source database in the following order:</p>
<ol>
<li>
<p>Transaction A</p>
</li>
<li>
<p>Transaction B</p>
</li>
</ol>
<p>At the destination database, these transactions might be committed in the opposite order:</p>
<ol>
<li>
<p>Transaction B</p>
</li>
<li>
<p>Transaction A</p>
</li>
</ol>
<p>If you specify <code>DEPENDENT_TRANSACTIONS</code> and there are application constraints that are not enforced by the database, then use virtual dependency definitions or add <code>RELY</code> constraints to account for the application constraints. See <a class="olink STRMS788" href="../../server.112/e17069/strms_mapply.htm#STRMS788"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about virtual dependency definitions and <span class="italic">Oracle Database Data Warehousing Guide</span> for information about <code>RELY</code> constraints.</p>
<p><span class="bold">Note:</span> The <code>NONE</code> value is deprecated for this parameter. It is replaced by the <code>DEPENDENT_TRANSACTIONS</code> value.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t55" headers="r1c1-t55">
<p><code><a id="sthref683"></a>compare_key_only</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t55 r1c3-t55">
<p><code>N</code> for apply processes</p>
<p><code>Y</code> for XStream inbound servers</p>
</td>
<td class="cellalignment1228" headers="r5c1-t55 r1c4-t55">
<p>If <code>Y</code>, then disables automatic conflict detection and only uses primary and unique key columns to identify the table row for a row LCR.</p>
<p>If <code>N</code>, then enables automatic conflict detection and uses all of the old values in a row LCR to identify the table row for a row LCR.</p>
<p><span class="bold">Note:</span> The <code>COMPARE_OLD_VALUES</code> procedure in this package can disable comparison of old values for specified columns during apply. See <a href="#i1006610">COMPARE_OLD_VALUES Procedure</a>.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a> and <a class="olink STREP365" href="../../server.112/e10705/conflict.htm#STREP365"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for information about automatic conflict detection</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t55" headers="r1c1-t55">
<p><code><a id="sthref684"></a>disable_on_error</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t55 r1c3-t55">
<p><code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t55 r1c4-t55">
<p>If <code>Y</code>, then the apply component is disabled on the first unresolved error, even if the error is not irrecoverable.</p>
<p>If <code>N</code>, then the apply component continues regardless of unresolved errors.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t55" headers="r1c1-t55">
<p><code><a id="sthref685"></a>disable_on_limit</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t55 r1c3-t55">
<p><code>N</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t55 r1c4-t55">
<p>If <code>Y</code>, then the apply component is disabled if the apply component terminates because it reached a value specified by the <code>time_limit</code> parameter or <code>transaction_limit</code> parameter.</p>
<p>If <code>N</code>, then the apply component is restarted immediately after stopping because it reached a limit.</p>
<p>When an apply component is restarted, it gets a new session identifier, and the processes associated with the apply component also get new session identifiers. However, the coordinator process number (<code>AP</code><code><span class="codeinlineitalic">nn</span></code>) remains the same.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t55" headers="r1c1-t55">
<p><code><a id="sthref686"></a>grouptransops</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t55 r1c2-t55">
<p>A positive integer from <code>1</code> to <code>10000</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t55 r1c3-t55">
<p><code>250</code> for apply processes and XStream inbound servers</p>
<p><code>10000</code> for XStream outbound servers</p>
</td>
<td class="cellalignment1228" headers="r8c1-t55 r1c4-t55">
<p>The minimum number of LCRs that can be grouped into a single transaction. The commit LCR for a transaction is not included in the LCR count for the transaction.</p>
<p>This parameter enables an apply component to group LCRs from multiple transactions into a single transaction. The apply component groups only LCRs that are part of committed transactions.</p>
<p>If a transaction has more LCRs than the setting for this parameter, then the transaction is applied as a single transaction. The apply component does not split a transaction into separate transactions.</p>
<p>This parameter only takes effect if the <code>parallelism</code> parameter setting is <code>1</code>. The <code>grouptransops</code> parameter is ignored if the <code>parallelism</code> parameter setting is greater than <code>1</code>.</p>
<p><span class="bold">Note:</span> This parameter is intended for XStream outbound servers and inbound servers. An Oracle Streams apply process ignores this parameter unless XStream capabilities are enabled by the <code>DBMS_XSTREAM_ADM.ENABLE_GG_XSTREAM_FOR_STREAMS</code> procedure. See <a class="olink XSTRM72566" href="../../server.112/e16545/xstrm_xstream_adm.htm#XSTRM72566"><span class="italic">Oracle Database XStream Guide</span></a> for information about enabling XStream capabilities.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t55" headers="r1c1-t55">
<p><code><a id="sthref687"></a>ignore_transaction</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t55 r1c2-t55">
<p>A valid source transaction ID or <code>NULL</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t55 r1c3-t55">
<p><code>NULL</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t55 r1c4-t55">
<p>Instructs the apply component to ignore the specified transaction from the source database, effective immediately.</p>
<p>Use caution when setting this parameter because ignoring a transaction might lead to data divergence between the source database and destination database.</p>
<p>To ignore multiple transactions, specify each transaction in a separate call to the <code>SET_PARAMETER</code> procedure. The <code>DBA_APPLY_PARAMETERS</code> view displays a comma-delimited list of all transactions to be ignored. To clear the list of ignored transactions, run the <code>SET_PARAMETER</code> procedure and specify <code>NULL</code> for the <code>ignore_transaction</code> parameter.</p>
<p>If <code>NULL</code>, then the apply component ignores this parameter.</p>
<p><span class="bold">Note:</span> An apply component ignores this parameter for transactions that were not captured by an Oracle Streams capture process.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t55" headers="r1c1-t55">
<p><code><a id="sthref688"></a>max_sga_size</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t55 r1c2-t55">
<p>A positive integer</p>
</td>
<td class="cellalignment1228" headers="r10c1-t55 r1c3-t55">
<p><code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t55 r1c4-t55">
<p>Controls the amount of system global area (SGA) memory allocated specifically to the apply component, in megabytes.</p>
<p>The memory is allocated for the duration of the apply component's session and is released when the apply component becomes disabled.</p>
<p><span class="bold">Note:</span> The sum of SGA memory allocated for all components on a database must be less than the value set for the <code>STREAMS_POOL_SIZE</code> initialization parameter.</p>
<p>If <code>NULL</code>, then the apply component uses the original default value. A <code>NULL</code> value has the same effect as resetting the parameter to its default value.</p>
<p><span class="bold">Note:</span> This parameter is intended for XStream. Do not use this parameter in an Oracle Streams replication environment unless XStream capabilities are enabled by the <code>DBMS_XSTREAM_ADM.ENABLE_GG_XSTREAM_FOR_STREAMS</code> procedure. See <a class="olink XSTRM72566" href="../../server.112/e16545/xstrm_xstream_adm.htm#XSTRM72566"><span class="italic">Oracle Database XStream Guide</span></a> for information about enabling XStream capabilities.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t55" headers="r1c1-t55">
<p><code><a id="sthref689"></a>maximum_scn</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t55 r1c2-t55">
<p>A valid SCN or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t55 r1c3-t55">
<p><code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t55 r1c4-t55">
<p>The apply component is disabled before applying a transaction with a commit SCN greater than or equal to the value specified.</p>
<p>If <code>INFINITE</code>, then the apply component runs regardless of the SCN value.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t55" headers="r1c1-t55">
<p><code><a id="sthref690"></a>parallelism</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t55 r1c2-t55">
<p>A positive integer</p>
</td>
<td class="cellalignment1228" headers="r12c1-t55 r1c3-t55">
<p><code>4</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t55 r1c4-t55">
<p>The number of apply servers that can concurrently apply transactions.</p>
<p>The reader server and the apply server process names are <code>AS</code><code><span class="codeinlineitalic">nn</span></code>, where <code><span class="codeinlineitalic">nn</span></code> can include letters and numbers. The total number of <code>AS</code><code><span class="codeinlineitalic">nn</span></code> processes is the value of the <code>parallelism</code> parameter plus one.</p>
<p>For example, if parallelism is set to <code>4</code>, then an apply component uses a total of five <code>AS</code><code><span class="codeinlineitalic">nn</span></code> processes. In this case, there is one reader server and four apply servers.</p>
<p>Setting the <code>parallelism</code> parameter to a number higher than the number of available operating system user processes can disable the apply component. Make sure the <code>PROCESSES</code> initialization parameter is set appropriately when you set the <code>parallelism</code> parameter.</p>
<p><span class="bold">Note:</span> When the value of this parameter is changed from <code>1</code> to a higher value for a running apply component, the apply component is stopped and restarted automatically. This can take some time depending on the size of the transactions currently being applied. When the value of this parameter is greater than <code>1</code>, and the parameter value is decreased or increased, the apply component does not restart.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t55" headers="r1c1-t55">
<p><a id="sthref691"></a><a id="sthref692"></a><code><a id="sthref693"></a>preserve_encryption</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t55 r1c3-t55">
<p><code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t55 r1c4-t55">
<p>Whether to preserve encryption for columns encrypted using transparent data encryption.</p>
<p>If <code>Y</code>, then columns in tables at the destination database must be encrypted when corresponding columns in row LCRs are encrypted. If columns are encrypted in row LCRs but the corresponding columns are not encrypted in the tables at the destination database, then an error is raised when the apply component tries to apply the row LCRs.</p>
<p>If <code>N</code>, then columns in tables at the destination database do not need to be encrypted when corresponding columns in row LCRs are encrypted. If columns are encrypted in row LCRs but the corresponding columns are not encrypted in the tables at the destination database, then the apply component applies the changes in the row LCRs.</p>
<p><span class="bold">Note:</span> When the value of this parameter is changed for a running apply component, the apply component is stopped and restarted automatically. This can take some time depending on the size of the transactions currently being applied.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t55" headers="r1c1-t55">
<p><code><a id="sthref694"></a>rtrim_on_implicit_conversion</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t55 r1c3-t55">
<p><code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t55 r1c4-t55">
<p>Whether to remove blank padding from the right end of a column when automatic data type conversion is performed during apply.</p>
<p>If <code>Y</code>, then blank padding is removed when a <code>CHAR</code> or <code>NCHAR</code> source column in a row LCR is converted to a <code>VARCHAR2</code>, <code>NVARCHAR2</code>, or <code>CLOB</code> column in a table.</p>
<p>If <code>N</code>, then blank padding is preserved in the column.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a> and <a class="olink STRMS181" href="../../server.112/e17069/strms_apply.htm#STRMS181"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information about automatic data type conversion during apply</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t55" headers="r1c1-t55">
<p><code><a id="sthref695"></a>startup_seconds</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t55 r1c2-t55">
<p><code>0</code>, a positive integer, or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t55 r1c3-t55">
<p><code>0</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t55 r1c4-t55">
<p>The maximum number of seconds to wait for another instantiation of the same apply component to finish. If the other instantiation of the same apply component does not finish within this time, then the apply component does not start.</p>
<p>If <code>INFINITE</code>, then an apply component does not start until another instantiation of the same apply component finishes.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t55" headers="r1c1-t55">
<p><code><a id="sthref696"></a>time_limit</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t55 r1c2-t55">
<p>A positive integer or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t55 r1c3-t55">
<p><code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t55 r1c4-t55">
<p>The apply component stops as soon as possible after the specified number of seconds since it started.</p>
<p>If <code>INFINITE</code>, then the apply component continues to run until it is stopped explicitly.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t55" headers="r1c1-t55">
<p><code><a id="sthref697"></a>trace_level</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t55 r1c2-t55">
<p><code>0</code> or a positive integer</p>
</td>
<td class="cellalignment1228" headers="r17c1-t55 r1c3-t55">
<p><code>0</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t55 r1c4-t55">
<p>Set this parameter only under the guidance of Oracle Support Services.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t55" headers="r1c1-t55">
<p><code><a id="sthref698"></a>transaction_limit</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t55 r1c2-t55">
<p>A positive integer or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t55 r1c3-t55">
<p><code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t55 r1c4-t55">
<p>The apply component stops after applying the specified number of transactions.</p>
<p>If <code>INFINITE</code>, then the apply component continues to run regardless of the number of transactions applied.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t55" headers="r1c1-t55">
<p><code><a id="sthref699"></a>txn_age_spill_threshold</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t55 r1c2-t55">
<p>A positive integer or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t55 r1c3-t55">
<p><code>900</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t55 r1c4-t55">
<p>The apply component begins to spill messages from memory to hard disk for a particular transaction when the amount of time that any message in the transaction has been in memory exceeds the specified number. The parameter specifies the age in seconds.</p>
<p>When the reader server spills messages from memory, the messages are stored in a database table on the hard disk. These messages are not spilled from memory to a queue table.</p>
<p>Message spilling occurs at the transaction level. For example, if this parameter is set to <code>900</code>, and the reader server of an apply component detects that one message in a transaction has been in memory longer than 900 seconds, then all of the messages in the transaction spill from memory to hard disk.</p>
<p>If <code>INFINITE</code>, then the apply component does not spill messages to the hard disk based on the age of the messages.</p>
<p>Query the <code>DBA_APPLY_SPILL_TXN</code> data dictionary view for information about transactions spilled by an apply component.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t55" headers="r1c1-t55">
<p><code><a id="sthref700"></a>txn_lcr_spill_threshold</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t55 r1c2-t55">
<p>A positive integer or <code>INFINITE</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t55 r1c3-t55">
<p><code>10000</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t55 r1c4-t55">
<p>The apply component begins to spill messages from memory to hard disk for a particular transaction when the number of messages in memory for the transaction exceeds the specified number. The number of messages in first chunk of messages spilled from memory equals the number specified for this parameter, and the number of messages spilled in future chunks is either 100 or the number specified for this parameter, whichever is less.</p>
<p>If the reader server of an apply component has the specified number of messages in memory for a particular transaction, then when it detects the next message for this transaction, it spills the messages that are in memory to the hard disk. For example, if this parameter is set to <code>10000</code>, and a transaction has 10,200 messages, then the reader server handles the transaction in the following way:</p>
<ol>
<li>
<p>Reads the first 10,000 messages in the transaction into memory</p>
</li>
<li>
<p>Spills messages 1 - 10,000 to hard disk when it detects message 10,000</p>
</li>
<li>
<p>Reads the next 100 messages in the transaction into memory</p>
</li>
<li>
<p>Spills messages 10,001 - 10,100 to hard disk when it detects message 10,100</p>
</li>
<li>
<p>Reads the next 100 messages in the transaction into memory</p>
</li>
</ol>
<p>The apply component applies the first 10,100 messages from the hard disk and the last 100 messages from memory.</p>
<p>When the reader server spills messages from memory, the messages are stored in a database table on the hard disk. These messages are not spilled from memory to a queue table.</p>
<p>Message spilling occurs at the transaction level. For example, if this parameter is set to <code>10000</code>, and the reader server of an apply component is assembling two transactions, one with 7,500 messages and another with 8,000 messages, then it does not spill any messages.</p>
<p>If <code>INFINITE</code>, then the apply component does not spill messages to the hard disk based on the number of messages in a transaction.</p>
<p>Query the <code>DBA_APPLY_SPILL_TXN</code> data dictionary view for information about transactions spilled by an apply component.</p>
<p><span class="bold">See Also:</span> <a href="#CHDIAACF">"Usage Notes"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t55" headers="r1c1-t55">
<p><code>write_alert_log</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t55 r1c2-t55">
<p><code>Y</code> or <code>N</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t55 r1c3-t55">
<p><code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t55 r1c4-t55">
<p>If <code>Y</code>, then the apply component writes a message to the alert log on exit.</p>
<p>If <code>N</code>, then the apply component does not write a message to the alert log on exit.</p>
<p>The message specifies the reason why the apply component stopped.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwidemax" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDIAACF"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDJBHFG">Delays Are Possible Before New Parameter Settings Take Effect</a></p>
</li>
<li>
<p><a href="#CHDEICIB">Parameters Interpreted as Positive Integers</a></p>
</li>
<li>
<p><a href="#CHDIFHJD">Parameters with a System Change Number (SCN) Setting</a></p>
</li>
<li>
<p><a href="#CHDEBAJD">The SET_PARAMETER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDHFHGA">The SET_PARAMETER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDJBHFG"></a><a id="ARPLS73391"></a>Delays Are Possible Before New Parameter Settings Take Effect</p>
<p>When you alter a parameter value, a short amount of time might pass before the new value for the parameter takes effect.</p>
<p class="subhead2"><a id="CHDEICIB"></a><a id="ARPLS73392"></a>Parameters Interpreted as Positive Integers</p>
<p>For all parameters that are interpreted as positive integers, the maximum possible value is <code>4,294,967,295</code>. Where applicable, specify <code>INFINITE</code> for larger values.</p>
<p class="subhead2"><a id="CHDIFHJD"></a><a id="ARPLS73393"></a>Parameters with a System Change Number (SCN) Setting</p>
<p>For parameters that require an SCN setting, any valid SCN value can be specified.</p>
<p class="subhead2"><a id="CHDEBAJD"></a><a id="ARPLS73394"></a>The SET_PARAMETER Procedure and XStream Outbound Servers</p>
<p>Outbound servers ignore the settings for the following apply parameters:</p>
<ul>
<li>
<p><code>allow_duplicate_rows</code></p>
</li>
<li>
<p><code>commit_serialization</code></p>
</li>
<li>
<p><code>compare_key_only</code></p>
</li>
<li>
<p><code>disable_on_error</code></p>
</li>
<li>
<p><code>parallelism</code></p>
</li>
<li>
<p><code>preserve_encryption</code></p>
</li>
<li>
<p><code>rtrim_on_implicit_conversion</code></p>
</li>
</ul>
<p>The <code>commit_serialization</code> parameter is always set to <code>FULL</code> for an outbound server, and the parallelism parameter is always set to <code>1</code> for an outbound server.</p>
<p>You can use the other apply parameters with outbound servers.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
Using XStream requires purchasing a license for the Oracle GoldenGate product. See <a class="olink XSTRM72545" href="../../server.112/e16545/xstrm_intro.htm#XSTRM72545"><span class="italic">Oracle Database XStream Guide</span></a>.</div>
<p class="subhead2"><a id="CHDHFHGA"></a><a id="ARPLS73395"></a>The SET_PARAMETER Procedure and XStream Inbound Servers</p>
<p>Inbound servers ignore the settings for the <code>ignore_transaction</code> and <code>maximum_scn</code> apply component parameters. You can use all of the other apply component parameters with inbound servers.</p>
<p>The default setting for the <code>compare_key_only</code> parameter for an inbound server is&nbsp;<code>Y</code>.</p>
<p>The default setting for the <code>parallelism</code> parameter for an inbound server is <code>4</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
Using XStream requires purchasing a license for the Oracle GoldenGate product. See <a class="olink XSTRM72545" href="../../server.112/e16545/xstrm_intro.htm#XSTRM72545"><span class="italic">Oracle Database XStream Guide</span></a>.</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS589" class="refsect2"><a id="i1008880"></a>
<hr />
<h3 class="refsect2">SET_SCHEMA_INSTANTIATION_SCN Procedure<a id="sthref701"></a><a id="sthref702"></a><a id="sthref703"></a></h3>
<p>This procedure records the specified instantiation SCN for the specified schema in the specified source database and, optionally, for the tables owned by the schema at the source database. This procedure overwrites any existing instantiation SCN for the schema, and, if it sets the instantiation SCN for a table, it overwrites any existing instantiation SCN for the table.</p>
<p>This procedure gives you precise control over which DDL logical change records (LCRs) for a schema are ignored and which DDL LCRs are applied by an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref704"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN(
  source_schema_name    IN  VARCHAR2,
  source_database_name  IN  VARCHAR2,
  instantiation_scn     IN  NUMBER,
  apply_database_link   IN  VARCHAR2  DEFAULT NULL,
  recursive             IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref705"></a>Parameters</p>
<div id="ARPLS65268" class="tblformal">
<p class="titleintable"><a id="sthref706"></a><a id="sthref707"></a>Table 21-23 SET_SCHEMA_INSTANTIATION_SCN Procedure Parameters</p>
<table class="cellalignment1229" title="SET_SCHEMA_INSTANTIATION_SCN Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.SET_SCHEMA_INSTANTIATION_SCN." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t58">Parameter</th>
<th class="cellalignment1227" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t58" headers="r1c1-t58">
<p><code>source_schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t58 r1c2-t58">
<p>The name of the source schema. For example, <code>hr</code>.</p>
<p>When setting an instantiation SCN for schema, always specify the name of the schema at the source database, even if a rule-based transformation or apply handler is configured to change the schema name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t58" headers="r1c1-t58">
<p><code>source_database_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t58 r1c2-t58">
<p>The global name of the source database. For example, <code>DBS1.NET</code>.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code>DBS1</code> and the domain is <code>NET</code>, then the procedure specifies <code>DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t58" headers="r1c1-t58">
<p><code>instantiation_scn</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t58 r1c2-t58">
<p>The instantiation SCN. Specify <code>NULL</code> to remove the instantiation SCN metadata for the source schema from the data dictionary.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t58" headers="r1c1-t58">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t58 r1c2-t58">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t58" headers="r1c1-t58">
<p><code>recursive</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t58 r1c2-t58">
<p>If <code>TRUE</code>, then the procedure sets the instantiation SCN for the specified schema and all tables owned by the schema in the source database. This procedure selects the tables owned by the specified schema from the <code>ALL_TABLES</code> data dictionary view at the source database under the security context of the current user.</p>
<p>If <code>FALSE</code>, then the procedure sets the instantiation SCN for specified schema, but does not set the instantiation SCN for any tables</p>
<p><span class="bold">Note:</span> If <code>recursive</code> is set to <code>TRUE</code>, then a database link from the destination database to the source database is required. This database link must have the same name as the global name of the source database and must be accessible to the current user. Also, a table must be accessible to the current user in either the <code>ALL_TABLES</code> or <code>DBA_TABLES</code> data dictionary view at the source database for this procedure to set the instantiation SCN for the table at the destination database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDDDFHE"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDGEBAB">The SET_SCHEMA_INSTANTIATION_SCN Procedure and LCRs</a></p>
</li>
<li>
<p><a href="#CHDEACDG">Instantiation SCNs and DDL LCRs</a></p>
</li>
<li>
<p><a href="#CHDDJHEA">The recursive Parameter</a></p>
</li>
<li>
<p><a href="#CHDEJJGE">The SET_SCHEMA_INSTANTIATION_SCN Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDEDAGI">The SET_SCHEMA_INSTANTIATION_SCN Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBHIICJ">SET_GLOBAL_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="#i997895">SET_TABLE_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="t_lcr.htm#BABJIDHC">LCR$_DDL_RECORD Type</a> for more information about DDL LCRs</p>
</li>
<li>
<p><a class="olink STREP117" href="../../server.112/e10705/instant.htm#STREP117"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CHDGEBAB"></a><a id="ARPLS73396"></a>The SET_SCHEMA_INSTANTIATION_SCN Procedure and LCRs</p>
<p>Any instantiation SCN specified by this procedure is used only for LCRs captured by a capture process. It is not used for user-created LCRs.</p>
<p class="subhead2"><a id="CHDEACDG"></a><a id="ARPLS73397"></a>Instantiation SCNs and DDL LCRs</p>
<p>If the commit SCN of a DDL LCR for a database object in a schema from a source database is less than or equal to the instantiation SCN for that database object at a destination database, then the apply component at the destination database disregards the DDL LCR. Otherwise, the apply component applies the DDL LCR.</p>
<p>The schema instantiation SCN specified by this procedure is used on the following types of DDL LCRs:</p>
<ul>
<li>
<p>DDL LCRs with a <code>command_type</code> of <code>CREATE</code> <code>TABLE</code></p>
</li>
<li>
<p>DDL LCRs with a non-<code>NULL</code> <code>object_owner</code> specified and neither <code>base_table_owner</code> nor <code>base_table_name</code> specified.</p>
</li>
</ul>
<p>For example, the schema instantiation SCN set by this procedure is used for a DDL LCR with a <code>command_type</code> of <code>CREATE</code> <code>TABLE</code> and <code>ALTER</code> <code>USER</code>.</p>
<p>The schema instantiation SCN specified by this procedure is not used for DDL LCRs with a <code>command_type</code> of <code>CREATE</code> <code>USER</code>. A global instantiation SCN is needed for such DDL LCRs.</p>
<p class="subhead2"><a id="CHDDJHEA"></a><a id="ARPLS73398"></a>The recursive Parameter</p>
<p>If the <code>recursive</code> parameter is set to <code>TRUE</code>, then this procedure sets the table instantiation SCN for each table at the source database owned by the schema. This procedure uses the <code>SET_TABLE_INSTANTIATION_SCN</code> procedure to set the instantiation SCN for each table. Each table instantiation SCN is used for DDL LCRs and row LCRs on the table.</p>
<p>If the <code>recursive</code> parameter is set to <code>FALSE</code>, then this procedure does not set the instantiation SCN for any tables.</p>
<p class="subhead2"><a id="CHDEJJGE"></a><a id="ARPLS73399"></a>The SET_SCHEMA_INSTANTIATION_SCN Procedure and XStream Outbound Servers</p>
<p>Instantiation SCNs are not required for database objects processed by an outbound server. If an instantiation SCN is set for a database object, then the outbound server only sends the LCRs for the database object with SCN values that are greater than the instantiation SCN value. If a database object does not have an instantiation SCN set, then the outbound server skips the instantiation SCN check and sends all LCRs for that database object. In both cases, the outbound server only sends LCRs that satisfy its rule sets.</p>
<p>The <code>apply_database_link</code> parameter must be set to <code>NULL</code> or to the local database for this procedure to set an instantiation SCN for an outbound server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM1435" href="../../server.112/e16545/xstrm_cncpt.htm#XSTRM1435"><span class="italic">Oracle Database XStream Guide</span></a> for more information about outbound servers and instantiation SCNs</div>
<p class="subhead2"><a id="CHDEDAGI"></a><a id="ARPLS73400"></a>The SET_SCHEMA_INSTANTIATION_SCN Procedure and XStream Inbound Servers</p>
<p>Inbound servers ignore instantiation SCNs. This procedure has no effect on XStream inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS325" class="refsect2"><a id="i997895"></a>
<hr />
<h3 class="refsect2">SET_TABLE_INSTANTIATION_SCN Procedure<a id="sthref708"></a><a id="sthref709"></a><a id="sthref710"></a></h3>
<p>This procedure records the specified instantiation SCN for the specified table in the specified source database. This procedure overwrites any existing instantiation SCN for the particular table.</p>
<p>This procedure gives you precise control over which logical change records (LCRs) for a table are ignored and which LCRs are applied by an apply component.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref711"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN(
  source_object_name    IN  VARCHAR2,
  source_database_name  IN  VARCHAR2,
  instantiation_scn     IN  NUMBER,
  apply_database_link   IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref712"></a>Parameters</p>
<div id="ARPLS65269" class="tblformal">
<p class="titleintable"><a id="sthref713"></a><a id="sthref714"></a>Table 21-24 SET_TABLE_INSTANTIATION_SCN Procedure Parameters</p>
<table class="cellalignment1229" title="SET_TABLE_INSTANTIATION_SCN Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_TABLE_INSTANTIATION_SCN." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t61">Parameter</th>
<th class="cellalignment1227" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t61" headers="r1c1-t61">
<p><code>source_object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t61 r1c2-t61">
<p>The name of the source object specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>When setting an instantiation SCN for a database object, always specify the name of the schema and database object at the source database, even if a rule-based transformation or apply handler is configured to change the schema name or database object name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t61" headers="r1c1-t61">
<p><code>source_database_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t61 r1c2-t61">
<p>The global name of the source database. For example, <code>DBS1.NET</code>.</p>
<p>If you do not include the domain name, then the procedure appends it to the database name automatically. For example, if you specify <code>DBS1</code> and the domain is <code>NET</code>, then the procedure specifies <code>DBS1.NET</code> automatically.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t61" headers="r1c1-t61">
<p><code>instantiation_scn</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t61 r1c2-t61">
<p>The instantiation SCN. Specify <code>NULL</code> to remove the instantiation SCN metadata for the source table from the data dictionary.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t61" headers="r1c1-t61">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t61 r1c2-t61">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database of a local apply component is a non-Oracle database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref715"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDCBCIJ">Instantiation SCNs and LCRs</a></p>
</li>
<li>
<p><a href="#CHDGDDGD">The SET_TABLE_INSTANTIATION_SCN Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDICGGI">The SET_TABLE_INSTANTIATION_SCN Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDCBCIJ"></a><a id="ARPLS73401"></a>Instantiation SCNs and LCRs</p>
<p>If the commit SCN of an LCR for a table from a source database is less than or equal to the instantiation SCN for that table at some destination database, then the apply component at the destination database disregards the LCR. Otherwise, the apply component applies the LCR.</p>
<p>The table instantiation SCN specified by this procedure is used on the following types of LCRs:</p>
<ul>
<li>
<p>Row LCRs for the table</p>
</li>
<li>
<p>DDL LCRs that have a non-<code>NULL</code> <code>base_table_owner</code> and <code>base_table_name</code> specified, except for DDL LCRs with a <code>command_type</code> of <code>CREATE</code> <code>TABLE</code></p>
</li>
</ul>
<p>For example, the table instantiation SCN set by this procedure is used for DDL LCRs with a <code>command_type</code> of <code>ALTER</code> <code>TABLE</code> or <code>CREATE</code> <code>TRIGGER</code>.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The instantiation SCN specified by this procedure is used only for LCRs captured by a capture process. It is not used for user-created LCRs.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#BGBHIICJ">SET_GLOBAL_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="#i1008880">SET_SCHEMA_INSTANTIATION_SCN Procedure</a></p>
</li>
<li>
<p><a href="t_lcr.htm#i997304">LCR$_ROW_RECORD Type</a> for more information about row LCRs</p>
</li>
<li>
<p><a href="t_lcr.htm#BABJIDHC">LCR$_DDL_RECORD Type</a> for more information about DDL LCRs</p>
</li>
<li>
<p><a class="olink STREP117" href="../../server.112/e10705/instant.htm#STREP117"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="CHDGDDGD"></a><a id="ARPLS73402"></a>The SET_TABLE_INSTANTIATION_SCN Procedure and XStream Outbound Servers</p>
<p>Instantiation SCNs are not required for database objects processed by an outbound server. If an instantiation SCN is set for a database object, then the outbound server only sends the LCRs for the database object with SCN values that are greater than the instantiation SCN value. If a database object does not have an instantiation SCN set, then the outbound server skips the instantiation SCN check and sends all LCRs for that database object. In both cases, the outbound server only sends LCRs that satisfy its rule sets.</p>
<p>The <code>apply_database_link</code> parameter must be set to <code>NULL</code> or to the local database for this procedure to set an instantiation SCN for an outbound server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink XSTRM1435" href="../../server.112/e16545/xstrm_cncpt.htm#XSTRM1435"><span class="italic">Oracle Database XStream Guide</span></a> for more information about outbound servers and instantiation SCNs</div>
<p class="subhead2"><a id="CHDICGGI"></a><a id="ARPLS73403"></a>The SET_TABLE_INSTANTIATION_SCN Procedure and XStream Inbound Servers</p>
<p>Inbound servers ignore instantiation SCNs. This procedure has no effect on XStream inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS323" class="refsect2"><a id="i997985"></a>
<hr />
<h3 class="refsect2">SET_UPDATE_CONFLICT_HANDLER Procedure<a id="sthref716"></a><a id="sthref717"></a></h3>
<p>This procedure adds, modifies, or removes a prebuilt update conflict handler for the specified object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref718"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
   object_name          IN  VARCHAR2,
   method_name          IN  VARCHAR2,
   resolution_column    IN  VARCHAR2,
   column_list          IN  DBMS_UTILITY.NAME_ARRAY,
   apply_database_link  IN  VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref719"></a>Parameters</p>
<div id="ARPLS65270" class="tblformal">
<p class="titleintable"><a id="sthref720"></a><a id="sthref721"></a>Table 21-25 SET_UPDATE_CONFLICT_HANDLER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_UPDATE_CONFLICT_HANDLER Procedure Parameters " summary="This table describes the parameters of DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t65">Parameter</th>
<th class="cellalignment1227" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t65" headers="r1c1-t65">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t65 r1c2-t65">
<p>The schema and name of the table, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">object_name</span></code>, for which an update conflict handler is being added, modified, or removed.</p>
<p>For example, if an update conflict handler is being added for table <code>employees</code> owned by user <code>hr</code>, then specify <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t65" headers="r1c1-t65">
<p><code>method_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t65 r1c2-t65">
<p>Type of update conflict handler to create.</p>
<p>You can specify one of the prebuilt handlers, which determine whether the column list from the source database is applied for the row or whether the values in the row at the destination database are retained:</p>
<ul>
<li>
<p><code>MAXIMUM</code>: Applies the column list from the source database if it has the greater value for the resolution column. Otherwise, retains the values at the destination database.</p>
</li>
<li>
<p><code>MINIMUM</code>: Applies the column list from the source database if it has the lesser value for the resolution column. Otherwise, retains the values at the destination database.</p>
</li>
<li>
<p><code>OVERWRITE</code>: Applies the column list from the source database, overwriting the column values at the destination database.</p>
</li>
<li>
<p><code>DISCARD</code>: Retains the column list from the destination database, discarding the column list from the source database.</p>
</li>
</ul>
<p>If <code>NULL</code>, then the procedure removes any existing update conflict handler with the same <code>object_name</code>, <code>resolution_column</code>, and <code>column_list</code>. If non-<code>NULL</code>, then the procedure replaces any existing update conflict handler with the same <code>object_name</code> and <code>resolution_column</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t65" headers="r1c1-t65">
<p><code>resolution_column</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t65 r1c2-t65">
<p>Name of the column used to uniquely identify an update conflict handler. For the <code>MAXIMUM</code> and <code>MINIMUM</code> prebuilt methods, the resolution column is also used to resolve the conflict. The resolution column must be one of the columns listed in the <code>column_list</code> parameter.</p>
<p><code>NULL</code> is not allowed for this parameter. For the <code>OVERWRITE</code> and <code>DISCARD</code> prebuilt methods, you can specify any column in the column list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t65" headers="r1c1-t65">
<p><code>column_list</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t65 r1c2-t65">
<p>List of columns for which the conflict handler is called.</p>
<p>The same column cannot be in more than one column list.</p>
<p>If a conflict occurs for one or more of the columns in the list when an apply component tries to apply a row logical change record (row LCR), then the conflict handler is called to resolve the conflict. The conflict handler is not called if a conflict occurs only for columns that are not in the list.</p>
<p><span class="bold">Note:</span> Prebuilt update conflict handlers do not support LOB, <code>LONG</code>, <code>LONG</code> <code>RAW</code>, user-defined type, and Oracle-suppled type columns. Therefore, you should not include these types of columns in the <code>column_list</code> parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t65" headers="r1c1-t65">
<p><code>apply_database_link</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t65 r1c2-t65">
<p>The name of the database link to a non-Oracle database. This parameter should be set only when the destination database is a non-Oracle database.</p>
<p><span class="bold">Note:</span> Currently, conflict handlers are not supported when applying changes to a non-Oracle database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref722"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBBECG">Modifying an Existing Update Conflict Handler</a></p>
</li>
<li>
<p><a href="#CHDIBDHF">Removing an Existing Update Conflict Handler</a></p>
</li>
<li>
<p><a href="#CHDIJIBI">Series of Actions for Conflicts</a></p>
</li>
<li>
<p><a href="#CHDBJDJD">Procedure DML Handlers for Conflicts</a></p>
</li>
<li>
<p><a href="#CHDFHGAF">A Column Can Be in Only One Column List</a></p>
</li>
<li>
<p><a href="#CHDDEFGF">Update Conflict Handlers and Non-Oracle Databases</a></p>
</li>
<li>
<p><a href="#CHDIHCHI">The SET_UPDATE_CONFLICT_HANDLER Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDEJDJD">The SET_UPDATE_CONFLICT_HANDLER Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STREP001" href="../../server.112/e10705/conflict.htm#STREP001"><span class="italic">Oracle Streams Replication Administrator's Guide</span></a> for more information about prebuilt and custom update conflict handlers</div>
<p class="subhead2"><a id="CHDBBECG"></a><a id="ARPLS73404"></a>Modifying an Existing Update Conflict Handler</p>
<p>If you want to modify an existing update conflict handler, then you specify the table and resolution column of an the existing update conflict handler. You can modify the prebuilt method or the column list.</p>
<p class="subhead2"><a id="CHDIBDHF"></a><a id="ARPLS73405"></a>Removing an Existing Update Conflict Handler</p>
<p>If you want to remove an existing update conflict handler, then specify <code>NULL</code> for the prebuilt method and specify the table, column list, and resolution column of the existing update conflict handler.</p>
<p class="subhead2"><a id="CHDIJIBI"></a><a id="ARPLS73406"></a>Series of Actions for Conflicts</p>
<p>If an update conflict occurs, then Oracle completes the following series of actions:</p>
<ol>
<li>
<p>Calls the appropriate update conflict handler to resolve the conflict</p>
</li>
<li>
<p>If no update conflict handler is specified or if the update conflict handler cannot resolve the conflict, then calls the appropriate error handler for the apply component, table, and operation to handle the error</p>
</li>
<li>
<p>If no error handler is specified or if the error handler cannot resolve the error, then raises an error and moves the transaction containing the row LCR that caused the error to the error queue</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDAGHF">"Signature of a DML Handler Procedure or Error Handler Procedure"</a> for information about setting an error handler</div>
</li>
</ol>
<p class="subhead2"><a id="CHDBJDJD"></a><a id="ARPLS73407"></a>Procedure DML Handlers for Conflicts</p>
<p>If you cannot use a prebuilt update conflict handler to meet your requirements, then you can create a PL/SQL procedure to use as a custom conflict handler. You use the <code>SET_DML_HANDLER</code> procedure to designate one or more custom conflict handlers for a particular table. In addition, a custom conflict handler can process LOB columns and use LOB assembly.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997367">SET_DML_HANDLER Procedure</a></div>
<p class="subhead2"><a id="CHDFHGAF"></a><a id="ARPLS73408"></a>A Column Can Be in Only One Column List</p>
<p>When a column is in a column list, and you try to add the same column to another column list, this procedure returns the following error:</p>
<pre>
ORA-00001: UNIQUE CONSTRAINT (SYS.APPLY$_CONF_HDLR_COLUMNS_UNQ1) VIOLATED
</pre>
<p class="subhead2"><a id="CHDDEFGF"></a><a id="ARPLS73409"></a>Update Conflict Handlers and Non-Oracle Databases</p>
<p>Setting an update conflict handler for an apply component that is applying to a non-Oracle database is not supported.</p>
<p class="subhead2"><a id="CHDIHCHI"></a><a id="ARPLS73410"></a>The SET_UPDATE_CONFLICT_HANDLER Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDEJDJD"></a><a id="ARPLS73411"></a>The SET_UPDATE_CONFLICT_HANDLER Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref723"></a>Examples</p>
<p>The following is an example for setting an update conflict handler for the <code>employees</code> table in the <code>hr</code> schema:</p>
<pre>
DECLARE
  cols  DBMS_UTILITY.NAME_ARRAY;
BEGIN
  cols(1) := 'salary';
  cols(2) := 'commission_pct';
  DBMS_APPLY_ADM.SET_UPDATE_CONFLICT_HANDLER(
    object_name           =&gt;  'hr.employees',
    method_name           =&gt;  'MAXIMUM',
    resolution_column     =&gt;  'salary',
    column_list           =&gt;  cols);
END;
/
</pre>
<p>This example sets a conflict handler that is called if a conflict occurs for the <code>salary</code> or <code>commission_pct</code> column in the <code>hr.employees</code> table. If such a conflict occurs, then the <code>salary</code> column is evaluated to resolve the conflict. If a conflict occurs only for a column that is not in the column list, such as the <code>job_id</code> column, then this conflict handler is not called.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS834" class="refsect2"><a id="BGBIFHEH"></a>
<hr />
<h3 class="refsect2">SET_VALUE_DEPENDENCY Procedure<a id="sthref724"></a><a id="sthref725"></a></h3>
<p>This procedure sets or removes a value dependency. A value dependency is a virtual dependency definition that defines a relationship between the columns of two or more tables.</p>
<p>An apply component uses the name of a value dependencies to detect dependencies between row logical change records (row LCRs) that contain the columns defined in the value dependency. Value dependencies can define virtual foreign key relationships between tables, but, unlike foreign key relationships, value dependencies can involve more than two database objects.</p>
<p>This procedure is overloaded. The <code>attribute_list</code> and <code>attribute_table</code> parameters are mutually exclusive.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink STRMS207" href="../../server.112/e17069/strms_adapply.htm#STRMS207"><span class="italic">Oracle Streams Concepts and Administration</span></a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref726"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
   dependency_name IN VARCHAR2,
   object_name     IN VARCHAR2,
   attribute_list  IN VARCHAR2);

DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY(
   dependency_name IN VARCHAR2,
   object_name     IN VARCHAR2,
   attribute_table IN DBMS_UTILITY.NAME_ARRAY);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref727"></a>Parameters</p>
<div id="ARPLS65271" class="tblformal">
<p class="titleintable"><a id="sthref728"></a><a id="sthref729"></a>Table 21-26 SET_VALUE_DEPENDENCY Procedure Parameters</p>
<table class="cellalignment1229" title="SET_VALUE_DEPENDENCY Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.SET_VALUE_DEPENDENCY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t70">Parameter</th>
<th class="cellalignment1227" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t70" headers="r1c1-t70">
<p><code>dependency_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t70 r1c2-t70">
<p>The name of the value dependency.</p>
<p>If a dependency with the specified name does not exist, then it is created.</p>
<p>If a dependency with the specified name exists, then the specified object and attributes are added to the dependency.</p>
<p>If <code>NULL</code>, an error is raised.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t70" headers="r1c1-t70">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t70 r1c2-t70">
<p>The name of the table, specified as <code>[</code><code><span class="codeinlineitalic">schema_name</span></code><code>.]</code><code><span class="codeinlineitalic">table_name</span></code>. For example, <code>hr.employees</code>. If the schema is not specified, then the current user is the default.</p>
<p>If <code>NULL</code> and the specified dependency exists, then the dependency is removed. If <code>NULL</code> and the specified dependency does not exist, then an error is raised.</p>
<p>If <code>NULL</code>, then <code>attribute_list</code> and <code>attribute_table</code> also must be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t70" headers="r1c1-t70">
<p><code>attribute_list</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t70 r1c2-t70">
<p>A comma-delimited list of column names in the table. There must be no spaces between entries.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t70" headers="r1c1-t70">
<p><code>attribute_table</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t70 r1c2-t70">
<p>A PL/SQL associative array of type <code>DBMS_UTILITY.NAME_ARRAY</code> that contains names of columns in the table. The first column name should be at position 1, the second at position 2, and so on. The table does not need to be <code>NULL</code> terminated.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref730"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDBGFIB">The SET_VALUE_DEPENDENCY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDHHGDG">The SET_VALUE_DEPENDENCY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDBGFIB"></a><a id="ARPLS73412"></a>The SET_VALUE_DEPENDENCY Procedure and XStream Outbound Servers</p>
<p>This procedure has no effect on XStream outbound servers.</p>
<p class="subhead2"><a id="CHDHHGDG"></a><a id="ARPLS73413"></a>The SET_VALUE_DEPENDENCY Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS509" class="refsect2"><a id="i998078"></a>
<hr />
<h3 class="refsect2">START_APPLY Procedure<a id="sthref731"></a><a id="sthref732"></a></h3>
<p>This procedure directs the apply component to start applying messages.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref733"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.START_APPLY(
   apply_name  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref734"></a>Parameter</p>
<div id="ARPLS65272" class="tblformal">
<p class="titleintable"><a id="sthref735"></a><a id="sthref736"></a>Table 21-27 START_APPLY Procedure Parameter</p>
<table class="cellalignment1229" title="START_APPLY Procedure Parameter" summary="This table describes the parameters of DBMS_APPLY_ADM.START_APPLY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t71">Parameter</th>
<th class="cellalignment1227" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t71" headers="r1c1-t71">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t71 r1c2-t71">
<p>The apply component name. A <code>NULL</code> setting is not allowed. Do not specify an owner.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref737"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDFHJGD">Apply Component Status</a></p>
</li>
<li>
<p><a href="#CHDEGFBF">The START_APPLY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDJEEAC">The START_APPLY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDFHJGD"></a><a id="ARPLS73414"></a>Apply Component Status</p>
<p>The apply component status is persistently recorded. Hence, if the status is <code>ENABLED</code>, then the apply component is started upon database instance startup. An apply component (<code>a</code><code><span class="codeinlineitalic">nnn</span></code>) is an Oracle background process. The enqueue and dequeue state of <code>DBMS_AQADM.START_QUEUE</code> and <code>DBMS_AQADM.STOP_QUEUE</code> have no effect on the start status of an apply component.</p>
<p class="subhead2"><a id="CHDEGFBF"></a><a id="ARPLS73415"></a>The START_APPLY Procedure and XStream Outbound Servers</p>
<p>This procedure functions the same way for apply processes and outbound servers.</p>
<p class="subhead2"><a id="CHDJEEAC"></a><a id="ARPLS73416"></a>The START_APPLY Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS539" class="refsect2"><a id="i998119"></a>
<hr />
<h3 class="refsect2">STOP_APPLY Procedure<a id="sthref738"></a><a id="sthref739"></a></h3>
<p>This procedure stops the apply component from applying messages and rolls back any unfinished transactions being applied.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref740"></a>Syntax</p>
<pre>
DBMS_APPLY_ADM.STOP_APPLY(
   apply_name  IN  VARCHAR2,
   force       IN  BOOLEAN   DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref741"></a>Parameters</p>
<div id="ARPLS65273" class="tblformal">
<p class="titleintable"><a id="sthref742"></a><a id="sthref743"></a>Table 21-28 STOP_APPLY Procedure Parameters</p>
<table class="cellalignment1229" title="STOP_APPLY Procedure Parameters" summary="This table describes the parameters of DBMS_APPLY_ADM.STOP_APPLY." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t72">Parameter</th>
<th class="cellalignment1227" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t72" headers="r1c1-t72">
<p><code>apply_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t72 r1c2-t72">
<p>The apply component name. A <code>NULL</code> setting is not allowed. Do not specify an owner.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t72" headers="r1c1-t72">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t72 r1c2-t72">
<p>If <code>TRUE</code>, then the procedure stops the apply component as soon as possible.</p>
<p>If <code>FALSE</code>, then the procedure stops the apply component after ensuring that there are no gaps in the set of applied transactions.</p>
<p>The behavior of the apply component depends on the setting specified for the <code>force</code> parameter and the setting specified for the <code>commit_serialization</code> apply component parameter. See <a href="#i998157">"Usage Notes"</a> for more information.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="i998157"></a>Usage Notes</p>
<p>The following usage notes apply to this procedure:</p>
<ul>
<li>
<p><a href="#CHDJAFGH">Apply Component Status</a></p>
</li>
<li>
<p><a href="#CHDFJAIE">Queue Subprograms Have No Effect on Apply Component Status</a></p>
</li>
<li>
<p><a href="#CHDBEGDB">The STOP_APPLY force Parameter and the commit_serialization Apply Parameter</a></p>
</li>
<li>
<p><a href="#CHDIIDAD">The STOP_APPLY Procedure and XStream Outbound Servers</a></p>
</li>
<li>
<p><a href="#CHDDJHEF">The STOP_APPLY Procedure and XStream Inbound Servers</a></p>
</li>
</ul>
<p class="subhead2"><a id="CHDJAFGH"></a><a id="ARPLS73417"></a>Apply Component Status</p>
<p>The apply component status is persistently recorded. Hence, if the status is <code>DISABLED</code> or <code>ABORTED</code>, then the apply component is not started upon database instance startup.</p>
<p class="subhead2"><a id="CHDFJAIE"></a><a id="ARPLS73418"></a>Queue Subprograms Have No Effect on Apply Component Status</p>
<p>The enqueue and dequeue state of <code>DBMS_AQADM.START_QUEUE</code> and <code>DBMS_AQADM.STOP_QUEUE</code> have no effect on the <code>STOP</code> status of an apply component.</p>
<p class="subhead2"><a id="CHDBEGDB"></a><a id="ARPLS73419"></a>The STOP_APPLY force Parameter and the commit_serialization Apply Parameter</p>
<p>The following table describes apply component behavior for each setting of the <code>force</code> parameter in the <code>STOP_APPLY</code> procedure and the <code>commit_serialization</code> apply component parameter. In all cases, the apply component rolls back any unfinished transactions when it stops.</p>
<div class="inftblhruleinformal">
<table class="cellalignment1226" title="Apply Process Behavior for each setting of the Force Parameter in the STOP_APPLY procedure and the commit_serialization apply process parameter" summary="The table describes apply process behavior for each setting of the force parameter in the STOP_APPLY procedure and the commit_serialization apply process parameter." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t73">force</th>
<th class="cellalignment1227" id="r1c2-t73">commit_serialization</th>
<th class="cellalignment1227" id="r1c3-t73">Apply Component Behavior</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t73" headers="r1c1-t73"><code>TRUE</code></td>
<td class="cellalignment1228" headers="r2c1-t73 r1c2-t73"><code>FULL</code></td>
<td class="cellalignment1228" headers="r2c1-t73 r1c3-t73">The apply component stops immediately and does not apply any unfinished transactions.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t73" headers="r1c1-t73"><code>TRUE</code></td>
<td class="cellalignment1228" headers="r3c1-t73 r1c2-t73"><code>DEPENDENT_TRANSACTIONS</code></td>
<td class="cellalignment1228" headers="r3c1-t73 r1c3-t73">When the apply component stops, some transactions that have been applied locally might have committed at the source database at a later point in time than some transactions that have not been applied locally.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t73" headers="r1c1-t73"><code>FALSE</code></td>
<td class="cellalignment1228" headers="r4c1-t73 r1c2-t73"><code>FULL</code></td>
<td class="cellalignment1228" headers="r4c1-t73 r1c3-t73">The apply component stops after applying the next uncommitted transaction in the commit order, if any such transaction is in progress.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t73" headers="r1c1-t73"><code>FALSE</code></td>
<td class="cellalignment1228" headers="r5c1-t73 r1c2-t73"><code>DEPENDENT_TRANSACTIONS</code></td>
<td class="cellalignment1228" headers="r5c1-t73 r1c3-t73">Before stopping, the apply component applies all of the transactions that have a commit time that is earlier than the applied transaction with the most recent commit time.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblhruleinformal" -->
<p>For example, assume that the <code>commit_serialization</code> apply component parameter is set to <code>DEPENDENT_TRANSACTIONS</code> and there are three transactions: transaction 1 has the earliest commit time, transaction 2 is committed after transaction 1, and transaction 3 has the latest commit time. Also assume that an apply component has applied transaction 1 and transaction 3 and is in the process of applying transaction 2 when the <code>STOP_APPLY</code> procedure is run. Given this scenario, if the <code>force</code> parameter is set to <code>TRUE</code>, then transaction 2 is not applied, and the apply component stops (transaction 2 is rolled back). If, however, the <code>force</code> parameter is set to <code>FALSE</code>, then transaction 2 is applied before the apply component stops.</p>
<p>A different scenario would result if the <code>commit_serialization</code> apply component parameter is set to <code>FULL</code>. For example, assume that the <code>commit_serialization</code> apply component parameter is set to <code>FULL</code> and there are three transactions: transaction&nbsp;A has the earliest commit time, transaction B is committed after transaction A, and transaction C has the latest commit time. In this case, the apply component has applied transaction A and is in the process of applying transactions B and C when the <code>STOP_APPLY</code> procedure is run. Given this scenario, if the <code>force</code> parameter is set to <code>TRUE</code>, then transactions B and C are not applied, and the apply component stops (transactions B and C are rolled back). If, however, the <code>force</code> parameter is set to <code>FALSE</code>, then transaction B is applied before the apply component stops, and transaction C is rolled back.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i997629">SET_PARAMETER Procedure</a> for more information about the <code>commit_serialization</code> apply component parameter</div>
<p class="subhead2"><a id="CHDIIDAD"></a><a id="ARPLS73420"></a>The STOP_APPLY Procedure and XStream Outbound Servers</p>
<p>This procedure functions the same way for apply processes and outbound servers.</p>
<p class="subhead2"><a id="CHDDJHEF"></a><a id="ARPLS73421"></a>The STOP_APPLY Procedure and XStream Inbound Servers</p>
<p>This procedure functions the same way for apply processes and inbound servers.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_appinf.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_aq.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
