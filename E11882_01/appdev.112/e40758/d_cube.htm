<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_CUBE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:3Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_csx_admin.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_cube_advise.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">45/265</span> <!-- End Header -->
<div id="ARPLS218" class="chapter"><a id="CFHGDJAA"></a>
<h1 class="chapter"><span class="secnum">41</span> DBMS_CUBE</h1>
<p><a id="sthref1877"></a><a id="sthref1878"></a><a id="sthref1879"></a><code>DBMS_CUBE</code> contains subprograms that create OLAP cubes and dimensions, and that load and process the data for querying.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAUG" href="../../olap.112/e17123/toc.htm"><span class="italic">Oracle OLAP User's Guide</span></a> regarding use of the OLAP option to support business intelligence and analytical applications</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CFHJBEEI">Using DBMS_CUBE</a></p>
</li>
<li>
<p><a href="#CACEFFFF">Using SQL Aggregation Management</a></p>
</li>
<li>
<p><a href="#CACDIDII">Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span></a></p>
</li>
<li>
<p><a href="#CHDFIFIA">Summary of DBMS_CUBE Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CFHJBEEI"></a>
<hr />
<div id="ARPLS65728" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_CUBE</h2>
<p>Cubes and cube dimensions are first class data objects that support multidimensional analytics. They are stored in a container called an analytic workspace. Multidimensional objects and analytics are available with the OLAP option to Oracle Database.</p>
<p>Cubes can be enabled as cube materialized views for automatic refresh of the cubes and dimensions, and for query rewrite. Several <code>DBMS_CUBE</code> subprograms support the creation and maintenance of cube materialized views as a replacement for relational materialized views. These subprograms are discussed in <a href="#CACEFFFF">"Using SQL Aggregation Management"</a>.</p>
<p>The metadata for cubes and dimensions is defined in XML documents, called <span class="italic">templates</span>, which you can derive from relational materialized views using the <code>CREATE_CUBE</code> or <code>DERIVE_FROM_MVIEW</code> functions. Using a graphical tool named Analytic Workspace Manager, you can enhance the cube with analytic content or create the metadata for new cubes and cube dimensions from scratch.</p>
<p>Several other <code>DBMS_CUBE</code> subprograms provide a SQL alternative to Analytic Workspace Manager for creating an analytic workspace from an XML template and for refreshing the data stored in cubes and dimensions. The <code>IMPORT_XML</code> procedure creates an analytic workspace with its cubes and cube dimensions from an XML template. The <code>BUILD</code> procedure loads data into the cubes and dimensions from their data sources and performs whatever processing steps are needed to prepare the data for querying.</p>
<div id="ARPLS73170" class="refsect2">
<hr />
<a id="sthref1880"></a>
<h3 class="refsect2">Security Model</h3>
<p>The following roles and system privileges are required to use this package:</p>
<p class="itemizedlisttitle">To create dimensional objects in the user's own schema:&nbsp;</p>
<ul>
<li>
<p><a id="sthref1882"></a><a id="sthref1883"></a><code>OLAP_USER</code> role</p>
</li>
<li>
<p><a id="sthref1884"></a><code>CREATE SESSION</code> privilege</p>
</li>
</ul>
<p class="itemizedlisttitle">To create dimensional objects in different schemas:&nbsp;</p>
<ul>
<li>
<p><a id="sthref1886"></a><code>OLAP_DBA</code> role</p>
</li>
<li>
<p><a id="sthref1887"></a><code>CREATE SESSION</code> privilege</p>
</li>
</ul>
<p class="itemizedlisttitle">To create cube materialized views in the user's own schema:&nbsp;</p>
<ul>
<li>
<p><a id="sthref1889"></a><code>CREATE MATERIALIZED VIEW</code> privilege</p>
</li>
<li>
<p><a id="sthref1890"></a><code>CREATE DIMENSION</code> privilege</p>
</li>
<li>
<p><a id="sthref1891"></a><code>ADVISOR</code> privilege</p>
</li>
</ul>
<p class="itemizedlisttitle">To create cube materialized views in different schemas:&nbsp;</p>
<ul>
<li>
<p><a id="sthref1893"></a><code>CREATE ANY MATERIALIZED VIEW</code> privilege</p>
</li>
<li>
<p><a id="sthref1894"></a><code>CREATE ANY DIMENSION</code> privilege</p>
</li>
<li>
<p><a id="sthref1895"></a><code>ADVISOR</code> privilege</p>
</li>
</ul>
<p>If the source tables are in a different schema, then the owner of the dimensional objects needs <code>SELECT</code> object privileges on those tables.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACEFFFF"></a>
<hr />
<div id="ARPLS65729" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1896"></a><a id="sthref1897"></a><a id="sthref1898"></a><a id="sthref1899"></a>Using SQL Aggregation Management</h2>
<p>SQL Aggregation Management is a group of PL/SQL subprograms in <code>DBMS_CUBE</code> that supports the rapid deployment of cube materialized views from existing relational materialized views. Cube materialized views are cubes that have been enhanced to use the automatic refresh and query rewrite features of Oracle Database. A single cube materialized view can replace many of the relational materialized views of summaries on a fact table, providing uniform response time to all summary data.</p>
<p>Cube materialized views bring the fast update and fast query capabilities of the OLAP option to applications that query summaries of detail relational tables. The summary data is generated and stored in a cube, and query rewrite automatically redirects queries to the cube materialized views. Applications experience excellent querying performance.</p>
<p>In the process of creating the cube materialized views, <code>DBMS_CUBE</code> also creates a fully functional analytic workspace including a cube and the cube dimensions. The cube stores the data for a cube materialized view instead of the table that stores the data for a relational materialized view. A cube can also support a wide range of analytic functions that enhance the database with information-rich content.</p>
<p>Cube materialized views are registered in the data dictionary along with all other materialized views. A <a id="sthref1900"></a><code>CB$</code> prefix identifies a cube materialized view.</p>
<p>The <code>DBMS_CUBE</code> subprograms also support life-cycle management of cube materialized views.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLAUG" href="../../olap.112/e17123/toc.htm"><span class="italic">Oracle OLAP User's Guide</span></a> for more information about cube materialized views and enhanced OLAP analytics.</div>
<div id="ARPLS65730" class="refsect2">
<hr />
<a id="sthref1901"></a>
<h3 class="refsect2">Subprograms in SQL Aggregation Management</h3>
<p>These subprograms are included in SQL Aggregation Management:</p>
<ul>
<li>
<p><a href="#CACEIBFJ">CREATE_MVIEW Function</a></p>
</li>
<li>
<p><a href="#CACCHGHD">DERIVE_FROM_MVIEW Function</a></p>
</li>
<li>
<p><a href="#CACEDEEI">DROP_MVIEW Procedure</a></p>
</li>
<li>
<p><a href="#CACICBGF">REFRESH_MVIEW Procedure</a></p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65731" class="refsect2"><a id="CACIDICJ"></a>
<hr />
<a id="CACJCFDI"></a>
<h3 class="refsect2">Requirements for the Relational Materialized View</h3>
<p>SQL Aggregation Management uses an existing relational materialized view to derive all the information needed to generate a cube materialized view. The relational materialized view determines the detail level of data that is stored in the cube materialized view. The related relational dimension objects determine the scope of the aggregates, from the lowest level specified in the GROUP BY clause of the materialized view subquery, to the highest level of the dimension hierarchy.</p>
<p>The relational materialized view must conform to these requirements:</p>
<ul>
<li>
<p>Explicit <code>GROUP BY</code> clause for one or more columns.</p>
</li>
<li>
<p>No expressions in the select list or <code>GROUP BY</code> clause.</p>
</li>
<li>
<p>At least one of these numeric aggregation methods: <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, or <code>AVG</code>.</p>
</li>
<li>
<p>No outer joins.</p>
</li>
<li>
<p>Summary keys with at least one simple column associated with a relational dimension.</p>
<p><span class="bolditalic">or</span></p>
<p>Summary keys with at least one simple column and no hierarchies or levels.</p>
</li>
<li>
<p>Numeric data type of any type for the fact columns. All facts are converted to <code>NUMBER</code>.</p>
</li>
<li>
<p>Eligible for rewrite. <code>REWRITE_CAPABILITY</code> should be <code>GENERAL</code>; it cannot be <code>NONE</code>. Refer to the <code>ALL_MVIEWS</code> entry in the <a class="olink REFRN20139" href="../../server.112/e40402/statviews_1153.htm#REFRN20139"><span class="italic">Oracle Database Reference</span></a>.</p>
</li>
<li>
<p>Cannot use the <code>DISTINCT</code> or <code>UNIQUE</code> keywords with an aggregate function in the defining query. For example, <code>AVG(DISTINCT units)</code> causes an error in <code>STRICT</code> mode and is ignored in <code>LOOSE</code> mode.</p>
</li>
</ul>
<p>You can choose between two modes when rendering the cube materialized view, <code>LOOSE</code> and <code>STRICT</code>. In <code>STRICT</code> mode, any deviation from the requirements raises an exception and prevents the materialized view from being created. In <code>LOOSE</code> mode (the default), some deviations are allowed, but they affect the content of the materialized view. These elements in the relational materialized view generate warning messages:</p>
<ul>
<li>
<p>Complex expressions in the defining query are ignored and do not appear in the cube materialized view.</p>
</li>
<li>
<p>The <code>AVG</code> function is changed to <code>SUM</code> and <code>COUNT</code>.</p>
</li>
<li>
<p>The <code>COUNT</code> function without a <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, or <code>AVG</code> function is ignored.</p>
</li>
<li>
<p>The <code>STDDEV</code> and <code>VARIANCE</code> functions are ignored.</p>
</li>
</ul>
<p>You can also choose how conditions in the <code>WHERE</code> clause are filtered. When filtering is turned off, the conditions are ignored. When turned on, valid conditions are rendered in the cube materialized view, but asymmetric conditions among dimension levels raise an exception.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65732" class="refsect2">
<hr />
<a id="sthref1902"></a>
<h3 class="refsect2">Permissions for Managing and Querying Cube Materialized Views</h3>
<p>To create cube materialized views, you must have these privileges:</p>
<ul>
<li>
<p><code>CREATE [ANY] MATERIALIZED VIEW</code> privilege</p>
</li>
<li>
<p><code>CREATE [ANY] DIMENSION</code> privilege</p>
</li>
<li>
<p><code>ADVISOR</code> privilege</p>
</li>
</ul>
<p>To access cube materialized views from another schema using query rewrite, you must have these privileges:</p>
<ul>
<li>
<p><code>GLOBAL QUERY REWRITE</code> privilege</p>
</li>
<li>
<p><code>SELECT</code> privilege on the relational source tables</p>
</li>
<li>
<p><code>SELECT</code> privilege on the analytic workspace (<code>AW$</code><code><span class="codeinlineitalic">name</span></code>) that supports the cube materialized view</p>
</li>
<li>
<p><code>SELECT</code> privilege on the cube</p>
</li>
<li>
<p><code>SELECT</code> privilege on the dimensions of the cube</p>
</li>
</ul>
<p>Note that you need <code>SELECT</code> privileges on the database objects that <span class="italic">support</span> the cube materialized views, but not on the cube materialized views.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS65733" class="refsect2">
<hr />
<a id="sthref1903"></a>
<h3 class="refsect2">Example of SQL Aggregation Management</h3>
<p>All examples for the SQL Aggregate Management subprograms use the sample Sales History schema, which is installed in Oracle Database with two relational materialized views: <code>CAL_MONTH_SALES_MV</code> and <code>FWEEK_PSCAT_SALES_MV</code>.</p>
<div id="ARPLS65734" class="refsect3"><a id="sthref1904"></a>
<h4 class="refsect3">About Relational Materialized View CAL_MONTH_SALES_MV</h4>
<p>This example uses <code>CAL_MONTH_SALES_MV</code> as the basis for creating a cube materialized view. The following query was used to create <code>CAL_MONTH_SALES_MV</code>. <code>CAL_MONTH_SALES_MV</code> summarizes the daily sales data stored in the <code>SALES</code> table by month.</p>
<pre>
SELECT query FROM user_mviews 
     WHERE mview_name='CAL_MONTH_SALES_MV';
 
QUERY
--------------------------------------------
SELECT   t.calendar_month_desc
  ,        sum(s.amount_sold) AS dollars
  FROM     sales s
  ,        times t
  WHERE    s.time_id = t.time_id
  GROUP BY t.calendar_month_desc
</pre>
<p><code>DBMS_CUBE</code> uses relational dimensions to derive levels and hierarchies for the cube materialized view. The <code>SH</code> schema has relational dimensions for most dimension tables in the schema, as shown by the following query.</p>
<pre>
SELECT dimension_name FROM user_dimensions;
 
DIMENSION_NAME
-------------------------------------
CUSTOMERS_DIM
PRODUCTS_DIM
TIMES_DIM
CHANNELS_DIM
PROMOTIONS_DIM
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS65735" class="refsect3"><a id="sthref1905"></a>
<h4 class="refsect3">Creating the Cube Materialized View</h4>
<p>This PL/SQL script uses the <a id="sthref1906"></a><code>CREATE_MVIEW</code> function to create a cube materialized view from <code>CAL_MONTH_SALES_MV</code>. <code>CREATE_MVIEW</code> sets the optional <code>BUILD</code> parameter to refresh the cube materialized view immediately.</p>
<pre>
SET serverout ON format wrapped
 
DECLARE
     salesaw  varchar2(30);
          
BEGIN
     salesaw := dbms_cube.create_mview('SH', 'CAL_MONTH_SALES_MV',
                'build=immediate');
END;
/
</pre>
<p>These messages confirm that the script created and refreshed <code>CB$CAL_MONTH_SALES</code> successfully:</p>
<pre>
Completed refresh of cube mview "SH"."CB$CAL_MONTH_SALES" at 20081112 08:42:58.0
03.
Created cube organized materialized view "CB$CAL_MONTH_SALES" for rewrite at 200
81112 08:42:58.004.
</pre>
<p>The following query lists the materialized views in the <code>SH</code> schema:</p>
<pre>
SELECT mview_name FROM user_mviews;

MVIEW_NAME
------------------------------
CB$CAL_MONTH_SALES
CB$TIMES_DIM_D1_CAL_ROLLUP
CAL_MONTH_SALES_MV
FWEEK_PSCAT_SALES_MV
</pre>
<p>Two new materialized views are registered in the data dictionary:</p>
<ul>
<li>
<p><code>CB$CAL_MONTH_SALES</code>: Cube materialized view</p>
</li>
<li>
<p><code>CB$TIMES_DIM_D1_CAL_ROLLUP</code>: Cube dimension materialized view for the <code>TIME_DIM</code> Calendar Rollup hierarchy</p>
</li>
</ul>
<p>Cube dimension materialized views support refresh of the cube materialized view. You do not directly administer dimension materialized views.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS65736" class="refsect3"><a id="sthref1907"></a>
<h4 class="refsect3">Disabling the Relational Materialized Views</h4>
<p>After creating a cube materialized view, disable query rewrite on all relational materialized views for the facts now supported by the cube materialized view. You can drop them when you are sure that you created the cube materialized view with the optimal parameters.</p>
<pre>
ALTER MATERIALIZED VIEW cal_month_sales_mv DISABLE QUERY REWRITE;
 
Materialized view altered.
</pre>
<p>You can also use the <code>DISABLEQRW</code> parameter in the <code>CREATE_MVIEW</code> function, which disables query rewrite on the source materialized view as described in <a href="#CACDIIJC">Table 41-7</a>.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS65737" class="refsect3"><a id="sthref1908"></a>
<h4 class="refsect3">Creating Execution Plans for Cube Materialized Views</h4>
<p>You can create execution plans for cube materialized views the same as for relational materialized views. The following command generates an execution plan for a query against the <code>SALES</code> table, which contains data at the day level. The answer set requires data summarized by quarter. Query rewrite would not use the original relational materialized view for this query, because its data is summarized by month. However, query rewrite can use the new cube materialized view for summary data for months, quarters, years, and all years.</p>
<pre>
EXPLAIN PLAN FOR SELECT
           t.calendar_quarter_desc,
           sum(s.amount_sold) AS dollars
  FROM     sales s,
           times t
  WHERE    s.time_id = t.time_id
  AND      t.calendar_quarter_desc LIKE '2001%'
  GROUP BY t.calendar_quarter_desc
  ORDER BY t.calendar_quarter_desc;
</pre>
<p>The query returns these results:</p>
<pre>
CALENDAR_QUARTER_DESC    DOLLARS
--------------------- ----------
2001-01               6547097.44
2001-02               6922468.39
2001-03               7195998.63
2001-04               7470897.52
</pre>
<p>The execution plan shows that query rewrite returned the summary data from the cube materialized view, <code>CB$CAL_MONTH_SALES</code>, instead of recalculating it from the <code>SALES</code> table.</p>
<pre>
SELECT plan_table_output FROM TABLE(dbms_xplan.display());

PLAN_TABLE_OUTPUT
---------------------------------------------------------------------------------------------------------------
Plan hash value: 2999729407

-----------------------------------------------------------------------------------------------------
| Id  | Operation                      | Name               | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT               |                    |     1 |    30 |     3  (34)| 00:00:01 |
|   1 |  SORT GROUP BY                 |                    |     1 |    30 |     3  (34)| 00:00:01 |
|*  2 |   MAT_VIEW REWRITE CUBE ACCESS | CB$CAL_MONTH_SALES |     1 |    30 |     2   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - filter("CB$CAL_MONTH_SALES"."D1_CALENDAR_QUARTER_DESC" LIKE '2001%' AND
              "CB$CAL_MONTH_SALES"."SYS_GID"=63)

15 rows selected.
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS65738" class="refsect3"><a id="sthref1909"></a>
<h4 class="refsect3">Maintaining Cube Materialized Views</h4>
<p><a id="sthref1910"></a>You can create a cube materialized view that refreshes automatically. However, you can force a refresh at any time using the <a href="#CACICBGF">REFRESH_MVIEW Procedure</a>:</p>
<pre>
BEGIN
     dbms_cube.refresh_mview('SH', 'CB$CAL_MONTH_SALES');
END;
/ 

Completed refresh of cube mview "SH"."CB$CAL_MONTH_SALES" at 20081112
14:30:59.534.
</pre>
<p><a id="sthref1911"></a>If you want to drop a cube materialized view, use the <a href="#CACEDEEI">DROP_MVIEW Procedure</a> so that all supporting database objects (analytic workspace, cube, cube dimensions, and so forth) are also dropped:</p>
<pre>
BEGIN
     dbms_cube.drop_mview('SH', 'CB$CAL_MONTH_SALES');
END;
/ 

Dropped cube organized materialized view "SH"."CAL_MONTH_SALES" including
container analytic workspace "SH"."CAL_MONTH_SALES_AW" at 20081112 13:38:47.878.
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS65739" class="refsect3"><a id="sthref1912"></a>
<h4 class="refsect3">New Database Objects</h4>
<p>The <code>CREATE_MVIEW</code> function creates several first class database objects in addition to the cube materialized views. You can explore these objects through the data dictionary by querying views such as <code>ALL_CUBES</code> and <code>ALL_CUBE_DIMENSIONS</code>.</p>
<p>This example created the following supporting objects:</p>
<ul>
<li>
<p>Analytic workspace <code>CAL_MONTH_SALES_AW</code> (<code>AW$CAL_MONTH_SALES_AW</code> table)</p>
</li>
<li>
<p>Cube <code>CAL_MONTH_SALES</code></p>
</li>
<li>
<p>Cube dimension <code>TIMES_DIM_D1</code></p>
</li>
<li>
<p>Dimension hierarchy <code>CAL_ROLLUP</code></p>
</li>
<li>
<p>Dimension levels <code>ALL_TIMES_DIM</code>, <code>YEAR</code>, <code>QUARTER</code>, and <code>MONTH</code></p>
</li>
<li>
<p>Numerous attributes for levels in the <code>CAL_ROLLUP</code> hierarchy</p>
</li>
</ul>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACDIDII"></a>
<hr />
<div id="ARPLS73453" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1"><a id="sthref1913"></a>Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span></h2>
<p>You can upgrade an Oracle OLAP 10<span class="italic">g</span> analytic workspace to OLAP 11<span class="italic">g</span> by saving the metadata in an XML template and using it to create a new analytic workspace. The original analytic workspace remains accessible and unchanged by the upgrade process.</p>
<div class="infoboxnotealso">
<p class="notep1">Tip:</p>
Oracle recommends using Analytic Workspace Manager for performing upgrades. See the <a class="olink OLAUG200" href="../../olap.112/e17123/start.htm#OLAUG200"><span class="italic">Oracle OLAP User's Guide</span></a>.</div>
<p>These subprograms in <code>DBMS_CUBE</code> support the upgrade process:</p>
<ul>
<li>
<p><a href="#CAEBEIDA">CREATE_EXPORT_OPTIONS Procedure</a></p>
</li>
<li>
<p><a href="#CAEEJGCH">CREATE_IMPORT_OPTIONS Procedure</a></p>
</li>
<li>
<p><a href="#CACFDHAC">EXPORT_XML Procedure</a></p>
</li>
<li>
<p><a href="#CACIEHDC">EXPORT_XML_TO_FILE Procedure</a></p>
</li>
<li>
<p><a href="#CHDEDJIH">IMPORT_XML Procedure</a></p>
</li>
<li>
<p><a href="#CACGGGJC">INITIALIZE_CUBE_UPGRADE Procedure</a></p>
</li>
<li>
<p><a href="#CAEHHHBI">UPGRADE_AW Procedure</a></p>
</li>
</ul>
<p class="itemizedlisttitle">Prerequisites:&nbsp;</p>
<ul>
<li>
<p>The OLAP 10<span class="italic">g</span> analytic workspace can use CWM metadata or OLAP standard form (AWXML) metadata.</p>
</li>
<li>
<p>Customizations to the OLAP 10<span class="italic">g</span> analytic workspace may not be exported to the XML template. You must re-create them in OLAP 11<span class="italic">g</span>.</p>
</li>
<li>
<p>The original relational source data must be available to load into the new analytic workspace. If the data is in a different schema or the table names are different, then you must remap the dimensional objects to the new relational sources after the upgrade.</p>
</li>
<li>
<p>You can create the OLAP 11<span class="italic">g</span> analytic workspace in the same schema as the OLAP 10<span class="italic">g</span> analytic workspace. However, if you prefer to create it in a different schema, then create a new user with the following privileges:</p>
<ul>
<li>
<p>SELECT privileges on the OLAP 10<span class="italic">g</span> analytic workspace (<code>GRANT SELECT ON</code> <code><span class="codeinlineitalic">schema</span></code><code>.AW$</code><code><span class="codeinlineitalic">analytic_workspace</span></code>).</p>
</li>
<li>
<p>SELECT privileges on all database tables and views that contain the source data for the OLAP 10<span class="italic">g</span> analytic workspace.</p>
</li>
<li>
<p>Appropriate privileges for an OLAP administrator.</p>
</li>
<li>
<p>Same default tablespace as the Oracle 10<span class="italic">g</span> user.</p>
</li>
</ul>
<p>See the <a class="olink OLAUG9119" href="../../olap.112/e17123/start.htm#OLAUG9119"><span class="italic">Oracle OLAP User's Guide</span></a>.</p>
</li>
</ul>
<div id="ARPLS73454" class="refsect2">
<hr />
<a id="sthref1915"></a>
<h3 class="refsect2">Correcting Naming Conflicts</h3>
<p>The namespaces are different in OLAP 11<span class="italic">g</span> and OLAP 10<span class="italic">g</span>. For a successful upgrade, you must identify any 10<span class="italic">g</span> object names that are used multiple times under the 11<span class="italic">g</span> naming rules and provide unique names for them.</p>
<p>The following namespaces control the uniqueness of OLAP object names in Oracle 11<span class="italic">g</span>:</p>
<ul>
<li>
<p><span class="bold">Schema</span>: The names of cubes, dimensions, and measure folders must be unique within a schema. They cannot conflict with the names of tables, views, indexes, relational dimensions, or any other first class objects. However, these OLAP 11<span class="italic">g</span> object names do not need to be distinct from 10<span class="italic">g</span> object names, because they are in different namespaces.</p>
</li>
<li>
<p><span class="bold">Cube</span>: The names of measures must be unique within a cube.</p>
</li>
<li>
<p><span class="bold">Dimension</span>: The names of hierarchies, levels, and attributes must be unique within a dimension. For example, a dimension cannot have a hierarchy named Customers and a level named Customers.</p>
</li>
</ul>
<p>You can use an initialization table and a rename table to rename objects in the upgraded 11<span class="italic">g</span> analytic workspace.</p>
<div id="ARPLS73455" class="refsect3"><a id="CAEJAGAA"></a>
<h4 class="refsect3">Initialization Table</h4>
<p>The <code>INITIALIZE_CUBE_UPGRADE</code> procedure identifies ambiguous names under the OLAP 11<span class="italic">g</span> naming rules. For example, a 10<span class="italic">g</span> dimension might have a hierarchy and a level with the same name. Because hierarchies and levels are in the same 11<span class="italic">g</span> namespace, the name is not unique in 11<span class="italic">g</span>; to an 11<span class="italic">g</span> client, the hierarchy and the level cannot be differentiated by name.</p>
<p><code>INITIALIZE_CUBE_UPGRADE</code> creates and populates a table named <code>CUBE_UPGRADE_INFO</code> with unique names for these levels, hierarchies, and attributes. By using the unique names provided in the table, an 11<span class="italic">g</span> client can browse the OLAP 11<span class="italic">g</span> metadata. You cannot attach an OLAP 11<span class="italic">g</span> client to the analytic workspace or perform an upgrade without a <code>CUBE_UPGRADE_INFO</code> table, if the 10<span class="italic">g</span> metadata contains ambiguous names.</p>
<p>You can edit <code>CUBE_UPGRADE_INFO</code> to change the default unique names to names of your choosing. You can also add rows to change the names of any other objects. When using an 11<span class="italic">g</span> client, you see the new object names. When using an 10<span class="italic">g</span> client, you see the original names. However, the <code>INITIALIZE_CUBE_UPGRADE</code> procedure overwrites this table, so you may prefer to enter customizations in a rename table.</p>
<p>During an upgrade from OLAP 10<span class="italic">g,</span> the unique object names in <code>CUBE_UPGRADE_INFO</code> are used as the names of 11<span class="italic">g</span> objects in the new analytic workspace. However, <code>INITIALIZE_CUBE_UPGRADE</code> does not automatically provide unique names for cubes, dimensions, and measure folders. To complete an upgrade, you must assure that these objects have unique names within the 11<span class="italic">g</span> namespace. You can provide these objects with new names in the <code>CUBE_UPGRADE_INFO</code> table or in a rename table.</p>
<p>OLAP 11<span class="italic">g</span> clients automatically use <code>CUBE_UPGRADE_INFO</code> when it exists in the same schema as the OLAP 10<span class="italic">g</span> analytic workspace.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CACGGGJC">"INITIALIZE_CUBE_UPGRADE Procedure"</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS73456" class="refsect3"><a id="CAEBEIDI"></a>
<h4 class="refsect3">Rename Table</h4>
<p>You can create a rename table that contains new object names for an OLAP 11<span class="italic">g</span> analytic workspace. You can then use the rename table in the <code>CREATE_IMPORT_OPTIONS</code> and <code>UPGRADE_AW</code> procedures.</p>
<p>When upgrading within the same schema, you must provide a unique name for the 11<span class="italic">g</span> analytic workspace. The <code>UPGRADE_AW</code> procedure provides a parameter for this purpose; otherwise, you must provide the new name in the rename table. The duplication of cube names does not create ambiguity because the 11<span class="italic">g</span> cubes are created in a different namespace than the 10<span class="italic">g</span> cubes.</p>
<p>The names provided in a rename table are used only during an upgrade and overwrite any names entered in the <code>CUBE_UPGRADE_INFO</code> table.</p>
<p class="orderedlisttitle">To create a rename table:&nbsp;</p>
<ol>
<li>
<p>Open SQL*Plus or another SQL client, and connect to Oracle Database as the owner of the 10<span class="italic">g</span> analytic workspace.</p>
</li>
<li>
<p>Issue a command like the following:</p>
<pre>
CREATE TABLE table_name (
          source_id    VARCHAR2(300),
          new_name     VARCHAR2(30),
          object_type  VARCHAR2(30));
 
</pre></li>
<li>
<p>Populate the rename table with the appropriate values, as follows.</p>
</li>
</ol>
<p><code>table_name</code> is the name of the rename table.</p>
<p><code>source_id</code> is the identifier for an object described in the XML document supplied to IMPORT_XML. The identifier must have this format:</p>
<pre>
<span class="italic">schema_name</span>.<span class="italic">object_name</span>[.<span class="italic">subobject_name</span>]
</pre>
<p><code>new_name</code> is the object name given during the import to the object specified by <code>source_id</code>.</p>
<p><code>object_type</code> is the object type as described in the XML, such as StandardDimension or DerivedMeasure.</p>
<p>For example, these SQL statements populate the table with new names for the analytic workspace, a cube, and four dimensions:</p>
<pre>
INSERT INTO my_object_map VALUES('GLOBAL_AW.GLOBAL10.AW', 'GLOBAL11', 'AW');
INSERT INTO my_object_map VALUES('GLOBAL_AW.UNITS_CUBE', 'UNIT_SALES_CUBE', 'Cube');
INSERT INTO my_object_map VALUES('GLOBAL_AW.CUSTOMER', 'CUSTOMERS', 'StandardDimension');
INSERT INTO my_object_map VALUES('GLOBAL_AW.CHANNEL', 'CHANNELS', 'StandardDimension');
INSERT INTO my_object_map VALUES('GLOBAL_AW.PRODUCT', 'PRODUCTS', 'StandardDimension');
INSERT INTO my_object_map VALUES('GLOBAL_AW.TIME', 'TIME_PERIODS', 'TimeDimension');
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CAEEJGCH">"CREATE_IMPORT_OPTIONS Procedure"</a></div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73457" class="refsect2">
<hr />
<a id="sthref1917"></a>
<h3 class="refsect2">Simple Upgrade</h3>
<p>A simple upgrade creates an OLAP 11<span class="italic">g</span> analytic workspace from an OLAP 10<span class="italic">g</span> analytic workspace.</p>
<p class="orderedlisttitle">To perform a simple upgrade of an Oracle OLAP 10<span class="italic">g</span> analytic workspace:&nbsp;</p>
<ol>
<li>
<p>Open SQL*Plus or a similar SQL command-line interface and connect to Oracle Database 11<span class="italic">g</span> as the schema owner for the OLAP 11<span class="italic">g</span> analytic workspace.</p>
</li>
<li>
<p>To rename any objects in the 11<span class="italic">g</span> analytic workspace, create a rename table as described in <a href="#CAEBEIDI">"Rename Table"</a>.<a id="sthref1919"></a> (Optional)</p>
</li>
<li>
<p>Perform the upgrade, as described in <a href="#CAEHHHBI">"UPGRADE_AW Procedure"</a>.</p>
</li>
<li>
<p>Use the <code>DBMS_CUBE.BUILD</code> procedure to load data into the cube.</p>
</li>
</ol>
<div id="ARPLS73458" class="example">
<p class="titleinexample"><a id="sthref1920"></a>Example 41-1 Performing a Simple Upgrade to the GLOBAL Analytic Workspace</p>
<p>This example creates an OLAP 11<span class="italic">g</span> analytic workspace named <code>GLOBAL11</code> from an OLAP 10<span class="italic">g</span> analytic workspace named <code>GLOBAL10</code>. <code>GLOBAL10</code> contains no naming conflicts between cubes, dimensions, measure folders, or tables in the schema, so a rename table is not needed in this example.</p>
<pre>
BEGIN 
 
  -- Upgrade the analytic workspace
  dbms_cube.upgrade_aw(sourceaw =&gt;'GLOBAL10', destaw =&gt; 'GLOBAL11');
  
  -- Load and aggregate the data
  dbms_cube.build(script =&gt; 'UNITS_CUBE, PRICE_AND_COST_CUBE');
   
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73459" class="refsect2"><a id="CAEBGGHJ"></a>
<hr />
<h3 class="refsect2">Custom Upgrade</h3>
<p>A custom upgrade enables you to set the export and import options.</p>
<p class="orderedlisttitle">To perform a custom upgrade of an Oracle OLAP 10<span class="italic">g</span> analytic workspace:&nbsp;</p>
<ol>
<li>
<p>Open SQL*Plus or a similar SQL command-line interface and connect to Oracle Database 11<span class="italic">g</span> as the schema owner of the OLAP 11<span class="italic">g</span> analytic workspace.</p>
</li>
<li>
<p><a id="sthref1922"></a>Generate an initialization table, as described in <a href="#CAEJAGAA">"Initialization Table"</a>. Review the new, default object names and modify them as desired.</p>
</li>
<li>
<p>Create a rename table, as described in <a href="#CAEBEIDI">"Rename Table"</a>. If you are upgrading in the same schema, you must use a rename table to provide a unique name for the 11<span class="italic">g</span> analytic workspace. Otherwise, a rename table is needed only if names are duplicated among the cubes, dimensions, and measure folders of the analytic workspace, or between those names and the existing cubes, dimensions, measure folders, or tables of the destination schema.</p>
</li>
<li>
<p>Create a SQL script that does the following:</p>
<ol>
<li>
<p>Create an XML document for the export options, as described in <a href="#CAEBEIDA">"CREATE_EXPORT_OPTIONS Procedure"</a>. The <code>SUPPRESS_NAMESPACE</code> option must be set to <code>TRUE</code> for the upgrade to occur.</p>
</li>
<li>
<p>Create an XML document for the import options, as described in <a href="#CAEEJGCH">"CREATE_IMPORT_OPTIONS Procedure"</a>.</p>
</li>
<li>
<p><a id="sthref1923"></a>Create an XML template in OLAP 11<span class="italic">g</span> format, as described in <a href="#CACFDHAC">"EXPORT_XML Procedure"</a>.</p>
</li>
<li>
<p><a id="sthref1924"></a>Create an OLAP 11<span class="italic">g</span> analytic workspace from the XML template, as described in <a href="#CHDEDJIH">"IMPORT_XML Procedure"</a>.</p>
</li>
</ol>
</li>
<li>
<p>Load and aggregate the data in the new analytic workspace, as described in <a href="#CHDFCJBF">"BUILD Procedure"</a>.</p>
</li>
</ol>
<div id="ARPLS73460" class="example">
<p class="titleinexample"><a id="sthref1925"></a>Example 41-2 Performing a Custom Upgrade to the GLOBAL Analytic Workspace</p>
<p>This example upgrades the <code>GLOBAL10</code> analytic workspace from OLAP 10<span class="italic">g</span> metadata to OLAP 11<span class="italic">g</span> metadata in the <code>GLOBAL_AW</code> schema.</p>
<p>The rename table provides the new name of the analytic workspace. These commands define the rename table.</p>
<pre>
CREATE TABLE my_object_map(
       source_id    VARCHAR2(300),
       new_name     VARCHAR2(30),
       object_type  VARCHAR2(30));
 
INSERT INTO my_object_map VALUES('GLOBAL_AW.GLOBAL10.AW',  'GLOBAL11', 'AW');
COMMIT;
</pre>
<p>Following is the script for performing the upgrade.</p>
<pre>
set serverout on
 
DECLARE
  importClob    clob;
  exportClob    clob;
  exportOptClob clob;
  importOptClob clob;
  
BEGIN
 
  -- Create table of reconciled names
  dbms_cube.initialize_cube_upgrade;
  
  -- Create a CLOB containing the export options
  dbms_lob.createtemporary(exportOptClob, TRUE);
  dbms_cube.create_export_options(out_options_xml=&gt;exportOptClob, suppress_namespace=&gt;TRUE, preserve_table_owners=&gt;TRUE);
  
  -- Create a CLOB containing the import options
  dbms_lob.createtemporary(importOptClob, TRUE);
  dbms_cube.create_import_options(out_options_xml=&gt;importOptClob, rename_table =&gt; 'MY_OBJECT_MAP');
   
   -- Create CLOBs for the metadata
  dbms_lob.createtemporary(importClob, TRUE);
  dbms_lob.createtemporary(exportClob, TRUE);
  
  -- Export metadata from a 10g analytic workspace to a CLOB
  dbms_cube.export_xml(object_ids=&gt;'GLOBAL_AW', options_xml=&gt;exportOptClob, out_xml=&gt;exportClob); 
  
  -- Import metadata from the CLOB
  dbms_cube.import_xml(in_xml =&gt; exportClob, options_xml=&gt;importOptClob, out_xml=&gt;importClob);
   
  -- Load and aggregate the data
  dbms_cube.build('UNITS_CUBE, PRICE_AND_COST_CUBE');
 
END;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDFIFIA"></a>
<hr />
<div id="ARPLS65740" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of DBMS_CUBE Subprograms</h2>
<div id="ARPLS65741" class="tblformal">
<p class="titleintable"><a id="sthref1926"></a><a id="sthref1927"></a>Table 41-1 DBMS_CUBE Subprograms</p>
<table class="cellalignment1229" title="DBMS_CUBE Subprograms" summary="DBMS_CUBE procedure subprograms" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#CHDFCJBF">BUILD Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Loads data into one or more cubes and dimensions, and prepares the data for querying.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#CAEBEIDA">CREATE_EXPORT_OPTIONS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>Creates an input XML document of processing options for the EXPORT_XML procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#CAEEJGCH">CREATE_IMPORT_OPTIONS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c2-t7">
<p>Creates an input XML document of processing options for the IMPORT_XML procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#CACEIBFJ">CREATE_MVIEW Function</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t7 r1c2-t7">
<p>Creates a cube materialized view from the definition of a relational materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#CACCHGHD">DERIVE_FROM_MVIEW Function</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t7 r1c2-t7">
<p>Creates an XML template for a cube materialized view from the definition of a relational materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t7" headers="r1c1-t7">
<p><a href="#CACEDEEI">DROP_MVIEW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t7 r1c2-t7">
<p>Drops a cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t7" headers="r1c1-t7">
<p><a href="#CACFDHAC">EXPORT_XML Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t7 r1c2-t7">
<p>Exports the XML of an analytic workspace to a CLOB.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t7" headers="r1c1-t7">
<p><a href="#CACIEHDC">EXPORT_XML_TO_FILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t7 r1c2-t7">
<p>Exports the XML of an analytic workspace to a file.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t7" headers="r1c1-t7">
<p><a href="#CHDEDJIH">IMPORT_XML Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t7 r1c2-t7">
<p>Creates, modifies, or drops an analytic workspace by using an XML template</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t7" headers="r1c1-t7">
<p><a href="#CACGGGJC">INITIALIZE_CUBE_UPGRADE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t7 r1c2-t7">
<p>Processes Oracle OLAP 10<span class="italic">g</span> objects with naming conflicts to enable Oracle 11<span class="italic">g</span> clients to access them.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t7" headers="r1c1-t7">
<p><a href="#CACICBGF">REFRESH_MVIEW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t7 r1c2-t7">
<p>Refreshes a cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t7" headers="r1c1-t7">
<p><a href="#CAEHHHBI">UPGRADE_AW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t7 r1c2-t7">
<p>Upgrades an analytic workspace from Oracle OLAP 10<span class="italic">g</span> to 11<span class="italic">g</span>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t7" headers="r1c1-t7">
<p><a href="#CHDGHIHH">VALIDATE_XML Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t7 r1c2-t7">
<p>Checks the XML to assure that it is valid, without committing the results to the database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS65742" class="refsect2"><a id="CHDFCJBF"></a>
<hr />
<h3 class="refsect2"><a id="sthref1928"></a><a id="sthref1929"></a><a id="sthref1930"></a>BUILD Procedure</h3>
<p>This procedure loads data into one or more cubes and dimensions, and generates aggregate values in the cubes. The results are automatically committed to the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1931"></a>Syntax</p>
<pre>
DBMS_CUBE.BUILD (
       script                IN  VARCHAR2,
       method                IN  VARCHAR2        DEFAULT NULL,
       refresh_after_errors  IN  BOOLEAN         DEFAULT FALSE,
       parallelism           IN  BINARY_INTEGER  DEFAULT 0,
       atomic_refresh        IN  BOOLEAN         DEFAULT FALSE,
       automatic_order       IN  BOOLEAN         DEFAULT TRUE,
       add_dimensions        IN  BOOLEAN         DEFAULT TRUE,
       scheduler_job         IN  VARCHAR2        DEFAULT NULL,
       master_build_id       IN  BINARY_INTEGER  DEFAULT 0,
       nested                IN  BOOLEAN         DEFAULT FALSE);
       job_class             IN  VARCHAR2        DEFAULT 'DEFAULT_JOB_CLASS'
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1932"></a>Parameters</p>
<div id="ARPLS65743" class="tblformal">
<p class="titleintable"><a id="sthref1933"></a><a id="sthref1934"></a>Table 41-2 BUILD Procedure Parameters</p>
<table class="cellalignment1229" title="BUILD Procedure Parameters" summary="DBMS_CUBE.BUILD parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Parameter</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>script</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>A list of cubes and dimensions and their build options (see <a href="#CHDJBHEH">"SCRIPT Parameter"</a>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>method</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>A full or a fast (partial) refresh. In a fast refresh, only changed rows are inserted in the cube and the affected areas of the cube are re-aggregated.</p>
<p>You can specify a method for each cube and dimension in sequential order, or a single method to apply to all cubes and dimensions. If you list more objects than methods, then the last method applies to the additional objects.</p>
<ul>
<li>
<p><code>C</code>: Complete refresh clears all dimension values before loading. (Default)</p>
</li>
<li>
<p><code>F</code>: Fast refresh of a cube materialized view, which performs an incremental refresh and re-aggregation of only changed rows in the source table.</p>
</li>
<li>
<p><code>?</code>: Fast refresh if possible, and otherwise a complete refresh.</p>
</li>
<li>
<p><code>P</code>: Recomputes rows in a cube materialized view that are affected by changed partitions in the detail tables.</p>
</li>
<li>
<p><code>S</code>: Fast solve of a compressed cube. A fast solve reloads all the detail data and re-aggregates only the changed values.</p>
</li>
</ul>
<p>See the <a href="#CACEIEFG">"Usage Notes"</a> for additional details.</p>
<p>Methods do not apply to dimensions.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t8" headers="r1c1-t8">
<p><code>refresh_after_errors</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t8 r1c2-t8">
<p><code>TRUE</code> to roll back just the cube or dimension with errors, and then continue building the other objects.</p>
<p><code>FALSE</code> to roll back all objects in the build.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t8" headers="r1c1-t8">
<p><code>parallelism</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t8 r1c2-t8">
<p>Number of parallel processes to allocate to this job (see Usage Notes).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t8" headers="r1c1-t8">
<p><code>atomic_refresh</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t8 r1c2-t8">
<p><code>TRUE</code> prevents users from accessing intermediate results during a build. It freezes the current state of an analytic workspace at the beginning of the build to provide current sessions with consistent data. This option thaws the analytic workspace at the end of the build to give new sessions access to the refreshed data. If an error occurs during the build, then all objects are rolled back to the frozen state.</p>
<p>FALSE enables users to access intermediate results during an build.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t8" headers="r1c1-t8">
<p><code>automatic_order</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t8 r1c2-t8">
<p><code>TRUE</code> enables optimization of the build order. Dimensions are loaded before cubes.</p>
<p><code>FALSE</code> builds objects in the order you list them in the script.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t8" headers="r1c1-t8">
<p><code>add_dimensions</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t8 r1c2-t8">
<p><code>TRUE</code> automatically includes all the dimensions of the cubes in the build, whether or not you list them in the script. If a cube materialized view with a particular dimension is fresh, then that dimension is not reloaded. You can list a cube once in the script.</p>
<p><code>FALSE</code> includes only dimensions specifically listed in the script.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t8" headers="r1c1-t8">
<p><code>scheduler_job</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t8 r1c2-t8">
<p>Any text identifier for the job, which will appear in the log table. The string does not need to be unique.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t8" headers="r1c1-t8">
<p><code>master_build_id</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t8 r1c2-t8">
<p>A unique name for the build.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t8" headers="r1c1-t8">
<p><code>nested</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t8 r1c2-t8">
<p><code>TRUE</code> performs nested refresh operations for the specified set of cube materialized views. Nested refresh operations refresh all the depending materialized views and the specified set of materialized views based on a dependency order to ensure the nested materialized views are truly fresh with respect to the underlying base tables.</p>
<p>All objects must reside in a single analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t8" headers="r1c1-t8">
<p><code>job_class</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t8 r1c2-t8">
<p>The class this job is associated with.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDJBHEH"></a>SCRIPT Parameter</p>
<p>The <code>SCRIPT</code> parameter identifies the objects that will be included in the build, and specifies the type of processing that will be performed on each one. The parameter has this syntax:</p>
<pre>
[VALIDATE | NO COMMIT] objects [ USING ( commands ) ][,...]
</pre>
<p><span class="italic">Where</span>:</p>
<p><code>VALIDATE</code> checks all steps of the build and sends the planned steps to <code>CUBE_BUILD_LOG</code> without executing the steps. You can view all generated SQL in the <code>OUTPUT</code> column of the log table.</p>
<p><code>NO COMMIT</code> builds the objects in the current attach mode (or Read Only when the analytic workspace is not attached) but does not commit the changes. This option supports what-if analysis, since it enables you to change data values temporarily. See <a href="#CAEBDIIH">"SCRIPT Parameter: USING Clause: SET command"</a>.</p>
<p><code>objects</code> is the qualified name of one or more cubes or dimensions, separated by commas, in the form <code><span class="codeinlineitalic">[aw_name.]object</span></code>, such as <code>UNITS_CUBE</code> or <code>GLOBAL.UNITS_CUBE</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1935"></a>SCRIPT Parameter: USING Clause</p>
<p>The <code>USING</code> clause specifies the processing options. It consists of one or more commands separated by commas.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
A cube with a rewrite materialized view cannot have a <code>USING</code> clause, except for the <code>ANALYZE</code> command. It uses the default build options.</div>
<p>The <code>commands</code> can be any of the following.</p>
<ul>
<li>
<p><code>AGGREGATE USING [MEASURE]</code></p>
<p>Generates aggregate values using the syntax described in <a href="#CHDBFHEG">"SCRIPT Parameter: USING Clause: AGGREGATE command"</a>.</p>
</li>
<li>
<p><code>ANALYZE</code></p>
<p>Runs <code>DBMS_AW_STATS.ANALYZE</code>, which generates and stores optimizer statistics for cubes and dimensions.</p>
</li>
<li>
<p><code>CLEAR [VALUES | LEAVES | AGGREGATES] [SERIAL | PARALLEL]</code></p>
<p>Prepares the cube for a data refresh. It can also be used on dimensions, but <code>CLEAR</code> removes all dimension keys, and thus deletes all data values for cubes that use the dimension.</p>
<p>These optional arguments control the refresh method. If you omit the argument, then the behavior of <code>CLEAR</code> depends on the refresh method. The <code>'C'</code> (complete) refresh method runs <code>CLEAR VALUES</code>, and all other refresh methods run <code>CLEAR LEAVES</code>.</p>
<ul>
<li>
<p><code>VALUES</code>: Clears all data in the cube. All facts must be reloaded and all aggregates must be recomputed. This option supports the <code>COMPLETE</code> refresh method. (Default for the <code>C</code> and <code>F</code> methods)</p>
</li>
<li>
<p><code>LEAVES</code>: Clears the detail data and retains the aggregates. All facts must be reloaded, and the aggregates for any new or changed facts must be computed. This option supports the <code>FAST</code> refresh method. (Default for the <code>?</code> method)</p>
</li>
<li>
<p><code>AGGREGATES</code>: Retains the detail data and clears the aggregates. All aggregates must be recomputed.</p>
</li>
</ul>
<p>These optional arguments control the load method, and can be combined with any of the refresh options:</p>
<ul>
<li>
<p><code>PARALLEL</code>: Each partition is cleared separately. (Default)</p>
</li>
<li>
<p><code>SERIAL</code>: All partitions are cleared together.</p>
</li>
</ul>
<p>If you omit the <code>CLEAR</code> command, <code>DBMS_CUBE</code> loads new and updated facts, but does not delete any old detail data. This is equivalent to a <code>LOAD NO SYNC</code> for dimensions.</p>
</li>
<li>
<p><code>COMPILE [SORT | NO SORT | SORT ONLY]</code></p>
<p>Creates the supporting structures for the dimension. (Dimensions only)</p>
<p>These options control the use of a sort order attribute:</p>
<ul>
<li>
<p><code>SORT</code>: The user-defined sort order attribute populates the sort column in the embedded-total (ET) view. (Default)</p>
</li>
<li>
<p><code>NO SORT</code>: Any sort order attribute is ignored. This option is for very large dimensions where sorting could consume too many resources.</p>
</li>
<li>
<p><code>SORT ONLY</code>: The compile step only runs the sort.</p>
</li>
</ul>
</li>
<li>
<p><code>EXECUTE PLSQL string</code></p>
<p>Executes a PL/SQL command or script in the database.</p>
</li>
<li>
<p><code>EXECUTE OLAP DML string [PARALLEL | SERIAL]</code></p>
<p>Executes an OLAP DML command or program in the analytic workspace. The options control execution of the command or program:</p>
<ul>
<li>
<p><code>PARALLEL</code>: Execute the command or program once for each partition. This option can be used to provide a performance boost to complex DML operations, such as forecasts and models.</p>
</li>
<li>
<p><code>SERIAL</code>: Execute the command or program once for the entire cube. (Default)</p>
</li>
</ul>
</li>
<li>
<p><code>[INSERT | MERGE] INTO [ALL HIERARCHIES | HIERARCHIES</code> (<code><span class="codeinlineitalic">dimension.hierarchy</span></code>)] <code>VALUES</code> (<code><span class="codeinlineitalic">dim_key, parent, level_name</span></code>)</p>
<p>Adds a dimension member to one or more hierarchies. <code>INSERT</code> throws an error if the member already exists, while <code>MERGE</code> does not. See <a href="#CAEJJACB">"Dimension Maintenance Example"</a>.</p>
<p><code><span class="codeinlineitalic">dimension.hierarchy</span></code>: The name of a hierarchy the new member belongs to. Enclose each part of the name in double quotes, for example, <code>"PRODUCT"."PRIMARY"</code>.</p>
<p><code><span class="codeinlineitalic">dim_key</span></code>: The <code>DIM_KEY</code> value of the dimension member.</p>
<p><code><span class="codeinlineitalic">parent</span></code>: The parent of the dimension key.</p>
<p><code><span class="codeinlineitalic">level_name</span></code>: The level of the dimension key.</p>
</li>
<li>
<p><code>UPDATE [ALL HIERARCHIES | HIERARCHIES (</code><code><span class="codeinlineitalic">dimension.hierarchy</span></code><code>)] SET PARENT =</code> <code><span class="codeinlineitalic">parent</span></code><code>, LEVEL=</code><code><span class="codeinlineitalic">level_name</span></code> <code>WHERE MEMBER =</code> <code><span class="codeinlineitalic">dim_key</span></code></p>
<p>Alters the level or parent of an existing dimension member. See <code>INSERT</code> for a description of the options. Also see <a href="#CAEJJACB">"Dimension Maintenance Example"</a>.</p>
</li>
<li>
<p><code>DELETE FROM DIMENSION WHERE MEMBER=</code><code><span class="codeinlineitalic">dim_key</span></code></p>
<p>Deletes a dimension member. See <a href="#CAEJJACB">"Dimension Maintenance Example"</a>.</p>
<p><code><span class="codeinlineitalic">dim_key</span></code>: The <code>DIM_KEY</code> value of the dimension member to be deleted.</p>
</li>
<li>
<p><code>SET</code> <code><span class="codeinlineitalic">dimension.attribute[qdr]</span></code> <code>= CAST('</code><code><span class="codeinlineitalic">attribute_value</span></code><code>' AS VARCHAR2))</code></p>
<p>Sets the value of an attribute for a dimension member. See <a href="#CAEJJACB">"Dimension Maintenance Example"</a>.</p>
<p><code><span class="codeinlineitalic">dimension.attribute</span></code>: The name of the attribute. Enclose each part of the name in double quotes, for example, <code>"PRODUCT"."LONG_DESCRIPTION"</code>.</p>
<p><code><span class="codeinlineitalic">qdr</span></code>: The dimension member being given an attribute value in the form of a qualified data reference, such as <code>"PRODUCT"='OPT MOUSE'</code>.</p>
<p><code><span class="codeinlineitalic">attribute_value</span></code>: The value of the attribute, such as 'Optical Mouse'.</p>
</li>
<li>
<p><code>FOR</code> <code><span class="codeinlineitalic">dimension_clause measure_clause</span></code> <code>BUILD (</code><code><span class="codeinlineitalic">commands</span></code><code>)</code></p>
<p>Restricts the build to particular measures and dimension values, using the following arguments. See <a href="#CAECGBDG">"FOR Clause Example"</a>.</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">dimension_clause</span></code>:</p>
<p><code><span class="codeinlineitalic">dimension</span></code> <code>ALL | NONE | WHERE</code> <code><span class="codeinlineitalic">condition</span></code> <code>| LEVELS (</code><code><span class="codeinlineitalic">level</span></code> <code>[,</code> <code><span class="codeinlineitalic">level</span></code><code>...])</code></p>
<p><code><span class="codeinlineitalic">dimension</span></code> is the name of a dimension of the cube.</p>
<p><code>ALL</code> sets the dimension status to all members before executing the list of commands.</p>
<p><code>NONE</code> loads values for no dimension members.</p>
<p><code>WHERE</code> loads values for those dimension members that match the condition.</p>
<p><code>LEVELS</code> loads values for dimension members in the named levels.</p>
<p><code><span class="codeinlineitalic">level</span></code> is a level of the named dimension.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">measure_clause</span></code>:</p>
<p><code>MEASURES (</code><code><span class="codeinlineitalic">measure</span></code> [, <code><span class="codeinlineitalic">measure</span></code><code>...])</code></p>
<p><code><span class="codeinlineitalic">measure</span></code> is the name of a measure in the cube.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">commands</span></code>: Any of the other <code>USING</code> commands.</p>
</li>
</ul>
</li>
<li>
<p><code>LOAD [SYNCH | NO SYNCH] [PRUNE | PARALLEL | SERIAL] [WHERE</code> <code><span class="codeinlineitalic">condition]</span></code></p>
<p>Loads data into the dimension or cube.</p>
<ul>
<li>
<p><code>WHERE</code> limits the load to those values in the mapped relational table that match <code><span class="codeinlineitalic">condition</span></code>.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">condition</span></code> is a valid predicate based on the columns of the mapped table. See the <a href="#CAEIBIEJ">"Examples"</a>.</p>
</li>
</ul>
<p>These optional arguments apply only to dimensions:</p>
<ul>
<li>
<p><code>SYNCH</code> matches the dimension keys to the relational data source. (Default)</p>
</li>
<li>
<p><code>NO SYNCH</code> loads new dimension keys but does not delete old keys.</p>
</li>
</ul>
<p>These optional arguments apply only to cubes:</p>
<ul>
<li>
<p><code>PRUNE</code>: Runs a full table scan on the fact table to determine which partitions to load. For example, if a cube is partitioned by month and the fact table has values only for the last two months, then jobs are only started to load the partitions for the last two months.</p>
</li>
<li>
<p><code>PARALLEL</code>: Each partition is loaded separately. (Default)</p>
</li>
<li>
<p><code>SERIAL</code>: All partitions are loaded in one <code>SELECT</code> statement.</p>
</li>
</ul>
</li>
<li>
<p><code>MODEL model_name [PARALLEL | SERIAL]</code></p>
<p>Executes a model previously created for the cube. It accepts these arguments:</p>
<ul>
<li>
<p><code>PARALLEL</code>: The model runs separately on each partition.</p>
</li>
<li>
<p><code>SERIAL</code>: The model runs on all cubes at the same time. (Default)</p>
</li>
</ul>
</li>
<li>
<p><code>SET</code></p>
<p>Supports write-back to the cube using the syntax described in <a href="#CAEBDIIH">"SCRIPT Parameter: USING Clause: SET command"</a>. (Cubes only)</p>
</li>
<li>
<p><code>SOLVE [PARALLEL | SERIAL]</code></p>
<p>Aggregates the cube using the rules defined for the cube, including the aggregation operator and the precompute specifications. (Cubes only)</p>
<p>It accepts these arguments:</p>
<ul>
<li>
<p><code>PARALLEL</code>: Each partition is solved separately. (Default)</p>
</li>
<li>
<p><code>SERIAL</code>: All partitions are solved at the same time.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDBFHEG"></a>SCRIPT Parameter: USING Clause: AGGREGATE command</p>
<p>The <code>AGGREGATE</code> command in a script specifies the aggregation rules for one or more measures.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>AGGREGATE</code> command is available only for uncompressed cubes.</div>
<p><code>AGGREGATE</code> has the following syntax:</p>
<pre>
{ AGGREGATE USING MEASURE
     WHEN measure1 THEN operator1
     WHEN measure2 THEN operator2...
          ELSE default_operator
|
 [AGGREGATE USING] operator_clause }
processing_options
OVER { ALL | dimension | dimension HIERARCHIES (hierarchy)}
</pre>
<p class="subhead2"><a id="ARPLS65744"></a>USING MEASURE Clause</p>
<p>This clause enables you to specify different aggregation operators for different measures in the cube.</p>
<p class="subhead2"><a id="ARPLS65745"></a>Operator Clause</p>
<p><a id="sthref1936"></a><a id="sthref1937"></a>The <code>operator_clause</code> has this syntax:</p>
<pre>
operator(WEIGHTBY expression | SCALEBY expression)
</pre>
<p><code>WEIGHTBY</code> multiplies each data value by an expression before aggregation.</p>
<p><code>SCALEBY</code> adds the value of an expression to each data value before aggregation.</p>
<div id="ARPLS65746" class="tblformal">
<p class="titleintable"><a id="sthref1938"></a><a id="sthref1939"></a>Table 41-3 Aggregation Operators</p>
<table class="cellalignment1229" title="Aggregation Operators" summary="OLAP aggregation operators" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Operator</th>
<th class="cellalignment1227" id="r1c2-t11">Option</th>
<th class="cellalignment1227" id="r1c3-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>AVG</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c3-t11">
<p>Adds data values, then divides the sum by the number of data values that were added together.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t11" headers="r1c1-t11">
<p><code>FIRST</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c3-t11">
<p>The first real data value.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t11" headers="r1c1-t11">
<p><code>HIER_AVG</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t11 r1c3-t11">
<p>Adds data values, then divides the sum by the number of the children in the dimension hierarchy. Unlike AVERAGE, which counts only non-NA children, HAVERAGE counts all of the logical children of a parent, regardless of whether each child does or does not have a value.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t11" headers="r1c1-t11">
<p><code>HIER_FIRST</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t11 r1c3-t11">
<p>The first data value in the hierarchy, even when that value is NA.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t11" headers="r1c1-t11">
<p><code>HIER_LAST</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t11 r1c3-t11">
<p>The last data value in the hierarchy, even when that value is NA.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t11" headers="r1c1-t11">
<p><code>LAST</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t11 r1c3-t11">
<p>The last real data value.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t11" headers="r1c1-t11">
<p><code>MAX</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t11 r1c3-t11">
<p>The largest data value among the children of each parent.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t11" headers="r1c1-t11">
<p><code>MIN</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t11 r1c2-t11">
<p><code>WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t11 r1c3-t11">
<p>The smallest data value among the children of each parent.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t11" headers="r1c1-t11">
<p><code>SUM</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t11 r1c2-t11">
<p><code>SCALEBY | WEIGHTBY</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t11 r1c3-t11">
<p>Adds data values. (Default)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS65747"></a>Processing Options</p>
<p>You can specify these processing options for aggregation:</p>
<ul>
<li>
<p><code>(ALLOW | DISALLOW) OVERFLOW</code></p>
<p>Specifies whether to allow decimal overflow, which occurs when the result of a calculation is very large and can no longer be represented by the exponent portion of the numerical representation.</p>
<ul>
<li>
<p><code>ALLOW</code>: A calculation that generates overflow executes without error and produces null results. (Default)</p>
</li>
<li>
<p><code>DISALLOW</code>: A calculation involving overflow stops executing and generates an error message.</p>
</li>
</ul>
</li>
<li>
<p><code>(ALLOW | DISALLOW) DIVISION BY ZERO</code></p>
<p>Specifies whether to allow division by zero.</p>
<ul>
<li>
<p><code>ALLOW</code>: A calculation involving division by zero executes without error but returns a null value. (Default)</p>
</li>
<li>
<p><code>DISALLOW</code>: A calculation involving division by zero stops executing and generates an error message.</p>
</li>
</ul>
</li>
<li>
<p><code>(CONSIDER | IGNORE) NULLS</code></p>
<p>Specifies whether nulls are included in the calculations.</p>
<ul>
<li>
<p><code>CONSIDER</code>: Nulls are included in the calculations. A calculation that includes a null value returns a null value.</p>
</li>
<li>
<p><code>IGNORE</code>: Only actual data values are used in calculations. Nulls are treated as if they do not exist. (Default)</p>
</li>
</ul>
</li>
<li>
<p><code>MAINTAIN COUNT</code></p>
<p>Stores an up-to-date count of the number of dimension members for use in calculating averages. Omit this option to count the members on the fly.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CAEBDIIH"></a>SCRIPT Parameter: USING Clause: SET command</p>
<p>The <code>SET</code> command in a script assigns values to one or more cells in a stored measure. It has this syntax:</p>
<pre>
SET <span class="italic">target</span> = <span class="italic">expression</span>
</pre>
<p><span class="italic">Where:</span></p>
<p><code><span class="codeinlineitalic">target</span></code> is a a measure or a qualified data reference.</p>
<p><code><span class="codeinlineitalic">expression</span></code> returns values of the appropriate data type for <code><span class="codeinlineitalic">target</span></code>.</p>
</div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="ARPLS73461"></a>Qualified Data References</p>
<p>Qualified data references (QDRs) limit a dimensional object to a single member in one or more dimensions for the duration of a query.</p>
<p>A QDR has the following syntax:</p>
<pre>
expression <span class="bold">[</span> { dimension = member }[ , { dimension = member } ...] <span class="bold">]</span>
</pre>
<p><span class="italic">Where:</span></p>
<p><code><span class="codeinlineitalic">expression</span></code> is a dimensional expression, typically the name of a measure.</p>
<p><code><span class="codeinlineitalic">dimension</span></code> is a primary dimension of expression.</p>
<p><code><span class="codeinlineitalic">member</span></code> is a value of dimension.</p>
<p>The outside square brackets shown in bold are literal syntax elements; they do not indicate an optional argument. The inside square brackets shown in regular text delimit an optional argument and are not syntax elements.</p>
<p>This example returns Sales values for calendar year 2007:</p>
<pre>
global.sales[global.time = 'CY2007'
]
</pre>
<p>The next example returns Sales values only for the United States in calendar year 2007:</p>
<pre>
sales[customer = 'US', time = 'CY2007'
]
</pre>
<p>See the Examples for qualified data references in SET commands.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACEIEFG"></a>Usage Notes</p>
<p class="subhead2"><a id="ARPLS65748"></a>Build Methods</p>
<p>The <code>C</code>, <code>S</code>, and <code>?</code> methods always succeed and can be used on any cube.</p>
<p>The <code>F</code> and <code>P</code> methods require that the cube have a materialized view that was created as a fast or a rewrite materialized view.</p>
<p class="subhead2"><a id="ARPLS65749"></a>Parallelism</p>
<p>Partitioned cubes can be loaded and aggregated in parallel processes. For example, a cube with five partitions can use up to five processes. Dimensions are always loaded serially.</p>
<p>The number of parallel processes actually allocated by a build is controlled by the smallest of these factors:</p>
<ul>
<li>
<p>Number of cubes in the build and the number of partitions in each cube.</p>
</li>
<li>
<p>Setting of the <code>PARALLELISM</code> argument of the <code>BUILD</code> procedure.</p>
</li>
<li>
<p>Setting of the <code>JOB_QUEUE_PROCESSES</code> database initialization parameter.</p>
</li>
</ul>
<p>Suppose <code>UNITS_CUBE</code> has 12 partitions, <code>PARALLELISM</code> is set to 10, and <code>JOB_QUEUE_PROCESSES</code> is set to 4. OLAP uses four processes, which appear as slave processes in the build log.</p>
<p>The SQL engine may allocate additional processes when the PARALLEL_DEGREE_POLICY database initialization parameter is set to AUTO or LIMITED. For example, if OLAP allocates four processes, the SQL engine might determine that two of those processes should be done by four processes instead, for a total of six processes.</p>
<p class="subhead2"><a id="ARPLS65750"></a>Build Logs</p>
<p>OLAP generates three logs that provide diagnostic information about builds:</p>
<ul>
<li>
<p>Cube build log</p>
</li>
<li>
<p>Rejected values log</p>
</li>
<li>
<p>Cube dimension compile log</p>
</li>
</ul>
<p>Analytic Workspace Manager creates these logs automatically as tables in the same schema as the analytic workspace. If you do not use Analytic Workspace Manager, you can create and manage the logs in PL/SQL using the <code>DBMS_CUBE_LOG</code> package.</p>
<p>You can also create the cube log file by running <code>$ORACLE_HOME/olap/admin/utlolaplog.sql</code>. This script creates three additional views:</p>
<ul>
<li>
<p><a id="sthref1940"></a><code>CUBE_BUILD_LATEST</code>: Returns rows only from the last build.</p>
</li>
<li>
<p><code><a id="sthref1941"></a>CUBE_BUILD_REPORT</code>: Returns one row for each command with elapsed times.</p>
</li>
<li>
<p><code><a id="sthref1942"></a>CUBE_BUILD_REPORT_LATEST</code>: Returns a report like <code>CUBE_BUILD_REPORT</code> only from the last build.</p>
</li>
</ul>
<p>This report shows a successfully completed build of the objects in the <code>GLOBAL</code> analytic workspace, which has four dimensions and two cubes.</p>
<pre>
SELECT command, status, build_object, build_object_type type 
     FROM cube_build_report_latest;
 
COMMAND                   STATUS     BUILD_OBJECT                   TYPE
------------------------- ---------- ------------------------------ ----------
BUILD                     COMPLETED                                 BUILD
FREEZE                    COMPLETED                                 BUILD
LOAD NO SYNCH             COMPLETED  CHANNEL                        DIMENSION
COMPILE                   COMPLETED  CHANNEL                        DIMENSION
UPDATE/COMMIT             COMPLETED  CHANNEL                        DIMENSION
LOAD NO SYNCH             COMPLETED  CUSTOMER                       DIMENSION
COMPILE                   COMPLETED  CUSTOMER                       DIMENSION
UPDATE/COMMIT             COMPLETED  CUSTOMER                       DIMENSION
LOAD NO SYNCH             COMPLETED  PRODUCT                        DIMENSION
COMPILE                   COMPLETED  PRODUCT                        DIMENSION
UPDATE/COMMIT             COMPLETED  PRODUCT                        DIMENSION
LOAD NO SYNCH             COMPLETED  TIME                           DIMENSION
COMPILE                   COMPLETED  TIME                           DIMENSION
UPDATE/COMMIT             COMPLETED  TIME                           DIMENSION
COMPILE AGGMAP            COMPLETED  PRICE_CUBE                     CUBE
UPDATE/COMMIT             COMPLETED  PRICE_CUBE                     CUBE
COMPILE AGGMAP            COMPLETED  UNITS_CUBE                     CUBE
UPDATE/COMMIT             COMPLETED  UNITS_CUBE                     CUBE
DBMS_SCHEDULER.CREATE_JOB COMPLETED  PRICE_CUBE                     CUBE
DBMS_SCHEDULER.CREATE_JOB COMPLETED  UNITS_CUBE                     CUBE
BUILD                     COMPLETED                                 BUILD
LOAD                      COMPLETED  PRICE_CUBE                     CUBE
SOLVE                     COMPLETED  PRICE_CUBE                     CUBE
UPDATE/COMMIT             COMPLETED  PRICE_CUBE                     CUBE
BUILD                     COMPLETED                                 BUILD
LOAD                      COMPLETED  UNITS_CUBE                     CUBE
SOLVE                     COMPLETED  UNITS_CUBE                     CUBE
UPDATE/COMMIT             COMPLETED  UNITS_CUBE                     CUBE
ANALYZE                   COMPLETED  PRICE_CUBE                     CUBE
ANALYZE                   COMPLETED  UNITS_CUBE                     CUBE
THAW                      COMPLETED                                 BUILD
 
31 rows selected.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CAEIBIEJ"></a>Examples</p>
<p>This example uses the default parameters to build <code>UNITS_CUBE</code>.</p>
<pre>
EXECUTE DBMS_CUBE.BUILD('GLOBAL.UNITS_CUBE');
</pre>
<p>The next example builds <code>UNITS_CUBE</code> and explicitly builds two of its dimensions, <code>TIME</code> and <code>CHANNEL</code>. The dimensions use the complete (<code>C</code>) method, and the cube uses the fast solve (<code>S</code>) method.</p>
<pre>
BEGIN
  DBMS_CUBE.BUILD(
    script=&gt;'GLOBAL."TIME", GLOBAL.CHANNEL, GLOBAL.UNITS_CUBE',
    method=&gt;'CCS',
    parallelism=&gt;2);
END;
/
</pre>
<p>The following example loads only the selection of data identified by the <code>WHERE</code> clause:</p>
<pre>
BEGIN
  DBMS_CUBE.BUILD(q'!
  GLOBAL."TIME", 
  GLOBAL.CHANNEL, 
  GLOBAL.CUSTOMER, 
  GLOBAL.PRODUCT, 
  GLOBAL.UNITS_CUBE USING (LOAD NO SYNCH 
     WHERE UNITS_FACT.MONTH_ID LIKE '2006%' 
     AND UNITS_FACT.SALES &gt; 5000)!');
END;
/
</pre>
<p class="subhead2"><a id="CAECGBDG"></a><a id="ARPLS73462"></a>FOR Clause Example</p>
<p>In this example, the Time dimension is partitioned by calendar year, and <code>DBMS_CUBE</code> builds only the partition identified by <code>CY2006</code>. The <code>HIER_ANCESTOR</code> is an analytic function in the OLAP expression syntax.</p>
<pre>
BEGIN
   dbms_cube.build(q'!
   UNITS_CUBE USING
   (
   FOR "TIME" 
     WHERE HIER_ANCESTOR(WITHIN "TIME".CALENDAR LEVEL "TIME".CALENDAR_YEAR) = 'CY2006'
     BUILD (LOAD, SOLVE)
   )!', 
   parallelism=&gt;1);
END;
/
</pre>
<p>The next example uses a <code>FOR</code> clause to limit the build to the <code>SALES</code> measure in 2006. All objects are built using the complete (<code>C</code>) method.</p>
<pre>
BEGIN
  DBMS_CUBE.BUILD(
  script =&gt; '
  GLOBAL."TIME", 
  GLOBAL.CHANNEL, 
  GLOBAL.CUSTOMER, 
  GLOBAL.PRODUCT, 
  GLOBAL.UNITS_CUBE USING 
  (
    FOR MEASURES(GLOBAL.UNITS_CUBE.SALES)
      BUILD(LOAD NO SYNCH WHERE GLOBAL.UNITS_FACT.MONTH_ID LIKE ''2006%'')
   )',
  method =&gt; 'C',
  parallelism =&gt; 2);
END;
/
</pre>
<p class="subhead2"><a id="ARPLS73463"></a>Write-Back Examples</p>
<p>The following examples show various use of the <code>SET</code> command in a <code>USING</code> clause.</p>
<p>This example sets Sales Target to Sales increased by 5%:</p>
<pre>
DBMS_CUBE.BUILD('UNITS_CUBE USING(
   SET UNITS_CUBE.SALES_TARGET = UNITS_CUBE.SALES * 1.05, SOLVE)');
 
</pre>
<p>This example sets the price of the Deluxe Mouse in May 2007 to $29.99:</p>
<pre>
DBMS_CUBE.BUILD('PRICE_CUBE USING(
  SET PRICE_CUBE.UNIT_PRICE["TIME"=''2007.05'', "PRODUCT"=''DLX MOUSE''] 
  = 29.99, SOLVE)');
</pre>
<p>The next example contains two SET commands, but does not reaggregate the cube:</p>
<pre>
DBMS_CUBE.BUILD('PRICE_CUBE USING(
   SET PRICE_CUBE.UNIT_PRICE["TIME"=''2006.12'', "PRODUCT"=''DLX MOUSE'']
   = 29.49, 
   SET PRICE_CUBE.UNIT_PRICE["TIME"=''2007.05'', "PRODUCT"=''DLX MOUSE'']
   = 29.99)'); 
</pre></div>
<!-- class="refsubsect" -->
<p class="subhead2"><a id="CAEJJACB"></a><a id="ARPLS73464"></a>Dimension Maintenance Example</p>
<p>This script shows dimension maintenance. It adds a new dimension member named <code>OPT MOUSE</code> to all hierarchies, alters its position in the Primary hierarchy, assigns it a long description, then deletes it from the dimension.</p>
<pre>
BEGIN
dbms_output.put_line('Add optical mouse');
dbms_cube.build(q'!
   "PRODUCT" using (MERGE INTO ALL HIERARCHIES 
   VALUES ('ITEM_OPT MOUSE', 'CLASS_SFT', "PRODUCT"."FAMILY"))
!');
 
dbms_output.put_line('Alter optical mouse');
dbms_cube.build(q'!
   "PRODUCT" using (UPDATE HIERARCHIES ("PRODUCT"."PRIMARY") 
   SET PARENT = 'FAMILY_ACC', LEVEL = "PRODUCT"."ITEM"
   WHERE MEMBER = 'ITEM_OPT MOUSE')
!');
 
dbms_output.put_line('Provide attributes to optical mouse');
dbms_cube.build(q'!
   "PRODUCT" USING (SET "PRODUCT"."LONG_DESCRIPTION"["PRODUCT" = 'ITEM_OPT MOUSE']
    = CAST('Optical Mouse' AS VARCHAR2))
!');

dbms_output.put_line('Delete optical mouse');
dbms_cube.build(q'!
   "PRODUCT" USING (DELETE FROM DIMENSION WHERE MEMBER='ITEM_OPT MOUSE')
!');
 
END;
/
</pre>
<p class="subhead2"><a id="ARPLS73465"></a>OLAP DML Example</p>
<p>This example uses the OLAP DML to add comments to the cube build log:</p>
<pre>
BEGIN 
 DBMS_CUBE.BUILD(q'!
  global.units_cube USING (
   EXECUTE OLAP DML 'SHOW STATLEN(units_cube_prt_list)' PARALLEL,
   EXECUTE OLAP DML 'SHOW LIMIT(units_cube_prt_list KEEP ALL)' PARALLEL,
   EXECUTE OLAP DML 'SHOW STATLEN(time)' parallel,
   EXECUTE OLAP DML 'SHOW LIMIT(time KEEP time_levelrel ''CALENDAR_YEAR'')' parallel)!', 
  parallelism=&gt;2, 
  add_dimensions=&gt;false);
END;
/
</pre>
<p>This query shows the comments in the cube build log:</p>
<pre>
SELECT partition, slave_number, TO_CHAR(output) output
   FROM cube_build_log
   WHERE command = 'OLAP DML'
   AND status = 'COMPLETED'
   ORDER BY slave_number, time;

PARTITION    SLAVE_NUMBER OUTPUT
------------ ------------ -------------------------------------------------------
P10:CY2007              1 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(statlen(units_cube_prt_list))"
                            Value="1"/&gt;
 
P10:CY2007              1 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(limit(units_cube_prt_list keep al
                          l))"
                            Value="P10"/&gt;
 
P10:CY2007              1 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(statlen(time))"
                            Value="17"/&gt;
 
P10:CY2007              1 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(limit(time keep time_levelrel &amp;ap
                          os;CALENDAR_YEAR&amp;apos;))"
                            Value="CALENDAR_YEAR_CY2007"/&gt;
 
P9:CY2006               2 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(statlen(units_cube_prt_list))"
                            Value="1"/&gt;
 
P9:CY2006               2 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(limit(units_cube_prt_list keep al
                          l))"
                            Value="P9"/&gt;
 
P9:CY2006               2 &lt;OLAPDMLExpression
                            Expression="TO_CHAR(statlen(time))"
                            Value="17"/&gt;
               .
               .
               .
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS73466" class="refsect2"><a id="CAEBEIDA"></a>
<hr />
<h3 class="refsect2">CREATE_EXPORT_OPTIONS Procedure</h3>
<p>This procedure creates an input XML document that describes processing options for the <a href="#CACFDHAC">EXPORT_XML Procedure</a> and the <a href="#CACIEHDC">EXPORT_XML_TO_FILE Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1943"></a>Syntax</p>
<pre>
DBMS_CUBE.CREATE_EXPORT_OPTIONS (
          out_options_xml        IN/OUT  CLOB,
          target_version         IN      VARCHAR2  DEFAULT NULL,
          suppress_owner         IN      BOOLEAN   DEFAULT FALSE,
          suppress_namespace     IN      BOOLEAN   DEFAULT FALSE,
          preserve_table_owners  IN      BOOLEAN   DEFAULT FALSE,
          metadata_changes       IN      CLOB      DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1944"></a>Parameters</p>
<div id="ARPLS73467" class="tblformal">
<p class="titleintable"><a id="sthref1945"></a><a id="sthref1946"></a>Table 41-4 CREATE_EXPORT_OPTIONS Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_EXPORT_OPTIONS Procedure Parameters" summary="DBMS_CUBE.CREATE_EXPORT_OPTIONS parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Parameter</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>out_options_xml</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>Contains the generated XML document, which can be passed into the <code>options_xml</code> parameter of the <a href="#CACFDHAC">EXPORT_XML Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>target_version</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>Specifies the version of Oracle Database in which the XML document generated by EXPORT_XML or EXPORT_XML_TO_FILE will be imported. You can specify two to five digits, such as 11.2 or 11.2.0.2.0. This parameter defaults to the current database version, and so can typically be omitted.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t12" headers="r1c1-t12">
<p><code>suppress_owner</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t12 r1c2-t12">
<p>Controls the use of the Owner attribute in XML elements and the owner qualifier in object names. Enter <code>True</code> to drop the owner from the XML, or enter <code>False</code> to retain it. Enter <code>True</code> if you plan to import the exported metadata into a different schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t12" headers="r1c1-t12">
<p><code>suppress_namespace</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t12 r1c2-t12">
<p>Controls the use of Namespace attributes in XML elements and the namespace qualifier in object names. Enter <code>True</code> to drop the namespace from the XML, or enter <code>False</code> to retain it (default). Enter <code>True</code> when upgrading to Oracle OLAP 11<span class="italic">g</span> metadata.</p>
<p>Namespaces allow objects created in Oracle 10<span class="italic">g</span> to coexist with objects created in Oracle 11<span class="italic">g</span>. You cannot set or change namespaces.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t12" headers="r1c1-t12">
<p><code>preserve_table_owners</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t12 r1c2-t12">
<p>Controls the use of the owner in qualifying table names in the mapping elements, such as GLOBAL.UNITS_HISTORY_FACT instead of UNITS_HISTORY_FACT. Enter <code>True</code> to retain the table owner, or enter <code>False</code> to default to the current schema for table mappings. If you plan to import the exported metadata to a different schema, you must set this option to <code>True</code> to load data from tables and views in the original schema, unless the destination schema has its own copies of the tables and views.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t12" headers="r1c1-t12">
<p><code>metadata_changes</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t12 r1c2-t12">
<p>Contains an 11<span class="italic">g</span> XML description of an object that overwrites the exported object description. The XML document must contain all parent XML elements of the modified element with the attributes needed to uniquely identify them. Use the Name attribute if it exists. See the Examples.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1947"></a>Examples</p>
<p>The following example generates an XML document of export options:</p>
<pre>
DECLARE
   optionsClob  CLOB;
 
BEGIN
   dbms_lob.createtemporary(optionsClob, false, dbms_lob.CALL); 
   dbms_cube.create_export_options(out_options_xml=&gt;optionsClob, suppress_namespace=&gt;TRUE);
   dbms_output.put_line(optionsClob);
END;
/
</pre>
<p>The <code>DBMS_OUTPUT.PUT_LINE</code> procedure displays this XML document (formatted for readability:</p>
<pre>
&lt;?xml version="1.0"?&gt;
&lt;Export TargetVersion="11.2.0.2"&gt;
  &lt;ExportOptions&gt;
    &lt;Option Name="SuppressOwner" Value="FALSE"/&gt;
    &lt;Option Name="SuppressNamespace" Value="TRUE"/&gt;
    &lt;Option Name="PreserveTableOwners" Value="FALSE"/&gt;
  &lt;/ExportOptions&gt;
&lt;/Export&gt;
</pre>
<p>The next example generates an XML document with a metadata change to the mapping of the American long description attribute of the <code>CHANNEL</code> dimension.</p>
<pre>
DECLARE
  importClob         clob;
  exportClob         clob;
  overClob           clob;
  exportOptClob      clob;
  importOptClob      clob;
 
BEGIN
  dbms_lob.createtemporary(overClob, TRUE);
  dbms_lob.open(overClob, DBMS_LOB.LOB_READWRITE);
  dbms_lob.writeappend(overClob,58, '&lt;Metadata Version="1.3" MinimumDatabaseVersion="11.2.0.2"&gt;');
  dbms_lob.writeappend(overClob,34, '&lt;StandardDimension Name="CHANNEL"&gt;');
  dbms_lob.writeappend(overClob,75, '&lt;Description Type="Description" Language="AMERICAN" Value="Sales Channel"/&gt;');
  dbms_lob.writeappend(overClob,20, '&lt;/StandardDimension&gt;');
  dbms_lob.writeappend(overClob,11, '&lt;/Metadata&gt;');
  dbms_lob.close(overClob); 
 
  -- Enable 11g clients to access 10g metadata
  dbms_cube.initialize_cube_upgrade;
  
  -- Create a CLOB containing the export options
  dbms_lob.createtemporary(exportOptClob, TRUE);
  dbms_cube.create_export_options(out_options_xml=&gt;exportOptClob, suppress_namespace=&gt;TRUE, metadata_changes=&gt;overClob);
  
  -- Create a CLOB containing the import options
  dbms_lob.createtemporary(importOptClob, TRUE);
  dbms_cube.create_import_options(out_options_xml=&gt;importOptClob, rename_table =&gt; 'MY_OBJECT_MAP');
   
   -- Create CLOBs for the metadata
  dbms_lob.createtemporary(importClob, TRUE);
  dbms_lob.createtemporary(exportClob, TRUE);
 
  -- Export metadata from a 10g analytic workspace to a CLOB
  dbms_cube.export_xml(object_ids=&gt;'GLOBAL_AW', options_xml=&gt;exportOptClob, out_xml=&gt;exportClob); 
  
  -- Import metadata from the CLOB
  dbms_cube.import_xml(in_xml =&gt; exportClob, options_xml=&gt;importOptClob, out_xml=&gt;importClob);
 
  -- Load and aggregate the data
  dbms_cube.build(script=&gt;'UNITS_CUBE, PRICE_AND_COST_CUBE');
 
END;
/
 
</pre>
<p>The following is the content of <code>exportClob</code> (formatting added for readability). The XML document changes the description of Channel to Sales Channel.</p>
<pre>
&lt;Metadata Version="1.3" MinimumDatabaseVersion="11.2.0.2"&gt;
  &lt;StandardDimension Name="CHANNEL"&gt;
    &lt;Description Type="Description" Language="AMERICAN" Value="Sales Channel"/&gt;
  &lt;/StandardDimension&gt;
&lt;/Metadata&gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73468" class="refsect2"><a id="CAEEJGCH"></a>
<hr />
<h3 class="refsect2">CREATE_IMPORT_OPTIONS Procedure</h3>
<p>This procedure creates an input XML document that describes processing options for the <a href="#CHDEDJIH">IMPORT_XML Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1948"></a>Syntax</p>
<pre>
DBMS_CUBE.CREATE_IMPORT_OPTIONS (
          out_options_xml  IN/OUT  CLOB,
          validate_only    IN      BOOLEAN   DEFAULT FALSE,
          rename_table     IN      VARCHAR2  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1949"></a>Parameters</p>
<div id="ARPLS73469" class="tblformal">
<p class="titleintable"><a id="sthref1950"></a><a id="sthref1951"></a>Table 41-5 CREATE_IMPORT_OPTIONS Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_IMPORT_OPTIONS Procedure Parameters" summary="DBMS_CUBE.CREATE_IMPORT_OPTIONS parameteres" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Parameter</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><code>out_options_xml</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>Contains the generated XML document, which can be passed to the <code>options_xml</code> parameter of the <a href="#CHDEDJIH">IMPORT_XML Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><code>validate_only</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p><code>TRUE</code> causes the <code>IMPORT_XML</code> procedure to validate the metadata described in the input file or the <code>in_xml</code> parameter, without committing the changes to the metadata.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t13" headers="r1c1-t13">
<p><code>rename_table</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t13 r1c2-t13">
<p>The name of a table identifying new names for the imported objects, in the form [<code><span class="codeinlineitalic">schema_name</span></code>.]<code><span class="codeinlineitalic">table_name</span></code>. The <code>IMPORT_XML</code> procedure creates objects using the names specified in the table instead of the ones specified in the XML document. See the Usage Notes for the format of the rename table.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1952"></a>Usage Notes</p>
<p>See <a href="#CAEBEIDI">"Rename Table"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1953"></a>Examples</p>
<p>This example specifies validation only and a rename table. For an example of the import CLOB being used in an import, see <a href="#CHDEDJIH">"IMPORT_XML Procedure"</a>.</p>
<pre>
DECLARE
importClob  clob;
 
BEGIN
  dbms_lob.createtemporary(importClob, TRUE);
 
  dbms_cube.create_import_options(out_options_xml =&gt; importClob, rename_table =&gt; 'MY_OBJECT_MAP', validate_only =&gt; TRUE);
  
  dbms_output.put_line(importClob);
END;
/
</pre>
<p>It generates the following XML document:</p>
<pre>
&lt;?xml version="1.0"?&gt;
&lt;Import&gt;
  &lt;ImportOptions&gt;
    &lt;Option Name="ValidateOnly" Value="TRUE"/&gt;
    &lt;Option Name="RenameTable" Value="MY_OBJECT_MAP"/&gt;
  &lt;/ImportOptions&gt;
&lt;/Import&gt;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65751" class="refsect2"><a id="CACEIBFJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref1954"></a><a id="sthref1955"></a>CREATE_MVIEW Function</h3>
<p>This function creates a cube materialized view from the definition of a relational materialized view.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1956"></a>Syntax</p>
<pre>
DBMS_CUBE.CREATE_MVIEW (
          mvowner        IN  VARCHAR2,
          mvname         IN  VARCHAR2,
          sam_parameters IN  CLOB  DEFAULT NULL)
     RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1957"></a>Parameters</p>
<div id="ARPLS65752" class="tblformal">
<p class="titleintable"><a id="sthref1958"></a><a id="sthref1959"></a>Table 41-6 CREATE_MVIEW Function Parameters</p>
<table class="cellalignment1229" title="CREATE_MVIEW Function Parameters" summary="Parameter descriptions for CREATE_MVIEW" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Parameter</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>mvowner</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>Owner of the relational materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t14" headers="r1c1-t14">
<p><code>mvname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t14 r1c2-t14">
<p>Name of the relational materialized view. For restrictions, see <a href="#CACIDICJ">"Requirements for the Relational Materialized View"</a>.</p>
<p>A single cube materialized view can replace many of the relational materialized views for a table. Choose the materialized view that has the lowest levels of the dimension hierarchies that you want represented in the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t14" headers="r1c1-t14">
<p><code>sam_parameters</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t14 r1c2-t14">
<p>Parameters in the form '<span class="italic">parameter1</span>=<span class="italic">value1</span>, <span class="italic">parameter2</span>=<span class="italic">value2</span>,...'. See <a href="#CACECDBE">"SQL Aggregation Management Parameters"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACECDBE"></a>SQL Aggregation Management Parameters</p>
<p>The <code>CREATE_MVIEW</code> and <code>DERIVE_FROM_MVIEW</code> functions use the SQL aggregation management (SAM) parameters described in <a href="#CACDIIJC">Table 41-7</a>. Some parameters support the development of cubes with advanced analytics. Other parameters support the development of Java applications. The default settings are appropriate for cube materialized views that are direct replacements for relational materialized views.</p>
<div id="ARPLS65753" class="tblformal">
<p class="titleintable"><a id="sthref1960"></a><a id="CACDIIJC"></a>Table 41-7 SQL Aggregation Management Parameters</p>
<table class="cellalignment1229" title="SQL Aggregation Management Parameters" summary="Parameter descriptions for sam_param" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>ADDTOPS</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>Adds a top level and a level member to every dimension hierarchy in the cube. If the associated relational dimension has no hierarchy, then a dimension hierarchy is created.</p>
<p><code>TRUE</code>: Creates levels named <code>ALL_</code><code><span class="codeinlineitalic">dimension</span></code> with level members <code>All_</code><code><span class="codeinlineitalic">dimension</span></code>. (Default)</p>
<p><code>FALSE</code>: Creates only the hierarchies and levels identified by the relational dimensions.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>ADDUNIQUEKEYPREFIX</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p>Controls the creation of dimension keys.</p>
<p><code>TRUE</code>: Creates cube dimension keys by concatenating the level name with the relational dimension key. This practice assures that the dimension keys are unique across all levels, such as <code>CITY_NEW_YORK</code> and <code>STATE_NEW_YORK</code>. (Default)</p>
<p><code>FALSE</code>: Uses the relational dimension keys as cube dimension keys.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t15" headers="r1c1-t15">
<p><code>ATRMAPTYPE</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t15 r1c2-t15">
<p>Specifies whether attributes are mapped by hierarchy levels, dimension levels, or both.</p>
<p><code>HIER_LEVEL</code>: Maps attributes to the levels of a particular dimension hierarchy. (Default)</p>
<p><code>DIM_LEVEL</code>: Maps attributes to the levels of the dimension regardless of hierarchy.</p>
<p><code>BOTH</code>: Maps attributes to both dimension and hierarchy levels.</p>
<p><code>AUTO</code>: Maps attributes to the levels of the dimension for a star schema and to the levels of a particular dimension hierarchy for a snowflake schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t15" headers="r1c1-t15">
<p><code>AWNAME</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t15 r1c2-t15">
<p>Provides the name of the analytic workspace that owns the cube. Choose a simple database object name of 1 to 30 bytes. The default name is <code><span class="codeinlineitalic">fact_tablename</span></code><code>_AW</code><code><span class="codeinlineitalic">n</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t15" headers="r1c1-t15">
<p><code>BUILD</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t15 r1c2-t15">
<p>Specifies whether a data refresh will immediately follow creation of the cube materialized view.</p>
<p><code>IMMEDIATE</code>: Refreshes immediately.</p>
<p><code>DEFERRED</code>: Does not perform a data refresh. (Default)</p>
<p><span class="bold">Note</span>: Only the <code>CREATE_MVIEW</code> function uses this parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t15" headers="r1c1-t15">
<p><code>CUBEMVOPTION</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t15 r1c2-t15">
<p>Controls validation and creation of a cube materialized view. Regardless of this setting, the function creates an analytic workspace containing a cube and its related cube dimensions.</p>
<p><code>COMPLETE_REFRESH</code>: Creates a complete refresh cube materialized view (full update).</p>
<p><code>FAST_REFRESH</code>: Creates a fast refresh materialized view (incremental update).</p>
<p><code>REWRITE_READY</code>: Runs validation checks for a rewrite cube materialized view, but does not create it.</p>
<p><code>REWRITE</code>: Creates a rewrite cube materialized view.</p>
<p><code>REWRITE_WITH_ATTRIBUTES</code>: Creates a rewrite cube materialized view that includes columns with dimension attributes, resulting in faster query response times. (Default)</p>
<p><span class="bold">Note</span>: <span class="italic">The following settings do not create a cube materialized view.</span> Use Analytic Workspace Manager to drop an analytic workspace that does not have a cube materialized view. You can use the <code>DROP_MVIEW</code> procedure to delete an analytic workspace only when it supports a cube materialized view.</p>
<p><code>NONE</code>: Does not create a cube materialized view.</p>
<p><code>COMPLETE_REFRESH_READY</code>: Runs validation checks for a complete refresh cube materialized view, but does not create it.</p>
<p><code>FAST_REFRESH_READY</code>: Runs validation checks for fast refresh, but does not create the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t15" headers="r1c1-t15">
<p><code>CUBENAME</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t15 r1c2-t15">
<p>Provides the name of the cube derived from the relational materialized view. Choose simple database object name of 1 to 30 bytes. The default name is <code><span class="codeinlineitalic">fact_tablename</span></code><code>_C</code><code><span class="codeinlineitalic">n</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t15" headers="r1c1-t15">
<p><code>DIMJAVABINDVARS</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t15 r1c2-t15">
<p>Supports access by Java programs to the XML document.</p>
<p><code>TRUE</code>: Generates an XML template that uses Java bind variable notation for the names of dimensions. No XML validation is performed. You cannot use the <code>IMPORT_XML</code> procedure to create a cube using this template.</p>
<p><code>FALSE</code>: Generates an XML template that does not support Java bind variables. (Default)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t15" headers="r1c1-t15">
<p><code>DISABLEQRW</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t15 r1c2-t15">
<p>Controls disabling of query rewrite on the source relational materialized view.</p>
<p><code>TRUE</code>: Issues an <code>ALTER MATERIALIZED VIEW</code> <code><span class="codeinlineitalic">mview_name</span></code> <code>DISABLE QUERY REWRITE</code> command.</p>
<p><code>FALSE</code>: No action.</p>
<p><span class="bold">Note</span>: Only the <code>CREATE_MVIEW</code> function with <code>BUILD=IMMEDIATE</code> uses this parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t15" headers="r1c1-t15">
<p><code>EXPORTXML</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t15 r1c2-t15">
<p>Exports the XML that defines the dimensional objects to a file, which you specify as <code><span class="codeinlineitalic">dir/filename</span></code>. Both the directory and the file name are case sensitive.</p>
<p><code><span class="codeinlineitalic">dir</span></code>: Name of a database directory.</p>
<p><code><span class="codeinlineitalic">filename</span></code>: The name of the file, typically given an XML filename extension.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t15" headers="r1c1-t15">
<p><code>FILTERPARTITIONANCESTORLEVELS</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t15 r1c2-t15">
<p>Controls the generation of aggregate values above the partitioning level of a partitioned cube.</p>
<p><code>TRUE</code>: Removes levels above the partitioning level from the cube. Requests for summary values above the partitioning level are solved by SQL.</p>
<p><code>FALSE</code>: All levels are retained in the cube. Requests for summary values are solved by OLAP. (Default)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t15" headers="r1c1-t15">
<p><code>LOGDEST</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t15 r1c2-t15">
<p>Directs and stores log messages. By default, the messages are not available.</p>
<p><code>SERVEROUT</code>: Sends messages to server output (typically the screen), which is suitable when working interactively such as in SQL*Plus or SQL Developer.</p>
<p><code>TRACEFILE</code>: Sends messages to the session trace file.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t15" headers="r1c1-t15">
<p><code>PARTITIONOPTION</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t15 r1c2-t15">
<p>Controls partitioning of the cube.</p>
<p><code>NONE</code>: Prevents partitioning.</p>
<p><code>DEFAULT</code>: Allows the Sparsity Advisor to determine whether partitioning is needed and how to partition the cube. (Default)</p>
<p><code>FORCE</code>: Partitions the cube even when the Sparsity Advisor recommends against it. The Sparsity Advisor identifies the best dimension, hierarchy, and level to use for partitioning.</p>
<p><code><span class="codeinlineitalic">dimension.hierarchy.level</span></code>: Partitions the cube using the specified dimension, hierarchy, and level.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t15" headers="r1c1-t15">
<p><code>POPULATELINEAGE</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t15 r1c2-t15">
<p>Controls the appearance of attributes in a cube materialized view.</p>
<p><code>TRUE</code>: Includes all dimension attributes in the cube materialized view. (Default)</p>
<p><code>FALSE</code>: Omits all dimension attributes from the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t15" headers="r1c1-t15">
<p><code>PRECOMPUTE</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t15 r1c2-t15">
<p>Identifies a percentage of the data that is aggregated and stored. The remaining values are calculated as required by queries during the session.</p>
<p><code><span class="codeinlineitalic">precompute_percentage</span></code>[:<code><span class="codeinlineitalic">precompute_top_percentage</span></code>]</p>
<p>Specify the top percentage for partitioned cubes. The default value is 35:0, which specifies precomputing 35% of the bottom partition and 0% of the top partition. If the cube is not partitioned, then the second number is ignored.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t15" headers="r1c1-t15">
<p><code>REMAPCOMPOSITEKEYS</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t15 r1c2-t15">
<p>Controls how multicolumn keys are rendered in the cube.</p>
<p><code>TRUE</code>: Creates a unique key attribute whose values are concatenated string expressions with an underscore between the column values. For example, the value <code>BOSTON_MA_USA</code> might be an expression produced from a multicolumn key composed of <code>CITY</code>, <code>STATE</code>, and <code>COUNTRY</code> columns. In addition, an attribute is created for each individual column to store the relational keys. (Default)</p>
<p><code>FALSE</code>: Creates a unique key attribute for each column.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t15" headers="r1c1-t15">
<p><code>RENDERINGMODE</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t15 r1c2-t15">
<p>Controls whether a loss in fidelity between the relational materialized view and the cube materialized view results in a warning message or an exception. See <a href="#CACJCFDI">"Requirements for the Relational Materialized View"</a>.</p>
<p><code>LOOSE</code>: Losses are noted in the optional logs generated by the <a href="#CACEIBFJ">CREATE_MVIEW Function</a> and the <a href="#CACCHGHD">DERIVE_FROM_MVIEW Function</a>. No exceptions are raised. (Default)</p>
<p><code>STRICT</code>: Any loss in fidelity raises an exception so that no XML template is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t15" headers="r1c1-t15">
<p><code>SEEFILTERS</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t15 r1c2-t15">
<p>Controls whether conditions in the <code>WHERE</code> clause of the relational materialized view's defining query are retained or ignored.</p>
<p><code>TRUE</code>: Renders valid conditions in the XML template. (Default)</p>
<p><code>FALSE</code>: Ignores all conditions.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t15" headers="r1c1-t15">
<p><code>UNIQUENAMES</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t15 r1c2-t15">
<p>Controls whether top level dimensional objects have unique names. Cross namespace conflicts may occur because dimensional objects have different namespaces than relational objects.</p>
<p><code>TRUE</code>: Modifies all relational names when they are rendered in the cube.(Default)</p>
<p><code>FALSE</code>: Duplicates relational names in the cube unless a naming conflict is detected. In that case, a unique name is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t15" headers="r1c1-t15">
<p><code>UNKNOWNKEYASDIM</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t15 r1c2-t15">
<p>Controls handling of simple columns with no levels or hierarchies in the <code>GROUP BY</code> clause of the relational materialized view's defining query.</p>
<p><code>TRUE</code>: Renders a simple column without a relational dimension as a cube dimension with no levels or hierarchies.</p>
<p><code>FALSE</code>: Raises an exception when no relational dimension is found for the column. (Default)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t15" headers="r1c1-t15">
<p><code>VALIDATEXML</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t15 r1c2-t15">
<p>Controls whether the generated XML document is validated.</p>
<p><code>TRUE</code>: Validates the template using the <code>VALIDATE_XML</code> procedure. (Default)</p>
<p><code>FALSE</code>: No validation is done.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1961"></a>Returns</p>
<p>The name of the cube materialized view created by the function.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1962"></a>Usage Notes</p>
<p>See <a href="#CACEFFFF">"Using SQL Aggregation Management"</a></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1963"></a>Examples</p>
<p>All examples for the SQL Aggregate Management subprograms use the sample Sales History schema, which is installed in Oracle Database with two relational materialized views: <code>CAL_MONTH_SALES_MV</code> and <code>FWEEK_PSCAT_SALES_MV</code>.</p>
<p>The following script creates a cube materialized view using <code>CAL_MONTH_SALES_MV</code> as the relational materialized view. It uses all default options.</p>
<pre>
SET serverout ON format wrapped
 
DECLARE
     salesaw  varchar2(30);

BEGIN
     salesaw := dbms_cube.create_mview('SH', 'CAL_MONTH_SALES_MV');
END;
/
</pre>
<p>The next example sets several parameters for creating a cube materialized view from <code>FWEEK_PSCAT_SALES_MV</code>. These parameters change the cube materialized view in the following ways:</p>
<ul>
<li>
<p><code>ADDTOPS</code>: Adds a top level consisting of a single value to the hierarchies. All of the dimensions in Sales History have a top level already.</p>
</li>
<li>
<p><code>PRECOMPUTE</code>: Changes the percentage of materialized aggregates from 35:0 to 40:10.</p>
</li>
<li>
<p><code>EXPORTXML</code>: Creates a text file for the XML document.</p>
</li>
<li>
<p><code>BUILD</code>: Performs a data refresh.</p>
</li>
</ul>
<pre>
DECLARE
     salescubemv   varchar2(30);
     sam_param     clob := 'ADDTOPS=FALSE,
                            PRECOMPUTE=40:10,
                            EXPORTXML=WORK_DIR/sales.xml,
                            BUILD=IMMEDIATE';
  
BEGIN
     salescubemv := dbms_cube.create_mview('SH', 'FWEEK_PSCAT_SALES_MV', 
                    sam_param);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65754" class="refsect2"><a id="CACCHGHD"></a>
<hr />
<h3 class="refsect2"><a id="sthref1964"></a>DERIVE_FROM_MVIEW Function</h3>
<p>This function generates an XML template that defines a cube with materialized view capabilities, using the information derived from an existing relational materialized view.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1965"></a>Syntax</p>
<pre>
DBMS_CUBE.DERIVE_FROM_MVIEW (
          mvowner        IN  VARCHAR2,
          mvname         IN  VARCHAR2,
          sam_parameters IN  CLOB  DEFAULT NULL)
     RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1966"></a>Parameters</p>
<div id="ARPLS65755" class="tblformal">
<p class="titleintable"><a id="sthref1967"></a><a id="sthref1968"></a>Table 41-8 DERIVE_FROM_MVIEW Function Parameters</p>
<table class="cellalignment1229" title="DERIVE_FROM_MVIEW Function Parameters" summary="Parameter descriptions for DERIVE_FROM_MVIEW" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t16">Parameter</th>
<th class="cellalignment1227" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t16" headers="r1c1-t16">
<p><code>mvowner</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t16 r1c2-t16">
<p>Owner of the relational materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t16" headers="r1c1-t16">
<p><code>mvname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t16 r1c2-t16">
<p>Name of the relational materialized view. For restrictions, see <a href="#CACIDICJ">"Requirements for the Relational Materialized View"</a>.</p>
<p>A single cube materialized view can replace many of the relational materialized views for a table. Choose the materialized view that has the lowest levels of the dimension hierarchies that you want represented in the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t16" headers="r1c1-t16">
<p><code>sam_parameters</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t16 r1c2-t16">
<p>Optional list of parameters in the form '<span class="italic">parameter1</span>=<span class="italic">value1</span>, <span class="italic">parameter2</span>=<span class="italic">value2</span>,...'. See <a href="#CACECDBE">"SQL Aggregation Management Parameters"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1969"></a>Returns</p>
<p>An XML template that defines an analytic workspace containing a cube enabled as a materialized view.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1970"></a>Usage Notes</p>
<p>To create a cube materialized view from an XML template, use the <code>IMPORT_XML</code> procedure. Then use the <code>REFRESH_MVIEW</code> procedure to refresh the cube materialized view with data.</p>
<p>See <a href="#CACEFFFF">"Using SQL Aggregation Management"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1971"></a>Examples</p>
<p>The following example generates an XML template named <code>sales_cube.xml</code> from the <code>CAL_MONTH_SALES_MV</code> relational materialized view in the <code>SH</code> schema.</p>
</div>
<!-- class="refsubsect" -->
<pre>
DECLARE
     salescubexml  clob := null;
     sam_param     clob := 'exportXML=WORK_DIR/sales_cube.xml';
     
BEGIN
     salescubexml := dbms_cube.derive_from_mview('SH', 'CAL_MONTH_SALES_MV',
     sam_param);
END;
/
</pre></div>
<!-- class="refsect2" -->
<div id="ARPLS65756" class="refsect2"><a id="CACEDEEI"></a>
<hr />
<h3 class="refsect2"><a id="sthref1972"></a>DROP_MVIEW Procedure</h3>
<p>This procedure drops a cube materialized view and all associated objects from the database. These objects include the dimension materialized views, cubes, cube dimensions, levels, hierarchies, and the analytic workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1973"></a>Syntax</p>
<pre>
DBMS_CUBE.DROP_MVIEW (
          mvowner        IN  VARCHAR2,
          mvname         IN  VARCHAR2,
          sam_parameters IN  CLOB  DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1974"></a>Parameters</p>
<div id="ARPLS65757" class="tblformal">
<p class="titleintable"><a id="sthref1975"></a><a id="sthref1976"></a>Table 41-9 DROP_MVIEW Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_MVIEW Procedure Parameters" summary="Parameter descriptions for DROP_MVIEW" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t17">Parameter</th>
<th class="cellalignment1227" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t17" headers="r1c1-t17">
<p><code>mvowner</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t17 r1c2-t17">
<p>Owner of the cube materialized view</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t17" headers="r1c1-t17">
<p><code>mvname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t17 r1c2-t17">
<p>Name of the cube materialized view</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t17" headers="r1c1-t17">
<p><code>sam_parameters</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t17 r1c2-t17">
<p><code>EXPORTXML</code>: Exports the XML that drops the dimensional objects to a file, which you specify as <code><span class="codeinlineitalic">dir/filename</span></code>. Both the directory and the file name are case sensitive.</p>
<p><code><span class="codeinlineitalic">dir</span></code>: Name of a database directory.</p>
<p><code><span class="codeinlineitalic">filename</span></code>: The name of the file, typically given an XML filename extension.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1977"></a>Usage Notes</p>
<p>Use this procedure to drop a cube materialized view that you created using the <code>CREATE_MVIEW</code> and <code>DERIVE_FROM_MVIEW</code> functions. If you make modifications to the cubes or dimensions, then <code>DROP_MVIEW</code> may not be able to drop the cube materialized view.</p>
<p>Some of the <code>CUBEMVOPTION</code> parameters used by the <code>CREATE_MVIEW</code> and <code>DERIVE_FROM_MVIEW</code> functions do not create a materialized view. Use Analytic Workspace Manager to drop the analytic workspace, cubes, and cube dimensions.</p>
<p>If you use the <code>EXPORTXML</code> parameter, then you can use the XML document to drop the cube materialized view, after you re-create it. Use the <code>IMPORT_XML</code> procedure.</p>
<p>See <a href="#CACEFFFF">"Using SQL Aggregation Management"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1978"></a>Examples</p>
<p>The current schema has four materialized views. <code>CB$CAL_MONTH_SALES</code> is a cube materialized view for the <code>SALES</code> table. <code>CB$TIMES_DIM_D1_CAL_ROLLUP</code> is a cube dimension materialized view for the <code>TIMES_DIM</code> dimension on the <code>TIMES</code> dimension table. The others are relational materialized views.</p>
<pre>
SELECT mview_name FROM user_mviews;
 
MVIEW_NAME
------------------------------
CB$CAL_MONTH_SALES
CB$TIMES_DIM_D1_CAL_ROLLUP
CAL_MONTH_SALES_MV
FWEEK_PSCAT_SALES_MV
 
</pre>
<p>The following command drops both <code>CB$CAL_MONTH_SALES</code> and <code>CB$TIMES_DIM_D1_CAL_ROLLUP</code>.</p>
<pre>
EXECUTE dbms_cube.drop_mview('SH', 'CB$CAL_MONTH_SALES');

Dropped cube organized materialized view "SH"."CAL_MONTH_SALES" 
including container analytic workspace "SH"."CAL_MONTH_SALES_AW" 
at 20081110 16:31:40.056.
</pre>
<p>This query against the data dictionary confirms that the materialized views have been dropped.</p>
<pre>
SELECT mview_name FROM user_mviews;
 
MVIEW_NAME
------------------------------
CAL_MONTH_SALES_MV
FWEEK_PSCAT_SALES_MV
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72232" class="refsect2"><a id="CACFDHAC"></a>
<hr />
<h3 class="refsect2"><a id="sthref1979"></a>EXPORT_XML Procedure</h3>
<p>This procedure writes OLAP metadata to a CLOB.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1980"></a>Syntax</p>
<pre>
DBMS_CUBE.EXPORT_XML
       (object_ids            IN      VARCHAR2,
        out_xml               IN/OUT  CLOB;

DBMS_CUBE.EXPORT_XML
       (object_ids            IN      VARCHAR2,
        options_xml           IN      CLOB,
        out_xml               IN/OUT  CLOB;

DBMS_CUBE.EXPORT_XML
       (object_ids            IN      VARCHAR2,
        options_dirname       IN      VARCHAR2,
        options_filename      IN      VARCHAR2,
        out_xml               IN/OUT  CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1981"></a>Parameters</p>
<div id="ARPLS72233" class="tblformal">
<p class="titleintable"><a id="sthref1982"></a><a id="sthref1983"></a>Table 41-10 EXPORT_XML Procedure Parameters</p>
<table class="cellalignment1229" title="EXPORT_XML Procedure Parameters" summary="DBMS_CUBE.IMPORT_XML parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Parameter</th>
<th class="cellalignment1227" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p><code>object_ids</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<p>Any of these identifiers.</p>
<ul>
<li>
<p>The name of a schema, such as <code>GLOBAL</code>.</p>
</li>
<li>
<p>The fully qualified name of an analytic workspace in the form <code><span class="codeinlineitalic">owner.aw_name</span></code><code>.AW</code>, such as <code>GLOBAL.GLOBAL.AW</code>.</p>
</li>
<li>
<p>Cube</p>
</li>
<li>
<p>Dimension</p>
</li>
<li>
<p>Named build process</p>
</li>
<li>
<p>Measure folder</p>
</li>
</ul>
<p>You can specify multiple objects by separating the names with commas.</p>
<p><span class="bold">Note</span>: When exporting an individual object, be sure to export any objects required to reconstruct it. For example, when exporting a cube, you must also export the dimensions of the cube.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t18" headers="r1c1-t18">
<p><code>options_dirname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t18 r1c2-t18">
<p>The case-sensitive name of a database directory that contains <code><span class="codeinlineitalic">options_filename</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t18" headers="r1c1-t18">
<p><code>options_filename</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t18 r1c2-t18">
<p>A file containing an XML document of export options.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t18" headers="r1c1-t18">
<p><code>options_xml</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t18 r1c2-t18">
<p>A CLOB variable that contains an XML document of export options. Use the <a href="#CAEBEIDA">CREATE_EXPORT_OPTIONS Procedure</a> to generate this document.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t18" headers="r1c1-t18">
<p><code>out_xml</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t18 r1c2-t18">
<p>A CLOB variable that will store the XML document of OLAP metadata for the objects listed in <code><span class="codeinlineitalic">object_ids</span></code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1984"></a>Export Options</p>
<p>The default settings for the export options are appropriate in many cases, so you can omit the <code><span class="codeinlineitalic">options_xml</span></code> parameter or the <code><span class="codeinlineitalic">options_dirname</span></code> and <code><span class="codeinlineitalic">options_filename</span></code> parameters. However, when upgrading Oracle OLAP 10<span class="italic">g</span> metadata to OLAP 11<span class="italic">g</span>, you must specify an XML document that changes the default settings. This example changes all of the parameters from False to True; set them appropriately for your schema.</p>
<pre>
&lt;?xml version="1.0"?&gt;
&lt;Export&gt;
  &lt;ExportOptions&gt;
    &lt;Option Name="SuppressNamespace" Value="True"/&gt; 
    &lt;Option Name="SuppressOwner" Value="True"/&gt; 
    &lt;Option Name="PreserveTableOwners" Value="True"/&gt; 
  &lt;/ExportOptions&gt;
&lt;/Export&gt; 
</pre>
<p>You can create this XML document manually or by using the <a href="#CAEBEIDA">CREATE_EXPORT_OPTIONS Procedure</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1985"></a>Usage Notes</p>
<p>See <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1986"></a>Example</p>
<p>For an example of using <code>EXPORT_XML</code> in an upgrade to the same schema, see <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
<p>The following PL/SQL script copies an OLAP 11<span class="italic">g</span> analytic workspace named <code>GLOBAL11</code> from the <code>GLOBAL_AW</code> schema to the <code>GLOBAL</code> schema. No upgrade is performed.</p>
<p>To upgrade into a different schema, change the example as follows:</p>
<ul>
<li>
<p>Call the <code>INITIALIZE_CUBE_UPGRADE</code> procedure.</p>
</li>
<li>
<p>Call the <code>CREATE_EXPORT_OPTIONS</code> procedure with the additional parameter setting <code>SUPPRESS_NAMESPACE=&gt;TRUE</code>.</p>
</li>
</ul>
<p>The PL/SQL client must be connected to the database as <code>GLOBAL</code>. The <code>GLOBAL</code> user must have <code>SELECT</code> permissions on <code>GLOBAL_AW.AW$GLOBAL</code> and on all relational data sources.</p>
<pre>
BEGIN
  -- Create a CLOB for the export options
  dbms_lob.createtemporary(optionsClob, TRUE);
  dbms_cube.create_export_options(out_options_xml=&gt;optionsClob, suppress_owner=&gt;TRUE, preserve_table_owners=&gt;TRUE);
 
  -- Create a CLOB for the XML template
  dbms_lob.createtemporary(exportClob, TRUE);
  
  -- Export metadata from an analytic workspace to a CLOB
  dbms_cube.export_xml(object_ids=&gt;'GLOBAL_AW.GLOBAL11.AW', options_xml=&gt;optionsClob, out_xml=&gt;exportClob); 
 
  -- Import metadata from the CLOB
  dbms_cube.import_xml(in_xml=&gt;exportClob);
 
  -- Load and aggregate the data
  dbms_cube.build(script=&gt;'GLOBAL.UNITS_CUBE, GLOBAL.PRICE_AND_COST_CUBE');
 
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72888" class="refsect2"><a id="CACIEHDC"></a>
<hr />
<h3 class="refsect2"><a id="sthref1987"></a><a id="sthref1988"></a>EXPORT_XML_TO_FILE Procedure</h3>
<p>This procedure exports OLAP metadata to a file. This file can be imported into a new or existing analytic workspace using the <code>IMPORT_XML</code> procedure. In this way, you can create a copy of the analytic workspace in another schema or database.</p>
<p>This procedure can also be used as part of the process for upgrading CWM or OLAP standard form (AWXML) metadata contained in an Oracle OLAP 10<span class="italic">g</span> analytic workspace to OLAP 11<span class="italic">g</span> format.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1989"></a>Syntax</p>
<pre>
DBMS_CUBE.EXPORT_XML_TO_FILE
       (object_ids            IN      VARCHAR2,
        output_dirname        IN      VARCHAR2,
        output_filename       IN      VARCHAR2;

DBMS_CUBE.EXPORT_XML_TO_FILE
       (object_ids            IN      VARCHAR2,
        options_dirname       IN      VARCHAR2,
        options_filename      IN      VARCHAR2,
        output_dirname        IN      VARCHAR2,
        output_filename       IN      VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1990"></a>Parameters</p>
<div id="ARPLS72889" class="tblformal">
<p class="titleintable"><a id="sthref1991"></a><a id="sthref1992"></a>Table 41-11 EXPORT_XML_TO_FILE Procedure Parameters</p>
<table class="cellalignment1229" title="EXPORT_XML_TO_FILE Procedure Parameters" summary="DBMS_CUBE.IMPORT_XML_TO_FILE parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t19">Parameter</th>
<th class="cellalignment1227" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t19" headers="r1c1-t19">
<p><code>object_ids</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t19 r1c2-t19">
<p>Any of these identifiers.</p>
<ul>
<li>
<p>The name of a schema, such as <code>GLOBAL</code>.</p>
</li>
<li>
<p>The fully qualified name of an analytic workspace in the form <code><span class="codeinlineitalic">owner.aw_name</span></code><code>.AW</code>, such as <code>GLOBAL.GLOBAL.AW</code>.</p>
</li>
<li>
<p>Cube</p>
</li>
<li>
<p>Dimension</p>
</li>
<li>
<p>Named build process</p>
</li>
<li>
<p>Measure folder</p>
</li>
</ul>
<p>You can specify multiple objects by separating the names with commas.</p>
<p><span class="bold">Note</span>: When exporting an individual object, be sure to export any objects required to reconstruct it. For example, when you export a cube, you must also export the dimensions of the cube.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t19" headers="r1c1-t19">
<p><code>options_dirname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t19 r1c2-t19">
<p>The case-sensitive name of a database directory that contains <code>options_filename</code>. See <a href="#CACHFBBI">"Export Options"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t19" headers="r1c1-t19">
<p><code>options_filename</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t19 r1c2-t19">
<p>The name of a file containing an XML document of export options. See <a href="#CACHFBBI">"Export Options"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t19" headers="r1c1-t19">
<p><code>output_dirname</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t19 r1c2-t19">
<p>The case-sensitive name of a database directory where <code><span class="codeinlineitalic">output_filename</span></code> is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t19" headers="r1c1-t19">
<p><code>output_filename</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t19 r1c2-t19">
<p>The name of the template file created by the procedure.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CACHFBBI"></a>Export Options</p>
<p>The default settings for the export options are appropriate in most cases, and you can omit the <code><span class="codeinlineitalic">options_dirname</span></code> and <code><span class="codeinlineitalic">options_filename</span></code> parameters. However, when upgrading Oracle OLAP 10<span class="italic">g</span> metadata to OLAP 11<span class="italic">g</span>, you must specify an XML document that changes the default settings, like the following:</p>
<pre>
&lt;?xml version="1.0"?&gt;
&lt;Export&gt;
  &lt;ExportOptions&gt;
    &lt;Option Name="SuppressNamespace" Value="True"/&gt; 
    &lt;Option Name="SuppressOwner" Value="True"/&gt; 
    &lt;Option Name="PreserveTableOwners" Value="True"/&gt; 
  &lt;/ExportOptions&gt;
&lt;/Export&gt; 
</pre>
<p>You can create this XML document manually or by using the <a href="#CAEBEIDA">CREATE_EXPORT_OPTIONS Procedure</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1993"></a>Usage Notes</p>
<p>See <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1994"></a>Examples</p>
<p>The following example generates an XML file named global.xml in OLAP 11<span class="italic">g</span> format using the default export settings. The metadata is derived from all analytic workspaces and CWM metadata in the <code>GLOBAL_AW</code> schema. The output file is generated in the <code>WORK_DIR</code> database directory.</p>
<pre>
execute dbms_cube.export_xml_to_file('GLOBAL_AW', 'WORK_DIR', 'global.xml');
</pre>
<p>The next example also generates an XML file named global.xml in OLAP 11<span class="italic">g</span> format using the export options set in options.xml. The metadata is derived from the GLOBAL analytic workspace in the <code>GLOBAL_AW</code> schema. Both the options file and the output file are in the <code>WORK_DIR</code> database directory.</p>
<pre>
execute dbms_cube.export_xml_to_file('GLOBAL_AW.GLOBAL.AW', 'WORK_DIR', 'options.xml', 'WORK_DIR', 'global.xml');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65758" class="refsect2"><a id="CHDEDJIH"></a>
<hr />
<h3 class="refsect2">I<a id="sthref1995"></a>MPORT_XML Procedure</h3>
<p>This procedure creates, modifies, or drops an analytic workspace by using an XML template.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1996"></a>Syntax</p>
<pre>
DBMS_CUBE.IMPORT_XML
       (dirname               IN      VARCHAR2,
        filename              IN      VARCHAR2 );

DBMS_CUBE.IMPORT_XML
       (dirname               IN      VARCHAR2,
        filename              IN      VARCHAR2,
        out_xml               IN/OUT  CLOB );

DBMS_CUBE.IMPORT_XML
       (input_dirname         IN      VARCHAR2,
        input_filename        IN      VARCHAR2 
        options_dirname       IN      VARCHAR2,
        options_filename      IN      VARCHAR2,
        out_xml               IN/OUT  CLOB );

DBMS_CUBE.IMPORT_XML
       (in_xml                IN      CLOB );

DBMS_CUBE.IMPORT_XML
       (in_xml                IN      CLOB,
        out_xml               IN/OUT  CLOB );

DBMS_CUBE.IMPORT_XML

       (in_xml                IN      CLOB,
        options_xml           IN      CLOB,
        out_xml               IN/OUT  CLOB );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref1997"></a>Parameters</p>
<div id="ARPLS65759" class="tblformal">
<p class="titleintable"><a id="sthref1998"></a><a id="sthref1999"></a>Table 41-12 IMPORT_XML Procedure Parameters</p>
<table class="cellalignment1229" title="IMPORT_XML Procedure Parameters" summary="DBMS_CUBE.IMPORT_XML parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t20">Parameter</th>
<th class="cellalignment1227" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t20" headers="r1c1-t20">
<p><code>dirname</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t20 r1c2-t20">
<p>The case-sensitive name of a database directory containing the XML document describing an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t20" headers="r1c1-t20">
<p><code>filename</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t20 r1c2-t20">
<p>A file containing an XML document describing an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t20" headers="r1c1-t20">
<p><code>in_xml</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t20 r1c2-t20">
<p>A CLOB containing an XML document describing an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t20" headers="r1c1-t20">
<p><code>input_dirname</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t20 r1c2-t20">
<p>The case-sensitive name of a database directory containing the XML document describing an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t20" headers="r1c1-t20">
<p><code>input_filename</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t20 r1c2-t20">
<p>A file containing an XML document describing an analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t20" headers="r1c1-t20">
<p><code>options_dirname</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t20 r1c2-t20">
<p>The case-sensitive name of a database directory containing a file of import options.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t20" headers="r1c1-t20">
<p><code>options_filename</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t20 r1c2-t20">
<p>A file of import options.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t20" headers="r1c1-t20">
<p><code>options_xml</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t20 r1c2-t20">
<p>An XML document describing the import options. Use the <a href="#CAEEJGCH">CREATE_IMPORT_OPTIONS Procedure</a> to generate this document.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t20" headers="r1c1-t20">
<p><code>out_xml</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t20 r1c2-t20">
<p>An XML document that either describes the analytic workspace or, for validation only, describes any errors. It may contain changes that <code>DBMS_CUBE</code> made to the imported XML, such as setting default values or making minor corrections to the XML.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2000"></a>Usage Notes</p>
<p>The XML can define, modify, or drop an entire analytic workspace, or one or more cubes or dimensions. When defining just cubes or dimensions, you must do so within an existing analytic workspace.</p>
<p>You can also use <code>IMPORT_XML</code> to drop an analytic workspace by using the XML document generated by the <code>DROP_MVIEW</code> procedure with the <code>EXPORTXML</code> parameter.</p>
<p>See <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2001"></a>Example</p>
<p>This example loads an XML template from a file named <code>GLOBAL.XML</code> and located in a database directory named <code>XML_DIR</code>.</p>
<pre>
EXECUTE dbms_cube.import_xml('XML_DIR', 'GLOBAL.XML');
</pre>
<p>The next example exports an OLAP 10<span class="italic">g</span> template and uses <code>IMPORT_XML</code> to validate it before an upgrade to 11<span class="italic">g</span>.</p>
<pre>
DECLARE
 
  exportOptClob clob;
  importOptClob clob;
  importClob    clob;
  exportClob    clob;
  
BEGIN
 
  -- Create a CLOB for the export options
  dbms_lob.createtemporary(exportOptClob, TRUE);
  dbms_cube.create_export_options(out_options_xml=&gt;exportOptClob, suppress_namespace=&gt;TRUE, preserve_table_owners=&gt;TRUE);
 
  -- Create a CLOB for the XML template
  dbms_lob.createtemporary(exportClob, TRUE);
 
  -- Create a CLOB for import options
  dbms_lob.createtemporary(importOptClob, TRUE);
  dbms_cube.create_import_options(out_options_xml=&gt;importOptClob, validate_only=&gt;TRUE);
   
  -- Create a CLOB for the change log
  dbms_lob.createtemporary(importClob, TRUE);
  
  -- Enable 11g clients to access 10g metadata
  dbms_cube.initialize_cube_upgrade;
 
  -- Export metadata from an analytic workspace to a CLOB
  dbms_cube.export_xml(object_ids=&gt;'GLOBAL_AW', options_xml=&gt;exportOptClob, out_xml=&gt;exportClob); 
 
  /* Import metadata from the CLOB. No objects are committed to the database
     because the validate_only parameter of CREATE_IMPORT_OPTIONS is set to
     TRUE.
  */
 
  dbms_cube.import_xml(in_xml=&gt;exportClob, options_xml=&gt;importOptClob, out_xml=&gt;importClob);
 
   -- Output the metadata changes
  dbms_output.put_line('This is the validation log:');
  dbms_output.put_line(importClob);
  
END;
/
</pre>
<p>The contents of <code>importClob</code> show that the XML is valid. Otherwise, error messages appear in the <code>&lt;RootCommitResult&gt;</code> element.</p>
<pre>
This is the validation log:
&lt;?xml version="1.0" encoding="UTF-16"?&gt;
&lt;RootCommitResult&gt;
 
&lt;/RootCommitResult&gt;
</pre></div>
<!-- class="refsubsect" -->
<p>For an example of <code>IMPORT_XML</code> within the context of an upgrade from 10<span class="italic">g</span> to 11<span class="italic">g</span> metadata, see <a href="#CAEBGGHJ">"Custom Upgrade"</a>.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72891" class="refsect2"><a id="CACGGGJC"></a>
<hr />
<h3 class="refsect2"><a id="sthref2002"></a>INITIALIZE_CUBE_UPGRADE Procedure</h3>
<p>This procedure processes analytic workspaces created in Oracle OLAP 10<span class="italic">g</span> so they can be used by Oracle OLAP 11<span class="italic">g</span> clients. It processes all analytic workspaces in the current schema. Run this procedure once for each schema in which there are 10<span class="italic">g</span> analytic workspaces.</p>
<p>Without this processing step, 11<span class="italic">g</span> clients cannot connect to a database containing a 10<span class="italic">g</span> analytic workspace with subobjects of a dimension or cube having the same name. Additionally, some <code>DBMS_CUBE</code> procedures and functions, such as <code>EXPORT_XML</code> and <code>EXPORT_XML_TO_FILE</code>, do not work on the 10<span class="italic">g</span> metadata.</p>
<p>After processing, OLAP 11<span class="italic">g</span> clients can connect and use the alternate names provided by <code>INITIALIZE_CUBE_UPGRADE</code> for the conflicting subobjects. OLAP 10<span class="italic">g</span> clients continue to use the original names.</p>
<p><code>INITIALIZE_CUBE_UPGRADE</code> does not upgrade any OLAP 10<span class="italic">g</span> objects to OLAP 11<span class="italic">g</span> format.</p>
<p>See <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2003"></a>Syntax</p>
<pre>
DBMS_CUBE.INITIALIZE_CUBE_UPGRADE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2004"></a>Usage Notes</p>
<p>This procedure creates and populates a table named <a id="sthref2005"></a><code>CUBE_UPGRADE_INFO</code>. If it already exists, the table is truncated and repopulated.</p>
<p>While the 10<span class="italic">g</span> namespace allowed subobjects with the same name in the same dimension or cube, the 11<span class="italic">g</span> namespace does not. When <code>INITIALIZE_CUBE_UPGRADE</code> detects a name conflict among subobjects such as levels, hierarchies, and dimension attributes, it creates a row in <code>CUBE_UPGRADE_INFO</code> providing a new, unique name for each one. Rows may also be created for objects that do not require renaming; these rows are distinguished by a value of 0 or null in the <code>CONFLICT</code> column. Top-level objects, such as dimensions and cubes, are not listed.</p>
<p>You can edit the table using SQL <code>INSERT</code> and <code>UPDATE</code> if you want to customize the names of OLAP 10<span class="italic">g</span> objects on OLAP 11<span class="italic">g</span> clients.</p>
<p>The <code>UPGRADE_AW</code>, <code>EXPORT_XML</code> and <code>EXPORT_XML_TO_FILE</code> procedures use the names specified in the <code>NEW_NAME</code> column of the table to identify objects in CWM or OLAP standard form (AWXML) analytic workspaces, rather than the original names.</p>
<p>The following table describes the columns of <code>CUBE_UPGRADE_INFO</code>.</p>
<div class="inftblinformal">
<table class="cellalignment1226" title="CUBE_UPGRADE_INFO Table" summary="Column descriptions for CUBE_UPGRADE_INFO" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Column</th>
<th class="cellalignment1227" id="r1c2-t21">Datatype</th>
<th class="cellalignment1227" id="r1c3-t21">NULL</th>
<th class="cellalignment1227" id="r1c4-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21"><code>OWNER</code></td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21"><code>VARCHAR2</code></td>
<td class="cellalignment1228" headers="r2c1-t21 r1c3-t21"><code>NOT NULL</code></td>
<td class="cellalignment1228" headers="r2c1-t21 r1c4-t21">Owner of the analytic workspace.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t21" headers="r1c1-t21"><code>AW</code></td>
<td class="cellalignment1228" headers="r3c1-t21 r1c2-t21"><code>VARCHAR2</code></td>
<td class="cellalignment1228" headers="r3c1-t21 r1c3-t21"><code>NOT NULL</code></td>
<td class="cellalignment1228" headers="r3c1-t21 r1c4-t21">Name of the analytic workspace.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t21" headers="r1c1-t21"><code>AWXML_ID</code></td>
<td class="cellalignment1228" headers="r4c1-t21 r1c2-t21"><code>VARCHAR2</code></td>
<td class="cellalignment1228" headers="r4c1-t21 r1c3-t21"><code>NOT NULL</code></td>
<td class="cellalignment1228" headers="r4c1-t21 r1c4-t21">Full logical name of the object requiring modification, in the form <code><span class="codeinlineitalic">simple_name.[subtype_name].object_type</span></code>. For example, <code>TIME.DIMENSION</code> and <code>PRODUCT.COLOR.ATTRIBUTE</code>.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t21" headers="r1c1-t21"><code>NEW_NAME</code></td>
<td class="cellalignment1228" headers="r5c1-t21 r1c2-t21"><code>VARCHAR2</code></td>
<td class="cellalignment1228" headers="r5c1-t21 r1c3-t21"><code>NOT NULL</code></td>
<td class="cellalignment1228" headers="r5c1-t21 r1c4-t21">The name the object will have in Oracle 11<span class="italic">g</span> after the upgrade.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t21" headers="r1c1-t21"><code>OBJECT_CLASS</code></td>
<td class="cellalignment1228" headers="r6c1-t21 r1c2-t21"><code>VARCHAR2</code></td>
<td class="cellalignment1228" headers="r6c1-t21 r1c3-t21">--</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c4-t21"><code>DerivedMeasure</code> for calculated measures, or empty for all other object types.</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t21" headers="r1c1-t21"><code>CONFLICT</code></td>
<td class="cellalignment1228" headers="r7c1-t21 r1c2-t21"><code>NUMBER</code></td>
<td class="cellalignment1228" headers="r7c1-t21 r1c3-t21">--</td>
<td class="cellalignment1228" headers="r7c1-t21 r1c4-t21">Indicates the reason that the row was added to CUBE_UPGRADE_INFO:
<ul>
<li>
<p><code>0</code>: The object does not have a naming conflict but appears in the table for other reasons.</p>
</li>
<li>
<p><code>1</code>: Two objects have the same name and would create a conflict in the OLAP 11<span class="italic">g</span> namespace. The object type (such as level or hierarchy) will be added to the names.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2006"></a>Examples</p>
<p>The following command creates and populates the CUBE_UPGRADE_INFO table:</p>
<pre>
EXECUTE dbms_cube.initialize_cube_upgrade;
</pre>
<p>The table shows that the OLAP 10<span class="italic">g</span> analytic workspace has a hierarchy and a level named MARKET_SEGMENT, which will be renamed. The table also contains rows for calculated measures, but these objects do not require renaming: The value of <code>CONFLICT</code> is <code>0</code>.</p>
<pre>
SELECT awxml_id, new_name, conflict FROM cube_upgrade_info;

AWXML_ID                                 NEW_NAME                    CONFLICT
---------------------------------------- ------------------------- ----------
CUSTOMER.MARKET_SEGMENT.HIERARCHY        MARKET_SEGMENT_HIERARCHY           1
CUSTOMER.MARKET_SEGMENT.LEVEL            MARKET_SEGMENT_LEVEL               1
UNITS_CUBE.EXTENDED_COST.MEASURE         EXTENDED_COST                      0
UNITS_CUBE.EXTENDED_MARGIN.MEASURE       EXTENDED_MARGIN                    0
UNITS_CUBE.CHG_SALES_PP.MEASURE          CHG_SALES_PP                       0
UNITS_CUBE.CHG_SALES_PY.MEASURE          CHG_SALES_PY                       0
UNITS_CUBE.PCTCHG_SALES_PP.MEASURE       PCTCHG_SALES_PP                    0
UNITS_CUBE.PCTCHG_SALES_PY.MEASURE       PCTCHG_SALES_PY                    0
UNITS_CUBE.PRODUCT_SHARE.MEASURE         PRODUCT_SHARE                      0
UNITS_CUBE.CHANNEL_SHARE.MEASURE         CHANNEL_SHARE                      0
UNITS_CUBE.MARKET_SHARE.MEASURE          MARKET_SHARE                       0
UNITS_CUBE.CHG_EXTMRGN_PP.MEASURE        CHG_EXTMRGN_PP                     0
UNITS_CUBE.CHG_EXTMRGN_PY.MEASURE        CHG_EXTMRGN_PY                     0
UNITS_CUBE.PCTCHG_EXTMRGN_PP.MEASURE     PCTCHG_EXTMRGN_PP                  0
UNITS_CUBE.PCTCHG_EXTMRGN_PY.MEASURE     PCTCHG_EXTMRGN_PY                  0
UNITS_CUBE.CHG_UNITS_PP.MEASURE          CHG_UNITS_PP                       0
UNITS_CUBE.EXTMRGN_PER_UNIT.MEASURE      EXTMRGN_PER_UNIT                   0
UNITS_CUBE.SALES_YTD.MEASURE             SALES_YTD                          0
UNITS_CUBE.SALES_YTD_PY.MEASURE          SALES_YTD_PY                       0
UNITS_CUBE.PCTCHG_SALES_YTD_PY.MEASURE   PCTCHG_SALES_YTD_PY                0
UNITS_CUBE.SALES_QTD.MEASURE             SALES_QTD                          0
UNITS_CUBE.CHG_UNITS_PY.MEASURE          CHG_UNITS_PY                       0
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65760" class="refsect2"><a id="CACICBGF"></a>
<hr />
<h3 class="refsect2"><a id="sthref2007"></a>REFRESH_MVIEW Procedure</h3>
<p>This procedure refreshes the data in a cube materialized view.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2008"></a>Syntax</p>
<pre>
DBMS_CUBE.REFRESH_MVIEW (
          mvowner              IN  VARCHAR2,
          mvname               IN  VARCHAR2,
          method               IN  VARCHAR2       DEFAULT NULL,
          refresh_after_errors IN  BOOLEAN        DEFAULT FALSE,
          parallelism          IN  BINARY_INTEGER DEFAULT 0,
          atomic_refresh       IN  BOOLEAN        DEFAULT FALSE,
          scheduler_job        IN  VARCHAR2       DEFAULT NULL,
          sam_parameters       IN  CLOB           DEFAULT NULL,
          nested               IN  BOOLEAN        DEFAULT FALSE );
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2009"></a>Parameters</p>
<div id="ARPLS65761" class="tblformal">
<p class="titleintable"><a id="sthref2010"></a><a id="sthref2011"></a>Table 41-13 REFRESH_MVIEW Procedure Parameters</p>
<table class="cellalignment1229" title="REFRESH_MVIEW Procedure Parameters" summary="Parameter descriptions for REFRESH_MVIEW" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>mvowner</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>Owner of the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t22" headers="r1c1-t22">
<p><code>mvname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t22 r1c2-t22">
<p>Name of the cube materialized view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t22" headers="r1c1-t22">
<p><code>method</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t22 r1c2-t22">
<p>A full or a fast (partial) refresh. In a fast refresh, only changed rows are inserted in the cube and the affected areas of the cube are re-aggregated.</p>
<p>You can specify a method for each cube in sequential order, or a single method to apply to all cubes. If you list more cubes than methods, then the last method applies to the additional cubes.</p>
<ul>
<li>
<p><code>C</code>: Complete refresh clears all dimension values before loading. (Default)</p>
</li>
<li>
<p><code>F</code>: Fast refresh of a cube materialized view, which performs an incremental refresh and re-aggregation of only changed rows in the source table.</p>
</li>
<li>
<p><code>?</code>: Fast refresh if possible, and otherwise a complete refresh.</p>
</li>
<li>
<p><code>P</code>: Recomputes rows in a cube materialized view that are affected by changed partitions in the detail tables.</p>
</li>
<li>
<p><code>S</code>: Fast solve of a compressed cube. A fast solve reloads all the detail data and re-aggregates only the changed values.</p>
</li>
</ul>
<p>See the <a href="#CACEIEFG">"Usage Notes"</a> for the <code>BUILD</code> procedure for additional details.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t22" headers="r1c1-t22">
<p><code>refresh_after_errors</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t22 r1c2-t22">
<p><code>TRUE</code> to roll back just the cube or dimension with errors, and then continue building the other objects.</p>
<p><code>FALSE</code> to roll back all objects in the build.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t22" headers="r1c1-t22">
<p><code>parallelism</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t22 r1c2-t22">
<p>Number of parallel processes to allocate to this job.</p>
<p>See the <a href="#CACEIEFG">"Usage Notes"</a> for the <code>BUILD</code> procedure for additional details.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t22" headers="r1c1-t22">
<p><code>atomic_refresh</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t22 r1c2-t22">
<p><code>TRUE</code> prevents users from accessing intermediate results during a build. It freezes the current state of an analytic workspace at the beginning of the build to provide current sessions with consistent data. This option thaws the analytic workspace at the end of the build to give new sessions access to the refreshed data. If an error occurs during the build, then all objects are rolled back to the frozen state.</p>
<p><code>FALSE</code> enables users to access intermediate results during an build.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t22" headers="r1c1-t22">
<p><code>scheduler_job</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t22 r1c2-t22">
<p>Any text identifier for the job, which will appear in the log table. The string does not need to be unique.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t22" headers="r1c1-t22">
<p><code>sam_parameters</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t22 r1c2-t22">
<p>None.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t22" headers="r1c1-t22">
<p><code>nested</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t22 r1c2-t22">
<p><code>TRUE</code> performs nested refresh operations for the specified set of cube materialized views. Nested refresh operations refresh all the depending materialized views and the specified set of materialized views based on a dependency order to ensure the nested materialized views are truly fresh with respect to the underlying base tables.</p>
<p>All objects must reside in a single analytic workspace.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2012"></a>Usage Notes</p>
<p><code>REFRESH_MVIEW</code> changes <code><span class="codeinlineitalic">mvname</span></code> to the name of the cube, then passes the cube name and all parameters to the <code>BUILD</code> procedure. Thus, you can use the <code>BUILD</code> procedure to refresh a cube materialized view. See the <a href="#CHDFCJBF">"BUILD Procedure"</a> for additional information about the parameters.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2013"></a>Examples</p>
<p>The following example uses the default settings to refresh a cube materialized view named <code>CB$FWEEK_PSCAT_SALES</code>.</p>
<pre>
SET serverout ON format wrapped
 
EXECUTE dbms_cube.refresh_mview('SH', 'CB$FWEEK_PSCAT_SALES');
</pre>
<p>The next example changes the refresh method to use fast refresh if possible, continue refreshing after an error, and use two parallel processes.</p>
<pre>
EXECUTE dbms_cube.refresh_mview('SH', 'CB$FWEEK_PSCAT_SALES', '?', TRUE, 2);
</pre>
<p>After successfully refreshing the cube materialized view, <code>REFRESH_MVIEW</code> returns a message like the following:</p>
<pre>
Completed refresh of cube mview "SH"."CB$FWEEK_PSCAT_SALES" at 20081114 15:04:46.370.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73470" class="refsect2"><a id="CAEHHHBI"></a>
<hr />
<h3 class="refsect2">UPGRADE_AW Procedure</h3>
<p>This procedure creates an Oracle OLAP 11<span class="italic">g</span> analytic workspace from a copy of the metadata contained in an OLAP 10<span class="italic">g</span> analytic workspace. The original OLAP 10<span class="italic">g</span> analytic workspace is not affected and can exist at the same time and in the same schema as the OLAP 11<span class="italic">g</span> analytic workspace.</p>
<p><code>UPGRADE_AW</code> automatically runs <code>INITIALIZE_CUBE_UPGRADE</code> if the <code>CUBE_UPGRADE_INFO</code> table does not exist. If it does exist, then <code>UPGRADE_AW</code> does not overwrite it, thus preserving any changes you made to the table.</p>
<p>See <a href="#CACDIDII">"Upgrading Analytic Workspaces From OLAP 10<span class="italic">g</span> to OLAP 11<span class="italic">g</span>"</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2014"></a>Syntax</p>
<pre>
DBMS_CUBE.UPGRADE_AW
       (sourceaw              IN  VARCHAR2,
        destaw                IN  VARCHAR2,
        upgoptions            IN  CLOB DEFAULT NULL); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2015"></a>Parameters</p>
<div id="ARPLS73471" class="tblformal">
<p class="titleintable"><a id="sthref2016"></a><a id="sthref2017"></a>Table 41-14 UPGRADE_AW Procedure Parameters</p>
<table class="cellalignment1229" title="UPGRADE_AW Procedure Parameters" summary="DBMS_CUBE.CREATE_AW parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Parameter</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><code>sourceaw</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>The name of a 10<span class="italic">g</span> analytic workspace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t23" headers="r1c1-t23">
<p><code>destaw</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t23 r1c2-t23">
<p>A new name for the generated 11<span class="italic">g</span> analytic workspace. It cannot be the same as <code><span class="codeinlineitalic">sourceaw</span></code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t23" headers="r1c1-t23">
<p><code>upgoptions</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t23 r1c2-t23">
<p>One or more of these upgrade options, as a string in the form '<span class="italic">OPTION</span>=<span class="italic">VALUE</span>'. Separate multiple options with commas.</p>
<ul>
<li>
<p><code>PRESERVE_TABLE_OWNERS</code>:</p>
<p><code>YES</code> preserves the original source table mappings. Use this option when creating an OLAP 11<span class="italic">g</span> analytic workspace in a different schema from the 10<span class="italic">g</span> analytic workspace, and you want the new objects mapped to tables in the original schema. (Default)</p>
<p><code>NO</code> removes the schema owner from the source table mappings. Use this option when creating an OLAP 11<span class="italic">g</span> analytic workspace in a different schema from the 10<span class="italic">g</span> analytic workspace, and you want the new objects mapped to tables in the destination schema.</p>
</li>
<li>
<p><code>RENAME_TABLE</code>: The name of a table that specifies new names for objects as they are created in OLAP 11<span class="italic">g</span> format. These changes are in addition to those specified by the <code>INITIALIZE_CUBE_UPGRADE</code> procedure. See <a href="#CAEEJGCH">"CREATE_IMPORT_OPTIONS Procedure"</a> for information about creating a rename table.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2018"></a>Examples</p>
<p>This example upgrades an OLAP 10<span class="italic">g</span> analytic workspace named <code>GLOBAL10</code> to an OLAP 11<span class="italic">g</span> analytic workspace named <code>GLOBAL11</code>, using a rename table named <code>MY_OBJECT_MAP</code>:</p>
<pre>
BEGIN 
 
  -- Upgrade the analytic workspace
  dbms_cube.upgrade_aw(sourceaw =&gt;'GLOBAL10', destaw =&gt; 'GLOBAL11', upgoptions =&gt; 'RENAME_TABLE=MY_OBJECT_MAP');
  
  -- Load and aggregate the data
  dbms_cube.build(script=&gt;'UNITS_CUBE, PRICE_AND_COST_CUBE');
   
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS65762" class="refsect2"><a id="CHDGHIHH"></a>
<hr />
<h3 class="refsect2"><a id="sthref2019"></a><a id="sthref2020"></a>VALIDATE_XML Procedure</h3>
<p>This procedure checks the XML to assure that it is valid without committing the results to the database. It does not create an analytic workspace.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2021"></a>Syntax</p>
<pre>
DBMS_CUBE.VALIDATE_XML
       (dirname               IN  VARCHAR2,
        filename              IN  VARCHAR2 ); 

DBMS_CUBE.VALIDATE_XML
       (in_xml                IN  CLOB ); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2022"></a>Parameters</p>
<div id="ARPLS65763" class="tblformal">
<p class="titleintable"><a id="sthref2023"></a><a id="sthref2024"></a>Table 41-15 VALIDATE_XML Procedure Parameters</p>
<table class="cellalignment1229" title="VALIDATE_XML Procedure Parameters" summary="DBMS_CUBE.VALIDATE_XML parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Parameter</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>dirname</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>The case-sensitive name of a database directory.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t24" headers="r1c1-t24">
<p><code>filename</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t24 r1c2-t24">
<p>The name of a file containing an XML template.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t24" headers="r1c1-t24">
<p><code>IN_XML</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t24 r1c2-t24">
<p>The name of a CLOB containing an XML template.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2025"></a>Usage Notes</p>
<p>You should always load a template into the same version and release of Oracle Database as the one used to generate the template. The XML may not be valid if it was generated by a different release of the software.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref2026"></a>Example</p>
<p>This example reports a problem in the schema:</p>
<pre>
EXECUTE dbms_cube.validate_xml('UPGRADE_DIR', 'MYGLOBAL.XML');
BEGIN dbms_cube.validate_xml('UPGRADE_DIR', 'MYGLOBAL.XML'); END;
 
*
ERROR at line 1:
ORA-37162: OLAP error
'GLOBAL.PRICE_CUBE.$AW_ORGANIZATION': XOQ-01950: The AWCubeOrganization for
cube "GLOBAL.PRICE_CUBE" contains multiple BuildSpecifications with the same
name.
'GLOBAL.UNITS_CUBE.$AW_ORGANIZATION': XOQ-01950: The AWCubeOrganization for
cube "GLOBAL.UNITS_CUBE" contains multiple BuildSpecifications with the same
name.
XOQ-01400: invalid metadata objects
ORA-06512: at "SYS.DBMS_CUBE", line 411
ORA-06512: at "SYS.DBMS_CUBE", line 441
ORA-06512: at "SYS.DBMS_CUBE", line 501
ORA-06512: at "SYS.DBMS_CUBE", line 520
ORA-06512: at line 1
</pre>
<p>After the problems are corrected, the procedure reports no errors:</p>
<pre>
EXECUTE dbms_cube.validate_xml('UPGRADE_DIR', 'MYGLOBAL.XML');
 
PL/SQL procedure successfully completed.
</pre>
<p>This example loads an XML template into a temporary CLOB, then validates it. The script is named <code>GLOBAL.XML</code>, and it is located in a database directory named <code>XML_DIR</code>.</p>
<pre>
DEFINE xml_file = 'GLOBAL.XML';
 
SET ECHO ON;
SET SERVEROUT ON;
 
 
DECLARE
     xml_file     BFILE := bfilename('XML_DIR', '&amp;xml_file');
     in_xml       CLOB;
     out_xml      CLOB := NULL;
     dest_offset  INTEGER := 1;
     src_offset   INTEGER := 1;
     lang_context INTEGER := 0;
     warning      INTEGER;
BEGIN
     -- Setup the clob from a file
     DBMS_LOB.CREATETEMPORARY(in_xml, TRUE);
     DBMS_LOB.OPEN(in_xml, DBMS_LOB.LOB_READWRITE);
     DBMS_LOB.OPEN(xml_file, DBMS_LOB.FILE_READONLY);
     DBMS_LOB.LOADCLOBFROMFILE(in_xml, xml_file, DBMS_LOB.LOBMAXSIZE,
        dest_offset, src_offset, 0, lang_context, warning);
  
     -- Validate the xml
     DBMS_CUBE.VALIDATE_XML(in_xml);
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_csx_admin.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_cube_advise.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
