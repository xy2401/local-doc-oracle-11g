<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_LOGSTDBY</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:17Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_logmnrd.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_metada.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">90/265</span> <!-- End Header -->
<script  >
<!-- // <![CDATA[
window.name='d_lsbydb'
// ]]> -->
</script> <script  >
// <![CDATA[
function footdisplay(footnum,footnote) {
    var msg = window.open('', 'NewWindow' + footnum,
        'directories=no,height=120,location=no,menubar=no,resizable=yes,' +
        'scrollbars=yes,status=no,toolbar=no,width=598');
    msg.document.open('text/html');
    msg.document.write('<!DOCTYPE html ');
    msg.document.write('PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ');

    msg.document.write('"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
    msg.document.write('<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head><title>');
    msg.document.write('Footnote ' + footnum);
    msg.document.write('<\/title><meta http-equiv="Content-Type" ');
    msg.document.write('content="text/html; charset=utf-8" />');
    msg.document.write('');
    msg.document.write('<style> <![CDATA[ ');
    msg.document.write('h1 {text-align: center; font-size: 14pt;}');
    msg.document.write('fieldset {border: none;}');
    msg.document.write('form {text-align: center;}');
    msg.document.write(' ]]\u003e <\/style>');
    msg.document.write('<\/head><body><h1>Footnote ' + footnum + '<\/h1><p>');
    msg.document.write(footnote);
    msg.document.write('<\/p><form action="" method="post"><fieldset>');
    msg.document.write('<input type="button" value="OK" ');
    msg.document.write('onclick="window.close();" />');
    msg.document.write('<\/fieldset><\/form><\/body><\/html>');
    msg.document.close();
    msg.focus();
}
// ]]>
</script> <noscript>
<p>The script content on this page is for navigation purposes only and does not alter the content in any way.</p>
</noscript>
<div id="ARPLS363" class="chapter"><a id="BABIDEDA"></a>
<h1 class="chapter"><span class="secnum">86</span> DBMS_LOGSTDBY</h1>
<p>The <a id="sthref5491"></a><code>DBMS_LOGSTDBY</code> package provides subprograms for configuring and managing the logical standby database environment.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<a class="olink SBYDB" href="../../server.112/e41134/toc.htm"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for more information about SQL Apply and logical standby databases</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABJDFCI">Using DBMS_LOGSTDBY</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#i1001971">Summary of DBMS_LOGSTDBY Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABJDFCI"></a>
<hr />
<div id="ARPLS66823" class="refsect1">
<h2 class="refsect1">Using DBMS_LOGSTDBY<a id="sthref5492"></a></h2>
<p>This section contains topics which relate to using the <code>DBMS_LOGSTDBY</code> package.</p>
<ul>
<li>
<p><a href="#i1004466">Overview</a></p>
</li>
<li>
<p><a href="#BGBCGBCA">Secutity Model</a></p>
</li>
</ul>
<div id="ARPLS66824" class="refsect2"><a id="i1004466"></a>
<hr />
<h3 class="refsect2">Overview<a id="sthref5493"></a><a id="sthref5494"></a><a id="sthref5495"></a></h3>
<p>The <code>DBMS_LOGSTDBY</code> package helps you manage the SQL Apply (logical standby database) environment. The subprograms in the <code>DBMS_LOGSTDBY</code> package help you to accomplish the following main objectives:</p>
<ul>
<li>
<p>Manage configuration parameters used by <a id="sthref5496"></a><a id="sthref5497"></a>SQL Apply.</p>
<p>For example, controlling how transactions are applied on the logical standby database, how much shared pool is used, and how many processes are used by SQL Apply to mine and apply the changes.</p>
</li>
<li>
<p>Ensure an appropriate level of supplemental logging is enabled, and a LogMiner dictionary is built correctly for logical standby database creation.</p>
</li>
<li>
<p>Provide a way to skip the application of changes to selected tables or entire schemas in the logical standby database, and specify ways to handle exceptions encountered by SQL Apply.</p>
</li>
<li>
<p>Allow controlled access to tables in the logical standby database that may require maintenance.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73152" class="refsect2"><a id="BGBCGBCA"></a>
<hr />
<h3 class="refsect2">Secutity Model</h3>
<p>You must have the <code>DBA</code> role to use the <code>DBMS_LOGSTDBY</code> package.</p>
<p>A prototype role, <code>LOGSTDBY_ADMINISTRATOR</code>, is created by default with <code>RESOURCE</code>, and <code>EXECUTE</code> privileges on <code>DBMS_LOGSTDBY</code>. If you choose to use this role, consider granting <code>ALTER DATABASE</code> and <code>ALTER SESSION</code> privileges to the role so that the grantee can start and stop SQL Apply and can enable and disable the database guard.</p>
<p>The procedures associated with skipping transactions (<code>SKIP</code> and <code>UNSKIP</code>, <code>SKIP_ERROR</code> and <code>UNSKIP_ERROR</code>, <code>and SKIP_TRANSACTION</code> and <code>UNSKIP_TRANSACTION</code>) all require <code>DBA</code> privileges to execute because their scope may contain wildcard schemas. Oracle recommends that where <code>SKIP</code> procedures are specified, these be owned by a secure account with appropriate privileges on the schemas they act on (for example, <code>SYS</code>).</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i1001971"></a>
<hr />
<div id="ARPLS66827" class="refsect1">
<h2 class="refsect1">Summary of DBMS_LOGSTDBY Subprograms</h2>
<div id="ARPLS66828" class="tblformal">
<p class="titleintable"><a id="sthref5498"></a><a id="sthref5499"></a>Table 86-1 DBMS_LOGSTDBY Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_LOGSTDBY Package Subprograms" summary="Describes each subprogram of the DBMS_LOGSTDBY procedure, including a reference to the section where each procedure is dscribed in more detail." >
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t3">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#BDCIEGEI">APPLY_SET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t3 r1c2-t3">
<p>Sets the values of various parameters that configure and maintain SQL Apply</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#i997040">APPLY_UNSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t3 r1c2-t3">
<p>Restores the default values of various parameters that configure and maintain SQL Apply</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#i997124">BUILD Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t3 r1c2-t3">
<p>Ensures supplemental logging is enabled properly and builds the LogMiner dictionary</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#i1008139">INSTANTIATE_TABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t3 r1c2-t3">
<p>Creates and populates a table in the standby database from a corresponding table in the primary database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#BGBBBDBA">IS_APPLY_SERVER Function</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t3 r1c2-t3">
<p>This function returns <code>TRUE</code> if it is executed from PL/SQL in the context of a logical standby apply server process. This function is used in conjunction with triggers that have the <code>fire_once</code> parameter in the <code>DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram set to <code>FALSE</code> (the default is <code>TRUE</code>). Such triggers are executed when the relevant target is updated by an apply process. This function can be used within the body of the trigger to ensure that the trigger takes different (or no) actions on the primary or on the standby.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#BABEGDAE">MAP_PRIMARY_SCN Function</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t3 r1c2-t3">
<p>Maps an SCN relevant to the primary database to a corresponding SCN at the logical standby database. The mapped SCN is conservative in nature, and can thus be used to flash back the logical standby database to compensate for a flashback database operation performed at the primary database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#BABHDEFF">PREPARE_FOR_NEW_PRIMARY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t3 r1c2-t3">
<p>Used after a failover, this procedure ensures a local logical standby database that was not involved in the failover has not processed more redo than the new primary database and reports the set of archive redo log files that must be replaced to ensure consistency</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#BABCABAG">PURGE_SESSION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t3 r1c2-t3">
<p>Identifies the archived redo log files that have been applied to the logical standby database and are no longer needed by SQL Apply</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#BABCBCGF">REBUILD Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t3 r1c2-t3">
<p>Records relevant metadata (including the LogMiner dictionary) in the redo stream in case a database that has recently changed its role to a primary database following a failover operation fails to do so during the failover process</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#CHDIHFAF">SET_TABLESPACE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t3 r1c2-t3">
<p>Moves metadata tables required by SQL Apply to the user-specified tablespace. By default, the metadata tables are created in the <code>SYSAUX</code> tablespace.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#i997288">SKIP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t3 r1c2-t3">
<p>Specifies rules that control database operations that should not be applied to the logical standby database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#i997648">SKIP_ERROR Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t3 r1c2-t3">
<p>Specifies rules regarding what action to take upon encountering errors</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#i997765">SKIP_TRANSACTION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t3 r1c2-t3">
<p>Specifies transactions that should not be applied on the logical standby database. Be careful in using this procedure, because not applying specific transactions may cause data corruption at the logical standby database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#BGBFBFEH">UNSKIP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t3 r1c2-t3">
<p>Deletes rules specified by the <code>SKIP</code> procedure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#i997837">UNSKIP_ERROR Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t3 r1c2-t3">
<p>Deletes rules specified by the <code>SKIP_ERROR</code> procedure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#i997855">UNSKIP_TRANSACTION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t3 r1c2-t3">
<p>Deletes rules specified by the <code>SKIP_TRANSACTION</code> procedure</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS66829" class="refsect2"><a id="BDCIEGEI"></a>
<hr />
<h3 class="refsect2">APPLY_SET Procedure<a id="sthref5500"></a></h3>
<p>Use this procedure to set values of parameters that configure and manage SQL Apply in a logical standby database environment. All parameters, except for <code>PRESERVE_COMMIT_ORDER</code>, can be changed without having to stop SQL Apply.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5501"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.APPLY_SET (
     inname             IN VARCHAR,
     value              IN VARCHAR);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5502"></a>Parameters</p>
<div id="ARPLS66830" class="tblformal">
<p class="titleintable"><a id="sthref5503"></a><a id="CHDCJDGA"></a>Table 86-2 APPLY_SET Procedure Parameters</p>
<table class="cellalignment1229" title="APPLY_SET Procedure Parameters " summary="Describes the parameters you can set on the APPLY_SET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Parameter</th>
<th class="cellalignment1227" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><code>APPLY_SERVERS</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p>Controls the number of <code>APPLIER</code> processes used to apply changes. The maximum number allowed is 1024, provided the <code>MAX_SERVERS</code> parameter is set to accommodate this.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><code>EVENT_LOG_DEST</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p>Controls where SQL Apply records the occurrence of an interesting event. It takes the following values:</p>
<ul>
<li>
<p><code>DEST_ALL</code> - All events will be recorded in the <code>DBA_LOGSTDBY_EVENTS</code> view and in the alert log.</p>
</li>
<li>
<p><code>DEST_EVENTS_TABLE</code> - All events that contain information about user data will be recorded only in the <code>DBA_LOGSTDBY_EVENTS</code> view. This is the default value.</p>
</li>
</ul>
<p>For example, if SQL Apply receives an <code>ORA-1403</code> error, the whole event is recorded in the <code>DBA_LOGSTDBY_EVENTS</code> view. Whereas, the alert log records only that SQL Apply stopped because of <code>ORA-1403</code>. No information regarding the user table or offending statement is logged in the alert log. However, if you stop the SQL Apply engine, it gets recorded in both the <code>DBA_LOGSTDBY_EVENTS</code> view and in the alert log.</p>
<p>Note that this parameter affects the behavior of the following parameters: <code>RECORD_APPLIED_DDL</code>, <code>RECORD_SKIP_DDL</code>, <code>RECORD_SKIP_ERRORS</code>, and <code>RECORD_UNSUPPORTED_OPERATIONS</code>. For example, if <code>RECORD_APPLIED_DDL</code> is set to <code>TRUE</code>, but <code>EVENT_LOG_DEST</code> is set to <code>DEST_EVENTS_TABLE</code>, then the applied DDL string will only be recorded in the <code>DBA_LOGSTDBY_EVENTS</code> view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t4" headers="r1c1-t4">
<p><code>LOG_AUTO_DEL_RETENTION_TARGET</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t4 r1c2-t4">
<p>This parameter setting is only meaningful if <code>LOG_AUTO_DELETE</code> has been set to <code>TRUE</code>. The value you supply for this parameter controls how long (in minutes) a remote archived log that is received from the primary database will be retained at the logical standby database once all redo records contained in the log have been applied at the logical standby database. The default value is 1440 minutes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t4" headers="r1c1-t4">
<p><code>LOG_AUTO_DELETE</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t4 r1c2-t4">
<p>Automatically deletes foreign archived redo log files as soon as they have been applied on the logical standby database. By default, a foreign archived redo log file is not deleted until 24 hours (the default value of <code>LOG_AUTO_DEL_RETENTION_TARGET</code> parameter) after it has been applied at the logical standby database. Set to <code>TRUE</code> to enable automatic deletion of archived redo log files. Set to <code>FALSE</code> to disable automatic deletion. The default value is <code>TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t4" headers="r1c1-t4">
<p><code>MAX_EVENTS_RECORDED</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t4 r1c2-t4">
<p>Number of recent events that will be visible through the <code>DBA_LOGSTDBY_EVENTS</code> view. To record all events encountered by SQL Apply, use the <code>DBMS_LOGSTDBY.MAX_EVENTS</code> constant as the number value. The default value is 10,000.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t4" headers="r1c1-t4">
<p><code>MAX_SERVERS</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t4 r1c2-t4">
<p>Number of processes that SQL Apply uses to read and apply redo. The default value is 9. The maximum number allowed is 2048.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t4" headers="r1c1-t4">
<p><code>MAX_SGA</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t4 r1c2-t4">
<p>Number of megabytes from shared pool in System Global Area (SGA) that SQL Apply will use. The default value is 30 megabytes or one quarter of the value set for <code>SHARED_POOL_SIZE</code>, whichever is lower. The maximum size allowed is 4095 megabytes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t4" headers="r1c1-t4">
<p><code>PREPARE_SERVERS</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t4 r1c2-t4">
<p>Controls the number of <code>PREPARER</code> processes used to prepare changes. The maximum number allowed is 1024, provided the <code>MAX_SERVERS</code> parameter is set to accommodate this.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t4" headers="r1c1-t4">
<p><code>PRESERVE_COMMIT_ORDER</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t4 r1c2-t4">
<p><code>TRUE</code>: Transactions are applied to the logical standby database in the exact order in which they were committed on the primary database. This is the default parameter setting.</p>
<p><code>FALSE</code>: Transactions containing non-overlapping sets of rows may be committed in a different order than they were committed on the primary database.</p>
<p>Regardless of the level chosen, modifications done to the same row are always applied in the same order as they happened on the primary database. See the Usage Notes for details and recommendations.</p>
<p>You cannot modify this parameter while SQL Apply is running.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t4" headers="r1c1-t4">
<p><code>RECORD_APPLIED_DDL</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t4 r1c2-t4">
<p>Controls whether DDL statements that have been applied to the logical standby database are recorded in the location specified by the <code>EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code>TRUE</code>: Indicates that DDL statements applied to the logical standby database are recorded in the <code>DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
<p><code>FALSE</code>: Indicates that applied DDL statements are not recorded. This is the default parameter setting.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t4" headers="r1c1-t4">
<p><code>RECORD_SKIP_DDL</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t4 r1c2-t4">
<p>Controls whether skipped DDL statements are recorded in the location specified by the <code>EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code>TRUE</code>: Skipped DDL statements are recorded in the <code>DBA_LOGSTDBY_EVENTS</code> table and the alert log. This is the default parameter setting.</p>
<p><code>FALSE</code>: Skipped DDL statements are not recorded in the <code>DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t4" headers="r1c1-t4">
<p><code>RECORD_SKIP_ERRORS</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t4 r1c2-t4">
<p>Controls whether skipped errors (as described by the <code>SKIP_ERROR</code> procedure) are recorded in the location specified by the <code>EVENT_LOG_DEST</code> parameter. Specify one of the following values:</p>
<p><code>TRUE</code>: Skipped errors are recorded in the <code>DBA_LOGSTDBY_EVENTS</code> table and the alert log. This is the default parameter setting.</p>
<p><code>FALSE</code>: Skipped errors are not recorded in the <code>DBA_LOGSTDBY_EVENTS</code> table and the alert log.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t4" headers="r1c1-t4">
<p><code>RECORD_UNSUPPORTED_OPERATIONS</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t4 r1c2-t4">
<p>Captures information about transactions running on the primary database that will not be supported by a logical standby database. This procedure records its information as events in the <code>DBA_LOGSTDBY_EVENTS</code> table. Specify one of the following values:</p>
<p><code>TRUE</code>: The information is captured and recorded as events in the <code>DBA_LOGSTDBY_EVENTS</code> table.</p>
<p><code>FALSE</code>: The information is not captured. This is the default.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>If a parameter is changed while SQL Apply is running, the change will take effect at some point in the future. In such a case, an informational row is inserted into the <code>DBA_LOGSTDBY_EVENTS</code> view at the time the parameter change takes effect.</p>
<p>Additionally, if you are modifying a parameter while SQL Apply is running on an Oracle RAC configuration, you must be connected to the same instance where SQL Apply is running.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5504"></a>Exceptions</p>
<div id="ARPLS66831" class="tblformal">
<p class="titleintable"><a id="sthref5505"></a><a id="sthref5506"></a>Table 86-3 APPLY_SET Procedure Exceptions</p>
<table class="cellalignment1229" title="APPLY_SET Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Exception</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5507"></a>Usage Notes</p>
<ul>
<li>
<p>Use the <code>APPLY_UNSET</code> procedure to restore the default settings of a parameter.</p>
</li>
<li>
<p>See <a class="olink SBYDB00800" href="../../server.112/e41134/manage_ls.htm#SBYDB00800"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for help with tuning SQL Apply and for information about setting appropriate values for different parameters.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5508"></a>Examples</p>
<p>To record DDLs in the <code>DBA_LOGSTDBY_EVENTS</code> view and in the alert log, issue the following statement:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.APPLY_SET('RECORD_APPLIED_DDL', TRUE);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66832" class="refsect2"><a id="i997040"></a>
<hr />
<h3 class="refsect2">APPLY_UNSET Procedure<a id="sthref5509"></a></h3>
<p>Use the <code>APPLY_UNSET</code> procedure to restore the default values of the parameters that you changed with the <code>APPLY_SET</code> procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5510"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.APPLY_UNSET (
     inname          IN VARCHAR);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5511"></a>Parameters</p>
<p>The parameter information for the <code>APPLY_UNSET</code> procedure is the same as that described for the <code>APPLY_SET</code> procedure. See <a href="#CHDCJDGA">Table 86-2</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5512"></a>Exceptions</p>
<div id="ARPLS66833" class="tblformal">
<p class="titleintable"><a id="sthref5513"></a><a id="sthref5514"></a>Table 86-4 APPLY_UNSET Procedure Exceptions</p>
<table class="cellalignment1229" title="APPLY_UNSET Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Exception</th>
<th class="cellalignment1227" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5515"></a>Usage Notes</p>
<ul>
<li>
<p>Use the <code>APPLY_SET</code> procedure to specify a nondefault value for a parameter.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5516"></a>Examples</p>
<p>If you previously specified that applied DDLs show up in the <code>DBA_LOGSTDBY_EVENTS</code> view and the alert log, you can restore the default behavior of SQL Apply regarding applied DDL statements with the following statement:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.APPLY_UNSET('RECORD_APPLIED_DDL');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66834" class="refsect2"><a id="i997124"></a>
<hr />
<h3 class="refsect2">BUILD Procedure<a id="sthref5517"></a></h3>
<p>Use this procedure on the primary database to record relevant metadata (LogMiner dictionary) information in the redo log, which will subsequently be used by SQL Apply. This procedure will enable database-wide primary- and unique-key supplemental logging, if necessary.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
In databases created using Oracle Database 11<span class="italic">g</span> release 2 (11.2) or later, supplemental logging information is automatically propagated to any existing physical standby databases. However, for databases in earlier releases, or if the database was created using an earlier release and then upgraded to 11.2, you must check whether supplemental logging is enabled at the physical standby(s) if it is also enabled at the primary database. If it is not enabled at the physical standby(s), then before performing a switchover or failover, you must enable supplemental logging on all existing physical standby databases. To do so, issue the following SQL command on each physical standby:
<pre>
SQL&gt;  ALTER DATABASE ADD SUPPLEMENTAL LOG DATA (PRIMARY KEY, UNIQUE INDEX) COLUMNS;
</pre>
<p>If you do not do this, then any logical standby that is also in the same Data Guard configuration will be unusable if a switchover or failover is performed to one of the physical standby databases. If a switchover or failover has already occurred and supplemental logging was not enabled, then you must recreate all logical standby databases.</p>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5518"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.BUILD;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5519"></a>Usage Notes</p>
<ul>
<li>
<p>Supplemental log information includes extra information in the redo logs that uniquely identifies a modified row in the logical standby database, and also includes information that helps efficient application of changes to the logical standby database.</p>
</li>
<li>
<p>LogMiner dictionary information allows SQL Apply to interpret data in the redo logs.</p>
</li>
<li>
<p><code>DBMS_LOGSTDBY.BUILD</code> should be run only once for each logical standby database you want to create. You do not need to use DBMS_LOGSTDBY.BUILD for each Oracle RAC instance.</p>
</li>
<li>
<p><code>DBMS_LOGSTDBY.BUILD</code> waits for all transactions (including distributed transactions) that are active at the time of the procedure invocation to complete before returning. See <a class="olink ADMIN12252" href="../../server.112/e25494/ds_txnman.htm#ADMIN12252"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about how to handle in-doubt transactions.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5520"></a>Examples</p>
<p>To build the LogMiner dictionary in the redo stream of the primary database and to record additional information so that a logical standby database can be instantiated, issue the following SQL statement at the primary database</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.BUILD;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66835" class="refsect2"><a id="i1008139"></a>
<hr />
<h3 class="refsect2">INSTANTIATE_TABLE Procedure<a id="sthref5521"></a></h3>
<p>This procedure creates and populates a table in the standby database from a corresponding table in the primary database. The table requires the name of the database link (<code>dblink)</code> as an input parameter. If the table already exists in the logical standby database, it will be dropped and re-created based on the table definition at the primary database. This procedure only brings over the data associated with the table, and not the associated indexes and constraints.</p>
<p>Use the <code>INSTANTIATE_TABLE</code> procedure to:</p>
<ul>
<li>
<p>Add a table to a standby database.</p>
</li>
<li>
<p>Re-create a table in a standby database.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5522"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.INSTANTIATE_TABLE (
     schema_name         IN VARCHAR2,
     table_name          IN VARCHAR2,
     dblink              IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5523"></a>Parameters</p>
<div id="ARPLS66836" class="tblformal">
<p class="titleintable"><a id="sthref5524"></a><a id="sthref5525"></a>Table 86-5 INSTANTIATE_TABLE Procedure Parameters</p>
<table class="cellalignment1229" title="INSTANTIATE_TABLE Procedure Parameters" summary="Describes the parameters you can set on the INSTANTIATE_TABLE subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Parameter</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>Name of the schema</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>table_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>Name of the table to be created or re-created in the standby database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t8" headers="r1c1-t8">
<p><code>dblink</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t8 r1c2-t8">
<p>Name of the database link account that has privileges to read and lock the table in the primary database, as well as the <code>SELECT_CATALOG_ROLE</code> on the primary database</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5526"></a>Exceptions</p>
<div id="ARPLS66837" class="tblformal">
<p class="titleintable"><a id="sthref5527"></a><a id="sthref5528"></a>Table 86-6 INSTANTIATE_TABLE Procedure Exceptions</p>
<table class="cellalignment1229" title="INSTANTIATE_TABLE Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Exception</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t9" headers="r1c1-t9">
<p><code>ORA-16276</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t9 r1c2-t9">
<p>Specified database link does not correspond to primary database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t9" headers="r1c1-t9">
<p><code>ORA-16277</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t9 r1c2-t9">
<p>Specified table is not supported by logical standby database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t9" headers="r1c1-t9">
<p><code>ORA-16278</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t9 r1c2-t9">
<p>Specified table has a multi-object skip rule defined</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5529"></a>Usage Notes</p>
<ul>
<li>
<p>Use this procedure to create and populate a table in a way that keeps the data on the standby database transactionally consistent with the primary database.</p>
</li>
<li>
<p>This table will not be synchronized with the rest of the tables being maintained by SQL Apply and SQL Apply will not start to maintain it until SQL Apply encounters redo that occurred after the table was instantiated from the primary. The SCN at which the table was instantiated from the primary database is available in the <code>DBA_LOGSTDBY_EVENTS</code> view.</p>
</li>
<li>
<p>The specified table must be a table that is supported by logical standby (that is, it does not appear in the <code>DBA_LOGSTDBY_UNSUPPORTED_TABLES</code> view on the primary database).</p>
</li>
<li>
<p>If there are any skip rules that specifically name this table (without any wildcards), those skip rules will be dropped as part of <code>INSTANTIATE_TABLE</code>, so that the table will be properly maintained by SQL Apply in the future. If there are skip rules that indirectly reference this table (match a skip rule with a wildcard in the <code>schema_name</code> or <code>table_name</code>, and have a TABLE, DML, or SCHEMA_DDL statement type), <code>INSTANTIATE_TABLE</code> will fail with an ORA-16278 error. Any multiobject skip rules that pertain to the table must be dropped or changed before re-attempting the <code>INSTANTIATE_TABLE</code> call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5530"></a>Examples</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.INSTANTIATE_TABLE (-
     SCHEMA_NAME =&gt; 'HR', TABLE_NAME =&gt; 'EMPLOYEES', -
     DBLINK =&gt; 'INSTANTIATE_TBL_LINK');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66838" class="refsect2"><a id="BGBBBDBA"></a>
<hr />
<h3 class="refsect2">IS_APPLY_SERVER Function</h3>
<p>This function returns <code>TRUE</code> if it is executed from PL/SQL in the context of a logical standby apply server process. This function is used in conjunction with triggers that have the <code>fire_once</code> parameter in the <code>DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram set to <code>FALSE</code> (the default is <code>TRUE</code>). Such triggers are executed when the relevant target is updated by an apply process. This function can be used within the body of the trigger to ensure that the trigger takes different (or no) actions on the primary or on the standby.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ARPLS" href="toc.htm"><span class="italic">Oracle Database PL/SQL Packages and Types Reference</span></a> for more information about the <code>DBMS_DDL.SET_TRIGGER_FIRING_PROPERTY</code> subprogram.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5531"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.IS_APPLY_SERVER
RETURN BOOLEAN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5532"></a>Parameters</p>
<p>None</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66839" class="refsect2"><a id="BABEGDAE"></a>
<hr />
<h3 class="refsect2">MAP_PRIMARY_SCN Function<a id="sthref5533"></a></h3>
<p>Returns an SCN on the standby that predates the supplied SCN from the primary database by at least 5 minutes. This function can be used to determine a safe SCN to use in a compensating flashback database operation at the logical standby database, following a flashback database operation or a point-in-time recovery operation at the primary database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5534"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.MAP_PRIMARY_SCN(primary_scn NUMBER) RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5535"></a>Exceptions</p>
<div id="ARPLS66840" class="tblformal">
<p class="titleintable"><a id="sthref5536"></a><a id="sthref5537"></a>Table 86-7 MAP_PRIMARY_SCN Function Exceptions</p>
<table class="cellalignment1229" title="MAP_PRIMARY_SCN Function Exceptions" summary="Exceptions for the MAP_PRIMARY_SCN Function" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Exception</th>
<th class="cellalignment1227" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>ORA-20001</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p>Primary SCN is before mapped range</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t11" headers="r1c1-t11">
<p><code>ORA-20002</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c2-t11">
<p>SCN mapping requires <code>PRESERVE_COMMIT_ORDER</code> to be <code>TRUE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5538"></a>Usage Notes</p>
<p>Use this function to get a conservative SCN at the logical standby database that corresponds to an SCN at the primary database. This function is useful in the context of doing compensating flashback database operations at the logical standby following a flashback database or a point-in-time recovery operation done at the primary database.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66841" class="refsect2"><a id="BABHDEFF"></a>
<hr />
<h3 class="refsect2">PREPARE_FOR_NEW_PRIMARY Procedure<a id="sthref5539"></a></h3>
<p>The <code>PREPARE_FOR_NEW_PRIMARY</code> procedure must be invoked at a logical standby database following a failover if that standby database was not the target of the failover operation. Such a standby database must process the exact same set of redo logs processed at the new primary database. This routine ensures that the local logical standby database has not processed more redo than the new primary database and reports the set of archive logs that must be replaced to ensure consistency. The set of replacement logs will be reported in the alert.log. These logs must be copied to the logical standby and registered using the <code>ALTER DATABASE REGISTER LOGICAL LOGFILE</code> statement.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5540"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.PREPARE_FOR_NEW_PRIMARY (
           FORMER_STANDBY_TYPE         IN VARCHAR2,
           DBLINK                      IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5541"></a>Parameters</p>
<div id="ARPLS66842" class="tblformal">
<p class="titleintable"><a id="sthref5542"></a><a id="sthref5543"></a>Table 86-8 PREPARE_FOR_NEW_PRIMARY Procedure Parameters</p>
<table class="cellalignment1229" title="PREPARE_FOR_NEW_PRIMARY Procedure Parameters " summary="Describes the possible parameters you can supply on the PREPARE_FOR_NEW_PRIMARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Parameter</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>FORMER_STANDBY_TYPE</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>The type of standby database that was the target of the failover operation to become the new primary database. Valid values are '<code>PHYSICAL</code>' if the new primary was formerly a physical standby, and '<code>LOGICAL</code>' if the new primary database was formerly a logical standby database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>DBLINK</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>The name of a database link to the new primary database</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5544"></a>Exceptions</p>
<div id="ARPLS66843" class="tblformal">
<p class="titleintable"><a id="sthref5545"></a><a id="sthref5546"></a>Table 86-9 PREPARE_FOR_NEW_PRIMARY Procedure Exceptions</p>
<table class="cellalignment1229" title="PREPARE_FOR_NEW_PRIMARY Procedure Exceptions" summary="Describes error messages that may be returned on the PREPARE_FOR_NEW_PRIMARY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Exception</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>Invalid Logical Standby option.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><code>ORA-16109</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p>Failed to apply log data from previous primary.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5547"></a>Usage Notes</p>
<ul>
<li>
<p>This routine is intended only for logical standby systems.This routine will fail if the new primary database was formerly a logical standby database and the LogMiner dictionary build has not completed successfully.Log files displayed in the alert log will be referred to as <span class="italic">terminal logs</span>. Users should keep in mind that file paths are relative to the new primary database and may not resolve locally.Upon manual registration of the terminal logs, users should complete the process by calling either <code>START LOGICAL STANDBY APPLY</code> if the new primary database was formerly a physical standby database or <code>START LOGICAL STANDBY APPLY NEW PRIMARY</code> if the new primary database was formerly a logical standby database.See the alert log for more details regarding the reasons for any exception.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5548"></a>Examples</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.PREPARE_FOR_NEW_PRIMARY (  -
                FORMER_STANDBY_TYPE =&gt; 'LOGICAL',    -
                DBLINK =&gt; 'dblink_to_newprimary'); 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66844" class="refsect2"><a id="BABCABAG"></a>
<hr />
<h3 class="refsect2"><a id="sthref5549"></a>PURGE_SESSION Procedure</h3>
<p>Identifies all archived redo log files that have been applied to the logical standby database and are no longer needed by SQL Apply. Once identified, you can issue operating system commands to delete some or all of the unnecessary archived redo log files.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5550"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.PURGE_SESSION;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5551"></a>Exceptions</p>
<div id="ARPLS66845" class="tblformal">
<p class="titleintable"><a id="sthref5552"></a><a id="sthref5553"></a>Table 86-10 PURGE_SESSION Procedure Exceptions</p>
<table class="cellalignment1229" title="PURGE_SESSION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Exception</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>ORA-01309</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>Invalid session</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5554"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure does not delete the archived redo log files. You must issue operating system commands to delete unneeded files.</p>
</li>
<li>
<p>This procedure updates the <code>DBA_LOGMNR_PURGED_LOG</code> view that displays the archived redo log files that have been applied to the logical standby database.</p>
</li>
<li>
<p>In Oracle Database 10<span class="italic">g</span> Release 2, metadata related to the archived redo log files (and the actual archived redo log files) are purged automatically based on the default setting of the <code>LOG_AUTO_DELETE</code> parameter described in the <code>DBMS_LOGSTDBY.APPLY_SET</code> procedure described.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5555"></a>Example</p>
<p>To identify and remove unnecessary files:</p>
<ol>
<li>
<p>Enter the following statement on the logical standby database:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.PURGE_SESSION;
</pre></li>
<li>
<p>Query the <code>DBA_LOGMNR_PURGED_LOG</code> view to list the archived redo log files that can be removed:</p>
<pre>
SQL&gt; SELECT * FROM DBA_LOGMNR_PURGED_LOG;

FILE_NAME
   ------------------------------------
   /boston/arc_dest/arc_1_40_509538672.log
   /boston/arc_dest/arc_1_41_509538672.log
   /boston/arc_dest/arc_1_42_509538672.log
   /boston/arc_dest/arc_1_43_509538672.log
   /boston/arc_dest/arc_1_44_509538672.log
   /boston/arc_dest/arc_1_45_509538672.log
   /boston/arc_dest/arc_1_46_509538672.log
   /boston/arc_dest/arc_1_47_509538672.log
</pre></li>
<li>
<p>Use operating system-specific commands to delete archived redo log files from the file system.</p>
</li>
</ol>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66846" class="refsect2"><a id="BABCBCGF"></a>
<hr />
<h3 class="refsect2">REBUILD Procedure</h3>
<p>This procedure is used if a database that has recently changed its role to a primary database following a failover operation fails to record relevant metadata (including the LogMiner dictionary) in the redo stream required for other logical standby databases.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5556"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.REBUILD;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5557"></a>Usage Notes</p>
<ul>
<li>
<p>LogMiner dictionary information is logged in the redo log files.The standby redo log files (if present) are archived.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5558"></a>Examples</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.REBUILD;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66847" class="refsect2"><a id="CHDIHFAF"></a>
<hr />
<h3 class="refsect2"><a id="sthref5559"></a>SET_TABLESPACE Procedure</h3>
<p>Moves metadata tables required by SQL Apply to the user-specified tablespace. By default, the metadata tables are created in the <code>SYSAUX</code> tablespace. SQL Apply cannot be running when you invoke this procedure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5560"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.SET_TABLESPACE(
           NEW_TABLESPACE IN VARCHAR2)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5561"></a>Parameters</p>
<div id="ARPLS66848" class="tblformal">
<p class="titleintable"><a id="sthref5562"></a><a id="sthref5563"></a>Table 86-11 SET_TABLE SPACE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_TABLE SPACE Procedure Parameters" summary="Describes the parameters you can set on the INSTANTIATE_TABLE subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>NEW_TABLESPACE</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>Name of the new tablespace where metadata tables will reside.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5564"></a>Exceptions</p>
<div id="ARPLS66849" class="tblformal">
<p class="titleintable"><a id="sthref5565"></a><a id="sthref5566"></a>Table 86-12 SET_TABLESPACE Procedure Exceptions</p>
<table class="cellalignment1229" title="SET_TABLESPACE Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t16">Exception</th>
<th class="cellalignment1227" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t16" headers="r1c1-t16">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t16 r1c2-t16">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t16" headers="r1c1-t16">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t16 r1c2-t16">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5567"></a>Examples</p>
<p>To move metadata tables to a new tablespace named <code>LOGSTDBY_TBS</code>, issue the following statement:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SET_TABLESPACE (new_tablespace =&gt; 'LOGSTDBY_TBS');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66850" class="refsect2"><a id="i997288"></a>
<hr />
<h3 class="refsect2">SKIP Procedure<a id="sthref5568"></a></h3>
<p>The <code>SKIP</code> procedure can be used to define rules that will be used by SQL Apply to skip the application of certain changes to the logical standby database. For example, the <code>SKIP</code> procedure can be used to skip changes to a subset of tables in the logical standby database. It can also be used to specify DDL statements that should not be applied at the logical standby database or should be modified before they are applied in the logical standby database. One reason why a DDL statement may need to be modified is to accommodate a different directory structure on the logical standby database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5569"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.SKIP (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL,
     proc_name                 IN VARCHAR2 DEFAULT NULL,
     use_like                  IN BOOLEAN DEFAULT TRUE,
     esc                       IN CHAR1 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5570"></a>Parameters</p>
<div id="ARPLS66851" class="tblformal">
<p class="titleintable"><a id="sthref5571"></a><a id="CHDDEIJI"></a>Table 86-13 SKIP Procedure Parameters</p>
<table class="cellalignment1229" title="SKIP Procedure Parameters " summary="Describes the parameters you set on the SKIP subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t17">Parameter</th>
<th class="cellalignment1227" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t17" headers="r1c1-t17">
<p><code>stmt</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t17 r1c2-t17">
<p>Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration since keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. <a href="#BABGCFCA">Table 86-14</a> shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.</p>
<p>The keyword <code>PL/SQL</code> is used for the execution of Oracle-supplied packages which are supported for replication. See <a class="olink SBYDB00315" href="../../server.112/e41134/data_support.htm#SBYDB00315"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for information about supported packages.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t17" headers="r1c1-t17">
<p><code>schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t17 r1c2-t17">
<p>The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the <code>stmt</code> parameter. If not applicable, this value must be set to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t17" headers="r1c1-t17">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t17 r1c2-t17">
<p>The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the <code>stmt</code>. If not applicable, this value must be set to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t17" headers="r1c1-t17">
<p><code>proc_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t17 r1c2-t17">
<p>Name of a stored procedure to call when SQL Apply determines that a particular statement matches the filter defined by the stmt, schema_name, and object_name parameters. Specify the procedure in the following format:</p>
<p><code>'schema.package.procedure'</code></p>
<p>This procedure returns a value that directs SQL Apply to perform one of the following: execute the statement, skip the statement, or execute a replacement statement.</p>
<p>For DDLs, SQL Apply calls the stored procedure with the following call signature:</p>
<ul>
<li>
<p><code>IN STATEMENT VARCHAR2</code> -- The SQL statement that matches the filter</p>
</li>
<li>
<p><code>IN STATEMENT_TYPE VARCHAR2</code> -- The <code>stmt</code> of the filter</p>
</li>
<li>
<p><code>IN SCHEMA VARCHAR2</code> -- The <code>schema_name</code> of the filter, if applicable</p>
</li>
<li>
<p><code>IN NAME VARCHAR2</code> -- The <code>object_name</code> of the filter, if applicable</p>
</li>
<li>
<p><code>IN XIDUSN NUMBER</code> -- Transaction ID part 1</p>
</li>
<li>
<p><code>IN XIDSLT NUMBER</code> -- Transaction ID part 2</p>
</li>
<li>
<p><code>IN XIDSQN NUMBER</code> -- Transaction ID part 3</p>
</li>
<li>
<p><code>OUT SKIP_ACTION NUMBER</code> -- Action to be taken by SQL Apply upon completion of this routine. Valid values are:</p>
<p><code>SKIP_ACTION_APPLY</code> -- Execute the statement</p>
<p><code>SKIP_ACTION_SKIP</code> -- Skip the statement</p>
<p><code>SKIP_ACTION_ERROR</code> -- Halt apply so the DBA can take appropriate steps (for example, take compensating action)</p>
<p><code>SKIP_ACTION_REPLACE</code> -- Execute the replacement statement supplied in the <code>NEW_STATEMENT</code> output parameter</p>
</li>
</ul>
<p>For PL/SQL, SQL Apply calls the stored procedure with the following call signature:</p>
<ul>
<li>
<p><code>IN STATEMENT VARCHAR2</code> -- The SQL statement that matches the filter</p>
</li>
<li>
<p><code>IN PACKAGE_SCHEMA VARCHAR2</code> -- The schema of the package being skipped (for example, <code>SYS</code> or <code>XDB</code>)</p>
</li>
<li>
<p><code>IN PACKAGE_NAME VARCHAR2</code> -- The name of the package being skipped (for example, <code>DBMS_RLS</code>)</p>
</li>
<li>
<p><code>IN PROCEDURE_NAME VARCHAR2</code> &ndash; The name of the procedure being skipped (for example, <code>ADD_POLICY</code>)</p>
</li>
<li>
<p><code>IN CURRENT_SCHEMA VARCHAR2</code> &ndash; The name of the current schema in which the PL/SQL was executed on the primary</p>
</li>
<li>
<p><code>IN XIDUSN NUMBER</code> &ndash; Transaction ID part 1</p>
</li>
<li>
<p><code>IN XIDSLT NUMBER</code> -- Transaction ID part 2</p>
</li>
<li>
<p><code>IN XIDSQN NUMBER</code> -- Transaction ID part 3</p>
</li>
<li>
<p><code>IN EXIT_STATUS</code> &ndash; 0 (Zero) if the PL/SQL succeeded on the primary, or 1</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t17" headers="r1c1-t17">
<p><code>proc_name</code> (cont.)</p>
</td>
<td class="cellalignment1228" headers="r6c1-t17 r1c2-t17">
<ul>
<li>
<p><code>OUT SKIP_ACTION NUMBER</code> -- Action to be taken by SQL Apply upon completion of this routine. Valid return values are:</p>
<p><code>SKIP_ACTION_APPLY</code> -- Execute the statement</p>
<p><code>SKIP_ACTION_APPLY</code> -- Execute the statement</p>
<p><code>SKIP_ACTION_ERROR</code> &ndash; Raise an error which halts apply so that the DBA can take appropriate steps</p>
</li>
</ul>
<p><span class="bold">Note 1</span>: <code>SKIP_ACTION_REPLACE</code> is not supported for PL/SQL.</p>
<p><span class="bold">Note 2</span>: SQL Apply calls the skip handler when the procedure's exit is processed.</p>
<p><span class="bold">Note 3</span>: The <code>use_like</code> parameter must be set to <code>FALSE</code> for PL/SQL since wildcarding PL/SQL is not supported.</p>
<p>The following example shows how to have a conditional skip rule on <code>DBMS_RLS.DROP_POLICY:</code></p>
<pre>
Create or replace procedure sec_mgr.skip_drop_policy (
statement     in varchar2,
pkgown         in varchar2,
pkgname        in varchar2,
procnm         in varchar2,
cuser          in varchar2,
xidusn         in number,
xidslt         in number,
xidsqn         in number,
exstatus       in number,
skip_action    out number) Is
Begin
  If 0 = exstatus Then
    Insert Into sec_mgr.logit Values
      ('Success: '||pkgown||'.'||pkgname||'.'||procnm|| ' by '||cuser);
    
    If cuser != 'TESTSCHEMA' Then  
      skip_action := DBMS_LOGSTDBY.SKIP_ACTION_APPLY;
    Else
      skip_action := DBMS_LOGSTDBY.SKIP_ACTION_SKIP;
    End If;  
  End If;
End skip_drop_policy;

EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; 'PL/SQL', -
     schema_name =&gt; 'SYS', -
     object_name =&gt; 'DBMS_RLS.DROP_POLICY', -
     proc_name =&gt; 'SEC_MGR.SKIP_DROP_POLICY' -
     use_like=&gt; FALSE);
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t17" headers="r1c1-t17">
<p><code>use_like</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t17 r1c2-t17">
<p>Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The <code>use_like</code> parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t17" headers="r1c1-t17">
<p><code>esc</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t17 r1c2-t17">
<p>Identifies an escape character (such as the character "/") that you can use for pattern matching. If the escape character appears in the pattern before the character "%" or "_" then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. See<a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about pattern matching.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5572"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code>DBA</code> privileges to execute.</p>
</li>
<li>
<p>You cannot associate a stored procedure to be invoked in the context of a DML statement. For example, the following statement returns the <code>ORA-16104: invalid Logical Standby option requested</code> error:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(-
     stmt =&gt; 'DML', -
     schema_name =&gt; 'HR', -
     object_name =&gt; 'EMPLOYEES', -
     proc_name =&gt; 'DML_HANDLER');
</pre>
<p>Also, if an event matches multiple rules either because of the use of wildcards while specifying the rule or because of a specification of overlapping rules. For example, if you specify a rule for the <code>SCHEMA_DDL</code> event for the <code>HR.EMPLOYEES</code> table, and a rule for the <code>ALTER TABLE</code> event for the <code>HR.EMPLOYEES</code> table, only one of the matching procedures will be invoked (alphabetically, by procedure). In the following code example, consider the following rules:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; 'SCHEMA DDL', -
     schema_name =&gt; 'HR', -
     object_name =&gt; 'EMPLOYEES', -
     proc_name =&gt; 'SCHEMA_DDL_HANDLER');
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; 'ALTER TABLE', -
     schema_name =&gt; 'HR', -
     object_name =&gt; 'EMPLOYEES', -
     proc_name =&gt; 'TABLE_ALTER_HANDLER');
</pre>
<p>On encountering an <code>ALTER TABLE</code> statement, the <code>schema_ddl_handler</code> procedure will be invoked because its name will be at the top of an alphabetically sorted list of procedures that are relevant to the statement.Collisions on a rule set because of a specification containing wildcard entries are resolved in a similar fashion. For example, the rules in the following example will result in the <code>empddl_handler</code> procedure being invoked upon encountering the <code>ALTER TABLE HR.EMPLOYEES ADD COLUMN RATING NUMBER</code> statement:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(-
     stmt =&gt; 'ALTER TABLE', -
     schema_name =&gt; 'HR', -
     object_name =&gt; 'EMP%', -
     proc_name =&gt; 'EMPDDL_HANDLER');
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP( -
     stmt =&gt; 'ALTER TABLE', -
     schema_name =&gt; 'HR', -
     object_name =&gt; 'EMPLOYEES', -
     proc_name =&gt; 'EMPLOYEE_DDL_HANDLER');
</pre></li>
<li>
<p>Use the <code>SKIP</code> procedure with caution, particularly when skipping DDL statements. If a <code>CREATE</code> <code>TABLE</code> statement is skipped, for example, you must also specify other DDL statements that refer to that table in the <code>SKIP</code> procedure. Otherwise, the statements will fail and cause an exception. When this happens, SQL Apply stops running.</p>
</li>
<li>
<p>Before calling the <code>SKIP</code> procedure, SQL Apply must be halted. Do this by issuing an <code>ALTER DATABASE STOP LOGICAL STANDBY APPLY</code> statement. Once all desired filters have been specified, issue an <code>ALTER DATABASE START LOGICAL STANDBY APPLY IMMEDIATE</code> statement to start SQL Apply using the new filter settings.</p>
</li>
<li>
<p>See the <code>UNSKIP</code> procedure for information about reversing (undoing) the settings of the <code>SKIP</code> procedure.</p>
</li>
<li>
<p>For <code>USER</code> statements, the <code>SCHEMA_NAME</code> parameter will be the user and specify '%' for the <code>OBJECT_NAME</code> parameter.</p>
</li>
<li>
<p>If the <code>PROC_NAME</code> parameter is supplied, it must already exist in <code>DBA_PROCEDURES</code> and it must execute with <code>DEFINER</code> rights. If the procedure is declared with <code>INVOKER</code> rights, the <code>ORA-1031: insufficient privileges</code> message will be returned.</p>
</li>
<li>
<p>If the procedure returns a <code>REPLACEMENT</code> statement, the <code>REPLACEMENT</code> statement will be executed using the <code>SYSTEM</code> and <code>OBJECT</code> privileges of the owner of the procedure.</p>
</li>
<li>
<p>The PL/SQL block of a <code>SKIP</code> procedure cannot contain transaction control statements (for example, <code>COMMIT</code>, <code>ROLLBACK</code>, <code>SAVEPOINT</code>, and <code>SET CONSTRAINT</code>) unless the block is declared to be an autonomous transaction.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS66852"></a>Skip Statement Options</p>
<p><a href="#BABGCFCA">Table 86-14</a> lists the supported values for the <code>stmt</code> parameter of the <code>SKIP</code> procedure. The left column of the table lists the keywords that may be used to identify the set of SQL statements to the right of the keyword. In addition, any of the SQL statements listed in the <code>sys.audit_actions</code> table (shown in the right column of <a href="#BABGCFCA">Table 86-14</a>) are also valid values. Note that keywords are generally defined by database object.</p>
<div id="ARPLS66853" class="tblformal">
<p class="titleintable"><a id="sthref5573"></a><a id="BABGCFCA"></a>Table 86-14 Supported Values for the <code>stmt</code> Parameter</p>
<table class="cellalignment1229" title="Supported Values for the stmt Parameter" summary="Lists optional keywords for the SKIP statement." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Keyword</th>
<th class="cellalignment1227" id="r1c2-t18">Associated SQL Statements</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p>There is no keyword for this group of SQL statements.</p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<pre>
GRANT
REVOKE
ANALYZE TABLE
ANALYZE INDEX
ANALYZE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t18" headers="r1c1-t18">
<p><code>CLUSTER</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t18 r1c2-t18">
<pre>
AUDIT CLUSTER
CREATE CLUSTER
DROP CLUSTER
TRUNCATE CLUSTER
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t18" headers="r1c1-t18">
<p><code>CONTEXT</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t18 r1c2-t18">
<pre>
CREATE CONTEXT
DROP CONTEXT
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t18" headers="r1c1-t18">
<p><code>DATABASE LINK</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t18 r1c2-t18">
<pre>
CREATE DATABASE LINK
CREATE PUBLIC DATABASE LINK
DROP DATABASE LINK
DROP PUBLIC DATABASE LINK
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t18" headers="r1c1-t18">
<p><code>DIMENSION</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t18 r1c2-t18">
<pre>
ALTER DIMENSION
CREATE DIMENSION
DROP DIMENSION
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t18" headers="r1c1-t18">
<p><code>DIRECTORY</code><a id="sthref5574" href="#sthref5574" onclick='footdisplay(1,"All directory objects are owned by \u003ccode\u003eSYS\u003c/code\u003e, but for the purpose of filtering them with a skip directive the schema should be specified as \x27%\x27\".")'><sup class="tablefootnote">Foot&nbsp;1&nbsp;</sup></a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t18 r1c2-t18">
<pre>
CREATE DIRECTORY
DROP DIRECTORY
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t18" headers="r1c1-t18">
<p><code>DML</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t18 r1c2-t18">
<p>Includes DML statements on a table (for example: <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t18" headers="r1c1-t18">
<p><code>INDEX</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t18 r1c2-t18">
<pre>
ALTER INDEX
CREATE INDEX
DROP INDEX
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t18" headers="r1c1-t18">
<p><code>NON_SCHEMA_DDL</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t18 r1c2-t18">
<p><span class="italic">All DDL that does not pertain to a particular schema</span></p>
<p><span class="bold">Note:</span> <code>SCHEMA_NAME</code> and <code>OBJECT_NAME</code> must be null</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t18" headers="r1c1-t18">
<p><code>PL/SQL</code><a id="sthref5575" href="#sthref5575" onclick='footdisplay(2," See \u003ca class=\"olink SBYDB00315\" target=\"d_lsbydb\" href=\"../../server.112/e41134/data_support.htm#SBYDB00315\"\u003e\u003cspan class=\"italic\"\u003eOracle Data Guard Concepts and Administration\u003c/span\u003e\u003c/a\u003e for information about supported packages.")'><sup class="tablefootnote">Foot&nbsp;2&nbsp;</sup></a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t18 r1c2-t18">
<p>Execute Oracle-supplied package.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t18" headers="r1c1-t18">
<p><code>PROCEDURE</code><a id="sthref5576" href="#sthref5576" onclick='footdisplay(3,"Java schema objects (sources, classes, and resources) are considered the same as procedure for purposes of skipping (ignoring) SQL statements.")'><sup class="tablefootnote">Foot&nbsp;3&nbsp;</sup></a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t18 r1c2-t18">
<pre>
ALTER FUNCTION
ALTER PACKAGE
ALTER PACKAGE BODY
ALTER PROCEDURE
CREATE FUNCTION
CREATE LIBRARY
CREATE PACKAGE
CREATE PACKAGE BODY
CREATE PROCEDURE
DROP FUNCTION
DROP LIBRARY
DROP PACKAGE
DROP PACKAGE BODY
DROP PROCEDURE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t18" headers="r1c1-t18">
<p><code>PROFILE</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t18 r1c2-t18">
<pre>
ALTER PROFILE
CREATE PROFILE
DROP PROFILE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t18" headers="r1c1-t18">
<p><code>ROLE</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t18 r1c2-t18">
<pre>
ALTER ROLE
CREATE ROLE
DROP ROLE
SET ROLE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t18" headers="r1c1-t18">
<p><code>ROLLBACK STATEMENT</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t18 r1c2-t18">
<pre>
ALTER ROLLBACK SEGMENT
CREATE ROLLBACK SEGMENT
DROP ROLLBACK SEGMENT
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t18" headers="r1c1-t18">
<p><code>SCHEMA_DDL</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t18 r1c2-t18">
<p><span class="italic">All DDL statements that create, modify, or drop schema objects (for example: tables, indexes, and columns)</span></p>
<p><span class="bold">Note:</span> <code>SCHEMA_NAME</code> and <code>OBJECT_NAME</code> must <span class="italic">not</span> be null</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t18" headers="r1c1-t18">
<p><code>SEQUENCE</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t18 r1c2-t18">
<pre>
ALTER SEQUENCE
CREATE SEQUENCE
DROP SEQUENCE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t18" headers="r1c1-t18">
<p><code>SYNONYM</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t18 r1c2-t18">
<pre>
CREATE PUBLIC SYNONYM
CREATE SYNONYM
DROP PUBLIC SYNONYM
DROP SYNONYM
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t18" headers="r1c1-t18">
<p><code>SYSTEM AUDIT</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t18 r1c2-t18">
<pre>
AUDIT <span class="variable">SQL_statements</span>
NOAUDIT <span class="variable">SQL_statements</span>
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t18" headers="r1c1-t18">
<p><code>TABLE</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t18 r1c2-t18">
<pre>
CREATE TABLE
ALTER TABLE
DROP TABLE
TRUNCATE TABLE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t18" headers="r1c1-t18">
<p><code>TABLESPACE</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t18 r1c2-t18">
<pre>
CREATE TABLESPACE
DROP TABLESPACE
ALTER TABLESPACE
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t18" headers="r1c1-t18">
<p><code>TRIGGER</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t18 r1c2-t18">
<pre>
ALTER TRIGGER
CREATE TRIGGER
DISABLE ALL TRIGGERS
DISABLE TRIGGER
DROP TRIGGER
ENABLE ALL TRIGGERS
ENABLE TRIGGER
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t18" headers="r1c1-t18">
<p><code>TYPE</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t18 r1c2-t18">
<pre>
ALTER TYPE
ALTER TYPE BODY
CREATE TYPE
CREATE TYPE BODY
DROP TYPE
DROP TYPE BODY
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t18" headers="r1c1-t18">
<p><code>USER</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t18 r1c2-t18">
<pre>
ALTER USER
CREATE USER
DROP USER
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t18" headers="r1c1-t18">
<p><code>VIEW</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t18 r1c2-t18">
<pre>
CREATE VIEW
DROP VIEW
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t18" headers="r1c1-t18">
<p><code>VIEW</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t18 r1c2-t18">
<pre>
CREATE VIEW
DROP VIEW
</pre></td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;1&nbsp;</sup>All directory objects are owned by <code>SYS</code>, but for the purpose of filtering them with a skip directive the schema should be specified as '%'".</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;2&nbsp;</sup> See <a class="olink SBYDB00315" href="../../server.112/e41134/data_support.htm#SBYDB00315"><span class="italic">Oracle Data Guard Concepts and Administration</span></a> for information about supported packages.</p>
<p class="tablefootnote"><sup class="tablefootnote">Footnote&nbsp;3&nbsp;</sup>Java schema objects (sources, classes, and resources) are considered the same as procedure for purposes of skipping (ignoring) SQL statements.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5577"></a>Exceptions</p>
<div id="ARPLS66854" class="tblformal">
<p class="titleintable"><a id="sthref5578"></a><a id="sthref5579"></a>Table 86-15 DBMS_LOGSTDBY.SKIP Procedure Exceptions</p>
<table class="cellalignment1229" title="DBMS_LOGSTDBY.SKIP Procedure Exceptions" summary="Lists exceptions returned by the DBMS_LOGSTDBY.SKIP subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t19">Exception</th>
<th class="cellalignment1227" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t19" headers="r1c1-t19">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t19 r1c2-t19">
<p>Insufficient privileges:</p>
<ul>
<li>
<p>Procedure used <code>INVOKER</code> rights</p>
</li>
<li>
<p>Procedure needs <code>DBA</code> privileges</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t19" headers="r1c1-t19">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t19 r1c2-t19">
<p>Logical standby apply must be stopped to allow this operation.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t19" headers="r1c1-t19">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t19 r1c2-t19">
<p>Invalid logical standby option requested.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t19" headers="r1c1-t19">
<p><code>ORA-16203</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t19 r1c2-t19">
<p>"Unable to interpret <code>SKIP</code> procedure return values."</p>
<p>Indicates that a <code>SKIP</code> procedure has either generated an exception or has returned ambiguous values. You can identify the offending procedure by examining the <code>DBA_LOGSTDBY_EVENTS</code> view.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t19" headers="r1c1-t19">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t19 r1c2-t19">
<p>Logical standby metadata operation in progress.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5580"></a>Examples</p>
<dl>
<dd><a id="ARPLS73508"></a><a id="sthref5581"></a></dd>
<dt class="seghead">Example 1&nbsp;&nbsp;&nbsp;Skipping all DML and DDL changes made to a schema</dt>
<dd>
<p>The following example shows how to specify rules so that SQL Apply will skip both DDL and DML statements made to the HR schema.</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(STMT =&gt; 'SCHEMA DDL', -
     schema_name =&gt; 'HR', -
     object_name =&gt; '%', -
     proc_name =&gt; null);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP(STMT =&gt; 'DML', -
     schema_name =&gt; 'HR', -
     object_name =&gt; '%', -
     proc_name =&gt; null);
</pre></dd>
<dd><a id="ARPLS73509"></a><a id="sthref5582"></a></dd>
<dt class="seghead">Example 2&nbsp;&nbsp;&nbsp;Creating a procedure to handle different file system organization</dt>
<dd>
<p>For example, if the file system organization in the logical standby database is different than that in the primary database, you can write a <code>SKIP</code> procedure to handle DDL statements with file specifications transparently.The following procedure can handle DDL statements as long as you follow a specific naming convention for the file specification string.</p>
<ol>
<li>
<p>Create the <code>SKIP</code> procedure to handle tablespace DDL statements:</p>
<pre>
CREATE OR REPLACE PROCEDURE sys.handle_tbs_ddl (

  old_stmt  IN  VARCHAR2,
  stmt_typ  IN  VARCHAR2,
  schema    IN  VARCHAR2,
  name      IN  VARCHAR2,
  xidusn    IN  NUMBER,
  xidslt    IN  NUMBER,
  xidsqn    IN  NUMBER,
  action    OUT NUMBER,
  new_stmt  OUT VARCHAR2
) AS
BEGIN
 
-- All primary file specification that contains a directory
-- /usr/orcl/primary/dbs
-- should go to /usr/orcl/stdby directory specification
 
 
  new_stmt = replace(old_stmt,
                     '/usr/orcl/primary/dbs',
                     '/usr/orcl/stdby');
 
  action := DBMS_LOGSTDBY.SKIP_ACTION_REPLACE;
 
EXCEPTION
  WHEN OTHERS THEN
    action := DBMS_LOGSTDBY.SKIP_ACTION_ERROR;
    new_stmt := NULL;
END handle_tbs_ddl;
</pre></li>
<li>
<p>Register the <code>SKIP</code> procedure with SQL Apply:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (stmt =&gt; 'TABLESPACE', -
             proc_name =&gt; 'SYS.HANDLE_TBS_DDL');
</pre></li>
</ol>
</dd>
</dl>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66855" class="refsect2"><a id="i997648"></a>
<hr />
<h3 class="refsect2">SKIP_ERROR Procedure<a id="sthref5583"></a></h3>
<p>Upon encountering an error, the logical standby database uses the criteria contained in this procedure to determine a course of action. The default action when a match is found is to skip the error and continue with applying changes. However, if a procedure is supplied, then <code>SKIP_ERROR</code> can take other actions depending on the situation. It can do nothing, which causes SQL Apply to stop, or it can change the error message text and stop SQL Apply, or it can actually skip the error.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5584"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.SKIP_ERROR (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL,
     proc_name                 IN VARCHAR2 DEFAULT NULL,
     use_like                  IN BOOLEAN  DEFAULT NULL,
     esc                       IN CHAR1    DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5585"></a>Parameters</p>
<div id="ARPLS66856" class="tblformal">
<p class="titleintable"><a id="sthref5586"></a><a id="BDCBGJDC"></a>Table 86-16 SKIP_ERROR Procedure Parameters</p>
<table class="cellalignment1229" title="SKIP_ERROR Procedure Parameters" summary="Describes the parameters you set on the SKIP_ERROR subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t20">Parameter</th>
<th class="cellalignment1227" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t20" headers="r1c1-t20">
<p><code>stmt</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t20 r1c2-t20">
<p>Either a keyword that identifies a set of SQL statements or a specific SQL statement. The use of keywords simplifies configuration because keywords, generally defined by the database object, identify all SQL statements that operate on the specified object. <a href="#BABGCFCA">Table 86-14</a> shows a list of keywords and the equivalent SQL statements, either of which is a valid value for this parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t20" headers="r1c1-t20">
<p><code>schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t20 r1c2-t20">
<p>The name of one or more schemas (wildcards are permitted) associated with the SQL statements identified by the <code>stmt</code> parameter. If not applicable, this value must be set to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t20" headers="r1c1-t20">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t20 r1c2-t20">
<p>The name of one or more objects (wildcards are permitted) associated with the SQL statements identified by the <code>stmt</code>. If not applicable, this value must be set to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t20" headers="r1c1-t20">
<p><code>proc_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t20 r1c2-t20">
<p>Name of a stored procedure to call when SQL Apply encounters an error and determines a particular statement matches the filter defined by the <code>stmt</code>, <code>schema_name</code>, and <code>object_name</code> parameters. Specify the procedure in the following format:</p>
<p><code>'"schema"."package"."procedure"'</code></p>
<p>This procedure returns an error message that directs SQL Apply to perform one of the following actions:</p>
<ul>
<li>
<p>Silently skip the error and continue with SQL Apply</p>
</li>
<li>
<p>Replace the error message that would have been created with a custom one, and stop SQL Apply</p>
</li>
<li>
<p>Do nothing, causing SQL Apply to stop and the original error message to be logged</p>
</li>
</ul>
<p>SQL Apply calls the stored procedure with the following call signature:</p>
<ul>
<li>
<p><code>IN STATEMENT VARCHAR(4000)</code> -- The first 4K of the statement</p>
</li>
<li>
<p><code>IN STATEMENT_TYPE VARCHAR2</code> -- The <code>stmt</code> of the filter</p>
</li>
<li>
<p><code>IN SCHEMA VARCHAR2</code> -- The <code>schema_name</code> of the filter, if applicable</p>
</li>
<li>
<p><code>IN NAME VARCHAR2</code> -- The <code>object_name</code> of the filter, if applicable</p>
</li>
<li>
<p><code>IN XIDUSN NUMBER</code> -- Transaction ID part 1</p>
</li>
<li>
<p><code>IN XIDSLT NUMBER</code> -- Transaction ID part 2</p>
</li>
<li>
<p><code>IN XIDSQN NUMBER</code> -- Transaction ID part 3</p>
</li>
<li>
<p><code>IN ERROR VARCHAR(4000)</code> -- Text of the original error to be recorded</p>
</li>
<li>
<p><code>OUT NEW_ERROR VARCHAR(4000)</code> -- Null or modified error text</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t20" headers="r1c1-t20">
<p><code>use_like</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t20 r1c2-t20">
<p>Allows pattern matching to isolate the tables that you want to skip on the logical standby database. The <code>use_like</code> parameter matches a portion of one character value to another by searching the first value for the pattern specified by the second, and calculates strings using characters as defined by the input character set. This parameter follows the same rules for pattern matching described in the <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t20" headers="r1c1-t20">
<p><code>esc</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t20 r1c2-t20">
<p>Identifies an escape character (such as the characters "%" or "_") that you can use for pattern matching. If the escape character appears in the pattern before the character "%" or "_" then Oracle interprets this character literally in the pattern, rather than as a special pattern matching character. See<a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a> for more information about pattern matching.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5587"></a>Usage Notes</p>
<ul>
<li>
<p>A stored procedure provided to the <code>SKIP_ERROR</code> procedure is called when SQL Apply encounters an error that could shut down the application of redo logs to the standby database.</p>
</li>
<li>
<p>Running this stored procedure affects the error being written in the <code>STATUS</code> column of the <code>DBA_LOGSTDBY_EVENTS</code> table. The <code>STATUS_CODE</code> column remains unchanged. If the stored procedure is to have no effect, that is, apply will be stopped, then the <code>NEW_ERROR</code> is written to the events table. To truly have no effect, set <code>NEW_ERROR</code> to <code>ERROR</code> in the procedure.</p>
</li>
<li>
<p>If the stored procedure requires that a shutdown be avoided, then you must set <code>NEW_ERROR</code> to <code>NULL</code>.</p>
</li>
<li>
<p>This procedure requires <code>DBA</code> privileges to execute.</p>
</li>
<li>
<p>For <code>USER</code> statements, the <code>SCHEMA_NAME</code> parameter will be the user and you should specify '%' for the <code>OBJECT_NAME</code> parameter.</p>
</li>
<li>
<p>If the <code>PROC_NAME</code> parameter is specified, it must already exist in <code>DBA_PROCEDURES</code> and it must execute with <code>DEFINERS</code> rights. If the procedure is declared with <code>INVOKERS</code> rights, the <code>ORA-1031: insufficient privileges</code> message will be returned.</p>
</li>
<li>
<p>The PL/SQL block of a <code>SKIP_ERROR</code> procedure cannot contain transaction control statements (for example: <code>COMMIT</code>, <code>ROLLBACK</code>, <code>SAVEPOINT</code>, and SET <code>CONSTRAINT</code>) unless the block is declared to be an autonomous transaction using the following syntax:</p>
<pre>
PRAGMA AUTONOMOUS_TRANSACTION
</pre></li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5588"></a>Exceptions</p>
<div id="ARPLS66857" class="tblformal">
<p class="titleintable"><a id="sthref5589"></a><a id="sthref5590"></a>Table 86-17 SKIP_ERROR Procedure Exceptions</p>
<table class="cellalignment1229" title="SKIP_ERROR Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Exception</th>
<th class="cellalignment1227" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21">
<p>Insufficient privileges:</p>
<ul>
<li>
<p>Procedure used <code>INVOKER</code> rights</p>
</li>
<li>
<p>Procedure needs <code>DBA</code> privileges</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t21" headers="r1c1-t21">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c2-t21">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t21" headers="r1c1-t21">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c2-t21">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t21" headers="r1c1-t21">
<p><code>ORA-16236</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c2-t21">
<p>Logical Standby metadata operation in progress</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5591"></a>Example 1</p>
<p>The following example shows how to specify rules so that SQL Apply will skip any error raised from any <code>GRANT DDL</code> command.</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR('GRANT') 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5592"></a>Example 2</p>
<p>To skip errors on <code>GRANT</code> statements on <code>SYS</code> or <code>HR</code> schemas, define a procedure <code>handle_error_ddl</code> and register it. In the following example, assume that <code>handle_error_ddl</code> is a free-standing procedure in the <code>SYS</code> schema.</p>
<ol>
<li>
<p>Create the error-handler procedure:</p>
<pre>
CREATE OR REPLACE PROCEDURE sys.handle_error_ddl ( 
old_stmt IN VARCHAR2, 
stmt_type IN VARCHAR2, 
schema IN VARCHAR2, 
name IN VARCHAR2, 
xidusn IN NUMBER, 
xidslt IN NUMBER, 
xidsqn IN NUMBER, 
error IN VARCHAR2, 
new_error OUT VARCHAR2 
) AS 
BEGIN 
-- Default to what we already have 
new_error := error; 
-- Ignore any GRANT errors on SYS or HR schemas 
IF INSTR(UPPER(old_stmt),'GRANT') &gt; 0 
THEN 
IF schema IS NULL 
OR (schema IS NOT NULL AND 
(UPPER(schema) = 'SYS' OR UPPER(schema) = 'HR' ) 
THEN 
new_error := NULL; 
-- record the fact that we just skipped an error on 'SYS' or 'HR' schemas 
-- code not shown here 
END IF; 
END IF; 
END handle_error_ddl; 
/
</pre></li>
<li>
<p>Register the error handler with SQL Apply:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR ( -
     statement =&gt; 'NON_SCHEMA_DDL', -
     schema_name =&gt; NULL, -
     object_name =&gt; NULL, -
     proc_name =&gt; 'SYS.HANDLE_ERROR_DDL');
</pre></li>
</ol>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS927" class="refsect2"><a id="i997765"></a>
<hr />
<h3 class="refsect2">SKIP_TRANSACTION Procedure<a id="sthref5593"></a></h3>
<p>This procedure provides a way to skip (ignore) applying transactions to the logical standby database. You can skip specific transactions by specifying transaction identification information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5594"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.SKIP_TRANSACTION (
     xidusn          IN NUMBER,
     xidslt          IN NUMBER,
     xidsqn          IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5595"></a>Parameters</p>
<div id="ARPLS66858" class="tblformal">
<p class="titleintable"><a id="sthref5596"></a><a id="BDCJJFBH"></a>Table 86-18 SKIP_TRANSACTION Procedure Parameters</p>
<table class="cellalignment1229" title="SKIP_TRANSACTION Procedure Parameters " summary="Describes the parameters you set on the SKIP_TRANSACTION subprogram of the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>XIDUSN NUMBER</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>Transaction ID undo segment number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t22" headers="r1c1-t22">
<p><code>XIDSLT NUMBER</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t22 r1c2-t22">
<p>Transaction ID slot number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t22" headers="r1c1-t22">
<p><code>XIDSQN NUMBER</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t22 r1c2-t22">
<p>Transaction ID sequence number of the transaction being skipped</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5597"></a>Usage Notes</p>
<p>If SQL Apply stops due to a particular transaction (for example, a DDL transaction), you can specify that transaction ID and then continue to apply. You can call this procedure multiple times for as many transactions as you want SQL Apply to ignore.</p>
<div class="infoboxnotewarn">
<p class="notep1">CAUTION:</p>
<p class="warnsp"><code><span class="codeinlinebold">SKIP_TRANSACTION</span></code> is an inherently dangerous operation. Do not invoke this procedure unless you have examined the transaction in question through the <code><span class="codeinlinebold">V$LOGMNR_CONTENTS</span></code> view and have taken compensating actions at the logical standby database. <code><span class="codeinlinebold">SKIP_TRANSACTION</span></code> is not the appropriate procedure to invoke to skip DML changes to a table.</p>
<p class="warnsp">To skip a DML failure, use a <code><span class="codeinlinebold">SKIP</span></code> procedure, such as <code><span class="codeinlinebold">SKIP('DML','MySchema','MyFailed Table').</span></code> Using the <code><span class="codeinlinebold">SKIP_TRANSACTION</span></code> procedure for DML transactions may skip changes for other tables, thus logically corrupting them.</p>
</div>
</div>
<!-- class="refsubsect" -->
<ul>
<li>
<p>This procedure requires <code>DBA</code> privileges to execute.</p>
</li>
<li>
<p>Use the <code>DBA_LOGSTDBY_SKIP_TRANSACTION</code> view to list the transactions that are going to be skipped by SQL Apply.</p>
</li>
<li>
<p>Also, see the <code>ALTER DATABASE START LOGICAL STANDBY SKIP FAILED TRANSACTION</code> statement in <a class="olink SQLRF" href="../../server.112/e41084/toc.htm"><span class="italic">Oracle Database SQL Language Reference</span></a>.</p>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5598"></a>Exceptions</p>
<div id="ARPLS66859" class="tblformal">
<p class="titleintable"><a id="sthref5599"></a><a id="sthref5600"></a>Table 86-19 SKIP_TRANSACTION Procedure Exceptions</p>
<table class="cellalignment1229" title="SKIP_TRANSACTION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Exception</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>Need <code>DBA</code> privileges</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t24" headers="r1c1-t24">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t24 r1c2-t24">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t24" headers="r1c1-t24">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t24 r1c2-t24">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5601"></a>Examples</p>
<p>To skip a DDL transaction with (<code>XIDUSN</code>, <code>XIDSLT</code>, <code>XIDSQN</code>) of (1.13.1726) you can register a rule as shown in the following example:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_TRANSACTION (- 
     XIDUSN =&gt; 1, XIDSLT =&gt; 13, XIDSQN =&gt; 1726);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS66860" class="refsect2"><a id="BGBFBFEH"></a>
<hr />
<h3 class="refsect2">UNSKIP Procedure<a id="sthref5602"></a></h3>
<p>Use the <code>UNSKIP</code> procedure to delete rules specified earlier with the <code>SKIP</code> procedure. The parameters specified in the <code>UNSKIP</code> procedure must match exactly for it to delete an already-specified rule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5603"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.UNSKIP (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFUALT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5604"></a>Parameters</p>
<p>The parameter information for the <code>UNSKIP</code> procedure is the same as that described for the <code>SKIP</code> procedure. See <a href="#CHDDEIJI">Table 86-13</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5605"></a>Exceptions</p>
<div id="ARPLS66861" class="tblformal">
<p class="titleintable"><a id="sthref5606"></a><a id="sthref5607"></a>Table 86-20 UNSKIP Procedure Exceptions</p>
<table class="cellalignment1229" title="UNSKIP Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Exception</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>need <code>DBA</code> privileges to execute this procedure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t25" headers="r1c1-t25">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t25 r1c2-t25">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5608"></a>Usage Notes</p>
<div class="infoboxnotewarn">
<p class="notep1">CAUTION:</p>
<p class="warnsp">If DML changes for a table have been skipped and not compensated for, you must follow the call to the <code><span class="codeinlinebold">UNSKIP</span></code> procedure with a call to the <code><span class="codeinlinebold">INSTANTIATE_TABLE</span></code> procedure to synchronize this table with those maintained by SQL Apply.</p>
</div>
<ul>
<li>
<p>This procedure requires DBA privileges to execute.</p>
</li>
<li>
<p>Wildcards passed in the <code>schema_name</code> or the <code>object_name</code> parameter are not expanded. The wildcard character is matched at the character level. Thus, you can delete only one specified rule by invoking the <code>UNSKIP</code> procedure, and you will need a distinct <code>UNSKIP</code> procedure call to delete each rule that was previously specified.</p>
<p>For example, assume you have specified the following two rules to skip applying DML statements to the <code>HR.EMPLOYEE</code> and <code>HR.EMPTEMP</code> tables:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMPLOYEE', -
     PROC_NAME =&gt; null);
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMPTEMP', -
     PROC_NAME =&gt; null);
</pre>
<p>In the following example, the wildcard in the <code>TABLE_NAME</code> parameter cannot be used to delete the rules that were specified:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.UNSKIP (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMP%');
</pre>
<p>In fact, this <code>UNSKIP</code> procedure matches neither of the rules, because the wildcard character in the <code>TABLE_NAME</code> parameter is not expanded. Instead, the wildcard character will be used in an exact match to find the corresponding <code>SKIP</code> rule.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS929" class="refsect2"><a id="i997837"></a>
<hr />
<h3 class="refsect2">UNSKIP_ERROR Procedure<a id="sthref5609"></a></h3>
<p>Use the <code>UNSKIP_ERROR</code> procedure to delete rules specified earlier with the <code>SKIP_ERROR</code> procedure. The parameters specified in the <code>UNSKIP_ERROR</code> procedure must match exactly for the procedure to delete an already-specified rule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5610"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.UNSKIP_ERROR (
     stmt                      IN VARCHAR2,
     schema_name               IN VARCHAR2 DEFAULT NULL,
     object_name               IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5611"></a>Parameters</p>
<p>The parameter information for the <code>UNSKIP_ERROR</code> procedure is the same as that described for the <code>SKIP_ERROR</code> procedure. See <a href="#BDCBGJDC">Table 86-16</a> for complete parameter information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5612"></a>Exceptions</p>
<div id="ARPLS66862" class="tblformal">
<p class="titleintable"><a id="sthref5613"></a><a id="BABEEIFC"></a>Table 86-21 UNSKIP_ERROR Procedure Exceptions</p>
<table class="cellalignment1229" title="UNSKIP_ERROR Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t27">Exception</th>
<th class="cellalignment1227" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t27" headers="r1c1-t27">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t27 r1c2-t27">
<p>Need <code>DBA</code> privileges</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t27" headers="r1c1-t27">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t27 r1c2-t27">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t27" headers="r1c1-t27">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t27 r1c2-t27">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5614"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code>DBA</code> privileges to execute.</p>
</li>
<li>
<p>Wildcards passed in the <code>schema_name</code> or the <code>object_name</code> parameters are not expanded. Instead, the wildcard character is treated as any other character and an exact match is made. Thus, you can delete only one specified rule by invoking the <code>UNSKIP_ERROR</code> procedure, and you need a distinct <code>UNSKIP_ERROR</code> procedure call to delete each rule that you previously specified.</p>
<p>For example, assume you have specified the following two rules to handle the <code>HR.EMPLOYEE</code> and <code>HR.EMPTEMP</code> tables:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMPLOYEE', -
     PROC_NAME =&gt; 'hr_employee_handler');
SQL&gt; EXECUTE DBMS_LOGSTDBY.SKIP_ERROR (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMPTEMP', -
     PROC_NAME =&gt; 'hr_tempemp_handler');
</pre>
<p>In this case, the following <code>UNSKIP</code> procedure cannot be used to delete the rules that you have specified:</p>
<pre>
SQL&gt; EXECUTE DBMS_LOGSTDBY.UNSKIP_ERROR (STMT =&gt; 'DML',-
     SCHEMA_NAME =&gt; 'HR', -
     OBJECT_NAME =&gt; 'EMP%');
</pre>
<p>In fact, the <code>UNSKIP</code> procedure will match neither of the rules, because the wildcard character in the <code>OBJECT_NAME</code> parameter will not be expanded.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5615"></a>Example</p>
<p>To remove a handler that was previously registered with SQL Apply from getting called on encountering an error, you can issue the following statement:</p>
<pre>
DBMS_LOGSTDBY.UNSKIP_ERROR ( -
      statement =&gt; 'NON_SCHEMA_DDL', -
      schema_name =&gt; NULL, -
      object_name =&gt; NULL);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS930" class="refsect2"><a id="i997855"></a>
<hr />
<h3 class="refsect2">UNSKIP_TRANSACTION Procedure<a id="sthref5616"></a></h3>
<p>Use the <code>UNSKIP_TRANSACTION</code> procedure to delete rules specified earlier with the <code>SKIP_TRANSACTION</code> procedure. The parameters specified in the <code>UNSKIP_TRANSACTION</code> procedure must match exactly for the procedure to delete an already-specified rule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5617"></a>Syntax</p>
<pre>
DBMS_LOGSTDBY.UNSKIP_TRANSACTION (
     xidusn_p         IN NUMBER,
     xidslt_p         IN NUMBER,
     xidsqn_p         IN NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5618"></a>Parameters</p>
<div id="ARPLS66863" class="tblformal">
<p class="titleintable"><a id="sthref5619"></a><a id="BDCIGCGJ"></a>Table 86-22 UNSKIP_TRANSACTION Procedure Parameters</p>
<table class="cellalignment1229" title="UNSKIP_TRANSACTION Procedure Parameters " summary="Describes the XIDUSN, XIDSLT, and XIDSQN parameters on the UNSKIP_TRANSACTION procedure." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t28">Parameter</th>
<th class="cellalignment1227" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t28" headers="r1c1-t28">
<p><code>XIDUSN</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t28 r1c2-t28">
<p>Transaction ID undo segment number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t28" headers="r1c1-t28">
<p><code>XIDSLT</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t28 r1c2-t28">
<p>Transaction ID slot number of the transaction being skipped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t28" headers="r1c1-t28">
<p><code>XIDSQN</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t28 r1c2-t28">
<p>Transaction ID sequence number of the transaction being skipped</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5620"></a>Exceptions</p>
<div id="ARPLS66864" class="tblformal">
<p class="titleintable"><a id="sthref5621"></a><a id="sthref5622"></a>Table 86-23 UNSKIP_TRANSACTION Procedure Exceptions</p>
<table class="cellalignment1229" title="UNSKIP_TRANSACTION Procedure Exceptions" summary="Lists the exceptions you might encounter when you use the SKIP subprogram on the DBMS_LOGSTDBY package." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Exception</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><code>ORA-01031</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>need <code>DBA</code> privileges to execute this procedure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t29" headers="r1c1-t29">
<p><code>ORA-16103</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t29 r1c2-t29">
<p>Logical Standby apply must be stopped to allow this operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t29" headers="r1c1-t29">
<p><code>ORA-16104</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t29 r1c2-t29">
<p>invalid Logical Standby option requested</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5623"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure requires <code>DBA</code> privileges to execute.</p>
</li>
<li>
<p>Query the <code>DBA_LOGSTDBY_SKIP_TRANSACTION</code> view to list the transactions that are going to be skipped by SQL Apply.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref5624"></a>Examples</p>
<p>To remove a rule that was originally specified to skip the application of a transaction with (<code>XIDUSN</code>, <code>XIDSLT</code>, <code>XIDSQN</code>) of (1.13.1726) issue the following statement:</p>
<pre>
SQL&gt; DBMS_LOGSTDBY.UNSKIP_TRANSACTION (XIDUSN =&gt; 1, XIDSLT =&gt; 13, XIDSQN =&gt; 1726);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_logmnrd.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_metada.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
</body>
</html>
