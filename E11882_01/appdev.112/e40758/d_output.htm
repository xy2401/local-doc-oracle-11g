<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_OUTPUT</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:21Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_outln.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_parallel_ex.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">104/265</span> <!-- End Header -->
<div id="ARPLS036" class="chapter"><a id="BABJCAJA"></a>
<h1 class="chapter"><span class="secnum">100</span> DBMS_OUTPUT</h1>
<p>The <a id="sthref6664"></a><code>DBMS_OUTPUT</code> package enables you to send messages from stored procedures, packages, and triggers. The package is especially useful for displaying PL/SQL debugging information.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABEHIEG">Using DBMS_OUTPUT</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Operational Notes</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIHIDIFA">Data Structures</a></p>
<ul>
<li>
<p>TABLE Types</p>
</li>
<li>
<p>OBJECT Types</p>
</li>
</ul>
</li>
<li>
<p><a href="#i999346">Summary of DBMS_OUTPUT Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABEHIEG"></a>
<hr />
<div id="ARPLS67300" class="refsect1">
<h2 class="refsect1">Using DBMS_OUTPUT</h2>
<p>This section contains topics which relate to using the <code>DBMS_OUTPUT</code> package.</p>
<ul>
<li>
<p><a href="#CIHBFFDB">Overview</a></p>
</li>
<li>
<p><a href="#i1000600">Security Model</a></p>
</li>
<li>
<p><a href="#i1000634">Operational Notes</a></p>
</li>
<li>
<p><a href="#i1000750">Exceptions</a></p>
</li>
<li>
<p><a href="#CIHEGBBF">Rules and Limits</a></p>
</li>
<li>
<p><a href="#BABHEAFF">Examples</a></p>
</li>
</ul>
<div id="ARPLS67301" class="refsect2"><a id="CIHBFFDB"></a>
<hr />
<h3 class="refsect2">Overview</h3>
<p>The package is typically used for debugging, or for displaying messages and reports to SQL*DBA or SQL*Plus (such as are produced by applying the SQL command <code>DESCRIBE</code> to procedures).</p>
<p>The <a href="#BABGHBIA">PUT Procedure</a> and <a href="#i1000105">PUT_LINE Procedure</a> in this package enable you to place information in a buffer that can be read by another trigger, procedure, or package. In a separate PL/SQL procedure or anonymous block, you can display the buffered information by calling the <a href="#BABGBACJ">GET_LINE Procedure</a> and <a href="#i1000253">GET_LINES Procedure</a>.</p>
<p>If the package is disabled, all calls to subprograms are ignored. In this way, you can design your application so that subprograms are available only when a client is able to process the information.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67302" class="refsect2"><a id="i1000600"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>The <code>dbmsotpt.sql</code> script must be run as user <code>SYS</code>. This creates the public synonym <code>DBMS_OUTPUT</code>, and <code>EXECUTE</code> permission on this package is granted to <code>public</code>.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67303" class="refsect2"><a id="i1000634"></a>
<hr />
<h3 class="refsect2">Operational Notes</h3>
<ul>
<li>
<p>If you do not call <code>GET_LINE</code>, or if you do not display the messages on your screen in SQL*Plus, the buffered messages are ignored.</p>
</li>
<li>
<p>SQL*Plus calls <code>GET_LINES</code> after issuing a SQL statement or anonymous PL/SQL calls.</p>
</li>
<li>
<p>Typing <code>SET</code> <code>SERVEROUTPUT</code> <code>ON</code> in SQL*Plus has the effect of invoking</p>
<pre>
DBMS_OUTPUT.ENABLE (buffer_size =&gt; NULL);
</pre>
<p>with no limit on the output.</p>
</li>
<li>
<p>You should generally avoid having application code invoke either the <a href="#i999434">DISABLE Procedure</a> or <a href="#i999293">ENABLE Procedure</a> because this could subvert the attempt of an external tool like SQL*Plus to control whether or not to display output.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1"><span class="bold">Note</span>:</p>
Messages sent using <code>DBMS_OUTPUT</code> are not actually sent until the sending subprogram or trigger completes. There is no mechanism to flush output during the execution of a procedure.</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67304" class="refsect2"><a id="i1000750"></a>
<hr />
<h3 class="refsect2">Exceptions</h3>
<p><code>DBMS_OUTPUT</code> subprograms raise the application error <code>ORA-20000</code>, and the output procedures can return the following errors:</p>
<div id="ARPLS67305" class="tblformal">
<p class="titleintable"><a id="sthref6665"></a><a id="sthref6666"></a>Table 100-1 DBMS_OUTPUT Errors</p>
<table class="cellalignment1229" title="DBMS_OUTPUT Errors " summary="This table describes the Exceptions raised by DBMS_OUTPUT subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t3">Error</th>
<th class="cellalignment1227" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t3" headers="r1c1-t3">
<p><code>ORU-10027:</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t3 r1c2-t3">
<p>Buffer overflow</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t3" headers="r1c1-t3">
<p><code>ORU-10028:</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t3 r1c2-t3">
<p>Line length overflow</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67306" class="refsect2"><a id="CIHEGBBF"></a>
<hr />
<h3 class="refsect2">Rules and Limits</h3>
<ul>
<li>
<p>The maximum line size is 32767 bytes.</p>
</li>
<li>
<p>The default buffer size is 20000 bytes. The minimum size is 2000 bytes and the maximum is unlimited.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS67307" class="refsect2"><a id="BABHEAFF"></a>
<hr />
<h3 class="refsect2">Examples</h3>
<p class="subhead2"><a id="ARPLS67308"></a>Example 1: Using a Trigger to Produce Output</p>
<p>You can use a trigger to print out some output from the debugging process. For example, you could code the trigger to invoke:</p>
<pre>
DBMS_OUTPUT.PUT_LINE('I got here:'||:new.col||' is the new value'); 
</pre>
<p>If you have enabled the <code>DBMS_OUTPUT</code> package, then the text produced by this <code>PUT_LINE</code> would be buffered, and you could, after executing the statement (presumably some <code>INSERT</code>, <code>DELETE</code>, or <code>UPDATE</code> that caused the trigger to fire), retrieve the line of information. For example:</p>
<pre>
BEGIN 
   DBMS_OUTPUT.GET_LINE(:buffer, :status); 
END; 
</pre>
<p>You could then optionally display the buffer on the screen. You repeat calls to <code>GET_LINE</code> until <code>status</code> comes back as nonzero. For better performance, you should use calls to <a href="#i1000253">GET_LINES Procedure</a> which can return an array of lines.</p>
<p class="subhead1"><a id="ARPLS67309"></a>Example 2: Debugging Stored Procedures and Triggers</p>
<p>The <code>DBMS_OUTPUT</code> package is commonly used to debug stored procedures and triggers. This package can also be used to enable you to retrieve information about an object and format this output, as shown in <a href="#i999837">"Example 3: Retrieving Information About an Object"</a>.</p>
<p>This function queries the employee table and returns the total salary for a specified department. The function includes several calls to the <code>PUT_LINE</code> procedure:</p>
<pre>
CREATE FUNCTION dept_salary (dnum NUMBER) RETURN NUMBER IS
   CURSOR emp_cursor IS
      SELECT sal, comm FROM emp WHERE deptno = dnum;
   total_wages    NUMBER(11, 2) := 0;
   counter        NUMBER(10) := 1;
BEGIN

   FOR emp_record IN emp_cursor LOOP
      emp_record.comm := NVL(emp_record.comm, 0);
      total_wages := total_wages + emp_record.sal
         + emp_record.comm;
      DBMS_OUTPUT.PUT_LINE('Loop number = ' || counter || 
         '; Wages = '|| TO_CHAR(total_wages));  /* Debug line */
      counter := counter + 1; /* Increment debug counter */
   END LOOP;
   /* Debug line */
   DBMS_OUTPUT.PUT_LINE('Total wages = ' ||
     TO_CHAR(total_wages)); 
   RETURN total_wages;

END dept_salary;
</pre>
<p>Assume the <code>EMP</code> table contains the following rows:</p>
<pre>
EMPNO          SAL     COMM     DEPT
-----        ------- -------- -------
1002           1500      500      20
1203           1000               30
1289           1000               10
1347           1000      250      20
</pre>
<p>Assume the user executes the following statements in SQL*Plus:</p>
<pre>
SET SERVEROUTPUT ON
VARIABLE salary NUMBER;
EXECUTE :salary := dept_salary(20);
</pre>
<p>The user would then see the following information displayed in the output pane:</p>
<pre>
Loop number = 1; Wages = 2000
Loop number = 2; Wages = 3250
Total wages = 3250

PL/SQL procedure successfully executed.
</pre>
<p class="subhead1"><a id="i999837"></a><a id="ARPLS67310"></a>Example 3: Retrieving Information About an Object</p>
<p>In this example, the user has used the <code>EXPLAIN</code> <code>PLAN</code> command to retrieve information about the execution plan for a statement and has stored it in <code>PLAN_TABLE</code>. The user has also assigned a statement ID to this statement. The example <code>EXPLAIN_OUT</code> procedure retrieves the information from this table and formats the output in a nested manner that more closely depicts the order of steps undergone in processing the SQL statement.</p>
<pre>
 /****************************************************************/
/* Create EXPLAIN_OUT procedure. User must pass STATEMENT_ID to */
/* to procedure, to uniquely identify statement.                */
/****************************************************************/
CREATE OR REPLACE PROCEDURE explain_out 
   (statement_id IN VARCHAR2) AS 

   -- Retrieve information from PLAN_TABLE into cursor EXPLAIN_ROWS.

   CURSOR explain_rows IS 
      SELECT level, id, position, operation, options,
         object_name 
      FROM plan_table 
      WHERE statement_id = explain_out.statement_id 
      CONNECT BY PRIOR id = parent_id 
         AND statement_id = explain_out.statement_id 
      START WITH id = 0
       ORDER BY id; 
 
BEGIN 

   -- Loop through information retrieved from PLAN_TABLE:

   FOR line IN explain_rows LOOP 

      -- At start of output, include heading with estimated cost.

      IF line.id = 0 THEN 
         DBMS_OUTPUT.PUT_LINE ('Plan for statement '
            || statement_id
            || ', estimated cost = ' || line.position); 
      END IF; 

      -- Output formatted information. LEVEL determines indention level.

      DBMS_OUTPUT.PUT_LINE (lpad(' ',2*(line.level-1)) ||
         line.operation || ' ' || line.options || ' ' || 
         line.object_name); 
   END LOOP; 

END; 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="u_file.htm#BABGGEDF">Chapter 224, "UTL_FILE"</a></div>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIHIDIFA"></a>
<hr />
<div id="ARPLS67311" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code>DBMS_OUTPUT</code> package declares 2 collection types for use with the <a href="#i1000253">GET_LINES Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIHDBEBC"></a>TABLE Types</p>
<p><a href="#CIHJJJJF">CHARARR Table Type</a></p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CIHECACE"></a>OBJECT Types</p>
<p><a href="#CIHCIDHG">DBMSOUTPUT_LINESARRAY Object Type</a></p>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS67312" class="refsect2"><a id="CIHJJJJF"></a>
<hr />
<h3 class="refsect2"><a id="sthref6667"></a>CHARARR Table Type</h3>
<p>This package type is to be used with the <a href="#i1000253">GET_LINES Procedure</a> to obtain text submitted through the <a href="#BABGHBIA">PUT Procedure</a> and <a href="#i1000105">PUT_LINE Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6668"></a>Syntax</p>
<pre>
TYPE CHARARR IS TABLE OF VARCHAR2(32767) INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67313" class="refsect2"><a id="CIHCIDHG"></a>
<hr />
<h3 class="refsect2"><a id="sthref6669"></a>DBMSOUTPUT_LINESARRAY Object Type</h3>
<p>This package type is to be used with the <a href="#i1000253">GET_LINES Procedure</a> to obtain text submitted through the <a href="#BABGHBIA">PUT Procedure</a> and <a href="#i1000105">PUT_LINE Procedure</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6670"></a>Syntax</p>
<pre>
TYPE DBMSOUTPUT_LINESARRAY IS
     VARRAY(2147483647) OF VARCHAR2(32767);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i999346"></a>
<hr />
<div id="ARPLS67314" class="refsect1">
<h2 class="refsect1">Summary of DBMS_OUTPUT Subprograms</h2>
<div id="ARPLS67315" class="tblformal">
<p class="titleintable"><a id="sthref6671"></a><a id="sthref6672"></a>Table 100-2 DBMS_OUTPUT Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_OUTPUT Package Subprograms" summary="This table lists the DBMS_OUTPUT subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#i999434">DISABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>Disables message output</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#i999293">ENABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>Enables message output</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#BABGBACJ">GET_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>Retrieves one line from buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#i1000253">GET_LINES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t5 r1c2-t5">
<p>Retrieves an array of lines from buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#i1000062">NEW_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t5 r1c2-t5">
<p>Terminates a line created with <code>PUT</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#BABGHBIA">PUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t5 r1c2-t5">
<p>Places a partial line in the buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#i1000105">PUT_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t5 r1c2-t5">
<p>Places line in buffer</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
The <a href="#BABGHBIA">PUT Procedure</a> that take a number are obsolete and, while currently supported, are included in this release for legacy reasons only.</div>
<div id="ARPLS67316" class="refsect2"><a id="i999434"></a>
<hr />
<h3 class="refsect2"><a id="sthref6673"></a>DISABLE Procedure</h3>
<p>This procedure disables calls to <code>PUT</code>, <code>PUT_LINE</code>, <code>NEW_LINE</code>, <code>GET_LINE</code>, and <code>GET_LINES</code>, and purges the buffer of any remaining information.</p>
<p>As with the <a href="#i999293">ENABLE Procedure</a>, you do not need to call this procedure if you are using the <code>SERVEROUTPUT</code> option of SQL*Plus.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6674"></a>Syntax</p>
<pre>
DBMS_OUTPUT.DISABLE;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6675"></a>Pragmas</p>
<pre>
pragma restrict_references(disable,WNDS,RNDS);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67317" class="refsect2"><a id="i999293"></a>
<hr />
<h3 class="refsect2"><a id="sthref6676"></a>ENABLE Procedure</h3>
<p>This procedure enables calls to <code>PUT</code>, <code>PUT_LINE</code>, <code>NEW_LINE</code>, <code>GET_LINE</code>, and <code>GET_LINES</code>. Calls to these procedures are ignored if the <code>DBMS_OUTPUT</code> package is not activated.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6677"></a>Syntax</p>
<pre>
DBMS_OUTPUT.ENABLE (
   buffer_size IN INTEGER DEFAULT 20000);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6678"></a>Pragmas</p>
<pre>
pragma restrict_references(enable,WNDS,RNDS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6679"></a>Parameters</p>
<div id="ARPLS67318" class="tblformal">
<p class="titleintable"><a id="sthref6680"></a><a id="sthref6681"></a>Table 100-3 ENABLE Procedure Parameters</p>
<table class="cellalignment1229" title="ENABLE Procedure Parameters " summary="This table describes Parameters used by the DBMS_OUTPUT.ENABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Parameter</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><code>buffer_size</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Upper limit, in bytes, the amount of buffered information. Setting <code>buffer_size</code> to <code>NULL</code> specifies that there should be no limit.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6682"></a>Usage Notes</p>
<ul>
<li>
<p>It is not necessary to call this procedure when you use the <code>SET</code> <code>SERVEROUTPUT</code> option of SQL*Plus.</p>
</li>
<li>
<p>If there are multiple calls to <code>ENABLE</code>, then <code>buffer_size</code> is the last of the values specified. The maximum size is 1,000,000, and the minimum is 2,000 when the user specifies <code>buffer_size</code> (<code>NOT</code> <code>NULL</code>).</p>
</li>
<li>
<p><code>NULL</code> is expected to be the usual choice. The default is 20,000 for backwards compatibility with earlier database versions that did not support unlimited buffering.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67319" class="refsect2"><a id="BABGBACJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref6683"></a>GET_LINE Procedure</h3>
<p>This procedure retrieves a single line of buffered information.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6684"></a>Syntax</p>
<pre>
DBMS_OUTPUT.GET_LINE (
   line    OUT VARCHAR2,
   status  OUT INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6685"></a>Parameters</p>
<div id="ARPLS67320" class="tblformal">
<p class="titleintable"><a id="sthref6686"></a><a id="sthref6687"></a>Table 100-4 GET_LINE Procedure Parameters</p>
<table class="cellalignment1229" title="GET_LINE Procedure Parameters " summary="This table describes Parameters used by the DBMS_OUTPUT.GET_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Parameter</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>line</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>Returns a single line of buffered information, excluding a final newline character. You should declare the actual for this parameter as <code>VARCHAR2 (32767)</code> to avoid the risk of "<code>ORA-06502</code>: PL/SQL: numeric or value error: character string buffer too small".</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>status</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>If the call completes successfully, then the status returns as 0. If there are no more lines in the buffer, then the status is 1.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6688"></a>Usage Notes</p>
<ul>
<li>
<p>You can choose to retrieve from the buffer a single line or an array of lines. Call the <code>GET_LINE</code> procedure to retrieve a single line of buffered information. To reduce the number of calls to the server, call the <code>GET_LINES</code> procedure to retrieve an array of lines from the buffer.</p>
</li>
<li>
<p>You can choose to automatically display this information if you are using SQL*Plus by using the special <code>SET</code> <code>SERVEROUTPUT</code> <code>ON</code> command.</p>
</li>
<li>
<p>After calling <code>GET_LINE</code> or <code>GET_LINES</code>, any lines not retrieved before the next call to <code>PUT</code>, <code>PUT_LINE</code>, or <code>NEW_LINE</code> are discarded to avoid confusing them with the next message.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67321" class="refsect2"><a id="i1000253"></a>
<hr />
<h3 class="refsect2"><a id="sthref6689"></a>GET_LINES Procedure</h3>
<p>This procedure retrieves an array of lines from the buffer.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6690"></a>Syntax</p>
<pre>
DBMS_OUTPUT.GET_LINES (
   lines       OUT     CHARARR,
   numlines    IN OUT  INTEGER);

DBMS_OUTPUT.GET_LINES (
   lines       OUT     DBMSOUTPUT_LINESARRAY,
   numlines    IN OUT INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6691"></a>Parameters</p>
<div id="ARPLS67322" class="tblformal">
<p class="titleintable"><a id="sthref6692"></a><a id="sthref6693"></a>Table 100-5 GET_LINES Procedure Parameters</p>
<table class="cellalignment1229" title="GET_LINES Procedure Parameters " summary="This table describes Parameters used by the DBMS_OUTPUT.GET_LINES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Parameter</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><code>lines</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>Returns an array of lines of buffered information. The maximum length of each line in the array is 32767 bytes. It is recommended that you use the <code>VARRAY</code> overload version in a 3GL host program to execute the procedure from a PL/SQL anonymous block.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><code>numlines</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p>Number of lines you want to retrieve from the buffer.</p>
<p>After retrieving the specified number of lines, the procedure returns the number of lines actually retrieved. If this number is less than the number of lines requested, then there are no more lines in the buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6694"></a>Usage Notes</p>
<ul>
<li>
<p>You can choose to retrieve from the buffer a single line or an array of lines. Call the <code>GET_LINE</code> procedure to retrieve a single line of buffered information. To reduce the number of calls to the server, call the <code>GET_LINES</code> procedure to retrieve an array of lines from the buffer.</p>
</li>
<li>
<p>You can choose to automatically display this information if you are using SQL*Plus by using the special <code>SET</code> <code>SERVEROUTPUT</code> <code>ON</code> command.</p>
</li>
<li>
<p>After calling <code>GET_LINE</code> or <code>GET_LINES</code>, any lines not retrieved before the next call to <code>PUT</code>, <code>PUT_LINE</code>, or <code>NEW_LINE</code> are discarded to avoid confusing them with the next message.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67323" class="refsect2"><a id="i1000062"></a>
<hr />
<h3 class="refsect2"><a id="sthref6695"></a>NEW_LINE Procedure</h3>
<p>This procedure puts an end-of-line marker. The <a href="#BABGBACJ">GET_LINE Procedure</a> and the <a href="#i1000253">GET_LINES Procedure</a> return "lines" as delimited by "newlines". Every call to the <a href="#i1000105">PUT_LINE Procedure</a> or <a href="#i1000062">NEW_LINE Procedure</a> generates a line that is returned by <code>GET_LINE</code>(<code>S</code>).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6696"></a>Syntax</p>
<pre>
DBMS_OUTPUT.NEW_LINE;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67324" class="refsect2"><a id="BABGHBIA"></a>
<hr />
<h3 class="refsect2"><a id="sthref6697"></a>PUT Procedure</h3>
<p>This procedure places a partial line in the buffer.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>PUT</code> procedure that takes a <code>NUMBER</code> is obsolete and, while currently supported, is included in this release for legacy reasons only.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6698"></a>Syntax</p>
<pre>
DBMS_OUTPUT.PUT (
    item IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6699"></a>Parameters</p>
<div id="ARPLS67325" class="tblformal">
<p class="titleintable"><a id="sthref6700"></a><a id="sthref6701"></a>Table 100-6 PUT Procedure Parameters</p>
<table class="cellalignment1229" title="PUT Procedure Parameters " summary="This table describes Parameters used by the DBMS_OUTPUT.PUT and PUT_LINE subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Parameter</th>
<th class="cellalignment1227" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>item</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p>Item to buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6702"></a>Exceptions</p>
<div id="ARPLS67326" class="tblformal">
<p class="titleintable"><a id="sthref6703"></a><a id="sthref6704"></a>Table 100-7 PUT Procedure Exceptions</p>
<table class="cellalignment1229" title="PUT Procedure Exceptions " summary="This table describes the Exceptions raised by the PUT and PUT_LINE subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Error</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>ORA-20000, ORU-10027:</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>Buffer overflow, limit of &lt;<code>buf_limit</code>&gt; bytes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>ORA-20000, ORU-10028:</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>Line length overflow, limit of 32767 bytes for each line.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6705"></a>Usage Notes</p>
<ul>
<li>
<p>You can build a line of information piece by piece by making multiple calls to <code>PUT</code>, or place an entire line of information into the buffer by calling <code>PUT_LINE</code>.</p>
</li>
<li>
<p>When you call <code>PUT_LINE</code> the item you specify is automatically followed by an end-of-line marker. If you make calls to <code>PUT</code> to build a line, then you must add your own end-of-line marker by calling <code>NEW_LINE</code>. <code>GET_LINE</code> and <code>GET_LINES</code> do not return lines that have not been terminated with a newline character.</p>
</li>
<li>
<p>If your lines exceed the line limit, you receive an error message.</p>
</li>
<li>
<p>Output that you create using <code>PUT</code> or <code>PUT_LINE</code> is buffered. The output cannot be retrieved until the PL/SQL program unit from which it was buffered returns to its caller.</p>
<p>For example, SQL*Plus does not display <code>DBMS_OUTPUT</code> messages until the PL/SQL program completes. There is no mechanism for flushing the <code>DBMS_OUTPUT</code> buffers within the PL/SQL program.</p>
<pre>
SQL&gt; SET SERVEROUTPUT ON
SQL&gt; BEGIN
  2  DBMS_OUTPUT.PUT_LINE ('hello');
  3  DBMS_LOCK.SLEEP (10);
  4  END;
</pre></li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS67327" class="refsect2"><a id="i1000105"></a>
<hr />
<h3 class="refsect2"><a id="sthref6706"></a>PUT_LINE Procedure</h3>
<p>This procedure places a line in the buffer.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>PUT_LINE</code> procedure that takes a <code>NUMBER</code> is obsolete and, while currently supported, is included in this release for legacy reasons only.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6707"></a>Syntax</p>
<pre>
DBMS_OUTPUT.PUT_LINE (
   item IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6708"></a>Parameters</p>
<div id="ARPLS67328" class="tblformal">
<p class="titleintable"><a id="sthref6709"></a><a id="sthref6710"></a>Table 100-8 PUT_LINE Procedure Parameters</p>
<table class="cellalignment1229" title="PUT_LINE Procedure Parameters " summary="This table describes Parameters used by the DBMS_OUTPUT.PUT and PUT_LINE subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Parameter</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>item</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>Item to buffer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6711"></a>Exceptions</p>
<div id="ARPLS67329" class="tblformal">
<p class="titleintable"><a id="sthref6712"></a><a id="sthref6713"></a>Table 100-9 PUT_LINE Procedure Exceptions</p>
<table class="cellalignment1229" title="PUT_LINE Procedure Exceptions " summary="This table describes the Exceptions raised by the PUT and PUT_LINE subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Error</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>ORA-20000, ORU-10027:</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>Buffer overflow, limit of &lt;<code>buf_limit</code>&gt; bytes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>ORA-20000, ORU-10028:</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p>Line length overflow, limit of 32767 bytes for each line.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref6714"></a>Usage Notes</p>
<ul>
<li>
<p>You can build a line of information piece by piece by making multiple calls to <code>PUT</code>, or place an entire line of information into the buffer by calling <code>PUT_LINE</code>.</p>
</li>
<li>
<p>When you call <code>PUT_LINE</code> the item you specify is automatically followed by an end-of-line marker. If you make calls to <code>PUT</code> to build a line, then you must add your own end-of-line marker by calling <code>NEW_LINE</code>. <code>GET_LINE</code> and <code>GET_LINES</code> do not return lines that have not been terminated with a newline character.</p>
</li>
<li>
<p>If your lines exceeds the line limit, you receive an error message.</p>
</li>
<li>
<p>Output that you create using <code>PUT</code> or <code>PUT_LINE</code> is buffered. The output cannot be retrieved until the PL/SQL program unit from which it was buffered returns to its caller.</p>
<p>For example, SQL*Plus does not display <code>DBMS_OUTPUT</code> messages until the PL/SQL program completes. There is no mechanism for flushing the <code>DBMS_OUTPUT</code> buffers within the PL/SQL program. For example:</p>
<pre>
SQL&gt; SET SERVEROUTPUT ON
SQL&gt; BEGIN
   2 DBMS_OUTPUT.PUT_LINE ('hello');
   3 DBMS_LOCK.SLEEP (10);
   4 END;
</pre></li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_outln.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_parallel_ex.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
