<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_RLMGR</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:23Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_resuma.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_rls.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">128/265</span> <!-- End Header -->
<div id="ARPLS67684" class="chapter"><a id="CACJJIIE"></a>
<h1 class="chapter"><span class="secnum">124</span> DBMS_RLMGR</h1>
<div class="infoboxnotewarn">
<p class="notep1">Note:</p>
<p class="warnsp">This functionality is deprecated with Oracle Database Release 11.2 and obsoleted with Release 12.1. For details regarding obsolescence, seeMy Oracle Support Note <a href="https://support.oracle.com/CSP/ui/flash.html#tab=KBHome%28page=KBHome&amp;id=%28%29%29,%28page=KBNavigator&amp;id=%28from=BOOKMARK&amp;bmDocType=DESUPPORT&amp;bmDocID=1244535.1&amp;bmDocDsrc=KB&amp;viewingMode=1143&amp;bmDocTitle=Obsolescence%20Notice:%20Rules%20Manager%20Feature%20of%20Oracle%20Database%29%29">ID 1244535.1</a></p>
</div>
<p>The <code>DBMS_RLMGR</code> package<a id="sthref7554"></a><a id="sthref7555"></a> contains various procedures to create and manage rules and rule sessions by the Rules Manager.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink EXPRN" href="../e14919/toc.htm"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for more information.</div>
<p>This chapter contains the following topic:</p>
<ul>
<li>
<p><a href="#BABDBACE">Using DBMS_RLMGR</a></p>
</li>
<li>
<p><a href="#BABJIGEH">Summary of Rules Manager Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABDBACE"></a>
<hr />
<div id="ARPLS73358" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using DBMS_RLMGR</h2>
<p>This section contains topics that relate to using the Rules Manager <code>DBMS_RLMGR</code> package.</p>
<ul>
<li>
<p><a href="#BABEBDGH">Security Model</a></p>
</li>
</ul>
<div id="ARPLS73359" class="refsect2"><a id="BABEBDGH"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>The Oracle Database installation runs the <code>catrul.sql</code> script to load the <code>DBMS_RLMGR</code> package and create the required Rules Manager schema objects in the <code>EXFSYS</code> Schema.</p>
<p><code>DBMS_RLMGR</code> is an <code>EXFSYS</code>-owned package compiled with <code>AUTHID CURRENT_USER</code>. Any <code>DBMS_RLMGR</code> subprogram called from an anonymous PL/SQL block is run using the privileges of the current user.</p>
<p>A user must be granted <code>CONNECT</code> and <code>RESOURCE</code> roles, <code>EXECUTE</code> privilege on <code>DBMS_LOCK</code>, and <code>CREATE VIEW</code> privilege to use this package.</p>
<p>For successful creation of a rule class, you must have sufficient privileges to create views, object types, tables, packages, and procedures.</p>
<p>The owner of the rule class always has privileges to drop a rule class, process rules in a rule class, add rules and delete rules from a rules class. Only the owner of the rule class can drop a rule class and this privilege cannot be granted to another user. Rule class privileges cannot be revoked from the owner of the rule class.</p>
<p>A user who is not the owner of the rule class must be granted appropriate types of privileges to perform certain tasks. The types of privileges that can be granted are:</p>
<ul>
<li>
<p><code>PROCESS RULES</code>: A user with <code>PROCESS RULES</code> privilege on a rule class can process the rules in the rule class using the <code>PROCESS_RULES</code> procedure or the <code>ADD_EVENT</code> procedure. Also, the user with this privilege can select from the corresponding rule class results view.</p>
</li>
<li>
<p><code>ADD RULE</code>: A user with <code>ADD RULE</code> privilege on a rule class can add rules to a rule class. Alternatively, the owner of the rule class can grant the <code>INSERT</code> privilege on one rule class table to other users.</p>
</li>
<li>
<p><code>DELETE RULE</code>: A user with <code>DELETE RULE</code> privilege on a rule class can delete rules from a rule class. Alternatively, the owner of the rule class can grant the <code>DELETE</code> privilege on one rule class table to other users.</p>
</li>
<li>
<p><code>ALL</code>: Granting the <code>ALL</code> privilege on a rule class is equivalent to granting all the above privileges on the rule class to the user.</p>
</li>
</ul>
<p>A user must have the <code>EXECUTE</code> privilege on the primitive event types associated with a rule class before that user can make use of the corresponding rule class results view.</p>
<p>The owner of the rule class can add the rules using <code>SQL INSERT</code> statement on the rule class table (that shares the same name as the rule class). Note that the owner of the rule class can also grant direct DML privileges on the rule class table to other users. When you use the schema extended name for the rule class, the user must have the <code>ADD RULE</code> privilege on the rule class to add a rule to the rule class.</p>
<p>The owner of the rule class can use an <code>SQL DELETE</code> statement on one rule class table to delete a rule. When you use the schema extended name for the rule class, the user must have the <code>DELETE RULE</code> privilege on the rule class.</p>
<p>When the schema extended name is used for the rule class, the user must have <code>PROCESS RULES</code> privilege on the rule class.</p>
<p>A user must have <code>EXECUTE</code> privilege on the <code>CTX_DDL</code> package for successful synchronization of the text indexes using the <code>DBMS_RLMGR.SYNC_TEXT_INDEXES</code> procedure.</p>
<p>The <code>USER_RLMGR_PRIVILEGES</code> view lists privileges of the current user for the rule classes.</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="BABJIGEH"></a>
<hr />
<div id="ARPLS67685" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Summary of Rules Manager Subprograms</h2>
<p><a href="#CACDGIHI">Table 124-1</a> describes the subprograms in the <code>DBMS_RLMGR</code> package.</p>
<p>All the values and names passed to the procedures defined in the <code>DBMS_RLMGR</code> package are case insensitive unless otherwise mentioned. To preserve the case, enclose the values with double quotation marks.</p>
<div id="ARPLS67686" class="tblformal">
<p class="titleintable"><a id="sthref7556"></a><a id="CACDGIHI"></a>Table 124-1 DBMS_RLMGR Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_RLMGR Package Subprograms" summary="This two column table (read from right to left) lists the name of the subprograms in alphabetical order followed by a brief description of each procedure." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#CACCEDFA">ADD_ELEMENTARY_ATTRIBUTE Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p>Adds the specified attribute to the event structure and the Expression Filter attribute set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#BJFEDEIF">ADD_EVENT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p>Adds an event to a rule class in an active session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#BABICCCF">ADD_FUNCTIONS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t4 r1c2-t4">
<p>Adds a Function, a Type, or a Package to the approved list of functions with an event structure and to the Expression Filter attribute set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#BJFGFJDA">ADD_RULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t4 r1c2-t4">
<p>Adds a rule to the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CACCAFFJ">CONDITION_REF Function</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t4 r1c2-t4">
<p>Retrieves the primitive rule condition reference from a rule condition for composite events</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#BJFBJCCB">CONSUME_EVENT Function</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t4 r1c2-t4">
<p>Consumes an event using its identifiers and prepares the corresponding rule for action execution</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t4" headers="r1c1-t4">
<p><a href="#BJFCFIAF">CONSUME_PRIM_EVENTS Function</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t4 r1c2-t4">
<p>Consumes one or more primitive events with all or none semantics</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t4" headers="r1c1-t4">
<p><a href="#CACDIBBC">CREATE_CONDITIONS_TABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t4 r1c2-t4">
<p>Creates a repository for the primitive rule conditions that can be shared by multiple rules from the same or different rule classes</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t4" headers="r1c1-t4">
<p><a href="#BJFCIAAB">CREATE_EVENT_STRUCT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t4 r1c2-t4">
<p>Creates an event structure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t4" headers="r1c1-t4">
<p><a href="#CACIEIHE">CREATE_EXPFIL_INDEXES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t4 r1c2-t4">
<p>Creates expression filter indexes for the rule class if the default indexes have been dropped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t4" headers="r1c1-t4">
<p><a href="#CACGDBJG">CREATE_INTERFACE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t4 r1c2-t4">
<p>Creates a rule class interface package to directly operate on the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t4" headers="r1c1-t4">
<p><a href="#BJFGGHAE">CREATE_RULE_CLASS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t4 r1c2-t4">
<p>Creates a rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t4" headers="r1c1-t4">
<p><a href="#BJFDEHHE">DELETE_RULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t4 r1c2-t4">
<p>Deletes a rule from a rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t4" headers="r1c1-t4">
<p><a href="#CACCJEFI">DROP_CONDITIONS_TABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t4 r1c2-t4">
<p>Drops the conditions table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t4" headers="r1c1-t4">
<p><a href="#BJFCECIC">DROP_EVENT_STRUCT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t4 r1c2-t4">
<p>Drops an event structure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t4" headers="r1c1-t4">
<p><a href="#CACHCIHB">DROP_EXPFIL_INDEXES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t4 r1c2-t4">
<p>Drops Expression Filter indexes for the rule conditions</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t4" headers="r1c1-t4">
<p><a href="#CACFCIHJ">DROP_INTERFACE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t4 r1c2-t4">
<p>Drops the rule class interface package</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t4" headers="r1c1-t4">
<p><a href="#BJFEGEGH">DROP_RULE_CLASS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t4 r1c2-t4">
<p>Drops a rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t4" headers="r1c1-t4">
<p><a href="#CACBAJIJ">EXTEND_EVENT_STRUCT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t4 r1c2-t4">
<p>Adds an attribute to the primitive event structure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t4" headers="r1c1-t4">
<p><a href="#CACJFGCB">GET_AGGREGATE_VALUE Function</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t4 r1c2-t4">
<p>Retrieves the aggregate value computed for a collection event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t4" headers="r1c1-t4">
<p><a href="#BJFJIIGH">GRANT_PRIVILEGE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t4 r1c2-t4">
<p>Grants a privilege on a rule class to another user</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t4" headers="r1c1-t4">
<p><a href="#BJFDHAEI">PROCESS_RULES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t4 r1c2-t4">
<p>Process the rules for a given event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t4" headers="r1c1-t4">
<p><a href="#CACEIGIB">PURGE_EVENTS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t4 r1c2-t4">
<p>Resets the rule class by removing all the events associated with the rule class and purging any state information pertaining to rules matching some events</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t4" headers="r1c1-t4">
<p><a href="#BJFHHEAH">RESET_SESSION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t4 r1c2-t4">
<p>Starts a new rule session within a database session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t4" headers="r1c1-t4">
<p><a href="#BJFEFFFH">REVOKE_PRIVILEGE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t4 r1c2-t4">
<p>Revokes a privilege on a rule class from a user</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t4" headers="r1c1-t4">
<p><a href="#CACHGHBA">SYNC_TEXT_INDEXES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t4 r1c2-t4">
<p>Synchronizes the indexes defined to process the predicates involving the <code>CONTAINS</code> operator in rule conditions</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS176" class="refsect2"><a id="CACCEDFA"></a>
<hr />
<h3 class="refsect2"><a id="sthref7557"></a><a id="sthref7558"></a>ADD_ELEMENTARY_ATTRIBUTE Procedures</h3>
<p>This procedure adds the specified attribute to an event structure, which is also the Expression Filter attribute set. The procedure is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7559"></a>Syntax</p>
<p>Adds the specified elementary attribute to the attribute set:</p>
<pre>
DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
              event_struct   IN   VARCHAR2,
              attr_name      IN   VARCHAR2,
              attr_type      IN   VARCHAR2,
              attr_defvl     IN   VARCHAR2 default NULL);
 
</pre>
<p>Identifies the elementary attributes that are table aliases and adds them to the event structure:</p>
<pre>
DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
              event_struct   IN   VARCHAR2,
              attr_name      IN   VARCHAR2,
              tab_alias      IN   rlm$table_alias);
</pre>
<p>Allows addition of text attributes to the attribute set:</p>
<pre>
DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
              event_struct   IN   VARCHAR2,
              attr_name      IN   VARCHAR2,
              attr_type      IN   VARCHAR2,
              text_pref      IN   EXF$TEXT);
 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7560"></a>Parameters</p>
<div id="ARPLS67687" class="tblformal">
<p class="titleintable"><a id="sthref7561"></a><a id="sthref7562"></a>Table 124-2 ADD_ELEMENTARY_ATTRIBUTE Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_ELEMENTARY_ATTRIBUTE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Parameter</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>Name of the event structure or attribute set to which this attribute is added</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><code>attr_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>Name of the elementary attribute to be added. No two attributes in a set can have the same name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><code>attr_type</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>Datatype of the attribute. This argument accepts any standard SQL datatype or the name of an object type that is accessible to the current user.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t5" headers="r1c1-t5">
<p><code>tab_alias</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t5 r1c2-t5">
<p>The type that identifies the database table to which the attribute is aliased</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t5" headers="r1c1-t5">
<p><code>attr_defv1</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t5 r1c2-t5">
<p>Default value for the elementary attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t5" headers="r1c1-t5">
<p><code>text_pref</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t5 r1c2-t5">
<p>Text preferences such as LEXER and WORDLIST specification</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7563"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure adds an elementary attribute to an event structure. The event structure is internally managed as the Expression Filter attribute set. If the event structure was originally created from an existing object type, then additional attributes cannot be added.</p>
<p>Elementary attributes cannot be added to an attribute set that is already assigned to a column storing expressions, which is equivalent to an event structure that is used for a rule class.</p>
</li>
<li>
<p>One or more, or all elementary attributes in an attribute set can be table aliases. If an elementary attribute is a table alias, then the value assigned to the elementary attribute is a <code>ROWID</code> from the corresponding table. An attribute set with one or more table alias attributes cannot be created from an existing object type. For more information about table aliases, see <a class="olink EXPRN111" href="../../appdev.112/e14919/exprn_app_a.htm#EXPRN111"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a>.</p>
</li>
<li>
<p>You cannot add elementary attributes to an attribute set that is already assigned to a column storing expressions.</p>
</li>
<li>
<p>See the section on defining attribute sets in <a class="olink EXPRN011" href="../../appdev.112/e14919/exprn_expconcepts.htm#EXPRN011"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for more information about adding elementary attributes.</p>
</li>
<li>
<p>Related views: <code>USER_EXPFIL_ATTRIBUTE_SETS</code> and <code>USER_EXPFIL_ATTRIBUTES</code>.</p>
</li>
<li>
<p>This procedure with a text preference bound to the <code>text_pref</code> argument creates a text attribute in the attribute set. The data type for such an attribute should be a <code>VARCHAR2</code> or a <code>CLOB</code>. The preferences specified for a text attribute are used to process the predicates involving <code>CONTAINS</code> operator on the attributes. The valid preferences are those that are valid in the <code>PARAMETERS</code> clause of <code>CTXRULE</code> index creation. See <a class="olink CCAPP" href="../../text.112/e24435/toc.htm"><span class="italic">Oracle Text Application Developer's Guide</span></a> for the syntax.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7564"></a>Examples</p>
<p>The following command adds two elementary attributes to an attribute set:</p>
<pre>
BEGIN
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
                       EVENT_STRUCT =&gt; 'HRAttrSet',
                       ATTR_NAME =&gt; 'HRREP',
                       attr_type =&gt; 'VARCHAR2'); 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
                       EVENT_STRUCT =&gt; 'HRAttrSet',
                       ATTR_NAME =&gt; 'DEPT',
                       TAB_ALIAS =&gt; RLM$TABLE_ALIAS('DEPT')); 
END;
</pre>
<p>The following commands create an attribute set with each hotel reservation including some additional information, described as the <code>AddlInfo</code> attribute of <code>CLOB</code> data type. Rule conditions specified for this event structure can include text predicates on this attribute.</p>
<pre>
BEGIN
  DBMS_RLMGR.CREATE_EVENT_STRUCT (EVENT_STRUCT =&gt; 'AddFlight'); 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
                       EVENT_STRUCT =&gt; 'AddHotel',
                       ATTR_NAME =&gt; 'CustId',
                       ATTR_TYPE =&gt; 'NUMBER'); 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
                       EVENT_STRUCT =&gt; 'AddHotel',
                       ATTR_NAME =&gt; 'Type',
                       ATTR_TYPE =&gt; 'VARCHAR2(20)'); 
  . . . 
  DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE (
                       EVENT_STRUCT =&gt; 'AddHotel',
                       ATTR_NAME =&gt; 'AddlInfo',
                       ATTR_TYPE =&gt; 'CLOB',
                       TEXT_PREF =&gt; EXF$TEXT('LEXER hotelreserv_lexer')); 
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS177" class="refsect2"><a id="BJFEDEIF"></a>
<hr />
<h3 class="refsect2"><a id="sthref7565"></a><a id="sthref7566"></a>ADD_EVENT Procedure</h3>
<p>This procedure adds a primitive event to a rule class in an active rule session. The procedure is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7567"></a>Syntax</p>
<p>Adds a string representation of the primitive event instance to a rule class:</p>
<pre>
DBMS_RLMGR.ADD_EVENT (
   rule_class      IN VARCHAR2,
   event_inst      IN VARCHAR2,
   event_type      IN VARCHAR2 default null);
</pre>
<p>Adds an AnyData representation of the primitive event instance to a rule class:</p>
<pre>
DBMS_RLMGR.ADD_EVENT (
   rule_class      IN VARCHAR2,
   event_inst      IN sys.AnyData);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7568"></a>Parameters</p>
<div id="ARPLS67688" class="tblformal">
<p class="titleintable"><a id="sthref7569"></a><a id="sthref7570"></a>Table 124-3 ADD_EVENT Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_EVENT Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.ADD_EVENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Parameter</th>
<th class="cellalignment1227" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><code>event_inst</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p>String or AnyData representation of the event instance being added to the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><code>event_type</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p>Type of event instance assigned to the <code>event_inst</code> argument when the string representation of the event instance is used for a rule class configured for composite events</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7571"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure is used to add a primitive or a simple event to a rule class within an active rule session. By default, a rule session is the same as the database session. Optionally, multiple (sequential) rule sessions can be started within a database session by using the <code>RESET_SESSION</code> or <code>PROCESS_RULES</code> procedures.</p>
</li>
<li>
<p>When the rule class is configured for simple events (consisting of only one primitive event structure), the <code>event_type</code> argument for the <code>ADD_EVENT</code> procedure can be ignored. Also, when the AnyData format of the event instance is passed, the event type information is embedded in the AnyData instance. In all other cases, the name of the primitive event structure being added to the rule class should be assigned to the <code>event_type</code> argument.</p>
</li>
<li>
<p>For a valid event instance, the <code>ADD_EVENT</code> procedure processes the rules in the rule class and captures the results in the rule class results view (configured at the time of rule class creation). These results are preserved until the end of the rule session.When schema extended name is used for the rule class, you should have <code>PROCESS</code> <code>RULES</code> privilege on the rule class. See the <a href="#BJFJIIGH">GRANT_PRIVILEGE Procedure</a> for additional information. The value specified for the <code>event_type</code> argument is always resolved in the rule class owner's schema and should not use schema extended names. When a composite event structure is configured with a table alias primitive event type, the name of the corresponding table should be assigned to the <code>event_type</code> argument.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7572"></a>Examples</p>
<p>The following commands add two events to the <code>CompTravelPromo</code> rule class that is configured for two types of primitive events (<code>AddFlight</code> and <code>AddRentalCar</code>).</p>
<pre>
BEGIN
 DBMS_RLMGR.ADD_EVENT(rule_class =&gt; 'CompTravelPromo',
                     event_inst =&gt;
                        AddFlight.getVarchar(987, 'Abcair', 'Boston',
                                         'Orlando', '01-APR-2003', '08-APR-2003'),
                     event_type =&gt; 'AddFlight');

DBMS_RLMGR.ADD_EVENT(rule_class =&gt; 'Scott.CompTravelPromo',
                     event_inst =&gt;
                        AnyData.convertObject(
                                        AddRentalCar(987, 'Luxury', '03-APR-2003',
                                                     '08-APR-2003', NULL)));
END;/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS178" class="refsect2"><a id="BABICCCF"></a>
<hr />
<h3 class="refsect2"><a id="sthref7573"></a><a id="sthref7574"></a><a id="sthref7575"></a>ADD_FUNCTIONS Procedure</h3>
<p>This procedure adds a user-defined function, package, or type representing a set of functions to the event structure, which is also the Expression Filter attribute set.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7576"></a>Syntax</p>
<pre>
DBMS_RLMGR.ADD_FUNCTIONS (
   event_struct   IN   VARCHAR2,
   funcs_name     IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7577"></a>Parameters</p>
<div id="ARPLS67689" class="tblformal">
<p class="titleintable"><a id="sthref7578"></a><a id="sthref7579"></a>Table 124-4 ADD_FUNCTIONS Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_FUNCTIONS Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.ADD_FUNCTIONS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Parameter</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Name of the event structure to which the functions are added</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><code>funcs_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>Name of a function, package, or type (representing a function set) or its synonyms</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7580"></a>Usage Notes</p>
<ul>
<li>
<p>By default, an attribute set implicitly allows references to all Oracle Database-supplied SQL functions for use in the rule conditions. If the expression set refers to a user-defined function, the expression set must be explicitly added to the attribute set.</p>
</li>
<li>
<p>The <code>ADD_FUNCTIONS</code> procedure adds a user-defined function or a package (or type) representing a set of functions to the attribute set. Any new or modified expressions are validated using this list.</p>
</li>
<li>
<p>You can specify the function or the package name with a schema extension. If you specify a function name without a schema extension, only such references in the rule condition are considered valid. You can restrict the conditional expression to use a synonym to a function or a package by adding the corresponding synonym to the attribute set. This preserves the portability of the expression set to other schemas.</p>
</li>
<li>
<p>See the section on defining attribute sets in <a class="olink EXPRN011" href="../../appdev.112/e14919/exprn_expconcepts.htm#EXPRN011"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for more information about adding functions to an attribute set.</p>
</li>
<li>
<p>Related views: <a class="olink EXPRN056" href="../../appdev.112/e14919/exprn_views.htm#EXPRN056"><code>USER_EXPFIL_ATTRIBUTE_SETS</code></a> and <a class="olink EXPRN054" href="../../appdev.112/e14919/exprn_views.htm#EXPRN054"><code>USER_EXPFIL_ASET_FUNCTIONS</code></a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7581"></a>Examples</p>
<p>The following command adds two functions to the attribute set:</p>
<pre>
BEGIN 
  DBMS_RLMGR.ADD_FUNCTIONS (attr_set   =&gt; 'Car4Sale', 
                             funcs_name =&gt; 'HorsePower');
  DBMS_RLMGR.ADD_FUNCTIONS (attr_set   =&gt; 'Car4Sale', 
                             funcs_name =&gt; 'Scott.CrashTestRating');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS179" class="refsect2"><a id="BJFGFJDA"></a>
<hr />
<h3 class="refsect2"><a id="sthref7582"></a><a id="sthref7583"></a>ADD_RULE Procedure</h3>
<p>This procedure adds new rules to a rule class.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7584"></a>Syntax</p>
<pre>
DBMS_RLMGR.ADD_RULE (
   rule_class      IN  VARCHAR2,
   rule_id         IN  VARCHAR2,
   rule_cond       IN  VARCHAR2,
   actprf_nml      IN  VARCHAR2 DEFAULT NULL,
   actprf_vall     IN  VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7585"></a>Parameters</p>
<div id="ARPLS67690" class="tblformal">
<p class="titleintable"><a id="sthref7586"></a><a id="sthref7587"></a>Table 124-5 ADD_RULE Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_RULE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.ADD_ELEMENTARY_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Parameter</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>rule_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>Unique identifier for the rule within the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t8" headers="r1c1-t8">
<p><code>rule_cond</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t8 r1c2-t8">
<p>The condition for the rule. The condition uses the variables defined in the rule class's event structure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t8" headers="r1c1-t8">
<p><code>actprf_nml</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t8 r1c2-t8">
<p>The list of action preference names for which values will be assigned through the <code>actprf_vall</code> argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t8" headers="r1c1-t8">
<p><code>actprf_vall</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t8 r1c2-t8">
<p>The list of action preference values for the names list assigned to the <code>actprf_nml</code> argument</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7588"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure is used to add new rules to the rule class. The rule condition passed to the <code>ADD_RULE</code> procedure is validated using the event structure associated with the rule class. The action preferences names list is a subset of action preference categories configured during rule class creation.</p>
</li>
<li>
<p>When schema extended name is used for the rule class, you should have <code>ADD</code> <code>RULE</code> privilege on the rule class. See the <a href="#BJFJIIGH">GRANT_PRIVILEGE Procedure</a> for more information.</p>
</li>
<li>
<p>Alternately, the owner of the rule class can add the rules using SQL <code>INSERT</code> statement on the rule class table (that shares the same name as the rule class). Note that the owner of the rule class can also grant direct DML privileges on the rule class table to other users.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The <code>AUTOCOMMIT</code> property of the rule class is ignored if the new rules are added using the SQL <code>INSERT</code> statement instead of the <code>ADD_RULE</code> procedure.</div>
</li>
<li>
<p>See the <a href="#BJFGGHAE">CREATE_RULE_CLASS Procedure</a> procedure for the structure of the rule class table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7589"></a>Examples</p>
<p>The following command adds a rule to the rule class.</p>
<pre>
BEGIN
DBMS_RLMGR.ADD_RULE (
           rule_class =&gt; 'CompTravelPromo',
           rule_id =&gt; 'AB_AV_FL',
           rule_cond =&gt;
             '&lt;condition&gt;
                 &lt;and join="Flt.CustId = Car.CustId"&gt;
                    &lt;object name="Flt"&gt;
                      Airline=''Abcair'' and ToCity=''Orlando''
                    &lt;/object&gt;
                    &lt;object name="Car"&gt;
                      CarType = ''Luxury''
                    &lt;/object&gt;
                  &lt;/and&gt;
               &lt;/condition&gt;' ,
             actprf_nml =&gt; 'PromoType, OfferedBy',
             actprf_vall =&gt; '''RentalCar'', ''Acar''');
END;
</pre>
<p>With proper privileges, the following SQL <code>INSERT</code> statement can be used to add the rule to the rule class.</p>
<pre>
INSERT INTO CompTravelPromo (rlm$ruleid, rlm$rulecond, PromoType, OfferedBy)
  VALUES ('AB_AV_FL',
          '&lt;condition&gt;
             &lt;and join="Flt.CustId = Car.CustId"&gt;
               &lt;object name="Flt"&gt;
                   Airline=''Abcair'' and ToCity=''Orlando''
               &lt;/object&gt;
               &lt;object name="Car"&gt;
                   CarType = ''Luxury''
               &lt;/object&gt;
             &lt;/and&gt;
           &lt;/condition&gt;',
          'RentalCar','Acar');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS286" class="refsect2"><a id="CACCAFFJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref7590"></a><a id="sthref7591"></a>CONDITION_REF Function</h3>
<p>This function retrieves the primitive rule condition reference from a rule condition for composite events.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7592"></a>Syntax</p>
<pre>
DBMS_RLMGR.CONDITION_REF (
     rule_cond IN   VARCHAR2,
     eventnm   IN   VARCHAR2) 
  RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7593"></a>Parameters</p>
<div id="ARPLS67691" class="tblformal">
<p class="titleintable"><a id="sthref7594"></a><a id="sthref7595"></a>Table 124-6 CONDITION_REF Function Parameters</p>
<table class="cellalignment1229" title="CONDITION_REF Function Parameters" summary="This table describes the parameters of the DBMS_RLMGR.CONDITION_REF subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t10">Parameter</th>
<th class="cellalignment1227" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t10" headers="r1c1-t10">
<p><code>rule_cond</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t10 r1c2-t10">
<p>Rule condition in XML format</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t10" headers="r1c1-t10">
<p><code>eventnm</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t10 r1c2-t10">
<p>Name of the event for which the reference should be retrieved</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7596"></a>Usage Notes</p>
<ul>
<li>
<p>For a rule condition in XML format, with a root <code>&lt;condition&gt;</code> element, this function retrieves the reference to a shared conditional expression on a particular primitive event.</p>
</li>
<li>
<p>Use this function in a query operating on the rule class table to find all the references to a given primitive rule condition. To speed-up such queries, one or more functional indexes are defined on the <code>rlm$rulecond</code> column of the rule class table using this function signature. In order to make use of the index for a lookup query, the value assigned to the <code>eventnm</code> argument should be case sensitive.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7597"></a>Examples</p>
<p>The following command joins the rule class table with the primitive conditions table to identify all the rule conditions that have references to the shareable primitive conditions (the query uses a functional index defined on the <code>rlm$rulecond</code> column). This query identifies all the rule conditions that refer to any shared conditions stored in the <code>FlightConditions</code> table.</p>
<pre>
select ctp.rlm$ruleid from CompTravelPromo ctp, FlightConditions fc
where dbms_rlmgr.condition_ref(ctp.rlm$rulecond, 'FLT') = fc.rlm$condid; 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS180" class="refsect2"><a id="BJFBJCCB"></a>
<hr />
<h3 class="refsect2"><a id="sthref7598"></a><a id="sthref7599"></a>CONSUME_EVENT Function</h3>
<p>This function consumes an event and prepares the corresponding rule for action execution. This is required only when the action (or rule execution) is carried by the user's application and not in the callback.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7600"></a>Syntax</p>
<pre>
DBMS_RLMGR.CONSUME_EVENT (
   rule_class       IN VARCHAR2,
   event_ident      IN VARCHAR2) 
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7601"></a>Parameters</p>
<div id="ARPLS67692" class="tblformal">
<p class="titleintable"><a id="sthref7602"></a><a id="sthref7603"></a>Table 124-7 CONSUME_EVENT Function Parameters</p>
<table class="cellalignment1229" title="CONSUME_EVENT Function Parameters" summary="This table describes the parameters of the DBMS_RLMGR.CONSUME_EVENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Parameter</th>
<th class="cellalignment1227" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t11" headers="r1c1-t11">
<p><code>event_ident</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c2-t11">
<p>Event identifier obtained from the corresponding rule class results view (or arguments of the action callback procedure in the case of rule class configured for <code>RULE</code> based consumption policy)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7604"></a>Returns</p>
<p>The function returns:</p>
<ul>
<li>
<p><code>1</code> -- If the event is successfully consumed.</p>
</li>
<li>
<p><code>0</code> -- If the event is expired (owing to duration policy) or consumed by another session prior to this call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7605"></a>Usage Notes</p>
<ul>
<li>
<p>When an <code>EXCLUSIVE</code> consumption policy is set for the events in a rule class, an event must be deleted from the system immediately after the rule it matched is executed (action is executed). When the rule action is carried in the rule class callback procedure by calling the <code>PROCESS_RULES</code> procedure, the rule manager automatically handles the consumption of the events. However, when you request the results from matching events with rules in a rule class results view using the <code>ADD_EVENT</code> procedure, you should take appropriate action to indicate the exact rule-event combination that is to be used for rule execution. The <code>CONSUME_EVENT</code> function performs the required housekeeping services when the unique identifier for the event used in a rule execution is passed in.</p>
</li>
<li>
<p>Because there could be a time lag between fetching the rule class matching results and the execution of the user initiated action, the application must execute the action only if the <code>CONSUME_EVENT</code> call succeeds in consuming the event. This avoids any race condition with parallel sessions trying to consume the same events. When the event is successfully consumed, this call returns <code>1</code>. In all other cases, it returns <code>0</code>. A return value of <code>0</code> implies that the event is already consumed by another session and hence it is not available for this session.</p>
</li>
<li>
<p>The <code>CONSUME_EVENT</code> function deletes the events configured with <code>EXCLUSIVE</code> consumption policy and does nothing for events configured for 4 consumption policy.</p>
</li>
<li>
<p>Unlike the <code>EXCLUSIVE</code> and <code>SHARED</code> consumption policies, which are determined at the rule class level, you use a <code>RULE</code> consumption policy to determine the consumption of an event on a rule by rule basis. That is a subset of the rules in a rule class may be configured such that when they are matched, the event is deleted from the system. At the same time the other set of rules could leave the event in the system even after executing the corresponding action. In this scenario, the action callback procedure implemented by the application developer can call <code>CONSUME_EVENT</code> function (with appropriate arguments) to conditionally consume the event for certain rules. Also see the use of <a href="#BJFCFIAF">CONSUME_PRIM_EVENTS Function</a> for rule classes configured for <code>RULE</code> consumption policy</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7606"></a>Examples</p>
<p>The following commands identify an event that is used for a rule execution and consumes it using its identifier.</p>
<pre>
var eventid VARCHAR(40);
var evtcnsmd NUMBER;

BEGIN
  SELECT rlm$eventid INTO :eventid FROM MatchingPromos WHERE rownum &lt; 2;

  -- carry the required action for a rule matched by the above event --
  :evtcnsmd := DBMS_RLMGR.CONSUME_EVENT(rule_class  =&gt; 'TravelPromotion',
                                        event_ident =&gt; :eventid);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS181" class="refsect2"><a id="BJFCFIAF"></a>
<hr />
<h3 class="refsect2"><a id="sthref7607"></a><a id="sthref7608"></a>CONSUME_PRIM_EVENTS Function</h3>
<p>This function consumes a set of primitive events with all or nothing semantics in the case of a rule class configured with <code>RULE</code> based consumption policy.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7609"></a>Syntax</p>
<pre>
DBMS_RLMGR.CONSUME_PRIM_EVENTS (
   rule_class       IN VARCHAR2,
   event_idents     IN RLM$EVENTIDS) 
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7610"></a>Parameters</p>
<div id="ARPLS67693" class="tblformal">
<p class="titleintable"><a id="sthref7611"></a><a id="sthref7612"></a>Table 124-8 CONSUME_PRIM_EVENTS Function Parameters</p>
<table class="cellalignment1229" title="CONSUME_PRIM_EVENTS Function Parameters" summary="This table describes the parameters of the DBMS_RLMGR.CONSUME_PRIM_EVENTS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Parameter</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>event_ident</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>Event identifiers obtained from the corresponding rule class results view or the arguments of the action callback procedure</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7613"></a>Returns</p>
<p>The function returns:</p>
<ul>
<li>
<p><code>1</code> -- If all the events, the identifiers for which are passed in, are successfully consumed.</p>
</li>
<li>
<p><code>0</code> -- If one or more primitive event could not be consumed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7614"></a>Usage Notes</p>
<ul>
<li>
<p>When you configure the rule class for <code>RULE</code> based consumption policy, it uses the <code>CONSUME_PRIM_EVENTS</code> function to consume one or more primitive events that constitute a composite event. This operation succeeds only when all the events passed in are still valid and are available for consumption. Any user initiated action must be implemented after checking the return value of the <code>CONSUME_PRIM_EVENTS</code> call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7615"></a>Examples</p>
<p>The following commands show the body of the action callback procedure for a rule class configured for <code>RULE</code> consumption policy. This demonstrates the use of <code>CONSUME_PRIM_EVENTS</code> function to consume the events before executing the action for the matched rules.</p>
<pre>
create or replace procedure PromoAction (
      Flt        AddFlight, 
      Flt_EvtId  ROWID,    --- rowid for the flight primitive event
      Car        AddRentalCar, 
      Car_EvtId  ROWID, 
      rlm$rule   TravelPromotions%ROWTYPE) is 
  evtcnsmd   NUMBER; 
BEGIN
  evtcnsmd := DBMS_RLMGR.CONSUME_PRIM_EVENTS(
                    rule_class   =&gt; 'TravelPromotions',
                    event_idents =&gt; RLM$EVENTIDS(Flt_EvtId, Car_EvtId));

  if (evtcnsmd = 1) then 
    -- consume operation was successful; perform the action ---
    OfferPromotion (Flt.CustId, rlm$rule.PromoType, rlm$rule.OfferedBy);
  end if;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS437" class="refsect2"><a id="CACDIBBC"></a>
<hr />
<h3 class="refsect2"><a id="sthref7616"></a><a id="sthref7617"></a>CREATE_CONDITIONS_TABLE Procedure</h3>
<p>This procedure creates a conditions table, which is a repository for the primitive rule conditions that can be shared by multiple rules from the same or different rule classes. The procedure is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7618"></a>Syntax</p>
<p>Creates a conditions table to store shareable primitive conditions defined for a primitive event.</p>
<pre>
DBMS_RLMGR.CREATE_CONDITIONS_TABLE (
     cond_table    IN  VARCHAR2,
     pevent_struct IN  VARCHAR2,
     stg_clause    IN  VARCHAR2 DEFAULT NULL);
</pre>
<p>Creates a conditions table to store shareable primitive conditions defined for a relational table identified through table aliases.</p>
<pre>
DBMS_RLMGR.CREATE_CONDITIONS_TABLE (
     cond_table    IN  VARCHAR2,
     tab_alias     IN  rlm$table_alias,
     stg_clause    IN  VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7619"></a>Parameters</p>
<div id="ARPLS67694" class="tblformal">
<p class="titleintable"><a id="sthref7620"></a><a id="sthref7621"></a>Table 124-9 CREATE_CONDITIONS_TABLE Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_CONDITIONS_TABLE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_CONDITIONS_TABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Parameter</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><code>pevent_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>Primitive event structure for which the shareable primitive rule conditions are defined</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><code>cond_table</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p>Name of the table storing the primitive rule conditions</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t13" headers="r1c1-t13">
<p><code>stg_clause</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t13 r1c2-t13">
<p>Storage clause for the conditions table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t13" headers="r1c1-t13">
<p><code>tab_alias</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t13 r1c2-t13">
<p>Type that identifies the database table for which the shareable primitive rule conditions are defined</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7622"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure creates a relational table to store the primitive rule conditions that can be shared by multiple rules. It creates the table with the user specified name and it has a <code>VARCHAR2</code> column to store the unique identifier for each primitive rule condition (<code>rlm$condid</code>), an expression data type column to store the conditional expressions (<code>rlm$condition</code>), and a <code>VARCHAR2</code> column to store the descriptions for the primitive rule conditions in plain text (<code>rlm$conddesc</code>).</p>
</li>
<li>
<p>Once it creates the table, the primitive rule condition can be added or modified using standard DML operations on the conditions table. The conditions table is configured to validate the primitive rule conditions (in the <code>rlm$condition</code> column) using the primitive event structure specified for the <code>pevent_struct</code> argument.</p>
</li>
<li>
<p>A rule class configured with a primitive event structure can include some rule conditions that refer to rows in the conditions table using corresponding identifiers.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7623"></a>Examples</p>
<p>The following command creates a conditions table that can store shareable primitive rule conditions for the <code>AddRentalCar</code> event structure:</p>
<pre>
BEGIN
  DBMS_RLMGR.CREATE_CONDITIONS_TABLE (
    cond_table    =&gt; 'FlightConditions',
    pevent_struct =&gt; 'AddFlight', 
    stg_clause    =&gt; 'TABLESPACE TBS_1');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS182" class="refsect2"><a id="BJFCIAAB"></a>
<hr />
<h3 class="refsect2"><a id="sthref7624"></a><a id="sthref7625"></a>CREATE_EVENT_STRUCT Procedure</h3>
<p>This procedure creates an event structure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7626"></a>Syntax</p>
<pre>
DBMS_RLMGR.CREATE_EVENT_STRUCT  (
   event_struct  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7627"></a>Parameters</p>
<div id="ARPLS67695" class="tblformal">
<p class="titleintable"><a id="sthref7628"></a><a id="sthref7629"></a>Table 124-10 CREATE_EVENT_ STRUCT Procedure Parameter</p>
<table class="cellalignment1229" title="CREATE_EVENT_ STRUCT Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Parameter</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>Name of the event structure to be created in the current schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7630"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure creates a dummy event structure in the current schema. One or more attributes can be added to this event structure using the <code>ADD_ELEMENTARY_ATTRIBUTE</code> procedure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7631"></a>Examples</p>
<p>The following command creates the event structure.</p>
<pre>
BEGIN  DBMS_RLMGR.CREATE_EVENT_STRUCT(event_struct =&gt; 'AddFlight');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS466" class="refsect2"><a id="CACIEIHE"></a>
<hr />
<h3 class="refsect2"><a id="sthref7632"></a><a id="sthref7633"></a>CREATE_EXPFIL_INDEXES Procedure</h3>
<p>This procedure creates expression filter indexes for the rule class if the default indexes have been dropped. If a representative set of rules is stored in the rule class table, the indexes can be tuned for these expressions by collecting statistics.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7634"></a>Syntax</p>
<pre>
DBMS_RLMGR.CREATE_EXPFIL_INDEXES  (
   rule_class  IN  VARCHAR2,
   coll_stats  IN  VARCHAR2 default 'NO');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7635"></a>Parameters</p>
<div id="ARPLS67696" class="tblformal">
<p class="titleintable"><a id="sthref7636"></a><a id="sthref7637"></a>Table 124-11 CREATE_EXPFIL_INDEXES Procedure Parameter</p>
<table class="cellalignment1229" title="CREATE_EXPFIL_INDEXES Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>Name of the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>coll_stats</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p>To collect expression statistics for building the indexes</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7638"></a>Usage Notes</p>
<ul>
<li>
<p>Expression filter indexes are used to identify the rule conditions in a rule class for appropriate events. The default indexes created at the time of rule class creation assume that all types of predicates (equality, inequality, and so forth) involving scalar attributes in an event structure are equally likely. The performance of a rule class can be improved by tuning the expression filter indexes for a specific workload. This is achieved either by collecting statistics on a representative workload or by identifying the most common predicate constructs with some domain knowledge.</p>
</li>
<li>
<p>The default expression filter indexes created for the rule class can be dropped using the <code>DBMS_RLMGR.DROP_EXPFIL_INDEXES</code> procedure. Once the indexes are dropped, they can be recreated using the <code>DBMS_RLMGR.CREATE_EXPFIL_INDEXES</code> procedure. When the <code>coll_stats</code> argument of the <code>CREATE_EXPFIL_INDEXES</code> procedure is set to <code>YES</code>, rule condition statistics are collected for the most common predicate constructs and the indexes are created using these statistics. Alternately, a domain expert can manually set the index parameters by identifying the most common and discriminating predicate constructs and then create the indexes with these parameters. Note that the index parameters can be set for each of the primitive event structures associated with the rule class. The index parameters can be assigned to the event structure (which is also the Expression Filter attribute set) using the <code>DBMS_EXPFIL.DEFAULT_INDEX_PARAMETERS</code> procedure. When the <code>coll_stats</code> argument of the <code>CREATE_EXPFIL_INDEXES</code> procedure is set to <code>NO</code>, the expression filter indexes created for the rule class make use of the default index parameters associated with each primitive event structure. (See the chapter on indexing expressions in <a class="olink EXPRN018" href="../../appdev.112/e14919/exprn_indexexpressions.htm#EXPRN018"><span class="italic">Oracle Database Rules Manager and Expression Filter Developer's Guide</span></a> for additional information on tuning the Expression Filter indexes for better performance).</p>
</li>
<li>
<p>Related view: <a class="olink EXPRN057" href="../../appdev.112/e14919/exprn_views.htm#EXPRN057"><code>USER_EXPFIL_DEF_INDEX_PARAMS</code></a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7639"></a>Examples</p>
<p>The following commands collect the statistics for the rules defined in the <code>CompTravelPromo</code> rule class and create the expression filter indexes that are based on the most common predicates in the set.</p>
<pre>
BEGIN
DBMS_RLMGR.CREATE_EXPFIL_INDEXES (rule_class =&gt; 'CompTravelPromo',
                                  coll_stats =&gt; 'yes');
END;
/
</pre>
<p>This is an Expression Filter tuning example where the domain knowledge is used to assign specific index parameters. The following commands associate specific index parameters to the <code>AddFlight</code> event structure such that the expression filter index created for corresponding expressions are optimized accordingly. The subsequent <code>CREATE_EXPFIL_INDEXES</code> step makes use of these index parameters.</p>
<pre>
BEGIN
  DBMS_EXPFIL.DEFAULT_INDEX_PARAMETERS('AddFlight',
    exf$attribute_list (
       exf$attribute (attr_name =&gt; 'Airline',
                      attr_oper =&gt; exf$indexoper('='),
                      attr_indexed =&gt; 'TRUE'),
       exf$attribute (attr_name =&gt; 'ToCity',
                      attr_oper =&gt; exf$indexoper('='),
                      attr_indexed =&gt; 'TRUE'),
       exf$attribute (attr_name =&gt; 'Depart',
                      attr_oper =&gt; exf$indexoper('=','&lt;','&gt;','&gt;=','&lt;='),
                      attr_indexed =&gt; 'FALSE') 
    )
  );
  -- create the indexes after assigning the index parameters --
  DBMS_RLMGR.CREATE_EXPFIL_INDEXES (rule_class =&gt; 'CompTravelPromo'); 
END; 
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS467" class="refsect2"><a id="CACGDBJG"></a>
<hr />
<h3 class="refsect2"><a id="sthref7640"></a><a id="sthref7641"></a>CREATE_INTERFACE Procedure</h3>
<p>This procedure creates a rule class interface package that can be used to directly operate on the rule class for efficiency and ease of use.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7642"></a>Syntax</p>
<pre>
DBMS_RLMGR.CREATE_INTERFACE  (
   rule_class   IN  VARCHAR2,
   interface_nm IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7643"></a>Parameters</p>
<div id="ARPLS67697" class="tblformal">
<p class="titleintable"><a id="sthref7644"></a><a id="sthref7645"></a>Table 124-12 CREATE_INTERFACE Procedure Parameter</p>
<table class="cellalignment1229" title="CREATE_INTERFACE Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t16">Parameter</th>
<th class="cellalignment1227" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t16" headers="r1c1-t16">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t16 r1c2-t16">
<p>Name of the rule class for which the interface package is created</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t16" headers="r1c1-t16">
<p><code>interface_nm</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t16 r1c2-t16">
<p>Name of the PL/SQL package that acts as the interface to the rule application</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7646"></a>Usage Notes</p>
<ul>
<li>
<p>The common set of <code>DBMS_RLMGR</code> procedures used for runtime operations such as processing the rules for some events, consuming the events and resetting the session make use of the rule class name passed in as one of the arguments and associate them to the corresponding operations on the rule class. You can the overhead involved in this step by creating a rule class interface package that is used to directly operate on the rule class.</p>
</li>
<li>
<p>The rule class interface package is a PL/SQL package that has procedures or functions to process rules (<code>PROCESS_RULES</code>), add event (<code>ADD_EVENT</code>), consume events (<code>CONSUME_EVENT</code>, <code>CONSUME_PRIM_EVENTS</code>) and reset rule session (<code>RESET_SESSION</code>). The operational characteristics of these procedures and functions are the same as those of <code>DBMS_RLMGR</code> procedures and functions with matching names with two exceptions. Since the rule class interface package is created for a specific rule class, the rule class name is implicit and it need not be passed in as an argument to the procedures and functions of the rule class interface package. Additionally, the rule class interface package has separate <code>PROCESS_RULES</code> and <code>ADD_EVENT</code> procedures to accept each primitive event type configured with the rule class. This is in contrast to the same procedures in the <code>DBMS_RLMGR</code> package, which are generalized to accept the event instances only as a <code>VARCHAR</code> or an <code>AnyData</code> instance.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7647"></a>Examples</p>
<p>The following commands create the rule class interface package for the <code>CompTravelPromo</code> rule class.</p>
<pre>
  BEGIN
    DBMS_RLMGR.CREATE_INTERFACE  (rule_class   =&gt; 'CompTravelPromo',
                                  interface_nm =&gt; 'TravelPromoRules'); 
  END;
</pre>
<p>The following commands make use of the interface created in previous step to process the rules for an instance of <code>AddFlight</code> event.</p>
<pre>
  BEGIN
    TravelPromoRules.process_rules (event_inst =&gt; 
              AddFlight(987, 'Abcair', 'Boston', 'Orlando',
                                      '01-APR-2009', '08-APR-2009'); 
  END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS183" class="refsect2"><a id="BJFGGHAE"></a>
<hr />
<h3 class="refsect2"><a id="sthref7648"></a><a id="sthref7649"></a>CREATE_RULE_CLASS Procedure</h3>
<p>This procedure creates a rule class.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7650"></a>Syntax</p>
<pre>
DBMS_RLMGR.CREATE_RULE_CLASS  (
   rule_class      IN  VARCHAR2,
   event_struct    IN  VARCHAR2,
   action_cbk      IN  VARCHAR2,
   actprf_spec     IN  VARCHAR2  default null,
   rslt_viewnm     IN  VARCHAR2  default null,
   rlcls_prop      IN  VARCHAR2  default &lt;simple/&gt;);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7651"></a>Parameters</p>
<div id="ARPLS67698" class="tblformal">
<p class="titleintable"><a id="sthref7652"></a><a id="sthref7653"></a>Table 124-13 CREATE_RULE_CLASS Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_RULE_CLASS Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.ADD_RULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t17">Parameter</th>
<th class="cellalignment1227" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t17" headers="r1c1-t17">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t17 r1c2-t17">
<p>Name of the rule class to be created in the current schema</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t17" headers="r1c1-t17">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t17 r1c2-t17">
<p>Name of the object type or an Expression Filter attribute set in the current schema that represents the event structure for the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t17" headers="r1c1-t17">
<p><code>action_cbk</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t17 r1c2-t17">
<p>Name of the action callback procedure to be created for the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t17" headers="r1c1-t17">
<p><code>actprf_spec</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t17 r1c2-t17">
<p>Specification (name and SQL datatype pairs) for the action preferences associated with the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t17" headers="r1c1-t17">
<p><code>rlst_viewnm</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t17 r1c2-t17">
<p>Name of rule class results view that lists the matching events and rules within a session. A view with this name is created in the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t17" headers="r1c1-t17">
<p><code>rlcls_prop</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t17 r1c2-t17">
<p>XML document for setting the rule class properties. By default, the rule class created is for simple events (non-composite).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7654"></a>Usage Notes</p>
<ul>
<li>
<p>For successful creation of a rule class, you must have sufficient privileges to create views, object types, tables, packages, and procedures.</p>
</li>
<li>
<p>This command creates the rule class and its dependent objects in the user's schema. For this operation to succeed the name specified for the event structure must refer to an existing object type or an Expression Filter attribute set in the user's schema. When an object type is used for an event structure, the <code>CREATE_RULE_CLASS</code> procedure implicitly creates an attribute set for the object type. In the case of a rule class configured for composite events, the previous procedure also creates attribute sets for the object types that are directly embedded in the event structure's object type (or the attribute set). A maximum of 32 embedded objects (and or or table aliases) can be specified with an event structure that is used for a composite rule class. The types of dependent objects created with this procedure and their structure depend on the properties of the rule class and its event structure. The minimum set of dependent objects created for a rule class is as follows:</p>
<ul>
<li>
<p>Rule class table &ndash; A rule class table that shares the name of the rule class is created in the user's schema to store the rule definitions (rule identifiers, rule conditions, rule descriptions, and action preferences). This table implicitly has four columns, <code>rlm$ruleid</code>, <code>rlm$rulecond</code>, <code>rlm$enabled</code>, and <code>rlm$ruledesc</code> to store the rule identifiers, rule conditions, rule states, and rule descriptions respectively. In addition to these four columns, the rule class table has few columns according to the action preference specification for the rule class. For example, if a TravelPromotion rule class uses 'PromoType <code>VARCHAR</code>(20), OfferedBy <code>VARCHAR</code>(20)' as its action preference specification (assigned to <code>actpref_spec</code> argument), the rule class table is created with the following structure.</p>
<pre>
TABLE TravelPromotion (
      rlm$ruleid VARCHAR(100),     -- rule identifier column --
      PromoType VARCHAR(20),       -- action preference 1 --
      OfferedBy VARCHAR(20),       -- action preference 2 --
      rlm$rulecond VARCHAR(4000),  -- rule condition &ndash;-
      rlm$ruledesc VARCHAR(1000),  -- rule description --
      rlm$enabled CHAR(1));        -- rule status --
</pre>
<p>The rule class table structure varies from one rule class to another based on the exact list of action preference categories specified for the rule class.</p>
</li>
<li>
<p>Action Callback Procedure &ndash; You create the skeleton for the action callback procedure with the given name in the user's schema and it is associated with the rule class. During rule evaluation, the callback procedure is called for each matching rule and event. You must implement the body of the action callback procedure to perform the appropriate action for each rule. The exact action for a rule can be determined based on the event that matched the rule and rule definition along with its action preferences. This information is passed to the action callback procedure through its arguments. Hence, the argument list for the action callback procedure depends on the event structure associated with the rule class and the rule class itself.</p>
<p>In the case of a rule class configured for simple events (<code>&lt;simple/&gt;</code> assigned to the properties of the rule class), the event that matches a rule is passed through a <code>rlm$event</code> argument that is declared to be of the same type as the event structure. Additionally, the rule definitions are passed to the action callback procedure using an <code>rlm$rule</code> argument that is declared as ROWTYPE of the corresponding rule class table. For example, the structure of the <code>PromoAction</code> action callback procedure created for a <code>TravelPromotion</code> rule class configured for a simple (non-composite) <code>AddFlight</code> event structure is as follows:</p>
<pre>
PROCEDURE PromoAction (rlm$event AddFlight,
                       rlm$rule TravlePromotion%ROWTYPE);
</pre>
<p>In the case of a rule class created for composite events (<code>&lt;composite/&gt;</code> assigned to the properties of the rule class), the action callback procedure is created to pass each primitive event as a separate argument. For example, the <code>CompPromoAction</code> action callback procedure created for a rule class <code>CompTravelPromo</code> configured for a composite event with <code>AddFlight</code> and <code>AddRentalCar</code> primitive events are shown as follows:</p>
<pre>
-- composite event structure --
TYPE TSCompEvent (Flt AddFlight,
                  Car AddRentalCar);
-- corresponding action callback procedure --
PROCEDURE PromoAction (Flt AddFlight,
                       Car AddRentalCar,
                       rlm$rule CompTravelPromo%ROWTYPE)
</pre>
<p>The action callback procedure includes additional arguments when the rule class is configured for the <code>RULE</code> consumption policy or when the rule class is enabled for one or more collection events. The arguments in these cases include the identifiers for the events (<code>ROWID</code> data type) in addition to the event instances. You can use these event identifiers to further operate on the matched rules. For example, in the case of the rule class configured for rule consumption, the event identifiers are used to consume the events with <code>DBMS_RLMGR.CONSUME_PRIM_EVENTS</code> function. In the case of rule class enabled for collection events, the same identifiers for the collection events can be used to fetch specific aggregate values with the <code>DBMS_RLMGR.GET_AGGREGATE_VALUE</code> function.</p>
</li>
<li>
<p>Rule class results view &ndash; A view to display the results from matching some events with rules is created in the same schema as the rule class. By default, this view is created with a system-generated name. Optionally, the rule class creator can specify a name for this view with the <code>rlst_viewnm</code> argument of the <code>CREATE_RULE_CLASS</code> procedure. When the events are added to the rule manager within a rule session using the <code>ADD_EVENT</code> procedure, the list of matching events and rules are displayed in the rule class results view.</p>
<p>The structure of the view defined for the rule class results depends on the event structure and the action preferences configured with the rule class. Minimally, the view has three columns to display the system generated event identifier (<code>rlm$evenetid</code>), the identifier of the rule it matches (<code>rlm$ruleid</code>), and the rule condition (rlm$rulecond). Additionally, it has columns to display the event information and the rule action preferences.</p>
<p>In the case of a rule class configured for simple events, the event information is displayed as rlm$event that is declared to be of the event structure type. So, a <code>MatchingPromos</code> view created for the <code>TravelPromotion</code> rule class configured for a simple <code>AddFlight</code> event structure is as follows:</p>
<pre>
VIEW MatchingPromos (
    rlm$eventid ROWID,
    rlm$event AddFlight,
    rlm$ruleid VARCHAR(100),
    PromoType VARCHAR(30), -- action preference 1 --
    OffredBy VARCHAR(30), -- action preference 2 --
    rlm$rulecond VARCHAR(4000),
    rlm$ruledesc VARCHAR(1000)
);
</pre>
<p>In the case of a rule class configured for composite events, the primitive events matching a rule are displayed separately using corresponding columns. For the above <code>CompTravelPromo</code> rule class, a <code>MatchingCompPromos</code> view is created with the following structure.</p>
<pre>
VIEW MatchingCompPromos (
    rlm$eventid ROWID,
    Flt AddFlight,
    Car AddRentalCar,
    rlm$ruleid VARCHAR(100),
    PromoType VARCHAR(30),   -- action preference 1 --
    OffredBy VARCHAR(30),    -- action preference 2 --
    rlm$rulecond VARCHAR(4000),
    rlm$ruledesc VARCHAR(1000)
);
</pre>
<p>The values from the rlm$eventid column are used to enforce rule class consumption policies when the corresponding rule is executed. See the <a href="#BJFBJCCB">CONSUME_EVENT Function</a> for more information.</p>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7655"></a>Examples</p>
<p>The following commands create a rule class for simple events (of <code>AddFlight</code> type).</p>
<pre>
CREATE or REPLACE TYPE AddFlight AS OBJECT (
                  CustId NUMBER,
                  Airline VARCHAR(20),
                  FromCity VARCHAR(30),
                  ToCity VARCHAR(30),
                  Depart DATE,
                  Return DATE);
BEGIN
  DBMS_RLMGR.CREATE_RULE_CLASS (
              rule_class   =&gt; 'TravelPromotion', -- rule class name --
              event_struct =&gt; 'AddFlight', -- event struct name --
              action_cbk    =&gt; 'PromoAction', -- callback proc name &ndash;-
              rslt_viewnm   =&gt; 'MatchingPromos', -- results view --
              actprf_spec   =&gt; 'PromoType VARCHAR(20),
                              OfferedBy VARCHAR(20)');
END;
</pre>
<p>The following commands create a rule class for composite events consisting of two primitive events (<code>AddFlight</code> and <code>AddRentalCar</code>).</p>
<pre>
CREATE or REPLACE TYPE TSCompEvent (Flt AddFlight,
                                    Car AddRentalCar);
BEGIN
  DBMS_RLMGR.CREATE_RULE_CLASS (
              rule_class    =&gt; 'CompTravelPromo', -- rule class name --
              event_struct  =&gt; 'TSCompEvent', -- event struct name --
              action_cbk    =&gt; 'CompPromoAction', -- callback proc name &ndash;-
              rslt_viewnm   =&gt; 'MatchingCompPromos', -- results view --
              actprf_spec   =&gt; 'PromoType VARCHAR(20),
                              OfferedBy VARCHAR(20)',
              properties    =&gt; '&lt;composite/&gt;');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS184" class="refsect2"><a id="BJFDEHHE"></a>
<hr />
<h3 class="refsect2"><a id="sthref7656"></a><a id="sthref7657"></a>DELETE_RULE Procedure</h3>
<p>This procedure deletes a rule from a rule class.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7658"></a>Syntax</p>
<pre>
DBMS_RLMGR.DELETE_RULE (
   rule_class    IN    VARCHAR2,
   rule_id       IN    VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7659"></a>Parameters</p>
<div id="ARPLS67699" class="tblformal">
<p class="titleintable"><a id="sthref7660"></a><a id="sthref7661"></a>Table 124-14 DELETE_RULE Procedure Parameters</p>
<table class="cellalignment1229" title="DELETE_RULE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.DELETE_RULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Parameter</th>
<th class="cellalignment1227" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t18" headers="r1c1-t18">
<p><code>rule_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t18 r1c2-t18">
<p>Identifier for the rule to be deleted</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7662"></a>Usage Notes</p>
<ul>
<li>
<p>Use this procedure to delete a rule from the rule class. The identifier for the rule to be deleted can be obtained by querying the rule class table (that shares the same name as the rule class). Alternately, the owner of the rule class can use a SQL <code>DELETE</code> statement on one rule class table to delete a rule.When you use the schema extended name for the rule class, you must have the <code>DELETE</code> <code>RULE</code> privilege on the rule class. See the <a href="#BJFJIIGH">GRANT_PRIVILEGE Procedure</a> for more information.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>AUTOCOMMIT</code> property of the rule class is ignored if the rules are deleted with the SQL <code>DELETE</code> statement instead of the <code>DELETE_RULE</code> procedure.</div>
</li>
<li>
<p>See the <a href="#BJFGGHAE">CREATE_RULE_CLASS Procedure</a> for the structure of the rule class table.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7663"></a>Examples</p>
<p>The following command deletes a rule from the rule class.</p>
<pre>
BEGIN
  DBMS_RLMGR.DELETE_RULE (
           rule_class  =&gt; 'CompTravelPromo',
           rule_id     =&gt; 'AB_AV_FL');
END;
</pre>
<p>Alternately, you can issue the following SQL <code>DELETE</code> statement to delete the above rule from the rule class.</p>
<pre>
DELETE FROM CompTravelPromo WHERE rlm$ruleid = 'AB_AV_FL';
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS438" class="refsect2"><a id="CACCJEFI"></a>
<hr />
<h3 class="refsect2"><a id="sthref7664"></a><a id="sthref7665"></a>DROP_CONDITIONS_TABLE Procedure</h3>
<p>This procedure drops the conditions table.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7666"></a>Syntax</p>
<pre>
DBMS_RLMGR.DROP_CONDITIONS_TABLE (
     cond_table IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7667"></a>Parameters</p>
<div id="ARPLS67700" class="tblformal">
<p class="titleintable"><a id="sthref7668"></a><a id="sthref7669"></a>Table 124-15 DROP_CONDITIONS_TABLE Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_CONDITIONS_TABLE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.DROP_CONDITIONS_TABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t20">Parameter</th>
<th class="cellalignment1227" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t20" headers="r1c1-t20">
<p><code>cond_table</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t20 r1c2-t20">
<p>Name of conditions table in the user schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7670"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure drops the table that stores the shareable conditional expressions. If one of the conditional expressions in this table is used to form a rule condition in a rule class, the drop operation fails with an appropriate error.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7671"></a>Examples</p>
<p>The following command drops the conditions table:</p>
<pre>
BEGIN
  DBMS_RLMGR.DROP_CONDITIONS_TABLE (cond_table =&gt; 'FlightConditions');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS185" class="refsect2"><a id="BJFCECIC"></a>
<hr />
<h3 class="refsect2"><a id="sthref7672"></a><a id="sthref7673"></a>DROP_EVENT_STRUCT Procedure</h3>
<p>This procedure drops an event structure.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7674"></a>Syntax</p>
<pre>
DBMS_RLMGR.DROP_EVENT_STRUCT  (
   event_struct  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7675"></a>Parameters</p>
<div id="ARPLS67701" class="tblformal">
<p class="titleintable"><a id="sthref7676"></a><a id="sthref7677"></a>Table 124-16 DROP_EVENT_ STRUCT Procedure Parameter</p>
<table class="cellalignment1229" title="DROP_EVENT_ STRUCT Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.DROP_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Parameter</th>
<th class="cellalignment1227" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21">
<p>Name of event structure in the current schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7678"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure drops the event structure from the current schema. This drops all the dependent objects created to manage the event structure.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7679"></a>Examples</p>
<p>The following command drops the event structure.</p>
<pre>
BEGIN  DBMS_RLMGR.DROP_EVENT_STRUCT(event_struct =&gt; 'AddFlight');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS468" class="refsect2"><a id="CACHCIHB"></a>
<hr />
<h3 class="refsect2"><a id="sthref7680"></a><a id="sthref7681"></a>DROP_EXPFIL_INDEXES Procedure</h3>
<p>This procedure drops the expression filter indexes created for a rule class.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7682"></a>Syntax</p>
<pre>
DBMS_RLMGR.DROP_EXPFIL_INDEXES  (
   rule_class  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7683"></a>Parameters</p>
<div id="ARPLS67702" class="tblformal">
<p class="titleintable"><a id="sthref7684"></a><a id="sthref7685"></a>Table 124-17 DROP_EXPFIL_INDEXES Procedure Parameter</p>
<table class="cellalignment1229" title="DROP_EXPFIL_INDEXES Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>Name of the rule class</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7686"></a>Usage Notes</p>
<p>This procedure drops all the expression filter indexes associated with a rule class. You can recreate the indexes using the <code>DBMS_RLMGR.CREATE_EXPFIL_INDEXES</code> call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7687"></a>Examples</p>
<p>The following command drops the expression filter indexes created for the <code>CompTravelPromo</code> rule class.</p>
<pre>
BEGIN
DBMS_RLMGR.DROP_EXPFIL_INDEXES (rule_class =&gt; 'CompTravelPromo');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS469" class="refsect2"><a id="CACFCIHJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref7688"></a><a id="sthref7689"></a>DROP_INTERFACE Procedure</h3>
<p>This procedure drops the rule class interface package created for a rules application.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7690"></a>Syntax</p>
<pre>
DBMS_RLMGR.DROP_INTERFACE  (
   interface_nm  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7691"></a>Parameters</p>
<div id="ARPLS67703" class="tblformal">
<p class="titleintable"><a id="sthref7692"></a><a id="sthref7693"></a>Table 124-18 DROP_INTERFACE Procedure Parameter</p>
<table class="cellalignment1229" title="DROP_INTERFACE Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Parameter</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><code>interface_nm</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>Name of the PL/SQL package that acts as the interface to the rule application</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7694"></a>Usage Notes</p>
<p>This procedure drops the rule class interface package created with the <code>DBMS_RLMGR.CREATE_INTERFACE</code> call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7695"></a>Examples</p>
<p>The following command drops the rule class interface package <code>TravelPromoRules</code>.</p>
<pre>
  BEGIN
    DBMS_RLMGR.DROP_INTERFACE (interface_nm =&gt; 'TravelPromoRules' 
  END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS186" class="refsect2"><a id="BJFEGEGH"></a>
<hr />
<h3 class="refsect2"><a id="sthref7696"></a><a id="sthref7697"></a>DROP_RULE_CLASS Procedure</h3>
<p>This procedure drops a rule class.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7698"></a>Syntax</p>
<pre>
DBMS_RLMGR.DROP_RULE_CLASS  (
   rule_class  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7699"></a>Parameters</p>
<div id="ARPLS67704" class="tblformal">
<p class="titleintable"><a id="sthref7700"></a><a id="sthref7701"></a>Table 124-19 DROP_RULE_CLASS Procedure Parameter</p>
<table class="cellalignment1229" title="DROP_RULE_CLASS Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.DROP_RULE_CLASS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Parameter</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>Name of rule class in the current schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7702"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure drops the rule class from the current schema. This drops all the dependent objects created to manage the rule class. Because an event structure in a user's schema can be shared across multiple rule classes, the event structure is not dropped with this command. You must use the <code>DROP_EVENT_STRUCTURE</code> procedure for the composite event as well as the individual primitive events to cleanup unused event structures.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7703"></a>Examples</p>
<p>The following command drops the rule class.</p>
<pre>
BEGIN  DBMS_RLMGR.DROP_RULE_CLASS(rule_class =&gt; 'CompTravelPromo');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS471" class="refsect2"><a id="CACBAJIJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref7704"></a><a id="sthref7705"></a>EXTEND_EVENT_STRUCT Procedure</h3>
<p>This is used to extend the primitive event structure used by one or more rule classes by adding a new attribute.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7706"></a>Syntax</p>
<pre>
DBMS_RLMGR.EXTEND_EVENT_STRUCT (
          event_struct    IN   VARCHAR2, 
          attr_name       IN   VARCHAR2, 
          attr_type       IN   VARCHAR2, 
          attr_defvl      IN   VARCHAR2 default NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7707"></a>Parameters</p>
<div id="ARPLS67705" class="tblformal">
<p class="titleintable"><a id="sthref7708"></a><a id="sthref7709"></a>Table 124-20 EXTEND_EVENT_ STRUCT Procedure Parameter</p>
<table class="cellalignment1229" title="EXTEND_EVENT_ STRUCT Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.CREATE_EVENT_STRUCTURE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Parameter</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><code>event_struct</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>Name of the event structure to which this attribute is added</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><code>attr_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p>Name of the elementary attribute to be added. No two attributes in a set can have the same name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t25" headers="r1c1-t25">
<p><code>attr_type</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t25 r1c2-t25">
<p>Data type of the attribute. This argument accepts any standard SQL data type or the name of an object type that is accessible to the current user.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t25" headers="r1c1-t25">
<p><code>attr_defvl</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t25 r1c2-t25">
<p>Default value for the elementary attribute</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7710"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure extends a primitive event structure already associated with a rule class to include a new attribute. You can use this procedure mostly to migrate a fully developed rules application to use extended event structures and you should not use it in the place of the <code>ADD_ELEMENTARY_ATTRIBUTE</code> call. Unlike the <code>ADD_ELEMENTARY_ATTRIBUTE</code> call, which builds an event structure one attribute at a time, the <code>EXTEND_EVENT_STRUCT</code> call evolves the object type associated with the event structure to include the new attributes and performs some maintenance operations on the dependent objects.</p>
</li>
<li>
<p>The usage of the <code>EXTEND_EVENT_STRUCT</code> call is similar to that of the <code>ADD_ELEMENTARY_ATTRIBUTE</code> call with the same set of arguments. Table alias attributes and attributes of text and spatial data types cannot be added to the event structure using the <code>EXTEND_EVENT_STRUCT</code> call.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7711"></a>Examples</p>
<p>The following commands add an attribute to the <code>AddRentalCar</code> event structure that is used by the <code>CompTravelPromo</code> rule class.</p>
<pre>
  BEGIN 
    DBMS_RLMGR.EXTEND_EVENT_STRUCT (
          event_struct   =&gt; 'AddRentalCar',  
          attr_name      =&gt; 'PrefMemberId',
          attr_type      =&gt; 'VARCHAR2(30)'); 
  END; 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS462" class="refsect2"><a id="CACJFGCB"></a>
<hr />
<h3 class="refsect2"><a id="sthref7712"></a><a id="sthref7713"></a>GET_AGGREGATE_VALUE Function</h3>
<p>This function retrieves the aggregate value computed for a collection event.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7714"></a>Syntax</p>
<pre>
DBMS_RLMGR.GRANT_PRIVILEGE  (
   rule_class      IN  VARCHAR2,
   event_ident     IN  VARCHAR2,
   aggr_func       IN  VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7715"></a>Parameters</p>
<div id="ARPLS67706" class="tblformal">
<p class="titleintable"><a id="sthref7716"></a><a id="sthref7717"></a>Table 124-21 GET_AGGREGATE_VALUE Function Parameters</p>
<table class="cellalignment1229" title="GET_AGGREGATE_VALUE Function Parameters" summary="This table describes the parameters of the DBMS_RLMGR.GET_AGGREGATE_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t26">Parameter</th>
<th class="cellalignment1227" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t26" headers="r1c1-t26">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t26 r1c2-t26">
<p>Name of the rule class for the collection event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t26" headers="r1c1-t26">
<p><code>event_ident</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t26 r1c2-t26">
<p>System-generated identifier for the collection event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t26" headers="r1c1-t26">
<p><code>aggr_func</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t26 r1c2-t26">
<p>Signature for the aggregate value to be retrieved</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7718"></a>Usage Notes</p>
<ul>
<li>
<p>When a rule condition with <code>collection</code> construct matches a set of events, an instance representing the collection event and a system-generated identifier for the collection event are passed into the action callback procedure. This event identifier can be used to fetch any aggregate values that are computed as part of the collection event evaluation.</p>
</li>
<li>
<p>Within a collection construct in a rule condition, the aggregate functions can be included in the <code>HAVING</code> clause or in the <code>COMPUTE</code> clause. For example, the following rule condition computes three aggregate values for <code>sum(amount)</code>, <code>count(*)</code>, and <code>max(amount)</code>. At the time of action execution, these values can be obtained using the identifier for the collection event that represents all the instances of <code>BankTransaction</code> with the same <code>subjectId</code> (the attribute on which the events are grouped).</p>
<pre>
&lt;condition&gt;
   &lt;collection name="bank" groupby="subjectId"
               having="sum(amount) &gt; 10000"
               compute="max(amount), count(*)"/&gt;
&lt;/condition&gt;
</pre></li>
<li>
<p>The signature for the aggregate function is bound to the <code>aggr_func</code> argument of the <code>GET_AGGREGATE_VALUE</code> function to fetch the specific aggregate value. If the value is a <code>NUMBER</code> or a <code>DATE</code> data type, it returns the equivalent <code>VARCHAR</code> representation. It returns a <code>NULL</code> value if an attempt was made to fetch an aggregate value that is never computed as part of the collection event.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7719"></a>Examples</p>
<p>The following example shows a sample implementation of the action callback procedure that prints the computed aggregate values as part of action execution. In this particular case, the <code>BankTransaction</code> primitive event is enabled for collections.</p>
<pre>
CREATE OR REPLACE PROCEDURE LAWENFORCEMENTCBK (
   bank                 banktransaction,
   bankcollid           rowid,
   transport            transportation,
   fldrpt               fieldreport,
   rlm$rule             LawEnforcementRC%ROWTYPE) IS
   aggrval              VARCHAR(30); 
begin
  dbms_ouput.put_line('Mathing Rule :'||rlm$rule.rlm$ruleid||chr(10)); 
  
  if (bank is not null) then
   dbms_ouput.put_line('--&gt;Bank Transactions by ('||bank.subjectId||')'||chr(10);

   aggrval := dbms_rlmgr.get_aggregate_value(rule_class  =&gt;'LawEnforcementRC',
                                             event_ident =&gt; bankcollid,
                                             aggr_func   =&gt; 'sum(amount)');
   if (aggrval is not null) then
     dbms_ouput.put_line('---&gt; Sum of the amounts is :'||aggrval||chr(10));
   end if;
   . . .
  end if; 
end;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS187" class="refsect2"><a id="BJFJIIGH"></a>
<hr />
<h3 class="refsect2"><a id="sthref7720"></a><a id="sthref7721"></a>GRANT_PRIVILEGE Procedure</h3>
<p>This procedure grants privileges on a rule class to another user.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7722"></a>Syntax</p>
<pre>
DBMS_RLMGR.GRANT_PRIVILEGE  (
   rule_class      IN  VARCHAR2,
   priv_type       IN  VARCHAR2,
   to_user         IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7723"></a>Parameters</p>
<div id="ARPLS67707" class="tblformal">
<p class="titleintable"><a id="sthref7724"></a><a id="sthref7725"></a>Table 124-22 GRANT_PRIVILEGE Procedure Parameters</p>
<table class="cellalignment1229" title="GRANT_PRIVILEGE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.GRANT_PRIVILEGE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t27">Parameter</th>
<th class="cellalignment1227" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t27" headers="r1c1-t27">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t27 r1c2-t27">
<p>Name of the rule class in the current schema</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t27" headers="r1c1-t27">
<p><code>priv_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t27 r1c2-t27">
<p>Type of rule class privilege to be granted</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t27" headers="r1c1-t27">
<p><code>to_user</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t27 r1c2-t27">
<p>User to whom the privilege is to be granted</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7726"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure grants appropriate privileges to a user who is not the owner of the rule class. The types of privileges that can be granted to a user are:</p>
<ul>
<li>
<p><code>PROCESS</code> <code>RULES</code>: A user with <code>PROCESS</code> <code>RULES</code> privilege on a rule class can process the rules in the rule class using the <code>PROCESS_RULES</code> procedure or the <code>ADD_EVENT</code> procedure. Also, the user with this privilege can select from the corresponding rule class results view.</p>
</li>
<li>
<p><code>ADD</code> <code>RULE</code>: A user with <code>ADD</code> <code>RULE</code> privilege on a rule class can add rules to a rule class. Alternatively, the owner of the rule class can grant the <code>INSERT</code> privilege on one rule class table to other users.</p>
</li>
<li>
<p><code>DELETE</code> RULE: A user with <code>DELETE</code> <code>RULE</code> privilege on a rule class can delete rules from a rule class. Alternatively, the owner of the rule class can grant the <code>DELETE</code> privilege on one rule class table to other users.</p>
</li>
<li>
<p><code>ALL</code>: Granting the <code>ALL</code> privilege on a rule class is equivalent to granting all the above privileges on the rule class to the user.</p>
</li>
</ul>
</li>
<li>
<p>The owner of the rule class always has privileges to drop a rule class, process rules in a rule class, add rules and delete rules from a rules class. Only the owner of the rule class can drop a rule class and this privilege cannot be granted to another user.</p>
</li>
<li>
<p>You must have the <code>EXECUTE</code> privilege on the primitive event types associated with a rule class before you make use of the corresponding rule class results view.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7727"></a>Examples</p>
<p>The following command grants <code>PROCESS</code> <code>RULES</code> privilege on TravelPromo rule class to the user <code>SCOTT</code>.</p>
<pre>
BEGIN
  DBMS_RLMGR.GRANT_PRIVILEGE(rule_class =&gt; 'TravelPromo',
                             priv_type =&gt; 'PROCESS RULES',
                             to_user =&gt; 'SCOTT');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS188" class="refsect2"><a id="BJFDHAEI"></a>
<hr />
<h3 class="refsect2"><a id="sthref7728"></a><a id="sthref7729"></a>PROCESS_RULES Procedure</h3>
<p>This procedure processes the rules for a given event. The procedure is overloaded. The different functionality of each form of syntax is presented along with the definitions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7730"></a>Syntax</p>
<p>Processes the rules for a string representation of the event instance being added to the rule class:</p>
<pre>
DBMS_RLMGR.PROCESS_RULES  (
   rule_class    IN  VARCHAR2,
   event_inst    IN  VARCHAR2,
   event_type    IN  VARCHAR2 default null);
</pre>
<p>Processes the rules for an AnyData representation of the event instance being added to the rule class:</p>
<pre>
DBMS_RLMGR.PROCESS_RULES  (
   rule_class    IN  VARCHAR2,
   event_inst    IN  sys.AnyData);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7731"></a>Parameters</p>
<div id="ARPLS67708" class="tblformal">
<p class="titleintable"><a id="sthref7732"></a><a id="sthref7733"></a>Table 124-23 PROCESS_RULES Procedure Parameters</p>
<table class="cellalignment1229" title="PROCESS_RULES Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.PROCESS_RULES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t28">Parameter</th>
<th class="cellalignment1227" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t28" headers="r1c1-t28">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t28 r1c2-t28">
<p>Name of the rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t28" headers="r1c1-t28">
<p><code>event_inst</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t28 r1c2-t28">
<p>String or AnyData representation of the event instance being added to the rule class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t28" headers="r1c1-t28">
<p><code>event_type</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t28 r1c2-t28">
<p>Type of event instance assigned to the <code>event_inst</code> argument when the string representation of the event instance is used for a rule class configured for composite events</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7734"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure is used to process the rules in a rule class for an event instance assigned to the <code>event_inst</code> argument.</p>
</li>
<li>
<p>In the case of a rule class configured for simple events (non-composite), the event instance is an instantiation of the corresponding event structure. The rules are evaluated (conclusively) for this event and the corresponding action callback procedure is called for each matching rule. If the event does not match any rule, no further action is performed. If the event matches two or more rules, the ordering clause configured for the rule class is used to order them accordingly to invoke the action callback procedure. If the rule class is configured for <code>EXCLUSIVE</code> consumption policy, once the first rule in this order is executed (and the corresponding action callback procedure is called), the rest of the rules that matched the event are ignored.</p>
</li>
<li>
<p>In the case of a rule class configured for composite events, the event instance assigned to the <code>event_inst</code> argument is an instantiation of one of the primitive type within the composite event. When the instance is represented as a string, the corresponding type name should be assigned to the <code>event_type</code> argument. The <code>PROCESS_RULES</code> call on a rule class configured for composite events performs various actions depending on the state of the rule class and the kind of rules in the rule class. Note the following.</p>
<ul>
<li>
<p>The rules operating only on the primitive event passed in are evaluated conclusively and the action callback procedure is called for the matching rules, as described in previous paragraph.</p>
</li>
<li>
<p>In the case of a rule operating on more than one primitive event, the event instance passed through <code>PROCESS_RULES</code> procedure could match only a part of the rule.</p>
<ul>
<li>
<p>If there are other primitive event instances that matches the rest of the rule, the current event instance is combined with the other instances to form a complete composite event that matches a rule in the rule class. So, the event instance assigned to the <code>event_inst</code> argument of the <code>PROCESS_RULES</code> procedure could be combined with various other primitive events (previously processed) to evaluate one or more rules conclusively. The action callback procedure for the rule class is called for each such combination of primitive events (composite event) and the rule. The ordering clause for the rule class and the consumption policy for the primitive events in taken into account while invoking the action callback procedure.</p>
</li>
<li>
<p>If there is no other primitive event that matches the rest of the rule, the current event instance and its (incremental) evaluation results are recorded in the database. These results are preserved until either the event is consumed or deleted from the system owing to the duration policy used for the rule class.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7735"></a>Examples</p>
<p>The following command processes the rules in the <code>TravelPromotion</code> rule class for the given events.</p>
<pre>
BEGIN
  DBMS_RLMGR.PROCESS_RULES (
               rule_class =&gt; 'TravelPromotion',
               event_inst =&gt;
                 AddFlight.getVarchar(987, 'Abcair', 'Boston', 'Orlando',
                                      '01-APR-2003', '08-APR-2003'));
END;
</pre>
<p>The following commands process the rules in the <code>CompTravelPromo</code> rule class for the two primitive events shown.</p>
<pre>
BEGIN
  DBMS_RLMGR.PROCESS_RULES(
               rule_class =&gt; 'CompTravelPromo',
               event_inst =&gt;
                 AddFlight.getVarchar(987, 'Abcair', 'Boston', 'Orlando',
                                      '01-APR-2003', '08-APR-2003'),
               event_type =&gt; 'AddFlight');
  DBMS_RLMGR.PROCESS_RULES(
               rule_class =&gt; 'Scott.CompTravelPromo',
               event_inst =&gt;
                  AnyData.convertObject(AddRentalCar(987, 'Luxury', '03-APR-2003',
                                        '08-APR-2003', NULL)));
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS439" class="refsect2"><a id="CACEIGIB"></a>
<hr />
<h3 class="refsect2"><a id="sthref7736"></a><a id="sthref7737"></a>PURGE_EVENTS Procedure</h3>
<p>This procedure resets the incremental state maintained by the rule class by removing all the events associated with the rule class and purging any state information pertaining to rules matching some events.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7738"></a>Syntax</p>
<pre>
DBMS_RLMGR.PURGE_EVENTS (
     rule_class IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7739"></a>Parameters</p>
<div id="ARPLS67709" class="tblformal">
<p class="titleintable"><a id="sthref7740"></a><a id="sthref7741"></a>Table 124-24 PURGE_EVENTS Procedure Parameters</p>
<table class="cellalignment1229" title="PURGE_EVENTS Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.PURGE_EVENTS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Parameter</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>Name of rule class in the current schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7742"></a>Usage Notes</p>
<ul>
<li>
<p>Use this procedure while developing rules applications using Rules Manager. You can test the rules defined in the rule class with hypothetical events and then remove all these events by issuing this procedure call. This call cleans up all the events in the events repository and purges any partial state information associated with the matching rules.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7743"></a>Examples</p>
<p>The following command removes the events associated with the <code>CompTravelPromo</code> rule class:</p>
<pre>
BEGIN
  DBMS_RLMGR.PURGE_EVENTS (rule_class =&gt; 'CompTravelPromo');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS189" class="refsect2"><a id="BJFHHEAH"></a>
<hr />
<h3 class="refsect2"><a id="sthref7744"></a><a id="sthref7745"></a>RESET_SESSION Procedure</h3>
<p>This procedure starts a new session and thus discards the results in the rule class results view.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7746"></a>Syntax</p>
<pre>
DBMS_RLMGR.RESET_SESSION  (
   rule_class  IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7747"></a>Parameters</p>
<div id="ARPLS67710" class="tblformal">
<p class="titleintable"><a id="sthref7748"></a><a id="sthref7749"></a>Table 124-25 RESET_SESSION Procedure Parameter</p>
<table class="cellalignment1229" title="RESET_SESSION Procedure Parameter" summary="This table describes the parameters of the DBMS_RLMGR.RESET_SESSION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t30">Parameter</th>
<th class="cellalignment1227" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t30" headers="r1c1-t30">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t30 r1c2-t30">
<p>Name of rule class. A schema extended rule class name can be used to refer to a rule class that does not belong to the current schema.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7750"></a>Usage Notes</p>
<ul>
<li>
<p>When you use the <code>ADD_EVENT</code> procedure to add events to the rule class, the results from matching rules with events are recorded in the rule class results view. By default, these results are reset at the end of the database session. Alternately, you can use the <a href="#BJFHHEAH">RESET_SESSION Procedure</a> to reset and start a new rule session within a database session.This procedure is only applicable while using <a href="#BJFEDEIF">ADD_EVENT Procedure</a> to evaluate the rules.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7751"></a>Examples</p>
<p>The following command resets a rule class session.</p>
<pre>
BEGIN  DBMS_RLMGR.RESET_SESSION(
             rule_class =&gt; 'CompTravelPromo');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS190" class="refsect2"><a id="BJFEFFFH"></a>
<hr />
<h3 class="refsect2"><a id="sthref7752"></a><a id="sthref7753"></a>REVOKE_PRIVILEGE Procedure</h3>
<p>This procedure revokes privileges on a rule class from another user.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7754"></a>Syntax</p>
<pre>
DBMS_RLMGR.REVOKE_PRIVILEGE  (
   rule_class      IN  VARCHAR2,
   priv_type       IN  VARCHAR2,
   from_user       IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7755"></a>Parameters</p>
<div id="ARPLS67711" class="tblformal">
<p class="titleintable"><a id="sthref7756"></a><a id="sthref7757"></a>Table 124-26 REVOKE_PRIVILEGE Procedure Parameters</p>
<table class="cellalignment1229" title="REVOKE_PRIVILEGE Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.REVOKE_PRIVILEGE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t31">Parameter</th>
<th class="cellalignment1227" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t31" headers="r1c1-t31">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c2-t31">
<p>Name of the rule class in the current schema</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t31" headers="r1c1-t31">
<p><code>priv_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c2-t31">
<p>Type of rule class privilege to be revoked</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t31" headers="r1c1-t31">
<p><code>from_user</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t31 r1c2-t31">
<p>User from whom the privilege is to be revoked</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7758"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure revokes appropriate privileges from a user. The types of privileges that can be revoked are the same as the types listed in the description of the <a href="#BJFJIIGH">GRANT_PRIVILEGE Procedure</a>. Rule class privileges cannot be revoked from the owner of the rule class.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7759"></a>Examples</p>
<p>The following command revokes <code>PROCESS</code> <code>RULES</code> privilege on <code>TravelPromo</code> rule class from the user <code>SCOTT</code>.</p>
<pre>
BEGIN
  DBMS_RLMGR.REVOKE_PRIVILEGE(rule_class  =&gt; 'TravelPromo',
                              priv_type   =&gt; 'PROCESS RULES',
                              from_user   =&gt; 'SCOTT');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS461" class="refsect2"><a id="CACHGHBA"></a>
<hr />
<h3 class="refsect2"><a id="sthref7760"></a><a id="sthref7761"></a>SYNC_TEXT_INDEXES Procedure</h3>
<p>This procedure synchronizes the indexes defined to process the predicates involving the <code>CONTAINS</code> operator in rule conditions.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7762"></a>Syntax</p>
<pre>
DBMS_RLMGR.SYNC_TEXT_INDEXES (
     rule_class IN   VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7763"></a>Parameters</p>
<div id="ARPLS67712" class="tblformal">
<p class="titleintable"><a id="sthref7764"></a><a id="sthref7765"></a>Table 124-27 SYNC_TEXT_INDEXES Procedure Parameters</p>
<table class="cellalignment1229" title="SYNC_TEXT_INDEXES Procedure Parameters" summary="This table describes the parameters of the DBMS_RLMGR.SYNC_TEXT_INDEXES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t32">Parameter</th>
<th class="cellalignment1227" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t32" headers="r1c1-t32">
<p><code>rule_class</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t32 r1c2-t32">
<p>Name of the rule class in the current schema</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7766"></a>Usage Notes</p>
<ul>
<li>
<p>When a rule class is configured for events with one or more text attributes, the text predicates in the corresponding rule conditions are processed using <code>CTXRULE</code> indexes. Unlike other types of indexes (bitmap for scalar and XML predicates or spatial for spatial predicates) used to process other types of predicates in the rule conditions, the <code>CTXRULE</code> indexes are not transactional in nature. That is, if the text predicates in a rule condition are modified in a database transaction, the new predicates are not automatically reflected in the corresponding <code>CTXRULE</code> index. This could result in inconsistent results while matching events with the rule conditions. All the <code>CTXRULE</code> indexes associated with a rule class can be synchronized with the latest rule conditions using this procedure.</p>
<p>You must have <code>EXECUTE</code> privilege on the <code>CTX_DDL</code> package for successful synchronization of the text indexes.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref7767"></a>Examples</p>
<p>The following command synchronizes any text indexes associated <code>CompTravelPromo</code> rule class:</p>
<pre>
BEGIN
  DBMS_RLMGR.SYNC_TEXT_INDEXES (rule_class =&gt; 'CompTravelPromo');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_resuma.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_rls.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
