<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_SCHEDULER</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:24Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_rule_a.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_server_alert.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">133/265</span> <!-- End Header -->
<div id="ARPLS72235" class="chapter"><a id="CIHHBGGI"></a>
<h1 class="chapter"><span class="secnum">129</span> DBMS_SCHEDULER</h1>
<p>The <code>DBMS_SCHEDULER</code> package <a id="sthref8132"></a>provides a collection of scheduling functions and procedures that can be called from any PL/SQL program.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN034" href="../../server.112/e25494/scheduse.htm#ADMIN034"><span class="variable">Oracle Database Administrator's Guide</span></a> for more information regarding how to use <code>DBMS_SCHEDULER</code></div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#BABCJHEF">Data Structures</a></p>
</li>
<li>
<p><a href="#CIHDJEEB">Using DBMS_SCHEDULER</a></p>
<ul>
<li>
<p>Security Model</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Operational Notes</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIHEHDHA">Summary of DBMS_SCHEDULER Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="BABCJHEF"></a>
<hr />
<div id="ARPLS72236" class="refsect1">
<h2 class="refsect1">Data Structures</h2>
<p>The <code>DBMS_SCHEDULER</code> package defines <code>OBJECT</code> types and <code>TABLE</code> types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8133"></a>OBJECT Types</p>
<ul>
<li>
<p><a href="#BABHCCJA">JOBARG Object Type</a></p>
</li>
<li>
<p><a href="#BABJIEGI">JOB Object Type</a></p>
</li>
<li>
<p><a href="#BABCFCIA">JOB_DEFINITION Object Type</a></p>
</li>
<li>
<p><a href="#BABEHCEH">JOBATTR Object Type</a></p>
</li>
<li>
<p><a href="#BABGIJJC">SCHEDULER$_STEP_TYPE Object Type</a></p>
</li>
<li>
<p><a href="#BABJBIIH">SCHEDULER$_EVENT_INFO Object Type</a></p>
</li>
<li>
<p><a href="#BABFJBDG">SCHEDULER_FILEWATCHER_RESULT Object Type</a></p>
</li>
<li>
<p><a href="#BABEHBBJ">SCHEDULER_FILEWATCHER_REQUEST Object Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8134"></a>TABLE Types</p>
<ul>
<li>
<p><a href="#BABJBHGF">JOBARG_ARRAY Table Type</a></p>
</li>
<li>
<p><a href="#BABBIJCA">JOB_ARRAY Table Type</a></p>
</li>
<li>
<p><a href="#BABHAFDE">JOB_DEFINITION_ARRAY Table Type</a></p>
</li>
<li>
<p><a href="#BABEBCJF">JOBATTR_ARRAY Table Type</a></p>
</li>
<li>
<p><a href="#BABICDGE">SCHEDULER$_STEP_TYPE_LIST Table Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS72237" class="refsect2"><a id="BABHCCJA"></a>
<hr />
<h3 class="refsect2"><a id="sthref8135"></a>JOBARG Object Type</h3>
<p>This type is used by the <code>JOB</code> and <code>JOBATTR</code> object types. It represents a job argument in a batch of job arguments.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8136"></a>Syntax</p>
<pre>
TYPE jobarg IS OBJECT (
   arg_position         NUMBER,
   arg_text_value       VARCHAR2(4000),
   arg_anydata_value    ANYDATA,
   arg_operation        VARCHAR2(5));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8137"></a>Attributes</p>
<div id="ARPLS72238" class="tblformal">
<p class="titleintable"><a id="sthref8138"></a><a id="sthref8139"></a>Table 129-1 JOBARG Object Type Attributes</p>
<table class="cellalignment1229" title="JOBARG Object Type Attributes" summary="This table describes the attributes of the JOBARG object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t3">Attribute</th>
<th class="cellalignment1227" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t3" headers="r1c1-t3">
<p><code>arg_position</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t3 r1c2-t3">
<p>Position of the argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t3" headers="r1c1-t3">
<p><code>arg_text_value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t3 r1c2-t3">
<p>Value of the argument if the type is <code>VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t3" headers="r1c1-t3">
<p><code>arg_anydata_value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t3 r1c2-t3">
<p>Value of the argument if the type is <code>AnyData</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t3" headers="r1c1-t3">
<p><code>arg_operation</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t3 r1c2-t3">
<p>Type of the operation:</p>
<ul>
<li>
<p><code>SET</code></p>
</li>
<li>
<p><code>RESET</code></p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div id="ARPLS72239" class="refsect3"><a id="sthref8140"></a>
<h4 class="refsect3"><a id="sthref8141"></a>JOBARG Constructor Function</h4>
<p>This constructor function constructs a job argument. It is overloaded to construct job arguments with different types of values.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8142"></a>Syntax</p>
<p>Constructs a job argument with a text value.</p>
<pre>
constructor function jobarg (
   arg_position        IN POSITIVEN,
   arg_value           IN VARCHAR2)
   RETURN SELF AS RESULT;
</pre>
<p>Constructs a job argument with an <code>AnyData</code> value.</p>
<pre>
constructor function jobarg (
   arg_position        IN POSITIVEN,
   arg_value           IN ANYDATA)
   RETURN SELF AS RESULT;
</pre>
<p>Constructs a job argument with a <code>NULL</code> value.</p>
<pre>
constructor function jobarg (
   arg_position        IN POSITIVEN,
   arg_reset           IN BOOLEAN DEFAULT FALSE)
   RETURN SELF AS RESULT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8143"></a>Parameters</p>
<div id="ARPLS72240" class="tblformal">
<p class="titleintable"><a id="sthref8144"></a><a id="sthref8145"></a>Table 129-2 JOBARG Constructor Function Parameters</p>
<table class="cellalignment1229" title="JOBARG Constructor Function Parameters" summary="This table describes parameters used by the JOBARG constructor function." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Parameter</th>
<th class="cellalignment1227" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><code>arg_position</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p>Position of the argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><code>arg_value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p>Value of the argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t4" headers="r1c1-t4">
<p><code>arg_reset</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t4 r1c2-t4">
<p>If <code>arg_reset</code> is <code>TRUE</code>, then the argument at that position is reset.</p>
<p>Setting <code>arg_reset</code> to <code>FALSE</code> (which is the default) will create an argument with a NULL value.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72241" class="refsect2"><a id="BABJBHGF"></a>
<hr />
<h4 class="refsect2"><a id="sthref8146"></a>JOBARG_ARRAY Table Type</h4>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8147"></a>Syntax</p>
<pre>
TYPE jobarg_array IS TABLE OF jobarg;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72242" class="refsect2"><a id="BABJIEGI"></a>
<hr />
<h3 class="refsect2"><a id="sthref8148"></a>JOB Object Type</h3>
<p><span class="bold">**** Deprecated</span>. Use the <code>JOB_DEFINITION</code> object type instead.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72245" class="refsect2"><a id="BABBIJCA"></a>
<hr />
<h4 class="refsect2"><a id="sthref8149"></a>JOB_ARRAY Table Type</h4>
<p><span class="bold">*** Deprecated</span>. Use the <code>JOB_DEFINITION_ARRAY</code> table type instead.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72959" class="refsect2"><a id="BABCFCIA"></a>
<hr />
<h3 class="refsect2"><a id="sthref8150"></a>JOB_DEFINITION Object Type</h3>
<p>This type is used by the <code>CREATE_JOBS</code> procedure and represents a job in a batch of jobs.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8151"></a>Syntax</p>
<pre>
TYPE job_definition IS OBJECT (
  job_name                       VARCHAR2(100),
  job_class                      VARCHAR2(32),
  job_style                      VARCHAR2(11),
  program_name                   VARCHAR2(100),
  job_action                     VARCHAR2(4000),
  job_type                       VARCHAR2(20),
  schedule_name                  VARCHAR2(65),
  repeat_interval                VARCHAR2(4000),
  schedule_limit                 INTERVAL DAY TO SECOND,
  start_date                     TIMESTAMP WITH TIME ZONE,
  end_date                       TIMESTAMP WITH TIME ZONE,
  event_condition                VARCHAR2(4000),
  queue_spec                     VARCHAR2(100),
  number_of_arguments            NUMBER,
  arguments                      SYS.JOBARG_ARRAY,
  job_priority                   NUMBER,
  job_weight                     NUMBER,
  max_run_duration               INTERVAL DAY TO SECOND,
  max_runs                       NUMBER,
  max_failures                   NUMBER,
  logging_level                  NUMBER,
  restartable                    VARCHAR2(5),
  stop_on_window_close           VARCHAR2(5),
  raise_events                   NUMBER,
  comments                       VARCHAR2(240),
  auto_drop                      VARCHAR2(5),
  enabled                        VARCHAR2(5),
  follow_default_timezone        VARCHAR2(5),
  parallel_instances             VARCHAR2(5),
  aq_job                         VARCHAR2(5),
  instance_id                    NUMBER,
  credential_name                VARCHAR2(65),
  destination                    VARCHAR2(4000),
  database_role                  VARCHAR2(20),
  allow_runs_in_restricted_mode  VARCHAR2(5));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8152"></a>Object Attributes</p>
<p><a href="#BABFGIFF">Table 129-3</a> provides brief descriptions of the attributes of the <code>JOB_DEFINITION</code> object type. For more complete information about these attributes, see the <a href="#i1000363">"CREATE_JOB Procedure"</a> and the <a href="#CIHDAIIH">"SET_ATTRIBUTE Procedure"</a>.</p>
<div id="ARPLS72960" class="tblformal">
<p class="titleintable"><a id="sthref8153"></a><a id="BABFGIFF"></a>Table 129-3 JOB_DEFINITION Object Type Attributes</p>
<table class="cellalignment1229" title="JOB_DEFINITION Object Type Attributes" summary="This table describes the attributes of the JOB object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Attribute</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>Name of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><code>job_class</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>Name of the job class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><code>job_style</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>Style of the job:</p>
<ul>
<li>
<p><code>REGULAR</code></p>
</li>
<li>
<p><code>LIGHTWEIGHT</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t5" headers="r1c1-t5">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t5 r1c2-t5">
<p>Name of the program that the job runs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t5" headers="r1c1-t5">
<p><code>job_action</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t5 r1c2-t5">
<p>Inline action of the job. This is either the code for an anonymous PL/SQL block or the name of a stored procedure, external executable, or chain.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t5" headers="r1c1-t5">
<p><code>job_type</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t5 r1c2-t5">
<p>Job action type ('<code>PLSQL_BLOCK</code>', '<code>STORED_PROCEDURE</code>', '<code>EXECUTABLE</code>', or '<code>CHAIN</code>')</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t5" headers="r1c1-t5">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t5 r1c2-t5">
<p>Name of the schedule that specifies when the job has to execute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t5" headers="r1c1-t5">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t5 r1c2-t5">
<p>Inline time-based schedule</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t5" headers="r1c1-t5">
<p><code>schedule_limit</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t5 r1c2-t5">
<p>Maximum delay time between scheduled and actual job start before a job run is canceled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t5" headers="r1c1-t5">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t5 r1c2-t5">
<p>Start date and time of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t5" headers="r1c1-t5">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t5 r1c2-t5">
<p>End date and time of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t5" headers="r1c1-t5">
<p><code>event_condition</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t5 r1c2-t5">
<p>Event condition for event-based jobs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t5" headers="r1c1-t5">
<p><code>queue_spec</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t5 r1c2-t5">
<p>File watcher name or queue specification for event-based jobs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t5" headers="r1c1-t5">
<p><code>number_of_arguments</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t5 r1c2-t5">
<p>Number of job arguments</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t5" headers="r1c1-t5">
<p><code>arguments</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t5 r1c2-t5">
<p>Array of job arguments</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t5" headers="r1c1-t5">
<p><code>job priority</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t5 r1c2-t5">
<p>Job priority</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t5" headers="r1c1-t5">
<p><code>job_weight</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t5 r1c2-t5">
<p>*** Deprecated in Oracle Database 11<span class="italic">g</span> Release 2 (11.2). Do not change the value of this attribute from the default, which is 1.</p>
<p>Weight of the job for parallel execution.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t5" headers="r1c1-t5">
<p><code>max_run_duration</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t5 r1c2-t5">
<p>Maximum run duration of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t5" headers="r1c1-t5">
<p><code>max_runs</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t5 r1c2-t5">
<p>Maximum number of runs before the job is marked as completed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t5" headers="r1c1-t5">
<p><code>max_failures</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t5 r1c2-t5">
<p>Maximum number of failures tolerated before the job is marked as broken</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t5" headers="r1c1-t5">
<p><code>logging_level</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t5 r1c2-t5">
<p>Job logging level</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t5" headers="r1c1-t5">
<p><code>restartable</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t5 r1c2-t5">
<p>Indicates whether the job is restartable (<code>TRUE</code>) or not (<code>FALSE</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t5" headers="r1c1-t5">
<p><code>stop_on_window_exit</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t5 r1c2-t5">
<p>Indicates whether the job is stopped when the window that it runs in ends (<code>TRUE</code>) or not (<code>FALSE</code>). Equivalent to the <code>stop_on_window_close</code> job attribute described in the <a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t5" headers="r1c1-t5">
<p><code>raise_events</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t5 r1c2-t5">
<p>State changes that raise events</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t5" headers="r1c1-t5">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t5 r1c2-t5">
<p>Comments on the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t5" headers="r1c1-t5">
<p><code>auto_drop</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t5 r1c2-t5">
<p>If <code>TRUE</code> (the default), indicates that the job should be dropped once completed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t5" headers="r1c1-t5">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t5 r1c2-t5">
<p>Indicates whether the job should be enabled immediately after creating it (<code>TRUE</code>) or not (<code>FALSE</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t5" headers="r1c1-t5">
<p><code>follow_default_timezone</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t5 r1c2-t5">
<p>If <code>TRUE</code> and if the job <code>start_date</code> is null, then when the <code>default_timezone</code> scheduler attribute is changed, the Scheduler recomputes the next run date and time for this job so that it is in accordance with the new time zone.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t5" headers="r1c1-t5">
<p><code>parallel_instances</code></p>
</td>
<td class="cellalignment1228" headers="r30c1-t5 r1c2-t5">
<p>For event-based jobs only.</p>
<p>If <code>TRUE</code>, on the arrival of the specified event, the Scheduler creates a new lightweight job to handle that event, so multiple instances of the same event-based job can run in parallel.</p>
<p>If <code>FALSE</code>, then an event is discarded if it is raised while the job that handles it is already running,</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t5" headers="r1c1-t5">
<p><code>aq_job</code></p>
</td>
<td class="cellalignment1228" headers="r31c1-t5 r1c2-t5">
<p>For internal use only</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t5" headers="r1c1-t5">
<p><code>instance_id</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t5 r1c2-t5">
<p>The instance ID of the instance that the job must run on</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t5" headers="r1c1-t5">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r33c1-t5 r1c2-t5">
<p>The credential to use for a single destination or the default credential for a group of destinations</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t5" headers="r1c1-t5">
<p><code>destination</code></p>
</td>
<td class="cellalignment1228" headers="r34c1-t5 r1c2-t5">
<p>The name of a single external destination or database destination, or a group name of type external destination or database destination</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t5" headers="r1c1-t5">
<p><code>database_role</code></p>
</td>
<td class="cellalignment1228" headers="r35c1-t5 r1c2-t5">
<p>In an Oracle Data Guard environment, the database role ('<code>PRIMARY</code>' or '<code>LOGICAL</code> <code>STANDBY</code>') for which the job runs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t5" headers="r1c1-t5">
<p><code>allow_runs_in_restricted_mode</code></p>
</td>
<td class="cellalignment1228" headers="r36c1-t5 r1c2-t5">
<p>If <code>TRUE</code>, the job is permitted to run when the database is in restricted mode, provided that the job owner is permitted to log in during this mode</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div id="ARPLS72244" class="refsect3"><a id="sthref8154"></a>
<h4 class="refsect3"><a id="sthref8155"></a>JOB_DEFINITION Constructor Function</h4>
<p>This constructor function constructs a <code>job_definition</code> object.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8156"></a>Syntax</p>
<pre>
constructor function job_definition (
    job_name                IN     VARCHAR2,
    job_style               IN     VARCHAR2 DEFAULT 'REGULAR',
    program_name            IN     VARCHAR2 DEFAULT NULL,
    job_action              IN     VARCHAR2 DEFAULT NULL,
    job_type                IN     VARCHAR2 DEFAULT NULL,
    schedule_name           IN     VARCHAR2 DEFAULT NULL,
    repeat_interval         IN     VARCHAR2 DEFAULT NULL,
    event_condition         IN     VARCHAR2 DEFAULT NULL,
    queue_spec              IN     VARCHAR2 DEFAULT NULL,
    start_date              IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    end_date                IN     TIMESTAMP WITH TIME ZONE DEFAULT NULL,
    number_of_arguments     IN     NATURAL DEFAULT NULL,
    arguments               IN     SYS.JOBARG_ARRAY DEFAULT NULL,
    job_class               IN     VARCHAR2 DEFAULT 'DEFAULT_JOB_CLASS',
    schedule_limit          IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    job_priority            IN     NATURAL DEFAULT NULL,
    job_weight              IN     NATURAL DEFAULT NULL,
    max_run_duration        IN     INTERVAL DAY TO SECOND DEFAULT NULL,
    max_runs                IN     NATURAL DEFAULT NULL,
    max_failures            IN     NATURAL DEFAULT NULL,
    logging_level           IN     NATURALN DEFAULT 64,
    restartable             IN     BOOLEAN DEFAULT FALSE,
    stop_on_window_close    IN     BOOLEAN DEFAULT FALSE,
    raise_events            IN     NATURAL DEFAULT NULL,
    comments                IN     VARCHAR2 DEFAULT NULL,
    auto_drop               IN     BOOLEAN DEFAULT TRUE,
    enabled                 IN     BOOLEAN DEFAULT FALSE,
    follow_default_timezone IN     BOOLEAN DEFAULT FALSE,
    parallel_instances      IN     BOOLEAN DEFAULT FALSE,
    aq_job                  IN     BOOLEAN DEFAULT FALSE,
    instance_id             IN     NATURAL DEFAULT NULL,
    credential_name         IN     VARCHAR2 DEFAULT NULL,
    destination             IN     VARCHAR2 DEFAULT NULL,
    database_role           IN     VARCHAR2 DEFAULT NULL,
    allow_runs_in_restricted_mode IN BOOLEAN DEFAULT FALSE)
    RETURN SELF AS RESULT;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72961" class="refsect2"><a id="BABHAFDE"></a>
<hr />
<h4 class="refsect2"><a id="sthref8157"></a>JOB_DEFINITION_ARRAY Table Type</h4>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8158"></a>Syntax</p>
<pre>
TYPE job_definition_array IS TABLE OF job_definition;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72246" class="refsect2"><a id="BABEHCEH"></a>
<hr />
<h3 class="refsect2"><a id="sthref8159"></a>JOBATTR Object Type</h3>
<p>This type is used by the <code>SET_JOB_ATTRIBUTES</code> procedure and represents a job attribute in a batch of job attributes.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8160"></a>Syntax</p>
<pre>
TYPE jobattr IS OBJECT (
   job_name             VARCHAR2(100),
   attr_name            VARCHAR2(30),
   char_value           VARCHAR2(4000),
   char_value2          VARCHAR2(4000),
   args_value           JOBARG_ARRAY,
   num_value            NUMBER,
   timestamp_value      TIMESTAMP(6) WITH TIME ZONE,
   interval_value       INTERVAL DAY(2) TO SECOND(6));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8161"></a>Attributes</p>
<div id="ARPLS72247" class="tblformal">
<p class="titleintable"><a id="sthref8162"></a><a id="sthref8163"></a>Table 129-4 JOBATTR Object Type Attributes</p>
<table class="cellalignment1229" title="JOBATTR Object Type Attributes" summary="This table describes the attributes of the JOBATTR object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Attribute</th>
<th class="cellalignment1227" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p>Name of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><code>attr_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p>Name of the attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><code>char_value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p>Value of the argument if the type is <code>VARCHAR2</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t6" headers="r1c1-t6">
<p><code>char_value2</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c2-t6">
<p>Second <code>VARCHAR2</code> attribute value</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t6" headers="r1c1-t6">
<p><code>args_value</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c2-t6">
<p>Value of the argument if the type is a <code>JOBARG</code> array</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t6" headers="r1c1-t6">
<p><code>num_value</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c2-t6">
<p>Value of the argument if the type is <code>NUMBER</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t6" headers="r1c1-t6">
<p><code>timestamp_value</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c2-t6">
<p>Value of the argument if the type is <code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t6" headers="r1c1-t6">
<p><code>interval_value</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c2-t6">
<p>Value of the argument if the type is <code>INTERVAL DAY TO SECOND</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div id="ARPLS72248" class="refsect3"><a id="sthref8164"></a>
<h4 class="refsect3"><a id="sthref8165"></a>JOBATTR Constructor Function</h4>
<p>This constructor function constructs a job attribute. It is overloaded to create attribute values of the following types: <code>VARCHAR2</code>, <code>NUMBER</code>, <code>TIMESTAMP WITH TIME ZONE</code>, <code>INTERVAL DAY TO SECOND</code>, and an array of <code>JOBARG</code> types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8166"></a>Syntax</p>
<pre>
constructor function jobattr (
   job_name            IN VARCHAR2,
   attr_name           IN VARCHAR2,
   attr_value          IN VARCHAR2,
   attr_value2         IN VARCHAR2 DEFAULT NULL)
   RETURN SELF AS RESULT;
</pre>
<pre>
constructor function jobattr (
   job_name            IN VARCHAR2,
   attr_name           IN VARCHAR2,
   attr_value          IN [NUMBER, BOOLEAN,
                           TIMESTAMP WITH TIME ZONE,
                           INTERVAL DAY TO SECOND, JOBARG_ARRAY])
   RETURN SELF AS RESULT;
</pre>
<pre>
constructor function jobattr (
   job_name            IN VARCHAR2,
   attr_name           IN VARCHAR2)
   RETURN SELF AS RESULT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8167"></a>Parameters</p>
<div id="ARPLS72249" class="tblformal">
<p class="titleintable"><a id="sthref8168"></a><a id="sthref8169"></a>Table 129-5 JOBATTR Constructor Function Parameters</p>
<table class="cellalignment1229" title="JOBATTR Constructor Function Parameters" summary="This table describes parameters used by the JOBATTR constructor function." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Parameter</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Name of the job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><code>attr_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>Name of the argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t7" headers="r1c1-t7">
<p><code>attr_value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c2-t7">
<p>Value of the argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t7" headers="r1c1-t7">
<p><code>attr_value2</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t7 r1c2-t7">
<p>Most attributes have only one value associated with them, but some can have two. The <code>attr_value2</code> argument is for this optional second value.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72250" class="refsect2"><a id="BABEBCJF"></a>
<hr />
<h4 class="refsect2"><a id="sthref8170"></a>JOBATTR_ARRAY Table Type</h4>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8171"></a>Syntax</p>
<pre>
TYPE jobattr_array IS TABLE OF jobattr;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72251" class="refsect2"><a id="BABGIJJC"></a>
<hr />
<h3 class="refsect2"><a id="sthref8172"></a>SCHEDULER$_STEP_TYPE Object Type</h3>
<p>This type is used by <code>RUN_CHAIN</code> to return a list of chain steps with an initial state.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8173"></a>Syntax</p>
<pre>
TYPE scheduler$_step_type IS OBJECT (
   step_name  VARCHAR2(32),
   step_type  VARCHAR2(32));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8174"></a>Attributes</p>
<div id="ARPLS72252" class="tblformal">
<p class="titleintable"><a id="sthref8175"></a><a id="sthref8176"></a>Table 129-6 SCHEDULER$_STEP_TYPE Object Type Attributes</p>
<table class="cellalignment1229" title="SCHEDULER$_STEP_TYPE Object Type Attributes" summary="This table describes the attributes of the SCHEDULER$_STEP_TYPE object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Attribute</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>Name of the step</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>step_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>State of the step</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72253" class="refsect2"><a id="BABICDGE"></a>
<hr />
<h4 class="refsect2"><a id="sthref8177"></a>SCHEDULER$_STEP_TYPE_LIST Table Type</h4>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8178"></a>Syntax</p>
<pre>
TYPE scheduler$_step_type_list IS TABLE OF scheduler$_step_type;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72254" class="refsect2"><a id="BABJBIIH"></a>
<hr />
<h3 class="refsect2">SCHEDULER$_EVENT_INFO Object Type</h3>
<p>This the data type of the Scheduler event queue <code>SYS.SCHEDULER$_EVENT_QUEUE</code>, from which your application consumes job state events raised by the Scheduler. It is a secure queue owned by <code>SYS</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8179"></a>Syntax</p>
<pre>
TYPE SCHEDULER$_EVENT_INFO IS OBJECT (
  event_type         VARCHAR2(4000),
  object_owner       VARCHAR2(4000),
  object_name        VARCHAR2(4000),
  event_timestamp    TIMESTAMP WITH TIME ZONE,
  error_code         NUMBER,
  error_msg          VARCHAR2(4000),
  event_status       NUMBER,
  log_id             NUMBER,
  run_count          NUMBER,
  failure_count      NUMBER,
  retry_count        NUMBER,
  spare1             NUMBER,
  spare2             NUMBER,
  spare3             VARCHAR2(4000),
  spare4             VARCHAR2(4000),
  spare5             TIMESTAMP WITH TIME ZONE,
  spare6             TIMESTAMP WITH TIME ZONE,
  spare7             RAW(2000),
  spare8             RAW(2000));
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8180"></a>Attributes</p>
<div id="ARPLS72255" class="tblformal">
<p class="titleintable"><a id="sthref8181"></a><a id="sthref8182"></a>Table 129-7 SCHEDULER_EVENT_INFO Object Type Attributes</p>
<table class="cellalignment1229" title="SCHEDULER_EVENT_INFO Object Type Attributes" summary="This table has two columns: Attribute and Description. It describes the attributes for the SCHEDULER$_EVENT_INFO object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Attribute</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><code>event_type</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>One of "<code>JOB_STARTED</code>", "<code>JOB_SUCCEEDED</code>", "<code>JOB_FAILED</code>", "<code>JOB_BROKEN</code>", "<code>JOB_COMPLETED</code>", "<code>JOB_STOPPED</code>", "<code>JOB_SCH_LIM_REACHED</code>", "<code>JOB_DISABLED</code>", "<code>JOB_CHAIN_STALLED</code>", "<code>JOB_OVER_MAX_DUR</code>".</p>
<p>For descriptions of these event types, see <a href="#BABCGGDC">Table 129-82, "Event Types Raised by the Scheduler"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><code>object_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p>Owner of the job that raised the event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t9" headers="r1c1-t9">
<p><code>object_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t9 r1c2-t9">
<p>Name of the job that raised the event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t9" headers="r1c1-t9">
<p><code>event_timestamp</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t9 r1c2-t9">
<p>Time at which the event occurred</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t9" headers="r1c1-t9">
<p><code>error_code</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t9 r1c2-t9">
<p>Applicable only when an error is thrown during job execution. Contains the top-level error code.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t9" headers="r1c1-t9">
<p><code>error_msg</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t9 r1c2-t9">
<p>Applicable only when an error is thrown during job execution. Contains the entire error stack.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t9" headers="r1c1-t9">
<p><code>event_status</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t9 r1c2-t9">
<p>Adds further qualification to the event type. If <code>event_type</code> is "<code>JOB_STARTED</code>," status 1 indicates that it is a normal start, and status 2 indicates that it is a retry.</p>
<p>If <code>event_type</code> is "<code>JOB_FAILED</code>," status 4 indicates that it was a failure due to an error that was thrown during job execution, and status 8 indicates that it was an abnormal termination of some kind.</p>
<p>If <code>event_type</code> is "<code>JOB_STOPPED</code>," status 16 indicates that it was a normal stop, and status 32 indicates that it was a stop with the <code>FORCE</code> option set to <code>TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t9" headers="r1c1-t9">
<p><code>log_id</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t9 r1c2-t9">
<p>Points to the ID in the scheduler job log from which additional information can be obtained. Note that there need not always be a log entry corresponding to an event. In such cases, <code>log_id</code> is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t9" headers="r1c1-t9">
<p><code>run_count</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t9 r1c2-t9">
<p>Run count for the job when the event was raised.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t9" headers="r1c1-t9">
<p><code>failure_count</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t9 r1c2-t9">
<p>Failure count for the job when the event was raised.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t9" headers="r1c1-t9">
<p><code>retry_count</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t9 r1c2-t9">
<p>Retry count for the job when the event was raised.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t9" headers="r1c1-t9">
<p><code>spare1</code> &ndash; <code>spare8</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t9 r1c2-t9">
<p>Not currently in use.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72256" class="refsect2"><a id="BABFJBDG"></a>
<hr />
<h3 class="refsect2">SCHEDULER_FILEWATCHER_RESULT Object Type</h3>
<p>This is the data type of a file arrival event message. You access the event message as a parameter of an event-based job (or a parameter of a program referenced by an event-based job). The message contains information needed to locate and process a file that arrived on a local or remote system.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8183"></a>Syntax</p>
<pre>
TYPE scheduler_filewatcher_result IS OBJECT (
  destination         VARCHAR2(4000),
  directory_path      VARCHAR2(4000),
  actual_file_name    VARCHAR2(4000),
  file_size           NUMBER,
  file_timestamp      TIMESTAMP WITH TIME ZONE,
  ts_ms_from_epoch    NUMBER,
  matching_requests   SYS.SCHEDULER_FILEWATCHER_REQ_LIST);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8184"></a>Attributes</p>
<div id="ARPLS72257" class="tblformal">
<p class="titleintable"><a id="sthref8185"></a><a id="sthref8186"></a>Table 129-8 SCHEDULER_FILEWATCHER_RESULT Object Type Attributes</p>
<table class="cellalignment1229" title="SCHEDULER_FILEWATCHER_RESULT Object Type Attributes" summary="This table describes the attributes of the JOBATTR object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t10">Attribute</th>
<th class="cellalignment1227" id="r1c2-t10">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t10" headers="r1c1-t10">
<p><code>destination</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t10 r1c2-t10">
<p>Destination at which the file was found, expressed as a host name or IP address.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t10" headers="r1c1-t10">
<p><code>directory_path</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t10 r1c2-t10">
<p>Absolute path of directory in which the file was found.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t10" headers="r1c1-t10">
<p><code>actual_file_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t10 r1c2-t10">
<p>Actual name of the file that was found. If the file name specified in the file watcher did not contain wildcards, then this is the same as the name specified in the file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t10" headers="r1c1-t10">
<p><code>file_size</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t10 r1c2-t10">
<p>Size of the file that was found, in bytes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t10" headers="r1c1-t10">
<p><code>file_timestamp</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t10 r1c2-t10">
<p>Timestamp assigned to the file when the file watcher considered the file found, based on the minimum file size and steady state duration attributes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t10" headers="r1c1-t10">
<p><code>ts_ms_from_epoch</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t10 r1c2-t10">
<p>For internal use only.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t10" headers="r1c1-t10">
<p><code>matching_requests</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t10 r1c2-t10">
<p>List of matching requests. This is a <code>TABLE</code> of type objects <code>SCHEDULER_FILEWATCHER_REQUEST</code>. Each matching request corresponds to a file watcher whose <code>destination</code>, <code>directory_path</code>, and <code>file_name</code> attributes matched the arrived file. See <a href="#BABEHBBJ">"SCHEDULER_FILEWATCHER_REQUEST Object Type"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72258" class="refsect2"><a id="BABEHBBJ"></a>
<hr />
<h3 class="refsect2">SCHEDULER_FILEWATCHER_REQUEST Object Type</h3>
<p>This type is returned in the <code>matching_requests</code> attribute of the <a href="#BABFJBDG">SCHEDULER_FILEWATCHER_RESULT Object Type</a>. Its attributes are similar to the attributes of a file watcher.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8187"></a>Syntax</p>
<pre>
TYPE scheduler_filewatcher_request IS OBJECT (
  owner                 VARCHAR2(4000),
  name                  VARCHAR2(4000),
  requested_path_name   VARCHAR2(4000),
  requested_file_name   VARCHAR2(4000),
  credential_owner      VARCHAR2(4000),
  credential_name       VARCHAR2(4000),
  min_file_size         NUMBER,
  steady_state_dur      NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8188"></a>Attributes</p>
<div id="ARPLS72259" class="tblformal">
<p class="titleintable"><a id="sthref8189"></a><a id="sthref8190"></a>Table 129-9 SCHEDULER_FILEWATCHER_RESULT Object Type Attributes</p>
<table class="cellalignment1229" title="SCHEDULER_FILEWATCHER_RESULT Object Type Attributes" summary="This table describes the attributes of the JOBATTR object type." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Attribute</th>
<th class="cellalignment1227" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>owner</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p>Owner of the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t11" headers="r1c1-t11">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c2-t11">
<p>Name of the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t11" headers="r1c1-t11">
<p><code>requested_path_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t11 r1c2-t11">
<p>Value of the <code>directory_path</code> attribute of the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t11" headers="r1c1-t11">
<p><code>requested_file_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t11 r1c2-t11">
<p>Value of the <code>file_name</code> attribute of the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t11" headers="r1c1-t11">
<p><code>credential_owner</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t11 r1c2-t11">
<p>Owner of the credential referenced by the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t11" headers="r1c1-t11">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t11 r1c2-t11">
<p>Name of the credential referenced by the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t11" headers="r1c1-t11">
<p><code>min_file_size</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t11 r1c2-t11">
<p>Value of the <code>min_file_size</code> attribute of the matched file watcher.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t11" headers="r1c1-t11">
<p><code>steady_state_dur</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t11 r1c2-t11">
<p>Value of the <code>steady_state_duration</code> attribute of the matched file watcher.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIHDJEEB"></a>
<hr />
<div id="ARPLS72260" class="refsect1">
<h2 class="refsect1">Using DBMS_SCHEDULER</h2>
<p>This section contains:</p>
<ul>
<li>
<p><a href="#i1013037">Security Model</a></p>
</li>
<li>
<p><a href="#CHDJJJAB">Rules and Limits</a></p>
</li>
<li>
<p><a href="#BABEJGCH">Operational Notes</a></p>
</li>
</ul>
<div id="ARPLS72261" class="refsect2"><a id="i1013037"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>The <code>DBMS_SCHEDULER</code> package ignores privileges granted on scheduler objects, such as jobs or chains, through roles. Object privileges must be granted directly to the user.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73183" class="refsect2"><a id="CHDJJJAB"></a>
<hr />
<h3 class="refsect2">Rules and Limits</h3>
<p>The following rules apply when using the <code>DBMS_SCHEDULER</code> package:</p>
<ul>
<li>
<p>Only <code>SYS</code> can perform actions on objects in the <code>SYS</code> schema.</p>
</li>
<li>
<p>Several of the procedures accept comma-delimited lists of object names. If you provide a list of names, then the Scheduler stops executing the list at the first object that returns an error. Therefore, the Scheduler does not perform the tasks needed for the remaining objects on the list.</p>
<p>For example, consider the statement <code>DBMS_SCHEDULER.STOP_JOB ('job1, job2, job3, sys.jobclass1, sys.jobclass2, sys.jobclass3');</code></p>
<p>If <code>job3</code> cannot be stopped, then the jobs that follow it, <code>jobclass1</code>, <code>jobclass2</code>, and <code>jobclass3</code> cannot be stopped. The jobs that preceded <code>job3</code>, <code>job1</code> and <code>job2</code>, are stopped.</p>
</li>
<li>
<p>Performing an action on an object that does not exist returns a PL/SQL exception stating that the object does not exist.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72262" class="refsect2"><a id="BABEJGCH"></a>
<hr />
<h3 class="refsect2">Operational Notes</h3>
<p>The Scheduler uses a rich <span class="bold">calendaring syntax</span> to enable you to define repeating schedules, such as "every Tuesday and Friday at 4:00 p.m." or "the second Wednesday of every month." This calendaring syntax is used in calendaring expressions in the <code>repeat_interval</code> argument of a number of package subprograms. Evaluating a calendaring expression results in a set of discrete timestamps.</p>
<p>See <a class="olink ADMIN10040" href="../../server.112/e25494/scheduse.htm#ADMIN10040"><span class="italic">Oracle Database Administrator's Guide</span></a> for examples of the calendaring syntax.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="BABFBCEF"></a>Calendaring Syntax</p>
<p>This section starts with the calendaring syntax. It is followed by descriptions of various parts of the syntax.</p>
<p>In the calendaring syntax, * means 0 or more.</p>
<pre>
repeat_interval = regular_schedule | combined_schedule
 
regular_schedule = frequency_clause
[";" interval_clause] [";" bymonth_clause] [";" byweekno_clause]
[";" byyearday_clause] [";" bydate_clause] [";" bymonthday_clause]
[";" byday_clause] [";" byhour_clause] [";" byminute_clause]
[";" bysecond_clause] [";" bysetpos_clause] [";" include_clause]
[";" exclude_clause] [";" intersect_clause][";" periods_clause]
[";" byperiod_clause]
 
combined_schedule = schedule_list
</pre>
<pre>
frequency_clause = "FREQ" "=" ( predefined_frequency | user_defined_frequency )
predefined_frequency = "YEARLY" | "MONTHLY" | "WEEKLY" | "DAILY" | 
   "HOURLY" | "MINUTELY" | "SECONDLY"
user_defined_frequency = named_schedule

interval_clause = "INTERVAL" "=" intervalnum
   intervalnum = 1 through 99
bymonth_clause = "BYMONTH" "=" monthlist
   monthlist = month ( "," month)*
   month = numeric_month | char_month
   numeric_month = 1 | 2 | 3 ...  12
   char_month = "JAN" | "FEB" | "MAR" | "APR" | "MAY" | "JUN" |
   "JUL" | "AUG" | "SEP" | "OCT" | "NOV" | "DEC"
byweekno_clause = "BYWEEKNO" "=" weeknumber_list
   weeknumber_list = weeknumber ( "," weeknumber)*
   weeknumber = [minus] weekno
   weekno = 1 through 53
byyearday_clause = "BYYEARDAY" "=" yearday_list
   yearday_list = yearday ( "," yearday)*
   yearday = [minus] yeardaynum
   yeardaynum = 1 through 366
bydate_clause = "BYDATE" "=" date_list
   date_list = date ( "," date)*
   date = [YYYY]MMDD [ offset | span ]
bymonthday_clause = "BYMONTHDAY" "=" monthday_list
   monthday_list = monthday ( "," monthday)*
   monthday = [minus] monthdaynum
   monthdaynum = 1 through 31
byday_clause = "BYDAY" "=" byday_list
   byday_list = byday ( "," byday)*
   byday = [weekdaynum] day
   weekdaynum = [minus] daynum
   daynum = 1 through 53 /* if frequency is yearly */
   daynum = 1 through 5  /* if frequency is monthly */
   day = "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN"
byhour_clause = "BYHOUR" "=" hour_list
   hour_list = hour ( "," hour)*
   hour = 0 through 23
byminute_clause = "BYMINUTE" "=" minute_list
   minute_list = minute ( "," minute)*
   minute = 0 through 59
bysecond_clause = "BYSECOND" "=" second_list
   second_list = second ( "," second)*
   second = 0 through 59
bysetpos_clause = "BYSETPOS" "=" setpos_list
   setpos_list = setpos ("," setpos)*
   setpos = [minus] setpos_num
   setpos_num = 1 through 9999

include_clause = "INCLUDE" "=" schedule_list
exclude_clause = "EXCLUDE" "=" schedule_list
intersect_clause = "INTERSECT" "=" schedule_list
schedule_list = schedule_clause ("," schedule_clause)*
schedule_clause = named_schedule [ offset ]
named_schedule = [schema "."] schedule
periods_clause = "PERIODS" "=" periodnum
byperiod_clause = "BYPERIOD" "=" period_list
period_list = periodnum ("," periodnum)*
periodnum = 1 through 100

offset = ("+" | "-") ["OFFSET:"] duration_val
span = ("+" | "-" | "^") "SPAN:" duration_val
duration_val = dur-weeks | dur_days
dur_weeks = numofweeks "W"
dur_days = numofdays "D"
numofweeks = 1 through 53
numofdays = 1 through 376
minus = "-"
</pre>
<div id="ARPLS72263" class="tblformal">
<p class="titleintable"><a id="sthref8191"></a><a id="CIHCGBDD"></a>Table 129-10 Values for repeat_interval</p>
<table class="cellalignment1229" title="Values for repeat_interval" summary="This table describes Values for Repeat Intervals used by the CREATE_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Name</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>FREQ</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>This specifies the type of recurrence. It must be specified. The possible predefined frequency values are YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, and SECONDLY. Alternatively, specifies an existing schedule to use as a user-defined frequency.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>INTERVAL</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>This specifies a positive integer representing how often the recurrence repeats. The default is 1, which means every second for secondly, every day for daily, and so on. The maximum value is 99.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t12" headers="r1c1-t12">
<p><code>BYMONTH</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t12 r1c2-t12">
<p>This specifies which month or months you want the job to execute in. You can use numbers such as 1 for January and 3 for March, as well as three-letter abbreviations such as FEB for February and JUL for July.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t12" headers="r1c1-t12">
<p><code>BYWEEKNO</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t12 r1c2-t12">
<p>This specifies the week of the year as a number. It follows ISO-8601, which defines the week as starting with Monday and ending with Sunday; and the first week of a year as the first week, which is mostly within the Gregorian year. The first week is equivalent to the following two variants: the week that contains the first Thursday of the Gregorian year; and the week containing January 4th.</p>
<p>The ISO-8601 week numbers are integers from 1 to 52 or 53; parts of week 1 may be in the previous calendar year; parts of week 52 may be in the following calendar year; and if a year has a week 53, parts of it must be in the following calendar year.</p>
<p>As an example, in the year 1998, the ISO week 1 began on Monday December 29th, 1997; and the last ISO week (week 53) ended on Sunday January 3rd, 1999. So December 29th, 1997, is in the ISO week 1998-01, and January 1st, 1999, is in the ISO week 1998-53.</p>
<p><code>byweekno</code> is only valid for YEARLY.</p>
<p>Examples of invalid specifications are <code>"FREQ=YEARLY; BYWEEKNO=1; BYMONTH=12"</code> and <code>"FREQ=YEARLY;BYWEEKNO=53;BYMONTH=1"</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t12" headers="r1c1-t12">
<p><code>BYYEARDAY</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t12 r1c2-t12">
<p>This specifies the day of the year as a number. Valid values are 1 to 366. An example is 69, which is March 10 (31 for January, 28 for February, and 10 for March). 69 evaluates to March 10 for non-leap years and March 9 in leap years. -2 will always evaluate to December 30th independent of whether it is a leap year.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t12" headers="r1c1-t12">
<p><code>BYDATE</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t12 r1c2-t12">
<p>This specifies a list of dates, where each date is of the form <code>[YYYY]MMDD</code>. A list of consecutive dates can be generated by using the <code>SPAN</code> modifier, and a date can be adjusted with the <code>OFFSET</code> modifier. An example of a simple <code>BYDATE</code> clause follows:</p>
<p><code>BYDATE=0115,0315,0615,0915,1215,20060115</code></p>
<p>The following <code>SPAN</code> example is equivalent to <code>BYDATE=0110,0111,0112,0113,0114</code>, which is a span of 5 days starting at 1/10:</p>
<p><code>BYDATE=0110+SPAN:5D</code></p>
<p>The plus sign in front of the <code>SPAN</code> keyword indicates a span starting at the supplied date. The minus sign indicates a span ending at the supplied date, and the "^" sign indicates a span of <code><span class="codeinlineitalic">n</span></code> days or weeks centered around the supplied date. If <code><span class="codeinlineitalic">n</span></code> is an even number, it is adjusted up to the next odd number.</p>
<p>Offsets adjust the supplied date by adding or subtracting <code><span class="codeinlineitalic">n</span></code> days or weeks. <code>BYDATE=0205-OFFSET:2W</code> is equivalent to <code>BYDATE=0205-14D</code> (the <code>OFFSET:</code> keyword is optional), which is also equivalent to <code>BYDATE=0122</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t12" headers="r1c1-t12">
<p><code>BYMONTHDAY</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t12 r1c2-t12">
<p>This specifies the day of the month as a number. Valid values are 1 to 31. An example is 10, which means the 10th day of the selected month. You can use the minus sign (-) to count backward from the last day, so, for example, <code>BYMONTHDAY=-1</code> means the last day of the month and <code>BYMONTHDAY=-2</code> means the next to last day of the month.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t12" headers="r1c1-t12">
<p><code>BYDAY</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t12 r1c2-t12">
<p>This specifies the day of the week from Monday to Sunday in the form MON, TUE, and so on. Using numbers, you can specify the 26th Friday of the year, if using a YEARLY frequency, or the 4th THU of the month, using a MONTHLY frequency. Using the minus sign, you can say the second to last Friday of the month. For example, <code>-1 FRI</code> is the last Friday of the month.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t12" headers="r1c1-t12">
<p><code>BYHOUR</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t12 r1c2-t12">
<p>This specifies the hour on which the job is to run. Valid values are 0 to 23. As an example, 10 means 10 a.m.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t12" headers="r1c1-t12">
<p><code>BYMINUTE</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t12 r1c2-t12">
<p>This specifies the minute on which the job is to run. Valid values are 0 to 59. As an example, 45 means 45 minutes past the chosen hour.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t12" headers="r1c1-t12">
<p><code>BYSECOND</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t12 r1c2-t12">
<p>This specifies the second on which the job is to run. Valid values are 0 to 59. As an example, 30 means 30 seconds past the chosen minute.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t12" headers="r1c1-t12">
<p><code>BYSETPOS</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t12 r1c2-t12">
<p>This selects one or more items, by position, in the list of timestamps that result after the whole calendaring expression is evaluated. It is useful for requirements such as running a job on the last workday of the month. Rather than attempting to express this with the other <code>BY</code> clauses, you can code the calendaring expression to evaluate to a list of every workday of the month, and then add the <code>BYSETPOS</code> clause to select only the last item of that list. Assuming that workdays are Monday through Friday, the syntax would then be:</p>
<pre>
FREQ=MONTHLY; BYDAY=MON,TUE,WED,THU,FRI; BYSETPOS=-1
</pre>
<p>Valid values are 1 through 9999. A negative number selects an item from the end of the list (-1 is the last item, -2 is the next to last item, and so on) and a positive number selects from the front of the list. The <code>BYSETPOS</code> clause is always evaluated last. <code>BYSETPOS</code> is only supported with the <code>MONTHLY</code> and <code>YEARLY</code> frequencies.</p>
<p>The <code>BYSETPOS</code> clause is applied to the list of timestamps once per frequency period. For example, when the frequency is defined as <code>MONTHLY</code>, the Scheduler determines all valid timestamps for the month, orders that list, and then applies the <code>BYSETPOS</code> clause. The Scheduler then moves on to the next month and repeats the procedure. Assuming a start date of Jun 10, 2004, the example evaluates to: Jun 30, Jul 30, Aug 31, Sep 30, Oct 29, and so on.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t12" headers="r1c1-t12">
<p><code>INCLUDE</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t12 r1c2-t12">
<p>This includes one or more named schedules in the calendaring expression. That is, the set of timestamps defined by each included named schedule is added to the results of the calendaring expression. If an identical timestamp is contributed by both an included schedule and the calendaring expression, it is included in the resulting set of timestamps only once. The named schedules must have been defined with the <code>CREATE_SCHEDULE</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t12" headers="r1c1-t12">
<p><code>EXCLUDE</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t12 r1c2-t12">
<p>This excludes one or more named schedules from the calendaring expression. That is, the set of timestamps defined by each excluded named schedule is removed from the results of the calendaring expression. The named schedules must have been defined with the <code>CREATE_SCHEDULE</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t12" headers="r1c1-t12">
<p><code>INTERSECT</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t12 r1c2-t12">
<p>This specifies an intersection between the calendaring expression results and the set of timestamps defined by one or more named schedules. Only the timestamps that appear both in the calendaring expression and in one of the named schedules are included in the resulting set of timestamps.</p>
<p>For example, assume that the named schedule <code>last_sat</code> indicates the last Saturday in every month, and that for the year 2005, the only months where the last day of the month is also a Saturday are April and December. Assume also that the named schedule <code>end_qtr</code> indicates the last day of each quarter in 2005:</p>
<pre>
3/31/2005, 6/30/2005, 9/30/2005, 12/31/2005
</pre>
<p>These calendaring expressions result in the dates that follow:</p>
<pre>
3/31/2005, 4/30/2005, 6/30/2005, 9/30/2005, 12/31/2005
</pre>
<pre>
FREQ=MONTHLY; BYMONTHDAY=-1; INTERSECT=last_sat,end_qtr
</pre>
<p>In this example, the terms <code>FREQ=MONTHLY; BYMONTHDAY=-1</code> indicate the last day of each month.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t12" headers="r1c1-t12">
<p><code>PERIODS</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t12 r1c2-t12">
<p>This identifies the number of periods that together form one cycle of a user-defined frequency. It is used in the <code>repeat_interval</code> expression of the schedule that defines the user-defined frequency. It is mandatory when the <code>repeat_interval</code> expression in the main schedule contains a <code>BYPERIOD</code> clause. The following example defines the quarters of a fiscal year.</p>
<pre>
FREQ=YEARLY;BYDATE=0301,0601,0901,1201;PERIODS=4
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t12" headers="r1c1-t12">
<p><code>BYPERIOD</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t12 r1c2-t12">
<p>This selects periods from a user-defined frequency. For example, if a main schedule names a user-defined frequency schedule that defines the fiscal quarters shown in the previous example, the clause <code>BYPERIOD=2,4</code> in the main schedule selects the 2nd and 4th fiscal quarters.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a id="ARPLS72264"></a><span class="subhead3">Combining Schedules&nbsp;</span>There are two ways to combine schedules:</p>
<ul>
<li>
<p>Using a combined schedule expression, which is a list of individual schedules</p>
<p>For example, to create a schedule for all company holidays, you provide a list of individual schedules, where each schedule in the list defines a single holiday. The Scheduler evaluates each individual schedule, and then returns a union of the timestamps returned by each individual schedule.</p>
</li>
<li>
<p>Embedding other schedules into the main schedule using <code>include</code>, <code>exclude</code>, and <code>intersect</code> clauses</p>
<p>With this method, the embedded schedules inherit certain attributes from the main schedule.</p>
<ul>
<li>
<p>Timestamps generated by the <code>INCLUDE</code> clause that fall into periods that are skipped by the main schedule are ignored. This is the case when the main schedule skips periods due to the <code>INTERVAL</code> clause, the <code>BYPERIOD</code> clause, or the <code>BYMONTH</code> clause for <code>freq=monthly</code>.</p>
</li>
<li>
<p>Days that are added by the <code>INCLUDE</code> clause follow the hourly/minutely/secondly execution pattern of the main schedule.</p>
</li>
<li>
<p>When the <code>INCLUDE</code> clause is present, no date-specific defaults are retrieved from the start date (but time-specific defaults can be). (See <a href="#BABJHEAB">"Start Dates and Repeat Intervals"</a>, later in this section.) For example, a <code>repeat_interval</code> of <code>FREQ=MONTHLY;INCLUDE=HOLIDAY</code> executes only on holidays and not on the month/day defaults retrieved from the start date.</p>
</li>
</ul>
<p>The following is an example:</p>
<pre>
BEGIN
dbms_scheduler.create_schedule('embed_sched', repeat_interval =&gt;
  'FREQ=YEARLY;BYDATE=0130,0220,0725');
dbms_scheduler.create_schedule('main_sched', repeat_interval =&gt;
  'FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=15;BYHOUR=9,17;INCLUDE=embed_sched');
END;
/
</pre>
<p>In this example, the dates 1/30, 2/20, and 7/25 are added to the main schedule. However, the Scheduler does not include dates that fall in months that are skipped by the <code>INTERVAL</code> clause. If the start date of the main schedule is 1/1/2005, then 2/20 is not added. On the dates that are added, the embedded schedule follows the execution pattern of the main schedule: jobs are executed at 9:00 a.m. and 5:00 p.m. on 1/30 and 7/25. If the embedded schedule does not itself have a start date, it inherits the start date from the main schedule.</p>
</li>
</ul>
<p><a id="ARPLS72265"></a><span class="subhead3">User-Defined Frequencies&nbsp;</span>Instead of using predefined frequencies like <code>DAILY</code>, <code>WEEKLY</code>, <code>MONTHLY</code>, and so on, you can create your own frequencies by creating a schedule that returns the start date of each period. For example, the following <code>repeat_interval</code> expression is used in a schedule named <code>fiscal_year</code> that defines the start of each quarter in a fiscal year:</p>
<pre>
FREQ=YEARLY;BYDATE=0301,0601,0901,1201;PERIODS=4
</pre>
<p>To return the last Wednesday of every quarter, you create a schedule (the "main schedule") that uses the <code>fiscal_year</code> schedule as a user-defined frequency:</p>
<pre>
FREQ=fiscal_year;BYDAY=-1WED
</pre>
<p>Periods in a user-defined frequency do not have to be equal in length. In the main schedule, the <code>BYSETPOS</code> clause and numbered weekdays are recalculated based on the size of each period. To select dates in specific periods, you must use the <code>BYPERIOD</code> clause in the main schedule. To enable this, the schedule that is used as the user-defined frequency must include a <code>PERIODS</code> clause, and it must set its start date appropriately. The first date returned by this schedule is used as the starting point of period 1.</p>
<p>As another example, assuming work days are Monday through Friday, to get the last work day of the 2nd and 4th quarters of the fiscal year, the <code>repeat_interval</code> clause in the main schedule is the following:</p>
<pre>
FREQ=fiscal_year;BYDAY=MON,TUE,WED,THU,FRI;BYPERIOD=2,4;BYSETPOS=-1
</pre>
<p><a id="BABJHEAB"></a><a id="ARPLS72266"></a><span class="subhead3">Start Dates and Repeat Intervals&nbsp;</span>The Scheduler retrieves the date and time from the job or schedule start date and incorporates them as defaults into the <code>repeat_interval</code>. For example, if the specified frequency is yearly and there is no <code>BYMONTH</code> or <code>BYMONTHDAY</code> clause in the repeat interval, then the month and day that the job runs on are retrieved from the start date. Similarly, if frequency is monthly but there is no <code>BYMONTHDAY</code> clause in the repeat interval, then the day of the month that the job runs on is retrieved from the start date. If present, <code>BYHOUR</code>, <code>BYMINUTE</code>, and <code>BYSECOND</code> defaults are also retrieved from the start date, and used if those clauses are not specified. Note that if the <code>INCLUDE</code>, <code>EXCLUDE</code>, or <code>INTERSECT</code> clauses are present, no date-related defaults are retrieved from the start date, but time-related defaults are.The following are some examples:</p>
<pre>
start_date:      4/15/05 9:00:00
repeat_interval: freq=yearly
</pre>
<p>is expanded internally to:</p>
<pre>
freq=yearly;bymonth=4;bymonthday=15;byhour=9;byminute=0;bysecond=0
</pre>
<p>The preceding schedule executes on 04/15/05 9:00:00, 04/15/06 9:00:00, 04/15/07 9:00:00, and so on.</p>
<p>For the next example, assume that schedule <code>S1</code> has a <code>repeat_interval</code> of <code>FREQ=YEARLY;BYDATE=0701</code>.</p>
<pre>
start_date:      01/20/05 9:00:00
repeat_interval: freq=yearly;include=S1
</pre>
<p>is expanded internally to:</p>
<pre>
freq=yearly;byhour=9;byminute=0;bysecond=0;include=S1
</pre>
<p>Because an <code>INCLUDE</code> clause is present, date-related information is not retrieved from the start date. However, time-specific information is, so the preceding schedule executes on 07/01/05 9:00:00, 07/01/06 9:00:00, 07/01/08 9:00:00, and so on.</p>
<p><a id="ARPLS72267"></a><span class="subhead3">General Rules&nbsp;</span>When using a calendaring expression, consider the following rules:</p>
<ul>
<li>
<p>For a regular schedule (as opposed to a combined schedule), the calendar string must start with the frequency clause. All other clauses are optional and can be put in any order.</p>
</li>
<li>
<p>All clauses are separated by a semicolon, and each clause can be present at most once, with the exception of the <code>include</code>, <code>exclude</code>, and <code>intersect</code> clauses.</p>
</li>
<li>
<p>Spaces are allowed between syntax elements and the strings are case-insensitive.</p>
</li>
<li>
<p>The list of values for a specific <code>BY</code> clause do not need to be ordered.</p>
</li>
<li>
<p>When not enough <code>BY</code> clauses are present to determine what the next date is, this information is retrieved from the start date. For example, <code>"FREQ=YEARLY"</code> with a start date of 02/15/2003 becomes <code>"FREQ=YEARLY;BYMONTH=FEB; BYMONTHDAY=15"</code>, which means every year on the 15th of February.</p>
<p><code>"FREQ=YEARLY;BYMONTH=JAN,JUL"</code> with start date 01/21/2003 becomes <code>"FREQ=YEARLY;BYMONTH=JAN,JUL;BYMONTHDAY=21",</code> which means every year on January 21 and July 21.</p>
</li>
<li>
<p>The <code>byweekno</code> clause is only allowed if the frequency is <code>YEARLY</code>. It cannot be used with other frequencies. When it is present, it will return all days in that week number. If you want to limit it to specific days within the week, you have to add a <code>BYDAY</code> clause. For example, <code>"FREQ=YEARLY;BYWEEKNO=2"</code> with a start date of 01/01/2003 will return:</p>
<pre>
01/06/2003, 01/07/2003, 01/08/2003, 01/09/2003, 01/10/2003, 01/11/2003, 01/12/2003, 01/05/2004, 01/06/2004, 01/07/2004, .... and so on.
</pre>
<p>Note that when the <code>byweekno</code> clause is used, it is possible that the dates returned are from a year other than the current year. For example, if returning dates for the year 2004 and the calendar string is <code>"FREQ=YEARLY;BYWEEKNO=1,53"</code> for the specified week numbers in 2004, it will return the dates:</p>
<pre>
12/29/03, 12/30/03, 12/31/03, 01/01/04, 01/02/04, 01/03/04, 01/04/04, 12/27/04, 12/28/04, 12/29/04, 12/30/04, 12/31/04, 01/01/05, 01/02/05
</pre></li>
<li>
<p>For those <code>BY</code> clauses that do not have a consistent range of values, you can count backward by putting a "-" in front of the numeric value. For example, specifying <code>BYMONTHDAY=31</code> will not give you the last day of every month, because not every month has 31 days. Instead, <code>BYMONTHDAY=-1</code> will give you the last day of the month.</p>
<p>This is not supported for <code>BY</code> clauses that are fixed in size. In other words, <code>BYMONTH</code>, <code>BYHOUR</code>, <code>BYMINUTE</code>, and <code>BYSECOND</code> are not supported.</p>
</li>
<li>
<p>The basic values for the <code>BYDAY</code> clause are the days of the week. When the frequency is <code>YEARLY</code>, or <code>MONTHLY</code>, you are allowed to specify a positive or negative number in front of each day of the week. In the case of <code>YEARLY</code>, <code>BYDAY=40MON</code>, indicates the 40th Monday of the year. In the case of <code>MONTHLY, BYDAY=-2SAT</code>, indicates the second to last Saturday of the month.</p>
<p>Note that positive or negative numbers in front of the weekdays are not supported for other frequencies and that in the case of yearly, the number ranges from -53 ... -1, 1 ... 53, whereas for the monthly frequency it is limited to -5 ... -1, 1... 5.</p>
<p>If no number is present in front of the weekday it specifies, every occurrence of that weekday in the specified frequency.</p>
</li>
<li>
<p>The first day of the week is Monday.</p>
</li>
<li>
<p>Repeating jobs with frequencies smaller than daily follow their frequencies exactly across daylight savings adjustments. For example, suppose that a job is scheduled to repeat every 3 hours, the clock is moved forward from 1:00 a.m. to 2:00 a.m., and the last time the job ran was midnight. Its next scheduled time will be 4:00 a.m. Thus, the 3 hour period between subsequent job runs is retained. The same applies when the clock is moved back. This behavior is not the case for repeating jobs that have frequencies of daily or larger. For example, if a repeating job is supposed to be executed on a daily basis at midnight, it will continue to run at midnight if the clock is moved forward or backward. When the execution time of such a daily (or larger frequency) job happens to fall inside a window where the clock is moved forward, the job executes at the end of the window.</p>
</li>
<li>
<p>The calendaring syntax does not allow you to specify a time zone. Instead the Scheduler retrieves the time zone from the <code>start_date</code> argument. If jobs must follow daylight savings adjustments, then you must specify a region name for the time zone of the <code>start_date</code>. For example specifying the <code>start_date</code> time zone as '<code>US/Eastern</code>' in New York ensures that daylight saving adjustments are automatically applied. If instead, the time zone of the <code>start_date</code> is set to an absolute offset, such as '<code>-5:00</code>', then daylight savings adjustments are not followed and your job execution is off by an hour for half the year.</p>
</li>
<li>
<p>When <code>start_date</code> is <code>NULL</code>, the Scheduler determines the time zone for the repeat interval as follows:</p>
<ol>
<li>
<p>It checks whether or not the session time zone is a region name. The session time zone can be set by either:</p>
<ul>
<li>
<p>Issuing an <code>ALTER</code> <code>SESSION</code> statement, for example:</p>
<pre>
SQL&gt; ALTER SESSION SET time_zone = 'Asia/Shanghai';
</pre></li>
<li>
<p>Setting the <code>ORA_SDTZ</code> environment variable.</p>
</li>
</ul>
</li>
<li>
<p>If the session time zone is an absolute offset instead of a region name, the Scheduler uses the value of the <code>DEFAULT_TIMEZONE</code> Scheduler attribute. For more information, see the <a href="#i1004630">SET_SCHEDULER_ATTRIBUTE Procedure</a>.</p>
</li>
<li>
<p>If the <code>DEFAULT_TIMEZONE</code> attribute is <code>NULL</code>, the Scheduler uses the time zone of <code>systimestamp</code> when the job or window is enabled.</p>
</li>
</ol>
</li>
</ul>
<p><a id="ARPLS72268"></a><span class="subhead3">BYSETPOS Clause Rules&nbsp;</span>The following are rules for the <code>BYSETPOS</code> clause.</p>
<ul>
<li>
<p>The <code>BYSETPOS</code> clause is the last clause to be evaluated. It is processed after all other <code>BY</code> clauses and the <code>INCLUDE</code>, <code>EXCLUDE</code> and <code>INTERSECT</code> clauses have been evaluated.</p>
</li>
<li>
<p>The <code>INTERVAL</code> clause does not change the size of the period to which the <code>BYSETPOS</code> clause is applied. For example, when the frequency is set to monthly and interval is set to 3, the list of timestamps to which <code>BYSETPOS</code> is applied is generated from a month, not a quarter. The only impact of the <code>INTERVAL</code> clause is to cause months to be skipped. However, you can still select the second to last workday of the quarter like this:</p>
<pre>
FREQ=MONTHLY;INTERVAL=3;BYDAY=MON,TUE,WED,THU,FRI;BYSETPOS=-2
</pre>
<p>provided that you set the start date in the right month. This example returns the next to last workday of a month, and repeats once a quarter.</p>
</li>
<li>
<p>To get consistent results, the set to which <code>BYSETPOS</code> is applied is determined from the beginning of the frequency period independently of when the evaluation occurs. Whether the Scheduler evaluates</p>
<pre>
FREQ=MONTHLY;BYDAY=MON,TUE,FRI;BYSETPOS=1,3
</pre>
<p>on 01/01/2004 or 01/15/2004, in both cases the expression evaluates to Friday 01/02/2004, and Tuesday 01/06/2004. The only difference is that when the expression is evaluated on 01/15/2004, the Scheduler determines that there are no matches in January because the timestamps found are in the past, and it moves on to the matches in the next month, February.</p>
</li>
</ul>
<p><a id="ARPLS72269"></a><span class="subhead3">BYDATE Clause Rules&nbsp;</span>The following are rules for the <code>BYDATE</code> clause.</p>
<ul>
<li>
<p>If dates in the <code>BYDATE</code> clause do not have their optional year component, the job runs on those dates every year.</p>
</li>
<li>
<p>The job execution times on the included dates are derived from the <code>BY</code> clauses in the calendaring expression. For example, if <code>repeat_interval</code> is defined as</p>
<pre>
freq=daily;byhour=8,13,18;byminute=0;bysecond=0;bydate=0502,0922
</pre>
<p>then the execution times on 05/02 and 09/22 are 8:00 a.m., 1:00 p.m., and 6:00 p.m.</p>
</li>
</ul>
<p><a id="ARPLS72270"></a><span class="subhead3">EXCLUDE Clause Rules&nbsp;</span>Excluded dates without a time component are 24 hour periods. All timestamps that fall on an excluded date are removed. In the following example, <code>jan_fifteen</code> is a named schedule that resolves to the single date of 01/15:</p>
<pre>
freq=monthly;bymonthday=15,30;byhour=8,13,18;byminute=0;bysecond=0;
     exclude=jan_fifteenth
</pre>
<p>In this case, all three instances of the job are removed for 01/15.</p>
<p><a id="ARPLS72271"></a><span class="subhead3">OFFSET Rules&nbsp;</span>You can adjust the dates of individual named schedules by adding positive offsets to them. For example, to execute <code>JOB2</code> exactly 15 days after every occurrence of <code>JOB1</code>, add <code>+OFFSET:15D</code> to the schedule of <code>JOB1</code>, as follows:</p>
<pre>
BEGIN
dbms_scheduler.create_schedule('job2_schedule', repeat_interval =&gt;
  'job1_schedule+OFFSET:15D');
END;
/
</pre>
<p>Note that negative offsets to named schedules are not supported.</p>
<div id="ARPLS72272" class="example">
<p class="titleinexample"><a id="sthref8192"></a>Example 129-1 Putting It All Together</p>
<p>This example demonstrates the use of user-defined frequencies, spans, offsets, and the <code>BYSETPOS</code> and <code>INCLUDE</code> clauses. (Note that the <code>OFFSET:</code> keyword is optional in an offset clause.)</p>
<p>Many companies in the retail industry share the same fiscal year. The fiscal year starts on the Sunday closest to February 1st, and subsequent quarters start exactly 13 weeks later. The fiscal year schedule for the retail industry can be defined as the following:</p>
<pre>
begin
 dbms_scheduler.create_schedule('year_start', repeat_interval=&gt;
       'FREQ=YEARLY;BYDATE=0201^SPAN:1W;BYDAY=SUN');
 dbms_scheduler.create_schedule('retail_fiscal_year',
        to_timestamp_tz('15-JAN-2005 12:00:00','DD-MON-YYYY HH24:MI:SS'),
         'year_start,year_start+13w,year_start+26w,year_start+39w;periods=4');
end;
/
</pre>
<p>The following schedule can be used to execute a job on the 5th day off in the 2nd and the 4th quarters of the retail industry. This assumes that Saturday and Sunday are off days as well as the days in the existing <code>holiday</code> schedule.</p>
<pre>
begin
 dbms_scheduler.create_schedule('fifth_day_off', repeat_interval=&gt;
  'FREQ=retail_fiscal_year;BYDAY=SAT,SUN;INCLUDE=holiday;
    BYPERIOD=2,4;BYSETPOS=5');
end;
/
</pre></div>
<!-- class="example" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIHEHDHA"></a>
<hr />
<div id="ARPLS72273" class="refsect1">
<h2 class="refsect1">Summary of DBMS_SCHEDULER Subprograms</h2>
<div id="ARPLS72274" class="tblformal">
<p class="titleintable"><a id="sthref8193"></a><a id="sthref8194"></a>Table 129-11 DBMS_SCHEDULER Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_SCHEDULER Package Subprograms" summary="This table lists the DBMS_SCHEDULER subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><a href="#AddEventQSubscr93">ADD_EVENT_QUEUE_SUBSCRIBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>Adds a user as a subscriber to the Scheduler event queue <code>SYS.SCHEDULER$_EVENT_QUEUE</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><a href="#BABFFDCH">ADD_GROUP_MEMBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p>Adds one or more members to an existing group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t13" headers="r1c1-t13">
<p><a href="#BABBFBGI">ADD_JOB_EMAIL_NOTIFICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t13 r1c2-t13">
<p>Adds e-mail notifications for a job for a list of recipients and a list of job state events</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t13" headers="r1c1-t13">
<p><a href="#i1011051">ADD_WINDOW_GROUP_MEMBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t13 r1c2-t13">
<p>***Deprecated. Use <code>CREATE_GROUP</code> and <code>ADD_GROUP_MEMBER</code> instead</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t13" headers="r1c1-t13">
<p><a href="#CHDIAICJ">ALTER_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t13 r1c2-t13">
<p>Alters specified steps of a chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t13" headers="r1c1-t13">
<p><a href="#CHDGAEDD">ALTER_RUNNING_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t13 r1c2-t13">
<p>Alters specified steps of a running chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t13" headers="r1c1-t13">
<p><a href="#i1011066">CLOSE_WINDOW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t13 r1c2-t13">
<p>Closes an open window prematurely</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t13" headers="r1c1-t13">
<p><a href="#i1009982">COPY_JOB Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t13 r1c2-t13">
<p>Copies an existing job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t13" headers="r1c1-t13">
<p><a href="#CHDCJFCI">CREATE_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t13 r1c2-t13">
<p>Creates a chain, which is a named series of programs that are linked together for a combined objective</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t13" headers="r1c1-t13">
<p><a href="#BABCAEAC">CREATE_CREDENTIAL Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t13 r1c2-t13">
<p>Creates a credential</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t13" headers="r1c1-t13">
<p><a href="#BABEEIIF">CREATE_DATABASE_DESTINATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t13 r1c2-t13">
<p>Creates a database destination for use with remote database jobs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t13" headers="r1c1-t13">
<p><a href="#CHDEBDFH">CREATE_EVENT_SCHEDULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t13 r1c2-t13">
<p>Creates an event schedule, which is a schedule that starts a job based on the detection of an event</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t13" headers="r1c1-t13">
<p><a href="#BABFFJIJ">CREATE_FILE_WATCHER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t13 r1c2-t13">
<p>Creates a file watcher, which is a Scheduler object that defines the location, name, and other properties of a file whose arrival on a system causes the Scheduler to start a job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t13" headers="r1c1-t13">
<p><a href="#BABFGABJ">CREATE_GROUP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t13 r1c2-t13">
<p>Creates a group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t13" headers="r1c1-t13">
<p><a href="#i1000363">CREATE_JOB Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t13 r1c2-t13">
<p>Creates a single job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t13" headers="r1c1-t13">
<p><a href="#i1011092">CREATE_JOB_CLASS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t13 r1c2-t13">
<p>Creates a job class, which provides a way to group jobs for resource allocation and prioritization</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t13" headers="r1c1-t13">
<p><a href="#BABCIJJA">CREATE_JOBS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t13 r1c2-t13">
<p>Creates multiple jobs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t13" headers="r1c1-t13">
<p><a href="#i1010013">CREATE_PROGRAM Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t13 r1c2-t13">
<p>Creates a program</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t13" headers="r1c1-t13">
<p><a href="#i1010076">CREATE_SCHEDULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t13 r1c2-t13">
<p>Creates a schedule</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t13" headers="r1c1-t13">
<p><a href="#i1016629">CREATE_WINDOW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t13 r1c2-t13">
<p>Creates a window, which provides a way to automatically activate different resource plans at different times</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t13" headers="r1c1-t13">
<p><a href="#i1013361">CREATE_WINDOW_GROUP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t13 r1c2-t13">
<p>*** Deprecated. Use <code>CREATE_GROUP</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t13" headers="r1c1-t13">
<p><a href="#i1013213">DEFINE_ANYDATA_ARGUMENT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t13 r1c2-t13">
<p>Defines a program argument whose value is of a complex type and must be passed encapsulated in an <code>AnyData</code> object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t13" headers="r1c1-t13">
<p><a href="#CHDCAFGJ">DEFINE_CHAIN_EVENT_STEP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t13 r1c2-t13">
<p>Adds or replaces a chain step and associates it with an event schedule or inline event. See also: <code>DEFINE_CHAIN_STEP</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t13" headers="r1c1-t13">
<p><a href="#CHDBAFJE">DEFINE_CHAIN_RULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t13 r1c2-t13">
<p>Adds a rule to an existing chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t13" headers="r1c1-t13">
<p><a href="#CHDEJDHJ">DEFINE_CHAIN_STEP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t13 r1c2-t13">
<p>Defines a chain step, which can be a program or another (nested) chain. See also: <code>DEFINE_CHAIN_EVENT_STEP</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t13" headers="r1c1-t13">
<p><a href="#i1011138">DEFINE_METADATA_ARGUMENT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t13 r1c2-t13">
<p>Defines a special metadata argument for the program. You can retrieve specific metadata through this argument.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t13" headers="r1c1-t13">
<p><a href="#i1011161">DEFINE_PROGRAM_ARGUMENT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r28c1-t13 r1c2-t13">
<p>Defines a program argument whose value can be passed as a string literal to the program</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t13" headers="r1c1-t13">
<p><a href="#i1003538">DISABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r29c1-t13 r1c2-t13">
<p>Disables a program, job, chain, window, database destination, external destination, file watcher, or group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t13" headers="r1c1-t13">
<p><a href="#BABBFHBG">DROP_AGENT_DESTINATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r30c1-t13 r1c2-t13">
<p>Drops one or more external destinations. Use only when the preferred method of dropping external destinations&mdash;unregistering the Scheduler agent with the database&mdash;fails.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t13" headers="r1c1-t13">
<p><a href="#CHDIAFHG">DROP_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r31c1-t13 r1c2-t13">
<p>Drops an existing chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t13" headers="r1c1-t13">
<p><a href="#CHDJEIJB">DROP_CHAIN_RULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r32c1-t13 r1c2-t13">
<p>Removes a rule from an existing chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t13" headers="r1c1-t13">
<p><a href="#CHDBDCAI">DROP_CHAIN_STEP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r33c1-t13 r1c2-t13">
<p>Drops a chain step</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t13" headers="r1c1-t13">
<p><a href="#BABIJAJG">DROP_CREDENTIAL Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r34c1-t13 r1c2-t13">
<p>Drops a credential</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t13" headers="r1c1-t13">
<p><a href="#BABBDAIF">DROP_DATABASE_DESTINATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r35c1-t13 r1c2-t13">
<p>Drops one or more database destinations</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t13" headers="r1c1-t13">
<p><a href="#BABJEJHF">DROP_FILE_WATCHER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r36c1-t13 r1c2-t13">
<p>Drops one or more file watchers</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r37c1-t13" headers="r1c1-t13">
<p><a href="#BABDHDGH">DROP_GROUP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r37c1-t13 r1c2-t13">
<p>Drops one or more groups</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r38c1-t13" headers="r1c1-t13">
<p><a href="#i1000364">DROP_JOB Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r38c1-t13 r1c2-t13">
<p>Drops a job or all jobs in a job class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r39c1-t13" headers="r1c1-t13">
<p><a href="#i1009950">DROP_JOB_CLASS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r39c1-t13 r1c2-t13">
<p>Drops a job class</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r40c1-t13" headers="r1c1-t13">
<p><a href="#i1011194">DROP_PROGRAM Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r40c1-t13 r1c2-t13">
<p>Drops a program</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r41c1-t13" headers="r1c1-t13">
<p><a href="#i1011195">DROP_PROGRAM_ARGUMENT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r41c1-t13 r1c2-t13">
<p>Drops a program argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r42c1-t13" headers="r1c1-t13">
<p><a href="#CIHBGDFG">DROP_SCHEDULE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r42c1-t13 r1c2-t13">
<p>Drops a schedule</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r43c1-t13" headers="r1c1-t13">
<p><a href="#i1014414">DROP_WINDOW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r43c1-t13 r1c2-t13">
<p>Drops a window</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r44c1-t13" headers="r1c1-t13">
<p><a href="#i1011244">DROP_WINDOW_GROUP Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r44c1-t13 r1c2-t13">
<p>*** Deprecated. Use <code>CREATE_GROUP</code> and <code>DROP_GROUP</code> instead.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r45c1-t13" headers="r1c1-t13">
<p><a href="#i1012587">ENABLE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r45c1-t13 r1c2-t13">
<p>Enables a program, job, chain, window, database destination, external destination, file watcher, or group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r46c1-t13" headers="r1c1-t13">
<p><a href="#BABCDIFA">END_DETACHED_JOB_RUN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r46c1-t13 r1c2-t13">
<p>Ends a running detached job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r47c1-t13" headers="r1c1-t13">
<p><a href="#i1009923">EVALUATE_CALENDAR_STRING Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r47c1-t13 r1c2-t13">
<p>Evaluates the calendar string and tells you what the next execution date of a job or window will be</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r48c1-t13" headers="r1c1-t13">
<p><a href="#BABGCFFG">EVALUATE_RUNNING_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r48c1-t13 r1c2-t13">
<p>Forces reevaluation of the rules of a running chain to trigger any rules for conditions that have been satisfied</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r49c1-t13" headers="r1c1-t13">
<p><a href="#i1011295">GENERATE_JOB_NAME Function</a></p>
</td>
<td class="cellalignment1228" headers="r49c1-t13 r1c2-t13">
<p>Generates a unique name for a job. This enables you to identify jobs by adding a prefix, so, for example, Sally's jobs would be named <code>sally1</code>, <code>sally2</code>, and so on</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r50c1-t13" headers="r1c1-t13">
<p><a href="#CHDFHDIJ">"GET_AGENT_INFO Function"</a></p>
</td>
<td class="cellalignment1228" headers="r50c1-t13 r1c2-t13">
<p>Returns job information specific to an agent, such as how many are running and so on, depending on the attribute selected</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r51c1-t13" headers="r1c1-t13">
<p><a href="#CHDGIJED">"GET_AGENT_VERSION Function"</a></p>
</td>
<td class="cellalignment1228" headers="r51c1-t13 r1c2-t13">
<p>Returns the version string of a Scheduler agent that is registered with the database and is currently running</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r52c1-t13" headers="r1c1-t13">
<p><a href="#i1011296">GET_ATTRIBUTE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r52c1-t13 r1c2-t13">
<p>Retrieves the value of an attribute of an object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r53c1-t13" headers="r1c1-t13">
<p><a href="#BABDDBFH">GET_FILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r53c1-t13 r1c2-t13">
<p>Retrieves a file from a host</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r54c1-t13" headers="r1c1-t13">
<p><a href="#i1011297">GET_SCHEDULER_ATTRIBUTE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r54c1-t13 r1c2-t13">
<p>Retrieves the value of a Scheduler attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r55c1-t13" headers="r1c1-t13">
<p><a href="#i1011298">OPEN_WINDOW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r55c1-t13 r1c2-t13">
<p>Opens a window prematurely. The window is opened immediately for the duration</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r56c1-t13" headers="r1c1-t13">
<p><a href="#i1011299">PURGE_LOG Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r56c1-t13 r1c2-t13">
<p>Purges specific rows from the job and window logs</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r57c1-t13" headers="r1c1-t13">
<p><a href="#BABHDFFF">PUT_FILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r57c1-t13 r1c2-t13">
<p>Saves a file to one or more hosts</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r58c1-t13" headers="r1c1-t13">
<p><a href="#RemoveEventQSubsc95">REMOVE_EVENT_QUEUE_SUBSCRIBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r58c1-t13 r1c2-t13">
<p>Unsubscribes a user from the Scheduler event queue <code>SYS.SCHEDULER$_EVENT_QUEUE</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r59c1-t13" headers="r1c1-t13">
<p><a href="#BABHECBB">REMOVE_GROUP_MEMBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r59c1-t13 r1c2-t13">
<p>Removes one or more members from a group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r60c1-t13" headers="r1c1-t13">
<p><a href="#BABIIFIC">REMOVE_JOB_EMAIL_NOTIFICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r60c1-t13 r1c2-t13">
<p>Removes e-mail notifications for a job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r61c1-t13" headers="r1c1-t13">
<p><a href="#i1000476">REMOVE_WINDOW_GROUP_MEMBER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r61c1-t13 r1c2-t13">
<p>***Deprecated. Use <code>CREATE_GROUP</code> and <code>REMOVE_GROUP_MEMBER</code> instead</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r62c1-t13" headers="r1c1-t13">
<p><a href="#i1014573">RESET_JOB_ARGUMENT_VALUE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r62c1-t13 r1c2-t13">
<p>Resets the current value assigned to an argument defined with the associated program</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r63c1-t13" headers="r1c1-t13">
<p><a href="#CHDGHBGJ">RUN_CHAIN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r63c1-t13 r1c2-t13">
<p>Immediately runs a chain by creating a run-once job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r64c1-t13" headers="r1c1-t13">
<p><a href="#i1013568">RUN_JOB Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r64c1-t13 r1c2-t13">
<p>Runs a job immediately</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r65c1-t13" headers="r1c1-t13">
<p><a href="#BABEJADF">SET_AGENT_REGISTRATION_PASS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r65c1-t13 r1c2-t13">
<p>Sets the agent registration password for a database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r66c1-t13" headers="r1c1-t13">
<p><a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r66c1-t13 r1c2-t13">
<p>Changes an attribute of a job, schedule, or other Scheduler object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r67c1-t13" headers="r1c1-t13">
<p><a href="#i1000809">SET_ATTRIBUTE_NULL Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r67c1-t13 r1c2-t13">
<p>Changes an attribute of an object to <code>NULL</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r68c1-t13" headers="r1c1-t13">
<p><a href="#i1000820">SET_JOB_ANYDATA_VALUE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r68c1-t13 r1c2-t13">
<p>Sets the value of a job argument encapsulated in an <code>AnyData</code> object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r69c1-t13" headers="r1c1-t13">
<p><a href="#i1011390">SET_JOB_ARGUMENT_VALUE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r69c1-t13 r1c2-t13">
<p>Sets the value of a job argument</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r70c1-t13" headers="r1c1-t13">
<p><a href="#BABCECGB">SET_JOB_ATTRIBUTES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r70c1-t13 r1c2-t13">
<p>Sets the value of a job attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r71c1-t13" headers="r1c1-t13">
<p><a href="#i1004630">SET_SCHEDULER_ATTRIBUTE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r71c1-t13 r1c2-t13">
<p>Sets the value of a Scheduler attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r72c1-t13" headers="r1c1-t13">
<p><a href="#i1009818">STOP_JOB Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r72c1-t13 r1c2-t13">
<p>Stops a currently running job or all jobs in a job class</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS72275" class="refsect2"><a id="AddEventQSubscr93"></a>
<hr />
<h3 class="refsect2">ADD_EVENT_QUEUE_SUBSCRIBER Procedure</h3>
<p>This procedure adds a user as a subscriber to the Scheduler event queue <code>SYS.SCHEDULER$_EVENT_QUEUE</code>, and grants the user permission to dequeue from this queue using the designated agent.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8195"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ADD_EVENT_QUEUE_SUBSCRIBER (
   subscriber_name         IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8196"></a>Parameters</p>
<div id="ARPLS72276" class="tblformal">
<p class="titleintable"><a id="sthref8197"></a><a id="sthref8198"></a>Table 129-12 ADD_EVENT_QUEUE_SUBSCRIBER Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_EVENT_QUEUE_SUBSCRIBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Parameter</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>subscriber_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>Name of the Oracle Streams Advanced Queuing (AQ) agent to be used to subscribe to the Scheduler event queue. If <code>NULL</code>, an agent is created and assigned the user name of the calling user.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8199"></a>Usage Notes</p>
<p>The subscription is rule-based. The rule permits the user to see only events raised by jobs that the user owns, and filters out all other messages. If an AQ agent with the same name already exists, an error is raised.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72846" class="refsect2"><a id="BABFFDCH"></a>
<hr />
<h3 class="refsect2">ADD_GROUP_MEMBER Procedure</h3>
<p>This procedure adds one or more members to an existing group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8200"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ADD_GROUP_MEMBER (
   group_name              IN VARCHAR2,
   member                  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8201"></a>Parameters</p>
<div id="ARPLS72847" class="tblformal">
<p class="titleintable"><a id="sthref8202"></a><a id="sthref8203"></a>Table 129-13 ADD_GROUP_MEMBER Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_GROUP_MEMBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>The name of the group.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>member</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p>A comma-separated list of members to add to the group. Members must match the group type. A group of the same type can be a member. The Scheduler immediately expands the included group name into its list of members.</p>
<p>An error is returned if any of the members do not exist. A member that is already in the group is skipped, and no error is generated.</p>
<p>The keyword <code>LOCAL</code> can be included as a member for database destination or external destination groups. See the <a href="#BABFGABJ">"CREATE_GROUP Procedure"</a> for information about this keyword.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8204"></a>Usage Notes</p>
<p>The following users may add members to a group:</p>
<ul>
<li>
<p>The group owner</p>
</li>
<li>
<p>A user that has been granted the <code>ALTER</code> object privilege on the group</p>
</li>
<li>
<p>A user with the <code>CREATE ANY JOB</code> system privilege</p>
</li>
</ul>
<p>You must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege to add a member to a group of type <code>WINDOW</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFGABJ">"CREATE_GROUP Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72277" class="refsect2"><a id="BABBFBGI"></a>
<hr />
<h3 class="refsect2">ADD_JOB_EMAIL_NOTIFICATION Procedure</h3>
<p>This procedure adds e-mail notifications for a job. E-mails are then sent to the specified list of recipients whenever any of the specified job state events is raised.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8205"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION (
    job_name             IN VARCHAR2,
    recipients           IN VARCHAR2,
    sender               IN VARCHAR2 DEFAULT NULL,
    subject              IN VARCHAR2 DEFAULT DBMS_SCHEDULER.DEFAULT_NOTIFICATION_SUBJECT,
    body                 IN VARCHAR2 DEFAULT DBMS_SCHEDULER.DEFAULT_NOTIFICATION_BODY,
    events               IN VARCHAR2 DEFAULT 'JOB_FAILED,JOB_BROKEN,JOB_SCH_LIM_REACHED,
                             JOB_CHAIN_STALLED,JOB_OVER_MAX_DUR',
    filter_condition     IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8206"></a>Parameters</p>
<div id="ARPLS72278" class="tblformal">
<p class="titleintable"><a id="sthref8207"></a><a id="sthref8208"></a>Table 129-14 ADD_JOB_EMAIL_NOTIFICATION Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_JOB_EMAIL_NOTIFICATION Procedure Parameters" summary="This table describes parameters used by the DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t17">Parameter</th>
<th class="cellalignment1227" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t17" headers="r1c1-t17">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t17 r1c2-t17">
<p>Name of the job that e-mail notifications are added for. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t17" headers="r1c1-t17">
<p><code>recipients</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t17 r1c2-t17">
<p>Comma-separated list of e-mail addresses to send notifications to. E-mail notifications for all listed events are sent to all recipients. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t17" headers="r1c1-t17">
<p><code>sender</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t17 r1c2-t17">
<p>e-mail address to use as the sender address (the From: address) in the e-mail header. If <code>NULL</code> or omitted, the e-mail address specified in the Scheduler attribute <code>email_sender</code> is used. See <a class="olink ADMIN13306" href="../../server.112/e25494/schedadmin.htm#ADMIN13306"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information on this Scheduler attribute.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t17" headers="r1c1-t17">
<p><code>subject</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t17 r1c2-t17">
<p>The subject to use in the e-mail header. <a href="#BABGBJIC">Table 129-15</a> describes the variables that you can include within this parameter. The Scheduler assigns values to these variables before sending the notification. If <code>subject</code> is omitted, the default subject is used. The default subject is the following text, where text enclosed in the '%' character represents a variable:</p>
<pre>
'Oracle Scheduler Job Notification - %job_owner%.%job_name%.%job_subname% %event_type%'
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t17" headers="r1c1-t17">
<p><code>body</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t17 r1c2-t17">
<p>The body of the e-mail message. <a href="#BABGBJIC">Table 129-15</a> describes the variables that you can include within this parameter. The Scheduler assigns values to these variables before sending the notification. If <code>body</code> is omitted, the default body is used. The default body is the following text, where text enclosed in the '%' character represents a variable:</p>
<pre>
'Job: %job_owner%.%job_name%.%job_subname%
Event: %event_type%
Date: %event_timestamp%
Log id: %log_id%
Job class: %job_class_name%
Run count: %run_count%
Failure count: %failure_count%
Retry count: %retry_count%
Error code: %error_code%
Error message: %error_message%'
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t17" headers="r1c1-t17">
<p><code>events</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t17 r1c2-t17">
<p>Comma-separate list of job state events to send e-mail notifications for. Cannot be <code>NULL</code>. A notification is sent to all recipients if any of the listed events is raised. <a href="#BABCGGDC">Table 129-82</a> lists the valid events for this parameter. If <code>events</code> is omitted, notifications are sent for the following default events:</p>
<pre>
JOB_FAILED,JOB_BROKEN,JOB_SCH_LIM_REACHED,JOB_CHAIN_STALLED,JOB_OVER_MAX_DUR
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t17" headers="r1c1-t17">
<p><code>filter_condition</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t17 r1c2-t17">
<p>Used to filter events to send e-mail notifications for. If <code>NULL</code>, all occurrences of the specified events cause e-mail notifications to be sent. <code>filter_condition</code> must be a boolean SQL <code>WHERE</code> clause that may refer to the <code>:event</code> bind variable. This bind variable is automatically bound to an object of type <code>SCHEDULER$_EVENT_INFO</code> that represents the raised event.</p>
<p>For example, to send an e-mail notification only when the error number in an event is 600 or 700, use the following <code>filter_condition</code>:</p>
<pre>
:event.error_code=600 or :event.error_code=700
</pre>
<p>See <a href="#BABJBIIH">"SCHEDULER$_EVENT_INFO Object Type"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BABGBJIC">Table 129-15</a> lists the variables that you can use in the subject and body arguments.</p>
<div id="ARPLS72279" class="tblformal">
<p class="titleintable"><a id="sthref8209"></a><a id="BABGBJIC"></a>Table 129-15 Variables Used in the SUBJECT and BODY Parameters</p>
<table class="cellalignment1229" title="Variables Used in the SUBJECT and BODY Parameters" summary="This table has two columns: Variable and Description. Each row describes the usage of these variables, which are used in the subject and body arguments." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Variable</th>
<th class="cellalignment1227" id="r1c2-t18">Comment</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p><code>%job_owner%</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<p>Schema in which job was created</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t18" headers="r1c1-t18">
<p><code>%job_name%</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t18 r1c2-t18">
<p>Name of the job that e-mail notifications are added for</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t18" headers="r1c1-t18">
<p><code>%job_subname%</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t18 r1c2-t18">
<p>Present for event-based jobs with the <code>parallel_instances</code> attribute set and for chain steps</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t18" headers="r1c1-t18">
<p><code>%event_type%</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t18 r1c2-t18">
<p>Valid values are listed in <a href="#BABCGGDC">Table 129-82</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t18" headers="r1c1-t18">
<p><code>%event_timestamp%</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t18 r1c2-t18">
<p>Time at which the event occurred</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t18" headers="r1c1-t18">
<p><code>%log_id%</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t18 r1c2-t18">
<p>Refers to the <code>LOG_ID</code> column in views <code>*_SCHEDULER_JOB_LOG</code> and <code>*_SCHEDULER_JOB_RUN_DETAILS</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t18" headers="r1c1-t18">
<p><code>%error_code%</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t18 r1c2-t18">
<p>Number of the error code.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t18" headers="r1c1-t18">
<p><code>%error_message%</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t18 r1c2-t18">
<p>The text of the error message</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t18" headers="r1c1-t18">
<p><code>%run_count%</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t18 r1c2-t18">
<p>Run count for the job when the event was raised</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t18" headers="r1c1-t18">
<p><code>%failure_count%</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t18 r1c2-t18">
<p>Failure count for the job when the event was raised</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t18" headers="r1c1-t18">
<p><code>%retry_count%</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t18 r1c2-t18">
<p>Retry count for the job when the event was raised</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8210"></a>Usage Notes</p>
<p>You can call <code>ADD_JOB_EMAIL_NOTIFICATION</code> once for each different set of notifications that you want to configure for a particular job. For example, you may want to send notifications for the <code>JOB_FAILED</code>, <code>JOB_BROKEN</code>, <code>JOB_SCH_LIM_REACHED</code>, and <code>JOB_CHAIN_STALLED</code> events to the principle DBA and all senior DBAs, but send a notification for the <code>JOB_OVER_MAX_DUR</code> event only to the principle DBA.</p>
<p>This procedure succeeds only if the Scheduler attribute <code>email_server</code> is set to a valid SMTP server. See <a class="olink ADMIN13306" href="../../server.112/e25494/schedadmin.htm#ADMIN13306"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information.</p>
<p>To call this procedure, you must be the job owner or have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege or have the <code>ALTER</code> object privilege on the job.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72280" class="refsect2"><a id="i1011051"></a>
<hr />
<h3 class="refsect2">ADD_WINDOW_GROUP_MEMBER Procedure</h3>
<p><span class="bold">*** Deprecated in Oracle Database 11</span><span class="bolditalic">g</span> <span class="bold">Release 2 (11.2).</span> <span class="bold">Use ADD_GROUP_MEMBER instead</span>.</p>
<p>This procedure adds one or more windows to an existing window group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8211"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER (
   group_name              IN VARCHAR2,
   window_list             IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8212"></a>Parameters</p>
<div id="ARPLS72281" class="tblformal">
<p class="titleintable"><a id="sthref8213"></a><a id="sthref8214"></a>Table 129-16 ADD_WINDOW_GROUP_MEMBER Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_WINDOW_GROUP_MEMBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t19">Parameter</th>
<th class="cellalignment1227" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t19" headers="r1c1-t19">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t19 r1c2-t19">
<p>The name of the window group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t19" headers="r1c1-t19">
<p><code>window_list</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t19 r1c2-t19">
<p>The name of the window or windows</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8215"></a>Usage Notes</p>
<p>If an already open window is added to a window group, the Scheduler will not pick up jobs that point to this window group until the next window in the window group opens.</p>
<p>Adding a window to a group requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p>Note that a window group cannot be a member of another window group.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72282" class="refsect2"><a id="CHDIAICJ"></a>
<hr />
<h3 class="refsect2">ALTER_CHAIN Procedure</h3>
<p>This procedure alters an attribute of the specified steps of a chain. This affects all future runs of the specified steps, both in the currently running chain job and in future runs of the same chain job or other chain jobs that point to the chain.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8216"></a>Syntax</p>
<p>Alters the value of a boolean attribute of one or more steps:</p>
<pre>
DBMS_SCHEDULER.ALTER_CHAIN (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   attribute               IN VARCHAR2,
   value                   IN BOOLEAN);
</pre>
<p>Alters the value of a character attribute of one or more steps:</p>
<pre>
DBMS_SCHEDULER.ALTER_CHAIN (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   attribute               IN VARCHAR2,
   char_value              IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8217"></a>Parameters</p>
<div id="ARPLS72283" class="tblformal">
<p class="titleintable"><a id="sthref8218"></a><a id="sthref8219"></a>Table 129-17 ALTER_CHAIN Procedure Parameters</p>
<table class="cellalignment1229" title="ALTER_CHAIN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t20">Parameter</th>
<th class="cellalignment1227" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t20" headers="r1c1-t20">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t20 r1c2-t20">
<p>The name of the chain to alter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t20" headers="r1c1-t20">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t20 r1c2-t20">
<p>The name of the step or a comma-separated list of steps to alter. This cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t20" headers="r1c1-t20">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t20 r1c2-t20">
<p>The attribute of the steps to change. Must be one of the following:</p>
<ul>
<li>
<p>'<code>PAUSE</code>'</p>
<p>If set to <code>TRUE</code> for a step, after the step has run, its state changes to <code>PAUSED</code> (and the <code>completed</code> attribute remains <code>FALSE</code>).</p>
<p>If <code>PAUSE</code> is reset to <code>FALSE</code> for a paused chain step (using <code>ALTER_RUNNING_CHAIN</code>), the state is set to its completion state (<code>SUCCEEDED</code>, <code>FAILED</code>, or <code>STOPPED</code>) and the <code>completed</code> attribute is set to <code>TRUE</code>.</p>
<p>Setting <code>PAUSE</code> has no effect on steps that have already run. This allows execution of a chain to be suspended after the execution of certain steps.</p>
</li>
<li>
<p><code>'PAUSED_BEFORE</code>'</p>
<p>If set to <code>TRUE</code> for a step and if any of the rule conditions that start the step are true, then its state changes to <code>PAUSED</code> and the step does not run.</p>
<p>If <code>PAUSE_BEFORE</code> is reset to <code>FALSE</code> for a chain step that has paused before starting (using <code>ALTER_RUNNING_CHAIN</code>), then the step starts running if any of the rule conditions that start the step are true.</p>
<p>Setting <code>PAUSE_BEFORE</code> has no effect on steps that are running or have already run. This allows execution of a chain to be suspended before the execution of certain steps.</p>
</li>
<li>
<p>'<code>SKIP</code>'</p>
<p>If set to <code>TRUE</code> for a step, when the step condition is met, instead of being run, the step is treated as if it has immediately succeeded. Setting <code>SKIP</code> to <code>TRUE</code> has no effect for a step that is running, scheduled to run after a delay, or has already run. If <code>SKIP</code> is set <code>TRUE</code> for a step that <code>PAUSE</code> is also set for, when the step condition is met, the step immediately changes to state <code>PAUSED</code>.</p>
</li>
<li>
<p>'<code>RESTART_ON_FAILURE</code>'</p>
<p>If set to <code>TRUE</code> for a step and the step fails due to an application error, then the step is retried using the normal Scheduler retry mechanism (after 1 second, after 10 seconds, after 100 seconds, and so on, up to a maximum of 6 times). If all 6 retries fail (after about 30 hours), then the chain step is marked <code>FAILED</code>.</p>
<p>If set to <code>FALSE</code> (the default), a failed chain step is immediately marked <code>FAILED</code>.</p>
</li>
<li>
<p>'<code>RESTART_ON_RECOVERY</code>'</p>
<p>If set to <code>TRUE</code> for a step and the step is stopped by a database shutdown, then the step is restarted when the database is recovered.</p>
<p>If set to <code>FALSE</code>, and the step is stopped by a database shutdown, then the step is marked as stopped when the database is recovered and the chain continues.</p>
</li>
<li>
<p>'<code>DESTINATION_NAME</code>'</p>
<p>The name of an existing database destination or external destination. You can view external destination names in the view <code>ALL_SCHEDULER_EXTERNAL_DESTS</code>, and database destination names in the views <code>*_SCHEDULER_DB_DESTS</code>. You cannot specify a destination group for this attribute. This parameter is <code>NULL</code> by default.</p>
</li>
<li>
<p>'<code>CREDENTIAL_NAME</code>'</p>
<p>The credential to use when running this step. <code>NULL</code> by default.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t20" headers="r1c1-t20">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t20 r1c2-t20">
<p>The value to set for the attribute (for a boolean attribute).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t20" headers="r1c1-t20">
<p><code>char_value</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t20 r1c2-t20">
<p>The value to set for the attribute (for a character attribute).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8220"></a>Usage Notes</p>
<p>Altering a chain requires <code>ALTER</code> privileges on the chain either by being the owner of the chain, or by having the <code>ALTER</code> object privilege on the chain or by having the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72284" class="refsect2"><a id="CHDGAEDD"></a>
<hr />
<h3 class="refsect2">ALTER_RUNNING_CHAIN Procedure</h3>
<p>This procedure alters an attribute of the specified steps of a chain. This affects only steps of the instance of the chain for the specified running chain job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8221"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ALTER_RUNNING_CHAIN (
   job_name                IN VARCHAR2,
   step_name               IN VARCHAR2,
   attribute               IN VARCHAR2,
   value                   IN {BOOLEAN|VARCHAR2});
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8222"></a>Parameters</p>
<div id="ARPLS72285" class="tblformal">
<p class="titleintable"><a id="sthref8223"></a><a id="sthref8224"></a>Table 129-18 ALTER_RUNNING_CHAIN Procedure Parameters</p>
<table class="cellalignment1229" title="ALTER_RUNNING_CHAIN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Parameter</th>
<th class="cellalignment1227" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21">
<p>The name of the job that is running the chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t21" headers="r1c1-t21">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c2-t21">
<p>The name of the step or a comma-separated list of steps to alter. If this is set to <code>NULL</code> and attribute is <code>PAUSE</code> or <code>SKIP</code>, then all steps of the running chain are altered.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t21" headers="r1c1-t21">
<p>attribute</p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c2-t21">
<p>The attribute of the steps to change. Valid values are:</p>
<ul>
<li>
<p>'<code>PAUSE</code>'</p>
<p>If the <code>PAUSE</code> attribute is set <code>TRUE</code> for a step, then after the step runs, its state changes to <code>PAUSED</code> (and the <code>completed</code> attribute remains false).</p>
<p>If <code>PAUSE</code> is reset to <code>FALSE</code> for a paused chain step (using <code>ALTER_RUNNING_CHAIN</code>), the state is set to completion (<code>SUCCEEDED</code>, <code>FAILED</code>, or <code>STOPPED</code>) and the <code>completed</code> attribute is set to <code>TRUE</code>. Setting <code>PAUSE</code> has no effect on steps that have already run. This allows execution of a chain to be suspended after the execution of certain steps. If <code>step_name</code> is set to <code>NULL</code>, <code>PAUSE</code> is set to <code>TRUE</code> for all steps of this running chain.</p>
</li>
<li>
<p>'<code>PAUSE_BEFORE</code>'</p>
<p>If set to <code>TRUE</code> for a step that has not yet run and if any of the rule conditions that start the step are true, then its state changes to <code>PAUSED</code> and the step does not run.</p>
<p>If <code>PAUSE_BEFORE</code> is reset to <code>FALSE</code> for a chain step that has paused before starting, then the step starts running if any of the rule conditions that start the step are true.</p>
<p>Setting <code>PAUSE_BEFORE</code> has no effect on steps that are running or have already run. This allows execution of a chain to be suspended before the execution of certain steps.</p>
<p>If <code>step_name</code> is set to <code>NULL</code>, then <code>PAUSE_BEFORE</code> is set to the specified value for all steps of this running chain.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t21" headers="r1c1-t21">
<p><code>attribute CONTINUED</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c2-t21">
<ul>
<li>
<p>'<code>SKIP</code>'</p>
<p>If the <code>SKIP</code> attribute is set to <code>TRUE</code> for a step, when the step condition is met, instead of being run, the step is treated as if it has immediately succeeded. Setting <code>SKIP</code> to <code>TRUE</code> has no effect for a step that is running, scheduled to run after a delay, or has already run.</p>
<p>If <code>step_name</code> is set to <code>NULL</code>, <code>SKIP</code> is set <code>TRUE</code> for all steps of this running chain. If <code>SKIP</code> is set <code>TRUE</code> for a step that <code>PAUSE</code> is also set for, when the step condition is met the step immediately changes to state <code>PAUSED</code>.</p>
</li>
<li>
<p>'<code>RESTART_ON_FAILURE</code>'</p>
<p>If set to <code>TRUE</code> for a step and the step fails due to an application error, then the step is retried using the normal Scheduler retry mechanism (after 1 second, after 10 seconds, after 100 seconds, and so on, up to a maximum of 6 times). If all 6 retries fail (after about 30 hours), then the chain step is marked <code>FAILED</code>.</p>
<p>If set to <code>FALSE</code> (the default), a failed chain step is immediately marked <code>FAILED</code>.</p>
</li>
<li>
<p>'<code>RESTART_ON_RECOVERY</code>'</p>
<p>If the <code>RESTART_ON_RECOVERY</code> attribute is set to <code>TRUE</code> for a step, then if the step is stopped by a database shutdown, it is restarted when the database is recovered.</p>
<p>If set to <code>FALSE</code>, then if the step is stopped by a database shutdown, the step is marked as stopped when the database is recovered and the chain continues.</p>
</li>
<li>
<p>'<code>STATE</code>'</p>
<p>This changes the state of the steps. The state can only be changed if the step is not running. The state can only be changed to one of the following:</p>
<pre>
'NOT_STARTED', 'SUCCEEDED', 'FAILED <span class="italic">error_code</span>'
</pre>
<p>If the state is being changed to <code>FAILED</code>, an error code must be included (this must be a positive integer).</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t21" headers="r1c1-t21">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c2-t21">
<p>The value to set for the attribute. Valid values are: <code>TRUE</code>, <code>FALSE</code>, '<code>NOT_STARTED</code>', '<code>SUCCEEDED</code>', or '<code>FAILED</code> <code><span class="codeinlineitalic">error_code</span></code>'</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8225"></a>Usage Notes</p>
<p>Altering a running chain requires you to have alter privileges on the job that is running (either as the owner, or as a user with <code>ALTER</code> privileges on the job or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72286" class="refsect2"><a id="i1011066"></a>
<hr />
<h3 class="refsect2">CLOSE_WINDOW Procedure</h3>
<p>This procedure closes an open window prematurely. A closed window means that it is no longer in effect. When a window is closed, the Scheduler switches the resource plan to the one that is in effect outside the window, or in the case of overlapping windows, to another window.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8226"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CLOSE_WINDOW (
   window_name             IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8227"></a>Parameters</p>
<div id="ARPLS72287" class="tblformal">
<p class="titleintable"><a id="sthref8228"></a><a id="sthref8229"></a>Table 129-19 CLOSE_WINDOW Procedure Parameters</p>
<table class="cellalignment1229" title="CLOSE_WINDOW Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CLOSE_WINDOW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>window_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>The name of the window</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8230"></a>Usage Notes</p>
<p>If you try to close a window that does not exist or is not open, an error is generated.</p>
<p>A job that is running does not stop when the window it is running in closes, unless the attribute <code>stop_on_window_close</code> is set to <code>TRUE</code> for the job. However, the resources allocated to the job can change if the resource plan changes.</p>
<p>When a running job has a group of type <code>WINDOW</code> as its schedule, the job is not stopped when its window is closed if another window in the same window group becomes active. This is the case even if the job has the attribute <code>stop_on_window_close</code> set to <code>TRUE</code>.</p>
<p>Closing a window requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72288" class="refsect2"><a id="i1009982"></a>
<hr />
<h3 class="refsect2">COPY_JOB Procedure</h3>
<p>This procedure copies all attributes of an existing job to a new job. The new job is created disabled, while the state of the existing job is unaltered.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8231"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.COPY_JOB (
   old_job                IN VARCHAR2,
   new_job                IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8232"></a>Parameters</p>
<div id="ARPLS72289" class="tblformal">
<p class="titleintable"><a id="sthref8233"></a><a id="sthref8234"></a>Table 129-20 COPY_JOB Procedure Parameters</p>
<table class="cellalignment1229" title="COPY_JOB Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.COPY_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Parameter</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><code>old_job</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>The name of the existing job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t23" headers="r1c1-t23">
<p><code>new_job</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t23 r1c2-t23">
<p>The name of the new job</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8235"></a>Usage Notes</p>
<p>To copy a job, you must have privileges to create a job in the schema of the new job (the <code>CREATE</code> <code>JOB</code> system privilege if it is in your own schema, otherwise, the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege). If the old job is not in the your own schema, then you must also have <code>ALTER</code> privileges on the old job or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72290" class="refsect2"><a id="CHDCJFCI"></a>
<hr />
<h3 class="refsect2">CREATE_CHAIN Procedure</h3>
<p>This procedure creates a new chain. The chain name can be optionally qualified with a schema name (for example, <code>myschema.myname</code>).</p>
<p>A chain is always created as disabled and must be enabled with the <a href="#i1012587">ENABLE Procedure</a> before it can be used.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8236"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_CHAIN (
   chain_name              IN VARCHAR2,
   rule_set_name           IN VARCHAR2 DEFAULT NULL,
   evaluation_interval     IN INTERVAL DAY TO SECOND DEFAULT NULL,
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8237"></a>Parameters</p>
<div id="ARPLS72291" class="tblformal">
<p class="titleintable"><a id="sthref8238"></a><a id="sthref8239"></a>Table 129-21 CREATE_CHAIN Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_CHAIN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Parameter</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>The name to assign to the new chain, which can optionally be qualified with a schema. This must be unique in the SQL namespace, therefore, there cannot already be a table or other object with this name and schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t24" headers="r1c1-t24">
<p><code>rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t24 r1c2-t24">
<p>In the normal case, no rule set should be passed in. The Scheduler automatically creates a rule set and associated empty evaluation context. You then use <code>DEFINE_CHAIN_RULE</code> to add rules and <code>DROP_CHAIN_RULE</code> to remove them.</p>
<p>Advanced users can create a rule set that describes their chain dependencies and pass it in here. This allows greater flexibility in defining rules. For example, conditions can refer to external variables, and tables can be exposed through the evaluation context. If you pass in a rule set, you must ensure that it is in the format of a chain rule set. (For example, all steps must be listed as variables in the evaluation context). If no rule set is passed in, the rule set created is of the form <code>SCHED_RULESET${N}</code> and the evaluation context created is of the form <code>SCHED_EVCTX${N}</code></p>
<p>See <a class="olink STRMS005" href="../../server.112/e17069/strms_adrules.htm#STRMS005"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on rules and rule sets.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t24" headers="r1c1-t24">
<p><code>evaluation_interval</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t24 r1c2-t24">
<p>If this is <code>NULL</code>, reevaluation of the rules of a running chain are performed only when the job starts and when a step completes. A non-<code>NULL</code> value causes rule evaluations to also occur periodically at the specified interval. Because evaluation may be CPU-intensive, this should be conservatively set to the highest possible value or left at <code>NULL</code> if possible. <code>evaluation_interval</code> cannot be less than a minute or greater than a day.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t24" headers="r1c1-t24">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t24 r1c2-t24">
<p>An optional comment describing the purpose of the chain</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8240"></a>Usage Notes</p>
<p>To create a chain in your own schema, you must have the <code>CREATE</code> <code>JOB</code> system privilege. To create a chain in a different schema you must have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege. If you do not provide a <code>rule_set_name</code>, a rule set and evaluation context is created in the schema that the chain is being created in, so you must have the privileges required to create these objects. See the <code>DBMS_RULE_ADM.CREATE_RULE_SET</code> and <code>DBMS_RULE_ADM.CREATE_EVALUATION_CONTEXT</code> procedures for more information.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72292" class="refsect2"><a id="BABCAEAC"></a>
<hr />
<h3 class="refsect2">CREATE_CREDENTIAL Procedure</h3>
<p>This procedure creates a stored username/password pair. Credentials are assigned to jobs so that they can authenticate with a local or remote host operating system or a remote Oracle database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8241"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_CREDENTIAL (
   credential_name         IN VARCHAR2,
   username                IN VARCHAR2,
   password                IN VARCHAR2,
   database_role           IN VARCHAR2 DEFAULT NULL,
   windows_domain          IN VARCHAR2 DEFAULT NULL,
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8242"></a>Parameters</p>
<div id="ARPLS72293" class="tblformal">
<p class="titleintable"><a id="sthref8243"></a><a id="sthref8244"></a>Table 129-22 CREATE_CREDENTIAL Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_CREDENTIAL Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_CREDENTIAL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Parameter</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>The name to assign to the credential. It can optionally be prefixed with a schema name. It cannot be set to <code>NULL</code>. It is converted to uppercase unless enclosed in double-quotes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><code>username</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p>The user name for logging into to the host operating system or remote Oracle database. This cannot be set to <code>NULL</code> and is case-sensitive. It cannot contain double quotes or spaces. Maximum length is 64.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t25" headers="r1c1-t25">
<p><code>password</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t25 r1c2-t25">
<p>The password for the user name. This cannot be set to <code>NULL</code> and is case sensitive. The password is stored obfuscated and is not displayed in the Scheduler dictionary views. Maximum length is 128.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t25" headers="r1c1-t25">
<p><code>database_role</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t25 r1c2-t25">
<p>The value of the <code>database_role</code> attribute is used as the system privilege for logging into a remote database to run a remote database job.</p>
<p>Valid values are: <code>SYSDBA</code> and <code>SYSOPER</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t25" headers="r1c1-t25">
<p><code>windows_domain</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t25 r1c2-t25">
<p>For a Windows remote executable target, this is the domain that the specified user belongs to. The domain is converted to uppercase automatically. Maximum length is 64.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t25" headers="r1c1-t25">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t25 r1c2-t25">
<p>A text string that can be used to describe the credential. Scheduler does not use this parameter. Maximum length is 240.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8245"></a>Usage Notes</p>
<p>Credentials reside in a particular schema and can be created by any user with the <code>CREATE JOB</code> system privilege. To create a credential in a schema other than your own, you must have the <code>CREATE ANY JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72848" class="refsect2"><a id="BABEEIIF"></a>
<hr />
<h3 class="refsect2">CREATE_DATABASE_DESTINATION Procedure</h3>
<p>This procedure creates a database destination. A database destination represents an Oracle database on which remote database jobs run.</p>
<p>The host that the remote database resides on must have a running Scheduler agent that is registered with the database that this procedure is called from.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8246"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_DATABASE_DESTINATION (
   destination_name        IN VARCHAR2,
   agent                   IN VARCHAR2,
   tns_name                IN VARCHAR2,
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8247"></a>Parameters</p>
<div id="ARPLS72849" class="tblformal">
<p class="titleintable"><a id="sthref8248"></a><a id="sthref8249"></a>Table 129-23 CREATE_DATABASE_DESTINATION Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_DATABASE_DESTINATION Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_DATABASE_DESTINATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t26">Parameter</th>
<th class="cellalignment1227" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t26" headers="r1c1-t26">
<p><code>destination_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t26 r1c2-t26">
<p>The name to assign to the database destination. It can optionally be prefixed with a schema name. Cannot be <code>NULL</code>. It is converted to uppercase unless enclosed in double-quotes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t26" headers="r1c1-t26">
<p><code>agent</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t26 r1c2-t26">
<p>The external destination name of the Scheduler agent to connect. Equivalent to an agent name.</p>
<p>The external destination must already exist. The external destination representing an agent is created automatically on a database instance when the agent registers with that instance.</p>
<p>An agent's name is specified in its agent configuration file. If it is not specified, it defaults to the first part (before the first period) of the name of the host it resides on.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t26" headers="r1c1-t26">
<p><code>tns_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t26 r1c2-t26">
<p>An Oracle Net connect identifier that is resolved to the Oracle database instance being connected to. The exact syntax depends on the Oracle Net configuration.The connect identifier can be a complete Oracle Net connect descriptor (network address and database service name) or a <span class="italic">net service name</span>, which is an alias for a connect descriptor. The alias must be resolved in the tnsnames.ora file on the local computer. The maximum size for <code>tns_name</code> is 2000 characters.</p>
<p>If <code>tns_name</code> is <code>NULL</code>, the agent connects to the default Oracle database on its host. You specify the default database by assigning values to the <code>ORACLE_HOME</code> and <code>ORACLE_SID</code> parameters in the agent configuration file, schagent.conf, located in the agent home directory.</p>
<p>See <a class="olink NETAG008" href="../../network.112/e41945/naming.htm#NETAG008"><span class="italic">Oracle Database Net Services Administrator's Guide</span></a> for more information on connect identifiers.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t26" headers="r1c1-t26">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t26 r1c2-t26">
<p>A text string that describes the database destination. Scheduler does not use this argument.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8250"></a>Usage Notes</p>
<p>Database destinations reside in a particular schema and can be created by any user with the <code>CREATE JOB</code> system privilege. To create a database destination in a schema other than your own, you must have the <code>CREATE ANY JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72294" class="refsect2"><a id="CHDEBDFH"></a>
<hr />
<h3 class="refsect2">CREATE_EVENT_SCHEDULE Procedure</h3>
<p>This procedure creates an event schedule, which is used to start a job when a particular event is raised.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8251"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_EVENT_SCHEDULE (
   schedule_name           IN VARCHAR2,
   start_date              IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   event_condition         IN VARCHAR2 DEFAULT NULL,
   queue_spec              IN VARCHAR2,
   end_date                IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div id="ARPLS72295" class="refsect3"><a id="sthref8252"></a>
<h4 class="refsect3">Parameters</h4>
<div id="ARPLS72296" class="tblformal">
<p class="titleintable"><a id="sthref8253"></a><a id="sthref8254"></a>Table 129-24 CREATE_EVENT_SCHEDULE Parameters</p>
<table class="cellalignment1229" title="CREATE_EVENT_SCHEDULE Parameters" summary="CREATE_EVENT_SCHEDULER Parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t27">Parameter</th>
<th class="cellalignment1227" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t27" headers="r1c1-t27">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t27 r1c2-t27">
<p>The name to assign to the schedule. The name must be unique in the SQL namespace. For example, a schedule cannot have the same name as a table in a schema. If no name is specified, then an error occurs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t27" headers="r1c1-t27">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t27 r1c2-t27">
<p>This attribute specifies the date and time that this schedule becomes valid. Occurrences of the event before this date and time are ignored in the context of this schedule.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t27" headers="r1c1-t27">
<p><code>event_condition</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t27 r1c2-t27">
<p>This is a conditional expression based on the columns of the event source queue table. The expression must have the syntax of an Advanced Queuing rule. Accordingly, you can include user data properties in the expression, provided that the message payload is an object type, and that you prefix object attributes in the expression with <code>tab.user_data</code>. For more information on rules, see the <code>DBMS_AQADM</code>.<code>ADD_SUBSCRIBER</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t27" headers="r1c1-t27">
<p><code>queue_spec</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t27 r1c2-t27">
<p>This argument specifies either a file watcher name or the queue into which events that start this particular job are enqueued (the <span class="bold">source queue</span>). If the source queue is a secure queue, the <code>queue_spec</code> argument is a string containing a pair of values of the form <span class="italic">queue_name</span>, <span class="italic">agent name</span>. For non-secure queues, only the queue name need be provided. If a fully qualified queue name is not provided, the queue is assumed to be in the job owner's schema. In the case of secure queues, the agent name provided should belong to a valid agent that is currently subscribed to the queue.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t27" headers="r1c1-t27">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t27 r1c2-t27">
<p>The date and time after which jobs do not run and windows do not open.</p>
<p>An event schedule that has no <code>end_date</code> is valid forever.</p>
<p><code>end_date</code> must be after the <code>start_date</code>. If it is not, then an error is generated when the schedule is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t27" headers="r1c1-t27">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t27 r1c2-t27">
<p>This attribute specifies an optional comment about the schedule. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect3" -->
<div id="ARPLS72297" class="refsect3"><a id="sthref8255"></a>
<h4 class="refsect3">Usage Notes</h4>
<p>You must have the <code>CREATE</code> <code>JOB</code> privilege to create a schedule in your own schema or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege to create a schedule in someone else's schema by specifying <code>schema.schedule_name</code>. Once a schedule has been created, it can be used by other users. The schedule is created with access to <code>PUBLIC</code>. Therefore, there is no need to explicitly grant access to the schedule.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFJIJ">"CREATE_FILE_WATCHER Procedure"</a></div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72298" class="refsect2"><a id="BABFFJIJ"></a>
<hr />
<h3 class="refsect2">CREATE_FILE_WATCHER Procedure</h3>
<p>This procedure creates a file watcher, which is a Scheduler object that defines the location, name, and other properties of a file whose arrival on a system causes the Scheduler to start a job. After you create a file watcher, you reference it in an event-based job or event schedule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8256"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_FILE_WATCHER (
   file_watcher_name            IN VARCHAR2,
   directory_path               IN VARCHAR2,
   file_name                    IN VARCHAR2,
   credential_name              IN VARCHAR2,
   destination                  IN VARCHAR2  DEFAULT NULL,
   min_file_size                IN PLS_INTEGER DEFAULT 0,
   steady_state_duration        IN INTERVAL DAY TO SECOND DEFAULT NULL,
   comments                     IN VARCHAR2 DEFAULT NULL,
   enabled                      IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8257"></a>Parameters</p>
<div id="ARPLS72299" class="tblformal">
<p class="titleintable"><a id="sthref8258"></a><a id="sthref8259"></a>Table 129-25 CREATE_FILE_WATCHER Parameters</p>
<table class="cellalignment1229" title="CREATE_FILE_WATCHER Parameters" summary="CREATE_EVENT_SCHEDULER Parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Parameter</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><code>file_watcher_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>The name to assign to the file watcher. The name must be unique in the SQL namespace. For example, a file watcher cannot have the same name as a table in a schema. This can optionally be prefixed with a schema name. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t29" headers="r1c1-t29">
<p><code>directory_path</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t29 r1c2-t29">
<p>Directory in which the file is expected to arrive. The single wildcard '?' at the beginning of the path denotes the Oracle home path. For example, '?/rdbms/log' denotes the rdbms/log subdirectory of the Oracle home directory.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t29" headers="r1c1-t29">
<p><code>file_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t29 r1c2-t29">
<p>Name of the file to look for. Two wildcards are permitted anywhere in the file name: '?' denotes any single character, and '*' denotes zero or more characters. This attribute cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t29" headers="r1c1-t29">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t29 r1c2-t29">
<p>Name of a valid Scheduler credential object.</p>
<p>The file watcher uses the credential to authenticate itself with the host operating system to access the watched-for file. The file watcher owner must have <code>EXECUTE</code> privileges on the credential. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t29" headers="r1c1-t29">
<p><code>destination</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t29 r1c2-t29">
<p>Name of an external destination. You create an external destination by registering a remote Scheduler agent with the database. See the view <code>ALL_SCHEDULER_EXTERNAL_DESTS</code> for valid external destination names. If this parameter is <code>NULL</code>, the file watcher is created on the local host.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t29" headers="r1c1-t29">
<p><code>min_file_size</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t29 r1c2-t29">
<p>Minimum size in bytes that the file must be before the file watcher considers the file found. Default is 0.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t29" headers="r1c1-t29">
<p><code>steady_state_duration</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t29 r1c2-t29">
<p>Minimum time interval that the file must remain unchanged before the file watcher considers the file found. Cannot exceed one hour. If <code>NULL</code>, an internal value is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t29" headers="r1c1-t29">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t29 r1c2-t29">
<p>Optional comment.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t29" headers="r1c1-t29">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t29 r1c2-t29">
<p>If <code>TRUE</code> (the default), the file watcher is enabled.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8260"></a>Usage Notes</p>
<p>You must have the <code>CREATE</code> <code>JOB</code> system privilege to create a file watcher in your own schema. You require the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege to create a file watcher in a schema different from your own (except the <code>SYS</code> schema, which is disallowed).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72850" class="refsect2"><a id="BABFGABJ"></a>
<hr />
<h3 class="refsect2">CREATE_GROUP Procedure</h3>
<p>This procedure creates a group. Groups contain members, which you can specify when you create the group or at a later time. There are three types of groups: window groups, database destination groups, and external destination groups.</p>
<p>You can use a group name in other <code>DBMS_SCHEDULER</code> package procedures to specify a list of objects. For example, to specify multiple destinations for a remote database job, you provide a group name for the <code>DESTINATION_NAME</code> parameter of the job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8261"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_GROUP (
   group_name           IN VARCHAR2,
   group_type           IN VARCHAR2,
   member               IN VARCHAR2 DEFAULT NULL,
   comments             IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8262"></a>Parameters</p>
<div id="ARPLS72851" class="tblformal">
<p class="titleintable"><a id="sthref8263"></a><a id="sthref8264"></a>Table 129-26 CREATE_GROUP Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_GROUP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_GROUP subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t30">Parameter</th>
<th class="cellalignment1227" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t30" headers="r1c1-t30">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t30 r1c2-t30">
<p>The name to assign to the group. It can optionally be prefixed with a schema name. It cannot be <code>NULL</code>. It is converted to uppercase unless enclosed in double-quotes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t30" headers="r1c1-t30">
<p><code>group_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t30 r1c2-t30">
<p>The type of members in the group. All members must be of the same type. Possible types are:</p>
<ul>
<li>
<p>'<code>DB_DEST</code>'</p>
<p>Database destination: Members are database destinations, for running remote database jobs.</p>
</li>
<li>
<p>'<code>EXTERNAL_DEST</code></p>
<p>External destination: Members are external destinations, for running remote external jobs.</p>
</li>
<li>
<p>'<code>WINDOW</code>'</p>
<p>Members are Scheduler windows. You must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege to create a group of this type.</p>
</li>
</ul>
<p>Members in database destination and external destination groups have the following format:</p>
<pre>
[[<span class="italic">schema</span>.]<span class="italic">credential</span>@][<span class="italic">schema</span>.]<span class="italic">destination</span>
</pre>
<p>where:</p>
<ul>
<li>
<p><code><span class="codeinlineitalic">credential</span></code> is the name of an existing credential.</p>
</li>
<li>
<p><code><span class="codeinlineitalic">destination</span></code> is the name of an existing database destination or external destination.</p>
</li>
</ul>
<p>The credential portion of a destination member is optional. If omitted, the job using this destination member uses its default credential.</p>
<p>Members in window groups are window names. Because all Scheduler windows reside in the <code>SYS</code> schema, you do not specify a schema name for windows.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t30" headers="r1c1-t30">
<p><code>member</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t30 r1c2-t30">
<p>Optional comma-separated list of group members. The default is <code>NULL</code>. If <code>NULL</code>, use the <code>ADD_GROUP_MEMBER</code> procedure to add members. You can also use <code>ADD_GROUP_MEMBER</code> to add additional members at a later time.</p>
<p>The keyword <code>LOCAL</code> can be used as a member in database destination groups and external destination groups.</p>
<ul>
<li>
<p>In database destination groups, <code>LOCAL</code> represents the source database on which the job is created. It cannot be preceded with a credential.</p>
</li>
<li>
<p>In external destination groups, <code>LOCAL</code> represents the host on which the source database resides. It can be optionally preceded with a credential name. If no credential is provided, jobs that use this group as their destination must have a default credential.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t30" headers="r1c1-t30">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t30 r1c2-t30">
<p>A text string that describes the group. Scheduler does not use this argument.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8265"></a>Usage Notes</p>
<p>Groups reside in a particular schema and can be created by any user with the <code>CREATE JOB</code> system privilege. To create a group in a schema other than your own, you must have the <code>CREATE ANY JOB</code> privilege. The group name must be unique among all Scheduler objects.</p>
<p>You can grant the <code>SELECT</code> privilege on a group so that other users can reference the group when creating jobs or schedules. To enable other users to modify a group, you can grant the <code>ALTER</code> privilege on the group.</p>
<p>Each group member must be unique within the group. For destination groups, the credential/destination name pairs must be unique within the group. An error is generated if any of the group members do not exist. For destination groups, both the credential and destination portions of a member must exist.</p>
<p>Another group of the same type can be a group member. The Scheduler immediately expands the included group name into its list of members.</p>
<p>Groups are created enabled, but you can disable them.</p>
<p>This procedure supersedes the procedure <code>CREATE_WINDOW_GROUP</code>, which is deprecated in Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8266"></a>Example</p>
<p>The following PL/SQL block creates a group named <code>production_dest1</code>, whose members are database destinations for a collection of production databases.</p>
<pre>
BEGIN
  DBMS_SCHEDULER.CREATE_GROUP(
    GROUP_NAME    =&gt; 'production_dest1',
    GROUP_TYPE    =&gt; 'DB_DEST',
    MEMBER        =&gt; 'LOCAL, oracle_cred@prodhost1, prodhost2',
    COMMENTS      =&gt; 'All sector1 production machines');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72300" class="refsect2"><a id="i1000363"></a>
<hr />
<h3 class="refsect2">CREATE_JOB Procedure</h3>
<p>This procedure creates a single job (regular or lightweight). If you create the job as enabled by setting the <code>enabled</code> attribute to <code>TRUE</code>, the Scheduler automatically runs the job according to its schedule. If you create the job disabled, the job does not run until you enable it with the <a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a>.</p>
<p>The procedure is overloaded. The different functionality of each form of syntax is presented along with the syntax declaration.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8267"></a>Syntax</p>
<p>Creates a job in a single call without using an existing program or schedule:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name             IN VARCHAR2,
   job_type             IN VARCHAR2,
   job_action           IN VARCHAR2,
   number_of_arguments  IN PLS_INTEGER              DEFAULT 0,
   start_date           IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   repeat_interval      IN VARCHAR2                 DEFAULT NULL,
   end_date             IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   job_class            IN VARCHAR2                 DEFAULT 'DEFAULT_JOB_CLASS',
   enabled              IN BOOLEAN                  DEFAULT FALSE,
   auto_drop            IN BOOLEAN                  DEFAULT TRUE,
   comments             IN VARCHAR2                 DEFAULT NULL,
   credential_name      IN VARCHAR2                 DEFAULT NULL,
   destination_name     IN VARCHAR2                 DEFAULT NULL);
</pre>
<p>Creates a job using a named schedule object and a named program object:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name                IN VARCHAR2,
   <span class="bold">program_name</span>            IN VARCHAR2,
   <span class="bold">schedule_name</span>           IN VARCHAR2,
   job_class               IN VARCHAR2              DEFAULT 'DEFAULT_JOB_CLASS',
   enabled                 IN BOOLEAN               DEFAULT FALSE,
   auto_drop               IN BOOLEAN               DEFAULT TRUE,
   comments                IN VARCHAR2              DEFAULT NULL,
   job_style               IN VARCHAR2              DEFAULT 'REGULAR',
   credential_name         IN VARCHAR2              DEFAULT NULL,
   destination_name        IN VARCHAR2              DEFAULT NULL);
</pre>
<p>Creates a job using a named program object and an inlined schedule:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name             IN VARCHAR2,
   <span class="bold">program_name</span>        IN VARCHAR2,
   <span class="bold">start_date</span>          IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   <span class="bold">repeat_interval</span>     IN VARCHAR2                  DEFAULT NULL,
   <span class="bold">end_date</span>            IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   job_class            IN VARCHAR2                 DEFAULT 'DEFAULT_JOB_CLASS',
   enabled              IN BOOLEAN                  DEFAULT FALSE,
   auto_drop            IN BOOLEAN                  DEFAULT TRUE,
   comments             IN VARCHAR2                 DEFAULT NULL,
   job_style            IN VARCHAR2                 DEFAULT 'REGULAR',
   credential_name      IN VARCHAR2                 DEFAULT NULL,
   destination_name     IN VARCHAR2                 DEFAULT NULL);
</pre>
<p>Creates a job using a named schedule object and an inlined program:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name               IN VARCHAR2,
   <span class="bold">schedule_name</span>         IN VARCHAR2,
   <span class="bold">job_type</span>               IN VARCHAR2,
   <span class="bold">job_action</span>             IN VARCHAR2,
   <span class="bold">number_of_arguments</span>   IN PLS_INTEGER       DEFAULT 0,
   job_class               IN VARCHAR2          DEFAULT 'DEFAULT_JOB_CLASS',
   enabled                 IN BOOLEAN           DEFAULT FALSE,
   auto_drop               IN BOOLEAN           DEFAULT TRUE,
   comments                IN VARCHAR2          DEFAULT NULL,
   credential_name         IN VARCHAR2          DEFAULT NULL,
   destination_name        IN VARCHAR2          DEFAULT NULL);
</pre>
<p>Creates a job using an inlined program and an event:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name                IN VARCHAR2,
   <span class="bold">job_type</span>               IN VARCHAR2,
   <span class="bold">job_action</span>             IN VARCHAR2,
   <span class="bold">number_of_arguments</span>   IN PLS_INTEGER       DEFAULT 0,
   <span class="bold">start_date</span>             IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   <span class="bold">event_condition</span>       IN VARCHAR2          DEFAULT NULL,
   <span class="bold">queue_spec</span>             IN VARCHAR2,
   <span class="bold">end_date</span>               IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   job_class               IN VARCHAR2          DEFAULT 'DEFAULT_JOB_CLASS',
   enabled                 IN BOOLEAN           DEFAULT FALSE,
   auto_drop               IN BOOLEAN           DEFAULT TRUE,
   comments                IN VARCHAR2          DEFAULT NULL,
   credential_name         IN VARCHAR2          DEFAULT NULL,
   destination_name        IN VARCHAR2          DEFAULT NULL);
</pre>
<p>Creates a job using a named program object and an event:</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB (
   job_name                IN VARCHAR2,
   program_name            IN VARCHAR2,
   <span class="bold">start_date</span>             IN TIMESTAMP WITH TIME ZONE,
   <span class="bold">event_condition</span>       IN VARCHAR2,
   <span class="bold">queue_spec</span>             IN VARCHAR2,
   <span class="bold">end_date</span>               IN TIMESTAMP WITH TIME ZONE,
   job_class               IN VARCHAR2          DEFAULT 'DEFAULT_JOB_CLASS',
   enabled                 IN BOOLEAN           DEFAULT FALSE,
   auto_drop               IN BOOLEAN           DEFAULT TRUE,
   comments                IN VARCHAR2          DEFAULT NULL,
   job_style               IN VARCHAR2          DEFAULT 'REGULAR',
   credential_name         IN VARCHAR2          DEFAULT NULL,
   destination_name        IN VARCHAR2          DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8268"></a>Parameters</p>
<div id="ARPLS72301" class="tblformal">
<p class="titleintable"><a id="sthref8269"></a><a id="BABCHEAD"></a>Table 129-27 <span class="bolditalic">CREATE_JOB Procedure Parameters</span></p>
<table class="cellalignment1229" title="CREATE_JOB Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t31">Parameter</th>
<th class="cellalignment1227" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t31" headers="r1c1-t31">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c2-t31">
<p>The name to assign to the job. The name must be unique in the SQL namespace. For example, a job cannot have the same name as a table in a schema. If the job being created will reside in another schema, it must be qualified with the schema name.</p>
<p>If <code>job_name</code> is not specified, an error is generated. If you want to have a name generated by the Scheduler, you can use the <code>GENERATE_JOB_NAME</code> procedure to generate a name and then use the output in the <code>CREATE_JOB</code> procedure. The <code>GENERATE_JOB_NAME</code> procedure generates a number from a sequence, which is the job name. You can prefix the number with a string. The job name will then be the string with the number from the sequence appended to it. See <a href="#i1011295">"GENERATE_JOB_NAME Function"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t31" headers="r1c1-t31">
<p><code>job_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c2-t31">
<p>This attribute specifies the type of job that you are creating. If it is not specified, an error is generated. The supported values are:</p>
<ul>
<li>
<p><code>'PLSQL_BLOCK</code>'</p>
<p>This specifies that the job is an anonymous PL/SQL block. Job or program arguments are not supported when the job or program type is <code>PLSQL_BLOCK</code>. In this case, the number of arguments must be 0.</p>
</li>
<li>
<p><code>'STORED_PROCEDURE'</code></p>
<p>This specifies that the job is a PL/SQL or Java stored procedure, or an external C subprogram. Only procedures, not functions with return values, are supported.</p>
</li>
<li>
<p><code>'EXECUTABLE'</code></p>
<p>This specifies that the job is external to the database. External jobs are anything that can be executed from the command line of the operating system. <code>Anydata</code> arguments are not supported with a job or program type of <code>EXECUTABLE</code>. The job owner must have the <code>CREATE</code> <code>EXTERNAL</code> <code>JOB</code> system privilege before the job can be enabled or run.</p>
</li>
<li>
<p>'<code>CHAIN</code>'</p>
<p>This specifies that the job is a chain. Arguments are not supported for a chain, so <code>number_of_arguments</code> must be 0.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t31" headers="r1c1-t31">
<p><code>job_action</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t31 r1c2-t31">
<p>This attribute specifies the action of the job. If <code>job_action</code> is not specified for an inline program, then an error is generated when creating the job.</p>
<p>The following actions are possible:</p>
<ul>
<li>
<p>For a PL/SQL block:</p>
<p>The action is to execute PL/SQL code. These blocks must end with a semicolon. For example, <code>my_proc();</code> or <code>BEGIN my_proc(); END;</code> or <code>DECLARE arg pls_integer:= 10; BEGIN my_proc2(arg); END;</code>.</p>
<p>Note that the Scheduler wraps <code>job_action</code> in its own block and passes the following to PL/SQL for execution: <code>DECLARE ... BEGIN job_action END;</code> This is done to declare some internal Scheduler variables. You can include any Scheduler metadata attribute except <code>event_message</code> in your PL/SQL code. You use the attribute name as you use any other PL/SQL identifier, and the Scheduler assigns it a value.</p>
<p>See <a href="#BABCHJCI">Table 129-39</a> for details on available metadata attributes.</p>
</li>
<li>
<p>For a stored procedure:</p>
<p>The action is the name of the stored procedure. You have to specify the schema if the procedure resides in another schema than the job. If case sensitivity is needed, enclose the schema name and the store procedure name in double quotes. For example, <code>job_action_action=&gt;'"</code><code><span class="codeinlineitalic">Schema</span></code><code>"."</code><code><span class="codeinlineitalic">Procedure</span></code><code>"</code>'.</p>
<p>PL/SQL procedures with <code>INOUT</code> or <code>OUT</code> arguments are not supported as <code>job_action</code> when the job or program type is <code>STORED_PROCEDURE</code>.</p>
</li>
<li>
<p>For an executable:</p>
<p>The action is the name of the external executable, including the full path name, but excluding any command-line arguments. If the action starts with a single question mark ('?'), the question mark is replaced by the path to the Oracle home directory for a local job or to the Scheduler agent home for a remote job. If the action contains an at-sign ('@') and the job is local, the at-sign is replaced with the SID of the current Oracle instance.</p>
</li>
<li>
<p>For a chain:</p>
<p>The action is the name of a Scheduler chain object. You must specify the schema of the chain if it resides in a different schema than the job.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t31" headers="r1c1-t31">
<p><code>number_of_arguments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t31 r1c2-t31">
<p>This attribute specifies the number of arguments that the job expects. The range is 0-255, with the default being 0.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t31" headers="r1c1-t31">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t31 r1c2-t31">
<p>The name of the program associated with this job. If the program is of type <code>EXECUTABLE</code>, the job owner must have the <code>CREATE</code> <code>EXTERNAL</code> <code>JOB</code> system privilege before the job can be enabled or run.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t31" headers="r1c1-t31">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t31 r1c2-t31">
<p>This attribute specifies the first date and time on which this job is scheduled to start. If <code>start_date</code> and <code>repeat_interval</code> are left null, then the job is scheduled to run as soon as the job is enabled.</p>
<p>For repeating jobs that use a calendaring expression to specify the repeat interval, <code>start_date</code> is used as a reference date. The first time the job runs is the first match of the calendaring expression that is on or after the current date and time.</p>
<p>The Scheduler cannot guarantee that a job executes on an exact time because the system may be overloaded and thus resources unavailable.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t31" headers="r1c1-t31">
<p><code>event_condition</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t31 r1c2-t31">
<p>This is a conditional expression based on the columns of the event source queue table. The expression must have the syntax of an Advanced Queuing rule. Accordingly, you can include user data properties in the expression provided that the message payload is an object type, and that you prefix object attributes in the expression with <code>tab.user_data</code>. For more information on rules, see the <code>DBMS_AQADM</code>.<code>ADD_SUBSCRIBER</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t31" headers="r1c1-t31">
<p><code>queue_spec</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t31 r1c2-t31">
<p>This argument specifies either of the following:</p>
<ul>
<li>
<p>The source queue where events that start this particular job are enqueued. If it is secure, then the <code>queue_spec</code> argument is a pair of values of the form <code><span class="codeinlineitalic">queue_name, agent name</span></code>. If it is not secure, then only the queue name need be provided. If a fully qualified queue name is not provided, the queue is assumed to be in the job owner's schema. In the case of secure queues, the agent name provided should belong to a valid agent that is currently subscribed to the queue.</p>
</li>
<li>
<p>A file watcher name. For more information on this option, see <a class="olink ADMIN13481" href="../../server.112/e25494/scheduse.htm#ADMIN13481"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t31" headers="r1c1-t31">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t31 r1c2-t31">
<p>This attribute specifies how often the job repeats. You can specify the repeat interval by using calendaring or PL/SQL expressions.</p>
<p>The expression specified is evaluated to determine the next time the job should run. If <code>repeat_interval</code> is not specified, the job runs only once at the specified start date. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for further information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t31" headers="r1c1-t31">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t31 r1c2-t31">
<p>The name of the schedule, window, or window group associated with this job.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t31" headers="r1c1-t31">
<p><code>job_class</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t31 r1c2-t31">
<p>The class this job is associated with.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t31" headers="r1c1-t31">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t31 r1c2-t31">
<p>This attribute specifies the date and time after which the job expires and is no longer run. After the <code>end_date</code>, if <code>auto_drop</code> is <code>TRUE</code>, the job is dropped. If <code>auto_drop</code> is <code>FALSE</code>, the job is disabled and the <code>STATE</code> of the job is set to <code>COMPLETED</code>.</p>
<p>If no value for <code>end_date</code> is specified, the job repeats forever unless <code>max_runs</code> or <code>max_failures</code> is set, in which case the job stops when either value is reached.</p>
<p>The value for <code>end_date</code> must be after the value for <code>start_date</code>. If it is not, an error is generated when the job is enabled.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t31" headers="r1c1-t31">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t31 r1c2-t31">
<p>This attribute specifies a comment about the job. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t31" headers="r1c1-t31">
<p><code>job_style</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t31 r1c2-t31">
<p>Style of the job being created. This argument can have one of the following values:</p>
<ul>
<li>
<p><code>'REGULAR'</code> creates a regular job. This is the default.</p>
</li>
<li>
<p><code>'LIGHTWEIGHT'</code> creates a lightweight job. This value is permitted only when the job references a program object. Use lightweight jobs when you have many short-duration jobs that run frequently. Under certain circumstances, using lightweight jobs can deliver a small performance gain.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t31" headers="r1c1-t31">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t31 r1c2-t31">
<p>The default credential to use with the job. Applicable only to remote database jobs, remote external jobs, local external jobs, and event-based jobs that process file arrival events. The credential must exist.</p>
<p>For local database jobs, it must be <code>NULL</code>.</p>
<p>For local external jobs only, if this attribute is <code>NULL</code> (the default), then a preferred (default) credential is selected. See <a class="olink ADMIN13360" href="../../server.112/e25494/schedover.htm#ADMIN13360"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about preferred credentials for local external jobs.</p>
<p>See also: <a href="#BABCAEAC">"CREATE_CREDENTIAL Procedure"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t31" headers="r1c1-t31">
<p><code>destination_name</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t31 r1c2-t31">
<p>The database destination or external destination for the job. Use for remote database jobs and remote external jobs only. Must be <code>NULL</code> for jobs running on the local database or for local external jobs (executables).</p>
<p>This attribute can be a single destination name or the name of a group of type '<code>EXTERNAL_DEST</code>' or '<code>DB_DEST</code>'. The single destination or group must already exist.</p>
<p>The following applies to this attribute:</p>
<ul>
<li>
<p>If it is a database destination, it must have been created by the <a href="#BABEEIIF">CREATE_DATABASE_DESTINATION Procedure</a>.</p>
</li>
<li>
<p>If it is an external destination, it must have been implicitly created by registering a remote Scheduler agent with the local database.</p>
</li>
<li>
<p>If it is a group, each member of the group must exist, and the job must run on all destinations named in the group. See <a href="#BABFGABJ">"CREATE_GROUP Procedure"</a>.</p>
</li>
</ul>
<p><code>destination_name</code> cannot reference a destination group when:</p>
<ul>
<li>
<p>The job type is '<code>CHAIN</code>'</p>
</li>
<li>
<p>The job style is '<code>LIGHTWEIGHT</code>'</p>
</li>
</ul>
<p>If the <code>credential_name</code> argument of <code>CREATE_JOB</code> is <code>NULL</code>, each destination must be preceded by a credential, in the following format:</p>
<pre>
<span class="codeinlineitalic">credential</span>.<span class="codeinlineitalic">destination</span>
</pre>
<p>The credential must already exist. If the <code>credential_name</code> argument is provided, then it serves as the default credential for every destination that is not preceded by a credential.</p>
<p>You can query the views <code>*_SCHEDULER_DB_DESTS</code> and <code>ALL_SCHEDULER_EXTERNAL DESTS</code> for existing destinations and <code>*_SCHEDULER_GROUP_MEMBERS</code> for existing groups and their members.</p>
<p>*** <code>destination_name</code> supersedes the <code>destination</code> job attribute, which is deprecated in Oracle Database 11<span class="italic">g</span> Release 2 (11.2).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t31" headers="r1c1-t31">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t31 r1c2-t31">
<p>This attribute specifies whether the job is created enabled or not. The possible settings are <code>TRUE</code> or <code>FALSE</code>. By default, this attribute is set to <code>FALSE</code> and, therefore, the job is created as disabled. A disabled job means that the metadata about the job has been captured, and the job exists as a database object. However, the Scheduler ignores the job and the job coordinator does not pick it for processing. In order for the job coordinator to process the job, the job must be enabled. You can enable a job by setting this argument to <code>TRUE</code> or by using the <code>ENABLE</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t31" headers="r1c1-t31">
<p><code>auto_drop</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t31 r1c2-t31">
<p>This flag, if <code>TRUE</code>, causes a job to be automatically dropped after it has completed or has been automatically disabled. A job is considered completed if:</p>
<ul>
<li>
<p>Its end date (or the end date of the job schedule) has passed.</p>
</li>
<li>
<p>It has run <code>max_runs</code> number of times. <code>max_runs</code> must be set with <code>SET_ATTRIBUTE</code>.</p>
</li>
<li>
<p>It is not a repeating job and has run once.</p>
</li>
</ul>
<p>A job is disabled when it has failed <code>max_failures</code> times. <code>max_failures</code> is also set with <code>SET_ATTRIBUTE</code>.</p>
<p>If this flag is set to <code>FALSE</code>, the jobs are not dropped and their metadata is kept until the job is explicitly dropped with the <code>DROP_JOB</code> procedure.</p>
<p>By default, jobs are created with <code>auto_drop</code> set to <code>TRUE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8270"></a>Usage Notes</p>
<p>Jobs are created as disabled by default. You must explicitly enable them so that they will become active and scheduled. Before enabling a job, ensure that all program arguments, if any, are defined, either by defining default values in the program object or by supplying values with the job.</p>
<p>The <code>JOB_QUEUE_PROCESSES</code> initialization parameter specifies the maximum number of processes that can be created for the execution of jobs. Beginning with Oracle Database 11<span class="italic">g</span> Release 2 (11.2), <code>JOB_QUEUE_PROCESSES</code> applies to <code>DBMS_SCHEDULER</code> jobs. Setting this parameter to 0 disables <code>DBMS_SCHEDULER</code> jobs.</p>
<p>To create a job in your own schema, you need to have the <code>CREATE</code> <code>JOB</code> privilege. A user with the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege can create a job in any schema. If the job being created will reside in another schema, the job name must be qualified with the schema name. For a job of type <code>EXECUTABLE</code> (or for a job that points to a program of type <code>EXECUTABLE</code>), the job owner must have the <code>CREATE EXTERNAL JOB</code> system privilege before the job can be enabled or run.</p>
<p>Associating a job with a particular class or program requires <code>EXECUTE</code> privileges for that class or program.</p>
<p>Not all possible job attributes can be set with <code>CREATE_JOB</code>. Some must be set after the job is created. For example, job arguments must be set with the <a href="#i1011390">SET_JOB_ARGUMENT_VALUE Procedure</a> or the <a href="#i1000820">SET_JOB_ANYDATA_VALUE Procedure</a>. Other job attributes, such as <code>job_priority</code> and <code>max_runs</code>, are set with the <a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a>.</p>
<p>To create multiple jobs efficiently, use the <code>CREATE_JOBS</code> procedure.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Scheduler runs event-based jobs for each occurrence of an event that matches the event condition of the job. However, events that occur while the job is already running are ignored; the event gets consumed, but does not trigger another run of the job.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72302" class="refsect2"><a id="i1011092"></a>
<hr />
<h3 class="refsect2">CREATE_JOB_CLASS Procedure</h3>
<p>This procedure creates a job class. Job classes are created in the <code>SYS</code> schema.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8271"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_JOB_CLASS (
   job_class_name            IN VARCHAR2,
   resource_consumer_group   IN VARCHAR2 DEFAULT NULL,
   service                   IN VARCHAR2 DEFAULT NULL,
   logging_level             IN PLS_INTEGER
                                DEFAULT DBMS_SCHEDULER.LOGGING_RUNS,
   log_history               IN PLS_INTEGER DEFAULT NULL,
   comments                  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8272"></a>Parameters</p>
<div id="ARPLS72303" class="tblformal">
<p class="titleintable"><a id="sthref8273"></a><a id="sthref8274"></a>Table 129-28 CREATE_JOB_CLASS Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_JOB_CLASS Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_JOB_CLASS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t33">Parameter</th>
<th class="cellalignment1227" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t33" headers="r1c1-t33">
<p><code>job_class_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t33 r1c2-t33">
<p>The name to assign to the job class. Job classes can only be created in the <code>SYS</code> schema.</p>
<p>This attribute specifies the name of the job class and uniquely identifies the job class. The name must be unique in the SQL namespace. For example, a job class cannot have the same name as a table in a schema.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t33" headers="r1c1-t33">
<p><code>resource_consumer_group</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t33 r1c2-t33">
<p>This attribute specifies the resource consumer group that his class is associated with. A resource consumer group is a set of synchronous or asynchronous sessions that are grouped together based on their processing needs. A job class has a many-to-one relationship with a resource consumer group. The resource consumer group that the job class associates with determines the resources that are allocated to the job class.</p>
<p>If a resource consumer group is dropped, job classes associated with it are then associated with the default resource consumer group.</p>
<p>If no resource consumer group is specified, job classes are associated with the default resource consumer group.</p>
<p>If the specified resource consumer group does not exist when creating the job class, an error occurs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t33" headers="r1c1-t33">
<p><code>service</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t33 r1c2-t33">
<p>This attribute specifies the database service that the jobs in this class have affinity to. In an Oracle RAC environment, this means that the jobs in this class only run on those database instances that are assigned to the specific service.</p>
<p>Note that a service can be mapped to a resource consumer group, so you can also control resources allocated to jobs by specifying a service. See <code>DBMS_RESOURCE_MANAGER</code>.<code>SET_CONSUMER_GROUP_MAPPING</code> for details. If both the <code>resource_consumer_group</code> and <code>service</code> attributes are specified, and if the service is mapped to a resource consumer group, the <code>resource_consumer_group</code> attribute takes precedence.</p>
<p>If no service is specified, the job class belongs to the default service, which means it has no service affinity and any one of the database instances within the cluster might run the job. If the service that a job class belongs to is dropped, the job class will then belong to the default service.</p>
<p>If the specified service does not exist when creating the job class, then an error occurs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t33" headers="r1c1-t33">
<p><code>logging_level</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t33 r1c2-t33">
<p>This attribute specifies how much information is logged. The possible options are:</p>
<ul>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_OFF</code></p>
<p>No logging is performed for any jobs in this class.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_RUNS</code></p>
<p>The Scheduler writes detailed information to the job log for all runs of each job in this class. This is the default.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_FAILED_RUNS</code></p>
<p>The Scheduler logs only jobs that failed in this class.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_FULL</code></p>
<p>In addition to recording every run of a job, the Scheduler records all operations performed on all jobs in this class. Every time a job is created, enabled, disabled, altered (with <code>SET_ATTRIBUTE</code>), stopped, and so, an entry is recorded in the log.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t33" headers="r1c1-t33">
<p><code>log_history</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t33 r1c2-t33">
<p>This attribute controls the number of days that job log entries for jobs in this class are retained. It helps prevent the job log from growing indiscriminately.</p>
<p>The range of valid values is 0 through1000000. If set to 0, no history is kept. If <code>NULL</code> (the default), retention days are set by the <code>log_history</code> Scheduler attribute (set with <code>SET_SCHEDULER_ATTRIBUTE</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t33" headers="r1c1-t33">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t33 r1c2-t33">
<p>This attribute is for an optional comment about the job class. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8275"></a>Usage Notes</p>
<p>For users to create jobs that belong to a job class, the job owner must have <code>EXECUTE</code> privileges on the job class. Therefore, after the job class has been created, <code>EXECUTE</code> privileges must be granted on the job class so that users create jobs belonging to that class. You can also grant the <code>EXECUTE</code> privilege to a role.</p>
<p>Creating a job class requires the <code>MANAGE</code> <code>SCHEDULER</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72304" class="refsect2"><a id="BABCIJJA"></a>
<hr />
<h3 class="refsect2">CREATE_JOBS Procedure</h3>
<p>This procedure creates multiple jobs (regular or lightweight) and sets the values of their arguments in a single call.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8276"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_JOBS (
   jobdef_array      IN SYS.JOB_DEFINITION_ARRAY,
   commit_semantics  IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8277"></a>Parameters</p>
<div id="ARPLS72305" class="tblformal">
<p class="titleintable"><a id="sthref8278"></a><a id="sthref8279"></a>Table 129-29 CREATE_JOBS Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_JOBS Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_JOBS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t34">Parameter</th>
<th class="cellalignment1227" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t34" headers="r1c1-t34">
<p><code>jobdef_array</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t34 r1c2-t34">
<p>The array of job definitions. See <a href="#BABCJHEF">"Data Structures"</a> for a description of the <code>JOB_DEFINITION_ARRAY</code> and <code>JOB_DEFINITION</code> data types.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t34" headers="r1c1-t34">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t34 r1c2-t34">
<p>The commit semantics. The following types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code> returns on the first error. Previous successfully created jobs are committed to disk. This is the default.</p>
</li>
<li>
<p><code>TRANSACTIONAL</code> returns on the first error and everything that happened before that error is rolled back.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code> tries to absorb any errors and attempts to create the rest of the jobs on the list. It commits all successfully created jobs. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8280"></a>Usage Notes</p>
<p>This procedure creates many jobs in the context of a single transaction. To realize the desired performance gains, the jobs being created must be grouped in batches of sufficient size. Calling <code>CREATE_JOBS</code> with a small array size may not be much faster than calling <code>CREATE_JOB</code> once for each job.</p>
<p>You cannot use this procedure to create multiple-destination jobs. That is, the <code>destination</code> attribute of the <code>job_definition</code> object cannot reference a destination group.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8281"></a>Examples</p>
<p>See <a class="olink ADMIN13095" href="../../server.112/e25494/scheduse.htm#ADMIN13095"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72306" class="refsect2"><a id="i1010013"></a>
<hr />
<h3 class="refsect2">CREATE_PROGRAM Procedure</h3>
<p>This procedure creates a program.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8282"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_PROGRAM (
   program_name             IN VARCHAR2,
   program_type             IN VARCHAR2,
   program_action           IN VARCHAR2,
   number_of_arguments      IN PLS_INTEGER DEFAULT 0,
   enabled                  IN BOOLEAN DEFAULT FALSE,
   comments                 IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8283"></a>Parameters</p>
<div id="ARPLS72307" class="tblformal">
<p class="titleintable"><a id="sthref8284"></a><a id="sthref8285"></a>Table 129-30 CREATE_PROGRAM Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_PROGRAM Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_PROGRAM subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t35">Parameter</th>
<th class="cellalignment1227" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t35" headers="r1c1-t35">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t35 r1c2-t35">
<p>The name to assign to the program. The name must be unique in the SQL namespace. For example, a program cannot have the same name as a table in a schema. If no name is specified, then an error occurs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t35" headers="r1c1-t35">
<p><code>program_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t35 r1c2-t35">
<p>This attribute specifies the type of program you are creating. If it is not specified then you get an error. There are three supported values for <code>program_type</code>:</p>
<ul>
<li>
<p><code>'PLSQL_BLOCK'</code></p>
<p>This specifies that the program is a PL/SQL block. Job or program arguments are not supported when the job or program type is PLSQL_BLOCK. In this case, the number of arguments must be 0.</p>
</li>
<li>
<p><code>'STORED_PROCEDURE'</code></p>
<p>This specifies that the program is a PL/SQL or Java stored procedure, or an external C subprogram. Only procedures, not functions with return values, are supported. PL/SQL procedures with <code>INOUT</code> or <code>OUT</code> arguments are not supported.</p>
</li>
<li>
<p><code>'EXECUTABLE'</code></p>
<p>This specifies that the program is external to the database. External programs imply anything that can be executed from the operating system command line. <code>AnyData</code> arguments are not supported with job or program type EXECUTABLE.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t35" headers="r1c1-t35">
<p><code>program_action</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t35 r1c2-t35">
<p>This attribute specifies the action of the program. The following actions are possible:</p>
<ul>
<li>
<p>For a PL/SQL block, the action is to execute PL/SQL code. These blocks must end with a semicolon.</p>
<p>For example, <code>my_proc();</code> or <code>BEGIN my_proc(); END;</code> or <code>DECLARE arg pls_integer:= 10; BEGIN my_proc2(arg); END;</code>.</p>
<p>Note that the Scheduler wraps <code>job_action</code> in its own block and passes the following to PL/SQL for execution: <code>DECLARE ... BEGIN job_action END;</code> This is done to declare some internal Scheduler variables. You can include any Scheduler metadata attribute except <code>event_message</code> in your PL/SQL code. You use the attribute name as you use any other PL/SQL identifier, and the Scheduler assigns it a value. See <a href="#BABCHJCI">Table 129-39</a> for details on available metadata attributes.</p>
<p>If it is an anonymous block, special Scheduler metadata may be accessed using the following variable names: <code>job_name</code>, <code>job_owner</code>, <code>job_start</code>, <code>window_start</code>, <code>window_end</code>. For more information, see the <a href="#i1011138">"DEFINE_METADATA_ARGUMENT Procedure"</a>.</p>
</li>
<li>
<p>For a stored procedure, the action is the name of the stored procedure. You have to specify the schema if the procedure resides in a schema other than the job.</p>
<p>If case sensitivity is needed, enclose the schema name and the store procedure name in double quotes. For example, <code>program_action=&gt;'"</code><code><span class="codeinlineitalic">Schema</span></code><code>"."</code><code><span class="codeinlineitalic">Procedure</span></code><code>"'.</code></p>
</li>
<li>
<p>For an executable, the action is the name of the external executable, including the full path name, but excluding any command-line arguments. If the action starts with a single question mark ('?'), the question mark is replaced by the path to the Oracle home directory for a local job or to the Scheduler agent home for a remote job. If the action contains an at sign ('@') and the job is local, the at sign is replaced with the SID of the current Oracle instance.</p>
</li>
</ul>
<p>If <code>program_action</code> is not specified, an error is generated</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t35" headers="r1c1-t35">
<p><code>number_of_arguments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t35 r1c2-t35">
<p>This attribute specifies the number of arguments the program takes. If this parameter is not specified, then the default is 0. A program can have a maximum of 255 arguments.</p>
<p>If the <code>program_type</code> is <code>PLSQL_BLOCK</code>, then this parameter is ignored.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t35" headers="r1c1-t35">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t35 r1c2-t35">
<p>This flag specifies whether the program should be created as enabled or not. If the flag is set to <code>TRUE</code>, then validity checks are made and the program is created as <code>ENABLED</code> if all the checks be successful. By default, this flag is set to <code>FALSE</code>, meaning not created enabled. You can also call the <code>ENABLE</code> procedure to enable the program before it can be used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t35" headers="r1c1-t35">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t35 r1c2-t35">
<p>A comment about the program. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8286"></a>Usage Notes</p>
<p>To create a program in their own schema, users need the <code>CREATE</code> <code>JOB</code> privilege. A user with the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege can create a program in any schema. A program is created in a disabled state by default (unless the enabled parameter is set to <code>TRUE</code>). It cannot be executed by a job until it is enabled.</p>
<p>To use your programs, other users must have <code>EXECUTE</code> privileges, therefore once a program has been created, you have to grant <code>EXECUTE</code> privileges on it.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1011161">"DEFINE_PROGRAM_ARGUMENT Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72308" class="refsect2"><a id="i1010076"></a>
<hr />
<h3 class="refsect2">CREATE_SCHEDULE Procedure</h3>
<p>This procedure creates a schedule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8287"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_SCHEDULE (
   schedule_name          IN VARCHAR2,
   start_date             IN TIMESTAMP WITH TIMEZONE DEFAULT NULL,
   repeat_interval        IN VARCHAR2,
   end_date               IN TIMESTAMP WITH TIMEZONE DEFAULT NULL,
   comments               IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8288"></a>Parameters</p>
<div id="ARPLS72309" class="tblformal">
<p class="titleintable"><a id="sthref8289"></a><a id="sthref8290"></a>Table 129-31 CREATE_SCHEDULE Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_SCHEDULE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t37">Parameter</th>
<th class="cellalignment1227" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t37" headers="r1c1-t37">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t37 r1c2-t37">
<p>The name to assign to the schedule. The name must be unique in the SQL namespace. For example, a schedule cannot have the same name as a table in a schema. If no name is specified, then an error occurs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t37" headers="r1c1-t37">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t37 r1c2-t37">
<p>This attribute specifies the first date and time on which this schedule becomes valid. For a repeating schedule, the value for <code>start_date</code> is a reference date. In this case, the start of the schedule is not the <code>start_date</code>; it depends on the repeat interval specified. <code>start_date</code> is used to determine the first instance of the schedule.</p>
<p>If <code>start_date</code> is specified in the past and no value for <code>repeat_interval</code> is specified, the schedule is invalid. For a repeating job or window, <code>start_date</code> can be derived from the <code>repeat_interval</code> if it is not specified.</p>
<p>If <code>start_date</code> is null, then the date that the job or window is enabled is used. <code>start_date</code> and <code>repeat_interval</code> cannot both be null.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t37" headers="r1c1-t37">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t37 r1c2-t37">
<p>This attribute specifies how often the schedule repeats. It is expressed using calendaring syntax. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for further information. PL/SQL expressions are not allowed as repeat intervals for named schedules.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t37" headers="r1c1-t37">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t37 r1c2-t37">
<p>The date and time after which jobs will not run and windows will not open.</p>
<p>A non-repeating schedule that has no <code>end_date</code> is valid forever.</p>
<p><code>end_date</code> has to be after the <code>start_date</code>. If this is not the case, then an error is generated when the schedule is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t37" headers="r1c1-t37">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t37 r1c2-t37">
<p>This attribute specifies an optional comment about the schedule. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8291"></a>Usage Notes</p>
<p>This procedure requires the <code>CREATE</code> <code>JOB</code> privilege to create a schedule in your own schema or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege to create a schedule in someone else's schema by specifying <code>schema.schedule_name</code>. Once a schedule has been created, it can be used by other users. The schedule is created with access to <code>PUBLIC</code>. Therefore, there is no need to explicitly grant access to the schedule.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72310" class="refsect2"><a id="i1016629"></a>
<hr />
<h3 class="refsect2">CREATE_WINDOW Procedure</h3>
<p>This procedure creates a recurring time window and associates it with a resource plan. You can then use the window to schedule jobs that run under the associated resource plan. Windows are created in the <code>SYS</code> schema.</p>
<p>The procedure is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8292"></a>Syntax</p>
<p>Creates a window using a named schedule object:</p>
<pre>
DBMS_SCHEDULER.CREATE_WINDOW (
   window_name             IN VARCHAR2,
   resource_plan           IN VARCHAR2,
   schedule_name           IN VARCHAR2,
   duration                IN INTERVAL DAY TO SECOND,
   window_priority         IN VARCHAR2 DEFAULT 'LOW',
   comments                IN VARCHAR2 DEFAULT NULL);
</pre>
<p>Creates a window using an inlined schedule:</p>
<pre>
DBMS_SCHEDULER.CREATE_WINDOW (
   window_name             IN VARCHAR2,
   resource_plan           IN VARCHAR2,
   start_date              IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   repeat_interval         IN VARCHAR2,
   end_date                IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   duration                IN INTERVAL DAY TO SECOND,
   window_priority         IN VARCHAR2 DEFAULT 'LOW',
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8293"></a>Parameters</p>
<div id="ARPLS72311" class="tblformal">
<p class="titleintable"><a id="sthref8294"></a><a id="sthref8295"></a>Table 129-32 CREATE_WINDOW Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_WINDOW Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_WINDOW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t38">Parameter</th>
<th class="cellalignment1227" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t38" headers="r1c1-t38">
<p><code>window_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t38 r1c2-t38">
<p>The name to assign to the window. The name must be unique in the SQL namespace. All windows are in the <code>SYS</code> schema, so the preface '<code>SYS</code>' is optional.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t38" headers="r1c1-t38">
<p><code>resource_plan</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t38 r1c2-t38">
<p>This attribute specifies the resource plan that automatically activates when the window opens. When the window closes, the system switches to the appropriate resource plan, which is usually the plan that was in effect before the window opened, but can also be the plan of a different window.</p>
<p>Only one resource plan can be associated with a window. It may be <code>NULL</code> or the empty string (""). When it is <code>NULL</code>, the resource plan in effect when the window opens stays in effect for the duration of the window. When it is the empty string, the resource manager is disabled for the duration of the window.</p>
<p>If the window is open and the resource plan is dropped, then the resource allocation for the duration of the window is not affected.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t38" headers="r1c1-t38">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t38 r1c2-t38">
<p>This attribute specifies the first date and time on which this window is scheduled to open. If the value for <code>start_date</code> specified is in the past or is not specified, the window opens as soon as it is created.</p>
<p>For repeating windows that use a calendaring expression to specify the repeat interval, the value for <code>start_date</code> is a reference date. The first time the window opens depends on the repeat interval specified and the value for <code>start_date</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t38" headers="r1c1-t38">
<p><code>duration</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t38 r1c2-t38">
<p>This attribute specifies how long the window stays open. For example, <code>'interval '5' hour'</code> for five hours. There is no default value for this attribute. Therefore, if no value is specified when the window is created, an error occurs. The duration is of type interval day to seconds and ranges from one minute to 99 days.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t38" headers="r1c1-t38">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t38 r1c2-t38">
<p>This attribute specifies the name of the schedule associated with the window.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t38" headers="r1c1-t38">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t38 r1c2-t38">
<p>This attribute specifies how often the window repeats. It is expressed using the Scheduler calendaring syntax. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for more information.</p>
<p>A PL/SQL expression cannot be used to specify the repeat interval for a window.</p>
<p>The expression specified is evaluated to determine the next time the window opens. If no <code>repeat_interval</code> is specified, the window opens only once at the specified start date.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t38" headers="r1c1-t38">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t38 r1c2-t38">
<p>This attribute specifies the date and time after which the window no longer opens. When the value for <code>end_date</code> is reached, the window is disabled. In the <code>*_SCHEDULER_WINDOWS</code> views, the enabled flag of the window is set to <code>FALSE</code>.</p>
<p>A non-repeating window that has no value for <code>end_date</code> opens only once for the duration of the window. For a repeating window, if no <code>end_date</code> is specified, then the window keeps repeating forever.</p>
<p>The <code>end_date</code> must be after the <code>start_date</code>. If it is not, then an error is generated when the window is created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t38" headers="r1c1-t38">
<p><code>window_priority</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t38 r1c2-t38">
<p>This attribute is only relevant when two windows overlap. Because only one window can be in effect at one time, the window priority determines which window opens. The two possible values for this attribute are '<code>HIGH</code>' and '<code>LOW</code>'. A high priority window has precedence over a low priority window, therefore, the low priority window does not open if it overlaps a high priority window. By default, windows are created with priority '<code>LOW</code>'.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t38" headers="r1c1-t38">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t38 r1c2-t38">
<p>This attribute specifies an optional comment about the window. By default, this attribute is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8296"></a>Usage Notes</p>
<p>Creating a window requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p>Scheduler windows are the principal mechanism used to automatically switch resource plans according to a schedule. You can also manually activate a resource plan by using the <code>ALTER SYSTEM SET RESOURCE_MANAGER_PLAN</code> statement or the <code>DBMS_RESOURCE_MANAGER.SWITCH_PLAN</code> package procedure. Note that either of these manual methods can also disable resource plan switching by Scheduler windows. For more information, see <a class="olink ADMIN027" href="../../server.112/e25494/dbrm.htm#ADMIN027"><span class="italic">Oracle Database Administrator's Guide</span></a> and <a href="d_resmgr.htm#i1005840">"SWITCH_PLAN Procedure"</a>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72312" class="refsect2"><a id="i1013361"></a>
<hr />
<h3 class="refsect2">CREATE_WINDOW_GROUP Procedure</h3>
<p><span class="bold">*** Deprecated in Oracle Database 11</span><span class="bolditalic">g</span> <span class="bold">Release 2 (11.2).</span> <span class="bold">Use CREATE_GROUP instead.</span></p>
<p>This procedure creates a new window group. A window group is defined by a list of Scheduler windows. You can assign a window group as a job schedule. The job then runs when any of the windows in the group become active.</p>
<p>Window groups are created in the <code>SYS</code> schema.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8297"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.CREATE_WINDOW_GROUP (
   group_name            IN VARCHAR2,
   window_list           IN VARCHAR2 DEFAULT NULL,
   comments              IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8298"></a>Parameters</p>
<div id="ARPLS72313" class="tblformal">
<p class="titleintable"><a id="sthref8299"></a><a id="sthref8300"></a>Table 129-33 CREATE_WINDOW_GROUP Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_WINDOW_GROUP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.CREATE_WINDOW_GROUP subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t39">Parameter</th>
<th class="cellalignment1227" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t39" headers="r1c1-t39">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t39 r1c2-t39">
<p>The name to assign to the window group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t39" headers="r1c1-t39">
<p><code>window_list</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t39 r1c2-t39">
<p>A list of the windows assigned to the window group. If a window that does not exist is specified, an error is generated and the window group is not created.</p>
<p>Windows can also be added using the <code>ADD_WINDOW_GROUP_MEMBER</code> procedure. A window group cannot be a member of another window group.</p>
<p>Can be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t39" headers="r1c1-t39">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t39 r1c2-t39">
<p>A comment about the window group</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8301"></a>Usage Notes</p>
<p>Creating a window group requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege. Window groups, like windows, are created with access to <code>PUBLIC</code>, therefore, no privileges are required to access window groups.</p>
<p>A window group cannot contain another window group.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72314" class="refsect2"><a id="i1013213"></a>
<hr />
<h3 class="refsect2">DEFINE_ANYDATA_ARGUMENT Procedure</h3>
<p>This procedure defines a name or default value for a program argument that is of a complex type and must be encapsulated within an <code>ANYDATA</code> object. A job that references the program can override the default value.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8302"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DEFINE_ANYDATA_ARGUMENT (
   program_name            IN VARCHAR2,
   argument_position       IN PLS_INTEGER,
   argument_name           IN VARCHAR2 DEFAULT NULL,
   argument_type           IN VARCHAR2,
   default_value           IN SYS.ANYDATA,
   out_argument            IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8303"></a>Parameters</p>
<div id="ARPLS72315" class="tblformal">
<p class="titleintable"><a id="sthref8304"></a><a id="sthref8305"></a>Table 129-34 DEFINE_ANYDATA_ARGUMENT Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_ANYDATA_ARGUMENT Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_ANYDATA_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t40">Parameter</th>
<th class="cellalignment1227" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t40" headers="r1c1-t40">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t40 r1c2-t40">
<p>The name of the program to be altered. A program with this name must exist.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t40" headers="r1c1-t40">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t40 r1c2-t40">
<p>The position of the argument as it is passed to the executable. Argument numbers go from one to the <code>number_of_arguments</code> specified for the program. This must be unique, so it can replace any argument already defined at this position.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t40" headers="r1c1-t40">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t40 r1c2-t40">
<p>The name to assign to the argument. It is optional, but must be unique for the program if it is specified. If you assign a name, the name can then be used by other package procedures, including the <a href="#i1000820">SET_JOB_ANYDATA_VALUE Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t40" headers="r1c1-t40">
<p><code>argument_type</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t40 r1c2-t40">
<p>The data type of the argument being defined. This is not verified or used by the Scheduler. It is only used by the user of the program when deciding what value to assign to the argument.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t40" headers="r1c1-t40">
<p><code>default_value</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t40 r1c2-t40">
<p>The default value to be assigned to the argument encapsulated within an <code>AnyData</code> object. This is optional.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t40" headers="r1c1-t40">
<p><code>out_argument</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t40 r1c2-t40">
<p>This parameter is reserved for future use. It must be set to <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8306"></a>Usage Notes</p>
<p>All program arguments from one to the <code>number_of_arguments</code> value must be defined before a program can be enabled. If a default value for an argument is not defined with this procedure, a value must be defined in the job.</p>
<p>Defining a program argument requires that you be the owner of the program or have <code>ALTER</code> privileges on that program. You can also define a program argument if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1011161">"DEFINE_PROGRAM_ARGUMENT Procedure"</a></p>
</li>
<li>
<p><a href="#i1000820">"SET_JOB_ANYDATA_VALUE Procedure"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72316" class="refsect2"><a id="CHDCAFGJ"></a>
<hr />
<h3 class="refsect2">DEFINE_CHAIN_EVENT_STEP Procedure</h3>
<p>This procedure adds or replaces a chain step and associates it with an event schedule or an inline event. Once started in a running chain, this step does not complete until the specified event has occurred. Every step in a chain must be defined before the chain can be enabled and used. Defining a step gives it a name and specifies what happens during the step. If a step already exists with this name, the new step replaces the old one.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8307"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DEFINE_CHAIN_EVENT_STEP (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   event_schedule_name     IN VARCHAR2,
   timeout                 IN INTERVAL DAY TO SECOND DEFAULT NULL);

DBMS_SCHEDULER.DEFINE_CHAIN_EVENT_STEP (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   event_condition         IN VARCHAR2,
   queue_spec              IN VARCHAR2,
   timeout                 IN INTERVAL DAY TO SECOND DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8308"></a>Parameters</p>
<div id="ARPLS72317" class="tblformal">
<p class="titleintable"><a id="sthref8309"></a><a id="sthref8310"></a>Table 129-35 DEFINE_CHAIN_EVENT_STEP Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_CHAIN_EVENT_STEP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_ANYDATA_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t42">Parameter</th>
<th class="cellalignment1227" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t42" headers="r1c1-t42">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t42 r1c2-t42">
<p>The name of the chain that the step is in</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t42" headers="r1c1-t42">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t42 r1c2-t42">
<p>The name of the step</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t42" headers="r1c1-t42">
<p><code>event_schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t42 r1c2-t42">
<p>The name of the event schedule that the step waits for</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t42" headers="r1c1-t42">
<p><code>timeout</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t42 r1c2-t42">
<p>This parameter is reserved for future use</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t42" headers="r1c1-t42">
<p><code>event_condition</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t42 r1c2-t42">
<p>See the <a href="#CHDEBDFH">CREATE_EVENT_SCHEDULE Procedure</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t42" headers="r1c1-t42">
<p><code>queue_spec</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t42 r1c2-t42">
<p>See the <a href="#CHDEBDFH">CREATE_EVENT_SCHEDULE Procedure</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8311"></a>Usage Notes</p>
<p>Defining a chain step requires <code>ALTER</code> privileges on the chain either as the owner of the chain, or as a user with the <code>ALTER</code> object privilege on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege.</p>
<p>You can base a chain step on a file watcher as well. To do this, provide the file watcher name directly in the <code>queue_spec</code> parameter, or use a file watcher schedule for the <code>event_schedule_name</code> parameter.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDEJDHJ">"DEFINE_CHAIN_STEP Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72318" class="refsect2"><a id="CHDBAFJE"></a>
<hr />
<h3 class="refsect2">DEFINE_CHAIN_RULE Procedure</h3>
<p>This procedure adds a new rule to an existing chain, specified as a condition-action pair. The condition is expressed using either SQL or the Scheduler chain condition syntax and indicates the prerequisites for the action to occur. The action is a result of the condition being met.</p>
<p>An actual rule object is created to store the rule in the schema where the chain resides. If a rule name is given, this name is used for the rule object. If an existing rule name in the schema of the chain is given, the existing rule is altered. (A schema different than the schema of the chain cannot be specified). If no rule name is given, one is generated in the form <code>SCHED_RULE${N}</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8312"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DEFINE_CHAIN_RULE (
   chain_name              IN VARCHAR2,
   condition               IN VARCHAR2,
   action                  IN VARCHAR2,
   rule_name               IN VARCHAR2 DEFAULT NULL,
   comments                IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8313"></a>Parameters</p>
<div id="ARPLS72319" class="tblformal">
<p class="titleintable"><a id="sthref8314"></a><a id="sthref8315"></a>Table 129-36 DEFINE_CHAIN_RULE Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_CHAIN_RULE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_ANYDATA_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t44">Parameter</th>
<th class="cellalignment1227" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t44" headers="r1c1-t44">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t44 r1c2-t44">
<p>The name of the chain to alter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t44" headers="r1c1-t44">
<p><code>condition</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t44 r1c2-t44">
<p>A boolean expression which must evaluate to <code>TRUE</code> for the action to be performed. Every chain must have a rule that evaluates to <code>TRUE</code> to start the chain. For this purpose, you can use a rule that has '<code>TRUE</code>' as its condition if you are using Scheduler chain condition syntax, or '<code>1=1</code>' as its condition if you are using SQL syntax.</p>
<ul>
<li>
<p>Scheduler Chain Condition Syntax</p>
<p>See <a href="#CHDIFJEF">"Scheduler Chain Condition Syntax"</a><a class="olink ADMIN12459" href="../../server.112/e25494/scheduse.htm#ADMIN12459"></a> for details</p>
</li>
<li>
<p>SQL <code>WHERE</code> Clause Syntax</p>
<p>Conditions expressed with SQL must use the syntax of a <code>SELECT</code> statement <code>WHERE</code> clause.</p>
<p>You can refer to chain step attributes by using the chain step name as a bind variable.</p>
<p>The bind variable syntax is <code>:</code><code><span class="codeinlineitalic">step_name.attribute</span></code>. (<code><span class="codeinlineitalic">step_name</span></code> refers to a typed object.) Possible attributes are: <code>completed</code>, <code>state</code>, <code>start_date</code>, <code>end_date</code>, <code>error_code</code>, and <code>duration</code>.</p>
<p>Possible values for the <code>state</code> attribute include: <code>'NOT_STARTED', 'SCHEDULED', 'RUNNING', 'PAUSED', 'STALLED', 'SUCCEEDED', 'FAILED'</code>, and <code>'STOPPED'</code>. If a step is in the state <code>'SUCCEEDED'</code>, <code>'FAILED'</code>, or <code>'STOPPED'</code>, its <code>completed</code> attribute is set to <code>'TRUE'</code>, otherwise <code>completed</code> is <code>'FALSE'</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t44" headers="r1c1-t44">
<p><code>action</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t44 r1c2-t44">
<p>The action to be performed when the rule evaluates to <code>TRUE</code>. The action must consist of at least one keyword with an optional value and an optional delay clause.</p>
<p>Possible actions include:</p>
<ul>
<li>
<p>[<code>AFTER</code> <code><span class="codeinlineitalic">delay_interval</span></code>] <code>START</code> <code><span class="codeinlineitalic">step_1</span></code>[,<code><span class="codeinlineitalic">step_2</span></code> ...]</p>
</li>
<li>
<p><code>STOP</code> <code><span class="codeinlineitalic">step_1</span></code>[,<code><span class="codeinlineitalic">step_2</span></code> ...]</p>
</li>
<li>
<p><code>END</code> [{<code><span class="codeinlineitalic">end_value</span></code>|<code><span class="codeinlineitalic">step_name.error_code</span></code>}]</p>
</li>
</ul>
<p>At the beginning of the <code>START</code> action, a delay clause can specify a delay interval before performing the action. <code><span class="codeinlineitalic">delay_interval</span></code> is a formatted datetime interval of the form <code>HH:MM:SS</code>.</p>
<p>The <code>END</code> action ends the chain with an error code equal to either the supplied <code>end_value</code> or the error code that <code>step_name</code> completes with. The default error code is 0, indicating a successful chain run.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t44" headers="r1c1-t44">
<p><code>rule_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t44 r1c2-t44">
<p>The name of the rule being created. If no rule_name is given, one is generated in the form <code>SCHED_RULE$_{N}</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t44" headers="r1c1-t44">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t44 r1c2-t44">
<p>An optional comment describing the rule. This is stored in the rule object created.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="CHDIFJEF"></a>Scheduler Chain Condition Syntax<a id="sthref8316"></a><a id="sthref8317"></a></p>
<p>The Scheduler chain condition syntax provides an easy way to construct a condition using the states and error codes of steps in the current chain. The following are the available constructs, which are all boolean expressions:</p>
<pre>
TRUE
FALSE
<span class="italic">stepname</span> [NOT] SUCCEEDED 
<span class="italic">stepname</span> [NOT] FAILED 
<span class="italic">stepname</span> [NOT] STOPPED 
<span class="italic">stepname</span> [NOT] COMPLETED 
<span class="italic">stepname</span> ERROR_CODE IN (<span class="italic">integer, integer, integer</span> ...)
<span class="italic">stepname</span> ERROR_CODE NOT IN (<span class="italic">integer, integer, integer</span> ...)
<span class="italic">stepname</span> ERROR_CODE = <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE != <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE &lt;&gt; <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE &gt; <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE &gt;= <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE &lt; <span class="italic">integer</span>
<span class="italic">stepname</span> ERROR_CODE &lt;= <span class="italic">integer</span>
</pre>
<p>These boolean operators are available to create more complex conditions:</p>
<pre>
<span class="italic">expression</span> AND <span class="italic">expression</span>
<span class="italic">expression</span> OR <span class="italic">expression</span>
NOT (<span class="italic">expression</span>)
</pre>
<p><code><span class="codeinlineitalic">integer</span></code> can be positive or negative. Parentheses may be used for clarity or to enforce ordering. You must use parentheses with the <code>NOT</code> operator.</p>
<p>PL/SQL code that runs as part of a step can set the value of <code>ERROR_CODE</code> for that step with the <code>RAISE_APPLICATION_ERROR</code> statement.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8318"></a>Usage Notes</p>
<p>Defining a chain rule requires <code>ALTER</code> privileges on the chain (either as the owner, or as a user with <code>ALTER</code> privileges on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
<p>You must define at least one rule that starts the chain and at least one that ends it. See the section "Adding Rules to a Chain" in <a class="olink ADMIN10021" href="../../server.112/e25494/scheduse.htm#ADMIN10021"><span class="italic">Oracle Database Administrator's Guide</span></a> for more information.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8319"></a>Examples</p>
<p>The following are examples of using rule conditions and rule actions.</p>
<p class="subhead2"><a id="ARPLS72320"></a>Rule Conditions Using Scheduler Chain Condition Syntax</p>
<pre>
'step1 completed'
-- satisfied when step step1 has completed. (step1 completed is also TRUE when any 
-- of the following are TRUE: step1 succeeded, step1 failed, step1 stopped.)

'step1 succeeded and step2 succeeded'
-- satisfied when steps step1 and step2 have both succeeded

'step1 error_code &gt; 100'
-- satisfied when step step1 has failed with an error_code greater than 100

'step1 error_code IN (1, 3, 5, 7)'
-- satisfied when step step1 has failed with an error_code of 1, 3, 5, or 7
</pre>
<p class="subhead2"><a id="ARPLS72321"></a>Rule Conditions Using SQL Syntax</p>
<pre>
':step1.completed = ''TRUE'' AND :step1.end_date &gt;SYSDATE-1/24'
--satisfied when step step1 completed less than an hour ago

':step1.duration &gt; interval ''5'' minute'
-- satisfied when step step1 has completed and took longer than 5 minutes to complete
</pre>
<p class="subhead2"><a id="ARPLS72322"></a>Rule Actions</p>
<pre>
'AFTER 01:00:00 START step1, step2'
--After an hour start steps step1 and step2

'STOP step1'
--Stop step step1

END step4.error_code'
--End the chain with the error code that step step4 finished with. If step4 has not completed, the chain will be ended unsuccessfully with error code 27435.

'END' or 'END 0'
--End the chain successfully (with error_code 0)

'END 100'
--End the chain unsuccessfully with error code 100.
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72323" class="refsect2"><a id="CHDEJDHJ"></a>
<hr />
<h3 class="refsect2">DEFINE_CHAIN_STEP Procedure</h3>
<p>This procedure adds or replaces a chain step and associates it with a program or a nested chain. When the chain step is started, the specified program or chain is run. If a step already exists with the name supplied in the <code>chain_name</code> argument, the new step replaces the old one.</p>
<p>The chain owner must have <code>EXECUTE</code> privileges on the program or chain associated with the step. Only one program or chain can run during a step.</p>
<p>You cannot set all possible step attributes with this procedure. Use the <code>ALTER_CHAIN</code> procedure to set additional chain step attributes, such as <code>credential_name</code> and <code>destination_name</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8320"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DEFINE_CHAIN_STEP (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   program_name            IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8321"></a>Parameters</p>
<div id="ARPLS72324" class="tblformal">
<p class="titleintable"><a id="sthref8322"></a><a id="sthref8323"></a>Table 129-37 DEFINE_CHAIN_STEP Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_CHAIN_STEP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_ANYDATA_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t45">Parameter</th>
<th class="cellalignment1227" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t45" headers="r1c1-t45">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t45 r1c2-t45">
<p>The name of the chain to alter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t45" headers="r1c1-t45">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t45 r1c2-t45">
<p>The name of the step being defined. If a step already exists with this name, the new step replaces the old one.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t45" headers="r1c1-t45">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t45 r1c2-t45">
<p>The name of a program or chain to run during this step. The chain owner must have <code>EXECUTE</code> privileges on this program or chain.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8324"></a>Usage Notes</p>
<p>Defining a chain step requires <code>ALTER</code> privileges on the chain (either as the owner, or a user with <code>ALTER</code> privileges on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDIAICJ">"ALTER_CHAIN Procedure"</a></p>
</li>
<li>
<p><a href="#CHDCAFGJ">"DEFINE_CHAIN_EVENT_STEP Procedure"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72325" class="refsect2"><a id="i1011138"></a>
<hr />
<h3 class="refsect2">DEFINE_METADATA_ARGUMENT Procedure</h3>
<p>This procedure defines a special metadata argument for the program. The Scheduler can pass Scheduler metadata through this argument to your stored procedure or other executable. You cannot set values for jobs using this argument.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8325"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT (
  program_name            IN VARCHAR2,
  metadata_attribute      IN VARCHAR2,
  argument_position       IN PLS_INTEGER,
  argument_name           IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8326"></a>Parameters</p>
<div id="ARPLS72326" class="tblformal">
<p class="titleintable"><a id="sthref8327"></a><a id="sthref8328"></a>Table 129-38 DEFINE_METADATA_ARGUMENT Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_METADATA_ARGUMENT Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t47">Parameter</th>
<th class="cellalignment1227" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t47" headers="r1c1-t47">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t47 r1c2-t47">
<p>The name of the program to be altered</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t47" headers="r1c1-t47">
<p><code>metadata_attribute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t47 r1c2-t47">
<p>The metadata to be passed. Valid metadata attributes are: '<code>job_name</code>', '<code>job_subname</code>', '<code>job_owner</code>', '<code>job_start</code>', '<code>window_start</code>', '<code>window_end</code>', and '<code>event_message</code>'.</p>
<p><a href="#BABCHJCI">Table 129-39</a> describes these attributes in detail.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t47" headers="r1c1-t47">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t47 r1c2-t47">
<p>The position of the argument as it is passed to the executable. The position cannot be greater than the <code>number_of_arguments</code> specified for the program. It must be unique, so it replaces any argument already defined at this position.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t47" headers="r1c1-t47">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t47 r1c2-t47">
<p>The name to assign to the argument. It is optional, but must be unique for the program if it is specified. If you assign a name, the name can then be used by other package procedures.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS72327" class="tblhruleformalwide">
<p class="titleintable"><a id="sthref8329"></a><a id="BABCHJCI"></a>Table 129-39 Metadata Attributes</p>
<table class="cellalignment1226" title="Metadata Attributes" summary="This table lists the possible values for the metadata_attribute argument and their data types and descriptions" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t48">Metadata Attribute</th>
<th class="cellalignment1227" id="r1c2-t48">Data Type</th>
<th class="cellalignment1227" id="r1c3-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t48" headers="r1c1-t48">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t48 r1c2-t48">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t48 r1c3-t48">
<p>Name of the currently running job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t48" headers="r1c1-t48">
<p><code>job_subname</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t48 r1c2-t48">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t48 r1c3-t48">
<p>Subname of the currently running job. The name + subname form a unique identifier for a job that is running a chain step. <code>NULL</code> if the job is not part of a chain.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t48" headers="r1c1-t48">
<p><code>job_owner</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t48 r1c2-t48">
<p><code>VARCHAR2</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t48 r1c3-t48">
<p>Owner of the currently running job</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t48" headers="r1c1-t48">
<p><code>job_scheduled_start</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t48 r1c2-t48">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t48 r1c3-t48">
<p>When the currently running job was scheduled to start</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t48" headers="r1c1-t48">
<p><code>job_start</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t48 r1c2-t48">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t48 r1c3-t48">
<p>When the currently running job started</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t48" headers="r1c1-t48">
<p><code>window_start</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t48 r1c2-t48">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t48 r1c3-t48">
<p>If the job was started by a window, the time that the window opened</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t48" headers="r1c1-t48">
<p><code>window_end</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t48 r1c2-t48">
<p><code>TIMESTAMP WITH TIME ZONE</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t48 r1c3-t48">
<p>If the job was started by a window, the time that the window is scheduled to close</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t48" headers="r1c1-t48">
<p><code>event_message</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t48 r1c2-t48">
<p>(See Description)</p>
</td>
<td class="cellalignment1228" headers="r9c1-t48 r1c3-t48">
<p>For an event-based job, the message content of the event that started the job. The data type of this attribute depends on the queue used for the event. It has the same type as the <code>USER_DATA</code> column of the queue table. In the case of a file arrival event, <code>event_message</code> is of type <code>SYS.SCHEDULER_FILEWATCHER_RESULT</code>. See <a href="#BABFJBDG">"SCHEDULER_FILEWATCHER_RESULT Object Type"</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblhruleformalwide" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8330"></a>Usage Notes</p>
<p>Defining a program argument requires that you be the owner of the program or have <code>ALTER</code> privileges on that program. You can also define a program argument if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p>All metadata attributes except <code>event_message</code> can be used in PL/SQL blocks that you enter into the <code>job_action</code> or <code>program_action</code> attributes of jobs or programs, respectively. You use the attribute name as you use any other PL/SQL identifier, and the Scheduler assigns it a value.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72328" class="refsect2"><a id="i1011161"></a>
<hr />
<h3 class="refsect2">DEFINE_PROGRAM_ARGUMENT Procedure</h3>
<p>This procedure defines a name or default value for a program argument. If no default value is defined for a program argument, the job that references the program must supply an argument value. (The job can also override a default value.)</p>
<p>This procedure is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8331"></a>Syntax</p>
<p>Defines a program argument without a default value:</p>
<pre>
PROCEDURE define_program_argument(
   program_name            IN VARCHAR2,
   argument_position       IN PLS_INTEGER,
   argument_name           IN VARCHAR2 DEFAULT NULL,
   argument_type           IN VARCHAR2,
   out_argument            IN BOOLEAN DEFAULT FALSE);
</pre>
<p>Defines a program argument with a default value:</p>
<pre>
PROCEDURE define_program_argument(
   program_name            IN VARCHAR2,
   argument_position       IN PLS_INTEGER,
   argument_name           IN VARCHAR2 DEFAULT NULL,
   argument_type           IN VARCHAR2,
   default_value           IN VARCHAR2,
   out_argument            IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8332"></a>Parameters</p>
<div id="ARPLS72329" class="tblformal">
<p class="titleintable"><a id="sthref8333"></a><a id="sthref8334"></a>Table 129-40 DEFINE_PROGRAM_ARGUMENT Procedure Parameters</p>
<table class="cellalignment1229" title="DEFINE_PROGRAM_ARGUMENT Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t49">Parameter</th>
<th class="cellalignment1227" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t49" headers="r1c1-t49">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t49 r1c2-t49">
<p>The name of the program to be altered. A program with this name must exist.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t49" headers="r1c1-t49">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t49 r1c2-t49">
<p>The position of the argument as it is passed to the executable. Argument numbers go from one to the <code>number_of_arguments</code> specified for the program. This must be unique so it replaces any argument already defined at this position.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t49" headers="r1c1-t49">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t49 r1c2-t49">
<p>The name to assign to the argument. It is optional, but must be unique for the program if specified. If you assign a name, the name can then be used by other package procedures, including the <a href="#i1011390">SET_JOB_ARGUMENT_VALUE Procedure</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t49" headers="r1c1-t49">
<p><code>argument_type</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t49 r1c2-t49">
<p>The data type of the argument being defined. This is not verified or used by the Scheduler. The program user uses argument_type when deciding what value to assign to the argument. Any valid SQL data type is allowed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t49" headers="r1c1-t49">
<p><code>default_value</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t49 r1c2-t49">
<p>The default value to be assigned to the argument if none is specified by the job.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t49" headers="r1c1-t49">
<p><code>out_argument</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t49 r1c2-t49">
<p>This parameter is reserved for future use. It must be set to <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8335"></a>Usage Notes</p>
<p>All program arguments from 1 to the <code>number_of_arguments</code> value must be defined before a program can be enabled. If a default value for an argument is not defined with this procedure, a value must be defined in the job.</p>
<p>Defining a program argument requires that you be the owner of the program or have <code>ALTER</code> privileges on that program. You can also define a program argument if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p><code>DEFINE_PROGRAM_ARGUMENT</code> only supports arguments of SQL type. Therefore, argument values that are not of SQL type, such as booleans, are not supported as program or job arguments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1013213">"DEFINE_ANYDATA_ARGUMENT Procedure"</a></p>
</li>
<li>
<p><a href="#i1011390">"SET_JOB_ARGUMENT_VALUE Procedure"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72330" class="refsect2"><a id="i1003538"></a>
<hr />
<h3 class="refsect2">DISABLE Procedure</h3>
<p>This procedure disables a program, job, chain, window, database destination, external destination, file watcher, or group. When an object is disabled, its <code>enabled</code> attribute is set to <code>FALSE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8336"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DISABLE (
   name              IN VARCHAR2,
   force             IN BOOLEAN DEFAULT FALSE,
   commit_semantics  IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8337"></a>Parameters</p>
<div id="ARPLS72852" class="tblformal">
<p class="titleintable"><a id="sthref8338"></a><a id="sthref8339"></a>Table 129-41 DISABLE Procedure Parameters</p>
<table class="cellalignment1229" title="DISABLE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DISABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t51">Parameter</th>
<th class="cellalignment1227" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t51" headers="r1c1-t51">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t51 r1c2-t51">
<p>The name of the object being disabled. Can be a comma-delimited list.</p>
<p>If a job class name is specified, then all the jobs in the job class are disabled. The job class is not disabled.</p>
<p>If a group name is specified, then the group is disabled, but the enabled state of the group members is unaffected.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t51" headers="r1c1-t51">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t51 r1c2-t51">
<p>If <code>TRUE</code>, objects are disabled even if other objects depend on them. See the usage notes for more information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t51" headers="r1c1-t51">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t51 r1c2-t51">
<p>The commit semantics. The following types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code>: The procedure returns on the first error and the previous disable operations that were successful are committed to disk.</p>
<p>This is the default.</p>
</li>
<li>
<p><code>TRANSACTIONAL</code>: The procedure returns on the first error and everything that happened before that error is rolled back.</p>
<p>This type is only supported when disabling a job or a list of jobs. In addition, this type is not supported when <code>force</code> is set to <code>TRUE</code>.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code>: The procedure tries to absorb any errors and disable the rest of the jobs and commits all the disable operations that were successful. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
<p>This type is only supported when disabling a job or a list of jobs.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8340"></a>Usage Notes</p>
<p>Windows must be preceded by <code>SYS</code>.</p>
<p>Disabling an object that is already disabled does not generate an error.</p>
<p>The purpose of the <code>force</code> option is to point out dependencies. No dependent objects are altered.</p>
<p>To run <code>DISABLE</code> for a window or a group of type <code>WINDOW</code>, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p>You can use <code>DISABLE</code> with any schema except the <code>SYS</code> schema.</p>
<p class="subhead2"><a id="ARPLS72853"></a>Jobs</p>
<p>Disabling a job means that, although the metadata of the job is there, it should not run and the job coordinator will not pick up these jobs for processing. When a job is disabled, its <code>state</code> in the job queue is changed to <code>disabled</code>.</p>
<p>If <code>force</code> is set to <code>FALSE</code> and the job is currently running, an error is returned.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, the job is disabled, but the currently running instance is allowed to finish.</p>
<p>For jobs with multiple destinations, you cannot disable a child job at a specific destination. Instead, you can disable the destination.</p>
<p class="subhead2"><a id="ARPLS72854"></a>Programs</p>
<p>When a program is disabled, the status is changed to disabled. A disabled program implies that, although the metadata is still there, jobs that point to this program cannot run.</p>
<p>If <code>force</code> is set to <code>FALSE</code>, the program must not be referenced by any job, otherwise an error will occur.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, those jobs that point to the program will not be disabled, however, they will fail at runtime because their program will not be valid.</p>
<p>Running jobs that point to the program are not affected by the <code>DISABLE</code> call and are allowed to continue</p>
<p>No arguments that pertain to the program are affected when the program is disabled.</p>
<p class="subhead2"><a id="ARPLS72855"></a>File Watchers</p>
<p>If <code>force</code> is set to <code>FALSE</code>, the file watcher must not be referenced by any job, otherwise an error will occur. If you force disabling a file watcher, jobs that depend on it become disabled.</p>
<p class="subhead2"><a id="ARPLS72856"></a>Windows</p>
<p>This means that the window will not open, however, the metadata of the window is still there, so it can be reenabled.</p>
<p>If <code>force</code> is set to <code>FALSE</code>, the window must not be open or referenced by any job otherwise an error occurs.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, disabling a window that is open will succeed but the window will not be closed. It will prevent the window from opening in the future until it is reenabled.</p>
<p>When the window is disabled, those jobs that have the window as their schedule will not be disabled.</p>
<p class="subhead2"><a id="ARPLS72857"></a>Window Groups</p>
<p>When a group of type <code>WINDOW</code> is disabled, jobs (other than a running job) that have the window group as their schedule will not run when the member windows open. However, a job that has one of the window group members as its schedule still runs.</p>
<p>The metadata of the window group is still there, so it can be reenabled. Note that the members of the window group will still open.</p>
<p>If <code>force</code> is set to <code>FALSE</code>, the window group must not have any members that are open or referenced by any job, otherwise an error will occur.</p>
<p>If <code>force</code> is set to <code>TRUE</code>:</p>
<ul>
<li>
<p>The window group is disabled and the open window will be not closed or disabled. It will be allowed to continue to its end.</p>
</li>
<li>
<p>The window group is disabled but those jobs that have the window group as their schedule will not be disabled.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS72858"></a>Job Chains</p>
<p>When a chain is disabled, the metadata for the chain is still there, but jobs that point to it will not be able to be run. This allows changes to the chain to be made safely without the risk of having an incompletely specified chain run.If <code>force</code> is set to <code>FALSE</code>, the chain must not be referenced by any job, otherwise an error will occur.If <code>force</code> is set to <code>TRUE</code>, those jobs that point to the chain will not be disabled, however, they will fail at runtime.Running jobs that point to this chain are not affected by the <code>DISABLE</code> call and are allowed to complete.</p>
<p class="subhead2"><a id="ARPLS72859"></a>Database Destinations</p>
<p>When you disable a database destination:</p>
<ul>
<li>
<p>The destination is skipped when a multiple destination job runs.</p>
</li>
<li>
<p>If all destinations are disabled for a job, the Scheduler generates an error when it attempts to run the job.</p>
</li>
<li>
<p>The <code>REFS_ENABLED</code> column in <code>*_SCHEDULER_JOB_DESTS</code> is set to <code>FALSE</code> for all jobs that reference the database destination.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS72860"></a>External Destinations</p>
<p>When you disable an external destination:</p>
<ul>
<li>
<p>Dependent database destinations remain enabled, but the Scheduler generates an error when it attempts to run a job with a database destination that depends on the external destination.</p>
</li>
<li>
<p>The <code>REFS_ENABLED</code> column in <code>*_SCHEDULER_JOB_DESTS</code> is set to <code>FALSE</code> for all external jobs that reference the external destination and for all database jobs with a database destination that depends on the external destination.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS72861"></a>Groups</p>
<p>If you disable an external destination group or database destination group, the Scheduler generates an error when it attempts to run a job that names the group as its destination.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72862" class="refsect2"><a id="BABBFHBG"></a>
<hr />
<h3 class="refsect2">DROP_AGENT_DESTINATION Procedure</h3>
<p>This procedure drops one or more external destinations, also known as agent destinations. It should be used only when the preferred method of dropping an external destination&mdash;using the <code>schagent</code> utility to unregister a Scheduler agent with a database&mdash;is unavailable due to failures.</p>
<p>This procedure can be called only by the <code>SYS</code> user or a user with the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
External destinations are created on a source database only implicitly by registering an agent with the database. There is no user-callable <code>CREATE_AGENT_DESTINATION</code> procedure.</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8341"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_AGENT_DESTINATION (
   destination_name        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8342"></a>Parameters</p>
<div id="ARPLS72863" class="tblformal">
<p class="titleintable"><a id="sthref8343"></a><a id="sthref8344"></a>Table 129-42 DROP_AGENT_DESTINATION Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_AGENT_DESTINATION Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_AGENT_DESTINATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t53">Parameter</th>
<th class="cellalignment1227" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t53" headers="r1c1-t53">
<p><code>destination_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t53 r1c2-t53">
<p>A comma-separated list of external destinations to drop. Because user <code>SYS</code> owns all external destinations, do not prefix them with a schema name.</p>
<p>The procedure stops processing if it encounters an external destination that does not exist. All external destinations processed before the error are dropped.</p>
<p>Cannot be <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8345"></a>Usage Notes</p>
<p>When an external destination is dropped:</p>
<ul>
<li>
<p>All database destinations that refer to the external destination are disabled and their <code>agent</code> attribute is set to <code>NULL</code>.</p>
</li>
<li>
<p>Members of external destination groups that refer to the destination are removed from the group.</p>
</li>
<li>
<p>All job instances in the <code>*_SCHEDULER_JOB_DESTS</code> views that refer to the external destination are also dropped.</p>
</li>
<li>
<p>Jobs running against the destination are stopped.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72338" class="refsect2"><a id="CHDIAFHG"></a>
<hr />
<h3 class="refsect2">DROP_CHAIN Procedure</h3>
<p>This procedure drops an existing chain.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8346"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_CHAIN (
   chain_name              IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8347"></a>Parameters</p>
<div id="ARPLS72339" class="tblformal">
<p class="titleintable"><a id="sthref8348"></a><a id="sthref8349"></a>Table 129-43 DROP_CHAIN Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_CHAIN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t54">Parameter</th>
<th class="cellalignment1227" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t54" headers="r1c1-t54">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t54 r1c2-t54">
<p>The name of the chain to drop. Can also be a comma-delimited list of chains.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t54" headers="r1c1-t54">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t54 r1c2-t54">
<p>If <code>force</code> is set to <code>FALSE</code>, the chain must not be referenced by any job, otherwise an error will occur.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, all jobs pointing to the chain are disabled before the chain is dropped.Running jobs that point to this chain are stopped before the chain is dropped.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8350"></a>Usage Notes</p>
<p>Dropping a chain requires alter privileges on the chain (either as the owner, or a user with <code>ALTER</code> privileges on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
<p>All steps associated with the chain are dropped. If no rule set was specified when the chain was created, then the automatically created rule set and evaluation context associated with the chain are also dropped, so the user must have the privileges required to do this. See the <code>DBMS_RULE_ADM.DROP_RULE_SET</code> and <code>DBMS_RULE_ADM.DROP_EVALUATION_CONTEXT</code> procedures for more information.</p>
<p>If <code>force</code> is <code>FALSE</code>, no jobs may be using this chain. If <code>force</code> is <code>TRUE</code>, any jobs that use this chain are disabled before the chain is dropped (and any of these jobs that are running will be stopped).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72340" class="refsect2"><a id="CHDJEIJB"></a>
<hr />
<h3 class="refsect2">DROP_CHAIN_RULE Procedure</h3>
<p>This procedure removes a rule from an existing chain. The rule object corresponding to this rule will also be dropped. The chain will not be disabled. If dropping this rule makes the chain invalid, the user should first disable the chain to ensure that it does not run.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8351"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_CHAIN_RULE (
   chain_name              IN VARCHAR2,
   rule_name               IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8352"></a>Parameters</p>
<div id="ARPLS72341" class="tblformal">
<p class="titleintable"><a id="sthref8353"></a><a id="sthref8354"></a>Table 129-44 DROP_CHAIN_RULE Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_CHAIN_RULE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t55">Parameter</th>
<th class="cellalignment1227" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t55" headers="r1c1-t55">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t55 r1c2-t55">
<p>The name of the chain to alter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t55" headers="r1c1-t55">
<p><code>rule_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t55 r1c2-t55">
<p>The name of the rule to drop</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t55" headers="r1c1-t55">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t55 r1c2-t55">
<p>If <code>force</code> is set to <code>TRUE</code>, the drop operation proceeds even if the chain is currently running. The running chain is not stopped or interrupted. If <code>force</code> is set to <code>FALSE</code> and the chain is running, an error is generated.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8355"></a>Usage Notes</p>
<p>Dropping a chain rule requires alter privileges on the chain (either as the owner or as a user with <code>ALTER</code> privileges on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
<p>Dropping a chain rule also drops the underlying rule database object so you must have the privileges to drop this rule object. See the <code>DBMS_RULE_ADM.DROP_RULE</code> procedure for more information.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72342" class="refsect2"><a id="CHDBDCAI"></a>
<hr />
<h3 class="refsect2">DROP_CHAIN_STEP Procedure</h3>
<p>This procedure drops a chain step. If this chain step is still used in the chain rules, the chain will be disabled.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8356"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_CHAIN_STEP (
   chain_name              IN VARCHAR2,
   step_name               IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8357"></a>Parameters</p>
<div id="ARPLS72343" class="tblformal">
<p class="titleintable"><a id="sthref8358"></a><a id="sthref8359"></a>Table 129-45 DROP_CHAIN_STEP Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_CHAIN_STEP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t56">Parameter</th>
<th class="cellalignment1227" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t56" headers="r1c1-t56">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t56 r1c2-t56">
<p>The name of the chain to alter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t56" headers="r1c1-t56">
<p><code>step_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t56 r1c2-t56">
<p>The name of the step being dropped. Can be a comma-separated list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t56" headers="r1c1-t56">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t56 r1c2-t56">
<p>If <code>force</code> is set to <code>TRUE</code>, this succeeds even if this chain is currently running. The running chain will not be stopped or interrupted.If <code>force</code> is set to <code>FALSE</code> and this chain is currently running, an error is thrown.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8360"></a>Usage Notes</p>
<p>Dropping a chain step requires <code>ALTER</code> privileges on the chain (either as the owner or as a user with <code>ALTER</code> privileges on the chain or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72344" class="refsect2"><a id="BABIJAJG"></a>
<hr />
<h3 class="refsect2">DROP_CREDENTIAL Procedure</h3>
<p>This procedure drops a credential.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8361"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_CREDENTIAL (
   credential_name         IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8362"></a>Parameters</p>
<div id="ARPLS72345" class="tblformal">
<p class="titleintable"><a id="sthref8363"></a><a id="sthref8364"></a>Table 129-46 DROP_CREDENTIAL Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_CREDENTIAL Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_CREDENTIAL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t57">Parameter</th>
<th class="cellalignment1227" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t57" headers="r1c1-t57">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t57 r1c2-t57">
<p>The name of the credential being dropped. This can optionally be prefixed with a schema name. This cannot be set to <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t57" headers="r1c1-t57">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t57 r1c2-t57">
<p>If set to <code>FALSE</code>, the credential must not be referenced by any job, or an error will occur. If set to <code>TRUE</code>, the credential is dropped whether or not there are jobs referencing it. Jobs that reference the credential will continue to point to a nonexistent credential and throw an error at runtime.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8365"></a>Usage Notes</p>
<p>Only the owner of a credential or a user with the <code>CREATE ANY JOB</code> system privilege may drop the credential.</p>
<p>Running jobs that point to the credential are not affected by this procedure and are allowed to continue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABCAEAC">"CREATE_CREDENTIAL Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72864" class="refsect2"><a id="BABBDAIF"></a>
<hr />
<h3 class="refsect2">DROP_DATABASE_DESTINATION Procedure</h3>
<p>This procedure drops one or more database destinations.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8366"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_DATABASE_DESTINATION (
   destination_name        IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8367"></a>Parameters</p>
<div id="ARPLS72865" class="tblformal">
<p class="titleintable"><a id="sthref8368"></a><a id="sthref8369"></a>Table 129-47 DROP_DATABASE_DESTINATION Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_DATABASE_DESTINATION Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_DATABASE_DESTINATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t59">Parameter</th>
<th class="cellalignment1227" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t59" headers="r1c1-t59">
<p><code>destination_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t59 r1c2-t59">
<p>The name of the destination to drop. Can be a comma-separated list of database destinations to drop. Each database destination can optionally be prefixed with a schema name.</p>
<p>The procedure stops processing if it encounters a database destination that does not exist. All database destinations processed before the error are dropped.</p>
<p>Cannot be <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8370"></a>Usage Notes</p>
<p>Only the owner or a user with the <code>CREATE ANY JOB</code> system privilege may drop the database destination.</p>
<p>When a database destination is dropped:</p>
<ul>
<li>
<p>All job instances that refer to the destination in the <code>*_SCHEDULER_JOB_DESTS</code> views are also dropped.</p>
</li>
<li>
<p>Jobs running against the destination are stopped.</p>
</li>
<li>
<p>Members of database destination groups that refer to the destination are removed from the group.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABEEIIF">CREATE_DATABASE_DESTINATION Procedure</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72346" class="refsect2"><a id="BABJEJHF"></a>
<hr />
<h3 class="refsect2">DROP_FILE_WATCHER Procedure</h3>
<p>This procedure drops one or more file watchers.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8371"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_FILE_WATCHER (
   file_watcher_name       IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8372"></a>Parameters</p>
<div id="ARPLS72347" class="tblformal">
<p class="titleintable"><a id="sthref8373"></a><a id="sthref8374"></a>Table 129-48 DROP_FILE_WATCHER Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_FILE_WATCHER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_CREDENTIAL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t61">Parameter</th>
<th class="cellalignment1227" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t61" headers="r1c1-t61">
<p><code>file_watcher_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t61 r1c2-t61">
<p>The file watcher to drop. Can be a comma-separated list of file watchers. Each file watcher name can optionally be prefixed with a schema name.</p>
<p>Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t61" headers="r1c1-t61">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t61 r1c2-t61">
<p>If set to <code>FALSE</code>, the file watcher must not be referenced by any job, or an error occurs. If set to <code>TRUE</code>, the file watcher is dropped whether or not there are jobs referencing it. In this case, jobs that reference the dropped file watcher are disabled.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8375"></a>Usage Notes</p>
<p>Only the owner of a file watcher or a user with the <code>CREATE ANY JOB</code> system privilege may drop the file watcher.</p>
<p>Running jobs that point to the file watcher are not affected by this procedure and are allowed to continue.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFJIJ">"CREATE_FILE_WATCHER Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72866" class="refsect2"><a id="BABDHDGH"></a>
<hr />
<h3 class="refsect2">DROP_GROUP Procedure</h3>
<p>This procedure drops one or more groups.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8376"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_GROUP (
   group_name       IN VARCHAR2,
   force            IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8377"></a>Parameters</p>
<div id="ARPLS72867" class="tblformal">
<p class="titleintable"><a id="sthref8378"></a><a id="sthref8379"></a>Table 129-49 DROP_GROUP Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_GROUP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_GROUP subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t63">Parameter</th>
<th class="cellalignment1227" id="r1c2-t63">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t63" headers="r1c1-t63">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t63 r1c2-t63">
<p>A group to drop. Can be a comma-separated list of group names. Each group name can optionally be prefixed with a schema name.</p>
<p>The procedure stops processing if it encounters a group that does not exist. All groups processed before the error are dropped.</p>
<p>Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t63" headers="r1c1-t63">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t63 r1c2-t63">
<p>If <code>FALSE</code>, the group must not be referenced by any job, otherwise an error occurs. If <code>TRUE</code>, the group is dropped whether or not there are jobs referencing it. In this case, all jobs referencing the group are disabled and all job instances that reference the group are removed from the <code>*_SCHEDULER_JOB_DESTS</code> views.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8380"></a>Usage Notes</p>
<p>Only the owner or a user with the <code>CREATE ANY JOB</code> system privilege may drop a group. You must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege to drop a group of type <code>WINDOW</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFFJIJ">"CREATE_FILE_WATCHER Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72348" class="refsect2"><a id="i1000364"></a>
<hr />
<h3 class="refsect2">DROP_JOB Procedure</h3>
<p>This procedure drops one or more jobs or all jobs in one or more job classes. Dropping a job also drops all argument values set for that job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8381"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_JOB (
   job_name                IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE,
   defer                   IN BOOLEAN DEFAULT FALSE,
   commit_semantics        IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8382"></a>Parameters</p>
<div id="ARPLS72349" class="tblformal">
<p class="titleintable"><a id="sthref8383"></a><a id="sthref8384"></a>Table 129-50 DROP_JOB Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_JOB Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t65">Parameter</th>
<th class="cellalignment1227" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t65" headers="r1c1-t65">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t65 r1c2-t65">
<p>The name of a job or job class. Can be a comma-delimited list. For a job class, the <code>SYS</code> schema should be specified.</p>
<p>If the name of a job class is specified, the jobs that belong to that job class are dropped, but the job class itself is not dropped.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t65" headers="r1c1-t65">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t65 r1c2-t65">
<p>If <code>force</code> is set to <code>TRUE</code>, the Scheduler first attempts to stop the running job instances (by issuing the <code>STOP_JOB</code> call with the <code>force</code> flag set to <code>false</code>), and then drops the jobs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t65" headers="r1c1-t65">
<p><code>defer</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t65 r1c2-t65">
<p>If <code>defer</code> is set to <code>TRUE</code>, the Scheduler allows the running jobs to complete and then drops the jobs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t65" headers="r1c1-t65">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t65 r1c2-t65">
<p>The commit semantics. The following types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code> returns on the first error and previous successful drop operations are committed to disk. This is the default.</p>
</li>
<li>
<p><code>TRANSACTIONAL</code> returns on the first error. Everything that happened before that error is rolled back. This type is not supported when <code>force</code> is set to <code>TRUE</code>.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code> tries to absorb any errors and drop the rest of the jobs, and commits all the successful drops. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
</li>
</ul>
<p>Only <code>STOP_ON_FIRST_ERROR</code> is permitted when job classes are included in the <code>job_name</code> list.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8385"></a>Usage Notes</p>
<p>If both <code>force</code> and <code>defer</code> are set to <code>FALSE</code> and a job is running at the time of the call, the attempt to drop that job fails. The entire call to <code>DROP_JOB</code> may then fail, depending on the setting of <code>commit_semantics</code>.</p>
<p>Setting both <code>force</code> and <code>defer</code> to <code>TRUE</code> results in an error.</p>
<p>Dropping a job requires <code>ALTER</code> privileges on the job either as the owner of the job or as a user with the <code>ALTER</code> object privilege on the job or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72350" class="refsect2"><a id="i1009950"></a>
<hr />
<h3 class="refsect2">DROP_JOB_CLASS Procedure</h3>
<p>This procedure drops a job class. Dropping a job class means that all the metadata about the job class is removed from the database.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8386"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_JOB_CLASS (
   job_class_name          IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8387"></a>Parameters</p>
<div id="ARPLS72351" class="tblformal">
<p class="titleintable"><a id="sthref8388"></a><a id="sthref8389"></a>Table 129-51 DROP_JOB_CLASS Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_JOB_CLASS Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_JOB_CLASS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t66">Parameter</th>
<th class="cellalignment1227" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t66" headers="r1c1-t66">
<p><code>job_class_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t66 r1c2-t66">
<p>The name of the job class. Can be a comma-delimited list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t66" headers="r1c1-t66">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t66 r1c2-t66">
<p>If <code>force</code> is set to <code>FALSE</code>, a class being dropped must not be referenced by any jobs, otherwise an error occurs.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, jobs belonging to the class are disabled and their class is set to the default class. Only if this is successful is the class dropped.</p>
<p>Running jobs that belong to the job class are not affected.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8390"></a>Usage Notes</p>
<p>Dropping a job class requires the <code>MANAGE</code> <code>SCHEDULER</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72352" class="refsect2"><a id="i1011194"></a>
<hr />
<h3 class="refsect2">DROP_PROGRAM Procedure</h3>
<p>This procedure drops a program. Any arguments that pertain to the program are also dropped when the program is dropped.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8391"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_PROGRAM (
   program_name            IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8392"></a>Parameters</p>
<div id="ARPLS72353" class="tblformal">
<p class="titleintable"><a id="sthref8393"></a><a id="sthref8394"></a>Table 129-52 DROP_PROGRAM Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_PROGRAM Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_PROGRAM subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t67">Parameter</th>
<th class="cellalignment1227" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t67" headers="r1c1-t67">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t67 r1c2-t67">
<p>The name of the program to be dropped. Can be a comma-delimited list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t67" headers="r1c1-t67">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t67 r1c2-t67">
<p>If <code>force</code> is set to <code>FALSE</code>, the program must not be referenced by any job, otherwise an error occurs.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, all jobs referencing the program are disabled before the program is dropped.</p>
<p>Running jobs that point to the program are not affected by the <code>DROP_PROGRAM</code> call and are allowed to continue.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8395"></a>Usage Notes</p>
<p>Dropping a program requires that you be the owner of the program or have <code>ALTER</code> privileges on that program. You can also drop a program if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72354" class="refsect2"><a id="i1011195"></a>
<hr />
<h3 class="refsect2">DROP_PROGRAM_ARGUMENT Procedure</h3>
<p>This procedure drops a program argument. An argument can be specified by either name (if one has been given) or position.</p>
<p>The procedure is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8396"></a>Syntax</p>
<p>Drops a program argument by position:</p>
<pre>
DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT (
   program_name            IN VARCHAR2,
   argument_position       IN PLS_INTEGER);
</pre>
<p>Drops a program argument by name:</p>
<pre>
DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT (
   program_name            IN VARCHAR2,
   argument_name           IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8397"></a>Parameters</p>
<div id="ARPLS72355" class="tblformal">
<p class="titleintable"><a id="sthref8398"></a><a id="sthref8399"></a>Table 129-53 DROP_PROGRAM_ARGUMENT Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_PROGRAM_ARGUMENT Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t68">Parameter</th>
<th class="cellalignment1227" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t68" headers="r1c1-t68">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t68 r1c2-t68">
<p>The name of the program to be altered. A program with this name must exist.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t68" headers="r1c1-t68">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t68 r1c2-t68">
<p>The name of the argument being dropped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t68" headers="r1c1-t68">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t68 r1c2-t68">
<p>The position of the argument to be dropped</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8400"></a>Usage Notes</p>
<p>Dropping a program argument requires that you be the owner of the program or have <code>ALTER</code> privileges on that program. You can also drop a program argument if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72356" class="refsect2"><a id="CIHBGDFG"></a>
<hr />
<h3 class="refsect2">DROP_SCHEDULE Procedure</h3>
<p>This procedure drops a schedule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8401"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_SCHEDULE (
   schedule_name    IN VARCHAR2,
   force            IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8402"></a>Parameters</p>
<div id="ARPLS72357" class="tblformal">
<p class="titleintable"><a id="sthref8403"></a><a id="sthref8404"></a>Table 129-54 DROP_SCHEDULE Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_SCHEDULE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_SCHEDULE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t69">Parameter</th>
<th class="cellalignment1227" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t69" headers="r1c1-t69">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t69 r1c2-t69">
<p>The name of the schedule. Can be a comma-delimited list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t69" headers="r1c1-t69">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t69 r1c2-t69">
<p>If <code>force</code> is set to <code>FALSE</code>, the schedule must not be referenced by any job or window, otherwise an error will occur.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, any jobs or windows that use this schedule are disabled before the schedule is dropped</p>
<p>Running jobs and open windows that point to the schedule are not affected.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8405"></a>Usage Notes</p>
<p>You must be the owner of the schedule being dropped or have <code>ALTER</code> privileges for the schedule or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72358" class="refsect2"><a id="i1014414"></a>
<hr />
<h3 class="refsect2">DROP_WINDOW Procedure</h3>
<p>This procedure drops a window. All metadata about the window is removed from the database. The window is removed from any groups that reference it.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8406"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_WINDOW (
   window_name             IN VARCHAR2,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8407"></a>Parameters</p>
<div id="ARPLS72359" class="tblformal">
<p class="titleintable"><a id="sthref8408"></a><a id="sthref8409"></a>Table 129-55 DROP_WINDOW Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_WINDOW Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_WINDOW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t70">Parameter</th>
<th class="cellalignment1227" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t70" headers="r1c1-t70">
<p><code>window_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t70 r1c2-t70">
<p>The name of the window. Can be a comma-delimited list.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t70" headers="r1c1-t70">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t70 r1c2-t70">
<p>If <code>force</code> is set to <code>FALSE</code>, the window must be not be open or referenced by any job, otherwise an error occurs.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, the window is dropped and those jobs that have the window as their schedule are disabled. However, jobs that have a window group, of which the dropped window is a member, as their schedule, are not disabled. If the window is open then, the Scheduler attempts to first close the window and then drop it. When the window is closed, normal close window rules apply.</p>
<p>Running jobs that have the window as their schedule is allowed to continue, unless the <code>stop_on_window_close</code> flag is set to <code>TRUE</code> for the job. If this is the case, the job is stopped when the window is dropped.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8410"></a>Usage Notes</p>
<p>Dropping a window requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72360" class="refsect2"><a id="i1011244"></a>
<hr />
<h3 class="refsect2">DROP_WINDOW_GROUP Procedure</h3>
<p><span class="bold">*** Deprecated in Oracle Database 11</span><span class="bolditalic">g</span> <span class="bold">Release 2 (11.2).</span> <span class="bold">Use DROP_GROUP instead</span>.</p>
<p>This procedure drops a window group but not the windows that are members of this window group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8411"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.DROP_WINDOW_GROUP (
   group_name              IN VARCHAR2
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8412"></a>Parameters</p>
<div id="ARPLS72361" class="tblformal">
<p class="titleintable"><a id="sthref8413"></a><a id="sthref8414"></a>Table 129-56 DROP_WINDOW_GROUP Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_WINDOW_GROUP Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.DROP_WINDOW_GROUP subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t71">Parameter</th>
<th class="cellalignment1227" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t71" headers="r1c1-t71">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t71 r1c2-t71">
<p>The name of the window group</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t71" headers="r1c1-t71">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t71 r1c2-t71">
<p>If <code>force</code> is set to <code>FALSE</code>, the window group must not be referenced by any job otherwise an error will occur.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, the window group is dropped and those jobs that have the window group as their schedule are disabled. Running jobs that have the window group as their schedule are allowed to continue, even if the <code>stop_on_window_close</code> flag was set to <code>TRUE</code> when for the job.</p>
<p>If a member of the window group that is being dropped is open, the window group can still be dropped.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8415"></a>Usage Notes</p>
<p>If you want to drop all the windows that are members of this group but not the window group itself, you can use the <code>DROP_WINDOW</code> procedure and provide the name of the window group to the call.</p>
<p>To drop a window group, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72362" class="refsect2"><a id="i1012587"></a>
<hr />
<h3 class="refsect2">ENABLE Procedure</h3>
<p>This procedure enables a program, job, chain, window, database destination, external destination, file watcher, or group. When an object is enabled, its <code>enabled</code> attribute is set to <code>TRUE</code>. By default, jobs, chains, and programs are created disabled and database destinations, external destinations, file watchers, windows, and groups are created enabled.</p>
<p>If a job was disabled and you enable it, the Scheduler begins to automatically run the job according to its schedule. Enabling a disabled job also resets the job <code>RUN_COUNT</code>, <code>FAILURE_COUNT</code> and <code>RETRY_COUNT</code> columns in the <code>*_SCHEDULER_JOBS</code> data dictionary views.</p>
<p>Validity checks are performed before enabling an object. If the check fails, the object is not enabled, and an appropriate error is returned. This procedure does not return an error if the object was already enabled.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8416"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.ENABLE (
   name              IN VARCHAR2,
   commit_semantics  IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8417"></a>Parameters</p>
<div id="ARPLS72363" class="tblformal">
<p class="titleintable"><a id="sthref8418"></a><a id="sthref8419"></a>Table 129-57 ENABLE Procedure Parameters</p>
<table class="cellalignment1229" title="ENABLE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ENABLE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t72">Parameter</th>
<th class="cellalignment1227" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t72" headers="r1c1-t72">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t72 r1c2-t72">
<p>The name of the Scheduler object being enabled. Can be a comma-delimited list of names.</p>
<p>If a job class name is specified, then all the jobs in the job class are enabled.</p>
<p>If a group name is specified, then the group is enabled, but the enabled state of the group members is unaffected.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t72" headers="r1c1-t72">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t72 r1c2-t72">
<p>The commit semantics. The following types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code> - The procedure returns on the first error and previous successful enable operations are committed to disk. This is the default.</p>
</li>
<li>
<p><code>TRANSACTIONAL</code> - The procedure returns on the first error and everything that happened before that error is rolled back.</p>
<p>This type is only supported when enabling a job or a list of jobs.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code> - The procedure tries to absorb any errors and enable the rest of the jobs. It commits all the enable operations that were successful. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
<p>This type is only supported when enabling a job or a list of jobs.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8420"></a>Usage Notes</p>
<p>Window names must be preceded by <code>SYS</code>.</p>
<p>To run <code>ENABLE</code> for a window or group of type <code>WINDOW</code>, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege. For a job of type <code>EXECUTABLE</code> (or for a job that points to a program of type <code>EXECUTABLE</code>), the job owner must have the <code>CREATE EXTERNAL JOB</code> system privilege before the job can be enabled or run.</p>
<p>To enable a file watcher, the file watcher owner must have the <code>EXECUTE</code> privilege on the designated credential.</p>
<p>You can use <code>ENABLE</code> with any schema except the <code>SYS</code> schema.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72364" class="refsect2"><a id="BABCDIFA"></a>
<hr />
<h3 class="refsect2">END_DETACHED_JOB_RUN Procedure</h3>
<p>This procedure ends a detached job run. A detached job points to a detached program, which is a program with the <code>detached</code> attribute set to <code>TRUE</code>. A detached job run does not end until this procedure or the <a href="#i1009818">STOP_JOB Procedure</a> is called.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8421"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.END_DETACHED_JOB_RUN (
   job_name          IN VARCHAR2,
   error_number      IN PLS_INTEGER DEFAULT 0,
   additional_info   IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8422"></a>Parameters</p>
<div id="ARPLS72365" class="tblformal">
<p class="titleintable"><a id="sthref8423"></a><a id="sthref8424"></a>Table 129-58 END_DETACHED_JOB_RUN Procedure Parameters</p>
<table class="cellalignment1229" title="END_DETACHED_JOB_RUN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.END_DETACHED_JOB_RUN subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t73">Parameter</th>
<th class="cellalignment1227" id="r1c2-t73">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t73" headers="r1c1-t73">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t73 r1c2-t73">
<p>The name of the job to end. Must be a detached job that is running.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t73" headers="r1c1-t73">
<p><code>error_number</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t73 r1c2-t73">
<p>If zero, then the job run is logged as succeeded. If -1013, then the job run is logged as stopped. If non-zero, then the job run is logged as failed with this error number.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t73" headers="r1c1-t73">
<p><code>additional_info</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t73 r1c2-t73">
<p>This text is stored in the <code>additional_info</code> column of the <code>*_scheduler_job_run_details</code> views for this job run.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8425"></a>Usage Notes</p>
<p>This procedure requires that you either own the job or have <code>ALTER</code> privileges on it. You can also end any detached job run if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN13367" href="../../server.112/e25494/schedover.htm#ADMIN13367"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about detached jobs.</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72366" class="refsect2"><a id="i1009923"></a>
<hr />
<h3 class="refsect2">EVALUATE_CALENDAR_STRING Procedure</h3>
<p>You can define repeat intervals of jobs, windows or schedules using the Scheduler calendaring syntax. This procedure evaluates the calendar expression and tells you the next execution date and time of a job or window. This is very useful for testing the correct definition of the calendar string without actually scheduling the job or window.</p>
<p>This procedure can also get multiple steps of the repeat interval by passing the <code>next_run_date</code> returned by one invocation as the <code>return_date_after</code> argument of the next invocation.</p>
<p>See the calendaring syntax described in <a href="#BABEJGCH">"Operational Notes"</a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8426"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING (
   calendar_string    IN  VARCHAR2,
   start_date         IN  TIMESTAMP WITH TIME ZONE,
   return_date_after  IN  TIMESTAMP WITH TIME ZONE,
   next_run_date      OUT TIMESTAMP WITH TIME ZONE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8427"></a>Parameters</p>
<div id="ARPLS72367" class="tblformal">
<p class="titleintable"><a id="sthref8428"></a><a id="sthref8429"></a>Table 129-59 EVALUATE_CALENDAR_STRING Procedure Parameters</p>
<table class="cellalignment1229" title="EVALUATE_CALENDAR_STRING Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t75">Parameter</th>
<th class="cellalignment1227" id="r1c2-t75">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t75" headers="r1c1-t75">
<p><code>calendar_string</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t75 r1c2-t75">
<p>The calendar expression to be evaluated. The string must be in the calendaring syntax described in <a href="#BABEJGCH">"Operational Notes"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t75" headers="r1c1-t75">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t75 r1c2-t75">
<p>The date and time after which the repeat interval becomes valid. It can also be used to fill in specific items that are missing from the calendar string. Can optionally be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t75" headers="r1c1-t75">
<p><code>return_date_after</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t75 r1c2-t75">
<p>The return_date_after argument helps the Scheduler determine which one of all possible matches (all valid execution dates) to return from those determined by the <code>start_date</code> and the calendar string.</p>
<p>When a <code>NULL</code> value is passed for this argument, the Scheduler automatically fills in <code>systimestamp</code> as its value.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t75" headers="r1c1-t75">
<p><code>next_run_date</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t75 r1c2-t75">
<p>The first timestamp that matches the calendar string and start date that occur after the value passed in for the <code>return_date_after</code> argument.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8430"></a>Examples</p>
<p>The following code fragment can be used to determine the next five dates a job will run given a specific calendar string.</p>
<pre>
SET SERVEROUTPUT ON;
ALTER SESSION set NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';
Session altered.

DECLARE
start_date        TIMESTAMP;
return_date_after TIMESTAMP;
next_run_date     TIMESTAMP;
BEGIN
start_date :=
  to_timestamp_tz('01-JAN-2003 10:00:00','DD-MON-YYYY HH24:MI:SS');
return_date_after := start_date;
FOR i IN 1..5 LOOP
  <span class="bold">DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING</span>(  
    'FREQ=DAILY;BYHOUR=9;BYMINUTE=30;BYDAY=MON,TUE,WED,THU,FRI',
    start_date, return_date_after, next_run_date);
DBMS_OUTPUT.PUT_LINE('next_run_date: ' || next_run_date);
return_date_after := next_run_date;
END LOOP;
END;
/

next_run_date: 02-JAN-03 09.30.00.000000 AM
next_run_date: 03-JAN-03 09.30.00.000000 AM
next_run_date: 06-JAN-03 09.30.00.000000 AM
next_run_date: 07-JAN-03 09.30.00.000000 AM
next_run_date: 08-JAN-03 09.30.00.000000 AM

PL/SQL procedure successfully completed.
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8431"></a>Usage Notes</p>
<p>No specific Scheduler privileges are required.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72368" class="refsect2"><a id="BABGCFFG"></a>
<hr />
<h3 class="refsect2">EVALUATE_RUNNING_CHAIN Procedure</h3>
<p>This procedure forces reevaluation of the rules of a running chain to trigger any rules for which the conditions have been satisfied. The job passed as an argument must point to a chain and must be running. If the job is not running, an error is thrown. (<code>RUN_JOB</code> can be used to start the job.)</p>
<p>If any of the steps of the chain are themselves running chains, another <code>EVALUATE_RUNNING_CHAIN</code> is performed on each of the nested running chains.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8432"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.EVALUATE_RUNNING_CHAIN (
   job_name              IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8433"></a>Parameters</p>
<div id="ARPLS72369" class="tblformal">
<p class="titleintable"><a id="sthref8434"></a><a id="sthref8435"></a>Table 129-60 EVALUATE_RUNNING_CHAIN Procedure Parameter</p>
<table class="cellalignment1229" title="EVALUATE_RUNNING_CHAIN Procedure Parameter" summary="This table describes Parameters used by the DBMS_SCHEDULER.GENERATE_JOB_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t76">Parameter</th>
<th class="cellalignment1227" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t76" headers="r1c1-t76">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t76 r1c2-t76">
<p>The name of the running job (pointing to a chain) to reevaluate the rules for</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8436"></a>Usage Notes</p>
<p>Running <code>EVALUATE_RUNNING_CHAIN</code> on a job requires alter privileges on the job (either as the owner, or as a user with <code>ALTER</code> privileges on the job or the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege).</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
The Scheduler automatically evaluates a chain:
<ul>
<li>
<p>At the start of the chain job</p>
</li>
<li>
<p>When a chain step completes</p>
</li>
<li>
<p>When an event occurs that is associated with an event step in the chain</p>
</li>
</ul>
<p>For most chains, this is sufficient. <code>EVALUATE_RUNNING_CHAIN</code> should be used only under the following circumstances:</p>
<ul>
<li>
<p>After manual intervention of a running chain with the <code>ALTER_RUNNING_CHAIN</code> procedure</p>
</li>
<li>
<p>When chain rules use SQL syntax and the rule conditions contain elements that are not under the control of the Scheduler.</p>
</li>
</ul>
<p>In these cases, <code>EVALUATE_RUNNING_CHAIN</code> may not be needed if you set the <code>evaluation_interval</code> attribute when you created the chain.</p>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72370" class="refsect2"><a id="i1011295"></a>
<hr />
<h3 class="refsect2">GENERATE_JOB_NAME Function</h3>
<p>This function returns a unique name for a job. The name will be of the form <code>{prefix}N</code> where <code>N</code> is a number from a sequence. If no prefix is specified, the generated name will, by default, be <code>JOB$_1</code>, <code>JOB$_2</code>, <code>JOB$_3</code>, and so on. If <code>'SCOTT'</code> is specified as the prefix, the name will be <code>SCOTT1</code>, <code>SCOTT2</code>, and so on.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8437"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GENERATE_JOB_NAME (
   prefix        IN VARCHAR2 DEFAULT 'JOB$_') RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8438"></a>Parameters</p>
<div id="ARPLS72371" class="tblformal">
<p class="titleintable"><a id="sthref8439"></a><a id="sthref8440"></a>Table 129-61 GENERATE_JOB_NAME Function Parameter</p>
<table class="cellalignment1229" title="GENERATE_JOB_NAME Function Parameter" summary="This table describes Parameters used by the DBMS_SCHEDULER.GENERATE_JOB_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t78">Parameter</th>
<th class="cellalignment1227" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t78" headers="r1c1-t78">
<p><code>prefix</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t78 r1c2-t78">
<p>The prefix to use when generating the job name</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8441"></a>Usage Notes</p>
<p>If the prefix is explicitly set to <code>NULL</code>, the name is just the sequence number. In order to successfully use such numeric names, they must be surrounded by double quotes throughout the <code>DBMS_SCHEDULER</code> calls. A prefix cannot be longer than 18 characters and cannot end with a digit.</p>
<p>Note that, even though the <code>GENERATE_JOB_NAME</code> function never returns the same job name twice, there is a small chance that the returned name matches an already existing database object.</p>
<p>No specific Scheduler privileges are required to use this function.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73510" class="refsect2"><a id="CHDFHDIJ"></a>
<hr />
<h3 class="refsect2">GET_AGENT_INFO Function</h3>
<p>This function can return job information specific to an agent, such as how many are running and so on, depending on the attribute selected.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8442"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GET_AGENT_INFO (
   agent_name        IN VARCHAR2,
   attribute         IN VARCHAR2) RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8443"></a>Parameters</p>
<div id="ARPLS73511" class="tblformal">
<p class="titleintable"><a id="sthref8444"></a><a id="sthref8445"></a>Table 129-62 GET_AGENT_INFO Function Parameter</p>
<table class="cellalignment1229" title="GET_AGENT_INFO Function Parameter" summary="This table describes Parameters used by the DBMS_SCHEDULER.GENERATE_JOB_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t79">Parameter</th>
<th class="cellalignment1227" id="r1c2-t79">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t79" headers="r1c1-t79">
<p><code>agent_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t79 r1c2-t79">
<p>The name of an external destination where the agent is running</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t79" headers="r1c1-t79">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t79 r1c2-t79">
<p>Possible Attributes values</p>
<ul>
<li>
<p><code>VERSION</code>:. Returns the agent version number. Requires the <code>CREATE JOB</code> system privilege.</p>
</li>
<li>
<p><code>UPTIME</code>: Returns the time the agent has been up and running. Requires the <code>CREATE</code> <code>JOB</code> system privilege.</p>
</li>
<li>
<p><code>NUMBER_OF_RUNNING_JOBS</code>: Returns the number of jobs that the agent is currently running. Requires the <code>CREATE JOB</code> system privilege.</p>
</li>
<li>
<p><code>TOTAL_JOBS_RUN</code>: Returns the number of jobs run by the agent since it was started. Requires the <code>CREATE JOB</code> system privilege.</p>
</li>
<li>
<p><code>RUNNING_JOBS</code>: Returns a comma-separated list of the names of the jobs running currently. Requires the <code>MANAGE</code> <code>SCHEDULER</code> system privilege.</p>
</li>
<li>
<p><code>ALL</code>: Returns all the information the previous options return. It requires the <code>MANAGE</code> <code>SCHEDULER</code> system privilege.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8446"></a>Usage Notes</p>
<p>This function returns the same information as the <code>schagent</code> utility status option.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73512" class="refsect2"><a id="CHDGIJED"></a>
<hr />
<h3 class="refsect2">GET_AGENT_VERSION Function</h3>
<p>This function returns the version string of a Scheduler agent that is registered with the database and is currently running. <code>GET_AGENT_VERSION</code> throws an error if the agent is not registered with the database or if the agent is not currently running.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8447"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GET_AGENT_VERSION (
   agent_host        IN VARCHAR2) RETURN VARCHAR2;
   
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8448"></a>Parameters</p>
<div id="ARPLS73513" class="tblformal">
<p class="titleintable"><a id="sthref8449"></a><a id="sthref8450"></a>Table 129-63 GET_AGENT_VERSION Function Parameter</p>
<table class="cellalignment1229" title="GET_AGENT_VERSION Function Parameter" summary="This table describes Parameters used by the DBMS_SCHEDULER.GENERATE_JOB_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t80">Parameter</th>
<th class="cellalignment1227" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t80" headers="r1c1-t80">
<p><code>agent_host</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t80 r1c2-t80">
<p>Either the hostname and port on which the agent is running in the form <code>hostname:port</code> or the name of the agent as shown in the <code>destination_name</code> column of the <code>ALL_SCHEDULER_EXTERNAL_DESTS</code> view which lists all Scheduler agents registered with the database.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8451"></a>Usage Notes</p>
<p>This function requires the <code>CREATE</code> <code>EXTERNAL</code> <code>JOB</code> system privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72372" class="refsect2"><a id="i1011296"></a>
<hr />
<h3 class="refsect2">GET_ATTRIBUTE Procedure</h3>
<p>This procedure retrieves the value of an attribute of a Scheduler object. It is overloaded to retrieve values of various types.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8452"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GET_ATTRIBUTE (
   name           IN VARCHAR2,
   attribute      IN VARCHAR2,
   value          OUT {VARCHAR2|PLS_INTEGER|BOOLEAN|DATE|TIMESTAMP|
                        TIMESTAMP WITH TIME ZONE|TIMESTAMP WITH LOCAL TIME ZONE|
                        INTERVAL DAY TO SECOND});

DBMS_SCHEDULER.GET_ATTRIBUTE (
   name           IN VARCHAR2,
   attribute      IN VARCHAR2,
   value          OUT VARCHAR2,
   value2         OUT VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8453"></a>Parameters</p>
<div id="ARPLS72373" class="tblformal">
<p class="titleintable"><a id="sthref8454"></a><a id="sthref8455"></a>Table 129-64 GET_ATTRIBUTE Procedure Parameters</p>
<table class="cellalignment1229" title="GET_ATTRIBUTE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.GET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t81">Parameter</th>
<th class="cellalignment1227" id="r1c2-t81">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t81" headers="r1c1-t81">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t81 r1c2-t81">
<p>The name of the object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t81" headers="r1c1-t81">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t81 r1c2-t81">
<p>The attribute being retrieved. See the <a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a> for tables of attribute values.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t81" headers="r1c1-t81">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t81 r1c2-t81">
<p>The existing value of the attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t81" headers="r1c1-t81">
<p><code>value2</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t81 r1c2-t81">
<p>The <code>value2</code> argument is for an optional second value.</p>
<p>Most attributes have only one value associated with them, but some can have two.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8456"></a>Usage Notes</p>
<p>To run <code>GET_ATTRIBUTE</code> for a job class, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege or have <code>EXECUTE</code> privileges on the class. For a schedule, window, or group, no privileges are necessary. Otherwise, you must be the owner of the object or have <code>ALTER</code> or <code>EXECUTE</code> privileges on that object or have the <code>CREATE ANY JOB</code> privilege.</p>
<p>See the <a href="#CIHDAIIH">SET_ATTRIBUTE Procedure</a> for tables of attribute values that you can retrieve for the various Scheduler object types.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72374" class="refsect2"><a id="BABDDBFH"></a>
<hr />
<h3 class="refsect2">GET_FILE Procedure</h3>
<p>This procedure retrieves a file from the operating system file system of a specified host. The file is copied to a destination, or its contents are returned in a procedure output parameter.</p>
<p>You can also use this procedure to retrieve the standard output or error text for a run of an external job that has an associated credential.</p>
<p>This procedures differs from the equivalent <code>UTL_FILE</code> procedure in that it uses a credential and can retrieve files from remote hosts that have only a Scheduler agent (and not an Oracle database) installed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8457"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GET_FILE (
   source_file                  IN VARCHAR2,
   source_host                  IN VARCHAR2,
   credential_name              IN VARCHAR2,
   file_contents                IN OUT NOCOPY {BLOB|CLOB});
</pre>
<pre>
DBMS_SCHEDULER.GET_FILE (
   source_file                  IN VARCHAR2,
   source_host                  IN VARCHAR2,
   credential_name              IN VARCHAR2,
   destination_file_name        IN VARCHAR2,
   destination_directory_object IN VARCHAR2,
   destination_permissions      IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8458"></a>Parameters</p>
<div id="ARPLS72375" class="tblformal">
<p class="titleintable"><a id="sthref8459"></a><a id="sthref8460"></a>Table 129-65 GET_FILE Procedure Parameters</p>
<table class="cellalignment1229" title="GET_FILE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.GET_FILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t82">Parameter</th>
<th class="cellalignment1227" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t82" headers="r1c1-t82">
<p><code>source_file</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t82 r1c2-t82">
<p>Fully qualified path name of the file to retrieve from the operating system. The file name is case-sensitive and is not converted to uppercase. If the file name starts with a question mark ('<code>?</code>'), the question mark is replaced by the path to the Oracle home if getting a file from the local host, or to the Scheduler agent home if getting a file from a remote host.</p>
<p>If the format of this parameter is <code><span class="codeinlineitalic">external_log_id</span></code><code>_stdout</code>, then the stdout from the designated external job run is returned.</p>
<p>If the format of this parameter is <code><span class="codeinlineitalic">external_log_id</span></code><code>_stderr</code>, the error text from the designated external job run is returned.</p>
<p>You obtain the value of <code><span class="codeinlineitalic">external_log_id</span></code> from the <code>ADDITIONAL_INFO</code> column of the <code>*_SCHEDULER_JOB_RUN_DETAILS</code> views. This column contains a set of name/value pairs in an indeterminate order, so you must parse this column for the <code>external_log_id</code> name/value pair, and then append either "<code>_stdout</code>" or "<code>_stderr</code>" to its value.</p>
<p>The external job must have an associated credential. The <code>credential_name</code> parameter of <code>GET_FILE</code> must name the same credential that is used by the job, and the <code>source_host</code> parameter must be the same as the <code>destination</code> attribute of the job.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t82" headers="r1c1-t82">
<p><code>source_host</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t82 r1c2-t82">
<p>If the file is to be retrieved from a remote host, then this parameter must be a valid an external destination name. (An external destination is created when you register a remote Scheduler agent with the database. You can view external destination names in the views <code>*_SCHEDULER_EXTERNAL_DESTS</code>.)</p>
<p>If <code>source_host</code> is <code>NULL</code> or set to '<code>localhost</code>', then the file is retrieved from the file system of the local host. To determine the port number of a Scheduler agent, view the <code>schagent.conf</code> file, which is located in the Scheduler agent home directory on the remote host.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t82" headers="r1c1-t82">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t82 r1c2-t82">
<p>The name of the credential to use for accessing the file system.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t82" headers="r1c1-t82">
<p><code>file_contents</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t82 r1c2-t82">
<p>The variable from which the file contents is read.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t82" headers="r1c1-t82">
<p><code>destination_file_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t82 r1c2-t82">
<p>The file to which the file contents is written.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t82" headers="r1c1-t82">
<p><code>destination_directory_object</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t82 r1c2-t82">
<p>The directory object that specifies the path to the destination file, when <code>destination_file_name</code> is used. The caller must have the necessary privileges on the directory object.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t82" headers="r1c1-t82">
<p><code>destination_permissions</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t82 r1c2-t82">
<p>Reserved for future use</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8461"></a>Usage Notes</p>
<p>The caller must have the <code>CREATE EXTERNAL JOB</code> system privilege and have <code>EXECUTE</code> privileges on the credential.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72376" class="refsect2"><a id="i1011297"></a>
<hr />
<h3 class="refsect2">GET_SCHEDULER_ATTRIBUTE Procedure</h3>
<p>This procedure retrieves the value of a Scheduler attribute.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8462"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.GET_SCHEDULER_ATTRIBUTE (
   attribute      IN VARCHAR2,
   value          OUT VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8463"></a>Parameters</p>
<div id="ARPLS72377" class="tblformal">
<p class="titleintable"><a id="sthref8464"></a><a id="sthref8465"></a>Table 129-66 GET_SCHEDULER_ATTRIBUTE Procedure Parameters</p>
<table class="cellalignment1229" title="GET_SCHEDULER_ATTRIBUTE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.GET_SCHEDULER_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t83">Parameter</th>
<th class="cellalignment1227" id="r1c2-t83">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t83" headers="r1c1-t83">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t83 r1c2-t83">
<p>The name of the attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t83" headers="r1c1-t83">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t83 r1c2-t83">
<p>The existing value of the attribute</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8466"></a>Usage Notes</p>
<p>To run <code>GET_SCHEDULER_ATTRIBUTE</code>, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p><a href="#BABCEJJF">Table 129-67</a> lists the Scheduler attributes that you can retrieve. For more detail on these attributes, see <a href="#BABIBECD">Table 129-97</a> and the section "Configuring the Scheduler" in <a class="olink ADMIN035" href="../../server.112/e25494/schedadmin.htm#ADMIN035"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
<div id="ARPLS72378" class="tblformal">
<p class="titleintable"><a id="sthref8467"></a><a id="BABCEJJF"></a>Table 129-67 Scheduler Attributes Retrievable with GET_SCHEDULER_ATTRIBUTE</p>
<table class="cellalignment1229" title="Scheduler Attributes Retrievable with GET_SCHEDULER_ATTRIBUTE" summary="This table lists the Scheduler attributes and their meanings" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t84">Scheduler Attribute</th>
<th class="cellalignment1227" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t84" headers="r1c1-t84">
<p><code>current_open_window</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t84 r1c2-t84">
<p>Name of the currently open window</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t84" headers="r1c1-t84">
<p><code>default_timezone</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t84 r1c2-t84">
<p>Default time zone used by the Scheduler for repeat intervals and windows</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t84" headers="r1c1-t84">
<p><code>email_sender</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t84 r1c2-t84">
<p>The default e-mail address of the sender for job state e-mail notifications</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t84" headers="r1c1-t84">
<p><code>email_server</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t84 r1c2-t84">
<p>The SMTP server address that the Scheduler uses to send e-mail notifications for job state events. E-mail notifications cannot be sent if this attribute is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t84" headers="r1c1-t84">
<p><code>event_expiry_time</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t84 r1c2-t84">
<p>Time in seconds before an event generated by the Scheduler and enqueued onto the Scheduler event queue expires. May be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t84" headers="r1c1-t84">
<p><code>log_history</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t84 r1c2-t84">
<p>Retention period in days for job and window logs. The range of valid values is 0 through 1000000.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t84" headers="r1c1-t84">
<p><code>max_job_slave_processes</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t84 r1c2-t84">
<p>This Scheduler attribute is not used.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72379" class="refsect2"><a id="i1011298"></a>
<hr />
<h3 class="refsect2">OPEN_WINDOW Procedure</h3>
<p>This procedure opens a window independent of its schedule. This window opens and the resource plan associated with it takes effect immediately for the duration specified or for the normal duration of the window if no duration is given. Only an enabled window can be manually opened.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8468"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.OPEN_WINDOW (
   window_name             IN VARCHAR2,
   duration                IN INTERVAL DAY TO SECOND,
   force                   IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8469"></a>Parameters</p>
<div id="ARPLS72380" class="tblformal">
<p class="titleintable"><a id="sthref8470"></a><a id="sthref8471"></a>Table 129-68 OPEN_WINDOW Procedure Parameters</p>
<table class="cellalignment1229" title="OPEN_WINDOW Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.OPEN_WINDOW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t85">Parameter</th>
<th class="cellalignment1227" id="r1c2-t85">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t85" headers="r1c1-t85">
<p><code>window_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t85 r1c2-t85">
<p>The name of the window</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t85" headers="r1c1-t85">
<p><code>duration</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t85 r1c2-t85">
<p>The duration of the window. It is of type interval day to second. If it is <code>NULL</code>, then the window opens for the regular duration as specified in the window metadata.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t85" headers="r1c1-t85">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t85 r1c2-t85">
<p>If <code>force</code> is set to <code>FALSE</code>, then opening an already open window generates an error.</p>
<p>If <code>force</code> is set to <code>TRUE</code>:</p>
<p>You can open a window that is already open. The window stays open for the duration specified in the call, from the time the <code>OPEN_WINDOW</code> command was issued.</p>
<p>For example: <code>window1</code> was created with a duration of four hours. It has how been open for two hours. If, at this point, you reopen <code>window1</code> using the <code>OPEN_WINDOW</code> call and do not specify a duration, then <code>window1</code> stays open for four hours because it was created with that duration. If you specified a duration of 30 minutes, the window will close in 30 minutes.</p>
<p>The Scheduler automatically closes any window that is open at that time, even if it has a higher priority. For the duration of this manually opened window, the Scheduler does not open any other scheduled windows even if they have a higher priority.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8472"></a>Usage Notes</p>
<p>Opening a window manually has no impact on regular scheduled runs of the window. The next open time of the window is not updated and is determined by the regular scheduled opening.</p>
<p>When a window that was manually opened closes, the rules about overlapping windows are applied to determine which other window should be opened at that time if any at all.</p>
<p>If there are jobs running when the window opens, the resources allocated to them might change if there is a switch in resource plan.</p>
<p>If a window fails to switch resource plans because the designated resource plan no longer exists or because resource plan switching by windows is disabled (for example, by using the <code>ALTER</code> <code>SYSTEM</code> statement with the <code>force</code> option), the failure to switch resource plans is recorded in the window log.</p>
<p>Opening a window requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72381" class="refsect2"><a id="i1011299"></a>
<hr />
<h3 class="refsect2">PURGE_LOG Procedure</h3>
<p>By default, the Scheduler automatically purges all rows in the job log and window log that are older than 30 days. The <code>PURGE_LOG</code> procedure is used to purge additional rows from the job and window log.</p>
<p>Rows in the job log table pertaining to the steps of a chain are purged only when the entry for the main chain job is purged (either manually or automatically).</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8473"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.PURGE_LOG (
   log_history             IN PLS_INTEGER  DEFAULT 0,
   which_log               IN VARCHAR2     DEFAULT 'JOB_AND_WINDOW_LOG',
   job_name                IN VARCHAR2     DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8474"></a>Parameters</p>
<div id="ARPLS72382" class="tblformal">
<p class="titleintable"><a id="sthref8475"></a><a id="sthref8476"></a>Table 129-69 PURGE_LOG Procedure Parameters</p>
<table class="cellalignment1229" title="PURGE_LOG Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.PURGE_LOG subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t86">Parameter</th>
<th class="cellalignment1227" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t86" headers="r1c1-t86">
<p><code>log_history</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t86 r1c2-t86">
<p>This specifies how much history (in days) to keep. The valid range is 0 - 1000000. If set to 0, no history is kept.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t86" headers="r1c1-t86">
<p><code>which_log</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t86 r1c2-t86">
<p>This specifies the log type. Valid values are: <code>job_log</code>, <code>window_log</code>, and <code>job_and_window_log</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t86" headers="r1c1-t86">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t86 r1c2-t86">
<p>This specifies which job-specific entries must be purged from the jog log. This can be a comma-delimited list of job names and job classes. Whenever <code>job_name</code> has a value other than <code>NULL</code>, the <code>which_log</code> argument implicitly includes the job log.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8477"></a>Usage Notes</p>
<p>This procedure requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8478"></a>Examples</p>
<p>The following completely purges all rows from both the job log and the window log:</p>
<pre>
DBMS_SCHEDULER.PURGE_LOG();
</pre>
<p>The following purges all rows from the window log that are older than 5 days:</p>
<pre>
DBMS_SCHEDULER.PURGE_LOG(5, 'window_log');
</pre>
<p>The following purges all rows from the window log that are older than 1 day and all rows from the job log that are related to jobs in <code>jobclass1</code> and older than 1 day:</p>
<pre>
DBMS_SCHEDULER.PURGE_LOG(1, 'job_and_window_log', 'sys.jobclass1');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72383" class="refsect2"><a id="BABHDFFF"></a>
<hr />
<h3 class="refsect2">PUT_FILE Procedure</h3>
<p>This procedure saves a file to the operating system file system of a specified remote host or of the local computer. It differs from the equivalent <code>UTL_FILE</code> procedure in that it uses a credential and can save files to a remote host that has only a Scheduler agent (and not an Oracle Database) installed.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8479"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.PUT_FILE (
   destination_file         IN VARCHAR2,
   destination_host         IN VARCHAR2,
   credential_name          IN VARCHAR2,
   file_contents            IN {BLOB|CLOB},
   destination_permissions  IN VARCHAR2 DEFAULT NULL);
</pre>
<pre>
DBMS_SCHEDULER.PUT_FILE (
   destination_file         IN VARCHAR2,
   destination_host         IN VARCHAR2,
   credential_name          IN VARCHAR2,
   source_file_name         IN VARCHAR2,
   source_directory_object  IN VARCHAR2,
   destination_permissions  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8480"></a>Parameters</p>
<div id="ARPLS72384" class="tblformal">
<p class="titleintable"><a id="sthref8481"></a><a id="sthref8482"></a>Table 129-70 PUT_FILE Procedure Parameters</p>
<table class="cellalignment1229" title="PUT_FILE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.PUT_FILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t87">Parameter</th>
<th class="cellalignment1227" id="r1c2-t87">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t87" headers="r1c1-t87">
<p><code>destination_file</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t87 r1c2-t87">
<p>Fully qualified path name of the file to save to the operating system file system. The file name is case-sensitive. If the file name starts with a question mark ('<code>?</code>'), the question mark is replaced by the path to the Oracle home if saving to the local host, or to the Scheduler agent home if saving to a remote host.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t87" headers="r1c1-t87">
<p><code>destination_host</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t87 r1c2-t87">
<p>If <code>NULL</code> or set to '<code>localhost</code>', the file is saved to the file system of the local computer.</p>
<p>To save to a remote host, this parameter must be a valid external destination name. (An external destination is created when you register a remote Scheduler agent with the database. You can view external destination names in the views <code>*_SCHEDULER_EXTERNAL_DESTS</code>.)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t87" headers="r1c1-t87">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t87 r1c2-t87">
<p>The name of the credential to use for accessing the destination file system.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t87" headers="r1c1-t87">
<p><code>file_contents</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t87 r1c2-t87">
<p>The variable from which the file contents is read.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t87" headers="r1c1-t87">
<p><code>source_file_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t87 r1c2-t87">
<p>The file from which the file contents is written</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t87" headers="r1c1-t87">
<p><code>source_directory_object</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t87 r1c2-t87">
<p>The directory object that specifies the path to the source file, when <code>source_file_name</code> is used. The caller must have the necessary privileges on the directory object.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t87" headers="r1c1-t87">
<p><code>destination_permissions</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t87 r1c2-t87">
<p>Reserved for future use</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8483"></a>Usage Notes</p>
<p>The caller must have the <code>CREATE EXTERNAL JOB</code> system privilege and have <code>EXECUTE</code> privileges on the credential.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72385" class="refsect2"><a id="RemoveEventQSubsc95"></a>
<hr />
<h3 class="refsect2">REMOVE_EVENT_QUEUE_SUBSCRIBER Procedure</h3>
<p>This procedure unsubscribes a user from the Scheduler event queue <code>SYS.SCHEDULER$_EVENT_QUEUE</code>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8484"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.REMOVE_EVENT_QUEUE_SUBSCRIBER (
   subscriber_name         IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8485"></a>Parameters</p>
<div id="ARPLS72386" class="tblformal">
<p class="titleintable"><a id="sthref8486"></a><a id="sthref8487"></a>Table 129-71 REMOVE_EVENT_QUEUE_SUBSCRIBER Procedure Parameters</p>
<table class="cellalignment1229" title="REMOVE_EVENT_QUEUE_SUBSCRIBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.ADD_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t88">Parameter</th>
<th class="cellalignment1227" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t88" headers="r1c1-t88">
<p><code>subscriber_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t88 r1c2-t88">
<p>Name of the Oracle Streams Advanced Queuing (AQ) agent to remove the subscription from. If <code>NULL</code>, the user name of the calling user is used.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8488"></a>Usage Notes</p>
<p>After the agent is unsubscribed, it is deleted. If the agent does not exist or is not currently subscribed to the Scheduler event queue, an error is raised.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72868" class="refsect2"><a id="BABHECBB"></a>
<hr />
<h3 class="refsect2">REMOVE_GROUP_MEMBER Procedure</h3>
<p>This procedure removes one or more members from an existing group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8489"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.REMOVE_GROUP_MEMBER (
   group_name              IN VARCHAR2,
   member                  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8490"></a>Parameters</p>
<div id="ARPLS72869" class="tblformal">
<p class="titleintable"><a id="sthref8491"></a><a id="sthref8492"></a>Table 129-72 REMOVE_GROUP_MEMBER Procedure Parameters</p>
<table class="cellalignment1229" title="REMOVE_GROUP_MEMBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.REMOVE_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t89">Parameter</th>
<th class="cellalignment1227" id="r1c2-t89">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t89" headers="r1c1-t89">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t89 r1c2-t89">
<p>The name of the group.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t89" headers="r1c1-t89">
<p><code>member_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t89 r1c2-t89">
<p>The name of the member to remove from group. Comma-separated list of members to remove. An error is returned if any of the members is not part of the group.</p>
<p>A group of the same type can be named as a member. The Scheduler immediately expands the included group name into its list of members.</p>
<p>If the member is a destination, any job instances that run on this destination are removed from the <code>*_SCHEDULER_JOB_DESTS</code> views.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8493"></a>Usage Notes</p>
<p>The following users may remove members from a group:</p>
<ul>
<li>
<p>The group owner</p>
</li>
<li>
<p>A user that has been granted the <code>ALTER</code> object privilege on the group</p>
</li>
<li>
<p>A user with the <code>CREATE ANY JOB</code> system privilege</p>
</li>
</ul>
<p>You must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege to remove a member from a group of type <code>WINDOW</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABFGABJ">"CREATE_GROUP Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72387" class="refsect2"><a id="BABIIFIC"></a>
<hr />
<h3 class="refsect2">REMOVE_JOB_EMAIL_NOTIFICATION Procedure</h3>
<p>This procedure removes e-mail notifications for a job. You can remove all e-mail notifications or remove notifications only for specified recipients or specified events.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8494"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.REMOVE_JOB_EMAIL_NOTIFICATION (
    job_name             IN VARCHAR2,
    recipients           IN VARCHAR2 DEFAULT NULL,
    events               IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8495"></a>Parameters</p>
<div id="ARPLS72388" class="tblformal">
<p class="titleintable"><a id="sthref8496"></a><a id="sthref8497"></a>Table 129-73 ADD_JOB_EMAIL_NOTIFICATION Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_JOB_EMAIL_NOTIFICATION Procedure Parameters" summary="This table describes parameters used by the DBMS_SCHEDULER.ADD_JOB_EMAIL_NOTIFICATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t91">Parameter</th>
<th class="cellalignment1227" id="r1c2-t91">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t91" headers="r1c1-t91">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t91 r1c2-t91">
<p>Name of the job to remove e-mail notifications for. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t91" headers="r1c1-t91">
<p><code>recipients</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t91 r1c2-t91">
<p>E-mail address to remove e-mail notification for. Comma-separated list of e-mail addresses.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t91" headers="r1c1-t91">
<p><code>events</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t91 r1c2-t91">
<p>Job state event to remove e-mail notification for. Comma-separate list of job state events.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8498"></a>Usage Notes</p>
<p>When you specify multiple recipients and multiple events, the notification for each specified event is removed for each specified recipient. The procedure ignores any recipients or events that are specified but that were not previously added.</p>
<p>If <code>recipients</code> is <code>NULL</code>, e-mail notifications for the specified events are removed for all existing recipients. If <code>events</code> is <code>NULL</code>, notifications for all events are removed for the specified recipients. If both <code>recipients</code> and <code>events</code> are <code>NULL</code>, all e-mail notifications are removed for the job.</p>
<p>For example, if <code>recipients</code> is '<code>jsmith@example.com,rjones@example.com</code>' and <code>events</code> is '<code>JOB_FAILED,JOB_BROKEN</code>', then notifications for both the <code>JOB_FAILED</code> and <code>JOB_BROKEN</code> events are removed for both jsmith and rjones. If <code>recipients</code> is <code>NULL</code>, then notifications for both the <code>JOB_FAILED</code> and <code>JOB_BROKEN</code> events are removed for jsmith, rjones, and any other previously defined recipients for these events.</p>
<p>To call this procedure, you must be the job owner or a user with the <code>CREATE</code> <code>ANY</code> <code>JOB</code> system privilege or <code>ALTER</code> object privilege on the job.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BABBFBGI">"ADD_JOB_EMAIL_NOTIFICATION Procedure"</a></div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72389" class="refsect2"><a id="i1000476"></a>
<hr />
<h3 class="refsect2">REMOVE_WINDOW_GROUP_MEMBER Procedure</h3>
<p><span class="bold">*** Deprecated in Oracle Database 11</span><span class="bolditalic">g</span> <span class="bold">Release 2 (11.2).</span> <span class="bold">Use REMOVE_GROUP_MEMBER instead</span>.</p>
<p>This procedure removes one or more windows from an existing window group.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8499"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.REMOVE_WINDOW_GROUP_MEMBER (
   group_name              IN VARCHAR2,
   window_list             IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8500"></a>Parameters</p>
<div id="ARPLS72390" class="tblformal">
<p class="titleintable"><a id="sthref8501"></a><a id="sthref8502"></a>Table 129-74 REMOVE_WINDOW_GROUP_MEMBER Procedure Parameters</p>
<table class="cellalignment1229" title="REMOVE_WINDOW_GROUP_MEMBER Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.REMOVE_WINDOW_GROUP_MEMBER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t93">Parameter</th>
<th class="cellalignment1227" id="r1c2-t93">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t93" headers="r1c1-t93">
<p><code>group_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t93 r1c2-t93">
<p>The name of the window group.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t93" headers="r1c1-t93">
<p><code>window_list</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t93 r1c2-t93">
<p>The name of the window or windows.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8503"></a>Usage Notes</p>
<p>If any of the windows specified is invalid, does not exist, or is not a member of the given group, the call fails. Removing a window from a group requires the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p>Dropping an open window from a window group has no impact on any running jobs that has the window as its schedule because the jobs only stop when a window closes.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72391" class="refsect2"><a id="i1014573"></a>
<hr />
<h3 class="refsect2">RESET_JOB_ARGUMENT_VALUE Procedure</h3>
<p>This procedure resets (clears) the value previously set to an argument for a job.</p>
<p><code>RESET_JOB_ARGUMENT_VALUE</code> is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8504"></a>Syntax</p>
<p>Clears a previously set job argument value by argument position:</p>
<pre>
DBMS_SCHEDULER.RESET_JOB_ARGUMENT_VALUE (
   job_name                IN VARCHAR2,
   argument_position       IN PLS_INTEGER);
</pre>
<p>Clears a previously set job argument value by argument name:</p>
<pre>
DBMS_SCHEDULER.RESET_JOB_ARGUMENT_VALUE (
   job_name                IN VARCHAR2,
   argument_name           IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8505"></a>Parameters</p>
<div id="ARPLS72392" class="tblformal">
<p class="titleintable"><a id="sthref8506"></a><a id="sthref8507"></a>Table 129-75 RESET_JOB_ARGUMENT_VALUE Procedure Parameters</p>
<table class="cellalignment1229" title="RESET_JOB_ARGUMENT_VALUE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.RESET_JOB_ARGUMENT_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t94">Parameter</th>
<th class="cellalignment1227" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t94" headers="r1c1-t94">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t94 r1c2-t94">
<p>The name of the job being altered</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t94" headers="r1c1-t94">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t94 r1c2-t94">
<p>The position of the program argument being reset</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t94" headers="r1c1-t94">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t94 r1c2-t94">
<p>The name of the program argument being reset</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8508"></a>Usage Notes</p>
<p>If the corresponding program argument has no default value, the job is disabled. Resetting a program argument of a job belonging to another user requires <code>ALTER</code> privileges on that job. Arguments can be specified by position or by name.</p>
<p><code>RESET_JOB_ARGUMENT_VALUE</code> requires that you be the owner of the job or have <code>ALTER</code> privileges on that job. You can also reset a job argument value if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p><code>RESET_JOB_ARGUMENT_VALUE</code> only supports arguments of SQL type. Therefore, argument values that are not of SQL type, such as booleans, are not supported as program or job arguments.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72393" class="refsect2"><a id="CHDGHBGJ"></a>
<hr />
<h3 class="refsect2">RUN_CHAIN Procedure</h3>
<p>This procedure immediately runs a chain or part of a chain by creating a run-once job with the job name given. If no <code>job_name</code> is given, one is generated of the form <code>RUN_CHAIN$_</code><code><span class="codeinlineitalic">chainname</span></code><code><span class="codeinlineitalic">N</span></code>, where <code><span class="codeinlineitalic">chainname</span></code> is the first 8 characters of the chain name and <span class="italic">N</span> is an integer.If a list of start steps is given, only those steps are started when the chain begins running. Steps not in the list that would normally have started are skipped and paused (so that they or the steps after them do not run). If <code>start_steps</code> is <code>NULL</code>, then the chain starts normally&mdash;that is, it performs an initial evaluation to see which steps to start running).</p>
<p>If a list of initial step states is given, the newly created chain job sets every listed step to the state specified for that step before evaluating the chain rules to see which steps to start. (Steps in the list are not started.)</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8509"></a>Syntax</p>
<p>Runs a chain, with a list of start steps.</p>
<pre>
DBMS_SCHEDULER.RUN_CHAIN (
   chain_name                IN VARCHAR2,
   start_steps               IN VARCHAR2,
   job_name                  IN VARCHAR2 DEFAULT NULL);
</pre>
<p>Runs a chain, with a list of initial step states.</p>
<pre>
DBMS_SCHEDULER.RUN_CHAIN (
   chain_name               IN VARCHAR2, 
   step_state_list          IN SYS.SCHEDULER$_STEP_TYPE_LIST, 
   job_name                 IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8510"></a>Parameters</p>
<div id="ARPLS72394" class="tblformal">
<p class="titleintable"><a id="sthref8511"></a><a id="sthref8512"></a>Table 129-76 RUN_CHAIN Procedure Parameters</p>
<table class="cellalignment1229" title="RUN_CHAIN Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.RESET_JOB_ARGUMENT_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t95">Parameter</th>
<th class="cellalignment1227" id="r1c2-t95">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t95" headers="r1c1-t95">
<p><code>chain_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t95 r1c2-t95">
<p>The name of the chain to run</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t95" headers="r1c1-t95">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t95 r1c2-t95">
<p>The name of the job to create to run the chain</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t95" headers="r1c1-t95">
<p><code>start_steps</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t95 r1c2-t95">
<p>Comma-separated list of the steps to start when the chain starts running</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t95" headers="r1c1-t95">
<p><code>step_state_list</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t95 r1c2-t95">
<p>List of chain steps with an initial state (<code>SUCCEEDED</code> or <code>FAILED</code>) to set for each.</p>
<p>Set the attributes of <code>sys.scheduler$_step_type</code> as follows:</p>
<p><code>step_name</code> The name of the step <code>step_type</code> '<code>SUCCEEDED</code>' or '<code>FAILED</code> <code><span class="codeinlineitalic">error_number</span></code>'</p>
<p>where <span class="italic">error_number</span> is a positive or negative integer.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8513"></a>Usage Notes</p>
<p>Running a chain requires <code>CREATE</code> <code>JOB</code> if the job is being created in the user's schema, or <code>CREATE</code> <code>ANY</code> <code>JOB</code> otherwise. In addition, the owner of the job being created needs execute privileges on the chain (as the owner of the chain, or as a user with the <code>EXECUTE</code> privilege on the chain or the <code>EXECUTE</code> <code>ANY</code> <code>PROGRAM</code> system privilege).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8514"></a>Examples</p>
<p>The following example illustrates how to start a chain in the middle by providing the initial state of some chain steps.</p>
<pre>
declare
  initial_step_states sys.scheduler$_step_type_list;
begin
  initial_step_states := sys.scheduler$_step_type_list(
    sys.scheduler$_step_type('step1', 'SUCCEEDED'),
    sys.scheduler$_step_type('step2', 'FAILED 27486'),
    sys.scheduler$_step_type('step3', 'SUCCEEDED'),
    sys.scheduler$_step_type('step5', 'SUCCEEDED'));
  dbms_scheduler.run_chain('my_chain', initial_step_states);
end;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72395" class="refsect2"><a id="i1013568"></a>
<hr />
<h3 class="refsect2">RUN_JOB Procedure</h3>
<p>This procedure runs a job immediately.</p>
<p>If a job is enabled, the Scheduler runs it automatically. It is not necessary to call <code>RUN_JOB</code> to run a job according to its schedule. Use <code>RUN_JOB</code> to run a job outside of its normal schedule.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8515"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.RUN_JOB (
   job_name                IN VARCHAR2,
   use_current_session     IN BOOLEAN DEFAULT TRUE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8516"></a>Parameters</p>
<div id="ARPLS72396" class="tblformal">
<p class="titleintable"><a id="sthref8517"></a><a id="sthref8518"></a>Table 129-77 RUN_JOB Procedure Parameters</p>
<table class="cellalignment1229" title="RUN_JOB Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.RUN_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t96">Parameter</th>
<th class="cellalignment1227" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t96" headers="r1c1-t96">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t96 r1c2-t96">
<p>A job name or a comma-separate list of entries, where each is the name of an existing job, optionally preceded by a schema name and dot separator.</p>
<p>If you specify a multiple-destination job, the job runs on all destinations. In this case, the <code>use_current_session</code> argument must be <code>FALSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t96" headers="r1c1-t96">
<p><code>use_current_session</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t96 r1c2-t96">
<p>This specifies whether or not the job run should occur in the same session that the procedure was invoked from.</p>
<p>When <code>use_current_session</code> is set to <code>TRUE</code>:</p>
<ul>
<li>
<p>The job runs as the user who called <code>RUN_JOB</code>, or in the case of a local external job with a credential, the user named in the credential.</p>
</li>
<li>
<p>You can test a job and see any possible errors on the command line.</p>
</li>
<li>
<p><code>run_count</code>, <code>last_start_date</code>, <code>last_run_duration</code>, and <code>failure_count</code> are not updated.</p>
</li>
<li>
<p><code>RUN_JOB</code> can be run in parallel with a regularly scheduled job run.</p>
</li>
</ul>
<p>When <code>use_current_session</code> is set to <code>FALSE</code>:</p>
<ul>
<li>
<p>The job runs as the user who is the job owner.</p>
</li>
<li>
<p>You need to check the job log to find error information.</p>
</li>
<li>
<p><code>run_count</code>, <code>last_start_date</code>, <code>last_run_duration</code>, and <code>failure_count</code> are updated.</p>
</li>
<li>
<p><code>RUN_JOB</code> fails if a regularly scheduled job is running.</p>
</li>
</ul>
<p>For jobs that have a specified destination or destination group, or point to chains or programs with the detached attribute set to <code>TRUE</code>, <code>use_current_session</code> must be <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8519"></a>Usage Notes</p>
<p>The job does not have to be enabled. If the job is disabled, the following validity checks are performed before running it:</p>
<ul>
<li>
<p>The job points to a valid job class.The job owner has <code>EXECUTE</code> privileges on the job class.If a program or chain is referenced, the program/chain exists.If a program or chain is referenced, the job owner has privileges to execute the program/chain.All argument values have been set (or have defaults).The job owner has the <code>CREATE EXTERNAL JOB</code> privilege if this is an external job.</p>
</li>
</ul>
<p>A <code>TRUE</code> value for <code>use_current_session</code> is not permitted for the following types of jobs:</p>
<ul>
<li>
<p>Jobs that specify a destination or destination group in the <code>destination_name</code> attribute</p>
</li>
<li>
<p>Jobs that point to chains (chain jobs)</p>
</li>
<li>
<p>Jobs that make use of detached programs (detached jobs).</p>
</li>
</ul>
<p>When <code>use_current_session</code> is <code>TRUE</code>, the call to <code>RUN_JOB</code> blocks until the job completes. Any errors that occur during the execution of the job are returned as errors to the <code>RUN_JOB</code> procedure. When <code>use_current_session</code> is <code>FALSE</code>, <code>RUN_JOB</code> returns immediately and the job is picked up by the job coordinator and passed on to a job slave for execution. The Scheduler views and logs must be queried for the outcome of the job.</p>
<p>Multiple user sessions can use <code>RUN_JOB</code> in their sessions simultaneously when <code>use_current_session</code> is set to <code>TRUE</code>.</p>
<p><code>RUN_JOB</code> requires that you own the job or have <code>ALTER</code> privileges on that job. You can also run a job if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8520"></a>Example</p>
<p>The following is an example of using <code>RUN_JOB</code>.</p>
<pre>
BEGIN
  DBMS_SCHEDULER.RUN_JOB(
    JOB_NAME            =&gt; 'EODJOB, DSS.ETLJOB',
    USE_CURRENT_SESSION =&gt; FALSE);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72397" class="refsect2"><a id="BABEJADF"></a>
<hr />
<h3 class="refsect2">SET_AGENT_REGISTRATION_PASS Procedure</h3>
<p>This procedure sets the agent registration password for a database. A Scheduler agent must register with the database before the database can submit jobs to the agent. The agent must provide this password when registering.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8521"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.SET_AGENT_REGISTRATION_PASS (
   registration_password   IN VARCHAR2,
   expiration_date         IN TIMESTAMP WITH TIME ZONE DEFAULT NULL,
   max_uses                IN NUMBER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8522"></a>Parameters</p>
<div id="ARPLS72398" class="tblformal">
<p class="titleintable"><a id="sthref8523"></a><a id="sthref8524"></a>Table 129-78 SET_AGENT_REGISTRATION_PASS Procedure Parameters</p>
<table class="cellalignment1229" title="SET_AGENT_REGISTRATION_PASS Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_AGENT_REGISTRATION_PASS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t97">Parameter</th>
<th class="cellalignment1227" id="r1c2-t97">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t97" headers="r1c1-t97">
<p><code>registration_password</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t97 r1c2-t97">
<p>This is the password that remote agents must specify in order to successfully register with the database. If this is <code>NULL</code>, then no agents will be able to register with the database.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t97" headers="r1c1-t97">
<p><code>expiration_date</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t97 r1c2-t97">
<p>If this is set to a non-<code>NULL</code> value, then the <code>registration_password</code> is not valid after this date. After this date, no agents can register with the database. This cannot be set to a date in the past.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t97" headers="r1c1-t97">
<p><code>max_uses</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t97 r1c2-t97">
<p>This is the maximum number of successful registrations that can be performed with this password. After the number of successful registrations has been performed with this password, then no agents can register with the database. This cannot be set to 0 or a negative value. If this is set to <code>NULL</code>, then there will be no limit on the number of successful registrations.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8525"></a>Usage Notes</p>
<p>To prevent abuse, this password can be set to expire after a given date or a maximum number of successful registrations. This procedure will overwrite any password already set. This requires the <code>MANAGE SCHEDULER</code> system privilege.</p>
<p>By default, <code>max_uses</code> is set to <code>NULL</code>, which means that there is no limit to the number of successful registrations.</p>
<p>Oracle recommends that an agent registration password be reset after every agent registration or every known set of agent registrations. Furthermore, Oracle recommends that this password be set to <code>NULL</code> if no new agents are being registered.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72399" class="refsect2"><a id="CIHDAIIH"></a>
<hr />
<h3 class="refsect2">SET_ATTRIBUTE Procedure</h3>
<p>This procedure modifies an attribute of a Scheduler object. It is overloaded to accept values of various types. To set an attribute to <code>NULL</code>, use the <code>SET_ATTRIBUTE_NULL</code> procedure. The attributes that can be set depend on the object being altered. All object attributes can be changed, except the object name.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8526"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.SET_ATTRIBUTE (
   name           IN VARCHAR2,
   attribute      IN VARCHAR2,
   value          IN {BOOLEAN|DATE|TIMESTAMP|
                        TIMESTAMP WITH TIME ZONE|TIMESTAMP WITH LOCAL TIME ZONE|
                        INTERVAL DAY TO SECOND});

DBMS_SCHEDULER.SET_ATTRIBUTE (
   name           IN VARCHAR2,
   attribute      IN VARCHAR2,
   value          IN VARCHAR2,
   value2         IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8527"></a>Parameters</p>
<div id="ARPLS72400" class="tblformal">
<p class="titleintable"><a id="sthref8528"></a><a id="sthref8529"></a>Table 129-79 SET_ATTRIBUTE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_ATTRIBUTE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t98">Parameter</th>
<th class="cellalignment1227" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t98" headers="r1c1-t98">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t98 r1c2-t98">
<p>The name of the object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t98" headers="r1c1-t98">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t98 r1c2-t98">
<p>See <a href="#CIHCIDII">Table 129-81</a> through <a href="#BABHBHCC">Table 129-91</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t98" headers="r1c1-t98">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t98 r1c2-t98">
<p>The new value being set for the attribute. This cannot be <code>NULL</code>. To set an attribute value to <code>NULL</code>, use the <code>SET_ATTRIBUTE_NULL</code> procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t98" headers="r1c1-t98">
<p><code>value2</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t98 r1c2-t98">
<p>The <code>value2</code> argument is for an optional second value. Most attributes have only one value associated with them, but some can have two.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p><a href="#BABCJAGF">Table 129-80</a> is a directory of Scheduler object types and tables of attributes for the object types.</p>
<p>These object types can be viewed with Scheduler Data Dictionary Views, listed in <a class="olink ADMIN12073" href="../../server.112/e25494/schedadmin.htm#ADMIN12073"><span class="italic">Oracle Database Administrator's Guide</span></a> .</p>
<div id="ARPLS72401" class="tblformal">
<p class="titleintable"><a id="sthref8530"></a><a id="BABCJAGF"></a>Table 129-80 Attribute Tables for Scheduler Object Types</p>
<table class="cellalignment1229" title="Attribute Tables for Scheduler Object Types" summary="This table has two columns. The first lists the various types of Scheduler objects. The second is a cross-reference to the table that lists the settable attributes for the object type" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t99">Scheduler Object Type</th>
<th class="cellalignment1227" id="r1c2-t99">Table of Attributes</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t99" headers="r1c1-t99">
<p>Job</p>
</td>
<td class="cellalignment1228" headers="r2c1-t99 r1c2-t99">
<p><a href="#CIHCIDII">Table 129-81</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t99" headers="r1c1-t99">
<p>Program</p>
</td>
<td class="cellalignment1228" headers="r3c1-t99 r1c2-t99">
<p><a href="#CIHJBEGD">Table 129-83</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t99" headers="r1c1-t99">
<p>Schedule</p>
</td>
<td class="cellalignment1228" headers="r4c1-t99 r1c2-t99">
<p><a href="#CIHIGJFD">Table 129-84</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t99" headers="r1c1-t99">
<p>File Watcher</p>
</td>
<td class="cellalignment1228" headers="r5c1-t99 r1c2-t99">
<p><a href="#BABCFJHE">Table 129-85</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t99" headers="r1c1-t99">
<p>Job Class</p>
</td>
<td class="cellalignment1228" headers="r6c1-t99 r1c2-t99">
<p><a href="#CIHCIBAG">Table 129-86</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t99" headers="r1c1-t99">
<p>Window</p>
</td>
<td class="cellalignment1228" headers="r7c1-t99 r1c2-t99">
<p><a href="#CIHGCDBJ">Table 129-87</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t99" headers="r1c1-t99">
<p>Chain</p>
</td>
<td class="cellalignment1228" headers="r8c1-t99 r1c2-t99">
<p><a href="#CHDCIBIC">Table 129-88</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t99" headers="r1c1-t99">
<p>Database Destination</p>
</td>
<td class="cellalignment1228" headers="r9c1-t99 r1c2-t99">
<p><a href="#BABFDIGF">Table 129-89</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t99" headers="r1c1-t99">
<p>External Destination</p>
</td>
<td class="cellalignment1228" headers="r10c1-t99 r1c2-t99">
<p><a href="#BABFJGHG">Table 129-90</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t99" headers="r1c1-t99">
<p>Group</p>
</td>
<td class="cellalignment1228" headers="r11c1-t99 r1c2-t99">
<p><a href="#BABHBHCC">Table 129-91</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t99" headers="r1c1-t99">
<p>Credential</p>
</td>
<td class="cellalignment1228" headers="r12c1-t99 r1c2-t99">
<p><a href="#CHDGCFBH">Table 129-92</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8531"></a>Usage Notes</p>
<p>If an object is altered and it was in the enabled state, the Scheduler first disables it, then makes the change and reenables it. If any errors are encountered during the enable process, the object is not reenabled and an error is generated.</p>
<p>If an object is altered and it was in the disabled state, it remains disabled after it is altered.</p>
<p>To run <code>SET_ATTRIBUTE</code> for a window, a group of type <code>WINDOW</code>, or job class, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege. Otherwise, you must be the owner of the object being altered or have <code>ALTER</code> privileges on that object or have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p class="subhead2"><a id="ARPLS72402"></a>Job</p>
<p>If there is a running instance of the job when the <code>SET_ATTRIBUTE</code> call is made, it is not affected by the call. The change is only affects future runs of the job.</p>
<p>If any of the schedule attributes of a job are altered while the job is running, the time of the next job run is scheduled using the new schedule attributes. Schedule attributes of a job include <code>schedule_name</code>, <code>start_date</code>, <code>end_date</code>, and <code>repeat_interval</code>.</p>
<p>If any of the program attributes of a job are altered while the job is running, the new program attributes take effect the next time the job runs. Program attributes of a job include <code>program_name</code>, <code>job_action</code>, <code>job_type</code>, and <code>number_of_arguments</code>.</p>
<p>If any job argument values are altered while the job is running, the new values take effect the next time the job runs.</p>
<p>Granting the <code>ALTER</code> privilege on a job lets a user alter all attributes of that job except its program attributes (<code>program_name</code>, <code>job_type</code>, <code>job_action</code>, <code>program_action</code>, and <code>number_of_arguments</code>) and does not allow a user to use a PL/SQL expression to specify the schedule for a job.</p>
<p>Oracle recommends that you not alter a job that was automatically created for you by the database. Jobs that were created by the database have the column <code>SYSTEM</code> set to <code>TRUE</code> in job views.</p>
<p class="subhead2"><a id="ARPLS72403"></a>Program</p>
<p>If any currently running jobs use the program that was altered, they continue to run with the program definition prior to the alter. The job runs with the new program definition the next time the job executes.</p>
<p class="subhead2"><a id="ARPLS72404"></a>Schedule</p>
<p>If a schedule is altered, the change does not affect running jobs and open windows that use this schedule. The change only goes into effect the next time the jobs runs or the window opens.</p>
<p class="subhead2"><a id="ARPLS72405"></a>File Watcher</p>
<p>If a file watcher is altered, any currently running event-based jobs started by the file arrival event are not affected. On the local system, the new file watcher attributes take effect the next time that the file watcher checks for the arrival of the file (every ten minutes by default). On remote systems, there may be an additional delay before the new file watcher attributes take effect.</p>
<p class="subhead2"><a id="ARPLS72406"></a>Job Class</p>
<p>With the exception of the default job class, all job classes can be altered. To alter a job class, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p>When a job class is altered, running jobs that belong to the class are not affected. The change only takes effect for jobs that have not started running yet.</p>
<p class="subhead2"><a id="ARPLS72407"></a>Window</p>
<p>When a window is altered, it does not affect an active window. The changes only take effect the next time the window opens.</p>
<p>If there is no current resource plan, when a window with a designated resource plan opens, the Resource Manager activates with that plan.</p>
<p class="subhead2"><a id="ARPLS72408"></a>Job Attribute Values</p>
<p><a href="#CIHCIDII">Table 129-81</a> lists attribute values for jobs.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_JOB</code> procedure and the <code>CREATE_JOBS</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72409" class="tblformal">
<p class="titleintable"><a id="sthref8532"></a><a id="CIHCIDII"></a>Table 129-81 Job Attribute Values</p>
<table class="cellalignment1229" title="Job Attribute Values" summary="This table describes Program Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t101">Name</th>
<th class="cellalignment1227" id="r1c2-t101">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t101" headers="r1c1-t101">
<p><code>allow_runs_in_restricted_mode</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t101 r1c2-t101">
<p>If <code>TRUE</code>, the job is permitted to run when the database is in restricted mode, provided that the job owner is permitted to log in during this mode. <code>FALSE</code> by default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t101" headers="r1c1-t101">
<p><code>auto_drop</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t101 r1c2-t101">
<p>This attribute, if <code>TRUE</code>, causes a job to be automatically dropped after it completes or is automatically disabled. A job is considered completed if:</p>
<ul>
<li>
<p>Its end date (or the end date of the schedule) has passed.</p>
</li>
<li>
<p>It has run <code>max_runs</code> number of times. <code>max_runs</code> must be set with <code>SET_ATTRIBUTE</code>.</p>
</li>
<li>
<p>It is not a repeating job and has run once.</p>
</li>
</ul>
<p>A job is automatically disabled when it has failed <code>max_failures</code> times. <code>max_failures</code> is also set with <code>SET_ATTRIBUTE</code>.</p>
<p>If this attribute is set to <code>FALSE</code>, the jobs are not dropped and their metadata is kept until the job is explicitly dropped with the <code>DROP_JOB</code> procedure.</p>
<p>By default, jobs are created with <code>auto_drop</code> set to <code>TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t101" headers="r1c1-t101">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t101 r1c2-t101">
<p>An optional comment.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t101" headers="r1c1-t101">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t101 r1c2-t101">
<p>This attribute specifies the name of the Scheduler credential object (credential) to use for a remote database job, a remote external job, a local external job, or an event-based job that processes a file arrival event. For local external jobs only, if this attribute is <code>NULL</code> (the default), then a preferred (default) credential is selected. See <a class="olink ADMIN13360" href="../../server.112/e25494/schedover.htm#ADMIN13360"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about preferred credentials for local external jobs.</p>
<p>See also: <a href="#BABCAEAC">"CREATE_CREDENTIAL Procedure"</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t101" headers="r1c1-t101">
<p><code>database_role</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t101 r1c2-t101">
<p><a id="sthref8533"></a>This attribute applies when the database participates in an Oracle Data Guard environment. If this attribute is set to '<code>PRIMARY</code>', the job runs only when the database is in the role of the primary database. If set to '<code>LOGICAL</code> <code>STANDBY</code>', the job runs only when the database is in the role of a logical standby. The default is '<code>PRIMARY</code>' when the database is the primary database, and '<code>LOGICAL</code> <code>STANDBY</code>' when the database is a logical standby.</p>
<p>Note: If you want a job to run for all database roles on a particular host, you must create two copies of the job on that host: one with a <code>database_role</code> of '<code>PRIMARY</code>', and the other with a <code>database_role</code> of '<code>LOGICAL</code> <code>STANDBY</code>'.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t101" headers="r1c1-t101">
<p><code>destination</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t101 r1c2-t101">
<p><span class="bold">*** Deprecated in Oracle Database 11</span><span class="bolditalic">g</span> <span class="bold">Release 2 (11.2). Use</span> <code><span class="codeinlinebold">destination_name</span></code> <span class="bold">instead</span>.</p>
<p>This attribute specifies a host on which to run a remote external job. It must be set to the host name or IP address of the destination host. It can optionally be followed by a port number, in the following format:</p>
<pre>
<span class="italic">hostname</span>:<span class="italic">port</span>
</pre>
<p>This attribute is set to <code>NULL</code> by default.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t101" headers="r1c1-t101">
<p><code>destination_name</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t101 r1c2-t101">
<p>The database destination or external destination for the job. Use for remote database jobs and remote external jobs only. For jobs running on the local database or for local external jobs (executables), must be <code>NULL</code>.</p>
<p>See <a href="#BABCHEAD">Table 129-27</a> for details about this attribute.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t101" headers="r1c1-t101">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t101 r1c2-t101">
<p>Specifies the date and time after which the job expires and is no longer run. After the <code>end_date</code>, if <code>auto_drop</code> is <code>TRUE</code>, the job is dropped. If <code>auto_drop</code> is <code>FALSE</code>, the job is disabled and the <code>STATE</code> of the job is set to <code>COMPLETED</code>.</p>
<p>If no value for <code>end_date</code> is specified, the job repeats forever unless <code>max_runs</code> or <code>max_failures</code> is set, in which case the job stops when either value is reached.</p>
<p>The value for <code>end_date</code> must be after the value for <code>start_date</code>. If it is not, an error is generated when the job is enabled.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t101" headers="r1c1-t101">
<p><code>event_spec</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t101 r1c2-t101">
<p>This attribute takes two values: the <code>value</code> argument specifies the event condition and the <code>value2</code> argument specifies the queue specification. For more details, see the descriptions for the <code>event_condition</code> and <code>queue_spec</code> arguments in the <a href="#i1000363">"CREATE_JOB Procedure"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t101" headers="r1c1-t101">
<p><code>follow_default_timezone</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t101 r1c2-t101">
<p>If <code>TRUE</code> and if the job <code>start_date</code> is null, then when the <code>default_timezone</code> scheduler attribute is changed, the Scheduler recomputes the next run date and time for this job so that it is in accordance with the new time zone.</p>
<p>For example, if the job was set to run at 02:00 in the previous time zone, it will run at 02:00 in the new time zone.</p>
<p>If the job <code>start_date</code> is not null, then the time zone for the run date and time for the job is always specified by the time zone of the <code>start_date</code>.</p>
<p>If <code>FALSE</code>, the next start date and time for the job is not recomputed when the <code>default_timezone</code> scheduler attribute is changed. In this case, if the old time zone is three hours earlier than the new time zone, then a job scheduled to run at 02:00 in the old time zone runs at 05:00 in the new time zone.</p>
<p>Summer and winter transitions do not change the default time zone name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t101" headers="r1c1-t101">
<p><code>instance_id</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t101 r1c2-t101">
<p>Valid only in an Oracle Real Application Clusters environment. Indicates the instance on which the job is to be run.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t101" headers="r1c1-t101">
<p><code>instance_stickiness</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t101 r1c2-t101">
<p>This attribute should only be used for a database running in an Oracle Real Application Clusters (Oracle RAC) environment. By default, it is set to <code>TRUE</code>. If you set <code>instance_stickiness</code> to <code>TRUE</code>, jobs start running on the instance with the lightest load and the Scheduler thereafter attempts to run on the instance that it last ran on. If that instance is either down or so overloaded that it does not start new jobs for a significant period of time, another instance runs the job. If the interval between runs is large, <code>instance_stickiness</code> is ignored and the job is handled as if it were a non-sticky job.</p>
<p>If <code>instance_stickiness</code> is set to <code>FALSE</code>, each instance of the job runs on the first instance available.</p>
<p>For environments other than Oracle RAC, this attribute is not useful because there is only one instance.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t101" headers="r1c1-t101">
<p><code>job_action</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t101 r1c2-t101">
<p>The action that the job performs, depending on the <code>job_type</code> attribute. For example, if <code>job_type</code> is '<code>STORED_PROCEDURE</code>', <code>job_action</code> contains the name of the stored procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t101" headers="r1c1-t101">
<p><code>job_class</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t101 r1c2-t101">
<p>The class this job is associated with.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t101" headers="r1c1-t101">
<p><code>job_priority</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t101 r1c2-t101">
<p>This attribute specifies the priority of this job relative to other jobs in the same class as this job. If multiple jobs within a class are scheduled to be executed at the same time, the job priority determines the order in which jobs from that class are picked up for execution by the job coordinator. It can be a value from 1 through 5, with 1 being the first to be picked up for job execution.</p>
<p>If no job priority is specified when creating a job, the default priority of 3 is assigned to it.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t101" headers="r1c1-t101">
<p><code>job_type</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t101 r1c2-t101">
<p>The type of this job.Valid values are: '<code>PLSQL_BLOCK</code>', '<code>STORED_PROCEDURE</code>', '<code>EXECUTABLE</code>', and '<code>CHAIN</code>'.</p>
<p>If this is set, <code>program_name</code> must be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t101" headers="r1c1-t101">
<p><code>job_weight</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t101 r1c2-t101">
<p>*** Deprecated in Oracle Database 11<span class="italic">g</span> Release 2 (11.2). Do not change the value of this attribute from the default, which is 1.</p>
<p>Weight of the job for parallel execution.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t101" headers="r1c1-t101">
<p><code>logging_level</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t101 r1c2-t101">
<p>This attribute specifies how much information is logged. The possible options are:</p>
<p><code>DBMS_SCHEDULER.LOGGING_OFF</code></p>
<p>(The default) No logging is performed for this job. However, the logging level of the job class takes precedence and job logging may occur.</p>
<p><code>DBMS_SCHEDULER.LOGGING_FAILED_RUNS</code></p>
<p>The Scheduler logs only jobs that failed, with the reason for failure. If the job class has a higher logging level, then the higher logging level takes precedence.</p>
<p><code>DBMS_SCHEDULER.LOGGING_RUNS</code></p>
<p>The Scheduler writes detailed information to the job log for all runs of each job in this class. If the job class has a higher logging level, then the higher logging level takes precedence.</p>
<p><code>DBMS_SCHEDULER.LOGGING_FULL</code></p>
<p>In addition to recording every run of a job, the Scheduler records all operations performed on the job, including create, enable, disable, alter (with <code>SET_ATTRIBUTE</code>), stop, and so on.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t101" headers="r1c1-t101">
<p><code>max_failures</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t101 r1c2-t101">
<p>This attribute specifies the number of times a job can fail on consecutive scheduled runs before it is automatically disabled. Once a job is disabled, it is no longer executed and its <code>STATE</code> is set to <code>BROKEN</code> in the <code>*_SCHEDULER_JOB</code> views.</p>
<p><code>max_failures</code> can be an integer between 1 to 1,000,000. By default, it is set to <code>NULL</code>, which indicates that new instances of the job are started regardless of how many previous instances have failed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t101" headers="r1c1-t101">
<p><code>max_run_duration</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t101 r1c2-t101">
<p>This attribute specifies the maximum amount of time that the job should be allowed to run. Its data type is <code>INTERVAL</code> <code>DAY</code> <code>TO</code> <code>SECOND</code>. If this attribute is set to a non-zero and non-<code>NULL</code> value, and job duration exceeds this value, the Scheduler raises an event of type <code>JOB_OVER_MAX_DUR</code>. It is then up to your event handler to decide whether or not to allow the job to continue.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t101" headers="r1c1-t101">
<p><code>max_runs</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t101 r1c2-t101">
<p>This attribute specifies the maximum number of consecutive scheduled runs of the job. Once <code>max_runs</code> is reached, the job is disabled and its state is changed to <code>COMPLETED</code>.</p>
<p><code>max_runs</code> can be an integer between 1 and 1,000,000. By default, it is set to <code>NULL</code>, which means that it repeats forever or until <code>end_date</code> or <code>max_failures</code> is reached.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t101" headers="r1c1-t101">
<p><code>number_of_arguments</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t101 r1c2-t101">
<p>The number of arguments if the program is inlined. If this is set, <code>program_name</code> should be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t101" headers="r1c1-t101">
<p><code>parallel_instances</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t101 r1c2-t101">
<p>This is a boolean attribute that can be set only for event-based jobs.</p>
<p>If <code>FALSE</code> (the default), then if an event is raised and the event-based job that processes that event is already running, the new event is ignored.</p>
<p>If <code>TRUE</code>, then an instance of the job is started for every instance of the event, and each job instance is a lightweight job so multiple instances of the same event-based job can run in parallel. Each lightweight job takes its attributes (such as action, maximum run duration, and so on) from the definition of the event-based job (its <span class="italic">parent job</span>). After the lightweight job completes, it is dropped. There is no explicit limit to the number of lightweight jobs that can run simultaneously to process multiple instances of the event. However, limitations may be imposed by available system resources.</p>
<p>The lightweight jobs are not visible in any of the <code>*_SCHEDULER_JOBS</code> views. However, they are visible in the <code>*_SCHEDULER_RUNNING_JOBS</code> views. The name of each lightweight job is the same as that of the parent job, and a subname is automatically generated to distinguish each lightweight job from its parent and from its siblings.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t101" headers="r1c1-t101">
<p><code>program_name</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t101 r1c2-t101">
<p>The name of a program object to use with this job. If this is set, <code>job_action</code>, <code>job_type</code> and <code>number_of_arguments</code> should be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t101" headers="r1c1-t101">
<p><code>raise_events</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t101 r1c2-t101">
<p>This attribute tells the Scheduler at what stages of the job execution to raise events. It is a bit vector in which zero or more of the following bits can be set. Each bit has a package constant corresponding to it.</p>
<ul>
<li>
<p><code>job_started CONSTANT PLS_INTEGER := 1</code></p>
</li>
<li>
<p><code>job_succeeded CONSTANT PLS_INTEGER := 2</code></p>
</li>
<li>
<p><code>job_failed CONSTANT PLS_INTEGER :=4</code></p>
</li>
<li>
<p><code>job_broken CONSTANT PLS_INTEGER :=8</code></p>
</li>
<li>
<p><code>job_completed CONSTANT PLS_INTEGER :=16</code></p>
</li>
<li>
<p><code>job_stopped CONSTANT PLS_INTEGER :=32</code></p>
</li>
<li>
<p><code>job_sch_lim_reached CONSTANT PLS_INTEGER :=64</code></p>
</li>
<li>
<p><code>job_disabled CONSTANT PLS_INTEGER :=128</code></p>
</li>
<li>
<p><code>job_chain_stalled CONSTANT PLS_INTEGER :=256</code></p>
</li>
<li>
<p><code>job_all_events CONSTANT PLS_INTEGER := 511</code></p>
</li>
<li>
<p><code>job_run_completed CONSTANT PLS_INTEGER := job_succeeded + job_failed + job_stopped</code></p>
</li>
</ul>
<p><a href="#BABCGGDC">Table 129-82</a> describes these event types in detail.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t101" headers="r1c1-t101">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t101 r1c2-t101">
<p>Either a PL/SQL function returning the next date and time on which to run, or calendaring syntax expression. If this is set, <code>schedule_name</code> should be <code>NULL</code>. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t101" headers="r1c1-t101">
<p><code>restartable</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t101 r1c2-t101">
<p>This attribute specifies whether or not a job can be restarted in case of failure. By default, jobs are not restartable and this attribute is set to <code>FALSE</code>. Setting this to <code>TRUE</code> means that if a job fails while running, it is restarted from the beginning point of the job.</p>
<p>In the case of a chain job, if this attribute is <code>TRUE</code>, the chain is restarted from the beginning after an application failure. If this attribute is <code>FALSE</code>, or if there has been a database failure, the chain is restarted at the last running step. The <code>restart_on_recovery</code> attribute of that step then determines if the step is restarted or marked as stopped. (If marked as stopped, the chain evaluates rules and continues.)</p>
<p>Note that setting this attribute to <code>TRUE</code> might lead to data inconsistencies in some situations, for example, if data is committed within a job.</p>
<p>Retries on errors are not counted as regular runs. The run count or failure count is not incremented until the job succeeds or has failed all its six retries.</p>
<p>The restartable attribute is used by the Scheduler to determine whether to retry the job not only on regular application errors, but after a database malfunction as well. The Scheduler retries the job a maximum of six times. The first time, it waits for one second and multiplies this wait time with a factor of 10 each time thereafter.</p>
<p>Both the run count and failure count are incremented by 1 if the job has failed all its six retries. If the job immediately succeeds, or it succeeds on one of its retries, run count is incremented by 1.</p>
<p>The Scheduler stops retrying a job when:</p>
<ul>
<li>
<p>One of the retries succeeds.</p>
</li>
<li>
<p>All of its six retries have failed.</p>
</li>
<li>
<p>The next retry would occur after the next regularly scheduled run of the job.</p>
</li>
</ul>
<p>The Scheduler no longer retries the job if the next scheduled retry is past the next regularly scheduled run for repeating jobs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t101" headers="r1c1-t101">
<p><code>schedule_limit</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t101 r1c2-t101">
<p>In heavily loaded systems, jobs are not always started at their scheduled time. This attribute enables you to have the Scheduler not start a job at all if the delay in starting the job is larger than the interval specified. It can be a value of 1 minute to 99 days. For example, if a job was supposed to start at noon and the schedule limit is set to 60 minutes, the job will not be run if it has not started to run by 1:00 p.m.</p>
<p>If <code>schedule_limit</code> is not specified, the job is executed at some later date as soon as there are resources available to run it. By default, this attribute is set to null, which indicates that the job can be run at any time after its scheduled time. A scheduled job run that is skipped because of this attribute does not count against the number of runs and failures of the job. An entry in the job log reflects the skipped run.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t101" headers="r1c1-t101">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r30c1-t101 r1c2-t101">
<p>The name of a schedule, window, or group of type <code>WINDOW</code> to use as the schedule for this job. If this is set, <code>end_date</code>, <code>start_date</code> and <code>repeat_interval</code> should all be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t101" headers="r1c1-t101">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r31c1-t101 r1c2-t101">
<p>The original date and time on which this job started or is scheduled to start. If this is set, <code>schedule_name</code> should be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t101" headers="r1c1-t101">
<p><code>stop_on_window_close</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t101 r1c2-t101">
<p>This attribute only applies if the schedule of a job is a window or a window group. Setting this attribute to <code>TRUE</code> implies that the job should stop once the associated window is closed. The job is stopped using the <code>stop_job</code> procedure with force set to <code>FALSE</code>.</p>
<p>By default, <code>stop_on_window_close</code> is set to <code>FALSE</code>. Therefore, if you do not set this attribute, the job continues after the window closes.</p>
<p>Note that, although the job is allowed to continue, its resource allocation will probably change because closing a window generally also implies a change in resource plans.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The following event types are valid values for the <code>raise_events</code> attribute in <a href="#CIHCIDII">Table 129-81, "Job Attribute Values"</a>.</p>
<div id="ARPLS72410" class="tblformal">
<p class="titleintable"><a id="sthref8534"></a><a id="BABCGGDC"></a>Table 129-82 Event Types Raised by the Scheduler</p>
<table class="cellalignment1229" title="Event Types Raised by the Scheduler" summary="This table describes the event types that are bit flags in the raise_events attribute" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t102">Event Type</th>
<th class="cellalignment1227" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t102" headers="r1c1-t102">
<p><code>job_all_events</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t102 r1c2-t102">
<p>Not an event, but a constant that provides an easy way for you to enable all events</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t102" headers="r1c1-t102">
<p><code>job_broken</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t102 r1c2-t102">
<p>The job has been disabled and has changed to the <code>BROKEN</code> state because it exceeded the number of failures defined by the <code>max_failures</code> job attribute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t102" headers="r1c1-t102">
<p><code>job_chain_stalled</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t102 r1c2-t102">
<p>A job running a chain is in the <code>CHAIN_STALLED</code> state. A running chain becomes stalled if there are no steps running or scheduled to run and the chain <code>evaluation_interval</code> is set to <code>NULL</code>. No progress is made in the chain unless there is manual intervention.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t102" headers="r1c1-t102">
<p><code>job_completed</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t102 r1c2-t102">
<p>The job completed because it reached its <code>max_runs</code> or <code>end_date</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t102" headers="r1c1-t102">
<p><code>job_disabled</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t102 r1c2-t102">
<p>The job was disabled by the Scheduler or by a call to <code>SET_ATTRIBUTE</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t102" headers="r1c1-t102">
<p><code>job_failed</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t102 r1c2-t102">
<p>The job failed, either due to an error or an abnormal termination.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t102" headers="r1c1-t102">
<p><code>job_over_max_dur</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t102 r1c2-t102">
<p>The job exceeded the maximum run duration specified by its <code>max_run_duration</code> attribute. (Note: you do not need to enable this event with the <code>raise_events</code> job attribute; it is always enabled.)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t102" headers="r1c1-t102">
<p><code>job_run_completed</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t102 r1c2-t102">
<p>A job run either failed, succeeded, or was stopped</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t102" headers="r1c1-t102">
<p><code>job_sch_lim_reached</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t102 r1c2-t102">
<p>The schedule limit of the job was reached. The job was not started because the delay in starting the job exceeded the value of the <code>schedule_limit</code> job attribute.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t102" headers="r1c1-t102">
<p><code>job_started</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t102 r1c2-t102">
<p>The job started</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t102" headers="r1c1-t102">
<p><code>job_stopped</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t102 r1c2-t102">
<p>The job was stopped by a call to <code>STOP_JOB</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t102" headers="r1c1-t102">
<p><code>job_succeeded</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t102 r1c2-t102">
<p>The job completed successfully</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72411"></a>Program Attribute Values</p>
<p><a href="#CIHJBEGD">Table 129-83</a> lists program attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_PROGRAM</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72412" class="tblformal">
<p class="titleintable"><a id="sthref8535"></a><a id="CIHJBEGD"></a>Table 129-83 Program Attribute Values</p>
<table class="cellalignment1229" title="Program Attribute Values" summary="This table describes Job Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t104">Name</th>
<th class="cellalignment1227" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t104" headers="r1c1-t104">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t104 r1c2-t104">
<p>An optional comment. This can describe what the program does or give usage details.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t104" headers="r1c1-t104">
<p><code>detached</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t104 r1c2-t104">
<p>If <code>TRUE</code>, the program is a detached program. See <a class="olink ADMIN13367" href="../../server.112/e25494/schedover.htm#ADMIN13367"><span class="italic">Oracle Database Administrator's Guide</span></a> for information about detached jobs and detached programs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t104" headers="r1c1-t104">
<p><code>number_of_arguments</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t104 r1c2-t104">
<p>The number of arguments required by the stored procedure or other executable that the program invokes</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t104" headers="r1c1-t104">
<p><code>program_action</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t104 r1c2-t104">
<p>The action that the program performs, indicated by the <code>program_type</code> attribute. For example, if <code>program_type</code> is '<code>STORED_PROCEDURE</code>', <code>program_action</code> contains the name of the stored procedure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t104" headers="r1c1-t104">
<p><code>program_type</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t104 r1c2-t104">
<p>The type of program. This must be one of these supported program types: '<code>PLSQL_BLOCK</code>', '<code>STORED_PROCEDURE</code>', and '<code>EXECUTABLE</code>'.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72413"></a>Schedule Attribute Values</p>
<p><a href="#CIHIGJFD">Table 129-84</a> lists schedule attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_SCHEDULE</code> and <code>CREATE_CALENDAR_SCHEDULE</code> procedures for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72414" class="tblformal">
<p class="titleintable"><a id="sthref8536"></a><a id="CIHIGJFD"></a>Table 129-84 Schedule Attribute Values</p>
<table class="cellalignment1229" title="Schedule Attribute Values" summary="This table describes Schedule Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t106">Name</th>
<th class="cellalignment1227" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t106" headers="r1c1-t106">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t106 r1c2-t106">
<p>An optional comment.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t106" headers="r1c1-t106">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t106 r1c2-t106">
<p>The cutoff date and time after which the schedule does not specify any dates.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t106" headers="r1c1-t106">
<p><code>event_spec</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t106 r1c2-t106">
<p>This attribute takes two values: the <code>value</code> argument should contain the event condition and the <code>value2</code> argument should contain the queue specification. For more details, see the descriptions for the <code>event_condition</code> and <code>queue_spec</code> arguments to the <a href="#i1000363">"CREATE_JOB Procedure"</a>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t106" headers="r1c1-t106">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t106 r1c2-t106">
<p>An attribute specifying how often the schedule should repeat, using the calendaring syntax. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t106" headers="r1c1-t106">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t106 r1c2-t106">
<p>The start or reference date and time used by the calendaring syntax.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72415"></a>File Watcher Attribute Values</p>
<p><a href="#BABCFJHE">Table 129-85</a> lists file watcher attribute values.</p>
<div id="ARPLS72416" class="tblformal">
<p class="titleintable"><a id="sthref8537"></a><a id="BABCFJHE"></a>Table 129-85 File Watcher Attribute Values</p>
<table class="cellalignment1229" title="File Watcher Attribute Values" summary="CREATE_EVENT_SCHEDULER Parameters" dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t107">Parameter</th>
<th class="cellalignment1227" id="r1c2-t107">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t107" headers="r1c1-t107">
<p><code>destination</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t107 r1c2-t107">
<p>Remote host name or IP address where the file is expected to arrive. If <code>NULL</code>, destination is the local host.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t107" headers="r1c1-t107">
<p><code>directory_path</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t107 r1c2-t107">
<p>Directory in which the file is expected to arrive. The single wildcard '?' at the beginning of the path denotes the Oracle home path. For example, '?/rdbms/log' denotes the rdbms/log subdirectory of the Oracle home directory.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t107" headers="r1c1-t107">
<p><code>file_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t107 r1c2-t107">
<p>Name of the file being looked for. Two wildcards are permitted anywhere in the file name: '?' denotes any single character, and '*' denotes zero or more characters. This attribute cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t107" headers="r1c1-t107">
<p><code>credential_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t107 r1c2-t107">
<p>Name of a valid Scheduler credential object. The file watcher uses the credential to authenticate itself with the host operating system to access the watched-for file. The file watcher owner must have the <code>EXECUTE</code> privilege on the credential. Cannot be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t107" headers="r1c1-t107">
<p><code>min_file_size</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t107 r1c2-t107">
<p>Minimum file size in bytes before the file watcher considers the file found. Default is 0.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t107" headers="r1c1-t107">
<p><code>steady_state_duration</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t107 r1c2-t107">
<p>Minimum time interval that the file must remain unchanged before the file watcher considers the file found. If <code>NULL</code>, an internal value is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t107" headers="r1c1-t107">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t107 r1c2-t107">
<p>Optional comment.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72417"></a>Job Class Attribute Values</p>
<p><a href="#CIHCIBAG">Table 129-86</a> lists job class attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_JOB_CLASS</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72418" class="tblformal">
<p class="titleintable"><a id="sthref8538"></a><a id="CIHCIBAG"></a>Table 129-86 Job Class Attribute Values</p>
<table class="cellalignment1229" title="Job Class Attribute Values" summary="This table describes Job Class Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t109">Name</th>
<th class="cellalignment1227" id="r1c2-t109">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t109" headers="r1c1-t109">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t109 r1c2-t109">
<p>An optional comment about the class.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t109" headers="r1c1-t109">
<p><code>log_history</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t109 r1c2-t109">
<p>This attribute controls the number of days that job log entries for jobs in this class are retained. It helps prevent the job log from growing indiscriminately.</p>
<p>The range of valid values is 0 through 1000000. If set to 0, no history is kept. If <code>NULL</code>, retention days are set by the <code>log_history</code> Scheduler attribute (set with <code>SET_SCHEDULER_ATTRIBUTE</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t109" headers="r1c1-t109">
<p><code>logging_level</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t109 r1c2-t109">
<p>This attribute specifies how much information is logged. The valid values are:</p>
<ul>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_OFF</code></p>
<p>No logging is performed for any jobs in this class.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_FAILED_RUNS</code></p>
<p>The Scheduler logs only jobs in the class that failed, with the reason for failure.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_RUNS</code></p>
<p>The Scheduler writes detailed information to the job log for all runs of each job in this class. This is the default.</p>
</li>
<li>
<p><code>DBMS_SCHEDULER.LOGGING_FULL</code></p>
<p>The Scheduler records all operations performed on all jobs in this class, in addition to recording every run of a job. Every time a job is created, enabled, disabled, altered (with <code>SET_ATTRIBUTE</code>), stopped, and so on, an entry is recorded in the log.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t109" headers="r1c1-t109">
<p><code>resource_consumer_group</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t109 r1c2-t109">
<p>The resource consumer group that a class is associated with. All jobs in the class run under this resource consumer group. See <a class="olink ADMIN11844" href="../../server.112/e25494/dbrm.htm#ADMIN11844"><span class="italic">Oracle Database Administrator's Guide</span></a> for a description of resource consumer groups and the Database Resource Manager.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t109" headers="r1c1-t109">
<p><code>service</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t109 r1c2-t109">
<p>The database service that the jobs in the job class have affinity to. If both the <code>resource_consumer_group</code> and <code>service</code> attributes are set for a job class, and if the service is mapped to a resource consumer group, the <code>resource_consumer_group</code> attribute takes precedence.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72419"></a>Window Attribute Values</p>
<p><a href="#CIHGCDBJ">Table 129-87</a> lists window attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_WINDOW</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72420" class="tblformal">
<p class="titleintable"><a id="sthref8539"></a><a id="CIHGCDBJ"></a>Table 129-87 Window Attribute Values</p>
<table class="cellalignment1229" title="Window Attribute Values" summary="This table describes Window Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t111">Name</th>
<th class="cellalignment1227" id="r1c2-t111">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t111" headers="r1c1-t111">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t111 r1c2-t111">
<p>An optional comment about the window.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t111" headers="r1c1-t111">
<p><code>duration</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t111 r1c2-t111">
<p>The duration of the window.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t111" headers="r1c1-t111">
<p><code>end_date</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t111 r1c2-t111">
<p>The date after which the window no longer opens. If this is set, <code>schedule_name</code> must be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t111" headers="r1c1-t111">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t111 r1c2-t111">
<p>An attribute specifying how often the schedule should repeat, using the calendaring syntax. PL/SQL date functions are not allowed. If this is set, <code>schedule_name</code> must be <code>NULL</code>. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for more information.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t111" headers="r1c1-t111">
<p><code>resource_plan</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t111 r1c2-t111">
<p>The resource plan to be associated with a window. When the window opens, the system switches to this resource plan. When the window closes, the original resource plan is restored. If a resource plan has been made active with the <code>force</code> option, no resource plan switch occurs.</p>
<p>Only one resource plan can be associated with a window. It may be <code>NULL</code> or the empty string (""). When it is <code>NULL</code>, the resource plan that is in effect when the window opens stays in effect for the duration of the window. When it is the empty string, the resource manager is disabled for the duration of the window.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t111" headers="r1c1-t111">
<p><code>schedule_name</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t111 r1c2-t111">
<p>The name of a schedule to use with this window. If this is set, <code>start_date</code>, <code>end_date</code>, and <code>repeat_interval</code> must all be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t111" headers="r1c1-t111">
<p><code>start_date</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t111 r1c2-t111">
<p>The next date and time on which this window is scheduled to open. If this is set, <code>schedule_name</code> must be <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t111" headers="r1c1-t111">
<p><code>window_priority</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t111 r1c2-t111">
<p>The priority of the window. Must be either '<code>LOW</code>' (default) or '<code>HIGH</code>'.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72423"></a>Chain Attribute Values</p>
<p><a href="#CHDCIBIC">Table 129-88</a> lists chain attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_CHAIN</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72424" class="tblformal">
<p class="titleintable"><a id="sthref8540"></a><a id="CHDCIBIC"></a>Table 129-88 Chain Attribute Values</p>
<table class="cellalignment1229" title="Chain Attribute Values" summary="This table describes Schedule Attribute Values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t113">Name</th>
<th class="cellalignment1227" id="r1c2-t113">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t113" headers="r1c1-t113">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t113 r1c2-t113">
<p>An optional comment describing the purpose of the chain.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t113" headers="r1c1-t113">
<p><code>evaluation_interval</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t113 r1c2-t113">
<p>If not <code>NULL</code>, provides an additional evaluation of the chain at this interval, as well as at normal evaluation times (when the job starts, when a step completes, or when an event that is associated with an event step arrives)</p>
<p>This attribute should only to be used when chain rules use SQL syntax and the rule conditions contain elements that are not under the control of the Scheduler, because the extra interval is CPU intensive. For most chains, the normal evaluation times are sufficient.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t113" headers="r1c1-t113">
<p><code>rule_set_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t113 r1c2-t113">
<p>In the normal case, no rule set should be passed in. The Scheduler automatically creates a rule set and associated empty evaluation context. You then use <code>DEFINE_CHAIN_RULE</code> to add rules and <code>DROP_CHAIN_RULE</code> to remove them.</p>
<p>Advanced users can create a rule set that describes their chain dependencies and pass it in here. This allows greater flexibility in defining rules. For example, conditions can refer to external variables, and tables can be exposed through the evaluation context. If you pass in a rule set, you must ensure that it is in the format of a chain rule set. (For example, all steps must be listed as variables in the evaluation context). If no rule set is passed in, the rule set created is of the form <code>SCHED_RULESET${N}</code> and the evaluation context created is of the form <code>SCHED_EVCTX${N}</code></p>
<p>See <a class="olink STRMS005" href="../../server.112/e17069/strms_adrules.htm#STRMS005"><span class="italic">Oracle Streams Concepts and Administration</span></a> for information on rules and rule sets.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72870"></a>Database Destination Attribute Values</p>
<p><a href="#BABFDIGF">Table 129-89</a> lists database destination attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
See the <code>CREATE_DATABASE_DESTINATION</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72871" class="tblformal">
<p class="titleintable"><a id="sthref8541"></a><a id="BABFDIGF"></a>Table 129-89 Database Destination Attribute Values</p>
<table class="cellalignment1229" title="Database Destination Attribute Values" summary="This table describes Database Destination attribute values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t115">Name</th>
<th class="cellalignment1227" id="r1c2-t115">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t115" headers="r1c1-t115">
<p><code>agent</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t115 r1c2-t115">
<p>The name of the external destination (also known as agent destination) that is used to connect to the remote database.</p>
<p>You can obtain valid external destination names from the view <code>ALL_SCHEDULER_EXTERNAL_DESTS</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t115" headers="r1c1-t115">
<p><code>connect_info</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t115 r1c2-t115">
<p>The TNS connect descriptor that identifies the remote database to connect to, or the net service name (alias) in tnsnames.ora that resolves to the connect descriptor.</p>
<p>Note: This corresponds to the <code>tns_name</code> argument of <code>CREATE_DATABASE_DESTINATION</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t115" headers="r1c1-t115">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t115 r1c2-t115">
<p>If <code>TRUE</code>, the database destination is enabled.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t115" headers="r1c1-t115">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t115 r1c2-t115">
<p>An optional comment about the database destination.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72872"></a>External Destination Attribute Values</p>
<p><a href="#BABFJGHG">Table 129-90</a> lists external destination attribute values.</p>
<div class="infoboxnotealso">
<p class="notep1">Note:</p>
External destinations are created only implicitly by registering a remote Scheduler agent with the local database.</div>
<div id="ARPLS72873" class="tblformal">
<p class="titleintable"><a id="sthref8542"></a><a id="BABFJGHG"></a>Table 129-90 External Destination Attribute Values</p>
<table class="cellalignment1229" title="External Destination Attribute Values" summary="This table describes external destination attribute values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t117">Name</th>
<th class="cellalignment1227" id="r1c2-t117">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t117" headers="r1c1-t117">
<p><code>hostname</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t117 r1c2-t117">
<p>(<code>GET_ATTRIBUTE</code> only) The fully qualified host name (including domain) or IP address of the computer on which the Scheduler agent resides.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t117" headers="r1c1-t117">
<p><code>port</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t117 r1c2-t117">
<p>(<code>GET_ATTRIBUTE</code> only) The TCP port number on which the agent listens.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t117" headers="r1c1-t117">
<p><code>ip_address</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t117 r1c2-t117">
<p>(<code>GET_ATTRIBUTE</code> only) The IP address of the host on which the agent resides.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t117" headers="r1c1-t117">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t117 r1c2-t117">
<p>If <code>TRUE</code>, the external destination is enabled.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t117" headers="r1c1-t117">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t117 r1c2-t117">
<p>An optional comment about the external destination.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS72874"></a>Group Attribute Values</p>
<p><a href="#BABHBHCC">Table 129-91</a> lists group attribute values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See the <code>CREATE_GROUP</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS72875" class="tblformal">
<p class="titleintable"><a id="sthref8543"></a><a id="BABHBHCC"></a>Table 129-91 Group Attribute Values</p>
<table class="cellalignment1229" title="Group Attribute Values" summary="This table describes group attribute values used by the SET_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t119">Name</th>
<th class="cellalignment1227" id="r1c2-t119">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t119" headers="r1c1-t119">
<p><code>group_type</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t119 r1c2-t119">
<p>(<code>GET_ATTRIBUTE</code> only) The group type (either <code>WINDOW</code>, <code>DB_DEST</code>, or <code>EXTERNAL_DEST</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t119" headers="r1c1-t119">
<p><code>member_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t119 r1c2-t119">
<p>Comma-separated list of members. Replaces the existing list of members. To add one or more members to the existing list, use <code>ADD_GROUP_MEMBER</code>.</p>
<p>Note: this attribute corresponds to the <code>member</code> argument of <code>CREATE_GROUP</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t119" headers="r1c1-t119">
<p><code>enabled</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t119 r1c2-t119">
<p>If <code>TRUE</code>, the group is enabled.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t119" headers="r1c1-t119">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t119 r1c2-t119">
<p>An optional comment about the group.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t119" headers="r1c1-t119">
<p><code>number_of_members</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t119 r1c2-t119">
<p>(<code>GET_ATTRIBUTE</code> only) The number of members in the group.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS73474"></a>Credential Attribute Values</p>
<p><a href="#CHDGCFBH">Table 129-92</a> lists credential attribute values.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
See the <code>CREATE_CREDENTIAL</code> procedure for more complete descriptions of the attributes in this table.</div>
<div id="ARPLS73475" class="tblformal">
<p class="titleintable"><a id="sthref8544"></a><a id="CHDGCFBH"></a>Table 129-92 Credential Attribute Values</p>
<table class="cellalignment1229" title="Credential Attribute Values" summary="This table describes group attribute values used by the CREATE_CREDENTIAL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t121">Name</th>
<th class="cellalignment1227" id="r1c2-t121">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t121" headers="r1c1-t121">
<p><code>username</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t121 r1c2-t121">
<p>The user name for logging into to the host operating system or remote Oracle database. Maximum length is 64.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t121" headers="r1c1-t121">
<p><code>password</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t121 r1c2-t121">
<p>The password for the user name. Maximum length is 128.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t121" headers="r1c1-t121">
<p><code>comments</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t121 r1c2-t121">
<p>A description of the credential. Maximum length is 240.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t121" headers="r1c1-t121">
<p><code>windows_domain</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t121 r1c2-t121">
<p>For a Windows remote executable target, this is the domain that the specified user belongs to. Maximum length is 64.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t121" headers="r1c1-t121">
<p><code>database_role</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t121 r1c2-t121">
<p>The value of the <code>database_role</code> attribute is used as the system privilege for logging into a remote database to run a remote database job.</p>
<p>Valid values are: <code>SYSDBA</code> and <code>SYSOPER</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72425" class="refsect2"><a id="i1000809"></a>
<hr />
<h3 class="refsect2">SET_ATTRIBUTE_NULL Procedure</h3>
<p>This procedure sets an attribute of an object to <code>NULL</code>. The attributes that can be set depend on the object being altered. If the object is enabled, it is disabled before being altered and reenabled afterward. If the object cannot be reenabled, an error is generated and the object is left in a disabled state.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8545"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (
   name              IN VARCHAR2,
   attribute         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8546"></a>Parameters</p>
<div id="ARPLS72426" class="tblformal">
<p class="titleintable"><a id="sthref8547"></a><a id="sthref8548"></a>Table 129-93 SET_ATTRIBUTE_NULL Procedure Parameters</p>
<table class="cellalignment1229" title="SET_ATTRIBUTE_NULL Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_ATTRIBUTE_NULL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t122">Parameter</th>
<th class="cellalignment1227" id="r1c2-t122">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t122" headers="r1c1-t122">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t122 r1c2-t122">
<p>The name of the object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t122" headers="r1c1-t122">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t122 r1c2-t122">
<p>The attribute being changed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8549"></a>Usage Notes</p>
<p>To run <code>SET_ATTRIBUTE_NULL</code> for a window, group of type <code>WINDOW</code>, or job class, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege. Otherwise, you must be the owner of the object being altered or have <code>ALTER</code> privileges on that object or have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72427" class="refsect2"><a id="i1000820"></a>
<hr />
<h3 class="refsect2">SET_JOB_ANYDATA_VALUE Procedure</h3>
<p>This procedure sets the value for an argument of the associated program for a job, encapsulated in an <code>AnyData</code> object. It overrides any default value set for the program argument. <code>NULL</code> is a valid assignment for a program argument. The argument can be specified by position or by name. You can specify by name only when:</p>
<ul>
<li>
<p>The job points to a saved program object</p>
</li>
<li>
<p>The argument was assigned a name with the <a href="#i1013213">DEFINE_ANYDATA_ARGUMENT Procedure</a></p>
</li>
</ul>
<p>Scheduler does no type checking of the argument at any time.</p>
<p><code>SET_JOB_ANYDATA_VALUE</code> is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8550"></a>Syntax</p>
<p>Sets a program argument by its position.</p>
<pre>
DBMS_SCHEDULER.SET_JOB_ANYDATA_VALUE (
   job_name                IN VARCHAR2,
   argument_position       IN PLS_INTEGER,
   argument_value          IN SYS.ANYDATA);
</pre>
<p>Sets a program argument by its name.</p>
<pre>
DBMS_SCHEDULER.SET_JOB_ANYDATA_VALUE (
   job_name                IN VARCHAR2,
   argument_name           IN VARCHAR2,
   argument_value          IN SYS.ANYDATA);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8551"></a>Parameters</p>
<div id="ARPLS72428" class="tblformal">
<p class="titleintable"><a id="sthref8552"></a><a id="sthref8553"></a>Table 129-94 SET_JOB_ANYDATA_VALUE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_JOB_ANYDATA_VALUE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_JOB_ANYDATA_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t123">Parameter</th>
<th class="cellalignment1227" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t123" headers="r1c1-t123">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t123 r1c2-t123">
<p>The name of the job to be altered</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t123" headers="r1c1-t123">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t123 r1c2-t123">
<p>The name of the program argument being set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t123" headers="r1c1-t123">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t123 r1c2-t123">
<p>The position of the program argument being set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t123" headers="r1c1-t123">
<p><code>argument_value</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t123 r1c2-t123">
<p>The new value to be assigned to the program argument, encapsulated in an <code>AnyData</code> object</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8554"></a>Usage Notes</p>
<p><code>SET_JOB_ANYDATA_VALUE</code> requires that you own the job or have <code>ALTER</code> privileges on that job. You can also set a job argument value if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p><code>SET_JOB_ANYDATA_VALUE</code> does not apply to lightweight jobs because lightweight jobs cannot take <code>AnyData</code> arguments.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1011390">"SET_JOB_ARGUMENT_VALUE Procedure"</a></p>
</li>
<li>
<p><a href="#i1013213">"DEFINE_ANYDATA_ARGUMENT Procedure"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72429" class="refsect2"><a id="i1011390"></a>
<hr />
<h3 class="refsect2">SET_JOB_ARGUMENT_VALUE Procedure</h3>
<p>This procedure sets the value of an argument in a program associated with a job. It overrides any default value set for the program argument. <code>NULL</code> is a valid assignment for a program argument. The argument can be specified by position or by name. You can specify by name only when:</p>
<ul>
<li>
<p>The job points to a saved program object</p>
</li>
<li>
<p>The argument was assigned a name with the <a href="#i1011161">DEFINE_PROGRAM_ARGUMENT Procedure</a> or the <a href="#i1011138">DEFINE_METADATA_ARGUMENT Procedure</a></p>
</li>
</ul>
<p>Scheduler does no type checking of the argument at any time.</p>
<p><code>SET_JOB_ARGUMENT_VALUE</code> is overloaded.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8555"></a>Syntax</p>
<p>Sets an argument value by position:</p>
<pre>
DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (
   job_name                IN VARCHAR2,
   argument_position       IN PLS_INTEGER,
   argument_value          IN VARCHAR2);
</pre>
<p>Sets an argument value by name:</p>
<pre>
DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (
   job_name                IN VARCHAR2,
   argument_name           IN VARCHAR2,
   argument_value          IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8556"></a>Parameters</p>
<div id="ARPLS72430" class="tblformal">
<p class="titleintable"><a id="sthref8557"></a><a id="sthref8558"></a>Table 129-95 SET_JOB_ARGUMENT_VALUE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_JOB_ARGUMENT_VALUE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t125">Parameter</th>
<th class="cellalignment1227" id="r1c2-t125">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t125" headers="r1c1-t125">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t125 r1c2-t125">
<p>The name of the job to be altered</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t125" headers="r1c1-t125">
<p><code>argument_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t125 r1c2-t125">
<p>The name of the program argument being set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t125" headers="r1c1-t125">
<p><code>argument_position</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t125 r1c2-t125">
<p>The position of the program argument being set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t125" headers="r1c1-t125">
<p><code>argument_value</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t125 r1c2-t125">
<p>The new value to be set for the program argument. To set a non-<code>VARCHAR</code> value, use the <code>SET_JOB_ANYDATA_VALUE</code> procedure.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8559"></a>Usage Notes</p>
<p><code>SET_JOB_ARGUMENT_VALUE</code> requires that you be the owner of the job or have <code>ALTER</code> privileges on that job. You can also set a job argument value if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> privilege.</p>
<p><code>SET_JOB_ARGUMENT_VALUE</code> only supports arguments of SQL type. Therefore, argument values that are not of SQL type, such as booleans, are not supported as program or job arguments.</p>
<p><code>SET_JOB_ARGUMENT_VALUE</code> can be used to set arguments of lightweight jobs but only if the argument is of type <code>VARCHAR2</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1000820">"SET_JOB_ANYDATA_VALUE Procedure"</a></p>
</li>
<li>
<p><a href="#i1011161">"DEFINE_PROGRAM_ARGUMENT Procedure"</a></p>
</li>
</ul>
</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72431" class="refsect2"><a id="BABCECGB"></a>
<hr />
<h3 class="refsect2">SET_JOB_ATTRIBUTES Procedure</h3>
<p>This procedure changes an attribute of a job.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8560"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.SET_JOB_ATTRIBUTES (
   jobattr_array     IN JOBATTR_ARRAY,
   commit_semantics  IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8561"></a>Parameters</p>
<div id="ARPLS72432" class="tblformal">
<p class="titleintable"><a id="sthref8562"></a><a id="sthref8563"></a>Table 129-96 SET_JOB_ATTRIBUTES Procedure Parameters</p>
<table class="cellalignment1229" title="SET_JOB_ATTRIBUTES Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_JOB_ATTRIBUTES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t127">Parameter</th>
<th class="cellalignment1227" id="r1c2-t127">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t127" headers="r1c1-t127">
<p><code>jobattr_array</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t127 r1c2-t127">
<p>The array of job attribute changes.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t127" headers="r1c1-t127">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t127 r1c2-t127">
<p>The commit semantics. The following types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code> returns on the first error and commits previous successful attribute changes to disk. This is the default.</p>
</li>
<li>
<p><code>TRANSACTIONAL</code> returns on the first error and rolls back everything that happened before that error.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code> tries to absorb any errors and complete the rest of the job attribute changes on the list. It commits all the successful changes. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8564"></a>Usage Notes</p>
<p>Calling <code>SET_ATTRIBUTE</code> on an enabled job disables the job, changes the attribute value, and reenables the job. <code>SET_JOB_ATTRIBUTES</code> changes the attribute values in the context of a single transaction.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72433" class="refsect2"><a id="i1004630"></a>
<hr />
<h3 class="refsect2">SET_SCHEDULER_ATTRIBUTE Procedure</h3>
<p>This procedure sets the value of a Scheduler attribute. This takes effect immediately but the resulting changes may not be seen immediately.</p>
<p><a href="#BABIBECD">Table 129-97</a> provides short attribute descriptions for the <code>SET_SCHEDULER_ATTRIBUTE</code> procedure. For complete descriptions, see section "Setting Scheduler Preferences" in <a class="olink ADMIN13306" href="../../server.112/e25494/schedadmin.htm#ADMIN13306"><span class="italic">Oracle Database Administrator's Guide</span></a>.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8565"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.SET_SCHEDULER_ATTRIBUTE (
   attribute      IN VARCHAR2,
   value          IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8566"></a>Parameters</p>
<div id="ARPLS72434" class="tblformal">
<p class="titleintable"><a id="sthref8567"></a><a id="BABIBECD"></a>Table 129-97 SET_SCHEDULER_ATTRIBUTE Procedure Parameters</p>
<table class="cellalignment1229" title="SET_SCHEDULER_ATTRIBUTE Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.SET_SCHEDULER_ATTRIBUTE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t128">Parameter</th>
<th class="cellalignment1227" id="r1c2-t128">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t128" headers="r1c1-t128">
<p><code>attribute</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t128 r1c2-t128">
<p>The name of the Scheduler attribute. Possible values are:</p>
<ul>
<li>
<p><code>'default_timezone':</code> Repeating jobs and windows that use the calendaring syntax retrieve the time zone from this attribute when <code>start_date</code> is not specified. See <a href="#BABFBCEF">"Calendaring Syntax"</a> for more information.</p>
</li>
<li>
<p><code>'email_server':</code> The SMTP server address that the Scheduler uses to send e-mail notifications for job state events. E-mail notifications cannot be sent if this attribute is <code>NULL</code>.</p>
</li>
<li>
<p><code>'email_sender':</code> The default e-mail address of the sender of job state e-mail notifications.</p>
</li>
<li>
<p><code>'email_server_credential':</code> The schema and name of an existing credential object that <code>SYS</code> has execute object privileges on. Default is <code>NULL</code>. The username and password stored in this credential are used to authenticate with the e-mail server when sending e-mail notifications.</p>
<p>This functionality is available with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</p>
</li>
<li>
<p><code>'email_server_encryption':</code> This attribute indicates whether or not encryption is enabled for this email server connection, and if so, at what point encryption starts, and with which protocol. Values are:</p>
<ul>
<li>
<p><code>NONE</code>: the default, indicating no encryption used</p>
</li>
<li>
<p><code>SSL_TLS</code>: indicating that either <code>SSL</code> or <code>TLS</code> are used, from the beginning of the connection</p>
</li>
<li>
<p><code>STARTTLS:</code>indicating that the connection starts unencrypted, but the command <code>STARTTLS</code> is sent to the e-mail server and starts encryption</p>
</li>
</ul>
<p>This functionality is available starting with Oracle Database 11<span class="italic">g</span> Release 2 (11.2.0.2).</p>
</li>
<li>
<p><code>'event_expiry_time':</code> The time, in seconds, before a job state event generated by the Scheduler expires from the Scheduler event queue. If <code>NULL</code>, job state events expire after 24 hours.</p>
</li>
<li>
<p><code>'log_history':</code> The number of days that log entries for both the job log and the window log are retained. Default is 30 and the range of valid values is 0 through 1000000.</p>
</li>
<li>
<p><code>'max_job_slave_processes':</code> This Scheduler attribute is not used.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t128" headers="r1c1-t128">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t128 r1c2-t128">
<p>The new value of the attribute</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8568"></a>Usage Notes</p>
<p>To run <code>SET_SCHEDULER_ATTRIBUTE</code>, you must have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ADMIN13306" href="../../server.112/e25494/schedadmin.htm#ADMIN13306"><span class="italic">Oracle Database Administrator's Guide</span></a> for more detailed descriptions of Scheduler attributes</div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72435" class="refsect2"><a id="i1009818"></a>
<hr />
<h3 class="refsect2">STOP_JOB Procedure</h3>
<p>This procedure stops currently running jobs or all jobs in a job class. After stopping the job, the state of a one-time job is set to <code>STOPPED</code>, whereas the state of a repeating job is set to <code>SCHEDULED</code> or <code>COMPLETED</code>, depending on whether the next run of the job is scheduled.</p>
<p>If a job pointing to a chain is stopped, all running steps of the running chain are stopped.</p>
<p>If a job has multiple destinations, the database attempts to stop the job at all destinations.</p>
<p>For external jobs, <code>STOP_JOB</code> stops only the external process that was directly started by the job action. It does not stop child processes of external jobs.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8569"></a>Syntax</p>
<pre>
DBMS_SCHEDULER.STOP_JOB (
   job_name         IN VARCHAR2
   force            IN BOOLEAN DEFAULT FALSE
   commit_semantics IN VARCHAR2 DEFAULT 'STOP_ON_FIRST_ERROR');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8570"></a>Parameters</p>
<div id="ARPLS72876" class="tblformal">
<p class="titleintable"><a id="sthref8571"></a><a id="sthref8572"></a>Table 129-98 STOP_JOB Procedure Parameters</p>
<table class="cellalignment1229" title="STOP_JOB Procedure Parameters" summary="This table describes Parameters used by the DBMS_SCHEDULER.STOP_JOB subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t130">Parameter</th>
<th class="cellalignment1227" id="r1c2-t130">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t130" headers="r1c1-t130">
<p><code>job_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t130 r1c2-t130">
<p>Name of a job to stop. Can be a comma-separate list of jobs, where each entry can be one of the following:</p>
<ul>
<li>
<p>Job name: the name of an existing job, optionally preceded by a schema name and dot separator.</p>
</li>
<li>
<p>Job destination ID: a number, obtained from the <code>JOB_DEST_ID</code> column of the <code>*_SCHEDULER_JOB_DESTS</code> views, that represents the unique combination of a job, a credential, and a destination.</p>
</li>
<li>
<p>Job class: the name of a job class. Must be preceded by the <code>SYS</code> schema name and a dot separator.</p>
</li>
</ul>
<p>If you specify a job class, all jobs that belong to that job class are stopped. If you specify a job that was created with a destination group as its <code>destination_name</code> attribute, all job instances on all destinations are stopped.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t130" headers="r1c1-t130">
<p><code>force</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t130 r1c2-t130">
<p>If <code>force</code> is set to <code>FALSE</code>, the Scheduler tries to gracefully stop the job using an interrupt mechanism. This method gives control back to the slave process, which can update the status of the job in the job queue to stopped. If this fails, an error is returned.</p>
<p>If <code>force</code> is set to <code>TRUE</code>, the Scheduler immediately terminates the job slave. Oracle recommends that <code>STOP_JOB</code> with force set to <code>TRUE</code> be used only after a <code>STOP_JOB</code> with <code>force</code> set to <code>FALSE</code> has failed.</p>
<p>Use of the <code>force</code> option requires the <code>MANAGE</code> <code>SCHEDULER</code> system privilege.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t130" headers="r1c1-t130">
<p><code>commit_semantics</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t130 r1c2-t130">
<p>The commit semantics. The following two types are supported:</p>
<ul>
<li>
<p><code>STOP_ON_FIRST_ERROR</code>: The procedure returns on the first error and commits previous successful stop operations to disk. This is the default.</p>
</li>
<li>
<p><code>ABSORB_ERRORS</code>: The procedure tries to absorb any errors, stops the rest of the jobs, and commits all the successful stop operations. This type is available only if no job classes are specified in the <code>job_name</code> list. If errors occur, you can query the view <code>SCHEDULER_BATCH_ERRORS</code> for details.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8573"></a>Usage Notes</p>
<p><code>STOP_JOB</code> without the <code>force</code> option requires that you be the owner of the job or have <code>ALTER</code> privileges on that job. You can also stop a job if you have the <code>CREATE</code> <code>ANY</code> <code>JOB</code> or <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
<p><code>STOP_JOB</code> with the <code>force</code> option requires that you have the <code>MANAGE</code> <code>SCHEDULER</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref8574"></a>Example</p>
<p>The following is an example of using <code>STOP_JOB</code>.</p>
<pre>
BEGIN
  DBMS_SCHEDULER.STOP_JOB('DSS.ETLJOB, 984, 1223, SYS.ETL_JOBCLASS');
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_rule_a.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_server_alert.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
