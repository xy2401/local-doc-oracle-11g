<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>DBMS_SQLTUNE</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:55:32Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="d_sqlpa.htm" title="Previous" type="text/html" />
<link rel="Next" href="d_stat_f.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">144/265</span> <!-- End Header -->
<div id="ARPLS220" class="chapter"><a id="CHDGAJCI"></a>
<h1 class="chapter"><span class="secnum">140</span> DBMS_SQLTUNE</h1>
<p>The <a id="sthref9547"></a><code>DBMS_SQLTUNE</code> package is the interface for tuning SQL on demand. The related package <a id="sthref9548"></a><code>DBMS_AUTO_SQLTUNE</code> package provides the interface for SQL Tuning Advisor run as an automated task.</p>
<p>The chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDGFHEC">Using DBMS_SQLTUNE</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#CACJJGHB">Data Structures</a></p>
</li>
<li>
<p><a href="#CACIEBJJ">Subprogram Groups</a></p>
<ul>
<li>
<p>SQL Tuning Advisor Subprograms</p>
</li>
<li>
<p>SQL Profile Subprograms</p>
</li>
<li>
<p>SQL Tuning Set Subprograms</p>
</li>
<li>
<p>Real-time SQL Monitoring Subprograms</p>
</li>
<li>
<p>SQL Performance Reporting Subprograms</p>
</li>
</ul>
</li>
<li>
<p><a href="#CHDHJFGG">Summary of DBMS_SQLTUNE Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CHDGFHEC"></a>
<hr />
<div id="ARPLS68375" class="refsect1">
<h2 class="refsect1">Using DBMS_SQLTUNE</h2>
<ul>
<li>
<p><a href="#CHDBFJEG">Overview</a></p>
</li>
<li>
<p><a href="#CHDIGIEJ">Security Model</a></p>
</li>
</ul>
<div id="ARPLS68376" class="refsect2"><a id="CHDBFJEG"></a>
<hr />
<h3 class="refsect2">Overview</h3>
<p>The <code>DBMS_SQLTUNE</code> package provides a number interrelated areas of functionality:</p>
<ul>
<li>
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</li>
<li>
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</li>
<li>
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</li>
<li>
<p><a href="#CHDIHAIH">Real-time SQL Monitoring Subprograms</a></p>
</li>
</ul>
<p class="subhead2"><a id="CACFDDBG"></a><a id="ARPLS68377"></a>SQL Tuning Advisor</p>
<p>The SQL Tuning Advisor is one of a suite of Advisors, a set of expert systems that identifies and helps resolve database performance problems. Specifically, the SQL Tuning Advisor automates the tuning process of problematic SQL statements. That is, it takes one or more SQL statements as input and gives precise advice on how to tune the statements. The advice is provided is in the form of precise SQL actions for tuning the SQL along with their expected performance benefit.</p>
<p>The group of <a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> provide a task-oriented interface that lets you access the Advisor. You can call the following subprograms in the order given to use some of the SQL Tuning Advisor's features:</p>
<ol>
<li>
<p>You use the <a href="#CHDGBCDB">CREATE_TUNING_TASK Functions</a> to create a tuning task for tuning a single statement or a group of SQL statements.</p>
</li>
<li>
<p>The <a href="#CHDGEJJA">EXECUTE_TUNING_TASK Function &amp; Procedure</a> executes a previously created tuning task.</p>
</li>
<li>
<p>The <a href="#CHDGEIHJ">REPORT_TUNING_TASK Function</a> displays the results of a tuning task.</p>
</li>
<li>
<p>You use the <a href="#CHDCHDED">SCRIPT_TUNING_TASK Function</a> to create a SQL*PLUS script which can then be executed to implement a set of Advisor recommendations</p>
</li>
</ol>
<p class="subhead2"><a id="ARPLS68378"></a>SQL Profile Subprograms</p>
<p>The SQL Tuning Advisor may recommend the creation of a SQL profile to improve the performance of a statement. SQL profiles consist of auxiliary statistics specific to the statement. The query optimizer makes estimates about cardinality, selectivity, and cost that can sometimes be off by a significant amount, resulting in poor execution plans. The SQL profile addresses this problem by collecting additional information using sampling and partial execution techniques to adjust these estimates.</p>
<p>The group of <a href="#CHDCJJGF">SQL Profile Subprograms</a> provides a mechanism for delivering statistics to the optimizer that targets one particular SQL statement, and helps the optimizer make good decisions for that statement by giving it the most accurate statistical information possible. For example:</p>
<ul>
<li>
<p>You can use the <a href="#i1010403">ACCEPT_SQL_PROFILE Procedure and Function</a> to accept a SQL profile recommended by the SQL Tuning Advisor.</p>
</li>
<li>
<p>You can alter the <code>STATUS</code>, <code>NAME</code>, <code>DESCRIPTION</code>, and <code>CATEGORY</code> attributes of an existing SQL profile with the <a href="#i1008294">ALTER_SQL_PROFILE Procedure</a>.</p>
</li>
<li>
<p>You can drop a SQL profile with the <a href="#i1007819">DROP_SQL_PROFILE Procedure</a>.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS68379"></a>SQL Tuning Sets</p>
<p>The SQL Tuning Advisor input can be a single SQL statement or a set of statements. When tuning multiple statements in one advisor task, you give the input in the form of a SQL tuning set (STS). A SQL tuning set is a database object that stores SQL statements along with their execution context in a system-provided schema. SQL tuning sets provide an infrastructure for dealing with SQL workloads and simplify tuning of a large number of SQL statements.</p>
<p>SQL tuning sets store SQL statements along with</p>
<ul>
<li>
<p>The execution context, such as the parsing schema name and bind values</p>
</li>
<li>
<p>Execution statistics such as average elapsed time and execution count</p>
</li>
<li>
<p>Execution plans - which are the sequence of operations Oracle performs to run SQL statements</p>
</li>
<li>
<p>Row source statistics such as the number of rows processed for each operation executed within the plan</p>
</li>
</ul>
<p>SQL tuning sets can be created by filtering or ranking SQL statements from several sources:</p>
<ul>
<li>
<p>The cursor cache using the <a href="#i1010615">SELECT_CURSOR_CACHE Function</a></p>
</li>
<li>
<p>Top SQL statements from the Automatic Workload Repository using the <a href="#i1009198">SELECT_WORKLOAD_REPOSITORY Functions</a></p>
</li>
<li>
<p>Other SQL tuning sets using the <a href="#CHEHBBDF">SELECT_SQLSET Function</a></p>
</li>
<li>
<p>SQL Performance Analyzer task comparison results using the <a href="#CACEFBJH">SELECT_SQLPA_TASK Function</a></p>
</li>
<li>
<p>SQL Trace files using the <a href="#CACBBIEH">SELECT_SQL_TRACE Function</a></p>
</li>
<li>
<p>A user-defined workload</p>
</li>
</ul>
<p>The complete group of <a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> facilitates this functionality. As examples:</p>
<ul>
<li>
<p>You use the <a href="#i1006897">CREATE_SQLSET Procedure and Function</a> to creates a SQL tuning set object in the database</p>
</li>
<li>
<p>The <a href="#i1006951">LOAD_SQLSET Procedure</a> populates the SQL tuning set with a set of selected SQL</p>
</li>
<li>
<p>The <a href="#CACJHDDC">CAPTURE_CURSOR_CACHE_SQLSET Procedure</a> collects SQL statements from the cursor cache over a specified time interval, attempting to build a realistic picture of system workload.</p>
</li>
</ul>
<p class="subhead2"><a id="ARPLS68380"></a>Import/Export SQL Tuning Sets and SQL Profiles</p>
<p>You use <code>DBMS_SQLTUNE</code> subprograms to move SQL profiles and SQL tuning sets from one system to another using a common programmatic model. In both cases, you create a staging table on the source system and populate that staging table with the relevant data. You then move that staging table to the destination system following the method of your choice (such as datapump, import/export, or database link), where it is used to reconstitute the objects in their original form. These steps are implemented by means of subprograms included in this package:</p>
<ol>
<li>
<p>Call the <a href="#CACHIGBF">CREATE_STGTAB_SQLPROF Procedure</a> or the <a href="#CACBCEEH">CREATE_STGTAB_SQLSET Procedure</a> to create the staging table on the source system.</p>
</li>
<li>
<p>Call the <a href="#CACFCAEC">PACK_STGTAB_SQLPROF Procedure</a> or <a href="#CACIFBAJ">PACK_STGTAB_SQLSET Procedure</a> to populate the staging table with information from the source system.</p>
</li>
<li>
<p>Once you have moved the staging table to the destination system, you call the <a href="#CACDIJJE">UNPACK_STGTAB_SQLPROF Procedure</a> or the <a href="#CACJDGFI">UNPACK_STGTAB_SQLSET Procedure</a> to recreate the object on the new system.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink PFGRF02802" href="../../server.112/e41573/sql_tune.htm#PFGRF02802"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about programmatic flow</div>
<p class="subhead2"><a id="ARPLS68381"></a>Automatic Tuning Task Functions</p>
<p>The automated system task <code>SYS_AUTO_SQL_TUNING_TASK</code> is created by the database as part of the catalog scripts. This task automatically chooses a set of high-load SQL from AWR and runs the SQL Tuning Advisor on this SQL. The automated task performs the same comprehensive analysis as any other SQL Tuning task.</p>
<p>You can obtain a report on the activity of the Automatic SQL Tuning task through the <code>DBMS_AUTO_SQLTUNE.REPORT_AUTO_TUNING_TASK</code> API. See the <code>DBMS_AUTO_SQLTUNE</code> package for the list of subprograms that you can use to manage the automated SQL tuning task.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="d_autosta.htm#CIAFFHGJ">Using DBMS_AUTO_SQLTUNE</a></div>
<p class="subhead2"><a id="CHDGEFEI"></a><a id="ARPLS68382"></a>Real-time SQL Monitoring</p>
<p>Real-time SQL Monitoring allows DBAs or performance analysts to monitor the execution of long-running SQL statements while they are executing. Both cursor statistics (such as CPU times and IO times) and execution plan statistics (such as number of output rows, memory and temp space used) are updated close to real-time during statement execution. These statistics are exposed by the <code>V$SQL_MONITOR</code> and <code>V$SQL_PLAN_MONITOR</code> views. In addition, <code>DBMS_SQLTUNE</code> provides a subprogram <code>REPORT_SQL_MONITOR</code> to report on monitoring information.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS68383" class="refsect2"><a id="CHDIGIEJ"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>This package is available to <code>PUBLIC</code> and performs its own security checking:</p>
<ul>
<li>
<p>As the SQL Tuning advisor relies on the advisor framework, all tuning task interfaces (<code>XXX_TUNING_TASK</code>) require privilege <code>ADVISOR</code>.</p>
</li>
<li>
<p>SQL tuning set subprograms (<code>XXX_SQLSET</code>) require either the <code>ADMINISTER</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> or the <code>ADMINISTER</code> <code>ANY</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> privilege. Users having the <code>ADMINISTER</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> privilege can only create and modify a SQL tuning set they own, while the <code>ADMINISTER</code> <code>ANY</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> privilege allows them to operate upon all SQL tuning sets, even those owned by other users. For example, using the <a href="#i1006897">CREATE_SQLSET Procedure and Function</a> you can create a SQL tuning set to be owned by another user. In this case, the user need not necessarily have the <code>ADMINISTER</code> <code>SQL</code> <code>TUNING</code> <code>SET</code> privilege to operate upon her tuning set.</p>
</li>
<li>
<p>Previously, three different privileges were needed to invoke subprograms concerned with SQL profiles:</p>
<ul>
<li>
<p><code>CREATE</code> <code>ANY</code> <code>SQL</code> <code>PROFILE</code></p>
</li>
<li>
<p><code>ALTER</code> <code>ANY</code> <code>SQL</code> <code>PROFILE</code></p>
</li>
<li>
<p><code>DROP</code> <code>ANY</code> <code>SQL</code> <code>PROFILE</code></p>
</li>
</ul>
<p>These have now been deprecated in favor of <code>ADMINISTER</code> <code>SQL</code> <code>MANAGEMENT</code> <code>OBJECT</code></p>
</li>
</ul>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACJJGHB"></a>
<hr />
<div id="ARPLS68384" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Data Structures</h2>
<p>The <code>DBMS_SQLTUNE</code> package defines the following <code>OBJECT</code> type</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9549"></a>Object Types</p>
<ul>
<li>
<p><a href="#CACCIEIG">SQLSET_ROW Object Type</a></p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div id="ARPLS68385" class="refsect2"><a id="CACCIEIG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9550"></a>SQLSET_ROW Object Type</h3>
<p>The <code>SQLSET_ROW</code> object models the content of a SQL tuning set for the user. Logically, a SQL tuning set is a collection of <code>SQLSET_ROW</code>s where each <code>SQLSET_ROW</code> contains a single SQL statement along with its execution context, statistics, binds, and plan. The <code>SELECT_XXX</code> subprograms each model a data source as a collection of <code>SQLSET_ROWs</code>, unique by (<code>sql_id</code>, <code>plan_hash_value</code>). Similarly, the <code>LOAD_SQLSET</code> procedure takes as input a cursor whose row type is <code>SQLSET_ROW</code>, treating each <code>SQLSET_ROW</code> in isolation according to the policies requested by the user.</p>
<p>Several subprograms in the <code>DBMS_SQLTUNE</code> package accept basic filters on the content of a SQL tuning set or data source. These filters are expressed in terms of the attributes within the <code>SQLSET_ROW</code> as defined.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9551"></a>Syntax</p>
<pre>
CREATE TYPE sqlset_row AS object (
  sql_id                   VARCHAR(13),
  force_matching_signature NUMBER,
  sql_text                 CLOB,
  object_list              sql_objects,
  bind_data                RAW(2000),
  parsing_schema_name      VARCHAR2(30),
  module                   VARCHAR2(48),
  action                   VARCHAR2(32),
  elapsed_time             NUMBER,
  cpu_time                 NUMBER,
  buffer_gets              NUMBER,
  disk_reads               NUMBER,
  direct_writes            NUMBER,
  rows_processed           NUMBER,
  fetches                  NUMBER,
  executions               NUMBER,
  end_of_fetch_count       NUMBER,
  optimizer_cost           NUMBER,
  optimizer_env            RAW(2000),
  priority                 NUMBER,
  command_type             NUMBER,
  first_load_time          VARCHAR2(19),
  stat_period              NUMBER,
  active_stat_period       NUMBER,
  other                    CLOB,
  plan_hash_value          NUMBER,
  sql_plan                 sql_plan_table_type,
  bind_list                sql_binds)
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9552"></a>Attributes</p>
<div id="ARPLS68386" class="tblformal">
<p class="titleintable"><a id="sthref9553"></a><a id="sthref9554"></a>Table 140-1 SQLSET_ROW Attributes</p>
<table class="cellalignment1229" title="SQLSET_ROW Attributes" summary="This table describes the fields of the SQLSET_ROW Object Type and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Attribute</th>
<th class="cellalignment1227" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p>Unique SQL ID</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><code>forcing_matching_signature</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p>Signature with literals, case, and whitespace removed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t4" headers="r1c1-t4">
<p><code>sql_text</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t4 r1c2-t4">
<p>Full text for the statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t4" headers="r1c1-t4">
<p><code>object_list</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t4 r1c2-t4">
<p>Currently not implemented</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t4" headers="r1c1-t4">
<p><code>bind_data</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t4 r1c2-t4">
<p>Bind data as captured for this SQL. Note that you cannot stipulate an argument for this parameter and also for <code>bind_list</code> - they are mutually exclusive.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t4" headers="r1c1-t4">
<p><code>parsing_schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t4 r1c2-t4">
<p>Schema where the SQL is parsed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t4" headers="r1c1-t4">
<p><code>module</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t4 r1c2-t4">
<p>Last application module for the SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t4" headers="r1c1-t4">
<p><code>action</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t4 r1c2-t4">
<p>Last application action for the SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t4" headers="r1c1-t4">
<p><code>elapsed_time</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t4 r1c2-t4">
<p>Sum total elapsed time for this SQL statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t4" headers="r1c1-t4">
<p><code>cpu_time</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t4 r1c2-t4">
<p>Sum total CPU time for this SQL statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t4" headers="r1c1-t4">
<p><code>buffer_gets</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t4 r1c2-t4">
<p>Sum total number of buffer gets</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t4" headers="r1c1-t4">
<p><code>disk_reads</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t4 r1c2-t4">
<p>Sum total number of disk reads</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t4" headers="r1c1-t4">
<p><code>direct_writes</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t4 r1c2-t4">
<p>Sum total number of direct writes</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t4" headers="r1c1-t4">
<p><code>rows_processed</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t4 r1c2-t4">
<p>Sum total number of rows processed by this SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t4" headers="r1c1-t4">
<p><code>fetches</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t4 r1c2-t4">
<p>Sum total number of fetches</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t4" headers="r1c1-t4">
<p><code>executions</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t4 r1c2-t4">
<p>Total executions of this SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t4" headers="r1c1-t4">
<p><code>end_of_fetch_count</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t4 r1c2-t4">
<p>Number of times the statement was fully executed with all of its rows fetched</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t4" headers="r1c1-t4">
<p><code>optimizer_cost</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t4 r1c2-t4">
<p>Optimizer cost for this SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t4" headers="r1c1-t4">
<p><code>optimizer_env</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t4 r1c2-t4">
<p>Optimizer environment for this SQL statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t4" headers="r1c1-t4">
<p><code>priority</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t4 r1c2-t4">
<p>User-defined priority (1,2,3)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t4" headers="r1c1-t4">
<p><code>command_type</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t4 r1c2-t4">
<p>Statement type, such as <code>INSERT</code> or <code>SELECT</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t4" headers="r1c1-t4">
<p><code>first_load_time</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t4 r1c2-t4">
<p>Load time of parent cursor</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t4" headers="r1c1-t4">
<p><code>stat_period</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t4 r1c2-t4">
<p>Period of time (seconds) when the statistics of this SQL statement were collected</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t4" headers="r1c1-t4">
<p><code>active_stat_period</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t4 r1c2-t4">
<p>Effective period of time (in seconds) during which the SQL statement was active</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t4" headers="r1c1-t4">
<p><code>other</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t4 r1c2-t4">
<p>Other column for user defined attributes</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t4" headers="r1c1-t4">
<p><code>plan_hash_value</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t4 r1c2-t4">
<p>Plan hash value of the plan</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t4" headers="r1c1-t4">
<p><code>sql_plan</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t4 r1c2-t4">
<p>Explain plan</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t4" headers="r1c1-t4">
<p><code>bind_list</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t4 r1c2-t4">
<p>List of user specified binds for SQL This is used for user-specified workloads. Note that you cannot stipulate an argument for this parameter and also for <code>bind_data</code> - they are mutually exclusive.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CACIEBJJ"></a>
<hr />
<div id="ARPLS68387" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Subprogram Groups</h2>
<p><code>DBMS_SQLTUNE</code> subprograms are grouped by function:</p>
<ul>
<li>
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</li>
<li>
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</li>
<li>
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</li>
<li>
<p><a href="#CHDIHAIH">Real-time SQL Monitoring Subprograms</a></p>
</li>
<li>
<p><a href="#CHDECAHH">SQL Performance Reporting Subprograms</a></p>
</li>
</ul>
<div id="ARPLS72932" class="refsect2"><a id="CHDDCCBJ"></a>
<hr />
<h3 class="refsect2">SQL Tuning Advisor Subprograms</h3>
<p>This subprogram group provides an interface to manage SQL tuning tasks.</p>
<div id="ARPLS72933" class="tblformal">
<p class="titleintable"><a id="sthref9555"></a><a id="sthref9556"></a>Table 140-2 SQL Tuning Task Subprograms</p>
<table class="cellalignment1229" title="SQL Tuning Task Subprograms" summary="This table lists the SQL tuning tasks subprograms of DBMS_SQLTUNE in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#CHDCHFDB">CANCEL_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>Cancels the currently executing tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#CHDFECGH">CREATE_SQL_PLAN_BASELINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>Creates a SQL plan baseline for an existing plan</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#CHDGBCDB">CREATE_TUNING_TASK Functions</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>Creates a tuning of a single statement or SQL tuning set for either the SQL Tuning Advisor</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#CHDIGHHA">DROP_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t5 r1c2-t5">
<p>Drops a SQL tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#CHDGEJJA">EXECUTE_TUNING_TASK Function &amp; Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t5 r1c2-t5">
<p>Executes a previously created tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#BABIECBJ">IMPLEMENT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t5 r1c2-t5">
<p>Implements a set of SQL profile recommendations made by the SQL Tuning Advisor</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#CHDFIFAF">INTERRUPT_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t5 r1c2-t5">
<p>Interrupts the currently executing tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#CACFICAE">REPORT_AUTO_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t5 r1c2-t5">
<p>Displays a report from the automatic tuning task, reporting on a range of executions</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#CHDGEIHJ">REPORT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t5 r1c2-t5">
<p>Displays the results of a tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t5" headers="r1c1-t5">
<p><a href="#CHDJEHBG">RESET_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t5 r1c2-t5">
<p>Resets the currently executing tuning task to its initial state</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t5" headers="r1c1-t5">
<p><a href="#CHDJEABC">RESUME_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t5 r1c2-t5">
<p>Resumes a previously interrupted task that was created to process a SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t5" headers="r1c1-t5">
<p><a href="#CHDCHDED">SCRIPT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t5 r1c2-t5">
<p>Creates a SQL*PLUS script which can then be executed to implement a set of SQL Tuning Advisor recommendations</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t5" headers="r1c1-t5">
<p><a href="#CHDGAJDB">SET_TUNING_TASK_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t5 r1c2-t5">
<p>Updates the value of a SQL tuning parameter of type <code>VARCHAR2</code> or <code>NUMBER</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The <a href="#CHDHJFGG">Summary of DBMS_SQLTUNE Subprograms</a> contains a complete listing of all subprograms in the package.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72934" class="refsect2"><a id="CHDCJJGF"></a>
<hr />
<h3 class="refsect2">SQL Profile Subprograms</h3>
<p>This subprogram group provides an interface to manage SQL profiles.</p>
<div id="ARPLS72935" class="tblformal">
<p class="titleintable"><a id="sthref9557"></a><a id="sthref9558"></a>Table 140-3 SQL Profile Subprograms</p>
<table class="cellalignment1229" title="SQL Profile Subprograms" summary="This table lists the SQL Profile subprograms of DBMS_SQLTUNE in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#i1010403">ACCEPT_SQL_PROFILE Procedure and Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p>Creates a SQL profile for the specified tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#i1008294">ALTER_SQL_PROFILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p>Alters specific attributes of an existing SQL profile object</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CACHIGBF">CREATE_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p>Creates the staging table used for copying SQL profiles from one system to another</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#i1007819">DROP_SQL_PROFILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c2-t6">
<p>Drops the named SQL profile from the database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#CACFCAEC">PACK_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c2-t6">
<p>Moves profile data out of the <code>SYS</code> schema into the staging table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#CACGGJBG">REMAP_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c2-t6">
<p>Changes the profile data values kept in the staging table prior to performing an unpack operation</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CACHJDEG">SQLTEXT_TO_SIGNATURE Function</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c2-t6">
<p>Returns a SQL text's signature</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CACDIJJE">UNPACK_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c2-t6">
<p>Uses the profile data stored in the staging table to create profiles on this system</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The <a href="#CHDHJFGG">Summary of DBMS_SQLTUNE Subprograms</a> contains a complete listing of all subprograms in the package.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72936" class="refsect2"><a id="CHDGHEAG"></a>
<hr />
<h3 class="refsect2">SQL Tuning Set Subprograms</h3>
<p>This subprogram group provides an interface to manage SQL tuning sets.</p>
<div id="ARPLS72937" class="tblformal">
<p class="titleintable"><a id="sthref9559"></a><a id="sthref9560"></a>Table 140-4 SQL Tuning Set Subprograms</p>
<table class="cellalignment1229" title="SQL Tuning Set Subprograms" summary="This table lists the SQL Tuning Set subprograms of DBMS_SQLTUNE in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#i1006814">ADD_SQLSET_REFERENCE Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Adds a new reference to an existing SQL tuning set to indicate its use by a client</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#CACJHDDC">CAPTURE_CURSOR_CACHE_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>Over a specified time interval incrementally captures a workload from the cursor cache into a SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#i1006897">CREATE_SQLSET Procedure and Function</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c2-t7">
<p>Creates a SQL tuning set object in the database</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#CACBCEEH">CREATE_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t7 r1c2-t7">
<p>Creates a staging table through which SQL Tuning Sets are imported and exported</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#i1006898">DELETE_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t7 r1c2-t7">
<p>Deletes a set of SQL statements from a SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t7" headers="r1c1-t7">
<p><a href="#i1007711">DROP_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t7 r1c2-t7">
<p>Drops a SQL tuning set if it is not active</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t7" headers="r1c1-t7">
<p><a href="#i1006951">LOAD_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t7 r1c2-t7">
<p>Populates the SQL tuning set with a set of selected SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t7" headers="r1c1-t7">
<p><a href="#CACIFBAJ">PACK_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t7 r1c2-t7">
<p>Copies tuning sets out of the <code>SYS</code> schema into the staging table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t7" headers="r1c1-t7">
<p><a href="#i1006952">REMOVE_SQLSET_REFERENCE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t7 r1c2-t7">
<p>Deactivates a SQL tuning set to indicate it is no longer used by the client</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t7" headers="r1c1-t7">
<p><a href="#i1010615">SELECT_CURSOR_CACHE Function</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t7 r1c2-t7">
<p>Collects SQL statements from the cursor cache</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t7" headers="r1c1-t7">
<p><a href="#CACBBIEH">SELECT_SQL_TRACE Function</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t7 r1c2-t7">
<p>Reads the content of one or more trace files and returns the SQL statements it finds in the format of <code>sqlset_row</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t7" headers="r1c1-t7">
<p><a href="#CACEFBJH">SELECT_SQLPA_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t7 r1c2-t7">
<p>Collects SQL statements from a SQL performance analyzer comparison task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t7" headers="r1c1-t7">
<p><a href="#CHEHBBDF">SELECT_SQLSET Function</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t7 r1c2-t7">
<p>Collects SQL statements from an existing SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t7" headers="r1c1-t7">
<p><a href="#i1009198">SELECT_WORKLOAD_REPOSITORY Functions</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t7 r1c2-t7">
<p>Collects SQL statements from the workload repository</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t7" headers="r1c1-t7">
<p><a href="#CACJDGFI">UNPACK_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t7 r1c2-t7">
<p>Copies one or more SQL tuning sets from the staging table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t7" headers="r1c1-t7">
<p><a href="#i1007011">UPDATE_SQLSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t7 r1c2-t7">
<p>Updates whether selected string fields for a SQL statement in a SQL tuning set or the set numerical attributes of a SQL in a SQL tuning set</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p>The <a href="#CHDHJFGG">Summary of DBMS_SQLTUNE Subprograms</a> contains a complete listing of all subprograms in the package.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS72938" class="refsect2"><a id="CHDIHAIH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9561"></a>Real-time SQL Monitoring Subprograms</h3>
<p>This subprogram group provides function to report on monitoring data collected in <code>V$SQL_MONITOR</code> and <code>V$SQL_PLAN_MONITOR</code>.</p>
<div id="ARPLS72939" class="tblformal">
<p class="titleintable"><a id="sthref9562"></a><a id="sthref9563"></a>Table 140-5 SQL Tuning Set Subprograms</p>
<table class="cellalignment1229" title="SQL Tuning Set Subprograms" summary="This table lists the SQL Tuning Set subprograms of DBMS_SQLTUNE in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><a href="#CHDBHIBG">REPORT_SQL_MONITOR Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>Reports on real-time SQL Monitoring</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><a href="#CHDIECJJ">REPORT_SQL_MONITOR_LIST Function</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>Builds a report for all or a sub-set of statements monitored by Oracle</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72940" class="refsect2"><a id="CHDECAHH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9564"></a>SQL Performance Reporting Subprograms</h3>
<p>This subprogram group provides detailed reports on SQL performance using statistics from the cursor cache and automatic workload repository (AWR).</p>
<div id="ARPLS72941" class="tblformal">
<p class="titleintable"><a id="sthref9565"></a><a id="sthref9566"></a>Table 140-6 SQL Performance Reporting Subprograms</p>
<table class="cellalignment1229" title="SQL Performance Reporting Subprograms" summary="This table lists the SQL Performance Reporting Subprograms of DBMS_SQLTUNE in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><a href="#CHDIDGFA">REPORT_SQL_DETAIL Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>Reports on a specific SQLID</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CHDHJFGG"></a>
<hr />
<div id="ARPLS68396" class="refsect1">
<h2 class="refsect1">Summary of DBMS_SQLTUNE Subprograms</h2>
<div id="ARPLS68397" class="tblformal">
<p class="titleintable"><a id="sthref9567"></a><a id="sthref9568"></a>Table 140-7 DBMS_SQLTUNE Package Subprograms</p>
<table class="cellalignment1229" title="DBMS_SQLTUNE Package Subprograms " summary="This table lists the DBMS_SQLTUNE subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t10">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t10">Description</th>
<th class="cellalignment1227" id="r1c3-t10">Group</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t10" headers="r1c1-t10">
<p><a href="#i1010403">ACCEPT_SQL_PROFILE Procedure and Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t10 r1c2-t10">
<p>Create a SQL profile for the specified tuning task</p>
</td>
<td class="cellalignment1228" headers="r2c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t10" headers="r1c1-t10">
<p><a href="#i1006814">ADD_SQLSET_REFERENCE Function</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t10 r1c2-t10">
<p>Adds a new reference to an existing SQL tuning set to indicate its use by a client</p>
</td>
<td class="cellalignment1228" headers="r3c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t10" headers="r1c1-t10">
<p><a href="#i1008294">ALTER_SQL_PROFILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t10 r1c2-t10">
<p>Alters specific attributes of an existing SQL profile object</p>
</td>
<td class="cellalignment1228" headers="r4c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t10" headers="r1c1-t10">
<p><a href="#CHDCHFDB">CANCEL_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t10 r1c2-t10">
<p>Cancels the currently executing tuning task</p>
</td>
<td class="cellalignment1228" headers="r5c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t10" headers="r1c1-t10">
<p><a href="#CACJHDDC">CAPTURE_CURSOR_CACHE_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t10 r1c2-t10">
<p>Over a specified time interval incrementally captures a workload from the cursor cache into a SQL tuning set</p>
</td>
<td class="cellalignment1228" headers="r6c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t10" headers="r1c1-t10">
<p><a href="#CHDFECGH">CREATE_SQL_PLAN_BASELINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t10 r1c2-t10">
<p>Creates a SQL plan baseline for an existing plan</p>
</td>
<td class="cellalignment1228" headers="r7c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t10" headers="r1c1-t10">
<p><a href="#i1006897">CREATE_SQLSET Procedure and Function</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t10 r1c2-t10">
<p>Creates a SQL tuning set object in the database</p>
</td>
<td class="cellalignment1228" headers="r8c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t10" headers="r1c1-t10">
<p><a href="#CACHIGBF">CREATE_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t10 r1c2-t10">
<p>Creates the staging table used for copying SQL profiles from one system to another</p>
</td>
<td class="cellalignment1228" headers="r9c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t10" headers="r1c1-t10">
<p><a href="#CACBCEEH">CREATE_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t10 r1c2-t10">
<p>Creates a staging table through which SQL tuning sets are imported and exported</p>
</td>
<td class="cellalignment1228" headers="r10c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t10" headers="r1c1-t10">
<p><a href="#CHDGBCDB">CREATE_TUNING_TASK Functions</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t10 r1c2-t10">
<p>Creates a tuning of a single statement or SQL tuning set for either the SQL Tuning Advisor</p>
</td>
<td class="cellalignment1228" headers="r11c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t10" headers="r1c1-t10">
<p><a href="#i1006898">DELETE_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t10 r1c2-t10">
<p>Deletes a set of SQL statements from a SQL tuning set</p>
</td>
<td class="cellalignment1228" headers="r12c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t10" headers="r1c1-t10">
<p><a href="#i1007819">DROP_SQL_PROFILE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t10 r1c2-t10">
<p>Drops the named SQL profile from the database</p>
</td>
<td class="cellalignment1228" headers="r13c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t10" headers="r1c1-t10">
<p><a href="#i1007711">DROP_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t10 r1c2-t10">
<p>Drops a SQL tuning set if it is not active</p>
</td>
<td class="cellalignment1228" headers="r14c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t10" headers="r1c1-t10">
<p><a href="#CHDIGHHA">DROP_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t10 r1c2-t10">
<p>Drops a SQL tuning task</p>
</td>
<td class="cellalignment1228" headers="r15c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t10" headers="r1c1-t10">
<p><a href="#CHDGEJJA">EXECUTE_TUNING_TASK Function &amp; Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t10 r1c2-t10">
<p>Executes a previously created tuning task</p>
</td>
<td class="cellalignment1228" headers="r16c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t10" headers="r1c1-t10">
<p><a href="#BABIECBJ">IMPLEMENT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t10 r1c2-t10">
<p>implements a set of SQL profile recommendations made by the SQL Tuning Advisor</p>
</td>
<td class="cellalignment1228" headers="r17c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t10" headers="r1c1-t10">
<p><a href="#CHDFIFAF">INTERRUPT_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t10 r1c2-t10">
<p>Interrupts the currently executing tuning task</p>
</td>
<td class="cellalignment1228" headers="r18c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t10" headers="r1c1-t10">
<p><a href="#i1006951">LOAD_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t10 r1c2-t10">
<p>Populates the SQL tuning set with a set of selected SQL</p>
</td>
<td class="cellalignment1228" headers="r19c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t10" headers="r1c1-t10">
<p><a href="#CACFCAEC">PACK_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t10 r1c2-t10">
<p>Moves profile data out of the <code>SYS</code> schema into the staging table</p>
</td>
<td class="cellalignment1228" headers="r20c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t10" headers="r1c1-t10">
<p><a href="#CACIFBAJ">PACK_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t10 r1c2-t10">
<p>Moves tuning sets out of the <code>SYS</code> schema into the staging table</p>
</td>
<td class="cellalignment1228" headers="r21c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t10" headers="r1c1-t10">
<p><a href="#CACGGJBG">REMAP_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t10 r1c2-t10">
<p>Changes the profile data values kept in the staging table prior to performing an unpack operation</p>
</td>
<td class="cellalignment1228" headers="r22c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t10" headers="r1c1-t10">
<p><a href="#CACIFDFG">REMAP_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t10 r1c2-t10">
<p>Changes the tuning set names and owners in the staging table so that they can be unpacked with different values than they had on the host system</p>
</td>
<td class="cellalignment1228" headers="r23c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t10" headers="r1c1-t10">
<p><a href="#i1006952">REMOVE_SQLSET_REFERENCE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t10 r1c2-t10">
<p>Deactivates a SQL tuning set to indicate it is no longer used by the client</p>
</td>
<td class="cellalignment1228" headers="r24c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t10" headers="r1c1-t10">
<p><a href="#CACFICAE">REPORT_AUTO_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t10 r1c2-t10">
<p>Displays a report from the automatic tuning task, reporting on a range of subtasks</p>
</td>
<td class="cellalignment1228" headers="r25c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t10" headers="r1c1-t10">
<p><a href="#CHDIDGFA">REPORT_SQL_DETAIL Function</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t10 r1c2-t10">
<p>Reports on a specific SQLID</p>
</td>
<td class="cellalignment1228" headers="r26c1-t10 r1c3-t10">
<p><a href="#CHDECAHH">SQL Performance Reporting Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t10" headers="r1c1-t10">
<p><a href="#CHDBHIBG">REPORT_SQL_MONITOR Function</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t10 r1c2-t10">
<p>Displays a report on real-time SQL monitoring</p>
</td>
<td class="cellalignment1228" headers="r27c1-t10 r1c3-t10">
<p><a href="#CHDIHAIH">Real-time SQL Monitoring Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t10" headers="r1c1-t10">
<p><a href="#CHDIECJJ">REPORT_SQL_MONITOR_LIST Function</a></p>
</td>
<td class="cellalignment1228" headers="r28c1-t10 r1c2-t10">
<p>Builds a report for all or a sub-set of statements monitored by Oracle</p>
</td>
<td class="cellalignment1228" headers="r28c1-t10 r1c3-t10">
<p><a href="#CHDIHAIH">Real-time SQL Monitoring Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t10" headers="r1c1-t10">
<p><a href="#CHDGEIHJ">REPORT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r29c1-t10 r1c2-t10">
<p>Displays the results of a tuning task</p>
</td>
<td class="cellalignment1228" headers="r29c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t10" headers="r1c1-t10">
<p><a href="#CHDJEHBG">RESET_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r30c1-t10 r1c2-t10">
<p>Resets the currently executing tuning task to its initial state</p>
</td>
<td class="cellalignment1228" headers="r30c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t10" headers="r1c1-t10">
<p><a href="#CHDJEABC">RESUME_TUNING_TASK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r31c1-t10 r1c2-t10">
<p>Resumes a previously interrupted task that was created to process a SQL tuning set</p>
</td>
<td class="cellalignment1228" headers="r31c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t10" headers="r1c1-t10">
<p><a href="#CHDCHDED">SCRIPT_TUNING_TASK Function</a></p>
</td>
<td class="cellalignment1228" headers="r32c1-t10 r1c2-t10">
<p>Creates a SQL*PLUS script which can then be executed to implement a set of SQL Tuning Advisor recommendations</p>
</td>
<td class="cellalignment1228" headers="r32c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t10" headers="r1c1-t10">
<p><a href="#i1010615">SELECT_CURSOR_CACHE Function</a></p>
</td>
<td class="cellalignment1228" headers="r33c1-t10 r1c2-t10">
<p>Collects SQL statements from the cursor cache</p>
</td>
<td class="cellalignment1228" headers="r33c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t10" headers="r1c1-t10">
<p><a href="#CACBBIEH">SELECT_SQL_TRACE Function</a></p>
</td>
<td class="cellalignment1228" headers="r34c1-t10 r1c2-t10">
<p>Reads the content of one or more trace files and returns the SQL statements it finds in the format of <code>sqlset_row</code></p>
</td>
<td class="cellalignment1228" headers="r34c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t10" headers="r1c1-t10">
<p><a href="#CHEHBBDF">SELECT_SQLSET Function</a></p>
</td>
<td class="cellalignment1228" headers="r35c1-t10 r1c2-t10">
<p>Collects SQL statements from an existing SQL tuning set</p>
</td>
<td class="cellalignment1228" headers="r35c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t10" headers="r1c1-t10">
<p><a href="#i1009198">SELECT_WORKLOAD_REPOSITORY Functions</a></p>
</td>
<td class="cellalignment1228" headers="r36c1-t10 r1c2-t10">
<p>Collects SQL statements from the workload repository</p>
</td>
<td class="cellalignment1228" headers="r36c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r37c1-t10" headers="r1c1-t10">
<p><a href="#CHDGAJDB">SET_TUNING_TASK_PARAMETER Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r37c1-t10 r1c2-t10">
<p>Updates the value of a SQL tuning parameter of type <code>VARCHAR2</code> or <code>NUMBER</code></p>
</td>
<td class="cellalignment1228" headers="r37c1-t10 r1c3-t10">
<p><a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r38c1-t10" headers="r1c1-t10">
<p><a href="#CACHJDEG">SQLTEXT_TO_SIGNATURE Function</a></p>
</td>
<td class="cellalignment1228" headers="r38c1-t10 r1c2-t10">
<p>Returns a SQL text's signature</p>
</td>
<td class="cellalignment1228" headers="r38c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r39c1-t10" headers="r1c1-t10">
<p><a href="#CACDIJJE">UNPACK_STGTAB_SQLPROF Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r39c1-t10 r1c2-t10">
<p>Uses the profile data stored in the staging table to create profiles on this system</p>
</td>
<td class="cellalignment1228" headers="r39c1-t10 r1c3-t10">
<p><a href="#CHDCJJGF">SQL Profile Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r40c1-t10" headers="r1c1-t10">
<p><a href="#CACJDGFI">UNPACK_STGTAB_SQLSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r40c1-t10 r1c2-t10">
<p>Moves one or more SQL tuning sets from the staging table</p>
</td>
<td class="cellalignment1228" headers="r40c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r41c1-t10" headers="r1c1-t10">
<p><a href="#i1007011">UPDATE_SQLSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r41c1-t10 r1c2-t10">
<p>Updates selected fields for a SQL statement in a SQL tuning set</p>
</td>
<td class="cellalignment1228" headers="r41c1-t10 r1c3-t10">
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS68398" class="refsect2"><a id="i1010403"></a>
<hr />
<h3 class="refsect2"><a id="sthref9569"></a>ACCEPT_SQL_PROFILE Procedure and Function</h3>
<p>This procedure creates a SQL profile recommended by the SQL Tuning Advisor. The SQL text is normalized for matching purposes though it is stored in the data dictionary in de-normalized form for readability. SQL text is provided through a reference to the SQL Tuning task. If the referenced SQL statement doesn't exist, an error is reported.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9570"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.ACCEPT_SQL_PROFILE (
   task_name    IN  VARCHAR2,
   object_id    IN  NUMBER   := NULL,
   name         IN  VARCHAR2 := NULL,
   description  IN  VARCHAR2 := NULL,
   category     IN  VARCHAR2 := NULL);
   task_owner   IN VARCHAR2  := NULL,
   replace      IN BOOLEAN   := FALSE,
   force_match  IN BOOLEAN   := FALSE,
   profile_type IN VARCHAR2  := REGULAR_PROFILE);
</pre>
<pre>
DBMS_SQLTUNE.ACCEPT_SQL_PROFILE (
   task_name    IN  VARCHAR2,
   object_id    IN  NUMBER   := NULL,
   name         IN  VARCHAR2 := NULL,
   description  IN  VARCHAR2 := NULL,
   category     IN  VARCHAR2 := NULL;
   task_owner   IN VARCHAR2  := NULL,
   replace      IN BOOLEAN   := FALSE,
   force_match  IN BOOLEAN   := FALSE,
   profile_type IN VARCHAR2  := REGULAR_PROFILE)
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9571"></a>Parameters</p>
<div id="ARPLS68399" class="tblformal">
<p class="titleintable"><a id="sthref9572"></a><a id="sthref9573"></a>Table 140-8 ACCEPT_SQL_PROFILE Procedure and Function Parameters</p>
<table class="cellalignment1229" title="ACCEPT_SQL_PROFILE Procedure and Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.ACCEPT_SQL_PROFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t12">Parameter</th>
<th class="cellalignment1227" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t12" headers="r1c1-t12">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t12 r1c2-t12">
<p>The (mandatory) name of the SQL tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t12" headers="r1c1-t12">
<p><code>object_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t12 r1c2-t12">
<p>The identifier of the advisor framework object representing the SQL statement associated with the tuning task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t12" headers="r1c1-t12">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t12 r1c2-t12">
<p>The name of the SQL profile. It cannot contain double quotation marks. The name is case sensitive. If not specified, the system generates a unique name for the SQL profile.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t12" headers="r1c1-t12">
<p><code>description</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t12 r1c2-t12">
<p>A user specified string describing the purpose of the SQL profile. The description is truncated if longer than 256 characters. The maximum size is 500 characters.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t12" headers="r1c1-t12">
<p><code>category</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t12 r1c2-t12">
<p>This is the category name which must match the value of the <code>SQLTUNE_CATEGORY</code> parameter in a session for the session to use this SQL profile. It defaults to the value "<code>DEFAULT</code>". This is also the default of the <code>SQLTUNE_CATEGORY</code> parameter. The category must be a valid Oracle identifier. The category name specified is always converted to upper case. The combination of the normalized SQL text and category name creates a unique key for a SQL profile. An <code>ACCEPT_SQL_PROFILE</code> fails if this combination is duplicated.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t12" headers="r1c1-t12">
<p><code>task_owner</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t12 r1c2-t12">
<p>Owner of the tuning task. This is an optional parameter that has to be specified to accept a SQL profile associated to a tuning task owned by another user. The current user is the default value.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t12" headers="r1c1-t12">
<p><code>replace</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t12 r1c2-t12">
<p>If the profile already exists, it is replaced if this argument is <code>TRUE</code>. It is an error to pass a name that is already being used for another signature/category pair, even with replace set to <code>TRUE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t12" headers="r1c1-t12">
<p><code>force_match</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t12 r1c2-t12">
<p>If <code>TRUE</code> this causes SQL profiles to target all SQL statements which have the same text after normalizing all literal values into bind variables. (Note that if a combination of literal values and bind values is used in a SQL statement, no bind transformation occurs.) This is analogous to the matching algorithm used by the <code>FORCE</code> option of the <code>cursor_sharing</code> parameter.</p>
<p>If <code>FALSE</code>, literals are not transformed. This is analogous to the matching algorithm used by the <code>EXACT</code> option of the <code>cursor_sharing</code> parameter.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t12" headers="r1c1-t12">
<p><code>profile_type</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t12 r1c2-t12">
<p>Options:</p>
<ul>
<li>
<p><code>REGULAR_PROFILE</code> - profile without a change to parallel execution (Default, equivalent to <code>NULL</code>). Note that if the SQL statement currently has a parallel execution plan, the regular profile will cause the optimizer to choose a different, but still parallel, execution plan.</p>
</li>
<li>
<p><code>PX_PROFILE</code> - regular profile with a change to parallel execution</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9574"></a>Return Values</p>
<p>The name of the SQL profile.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9575"></a>Usage Notes</p>
<p>The <code>CREATE</code> <code>ANY</code> <code>SQL PROFILE</code> privilege is required.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9576"></a>Examples</p>
<p>You use both the procedure and the function versions of the subprogram in the same way except you must specify a return value to invoke the function. Here we give examples of the procedure only.</p>
<p>In this example, you tune a single SQL statement form the workload repository and you create the SQL profile recommended by SQL Tuning Advisor.</p>
<pre>
variable stmt_task VARCHAR2(64);
variable sts_task VARCHAR2(64);
 
-- create a tuning task tune the statement 
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(
   begin_snap  =&gt; 1, -
   end_snap    =&gt; 2, -
   sql_id      =&gt; 'ay1m3ssvtrh24');
 
-- execute the resulting task 
EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK(:stmt_task);
 
EXEC DBMS_SQLTUNE.ACCEPT_SQL_PROFILE(:stmt_task);
 
</pre>
<p>Note that you do not have to specify the ID (that is, <code>object_id</code>) for the advisor framework object created by SQL Tuning Advisor to represent the tuned SQL statement.</p>
<p>You might also want to accept the recommended SQL profile in a different category, (for example, <code>TEST</code>), so that it is not used by default.</p>
<pre>
EXEC DBMS_SQLTUNE.ACCEPT_SQL_PROFILE (
   task_name  =&gt;  :stmt_task, -
   category   =&gt;  'TEST');
</pre>
<p>You can use command <code>ALTER</code> <code>SESSION</code> <code>SET</code> <code>SQLTUNE_CATEGORY</code> = <code>'TEST'</code> to see how this profile behaves.</p>
<p>The following call creates a SQL profile that targets any SQL statement with the same <code>force_matching_signature</code> as the tuned statement.</p>
<pre>
EXEC DBMS_SQLTUNE.ACCEPT_SQL_PROFILE (task_name   =&gt;  :stmt_task, -
                                      force_match =&gt;  TRUE);
</pre>
<p>In the following example, you tune a SQL tuning set, and you create a SQL profile for only one of the SQL statements in the SQL tuning set. The SQL statement is represented by an advisor framework object with ID equal to '5'. Please notice that you must pass an object id to the <code>ACCEPT_SQL_PROFILE</code> procedure because there are potentially many SQL profiles for the tuning task. This object id is given along with the report.</p>
<pre>
EXEC :sts_task := DBMS_SQLTUNE.CREATE_TUNING_TASK ( -
  sqlset_name   =&gt; 'my_workload',  -
  rank1         =&gt; 'ELAPSED_TIME', -
  time_limit    =&gt; 3600,           -
  description   =&gt; 'my workload ordered by elapsed time');
 
-- execute the resulting task 
EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK(:sts_task);

 -- create the profile for the sql statement corresponding to object_id = 5.
EXEC DBMS_SQLTUNE.ACCEPT_SQL_PROFILE (
   task_name  =&gt;  :sts_task, -
   object_id  =&gt;  5);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68400" class="refsect2"><a id="i1006814"></a>
<hr />
<h3 class="refsect2"><a id="sthref9577"></a>ADD_SQLSET_REFERENCE Function</h3>
<p>This procedure adds a new reference to an existing SQL tuning set to indicate its use by a client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9578"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.ADD_SQLSET_REFERENCE (
   sqlset_name  IN  VARCHAR2,
   description  IN  VARCHAR2 := NULL)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9579"></a>Parameters</p>
<div id="ARPLS68401" class="tblformal">
<p class="titleintable"><a id="sthref9580"></a><a id="sthref9581"></a>Table 140-9 ADD_SQLSET_REFERENCE Function Parameters</p>
<table class="cellalignment1229" title="ADD_SQLSET_REFERENCE Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.ADD_SQLSET_REFERENCE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t14">Parameter</th>
<th class="cellalignment1227" id="r1c2-t14">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t14" headers="r1c1-t14">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t14 r1c2-t14">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t14" headers="r1c1-t14">
<p><code>description</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t14 r1c2-t14">
<p>The description of the usage of SQL tuning set. The description is truncated if longer than 256 characters.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9582"></a>Return Values</p>
<p>The identifier of the added reference.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9583"></a>Examples</p>
<p>You can add reference to a SQL tuning set. This prevents the tuning set from being modified while it is being used. References are automatically added when you invoke SQL Tuning Advisor on the SQL tuning set, so you should use this function for custom purposes only.The function returns a reference ID that is used to remove it later. You use the <code>REMOVE_SQLSET_REFERENCE Procedure</code> to delete references to a SQL tuning set.</p>
<pre>
 
variable rid number; 
EXEC :rid := DBMS_SQLTUNE.ADD_SQLSET_REFERENCE( -
                                sqlset_name =&gt; 'my_workload', -
                                description =&gt; 'my sts reference');
</pre>
<p>You can use the views <code>USER/DBA_SQLSET_REFERENCES</code> to find all references on a given SQL tuning set.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68402" class="refsect2"><a id="i1008294"></a>
<hr />
<h3 class="refsect2"><a id="sthref9584"></a>ALTER_SQL_PROFILE Procedure</h3>
<p>This procedure alters specific attributes of an existing SQL profile object. The following attributes can be altered (using these attribute names):</p>
<ul>
<li>
<p>"<code>STATUS</code>" can be set to "<code>ENABLED</code>" or "<code>DISABLED</code>"</p>
</li>
<li>
<p>"<code>NAME</code>" can be reset to a valid name which must be a valid Oracle identifier and must be unique.</p>
</li>
<li>
<p>"<code>DESCRIPTION</code>" can be set to any string of size no more than 500 characters</p>
</li>
<li>
<p>"<code>CATEGORY</code>" can be reset to a valid category name which must be a valid Oracle identifier and must be unique when combined with normalized SQL text)</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9585"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.ALTER_SQL_PROFILE (
   name                 IN  VARCHAR2,
   attribute_name       IN  VARCHAR2,
   value                IN  VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9586"></a>Parameters</p>
<div id="ARPLS68403" class="tblformal">
<p class="titleintable"><a id="sthref9587"></a><a id="sthref9588"></a>Table 140-10 ALTER_SQL_PROFILE Procedure Parameters</p>
<table class="cellalignment1229" title="ALTER_SQL_PROFILE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.ALTER_SQL_PROFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t16">Parameter</th>
<th class="cellalignment1227" id="r1c2-t16">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t16" headers="r1c1-t16">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t16 r1c2-t16">
<p>The (mandatory) name of the existing SQL profile to alter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t16" headers="r1c1-t16">
<p><code>attribute_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t16 r1c2-t16">
<p>The (mandatory) attribute name to alter (case insensitive) using valid attribute names</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t16" headers="r1c1-t16">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t16 r1c2-t16">
<p>The (mandatory) new value of the attribute using valid attribute values</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9589"></a>Usage Notes</p>
<p>Requires the <code>ALTER</code> <code>ANY</code> <code>SQL PROFILE</code> privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9590"></a>Examples</p>
<pre>
-- Disable a profile, so it is not be used by any sessions.
EXEC DBMS_SQLTUNE.ALTER_SQL_PROFILE ( name            =&gt;  :pname,   -
                                      attribute_name  =&gt;  'STATUS', -
                                      value           =&gt;  'DISABLED');
 
-- Enable it back:
EXEC DBMS_SQLTUNE.ALTER_SQL_PROFILE ( name            =&gt;   :pname,   -
                                      attribute_name  =&gt;   'STATUS', -
                                      value           =&gt;   'ENABLED');
 
-- Change the category of the profile so it is used only by sessions
-- with category set to TEST.
-- Use ALTER SESSION SET SQLTUNE_CATEGORY = 'TEST' to see how this profile 
-- behaves.
EXEC DBMS_SQLTUNE.ALTER_SQL_PROFILE ( name            =&gt;  :pname,   -
                                      attribute_name  =&gt;  'CATEGORY', -
                                      value           =&gt;  'TEST');
 
-- Change it back:
EXEC DBMS_SQLTUNE.ALTER_SQL_PROFILE ( name            =&gt;  :pname,   -
                                      attribute_name  =&gt;  'CATEGORY', -
                                      value           =&gt;  'DEFAULT');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68404" class="refsect2"><a id="CHDCHFDB"></a>
<hr />
<h3 class="refsect2"><a id="sthref9591"></a>CANCEL_TUNING_TASK Procedure</h3>
<p>This procedure cancels the currently executing tuning task. All intermediate result data is deleted.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9592"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CANCEL_TUNING_TASK(
 task_name         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9593"></a>Parameters</p>
<div id="ARPLS68405" class="tblformal">
<p class="titleintable"><a id="sthref9594"></a><a id="sthref9595"></a>Table 140-11 CANCEL_TUNING_TASK Procedure Parameters</p>
<table class="cellalignment1229" title="CANCEL_TUNING_TASK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CANCEL_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t18">Parameter</th>
<th class="cellalignment1227" id="r1c2-t18">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t18" headers="r1c1-t18">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t18 r1c2-t18">
<p>The name of the task to cancel</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9596"></a>Examples</p>
<p>You cancel a task when you need to stop it executing and do not require to view any already-completed results.</p>
<pre>
EXEC DBMS_SQLTUNE.CANCEL_TUNING_TASK(:my_task);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68406" class="refsect2"><a id="CACJHDDC"></a>
<hr />
<h3 class="refsect2"><a id="sthref9597"></a>CAPTURE_CURSOR_CACHE_SQLSET Procedure</h3>
<p>Over a specified time interval this procedure incrementally captures a workload from the cursor cache into a SQL tuning set. The procedure captures a workload from the cursor cache into a SQL tuning set, polling the cache multiple times over a time period and updating the workload data stored there. It can execute over as long a period as required to capture an entire system workload.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9598"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CAPTURE_CURSOR_CACHE_SQLSET (
    sqlset_name         IN VARCHAR2, 
    time_limit          IN POSITIVE := 1800,
    repeat_interval     IN POSITIVE := 300,
    capture_option      IN VARCHAR2 := 'MERGE',
    capture_mode        IN NUMBER   := MODE_REPLACE_OLD_STATS,
    basic_filter        IN VARCHAR2 := NULL,
    sqlset_owner        IN VARCHAR2 := NULL,
    recursive_sql       IN VARCHAR2 := HAS_RECURSIVE_SQL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9599"></a>Parameters</p>
<div id="ARPLS68407" class="tblformal">
<p class="titleintable"><a id="sthref9600"></a><a id="sthref9601"></a>Table 140-12 CAPTURE_CURSOR_CACHE_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="CAPTURE_CURSOR_CACHE_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CAPTURE_CURSOR_CACHE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t20">Parameter</th>
<th class="cellalignment1227" id="r1c2-t20">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t20" headers="r1c1-t20">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t20 r1c2-t20">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t20" headers="r1c1-t20">
<p><code>time_limit</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t20 r1c2-t20">
<p>The total amount of time, in seconds, to execute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t20" headers="r1c1-t20">
<p><code>repeat_interval</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t20 r1c2-t20">
<p>The amount of time, in seconds, to pause between sampling</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t20" headers="r1c1-t20">
<p><code>capture_option</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t20 r1c2-t20">
<p>During capture, either insert new statements, update existing statements, or both. '<code>INSERT</code>', '<code>UPDATE</code>', or '<code>MERGE</code>' just like <code>load_option</code> in <code>load_sqlset</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t20" headers="r1c1-t20">
<p><code>capture_mode</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t20 r1c2-t20">
<p>Capture mode (<code>UPDATE</code> and <code>MERGE</code> capture options). Possible values:</p>
<ul>
<li>
<p><code>MODE_REPLACE_OLD_STATS</code> - Replace statistics when the number of executions seen is greater than that stored in the SQL tuning set</p>
</li>
<li>
<p><code>MODE_ACCUMULATE_STATS</code> - Add new values to current values for SQL we already store. Note that this mode detects if a statement has been aged out, so the final value for a statistics is the sum of the statistics of all cursors that statement existed under.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t20" headers="r1c1-t20">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t20 r1c2-t20">
<p>Filter to apply to cursor cache on each sampling (see <code>SELECT_XXX</code> subprograms). If <code>basic_filter</code> is not set by the caller, the subprogram captures only statements of the type <code>CREATE TABLE</code>, <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>MERGE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t20" headers="r1c1-t20">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t20 r1c2-t20">
<p>The owner of the SQL tuning set or <code>NULL</code> for current schema owner</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t20" headers="r1c1-t20">
<p><code>recursive_sql</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t20 r1c2-t20">
<p>Filter that includes recursive SQL in the SQL tuning set (<code>HAS_RECURSIVE_SQL</code>) or excludes it (<code>NO_RECURSIVE_SQL</code>).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9602"></a>Examples</p>
<p>In this example capture takes place over a 30-second period, polling the cache once every five seconds. This captures all statements run during that period but not before or after. If the same statement appears a second time, the process replaces the stored statement with the new occurrence.</p>
<p>Note that in production systems the time limit and repeat interval would be set much higher. You should tune the <code>time_limit</code> and <code>repeat_interval</code> parameters based on the workload time and cursor cache turnover properties of your system.</p>
<pre>
 
EXEC DBMS_SQLTUNE.CAPTURE_CURSOR_CACHE_SQLSET( -
                                        sqlset_name     =&gt; 'my_workload', -
                                        time_limit      =&gt;  30, -
                                        repeat_interval =&gt;  5);
</pre>
<p>In the following call you accumulate execution statistics as you go. This option produces an accurate picture of the cumulative activity of each cursor, even across age-outs, but it is more expensive than the previous example.</p>
<pre>
EXEC DBMS_SQLTUNE.CAPTURE_CURSOR_CACHE_SQLSET( -
                         sqlset_name     =&gt; 'my_workload', -
                         time_limit      =&gt; 30, -
                         repeat_interval =&gt; 5, -
                         capture_mode    =&gt; dbms_sqltune.MODE_ACCUMULATE_STATS);
 
</pre>
<p>This call performs a very inexpensive capture where you only insert new statements and do not update their statistics once they have been inserted into the SQL tuning set</p>
<pre>
EXEC DBMS_SQLTUNE.CAPTURE_CURSOR_CACHE_SQLSET( -
                                    sqlset_name     =&gt; 'my_workload', -
                                    time_limit      =&gt; 30, -
                                    repeat_interval =&gt; 5, -
                                    capture_option  =&gt; 'INSERT');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72128" class="refsect2"><a id="CHDFECGH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9603"></a>CREATE_SQL_PLAN_BASELINE Procedure</h3>
<p>This procedure creates a SQL plan baseline for an execution plan. It can be used in the context of an Alternative Plan Finding made by the SQL Tuning Advisor.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9604"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CREATE_SQL_PLAN_BASELINE (
   task_name            IN VARCHAR2,
   object_id            IN NUMBER := NULL,
   plan_hash_value      IN NUMBER,
   owner_name           IN VARCHAR2 := NULL); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9605"></a>Parameters</p>
<div id="ARPLS72129" class="tblformal">
<p class="titleintable"><a id="sthref9606"></a><a id="sthref9607"></a>Table 140-13 CREATE_SQL_PLAN_BASELINE Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_SQL_PLAN_BASELINE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t22">Parameter</th>
<th class="cellalignment1227" id="r1c2-t22">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t22" headers="r1c1-t22">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t22 r1c2-t22">
<p>Name of the task for which to get a script</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t22" headers="r1c1-t22">
<p><code>object_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t22 r1c2-t22">
<p>Object ID to which the SQL corresponds</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t22" headers="r1c1-t22">
<p><code>plan_hash_value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t22 r1c2-t22">
<p>Plan to create plan baseline</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t22" headers="r1c1-t22">
<p>owner_name</p>
</td>
<td class="cellalignment1228" headers="r5c1-t22 r1c2-t22">
<p>Owner of the relevant tuning task. Defaults to the current schema owner.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68408" class="refsect2"><a id="i1006897"></a>
<hr />
<h3 class="refsect2"><a id="sthref9608"></a>CREATE_SQLSET Procedure and Function</h3>
<p>The procedure creates a SQL tuning set object in the database.</p>
<p>The function causes the system to generate a name for the SQL tuning set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9609"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CREATE_SQLSET (
   sqlset_name  IN  VARCHAR2,
   description  IN  VARCHAR2 := NULL
   sqlset_owner IN  VARCHAR2 := NULL);
</pre>
<pre>
DBMS_SQLTUNE.CREATE_SQLSET (
   sqlset_name  IN  VARCHAR2 := NULL,
   description  IN  VARCHAR2 := NULL,
   sqlset_owner IN  VARCHAR2 := NULL)
 RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9610"></a>Parameters</p>
<div id="ARPLS68409" class="tblformal">
<p class="titleintable"><a id="sthref9611"></a><a id="sthref9612"></a>Table 140-14 CREATE_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Parameter</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t24" headers="r1c1-t24">
<p><code>description</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t24 r1c2-t24">
<p>The description of the SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t24" headers="r1c1-t24">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t24 r1c2-t24">
<p>The owner of the SQL tuning set, or <code>NULL</code> for the current schema owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9613"></a>Examples</p>
<pre>
EXEC DBMS_SQLTUNE.CREATE_SQLSET(- 
  sqlset_name =&gt; 'my_workload', -
  description =&gt; 'complete application workload');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68410" class="refsect2"><a id="CACHIGBF"></a>
<hr />
<h3 class="refsect2"><a id="sthref9614"></a>CREATE_STGTAB_SQLPROF Procedure</h3>
<p>This procedure creates the staging table used for copying SQL profiles from one system to another.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9615"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CREATE_STGTAB_SQLPROF (
   table_name            IN VARCHAR2,
   schema_name           IN VARCHAR2 := NULL,
   tablespace_name       IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9616"></a>Parameters</p>
<div id="ARPLS68411" class="tblformal">
<p class="titleintable"><a id="sthref9617"></a><a id="sthref9618"></a>Table 140-15 CREATE_STGTAB_SQLPROF Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_STGTAB_SQLPROF Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t26">Parameter</th>
<th class="cellalignment1227" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t26" headers="r1c1-t26">
<p><code>table_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t26 r1c2-t26">
<p>The name of the table to create (case-insensitive unless double quoted). Required.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t26" headers="r1c1-t26">
<p><code>schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t26 r1c2-t26">
<p>The schema to create the table in, or <code>NULL</code> for current schema (case-insensitive unless double quoted)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t26" headers="r1c1-t26">
<p><code>tablespace_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t26 r1c2-t26">
<p>The tablespace to store the staging table within, or <code>NULL</code> for current user's default tablespace (case-insensitive unless double quoted)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9619"></a>Usage Notes</p>
<ul>
<li>
<p>Call this procedure once before issuing a call to the <a href="#CACFCAEC">PACK_STGTAB_SQLPROF Procedure</a>.</p>
</li>
<li>
<p>This procedure can be called multiple times if you would like to have different SQL profiles in different staging tables.</p>
</li>
<li>
<p>Note that this is a DDL operation, so it does not occur within a transaction.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9620"></a>Examples</p>
<p>Create a staging table to store profile data that can be moved to another system.</p>
<pre>
EXEC DBMS_SQLTUNE.CREATE_STGTAB_SQLPROF (table_name  =&gt; 'PROFILE_STGTAB');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68412" class="refsect2"><a id="CACBCEEH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9621"></a>CREATE_STGTAB_SQLSET Procedure</h3>
<p>This procedure creates a staging table through which SQL tuning sets are imported and exported</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9622"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.CREATE_STGTAB_SQLSET (
   table_name           IN VARCHAR2,
   schema_name          IN VARCHAR2 := NULL,
   tablespace_name      IN VARCHAR2 := NULL,
   db_version           IN NUMBER   := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9623"></a>Parameters</p>
<div id="ARPLS68413" class="tblformal">
<p class="titleintable"><a id="sthref9624"></a><a id="sthref9625"></a>Table 140-16 CREATE_STGTAB_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="CREATE_STGTAB_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t28">Parameter</th>
<th class="cellalignment1227" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t28" headers="r1c1-t28">
<p><code>table_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t28 r1c2-t28">
<p>Name of the table to create (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t28" headers="r1c1-t28">
<p><code>schema_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t28 r1c2-t28">
<p>Schema in which to create the table in, or <code>NULL</code> for current schema (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t28" headers="r1c1-t28">
<p><code>tablespace_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t28 r1c2-t28">
<p>Tablespace in which to store the staging table, or <code>NULL</code> for current user's default tablespace (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t28" headers="r1c1-t28">
<p><code>db_version</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t28 r1c2-t28">
<p>Database (DB) version determining the format of the staging table. User can also create an older DB version staging table to export STS to an older DB version. One of the following values:</p>
<ul>
<li>
<p><code>NULL</code> (default) &mdash; current DB version</p>
</li>
<li>
<p><code>STS_STGTAB_10_2_VERSION</code> &mdash; 10.2 DB version</p>
</li>
<li>
<p><code>STS_STGTAB_11_1_VERSION</code> &mdash; 11.1 DB version</p>
</li>
<li>
<p><code>STS_STGTAB_11_2_VERSION</code> &mdash; 11.2 DB version</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9626"></a>Usage Notes</p>
<ul>
<li>
<p>Call this procedure once before issuing a call to the <a href="#CACIFBAJ">PACK_STGTAB_SQLSET Procedure</a>.</p>
</li>
<li>
<p>This procedure can be called multiple times if you would like to have different tuning sets in different staging tables.</p>
</li>
<li>
<p>Note that this is a DDL operation, so it does not occur within a transaction.</p>
</li>
<li>
<p>Users issuing the call must have permission to <code>CREATE</code> <code>TABLE</code> in the schema provided and the relevant tablespace.</p>
</li>
<li>
<p>Please note that the staging table contains nested table columns and indexes, so it should not be renamed.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9627"></a>Examples</p>
<p><a id="ARPLS72942"></a><span class="subhead3">Create a staging table for packing and eventually exporting a SQL tuning sets&nbsp;</span></p>
<pre>
EXEC DBMS_SQLTUNE.CREATE_STGTAB_SQLSET(table_name =&gt; 'STGTAB_SQLSET');

</pre>
<p><a id="ARPLS72943"></a><span class="subhead3">Create a staging table to pack a SQL tuning set in Oracle Database 10<span class="italic">g</span> Release 2 (10.2) format&nbsp;</span></p>
<pre>
EXEC DBMS_SQLTUNE.CREATE_STGTAB_SQLSET(
   table_name =&gt; 'STGTAB_SQLSET',
   db_version =&gt; DBMS_SQLTUNE.STS_STGTAB_10_2_VERSION)

</pre>
<p><a id="ARPLS72944"></a><span class="subhead3">Create a staging table to pack a SQL tuning set in Oracle Databasae 11g Release 1 (11.1) format&nbsp;</span></p>
<pre>
EXEC DBMS_SQLTUNE.CREATE_STGTAB_SQLSET(
   table_name =&gt; 'STGTAB_SQLSET',
   db_version =&gt; DBMS_SQLTUNE.STS_STGTAB_11_1_VERSION)
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68414" class="refsect2"><a id="CHDGBCDB"></a>
<hr />
<h3 class="refsect2"><a id="sthref9628"></a>CREATE_TUNING_TASK Functions</h3>
<p>You can use different forms of this function to:</p>
<ul>
<li>
<p>Create a tuning task for a single statement given its text.</p>
</li>
<li>
<p>Create a tuning task for a single statement from the Cursor Cache given its identifier.</p>
</li>
<li>
<p>Create a tuning task for a single statement from the workload repository given a range of snapshot identifiers.</p>
</li>
<li>
<p>Create a tuning task for a SQL tuning set.</p>
</li>
<li>
<p>Create tuning task for a SQL Performance Analyzer</p>
</li>
</ul>
<p>In all cases, the function mainly creates an advisor task and sets its parameters.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9629"></a>Syntax</p>
<p>SQL text format:</p>
<pre>
DBMS_SQLTUNE.CREATE_TUNING_TASK(
  sql_text         IN CLOB,
  bind_list        IN sql_binds := NULL,
  user_name        IN VARCHAR2  := NULL,
  scope            IN VARCHAR2  := SCOPE_COMPREHENSIVE,
  time_limit       IN NUMBER    := TIME_LIMIT_DEFAULT,
  task_name        IN VARCHAR2  := NULL,
  description      IN VARCHAR2  := NULL)
RETURN VARCHAR2;
</pre>
<p>SQL ID format:</p>
<pre>
DBMS_SQLTUNE.CREATE_TUNING_TASK(
  sql_id           IN VARCHAR2,
  plan_hash_value  IN NUMBER    := NULL,
  scope            IN VARCHAR2  := SCOPE_COMPREHENSIVE,
  time_limit       IN NUMBER    := TIME_LIMIT_DEFAULT,
  task_name        IN VARCHAR2  := NULL,
  description      IN VARCHAR2  := NULL)
RETURN VARCHAR2;
</pre>
<p>Workload Repository format:</p>
<pre>
DBMS_SQLTUNE.CREATE_TUNING_TASK(
  begin_snap       IN NUMBER,
  end_snap         IN NUMBER,
  sql_id           IN VARCHAR2,
  plan_hash_value  IN NUMBER    := NULL,
  scope            IN VARCHAR2  := SCOPE_COMPREHENSIVE,
  time_limit       IN NUMBER    := TIME_LIMIT_DEFAULT,
  task_name        IN VARCHAR2  := NULL,
  description      IN VARCHAR2  := NULL)
RETURN VARCHAR2;
</pre>
<p>SQLSET format:</p>
<pre>
DBMS_SQLTUNE.CREATE_TUNING_TASK(
  sqlset_name       IN VARCHAR2,
  basic_filter      IN VARCHAR2 :=  NULL,
  object_filter     IN VARCHAR2 :=  NULL,
  rank1             IN VARCHAR2 :=  NULL,
  rank2             IN VARCHAR2 :=  NULL,
  rank3             IN VARCHAR2 :=  NULL,
  result_percentage IN NUMBER   :=  NULL,
  result_limit      IN NUMBER   :=  NULL,
  scope             IN VARCHAR2 :=  SCOPE_COMPREHENSIVE,
  time_limit        IN NUMBER   :=  TIME_LIMIT_DEFAULT,
  task_name         IN VARCHAR2 :=  NULL,
  description       IN VARCHAR2 :=  NULL
  plan_filter       IN VARCHAR2 :=  'MAX_ELAPSED_TIME',
  sqlset_owner      IN VARCHAR2 :=  NULL)
RETURN VARCHAR2;
</pre>
<p>SQL Performance Analyzer format:</p>
<pre>
DBMS_SQLTUNE.CREATE_TUNING_TASK(
   spa_task_name     IN VARCHAR2,
   spa_task_owner    IN VARCHAR2 :=  NULL,
   spa_compare_exec  IN VARCHAR2 :=  NULL,
   basic_filter      IN VARCHAR2 :=  NULL,
   time_limit        IN NUMBER   :=  TIME_LIMIT_DEFAULT,
   task_name         IN VARCHAR2 :=  NULL,
   description       IN VARCHAR2 :=  NULL)
 RETURN VARCHAR2; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9630"></a>Parameters</p>
<div id="ARPLS68415" class="tblformal">
<p class="titleintable"><a id="sthref9631"></a><a id="sthref9632"></a>Table 140-17 <span class="bolditalic">CREATE_TUNING_TASK Function Parameters</span></p>
<table class="cellalignment1229" title="CREATE_TUNING_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t30">Parameter</th>
<th class="cellalignment1227" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t30" headers="r1c1-t30">
<p><code>sql_text</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t30 r1c2-t30">
<p>Text of a SQL statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t30" headers="r1c1-t30">
<p><code>begin_snap</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t30 r1c2-t30">
<p>Begin snapshot identifier</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t30" headers="r1c1-t30">
<p><code>end_snap</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t30 r1c2-t30">
<p>End snapshot identifier</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t30" headers="r1c1-t30">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t30 r1c2-t30">
<p>Identifier of a SQL statement</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t30" headers="r1c1-t30">
<p><code>bind_list</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t30 r1c2-t30">
<p>An ordered list of bind values in ANYDATA type</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t30" headers="r1c1-t30">
<p><code>plan_hash_value</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t30 r1c2-t30">
<p>Hash value of the SQL execution plan</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t30" headers="r1c1-t30">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t30 r1c2-t30">
<p>SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t30" headers="r1c1-t30">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t30 r1c2-t30">
<p>SQL predicate to filter the SQL from the SQL tuning set</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t30" headers="r1c1-t30">
<p><code>object_filter</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t30 r1c2-t30">
<p>Object filter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t30" headers="r1c1-t30">
<p><code>rank(i)</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t30 r1c2-t30">
<p>Order-by clause on the selected SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t30" headers="r1c1-t30">
<p><code>result_percentage</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t30 r1c2-t30">
<p>Percentage on the sum of a ranking measure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t30" headers="r1c1-t30">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t30 r1c2-t30">
<p>Top L(imit) SQL from the (filtered/ranked) SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t30" headers="r1c1-t30">
<p><code>user_name</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t30 r1c2-t30">
<p>Username for whom the statement is to be tuned</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t30" headers="r1c1-t30">
<p><code>scope</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t30 r1c2-t30">
<p>Tuning scope (limited/comprehensive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t30" headers="r1c1-t30">
<p><code>time_limit</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t30 r1c2-t30">
<p>The maximum duration in seconds for the tuning session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t30" headers="r1c1-t30">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t30 r1c2-t30">
<p>Optional tuning task name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t30" headers="r1c1-t30">
<p><code>description</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t30 r1c2-t30">
<p>Description of the SQL tuning session to a maximum of 256 characters</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t30" headers="r1c1-t30">
<p><code>plan_filter</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t30 r1c2-t30">
<p>Plan filter. It is applicable in case there are multiple plans (<code>plan_hash_value</code>) associated with the same statement. This filter allows for selecting one plan (<code>plan_hash_value</code>) only. Possible values are:</p>
<ul>
<li>
<p><code>LAST_GENERATED</code>: plan with the most recent timestamp</p>
</li>
<li>
<p><code>FIRST_GENERATED</code>: plan with the earliest timestamp, the opposite to <code>LAST_GENERATED</code></p>
</li>
<li>
<p><code>LAST_LOADED</code>: plan with the most recent <code>first_load_time</code> statistics information</p>
</li>
<li>
<p><code>FIRST_LOADED</code>: plan with the earliest <code>first_load_time</code> statistics information, the opposite to <code>LAST_LOADED</code></p>
</li>
<li>
<p><code>MAX_ELAPSED_TIME</code>: plan with the maximum elapsed time</p>
</li>
<li>
<p><code>MAX_BUFFER_GETS</code>: plan with the maximum buffer gets</p>
</li>
<li>
<p><code>MAX_DISK_READS</code>: plan with the maximum disk reads</p>
</li>
<li>
<p><code>MAX_DIRECT_WRITES</code>: plan with the maximum direct writes</p>
</li>
<li>
<p><code>MAX_OPTIMIZER_COST</code>: plan with the maximum optimizer cost</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t30" headers="r1c1-t30">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t30 r1c2-t30">
<p>Owner of the SQL tuning set, or <code>NULL</code> for the current schema owner</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t30" headers="r1c1-t30">
<p><code>spa_task_name</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t30 r1c2-t30">
<p>Name of the SQL Performance Analyzer task whose regressions are to be tuned</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t30" headers="r1c1-t30">
<p><code>spa_task_owner</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t30 r1c2-t30">
<p>Owner of specified SQL Performance Analyzer task or <code>NULL</code> for current user</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t30" headers="r1c1-t30">
<p><code>spa_compare_exec</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t30 r1c2-t30">
<p>Execution name of Compare Performance trial of SQL Performance Analyzer task. If <code>NULL</code>, we use the most recent execution of the given SQL Performance Analyzer task, of type <code>COMPARE</code> <code>PERFORMANCE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9633"></a>Return Values</p>
<p>A SQL tuning task name that is unique by user (two different users can give the same name to their advisor tasks).</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9634"></a>Usage Notes</p>
<p>With regard to the form of this subprogram that takes a SQL tuning set, filters provided to this function are evaluated as part of a SQL run by the current user. As such, they are executed with that user's security privileges and can contain any constructs and subqueries that user can access, but no more.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9635"></a>Examples</p>
<pre>
variable stmt_task VARCHAR2(64);
variable sts_task  VARCHAR2(64);
variable spa_tune_task VARCHAR2(64);
</pre>
<p class="subhead2"><a id="ARPLS73097"></a>Create Tuning Task with SQL Text format</p>
<pre>
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK( -
  sql_text =&gt; 'select quantity_sold from sales s, times t where s.time_id = t.time_id and s.time_id = TO_DATE(''24-NOV-00'')');
</pre>
<p class="subhead2"><a id="ARPLS73098"></a>Create Tuning Task with SQL ID format</p>
<pre>
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(sql_id =&gt; 'ay1m3ssvtrh24');
 
-- tune in limited scope 
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(sql_id =&gt; 'ay1m3ssvtrh24', -
   scope =&gt; 'LIMITED');
 
-- only give 10 minutes for tuning statement
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(sql_id =&gt; 'ay1m3ssvtrh24', -
   time_limit =&gt; 600);
</pre>
<p class="subhead2"><a id="ARPLS73099"></a>Create Tuning Task with AWR Snapshot format</p>
<pre>
EXEC :stmt_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(begin_snap =&gt; 1, -
   end_snap =&gt; 2, sql_id =&gt; 'ay1m3ssvtrh24');
</pre>
<p class="subhead2"><a id="ARPLS73100"></a>Create Tuning Task with SQL Tuning Set format</p>
<pre>
-- First we need to load an STS, then tune it
-- Tune our statements in order by buffer gets, time limit of one hour
-- the default ranking measure is elapsed time.
EXEC :sts_task := DBMS_SQLTUNE.CREATE_TUNING_TASK( -
  sqlset_name  =&gt; 'my_workload', -
  rank1        =&gt; 'BUFFER_GETS', -
  time_limit   =&gt; 3600, -
  description  =&gt; 'tune my workload ordered by buffer gets');
</pre>
<p><a id="ARPLS73480"></a><span class="subhead3">Create Tuning Task with SPA Task format&nbsp;</span></p>
<pre>
-- Tune the SQLs that were reported as having regressed from the compare 
-- performance execution of the SPA task named task_123
EXEC :spa_tune_task := DBMS_SQLTUNE.CREATE_TUNING_TASK(
   spa_task_name     =&gt; 'task_123',
   spa_task_owner    =&gt; 'SCOTT',
   spa_compare_exec  =&gt; 'exec1');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68416" class="refsect2"><a id="i1006898"></a>
<hr />
<h3 class="refsect2"><a id="sthref9636"></a>DELETE_SQLSET Procedure</h3>
<p>This procedure deletes a set of SQL statements from a SQL tuning set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9637"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.DELETE_SQLSET (
   sqlset_name   IN  VARCHAR2,
   basic_filter  IN  VARCHAR2 := NULL,
   sqlset_owner  IN  VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9638"></a>Parameters</p>
<div id="ARPLS68417" class="tblformal">
<p class="titleintable"><a id="sthref9639"></a><a id="sthref9640"></a>Table 140-18 DELETE_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="DELETE_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.DELETE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t32">Parameter</th>
<th class="cellalignment1227" id="r1c2-t32">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t32" headers="r1c1-t32">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t32 r1c2-t32">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t32" headers="r1c1-t32">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t32 r1c2-t32">
<p>SQL predicate to filter the SQL from the SQL tuning set. This basic filter is used as a where clause on the SQL tuning set content to select a desired subset of SQL from the Tuning Set.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t32" headers="r1c1-t32">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t32 r1c2-t32">
<p>The owner of the SQL tuning set, or <code>NULL</code> for current schema owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9641"></a>Examples</p>
<pre>
-- Delete all statements in a sql tuning set.
EXEC DBMS_SQLTUNE.DELETE_SQLSET(sqlset_name   =&gt; 'my_workload');
 
-- Delete all statements in a sql tuning set which ran for less than a second
EXEC DBMS_SQLTUNE.DELETE_SQLSET(sqlset_name   =&gt; 'my_workload', -
                                basic_filter  =&gt; 'elapsed_time &lt; 1000000');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68418" class="refsect2"><a id="i1007819"></a>
<hr />
<h3 class="refsect2"><a id="sthref9642"></a>DROP_SQL_PROFILE Procedure</h3>
<p>This procedure drops the named SQL profile from the database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9643"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.DROP_SQL_PROFILE (
   name          IN  VARCHAR2,
   ignore        IN  BOOLEAN  := FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9644"></a>Parameters</p>
<div id="ARPLS68419" class="tblformal">
<p class="titleintable"><a id="sthref9645"></a><a id="sthref9646"></a>Table 140-19 DROP_SQL_PROFILE Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_SQL_PROFILE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.DROP_SQL_PROFILE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t34">Parameter</th>
<th class="cellalignment1227" id="r1c2-t34">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t34" headers="r1c1-t34">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t34 r1c2-t34">
<p>The (mandatory) name of SQL profile to be dropped. The name is case sensitive.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t34" headers="r1c1-t34">
<p><code>ignore</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t34 r1c2-t34">
<p>Ignores errors due to object not existing</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9647"></a>Usage Notes</p>
<p>Requires the "<code>DROP</code> <code>ANY</code> <code>SQL PROFILE</code>" privilege.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9648"></a>Examples</p>
<pre>
-- Drop the profile:
EXEC DBMS_SQLTUNE.DROP_SQL_PROFILE(:pname);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68420" class="refsect2"><a id="i1007711"></a>
<hr />
<h3 class="refsect2"><a id="sthref9649"></a>DROP_SQLSET Procedure</h3>
<p>This procedure drops a SQL tuning set if it is not active.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9650"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.DROP_SQLSET (
   sqlset_name   IN  VARCHAR2,
   sqlset_owner  IN  VARCHAR2 := NULL); 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9651"></a>Parameters</p>
<div id="ARPLS68421" class="tblformal">
<p class="titleintable"><a id="sthref9652"></a><a id="sthref9653"></a>Table 140-20 DROP_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.DROP_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t36">Parameter</th>
<th class="cellalignment1227" id="r1c2-t36">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t36" headers="r1c1-t36">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t36 r1c2-t36">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t36" headers="r1c1-t36">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t36 r1c2-t36">
<p>The owner of the SQL tuning set, or <code>NULL</code> for current schema owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9654"></a>Usage Notes</p>
<p>You cannot drop a SQL tuning set when it is referenced by one or more clients.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9655"></a>Examples</p>
<pre>
-- Drop the sqlset.
EXEC DBMS_SQLTUNE.DROP_SQLSET ('my_workload');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68422" class="refsect2"><a id="CHDIGHHA"></a>
<hr />
<h3 class="refsect2"><a id="sthref9656"></a>DROP_TUNING_TASK Procedure</h3>
<p>This procedure drops a SQL tuning task. The task and all its result data are deleted.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9657"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.DROP_TUNING_TASK(
 task_name         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9658"></a>Parameters</p>
<div id="ARPLS68423" class="tblformal">
<p class="titleintable"><a id="sthref9659"></a><a id="sthref9660"></a>Table 140-21 DROP_TUNING_TASK Procedure Parameters</p>
<table class="cellalignment1229" title="DROP_TUNING_TASK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.DROP_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t38">Parameter</th>
<th class="cellalignment1227" id="r1c2-t38">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t38" headers="r1c1-t38">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t38 r1c2-t38">
<p>The name of the tuning task to drop</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68424" class="refsect2"><a id="CHDGEJJA"></a>
<hr />
<h3 class="refsect2"><a id="sthref9661"></a>EXECUTE_TUNING_TASK Function &amp; Procedure</h3>
<p>This function and procedure executes a previously created tuning task. Both the function and the procedure run in the context of a new task execution. The difference is that the function version returns that new execution name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9662"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.EXECUTE_TUNING_TASK(
   task_name         IN VARCHAR2,
   execution_name    IN VARCHAR2               := NULL,
   execution_params  IN dbms_advisor.argList   := NULL,
   execution_desc    IN VARCHAR2               := NULL)
 RETURN VARCHAR2;
</pre>
<pre>
DBMS_SQLTUNE.EXECUTE_TUNING_TASK(
   task_name         IN VARCHAR2,
   execution_name    IN VARCHAR2               := NULL,
   execution_params  IN dbms_advisor.argList   := NULL,
   execution_desc    IN VARCHAR2               := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9663"></a>Parameters</p>
<div id="ARPLS68425" class="tblformal">
<p class="titleintable"><a id="sthref9664"></a><a id="sthref9665"></a>Table 140-22 EXECUTE_TUNING_TASK Function &amp; Procedure Parameters</p>
<table class="cellalignment1229" title="EXECUTE_TUNING_TASK Function &amp; Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.EXECUTE_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t40">Parameter</th>
<th class="cellalignment1227" id="r1c2-t40">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t40" headers="r1c1-t40">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t40 r1c2-t40">
<p>Name of the tuning task to execute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t40" headers="r1c1-t40">
<p>execution_name</p>
</td>
<td class="cellalignment1228" headers="r3c1-t40 r1c2-t40">
<p>A name to qualify and identify an execution. If not specified, it is generated by the advisor and returned by function.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t40" headers="r1c1-t40">
<p>execution_params</p>
</td>
<td class="cellalignment1228" headers="r4c1-t40 r1c2-t40">
<p>List of parameters (name, value) for the specified execution. The execution parameters have effect only on the execution for which they are specified. They override the values for the parameters stored in the task (set through the <a href="#CHDGAJDB">SET_TUNING_TASK_PARAMETER Procedures</a>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t40" headers="r1c1-t40">
<p><code>execution_desc</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t40 r1c2-t40">
<p>A 256-length string describing the execution</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9666"></a>Usage Notes</p>
<p>A tuning task can be executed multiples times without having to reset it.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9667"></a>Examples</p>
<pre>
EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK(:stmt_task);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68426" class="refsect2"><a id="BABIECBJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref9668"></a>IMPLEMENT_TUNING_TASK Function</h3>
<p>This function implements a set of SQL profile recommendations made by the SQL Tuning Advisor. Call this subprogram is equivalent to calling the <a href="#CHDCHDED">SCRIPT_TUNING_TASK Function</a> and then running the script.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9669"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.IMPLEMENT_TUNING_TASK(
    task_name      IN VARCHAR2,
    rec_type       IN VARCHAR2 := REC_TYPE_SQL_PROFILES,
    owner_name     IN VARCHAR2 := NULL,
    execution_name IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9670"></a>Parameters</p>
<div id="ARPLS68427" class="tblformal">
<p class="titleintable"><a id="sthref9671"></a><a id="sthref9672"></a>Table 140-23 IMPLEMENT_TUNING_TASK Function Parameters</p>
<table class="cellalignment1229" title="IMPLEMENT_TUNING_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.IIMPLEMENT_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t42">Parameter</th>
<th class="cellalignment1227" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t42" headers="r1c1-t42">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t42 r1c2-t42">
<p>Name of the tuning task for which to implement recommendations</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t42" headers="r1c1-t42">
<p>rec_type</p>
</td>
<td class="cellalignment1228" headers="r3c1-t42 r1c2-t42">
<p>Filter the types of recommendations to implement. Only '<code>PROFILES</code>' is supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t42" headers="r1c1-t42">
<p><code>owner_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t42 r1c2-t42">
<p>Owner of the relevant tuning task or <code>NULL</code> for the current user.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t42" headers="r1c1-t42">
<p><code>execution_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t42 r1c2-t42">
<p>name of the task execution to use. If <code>NULL</code>, recommendations from the last task execution are implemented.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68428" class="refsect2"><a id="CHDFIFAF"></a>
<hr />
<h3 class="refsect2"><a id="sthref9673"></a>INTERRUPT_TUNING_TASK Procedure</h3>
<p>This procedure interrupts the currently executing tuning task. The task ends its operations as it would at normal exit so that the user can access the intermediate results.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9674"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.INTERRUPT_TUNING_TASK(
 task_name         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9675"></a>Parameters</p>
<div id="ARPLS68429" class="tblformal">
<p class="titleintable"><a id="sthref9676"></a><a id="sthref9677"></a>Table 140-24 INTERRUPT_TUNING_TASK Procedure Parameters</p>
<table class="cellalignment1229" title="INTERRUPT_TUNING_TASK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.INTERRUPT_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t44">Parameter</th>
<th class="cellalignment1227" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t44" headers="r1c1-t44">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t44 r1c2-t44">
<p>Name of the tuning task to interrupt</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9678"></a>Examples</p>
<pre>
EXEC DBMS_SQLTUNE.INTERRUPT_TUNING_TASK(:my_task);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68430" class="refsect2"><a id="i1006951"></a>
<hr />
<h3 class="refsect2"><a id="sthref9679"></a>LOAD_SQLSET Procedure</h3>
<p>This procedure populates the SQL tuning set with a set of selected SQL. You can call the procedure multiple times to add new SQL statements or replace attributes of existing statements.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9680"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.LOAD_SQLSET (
   sqlset_name       IN  VARCHAR2,
   populate_cursor   IN  sqlset_cursor,
   load_option       IN VARCHAR2 := 'INSERT', 
   update_option     IN VARCHAR2 := 'REPLACE', 
   update_condition  IN VARCHAR2 :=  NULL,
   update_attributes IN VARCHAR2 :=  NULL,
   ignore_null       IN BOOLEAN  :=  TRUE,
   commit_rows       IN POSITIVE :=  NULL,
   sqlset_owner      IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9681"></a>Parameters</p>
<div id="ARPLS68431" class="tblformal">
<p class="titleintable"><a id="sthref9682"></a><a id="sthref9683"></a>Table 140-25 LOAD_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="LOAD_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.LOAD_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t46">Parameter</th>
<th class="cellalignment1227" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t46" headers="r1c1-t46">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t46 r1c2-t46">
<p>The SQL tuning set name to populate</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t46" headers="r1c1-t46">
<p><code>populate_cursor</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t46 r1c2-t46">
<p>The cursor reference from which to populate</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t46" headers="r1c1-t46">
<p><code>load_option</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t46 r1c2-t46">
<p>Specifies how the statements are loaded into the SQL tuning set. The possible values are:</p>
<ul>
<li>
<p><code>INSERT</code> (default) - add only new statements</p>
</li>
<li>
<p><code>UPDATE</code> - update existing the SQL statements and ignores any new statements</p>
</li>
<li>
<p><code>MERGE</code> - this is a combination of the two other options. This option inserts new statements and updates the information of the existing ones.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t46" headers="r1c1-t46">
<p><code>update_option</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t46 r1c2-t46">
<p>Specifies how the existing statements are updated. This parameter is considered only if load_option is specified with '<code>UPDATE</code>'/'<code>MERGE</code>' as an option. The possible values are:</p>
<ul>
<li>
<p><code>REPLACE</code> (default) - update the statement using the new statistics, bind list, object list, and so on.</p>
</li>
<li>
<p><code>ACCUMULATE</code> - when possible combine attributes (for example, statistics like <code>elapsed_time</code>, and so on) otherwise just replace the old values (for example, module, action, and so on) by the new provided ones. The SQL statement attributes that can be accumulated are: <code>elapsed_time</code>, <code>buffer_gets</code>, <code>direct_writes</code>, <code>disk_reads</code>, <code>row_processed</code>, <code>fetches</code>, <code>executions</code>, <code>end_of_fetch_count</code>, <code>stat_period</code> and <code>active_stat_period</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t46" headers="r1c1-t46">
<p><code>update_condition</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t46 r1c2-t46">
<p>Specifies a where clause to execute the update operation. The update is performed only if the specified condition is true. The condition can refer to either the data source or destination. The condition must use the following prefixes to refer to attributes from the source or the destination:</p>
<ul>
<li>
<p><code>OLD</code> - to refer to statement attributes from the SQL tuning set (destination)</p>
</li>
<li>
<p><code>NEW</code> - to refer to statements attributes from the input statements (source)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t46" headers="r1c1-t46">
<p><code>update_attributes</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t46 r1c2-t46">
<p>Specifies the list of a SQL statement attributes to update during a merge or update operation.The possible values are:</p>
<ul>
<li>
<p><code>NULL</code> (default) - the content of the input cursor except the execution context. On other terms, it is equivalent to <code>ALL</code> without execution context like module, action, and so on.</p>
</li>
<li>
<p><code>BASIC</code> - statistics and binds only</p>
</li>
<li>
<p><code>TYPICAL</code> - <code>BASIC</code> + SQL plans (without row source statistics) and without object reference list</p>
</li>
<li>
<p><code>ALL</code> - all attributes including the execution context attributes like module, action, and so on.</p>
</li>
<li>
<p>List of comma separated attribute names to update - <code>EXECUTION_CONTEXT</code>, <code>EXECUTION_STATISTICS</code>, <code>BIND_LIST</code>, <code>OBJECT_LIST</code>, <code>SQL_PLAN</code>, <code>SQL_PLAN_STATISTICS</code> (similar to <code>SQL_PLAN</code> + row source statistics)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t46" headers="r1c1-t46">
<p><code>ignore_null</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t46 r1c2-t46">
<p>If <code>TRUE</code> do not update an attribute if the new value is <code>NULL</code>. That is, do not override with <code>NULL</code> values unless intentional.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t46" headers="r1c1-t46">
<p><code>commit_rows</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t46 r1c2-t46">
<p>If a value is provided, the load commits after each set of that many statements is inserted. If <code>NULL</code> is provided, the load commits only once, at the end of the operation. Providing a value for this argument allows you to monitor the progress of a SQL tuning set load operation in the <code>DBA_</code>/<code>USER_SQLSET</code> views. The <code>STATEMENT_COUNT</code> value increases as new SQL statements are loaded.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t46" headers="r1c1-t46">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t46 r1c2-t46">
<p>The owner of the SQL tuning set, or the current schema owner or <code>NULL</code> for current owner</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9684"></a>Exceptions</p>
<ul>
<li>
<p>This procedure returns an error when <code>sqlset_name</code> is invalid, or a corresponding SQL tuning set does not exist, or the <code>populate_cursor</code> is incorrect and cannot be executed.</p>
</li>
<li>
<p>Exceptions are also raised when invalid filters are provided. Filters can be invalid either because they don't parse (for example, they refer to attributes not in sqlset_row), or because they violate the user's privileges.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9685"></a>Usage Notes</p>
<p>Rows in the input <code>populate_cursor</code> must be of type <code>SQLSET_ROW</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9686"></a>Examples</p>
<p>In this example, you create and populate a SQL tuning set with all cursor cache statements with an elapsed time of 5 seconds or more excluding statements that belong to <code>SYS</code> schema (to simulate an application user workload). You select all attributes of the SQL statements and load them in the tuning set using the default mode, which loads only new statements, since the SQL tuning set is empty.</p>
<pre>
-- create the tuning set
EXEC DBMS_SQLTUNE.CREATE_SQLSET('my_workload');
-- populate the tuning set from the cursor cache
DECLARE
 cur DBMS_SQLTUNE.SQLSET_CURSOR;
BEGIN
 OPEN cur FOR
   SELECT VALUE(P)
     FROM table(
       DBMS_SQLTUNE.SELECT_CURSOR_CACHE(
         'parsing_schema_name &lt;&gt; ''SYS'' AND elapsed_time &gt; 5000000',
          NULL, NULL, NULL, NULL, 1, NULL,
         'ALL')) P;
 
DBMS_SQLTUNE.LOAD_SQLSET(sqlset_name =&gt; 'my_workload',
                        populate_cursor =&gt; cur);
 
END;
/ 
</pre>
<p>Suppose now you wish to augment this information with what is stored in the workload repository (AWR). You populate the tuning set with <code>'ACCUMULATE'</code> as your <code>update_option</code> because it is assumed the cursors currently in the cache had aged out since the snapshot was taken.</p>
<p>You omit the <code>elapsed_time</code> filter because it is assumed that any statement captured in AWR is important, but still you throw away the <code>SYS</code>-parsed cursors to avoid recursive SQL.</p>
<pre>
DECLARE
  cur DBMS_SQLTUNE.SQLSET_CURSOR;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P)
      FROM table(
        DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY(1,2,
                                                'parsing_schema_name &lt;&gt; ''SYS''',
                                                NULL, NULL,NULL,NULL,
                                                1,
                                                NULL,
                                                'ALL')) P;

  DBMS_SQLTUNE.LOAD_SQLSET(sqlset_name =&gt; 'my_workload',
                           populate_cursor =&gt; cur,
                           Using DBMS_SQLTUNE
                           load_option =&gt; 'MERGE',
                           update_option =&gt; 'ACCUMULATE');
END;
</pre>
<p>The following example is a simple load that only inserts new statements from the workload repository, skipping existing ones (in the SQL tuning set). Note that <code>'INSERT'</code> is the default value for the <code>load_option</code> argument of the <code>LOAD_SQLSET</code> procedure.</p>
<pre>
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
  SELECT VALUE(P)
  FROM table(DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY(1,2)) P;
  
  DBMS_SQLTUNE.LOAD_SQLSET(sqlset_name =&gt; 'my_workload',
populate_cursor =&gt; cur);
END;
/
</pre>
<p>The next example demonstrates a load with <code>UPDATE</code> option. This updates statements that already exist in the SQL tuning set but does not add new ones. By default, old statistics are replaced by their new values.</p>
<pre>
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P)
    FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE) P;
  
  DBMS_SQLTUNE.LOAD_SQLSET(sqlset_name =&gt; 'my_workload',
                           populate_cursor =&gt; cur,
                           load_option =&gt; 'UPDATE');
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68432" class="refsect2"><a id="CACFCAEC"></a>
<hr />
<h3 class="refsect2"><a id="sthref9687"></a>PACK_STGTAB_SQLPROF Procedure</h3>
<p>This procedure copies profile data from the <code>SYS</code>. schema into the staging table.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9688"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (
   profile_name          IN VARCHAR2 := '%',
   profile_category      IN VARCHAR2 := 'DEFAULT',
   staging_table_name    IN VARCHAR2,
   staging_schema_owner  IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9689"></a>Parameters</p>
<div id="ARPLS68433" class="tblformal">
<p class="titleintable"><a id="sthref9690"></a><a id="sthref9691"></a>Table 140-26 PACK_STGTAB_SQLPROF Procedure Parameters</p>
<table class="cellalignment1229" title="PACK_STGTAB_SQLPROF Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t48">Parameter</th>
<th class="cellalignment1227" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t48" headers="r1c1-t48">
<p><code>profile_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t48 r1c2-t48">
<p>The name of the profile to pack (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t48" headers="r1c1-t48">
<p><code>profile_category</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t48 r1c2-t48">
<p>The category to pack profiles from (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t48" headers="r1c1-t48">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t48 r1c2-t48">
<p>The name of the table to use (case-insensitive unless double quoted). Required.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t48" headers="r1c1-t48">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t48 r1c2-t48">
<p>The schema where the table resides, or <code>NULL</code> for current schema (case-insensitive unless double quoted)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9692"></a>Usage Notes</p>
<ul>
<li>
<p>This procedures requires <code>ADMINISTER SQL MANAGEMENT OBJECT</code> privilege and <code>INSERT</code> privilege on the staging table.</p>
</li>
<li>
<p>Note that this function issues a <code>COMMIT</code> after packing each SQL profile, so if an error is raised mid-execution, clear the staging table by deleting its rows.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9693"></a>Examples</p>
<p>Put only those profiles in the <code>DEFAULT</code> category into the staging table. This corresponds to all profiles used by default on this system.</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (staging_table_name =&gt; 'PROFILE_STGTAB');
 
</pre>
<p>This is another example where you put all profiles into the staging table. Note this moves profiles that are not currently being used by default but are in other categories, such as for testing purposes.</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLPROF (profile_category =&gt; '%', -
                                      staging_table_name =&gt; 'PROFILE_STGTAB');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68434" class="refsect2"><a id="CACIFBAJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref9694"></a>PACK_STGTAB_SQLSET Procedure</h3>
<p>This procedure copies one or more SQL tuning sets from their location in the <code>SYS</code> schema to a staging table created by the <a href="#CACBCEEH">CREATE_STGTAB_SQLSET Procedure</a>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9695"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.PACK_STGTAB_SQLSET (
   sqlset_name          IN VARCHAR2,
   sqlset_owner         IN VARCHAR2 := NULL,
   staging_table_name   IN VARCHAR2,
   staging_schema_owner IN VARCHAR2 := NULL,
   db_version           IN NUMBER := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9696"></a>Parameters</p>
<div id="ARPLS68435" class="tblformal">
<p class="titleintable"><a id="sthref9697"></a><a id="sthref9698"></a>Table 140-27 PACK_STGTAB_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="PACK_STGTAB_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t50">Parameter</th>
<th class="cellalignment1227" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t50" headers="r1c1-t50">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t50 r1c2-t50">
<p>The name of the SQL tuning set to pack (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t50" headers="r1c1-t50">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t50 r1c2-t50">
<p>The category from which to pack SQL tuning sets (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t50" headers="r1c1-t50">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t50 r1c2-t50">
<p>The name of the table to use (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t50" headers="r1c1-t50">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t50 r1c2-t50">
<p>The schema where the table resides, or <code>NULL</code> for current schema (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t50" headers="r1c1-t50">
<p><code>db_version</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t50 r1c2-t50">
<p>Database (DB) version determining the format of the staging table. User can also create an older DB version staging table to export STS to an older DB version. One of the following values:</p>
<ul>
<li>
<p><code>NULL</code> (default) &mdash; current DB version</p>
</li>
<li>
<p><code>STS_STGTAB_10_2_VERSION</code> &mdash; 10.2 DB version</p>
</li>
<li>
<p><code>STS_STGTAB_11_1_VERSION</code> &mdash; 11.1 DB version</p>
</li>
<li>
<p><code>STS_STGTAB_11_2_VERSION</code> &mdash; 11.2 DB version</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9699"></a>Usage Notes</p>
<ul>
<li>
<p>This procedure can be called several times to move more than one SQL tuning set. Users can then move the populated staging table to another system using any method, such as database link or datapump. Users can then call the <a href="#CACJDGFI">UNPACK_STGTAB_SQLSET Procedure</a> create the SQL tuning set on the other system.</p>
</li>
<li>
<p>Note that this function issues a <code>COMMIT</code> after packing each SQL tuning set, so if an error is raised mid-execution, clear the staging table by deleting its rows.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9700"></a>Examples</p>
<p class="subhead2"><a id="ARPLS72947"></a>Put all SQL tuning sets on the system in the staging table</p>
<p>-- to create a staging table, see the <code>CREATE_STGTAB_SQLSET Procedure</code></p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(sqlset_name        =&gt; '%', -
                                     sqlset_owner       =&gt; '%', -
                                     staging_table_name =&gt; 'STGTAB_SQLSET');
</pre>
<p class="subhead2"><a id="ARPLS72948"></a>Put only those SQL tuning sets owned by the current user in the staging table</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(
   sqlset_name           =&gt; '%',
   staging_table_name    =&gt; 'STGTAB_SQLSET');
</pre>
<p class="subhead2"><a id="ARPLS72949"></a>Pack a specific SQL tuning set</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(
   sqlset_name           =&gt; 'my_workload', -
   staging_table_name    =&gt; 'STGTAB_SQLSET');
</pre>
<p class="subhead2"><a id="ARPLS72950"></a>Pack a second SQL tuning set</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(
   sqlset_name           =&gt; 'workload_subset', -
   staging_table_name    =&gt; 'STGTAB_SQLSET');
</pre>
<p class="subhead2"><a id="ARPLS72951"></a>Pack the STS my_workload to a staging table STGTAB_SQLSET created for Oracle Database 10<span class="italic">g</span> Release 2 (10.2)</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(
   sqlset_name          =&gt; 'workload_subset', 
   staging_table_name   =&gt; 'STGTAB_SQLSET', 
   db_version           =&gt; DBMS_SQLTUNE.STS_STGTAB_10_2_VERSION);
</pre>
<p class="subhead2"><a id="ARPLS72952"></a>Pack the STS my_workload to a staging table STGTAB_SQLSET created for Oracle Database 11<span class="italic">g</span> Release 1 (11.1)</p>
<pre>
EXEC DBMS_SQLTUNE.PACK_STGTAB_SQLSET(
   sqlset_name          =&gt; 'workload_subset', 
   staging_table_name   =&gt; 'STGTAB_SQLSET', 
   db_version           =&gt; DBMS_SQLTUNE.STS_STGTAB_11_1_VERSION);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68436" class="refsect2"><a id="CACGGJBG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9701"></a>REMAP_STGTAB_SQLPROF Procedure</h3>
<p>This procedure allows DBAs to change the profile data values kept in the staging table prior to performing an unpack operation. The procedure can be used to change the category of a profile.It can be used to change the name of a profile if one already exists on the system with the same name.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9702"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REMAP_STGTAB_SQLPROF (
  old_profile_name      IN VARCHAR2,
  new_profile_name      IN VARCHAR2 := NULL,
  new_profile_category  IN VARCHAR2 := NULL,
  staging_table_name    IN VARCHAR2,
  staging_schema_owner  IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9703"></a>Parameters</p>
<div id="ARPLS68437" class="tblformal">
<p class="titleintable"><a id="sthref9704"></a><a id="sthref9705"></a>Table 140-28 REMAP_STGTAB_SQLPROF Procedure Parameters</p>
<table class="cellalignment1229" title="REMAP_STGTAB_SQLPROF Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t52">Parameter</th>
<th class="cellalignment1227" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t52" headers="r1c1-t52">
<p><code>old_profile_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t52 r1c2-t52">
<p>The name of the profile to target for a remap operation (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t52" headers="r1c1-t52">
<p><code>new_profile_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t52 r1c2-t52">
<p>The new name of the profile, or <code>NULL</code> to remain the same (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t52" headers="r1c1-t52">
<p><code>new_profile_category</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t52 r1c2-t52">
<p>The new category for the profile, or <code>NULL</code> to remain the same (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t52" headers="r1c1-t52">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t52 r1c2-t52">
<p>The name of the table on which to perform the remap operation (case-sensitive). Required.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t52" headers="r1c1-t52">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t52 r1c2-t52">
<p>The schema where the table resides, or <code>NULL</code> for current schema (case-sensitive)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9706"></a>Usage Notes</p>
<p>Using this procedure requires the <code>UPDATE</code> privilege on the staging table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9707"></a>Examples</p>
<p>Change the name of a profile before we unpack, to avoid conflicts</p>
<pre>
EXEC DBMS_SQLTUNE.REMAP_STGTAB_SQLPROF(old_profile_name    =&gt; :pname,          -
                                       new_profile_name    =&gt; 'IMP' || :pname, -
                                       staging_table_name  =&gt; 'PROFILE_STGTAB'); 
 
</pre>
<p>Change the SQL profile in the staging table to be <code>'TEST'</code> category before we import it. This way users can test the profile on the new system before it is active.</p>
<pre>
EXEC DBMS_SQLTUNE.REMAP_STGTAB_SQLPROF(old_profile_name     =&gt; :pname,       -
                                       new_profile_category =&gt; 'TEST',       -
                                       staging_table_name   =&gt; 'PROFILE_STGTAB');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68438" class="refsect2"><a id="CACIFDFG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9708"></a>REMAP_STGTAB_SQLSET Procedure</h3>
<p>This procedure changes the tuning set names and owners in the staging table so that they can be unpacked with different values than they had on the host system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9709"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REMAP_STGTAB_SQLSET (
   old_sqlset_name        IN VARCHAR2,
   old_sqlset_owner       IN VARCHAR2 := NULL,
   new_sqlset_name        IN VARCHAR2 := NULL,
   new_sqlset_owner       IN VARCHAR2 := NULL,
   staging_table_name     IN VARCHAR2,
   taging_schema_owner   IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9710"></a>Parameters</p>
<div id="ARPLS68439" class="tblformal">
<p class="titleintable"><a id="sthref9711"></a><a id="sthref9712"></a>Table 140-29 REMAP_STGTAB_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="REMAP_STGTAB_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t54">Parameter</th>
<th class="cellalignment1227" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t54" headers="r1c1-t54">
<p><code>old_sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t54 r1c2-t54">
<p>The name of the tuning set to target for a remap operation. Wildcards are not supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t54" headers="r1c1-t54">
<p><code>old_sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t54 r1c2-t54">
<p>The new name of the tuning set owner to target for a remap operation. <code>NULL</code> for current schema owner</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t54" headers="r1c1-t54">
<p><code>new_sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t54 r1c2-t54">
<p>The new name for the tuning set, or <code>NULL</code> to keep the same tuning set name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t54" headers="r1c1-t54">
<p><code>new_sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t54 r1c2-t54">
<p>The new owner for the tuning set, or <code>NULL</code> to remain the same owner name.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t54" headers="r1c1-t54">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t54 r1c2-t54">
<p>The name of the table on which to perform the remap operation (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t54" headers="r1c1-t54">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t54 r1c2-t54">
<p>The name of staging table owner, or <code>NULL</code> for current schema owner (case-sensitive)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9713"></a>Usage Notes</p>
<p>You can call this procedure multiple times to remap more than one tuning set name or owner. Note that this procedure only handles one tuning set per call.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9714"></a>Examples</p>
<pre>
-- Change the name of an STS in the staging table before we unpack it.
EXEC DBMS_SQLTUNE.REMAP_STGTAB_SQLSET(old_sqlset_name    =&gt; 'my_workload', -
                                      old_sqlset_owner   =&gt; 'SH', -
                                      new_sqlset_name    =&gt; 'imp_workload', -
                                      staging_table_name =&gt; 'STGTAB_SQLSET');
 
-- Change the owner of an STS in the staging table before we unpack it.
EXEC DBMS_SQLTUNE.REMAP_STGTAB_SQLSET(old_sqlset_name    =&gt; 'imp_workload', -
                                      old_sqlset_owner   =&gt; 'SH', -
                                      new_sqlset_owner   =&gt; 'SYS', -
                                      staging_table_name =&gt; 'STGTAB_SQLSET');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68440" class="refsect2"><a id="i1006952"></a>
<hr />
<h3 class="refsect2"><a id="sthref9715"></a>REMOVE_SQLSET_REFERENCE Procedure</h3>
<p>This procedure deactivates a SQL tuning set to indicate it is no longer used by the client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9716"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REMOVE_SQLSET_REFERENCE (
   sqlset_name   IN  VARCHAR2,
   reference_id  IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9717"></a>Parameters</p>
<div id="ARPLS68441" class="tblformal">
<p class="titleintable"><a id="sthref9718"></a><a id="sthref9719"></a>Table 140-30 REMOVE_SQLSET_REFERENCE Procedure Parameters</p>
<table class="cellalignment1229" title="REMOVE_SQLSET_REFERENCE Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REMOVE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t56">Parameter</th>
<th class="cellalignment1227" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t56" headers="r1c1-t56">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t56 r1c2-t56">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t56" headers="r1c1-t56">
<p><code>reference_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t56 r1c2-t56">
<p>The identifier of the reference to remove</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9720"></a>Examples</p>
<p>You can remove references on a given SQL tuning set when you finish using it and want to make it writable again.</p>
<pre>
EXEC DBMS_SQLTUNE.REMOVE_SQLSET_REFERENCE( -
                                sqlset_name   =&gt; 'my_workload', -
                                reference_id  =&gt; :rid);
</pre>
<p>Use views <code>USER/DBA_SQLSET_REFERENCES</code> to find all references on a given SQL tuning set.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73433" class="refsect2"><a id="CACFICAE"></a>
<hr />
<h3 class="refsect2"><a id="sthref9721"></a>REPORT_AUTO_TUNING_TASK Function</h3>
<p>This function displays a report from the automatic tuning task. This function reports on a range of task executions, whereas the <a href="#CHDGEIHJ">REPORT_TUNING_TASK Function</a> reports on a single execution. Note that this function is deprecated in Oracle Database 11<span class="italic">g</span> Release 2 (11.2) in favor of <code>DBMS_AUTO_SQLTUNE.REPORT_AUTO_TUNING_TASK</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</p>
</li>
<li>
<p><a href="d_autosta.htm#CIAEHBGA">REPORT_AUTO_TUNING_TASK Function</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9722"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REPORT_AUTO_TUNING_TASK(
    begin_exec     IN VARCHAR2  := NULL,
    end_exec       IN VARCHAR2  := NULL,
    type           IN VARCHAR2  := TYPE_TEXT,
    level          IN VARCHAR2  := LEVEL_TYPICAL,
    section        IN VARCHAR2  := SECTION_ALL,
    object_id      IN NUMBER    := NULL,
    result_limit   IN NUMBER    := NULL)
  RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9723"></a>Parameters</p>
<div id="ARPLS73434" class="tblformal">
<p class="titleintable"><a id="sthref9724"></a><a id="sthref9725"></a>Table 140-31 REPORT_AUTO_TUNING_TASK Function Parameters</p>
<table class="cellalignment1229" title="REPORT_AUTO_TUNING_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REPORT_AUTO_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t58">Parameter</th>
<th class="cellalignment1227" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t58" headers="r1c1-t58">
<p><code>begin_exec</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t58 r1c2-t58">
<p>Name of execution from which to begin the report. <code>NULL</code> retrieves a report on the most recent run</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t58" headers="r1c1-t58">
<p><code>end_exec</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t58 r1c2-t58">
<p>Name of execution at which to end the report. <code>NULL</code> retrieves a report on the most recent run.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t58" headers="r1c1-t58">
<p><code>type</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t58 r1c2-t58">
<p>Type of the report to produce. Possible values are <code>TYPE_TEXT</code> which produces a text report</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t58" headers="r1c1-t58">
<p><code>level</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t58 r1c2-t58">
<p>Level of detail in the report:</p>
<ul>
<li>
<p><code>LEVEL_BASIC</code>: simple version of the report. Just show info about the actions taken by the advisor.</p>
</li>
<li>
<p><code>LEVEL_TYPICAL</code>: show information about every statement analyzed, including requests not implemented.</p>
</li>
<li>
<p><code>LEVEL_ALL</code>: highly detailed report level, also provides annotations about statements skipped over.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t58" headers="r1c1-t58">
<p><code>section</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t58 r1c2-t58">
<p>Optionally limit the report to a single section (<code>ALL</code> for all sections):</p>
<ul>
<li>
<p><code>SECTION_SUMMARY</code> - summary information</p>
</li>
<li>
<p><code>SECTION_FINDINGS</code> - tuning findings</p>
</li>
<li>
<p><code>SECTION_PLAN</code> - explain plans</p>
</li>
<li>
<p><code>SECTION_INFORMATION</code> - general information</p>
</li>
<li>
<p><code>SECTION_ERROR</code> - statements with errors</p>
</li>
<li>
<p><code>SECTION_ALL</code> - all statements</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t58" headers="r1c1-t58">
<p><code>object_id</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t58 r1c2-t58">
<p>Advisor framework object id that represents a single statement to restrict reporting to. <code>NULL</code> for all statements. Only valid for reports that target a single execution.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t58" headers="r1c1-t58">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t58 r1c2-t58">
<p>Maximum number of SQL statements to show in the report</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9726"></a>Return Values</p>
<p>A <code>CLOB</code> containing the desired report.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72953" class="refsect2"><a id="CHDIDGFA"></a>
<hr />
<h3 class="refsect2"><a id="sthref9727"></a>REPORT_SQL_DETAIL Function</h3>
<p>This function builds a report for a specific SQLID. For each SQLID it gives various statistics and details as obtained from the <code>V$</code> views and AWR.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDECAHH">SQL Performance Reporting Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9728"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REPORT_SQL_DETAIL(
   sql_id                   IN  VARCHAR2   DEFAULT NULL,
   sql_plan_hash_value      IN  NUMBER     DEFAULT NULL,
   start_time               IN  DATE       DEFAULT NULL,
   duration                 IN  NUMBER     DEFAULT NULL,
   inst_id                  IN  NUMBER     DEFAULT NULL,
   dbid                     IN  NUMBER     DEFAULT NULL,
   event_detail             IN  VARCHAR2   DEFAULT 'YES',
   bucket_max_count         IN  NUMBER     DEFAULT 128,
   bucket_interval          IN  NUMBER     DEFAULT NULL,
   top_n                    IN  NUMBER     DEFAULT 10,
   report_level             IN  VARCHAR2   DEFAULT 'TYPICAL',
   type                     IN  VARCHAR2   DEFAULT 'ACTIVE')
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9729"></a>Parameters</p>
<div id="ARPLS72954" class="tblformal">
<p class="titleintable"><a id="sthref9730"></a><a id="sthref9731"></a>Table 140-32 REPORT_SQL_DETAIL Function Parameters</p>
<table class="cellalignment1229" title="REPORT_SQL_DETAIL Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REPORT_SQL_DETAIL subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t60">Parameter</th>
<th class="cellalignment1227" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t60" headers="r1c1-t60">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t60 r1c2-t60">
<p>SQLID for which monitoring information should be displayed. If <code>NULL</code> (the default), display statistics for the SQLID of the last SQL statement executed in the current session.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t60" headers="r1c1-t60">
<p><code>sql_plan_hash_value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t60 r1c2-t60">
<p>Displays SQL statistics and details for a specific <code>plan_hash_value</code>. If <code>NULL</code> (default), displays statistics and details for all plans of the SQL_ID.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t60" headers="r1c1-t60">
<p><code>start_time</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t60 r1c2-t60">
<p>If specified, shows SQL activity (from gv$<code>ACTIVE_SESSION_HISTORY</code>) starting at this time. On Oracle RAC, the minimum <code>start_time</code> is the earliest <code>sample_time</code> of the in-memory ASH buffers across all instances. If <code>NULL</code> (default), one hour before the current time.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t60" headers="r1c1-t60">
<p><code>duration</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t60 r1c2-t60">
<p>Duration of activity in seconds for the report. If <code>NULL</code> (default) uses a value of 1 hour.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t60" headers="r1c1-t60">
<p><code>inst_id</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t60 r1c2-t60">
<p>Target instance to get SQL details from. If <code>NULL</code>, uses data from all instances. If 0 or -1, uses current instance.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t60" headers="r1c1-t60">
<p><code>dbid</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t60 r1c2-t60">
<p>DBID from which to get SQL details. If <code>NULL</code>, uses current DBID.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t60" headers="r1c1-t60">
<p><code>event_detail</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t60 r1c2-t60">
<p>When set to <code>'NO'</code>, the activity is aggregated by <code>wait_class</code> only. Use <code>'YES'</code> (the default) to aggregate by (<code>wait_class</code>, <code>event_name</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t60" headers="r1c1-t60">
<p><code>bucket_max_count</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t60 r1c2-t60">
<p>If specified, this should be the maximum number of histogram buckets created in the report. If not specified, a value of 128 is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t60" headers="r1c1-t60">
<p><code>bucket_interval</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t60 r1c2-t60">
<p>If specified, this represents the exact time interval in seconds, of all histogram buckets. If specified, <code>bucket_max_count</code> is ignored.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t60" headers="r1c1-t60">
<p><code>top_n</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t60 r1c2-t60">
<p>Controls the number of entries to display per dimension in the top dimensions section. If not specified, a default value of 10 is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t60" headers="r1c1-t60">
<p><code>report_level</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t60 r1c2-t60">
<p>Level of detail for the report, either <code>'BASIC'</code>, <code>'TYPICAL'</code> or <code>'ALL'</code>. Default assumes <code>'TYPICAL'</code>. Their meanings are explained below.</p>
<p>In addition, individual report sections can also be enabled or disabled by using a +/- <code><span class="codeinlineitalic">section_name</span></code>. Several sections are defined:</p>
<ul>
<li>
<p><code>'TOP'</code>- Show top values for the ASH dimensions for a SQL statement; <code>ON</code> by default</p>
</li>
<li>
<p><code>'SPM'</code>- Show existing plan baselines for a SQL statement; <code>OFF</code> by default</p>
</li>
<li>
<p><code>'MISMATCH'</code>- Show reasons for creating new child cursors (sharing criteria violations); <code>OFF</code> by default.</p>
</li>
<li>
<p><code>'STATS'</code>- Show SQL execution statistics per plan from <code>GV$SQLAREA_PLAN_HASH</code>; <code>ON</code> by default</p>
</li>
<li>
<p><code>'ACTIVITY'</code> - Show top activity from ASH for each plan of a SQL statement; <code>ON</code> by default</p>
</li>
<li>
<p><code>'ACTIVITY_ALL'</code> - Show top activity from ASH for each line of the plan for a SQL statement; <code>OFF</code> by default</p>
</li>
<li>
<p><code>'HISTOGRAM'</code> - Show activity histogram for each plan of a SQL statement (plan timeline histogram); <code>ON</code> by default</p>
</li>
<li>
<p><code>'SESSIONS'</code> - Show activity for top sessions for each plan of a SQL statement; <code>OFF</code> by default</p>
</li>
<li>
<p><code>'MONITOR'</code> - Show show one monitored SQL execution per execution plan; <code>ON</code> by default</p>
</li>
<li>
<p><code>'XPLAN'</code> - Show execution plans; <code>ON</code> by default</p>
</li>
<li>
<p><code>'BINDS'</code> - show captured bind data; <code>ON</code> by default</p>
</li>
</ul>
<p>In addition, SQL text can be specified at different levels:</p>
<ul>
<li>
<p>-<code>SQL_TEXT</code> - No SQL text in report</p>
</li>
<li>
<p><code>+SQL_TEXT</code> - OK with partial SQL text up to the first 2000 chars as stored in <code>GV$SQL_MONITOR</code></p>
</li>
<li>
<p><code>-SQL_FULLTEXT</code> - No full SQL text (<code>+SQL_TEXT</code>)</p>
</li>
<li>
<p><code>+SQL_FULLTEXT</code> - Show full SQL text (default value)</p>
</li>
</ul>
<p>The meanings of the three top-level report levels are:</p>
<ul>
<li>
<p><code>NONE</code> - minimum possible</p>
</li>
<li>
<p><code>BASIC</code> - <code>SQL_TEXT+STATS+ACTIVITY+HISTOGRAM</code></p>
</li>
<li>
<p><code>TYPICAL</code> - <code>SQL_FULLTEXT+TOP+STATS+ACTIVITY+HISTOGRAM+XPLAN+MONITOR</code></p>
</li>
<li>
<p><code>ALL</code> - everything</p>
</li>
</ul>
<p>Only one of these 4 levels can be specified and, if it is, it has to be at the start of the <code>REPORT_LEVEL</code> string</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t60" headers="r1c1-t60">
<p><code>type</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t60 r1c2-t60">
<p>Report format: <code>'ACTIVE'</code> by default. Can also be <code>'XML'</code> (see Usage Notes).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9732"></a>Return Values</p>
<p>A <code>CLOB</code> containing the desired report.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9733"></a>Usage Notes</p>
<ul>
<li>
<p><code>ACTIVE</code> reports have a rich, interactive user interface similar to Enterprise Manager while not requiring any EM installation. The report file built is in HTML format, so it can be interpreted by most modern browsers. The code powering the active report is downloaded transparently by the web browser when the report is first viewed, hence viewing it requires outside connectivity.</p>
</li>
<li>
<p>The invoker needs the <code>SELECT</code> privilege on the following views:</p>
<ul>
<li>
<p><code>V$SESSION</code></p>
</li>
<li>
<p><code>DBA_ADVISOR_FINDINGS</code></p>
</li>
<li>
<p><code>V$DATABASE</code></p>
</li>
<li>
<p><code>GV$ASH_INFO</code></p>
</li>
<li>
<p><code>GV$ACTIVE_SESSION_HISTORY</code></p>
</li>
<li>
<p><code>GV$SQLAREA_PLAN_HASH</code></p>
</li>
<li>
<p><code>GV$SQL</code></p>
</li>
<li>
<p><code>DBA_HIST_SNAPSHOT</code></p>
</li>
<li>
<p><code>DBA_HIST_WR_CONTROL</code></p>
</li>
<li>
<p><code>DBA_HIST_ACTIVE_SESS_HISTORY</code></p>
</li>
<li>
<p><code>DBA_HIST_SQLSTAT</code></p>
</li>
<li>
<p><code>DBA_HIST_SQL_BIND_METADATA</code></p>
</li>
<li>
<p><code>DBA_HIST_SQLTEXT</code></p>
</li>
<li>
<p><code>DBA_SQL_PLAN_BASELINES</code></p>
</li>
<li>
<p><code>DBA_SQL_PROFILES</code></p>
</li>
<li>
<p><code>DBA_ADVISOR_TASKS</code></p>
</li>
<li>
<p><code>DBA_SERVICES</code></p>
</li>
<li>
<p><code>DBA_USERS</code></p>
</li>
<li>
<p><code>DBA_OBJECTS</code></p>
</li>
<li>
<p><code>DBA_PROCEDURES</code></p>
</li>
</ul>
</li>
<li>
<p>The invoker needs the <code>EXECUTE</code> privilege on the <a href="d_xplan.htm#CACFJGHG">DBMS_XPLAN</a> package.</p>
</li>
<li>
<p>Finally, the invoker requires all privileges required by <code>DBMS_SQLTUNE.REPORT_SQL_MONITOR</code> an <code>DBMS_SQLTUNE.REPORT_SQL_MONITOR_LIST</code> as it calls these functions.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68444" class="refsect2"><a id="CHDBHIBG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9734"></a>REPORT_SQL_MONITOR Function</h3>
<p>This function builds a report (text, simple HTML, active HTML, XML) for the monitoring information collected on behalf of the targeted statement execution.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDIHAIH">Real-time SQL Monitoring Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9735"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REPORT_SQL_MONITOR(
   sql_id                    IN VARCHAR2  DEFAULT  NULL,
   session_id                IN NUMBER    DEFAULT  NULL,
   session_serial            IN NUMBER    DEFAULT  NULL,
   sql_exec_start            IN DATE      DEFAULT  NULL,
   sql_exec_id               IN NUMBER    DEFAULT  NULL,
   inst_id                   IN NUMBER    DEFAULT  NULL,
   start_time_filter         IN DATE      DEFAULT  NULL,
   end_time_filter           IN DATE      DEFAULT  NULL,
   instance_id_filter        IN NUMBER    DEFAULT  NULL,
   parallel_filter           IN VARCHAR2  DEFAULT  NULL,
   plan_line_filter          IN NUMBER    DEFAULT  NULL,
   event_detail              IN VARCHAR2  DEFAULT  'YES',
   bucket_max_count          IN NUMBER    DEFAULT  128,
   bucket_interval           IN NUMBER    DEFAULT  NULL,
   base_path                 IN VARCHAR2  DEFAULT  NULL,
   last_refresh_time         IN DATE      DEFAULT  NULL,
   report_level              IN VARCHAR2  DEFAULT 'TYPICAL',
   type                      IN VARCHAR2  DEFAULT 'TEXT',
   sql_plan_hash_value       IN NUMBER    DEFAULT  NULL)
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9736"></a>Parameters</p>
<div id="ARPLS68445" class="tblformal">
<p class="titleintable"><a id="sthref9737"></a><a id="sthref9738"></a>Table 140-33 REPORT_SQL_MONITOR Function Parameters</p>
<table class="cellalignment1229" title="REPORT_SQL_MONITOR Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REPORT_SQL_MONITOR subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t62">Parameter</th>
<th class="cellalignment1227" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t62" headers="r1c1-t62">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t62 r1c2-t62">
<p>SQL_ID for which monitoring information should be displayed. Use <code>NULL</code> (the default) to report on the last statement monitored by Oracle.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t62" headers="r1c1-t62">
<p><code>session_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t62 r1c2-t62">
<p>If not <code>NULL</code>, this parameters targets only the sub-set of statements executed by the specified session. Default is <code>NULL</code>. Use <code>USERENV</code>('<code>SID</code>') for current session.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t62" headers="r1c1-t62">
<p><code>session_serial</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t62 r1c2-t62">
<p>In addition to the <code>session_id</code> parameter, one can also specify its session serial to ensure that the desired session incarnation is targeted. This parameter is ignored when <code>session_id</code> is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t62" headers="r1c1-t62">
<p><code>sql_exec_start</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t62 r1c2-t62">
<p>This parameter, along with <code>sql_exec_id</code>, is only applicable when <code>sql_id</code> is also specified. Jointly, they can be used to display monitoring information associated to any execution of the statement identified by <code>sql_id</code>, assuming that this statement was monitored. When <code>NULL</code> (the default), the last monitored execution of SQL <code>sql_id</code> is shown.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t62" headers="r1c1-t62">
<p><code>sql_exec_id</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t62 r1c2-t62">
<p>This parameter, along with <code>sql_exec_start</code>, is only applicable when <code>sql_id</code> is also specified. Jointly, they can be used to display monitoring information associated to any execution of the statement identified by <code>sql_id</code>, assuming that this statement was monitored. When <code>NULL</code> (the default), the last monitored execution of SQL <code>sql_id</code> is shown.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t62" headers="r1c1-t62">
<p><code>inst_id</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t62 r1c2-t62">
<p>Only considers statements started on the specified instance. Use -1 to target the login instance. <code>NULL</code> (default) targets all instances.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t62" headers="r1c1-t62">
<p><code>start_time_filter</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t62 r1c2-t62">
<p>If not <code>NULL</code>, the report considers only the activity (from <code>GV$ACTIVE_SESSION_HISTORY</code>) recorded after the specified date. If <code>NULL</code>, the reported activity starts when the execution of the targeted SQL statement has started.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t62" headers="r1c1-t62">
<p><code>end_time_filter</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t62 r1c2-t62">
<p>If not <code>NULL</code>, the report shows only the activity (from <code>GV$ACTIVE_SESSION_HISTORY</code>) collected before the date <code>end_time_filter</code>. If <code>NULL</code>, the reported activity ends when the targeted SQL statement execution has ended or is the current time if the statement is still executing.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t62" headers="r1c1-t62">
<p><code>instance_id_filter</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t62 r1c2-t62">
<p>Only applies when the execution runs parallel across multiple Oracle Real Application Cluster (Oracle RAC) instances. This parameter allows to only report the activity of the specified instance. Use a <code>NULL</code> value (the default) to include the activity on all instances where the parallel query was executed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t62" headers="r1c1-t62">
<p><code>parallel_filter</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t62 r1c2-t62">
<p>Applies only to parallel execution and allows reporting the activity of only a subset of the processes involved in the parallel execution (Query Coordinator and/or Parallel eXecution servers). The value of this parameter can be:</p>
<ul>
<li>
<p><code>NULL</code> to target all processes</p>
</li>
<li>
<p><code>[qc][servers(&lt;svr_grp&gt;[,] &lt;svr_set&gt;[,] &lt;srv_num&gt;)]: 'qc'</code> stands for query coordinator and <code>servers()</code> stipulate which PX servers to consider.</p>
</li>
</ul>
<p>The following examples show how to target a subset of the parallel processes:</p>
<ul>
<li>
<p><code>qc</code>: targets only the query coordinator</p>
</li>
<li>
<p><code>servers(1)</code>: targets all parallel execution servers in group number 1. Note that statement running parallel have one main server group (group number 1) plus one additional group for each nested sub-query running parallel.</p>
</li>
<li>
<p><code>servers(,2)</code>: targets all parallel execution servers from any group but only running in set 1 of each group (each group has at most two set of parallel execution servers)</p>
</li>
<li>
<p><code>servers(1,1)</code>: consider only group 1, set 1</p>
</li>
<li>
<p><code>servers(1,2,4)</code>: consider only group 1, set 2, server number 4. This reports for a single parallel server process</p>
</li>
<li>
<p><code>qc servers(1,2,4)</code>: same as above by also including the query coordinator</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t62" headers="r1c1-t62">
<p><code>event_detail</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t62 r1c2-t62">
<p>When value is '<code>YES</code>' (the default), reported activity from <code>GV$ACTIVE_SESSION_HISTORY</code> is aggregated by (<code>wait_class</code>, <code>event_name</code>). Use '<code>NO</code>' to only aggregate by <code>wait_class</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t62" headers="r1c1-t62">
<p><code>bucket_max_count</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t62 r1c2-t62">
<p>If specified, this should be the maximum number of histogram buckets created in the report</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t62" headers="r1c1-t62">
<p><code>bucket_interval</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t62 r1c2-t62">
<p>If specified, this represents the exact time interval in seconds, of all histogram buckets. If specified, <code>bucket_max_count</code> is ignored.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t62" headers="r1c1-t62">
<p><code>base_path</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t62 r1c2-t62">
<p>URL path for flex HTML resources since flex HTML format is required to access external files (java scripts and the flash SWF file itself)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t62" headers="r1c1-t62">
<p><code>last_refresh_time</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t62 r1c2-t62">
<p>If not <code>NULL</code> (default is <code>NULL</code>), the time when the report was last retrieved (see <code>SYSDATE</code> attribute of the report tag). Use this option to display the report of a running query, and when the report is refreshed on a regular basis. This optimizes the size of the report since only the new or changed information is returned. In particular, the following are optimized:</p>
<ul>
<li>
<p>SQL text is not returned when this option is specified</p>
</li>
<li>
<p>activity histogram starts at the bucket that intersect at that time. The entire content of the bucket is returned, even if <code>last_refresh_time</code> is after the start of that bucket</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t62" headers="r1c1-t62">
<p><code>report_level</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t62 r1c2-t62">
<p>Level of detail for the report, either <code>'NONE'</code>, <code>'BASIC'</code>, <code>'TYPICAL'</code> or <code>'ALL'</code>. Default assumes <code>'TYPICAL'</code>. Their meanings are explained below.</p>
<p>In addition, individual report sections can also be enabled or disabled by using a +/- <code><span class="codeinlineitalic">section_name</span></code>. Several sections are defined:</p>
<ul>
<li>
<p><code>'XPLAN'</code>- Show explain plan; <code>ON</code> by default</p>
</li>
<li>
<p><code>'PLAN'</code>- Show plan monitoring statistics; <code>ON</code> by default</p>
</li>
<li>
<p><code>'SESSIONS'</code>- Show session details. Applies only to parallel queries; <code>ON</code> by default</p>
</li>
<li>
<p><code>'INSTANCE'</code>- Show instance details. Applies only to parallel and cross instance; <code>ON</code> by default</p>
</li>
<li>
<p><code>'PARALLEL'</code>- An umbrella parameter for specifying <code>sessions+instance</code> details</p>
</li>
<li>
<p><code>'ACTIVITY'</code> - Show activity summary at global level, plan line level and session or instance level (if applicable); <code>ON</code> by default</p>
</li>
<li>
<p><code>'BINDS'</code> - Show bind information when available; <code>ON</code> by default</p>
</li>
<li>
<p><code>'METRICS'</code> - Show metric data (CPU, IOs, ...) over time; <code>ON</code> by default</p>
</li>
<li>
<p><code>'ACTIVITY_HISTOGRAM'</code> - Show an histogram of the overall query activity; <code>ON</code> by default</p>
</li>
<li>
<p><code>'PLAN_HISTOGRAM'</code> - Show activity histogram at plan line level; <code>OFF</code> by default</p>
</li>
<li>
<p><code>'OTHER'</code> - Other info; <code>ON</code> by default</p>
</li>
</ul>
<p>In addition, SQL text can be specified at different levels:</p>
<ul>
<li>
<p><code>SQL_TEXT</code> - No SQL text in report</p>
</li>
<li>
<p><code>+SQL_TEXT</code> - OK with partial SQL text up to the first 2000 chars as stored in <code>GV$SQL_MONITOR</code></p>
</li>
<li>
<p><code>-SQL_FULLTEXT</code> - No full SQL text (<code>+SQL_TEXT</code>)</p>
</li>
<li>
<p><code>+SQL_FULLTEXT</code> - Show full SQL text (default value)</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t62" headers="r1c1-t62">
<p><code>report_level</code> (contd.)</p>
</td>
<td class="cellalignment1228" headers="r18c1-t62 r1c2-t62">
<p>The meanings of the three top-level report levels are:</p>
<ul>
<li>
<p><code>NONE</code> - minimum possible</p>
</li>
<li>
<p><code>+BASIC</code> - <code>SQL_TEXT-PLAN-XPLAN-SESSIONS-INSTANCE-ACTIVITY_HISTOGRAM-PLAN_HISTOGRAM-METRICS</code></p>
</li>
<li>
<p><code>TYPICAL</code> - everything but <code>PLAN_HISTOGRAM</code></p>
</li>
<li>
<p><code>ALL</code> - everything</p>
</li>
</ul>
<p>Only one of these 4 levels can be specified and, if it is, it has to be at the start of the <code>REPORT_LEVEL</code> string</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t62" headers="r1c1-t62">
<p><code>type</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t62 r1c2-t62">
<p>Report format, <code>'TEXT'</code> by default. Can be <code>'TEXT',</code> '<code>HTML'</code>, <code>'XML'</code> or <code>'ACTIVE'</code> (see Usage Notes).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t62" headers="r1c1-t62">
<p><code>sql_plan_hash_value</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t62 r1c2-t62">
<p>Target only those SQL executions with the specified <code>plan_hash_value</code>. Default is <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9739"></a>Return Values</p>
<p>A <code>CLOB</code> containing the desired report.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9740"></a>Usage Notes</p>
<ul>
<li>
<p>The target SQL statement for this report can be:</p>
<ul>
<li>
<p>The last SQL monitored by Oracle (this is the default behavior, so there is no need to specify any parameter)The last SQL executed by a specific session and monitored by Oracle. The session is identified by its session id and optionally it serial number. For example, use <code>session_id</code> <code>=&gt;</code> <code>USERENV ('SID')</code> for the current session or <code>session_id</code><code>=&gt;</code><code>20</code>, <code>session_serial</code><code>=&gt;</code><code>103</code> for session ID 20, serial number 103.The last execution of a specific statement identified by its <code>sql_id</code>.A specific execution of a SQL statement identified by its execution key (<code>sql_id</code>, <code>sql_exec_start</code> and <code>sql_exec_id</code>).</p>
</li>
</ul>
</li>
<li>
<p>This report produces performance data exposed by several fixed views, listed below. For this reason, the invoker of the report function must have privilege to select data from these fixed views (such as the <code>SELECT_CATALOG</code> role).</p>
<ul>
<li>
<p><code>GV$SQL_MONITOR</code></p>
</li>
<li>
<p><code>GV$SQL_PLAN_MONITOR</code></p>
</li>
<li>
<p><code>GV$SQL_PLAN</code></p>
</li>
<li>
<p><code>GV$ACTIVE_SESSION_HISTORY</code></p>
</li>
<li>
<p><code>GV$SESSION_LONGOPS</code></p>
</li>
<li>
<p><code>GV$SQL</code></p>
</li>
</ul>
</li>
<li>
<p>The <code>bucket_max_count</code> and <code>bucket_interval</code> parameters control the activity histogram. By default, the maximum number of buckets is set to 128 and the RDBMS derives the bucket_interval based on this. The bucket_interval (value is in seconds) is computed such that it is the smallest possible power of 2 value (starting at 1s) without exceeding the maximum number of buckets. For example, if the query has executed for 600s, the RDBMS selects a <code>bucket_interval</code> of 8s (a power of two) given that 600/8 = 74 which is less than 128 buckets maximum. Smaller than 8s would be 4s which would lead to more buckets than the 128 maximum. If bucket_interval is specified, the RDBMS uses that value instead of deriving it from <code>bucket_max_count</code>.</p>
</li>
<li>
<p><code>ACTIVE</code> reports have a rich, interactive user interface similar to Enterprise Manager while not requiring any EM installation. The report file built is in HTML format, so it can be interpreted by most modern browsers. The code powering the active report is downloaded transparently by the web browser when the report is first viewed, hence viewing it requires outside connectivity.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink PFGRF" href="../../server.112/e41573/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about SQL real-time monitoring.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS72955" class="refsect2"><a id="CHDIECJJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref9741"></a>REPORT_SQL_MONITOR_LIST Function</h3>
<p>This function builds a report for all or a sub-set of statements monitored by Oracle. For each statement, the subprogram gives key information and associated global statistics.</p>
<p>Use the <a href="#CHDBHIBG">REPORT_SQL_MONITOR Function</a>to get detail monitoring information for a single SQL statement</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDECAHH">SQL Performance Reporting Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9742"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REPORT_SQL_MONITOR_LIST(
   sql_id                    IN VARCHAR2  DEFAULT  NULL,
   session_id                IN NUMBER    DEFAULT  NULL,
   session_serial            IN NUMBER    DEFAULT  NULL,
   inst_id                   IN NUMBER    DEFAULT  NULL,
   active_since_date         IN DATE      DEFAULT  NULL,
   active_since_sec          IN NUMBER    DEFAULT  NULL,
   last_refresh_time         IN DATE      DEFAULT  NULL,
   report_level              IN VARCHAR2  DEFAULT  'TYPICAL',
   auto_refresh              IN NUMBER    DEFAULT  NULL,
   base_path                 IN VARCHAR2  DEFAULT  NULL,
   type                      IN VARCHAR2  DEFAULT 'TEXT')
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9743"></a>Parameters</p>
<div id="ARPLS72956" class="tblformal">
<p class="titleintable"><a id="sthref9744"></a><a id="sthref9745"></a>Table 140-34 REPORT_SQL_MONITOR_LIST Function Parameters</p>
<table class="cellalignment1229" title="REPORT_SQL_MONITOR_LIST Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REPORT_SQL_MONITOR subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t65">Parameter</th>
<th class="cellalignment1227" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t65" headers="r1c1-t65">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t65 r1c2-t65">
<p><code>SQL_ID</code> for which monitoring information should be displayed. Use <code>NULL</code> (the default) to report on the last statement monitored by Oracle.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t65" headers="r1c1-t65">
<p><code>session_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t65 r1c2-t65">
<p>If not <code>NULL</code>, this parameters targets only the sub-set of statements executed by the specified session. Default is <code>NULL</code>. Use <code>-1</code> or <code>USERENV</code>('<code>SID</code>') for current session.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t65" headers="r1c1-t65">
<p><code>session_serial</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t65 r1c2-t65">
<p>In addition to the <code>session_id</code> parameter, you can also specify its session serial to ensure that the desired session incarnation is targeted. This parameter is ignored when <code>session_id</code> is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t65" headers="r1c1-t65">
<p><code>inst_id</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t65 r1c2-t65">
<p>Only considers statements started on the specified instance. Use -1 to target the login instance. <code>NULL</code> (default) targets all instances.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t65" headers="r1c1-t65">
<p><code>active_since_date</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t65 r1c2-t65">
<p>If not <code>NULL</code> (default), returns only monitored statements active since the specified time. This includes all statements that are still executing along with all statements that have completed their execution after the specified date and time.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t65" headers="r1c1-t65">
<p><code>active_since_sec</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t65 r1c2-t65">
<p>Same as active_since_date but with the date specified relative to the current sysdate minus a specified number of seconds. For example, use 3600 to apply a limit of 1 hour.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t65" headers="r1c1-t65">
<p><code>last_refresh_time</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t65 r1c2-t65">
<p>If not <code>NULL</code> (default), the date and time when the list report was last retrieved. This optimizes the case where an application shows the list and refreshes the report on a regular basis (such as once every 5 seconds). In this case, the report shows detail about the execution of monitored queries that active since the specified <code>last_refresh_time</code>. For other queries, the report returns the execution key (<code>sql_id</code>, <code>sql_exec_start</code>, <code>sql_exec_id</code>). For queries with a first refresh time after the specified date, only the SQL execution key and statistics are returned.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t65" headers="r1c1-t65">
<p><code>report_level</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t65 r1c2-t65">
<p>Level of detail for the report. The level can be either:</p>
<ul>
<li>
<p><code>BASIC</code> - SQL text up to 200 characters</p>
</li>
<li>
<p><code>TYPICAL</code> - include full SQL text assuming that cursor has not aged out, in which case the SQL text is included up to 2000 characters</p>
</li>
<li>
<p><code>ALL</code> - currently the same as <code>TYPICAL</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t65" headers="r1c1-t65">
<p><code>auto_refresh</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t65 r1c2-t65">
<p>Currently non-operational, reserved for future use</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t65" headers="r1c1-t65">
<p><code>base_path</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t65 r1c2-t65">
<p>URL path for flex HTML resources since flex HTML format is required to access external files (java scripts and the flash SWF file itself)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t65" headers="r1c1-t65">
<p><code>type</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t65 r1c2-t65">
<p>Report format, <code>'TEXT'</code> by default. Can be <code>'TEXT',</code> '<code>HTML'</code> or <code>'XML'</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9746"></a>Return Values</p>
<p>A report (XML, text, HTML) for the list of SQL statements that have been monitored.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9747"></a>Usage Notes</p>
<p>The user tuning this function needs to have privilege to access the following fixed views: <code>GV$SQL_MONITOR</code> and <code>GV$SQL</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink PFGRF" href="../../server.112/e41573/toc.htm"><span class="italic">Oracle Database Performance Tuning Guide</span></a> for more information about SQL real-time monitoring.</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68446" class="refsect2"><a id="CHDGEIHJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref9748"></a>REPORT_TUNING_TASK Function</h3>
<p>This procedure displays the results of a tuning task.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDECAHH">SQL Performance Reporting Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9749"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.REPORT_TUNING_TASK(
   task_name       IN   VARCHAR2,
   type            IN   VARCHAR2   := 'TEXT',
   level           IN   VARCHAR2   := 'TYPICAL',
   section         IN   VARCHAR2   := ALL,
   object_id       IN   NUMBER     := NULL,
   result_limit    IN   NUMBER     := NULL,
   owner_name      IN    VARCHAR2  := NULL,
   execution_name  IN  VARCHAR2    := NULL)
RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9750"></a>Parameters</p>
<div id="ARPLS68447" class="tblformal">
<p class="titleintable"><a id="sthref9751"></a><a id="sthref9752"></a>Table 140-35 REPORT_TUNING_TASK Function Parameters</p>
<table class="cellalignment1229" title="REPORT_TUNING_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.REPORT_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t68">Parameter</th>
<th class="cellalignment1227" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t68" headers="r1c1-t68">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t68 r1c2-t68">
<p>Name of the tuning task to report</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t68" headers="r1c1-t68">
<p><code>type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t68 r1c2-t68">
<p>Type of the report to produce. Possible values are <code>TEXT</code> which produces a text report.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t68" headers="r1c1-t68">
<p><code>level</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t68 r1c2-t68">
<p>Level of detail in the report:</p>
<ul>
<li>
<p><code>BASIC</code>: simple version of the report. Just show info about the actions taken by the advisor.</p>
</li>
<li>
<p><code>TYPICAL</code>: show information about every statement analyzed, including requests not implemented.</p>
</li>
<li>
<p><code>ALL</code>: highly detailed report level, also provides annotations about statements skipped over.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t68" headers="r1c1-t68">
<p><code>section</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t68 r1c2-t68">
<p>Optionally limit the report to a single section (<code>ALL</code> for all sections):</p>
<ul>
<li>
<p><code>SUMMARY</code> - summary information</p>
</li>
<li>
<p><code>FINDINGS</code> - tuning findings</p>
</li>
<li>
<p><code>PLAN</code> - explain plans</p>
</li>
<li>
<p><code>INFORMATION</code> - general information</p>
</li>
<li>
<p><code>ERROR</code> - statements with errors</p>
</li>
<li>
<p><code>ALL</code> - all statements</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t68" headers="r1c1-t68">
<p><code>object_id</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t68 r1c2-t68">
<p>Advisor framework object id that represents a single statement to restrict reporting to. <code>NULL</code> for all statements. Only valid for reports that target a single execution.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t68" headers="r1c1-t68">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t68 r1c2-t68">
<p>Maximum number of SQL statements to show in the report</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t68" headers="r1c1-t68">
<p><code>owner_name</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t68 r1c2-t68">
<p>Owner of the relevant tuning task. Defaults to the current schema owner.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t68" headers="r1c1-t68">
<p><code>execution_name</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t68 r1c2-t68">
<p>Name of the task execution to use. If <code>NULL</code>, the report is generated for the last task execution.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9753"></a>Return Values</p>
<p>A <code>CLOB</code> containing the desired report.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9754"></a>Examples</p>
<pre>
-- Get the whole report for the single statement case.
SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK(:stmt_task) from dual;
 
-- Show me the summary for the sts case.
SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK(:sts_task, 'TEXT', 'TYPICAL', 'SUMMARY')
FROM DUAL;
 
-- Show me the findings for the statement I'm interested in.
SELECT DBMS_SQLTUNE.REPORT_TUNING_TASK(:sts_task, 'TEXT', 'TYPICAL', 'FINDINGS', 5) from dual;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68448" class="refsect2"><a id="CHDJEHBG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9755"></a>RESET_TUNING_TASK Procedure</h3>
<p>This procedure is called on a tuning task that is not currently executing to prepare it for re-execution.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9756"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.RESET_TUNING_TASK(
 task_name         IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9757"></a>Parameters</p>
<div id="ARPLS68449" class="tblformal">
<p class="titleintable"><a id="sthref9758"></a><a id="sthref9759"></a>Table 140-36 RESET_TUNING_TASK Procedure Parameters</p>
<table class="cellalignment1229" title="RESET_TUNING_TASK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.RESET_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t70">Parameter</th>
<th class="cellalignment1227" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t70" headers="r1c1-t70">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t70 r1c2-t70">
<p>The name of the tuning task to reset</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9760"></a>Examples</p>
<pre>
-- reset and re-execute a task
EXEC DBMS_SQLTUNE.RESET_TUNING_TASK(:sts_task);
 
-- re-execute the task
EXEC DBMS_SQLTUNE.EXECUTE_TUNING_TASK(:sts_task);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68450" class="refsect2"><a id="CHDJEABC"></a>
<hr />
<h3 class="refsect2"><a id="sthref9761"></a>RESUME_TUNING_TASK Procedure</h3>
<p>This procedure resumes a previously interrupted task that was created to process a SQL tuning set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9762"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.RESUME_TUNING_TASK(
 task_name         IN VARCHAR2,
 basic_filter      IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9763"></a>Parameters</p>
<div id="ARPLS68451" class="tblformal">
<p class="titleintable"><a id="sthref9764"></a><a id="sthref9765"></a>Table 140-37 RESUME_TUNING_TASK Procedure Parameters</p>
<table class="cellalignment1229" title="RESUME_TUNING_TASK Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.RESUME_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t72">Parameter</th>
<th class="cellalignment1227" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t72" headers="r1c1-t72">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t72 r1c2-t72">
<p>The name of the tuning task to resume</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t72" headers="r1c1-t72">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t72 r1c2-t72">
<p>A SQL predicate to filter the SQL from the SQL tuning set. Note that this filter is applied in conjunction with the basic filter (i.e., parameter <code>basic_filter</code>) when calling <a href="#CHDGBCDB">CREATE_TUNING_TASK Functions</a>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9766"></a>Usage Notes</p>
<p>Resuming a single SQL tuning task (a task that was created to tune a single SQL statement as compared to a SQL tuning set) is not supported.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9767"></a>Examples</p>
<pre>
-- Interrupt the task
EXEC DBMS_SQLTUNE.INTERRUPT_TUNING_TASK(:conc_task);
 
-- Once a task is interrupted, we can elect to reset it, resume it, or check
-- out its results and then decide.  For this example we will just resume.
 
EXEC DBMS_SQLTUNE.RESUME_TUNING_TASK(:conc_task);
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68452" class="refsect2"><a id="CHDCHDED"></a>
<hr />
<h3 class="refsect2"><a id="sthref9768"></a>SCRIPT_TUNING_TASK Function</h3>
<p>This function creates a SQL*PLUS script which can then be executed to implement a set of Advisor recommendations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDDCCBJ">SQL Tuning Advisor Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9769"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SCRIPT_TUNING_TASK(
  task_name         IN VARCHAR2,
  rec_type          IN VARCHAR2  := REC_TYPE_ALL,
  object_id         IN NUMBER    := NULL,
  result_limit      IN NUMNBER   := NULL,
  owner_name        IN VARCHAR2  := NULL,
  execution_name    IN VARCHAR2  := NULL)
 RETURN CLOB;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9770"></a>Parameters</p>
<div id="ARPLS68453" class="tblformal">
<p class="titleintable"><a id="sthref9771"></a><a id="sthref9772"></a>Table 140-38 SCRIPT_TUNING_TASK Function Parameters</p>
<table class="cellalignment1229" title="SCRIPT_TUNING_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.RESET_TUNING_TASK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t74">Parameter</th>
<th class="cellalignment1227" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t74" headers="r1c1-t74">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t74 r1c2-t74">
<p>Name of the tuning task for which to apply a script</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t74" headers="r1c1-t74">
<p><code>rec_type</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t74 r1c2-t74">
<p>Filter the script by types of recommendations to include. Any subset of the following separated by commas: or '<code>ALL</code>: '<code>'PROFILES'</code> '<code>'STATISTICS'</code> '<code>'INDEXES'</code>. For example, a script with profiles and statistics: <code>'PROFILES,STATISTICS'</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t74" headers="r1c1-t74">
<p><code>object_id</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t74 r1c2-t74">
<p>Optionally filters by a single object ID</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t74" headers="r1c1-t74">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t74 r1c2-t74">
<p>Optionally shows commands for only top N SQL (ordered by object_id and ignored if an object_id is also specified)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t74" headers="r1c1-t74">
<p><code>owner_name</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t74 r1c2-t74">
<p>Owner of the relevant tuning task. Defaults to the current schema owner</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t74" headers="r1c1-t74">
<p><code>excution_name</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t74 r1c2-t74">
<p>Name of the task execution to use. If <code>NULL</code>, the script is generated for the last task execution.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9773"></a>Return Values</p>
<p>Returns a script in the form of a <code>CLOB</code>.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9774"></a>Usage Notes</p>
<ul>
<li>
<p>Once the script is returned, it should then by checked by the DBA and executed.</p>
</li>
<li>
<p>Wrap with a call to <code>DBMS_ADVISOR.CREATE_FILE</code> to put it into a file.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9775"></a>Examples</p>
<pre>
SET LINESIZE 140
 
-- Get a script for all actions recommended by the task.
SELECT DBMS_SQLTUNE.SCRIPT_TUNING_TASK(:stmt_task) FROM DUAL;
 
-- Get a script of just the sql profiles we should create.
SELECT DBMS_SQLTUNE.SCRIPT_TUNING_TASK(:stmt_task, 'PROFILES') FROM DUAL;
 
-- get a script of just stale / missing stats
SELECT DBMS_SQLTUNE.SCRIPT_TUNING_TASK(:stmt_task, 'STATISTICS') FROM DUAL;
 
-- Get a script with recommendations about just one SQL statement when we have
-- tuned an entire STS.
SELECT DBMS_SQLTUNE.SCRIPT_TUNING_TASK(:sts_task, 'ALL', 5) FROM DUAL;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68454" class="refsect2"><a id="i1010615"></a>
<hr />
<h3 class="refsect2"><a id="sthref9776"></a>SELECT_CURSOR_CACHE Function</h3>
<p>This function collects SQL statements from the SQL Cursor Cache.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9777"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SELECT_CURSOR_CACHE (
  basic_filter        IN   VARCHAR2 := NULL,
  object_filter       IN   VARCHAR2 := NULL,
  ranking_measure1    IN   VARCHAR2 := NULL,
  ranking_measure2    IN   VARCHAR2 := NULL,
  ranking_measure3    IN   VARCHAR2 := NULL,
  result_percentage   IN   NUMBER   := 1,
  result_limit        IN   NUMBER   := NULL,
  attribute_list      IN   VARCHAR2 := NULL,
  recursive_sql       IN   VARCHAR2 := HAS_RECURSIVE_SQL)
 RETURN sys.sqlset PIPELINED;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9778"></a>Parameters</p>
<div id="ARPLS68455" class="tblformal">
<p class="titleintable"><a id="sthref9779"></a><a id="sthref9780"></a>Table 140-39 SELECT_CURSOR_CACHE Function Parameters</p>
<table class="cellalignment1229" title="SELECT_CURSOR_CACHE Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_CURSOR_CACHE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t76">Parameter</th>
<th class="cellalignment1227" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t76" headers="r1c1-t76">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t76 r1c2-t76">
<p>The SQL predicate to filter the SQL from the cursor cache defined on attributes of the <code>SQLSET_ROW</code>. If <code>basic_filter</code> is not set by the caller, the subprogram captures only statements of the type <code>CREATE TABLE</code>, <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>MERGE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t76" headers="r1c1-t76">
<p><code>object_filter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t76 r1c2-t76">
<p>Currently not supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t76" headers="r1c1-t76">
<p><code>ranking_measure(n)</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t76 r1c2-t76">
<p>An order-by clause on the selected SQL.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t76" headers="r1c1-t76">
<p><code>result_percentage</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t76 r1c2-t76">
<p>A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t76" headers="r1c1-t76">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t76 r1c2-t76">
<p>The top L(imit) SQL from the (filtered) source ranked by the ranking measure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t76" headers="r1c1-t76">
<p><code>attribute_list</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t76 r1c2-t76">
<p>List of SQL statement attributes to return in the result. The possible values are:</p>
<ul>
<li>
<p><code>TYPICAL</code> - <code>BASIC</code> + SQL plan (without row source statistics) and without object reference list (default)</p>
</li>
<li>
<p><code>BASIC</code> - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.</p>
</li>
<li>
<p><code>ALL</code> - return all attributes</p>
</li>
<li>
<p>Comma separated list of attribute names this allows to return only a subset of SQL attributes: <code>EXECUTION_STATISTICS</code>, <code>BIND_LIST</code>, <code>OBJECT_LIST</code>, SQL_PLAN,<code>SQL_PLAN_STATISTICS</code>: similar to <code>SQL_PLAN</code> + row source statistics</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t76" headers="r1c1-t76">
<p><code>recursive_sql</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t76 r1c2-t76">
<p>Filter that includes recursive SQL in the SQL tuning set (<code>HAS_RECURSIVE_SQL</code>) or excludes it (<code>NO_RECURSIVE_SQL</code>).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9781"></a>Return Values</p>
<p>This function returns a one <code>SQLSET_ROW</code> per <code>SQL_ID</code> or <code>PLAN_HASH_VALUE</code> pair found in each data source.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9782"></a>Usage Notes</p>
<ul>
<li>
<p>Filters provided to this function are evaluated as part of a SQL run by the current user. As such, they are executed with that user's security privileges and can contain any constructs and subqueries that user can access, but no more.</p>
</li>
<li>
<p>Users need privileges on the cursor cache views.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9783"></a>Examples</p>
<pre>
-- Get sql ids and sql text for statements with 500 buffer gets.
SELECT sql_id, sql_text 
FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE('buffer_gets &gt; 500')) 
ORDER BY sql_id;
 
-- Get all the information we have about a particular statement.
SELECT * 
FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE('sql_id = ''4rm4183czbs7j'''));
 
-- Notice that some statements can have multiple plans.  The output of the
-- SELECT_XXX table functions is unique by (sql_id, plan_hash_value).  This is
-- because a data source can store multiple plans per sql statement.
SELECT sql_id, plan_hash_value
FROM table(dbms_sqltune.select_cursor_cache('sql_id = ''ay1m3ssvtrh24'''))
ORDER BY sql_id, plan_hash_value;
 
-- PL/SQL examples: load_sqlset is called after opening a cursor, along the
-- lines given below
 
-- Select all statements in the cursor cache.
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT value(P) 
    FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE) P;
 
  -- Process each statement (or pass cursor to load_sqlset).
 
  CLOSE cur;
END;/
 
 
-- Look for statements not parsed by SYS.
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur for
    SELECT VALUE(P) 
    FROM table(
     DBMS_SQLTUNE.SELECT_CURSOR_CACHE('parsing_schema_name &lt;&gt; ''SYS''')) P;
 
  -- Process each statement (or pass cursor to load_sqlset).
 
  CLOSE cur;
end;/
 
 
-- All statements from a particular module/action.
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(
      DBMS_SQLTUNE.SELECT_CURSOR_CACHE(
         'module = ''MY_APPLICATION'' and action = ''MY_ACTION''')) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
END;/
 
 
-- all statements that ran for at least five seconds
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE('elapsed_time &gt; 5000000')) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
end;/
 
 
-- select all statements that pass a simple buffer_gets threshold and 
-- are coming from an APPS user
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(
      DBMS_SQLTUNE.SELECT_CURSOR_CACHE(
        'buffer_gets &gt; 100 and parsing_schema_name = ''APPS'''))P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
end;/
 
 
-- select all statements exceeding 5 seconds in elapsed time, but also
-- select the plans (by default we only select execution stats and binds
-- for performance reasons - in this case the SQL_PLAN attribute of sqlset_row
-- is NULL) 
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(dbms_sqltune.select_cursor_cache(
      'elapsed_time &gt; 5000000', NULL, NULL, NULL, NULL, 1, NULL,
      'EXECUTION_STATISTICS, SQL_BINDS, SQL_PLAN')) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
END;/
 
 
-- Select the top 100 statements in the cursor cache ordering by elapsed_time.
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE(NULL,
                                                NULL,
                                                'ELAPSED_TIME', NULL, NULL,
                                                1,
                                                100)) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
end;/
 
 
-- Select the set of statements which cumulatively account for 90% of the 
-- buffer gets in the cursor cache.  This means that the buffer gets of all
-- of these statements added up is approximately 90% of the sum of all 
-- statements currently in the cache.
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE(P) 
    FROM table(DBMS_SQLTUNE.SELECT_CURSOR_CACHE(NULL,
                                                NULL,
                                                'BUFFER_GETS', NULL, NULL,
                                                .9)) P;
 
  -- Process each statement (or pass cursor to load_sqlset).
 
  CLOSE cur;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68456" class="refsect2"><a id="CACBBIEH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9784"></a>SELECT_SQL_TRACE Function</h3>
<p>This table function reads the content of one or more trace files and returns the SQL statements it finds in the format of <code>sqlset_row</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9785"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SELECT_SQL_TRACE (
  directory              IN VARCHAR2,
  file_name              IN VARCHAR2 := NULL,
  mapping_table_name     IN VARCHAR2 := NULL,
  mapping_table_owner    IN VARCHAR2 := NULL,,
  select_mode            IN POSITIVE := SINGLE_EXECUTION,
  options                IN BINARY_INTEGER := LIMITED_COMMAND_TYPE,
  pattern_start          IN VARCHAR2 := NULL,
  pattern_end            IN VARCHAR2 := NULL,
  result_limit           IN POSITIVE := NULL)
 RETURN sys.sqlset PIPELINED;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9786"></a>Parameters</p>
<div id="ARPLS68457" class="tblformal">
<p class="titleintable"><a id="sthref9787"></a><a id="sthref9788"></a>Table 140-40 SELECT_SQL_TRACE Function Parameters</p>
<table class="cellalignment1229" title="SELECT_SQL_TRACE Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_SQL_TRACE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t78">Parameter</th>
<th class="cellalignment1227" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t78" headers="r1c1-t78">
<p><code>directory</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t78 r1c2-t78">
<p>The directory object containing the trace file(s). This field is mandatory.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t78" headers="r1c1-t78">
<p><code>file_name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t78 r1c2-t78">
<p>All or part of name of the trace file(s) to process. If <code>NULL</code> then the current or most recent file in the specified location or path is used. <code>'%'</code> wildcards are supported for matching trace file names.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t78" headers="r1c1-t78">
<p><code>mapping_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t78 r1c2-t78">
<p>The mapping table name. Note that the mapping table name is case insensitive. If the mapping table name is <code>NULL</code>, the mappings in the current database is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t78" headers="r1c1-t78">
<p><code>mapping_table_owner</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t78 r1c2-t78">
<p>the mapping table owner. If it is <code>NULL</code>, the current user is used.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t78" headers="r1c1-t78">
<p><code>select_mode</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t78 r1c2-t78">
<p>the mode for selecting SQL from the trace. By default, it is <code>SINGLE_EXECUTION</code>.</p>
<ul>
<li>
<p><code>SINGLE_EXECUTION</code> - return one execution of a SQL.(default).</p>
</li>
<li>
<p><code>ALL_EXECUTIONS</code> - return all executions.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t78" headers="r1c1-t78">
<p><code>options</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t78 r1c2-t78">
<p>The options. By default, it is <code>LIMITED_COMMAND_TYPE</code> which can be specified to include SQL statements from all Oracle command types.</p>
<ul>
<li>
<p><code>LIMITED_COMMAND_TYPE</code> - returns the SQL statements with the command types <code>CREATE</code>, <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>UPSERT</code>. It is the default.</p>
</li>
<li>
<p><code>ALL_COMMAND_TYPE</code> - returns the SQL statements with all command types.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t78" headers="r1c1-t78">
<p><code>pattern_start</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t78 r1c2-t78">
<p>Opening delimiting pattern of the trace file section(s) to consider. CURRENTLY INOPERABLE.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t78" headers="r1c1-t78">
<p><code>pattern_end</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t78 r1c2-t78">
<p>closing delimiting pattern of the trace file section(s) to process. CURRENTLY INOPERABLE.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t78" headers="r1c1-t78">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t78 r1c2-t78">
<p>Top SQL from the (filtered) source. Default to <code>MAXSB4</code> if <code>NULL</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9789"></a>Return Values</p>
<p>This function returns a <code>SQLSET_ROW</code> object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9790"></a>Examples</p>
<p>The following code shows how to enable SQL trace for a few SQL statements and load the results into a SQL tuning set:</p>
<pre>
-- turn on the SQL trace in the capture database
ALTER SESSION SET EVENTS '10046 TRACE NAME CONTEXT FOREVER, LEVEL 4'

-- run sql statements
SELECT 1 FROM DUAL;
SELECT COUNT(*) FROM dba_tables WHERE table_name = :mytab;
 
ALTER SESSION SET EVENTS '10046 TRACE NAME CONTEXT OFF';
 
-- create mapping table from the capture database
CREATE TABLE mapping AS
SELECT object_id id, owner, substr(object_name, 1, 30) name
   FROM dba_objects
   WHERE object_type NOT IN ('CONSUMER GROUP', 'EVALUATION CONTEXT',
                             'FUNCTION', 'INDEXTYPE', 'JAVA CLASS',
                             'JAVA DATA', 'JAVA RESOURCE', 'LIBRARY',
                             'LOB', 'OPERATOR', 'PACKAGE',
                             'PACKAGE BODY', 'PROCEDURE', 'QUEUE',
                             'RESOURCE PLAN', 'TRIGGER', 'TYPE',
                             'TYPE BODY')
UNION ALL
SELECT user_id id, username owner, NULL name
   FROM dba_users;
 
-- create the directory object where the SQL traces are stored
CREATE DIRECTORY SQL_TRACE_DIR as '/home/foo/trace';

-- create the STS
EXEC DBMS_SQLTUNE.CREATE_SQLSET('my_sts', 'test purpose');
 
-- load the SQL statements into STS from SQL TRACE
DECLARE
   cur sys_refcursor;
BEGIN
   OPEN cur FOR
   SELECT value(p)
     FROM TABLE(
        DBMS_SQLTUNE.SELECT_SQL_TRACE(
           directory=&gt;'SQL_TRACE_DIR',
           file_name=&gt;'%trc',
           mapping_table_name=&gt;'mapping')) p;
   DBMS_SQLTUNE.LOAD_SQLSET('my_sts', cur);
   CLOSE cur;
END;
/ 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS73150" class="refsect2"><a id="CACEFBJH"></a>
<hr />
<h3 class="refsect2"><a id="sthref9791"></a><a id="sthref9792"></a>SELECT_SQLPA_TASK Function</h3>
<p>This function collects SQL statements from a SQL Performance Analyzer comparison task.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</p>
</li>
<li>
<p><a class="olink RATUG" href="../../server.112/e41481/toc.htm"><span class="italic">Oracle Database Real Application Testing User's Guide</span></a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9793"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SELECT_SQLPA_TASK(
    task_name         IN VARCHAR2,
    task_owner        IN VARCHAR2 := NULL,
    execution_name    IN VARCHAR2 := NULL,
    level_filter      IN VARCHAR2 := 'REGRESSED',
    basic_filter      IN VARCHAR2 := NULL,
    object_filter     IN VARCHAR2 := NULL,
    attribute_list    IN VARCHAR2 := 'TYPICAL')
  RETURN sys.sqlset PIPELINED;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9794"></a>Parameters</p>
<div id="ARPLS73151" class="tblformal">
<p class="titleintable"><a id="sthref9795"></a><a id="sthref9796"></a>Table 140-41 SELECT_SQLPA_TASK Function Parameters</p>
<table class="cellalignment1229" title="SELECT_SQLPA_TASK Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t80">Parameter</th>
<th class="cellalignment1227" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t80" headers="r1c1-t80">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t80 r1c2-t80">
<p>Name of the SQL Performance Analyzer task</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t80" headers="r1c1-t80">
<p><code>task_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t80 r1c2-t80">
<p>Owner of the SQL Performance Analyzer task. If <code>NULL</code>, then assume the current user.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t80" headers="r1c1-t80">
<p><code>execution_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t80 r1c2-t80">
<p>Name of the SQL Performance Analyzer task execution (type <code>COMPARE PERFORMANCE</code>) from which the provided filters will be applied. If <code>NULL</code>, then assume the most recent <code>COMPARE PERFORMANCE</code> execution.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t80" headers="r1c1-t80">
<p><code>level_filter</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t80 r1c2-t80">
<p>Filter to specify which subset of SQLs to include. Same format as <code>DBMS_SQLPA</code>. <code>REPORT_ANALYSIS_TASK</code><code>.LEVEL</code>, with some possible strings removed.</p>
<ul>
<li>
<p><code>IMPROVED</code> includes only improved SQL.</p>
</li>
<li>
<p><code>REGRESSED</code> includes only regressed SQL (default).</p>
</li>
<li>
<p><code>CHANGED</code> includes only SQL with changed performance.</p>
</li>
<li>
<p><code>UNCHANGED</code> includes only SQL with unchanged performance.</p>
</li>
<li>
<p><code>CHANGED_PLANS</code> includes only SQL with plan changes.</p>
</li>
<li>
<p><code>UNCHANGED_PLANS</code> includes only SQL with unchanged plans.</p>
</li>
<li>
<p><code>ERRORS</code> includes only SQL with errors only.</p>
</li>
<li>
<p><code>MISSING_SQL</code> includes only missing SQL statements (across STS).</p>
</li>
<li>
<p><code>NEW_SQL</code> includes only new SQL statements (across STS).</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t80" headers="r1c1-t80">
<p><code>basic filter</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t80 r1c2-t80">
<p>SQL predicate to filter the SQL in addition to the level filters.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t80" headers="r1c1-t80">
<p><code>object_filter</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t80 r1c2-t80">
<p>Currently not supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t80" headers="r1c1-t80">
<p><code>attribute_list</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t80 r1c2-t80">
<p>List of SQL statement attributes to return in the result. The possible values are:</p>
<ul>
<li>
<p><code>TYPICAL</code> - <code>BASIC</code> + SQL plan (without row source statistics) and without object reference list (default)</p>
</li>
<li>
<p><code>BASIC</code> - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.</p>
</li>
<li>
<p><code>ALL</code> - return all attributes</p>
</li>
<li>
<p>Comma-separated list of attribute names this allows to return only a subset of SQL attributes: <code>EXECUTION_STATISTICS</code>, <code>SQL_BINDS</code>, <code>SQL_PLAN_STATISTICS</code> (similar to <code>SQL_PLAN</code> + row source statistics).</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9797"></a>Return Values</p>
<p>This function returns a SQL tuning set object.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9798"></a>Usage Notes</p>
<p>For example, you can use this function to create a SQL tuning set containing the subset of SQL statements that regressed during a SQL Performance Analyzer (SPA) experiment. You can also specify other arbitrary filters.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68458" class="refsect2"><a id="CHEHBBDF"></a>
<hr />
<h3 class="refsect2"><a id="sthref9799"></a><a id="sthref9800"></a>SELECT_SQLSET Function</h3>
<p>This function reads SQLSET contents.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9801"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SELECT_SQLSET (
  sqlset_name         IN   VARCHAR2,
  basic_filter        IN   VARCHAR2 := NULL,
  object_filter       IN   VARCHAR2 := NULL,
  ranking_measure1    IN   VARCHAR2 := NULL,
  ranking_measure2    IN   VARCHAR2 := NULL,
  ranking_measure3    IN   VARCHAR2 := NULL,
  result_percentage   IN   NUMBER   := 1,
  result_limit        IN   NUMBER   := NULL)
  attribute_list      IN   VARCHAR2 := NULL,
  plan_filter         IN   VARCHAR2 := NULL,
  sqlset_owner        IN   VARCHAR2 := NULL,
  recursive_sql       IN   VARCHAR2 := HAS_RECURSIVE_SQL)
 RETURN sys.sqlset PIPELINED;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9802"></a>Parameters</p>
<div id="ARPLS68459" class="tblformal">
<p class="titleintable"><a id="sthref9803"></a><a id="sthref9804"></a>Table 140-42 SELECT_SQLSET Function Parameters</p>
<table class="cellalignment1229" title="SELECT_SQLSET Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t82">Parameter</th>
<th class="cellalignment1227" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t82" headers="r1c1-t82">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t82 r1c2-t82">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t82" headers="r1c1-t82">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t82 r1c2-t82">
<p>The SQL predicate to filter the SQL from the SQL tuning set defined on attributes of the <code>SQLSET_ROW</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t82" headers="r1c1-t82">
<p><code>object_filter</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t82 r1c2-t82">
<p>Currently not supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t82" headers="r1c1-t82">
<p><code>ranking_measure(n)</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t82 r1c2-t82">
<p>An order-by clause on the selected SQL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t82" headers="r1c1-t82">
<p><code>result_percentage</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t82 r1c2-t82">
<p>A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t82" headers="r1c1-t82">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t82 r1c2-t82">
<p>The top L(imit) SQL from the (filtered) source ranked by the ranking measure</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t82" headers="r1c1-t82">
<p><code>attribute_list</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t82 r1c2-t82">
<p>List of SQL statement attributes to return in the result. The possible values are:</p>
<ul>
<li>
<p><code>TYPICAL</code> - <code>BASIC</code> + SQL plan (without row source statistics) and without object reference list (default)</p>
</li>
<li>
<p><code>BASIC</code> - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.</p>
</li>
<li>
<p><code>ALL</code> - return all attributes</p>
</li>
<li>
<p>Comma-separated list of attribute names this allows to return only a subset of SQL attributes: <code>EXECUTION_STATISTICS</code>, <code>SQL_BINDS</code>, <code>SQL_PLAN_STATISTICS</code> (similar to <code>SQL_PLAN</code> + row source statistics).</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t82" headers="r1c1-t82">
<p><code>plan_filter</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t82 r1c2-t82">
<p>The plan filter</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t82" headers="r1c1-t82">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t82 r1c2-t82">
<p>The owner of the SQL tuning set, or <code>NULL</code> for the current schema owner</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t82" headers="r1c1-t82">
<p><code>recursive_sql</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t82 r1c2-t82">
<p>Filter that includes recursive SQL in the SQL tuning set (<code>HAS_RECURSIVE_SQL</code>) or excludes it (<code>NO_RECURSIVE_SQL</code>).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9805"></a>Return Values</p>
<p>This function returns a one <code>SQLSET_ROW</code> per <code>SQL_ID</code> or <code>PLAN_HASH_VALUE</code> pair found in each data source.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9806"></a>Usage Notes</p>
<p>Filters provided to this function are evaluated as part of a SQL run by the current user. As such, they are executed with that user's security privileges and can contain any constructs and subqueries that user can access, but no more.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9807"></a>Examples</p>
<pre>
-- select from a sql tuning set
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE (P) 
    FROM table(dbms_sqltune.select_sqlset('my_workload')) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68460" class="refsect2"><a id="i1009198"></a>
<hr />
<h3 class="refsect2"><a id="sthref9808"></a>SELECT_WORKLOAD_REPOSITORY Functions</h3>
<p>This function collects SQL statements from the workload repository. The overloaded forms let you:</p>
<ul>
<li>
<p>Collect SQL statements from all snapshots between <code>begin_snap</code> and <code>end_snap</code>.</p>
</li>
<li>
<p>Collect SQL statements from a workload repository baseline.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9809"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY (
  begin_snap        IN NUMBER,
  end_snap          IN NUMBER,
  basic_filter      IN VARCHAR2 := NULL,
  object_filter     IN VARCHAR2 := NULL,
  ranking_measure1  IN VARCHAR2 := NULL,
  ranking_measure2  IN VARCHAR2 := NULL,
  ranking_measure3  IN VARCHAR2 := NULL,
  result_percentage IN NUMBER   := 1,
  result_limit      IN NUMBER   := NULL,
  attribute_list    IN VARCHAR2 := NULL,
  recursive_sql     IN VARCHAR2 := HAS_RECURSIVE_SQL)
 RETURN sys.sqlset PIPELINED;

DBMS_SQLTUNE.SELECT_WORKLAOD REPOSITORY (
  baseline_name     IN VARCHAR2,
  basic_filter      IN VARCHAR2 := NULL,
  object_filter     IN VARCHAR2 := NULL,
  ranking_measure1  IN VARCHAR2 := NULL,
  ranking_measure2  IN VARCHAR2 := NULL,
  ranking_measure3  IN VARCHAR2 := NULL,
  result_percentage IN NUMBER   := 1,
  result_limit      IN NUMBER   := NULL,
  attribute_list    IN VARCHAR2 := NULL,
  recursive_sql     IN VARCHAR2 := HAS_RECURSIVE_SQL)
 RETURN sys.sqlset PIPELINED;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9810"></a>Parameters</p>
<div id="ARPLS68461" class="tblformal">
<p class="titleintable"><a id="sthref9811"></a><a id="sthref9812"></a>Table 140-43 SELECT_WORKLOAD_REPOSITORY Function Parameters</p>
<table class="cellalignment1229" title="SELECT_WORKLOAD_REPOSITORY Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t84">Parameter</th>
<th class="cellalignment1227" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t84" headers="r1c1-t84">
<p><code>begin_snap</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t84 r1c2-t84">
<p>Begin snapshot (non-inclusive).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t84" headers="r1c1-t84">
<p><code>end_snap</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t84 r1c2-t84">
<p>End snapshot (inclusive).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t84" headers="r1c1-t84">
<p><code>baseline_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t84 r1c2-t84">
<p>The name of the baseline period.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t84" headers="r1c1-t84">
<p><code>basic_filter</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t84 r1c2-t84">
<p>The SQL predicate to filter the SQL from the workload repository defined on attributes of the <code>SQLSET_ROW</code>. If <code>basic_filter</code> is not set by the caller, the subprogram captures only statements of the type <code>CREATE TABLE</code>, <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>MERGE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t84" headers="r1c1-t84">
<p><code>object_filter</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t84 r1c2-t84">
<p>Currently not supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t84" headers="r1c1-t84">
<p><code>ranking_measure(n)</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t84 r1c2-t84">
<p>An order-by clause on the selected SQL.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t84" headers="r1c1-t84">
<p><code>result_percentage</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t84 r1c2-t84">
<p>A filter which picks the top N% according to the ranking measure given. Note that this applies only if one ranking measure is given.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t84" headers="r1c1-t84">
<p><code>result_limit</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t84 r1c2-t84">
<p>The top L(imit) SQL from the (filtered) source ranked by the ranking measure.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t84" headers="r1c1-t84">
<p><code>attribute_list</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t84 r1c2-t84">
<p>List of SQL statement attributes to return in the result. The possible values are:</p>
<ul>
<li>
<p><code>TYPICAL</code> - <code>BASIC</code> + SQL plan (without row source statistics) and without object reference list (default)</p>
</li>
<li>
<p><code>BASIC</code> - all attributes (such as execution statistics and binds) are returned except the plans. The execution context is always part of the result.</p>
</li>
<li>
<p><code>ALL</code> - return all attributes</p>
</li>
<li>
<p>Comma-separated list of attribute names this allows to return only a subset of SQL attributes: <code>EXECUTION_STATISTICS</code>, <code>SQL_BINDS</code>, <code>SQL_PLAN_STATISTICS</code> (similar to <code>SQL_PLAN</code> + row source statistics).</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t84" headers="r1c1-t84">
<p><code>recursive_sql</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t84 r1c2-t84">
<p>Filter that includes recursive SQL in the SQL tuning set (<code>HAS_RECURSIVE_SQL</code>) or excludes it (<code>NO_RECURSIVE_SQL</code>).</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9813"></a>Return Values</p>
<p>This function returns a one <code>SQLSET_ROW</code> per <code>SQL_ID</code> or <code>PLAN_HASH_VALUE</code> pair found in each data source.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9814"></a>Usage Notes</p>
<p>Filters provided to this function are evaluated as part of a SQL run by the current user. As such, they are executed with that user's security privileges and can contain any constructs and subqueries that user can access, but no more.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9815"></a>Examples</p>
<pre>
-- select statements from snapshots 1-2
DECLARE
  cur sys_refcursor;
BEGIN
  OPEN cur FOR
    SELECT VALUE (P) 
    FROM table(dbms_sqltune.select_workload_repository(1,2)) P;
 
  -- Process each statement (or pass cursor to load_sqlset)
 
  CLOSE cur;
END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68462" class="refsect2"><a id="CHDGAJDB"></a>
<hr />
<h3 class="refsect2"><a id="sthref9816"></a>SET_TUNING_TASK_PARAMETER Procedures</h3>
<p>This procedure updates the value of a SQL tuning parameter of type <code>VARCHAR2</code> or <code>NUMBER</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9817"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SET_TUNING_TASK_PARAMETER(
   task_name    IN  VARCHAR2,
   parameter    IN  VARCHAR2,
   value        IN  VARCHAR2);
</pre>
<pre>
DBMS_SQLTUNE.SET_TUNING_TASK_PARAMETER(
   task_name    IN  VARCHAR2,
   parameter    IN  VARCHAR2,
   value        IN  NUMBER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9818"></a>Parameters</p>
<div id="ARPLS68463" class="tblformal">
<p class="titleintable"><a id="sthref9819"></a><a id="sthref9820"></a>Table 140-44 SET_TUNING_TASK_PARAMETER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_TUNING_TASK_PARAMETER Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SET_TUNING_TASK_PARAMETER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t86">Parameter</th>
<th class="cellalignment1227" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t86" headers="r1c1-t86">
<p><code>task_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t86 r1c2-t86">
<p>Identifier of the task to execute</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t86" headers="r1c1-t86">
<p><code>parameter</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t86 r1c2-t86">
<p>Name of the parameter to set. The possible tuning parameters that can be set by this procedure using the parameter in the form <code>VARCHAR2</code>:</p>
<ul>
<li>
<p><code>APPLY_CAPTURED_COMPILENV</code>: indicates whether the advisor could use the compilation environment captured with the SQL statements. The default is <code>0</code> (that is, <code>NO</code>).</p>
</li>
<li>
<p><code>BASIC_FILTER</code>: basic filter for SQL tuning set</p>
</li>
<li>
<p><code>DAYS_TO_EXPIRE</code>: number of days until the task is deleted</p>
</li>
<li>
<p><code>DEFAULT_EXECUTION_TYPE</code>: the task defaults to this type of execution when none is specified by the <a href="#CHDGEJJA">EXECUTE_TUNING_TASK Function &amp; Procedure</a></p>
</li>
<li>
<p><code>EXECUTION_DAYS_TO_EXPIRE</code>: number of days until the tasks's executions is deleted (without deleting the task)</p>
</li>
<li>
<p><code>LOCAL_TIME_LIMIT</code>: per-statement time out (seconds)</p>
</li>
<li>
<p><code>MODE</code>: tuning scope (comprehensive, limited)</p>
</li>
<li>
<p><code>OBJECT_FILTER</code>: object filter for SQL tuning set</p>
</li>
<li>
<p><code>PLAN_FILTER</code>: plan filter for SQL tuning set (see <code>SELECT_SQLSET</code> for possible values)</p>
</li>
<li>
<p><code>RANK_MEASURE1</code>: first ranking measure for SQL tuning set</p>
</li>
<li>
<p><code>RANK_MEASURE2</code>: second possible ranking measure for SQL tuning set</p>
</li>
<li>
<p><code>RANK_MEASURE3</code>: third possible ranking measure for SQL tuning set</p>
</li>
<li>
<p><code>RESUME_FILTER</code>: a extra filter for SQL tuning sets besides <code>BASIC_FILTER</code></p>
</li>
<li>
<p><code>SQL_LIMIT</code>: maximum number of SQL statements to tune</p>
</li>
<li>
<p><code>SQL_PERCENTAGE</code>: percentage filter of SQL tuning set statements</p>
</li>
<li>
<p><code>TEST_EXECUTE</code>: <code>FULL</code>/<code>AUTO</code>/<code>OFF</code>.</p>
<p>* <code>FULL</code> - test-execute for as much time as necessary, up to the local time limit for the SQL (or the global task time limit if no SQL time limit is set)</p>
<p>* <code>AUTO</code> - test-execute for an automatically-chosen time proportional to the tuning time</p>
<p>* <code>OFF</code> - do not test-execute</p>
</li>
<li>
<p><code>TIME_LIMIT</code>: global time out (seconds)</p>
</li>
<li>
<p><code>USERNAME</code>: username under which the statement is parsed</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t86" headers="r1c1-t86">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t86 r1c2-t86">
<p>New value of the specified parameter</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9821"></a>Usage Notes</p>
<p>When setting automatic tuning task parameters, use the <a href="d_autosta.htm#CIAJFDDI">SET_AUTO_TUNING_TASK_PARAMETER Procedures</a> in the <a href="d_autosta.htm#CIAICGCF">DBMS_AUTO_SQLTUNE</a> package.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68464" class="refsect2"><a id="CACHJDEG"></a>
<hr />
<h3 class="refsect2"><a id="sthref9822"></a>SQLTEXT_TO_SIGNATURE Function</h3>
<p>This function returns a SQL text's signature. The signature can be used to identify SQL text in <code>dba_sql_profiles</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9823"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.SQLTEXT_TO_SIGNATURE (
  sql_text    IN CLOB,  force_match IN BOOLEAN  := FALSE)
 RETURN NUMBER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9824"></a>Parameters</p>
<div id="ARPLS68465" class="tblformal">
<p class="titleintable"><a id="sthref9825"></a><a id="sthref9826"></a>Table 140-45 SQLTEXT_TO_SIGNATURE Function Parameters</p>
<table class="cellalignment1229" title="SQLTEXT_TO_SIGNATURE Function Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.SELECT_WORKLOAD_REPOSITORY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t88">Parameter</th>
<th class="cellalignment1227" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t88" headers="r1c1-t88">
<p><code>sql_text</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t88 r1c2-t88">
<p>SQL text whose signature is required. Required.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t88" headers="r1c1-t88">
<p><code>force_match</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t88 r1c2-t88">
<p>If <code>TRUE</code>, this returns a signature that supports SQL matching with literal values transformed into bind variables. If <code>FALSE</code>, returns the signature based on the text with literals not transformed</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9827"></a>Return Values</p>
<p>This function returns the signature of the specified SQL text.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68466" class="refsect2"><a id="CACDIJJE"></a>
<hr />
<h3 class="refsect2"><a id="sthref9828"></a>UNPACK_STGTAB_SQLPROF Procedure</h3>
<p>This procedure copies profile data stored in the staging table to create profiles on the system.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDCJJGF">SQL Profile Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9829"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF (
   profile_name          IN VARCHAR2 := '%',
   profile_category      IN VARCHAR2 := 'DEFAULT',
   replace               IN BOOLEAN,
   staging_table_name    IN VARCHAR2,
   staging_schema_owner  IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9830"></a>Parameters</p>
<div id="ARPLS68467" class="tblformal">
<p class="titleintable"><a id="sthref9831"></a><a id="sthref9832"></a>Table 140-46 UNPACK_STGTAB_SQLPROF Procedure Parameters</p>
<table class="cellalignment1229" title="UNPACK_STGTAB_SQLPROF Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t90">Parameter</th>
<th class="cellalignment1227" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t90" headers="r1c1-t90">
<p><code>profile_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t90 r1c2-t90">
<p>The name of the profile to unpack (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t90" headers="r1c1-t90">
<p><code>profile_category</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t90 r1c2-t90">
<p>The category from which to unpack profiles (% wildcards acceptable, case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t90" headers="r1c1-t90">
<p><code>replace</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t90 r1c2-t90">
<p>The option to replace profiles if they already exist. Note that profiles cannot be replaced if one in the staging table has the same name as an active profile in a different SQL statement.If <code>FALSE</code>, this function raises errors if you try to create a profile that already exists</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t90" headers="r1c1-t90">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t90 r1c2-t90">
<p>The name of the table on which to perform the remap operation (case-insensitive unless double quoted). Required.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t90" headers="r1c1-t90">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t90 r1c2-t90">
<p>The schema where the table resides, or <code>NULL</code> for current schema (case-insensitive unless double quoted)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9833"></a>Usage Notes</p>
<p>Using this procedure requires the <code>CREATE</code> <code>ANY</code> <code>SQL</code> <code>PROFILE</code> privilege and the <code>SELECT</code> privilege on staging table.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9834"></a>Examples</p>
<pre>
-- Unpack all profiles stored in a staging table
EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(replace            =&gt; FALSE, -
                                        staging_table_name =&gt; 'PROFILE_STGTAB');
 
-- If there is a failure during the unpack operation, users can find the profile
-- we failed on and perform a remap_stgtab_sqlprof operation targeting it.  Then
-- they can resume the unpack operation by setting replace to TRUE so that
-- the profiles that were already created are replaced
EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(replace            =&gt; TRUE, -
                                        staging_table_name =&gt; 'PROFILE_STGTAB');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68468" class="refsect2"><a id="CACJDGFI"></a>
<hr />
<h3 class="refsect2"><a id="sthref9835"></a>UNPACK_STGTAB_SQLSET Procedure</h3>
<p>This procedure copies one or more SQL tuning sets from their location in the staging table into the SQL tuning sets schema, making them proper SQL tuning sets.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9836"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET (
   sqlset_name          IN VARCHAR2 := '%',
   sqlset_owner         IN VARCHAR2 := NULL,
   replace              IN BOOLEAN,
   staging_table_name   IN VARCHAR2,
   staging_schema_owner IN VARCHAR2 := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9837"></a>Parameters</p>
<div id="ARPLS68469" class="tblformal">
<p class="titleintable"><a id="sthref9838"></a><a id="sthref9839"></a>Table 140-47 UNPACK_STGTAB_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="UNPACK_STGTAB_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.CREATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t92">Parameter</th>
<th class="cellalignment1227" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t92" headers="r1c1-t92">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t92 r1c2-t92">
<p>The name of the tuning set to unpack (not NULL). Wildcard characters ('%') are supported to unpack multiple tuning sets in a single call. For example, just specify '%' to unpack all tuning sets from the staging table.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t92" headers="r1c1-t92">
<p><code>sqlset_owner</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t92 r1c2-t92">
<p>The name of tuning set owner, or <code>NULL</code> for current schema owner. Wildcards supported.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t92" headers="r1c1-t92">
<p><code>replace</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t92 r1c2-t92">
<p>Replaces tuning set if they already exist.If <code>FALSE</code>, raises errors if you try to create a tuning set that already exists</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t92" headers="r1c1-t92">
<p><code>staging_table_name</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t92 r1c2-t92">
<p>The name of the staging table, moved after a call to the <a href="#CACIFBAJ">PACK_STGTAB_SQLSET Procedure</a> (case-sensitive)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t92" headers="r1c1-t92">
<p><code>staging_schema_owner</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t92 r1c2-t92">
<p>The name of staging table owner, or <code>NULL</code> for current schema owner (case-sensitive)</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9840"></a>Usage Notes</p>
<ul>
<li>
<p>Users can drop the staging table after this procedure completes successfully.</p>
</li>
<li>
<p>The unpack procedure commits after successfully loading each SQL tuning set. If it fails with one tuning set, no part of that tuning set will have been unpacked, but those which the subprogram had already apprehended continue to exist.</p>
</li>
<li>
<p>When failures occur due to SQL tuning set name or owner conflicts, users should use the <a href="#CACIFDFG">REMAP_STGTAB_SQLSET Procedure</a> to patch the staging table, and then call this procedure again to unpack those tuning sets that remain.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9841"></a>Examples</p>
<pre>
 -- unpack all STS in the staging table
EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET(sqlset_name         =&gt; '%', -
                                       sqlset_owner        =&gt; '%', -
                                       replace             =&gt; FALSE, -
                                       staging_table_name  =&gt; 'STGTAB_SQLSET');
 
-- errors can arise during STS unpack when a STS in the staging table has the
-- same name/owner as STS on the system.  In this case, users should call
-- remap_stgtab_sqlset to patch the staging table and with which to call unpack
-- Replace set to TRUE.
EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET(sqlset_name         =&gt; '%', -
                                       sqlset_owner        =&gt; '%', -
                                       replace             =&gt; TRUE, -
                                       staging_table_name  =&gt; 'STGTAB_SQLSET');
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS68470" class="refsect2"><a id="i1007011"></a>
<hr />
<h3 class="refsect2"><a id="sthref9842"></a>UPDATE_SQLSET Procedures</h3>
<p>This procedure updates selected fields for SQL statement in a SQL tuning set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDGHEAG">SQL Tuning Set Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9843"></a>Syntax</p>
<pre>
DBMS_SQLTUNE.UPDATE_SQLSET (
   sqlset_name      IN  VARCHAR2,
   sql_id           IN  VARCHAR2,
   attribute_name   IN  VARCHAR2,
   attribute_value  IN  VARCHAR2 := NULL);

DBMS_SQLTUNE.UPDATE_SQLSET (
   sqlset_name      IN  VARCHAR2,
   sql_id           IN  VARCHAR2,
   attribute_name   IN  VARCHAR2,
   attribute_value IN NUMBER := NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref9844"></a>Parameters</p>
<div id="ARPLS68471" class="tblformal">
<p class="titleintable"><a id="sthref9845"></a><a id="sthref9846"></a>Table 140-48 UPDATE_SQLSET Procedure Parameters</p>
<table class="cellalignment1229" title="UPDATE_SQLSET Procedure Parameters " summary="This table describes Parameters used by the DBMS_SQLTUNE.UPDATE_SQLSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t94">Parameter</th>
<th class="cellalignment1227" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t94" headers="r1c1-t94">
<p><code>sqlset_name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t94 r1c2-t94">
<p>The SQL tuning set name</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t94" headers="r1c1-t94">
<p><code>sql_id</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t94 r1c2-t94">
<p>The identifier of the statement to update</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t94" headers="r1c1-t94">
<p><code>attribute_name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t94 r1c2-t94">
<p>The name of the attribute to modify</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t94" headers="r1c1-t94">
<p><code>attribute_value</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t94 r1c2-t94">
<p>The new value of the attribute</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="d_sqlpa.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="d_stat_f.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
