<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>UTL_HTTP</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:56:6Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="u_file.htm" title="Previous" type="text/html" />
<link rel="Next" href="u_i18n.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">229/265</span> <!-- End Header -->
<div id="ARPLS070" class="chapter"><a id="CHDIAFFA"></a>
<h1 class="chapter"><span class="secnum">225</span> UTL_HTTP</h1>
<p>The <code><a id="sthref16731"></a>UTL_HTTP</code> package makes Hypertext Transfer Protocol (HTTP) callouts from SQL and PL/SQL. You can use it to access data on the Internet over HTTP.</p>
<p>When the package fetches data from a Web site using HTTPS, it requires Oracle Wallet Manager which can be created by either Oracle Wallet Manager or the orapki utility. Non-HTTPS fetches do not require an Oracle wallet.</p>
<div class="infoboxnotealso">
<p class="notep1"><span class="bold">See Also</span>:</p>
<ul>
<li>
<p><a href="u_url.htm#BABBJBDF">Chapter 239, "UTL_URL"</a></p>
</li>
<li>
<p><a href="u_smtp.htm#CHDHHBJD">Chapter 236, "UTL_SMTP"</a></p>
</li>
<li>
<p><a class="olink ASOAG" href="../../network.112/e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information on Wallet Manager</p>
</li>
</ul>
</div>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CHDDIHAI">Using UTL_HTTP</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Security Model</p>
</li>
<li>
<p>Constants</p>
</li>
<li>
<p>Datatypes</p>
</li>
<li>
<p>Operational Notes</p>
</li>
<li>
<p>Exceptions</p>
</li>
<li>
<p>Examples</p>
</li>
</ul>
</li>
<li>
<p><a href="#i997468">Subprogram Groups</a></p>
<ul>
<li>
<p>Session Settings Subprograms</p>
</li>
<li>
<p>HTTP Requests Subprograms</p>
</li>
<li>
<p>HTTP Request Contexts Subprograms</p>
</li>
<li>
<p>HTTP Responses Subprograms</p>
</li>
<li>
<p>HTTP Cookies Subprograms</p>
</li>
<li>
<p>HTTP Persistent Connections Subprograms</p>
</li>
<li>
<p>Error Conditions Subprograms</p>
</li>
</ul>
</li>
<li>
<p><a href="#i1029627">Summary of UTL_HTTP Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CHDDIHAI"></a>
<hr />
<div id="ARPLS70954" class="refsect1">
<h2 class="refsect1"><a id="sthref16732"></a>Using UTL_HTTP</h2>
<p>This section contains topics which relate to using the <code>UTL_HTTP</code> package.</p>
<ul>
<li>
<p><a href="#i1011581">Overview</a></p>
</li>
<li>
<p><a href="#CEGDJBGI">Security Model</a></p>
</li>
<li>
<p><a href="#i1012366">Constants</a></p>
</li>
<li>
<p><a href="#i1012658">Datatypes</a></p>
</li>
<li>
<p><a href="#BHAHHCEH">Operational Notes</a></p>
</li>
<li>
<p><a href="#i1016057">Exceptions</a></p>
</li>
<li>
<p><a href="#CHDBIGIF">Examples</a></p>
</li>
</ul>
<div id="ARPLS70955" class="refsect2"><a id="i1011581"></a>
<hr />
<h3 class="refsect2">Overview</h3>
<p>With the <code>UTL_HTTP</code> package, you can write PL/SQL programs that communicate with Web (HTTP) servers. And <code>UTL_HTTP</code> contains a function that can be used in SQL queries.</p>
<p>The package supports HTTP over the Secured Socket Layer protocol (SSL), also known as HTTPS. It also supports SSL client authentication by sending the client-certificate in a wallet to authenticate with the remote Web server.</p>
<p>Other Internet-related data-access protocols (such as the File Transfer Protocol (FTP) or the Gopher protocol) are also supported using an HTTP proxy server that supports those protocols.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS70956" class="refsect2"><a id="CEGDJBGI"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>This package is an invoker's rights package and the invoking user will need the <code>connect</code> privilege granted in the access control list assigned to the remote network host to which he wants to connect, as well as the <code>use-client-certificates</code> or the <code>use-passwords</code> privilege to authenticate himself with the remote Web server using the credentials stored in an Oracle wallet.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
For more information, see <a class="olink DBSEG40012" href="../../network.112/e36292/authorization.htm#DBSEG40012">Managing Fine-grained Access to External Network Services</a> in <a class="olink DBSEG" href="../../network.112/e36292/toc.htm">Oracle Database Security Guide</a></div>
</div>
<!-- class="refsect2" -->
<div id="ARPLS70957" class="refsect2"><a id="i1012366"></a>
<hr />
<h3 class="refsect2">Constants</h3>
<p>The <code>UTL_HTTP</code> package uses the constants shown in following tables.</p>
<ul>
<li>
<p><a href="#BABJBIIE">UTL_HTTP Constants - HTTP Versions</a></p>
</li>
<li>
<p><a href="#BABEHBAH">UTL_HTTP Constants - Default Ports</a></p>
</li>
<li>
<p><a href="#BABJHJJA">UTL_HTTP Constants - HTTP 1.1 Status Codes</a></p>
</li>
</ul>
<div id="ARPLS70958" class="tblformal">
<p class="titleintable"><a id="sthref16733"></a><a id="BABJBIIE"></a>Table 225-1 UTL_HTTP Constants - HTTP Versions</p>
<table class="cellalignment1229" title="UTL_HTTP Constants - HTTP Versions" summary="This table describes HTTP Version constants used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Name</th>
<th class="cellalignment1227" id="r1c2-t4">Type</th>
<th class="cellalignment1227" id="r1c3-t4">Value</th>
<th class="cellalignment1227" id="r1c4-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><code>HTTP_VERSION_1_0</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p><code>VARCHAR2</code>(10)</p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c3-t4">
<p><code>'HTTP/1.0'</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c4-t4">
<p>Denotes HTTP version 1.0 that can be used in the function <code>BEGIN_REQUEST</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><code>HTTP_VERSION_1_1</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p><code>VARCHAR2</code>(10)</p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c3-t4">
<p><code>'HTTP/1.1'</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c4-t4">
<p>Denotes HTTP version 1.1 that can be used in the function <code>BEGIN_REQUEST</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS70959" class="tblformal">
<p class="titleintable"><a id="sthref16734"></a><a id="BABEHBAH"></a>Table 225-2 UTL_HTTP Constants - Default Ports</p>
<table class="cellalignment1229" title="UTL_HTTP Constants - Default Ports" summary="This table describes Default Port constants used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Name</th>
<th class="cellalignment1227" id="r1c2-t5">Type</th>
<th class="cellalignment1227" id="r1c3-t5">Value</th>
<th class="cellalignment1227" id="r1c4-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><code>DEFAULT_HTTP_PORT</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c3-t5">
<p><code>80</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c4-t5">
<p>The default TCP/IP port (80) at which a Web server or proxy server listens</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><code>DEFAULT_HTTPS_PORT</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c3-t5">
<p><code>443</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c4-t5">
<p>The default TCP/IP port (443) at which an HTTPS Web server listens</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS70960" class="tblformal">
<p class="titleintable"><a id="sthref16735"></a><a id="BABJHJJA"></a>Table 225-3 UTL_HTTP Constants - HTTP 1.1 Status Codes</p>
<table class="cellalignment1229" title="UTL_HTTP Constants - HTTP 1.1 Status Codes" summary="This table lists HTTP1.1 Status Code constants used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Name</th>
<th class="cellalignment1227" id="r1c2-t6">Type</th>
<th class="cellalignment1227" id="r1c3-t6">Value</th>
<th class="cellalignment1227" id="r1c4-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><code>HTTP_CONTINUE</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c3-t6">
<p><code>100</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c4-t6">
<p>The client should continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><code>HTTP_SWITCHING_PROTOCOLS</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c3-t6">
<p><code>101</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c4-t6">
<p>The server understands and is willing to comply with the client's request, through the Upgrade message header field, for a change in the application protocol being used on this connection. The server will switch protocols to those defined by the response's Upgrade header field immediately after the empty line which terminates the 101 response.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><code>HTTP_OK</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c3-t6">
<p><code>200</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c4-t6">
<p>The request has succeeded. The information returned with the response is dependent on the method used in the request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t6" headers="r1c1-t6">
<p><code>HTTP_CREATED CONSTANT</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c3-t6">
<p><code>201</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c4-t6">
<p>The request has been fulfilled and resulted in a new resource being created.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t6" headers="r1c1-t6">
<p><code>HTTP_ACCEPTED</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c3-t6">
<p><code>202</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c4-t6">
<p>The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t6" headers="r1c1-t6">
<p><code>HTTP_NON_AUTHORITATIVE_INFO</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c3-t6">
<p><code>203</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c4-t6">
<p>The returned metainformation in the entity-header is not the definitive set as available from the origin server, but is gathered from a local or a third-party copy.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t6" headers="r1c1-t6">
<p><code>HTTP_NO_CONTENT</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c3-t6">
<p><code>204</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c4-t6">
<p>The server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t6" headers="r1c1-t6">
<p><code>HTTP_RESET_CONTENT</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c3-t6">
<p><code>205</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c4-t6">
<p>The server has fulfilled the request and the user agent should reset the document view which caused the request to be sent. The response must not include an entity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t6" headers="r1c1-t6">
<p><code>HTTP_PARTIAL_CONTENT</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t6 r1c3-t6">
<p><code>206</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t6 r1c4-t6">
<p>The server has fulfilled the partial GET request for the resource.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t6" headers="r1c1-t6">
<p><code>HTTP_MULTIPLE_CHOICES</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t6 r1c3-t6">
<p><code>300</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t6 r1c4-t6">
<p>The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t6" headers="r1c1-t6">
<p><code>HTTP_MOVED_PERMANENTLY</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t6 r1c3-t6">
<p><code>301</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t6 r1c4-t6">
<p>The requested resource has been assigned a new permanent URI and any future references to this resource should use one of the returned URIs.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t6" headers="r1c1-t6">
<p><code>HTTP_FOUND CONSTANT</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t6 r1c3-t6">
<p><code>302</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t6 r1c4-t6">
<p>The requested resource resides temporarily under a different URI.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t6" headers="r1c1-t6">
<p><code>HTTP_SEE_OTHER</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t6 r1c3-t6">
<p><code>303</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t6 r1c4-t6">
<p>The response to the request can be found under a different URI and should be retrieved using a GET method on that resource.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t6" headers="r1c1-t6">
<p><code>HTTP_NOT_MODIFIED</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t6 r1c3-t6">
<p><code>304</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t6 r1c4-t6">
<p>If the client has performed a conditional GET request and access is allowed, but the document has not been modified, the server responds with this status code.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t6" headers="r1c1-t6">
<p><code>HTTP_USE_PROXY</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t6 r1c3-t6">
<p><code>305</code></p>
</td>
<td class="cellalignment1228" headers="r16c1-t6 r1c4-t6">
<p>The requested resource must be accessed through the proxy given by the Location field. The Location field gives the URI of the proxy.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t6" headers="r1c1-t6">
<p><code>HTTP_TEMPORARY_REDIRECT</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t6 r1c3-t6">
<p><code>307</code></p>
</td>
<td class="cellalignment1228" headers="r17c1-t6 r1c4-t6">
<p>The requested resource resides temporarily under a different URI.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t6" headers="r1c1-t6">
<p><code>HTTP_BAD_REQUEST</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t6 r1c3-t6">
<p><code>400</code></p>
</td>
<td class="cellalignment1228" headers="r18c1-t6 r1c4-t6">
<p>The request could not be understood by the server due to malformed syntax.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t6" headers="r1c1-t6">
<p><code>HTTP_UNAUTHORIZED</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t6 r1c3-t6">
<p><code>401</code></p>
</td>
<td class="cellalignment1228" headers="r19c1-t6 r1c4-t6">
<p>The request requires user authentication. The client may repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t6" headers="r1c1-t6">
<p><code>HTTP_PAYMENT_REQUIRED</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t6 r1c3-t6">
<p><code>402</code></p>
</td>
<td class="cellalignment1228" headers="r20c1-t6 r1c4-t6">
<p>This code is reserved for future use.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t6" headers="r1c1-t6">
<p><code>HTTP_FORBIDDEN</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t6 r1c3-t6">
<p><code>403</code></p>
</td>
<td class="cellalignment1228" headers="r21c1-t6 r1c4-t6">
<p>The server understood the request, but is refusing to fulfill it.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t6" headers="r1c1-t6">
<p><code>HTTP_NOT_FOUND</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t6 r1c3-t6">
<p><code>404</code></p>
</td>
<td class="cellalignment1228" headers="r22c1-t6 r1c4-t6">
<p>The server has not found anything matching the Request-URI.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t6" headers="r1c1-t6">
<p><code>HTTP_NOT_ACCEPTABLE</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t6 r1c3-t6">
<p><code>406</code></p>
</td>
<td class="cellalignment1228" headers="r23c1-t6 r1c4-t6">
<p>The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t6" headers="r1c1-t6">
<p><code>HTTP_PROXY_AUTH_REQUIRED</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t6 r1c3-t6">
<p><code>407</code></p>
</td>
<td class="cellalignment1228" headers="r24c1-t6 r1c4-t6">
<p>This code is similar to 401 (Unauthorized), but indicates that the client must first authenticate itself with the proxy.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t6" headers="r1c1-t6">
<p><code>HTTP_REQUEST_TIME_OUT</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t6 r1c3-t6">
<p><code>408</code></p>
</td>
<td class="cellalignment1228" headers="r25c1-t6 r1c4-t6">
<p>The client did not produce a request within the time that the server was prepared to wait.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t6" headers="r1c1-t6">
<p><code>HTTP_CONFLICT</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t6 r1c3-t6">
<p><code>409</code></p>
</td>
<td class="cellalignment1228" headers="r26c1-t6 r1c4-t6">
<p>The request could not be completed due to a conflict with the current state of the resource.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t6" headers="r1c1-t6">
<p><code>HTTP_GONE</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t6 r1c3-t6">
<p><code>410</code></p>
</td>
<td class="cellalignment1228" headers="r27c1-t6 r1c4-t6">
<p>The requested resource is no longer available at the server and no forwarding address is known.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t6" headers="r1c1-t6">
<p><code>HTTP_LENGTH_REQUIRED</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t6 r1c3-t6">
<p><code>411</code></p>
</td>
<td class="cellalignment1228" headers="r28c1-t6 r1c4-t6">
<p>The server refuses to accept the request without a defined <code>Content-Length</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t6" headers="r1c1-t6">
<p><code>HTTP_PRECONDITION_FAILED</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t6 r1c3-t6">
<p><code>412</code></p>
</td>
<td class="cellalignment1228" headers="r29c1-t6 r1c4-t6">
<p>The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t6" headers="r1c1-t6">
<p><code>HTTP_REQUEST_ENTITY_TOO_LARGE CONSTANT</code></p>
</td>
<td class="cellalignment1228" headers="r30c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r30c1-t6 r1c3-t6">
<p><code>413</code></p>
</td>
<td class="cellalignment1228" headers="r30c1-t6 r1c4-t6">
<p>The server is refusing to process a request because the request entity is larger than the server is willing or able to process.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t6" headers="r1c1-t6">
<p><code>HTTP_REQUEST_URI_TOO_LARGE</code></p>
</td>
<td class="cellalignment1228" headers="r31c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r31c1-t6 r1c3-t6">
<p><code>414</code></p>
</td>
<td class="cellalignment1228" headers="r31c1-t6 r1c4-t6">
<p>The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t6" headers="r1c1-t6">
<p><code>HTTP_UNSUPPORTED_MEDIA_TYPE</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t6 r1c3-t6">
<p><code>415</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t6 r1c4-t6">
<p>The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t6" headers="r1c1-t6">
<p><code>HTTP_REQ_RANGE_NOT_SATISFIABLE</code></p>
</td>
<td class="cellalignment1228" headers="r33c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r33c1-t6 r1c3-t6">
<p><code>416</code></p>
</td>
<td class="cellalignment1228" headers="r33c1-t6 r1c4-t6">
<p>A server returns a response with this status code if a request included a Range request-header field, and none of the range-specifier values in this field overlap the current extent of the selected resource, and the request did not include an If-Range request-header field.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t6" headers="r1c1-t6">
<p><code>HTTP_EXPECTATION_FAILED</code></p>
</td>
<td class="cellalignment1228" headers="r34c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r34c1-t6 r1c3-t6">
<p><code>417</code></p>
</td>
<td class="cellalignment1228" headers="r34c1-t6 r1c4-t6">
<p>The expectation given in an Expect request-header field could not be met by this server, or, if the server is a proxy, the server has unambiguous evidence that the request could not be met by the next-hop server.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t6" headers="r1c1-t6">
<p><code>HTTP_NOT_IMPLEMENTED</code></p>
</td>
<td class="cellalignment1228" headers="r35c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r35c1-t6 r1c3-t6">
<p><code>501</code></p>
</td>
<td class="cellalignment1228" headers="r35c1-t6 r1c4-t6">
<p>The server does not support the functionality required to fulfill the request.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t6" headers="r1c1-t6">
<p><code>HTTP_BAD_GATEWAY</code></p>
</td>
<td class="cellalignment1228" headers="r36c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r36c1-t6 r1c3-t6">
<p><code>502</code></p>
</td>
<td class="cellalignment1228" headers="r36c1-t6 r1c4-t6">
<p>The server, while acting as a gateway or proxy, received an invalid response from the upstream server it accessed in attempting to fulfill the request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r37c1-t6" headers="r1c1-t6">
<p><code>HTTP_SERVICE_UNAVAILABLE</code></p>
</td>
<td class="cellalignment1228" headers="r37c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r37c1-t6 r1c3-t6">
<p><code>503</code></p>
</td>
<td class="cellalignment1228" headers="r37c1-t6 r1c4-t6">
<p>The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r38c1-t6" headers="r1c1-t6">
<p><code>HTTP_GATEWAY_TIME_OUT</code></p>
</td>
<td class="cellalignment1228" headers="r38c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r38c1-t6 r1c3-t6">
<p><code>504</code></p>
</td>
<td class="cellalignment1228" headers="r38c1-t6 r1c4-t6">
<p>The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server specified by the URI (for example, HTTP, FTP, LDAP) or some other auxiliary server (for example, DNS) it needed to access in attempting to complete the request.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r39c1-t6" headers="r1c1-t6">
<p><code>HTTP_VERSION_NOT_SUPPORTED</code></p>
</td>
<td class="cellalignment1228" headers="r39c1-t6 r1c2-t6">
<p><code>PLS_INTEGER</code></p>
</td>
<td class="cellalignment1228" headers="r39c1-t6 r1c3-t6">
<p><code>505</code></p>
</td>
<td class="cellalignment1228" headers="r39c1-t6 r1c4-t6">
<p>The server does not support, or refuses to support, the HTTP protocol version that was used in the request message.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70961" class="refsect2"><a id="i1012658"></a>
<hr />
<h3 class="refsect2">Datatypes</h3>
<ul>
<li>
<p><a href="#i1012681">REQ Type</a></p>
</li>
<li>
<p><a href="#i1012713">RESP Type</a></p>
</li>
<li>
<p><a href="#i1012714">COOKIE and COOKIE_TABLE Types</a></p>
</li>
<li>
<p><a href="#i1012715">CONNECTION Type</a></p>
</li>
<li>
<p><a href="#BHAJJCEJ">REQUEST_CONTEXT_KEY Type</a></p>
</li>
</ul>
<div id="ARPLS70962" class="refsect3"><a id="i1012681"></a>
<h4 class="refsect3">REQ Type</h4>
<p>Use this PL/SQL record type to represent an HTTP request.</p>
<p class="subhead2"><a id="ARPLS70963"></a>Syntax</p>
<pre>
TYPE req IS RECORD (
   url           VARCHAR2(32767),
   method        VARCHAR2(64),
   http_version  VARCHAR2(64));
</pre>
<p class="subhead2"><a id="ARPLS70964"></a>Parameters</p>
<div id="ARPLS70965" class="tblformal">
<p class="titleintable"><a id="sthref16736"></a><a id="sthref16737"></a>Table 225-4 REQ Type Parameters</p>
<table class="cellalignment1229" title="REQ Type Parameters" summary="This table describes Parameters of the REQ Type used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Parameter</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><code>url</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>The URL of the HTTP request. It is set after the request is created by <code>BEGIN_REQUEST</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><code>method</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>The method to be performed on the resource identified by the URL. It is set after the request is created by <code>BEGIN_REQUEST</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t7" headers="r1c1-t7">
<p><code>http_version</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c2-t7">
<p>The HTTP protocol version used to send the request. It is set after the request is created by <code>BEGIN_REQUEST</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS70966"></a>Usage Notes</p>
<p>The information returned in <code>REQ</code> from the interface <code>begin_request</code> is for read-only. Changing the field values in the record has no effect on the request.</p>
<p>There are other fields in <code>REQ</code> record type whose names begin with the prefix <code>private_.</code> The fields are private and are intended for use by implementation of the <code>UTL_HTTP</code> package. You should not modify the fields.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS72979" class="refsect3"><a id="BHAJJCEJ"></a>
<h4 class="refsect3">REQUEST_CONTEXT_KEY Type</h4>
<p>This type is used to represent the key to a request context. A request context is a context that holds a private wallet and cookie table to make a HTTP request. This private wallet and cookie table, unlike the session-wide ones maintained in the package, will not be shared with other HTTP requests within the database session.</p>
<p class="subhead2"><a id="ARPLS72980"></a>Syntax</p>
<pre>
SUBTYPE request_context_key IS PLS_INTEGER;
</pre>
<p class="subhead2"><a id="ARPLS72981"></a>Usage Notes</p>
<p>To provide enhanced security, <code>UTL_HTTP</code> allows PL/SQL programs to create request contexts. A request context is a private context that holds a wallet and a cookie table that will not be shared with other programs in the same database session when making HTTP requests and receiving HTTP responses. PL/SQL programs should use request contexts when they need to use wallets or cookies that contain sensitive information such as authentication credentials.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70967" class="refsect3"><a id="i1012713"></a>
<h4 class="refsect3">RESP Type</h4>
<p>This PL/SQL record type is used to represent an HTTP response.</p>
<p class="subhead2"><a id="ARPLS70968"></a>Syntax</p>
<pre>
TYPE resp IS RECORD (
   status_code    PLS_INTEGER,
   reason_phrase  VARCHAR2(256),
   http_version   VARCHAR2(64));
</pre>
<p class="subhead2"><a id="ARPLS70969"></a>Parameters</p>
<div id="ARPLS70970" class="tblformal">
<p class="titleintable"><a id="sthref16738"></a><a id="sthref16739"></a>Table 225-5 RESP Type Parameters</p>
<table class="cellalignment1229" title="RESP Type Parameters" summary="This table describes Parameters of the RESP Type used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t8">Parameter</th>
<th class="cellalignment1227" id="r1c2-t8">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t8" headers="r1c1-t8">
<p><code>status_code</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t8 r1c2-t8">
<p>The status code returned by the Web server. It is a 3-digit integer that indicates the results of the HTTP request as handled by the Web server. It is set after the response is processed by <code>GET_RESPONSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t8" headers="r1c1-t8">
<p><code>reason_phrase</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t8 r1c2-t8">
<p>The short textual message returned by the Web server that describe the status code. It gives a brief description of the results of the HTTP request as handled by the Web server. It is set after the response is processed by <code>GET_RESPONSE</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t8" headers="r1c1-t8">
<p><code>http_version</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t8 r1c2-t8">
<p>The HTTP protocol version used in the HTTP response. It is set after the response is processed by <code>GET_RESPONSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS70971"></a>Usage Notes</p>
<p>The information returned in <code>RESP</code> from the interface <code>GET_RESPONSE</code> is read-only. There are other fields in the <code>RESP</code> record type whose names begin with the prefix <code>private_.</code> The fields are private and are intended for use by implementation of the <code>UTL_HTTP</code> package. You should not modify the fields.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70972" class="refsect3"><a id="i1012714"></a>
<h4 class="refsect3">COOKIE and COOKIE_TABLE Types</h4>
<p>The <code>COOKIE</code> type is the PL/SQL record type that represents an HTTP cookie. The <code>COOKIE_TABLE</code> type is a PL/SQL index-by-table type that represents a collection of HTTP cookies.</p>
<p class="subhead2"><a id="ARPLS70973"></a>Syntax</p>
<pre>
TYPE cookie IS RECORD (
   name  VARCHAR2(256),
   value  VARCHAR2(1024),
   domain  VARCHAR2(256),
   expire  TIMESTAMP WITH TIME ZONE,
   path  VARCHAR2(1024),
   secure  BOOLEAN,
   version  PLS_INTEGER,
   comment  VARCHAR2(1024));

TYPE cookie_table IS TABLE OF cookie INDEX BY binary_integer;
</pre>
<p class="subhead2"><a id="ARPLS70974"></a>Fields of COOKIE Record Type</p>
<p><a href="#CHDIBBBD">Table 225-6</a> shows the fields for the <code>COOKIE</code> and <code>COOKIE_TABLE</code> record types.</p>
<div id="ARPLS70975" class="tblformal">
<p class="titleintable"><a id="sthref16740"></a><a id="CHDIBBBD"></a>Table 225-6 Fields of COOKIE and COOKIE_TABLE Type</p>
<table class="cellalignment1229" title="Fields of COOKIE and COOKIE_TABLE Type" summary="This table describes Parameters of the COOKIE Type used by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Field</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>The name of the HTTP cookie</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p>The value of the cookie</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t9" headers="r1c1-t9">
<p><code>domain</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t9 r1c2-t9">
<p>The domain for which the cookie is valid</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t9" headers="r1c1-t9">
<p><code>expire</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t9 r1c2-t9">
<p>The time by which the cookie will expire</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t9" headers="r1c1-t9">
<p><code>path</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t9 r1c2-t9">
<p>The subset of URLs to which the cookie applies</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t9" headers="r1c1-t9">
<p><code>secure</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t9 r1c2-t9">
<p>Should the cookie be returned to the Web server using secured means only.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t9" headers="r1c1-t9">
<p><code>version</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t9 r1c2-t9">
<p>The version of the HTTP cookie specification the cookie conforms. This field is <code>NULL</code> for Netscape cookies.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t9" headers="r1c1-t9">
<p><code>comment</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t9 r1c2-t9">
<p>The comment that describes the intended use of the cookie. This field is <code>NULL</code> for Netscape cookies.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="ARPLS70976"></a>Usage Notes</p>
<p>PL/SQL programs do not usually examine or change the cookie information stored in the <code>UTL_HTTP</code> package. The cookies are maintained by the package transparently. They are maintained inside the <code>UTL_HTTP</code> package, and they last for the duration of the database session only. PL/SQL applications that require cookies to be maintained beyond the lifetime of a database session can read the cookies using <code>GET_COOKIES,</code> store them persistently in a database table, and re-store the cookies back in the package using <code>ADD_COOKIES</code> in the next database session. All the fields in the <code>cookie</code> record, except for the comment field, must be stored. Do not alter the cookie information, which can result in an application error in the Web server or compromise the security of the PL/SQL and the Web server applications. See <a href="#i1013203">"Retrieving and Restoring Cookies"</a>.</p>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70977" class="refsect3"><a id="i1012715"></a>
<h4 class="refsect3">CONNECTION Type</h4>
<p>Use the PL/SQL record type to represent the remote hosts and TCP/IP ports of a network connection that is kept persistent after an HTTP request is completed, according to the HTTP 1.1 protocol specification. The persistent network connection may be reused by a subsequent HTTP request to the same host and port. The subsequent HTTP request may be completed faster because the network connection latency is avoided. <code>connection_table</code> is a PL/SQL table of <code>connection</code>.</p>
<p>For a direct HTTP persistent connection to a Web server, the <code>host</code> and <code>port</code> fields contain the host name and TCP/IP port number of the Web server. The <code>proxy_host</code> and <code>proxy_port</code> fields are not set. For an HTTP persistent connection that was previously used to connect to a Web server using a proxy, the <code>proxy_host</code> and <code>proxy_port</code> fields contain the host name and TCP/IP port number of the proxy server. The host and port fields are not set, which indicates that the persistent connection, while connected to a proxy server, is not bound to any particular target Web server. An HTTP persistent connection to a proxy server can be used to access any target Web server that is using a proxy.</p>
<p>The <code>SSL</code> field indicates if Secured Socket Layer (SSL) is being used in an HTTP persistent connection. An HTTPS request is an HTTP request made over SSL. For an HTTPS (SSL) persistent connection connected using a proxy, the host and port fields contain the host name and TCP/IP port number of the target HTTPS Web server and the fields will always be set. An HTTPS persistent connection to an HTTPS Web server using a proxy server can only be reused to make another request to the same target Web server.</p>
<p class="subhead2"><a id="ARPLS70978"></a>Syntax</p>
<pre>
TYPE connection IS RECORD (
   host  VARCHAR2(256),
   port  PLS_INTEGER,
   proxy_host  VARCHAR2(256),
   proxy_port  PLS_INTEGER,
   ssl  BOOLEAN);

TYPE connection_table IS TABLE OF connection INDEX BY BINARY_INTEGER;
</pre></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70980" class="refsect2"><a id="BHAHHCEH"></a>
<hr />
<h3 class="refsect2">Operational Notes</h3>
<ul>
<li>
<p><a href="#i1029672">Operational Flow</a></p>
</li>
<li>
<p><a href="#i1013453">Simple HTTP Fetches</a></p>
</li>
<li>
<p><a href="#i1014759">HTTP Requests</a></p>
</li>
<li>
<p><a href="#i1015275">HTTP Responses</a></p>
</li>
<li>
<p><a href="#i1016139">HTTP Persistent Connections</a></p>
</li>
<li>
<p><a href="#i1016483">Error Conditions</a></p>
</li>
<li>
<p><a href="#i1013541">Session Settings</a></p>
</li>
<li>
<p><a href="#BHAFDABE">Request Context</a></p>
</li>
<li>
<p><a href="#BHADHFBJ">External Password Store</a></p>
</li>
</ul>
<div id="ARPLS70981" class="refsect3"><a id="i1029672"></a>
<h4 class="refsect3">Operational Flow</h4>
<p>The <code>UTL_HTTP</code> package provides access to the HTTP protocol. The interfaces must be called in the order shown in <a href="#i1029678">Figure 225-1</a>, or an exception will be raised.</p>
<div id="ARPLS70982" class="figure">
<p class="titleinfigure"><a id="i1029678"></a>Figure 225-1 Flow of the Core UTL_HTTP Package</p>
<img width="601" height="568" src="img/arpls006.gif" alt="Description of Figure 225-1 follows" /><br />
<a id="sthref16741" href="img_text/arpls006.htm">Description of "Figure 225-1 Flow of the Core UTL_HTTP Package"</a><br />
<br /></div>
<!-- class="figure" -->
<p>The following can be called at any time:</p>
<ul>
<li>
<p>Non-protocol interfaces that manipulate cookies</p>
<ul>
<li>
<p><code>GET_COOKIE_COUNT</code></p>
</li>
<li>
<p><code>GET_COOKIES</code></p>
</li>
<li>
<p><code>ADD_COOKIES</code></p>
</li>
<li>
<p><code>CLEAR_COOKIES</code></p>
</li>
</ul>
</li>
<li>
<p>Persistent connections</p>
<ul>
<li>
<p><code>GET_PERSISTENT_CONN_COUNT</code></p>
</li>
<li>
<p><code>GET_PERSISTENT_CONNS</code></p>
</li>
<li>
<p><code>CLOSE_PERSISTENT_CONN</code></p>
</li>
<li>
<p><code>CLOSE_PERSISTENT_CONNS</code></p>
</li>
</ul>
</li>
<li>
<p>Interfaces that manipulate attributes and configurations of the <code>UTL_HTTP</code> package in the current session</p>
<ul>
<li>
<p><code>SET_PROXY</code></p>
</li>
<li>
<p><code>GET_PROXY</code></p>
</li>
<li>
<p><code>SET_COOKIE_SUPPORT</code></p>
</li>
<li>
<p><code>GET_COOKIE_SUPPORT</code></p>
</li>
<li>
<p><code>SET_FOLLOW_REDIRECT</code></p>
</li>
<li>
<p><code>GET_FOLLOW_REDIRECT</code></p>
</li>
<li>
<p><code>SET_BODY_CHARSET</code></p>
</li>
<li>
<p><code>GET_BODY_CHARSET</code></p>
</li>
<li>
<p><code>SET_PERSISTENT_CONN_SUPPORT</code></p>
</li>
<li>
<p><code>GET_PERSISTENT_CONN_SUPPORT</code></p>
</li>
<li>
<p><code>SET_DETAILED_EXCP_SUPPORT</code></p>
</li>
<li>
<p><code>GET_DETAILED_EXCP_SUPPORT</code></p>
</li>
<li>
<p><code>SET_WALLET</code></p>
</li>
<li>
<p><code>SET_TRANSFER_TIMEOUT</code></p>
</li>
<li>
<p><code>GET_TRANSFER_TIMEOUT</code></p>
</li>
</ul>
</li>
<li>
<p>Interfaces that retrieve the last detailed exception code and message <code>UTL_HTTP</code> package in the current session</p>
<ul>
<li>
<p><code>GET_DETAILED_SQLCODE</code></p>
</li>
<li>
<p><code>GET_DETAILED_SQLERRM</code></p>
<div class="infobox-note">
<p class="notep1">NOTE:</p>
Some of the request and response interfaces bear the same name as the interface that manipulates the attributes and configurations of the package in the current session. They are overloaded versions of the interface that manipulate a request or a response.</div>
</li>
</ul>
</li>
</ul>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70983" class="refsect3"><a id="i1013453"></a>
<h4 class="refsect3">Simple HTTP Fetches</h4>
<p><code>REQUEST</code> and <code>REQUEST_PIECES</code> take a string uniform resource locator (URL), contact that site, and return the data (typically HTML) obtained from that site.</p>
<p>You should not expect <code>REQUEST</code> or <code>REQUEST_PIECES</code> to succeed in contacting a URL unless you can contact that URL by using a browser on the same machine (and with the same privileges, environment variables, and so on.)</p>
<p>If <code>REQUEST</code> or <code>REQUEST_PIECES</code> fails (for example, if it raises an exception, or if it returns an HTML-formatted error message, but you believe that the URL argument is correct), then try contacting that same URL with a browser to verify network availability from your machine. You may have a proxy server set in your browser that needs to be set with each <code>REQUEST</code> or <code>REQUEST_PIECES</code> call using the optional <code>proxy</code> parameter.</p>
<div class="infobox-note">
<p class="notep1">Note:</p>
<code>UTL_HTTP</code> can also use environment variables to specify its proxy behavior. For example, on UNIX, setting the environment variable <code>http_proxy</code> to a URL uses that service as the proxy server for HTTP requests. Setting the environment variable <code>no_proxy</code> to a domain name does not use the HTTP proxy server for URLs in that domain. When the <code>UTL_HTTP</code> package is executed in the Oracle database server, the environment variables are the ones that are set when the database instance is started.</div>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70984" class="refsect3"><a id="i1014759"></a>
<h4 class="refsect3">HTTP Requests</h4>
<p>The HTTP Requests group of subprograms begin an HTTP request, manipulate attributes, and send the request information to the Web server. When a request is created, it inherits the default settings of the HTTP cookie support, follow-redirect, body character set, persistent-connection support, and transfer timeout of the current session. The settings can be changed by calling the request interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013096">HTTP Requests Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70985" class="refsect3"><a id="i1015275"></a>
<h4 class="refsect3">HTTP Responses</h4>
<p>The HTTP Responses group of subprograms manipulate an HTTP response obtained from GET_RESPONSE and receive response information from the Web server. When a response is created for a request, it inherits settings of the HTTP cookie support, follow-redirect, body character set, persistent-connection support, and transfer timeout from the request. Only the body character set can be changed by calling the response interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013097">HTTP Responses Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70986" class="refsect3"><a id="i1015893"></a>
<h4 class="refsect3">HTTP Cookies</h4>
<p>The <code>UTL_HTTP</code> package provides subprograms to manipulate HTTP cookies.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013098">HTTP Cookies Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70987" class="refsect3"><a id="i1016139"></a>
<h4 class="refsect3">HTTP Persistent Connections</h4>
<p>The <code>UTL_HTTP</code> package provides subprograms to manipulate persistent connections.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013099">HTTP Persistent Connections Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70988" class="refsect3"><a id="i1016483"></a>
<h4 class="refsect3">Error Conditions</h4>
<p>The <code>UTL_HTTP</code> package provides subprograms to retrieve error information.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CHDHCECC">Error Conditions Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70989" class="refsect3"><a id="i1013541"></a>
<h4 class="refsect3">Session Settings</h4>
<p>Session settings manipulate the configuration and default behavior of <code>UTL_HTTP</code> when HTTP requests are executed within a database user session. When a request is created, it inherits the default settings of the HTTP cookie support, follow-redirect, body character set, persistent-connection support, and transfer timeout of the current session. Those settings can be changed later by calling the request interface. When a response is created for a request, it inherits those settings from the request. Only the body character set can be changed later by calling the response interface.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013095">Session Settings Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS70990" class="refsect3"><a id="BHAFDABE"></a>
<h4 class="refsect3">Request Context</h4>
<p>The <code>UTL_HTTP</code> package maintains a common wallet and cookie table within the database session that all HTTP requests and responses share. This makes it easy for users to share the wallet or to maintain application state in the cookies within the session. However, if an application stores private information in the wallet or in the cookies that it does not want to share with other applications in the same database session, it may define a request context to hold its own wallet and cookie table and use this request context to make HTTP requests.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013096">HTTP Requests Subprograms</a></div>
</div>
<!-- class="refsect3" -->
<div id="ARPLS72982" class="refsect3"><a id="BHADHFBJ"></a>
<h4 class="refsect3">External Password Store</h4>
<p>The <code>UTL_HTTP</code> package allows HTTP password credentials to be stored in an Oracle wallet's external password store. The external password store provides an easy but secure storage for passwords and frees the application developers from the need to maintain their own storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BHAHDFJJ">SET_AUTHENTICATION_FROM_WALLET Procedure</a></div>
</div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" -->
<div id="ARPLS70991" class="refsect2"><a id="i1016057"></a>
<hr />
<h3 class="refsect2">Exceptions</h3>
<p><a href="#CHDCDCAB">Table 225-7</a> lists the exceptions that the <code>UTL_HTTP</code> package interface can raise. By default, <code>UTL_HTTP</code> raises the exception <code>request_failed</code> when a request fails to execute. If the package is set to raise a detailed exception by <code>set_detailed_excp_support</code>, the rest of the exceptions will be raised directly (except for the exception <code>end_of_body</code>, which will be raised by <code>READ_TEXT</code>, <code>READ_LINE</code>, and <code>READ_RAW</code> regardless of the setting).</p>
<div id="ARPLS70992" class="tblformalwide">
<p class="titleintable"><a id="sthref16742"></a><a id="CHDCDCAB"></a>Table 225-7 UTL_HTTP Exceptions</p>
<table class="cellalignment1226" title="UTL_HTTP Exceptions" summary="This table describes Exceptions raised by UTL_HTTP subprograms." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Exception</th>
<th class="cellalignment1227" id="r1c2-t21">Error Code</th>
<th class="cellalignment1227" id="r1c3-t21">Reason</th>
<th class="cellalignment1227" id="r1c4-t21">Where Raised</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21">
<p><code>BAD_ARGUMENT</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21">
<p><code>29261</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c3-t21">
<p>The argument passed to the interface is bad</p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c4-t21">
<p>Any HTTP request or response interface when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t21" headers="r1c1-t21">
<p><code>BAD_URL</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c2-t21">
<p><code>29262</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c3-t21">
<p>The requested URL is badly formed</p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c4-t21">
<p><code>BEGIN_REQUEST</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t21" headers="r1c1-t21">
<p><code>END_OF_BODY</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c2-t21">
<p><code>29266</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c3-t21">
<p>The end of HTTP response body is reached</p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c4-t21">
<p><code>READ_RAW</code>, <code>READ_TEXT</code>, and <code>READ_LINE</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t21" headers="r1c1-t21">
<p><code>HEADER_NOT_FOUND</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c2-t21">
<p><code>29265</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c3-t21">
<p>The header is not found</p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c4-t21">
<p><code>GET_HEADER</code>, <code>GET_HEADER_BY_NAME</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t21" headers="r1c1-t21">
<p><code>HTTP_CLIENT_ERROR</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c2-t21">
<p><code>29268</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c3-t21">
<p>From <code>GET_RESPONSE</code>, the response status code indicates that a client error has occurred (status code in 4xx range). Or from <code>begin_request</code>, the HTTP proxy returns a status code in the 4xx range when making an HTTPS request through the proxy.</p>
</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c4-t21">
<p><code>GET_RESPONSE</code>, <code>BEGIN_REQUEST</code> when d<code>etailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t21" headers="r1c1-t21">
<p><code>HTTP_SERVER_ERROR</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t21 r1c2-t21">
<p><code>29269</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t21 r1c3-t21">
<p>From <code>GET_RESPONSE</code>, the response status code indicates that a client error has occurred (status code in 5xx range). Or from <code>begin_request</code>, the HTTP proxy returns a status code in the 5xx range when making an HTTPS request through the proxy.</p>
</td>
<td class="cellalignment1228" headers="r7c1-t21 r1c4-t21">
<p><code>GET_RESPONSE,</code> <code>BEGIN_REQUEST</code> when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t21" headers="r1c1-t21">
<p><code>NETWORK_ACCESS_DENIED</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t21 r1c2-t21">
<p><code>24247</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t21 r1c3-t21">
<p>Access to the remote network host or credentials in an Oracle wallet is denied</p>
</td>
<td class="cellalignment1228" headers="r8c1-t21 r1c4-t21">
<p><code>BEGIN_REQUEST</code> and <code>SET_AUTHENTICATION_FROM_WALLET</code> when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t21" headers="r1c1-t21">
<p><code>ILLEGAL_CALL</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t21 r1c2-t21">
<p><code>29267</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t21 r1c3-t21">
<p>The call to <code>UTL_HTTP</code> is illegal at the current state of the HTTP request</p>
</td>
<td class="cellalignment1228" headers="r9c1-t21 r1c4-t21">
<p><code>SET_HEADER</code>, <code>SET_AUTHENTICATION</code>, and <code>SET_PERSISTENT_CONN_SUPPORT</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t21" headers="r1c1-t21">
<p><code>PARTIAL_MULTIBYTE_EXCEPTION</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t21 r1c2-t21">
<p><code>29275</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t21 r1c3-t21">
<p>No complete character is read and a partial multibyte character is found at the end of the response body</p>
</td>
<td class="cellalignment1228" headers="r10c1-t21 r1c4-t21">
<p><code>READ_TEXT</code> and <code>READ_LINE,</code> when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t21" headers="r1c1-t21">
<p><code>PROTOCOL_ERROR</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t21 r1c2-t21">
<p><code>29263</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t21 r1c3-t21">
<p>An HTTP protocol error occurs when communicating with the Web server</p>
</td>
<td class="cellalignment1228" headers="r11c1-t21 r1c4-t21">
<p><code>SET_HEADER</code>, <code>GET_RESPONSE</code>, <code>READ_RAW</code>, <code>READ_TEXT</code>, and <code>READ_LINE</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t21" headers="r1c1-t21">
<p><code>REQUEST_FAILED</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t21 r1c2-t21">
<p><code>29273</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t21 r1c3-t21">
<p>The request fails to executes</p>
</td>
<td class="cellalignment1228" headers="r12c1-t21 r1c4-t21">
<p>Any HTTP request or response interface when <code>detailed_exception</code> is disabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t21" headers="r1c1-t21">
<p><code>TOO_MANY_REQUESTS</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t21 r1c2-t21">
<p><code>29270</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t21 r1c3-t21">
<p>Too many requests or responses are open</p>
</td>
<td class="cellalignment1228" headers="r13c1-t21 r1c4-t21">
<p><code>BEGIN_REQUEST</code>, when detailed_exception is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t21" headers="r1c1-t21">
<p><code>TRANSFER_TIMEOUT</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t21 r1c2-t21">
<p><code>29276</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t21 r1c3-t21">
<p>No data is read and a read timeout occurred</p>
</td>
<td class="cellalignment1228" headers="r14c1-t21 r1c4-t21">
<p><code>READ_TEXT</code> and <code>READ_LINE,</code> when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t21" headers="r1c1-t21">
<p><code>UNKNOWN_SCHEME</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t21 r1c2-t21">
<p><code>29264</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t21 r1c3-t21">
<p>The scheme of the requested URL is unknown</p>
</td>
<td class="cellalignment1228" headers="r15c1-t21 r1c4-t21">
<p><code>BEGIN_REQUEST</code> and <code>GET_RESPONSE</code>, when <code>detailed_exception</code> is enabled</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" -->
<div class="infobox-note">
<p class="notep1">NOTE:</p>
The <code>partial_multibyte_char</code> and <code>transfer_timeout</code> exceptions are duplicates of the same exceptions defined in <code>UTL_TCP.</code> They are defined in this package so that the use of this package does not require the knowledge of the <code>UTL_TCP</code>. As those exceptions are duplicates, an exception handle that catches the <code>partial_multibyte_char</code> and <code>transfer_timeout</code> exceptions in this package also catch the exceptions in the <code>UTL_TCP.</code></div>
<p>For <code>REQUEST</code> and <code>REQUEST_PIECES</code>, the <code>request_failed</code> exception is raised when any exception occurs and <code>detailed_exception</code> is disabled.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS70993" class="refsect2"><a id="CHDBIGIF"></a>
<hr />
<h3 class="refsect2">Examples</h3>
<p>The following examples demonstrate how to use <code>UTL_HTTP</code>.</p>
<ul>
<li>
<p><a href="#i1013177">General Usage</a></p>
</li>
<li>
<p><a href="#BHAHDHHB">Retrieving HTTP Response Headers</a></p>
</li>
<li>
<p><a href="#i1013202">Handling HTTP Authentication</a></p>
</li>
<li>
<p><a href="#i1013203">Retrieving and Restoring Cookies</a></p>
</li>
<li>
<p><a href="#BHAGGAGH">Making HTTP Request with Private Wallet and Cookie Table</a></p>
</li>
</ul>
<div id="ARPLS70994" class="refsect3"><a id="i1013177"></a>
<h4 class="refsect3">General Usage</h4>
<pre>
SET SERVEROUTPUT ON SIZE 40000
  
DECLARE
  req   UTL_HTTP.REQ;
  resp  UTL_HTTP.RESP;
  value VARCHAR2(1024);
BEGIN
  UTL_HTTP.SET_PROXY('proxy.my-company.com', 'corp.my-company.com');
  req := UTL_HTTP.BEGIN_REQUEST('http://www-hr.corp.my-company.com');
  UTL_HTTP.SET_HEADER(req, 'User-Agent', 'Mozilla/4.0');
  resp := UTL_HTTP.GET_RESPONSE(req);
  LOOP
    UTL_HTTP.READ_LINE(resp, value, TRUE);
    DBMS_OUTPUT.PUT_LINE(value);
  END LOOP;
  UTL_HTTP.END_RESPONSE(resp);
EXCEPTION
  WHEN UTL_HTTP.END_OF_BODY THEN
    UTL_HTTP.END_RESPONSE(resp);
END;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS72983" class="refsect3"><a id="BHAHDHHB"></a>
<h4 class="refsect3">Retrieving HTTP Response Headers</h4>
<pre>
SET SERVEROUTPUT ON SIZE 40000
  
DECLARE
  req   UTL_HTTP.REQ;
  resp  UTL_HTTP.RESP;
  name  VARCHAR2(256);
  value VARCHAR2(1024);
BEGIN
  UTL_HTTP.SET_PROXY('proxy.my-company.com', 'corp.my-company.com');
  req := UTL_HTTP.BEGIN_REQUEST('http://www-hr.corp.my-company.com');
  UTL_HTTP.SET_HEADER(req, 'User-Agent', 'Mozilla/4.0');
  resp := UTL_HTTP.GET_RESPONSE(req);
  DBMS_OUTPUT.PUT_LINE('HTTP response status code: ' || resp.status_code);
  DBMS_OUTPUT.PUT_LINE('HTTP response reason phrase: ' || resp.reason_phrase);
  FOR i IN 1..UTL_HTTP.GET_HEADER_COUNT(resp) LOOP
    UTL_HTTP.GET_HEADER(resp, i, name, value);
    DBMS_OUTPUT.PUT_LINE(name || ': ' || value);
  END LOOP;
  UTL_HTTP.END_RESPONSE(resp);
END;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS70996" class="refsect3"><a id="i1013202"></a>
<h4 class="refsect3">Handling HTTP Authentication</h4>
<pre>
SET serveroutput ON SIZE 40000
  
CREATE OR REPLACE PROCEDURE get_page (url      IN VARCHAR2,
                                      username IN VARCHAR2 DEFAULT NULL,
                                      password IN VARCHAR2 DEFAULT NULL,
                                      realm    IN VARCHAR2 DEFAULT NULL) AS
  req       UTL_HTTP.REQ;
  resp      UTL_HTTP.RESP;
  my_scheme VARCHAR2(256);
  my_realm  VARCHAR2(256);
  name      VARCHAR2(256);
  value     VARCHAR2(256);
BEGIN
  -- Turn off checking of status code. We will check it by ourselves.
  UTL_HTTP.SET_RESPONSE_ERROR_CHECK(FALSE);
  req := UTL_HTTP.BEGIN_REQUEST(url);
  IF (username IS NOT NULL) THEN
    UTL_HTTP.SET_AUTHENTICATION(req, username, password); -- Use HTTP Basic Authen. Scheme
  END IF;
  resp := UTL_HTTP.GET_RESPONSE(req);
  IF (resp.status_code = UTL_HTTP.HTTP_UNAUTHORIZED) THEN
    UTL_HTTP.GET_AUTHENTICATION(resp, my_scheme, my_realm, FALSE);
    DBMS_OUTPUT.PUT_LINE('Web proxy server is protected.');
    DBMS_OUTPUT.PUT('Please supplied the required ' || my_scheme || ' authentication username/password for realm ' || my_realm || ' for the proxy server.');
    UTL_HTTP.END_RESPONSE(resp);
    RETURN;
  ELSIF (resp.status_code = UTL_HTTP.HTTP_PROXY_AUTH_REQUIRED) THEN
    UTL_HTTP.GET_AUTHENTICATION(resp, my_scheme, my_realm, TRUE);
    DBMS_OUTPUT.PUT_LINE('Web page ' || url || ' is protected.');
    DBMS_OUTPUT.PUT('Please supplied the required ' || my_scheme || ' authentication username/password for realm ' || my_realm || ' for the Web page.');
    UTL_HTTP.END_RESPONSE(resp);
    RETURN;
  END IF;
  FOR i IN 1..UTL_HTTP.GET_HEADER_COUNT(resp) LOOP
    UTL_HTTP.GET_HEADER(resp, i, name, value);
    DBMS_OUTPUT.PUT_LINE(name || ': ' || value);
  END LOOP;
  UTL_HTTP.END_RESPONSE(resp);
END;
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS70997" class="refsect3"><a id="i1013203"></a>
<h4 class="refsect3">Retrieving and Restoring Cookies</h4>
<pre>
CREATE TABLE my_cookies (
    session_id  INTEGER,
    name        VARCHAR2(256),
    value       VARCHAR2(1024),
    domain      VARCHAR2(256),
    expire      DATE,
    path        VARCHAR2(1024),
    secure      VARCHAR2(1),
    version     INTEGER);

CREATE SEQUENCE session_id;
SET SERVEROUTPUT ON SIZE 40000

REM Retrieve cookies from UTL_HTTP
CREATE OR REPLACE FUNCTION save_cookies RETURN PLS_INTEGER AS
  cookies        UTL_HTTP.COOKIE_TABLE;
  my_session_id  PLS_INTEGER;
  secure         VARCHAR2(1);
BEGIN
  /* assume that some cookies have been set in previous HTTP requests. */
  UTL_HTTP.GET_COOKIES(cookies);
  SELECT session_id.nextval INTO my_session_id FROM DUAL;
  FOR i in 1..cookies.count LOOP
    IF (cookies(i).secure) THEN
      secure := 'Y';
    ELSE
      secure := 'N';
    END IF;
    INSERT INTO my_cookies
    VALUES (my_session_id, cookies(i).name, cookies(i).value,
            cookies(i).domain,
            cookies(i).expire, cookies(i).path, secure, cookies(i).version);
  END LOOP;
  RETURN my_session_id;
END;
/

REM Retrieve cookies from UTL_HTTP
CREATE OR REPLACE PROCEDURE restore_cookies (this_session_id IN PLS_INTEGER)
AS
  cookies        UTL_HTTP.COOKIE_TABLE;
  cookie         UTL_HTTP.COOKIE;
  i              PLS_INTEGER := 0;
  CURSOR c (c_session_id PLS_INTEGER) IS
    SELECT * FROM my_cookies WHERE session_id = c_session_id;
BEGIN
  FOR r IN c(this_session_id) LOOP
    i := i + 1;
    cookie.name     := r.name;
    cookie.value    := r.value;
    cookie.domain   := r.domain;
    cookie.expire   := r.expire;
    cookie.path     := r.path;
    IF (r.secure = 'Y') THEN
      cookie.secure := TRUE;
    ELSE
      cookie.secure := FALSE;
    END IF;
    cookie.version := r.version;
    cookies(i) := cookie;
  END LOOP;
  UTL_HTTP.CLEAR_COOKIES;
  UTL_HTTP.ADD_COOKIES(cookies);
END;
/
</pre></div>
<!-- class="refsect3" -->
<div id="ARPLS72984" class="refsect3"><a id="BHAGGAGH"></a>
<h4 class="refsect3">Making HTTP Request with Private Wallet and Cookie Table</h4>
<pre>
SET SERVEROUTPUT ON SIZE 40000
 
CREATE OR REPLACE PROCEDURE DISPLAY_PAGE(url IN VARCHAR2) AS
  request_context UTL_HTPT.REQUEST_CONTEXT_KEY;
  req             UTL_HTTP.REQ;
  resp            UTL_HTTP.RESP;
  data            VARCHAR2(1024);
 
BEGIN

  -- Create a request context with its wallet and cookie table
  request_context := UTL_HTTP.CREATE_REQUEST_CONTEXT(
                       wallet_path          =&gt; 'file:/oracle/wallets/test/wallet',
                       wallet_password      =&gt; '******',
                       enable_cookies       =&gt; TRUE,
                       max_cookies          =&gt; 300,
                       max_cookies_per_site =&gt; 20);
 
  -- Make a HTTP request using the private wallet and cookie
  -- table in the request context
  req := UTL_HTTP.BEGIN_REQUEST(
           url             =&gt; url,
           request_context =&gt; request_context);
  resp := UTL_HTTP.GET_RESPONSE(req);
 
  BEGIN
    LOOP
       UTL_HTTP.READ_TEXT(resp, data);
       DBMS_OUTPUT.PUT(data);
    END LOOP;
  EXCEPTION
      WHEN UTL_HTTP.END_OF_BODY THEN
         UTL_HTTP.END_RESPONSE(resp); 
  END;
 
  -- Destroy the request context
  UTL_HTTP.DESTROY_REQUEST_CONTEXT(request_context);
 
END;
 
BEGIN
  DISPLAY_PAGE('https://www.example.com/');
END;
/
</pre></div>
<!-- class="refsect3" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i997468"></a>
<hr />
<div id="ARPLS70998" class="refsect1">
<h2 class="refsect1">Subprogram Groups</h2>
<p><code>UTL_HTTP</code> subprograms are grouped by function:</p>
<ul>
<li>
<p><a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></p>
</li>
<li>
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</li>
<li>
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</li>
<li>
<p><a href="#BHABFEFG">HTTP Request Contexts Subprograms</a></p>
</li>
<li>
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</li>
<li>
<p><a href="#i1013098">HTTP Cookies Subprograms</a></p>
</li>
<li>
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</li>
<li>
<p><a href="#CHDHCECC">Error Conditions Subprograms</a></p>
</li>
</ul>
<div id="ARPLS70999" class="refsect2"><a id="i1013042"></a>
<hr />
<h3 class="refsect2">Simple HTTP Fetches in a Single Call Subprograms</h3>
<p><code>REQUEST</code> and <code>REQUEST_PIECES</code> take a string uniform resource locator (URL), contact that site, and return the data (typically HTML) obtained from that site.</p>
<div id="ARPLS71000" class="tblformalwide">
<p class="titleintable"><a id="sthref16743"></a><a id="sthref16744"></a>Table 225-8 UTL_HTTP Subprograms&mdash;Simple HTTP Fetches in a Single Call</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;Simple HTTP Fetches in a Single Call" summary="This table lists the Simple HTTP Fetches in a Single Call Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><a href="#i998070">REQUEST Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>Returns up to the first 2000 bytes of the data retrieved from the given URL. This function can be used directly in SQL queries.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t23" headers="r1c1-t23">
<p><a href="#i998146">REQUEST_PIECES Function</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t23 r1c2-t23">
<p>Returns a PL/SQL table of 2000-byte pieces of the data retrieved from the given URL</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71001" class="refsect2"><a id="i1013095"></a>
<hr />
<h3 class="refsect2">Session Settings Subprograms</h3>
<div id="ARPLS71002" class="tblformalwide">
<p class="titleintable"><a id="sthref16745"></a><a id="sthref16746"></a>Table 225-9 UTL_HTTP Subprograms&mdash;Session Settings</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;Session Settings" summary="This table lists the Session Settings Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t24">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t24">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t24" headers="r1c1-t24">
<p><a href="#i1026054">GET_BODY_CHARSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t24 r1c2-t24">
<p>Retrieves the default character set of the body of all future HTTP requests</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t24" headers="r1c1-t24">
<p><a href="#i1026130">GET_COOKIE_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t24 r1c2-t24">
<p>Retrieves the current cookie support settings</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t24" headers="r1c1-t24">
<p><a href="#i1026231">GET_DETAILED_EXCP_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t24 r1c2-t24">
<p>Checks if the <code>UTL_HTTP</code> package will raise a detailed exception or not</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t24" headers="r1c1-t24">
<p><a href="#i1031298">GET_FOLLOW_REDIRECT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t24 r1c2-t24">
<p>Retrieves the follow-redirect setting in the current session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t24" headers="r1c1-t24">
<p><a href="#i1026599">GET_PERSISTENT_CONN_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t24 r1c2-t24">
<p>Checks if the persistent connection support is enabled and gets the maximum number of persistent connections in the current session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t24" headers="r1c1-t24">
<p><a href="#i1026714">GET_PROXY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t24 r1c2-t24">
<p>Retrieves the current proxy settings</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t24" headers="r1c1-t24">
<p><a href="#i1026812">GET_RESPONSE_ERROR_CHECK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t24 r1c2-t24">
<p>Checks if the response error check is set or not</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t24" headers="r1c1-t24">
<p><a href="#i1026856">GET_TRANSFER_TIMEOUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t24 r1c2-t24">
<p>Retrieves the current network transfer timeout value</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t24" headers="r1c1-t24">
<p><a href="#i1027823">SET_TRANSFER_TIMEOUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t24 r1c2-t24">
<p>Sets the default character set of the body of all future HTTP requests when the media type is <code>text</code> and the character set is not specified in the <code>Content-Type</code> header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t24" headers="r1c1-t24">
<p><a href="#i1027321">SET_COOKIE_SUPPORT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t24 r1c2-t24">
<p>Sets whether or not future HTTP requests will support HTTP cookies; sets the maximum number of cookies maintained in the current database user session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t24" headers="r1c1-t24">
<p><a href="#i1027452">SET_DETAILED_EXCP_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t24 r1c2-t24">
<p>Sets the <code>UTL_HTTP</code> package to raise a detailed exception</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t24" headers="r1c1-t24">
<p><a href="#i1027499">SET_FOLLOW_REDIRECT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t24 r1c2-t24">
<p>Sets the maximum number of times <code>UTL_HTTP</code> follows the HTTP redirect instruction in the HTTP responses to future requests in the <code>GET_RESPONSE</code> function</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t24" headers="r1c1-t24">
<p><a href="#i1027673">SET_PERSISTENT_CONN_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t24 r1c2-t24">
<p>Sets whether or not future HTTP requests will support the HTTP 1.1 persistent connection; sets the maximum number of persistent connections maintained in the current database user session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t24" headers="r1c1-t24">
<p><a href="#i998249">SET_PROXY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t24 r1c2-t24">
<p>Sets the proxy to be used for requests of HTTP or other protocols</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t24" headers="r1c1-t24">
<p><a href="#i998591">SET_RESPONSE_ERROR_CHECK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t24 r1c2-t24">
<p>Sets whether or not <code>GET_RESPONSE</code> raises an exception when the Web server returns a status code that indicates an error&mdash;a status code in the 4xx or 5xx ranges</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t24" headers="r1c1-t24">
<p><a href="#i1027823">SET_TRANSFER_TIMEOUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t24 r1c2-t24">
<p>Sets the timeout value for <code>UTL_HTTP</code> to read the HTTP response from the Web server or proxy server</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t24" headers="r1c1-t24">
<p><a href="#i998681">SET_WALLET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t24 r1c2-t24">
<p>Sets the Oracle Wallet used for all HTTP requests over Secured Socket Layer (SSL), that is, HTTPS</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71003" class="refsect2"><a id="i1013096"></a>
<hr />
<h3 class="refsect2">HTTP Requests Subprograms</h3>
<div id="ARPLS71004" class="tblformalwide">
<p class="titleintable"><a id="sthref16747"></a><a id="sthref16748"></a>Table 225-10 UTL_HTTP Subprograms&mdash;HTTP Requests</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;HTTP Requests" summary="This table lists the HTTP Requests of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><a href="#i1025603">BEGIN_REQUEST Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>Begins a new HTTP request.<code>UTL_HTTP</code> establishes the network connection to the target Web server or the proxy server and sends the HTTP request line.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><a href="#i1027608">SET_HEADER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p>Sets an HTTP request header. The request header is sent to the Web server as soon as it is set.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t25" headers="r1c1-t25">
<p><a href="#i1027083">SET_AUTHENTICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t25 r1c2-t25">
<p>Sets HTTP authentication information in the HTTP request header. The Web server needs this information to authorize the request.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t25" headers="r1c1-t25">
<p><a href="#BHAHDFJJ">SET_AUTHENTICATION_FROM_WALLET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t25 r1c2-t25">
<p>Sets the HTTP authentication information in the HTTP request header needed for the request to be authorized by the Web server using the username and password credential stored in the Oracle wallet.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t25" headers="r1c1-t25">
<p><a href="#i1027267">SET_BODY_CHARSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t25 r1c2-t25">
<p>Sets the character set of the request body when the media type is <code>text</code> but the character set is not specified in the <code>Content-Type</code> header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t25" headers="r1c1-t25">
<p><a href="#i1027321">SET_COOKIE_SUPPORT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t25 r1c2-t25">
<p>Enables or disables support for the HTTP cookies in the request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t25" headers="r1c1-t25">
<p><a href="#i1027499">SET_FOLLOW_REDIRECT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t25 r1c2-t25">
<p>S<code>ets the maximum number of times UTL_HTTP</code> follows the HTTP redirect instruction in the HTTP response to this request in the <a href="#BHAIBAHA">GET_RESPONSE Function</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t25" headers="r1c1-t25">
<p><a href="#i1027673">SET_PERSISTENT_CONN_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t25 r1c2-t25">
<p>Enables or disables support for the HTTP 1.1 persistent-connection in the request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t25" headers="r1c1-t25">
<p><a href="#i998249">SET_PROXY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t25 r1c2-t25">
<p>Writes a text line in the HTTP request body and ends the line with new-line characters (CRLF as defined in <code>UTL_TCP</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t25" headers="r1c1-t25">
<p><a href="#i999119">WRITE_RAW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t25 r1c2-t25">
<p>Writes some binary data in the HTTP request body</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t25" headers="r1c1-t25">
<p><a href="#i1027870">WRITE_TEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t25 r1c2-t25">
<p>Writes some text data in the HTTP request body</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71005" class="refsect2"><a id="BHABFEFG"></a>
<hr />
<h3 class="refsect2">HTTP Request Contexts Subprograms</h3>
<div id="ARPLS71006" class="tblformalwide">
<p class="titleintable"><a id="sthref16749"></a><a id="sthref16750"></a>Table 225-11 UTL_HTTP Subprograms&mdash;HTTP Request Contexts</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;HTTP Request Contexts" summary="This table lists the HTTP Request Contexts of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t26">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t26">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t26" headers="r1c1-t26">
<p><a href="#i1025869">CREATE_REQUEST_CONTEXT Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t26 r1c2-t26">
<p>Creates a request context in <code>UTL_HTTP</code> for a wallet and a cookie table</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t26" headers="r1c1-t26">
<p><a href="#BHADEHID">DESTROY_REQUEST_CONTEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t26 r1c2-t26">
<p>Destroys a request context in <code>UTL_HTTP</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71007" class="refsect2"><a id="i1013097"></a>
<hr />
<h3 class="refsect2">HTTP Responses Subprograms</h3>
<div id="ARPLS71008" class="tblformalwide">
<p class="titleintable"><a id="sthref16751"></a><a id="sthref16752"></a>Table 225-12 UTL_HTTP Subprograms&mdash;HTTP Responses</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;HTTP Responses" summary="This table lists the HTTP Responses Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t27">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t27" headers="r1c1-t27">
<p><a href="#i1025944">END_RESPONSE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t27 r1c2-t27">
<p>Ends the HTTP response. It completes the HTTP request and response.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t27" headers="r1c1-t27">
<p><a href="#i1025992">GET_AUTHENTICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t27 r1c2-t27">
<p>Retrieves the HTTP authentication information needed for the request to be accepted by the Web server as indicated in the HTTP response header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t27" headers="r1c1-t27">
<p><a href="#i1026389">GET_HEADER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t27 r1c2-t27">
<p>Returns the n<sup>th</sup> HTTP response header name and value returned in the response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t27" headers="r1c1-t27">
<p><a href="#i1026453">GET_HEADER_BY_NAME Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t27 r1c2-t27">
<p>Returns the HTTP response header value returned in the response given the name of the header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t27" headers="r1c1-t27">
<p><a href="#i1026514">GET_HEADER_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t27 r1c2-t27">
<p>Returns the number of HTTP response headers returned in the response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t27" headers="r1c1-t27">
<p><a href="#BHAIBAHA">GET_RESPONSE Function</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t27 r1c2-t27">
<p>Reads the HTTP response. When the function returns, the status line and the HTTP response headers have been read and processed.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t27" headers="r1c1-t27">
<p><a href="#i1026901">READ_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t27 r1c2-t27">
<p>Reads the HTTP response body in text form until the end of line is reached and returns the output in the caller-supplied buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t27" headers="r1c1-t27">
<p><a href="#i1026963">READ_RAW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t27 r1c2-t27">
<p>Reads the HTTP response body in binary form and returns the output in the caller-supplied buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t27" headers="r1c1-t27">
<p><a href="#i1027020">READ_TEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t27 r1c2-t27">
<p>Reads the HTTP response body in text form and returns the output in the caller-supplied buffer</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t27" headers="r1c1-t27">
<p><a href="#i1027267">SET_BODY_CHARSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t27 r1c2-t27">
<p>Sets the character set of the response body when the media type is "text" but the character set is not specified in the <code>Content-Type</code> header</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71009" class="refsect2"><a id="i1013098"></a>
<hr />
<h3 class="refsect2">HTTP Cookies Subprograms</h3>
<div id="ARPLS71010" class="tblformalwide">
<p class="titleintable"><a id="sthref16753"></a><a id="sthref16754"></a>Table 225-13 UTL_HTTP Subprograms&mdash;HTTP Cookies</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;HTTP Cookies" summary="This table lists the HTTP Cookies Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t28">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t28">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t28" headers="r1c1-t28">
<p><a href="#i1025556">ADD_COOKIES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t28 r1c2-t28">
<p>Add the cookies either to a request context or to the <code>UTL_HTTP</code> package's session state</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t28" headers="r1c1-t28">
<p><a href="#i1025670">CLEAR_COOKIES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t28 r1c2-t28">
<p>Clears all the cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t28" headers="r1c1-t28">
<p><a href="#i1026101">GET_COOKIE_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t28 r1c2-t28">
<p>Returns the number of cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session states</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t28" headers="r1c1-t28">
<p><a href="#i1026186">GET_COOKIES Function</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t28 r1c2-t28">
<p>Returns all the cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71011" class="refsect2"><a id="i1013099"></a>
<hr />
<h3 class="refsect2">HTTP Persistent Connections Subprograms</h3>
<div id="ARPLS71012" class="tblformalwide">
<p class="titleintable"><a id="sthref16755"></a><a id="sthref16756"></a>Table 225-14 UTL_HTTP Subprograms&mdash;HTTP Persistent Connections</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;HTTP Persistent Connections" summary="This table lists the HTTP Persistent Connections Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><a href="#i1025719">CLOSE_PERSISTENT_CONN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>Closes an HTTP persistent connection maintained by the <code>UTL_HTTP</code> package in the current database session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t29" headers="r1c1-t29">
<p><a href="#i1025769">CLOSE_PERSISTENT_CONNS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t29 r1c2-t29">
<p>Closes a group of HTTP persistent connections maintained by the <code>UTL_HTTP</code> package in the current database session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t29" headers="r1c1-t29">
<p><a href="#i1026564">GET_PERSISTENT_CONN_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t29 r1c2-t29">
<p>Returns the number of network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t29" headers="r1c1-t29">
<p><a href="#i1026653">GET_PERSISTENT_CONNS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t29 r1c2-t29">
<p>Returns all the network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71013" class="refsect2"><a id="CHDHCECC"></a>
<hr />
<h3 class="refsect2">Error Conditions Subprograms</h3>
<div id="ARPLS71014" class="tblformalwide">
<p class="titleintable"><a id="sthref16757"></a><a id="sthref16758"></a>Table 225-15 UTL_HTTP Subprograms&mdash;Error Conditions</p>
<table class="cellalignment1226" title="UTL_HTTP Subprograms&mdash;Error Conditions" summary="This table lists the Error Conditions Subprograms of UTL_HTTP in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t30">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t30">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t30" headers="r1c1-t30">
<p><a href="#i1026279">GET_DETAILED_SQLCODE Function</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t30 r1c2-t30">
<p>Retrieves the detailed SQLCODE of the last exception raised</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t30" headers="r1c1-t30">
<p><a href="#i1026358">GET_DETAILED_SQLERRM Function</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t30 r1c2-t30">
<p>Retrieves the detailed SQLERRM of the last exception raised</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformalwide" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="i1029627"></a>
<hr />
<div id="ARPLS71015" class="refsect1">
<h2 class="refsect1">Summary of UTL_HTTP Subprograms</h2>
<div id="ARPLS71016" class="tblformal">
<p class="titleintable"><a id="sthref16759"></a><a id="sthref16760"></a>Table 225-16 UTL_HTTP Package Subprograms</p>
<table class="cellalignment1229" title="UTL_HTTP Package Subprograms " summary="This table lists the UTL_HTTP subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t31">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t31">Description</th>
<th class="cellalignment1227" id="r1c3-t31">Group</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t31" headers="r1c1-t31">
<p><a href="#i1025556">ADD_COOKIES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c2-t31">
<p>Add the cookies either to a request context or to the <code>UTL_HTTP</code> package's session state</p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c3-t31">
<p><a href="#i1013098">HTTP Cookies Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t31" headers="r1c1-t31">
<p><a href="#i1025603">BEGIN_REQUEST Function</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c2-t31">
<p>Begins a new HTTP request. <code>UTL_HTTP</code> establishes the network connection to the target Web server or the proxy server and sends the HTTP request line</p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t31" headers="r1c1-t31">
<p><a href="#i1025670">CLEAR_COOKIES Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t31 r1c2-t31">
<p>Clears all the cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state</p>
</td>
<td class="cellalignment1228" headers="r4c1-t31 r1c3-t31">
<p><a href="#i1013098">HTTP Cookies Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t31" headers="r1c1-t31">
<p><a href="#i1025719">CLOSE_PERSISTENT_CONN Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t31 r1c2-t31">
<p>Closes an HTTP persistent connection maintained by the <code>UTL_HTTP</code> package in the current database session</p>
</td>
<td class="cellalignment1228" headers="r5c1-t31 r1c3-t31">
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t31" headers="r1c1-t31">
<p><a href="#i1025769">CLOSE_PERSISTENT_CONNS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t31 r1c2-t31">
<p>Closes a group of HTTP persistent connections maintained by the <code>UTL_HTTP</code> package in the current database session</p>
</td>
<td class="cellalignment1228" headers="r6c1-t31 r1c3-t31">
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t31" headers="r1c1-t31">
<p><a href="#i1025869">CREATE_REQUEST_CONTEXT Function</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t31 r1c2-t31">
<p>Creates a request context in <code>UTL_HTTP</code> for a wallet and a cookie table</p>
</td>
<td class="cellalignment1228" headers="r7c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t31" headers="r1c1-t31">
<p><a href="#BHADEHID">DESTROY_REQUEST_CONTEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t31 r1c2-t31">
<p>Destroys a request context in <code>UTL_HTTP</code> for a wallet and a cookie table</p>
</td>
<td class="cellalignment1228" headers="r8c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t31" headers="r1c1-t31">
<p><a href="#BHABGIAA">END_REQUEST Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t31 r1c2-t31">
<p>Ends the HTTP request</p>
</td>
<td class="cellalignment1228" headers="r9c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t31" headers="r1c1-t31">
<p><a href="#i1025944">END_RESPONSE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t31 r1c2-t31">
<p>Ends the HTTP response. It completes the HTTP request and response</p>
</td>
<td class="cellalignment1228" headers="r10c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t31" headers="r1c1-t31">
<p><a href="#i1025992">GET_AUTHENTICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t31 r1c2-t31">
<p>Retrieves the HTTP authentication information needed for the request to be accepted by the Web server as indicated in the HTTP response header</p>
</td>
<td class="cellalignment1228" headers="r11c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t31" headers="r1c1-t31">
<p><a href="#i1026054">GET_BODY_CHARSET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t31 r1c2-t31">
<p>Retrieves the default character set of the body of all future HTTP requests</p>
</td>
<td class="cellalignment1228" headers="r12c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t31" headers="r1c1-t31">
<p><a href="#i1026101">GET_COOKIE_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t31 r1c2-t31">
<p>Returns the number of cookies currently maintained by the <code>UTL_HTTP</code> package set by all Web servers</p>
</td>
<td class="cellalignment1228" headers="r13c1-t31 r1c3-t31">
<p><a href="#i1013098">HTTP Cookies Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t31" headers="r1c1-t31">
<p><a href="#i1026130">GET_COOKIE_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t31 r1c2-t31">
<p>Retrieves the current cookie support settings</p>
</td>
<td class="cellalignment1228" headers="r14c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t31" headers="r1c1-t31">
<p><a href="#i1026186">GET_COOKIES Function</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t31 r1c2-t31">
<p>Returns all the cookies currently maintained by the <code>UTL_HTTP</code> package set by all Web servers</p>
</td>
<td class="cellalignment1228" headers="r15c1-t31 r1c3-t31">
<p><a href="#i1013098">HTTP Cookies Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t31" headers="r1c1-t31">
<p><a href="#i1026231">GET_DETAILED_EXCP_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t31 r1c2-t31">
<p>Checks if the <code>UTL_HTTP</code> package will raise a detailed exception or not</p>
</td>
<td class="cellalignment1228" headers="r16c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t31" headers="r1c1-t31">
<p><a href="#i1026279">GET_DETAILED_SQLCODE Function</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t31 r1c2-t31">
<p>Retrieves the detailed <code>SQLCODE</code> of the last exception raised</p>
</td>
<td class="cellalignment1228" headers="r17c1-t31 r1c3-t31">
<p><a href="#CHDHCECC">Error Conditions Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t31" headers="r1c1-t31">
<p><a href="#i1026358">GET_DETAILED_SQLERRM Function</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t31 r1c2-t31">
<p>Retrieves the detailed <code>SQLERRM</code> of the last exception raised</p>
</td>
<td class="cellalignment1228" headers="r18c1-t31 r1c3-t31">
<p><a href="#CHDHCECC">Error Conditions Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t31" headers="r1c1-t31">
<p><a href="#i1031298">GET_FOLLOW_REDIRECT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t31 r1c2-t31">
<p>Retrieves the follow-redirect setting in the current session</p>
</td>
<td class="cellalignment1228" headers="r19c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t31" headers="r1c1-t31">
<p><a href="#i1026389">GET_HEADER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t31 r1c2-t31">
<p>Returns the n<sup>th</sup> HTTP response header name and value returned in the response</p>
</td>
<td class="cellalignment1228" headers="r20c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t31" headers="r1c1-t31">
<p><a href="#i1026453">GET_HEADER_BY_NAME Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t31 r1c2-t31">
<p>Returns the HTTP response header value returned in the response given the name of the header</p>
</td>
<td class="cellalignment1228" headers="r21c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t31" headers="r1c1-t31">
<p><a href="#i1026514">GET_HEADER_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t31 r1c2-t31">
<p>Returns the number of HTTP response headers returned in the response</p>
</td>
<td class="cellalignment1228" headers="r22c1-t31 r1c3-t31">
<p><a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t31" headers="r1c1-t31">
<p><a href="#i1026564">GET_PERSISTENT_CONN_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t31 r1c2-t31">
<p>Returns the number of network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers</p>
</td>
<td class="cellalignment1228" headers="r23c1-t31 r1c3-t31">
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t31" headers="r1c1-t31">
<p><a href="#i1026514">GET_HEADER_COUNT Function</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t31 r1c2-t31">
<p>Sees whether or not future HTTP requests will support the HTTP 1.1 persistent connection; sets the maximum number of persistent connections maintained in the current database user session</p>
</td>
<td class="cellalignment1228" headers="r24c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t31" headers="r1c1-t31">
<p><a href="#i1026599">GET_PERSISTENT_CONN_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t31 r1c2-t31">
<p>Checks if the persistent connection support is enabled and gets the maximum number of persistent connections in the current session (see <a href="#i1013095">Session Settings Subprograms</a>)</p>
</td>
<td class="cellalignment1228" headers="r25c1-t31 r1c3-t31">
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t31" headers="r1c1-t31">
<p><a href="#i1026653">GET_PERSISTENT_CONNS Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t31 r1c2-t31">
<p>Returns all the network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers</p>
</td>
<td class="cellalignment1228" headers="r26c1-t31 r1c3-t31">
<p><a href="#i1013099">HTTP Persistent Connections Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t31" headers="r1c1-t31">
<p><a href="#i1026714">GET_PROXY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t31 r1c2-t31">
<p>Retrieves the current proxy settings</p>
</td>
<td class="cellalignment1228" headers="r27c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t31" headers="r1c1-t31">
<p><a href="#BHAIBAHA">GET_RESPONSE Function</a></p>
</td>
<td class="cellalignment1228" headers="r28c1-t31 r1c2-t31">
<p>Reads the HTTP response. When the function returns, the status line and the HTTP response headers have been read and processed</p>
</td>
<td class="cellalignment1228" headers="r28c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t31" headers="r1c1-t31">
<p><a href="#i1026812">GET_RESPONSE_ERROR_CHECK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r29c1-t31 r1c2-t31">
<p>Checks if the response error check is set or no</p>
</td>
<td class="cellalignment1228" headers="r29c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t31" headers="r1c1-t31">
<p><a href="#i1026856">GET_TRANSFER_TIMEOUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r30c1-t31 r1c2-t31">
<p>Retrieves the current network transfer timeout value</p>
</td>
<td class="cellalignment1228" headers="r30c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t31" headers="r1c1-t31">
<p><a href="#i1026901">READ_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r31c1-t31 r1c2-t31">
<p>Reads the HTTP response body in text form until the end of line is reached and returns the output in the caller-supplied buffer</p>
</td>
<td class="cellalignment1228" headers="r31c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t31" headers="r1c1-t31">
<p><a href="#i1026963">READ_RAW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r32c1-t31 r1c2-t31">
<p>Reads the HTTP response body in binary form and returns the output in the caller-supplied buffer</p>
</td>
<td class="cellalignment1228" headers="r32c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t31" headers="r1c1-t31">
<p><a href="#i1027020">READ_TEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r33c1-t31 r1c2-t31">
<p>Reads the HTTP response body in text form and returns the output in the caller-supplied buffer</p>
</td>
<td class="cellalignment1228" headers="r33c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t31" headers="r1c1-t31">
<p><a href="#i998070">REQUEST Function</a></p>
</td>
<td class="cellalignment1228" headers="r34c1-t31 r1c2-t31">
<p>Returns up to the first 2000 bytes of the data retrieved from the given URL. This function can be used directly in SQL queries.</p>
</td>
<td class="cellalignment1228" headers="r34c1-t31 r1c3-t31">
<p><a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t31" headers="r1c1-t31">
<p><a href="#i998146">REQUEST_PIECES Function</a></p>
</td>
<td class="cellalignment1228" headers="r35c1-t31 r1c2-t31">
<p>Returns a PL/SQL table of 2000-byte pieces of the data retrieved from the given URL</p>
</td>
<td class="cellalignment1228" headers="r35c1-t31 r1c3-t31">
<p><a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t31" headers="r1c1-t31">
<p><a href="#i1027083">SET_AUTHENTICATION Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r36c1-t31 r1c2-t31">
<p>Sets HTTP authentication information in the HTTP request header. The Web server needs this information to authorize the request.</p>
</td>
<td class="cellalignment1228" headers="r36c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r37c1-t31" headers="r1c1-t31">
<p><a href="#BHAHDFJJ">SET_AUTHENTICATION_FROM_WALLET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r37c1-t31 r1c2-t31">
<p>Sets the HTTP authentication information in the HTTP request header needed for the request to be authorized by the Web server using the username and password credential stored in the Oracle wallet.</p>
</td>
<td class="cellalignment1228" headers="r37c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r38c1-t31" headers="r1c1-t31">
<p><a href="#i1027267">SET_BODY_CHARSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r38c1-t31 r1c2-t31">
<p>Sets the default character set of the body of all future HTTP requests when the media type is <code>text</code> and the character set is not specified in the <code>Content-Type</code> header</p>
</td>
<td class="cellalignment1228" headers="r38c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r39c1-t31" headers="r1c1-t31">
<p><a href="#i1027267">SET_BODY_CHARSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r39c1-t31 r1c2-t31">
<p>Sets the character set of the request body when the media type is <code>text</code> but the character set is not specified in the <code>Content-Type</code> header</p>
</td>
<td class="cellalignment1228" headers="r39c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r40c1-t31" headers="r1c1-t31">
<p><a href="#i1027267">SET_BODY_CHARSET Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r40c1-t31 r1c2-t31">
<p>Sets the character set of the response body when the media type is "text" but the character set is not specified in the <code>Content-Type</code> header</p>
</td>
<td class="cellalignment1228" headers="r40c1-t31 r1c3-t31">
<p><a href="#i1013097">HTTP Responses Subprograms</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r41c1-t31" headers="r1c1-t31">
<p><a href="#i1027321">SET_COOKIE_SUPPORT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r41c1-t31 r1c2-t31">
<p>Enables or disables support for the HTTP cookies in the request</p>
</td>
<td class="cellalignment1228" headers="r41c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r42c1-t31" headers="r1c1-t31">
<p><a href="#i1027452">SET_DETAILED_EXCP_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r42c1-t31 r1c2-t31">
<p>Sets whether or not future HTTP requests will support HTTP cookies; sets the maximum number of cookies maintained in the current database user session</p>
</td>
<td class="cellalignment1228" headers="r42c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r43c1-t31" headers="r1c1-t31">
<p><a href="#i1027452">SET_DETAILED_EXCP_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r43c1-t31 r1c2-t31">
<p>Sets the <code>UTL_HTTP</code> package to raise a detailed exception</p>
</td>
<td class="cellalignment1228" headers="r43c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r44c1-t31" headers="r1c1-t31">
<p><a href="#i1027499">SET_FOLLOW_REDIRECT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r44c1-t31 r1c2-t31">
<p>Sets the maximum number of times <code>UTL_HTTP</code> follows the HTTP redirect instruction in the HTTP response to this request in the <code>GET_RESPONSE</code> function</p>
</td>
<td class="cellalignment1228" headers="r44c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r45c1-t31" headers="r1c1-t31">
<p><a href="#i1027608">SET_HEADER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r45c1-t31 r1c2-t31">
<p>Sets the maximum number of times <code>UTL_HTTP</code> follows the HTTP redirect instruction in the HTTP responses to future requests in the <code>GET_RESPONSE</code> function</p>
</td>
<td class="cellalignment1228" headers="r45c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r46c1-t31" headers="r1c1-t31">
<p><a href="#i1027608">SET_HEADER Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r46c1-t31 r1c2-t31">
<p>Sets an HTTP request header. The request header is sent to the Web server as soon as it is set.</p>
</td>
<td class="cellalignment1228" headers="r46c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r47c1-t31" headers="r1c1-t31">
<p><a href="#i1027673">SET_PERSISTENT_CONN_SUPPORT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r47c1-t31 r1c2-t31">
<p>Enables or disables support for the HTTP 1.1 persistent-connection in the request</p>
</td>
<td class="cellalignment1228" headers="r47c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r48c1-t31" headers="r1c1-t31">
<p><a href="#i998249">SET_PROXY Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r48c1-t31 r1c2-t31">
<p>Sets the proxy to be used for requests of HTTP or other protocols</p>
</td>
<td class="cellalignment1228" headers="r48c1-t31 r1c3-t31">
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r49c1-t31" headers="r1c1-t31">
<p><a href="#i998591">SET_RESPONSE_ERROR_CHECK Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r49c1-t31 r1c2-t31">
<p>Sets whether or not <code>GET_RESPONSE</code> raises an exception when the Web server returns a status code that indicates an error&mdash;a status code in the 4xx or 5xx ranges</p>
</td>
<td class="cellalignment1228" headers="r49c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r50c1-t31" headers="r1c1-t31">
<p><a href="#i1027823">SET_TRANSFER_TIMEOUT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r50c1-t31 r1c2-t31">
<p>Sets the timeout value for <code>UTL_HTTP</code> to read the HTTP response from the Web server or proxy server</p>
</td>
<td class="cellalignment1228" headers="r50c1-t31 r1c3-t31">
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r51c1-t31" headers="r1c1-t31">
<p><a href="#i998681">SET_WALLET Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r51c1-t31 r1c2-t31">
<p>Sets the Oracle Wallet used for all HTTP requests over Secured Socket Layer (SSL), that is, HTTPS</p>
</td>
<td class="cellalignment1228" headers="r51c1-t31 r1c3-t31">
<p><a href="#i1013095">Session Settings Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r52c1-t31" headers="r1c1-t31">
<p><a href="#CHDFFGAG">WRITE_LINE Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r52c1-t31 r1c2-t31">
<p>Writes a text line in the HTTP request body and ends the line with new-line characters (CRLF as defined in UTL_TCP</p>
</td>
<td class="cellalignment1228" headers="r52c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r53c1-t31" headers="r1c1-t31">
<p><a href="#i999119">WRITE_RAW Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r53c1-t31 r1c2-t31">
<p>Writes some binary data in the HTTP request body</p>
</td>
<td class="cellalignment1228" headers="r53c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r54c1-t31" headers="r1c1-t31">
<p><a href="#i1027870">WRITE_TEXT Procedure</a></p>
</td>
<td class="cellalignment1228" headers="r54c1-t31 r1c2-t31">
<p>Writes some text data in the HTTP request body</p>
</td>
<td class="cellalignment1228" headers="r54c1-t31 r1c3-t31">
<p><a href="#i1013096">HTTP Requests Subprograms</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS71017" class="refsect2"><a id="i1025556"></a>
<hr />
<h3 class="refsect2"><a id="sthref16761"></a>ADD_COOKIES Procedure</h3>
<p>This procedure adds the cookies either to a request context or to the <code>UTL_HTTP</code> package's session state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015893">HTTP Cookies</a> and <a href="#i1013098">HTTP Cookies Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16762"></a>Syntax</p>
<pre>
UTL_HTTP.ADD_COOKIES (
   cookies          IN  cookie_table,
   request_context  IN  request_context_key DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16763"></a>Parameters</p>
<div id="ARPLS71018" class="tblformal">
<p class="titleintable"><a id="sthref16764"></a><a id="sthref16765"></a>Table 225-17 ADD_COOKIES Procedure Parameters</p>
<table class="cellalignment1229" title="ADD_COOKIES Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.ADD_COOKIES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t33">Parameter</th>
<th class="cellalignment1227" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t33" headers="r1c1-t33">
<p><code>cookies</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t33 r1c2-t33">
<p>The cookies to be added</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t33" headers="r1c1-t33">
<p><code>request_context</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t33 r1c2-t33">
<p>Request context to add the cookies. If <code>NULL</code>, the cookies will be added to the <code>UTL_HTTP</code> package's session state instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16766"></a>Usage Notes</p>
<p>The cookies that the package currently maintains are not cleared before new cookies are added.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71019" class="refsect2"><a id="i1025603"></a>
<hr />
<h3 class="refsect2"><a id="sthref16767"></a>BEGIN_REQUEST Function</h3>
<p>This functions begins a new HTTP request. <code>UTL_HTTP</code> establishes the network connection to the target Web server or the proxy server and sends the HTTP request line. The PL/SQL program continues the request by calling some other interface to complete the request. The URL may contain the username and password needed to authenticate the request to the server. The format is</p>
<pre>
scheme://[user[:password]@]host[:port]/[...]
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16768"></a>Syntax</p>
<pre>
UTL_HTTP.BEGIN_REQUEST (
   url               IN  VARCHAR2,
   method            IN  VARCHAR2 DEFAULT 'GET',
   http_version      IN  VARCHAR2 DEFAULT NULL,
   request_context   IN  request_context_key DEFAULT NULL)
RETURN req;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16769"></a>Parameters</p>
<div id="ARPLS71020" class="tblformal">
<p class="titleintable"><a id="sthref16770"></a><a id="sthref16771"></a>Table 225-18 BEGIN_REQUEST Function Parameters</p>
<table class="cellalignment1229" title="BEGIN_REQUEST Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.BEGIN_REQUEST subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t35">Parameter</th>
<th class="cellalignment1227" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t35" headers="r1c1-t35">
<p><code>url</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t35 r1c2-t35">
<p>The URL of the HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t35" headers="r1c1-t35">
<p><code>method</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t35 r1c2-t35">
<p>The method performed on the resource identified by the URL</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t35" headers="r1c1-t35">
<p><code>http_version</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t35 r1c2-t35">
<p>The HTTP protocol version that sends the request. The format of the protocol version is <code>HTTP/major-version.minor-version</code>, where <code>major-version</code> and <code>minor-version</code> are positive numbers. If this parameter is set to <code>NULL</code>, <code>UTL_HTTP</code> uses the latest HTTP protocol version that it supports to send the request. The latest version that the package supports is 1.1 and it can be upgraded to a later version. The default is <code>NULL</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t35" headers="r1c1-t35">
<p><code>request_context</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t35 r1c2-t35">
<p>Request context that holds the private wallet and the cookie table to use in this <code>HTTP</code> request. If this parameter is <code>NULL</code>, the wallet and cookie table shared in the current database session will be used instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16772"></a>Usage Notes</p>
<ul>
<li>
<p>The URL passed as an argument to this function is not examined for illegal characters, such as spaces, according to URL specification RFC 2396. You should escape those characters with the <code>UTL_URL</code> package to return illegal and reserved characters. URLs should consist of US-ASCII characters only. See <a href="u_url.htm#BABBJBDF">Chapter 239, "UTL_URL"</a> for a list of legal characters in URLs. Note that URLs should consist of US-ASCII characters only. The use of non-US-ASCII characters in a URL is generally unsafe.</p>
</li>
<li>
<p><code>BEGIN_REQUEST</code> can send a URL whose length is up to 32767 bytes. However, different Web servers impose different limits on the length of the URL they can accept. This limit is often about 4000 bytes. If this limit is exceeded, the outcome will depend on the Web server. For example, a Web server might simply drop the HTTP connection without returning a response of any kind. If this happens, a subsequent invocation of the <a href="#BHAIBAHA">GET_RESPONSE Function</a> will raise the <code>PROTOCOL_ERROR</code> exception.</p>
<p>A URL will be long when its <code>QUERY_STRING</code> (that is, the information that follows the question mark (?)) is long. In general, it is better to send this parameterization in the body of the request using the <code>POST</code> method.</p>
<pre>
req := UTL_HTTP.BEGIN_REQUEST (url=&gt;the_url, method=&gt;'POST');
UTL_HTTP.SET_HEADER (r      =&gt;  req, 
                     name   =&gt;  'Content-Type',   
                     value  =&gt;  'application/x-www-form-urlencoded');
UTL_HTTP.SET_HEADER (r      =&gt;   req, 
                     name   =&gt;   'Content-Length', 
                     value  =&gt;'  &lt;length of data posted in bytes&gt;');
UTL_HTTP.WRITE_TEXT (r      =&gt;   req, 
                     data   =&gt;   'p1 = value1&amp;p2=value2...');
resp := UTL_HTTP.GET_RESPONSE 
                     (r     =&gt;   req);
...
</pre>
<p>The programmer must determine whether a particular Web server may, or may not, accept data provided in this way.</p>
</li>
<li>
<p>An Oracle wallet must be set before accessing Web servers over HTTPS. See the <a href="#i998681">SET_WALLET Procedure</a> procedure on how to set up an Oracle wallet. To use SSL client authentication, the client certificate should be stored in the wallet and the caller must have the <code>use-client-certificates</code> privilege on the wallet. See <a class="olink DBSEG40012" href="../../network.112/e36292/authorization.htm#DBSEG40012">"Managing Fine-grained Access to External Network Services"</a> in the <span class="italic">Oracle Database Security Guide</span> to grant the privilege.</p>
</li>
<li>
<p>To connect to the remote Web server directly, or indirectly through a HTTP proxy, the <code>UTL_HTTP</code> must have the <code>connect</code> ACL privilege to the remote Web server host or the proxy host respectively.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71021" class="refsect2"><a id="i1025670"></a>
<hr />
<h3 class="refsect2"><a id="sthref16773"></a>CLEAR_COOKIES Procedure</h3>
<p>This procedure clears all the cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015893">HTTP Cookies</a> and <a href="#i1013098">HTTP Cookies Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16774"></a>Syntax</p>
<pre>
UTL_HTTP.CLEAR_COOKIES (
   request_context  IN  request_context_key DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16775"></a>Parameters</p>
<div id="ARPLS71022" class="tblformal">
<p class="titleintable"><a id="sthref16776"></a><a id="sthref16777"></a>Table 225-19 CLEAR_COOKIES Procedure Parameters</p>
<table class="cellalignment1229" title="CLEAR_COOKIES Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.CLEAR_COOKIES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t37">Parameter</th>
<th class="cellalignment1227" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t37" headers="r1c1-t37">
<p><code>request_context</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t37 r1c2-t37">
<p>Request context to clear the cookies. If <code>NULL</code>, the cookies maintained in the <code>UTL_HTTP</code> package's session state will be cleared instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71023" class="refsect2"><a id="i1025719"></a>
<hr />
<h3 class="refsect2"><a id="sthref16778"></a>CLOSE_PERSISTENT_CONN Procedure</h3>
<p>This procedure closes an HTTP persistent connection maintained by the <code>UTL_HTTP</code> package in the current database session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016139">HTTP Persistent Connections</a> and <a href="#i1013099">HTTP Persistent Connections Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16779"></a>Syntax</p>
<pre>
UTL_HTTP.CLOSE_PERSISTENT_CONN (
   conn  IN connection);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16780"></a>Parameters</p>
<div id="ARPLS71024" class="tblformal">
<p class="titleintable"><a id="sthref16781"></a><a id="sthref16782"></a>Table 225-20 CLOSE_PERSISTENT_CONN Procedure Parameters</p>
<table class="cellalignment1229" title="CLOSE_PERSISTENT_CONN Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.CLOSE_PERSISTENT_CONN subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t39">Parameter</th>
<th class="cellalignment1227" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t39" headers="r1c1-t39">
<p><code>conn</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t39 r1c2-t39">
<p>The HTTP persistent connection to close</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71025" class="refsect2"><a id="i1025769"></a>
<hr />
<h3 class="refsect2"><a id="sthref16783"></a>CLOSE_PERSISTENT_CONNS Procedure</h3>
<p>This procedure closes a group of HTTP persistent connections maintained by the <code>UTL_HTTP</code> package in the current database session. This procedure uses a pattern-match approach to decide which persistent connections to close.</p>
<p>To close a group of HTTP persistent connection that share a common property (for example, all connections to a particular host, or all SSL connections), set the particular parameters and leave the rest of the parameters <code>NULL</code>. If a particular parameter is set to <code>NULL</code> when this procedure is called, that parameter will not be used to decide which connections to close.</p>
<p>For example, the following call to the procedure closes all persistent connections to <code>foobar</code>:</p>
<pre>
UTL_HTTP.CLOSE_PERSISTENT_CONNS(host =&gt; 'foobar');
</pre>
<p>And the following call to the procedure closes all persistent connections through the <code>foobar</code> at TCP/IP port 80:</p>
<pre>
UTL_HTTP.CLOSE_PERSISTENT_CONNS(proxy_host =&gt; 'foobar',
                                proxy_port =&gt; 80);
</pre>
<p>And the following call to the procedure closes all persistent connections:</p>
<pre>
UTL_HTTP.CLOSE_PERSISTENT_CONNS;
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016139">HTTP Persistent Connections</a> and <a href="#i1013099">HTTP Persistent Connections Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16784"></a>Syntax</p>
<pre>
UTL_HTTP.CLOSE_PERSISTENT_CONNS (
   host        IN VARCHAR2 DEFAULT NULL,
   port        IN PLS_INTEGER DEFAULT NULL,
   proxy_host  IN VARCHAR2 DEFAULT NULL,
   proxy_port  IN PLS_INTEGER DEFAULT NULL,
   ssl         IN BOOLEAN DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16785"></a>Parameters</p>
<div id="ARPLS71026" class="tblformal">
<p class="titleintable"><a id="sthref16786"></a><a id="sthref16787"></a>Table 225-21 CLOSE_PERSISTENT_CONNS Procedure Parameters</p>
<table class="cellalignment1229" title="CLOSE_PERSISTENT_CONNS Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.CLOSE_PERSISTENT_CONNS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t41">Parameter</th>
<th class="cellalignment1227" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t41" headers="r1c1-t41">
<p><code>host</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t41 r1c2-t41">
<p>The host for which persistent connections are to be closed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t41" headers="r1c1-t41">
<p><code>port</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t41 r1c2-t41">
<p>The port number for which persistent connections are to be closed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t41" headers="r1c1-t41">
<p><code>proxy_host</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t41 r1c2-t41">
<p>The proxy host for which persistent connections are to be closed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t41" headers="r1c1-t41">
<p><code>proxy_port</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t41 r1c2-t41">
<p>The proxy port for which persistent connections are to be closed</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t41" headers="r1c1-t41">
<p><code>ssl</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t41 r1c2-t41">
<p>Close persistent SSL connection</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16788"></a>Usage Notes</p>
<p>Connections to the same Web server at different TCP/IP ports are counted individually. The host names of the Web servers are identified as specified in the URL of the original HTTP requests. Therefore, fully qualified host names with domain names will be counted differently from the host names without domain names.</p>
<p>Note that the use of a <code>NULL</code> value in a parameter when this procedure is called means that the caller does not care about its value when the package decides which persistent connection to close. If you want a <code>NULL</code> value in a parameter to match only a <code>NULL</code> value of the parameter of a persistent connection (which is when you want to close a specific persistent connection), you should use the <code>CLOSE_PERSISTENT_CONN</code> procedure that closes a specific persistent connection.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71027" class="refsect2"><a id="i1025869"></a>
<hr />
<h3 class="refsect2"><a id="sthref16789"></a>CREATE_REQUEST_CONTEXT Function</h3>
<p>This function creates a request context. A request context is a context that holds a wallet and a cookie for private use in making a HTTP request. This allows the HTTP request to use a wallet and a cookie table that will not be shared with other applications making HTTP requests in the same database session.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BHAFDABE">Request Context</a> and <a href="#BHABFEFG">HTTP Request Contexts Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16790"></a>Syntax</p>
<pre>
UTL_HTTP.CREATE_REQUEST_CONTEXT (
 wallet_path          IN VARCHAR2 DEFAULT NULL,
 wallet_password      IN VARCHAR2 DEFAULT NULL,
 enable_cookies       IN BOOLEAN  DEFAULT TRUE,
 max_cookies          IN PLS_INTEGER DEFAULT 300,
 max_cookies_per_site IN PLS_INTEGER DEFAULT 20)
RETURN request_context_key;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16791"></a>Parameters</p>
<div id="ARPLS71028" class="tblformal">
<p class="titleintable"><a id="sthref16792"></a><a id="sthref16793"></a>Table 225-22 CREATE_REQUEST_CONTEXT Function Parameters</p>
<table class="cellalignment1229" title="CREATE_REQUEST_CONTEXT Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.END_REQUEST subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t43">Parameter</th>
<th class="cellalignment1227" id="r1c2-t43">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t43" headers="r1c1-t43">
<p><code>wallet_path</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t43 r1c2-t43">
<p>Directory path that contains the Oracle wallet. The format is <code>file:</code><code><span class="codeinlineitalic">directory-path</span></code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t43" headers="r1c1-t43">
<p><code>wallet_password</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t43 r1c2-t43">
<p>The password needed to open the wallet. If the wallet is auto-login enabled, the password may be omitted and should be set to <code>NULL</code>. See the <a class="olink ASOAG9503" href="../../network.112/e40393/asotools.htm#ASOAG9503"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for detailed information about wallets.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t43" headers="r1c1-t43">
<p><code>enable_cookies</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t43 r1c2-t43">
<p>Sets whether HTTP requests using this request context should support HTTP cookies or not: <code>TRUE</code> to enable the support, <code>FALSE</code> to disable it.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t43" headers="r1c1-t43">
<p><code>max_cookies</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t43 r1c2-t43">
<p>Sets the maximum total number of cookies that will be maintained in this request context</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t43" headers="r1c1-t43">
<p><code>max_cookies_per_site</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t43 r1c2-t43">
<p>Sets the maximum number of cookies per each Web site that will be maintained in this request context</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16794"></a>Return Values</p>
<p>The request context created.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16795"></a>Examples</p>
<pre>
DECLARE
  request_context  UTL_HTTP.REQUEST_CONTEXT_KEY;
  req              utl_http.req;
BEGIN
  request_context := UTL_HTTP.CREATE_REQUEST_CONTEXT(
       wallet_path          =&gt; 'file:/oracle/wallets/test_wallets',
       wallet_password      =&gt; NULL,
       enable_cookies       =&gt; TRUE,
       max_cookies          =&gt; 300,
       max_cookies_per_site =&gt; 20);
  req := UTL_HTTP.BEGIN_REQUEST(
       url                  =&gt; 'http://www.example.com/',
       request_context      =&gt; request_context);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71029" class="refsect2"><a id="BHADEHID"></a>
<hr />
<h3 class="refsect2"><a id="sthref16796"></a><a id="sthref16797"></a>DESTROY_REQUEST_CONTEXT Procedure</h3>
<p>This procedure destroys a request context in <code>UTL_HTTP</code>. A request context cannot be destroyed when it is in use by a HTTP request or response.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BHAFDABE">Request Context</a> and <a href="#BHABFEFG">HTTP Request Contexts Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16798"></a>Syntax</p>
<pre>
UTL_HTTP.DESTROY_REQUEST_CONTEXT (
   request_context    request_context_key);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16799"></a>Parameters</p>
<div id="ARPLS71030" class="tblformal">
<p class="titleintable"><a id="sthref16800"></a><a id="sthref16801"></a>Table 225-23 DESTROY_REQUEST_CONTEXT Procedure Parameters</p>
<table class="cellalignment1229" title="DESTROY_REQUEST_CONTEXT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.DESTROY_REQUEST_CONTEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t45">Parameter</th>
<th class="cellalignment1227" id="r1c2-t45">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t45" headers="r1c1-t45">
<p>request_context</p>
</td>
<td class="cellalignment1228" headers="r2c1-t45 r1c2-t45">
<p>Request context to destroy</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16802"></a>Examples</p>
<pre>
DECLARE
  request_context  UTL_HTTP.REQUEST_CONTEXT_KEY;
BEGIN
  request_context := UTL_HTTP.CREATE_REQUEST_CONTEXT(&hellip;);
  &hellip;
  UTL_HTTP.DESTROY_REQUEST_CONTEXT(request_context);
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71031" class="refsect2"><a id="BHABGIAA"></a>
<hr />
<h3 class="refsect2"><a id="sthref16803"></a>END_REQUEST Procedure</h3>
<p>This procedure ends the HTTP request. To terminate the HTTP request without completing the request and waiting for the response, the program can call this procedure. Otherwise, the program should go through the normal sequence of beginning a request, getting the response, and closing the response. The network connection will always be closed and will not be reused.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16804"></a>Syntax</p>
<pre>
UTL_HTTP.END_REQUEST (
   r  IN OUT NOCOPY req);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16805"></a>Parameters</p>
<div id="ARPLS71032" class="tblformal">
<p class="titleintable"><a id="sthref16806"></a><a id="sthref16807"></a>Table 225-24 END_REQUEST Procedure Parameters</p>
<table class="cellalignment1229" title="END_REQUEST Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.END_REQUEST subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t47">Parameter</th>
<th class="cellalignment1227" id="r1c2-t47">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t47" headers="r1c1-t47">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t47 r1c2-t47">
<p>The HTTP request</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71033" class="refsect2"><a id="i1025944"></a>
<hr />
<h3 class="refsect2"><a id="sthref16808"></a>END_RESPONSE Procedure</h3>
<p>This procedure ends the HTTP response. It completes the HTTP request and response. Unless HTTP 1.1 persistent connection is used in this request, the network connection is also closed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16809"></a>Syntax</p>
<pre>
UTL_HTTP.END_RESPONSE (
   r  IN OUT NOCOPY resp);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16810"></a>Parameters</p>
<div id="ARPLS71034" class="tblformal">
<p class="titleintable"><a id="sthref16811"></a><a id="sthref16812"></a>Table 225-25 END_RESPONSE Procedure Parameters</p>
<table class="cellalignment1229" title="END_RESPONSE Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.END_RESPONSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t49">Parameter</th>
<th class="cellalignment1227" id="r1c2-t49">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t49" headers="r1c1-t49">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t49 r1c2-t49">
<p>The HTTP response</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71035" class="refsect2"><a id="i1025992"></a>
<hr />
<h3 class="refsect2"><a id="sthref16813"></a>GET_AUTHENTICATION Procedure</h3>
<p>This procedure retrieves the HTTP authentication information needed for the request to be accepted by the Web server as indicated in the HTTP response header.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16814"></a>Syntax</p>
<pre>
UTL_HTTP.GET_AUTHENTICATION(
   r          IN OUT NOCOPY resp,
   scheme     OUT VARCHAR2,
   realm      OUT VARCHAR2,
   for_proxy  IN BOOLEAN  DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16815"></a>Parameters</p>
<div id="ARPLS71036" class="tblformal">
<p class="titleintable"><a id="sthref16816"></a><a id="sthref16817"></a>Table 225-26 GET_AUTHENTICATION Procedure Parameters</p>
<table class="cellalignment1229" title="GET_AUTHENTICATION Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_AUTHENTICATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t51">Parameter</th>
<th class="cellalignment1227" id="r1c2-t51">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t51" headers="r1c1-t51">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t51 r1c2-t51">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t51" headers="r1c1-t51">
<p><code>scheme</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t51 r1c2-t51">
<p>The scheme for the required HTTP authentication</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t51" headers="r1c1-t51">
<p><code>realm</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t51 r1c2-t51">
<p>The realm for the required HTTP authentication</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t51" headers="r1c1-t51">
<p><code>for_proxy</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t51 r1c2-t51">
<p>Returns the HTTP authentication information required for the access to the HTTP proxy server instead of the Web server? Default is <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16818"></a>Usage Notes</p>
<p>When a Web client is unaware that a document is protected, at least two HTTP requests are required for the document to be retrieved. In the first HTTP request, the Web client makes the request without supplying required authentication information; so the request is denied. The Web client can determine the authentication information required for the request to be authorized by calling <code>GET_AUTHENTICATION</code>. The Web client makes the second request and supplies the required authentication information with <code>SET_AUTHORIZATION</code>. If the authentication information can be verified by the Web server, the request will succeed and the requested document is returned. Before making the request, if the Web client knows that authentication information is required, it can supply the required authentication information in the first request, thus saving an extra request.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71037" class="refsect2"><a id="i1026054"></a>
<hr />
<h3 class="refsect2"><a id="sthref16819"></a>GET_BODY_CHARSET Procedure</h3>
<p>This procedure retrieves the default character set of the body of all future HTTP requests.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16820"></a>Syntax</p>
<pre>
UTL_HTTP.GET_BODY_CHARSET (
   charset  OUT NOCOPY VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16821"></a>Parameters</p>
<div id="ARPLS71038" class="tblformal">
<p class="titleintable"><a id="sthref16822"></a><a id="sthref16823"></a>Table 225-27 GET_BODY_CHARSET Procedure Parameters</p>
<table class="cellalignment1229" title="GET_BODY_CHARSET Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_BODY_CHARSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t53">Parameter</th>
<th class="cellalignment1227" id="r1c2-t53">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t53" headers="r1c1-t53">
<p><code>charset</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t53 r1c2-t53">
<p>The default character set of the body of all future HTTP requests</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71039" class="refsect2"><a id="i1026101"></a>
<hr />
<h3 class="refsect2"><a id="sthref16824"></a>GET_COOKIE_COUNT Function</h3>
<p>This function returns the number of cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015893">HTTP Cookies</a> and <a href="#i1013098">HTTP Cookies Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16825"></a>Syntax</p>
<pre>
UTL_HTTP.GET_COOKIE_COUNT (
   request_context  IN  request_context_key DEFAULT NULL) 
 RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16826"></a>Parameters</p>
<div id="ARPLS71040" class="tblformal">
<p class="titleintable"><a id="sthref16827"></a><a id="sthref16828"></a>Table 225-28 GET_COOKIE_COUNT Function Parameters</p>
<table class="cellalignment1229" title="GET_COOKIE_COUNT Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_COOKIE_COUNT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t55">Parameter</th>
<th class="cellalignment1227" id="r1c2-t55">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t55" headers="r1c1-t55">
<p><code>request_context</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t55 r1c2-t55">
<p>Request context to return the cookie count for. If <code>NULL</code>, the cookie count maintained in the <code>UTL_HTTP</code> package's session state will be returned instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71041" class="refsect2"><a id="i1026130"></a>
<hr />
<h3 class="refsect2"><a id="sthref16829"></a>GET_COOKIE_SUPPORT Procedure</h3>
<p>This procedure retrieves the current cookie support settings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16830"></a>Syntax</p>
<pre>
UTL_HTTP.GET_COOKIE_SUPPORT (
   enable                OUT BOOLEAN,
   max_cookies           OUT PLS_INTEGER,
   max_cookies_per_site  OUT PLS_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16831"></a>Parameters</p>
<div id="ARPLS71042" class="tblformal">
<p class="titleintable"><a id="sthref16832"></a><a id="sthref16833"></a>Table 225-29 GET_COOKIE_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="GET_COOKIE_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_COOKIE_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t57">Parameter</th>
<th class="cellalignment1227" id="r1c2-t57">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t57" headers="r1c1-t57">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t57 r1c2-t57">
<p>Indicates whether future HTTP requests should support HTTP cookies (<code>TRUE</code>) or not (<code>FALSE</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t57" headers="r1c1-t57">
<p><code>max_cookies</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t57 r1c2-t57">
<p>Indicates the maximum total number of cookies maintained in the current session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t57" headers="r1c1-t57">
<p><code>max_cookies_per_site</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t57 r1c2-t57">
<p>Indicates the maximum number of cookies maintained in the current session for each Web site</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71043" class="refsect2"><a id="i1026186"></a>
<hr />
<h3 class="refsect2"><a id="sthref16834"></a>GET_COOKIES Function</h3>
<p>This function returns all the cookies maintained either in a request context or in the <code>UTL_HTTP</code> package's session state.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015893">HTTP Cookies</a> and <a href="#i1013098">HTTP Cookies Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16835"></a>Syntax</p>
<pre>
UTL_HTTP.GET_COOKIES (
   cookies          IN  OUT NOCOPY cookie_table,
   request_context  IN             request_context_key DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16836"></a>Parameters</p>
<div id="ARPLS71044" class="tblformal">
<p class="titleintable"><a id="sthref16837"></a><a id="sthref16838"></a>Table 225-30 GET_COOKIES Function Parameters</p>
<table class="cellalignment1229" title="GET_COOKIES Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_COOKIES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t59">Parameter</th>
<th class="cellalignment1227" id="r1c2-t59">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t59" headers="r1c1-t59">
<p><code>cookies</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t59 r1c2-t59">
<p>The cookies returned</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t59" headers="r1c1-t59">
<p><code>request_context</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t59 r1c2-t59">
<p>Request context to return the cookies for. If <code>NULL</code>, the cookies maintained in the <code>UTL_HTTP</code> package's session state will be returned instead.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71045" class="refsect2"><a id="i1026231"></a>
<hr />
<h3 class="refsect2"><a id="sthref16839"></a>GET_DETAILED_EXCP_SUPPORT Procedure</h3>
<p>This procedure checks if the <code>UTL_HTTP</code> package will raise a detailed exception or not.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16840"></a>Syntax</p>
<pre>
UTL_HTTP.GET_DETAILED_EXCP_SUPPORT (
   enable  OUT BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16841"></a>Parameters</p>
<div id="ARPLS71046" class="tblformal">
<p class="titleintable"><a id="sthref16842"></a><a id="sthref16843"></a>Table 225-31 GET_DETAILED_EXCP_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="GET_DETAILED_EXCP_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_DETAILED_EXCP_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t61">Parameter</th>
<th class="cellalignment1227" id="r1c2-t61">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t61" headers="r1c1-t61">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t61 r1c2-t61">
<p><code>TRUE</code> if <code>UTL_HTTP</code> raises a detailed exception; otherwise <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71047" class="refsect2"><a id="i1026279"></a>
<hr />
<h3 class="refsect2"><a id="sthref16844"></a>GET_DETAILED_SQLCODE Function</h3>
<p>This function retrieves the detailed <code>SQLCODE</code> of the last exception raised.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016483">Error Conditions</a> and<a href="#CHDHCECC">Error Conditions Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16845"></a>Syntax</p>
<pre>
UTL_HTTP.GET_DETAILED_SQLCODE 
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71048" class="refsect2"><a id="i1026358"></a>
<hr />
<h3 class="refsect2"><a id="sthref16846"></a>GET_DETAILED_SQLERRM Function</h3>
<p>This function retrieves the detailed <code>SQLERRM</code> of the last exception raised.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016483">Error Conditions</a> and <a href="#CHDHCECC">Error Conditions Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16847"></a>Syntax</p>
<pre>
UTL_HTTP.GET_DETAILED_SQLERRM 
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71049" class="refsect2"><a id="i1031298"></a>
<hr />
<h3 class="refsect2"><a id="sthref16848"></a>GET_FOLLOW_REDIRECT Procedure</h3>
<p>This procedure retrieves the follow-redirect setting in the current session</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16849"></a>Syntax</p>
<pre>
UTL_HTTP.GET_FOLLOW_REDIRECT (
   max_redirects  OUT PLS_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16850"></a>Parameters</p>
<div id="ARPLS71050" class="tblformal">
<p class="titleintable"><a id="sthref16851"></a><a id="sthref16852"></a>Table 225-32 GET_FOLLOW_REDIRECT Procedure Parameters</p>
<table class="cellalignment1229" title="GET_FOLLOW_REDIRECT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_FOLLOW_REDIRECT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t65">Parameter</th>
<th class="cellalignment1227" id="r1c2-t65">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t65" headers="r1c1-t65">
<p><code>max_redirects</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t65 r1c2-t65">
<p>The maximum number of redirections for all future HTTP requests</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71051" class="refsect2"><a id="i1026389"></a>
<hr />
<h3 class="refsect2"><a id="sthref16853"></a>GET_HEADER Procedure</h3>
<p>This procedure returns the n<sup>th</sup> HTTP response header name and value returned in the response.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16854"></a>Syntax</p>
<pre>
UTL_HTTP.GET_HEADER (
   r      IN OUT NOCOPY resp,
   n      IN PLS_INTEGER,
   name   OUT NOCOPY VARCHAR2,
   value  OUT NOCOPY VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16855"></a>Parameters</p>
<div id="ARPLS71052" class="tblformal">
<p class="titleintable"><a id="sthref16856"></a><a id="sthref16857"></a>Table 225-33 GET_HEADER Procedure Parameters</p>
<table class="cellalignment1229" title="GET_HEADER Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_HEADER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t67">Parameter</th>
<th class="cellalignment1227" id="r1c2-t67">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t67" headers="r1c1-t67">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t67 r1c2-t67">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t67" headers="r1c1-t67">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t67 r1c2-t67">
<p>The n<sup>th</sup> header to return</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t67" headers="r1c1-t67">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t67 r1c2-t67">
<p>The name of the HTTP response header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t67" headers="r1c1-t67">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t67 r1c2-t67">
<p>The value of the HTTP response header</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16858"></a>Usage Notes</p>
<p>If the response body returned by the remote Web server is encoded in chunked transfer encoding format, the trailer headers that are returned at the end of the response body will be added to the response, and the response header count will be updated. You can retrieve the additional headers after the end of the response body is reached and before you end the response.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71053" class="refsect2"><a id="i1026453"></a>
<hr />
<h3 class="refsect2"><a id="sthref16859"></a>GET_HEADER_BY_NAME Procedure</h3>
<p>This procedure returns the HTTP response header value returned in the response given the name of the header.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16860"></a>Syntax</p>
<pre>
UTL_HTTP.GET_HEADER_BY_NAME(
   r      IN OUT NOCOPY resp,
   name   IN VARCHAR2,
   value  OUT NOCOPY VARCHAR2,
   n      IN PLS_INTEGER DEFAULT 1);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16861"></a>Parameters</p>
<div id="ARPLS71054" class="tblformal">
<p class="titleintable"><a id="sthref16862"></a><a id="sthref16863"></a>Table 225-34 GET_HEADER_BY_NAME Procedure Parameters</p>
<table class="cellalignment1229" title="GET_HEADER_BY_NAME Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_HEADER_BY_NAME subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t69">Parameter</th>
<th class="cellalignment1227" id="r1c2-t69">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t69" headers="r1c1-t69">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t69 r1c2-t69">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t69" headers="r1c1-t69">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t69 r1c2-t69">
<p>The name of the HTTP response header for which the value is to return</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t69" headers="r1c1-t69">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t69 r1c2-t69">
<p>The value of the HTTP response header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t69" headers="r1c1-t69">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t69 r1c2-t69">
<p>The n<sup>th</sup> occurrence of an HTTP response header by the specified name to return. The default is 1.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16864"></a>Usage Notes</p>
<p>If the response body returned by the remote Web server is encoded in chunked transfer encoding format, the trailer headers that are returned at the end of the response body will be added to the response, and the response header count will be updated. You can retrieve the additional headers after the end of the response body is reached and before you end the response.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71055" class="refsect2"><a id="i1026514"></a>
<hr />
<h3 class="refsect2"><a id="sthref16865"></a>GET_HEADER_COUNT Function</h3>
<p>This function returns the number of HTTP response headers returned in the response.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16866"></a>Syntax</p>
<pre>
UTL_HTTP.GET_HEADER_COUNT (
   r  IN OUT NOCOPY resp) 
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16867"></a>Parameters</p>
<div id="ARPLS71056" class="tblformal">
<p class="titleintable"><a id="sthref16868"></a><a id="sthref16869"></a>Table 225-35 GET_HEADER_COUNT Function Parameters</p>
<table class="cellalignment1229" title="GET_HEADER_COUNT Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_READER_COUNT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t71">Parameter</th>
<th class="cellalignment1227" id="r1c2-t71">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t71" headers="r1c1-t71">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t71 r1c2-t71">
<p>The HTTP response</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16870"></a>Usage Notes</p>
<p>If the response body returned by the remote Web server is encoded in chunked transfer encoding format, the trailer headers that are returned at the end of the response body will be added to the response, and the response header count will be updated. You can retrieve the additional headers after the end of the response body is reached and before you end the response.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71057" class="refsect2"><a id="i1026564"></a>
<hr />
<h3 class="refsect2"><a id="sthref16871"></a>GET_PERSISTENT_CONN_COUNT Function</h3>
<p>This function returns the number of network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016139">HTTP Persistent Connections</a> and <a href="#i1013099">HTTP Persistent Connections Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16872"></a>Syntax</p>
<pre>
UTL_HTTP.GET_PERSISTENT_CONN_COUNT 
RETURN PLS_INTEGER;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16873"></a>Usage Notes</p>
<p>Connections to the same Web server at different TCP/IP ports are counted individually. The host names of the Web servers are identified as specified in the URL of the original HTTP requests. Therefore, fully qualified host names with domain names will be counted differently from the host names without domain names.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71058" class="refsect2"><a id="i1026599"></a>
<hr />
<h3 class="refsect2"><a id="sthref16874"></a>GET_PERSISTENT_CONN_SUPPORT Procedure</h3>
<p>This procedure checks:</p>
<ul>
<li>
<p>If the persistent connection support is enabled</p>
</li>
<li>
<p>Gets the maximum number of persistent connections in the current session</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
</li>
</ul>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16875"></a>Syntax</p>
<pre>
UTL_HTTP.GET_PERSISTENT_CONN_SUPPORT (
   enable     OUT BOOLEAN,
   max_conns  OUT PLS_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16876"></a>Parameters</p>
<div id="ARPLS71059" class="tblformal">
<p class="titleintable"><a id="sthref16877"></a><a id="sthref16878"></a>Table 225-36 GET_PERSISTENT_CONN_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="GET_PERSISTENT_CONN_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_PERSISTENT_CONN_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t74">Parameter</th>
<th class="cellalignment1227" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t74" headers="r1c1-t74">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t74 r1c2-t74">
<p><code>TRUE</code> if persistent connection support is enabled; otherwise <code>FALSE</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t74" headers="r1c1-t74">
<p><code>max_conns</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t74 r1c2-t74">
<p>the maximum number of persistent connections maintained in the current session</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71060" class="refsect2"><a id="i1026653"></a>
<hr />
<h3 class="refsect2"><a id="sthref16879"></a>GET_PERSISTENT_CONNS Procedure</h3>
<p>This procedure returns all the network connections currently kept persistent by the <code>UTL_HTTP</code> package to the Web servers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1016139">HTTP Persistent Connections</a> and <a href="#i1013099">HTTP Persistent Connections Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16880"></a>Syntax</p>
<pre>
UTL_HTTP.get_persistent_conns (
   connections  IN OUT NOCOPY connection_table);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16881"></a>Parameters</p>
<div id="ARPLS71061" class="tblformal">
<p class="titleintable"><a id="sthref16882"></a><a id="sthref16883"></a>Table 225-37 GET_PERSISTENT_CONNS Procedure Parameters</p>
<table class="cellalignment1229" title="GET_PERSISTENT_CONNS Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_PERSISTENT_CONNS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t76">Parameter</th>
<th class="cellalignment1227" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t76" headers="r1c1-t76">
<p><code>connections</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t76 r1c2-t76">
<p>The network connections kept persistent</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16884"></a>Usage Notes</p>
<p>Connections to the same Web server at different TCP/IP ports are counted individually. The host names of the Web servers are identified as specified in the URL of the original HTTP requests. Therefore, fully qualified host names with domain names will be counted differently from the host names without domain names.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71062" class="refsect2"><a id="i1026714"></a>
<hr />
<h3 class="refsect2"><a id="sthref16885"></a>GET_PROXY Procedure</h3>
<p>This procedure retrieves the current proxy settings.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16886"></a>Syntax</p>
<pre>
UTL_HTTP.GET_PROXY (
   proxy             OUT NOCOPY VARCHAR2, 
   no_proxy_domains  OUT NOCOPY VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16887"></a>Parameters</p>
<div id="ARPLS71063" class="tblformal">
<p class="titleintable"><a id="sthref16888"></a><a id="sthref16889"></a>Table 225-38 GET_PROXY Procedure Parameters</p>
<table class="cellalignment1229" title="GET_PROXY Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_PROXY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t78">Parameter</th>
<th class="cellalignment1227" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t78" headers="r1c1-t78">
<p><code>proxy</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t78 r1c2-t78">
<p>The proxy (host and an optional port number) currently used by the <code>UTL_HTTP</code> package</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t78" headers="r1c1-t78">
<p><code>no_proxy_domains</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t78 r1c2-t78">
<p>The list of hosts and domains for which no proxy is used for all requests</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div class="refsect2"><a id="BHAIBAHA"></a>
<hr />
<h3 class="refsect2"><a id="sthref16890"></a>GET_RESPONSE Function</h3>
<p>This function reads the HTTP response. When the function returns, the status line and the HTTP response headers have been read and processed. The status code, reason phrase, and the HTTP protocol version are stored in the response record. This function completes the HTTP headers section.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16891"></a>Syntax</p>
<pre>
UTL_HTTP.GET_RESPONSE (
   r                       IN OUT NOCOPY req,
   return_info_response    IN BOOLEAN DEFAULT FALSE) 
RETURN resp;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16892"></a>Parameters</p>
<div class="tblformal">
<p class="titleintable"><a id="sthref16893"></a><a id="sthref16894"></a>Table 225-39 GET_RESPONSE Function Parameters</p>
<table class="cellalignment1229" title="GET_RESPONSE Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_RESPONSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t80">Parameter</th>
<th class="cellalignment1227" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t80" headers="r1c1-t80">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t80 r1c2-t80">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t80" headers="r1c1-t80">
<p><code>return_info_response</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t80 r1c2-t80">
<p>Return 100 informational response or not.</p>
<ul>
<li>
<p><code>TRUE</code> means <code>get_response</code> should return 100 informational response when it is received from the HTTP server. The request will not be ended if a 100 response is returned.</p>
</li>
<li>
<p><code>FALSE</code> means the API should ignore any 100 informational response received from the HTTP server and should return the following non-100 response instead. The default is <code>FALSE</code>.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16895"></a>Exceptions</p>
<ul>
<li>
<p>When detailed-exception is disabled:</p>
<p><code>ORA-29273 REQUEST_FAILED</code> - the request fails to execute. Use the <a href="#i1026231">GET_DETAILED_EXCP_SUPPORT Procedure</a> and the <a href="#i1026358">GET_DETAILED_SQLERRM Function</a> to get the detailed error message.</p>
</li>
<li>
<p>When detailed-exception is enabled:</p>
<p><code>ORA-29261 BAD_ARGUMENT</code> - some arguments passed are not valid</p>
</li>
<li>
<p>When response error check is enabled:</p>
<p><code>ORA-29268 HTTP_CLIENT_ERROR</code> - the response code is in 400 range</p>
<p><code>ORA-29269 HTTP_SERVER_ERROR</code> - the response code is in 500 range</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16896"></a>Usage Notes</p>
<ul>
<li>
<p>The request will be ended when this functions returns regardless of whether an exception is raised or not. There is no need to invoke the <a href="#BHABGIAA">END_REQUEST Procedure</a>.</p>
</li>
<li>
<p>If URL redirection occurs, the URL and method fields in the <code>req</code> record will be updated to the last redirected URL and the method used to access the URL.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16897"></a>Examples</p>
<p>In certain situations (initiated by the HTTP client or not), the HTTP server may return a <code>1xx</code> informational response. The user who does not expect such a response may indicate to <code>GET_RESPONSE</code> to ignore the response and proceed to receive the regular response. In the case when the user expects such a response, the user can indicate to <code>GET_RESPONSE</code> to return the response.</p>
<p>For example, when a user is issuing a <code>HTTP</code> <code>POST</code> request with a large request body, the user may want to check with the HTTP server to ensure that the server will accept the request before sending the data. To do so, the user will send the additional <code>EXPECT: 100-CONTINUE</code> request header, and check for <code>100 CONTINUE</code> response from the server before proceeding to send the request body. Then, the user will get the regular HTTP response.</p>
<p>The following code example illustrates this:</p>
<pre>
DECLARE
 data  VARCHAR2(1024) := '...';
 req   utl_http.req;
 resp  utl_http.resp;
BEGIN
   
 req := utl_http.begin_request('http://www.acme.com/receiver', 'POST');
 utl_http.set_header(req, 'Content-Length', length(data));
 -- Ask HTTP server to return "100 Continue" response
 utl_http.set_header(req, 'Expect', '100-continue');
 resp := utl_http.get_response(req, TRUE);
   
 -- Check for and dispose "100 Continue" response
 IF (resp.status_code &lt;&gt; 100) THEN
   utl_http.end_response(resp);
   raise_application_error(20000, 'Request rejected');
 END IF;
 utl_http.end_response(resp);
   
 -- Now, send the request body
 utl_http.write_text(req, data);
 
 -- Get the regular response
 resp := utl_http.get_response(req);
 utl_http.read_text(resp, data);
   
 utl_http.end_response(resp);
   
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71066" class="refsect2"><a id="i1026812"></a>
<hr />
<h3 class="refsect2"><a id="sthref16898"></a>GET_RESPONSE_ERROR_CHECK Procedure</h3>
<p>This procedure checks if the response error check is set or not.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16899"></a>Syntax</p>
<pre>
UTL_HTTP.GET_RESPONSE_ERROR_CHECK (
   enable  OUT BOOLEAN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16900"></a>Parameters</p>
<div id="ARPLS71067" class="tblformal">
<p class="titleintable"><a id="sthref16901"></a><a id="sthref16902"></a>Table 225-40 GET_RESPONSE_ERROR_CHECK Procedure Parameters</p>
<table class="cellalignment1229" title="GET_RESPONSE_ERROR_CHECK Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_RESPONSE_ERROR_CHECK subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t82">Parameter</th>
<th class="cellalignment1227" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t82" headers="r1c1-t82">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t82 r1c2-t82">
<p><code>TRUE</code> if the response error check is set; otherwise <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71068" class="refsect2"><a id="i1026856"></a>
<hr />
<h3 class="refsect2"><a id="sthref16903"></a>GET_TRANSFER_TIMEOUT Procedure</h3>
<p>This procedure retrieves the default timeout value for all future HTTP requests.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16904"></a>Syntax</p>
<pre>
UTL_HTTP.GET_TRANSFER_TIMEOUT (
   timeout  OUT PLS_INTEGER);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16905"></a>Parameters</p>
<div id="ARPLS71069" class="tblformal">
<p class="titleintable"><a id="sthref16906"></a><a id="sthref16907"></a>Table 225-41 GET_TRANSFER_TIMEOUT Procedure Parameters</p>
<table class="cellalignment1229" title="GET_TRANSFER_TIMEOUT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.GET_TRANSFER_TIMEOUT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t84">Parameter</th>
<th class="cellalignment1227" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t84" headers="r1c1-t84">
<p><code>timeout</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t84 r1c2-t84">
<p>The network transfer timeout value in seconds</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71070" class="refsect2"><a id="i1026901"></a>
<hr />
<h3 class="refsect2"><a id="sthref16908"></a>READ_LINE Procedure</h3>
<p>This procedure reads the HTTP response body in text form until the end of line is reached and returns the output in the caller-supplied buffer. The end of line is as defined in the function <code>read_line</code> of UTL_TCP. The <code>end_of_body</code> exception will be raised if the end of the HTTP response body is reached. Text data is automatically converted from the response body character set to the database character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16909"></a>Syntax</p>
<pre>
UTL_HTTP.READ_LINE(
   r            IN OUT NOCOPY resp,
   data         OUT NOCOPY  VARCHAR2 CHARACTER SET ANY_CS,
   remove_crlf  IN  BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16910"></a>Parameters</p>
<div id="ARPLS71071" class="tblformal">
<p class="titleintable"><a id="sthref16911"></a><a id="sthref16912"></a>Table 225-42 READ_LINE Procedure Parameters</p>
<table class="cellalignment1229" title="READ_LINE Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.READ_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t86">Parameter</th>
<th class="cellalignment1227" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t86" headers="r1c1-t86">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t86 r1c2-t86">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t86" headers="r1c1-t86">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t86 r1c2-t86">
<p>The HTTP response body in text form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t86" headers="r1c1-t86">
<p><code>remove_crlf</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t86 r1c2-t86">
<p>Removes the newline characters if set to <code>TRUE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16913"></a>Usage Notes</p>
<p>The <code>UTL_HTTP</code> package supports HTTP 1.1 chunked transfer-encoding. When the response body is returned in chunked transfer-encoding format as indicated in the response header, the package automatically decodes the chunks and returns the response body in de-chunked format.</p>
<p>If transfer timeout is set in the request of this response, <code>read_line</code> waits for each data packet to be ready to read until timeout occurs. If it occurs, this procedure stops reading and returns all the data read successfully. If no data is read successfully, the <code>transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
<p>If a partial multibyte character is found at the end of the response body, <code>read_line</code> stops reading and returns all the complete multibyte characters read successfully. If no complete character is read successfully, the <code>partial_multibyte_char</code> exception is raised. The exception can be handled and the bytes of that partial multibyte character can be read as binary by the <code>read_raw</code> procedure. If a partial multibyte character is seen in the middle of the response body because the remaining bytes of the character have not arrived and read timeout occurs, the <code>transfer_timeout</code> exception is raised instead. The exception can be handled and the read operation can be retried later.</p>
<p>When the <code>Content-Type</code> response header specifies the character set of the response body and the character set is unknown or unsupported by Oracle, the "ORA-01482: unsupported character set" exception is raised if you try to read the response body as text. You can either read the response body as binary using the <code>READ_RAW</code> procedure, or set the character set of the response body explicitly using the <code>SET_BODY_CHARSET</code> procedure and read the response body as text again.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71072" class="refsect2"><a id="i1026963"></a>
<hr />
<h3 class="refsect2"><a id="sthref16914"></a>READ_RAW Procedure</h3>
<p>This procedure reads the HTTP response body in binary form and returns the output in the caller-supplied buffer. The <code>end_of_body</code> exception will be raised if the end of the HTTP response body is reached.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16915"></a>Syntax</p>
<pre>
UTL_HTTP.READ_RAW(
   r     IN OUT NOCOPY resp,
   data  OUT NOCOPY RAW,
   len   IN PLS_INTEGER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16916"></a>Parameters</p>
<div id="ARPLS71073" class="tblformal">
<p class="titleintable"><a id="sthref16917"></a><a id="sthref16918"></a>Table 225-43 READ_RAW Procedure Parameters</p>
<table class="cellalignment1229" title="READ_RAW Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.READ_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t88">Parameter</th>
<th class="cellalignment1227" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t88" headers="r1c1-t88">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t88 r1c2-t88">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t88" headers="r1c1-t88">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t88 r1c2-t88">
<p>The HTTP response body in binary form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t88" headers="r1c1-t88">
<p><code>len</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t88 r1c2-t88">
<p>The number of bytes of data to read. If <code>len</code> is <code>NULL</code>, this procedure will read as much input as possible to fill the buffer allocated in <code>data</code>. The actual amount of data returned may be less than that specified if not much data is available before the end of the HTTP response body is reached or the <code>transfer_timeout</code> amount of time has elapsed. The default is <code>NULL</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16919"></a>Usage Notes</p>
<p>The <code>UTL_HTTP</code> package supports HTTP 1.1 chunked transfer-encoding. When the response body is returned in chunked transfer-encoding format as indicated in the response header, the package automatically decodes the chunks and returns the response body in de-chunked format.</p>
<p>If transfer timeout is set in the request of this response, <code>read_raw</code> waits for each data packet to be ready to read until timeout occurs. If it occurs, <code>read_raw</code> stops reading and returns all the data read successfully. If no data is read successfully, the <code>transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71074" class="refsect2"><a id="i1027020"></a>
<hr />
<h3 class="refsect2"><a id="sthref16920"></a>READ_TEXT Procedure</h3>
<p>This procedure reads the HTTP response body in text form and returns the output in the caller-supplied buffer. The <code>end_of_body</code> exception will be raised if the end of the HTTP response body is reached. Text data is automatically converted from the response body character set to the database character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16921"></a>Syntax</p>
<pre>
UTL_HTTP.READ_TEXT(
   r     IN OUT NOCOPY resp,
   data  OUT NOCOPY VARCHAR2 CHARACTER SET ANY_CS,
   len   IN PLS_INTEGER DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16922"></a>Parameters</p>
<div id="ARPLS71075" class="tblformal">
<p class="titleintable"><a id="sthref16923"></a><a id="sthref16924"></a>Table 225-44 READ_TEXT Procedure Parameters</p>
<table class="cellalignment1229" title="READ_TEXT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.READ_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t90">Parameter</th>
<th class="cellalignment1227" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t90" headers="r1c1-t90">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t90 r1c2-t90">
<p>The HTTP response</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t90" headers="r1c1-t90">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t90 r1c2-t90">
<p>The HTTP response body in text form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t90" headers="r1c1-t90">
<p><code>len</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t90 r1c2-t90">
<p>The maximum number of characters of data to read. If <code>len</code> is NULL, this procedure will read as much input as possible to fill the buffer allocated in <code>data</code>. The actual amount of data returned may be less than that specified if little data is available before the end of the HTTP response body is reached or the <code>transfer_timeout</code> amount of time has elapsed. The default is NULL.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16925"></a>Usage Notes</p>
<p>The <code>UTL_HTTP</code> package supports HTTP 1.1 chunked transfer-encoding. When the response body is returned in chunked transfer-encoding format as indicated in the response header, the package automatically decodes the chunks and returns the response body in de-chunked format.</p>
<p>If transfer timeout is set in the request of this response, <code>read_text</code> waits for each data packet to be ready to read until timeout occurs. If it occurs, this procedure stops reading and returns all the data read successfully. If no data is read successfully, the <code>transfer_timeout</code> exception is raised. The exception can be handled and the read operation can be retried later.</p>
<p>If a partial multibyte character is found at the end of the response body, <code>read_text</code> stops reading and returns all the complete multibyte characters read successfully. If no complete character is read successfully, the <code>partial_multibyte_char</code> exception is raised. The exception can be handled and the bytes of that partial multibyte character can be read as binary by the <code>read_raw</code> procedure. If a partial multibyte character is seen in the middle of the response body because the remaining bytes of the character have not arrived and read timeout occurs, the <code>transfer_timeout</code> exception is raised instead. The exception can be handled and the read operation can be retried later.</p>
<p>When the <code>Content-Type</code> response header specifies the character set of the response body and the character set is unknown or unsupported by Oracle, the "<code>ORA-01482: unsupported character set</code>" exception is raised if you try to read the response body as text. You can either read the response body as binary using the <code>READ_RAW</code> procedure, or set the character set of the response body explicitly using the <code>SET_BODY_CHARSET</code> procedure and read the response body as text again.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71076" class="refsect2"><a id="i998070"></a>
<hr />
<h3 class="refsect2"><a id="sthref16926"></a>REQUEST Function</h3>
<p>This function returns up to the first 2000 bytes of data retrieved from the given URL. This function can be used directly in SQL queries. The URL may contain the username and password needed to authenticate the request to the server. The format is</p>
<pre>
scheme://[user[:password]@]host[:port]/[...]
</pre>
<p>You can define a username/password for the proxy to be specified in the proxy string. The format is</p>
<pre>
[http://][user[:password]@]host[:port][/]
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013453">Simple HTTP Fetches</a> and <a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16927"></a>Syntax</p>
<pre>
UTL_HTTP.REQUEST (
   url              IN VARCHAR2,
   proxy            IN VARCHAR2 DEFAULT NULL, 
   wallet_path      IN VARCHAR2 DEFAULT NULL,
   wallet_password  IN VARCHAR2 DEFAULT NULL)
RETURN VARCHAR2;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16928"></a>Pragmas</p>
<pre>
pragma restrict_references (request, wnds, rnds, wnps, rnps);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16929"></a>Parameters</p>
<div id="ARPLS71077" class="tblformal">
<p class="titleintable"><a id="sthref16930"></a><a id="sthref16931"></a>Table 225-45 REQUEST Function Parameters</p>
<table class="cellalignment1229" title="REQUEST Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.REQUEST subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t92">Parameter</th>
<th class="cellalignment1227" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t92" headers="r1c1-t92">
<p><code>url</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t92 r1c2-t92">
<p>Uniform resource locator</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t92" headers="r1c1-t92">
<p><code>proxy</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t92 r1c2-t92">
<p>(Optional) Specifies a proxy server to use when making the HTTP request. See <code>SET_PROXY</code> for the full format of the proxy setting.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t92" headers="r1c1-t92">
<p><code>wallet_path</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t92 r1c2-t92">
<p>(Optional) Specifies a client-side wallet. The client-side wallet contains the list of trusted certificate authorities required for HTTPS request. The format of <code>wallet_path</code> on a PC is, for example, file:c<code>:\WINNT\Profiles\</code><code><span class="codeinlineitalic">username</span></code><code>\WALLETS,</code> and in Unix is, for example, <code>file:/home/</code><code><span class="codeinlineitalic">username</span></code><code>/wallets</code></p>
<p>When the <code>UTL_HTTP</code> package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server. See <code>SET_WALLET</code> for a description on how to set up an Oracle wallet. Non-HTTPS requests do not require an Oracle wallet.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t92" headers="r1c1-t92">
<p><code>wallet_password</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t92 r1c2-t92">
<p>(Optional) Specifies the password required to open the wallet</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16932"></a>Return Values</p>
<p>The return type is a string of length 2000 or less, which contains up to the first 2000 bytes of the HTML result returned from the HTTP request to the argument URL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16933"></a>Exceptions</p>
<pre>
INIT_FAILED
REQUEST_FAILED
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16934"></a>Usage Notes</p>
<p>The URL passed as an argument to this function is not examined for illegal characters, for example, spaces, according to URL specification RFC 2396. The caller should escape those characters with the UTL_URL package. See the comments of the package for the list of legal characters in URLs. Note that URLs should consist of US-ASCII characters only. The use of non-US-ASCII characters in a URL is generally unsafe.</p>
<p>Please see the documentation of the function <code>SET_WALLET</code> on the use of an Oracle wallet, which is required for accessing HTTPS Web servers.</p>
<p>Unless response error check is turned on, this function does not raise an exception when a 4xx or 5xx response is received from the Web server. Instead, it returns the formatted error message from the Web server:</p>
<pre>
&lt;HTML&gt; 
&lt;HEAD&gt; 
&lt;TITLE&gt;Error Message&lt;/TITLE&gt; 
&lt;/HEAD&gt; 
&lt;BODY&gt; 
&lt;H1&gt;Fatal Error 500&lt;/H1&gt; 
Can't Access Document:  http://home.nothing.comm. 
&lt;P&gt; 
&lt;B&gt;Reason:&lt;/B&gt; Can't locate remote host:  home.nothing.comm. 
&lt;P&gt; 
&lt;P&gt;&lt;HR&gt; 
&lt;ADDRESS&gt;&lt;A HREF="http://www.w3.org"&gt; 
CERN-HTTPD3.0A&lt;/A&gt;&lt;/ADDRESS&gt; 
&lt;/BODY&gt; 
&lt;/HTML&gt; 
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16935"></a>Examples</p>
<pre>
SQL&gt; SELECT UTL_HTTP.REQUEST('http://www.my-company.com/') FROM DUAL;
UTL_HTTP.REQUEST('HTTP://WWW.MY-COMPANY.COM/')                         
&lt;html&gt;
&lt;head&gt;&lt;title&gt;My Company Home Page&lt;/title&gt;
&lt;!--changed Jan. 16, 19
1 row selected.
</pre>
<p>If you are behind a firewall, include the <code>proxy</code> parameter. For example, from within the Oracle firewall, where there might be a proxy server named <code>www-proxy</code>.<code>my-company.com</code>:</p>
<pre>
SQLPLUS&gt; SELECT 
UTL_HTTP.REQUEST('http://www.my-company.com', 'www-proxy.us.my-company.com') FROM DUAL;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71078" class="refsect2"><a id="i998146"></a>
<hr />
<h3 class="refsect2"><a id="sthref16936"></a>REQUEST_PIECES Function</h3>
<p>This function returns a PL/SQL table of 2000-byte pieces of the data retrieved from the given URL. You can define a username/password for the proxy to be specified in the proxy string. The format is</p>
<pre>
[http://][user[:password]@]host[:port][/] 
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013453">Simple HTTP Fetches</a> and <a href="#i1013042">Simple HTTP Fetches in a Single Call Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16937"></a>Syntax</p>
<pre>
TYPE html_pieces IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;

UTL_HTTP.REQUEST_PIECES (
   url             IN VARCHAR2,
   max_pieces      IN NATURAL DEFAULT 32767,
   proxy           IN VARCHAR2 DEFAULT NULL,
   wallet_path     IN VARCHAR2 DEFAULT NULL,
   wallet_password IN VARCHAR2 DEFAULT NULL)
RETURN html_pieces;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16938"></a>Pragmas</p>
<pre>
PRAGMA RESTRICT_REFERENCES (request_pieces, WNDS, RNDS, WNPS, RNPS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16939"></a>Parameters</p>
<div id="ARPLS71079" class="tblformal">
<p class="titleintable"><a id="sthref16940"></a><a id="sthref16941"></a>Table 225-46 REQUEST_PIECES Function Parameters</p>
<table class="cellalignment1229" title="REQUEST_PIECES Function Parameters" summary="This table describes the Parameters of the UTL_HTTP.REQUEST_PIECES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t94">Parameter</th>
<th class="cellalignment1227" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t94" headers="r1c1-t94">
<p><code>url</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t94 r1c2-t94">
<p>Uniform resource locator</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t94" headers="r1c1-t94">
<p><code>max_pieces</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t94 r1c2-t94">
<p>(Optional) The maximum number of pieces (each 2000 characters in length, except for the last, which may be shorter), that <code>REQUEST_PIECES</code> should return. If provided, then that argument should be a positive integer.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t94" headers="r1c1-t94">
<p><code>proxy</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t94 r1c2-t94">
<p>(Optional) Specifies a proxy server to use when making the HTTP request. See <code>SET_PROXY</code> for the full format of the proxy setting.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t94" headers="r1c1-t94">
<p><code>wallet_path</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t94 r1c2-t94">
<p>(Optional) Specifies a client-side wallet. The client-side wallet contains the list of trusted certificate authorities required for HTTPS request.</p>
<p>The format of wallet_path on a PC is, for example, <code>file:c:\WINNT\Profiles\</code><code><span class="codeinlineitalic">username</span></code><code>\WALLETS</code>, and in Unix is, for example, <code>file:/home/</code><code><span class="codeinlineitalic">username</span></code><code>/wallets</code>. When the <code>UTL_HTTP</code> package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server.</p>
<p>See <code>SET_WALLET</code> for the description on how to set up an Oracle wallet. Non-HTTPS requests do not require an Oracle wallet.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t94" headers="r1c1-t94">
<p><code>wallet_password</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t94 r1c2-t94">
<p>(Optional) Specifies the password required to open the wallet</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16942"></a>Return Values</p>
<p><code>REQUEST_PIECES</code> returns a PL/SQL table of type <code>UTL_HTTP</code>.<code>HTML_PIECES</code>. Each element of that PL/SQL table is a string of maximum length 2000. The elements of the PL/SQL table returned by <code>REQUEST_PIECES</code> are successive pieces of the data obtained from the HTTP request to that URL.</p>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16943"></a>Exceptions</p>
<pre>
INIT_FAILED
REQUEST_FAILED
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16944"></a>Usage Notes</p>
<p>The URL passed as an argument to this function will not be examined for illegal characters, for example, spaces, according to URL specification RFC 2396. The caller should escape those characters with the <code>UTL_URL</code> package. See the comments of the package for the list of legal characters in URLs. Note that URLs should consist of US-ASCII characters only. The use of non-US-ASCII characters in a URL is generally unsafe.</p>
<p>Each entry of the PL/SQL table (the "pieces") returned by this function may not be filled to their fullest capacity. The function may start filling the data in the next piece before the previous "piece" is totally full.</p>
<p>Please see the documentation of the function <code>SET_WALLET</code> on the use of an Oracle wallet, which is required for accessing HTTPS Web servers.</p>
<p>Unless response error check is turned on, this function does not raise an exception when a 4xx or 5xx response is received from the Web server. Instead, it returns the formatted error message from the Web server:</p>
<pre>
&lt;HTML&gt; 
&lt;HEAD&gt; 
&lt;TITLE&gt;Error Message&lt;/TITLE&gt; 
&lt;/HEAD&gt; 
&lt;BODY&gt; 
&lt;H1&gt;Fatal Error 500&lt;/H1&gt; 
Can't Access Document:  http://home.nothing.comm. 
&lt;P&gt; 
&lt;B&gt;Reason:&lt;/B&gt; Can't locate remote host:  home.nothing.comm. 
&lt;P&gt; 
&lt;P&gt;&lt;HR&gt; 
&lt;ADDRESS&gt;&lt;A HREF="http://www.w3.org"&gt; 
CERN-HTTPD3.0A&lt;/A&gt;&lt;/ADDRESS&gt; 
&lt;/BODY&gt; 
&lt;/HTML&gt;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16945"></a>Examples</p>
<pre>
SET SERVEROUTPUT ON 

DECLARE 
   x   UTL_HTTP.HTML_PIECES; 
   len PLS_INTEGER; 
BEGIN 
   x := UTL_HTTP.REQUEST_PIECES('http://www.oracle.com/', 100); 
   DBMS_OUTPUT.PUT_LINE(x.count || ' pieces were retrieved.'); 
   DBMS_OUTPUT.PUT_LINE('with total length '); 
   IF x.count &lt; 1 THEN 
      DBMS_OUTPUT.PUT_LINE('0'); 
  ELSE 
   len := 0; 
   FOR i in 1..x.count LOOP 
      len := len + length(x(i)); 
   END LOOP; 
   DBMS_OUTPUT.PUT_LINE(len); 
  END IF; 
END; 
/ 
-- Output 
Statement processed. 
4 pieces were retrieved. 
with total length 
7687 
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71080" class="refsect2"><a id="i1027083"></a>
<hr />
<h3 class="refsect2"><a id="sthref16946"></a>SET_AUTHENTICATION Procedure</h3>
<p>This procedure sets HTTP authentication information in the HTTP request header. The Web server needs this information to authorize the request.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16947"></a>Syntax</p>
<pre>
UTL_HTTP.SET_AUTHENTICATION(
   r         IN OUT NOCOPY req,
   username  IN VARCHAR2,
   password  IN VARCHAR2,
   scheme    IN VARCHAR2 DEFAULT 'Basic',
   for_proxy IN BOOLEAN  DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16948"></a>Parameters</p>
<div id="ARPLS71081" class="tblformal">
<p class="titleintable"><a id="sthref16949"></a><a id="sthref16950"></a>Table 225-47 SET_AUTHENTICATION Procedure Parameters</p>
<table class="cellalignment1229" title="SET_AUTHENTICATION Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_AUTHENTICATION subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t96">Parameter</th>
<th class="cellalignment1227" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t96" headers="r1c1-t96">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t96 r1c2-t96">
<p>HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t96" headers="r1c1-t96">
<p><code>username</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t96 r1c2-t96">
<p>Username for the HTTP authentication</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t96" headers="r1c1-t96">
<p><code>password</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t96 r1c2-t96">
<p>Password for the HTTP authentication</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t96" headers="r1c1-t96">
<p><code>scheme</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t96 r1c2-t96">
<p>HTTP authentication scheme. Either <code>Basic</code> for the HTTP basic or <code>AWS</code> for Amazon S3 authentication scheme. Default is basic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t96" headers="r1c1-t96">
<p><code>for_proxy</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t96 r1c2-t96">
<p>Identifies if the HTTP authentication information is for access to the HTTP proxy server instead of the Web server. Default is <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16951"></a>Usage Notes</p>
<p>The supported authentication schemes are HTTP basic and Amazon S3 authentication.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71082" class="refsect2"><a id="BHAHDFJJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref16952"></a>SET_AUTHENTICATION_FROM_WALLET Procedure</h3>
<p>This procedure sets the HTTP authentication information in the HTTP request header needed for the request to be authorized by the Web server using the username and password credential stored in the Oracle wallet.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#BHADHFBJ">External Password Store</a> on , and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16953"></a>Syntax</p>
<pre>
UTL_HTTP.SET_AUTHENTICATION_FROM_WALLET(
   r         IN OUT NOCOPY req,
   alias     IN VARCHAR2,
   scheme    IN VARCHAR2 DEFAULT 'Basic',
   for_proxy IN BOOLEAN  DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16954"></a>Parameters</p>
<div id="ARPLS71083" class="tblformal">
<p class="titleintable"><a id="sthref16955"></a><a id="sthref16956"></a>Table 225-48 SET_AUTHENTICATION_FROM_WALLET Procedure Parameters</p>
<table class="cellalignment1229" title="SET_AUTHENTICATION_FROM_WALLET Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SSET_AUTHENTICATION_FROM_WALLET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t98">Parameter</th>
<th class="cellalignment1227" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t98" headers="r1c1-t98">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t98 r1c2-t98">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t98" headers="r1c1-t98">
<p><code>alias</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t98 r1c2-t98">
<p>Alias to identify and retrieve the username and password credential stored in the Oracle wallet</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t98" headers="r1c1-t98">
<p><code>scheme</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t98 r1c2-t98">
<p>HTTP authentication scheme. Either <code>Basic</code> for the HTTP basic or <code>AWS</code> for Amazon S3 authentication scheme. Default is basic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t98" headers="r1c1-t98">
<p><code>for_proxy</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t98 r1c2-t98">
<p>Identifies if the HTTP authentication information is for access to the HTTP proxy server instead of the Web server. Default is <code>FALSE</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16957"></a>Usage Notes</p>
<ul>
<li>
<p>To use the password credentials in a wallet, the <code>UTL_HTTP</code> user must have the <code>use-passwords</code> privilege on the wallet.</p>
</li>
<li>
<p>The supported authentication schemes are HTTP basic and Amazon S3 authentication schemes.</p>
</li>
</ul>
</div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16958"></a>Examples</p>
<p class="subhead2"><a id="ARPLS71084"></a>Creating a wallet and entering username and password in the wallet</p>
<pre>
&gt; mkstore -wrl /oracle/wallets/test_wallet -create
Enter password: ******
Enter password again: ******
&gt; mkstore &ndash;wrl /oracle/wallets/test_wallet &ndash;createCredential hr-access jsmith 
Your secret/Password is missing in the command line
Enter your secret/Password: ****
Re-enter your secret/Password: ****
Enter wallet password: ******
</pre>
<p class="subhead2"><a id="ARPLS71085"></a>Granting the use-passwords privilege on the wallet to a user by the database administrator</p>
<pre>
BEGIN
  DBMS_NETWORK_ACL_ADMIN.CREATE_ACL(
    acl         =&gt; 'wallet-acl.xml', 
    description =&gt; 'Wallet ACL',
    principal   =&gt; 'SCOTT',
    is_grant    =&gt; TRUE,
    privilege   =&gt; 'use-passwords');
  DBMS_NETWORK_ACL_ADMIN.ASSIGN_WALLET_acl(
      acl          =&gt; 'wallet-acl.xml', 
      wallet_path  =&gt; 'file: /oracle/wallets/test_wallet');
END;
</pre>
<p class="subhead2"><a id="ARPLS71086"></a>Using username and password from the wallet</p>
<pre>
DECLARE
  req  UTL_HTTP.req;
BEGIN
  UTL_HTTP.SET_WALLET(path =&gt; 'file:/oracle/wallets/test_wallet');
  req := UTL_HTTP.BEGIN_REQUEST(&hellip;);
  UTL_HTTP.SET_AUTHENTICATION_FROM_WALLET(req, 'hr-access');
  &hellip;
END;
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71087" class="refsect2"><a id="i1027267"></a>
<hr />
<h3 class="refsect2"><a id="sthref16959"></a><a id="sthref16960"></a>SET_BODY_CHARSET Procedures</h3>
<p>This procedure is overloaded. The description of different functionality is located alongside the syntax declarations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1015275">HTTP Responses</a> and <a href="#i1013097">HTTP Responses Subprograms</a></p>
</li>
<li>
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16961"></a>Syntax</p>
<p>Sets the default character set of the body of all future HTTP requests when the media type is <code>text</code> and the character set is not specified in the <code>Content-Type</code> header. Following the HTTP protocol standard specification, if the media type of a request or a response is <code>text</code>, but the character set information is missing in the <code>Content-Type</code> header, the character set of the request or response body should default to <code>ISO-8859-1</code>. A response created for a request inherits the default body character set of the request instead of the body character set of the current session. The default body character set is ISO-8859-1 in a database user session. The default body character set setting affects only future requests and has no effect on existing requests. After a request is created, the body character set can be changed by using the other <code>SET_BODY_CHARSET</code> procedure that operates on a request:</p>
<pre>
UTL_HTTP.SET_BODY_CHARSET (
   charset  IN VARCHAR2 DEFAULT NULL);
</pre>
<p>Sets the character set of the request body when the media type is <code>text</code> but the character set is not specified in the <code>Content-Type</code> header. According to the HTTP protocol standard specification, if the media type of a request or a response is "text" but the character set information is missing in the <code>Content-Type</code> header, the character set of the request or response body should default to "<code>ISO-8859-1</code>". Use this procedure to change the default body character set a request inherits from the session default setting:</p>
<pre>
UTL_HTTP.SET_BODY_CHARSET(
   r        IN OUT NOCOPY req,
   charset  IN VARCHAR2 DEFAULT NULL);
</pre>
<p>Sets the character set of the response body when the media type is "text" but the character set is not specified in the <code>Content-Type</code> header. For each the HTTP protocol standard specification, if the media type of a request or a response is "text" but the character set information is missing in the <code>Content-Type</code> header, the character set of the request or response body should default to "ISO-8859-1". Use this procedure to change the default body character set a response inherits from the request:</p>
<pre>
UTL_HTTP.SET_BODY_CHARSET(
   r        IN OUT NOCOPY resp,
   charset  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16962"></a>Parameters</p>
<div id="ARPLS71088" class="tblformal">
<p class="titleintable"><a id="sthref16963"></a><a id="sthref16964"></a>Table 225-49 SET_BODY_CHARSET Procedure Parameters</p>
<table class="cellalignment1229" title="SET_BODY_CHARSET Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_BODY_CHARSET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t100">Parameter</th>
<th class="cellalignment1227" id="r1c2-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t100" headers="r1c1-t100">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t100 r1c2-t100">
<p>The HTTP response.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t100" headers="r1c1-t100">
<p><code>charset</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t100 r1c2-t100">
<p>The default character set of the response body. The character set can be in Oracle or Internet Assigned Numbers Authority (IANA) naming convention. If <code>charset</code> is <code>NULL</code>, the database character set is assumed.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71089" class="refsect2"><a id="i1027321"></a>
<hr />
<h3 class="refsect2"><a id="sthref16965"></a>SET_COOKIE_SUPPORT Procedures</h3>
<p>This procedure is overloaded. The description of different functionality is located alongside the syntax declarations.</p>
<p>This procedure</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1014759">HTTP Requests</a> and<a href="#i1013096">HTTP Requests Subprograms</a></p>
</li>
<li>
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16966"></a>Syntax</p>
<p>Enables or disables support for the HTTP cookies in the request. Use this procedure to change the cookie support setting a request inherits from the session default setting:</p>
<pre>
UTL_HTTP.SET_COOKIE_SUPPORT(
   r       IN OUT NOCOPY REQ,
   enable  IN BOOLEAN DEFAULT TRUE);
</pre>
<p>Sets whether or not future HTTP requests will support HTTP cookies, and the maximum number of cookies maintained in the current database user session:</p>
<pre>
UTL_HTTP.SET_COOKIE_SUPPORT (
   enable       IN BOOLEAN,
   max_cookies  IN PLS_INTEGER DEFAULT 300,
   max_cookies_per_site  IN PLS_INTEGER DEFAULT 20);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16967"></a>Parameters</p>
<div id="ARPLS71090" class="tblformal">
<p class="titleintable"><a id="sthref16968"></a><a id="sthref16969"></a>Table 225-50 SET_COOKIE_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="SET_COOKIE_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_COOKIE_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t102">Parameter</th>
<th class="cellalignment1227" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t102" headers="r1c1-t102">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t102 r1c2-t102">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t102" headers="r1c1-t102">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t102 r1c2-t102">
<p>Set enable to <code>TRUE</code> to enable HTTP cookie support; <code>FALSE</code> to disable</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t102" headers="r1c1-t102">
<p><code>max_cookies</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t102 r1c2-t102">
<p>Sets the maximum total number of cookies maintained in the current session</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t102" headers="r1c1-t102">
<p><code>max_cookies_per_site</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t102 r1c2-t102">
<p>Sets the maximum number of cookies maintained in the current session for each Web site</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16970"></a>Usage Notes</p>
<p>If cookie support is enabled for an HTTP request, all cookies saved in the current session and applicable to the request are returned to the Web server in the request in accordance with HTTP cookie specification standards. Cookies set in the response to the request are saved in the current session for return to the Web server in the subsequent requests if cookie support is enabled for those requests. If the cookie support is disabled for an HTTP request, no cookies are returned to the Web server in the request and the cookies set in the response to the request are not saved in the current session, although the <code>Set-Cookie</code> HTTP headers can still be retrieved from the response.</p>
<p>Cookie support is enabled by default for all HTTP requests in a database user session. The default setting of the cookie support (enabled versus disabled) affects only the future requests and has no effect on the existing ones. After your request is created, the cookie support setting may be changed by using the other <code>SET_COOKIE_SUPPORT</code> procedure that operates on a request.</p>
<p>The default maximum number of cookies saved in the current session is 20 for each site and 300 total.</p>
<p>If you lower the maximum total number of cookies or the maximum number of cookies for each Web site, the oldest cookies will be purged first to reduce the number of cookies to the lowered maximum. HTTP cookies saved in the current session last for the duration of the database session only; there is no persistent storage for the cookies. Cookies saved in the current session are not cleared if you disable cookie support.</p>
<p>See <a href="#CHDBIGIF">"Examples"</a> for how to use <code>GET_COOKIES</code> and <code>ADD_COOKIES</code> to retrieve, save, and restore cookies.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71091" class="refsect2"><a id="i1027452"></a>
<hr />
<h3 class="refsect2"><a id="sthref16971"></a>SET_DETAILED_EXCP_SUPPORT Procedure</h3>
<p>This procedure sets the <code>UTL_HTTP</code> package to raise a detailed exception. By default, <code>UTL_HTTP</code> raises the <code>request_failed</code> exception when an HTTP request fails. Use <code>GET_DETAILED_SQLCODE</code> and <code>GET_DETAILED_SQLEERM</code> for more detailed information about the error.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16972"></a>Syntax</p>
<pre>
UTL_HTTP.SET_DETAILED_EXCP_SUPPORT (
   enable  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16973"></a>Parameters</p>
<div id="ARPLS71092" class="tblformal">
<p class="titleintable"><a id="sthref16974"></a><a id="sthref16975"></a>Table 225-51 SET_DETAILED_EXCP_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="SET_DETAILED_EXCP_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_DETAILED_EXCP_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t104">Parameter</th>
<th class="cellalignment1227" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t104" headers="r1c1-t104">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t104 r1c2-t104">
<p>Asks <code>UTL_HTTP</code> to raise a detailed exception directly if set to <code>TRUE</code>; otherwise <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71093" class="refsect2"><a id="i1027499"></a>
<hr />
<h3 class="refsect2"><a id="sthref16976"></a>SET_FOLLOW_REDIRECT Procedures</h3>
<p>This procedure sets the maximum number of times <code>UTL_HTTP</code> follows the HTTP redirect instruction in the HTTP response to this request, or future requests, in the <code>GET_RESPONSE</code> function.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></p>
</li>
<li>
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16977"></a>Syntax</p>
<p>Use this procedure to set the maximum number of redirections:</p>
<pre>
UTL_HTTP.SET_FOLLOW_REDIRECT (
   max_redirects  IN PLS_INTEGER DEFAULT 3);
</pre>
<p>Use this procedure to change the maximum number of redirections a request inherits from the session default setting:</p>
<pre>
UTL_HTTP.SET_FOLLOW_REDIRECT(
   r              IN OUT NOCOPY req,
   max_redirects  IN PLS_INTEGER DEFAULT 3);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16978"></a>Parameters</p>
<div id="ARPLS71094" class="tblformal">
<p class="titleintable"><a id="sthref16979"></a><a id="sthref16980"></a>Table 225-52 SET_FOLLOW_REDIRECT Procedure Parameters</p>
<table class="cellalignment1229" title="SET_FOLLOW_REDIRECT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_FOLLOW_DIRECT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t106">Parameter</th>
<th class="cellalignment1227" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t106" headers="r1c1-t106">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t106 r1c2-t106">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t106" headers="r1c1-t106">
<p><code>max_redirects</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t106 r1c2-t106">
<p>The maximum number of redirects. Set to zero to disable redirects.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16981"></a>Usage Notes</p>
<p>If <code>max_redirects</code> is set to a positive number, the <a href="#BHAIBAHA">GET_RESPONSE Function</a> will automatically follow the redirected URL for the HTTP response status code 301, 302, and 307 for the HTTP HEAD and GET methods, and 303 for all HTTP methods, and retry the HTTP request (the request method will be changed to HTTP GET for the status code 303) at the new location. It follows the redirection until the final, non-redirect location is reached, or an error occurs, or the maximum number of redirections has been reached (to prevent an infinite loop). The URL and method fields in the <code>REQ</code> record will be updated to the last redirected URL and the method used to access the URL. Set the maximum number of redirects to zero to disable automatic redirection.</p>
<p>While it is set not to follow redirect automatically in the current session, it is possible to specify individual HTTP requests to follow redirect instructions the function <code>FOLLOW_REDIRECT</code> and vice versa.</p>
<p>The default maximum number of redirections in a database user session is 3. The default value affects only future requests and has no effect on existing requests.</p>
<p><code>The SET_FOLLOW_REDIRECT</code> procedure must be called before <code>GET_RESPONSE</code> for any redirection to take effect.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71095" class="refsect2"><a id="i1027608"></a>
<hr />
<h3 class="refsect2"><a id="sthref16982"></a>SET_HEADER Procedure</h3>
<p>This procedure sets an HTTP request header. The request header is sent to the Web server as soon as it is set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16983"></a>Syntax</p>
<pre>
UTL_HTTP.SET_HEADER (
   r      IN OUT NOCOPY req,
   name   IN VARCHAR2,
   value  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16984"></a>Parameters</p>
<div id="ARPLS71096" class="tblformal">
<p class="titleintable"><a id="sthref16985"></a><a id="sthref16986"></a>Table 225-53 SET_HEADER Procedure Parameters</p>
<table class="cellalignment1229" title="SET_HEADER Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_HEADER subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t108">Parameter</th>
<th class="cellalignment1227" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t108" headers="r1c1-t108">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t108 r1c2-t108">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t108" headers="r1c1-t108">
<p><code>name</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t108 r1c2-t108">
<p>The name of the HTTP request header</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t108" headers="r1c1-t108">
<p><code>value</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t108 r1c2-t108">
<p>The value of the HTTP request header</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16987"></a>Usage Notes</p>
<p>Multiple HTTP headers with the same name are allowed in the HTTP protocol standard. Therefore, setting a header does not replace a prior header with the same name.</p>
<p>If the request is made using HTTP 1.1, <code>UTL_HTTP</code> sets the Host header automatically for you.</p>
<p>When you set the <code>Content-Type</code> header with this procedure, <code>UTL_HTTP</code> looks for the character set information in the header value. If the character set information is present, it is set as the character set of the request body. It can be overridden later by using the <code>SET_BODY_CHARSET</code> procedure.</p>
<p>When you set the Transfer-Encoding header with the value <code>chunked,</code> <code>UTL_HTTP</code> automatically encodes the request body written by the <code>WRITE_TEXT, WRITE_LINE</code> and <code>WRITE_RAW</code> <code>procedures.</code> Note that some HTTP-1.1-based Web servers or CGI programs do not support or accept the request body encoding in the HTTP 1.1 chunked transfer-encoding format.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71097" class="refsect2"><a id="i1027673"></a>
<hr />
<h3 class="refsect2"><a id="sthref16988"></a>SET_PERSISTENT_CONN_SUPPORT Procedure</h3>
<p>This procedure is overloaded. The description of different functionality is located alongside the syntax declarations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16989"></a>Syntax</p>
<p>Sets whether future HTTP requests should support the HTTP 1.1 persistent connection or not, and the maximum numbers of persistent connections to be maintained in the current database user session.</p>
<pre>
UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(
   enable      IN BOOLEAN DEFAULT FALSE,
   max_conns   IN PLS_INTEGER DEFAULT 0);
</pre>
<p>Enables or disables support for the HTTP 1.1 persistent-connection in the request.</p>
<pre>
UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(
   r           IN OUT NOCOPY req,
   enable      IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16990"></a>Parameters</p>
<div id="ARPLS71098" class="tblformal">
<p class="titleintable"><a id="sthref16991"></a><a id="sthref16992"></a>Table 225-54 SET_PERSISTENT_CONN_SUPPORT Procedure Parameters</p>
<table class="cellalignment1229" title="SET_PERSISTENT_CONN_SUPPORT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t110">Parameter</th>
<th class="cellalignment1227" id="r1c2-t110">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t110" headers="r1c1-t110">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t110 r1c2-t110">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t110" headers="r1c1-t110">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t110 r1c2-t110">
<p>TRUE to keep the network connection persistent. <code>FALSE</code> otherwise.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16993"></a>Usage Notes</p>
<p>If the persistent-connection support is enabled for an HTTP request, the package will keep the network connections to a Web server or the proxy server open in the package after the request is completed properly for a subsequent request to the same server to reuse for each HTTP 1.1 protocol specification. With the persistent connection support, subsequent HTTP requests may be completed faster because the network connection latency is avoided. If the persistent-connection support is disabled for a request, the package will always send the HTTP header "Connection: close" automatically in the HTTP request and close the network connection when the request is completed. This setting has no effect on HTTP requests that follows HTTP 1.0 protocol, for which the network connections will always be closed after the requests are completed.</p>
<p>When a request is being made, the package attempts to reuse an existing persistent connection to the target Web server (or proxy server) if one is available. If none is available, a new network connection will be initiated. The persistent-connection support setting for a request affects only whether the network connection should be closed after a request completes.</p>
<p>Use this procedure to change the persistent-connection support setting a request inherits from the session default setting.</p>
<p>Users should note that while the use of persistent connections in <code>UTL_HTTP</code> may reduce the time it takes to fetch multiple Web pages from the same server, it consumes precious system resources (network connections) in the database server. Also, excessive use of persistent connections may reduce the scalability of the database server when too many network connections are kept open in the database server. Network connections should be kept open only if they will be used immediately by subsequent requests and should be closed immediately when they are no longer needed. Set the default persistent connection support as disabled in the session, and enable persistent connection in individual HTTP requests as shown below.</p>
</div>
<!-- class="refsubsect" -->
<p>The default value of the maximum number of persistent connections in a database session is zero. To truly enable persistent connections, you must also set the maximum number of persistent connections to a positive value or no connections will be kept persistent.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16994"></a>Examples</p>
<p class="subhead1"><a id="sthref16995"></a>Using SET_PERSISTENT_CONN_SUPPORT in http requests at the session level, showing the active persistent connection after each request</p>
<pre>
DECLARE
  pieces utl_http.html_pieces;
  conns  utl_http.connection_table;
BEGIN
 
  -- Turns on persistent connection support for the request_pieces call.
  utl_http.set_persistent_conn_support(true, 1);
 
  FOR i IN 1..10 LOOP
 
    pieces := utl_http.request_pieces('http://www.example.com/');
 
    -- Shows the active persistent connection
    utl_http.get_persistent_conns(conns);
    FOR j IN 1..conns.count LOOP
       dbms_output.put_line('Persistent connection '||j||': '||conns(j).host||':'||conns(j).port);
    END LOOP;
 
  END LOOP;
 
 
  -- Turns off persistent connection support. Set active max persistent connection to 0 to close all active connections.
  utl_http.set_persistent_conn_support(false, 0);
 
END;
/
</pre>
<p class="subhead1"><a id="sthref16996"></a>Using SET_PERSISTENT_CONN_SUPPORT in HTTP requets showing how to use persistent connection individually in each request to fetch multiple URLs at the same host</p>
<pre>
DECLARE
-- Table to store the URLs
TYPE vc2_table IS TABLE OF VARCHAR2(256) INDEX BY BINARY_INTEGER;
paths VC2_TABLE;

PROCEDURE fetch_pages(paths IN vc2_table) AS
  req  UTL_HTTP.REQ;
  resp UTL_HTTP.RESP;
  data VARCHAR2(1024);

BEGIN

  -- Set the proxy server
  UTL_HTTP.SET_PROXY('www-proxy.us.oracle.com:80', '');

  FOR i IN 1..paths.count LOOP

    req := UTL_HTTP.BEGIN_REQUEST(paths(i));

    -- Use persistent connections except for the last request
    IF (i &lt; paths.count) THEN
      -- Use a persistent connection for the current request
      UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(req, TRUE);
    END IF;

    resp := UTL_HTTP.GET_RESPONSE(req);

    -- Display the results of the response
    DBMS_OUTPUT.PUT_LINE('-');
    DBMS_OUTPUT.PUT_LINE('URL: ' || paths(i));
    DBMS_OUTPUT.PUT_LINE('HTTP Response Status Code:   ' || resp.status_code);
    DBMS_OUTPUT.PUT_LINE('HTTP Response Reason Phrase: ' || resp.reason_phrase);
    DBMS_OUTPUT.PUT_LINE('HTTP Response Version:       ' || resp.http_version);

    BEGIN
      LOOP
        UTL_HTTP.READ_TEXT(resp, data);
        -- do something with the data
      END LOOP;
    EXCEPTION
      WHEN UTL_HTTP.END_OF_BODY THEN
        NULL;
    END;
    UTL_HTTP.END_RESPONSE(resp);
  END LOOP;
END;

BEGIN
-- Set a maximum of 1 persistent connection, but start with persistent connections 
-- off
   UTL_HTTP.SET_PERSISTENT_CONN_SUPPORT(FALSE, 1);

   -- Create a list of URLs
   paths(1) := 'http://www.oracle.com/technetwork/index.html';
   paths(2) := 'http://www.oracle.com/us/products/index.html';

   fetch_pages(paths);
 END;
/
</pre></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71100" class="refsect2"><a id="i998249"></a>
<hr />
<h3 class="refsect2"><a id="sthref16997"></a>SET_PROXY Procedure</h3>
<p>This procedure sets the proxy to be used for requests of the HTTP or other protocols, excluding those for hosts that belong to the domain specified in <code>no_proxy_domains.no_proxy_domains</code> is a comma-, semi-colon-, or space-separated list of domains or hosts for which HTTP requests should be sent directly to the destination HTTP server instead of going through a proxy server.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16998"></a>Syntax</p>
<pre>
UTL_HTTP.SET_PROXY (
   proxy             IN VARCHAR2,
   no_proxy_domains  IN VARCHAR2);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref16999"></a>Parameters</p>
<div id="ARPLS71101" class="tblformal">
<p class="titleintable"><a id="sthref17000"></a><a id="sthref17001"></a>Table 225-55 SET_PROXY Procedure Parameters</p>
<table class="cellalignment1229" title="SET_PROXY Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_PROXY subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t112">Parameter</th>
<th class="cellalignment1227" id="r1c2-t112">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t112" headers="r1c1-t112">
<p><code>proxy</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t112 r1c2-t112">
<p>The proxy (host and an optional port number) to be used by the <code>UTL_HTTP</code> package</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t112" headers="r1c1-t112">
<p><code>no_proxy_domains</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t112 r1c2-t112">
<p>The list of hosts and domains for which no proxy should be used for all requests</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17002"></a>Usage Notes</p>
<p>The proxy may include an optional TCP/IP port number at which the proxy server listens. The syntax is <code>[http://]host[:port][/]</code>, for example, <code>www-proxy.my-company.com:80</code>. If the port is not specified for the proxy, port 80 is assumed.</p>
<p>Optionally, a port number can be specified for each domain or host. If the port number is specified, the no-proxy restriction is only applied to the request at the port of the particular domain or host, for example, <code>corp.my-company.com, eng.my-company.com:80</code>. When <code>no_proxy_domains</code> is <code>NULL</code> and the proxy is set, all requests go through the proxy. When the proxy is not set, <code>UTL_HTTP</code> sends requests to the target Web servers directly.</p>
<p>You can define a username/password for the proxy to be specified in the proxy string. The format is</p>
<pre>
[http://][user[:password]@]host[:port][/]
</pre>
<p>If proxy settings are set when the database server instance is started, the proxy settings in the environment variables <code>http_proxy</code> and <code>no_proxy</code> are assumed. Proxy settings set by this procedure override the initial settings.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71102" class="refsect2"><a id="i998591"></a>
<hr />
<h3 class="refsect2"><a id="sthref17003"></a>SET_RESPONSE_ERROR_CHECK Procedure</h3>
<p>This procedure sets whether or not <code>GET_RESPONSE</code> raises an exception when the Web server returns a status code that indicates an error&mdash;a status code in the 4xx or 5xx ranges. For example, when the requested URL is not found in the destination Web server, a 404 (document not found) response status code is returned.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17004"></a>Syntax</p>
<pre>
UTL_HTTP.SET_RESPONSE_ERROR_CHECK (
   enable  IN BOOLEAN DEFAULT FALSE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17005"></a>Parameters</p>
<div id="ARPLS71103" class="tblformal">
<p class="titleintable"><a id="sthref17006"></a><a id="sthref17007"></a>Table 225-56 SET_RESPONSE_ERROR_CHECK Procedure Parameters</p>
<table class="cellalignment1229" title="SET_RESPONSE_ERROR_CHECK Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_RESPONSE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t114">Parameter</th>
<th class="cellalignment1227" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t114" headers="r1c1-t114">
<p><code>enable</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t114 r1c2-t114">
<p><code>TRUE</code> to check for response errors; otherwise <code>FALSE</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17008"></a>Usage Notes</p>
<p>If the status code indicates an error&mdash;a 4xx or 5xx code&mdash;and this procedure is enabled, <code>GET_RESPONSE</code> will raise the <code>HTTP_CLIENT_ERROR</code> or <code>HTTP_SERVER_ERROR</code> exception. If <code>SET_RESPONSE_ERROR_CHECK</code> is set to <code>FALSE</code>, <code>GET_RESPONSE</code> will not raise an exception when the status code indicates an error.</p>
<p>Response error check is turned off by default.</p>
<p>The <code>GET_RESPONSE</code> function can raise other exceptions when <code>SET_RESPONSE_ERROR_CHECK</code> is set to <code>FALSE</code>.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71104" class="refsect2"><a id="i1027823"></a>
<hr />
<h3 class="refsect2"><a id="sthref17009"></a>SET_TRANSFER_TIMEOUT Procedure</h3>
<p>This procedure sets the default time out value for all future HTTP requests that the <code>UTL_HTTP</code> package should attempt while reading the HTTP response from the Web server or proxy server. This time out value may be used to avoid the PL/SQL programs from being blocked by busy Web servers or heavy network traffic while retrieving Web pages from the Web servers.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17010"></a>Syntax</p>
<pre>
UTL_HTTP.SET_TRANSFER_TIMEOUT (
   timeout  IN PLS_INTEGER DEFAULT 60);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17011"></a>Parameters</p>
<div id="ARPLS71105" class="tblformal">
<p class="titleintable"><a id="sthref17012"></a><a id="sthref17013"></a>Table 225-57 SET_TRANSFER_TIMEOUT Procedure Parameters</p>
<table class="cellalignment1229" title="SET_TRANSFER_TIMEOUT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_TRANSFER_TIMEOUT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t116">Parameter</th>
<th class="cellalignment1227" id="r1c2-t116">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t116" headers="r1c1-t116">
<p><code>timeout</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t116 r1c2-t116">
<p>The network transfer timeout value in seconds.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17014"></a>Usage Notes</p>
<p>The default value of the time out is 60 seconds.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71106" class="refsect2"><a id="i998681"></a>
<hr />
<h3 class="refsect2"><a id="sthref17015"></a>SET_WALLET Procedure</h3>
<p>This procedure sets the Oracle wallet used for all HTTP requests over Secured Socket Layer (SSL), namely HTTPS. When the <code>UTL_HTTP</code> package communicates with an HTTP server over SSL, the HTTP server presents its digital certificate, which is signed by a certificate authority, to the <code>UTL_HTTP</code> package for identification purpose. The Oracle wallet contains the list of certificate authorities that are trusted by the user of the <code>UTL_HTTP</code> package. An Oracle wallet is required to make an HTTPS request.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a href="#i1013541">Session Settings</a> and <a href="#i1013095">Session Settings Subprograms</a></p>
</li>
<li>
<p><a class="olink DBSEG40012" href="../../network.112/e36292/authorization.htm#DBSEG40012">"Managing Fine-Grained Access in PL/SQL Network Utility Packages"</a> in the <span class="italic">Oracle Database Security Guide</span></p>
</li>
</ul>
</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17016"></a>Syntax</p>
<pre>
UTL_HTTP.SET_WALLET (
   path      IN VARCHAR2,
   password  IN VARCHAR2 DEFAULT NULL);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17017"></a>Parameters</p>
<div id="ARPLS71107" class="tblformal">
<p class="titleintable"><a id="sthref17018"></a><a id="sthref17019"></a>Table 225-58 SET_WALLET Procedure Parameters</p>
<table class="cellalignment1229" title="SET_WALLET Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.SET_WALLET subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t118">Parameter</th>
<th class="cellalignment1227" id="r1c2-t118">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t118" headers="r1c1-t118">
<p><code>path</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t118 r1c2-t118">
<p>The directory path that contains the Oracle wallet. The format is <code>file:</code><code><span class="codeinlineitalic">directory-path</span></code>.</p>
<p>The format of wallet_path on a PC is, for example, f<code>ile:c:\WINNT\Profiles\</code><code><span class="codeinlineitalic">username</span></code><code>\WALLETS</code>, and in Unix is, for example, <code>file:/home/</code><code><span class="codeinlineitalic">username</span></code><code>/wallets</code>. When the <code>UTL_HTTP</code> package is executed in the Oracle database server, the wallet is accessed from the database server. Therefore, the wallet path must be accessible from the database server.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t118" headers="r1c1-t118">
<p><code>password</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t118 r1c2-t118">
<p>The password needed to open the wallet. If the wallet is auto-login enabled, the password may be omitted and should be set to <code>NULL</code>. See <a class="olink ASOAG9524" href="../../network.112/e40393/asotrans.htm#ASOAG9524">"Using Wallets with Automatic Login Enabled"</a> in the <span class="italic">Oracle Database Advanced Security Administrator's Guide</span> for information about using Oracle Wallet Manager and the <code>ORAPKI</code> utility to create an auto-login wallet</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17020"></a>Usage Notes</p>
<p>To set up an Oracle wallet, use the Oracle Wallet Manager to create a wallet. In order for the HTTPS request to succeed, the certificate authority that signs the certificate of the remote HTTPS Web server must be a trust point set in the wallet.</p>
<p>When a wallet is created, it is populated with a set of well-known certificate authorities as trust points. If the certificate authority that signs the certificate of the remote HTTPS Web server is not among the trust points, or the certificate authority has new root certificates, you should obtain the root certificate of that certificate authority and install it as a trust point in the wallet using Oracle Wallet Manager</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ASOAG" href="../../network.112/e40393/toc.htm"><span class="italic">Oracle Database Advanced Security Administrator's Guide</span></a> for more information on Wallet Manager</div>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71108" class="refsect2"><a id="CHDFFGAG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17021"></a>WRITE_LINE Procedure</h3>
<p>This procedure writes a text line in the HTTP request body and ends the line with new-line characters (CRLF as defined in <code>UTL_TCP</code>). As soon as some data is sent as the HTTP request body, the HTTP request headers section is completed. Text data is automatically converted from the database character set to the request body character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17022"></a>Syntax</p>
<pre>
UTL_HTTP.WRITE_LINE(
   r     IN OUT NOCOPY req,
   data  IN VARCHAR2 CHARACTER SET ANY_CS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17023"></a>Parameters</p>
<div id="ARPLS71109" class="tblformal">
<p class="titleintable"><a id="sthref17024"></a><a id="sthref17025"></a>Table 225-59 WRITE_LINE Procedure Parameters</p>
<table class="cellalignment1229" title="WRITE_LINE Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.WRITE_LINE subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t121">Parameter</th>
<th class="cellalignment1227" id="r1c2-t121">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t121" headers="r1c1-t121">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t121 r1c2-t121">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t121" headers="r1c1-t121">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t121 r1c2-t121">
<p>The text line to send in the HTTP request body</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17026"></a>Usage Notes</p>
<p>An HTTP client must always let the remote Web server know the length of the request body it is sending. If the amount of data is known beforehand, you can set the <code>Content-Length</code> header in the request, where the length of the content is measured in bytes instead of characters. If the length of the request body is not known beforehand, you can send the request body using the HTTP 1.1 chunked transfer-encoding format. The request body is sent in chunks, where the length of each chunk is sent before the chunk is sent. The <code>UTL_HTTP</code> package performs chunked transfer-encoding on the request body transparently when the Transfer-Encoding: chunked header is set. Note that some HTTP-1.1-based Web servers or CGI programs do not support or accept the request body encoding in the HTTP 1.1 chunked transfer-encoding format. See the <code>SET_HEADER</code> procedure for details.</p>
<p>If you send the <code>Content-Length</code> header, you should note that the length specified in the header should be the byte-length of the textual request body after it is converted from the database character set to the request body character set. When either one of the two character sets is a multibyte character set, the precise byte-length of the request body in the request body character set cannot be known beforehand. In this case, you can perform the character set conversion explicitly, determine the byte-length of the results, send the <code>Content-Length</code> header, and the results using the <code>WRITE_RAW</code> procedure to avoid the automatic character set conversion. Or, if the remove Web server or CGI programs allow, you can send the request body using the HTTP 1.1 chunked transfer-encoding format, where <code>UTL_HTTP</code> handles the length of the chunks transparently.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71110" class="refsect2"><a id="i999119"></a>
<hr />
<h3 class="refsect2"><a id="sthref17027"></a>WRITE_RAW Procedure</h3>
<p>This procedure writes some binary data in the HTTP request body. As soon as some data is sent as the HTTP request body, the HTTP request headers section is completed.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17028"></a>Syntax</p>
<pre>
UTL_HTTP.WRITE_RAW(
   r     IN OUT NOCOPY REQ,
   data  IN            RAW);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17029"></a>Parameters</p>
<div id="ARPLS71111" class="tblformal">
<p class="titleintable"><a id="sthref17030"></a><a id="sthref17031"></a>Table 225-60 WRITE_RAW Procedure Parameters</p>
<table class="cellalignment1229" title="WRITE_RAW Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.WRITE_RAW subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t123">Parameter</th>
<th class="cellalignment1227" id="r1c2-t123">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t123" headers="r1c1-t123">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t123 r1c2-t123">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t123" headers="r1c1-t123">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t123 r1c2-t123">
<p>The binary data to send in the HTTP request body</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17032"></a>Usage Notes</p>
<p>An HTTP client must always let the remote Web server know the length of the request body it is sending. If the amount of data is known beforehand, you can set the <code>Content-Length</code> header in the request, where the length of the content is measured in bytes instead of characters. If the length of the request body is not known beforehand, you can send the request body using the HTTP 1.1 chunked transfer-encoding format. The request body is sent in chunks, where the length of each chunk is sent before the chunk is sent. <code>UTL_HTTP</code> performs chunked transfer-encoding on the request body transparently when the <code>Transfer-Encoding:chunked</code> header is set. Note that some HTTP-1.1-based Web servers or CGI programs do not support or accept the request body encoding in the HTTP 1.1 chunked transfer-encoding format. See the <code>SET_HEADER</code> procedure for details.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71112" class="refsect2"><a id="i1027870"></a>
<hr />
<h3 class="refsect2"><a id="sthref17033"></a>WRITE_TEXT Procedure</h3>
<p>This procedure writes some text data in the HTTP request body. As soon as some data is sent as the HTTP request body, the HTTP request headers section is completed. Text data is automatically converted from the database character set to the request body character set.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1014759">HTTP Requests</a> and <a href="#i1013096">HTTP Requests Subprograms</a></div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17034"></a>Syntax</p>
<pre>
UTL_HTTP.WRITE_TEXT(
   r     IN OUT NOCOPY REQ,
   data  IN            VARCHAR2 CHARACTER SET ANY_CS);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17035"></a>Parameters</p>
<div id="ARPLS71113" class="tblformal">
<p class="titleintable"><a id="sthref17036"></a><a id="sthref17037"></a>Table 225-61 WRITE_TEXT Procedure Parameters</p>
<table class="cellalignment1229" title="WRITE_TEXT Procedure Parameters" summary="This table describes the Parameters of the UTL_HTTP.WRITE_TEXT subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t125">Parameter</th>
<th class="cellalignment1227" id="r1c2-t125">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t125" headers="r1c1-t125">
<p><code>r</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t125 r1c2-t125">
<p>The HTTP request</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t125" headers="r1c1-t125">
<p><code>data</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t125 r1c2-t125">
<p>The text data to send in the HTTP request body</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17038"></a>Usage Notes</p>
<p>An HTTP client must always let the remote Web server know the length of the request body it is sending. If the amount of data is known beforehand, you can set the <code>Content-Length</code> header in the request, where the length of the content is measured in bytes instead of characters. If the length of the request body is not known beforehand, you can send the request body using the HTTP 1.1 chunked transfer-encoding format. The request body is sent in chunks, where the length of each chunk is sent before the chunk is sent. <code>UTL_HTTP</code> performs chunked transfer-encoding on the request body transparently when the <code>Transfer-Encoding: chunked</code> header is set. Note that some HTTP-1.1-based Web servers or CGI programs do not support or accept the request body encoding in the HTTP 1.1 chunked transfer-encoding format. See the <code>SET_HEADER</code> procedure for details.</p>
<p>If you send the <code>Content-Length</code> header, you should note that the length specified in the header should be the byte-length of the textual request body after it is converted from the database character set to the request body character set. When either one of the two character sets is a multibyte character set, the precise byte-length of the request body in the request body character set cannot be known beforehand. In this case, you can perform the character set conversion explicitly, determine the byte-length of the results, send the <code>Content-Length</code> header, and the results using the <code>WRITE_RAW</code> procedure to avoid the automatic character set conversion. Or, if the remove Web server or CGI programs allow, you can send the request body using the HTTP 1.1 chunked transfer-encoding format, where <code>UTL_HTTP</code> handles the length of the chunks transparently.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="u_file.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="u_i18n.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
