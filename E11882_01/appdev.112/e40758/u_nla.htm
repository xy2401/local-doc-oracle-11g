<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>UTL_NLA</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 737" />
<meta name="dcterms.created" content="2013-07-19T18:56:8Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database PL/SQL Packages and Types Reference" />
<meta name="dcterms.identifier" content="E40758-03" />
<meta name="dcterms.isVersionOf" content="ARPLS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="u_match.htm" title="Previous" type="text/html" />
<link rel="Next" href="u_raw.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e40758.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">236/265</span> <!-- End Header -->
<div id="ARPLS224" class="chapter"><a id="CIABEFIJ"></a>
<h1 class="chapter"><span class="secnum">232</span> UTL_NLA</h1>
<p>The <code><a id="sthref17279"></a>UTL_NLA</code> package exposes a subset of the BLAS and LAPACK (Version 3.0) operations on vectors and matrices represented as <code>VARRAY</code>s.</p>
<p>This chapter contains the following topics:</p>
<ul>
<li>
<p><a href="#CIACEBCC">Using UTL_NLA</a></p>
<ul>
<li>
<p>Overview</p>
</li>
<li>
<p>Rules and Limits</p>
</li>
<li>
<p>Security Model</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIAGFDIB">Subprogram Groups</a></p>
<ul>
<li>
<p>BLAS Level 1 (Vector-Vector Operations) Subprograms</p>
</li>
<li>
<p>BLAS Level 2 (Matrix-Vector Operations) Subprograms</p>
</li>
<li>
<p>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</p>
</li>
<li>
<p>LAPACK Driver Routines (Linear Equations) Subprograms</p>
</li>
<li>
<p>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</p>
</li>
</ul>
</li>
<li>
<p><a href="#CIAFDJJA">Summary of UTL_NLA Subprograms</a></p>
</li>
</ul>
<div class="refentry"><a id="CIACEBCC"></a>
<hr />
<div id="ARPLS71223" class="refsect1"><!-- infolevel="all" infotype="General" -->
<h2 class="refsect1">Using UTL_NLA</h2>
<p>This section contains topics which relate to using the <code>UTL_NLA</code> package.</p>
<ul>
<li>
<p><a href="#CIAGIDEJ">Overview</a></p>
</li>
<li>
<p><a href="#CIAHIAJI">Rules and Limits</a></p>
</li>
<li>
<p><a href="#CIABFEJH">Security Model</a></p>
</li>
</ul>
<div id="ARPLS71224" class="refsect2"><a id="CIAGIDEJ"></a>
<hr />
<h3 class="refsect2">Overview</h3>
<p>The <code>UTL_NLA</code> package exposes a subset of the BLAS (Basic Linear Algebra Subprograms) and LAPACK (Linear Algebra PACKage )(Version 3.0) operations on vectors and matrices represented as <code>VARRAY</code>s.</p>
<p class="subhead2"><a id="ARPLS71225"></a>Standards</p>
<p>For more information on the BLAS and LAPACK standards see</p>
<br />
<code><a href="http://www.netlib.org/blas/">http://www.netlib.org/blas/</a></code><br />
<code><a href="http://www.netlib.org/lapack/">http://www.netlib.org/lapack/</a></code>
<p class="subhead2"><a id="ARPLS71226"></a>Required Expertise</p>
<p>Users of this package are expected to have a sound grasp of linear algebra in general and of the BLAS and LAPACK libraries in particular.</p>
<p class="subhead2"><a id="ARPLS71227"></a>Implementation</p>
<p>The mapping between BLAS and LAPACK procedures and their corresponding PL/SQL calls is one-to-one.</p>
<ul>
<li>
<p>All BLAS functions have the <code>BLAS_</code> prefix (for example, the <a href="#CIAJHJHD">BLAS_ASUM Functions</a>). The subroutines and functions in BLAS are mapped to PL/SQL procedures and functions, respectively.</p>
</li>
<li>
<p>All LAPACK functions have the <code>LAPACK_</code> prefix (for example, the <a href="#CIABIIEB">LAPACK_GBSV Procedures</a>). The subroutines in LAPACK are mapped to PL/SQL procedures. Procedures that perform the same operation but differ only on the datatype of the arguments have the same overloaded names.</p>
</li>
</ul>
<p>The mapping between BLAS and LAPACK procedure parameters and those of their corresponding PL/SQL subprograms is almost one-to-one.</p>
<ul>
<li>
<p>Also in the PL/SQL interface for LAPACK, all <code>/work/</code> arguments have been removed. The <code>UTL_NLA</code> package manages the allocation and de-allocation of all work areas required by the libraries.</p>
</li>
<li>
<p>A new optional parameter, <code>pack</code>, has been added to the end of each LAPACK procedure that specifies if the matrix has been linearized in the row-major or column-major (default) format.</p>
</li>
</ul>
</div>
<!-- class="refsect2" -->
<div id="ARPLS71228" class="refsect2"><a id="CIAHIAJI"></a>
<hr />
<h3 class="refsect2">Rules and Limits</h3>
<p>Vectors and matrices are stored in <code>VARRAY</code>s with a maximum size of one million entries. Given this restriction, <code>UTL_NLA</code> vectors can be up to one million entries but matrices need to be of size RxC &lt;= 1,000,000.</p>
</div>
<!-- class="refsect2" -->
<div id="ARPLS73299" class="refsect2"><a id="CIABFEJH"></a>
<hr />
<h3 class="refsect2">Security Model</h3>
<p>The <code>UTL_NLA</code> package is owned by user <code>SYS</code> and is installed as part of database installation. Execution privilege on the package is granted to public. The routines in the package are run with invokers' rights (run with the privileges of the current user).</p>
</div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIAGFDIB"></a>
<hr />
<div id="ARPLS71229" class="refsect1">
<h2 class="refsect1">Subprogram Groups</h2>
<ul>
<li>
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</li>
<li>
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</li>
</ul>
<div id="ARPLS71230" class="refsect2"><a id="i1025881"></a>
<hr />
<h3 class="refsect2"><a id="sthref17280"></a>BLAS Level 1 (Vector-Vector Operations) Subprograms</h3>
<div id="ARPLS71231" class="tblformal">
<p class="titleintable"><a id="sthref17281"></a><a id="CIHFJBED"></a>Table 232-1 BLAS Level 1 (Vector-Vector Operations) Subprograms</p>
<table class="cellalignment1229" title=" BLAS Level 1 (Vector-Vector Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t2">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t2">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t2" headers="r1c1-t2">
<p><a href="#CIAJHJHD">BLAS_ASUM Functions</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t2 r1c2-t2">
<p>Computes the sum of the absolute values of the vector components</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t2" headers="r1c1-t2">
<p><a href="#CIAJDJEJ">BLAS_AXPY Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t2 r1c2-t2">
<p>Copies <code>alpha</code>*<code>X</code> + <code>Y</code> into vector <code>Y</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t2" headers="r1c1-t2">
<p><a href="#CIAIGABI">BLAS_COPY Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t2 r1c2-t2">
<p>Copies the contents of vector <code>X</code> to vector <code>Y</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t2" headers="r1c1-t2">
<p><a href="#CIAICFIG">BLAS_DOT Functions</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t2 r1c2-t2">
<p>Returns the dot (scalar) product of two vectors <code>X</code> and <code>Y</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t2" headers="r1c1-t2">
<p><a href="#CIAIGEAJ">BLAS_IAMAX Functions</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t2 r1c2-t2">
<p>Computes the index of the first element of a vector that has the largest absolute value</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t2" headers="r1c1-t2">
<p><a href="#CIAJEIAC">BLAS_NRM2 Functions</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t2 r1c2-t2">
<p>Computes the vector 2-norm (Euclidean norm)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t2" headers="r1c1-t2">
<p><a href="#CIAGCADG">BLAS_ROT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t2 r1c2-t2">
<p>Returns the plane rotation of points</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t2" headers="r1c1-t2">
<p><a href="#CIAFGGDH">BLAS_ROTG Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t2 r1c2-t2">
<p>Returns the Givens rotation of points</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t2" headers="r1c1-t2">
<p><a href="#CIAIBBHJ">BLAS_SCAL Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t2 r1c2-t2">
<p>Scales a vector by a constant</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t2" headers="r1c1-t2">
<p><a href="#CIADBHFG">BLAS_SWAP Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t2 r1c2-t2">
<p>Swaps the contents of two vectors each of size n</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71232" class="refsect2"><a id="CIACEIDA"></a>
<hr />
<h3 class="refsect2"><a id="sthref17282"></a>BLAS Level 2 (Matrix-Vector Operations) Subprograms</h3>
<div id="ARPLS71233" class="tblformal">
<p class="titleintable"><a id="sthref17283"></a><a id="sthref17284"></a>Table 232-2 BLAS Level 2 (Matrix-Vector Operations) Subprograms</p>
<table class="cellalignment1229" title=" BLAS Level 2 (Matrix-Vector Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t3">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t3">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t3" headers="r1c1-t3">
<p><a href="#CIADGCFJ">BLAS_GBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t3 r1c2-t3">
<p>Performs the matrix-vector operation <code>y := alpha*A*x + beta*y</code> or <code>y := alpha*A'*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> band matrix, with <code>kl</code> sub-diagonals and <code>ku</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t3" headers="r1c1-t3">
<p><a href="#CIAFEAFG">BLAS_GEMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t3 r1c2-t3">
<p>Performs the matrix-vector operations <code>y := alpha*A*x + beta*y</code> or <code>y := alpha*A'*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t3" headers="r1c1-t3">
<p><a href="#CIAEIJCI">BLAS_GER Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t3 r1c2-t3">
<p>Performs a rank 1 operation <code>A := alpha*x*y' + A</code> where <code>alpha</code> is a scalar, <code>x</code> is an <code>m</code> element vector, <code>y</code> is an n element vector and <code>A</code> is an <code>m</code> by <code>n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t3" headers="r1c1-t3">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are n element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric band matrix, with <code>k</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t3" headers="r1c1-t3">
<p><a href="#CIAGFAGC">BLAS_SPMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t3" headers="r1c1-t3">
<p><a href="#CIAIECGG">BLAS_SPR Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t3 r1c2-t3">
<p>Performs a symmetric rank 1 operation <code>A := alpha*x*x' + A</code> where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t3" headers="r1c1-t3">
<p><a href="#CIACHFGD">BLAS_SPR2 Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t3 r1c2-t3">
<p>Performs a symmetric rank 2 operation <code>A := alpha*x*y' + alpha*y*x' +A</code> where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t3" headers="r1c1-t3">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are n element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric band matrix, with <code>k</code> super-diagonals</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t3" headers="r1c1-t3">
<p><a href="#CIAEAJDG">BLAS_SYMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t3" headers="r1c1-t3">
<p><a href="#CIAFBJAJ">BLAS_SYR Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t3 r1c2-t3">
<p>Performs a symmetric rank 1 operation <code>A := alpha*x*x' + A</code> where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t3" headers="r1c1-t3">
<p><a href="#CIAHBHJB">BLAS_SYR2 Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t3 r1c2-t3">
<p>Performs a symmetric rank 2 operation <code>A := alpha*x*y' + alpha*y*x' + A</code> where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t3" headers="r1c1-t3">
<p><a href="#CIAFEEGF">BLAS_TBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>x := A*x</code> or <code>A'*x = b</code> where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular band matrix, with <code>(k + 1)</code> diagonals</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t3" headers="r1c1-t3">
<p><a href="#CIACICEE">BLAS_TBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code>A*x = b</code> or <code>A'*x = b</code> where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code>(k + 1)</code> diagonals</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t3" headers="r1c1-t3">
<p><a href="#CIAIFFDD">BLAS_TPMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>x := A*x</code> or <code>x := A'*x</code> where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t3" headers="r1c1-t3">
<p><a href="#CIACJJHC">BLAS_TPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code>A*x = b</code> or <code>A'*x = b</code> where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t3" headers="r1c1-t3">
<p><a href="#CIAHFEBJ">BLAS_TRMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t3 r1c2-t3">
<p>Performs a matrix-vector operation <code>x := A*x</code> or <code>x := A'*x</code> where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t3" headers="r1c1-t3">
<p><a href="#CIABJIEI">BLAS_TRSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t3 r1c2-t3">
<p>Solves one of the systems of equation <code>A*x = b</code> or <code>A'*x = b</code> where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an n by <code>n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71234" class="refsect2"><a id="CIAIJHCF"></a>
<hr />
<h3 class="refsect2"><a id="sthref17285"></a>BLAS Level 3 (Matrix-Matrix Operations) Subprograms</h3>
<div id="ARPLS71235" class="tblformal">
<p class="titleintable"><a id="sthref17286"></a><a id="sthref17287"></a>Table 232-3 BLAS Level 3 (Matrix-Matrix Operations) Subprograms</p>
<table class="cellalignment1229" title=" BLAS Level 3 (Matrix-Matrix Operations) Subprograms" summary="This table lists the DBMS_ADVISOR SQLAccess Advisor subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t4">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t4">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t4" headers="r1c1-t4">
<p><a href="#CIACCFIJ">BLAS_GEMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code>C := alpha*op(A)*op(B) + beta*C</code> where <code>op(X) is one of op(X) = X or op(X) = X'</code> where <code>alpha</code> and <code>beta</code> are scalars, and <code>A</code>, <code>B</code> and <code>C</code> are matrices, with <code>op(A)</code> an <code>m</code> by <code>k</code> matrix, <code>op(B)</code> a <code>k</code> by <code>n</code> matrix and <code>C</code> an <code>m</code> by <code>n</code> matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t4" headers="r1c1-t4">
<p><a href="#CIAHABIJ">BLAS_SYMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code>C := alpha*A*B + beta*C</code> or <code>C := alpha*B*A + beta*C</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>A</code> is a symmetric matrix, and <code>B</code> and <code>C</code> are <code>m</code> by <code>n</code> matrices</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t4" headers="r1c1-t4">
<p><a href="#CIAJFDDD">BLAS_SYR2K Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t4 r1c2-t4">
<p>Performs one of the symmetric rank2 k operations <code>C := alpha*A*B' + alpha*B*A' + beta*C</code> or <code>C := alpha*A'*B + alpha*B'*A + beta*C</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and <code>A</code> and <code>B</code> are <code>n</code> by <code>k</code> matrices in the first case and <code>k</code> by <code>n</code> matrices in the second case</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t4" headers="r1c1-t4">
<p><a href="#CIABCBAG">BLAS_SYRK Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t4 r1c2-t4">
<p>Performs one of the symmetric rank <code>k</code> operations <code>C := alpha*A*A' + beta*C</code> or <code>C := alpha*A'*A + beta*C</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and <code>A</code> is an <code>n</code> by <code>k</code> matrix in the first case and a <code>k</code> by <code>n</code> matrix in the second case</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t4" headers="r1c1-t4">
<p><a href="#CIAEJGDI">BLAS_TRMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code>B := alpha*op(A)*B</code> or <code>B := alpha*B*op(A)</code> where <code>alpha</code> is a scalar, <code>B</code> is an <code>m</code> by <code>n</code> matrix, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix and <code>op(A)</code> is one of two alternatives</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t4" headers="r1c1-t4">
<p><a href="#CIAHHHFD">BLAS_TRSM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t4 r1c2-t4">
<p>Performs one of the matrix-vector operations <code>op(A)*X = alpha*B</code> or <code>X*op(A) = alpha*B</code> where <code>alpha</code> is a scalar, <code>X</code> and <code>B</code> are <code>m</code> by <code>n</code> matrices, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix, <code>op(A)</code> is one of two alternatives. The matrix <code>X</code> is overwritten on <code>B</code></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71236" class="refsect2"><a id="CIAFBCIJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17288"></a>LAPACK Driver Routines (Linear Equations) Subprograms</h3>
<div id="ARPLS71237" class="tblformal">
<p class="titleintable"><a id="sthref17289"></a><a id="sthref17290"></a>Table 232-4 LAPACK Driver Routines (Linear Equations) Subprograms</p>
<table class="cellalignment1229" title=" LAPACK Driver Routines (Linear Equations) Subprograms" summary="This table lists the LAPACK Driver Routines (Linear Equations) subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t5">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t5">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t5" headers="r1c1-t5">
<p><a href="#CIABIIEB">LAPACK_GBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t5" headers="r1c1-t5">
<p><a href="#CIAFDDCG">LAPACK_GESV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t5" headers="r1c1-t5">
<p><a href="#CIAFDEJI">LAPACK_GTSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t5 r1c2-t5">
<p>This procedure solves the equation <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t5" headers="r1c1-t5">
<p><a href="#CIAJHJBC">LAPACK_PBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite band matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t5" headers="r1c1-t5">
<p><a href="#CIAGDCGG">LAPACK_POSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t5" headers="r1c1-t5">
<p><a href="#CIAGICJH">LAPACK_PPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite matrix stored in packed format and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t5" headers="r1c1-t5">
<p><a href="#CIAEJBEG">LAPACK_PTSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t5" headers="r1c1-t5">
<p><a href="#CIAEDCDH">LAPACK_SPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric matrix stored in packed format, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The diagonal pivoting method is used to factor <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t5" headers="r1c1-t5">
<p><a href="#CIADGGFJ">LAPACK_SYSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t5 r1c2-t5">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric matrix, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The diagonal pivoting method is used to factor <code>A</code>.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71238" class="refsect2"><a id="CIAFGFFC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17291"></a>LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</h3>
<div id="ARPLS71239" class="tblformal">
<p class="titleintable"><a id="sthref17292"></a><a id="sthref17293"></a>Table 232-5 LAPACK Driver Routines (LLS and Eigenvalue Problems)</p>
<table class="cellalignment1229" title="LAPACK Driver Routines (LLS and Eigenvalue Problems)" summary="This table lists the LAPACK Driver Routines (LLS and Eigenvalue) subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t6">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t6">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t6" headers="r1c1-t6">
<p><a href="#CIADGHHA">LAPACK_GEES Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t6 r1c2-t6">
<p>Computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues, the real Schur form <code>T</code>, and, optionally, the matrix of Schur vectors <code>Z</code>. This gives the Schur factorization <code>A = Z*T*(Z**T)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t6" headers="r1c1-t6">
<p><a href="#CIADEDBA">LAPACK_GEEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t6 r1c2-t6">
<p>Computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t6" headers="r1c1-t6">
<p><a href="#CIADBIAE">LAPACK_GELS Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t6 r1c2-t6">
<p>Solves overdetermined or underdetermined real linear systems involving an <code>m</code> by <code>n</code> matrix <code>A</code>, or its transpose, using a <code>QR</code> or <code>LQ</code> factorization of <code>A</code>. It is assumed that <code>A</code> has full rank.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t6" headers="r1c1-t6">
<p><a href="#CIAJBIGH">LAPACK_GESDD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t6 r1c2-t6">
<p>Computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t6" headers="r1c1-t6">
<p><a href="#CIAFBFFI">LAPACK_GESVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t6 r1c2-t6">
<p>Computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and/or right singular vectors. The SVD is written <code>A = U * SIGMA * transpose(V)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t6" headers="r1c1-t6">
<p><a href="#CIAIJDGB">LAPACK_SBEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code>A</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t6" headers="r1c1-t6">
<p><a href="#CIAHJDIJ">LAPACK_SBEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t6 r1c2-t6">
<p>Ccomputes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t6" headers="r1c1-t6">
<p><a href="#CIADGJII">LAPACK_SPEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t6" headers="r1c1-t6">
<p><a href="#CIABDIAF">LAPACK_SPEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t6" headers="r1c1-t6">
<p><a href="#CIAGEJCI">LAPACK_STEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code>A</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t6" headers="r1c1-t6">
<p><a href="#CIAHFFCC">LAPACK_STEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t6" headers="r1c1-t6">
<p><a href="#CIAIDIGJ">LAPACK_SYEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t6 r1c2-t6">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t6" headers="r1c1-t6">
<p><a href="#CIAGBGGH">LAPACK_SYEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t6 r1c2-t6">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" -->
<a id="CIAFDJJA"></a>
<hr />
<div id="ARPLS71240" class="refsect1">
<h2 class="refsect1">Summary of UTL_NLA Subprograms</h2>
<div id="ARPLS71241" class="tblformal">
<p class="titleintable"><a id="sthref17294"></a><a id="sthref17295"></a>Table 232-6 UTL_NLA Package Subprograms</p>
<table class="cellalignment1229" title="UTL_NLA Package Subprograms" summary="This table lists the UTL_MAIL subprograms in alphabetical order and briefly describes them." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t7">Subprogram</th>
<th class="cellalignment1227" id="r1c2-t7">Description</th>
<th class="cellalignment1227" id="r1c3-t7">Group</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t7" headers="r1c1-t7">
<p><a href="#CIAJHJHD">BLAS_ASUM Functions</a></p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c2-t7">
<p>Computes the sum of the absolute values of the vector components</p>
</td>
<td class="cellalignment1228" headers="r2c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t7" headers="r1c1-t7">
<p><a href="#CIAJDJEJ">BLAS_AXPY Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c2-t7">
<p>Copies <code>alpha</code>*<code>X</code> + <code>Y</code> into vector <code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t7" headers="r1c1-t7">
<p><a href="#CIAIGABI">BLAS_COPY Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c2-t7">
<p>Copies the contents of vector <code>X</code> to vector <code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t7" headers="r1c1-t7">
<p><a href="#CIAICFIG">BLAS_DOT Functions</a></p>
</td>
<td class="cellalignment1228" headers="r5c1-t7 r1c2-t7">
<p>Returns the dot (scalar) product of two vectors <code>X</code> and <code>Y</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t7" headers="r1c1-t7">
<p><a href="#CIADGCFJ">BLAS_GBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r6c1-t7 r1c2-t7">
<p>Performs the matrix-vector operation <code>y := alpha*A*x + beta*y</code> or <code>y := alpha*A'*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> band matrix, with <code>kl</code> sub-diagonals and <code>ku</code> super-diagonals</p>
</td>
<td class="cellalignment1228" headers="r6c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t7" headers="r1c1-t7">
<p><a href="#CIACCFIJ">BLAS_GEMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r7c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where <code>alpha</code> and <code>beta</code> are scalars, and <code>A</code>, <code>B</code> and <code>C</code> are matrices, with <code>op(A)</code> an <code>m</code> by <code>k</code> matrix, <code>op(B)</code> a <code>k</code> by <code>n</code> matrix and <code>C</code> an <code>m</code> by <code>n</code> matrix</p>
</td>
<td class="cellalignment1228" headers="r7c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t7" headers="r1c1-t7">
<p><a href="#CIAFEAFG">BLAS_GEMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r8c1-t7 r1c2-t7">
<p>Performs the matrix-vector operations <code>y := alpha*A*x + beta*y</code> or <code>y := alpha*A'*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> matrix</p>
</td>
<td class="cellalignment1228" headers="r8c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t7" headers="r1c1-t7">
<p><a href="#CIAEIJCI">BLAS_GER Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r9c1-t7 r1c2-t7">
<p>Performs a rank 1 operation <code>A := alpha*x*y' + A</code> where <code>alpha</code> is a scalar, <code>x</code> is an <code>m</code> element vector, <code>y</code> is an n element vector and <code>A</code> is an <code>m</code> by <code>n</code> matrix</p>
</td>
<td class="cellalignment1228" headers="r9c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t7" headers="r1c1-t7">
<p><a href="#CIAIGEAJ">BLAS_IAMAX Functions</a></p>
</td>
<td class="cellalignment1228" headers="r10c1-t7 r1c2-t7">
<p>Computes the index of the first element of a vector that has the largest absolute value</p>
</td>
<td class="cellalignment1228" headers="r10c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t7" headers="r1c1-t7">
<p><a href="#CIAJEIAC">BLAS_NRM2 Functions</a></p>
</td>
<td class="cellalignment1228" headers="r11c1-t7 r1c2-t7">
<p>Computes the vector 2-norm (Euclidean norm)</p>
</td>
<td class="cellalignment1228" headers="r11c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t7" headers="r1c1-t7">
<p><a href="#CIAGCADG">BLAS_ROT Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r12c1-t7 r1c2-t7">
<p>Returns the plane rotation of points</p>
</td>
<td class="cellalignment1228" headers="r12c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t7" headers="r1c1-t7">
<p><a href="#CIAFGGDH">BLAS_ROTG Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r13c1-t7 r1c2-t7">
<p>Returns the Givens rotation of points</p>
</td>
<td class="cellalignment1228" headers="r13c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t7" headers="r1c1-t7">
<p><a href="#CIABHIIE">BLAS_SBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r14c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are n element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric band matrix, with <code>k</code> super-diagonals</p>
</td>
<td class="cellalignment1228" headers="r14c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t7" headers="r1c1-t7">
<p><a href="#CIAIBBHJ">BLAS_SCAL Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r15c1-t7 r1c2-t7">
<p>Scales a vector by a constant</p>
</td>
<td class="cellalignment1228" headers="r15c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r16c1-t7" headers="r1c1-t7">
<p><a href="#CIAGFAGC">BLAS_SPMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r16c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation <code>y := alpha*A*x + beta*y</code> where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment1228" headers="r16c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r17c1-t7" headers="r1c1-t7">
<p><a href="#CIAIECGG">BLAS_SPR Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r17c1-t7 r1c2-t7">
<p>Performs a symmetric rank 1 operation <code>A := alpha*x*x' + A</code> where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment1228" headers="r17c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r18c1-t7" headers="r1c1-t7">
<p><a href="#CIACHFGD">BLAS_SPR2 Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r18c1-t7 r1c2-t7">
<p>Performs a symmetric rank 2 operation where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form</p>
</td>
<td class="cellalignment1228" headers="r18c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r19c1-t7" headers="r1c1-t7">
<p><a href="#CIADBHFG">BLAS_SWAP Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r19c1-t7 r1c2-t7">
<p>Swaps the contents of two vectors each of size n</p>
</td>
<td class="cellalignment1228" headers="r19c1-t7 r1c3-t7">
<p><a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r20c1-t7" headers="r1c1-t7">
<p><a href="#CIAHABIJ">BLAS_SYMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r20c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where <code>alpha</code> and <code>beta</code> are scalars, <code>A</code> is a symmetric matrix, and <code>B</code> and <code>C</code> are <code>m</code> by <code>n</code> matrices</p>
</td>
<td class="cellalignment1228" headers="r20c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r21c1-t7" headers="r1c1-t7">
<p><a href="#CIAEAJDG">BLAS_SYMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r21c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
<td class="cellalignment1228" headers="r21c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r22c1-t7" headers="r1c1-t7">
<p><a href="#CIAFBJAJ">BLAS_SYR Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r22c1-t7 r1c2-t7">
<p>Performs a symmetric rank 1 operation where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
<td class="cellalignment1228" headers="r22c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r23c1-t7" headers="r1c1-t7">
<p><a href="#CIAHBHJB">BLAS_SYR2 Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r23c1-t7 r1c2-t7">
<p>Performs a symmetric rank 2 operation where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix</p>
</td>
<td class="cellalignment1228" headers="r23c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r24c1-t7" headers="r1c1-t7">
<p><a href="#CIAJFDDD">BLAS_SYR2K Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r24c1-t7 r1c2-t7">
<p>Performs one of the symmetric rank2 k operations where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and <code>A</code> and <code>B</code> are <code>n</code> by <code>k</code> matrices in the first case and <code>k</code> by <code>n</code> matrices in the second case</p>
</td>
<td class="cellalignment1228" headers="r24c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r25c1-t7" headers="r1c1-t7">
<p><a href="#CIABCBAG">BLAS_SYRK Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r25c1-t7 r1c2-t7">
<p>Performs one of the symmetric rank <code>k</code> operations where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and <code>A</code> is an <code>n</code> by <code>k</code> matrix in the first case and a <code>k</code> by <code>n</code> matrix in the second case</p>
</td>
<td class="cellalignment1228" headers="r25c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r26c1-t7" headers="r1c1-t7">
<p><a href="#CIAFEEGF">BLAS_TBMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r26c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular band matrix, with <code>(k + 1)</code> diagonals</p>
</td>
<td class="cellalignment1228" headers="r26c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r27c1-t7" headers="r1c1-t7">
<p><a href="#CIACICEE">BLAS_TBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r27c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code>(k + 1)</code> diagonals</p>
</td>
<td class="cellalignment1228" headers="r27c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r28c1-t7" headers="r1c1-t7">
<p><a href="#CIAIFFDD">BLAS_TPMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r28c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
<td class="cellalignment1228" headers="r28c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r29c1-t7" headers="r1c1-t7">
<p><a href="#CIACJJHC">BLAS_TPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r29c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by n unit, or non-unit, upper or lower triangular matrix, supplied in packed form</p>
</td>
<td class="cellalignment1228" headers="r29c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r30c1-t7" headers="r1c1-t7">
<p><a href="#CIAEJGDI">BLAS_TRMM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r30c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations where<code>alpha</code> is a scalar, <code>B</code> is an <code>m</code> by <code>n</code> matrix, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix and <code>op(A)</code> is one of two alternatives</p>
</td>
<td class="cellalignment1228" headers="r30c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r31c1-t7" headers="r1c1-t7">
<p><a href="#CIAHFEBJ">BLAS_TRMV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r31c1-t7 r1c2-t7">
<p>Performs a matrix-vector operation where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
<td class="cellalignment1228" headers="r31c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r32c1-t7" headers="r1c1-t7">
<p><a href="#CIAHHHFD">BLAS_TRSM Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r32c1-t7 r1c2-t7">
<p>Performs one of the matrix-vector operations <code>op( A )*X = alpha*B</code> or <code>X*op(A) = alpha*B</code> where <code>alpha</code> is a scalar, <code>X</code> and <code>B</code> are <code>m</code> by <code>n</code> matrices, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix, <code>op(A)</code> is one of two alternatives. The matrix <code>X</code> is overwritten on <code>B</code></p>
</td>
<td class="cellalignment1228" headers="r32c1-t7 r1c3-t7">
<p><a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r33c1-t7" headers="r1c1-t7">
<p><a href="#CIABJIEI">BLAS_TRSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r33c1-t7 r1c2-t7">
<p>Solves one of the systems of equation where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an n by <code>n</code> unit, or non-unit, upper or lower triangular matrix</p>
</td>
<td class="cellalignment1228" headers="r33c1-t7 r1c3-t7">
<p><a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r34c1-t7" headers="r1c1-t7">
<p><a href="#CIABIIEB">LAPACK_GBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r34c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r34c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r35c1-t7" headers="r1c1-t7">
<p><a href="#CIADGHHA">LAPACK_GEES Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r35c1-t7 r1c2-t7">
<p>Computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues, the real Schur form <code>T</code>, and, optionally, the matrix of Schur vectors <code>Z</code>. This gives the Schur factorization <code>A = Z*T*(Z**T)</code>.</p>
</td>
<td class="cellalignment1228" headers="r35c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r36c1-t7" headers="r1c1-t7">
<p><a href="#CIADEDBA">LAPACK_GEEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r36c1-t7 r1c2-t7">
<p>Computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
</td>
<td class="cellalignment1228" headers="r36c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r37c1-t7" headers="r1c1-t7">
<p><a href="#CIADBIAE">LAPACK_GELS Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r37c1-t7 r1c2-t7">
<p>Solves overdetermined or underdetermined real linear systems involving an <code>m</code> by <code>n</code> matrix <code>A</code>, or its transpose, using a <code>QR</code> or <code>LQ</code> factorization of <code>A</code>. It is assumed that <code>A</code> has full rank.</p>
</td>
<td class="cellalignment1228" headers="r37c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r38c1-t7" headers="r1c1-t7">
<p><a href="#CIAJBIGH">LAPACK_GESDD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r38c1-t7 r1c2-t7">
<p>Computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment1228" headers="r38c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r39c1-t7" headers="r1c1-t7">
<p><a href="#CIAFDDCG">LAPACK_GESV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r39c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r39c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r40c1-t7" headers="r1c1-t7">
<p><a href="#CIAFBFFI">LAPACK_GESVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r40c1-t7 r1c2-t7">
<p>Computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and/or right singular vectors. The SVD is written <code>A = U * SIGMA * transpose(V)</code>.</p>
</td>
<td class="cellalignment1228" headers="r40c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r41c1-t7" headers="r1c1-t7">
<p><a href="#CIAFDEJI">LAPACK_GTSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r41c1-t7 r1c2-t7">
<p>This procedure solves the equation <code>a * x = b</code> where <code>a</code> is an <code>n</code> by <code>n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
</td>
<td class="cellalignment1228" headers="r41c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r42c1-t7" headers="r1c1-t7">
<p><a href="#CIAJHJBC">LAPACK_PBSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r42c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite band matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r42c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r43c1-t7" headers="r1c1-t7">
<p><a href="#CIAGDCGG">LAPACK_POSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r43c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r43c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r44c1-t7" headers="r1c1-t7">
<p><a href="#CIAGICJH">LAPACK_PPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r44c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite matrix stored in packed format and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The Cholesky decomposition is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r44c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r45c1-t7" headers="r1c1-t7">
<p><a href="#CIAEJBEG">LAPACK_PTSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r45c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
</td>
<td class="cellalignment1228" headers="r45c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r46c1-t7" headers="r1c1-t7">
<p><a href="#CIAIJDGB">LAPACK_SBEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r46c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code>A</code></p>
</td>
<td class="cellalignment1228" headers="r46c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r47c1-t7" headers="r1c1-t7">
<p><a href="#CIAHJDIJ">LAPACK_SBEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r47c1-t7 r1c2-t7">
<p>Ccomputes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment1228" headers="r47c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r48c1-t7" headers="r1c1-t7">
<p><a href="#CIADGJII">LAPACK_SPEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r48c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage</p>
</td>
<td class="cellalignment1228" headers="r48c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r49c1-t7" headers="r1c1-t7">
<p><a href="#CIABDIAF">LAPACK_SPEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r49c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment1228" headers="r49c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r50c1-t7" headers="r1c1-t7">
<p><a href="#CIAEDCDH">LAPACK_SPSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r50c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric matrix stored in packed format, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The diagonal pivoting method is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r50c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r51c1-t7" headers="r1c1-t7">
<p><a href="#CIAGEJCI">LAPACK_STEV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r51c1-t7 r1c2-t7">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code>A</code></p>
</td>
<td class="cellalignment1228" headers="r51c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r52c1-t7" headers="r1c1-t7">
<p><a href="#CIAHFFCC">LAPACK_STEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r52c1-t7 r1c2-t7">
<p>Computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment1228" headers="r52c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r53c1-t7" headers="r1c1-t7">
<p><a href="#CIAGBGGH">LAPACK_SYEVD Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r53c1-t7 r1c2-t7">
<p>Computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
</td>
<td class="cellalignment1228" headers="r53c1-t7 r1c3-t7">
<p><a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r54c1-t7" headers="r1c1-t7">
<p><a href="#CIADGGFJ">LAPACK_SYSV Procedures</a></p>
</td>
<td class="cellalignment1228" headers="r54c1-t7 r1c2-t7">
<p>This procedure computes the solution to a real system of linear equations <code>a * x = b</code> where <code>a</code> is an n by n symmetric matrix, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices. The diagonal pivoting method is used to factor <code>A</code>.</p>
</td>
<td class="cellalignment1228" headers="r54c1-t7 r1c3-t7">
<p><a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a></p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<div id="ARPLS71242" class="refsect2"><a id="CIAJHJHD"></a>
<hr />
<h3 class="refsect2"><a id="sthref17296"></a>BLAS_ASUM Functions</h3>
<p>This procedure computes the sum of the absolute values of the vector components.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17297"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_ASUM (
   n      IN       POSITIVEN,
   x      IN       UTL_NLA_ARRAY_DBL,
   incx   IN       POSITIVEN)
 RETURN BINARY_DOUBLE;
</pre>
<pre>
UTL_NLA.BLAS_ASUM (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_FLT)
 RETURN BINARY_FLOAT
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17298"></a>Parameters</p>
<div id="ARPLS71243" class="tblformal">
<p class="titleintable"><a id="sthref17299"></a><a id="sthref17300"></a>Table 232-7 BLAS_ASUM Function Parameters</p>
<table class="cellalignment1229" title="BLAS_ASUM Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t9">Parameter</th>
<th class="cellalignment1227" id="r1c2-t9">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t9" headers="r1c1-t9">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t9 r1c2-t9">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t9" headers="r1c1-t9">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t9 r1c2-t9">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t9" headers="r1c1-t9">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t9 r1c2-t9">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71244" class="refsect2"><a id="CIAJDJEJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17301"></a>BLAS_AXPY Procedures</h3>
<p>This procedure copies <code>alpha</code>*<code>X</code> + <code>Y</code> into vector <code>Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17302"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_AXPY (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_DBL,
   incx   IN       POSITIVEN,
   y      IN OUT   UTL_NLA_ARRAY_DBL,
   incy   IN       POSITIVEN);
</pre>
<pre>
UTL_NLA.BLAS_AXPY (
   n      IN       POSITIVEN,
   alpha  IN       SCALAR_DOUBLE,
   x      IN       UTL_NLA_ARRAY_FLT,
   incx   IN       POSITIVEN,
   y      IN OUT   UTL_NLA_ARRAY_FLT,
   incy   IN       POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17303"></a>Parameters</p>
<div id="ARPLS71245" class="tblformal">
<p class="titleintable"><a id="sthref17304"></a><a id="sthref17305"></a>Table 232-8 BLAS_AXPY Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_AXPY Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t11">Parameter</th>
<th class="cellalignment1227" id="r1c2-t11">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t11" headers="r1c1-t11">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t11 r1c2-t11">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t11" headers="r1c1-t11">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t11 r1c2-t11">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t11" headers="r1c1-t11">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t11 r1c2-t11">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>dimension</code> at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t11" headers="r1c1-t11">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t11 r1c2-t11">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t11" headers="r1c1-t11">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t11 r1c2-t11">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t11" headers="r1c1-t11">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t11 r1c2-t11">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71246" class="refsect2"><a id="CIAIGABI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17306"></a>BLAS_COPY Procedures</h3>
<p>This procedure copies the contents of vector <code>X</code> to vector <code>Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17307"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_COPY (
   n     IN     POSITIVEN,
   x     IN     UTL_NLA_ARRAY_DBL,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_DBL,
   incy  IN     POSITIVEN);
</pre>
<pre>
UTL_NLA.BLAS_COPY (
   n     IN     POSITIVEN,
   x     IN     UTL_NLA_ARRAY_FLT,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_FLT,
   incy  IN     POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17308"></a>Parameters</p>
<div id="ARPLS71247" class="tblformal">
<p class="titleintable"><a id="sthref17309"></a><a id="sthref17310"></a>Table 232-9 BLAS_COPY Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_COPY Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t13">Parameter</th>
<th class="cellalignment1227" id="r1c2-t13">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t13" headers="r1c1-t13">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t13 r1c2-t13">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t13" headers="r1c1-t13">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t13 r1c2-t13">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>dimension</code> at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t13" headers="r1c1-t13">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t13 r1c2-t13">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t13" headers="r1c1-t13">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t13 r1c2-t13">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t13" headers="r1c1-t13">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t13 r1c2-t13">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71248" class="refsect2"><a id="CIAICFIG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17311"></a>BLAS_DOT Functions</h3>
<p>This function returns the dot (scalar) product of two vectors <code>X</code> and <code>Y</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17312"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_DOT (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN,
   y     IN   UTL_NLA_ARRAY_DBL,
   incy  IN   POSITIVEN) 
  RETURN BINARY_DOUBLE;
</pre>
<pre>
UTL_NLA.BLAS_DOT (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN,
   y     IN   UTL_NLA_ARRAY_FLT,
   incy  IN   POSITIVEN) 
  RETURN BINARY_FLOAT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17313"></a>Parameters</p>
<div id="ARPLS71249" class="tblformal">
<p class="titleintable"><a id="sthref17314"></a><a id="sthref17315"></a>Table 232-10 BLAS_DOT Function Parameters</p>
<table class="cellalignment1229" title="BLAS_DOT Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t15">Parameter</th>
<th class="cellalignment1227" id="r1c2-t15">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t15" headers="r1c1-t15">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t15 r1c2-t15">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t15" headers="r1c1-t15">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t15 r1c2-t15">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
 ( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t15" headers="r1c1-t15">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t15 r1c2-t15">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t15" headers="r1c1-t15">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t15 r1c2-t15">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t15" headers="r1c1-t15">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t15 r1c2-t15">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71250" class="refsect2"><a id="CIADGCFJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17316"></a>BLAS_GBMV Procedures</h3>
<p>This procedure performs one of the matrix-vector operations</p>
<pre>
y := alpha*A*x + beta*y
</pre>
<p>or</p>
<pre>
y := alpha*A'*x + beta*y
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> band matrix, with <code>kl</code> sub-diagonals and <code>ku</code> super-diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17317"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17318"></a>Parameters</p>
<div id="ARPLS71251" class="tblformal">
<p class="titleintable"><a id="sthref17319"></a><a id="sthref17320"></a>Table 232-11 BLAS_GBMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_GBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t17">Parameter</th>
<th class="cellalignment1227" id="r1c2-t17">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t17" headers="r1c1-t17">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t17 r1c2-t17">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = '<code>N</code>' or '<code>n</code>'<code>y</code> := <code>alpha</code>*<code>A</code>*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'</code><code>y</code> := <code>alpha</code>*<code>A</code>'*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
<li>
<p><code>trans</code> = '<code>C</code>' or '<code>c</code>'<code>y</code> := <code>alpha</code>*<code>A</code>'*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t17" headers="r1c1-t17">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t17 r1c2-t17">
<p>Specifies the number of rows of the matrix A. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t17" headers="r1c1-t17">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t17 r1c2-t17">
<p>Specifies the number of columns of the matrix A. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t17" headers="r1c1-t17">
<p><code>kl</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t17 r1c2-t17">
<p>Specifies the number of sub-diagonals of the matrix <code>A</code>. <code>kl</code> must satisfy <code>0. le. kl</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t17" headers="r1c1-t17">
<p>ku</p>
</td>
<td class="cellalignment1228" headers="r6c1-t17 r1c2-t17">
<p>Specifies the number of super-diagonals of the matrix <code>A</code>. <code>ku</code> must satisfy <code>0 .le. ku</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t17" headers="r1c1-t17">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t17 r1c2-t17">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t17" headers="r1c1-t17">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t17 r1c2-t17">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,n)</code>.</p>
<p>Before entry, the leading <code>(kl</code> + <code>ku</code> + 1) by <code>n</code> part of the array <code>A</code> must contain the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code>(ku+1)</code> of the array, the first super-diagonal starting at position 2 in row <code>ku</code>, the first sub-diagonal starting at position 1 in row<code>(ku+2)</code>, and so on.</p>
<p>Elements in the array <code>A</code> that do not correspond to elements in the band matrix (such as the top left <code>ku</code> by <code>ku</code> triangle) are not referenced.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t17" headers="r1c1-t17">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t17 r1c2-t17">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>(kl+ku+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t17" headers="r1c1-t17">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t17 r1c2-t17">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre>
<p>when <code>trans</code> = '<code>'N'</code> or <code>'n'</code> and at least</p>
<pre>
( 1 + ( m - 1 )*abs( incx ) )
</pre>
<p>otherwise. Before entry, the incremented array <code>X</code> must contain the vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t17" headers="r1c1-t17">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t17 r1c2-t17">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t17" headers="r1c1-t17">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t17 r1c2-t17">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t17" headers="r1c1-t17">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t17 r1c2-t17">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>dimension</code> at least</p>
<pre>
( 1 + ( m - 1 )*abs( incy ) ) 
</pre>
<p>when <code>trans</code> = <code>'N'</code> or <code>'n'</code> and at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre>
<p>otherwise. Before entry with <code>beta</code> nonzero, the incremented array <code>Y</code> must contain the vector <code>y</code>. On exit, <code>Y</code> is overwritten by the updated vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t17" headers="r1c1-t17">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t17 r1c2-t17">
<p>Specifies the increment for the elements of <code>y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t17" headers="r1c1-t17">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t17 r1c2-t17">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71252" class="refsect2"><a id="CIACCFIJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17321"></a>BLAS_GEMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre>
C := alpha*op( A )*op( B ) + beta*C
</pre>
<p>where <code>op(X)</code> is one of</p>
<pre>
op(X) = X 
</pre>
<p>or</p>
<pre>
op(X) = X'
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, and <code>A</code>, <code>B</code> and <code>C</code> are matrices, with <code>op(A)</code> an <code>m</code> by <code>k</code> matrix, <code>op(B)</code> a <code>k</code> by <code>n</code> matrix and <code>C</code> an <code>m</code> by <code>n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17322"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_GEMM (
   transa IN      flag,
   transb IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_GEMM (
   transa IN      flag,
   transb IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17323"></a>Parameters</p>
<div id="ARPLS71253" class="tblformal">
<p class="titleintable"><a id="sthref17324"></a><a id="sthref17325"></a>Table 232-12 BLAS_GEMM Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_GEMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t19">Parameter</th>
<th class="cellalignment1227" id="r1c2-t19">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t19" headers="r1c1-t19">
<p><code>transa</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t19 r1c2-t19">
<p>Specifies the form of <code>op(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code>transa</code> = <code>'N'</code> or <code>'n'</code> : <code>op(A) = 'A'</code></p>
</li>
<li>
<p><code>transa</code> = <code>'T'</code> or <code>'t'</code> : <code>op(A) = 'A'</code></p>
</li>
<li>
<p><code>transa</code> = <code>'C'</code> or <code>'c'</code> : <code>op(A) = 'A'</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t19" headers="r1c1-t19">
<p><code>transb</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t19 r1c2-t19">
<p>Specifies the form of <code>op</code><code>(B)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code>transb</code> = <code>'N'</code> or <code>'n'</code> : <code>op(B) = B</code></p>
</li>
<li>
<p><code>transb</code> =<code>'T'</code> or <code>'t'</code> : <code>op(B) = B'</code></p>
</li>
<li>
<p><code>transb</code> = <code>'C'</code> or <code>'c'</code>: <code>op(B) = B'</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t19" headers="r1c1-t19">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t19 r1c2-t19">
<p>Specifies the number of rows of the matrix <code>op</code><code>(A)</code> and of the matrix <code>C</code>. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t19" headers="r1c1-t19">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t19 r1c2-t19">
<p>Specifies the number of columns of the matrix <code>op</code><code>(B)</code> and of the matrix <code>C</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t19" headers="r1c1-t19">
<p>k</p>
</td>
<td class="cellalignment1228" headers="r6c1-t19 r1c2-t19">
<p>Specifies the rows of the matrix <code>op(A)</code> and the number of columns of the matrix <code>op(B)</code>. <code>k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t19" headers="r1c1-t19">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t19 r1c2-t19">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t19" headers="r1c1-t19">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t19 r1c2-t19">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> <code>(lda, ka)</code> where <code>ka</code> is <code>k</code> when <code>transa</code> = <code>'N'</code> or <code>'n'</code>, and is <code>m</code> otherwise. Before entry with <code>transa</code> = <code>'N'</code> or <code>'n'</code>, the leading <code>m</code> by <code>k</code> part of the array <code>A</code> must contain the matrix <code>A</code>, otherwise the leading <code>k</code> by <code>m</code> part of the array <code>A</code> must contain the matrix <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t19" headers="r1c1-t19">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When <code>transa = 'N' or 'n', lda</code> must be at least <code>max (1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t19" headers="r1c1-t19">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t19 r1c2-t19">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda, kb)</code> where <code>kb</code> is <code>n</code> when <code>transb</code> = '<code>'N'</code> or <code>'n'</code>, and is <code>k</code> otherwise. Before entry with <code>transb</code> = <code>'N'</code> or <code>'n'</code>, the leading <code>k</code> by <code>n</code> part of the array <code>b</code> must contain the matrix <code>B</code>, otherwise the leading <code>n</code> by <code>k</code> part of the array<code>b</code> must contain the matrix <code>B</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t19" headers="r1c1-t19">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code>b</code> as declared in the calling (sub) program. <code>When transb = 'N' or 'n', ldb</code> must be at least <code>max (1, n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t19" headers="r1c1-t19">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t19 r1c2-t19">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>c</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t19" headers="r1c1-t19">
<p>c</p>
</td>
<td class="cellalignment1228" headers="r13c1-t19 r1c2-t19">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (ldc, n). Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>C</code> must contain the matrix <code>C</code>, except when beta is zero, in which case <code>C</code> need not be set on entry. On exit, the array<code>C</code> is overwritten by the <code>m</code> by <code>n</code> matrix <code>(alpha*op(A)*op(B) + beta*C)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t19" headers="r1c1-t19">
<p><code>ldc</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t19 r1c2-t19">
<p>Specifies the first dimension of <code>C</code> as declared in the calling (sub) program. <code>ldc</code> must be at least <code>max(1, m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r15c1-t19" headers="r1c1-t19">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r15c1-t19 r1c2-t19">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71254" class="refsect2"><a id="CIAFEAFG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17326"></a>BLAS_GEMV Procedures</h3>
<p>This procedure performs one of the matrix-vector operations</p>
<pre>
y := alpha*A*x + beta*y
</pre>
<p>or</p>
<pre>
y := alpha*A'*x + beta*y
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are vectors and <code>A</code> is an <code>m</code> by <code>n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17327"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_GEMV (
   trans  IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17328"></a>Parameters</p>
<div id="ARPLS71255" class="tblformal">
<p class="titleintable"><a id="sthref17329"></a><a id="sthref17330"></a>Table 232-13 BLAS_GEMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_GEMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t21">Parameter</th>
<th class="cellalignment1227" id="r1c2-t21">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t21" headers="r1c1-t21">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t21 r1c2-t21">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'</code>,<code>y</code> := <code>alpha</code>*<code>A</code>*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'</code><code>y</code> := <code>alpha</code>*<code>A</code>'*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
<li>
<p><code>trans</code> = '<code>C</code>' or '<code>c</code>'<code>y</code> := <code>alpha</code>*<code>A</code>'*<code>x</code> + <code>beta</code>*<code>y</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t21" headers="r1c1-t21">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t21 r1c2-t21">
<p>Specifies the number of rows of the matrix A. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t21" headers="r1c1-t21">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t21 r1c2-t21">
<p>Specifies the number of columns of the matrix A. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t21" headers="r1c1-t21">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t21 r1c2-t21">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t21" headers="r1c1-t21">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t21 r1c2-t21">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (lda, <code>n</code>). Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>a</code> must contain the matrix of coefficients.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t21" headers="r1c1-t21">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t21 r1c2-t21">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>max</code>(1, <code>m</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t21" headers="r1c1-t21">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t21 r1c2-t21">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) ) 
</pre>
<p>when <code>trans</code> = '<code>'N'</code> or <code>'n'</code> and at least</p>
<pre>
(1+(m-1)*abs(incx))
</pre>
<p>otherwise. Before entry, the incremented array <code>X</code> must contain the vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t21" headers="r1c1-t21">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t21 r1c2-t21">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t21" headers="r1c1-t21">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t21 r1c2-t21">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t21" headers="r1c1-t21">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t21 r1c2-t21">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( m - 1 )*abs( incy ) )
</pre>
<p>when <code>trans</code> = <code>'N'</code> or <code>'n'</code> and at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy ) ) 
</pre>
<p>otherwise. Before entry with <code>beta</code> nonzero, the incremented array <code>Y</code> must contain the vector <code>y</code>. On exit, <code>Y</code> is overwritten by the updated vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t21" headers="r1c1-t21">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t21 r1c2-t21">
<p>Specifies the increment for the elements of <code>y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t21" headers="r1c1-t21">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t21 r1c2-t21">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71256" class="refsect2"><a id="CIAEIJCI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17331"></a>BLAS_GER Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre>
A := alpha*x*y' + A
</pre>
<p>where <code>alpha</code> is a scalar, <code>x</code> is an <code>m</code> element vector, <code>y</code> is an n element vector and <code>A</code> is an <code>m</code> by <code>n</code> matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17332"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_GER (
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_GER (
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17333"></a>Parameters</p>
<div id="ARPLS71257" class="tblformal">
<p class="titleintable"><a id="sthref17334"></a><a id="sthref17335"></a>Table 232-14 BLAS_GER Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_GER Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t23">Parameter</th>
<th class="cellalignment1227" id="r1c2-t23">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t23" headers="r1c1-t23">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t23 r1c2-t23">
<p>Specifies the number of rows of the matrix <code>A</code>. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t23" headers="r1c1-t23">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t23 r1c2-t23">
<p>Specifies the number of columns of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t23" headers="r1c1-t23">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t23 r1c2-t23">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t23" headers="r1c1-t23">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t23 r1c2-t23">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( m - 1 )*abs( incx ) )
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t23" headers="r1c1-t23">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t23 r1c2-t23">
<p>Specifies the increment for the elements of <code>x</code>. incx must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t23" headers="r1c1-t23">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t23 r1c2-t23">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy ) )
</pre>
<p>Before entry, the incremented array <code>Y</code> must contain the m element vector y.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t23" headers="r1c1-t23">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t23 r1c2-t23">
<p>Specifies the increment for the elements of <code>y</code>. incx must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t23" headers="r1c1-t23">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t23 r1c2-t23">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (<code>lda</code>, <code>n</code>).</p>
<p>Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>a</code> must contain the matrix of coefficients. On exit, <code>a</code> is overwritten by the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t23" headers="r1c1-t23">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t23 r1c2-t23">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least</p>
<pre>
max( 1, m )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t23" headers="r1c1-t23">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t23 r1c2-t23">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71258" class="refsect2"><a id="CIAIGEAJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17336"></a>BLAS_IAMAX Functions</h3>
<p>This function computes the index of first element of a vector that has the largest absolute value.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17337"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_IAMAX (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN,
  RETURN POSITIVEN;
</pre>
<pre>
UTL_NLA.BLAS_IAMAX (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN,
  RETURN POSITIVEN;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17338"></a>Parameters</p>
<div id="ARPLS71259" class="tblformal">
<p class="titleintable"><a id="sthref17339"></a><a id="sthref17340"></a>Table 232-15 BLAS_IAMAX Function Parameters</p>
<table class="cellalignment1229" title="BLAS_IAMAX Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t25">Parameter</th>
<th class="cellalignment1227" id="r1c2-t25">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t25" headers="r1c1-t25">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t25 r1c2-t25">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t25" headers="r1c1-t25">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t25 r1c2-t25">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t25" headers="r1c1-t25">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t25 r1c2-t25">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71260" class="refsect2"><a id="CIAJEIAC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17341"></a>BLAS_NRM2 Functions</h3>
<p>This function computes the vector 2-norm (Euclidean norm).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17342"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_NRM2 (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_DBL,
   incx  IN   POSITIVEN)
  RETURN BINARY_DOUBLE;
</pre>
<pre>
UTL_NLA.BLAS_NRM2 (
   n     IN   POSITIVEN,
   x     IN   UTL_NLA_ARRAY_FLT,
   incx  IN   POSITIVEN)
  RETURN BINARY_FLOAT;
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17343"></a>Parameters</p>
<div id="ARPLS71261" class="tblformal">
<p class="titleintable"><a id="sthref17344"></a><a id="sthref17345"></a>Table 232-16 BLAS_NRM2 Function Parameters</p>
<table class="cellalignment1229" title="BLAS_NRM2 Function Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t27">Parameter</th>
<th class="cellalignment1227" id="r1c2-t27">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t27" headers="r1c1-t27">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t27 r1c2-t27">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t27" headers="r1c1-t27">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t27 r1c2-t27">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t27" headers="r1c1-t27">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t27 r1c2-t27">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71262" class="refsect2"><a id="CIAGCADG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17346"></a>BLAS_ROT Procedures</h3>
<p>This procedure returns the plane rotation of points.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17347"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_ROT (
   n      IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   c      IN      SCALAR_DOUBLE,
   s      IN      SCALAR_DOUBLE);
</pre>
<pre>
UTL_NLA.BLAS_ROT (
   n      IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   c      IN      SCALAR_DOUBLE,
   s      IN      SCALAR_DOUBLE);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17348"></a>Parameters</p>
<div id="ARPLS71263" class="tblformal">
<p class="titleintable"><a id="sthref17349"></a><a id="sthref17350"></a>Table 232-17 BLAS_ROT Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_ROT Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t29">Parameter</th>
<th class="cellalignment1227" id="r1c2-t29">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t29" headers="r1c1-t29">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t29 r1c2-t29">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t29" headers="r1c1-t29">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t29 r1c2-t29">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)* abs(incx))
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t29" headers="r1c1-t29">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t29 r1c2-t29">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t29" headers="r1c1-t29">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t29 r1c2-t29">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t29" headers="r1c1-t29">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t29 r1c2-t29">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t29" headers="r1c1-t29">
<p><code>c</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t29 r1c2-t29">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>.Specifies the scalar C.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t29" headers="r1c1-t29">
<p><code>s</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t29 r1c2-t29">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>.Specifies the scalar S.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71264" class="refsect2"><a id="CIAFGGDH"></a>
<hr />
<h3 class="refsect2"><a id="sthref17351"></a>BLAS_ROTG Procedures</h3>
<p>This procedure returns the Givens rotation of points.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17352"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_ROTG (
   a   IN OUT   SCALAR_DOUBLE,
   b   IN OUT   SCALAR_DOUBLE,
   c   IN OUT   SCALAR_DOUBLE,
   s   IN OUT   SCALAR_DOUBLE);
</pre>
<pre>
UTL_NLA.BLAS_ROTG (
   a   IN OUT   SCALAR_FLOAT,
   b   IN OUT   SCALAR_FLOAT,
   c   IN OUT   SCALAR_FLOAT,
   s   IN OUT   SCALAR_FLOAT);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17353"></a>Parameters</p>
<div id="ARPLS71265" class="tblformal">
<p class="titleintable"><a id="sthref17354"></a><a id="sthref17355"></a>Table 232-18 BLAS_ROTG Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_ROTG Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t31">Parameter</th>
<th class="cellalignment1227" id="r1c2-t31">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t31" headers="r1c1-t31">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t31 r1c2-t31">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar A.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t31" headers="r1c1-t31">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t31 r1c2-t31">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar B.&nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t31" headers="r1c1-t31">
<p><code>c</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t31 r1c2-t31">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar C.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t31" headers="r1c1-t31">
<p><code>s</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t31 r1c2-t31">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar S.&nbsp;</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71266" class="refsect2"><a id="CIAIBBHJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17356"></a>BLAS_SCAL Procedures</h3>
<p>This procedure scales a vector by a constant.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#i1025881">BLAS Level 1 (Vector-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17357"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SCAL (
   n      IN  POSITIVEN,
   alpha  IN  SCALAR_DOUBLE,
   x      IN  OUT UTL_NLA_ARRAY_DBL,
   incx   IN  POSITIVEN);
</pre>
<pre>
UTL_NLA.BLAS_SCAL (
   n      IN  POSITIVEN,
   alpha  IN  SCALAR_FLOAT,
   x      IN  OUT UTL_NLA_ARRAY_FLT,
   incx   IN  POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17358"></a>Parameters</p>
<div id="ARPLS71267" class="tblformal">
<p class="titleintable"><a id="sthref17359"></a><a id="sthref17360"></a>Table 232-19 BLAS_SCAL Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SCAL Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t33">Parameter</th>
<th class="cellalignment1227" id="r1c2-t33">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t33" headers="r1c1-t33">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t33 r1c2-t33">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t33" headers="r1c1-t33">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t33 r1c2-t33">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t33" headers="r1c1-t33">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t33 r1c2-t33">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t33" headers="r1c1-t33">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t33 r1c2-t33">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71268" class="refsect2"><a id="CIAGFAGC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17361"></a>BLAS_SPMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre>
y := alpha*A*x + beta*y
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are n element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17362"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SPMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SPMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   ap      IN     UTL_NLA_ARRAY_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17363"></a>Parameters</p>
<div id="ARPLS71269" class="tblformal">
<p class="titleintable"><a id="sthref17364"></a><a id="sthref17365"></a>Table 232-20 BLAS_SPMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SPMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t35">Parameter</th>
<th class="cellalignment1227" id="r1c2-t35">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t35" headers="r1c1-t35">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t35 r1c2-t35">
<p>Specifies the upper or lower triangular part of the matrix A is supplied in the packed array <code>AP</code>:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. The upper triangular part of <code>A</code> is supplied in <code>AP</code>.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. The lower triangular part of <code>A</code> is supplied in <code>AP</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t35" headers="r1c1-t35">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t35 r1c2-t35">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t35" headers="r1c1-t35">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t35 r1c2-t35">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t35" headers="r1c1-t35">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t35 r1c2-t35">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
((n*(n+1))/2)
</pre>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the array <code>ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code>ap(1)</code> contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(1,2)</code> and <code>a(2,2)</code> respectively, and so on.</p>
<p>Before entry with <code>uplo = 'L'</code> or <code>'l'</code>, the array <code>ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that <code>ap(1)</code> contains, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(2,1)</code> and <code>a(3,1)</code> respectively, and so on.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t35" headers="r1c1-t35">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t35 r1c2-t35">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the n element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t35" headers="r1c1-t35">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t35 r1c2-t35">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t35" headers="r1c1-t35">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t35 r1c2-t35">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>Y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t35" headers="r1c1-t35">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t35 r1c2-t35">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at leasT</p>
<pre>
(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code>Y</code> must contain the n element vector <code>y</code>. On exit, <code>Y</code> is overwritten by the updated vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t35" headers="r1c1-t35">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t35 r1c2-t35">
<p>Specifies the increment for the elements of <code>y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t35" headers="r1c1-t35">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t35 r1c2-t35">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71270" class="refsect2"><a id="CIAIECGG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17366"></a>BLAS_SPR Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre>
A := alpha*x*x' + A
</pre>
<p>where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17367"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SPR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   ap     IN OUT  UTL_NLA_ARRAY_DBL,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SPR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   ap     IN OUT  UTL_NLA_ARRAY_FLT,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17368"></a>Parameters</p>
<div id="ARPLS71271" class="tblformal">
<p class="titleintable"><a id="sthref17369"></a><a id="sthref17370"></a>Table 232-21 BLAS_SPR Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SPR Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t37">Parameter</th>
<th class="cellalignment1227" id="r1c2-t37">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t37" headers="r1c1-t37">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t37 r1c2-t37">
<p>Specifies whether the upper or lower triangular part of the matrix <code>A</code> is supplied in the packed array <code>ap</code>:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>: The upper triangular part of <code>A</code> is supplied in <code>ap</code>.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : The lower triangular part of <code>A</code> is supplied in <code>ap</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t37" headers="r1c1-t37">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t37 r1c2-t37">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t37" headers="r1c1-t37">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t37 r1c2-t37">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t37" headers="r1c1-t37">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t37 r1c2-t37">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t37" headers="r1c1-t37">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t37 r1c2-t37">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t37" headers="r1c1-t37">
<p><code>a</code><code>p</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t37 r1c2-t37">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
((n*(n +1))/2)
</pre>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the array <code>ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code>ap(1)</code> contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(1,2)</code> and <code>a(2,2)</code> respectively, and so on. On exit, the array <code>ap</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the array <code>ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(2,1)</code> and <code>a(3,1)</code> respectively, and so on. On exit, the array <code>ap</code> is overwritten by the lower triangular part of the updated matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t37" headers="r1c1-t37">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t37 r1c2-t37">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71272" class="refsect2"><a id="CIACHFGD"></a>
<hr />
<h3 class="refsect2"><a id="sthref17371"></a>BLAS_SPR2 Procedures</h3>
<p>This procedure performs the rank 2 operation</p>
<pre>
A := alpha*x*y' + alpha*y*x' +A
</pre>
<p>where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17372"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SPR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SPR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17373"></a>Parameters</p>
<div id="ARPLS71273" class="tblformal">
<p class="titleintable"><a id="sthref17374"></a><a id="sthref17375"></a>Table 232-22 BLAS_SPR2 Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SPR2 Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t39">Parameter</th>
<th class="cellalignment1227" id="r1c2-t39">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t39" headers="r1c1-t39">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t39 r1c2-t39">
<p>Specifies whether the upper or lower triangular part of the matrix <code>A</code> is supplied in the packed array <code>ap</code> :</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : The upper triangular part of <code>A</code> is supplied in <code>ap</code>.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : The lower triangular part of <code>A</code> is supplied in <code>ap</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t39" headers="r1c1-t39">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t39 r1c2-t39">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t39" headers="r1c1-t39">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t39 r1c2-t39">
<p>Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t39" headers="r1c1-t39">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t39 r1c2-t39">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t39" headers="r1c1-t39">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t39 r1c2-t39">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t39" headers="r1c1-t39">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t39 r1c2-t39">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t39" headers="r1c1-t39">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t39 r1c2-t39">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t39" headers="r1c1-t39">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t39 r1c2-t39">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
((n*(n+1))/2)
</pre>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the array <code>ap</code> must contain the upper triangular part of the symmetric matrix packed sequentially, column by column, so that <code>ap(1)</code> contains <code>ap(1)</code> contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(1,2)</code> and <code>a(2,2)</code> respectively, and so on. On exit, the array <code>ap</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the array <code>ap</code> must contain the lower triangular part of the symmetric matrix packed sequentially, column by column, so that ap(1) contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(2,1)</code> and <code>a(3,1)</code> respectively, and so on. On exit, the array <code>ap</code> is overwritten by the lower triangular part of the updated matrix</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t39" headers="r1c1-t39">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t39 r1c2-t39">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>(k + 1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t39" headers="r1c1-t39">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t39 r1c2-t39">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71274" class="refsect2"><a id="CIABHIIE"></a>
<hr />
<h3 class="refsect2"><a id="sthref17376"></a>BLAS_SBMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre>
y := alpha*A*x + beta*y
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are n element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric band matrix, with <code>k</code> super-diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17377"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SBMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SBMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17378"></a>Parameters</p>
<div id="ARPLS71275" class="tblformal">
<p class="titleintable"><a id="sthref17379"></a><a id="sthref17380"></a>Table 232-23 BLAS_SBMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t41">Parameter</th>
<th class="cellalignment1227" id="r1c2-t41">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t41" headers="r1c1-t41">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t41 r1c2-t41">
<p>Specifies whether the upper or lower triangular part of the band matrix <code>A</code> is being supplied:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. The upper triangular part of <code>A</code> is supplied.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. The lower triangular part of <code>A</code> is supplied.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t41" headers="r1c1-t41">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t41 r1c2-t41">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t41" headers="r1c1-t41">
<p><code>k</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t41 r1c2-t41">
<p>Specifies the number of super-diagonals of the matrix <code>A</code>. <code>k</code> must satisfy <code>0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t41" headers="r1c1-t41">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t41 r1c2-t41">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t41" headers="r1c1-t41">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t41 r1c2-t41">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code>uplo = 'U'</code> or <code>'u'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the upper triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row <code>(k+1)</code> of the array, the first super-diagonal starting at position 2 in row<code>k</code>, and so on. The top left <code>k</code> by k triangle of the array <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>(k+1)</code> by n part of the array A must contain the lower triangular band part of the symmetric matrix, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Unchanged on exit</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t41" headers="r1c1-t41">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t41 r1c2-t41">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>(k + 1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t41" headers="r1c1-t41">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t41 r1c2-t41">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the n element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t41" headers="r1c1-t41">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t41 r1c2-t41">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t41" headers="r1c1-t41">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t41 r1c2-t41">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t41" headers="r1c1-t41">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t41 r1c2-t41">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code>Y</code> must contain the n element vector <code>y</code>. On exit, <code>Y</code> is overwritten by the updated vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t41" headers="r1c1-t41">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t41 r1c2-t41">
<p>Specifies the increment for the elements of <code>y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t41" headers="r1c1-t41">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t41 r1c2-t41">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71276" class="refsect2"><a id="CIADBHFG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17381"></a>BLAS_SWAP Procedures</h3>
<p>This procedure swaps the contents of two vectors each of size n.</p>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17382"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SWAP (
   n     IN     POSITIVEN,
   x     IN OUT UTL_NLA_ARRAY_DBL,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_DBL,
   incy  IN     POSITIVEN);
</pre>
<pre>
UTL_NLA.BLAS_SWAP (
   n     IN     POSITIVEN,
   x     IN OUT UTL_NLA_ARRAY_FLT,
   incx  IN     POSITIVEN,
   y     IN OUT UTL_NLA_ARRAY_FLT,
   incy  IN     POSITIVEN);
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17383"></a>Parameters</p>
<div id="ARPLS71277" class="tblformal">
<p class="titleintable"><a id="sthref17384"></a><a id="sthref17385"></a>Table 232-24 BLAS_SWAP Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SWAP Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t42">Parameter</th>
<th class="cellalignment1227" id="r1c2-t42">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t42" headers="r1c1-t42">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t42 r1c2-t42">
<p>Specifies the number of elements of the vectors <code>x</code> and <code>y</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t42" headers="r1c1-t42">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t42 r1c2-t42">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>dimension</code> at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t42" headers="r1c1-t42">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t42 r1c2-t42">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t42" headers="r1c1-t42">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t42 r1c2-t42">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t42" headers="r1c1-t42">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t42 r1c2-t42">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71278" class="refsect2"><a id="CIAHABIJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17386"></a>BLAS_SYMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre>
C := alpha*A*B + beta*C
</pre>
<p>or</p>
<pre>
C := alpha*B*A + beta*C
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>A</code> is a symmetric matrix, and <code>B</code> and <code>C</code> are <code>m</code> by <code>n</code> matrices.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17387"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYMM (
   side   IN      flag,
   uplo   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYMM (
   side   IN      flag,
   uplo   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17388"></a>Parameters</p>
<div id="ARPLS71279" class="tblformal">
<p class="titleintable"><a id="sthref17389"></a><a id="sthref17390"></a>Table 232-25 BLAS_SYMM Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t44">Parameter</th>
<th class="cellalignment1227" id="r1c2-t44">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t44" headers="r1c1-t44">
<p><code>side</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t44 r1c2-t44">
<p>Specifies whether the symmetric matrix <code>A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code>side</code> = <code>'L'</code> or <code>'l'</code> : <code>C := alpha*A*B + beta*C</code></p>
</li>
<li>
<p><code>side</code> = <code>'R'</code> or <code>'r'</code> : <code>C := alpha*B*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t44" headers="r1c1-t44">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t44 r1c2-t44">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : Only the upper triangular part of the symmetric matrix is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : Only the lower triangular part of the symmetric matrix is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t44" headers="r1c1-t44">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t44 r1c2-t44">
<p>Specifies the number of rows of the matrix <code>C</code>. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t44" headers="r1c1-t44">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t44 r1c2-t44">
<p>Specifies the number of columns of the matrix <code>C</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t44" headers="r1c1-t44">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t44 r1c2-t44">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t44" headers="r1c1-t44">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t44 r1c2-t44">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,ka)</code> where <code>ka</code> is <code>m</code> when <code>side</code> = <code>'L'</code> or <code>'l'</code>, and is <code>n</code> otherwise.</p>
<p>Before entry with <code>side</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>m</code> by <code>m</code> part of the array <code>A</code> must contain the symmetric matrix, such that when <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>m</code> by <code>m</code> upper triangular part of the array <code>A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>A</code> is not referenced, and when <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>m</code> by <code>m</code> lower triangular part of the array <code>A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
<p>Before entry with <code>side</code> = '<code>R</code>' or 'r', the <code>n</code> by <code>n</code> part of the array <code>A</code> must contain the symmetric matrix, such that when <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of A is not referenced, and when <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array <code>A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t44" headers="r1c1-t44">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When side = <code>'L'</code> or <code>'l'</code>, <code>lda</code> must be at least <code>max(1,m)</code>, otherwise <code>lda</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t44" headers="r1c1-t44">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t44 r1c2-t44">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (ldb,n)</code>.</p>
<p>Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>B</code> must contain the matrix <code>B</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t44" headers="r1c1-t44">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code>b</code> as declared in the calling (sub) program. <code>ldb</code> must be at least <code>max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t44" headers="r1c1-t44">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t44 r1c2-t44">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>c</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t44" headers="r1c1-t44">
<p>c</p>
</td>
<td class="cellalignment1228" headers="r12c1-t44 r1c2-t44">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (ldc,n)</code>. Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>C</code> must contain the matrix <code>C</code>, except when beta is zero, in which case <code>C</code> need not be set on entry. On exit, the array <code>C</code> is overwritten by the <code>m</code> by <code>n</code> updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t44" headers="r1c1-t44">
<p><code>ldc</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t44 r1c2-t44">
<p>Specifies the first dimension of <code>C</code> as declared in the calling (sub) program. <code>ldc</code> must be at least <code>max (1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t44" headers="r1c1-t44">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t44 r1c2-t44">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71280" class="refsect2"><a id="CIAEAJDG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17391"></a>BLAS_SYMV Procedures</h3>
<p>This procedure performs the matrix-vector operation</p>
<pre>
y := alpha*A*x + beta*y
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>x</code> and <code>y</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17392"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   y      IN OUT  UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYMV (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   y      IN OUT  UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17393"></a>Parameters</p>
<div id="ARPLS71281" class="tblformal">
<p class="titleintable"><a id="sthref17394"></a><a id="sthref17395"></a>Table 232-26 BLAS_SYMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t46">Parameter</th>
<th class="cellalignment1227" id="r1c2-t46">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t46" headers="r1c1-t46">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t46 r1c2-t46">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code>or <code>'u'</code>. Only the upper triangular part of<code>A</code> is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. Only the lower triangular part of <code>A</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t46" headers="r1c1-t46">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t46 r1c2-t46">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t46" headers="r1c1-t46">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t46 r1c2-t46">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t46" headers="r1c1-t46">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t46 r1c2-t46">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,n)</code>. Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array A must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t46" headers="r1c1-t46">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t46 r1c2-t46">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t46" headers="r1c1-t46">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t46 r1c2-t46">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the n element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t46" headers="r1c1-t46">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t46 r1c2-t46">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t46" headers="r1c1-t46">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t46 r1c2-t46">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta. When <code>beta</code> is supplied as zero then <code>y</code> need not be set on input.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t46" headers="r1c1-t46">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t46 r1c2-t46">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incy))
</pre>
<p>Before entry, the incremented array <code>Y</code> must contain the n element vector <code>y</code>. On exit, <code>Y</code> is overwritten by the updated vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t46" headers="r1c1-t46">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t46 r1c2-t46">
<p>Specifies the increment for the elements of <code>y</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t46" headers="r1c1-t46">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t46 r1c2-t46">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71282" class="refsect2"><a id="CIAFBJAJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17396"></a>BLAS_SYR Procedures</h3>
<p>This procedure performs the rank 1 operation</p>
<pre>
A := alpha*x*x' + A
</pre>
<p>where <code>alpha</code> is a real scalar, <code>x</code> is an <code>n</code> element vector, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17397"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYR (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17398"></a>Parameters</p>
<div id="ARPLS71283" class="tblformal">
<p class="titleintable"><a id="sthref17399"></a><a id="sthref17400"></a>Table 232-27 BLAS_SYR Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYR Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t48">Parameter</th>
<th class="cellalignment1227" id="r1c2-t48">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t48" headers="r1c1-t48">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t48 r1c2-t48">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code>or <code>'u'</code> : Only the upper triangular part of <code>A</code> is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code>or <code>'l'</code> : Only the lower triangular part of A is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t48" headers="r1c1-t48">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t48 r1c2-t48">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t48" headers="r1c1-t48">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t48 r1c2-t48">
<p>Specifies the scalar alpha. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t48" headers="r1c1-t48">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t48 r1c2-t48">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1+(n-1)*abs(incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t48" headers="r1c1-t48">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t48 r1c2-t48">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t48" headers="r1c1-t48">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t48 r1c2-t48">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> <code>(lda, n)</code></p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>A</code> is not referenced. On exit, the upper triangular part of the array <code>A</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array <code>A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>A</code> is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t48" headers="r1c1-t48">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t48 r1c2-t48">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least</p>
<pre>
max( 1, n )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t48" headers="r1c1-t48">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t48 r1c2-t48">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71284" class="refsect2"><a id="CIAHBHJB"></a>
<hr />
<h3 class="refsect2"><a id="sthref17401"></a>BLAS_SYR2 Procedures</h3>
<p>This procedure performs the rank 2 operation</p>
<pre>
A := alpha*x*y' + alpha*y*x' + A
</pre>
<p>where <code>alpha</code> is a scalar, <code>x</code> and <code>y</code> are <code>n</code> element vectors, and <code>A</code> is an <code>n</code> by <code>n</code> symmetric matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17402"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DBL,
   x      IN      UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_DBL,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYR2 (
   uplo   IN      flag,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLT,
   x      IN      UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   y      IN      UTL_NLA_ARRAY_FLT,
   incy   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17403"></a>Parameters</p>
<div id="ARPLS71285" class="tblformal">
<p class="titleintable"><a id="sthref17404"></a><a id="sthref17405"></a>Table 232-28 BLAS_SYR2 Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYR2 Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t50">Parameter</th>
<th class="cellalignment1227" id="r1c2-t50">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t50" headers="r1c1-t50">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t50 r1c2-t50">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : Only the upper triangular part of <code>A</code> is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : Only the lower triangular part of <code>A</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t50" headers="r1c1-t50">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t50 r1c2-t50">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t50" headers="r1c1-t50">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t50 r1c2-t50">
<p>Specifies the scalar alpha. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t50" headers="r1c1-t50">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t50 r1c2-t50">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incx ) )
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the m element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t50" headers="r1c1-t50">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t50 r1c2-t50">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t50" headers="r1c1-t50">
<p><code>y</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t50 r1c2-t50">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 )*abs( incy ) )
</pre>
<p>Before entry, the incremented array <code>Y</code> must contain the m element vector <code>y</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t50" headers="r1c1-t50">
<p><code>incy</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t50 r1c2-t50">
<p>Specifies the increment for the elements of <code>y</code>. <code>incy</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t50" headers="r1c1-t50">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t50 r1c2-t50">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> <code>(lda, n)</code></p>
<p>With <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>A</code> is not referenced. On exit, the upper triangular part of the array <code>A</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>With <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array <code>A</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>A</code> is not referenced. On exit, the lower triangular part of the array A is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t50" headers="r1c1-t50">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t50 r1c2-t50">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least</p>
<pre>
max( 1, n )
</pre></td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t50" headers="r1c1-t50">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t50 r1c2-t50">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71286" class="refsect2"><a id="CIAJFDDD"></a>
<hr />
<h3 class="refsect2">BLAS_SYR2K Procedures</h3>
<p>This procedure performs one of the symmetric rank2 k operations</p>
<pre>
C := alpha*A*B' + alpha*B*A' + beta*C
</pre>
<p>or</p>
<pre>
C := alpha*A'*B + alpha*B'*A + beta*C
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and <code>A</code> and <code>B</code> are <code>n</code> by <code>k</code> matrices in the first case and <code>k</code> by <code>n</code> matrices in the second case.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17406"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYR2K (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN      UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYR2K (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_FLT,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17407"></a>Parameters</p>
<div id="ARPLS71287" class="tblformal">
<p class="titleintable"><a id="sthref17408"></a><a id="sthref17409"></a>Table 232-29 BLAS_SYR2K Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYR2K Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t52">Parameter</th>
<th class="cellalignment1227" id="r1c2-t52">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t52" headers="r1c1-t52">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t52 r1c2-t52">
<p>Specifies whether the upper or lower triangular part of the array <code>C</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : Only the upper triangular part of <code>C</code> is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : Only the lower triangular part of <code>C</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t52" headers="r1c1-t52">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t52 r1c2-t52">
<p>Specifies the operations to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'C</code> : <code>C := alpha*A*B' + alpha*B*A' + beta*C</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'C</code> : <code>C := alpha*A'*B + alpha*B'*A + beta*C</code></p>
</li>
<li>
<p><code>trans</code> = <code>'C'</code> or <code>'c'C</code> : <code>C := alpha*A'*B + alpha*B'*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t52" headers="r1c1-t52">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t52 r1c2-t52">
<p>Specifies the order of matrix <code>C</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t52" headers="r1c1-t52">
<p><code>k</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t52 r1c2-t52">
<p>On entry with <code>trans</code> = <code>'N'</code> or <code>'n'</code>, <code>k</code> specifies the number of columns of the matrices <code>A</code> and <code>B</code>. On entry with <code>trans</code> = <code>'T'</code> or <code>'t'</code> or <code>trans</code> = <code>'C'</code> or <code>'c'</code>, <code>k</code> specifies the number of rows of the matrices <code>A</code> and <code>B</code>. <code>k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t52" headers="r1c1-t52">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t52 r1c2-t52">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t52" headers="r1c1-t52">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t52 r1c2-t52">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> <code>(lda,ka)</code> where <code>kb</code> is <code>k</code> when <code>trans</code> = <code>'N'</code> or <code>'n'</code>, and is <code>n</code> otherwise.</p>
<p>Before entry with <code>trans</code> = <code>'N'</code> or <code>'n'</code>, the leading <code>n</code> by<code>k</code> part of the array <code>A</code> must contain the matrix <code>A</code>, otherwise the leading <code>k</code> by <code>n</code> part of the array <code>A</code> must contain the matrix <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t52" headers="r1c1-t52">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When <code>trans = 'N' or 'n'</code>, <code>lda</code> must be at least<code>max(1,n)</code>, otherwise <code>lda</code> must be at least <code>max(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t52" headers="r1c1-t52">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t52 r1c2-t52">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> <code>(lda,kb)</code> where <code>kb</code> is <code>k</code> when <code>trans</code> = <code>'N'</code> or <code>'n'</code>, and is <code>n</code> otherwise.</p>
<p>Before entry with <code>trans</code> = <code>'N'</code> or <code>'n'</code>, the leading <code>n</code> by<code>k</code> part of the array <code>B</code> must contain the matrix <code>B</code>, otherwise the leading <code>k</code> by <code>n</code> part of the array <code>B</code> must contain the matrix B.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t52" headers="r1c1-t52">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code>b</code> as declared in the calling (sub) program. When <code>trans = 'N' or 'n'</code>, <code>ldb</code> must be at least <code>max</code> <code>(1,n)</code>, otherwise <code>ldb</code> must be at least <code>max</code> <code>(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t52" headers="r1c1-t52">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t52 r1c2-t52">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t52" headers="r1c1-t52">
<p>c</p>
</td>
<td class="cellalignment1228" headers="r12c1-t52 r1c2-t52">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (ldc,n)</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>C</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>C</code> is not referenced. On exit, the upper triangular part of the array <code>C</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading n by n lower triangular part of the array <code>C</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>C</code> is not referenced. On exit, the lower triangular part of the array <code>C</code> is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t52" headers="r1c1-t52">
<p><code>ldc</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t52 r1c2-t52">
<p>Specifies the first dimension of <code>C</code> as declared in the calling (sub) program. <code>ldc</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t52" headers="r1c1-t52">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t52 r1c2-t52">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71288" class="refsect2"><a id="CIABCBAG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17410"></a>BLAS_SYRK Procedures</h3>
<p>This procedure performs one of the symmetric rank k operations</p>
<pre>
C := alpha*A*A' + beta*C
</pre>
<p>or</p>
<pre>
C := alpha*A'*A + beta*C
</pre>
<p>where <code>alpha</code> and <code>beta</code> are scalars, <code>C</code> is an <code>n</code> by <code>n</code> symmetric matrix and<code>A</code> is an <code>n</code> by <code>k</code> matrix in the first case and a <code>k</code> by<code>n</code> matrix in the second case.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17411"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_SYRK (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   beta   IN      SCALAR_DOUBLE,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_SYRK (
   uplo   IN      flag,
   trans  IN      flag,
   n      IN      POSITIVEN,
   k      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   beta   IN      SCALAR_FLOAT,
   c      IN OUT  UTL_NLA_ARRAY_DBL,
   ldc    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17412"></a>Parameters</p>
<div id="ARPLS71289" class="tblformal">
<p class="titleintable"><a id="sthref17413"></a><a id="sthref17414"></a>Table 232-30 BLAS_SYRK Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_SYRK Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t54">Parameter</th>
<th class="cellalignment1227" id="r1c2-t54">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t54" headers="r1c1-t54">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t54 r1c2-t54">
<p>Specifies whether the upper or lower triangular part of the array <code>C</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : Only the upper triangular part of <code>C</code> is to be referenced.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : Only the lower triangular part of <code>C</code> is to be referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t54" headers="r1c1-t54">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t54 r1c2-t54">
<p>Specifies the operations to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'</code> : <code>C := alpha*A*A' + beta*C</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'</code> : <code>C := alpha*A'*A + beta*C</code></p>
</li>
<li>
<p><code>trans</code> =<code>'C'</code> or <code>'c'</code> : <code>C := alpha*A'*A + beta*C</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t54" headers="r1c1-t54">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t54 r1c2-t54">
<p>Specifies the order of matrix <code>C</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t54" headers="r1c1-t54">
<p><code>k</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t54 r1c2-t54">
<p>On entry with <code>trans</code> = <code>'N'</code> or <code>'n'</code>, <code>k</code> specifies the number of columns of the matrix <code>A</code>. On entry with <code>trans</code> = <code>'T'</code> or <code>'t'</code> or <code>trans</code> = <code>'C'</code> or <code>'c'</code>, <code>k</code> specifies the number of rows of the matrix <code>A</code>. <code>k</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t54" headers="r1c1-t54">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t54 r1c2-t54">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t54" headers="r1c1-t54">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t54 r1c2-t54">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,ka)</code> where <code>ka</code> is k when <code>trans</code> = <code>'N'</code> or <code>'n'</code>, and is <code>n</code> otherwise.</p>
<p>Before entry with <code>trans</code> = <code>'N'</code> or <code>'n'</code>, the leading <code>n</code> by<code>k</code> part of the array <code>A</code> must contain the matrix <code>A</code>, otherwise the leading <code>k</code> by <code>n</code> part of the array <code>A</code> must contain the matrix A.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t54" headers="r1c1-t54">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t54 r1c2-t54">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When <code>trans = 'N' or 'n'</code>, <code>lda</code> must be at least <code>max(1,n)</code>, otherwise<code>lda</code> must be at least <code>max(1,k)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t54" headers="r1c1-t54">
<p><code>beta</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t54 r1c2-t54">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar beta.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t54" headers="r1c1-t54">
<p>c</p>
</td>
<td class="cellalignment1228" headers="r10c1-t54 r1c2-t54">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (ldc,n)</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>C</code> must contain the upper triangular part of the symmetric matrix and the strictly lower triangular part of <code>C</code> is not referenced. On exit, the upper triangular part of the array <code>C</code> is overwritten by the upper triangular part of the updated matrix.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading n by n lower triangular part of the array <code>C</code> must contain the lower triangular part of the symmetric matrix and the strictly upper triangular part of <code>C</code> is not referenced. On exit, the lower triangular part of the array <code>C</code> is overwritten by the lower triangular part of the updated matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t54" headers="r1c1-t54">
<p><code>ldc</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t54 r1c2-t54">
<p>Specifies the first dimension of <code>C</code> as declared in the calling (sub) program. <code>ldc</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t54" headers="r1c1-t54">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t54 r1c2-t54">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71290" class="refsect2"><a id="CIAFEEGF"></a>
<hr />
<h3 class="refsect2"><a id="sthref17415"></a>BLAS_TBMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre>
x := A*x
</pre>
<p>or</p>
<pre>
x := A'*x
</pre>
<p>where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular band matrix, with <code>(k+1)</code> diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17416"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17417"></a>Parameters</p>
<div id="ARPLS71291" class="tblformal">
<p class="titleintable"><a id="sthref17418"></a><a id="sthref17419"></a>Table 232-31 BLAS_TBMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TBMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t56">Parameter</th>
<th class="cellalignment1227" id="r1c2-t56">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t56" headers="r1c1-t56">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t56 r1c2-t56">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t56" headers="r1c1-t56">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t56 r1c2-t56">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'</code><code>x</code> := <code>A</code>*x</p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'x := A'*x</code></p>
</li>
<li>
<p><code>trans</code> = <code>'C'</code> or <code>'c'x := A'*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t56" headers="r1c1-t56">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t56 r1c2-t56">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t56" headers="r1c1-t56">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t56 r1c2-t56">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t56" headers="r1c1-t56">
<p><code>k</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t56 r1c2-t56">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p>with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, <code>K</code> specifies the number of super-diagonals of the matrix <code>A</code>.</p>
</li>
<li>
<p>with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, <code>K</code> specifies the number of sub-diagonals of the matrix <code>A</code>.</p>
</li>
</ul>
<p>K must satisfy <code>0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t56" headers="r1c1-t56">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t56 r1c2-t56">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> ( <code>lda</code>, <code>n</code> ).</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row<code>(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code>k</code>, and so on. The top left <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = '<code>'U'</code> or <code>'u'</code>, the elements of the array <code>A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t56" headers="r1c1-t56">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t56 r1c2-t56">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>(k+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t56" headers="r1c1-t56">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t56 r1c2-t56">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least <code>(1+(n-1)*abs(incx))</code>. Before entry, the incremented array <code>X</code> must contain the <code>n</code> element vector <code>x</code>. On exit, <code>X</code> is overwritten with the transformed vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t56" headers="r1c1-t56">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t56 r1c2-t56">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t56" headers="r1c1-t56">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t56 r1c2-t56">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71292" class="refsect2"><a id="CIACICEE"></a>
<hr />
<h3 class="refsect2"><a id="sthref17420"></a>BLAS_TBSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre>
A*x = b
</pre>
<p>or</p>
<pre>
A'*x = b
</pre>
<p>where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by n unit, or non-unit, upper or lower triangular band matrix, with <code>(k+1)</code> diagonals.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17421"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TBSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_STBSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   k      IN      NATURALN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17422"></a>Parameters</p>
<div id="ARPLS71293" class="tblformal">
<p class="titleintable"><a id="sthref17423"></a><a id="sthref17424"></a>Table 232-32 BLAS_TBSV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t58">Parameter</th>
<th class="cellalignment1227" id="r1c2-t58">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t58" headers="r1c1-t58">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t58 r1c2-t58">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = '<code>'U'</code> or <code>'u'</code>. <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t58" headers="r1c1-t58">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t58 r1c2-t58">
<p>Specifies the equations to be solved:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n : 'A*x = b</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t': A'*x = b</code></p>
</li>
<li>
<p><code>trans</code> = '<code>C'</code> or <code>'c': A'*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t58" headers="r1c1-t58">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t58 r1c2-t58">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code> : A is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code> : <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t58" headers="r1c1-t58">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t58 r1c2-t58">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t58" headers="r1c1-t58">
<p><code>k</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t58 r1c2-t58">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p>with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, <code>K</code> specifies the number of super-diagonals of the matrix <code>A</code>.</p>
</li>
<li>
<p>with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, <code>K</code> specifies the number of sub-diagonals of the matrix <code>A</code>.</p>
</li>
</ul>
<p>K must satisfy <code>0 .le. k</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t58" headers="r1c1-t58">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t58 r1c2-t58">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code>(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code>k</code>, and so on. The top left <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the elements of the array <code>A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t58" headers="r1c1-t58">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t58 r1c2-t58">
<p>On entry, <code>lda</code> specifies the first dimension of <code>A</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>(k+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t58" headers="r1c1-t58">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t58 r1c2-t58">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 ) *abs( incx ) )
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the <code>n</code> element right-hand side vector <code>b</code>.</p>
<p>On exit, <code>X</code> is overwritten with the solution vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t58" headers="r1c1-t58">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t58 r1c2-t58">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t58" headers="r1c1-t58">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t58 r1c2-t58">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17425"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71294" class="refsect2"><a id="CIAIFFDD"></a>
<hr />
<h3 class="refsect2"><a id="sthref17426"></a>BLAS_TPMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre>
x := A*x
</pre>
<p>or</p>
<pre>
x := A'*x
</pre>
<p>where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17427"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TPMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TBMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17428"></a>Parameters</p>
<div id="ARPLS71295" class="tblformal">
<p class="titleintable"><a id="sthref17429"></a><a id="sthref17430"></a>Table 232-33 BLAS_TPMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TPMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t60">Parameter</th>
<th class="cellalignment1227" id="r1c2-t60">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t60" headers="r1c1-t60">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t60 r1c2-t60">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t60" headers="r1c1-t60">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t60 r1c2-t60">
<p>Specifies the operation to e performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'</code><code>x</code> := <code>A*x</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'x := A'*x</code></p>
</li>
<li>
<p><code>trans</code> = <code>'C'</code> or <code>'c'x := A'*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t60" headers="r1c1-t60">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t60 r1c2-t60">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t60" headers="r1c1-t60">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t60 r1c2-t60">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t60" headers="r1c1-t60">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t60 r1c2-t60">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,n)</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the upper triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row <code>(k+1)</code> of the array, the first super-diagonal starting at position 2 in row <code>k</code>, and so on. The top left <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>(k+1)</code> by <code>n</code> part of the array <code>A</code> must contain the lower triangular band part of the matrix of coefficients, supplied column by column, with the leading diagonal of the matrix in row 1 of the array, the first sub-diagonal starting at position 1 in row 2, and so on. The bottom right <code>k</code> by <code>k</code> triangle of the array <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the elements of the array <code>A</code> corresponding to the diagonal elements of the matrix are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t60" headers="r1c1-t60">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t60 r1c2-t60">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least <code>(1+(n-1)*abs(incx))</code>. Before entry, the incremented array <code>X</code> must contain the <code>n</code> element vector <code>x</code>. On exit, <code>X</code> is overwritten with the transformed vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t60" headers="r1c1-t60">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t60 r1c2-t60">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t60" headers="r1c1-t60">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t60 r1c2-t60">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71296" class="refsect2"><a id="CIACJJHC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17431"></a>BLAS_TPSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre>
A*x = b
</pre>
<p>or</p>
<pre>
A'*x = b
</pre>
<p>where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an <code>n</code> by n unit, or non-unit, upper or lower triangular matrix, supplied in packed form.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17432"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TPSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_DBL,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TPSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   ap     IN      UTL_NLA_ARRAY_FLT,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17433"></a>Parameters</p>
<div id="ARPLS71297" class="tblformal">
<p class="titleintable"><a id="sthref17434"></a><a id="sthref17435"></a>Table 232-34 BLAS_TPSV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t62">Parameter</th>
<th class="cellalignment1227" id="r1c2-t62">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t62" headers="r1c1-t62">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t62 r1c2-t62">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t62" headers="r1c1-t62">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t62 r1c2-t62">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n' : A*x = b</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t' : A'*x = b</code></p>
</li>
<li>
<p><code>trans</code> = '<code>C'</code> or <code>'c' : A'*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t62" headers="r1c1-t62">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t62 r1c2-t62">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code> : <code>A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code> : <code>'A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t62" headers="r1c1-t62">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t62 r1c2-t62">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t62" headers="r1c1-t62">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t62 r1c2-t62">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
((n*(n+1))/2)
</pre>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the array <code>ap</code> must contain the upper triangular matrix packed sequentially, column by column, so that <code>ap(1)</code> contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(1,2)</code> and <code>a(2,2)</code> respectively, and so on.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the array <code>ap</code> must contain the lower triangular matrix packed sequentially, column by column, so that <code>ap(1)</code> contains <code>a(1,1)</code>, <code>ap(2)</code> and <code>ap(3)</code> contain <code>a(2,1)</code> and <code>a(3,1)</code> respectively, and so on.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the diagonal elements of <code>A</code> are not referenced, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t62" headers="r1c1-t62">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t62 r1c2-t62">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
( 1 + ( n - 1 ) *abs( incx ) )
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the <code>n</code> element right-hand side vector <code>b</code>. On exit, <code>X</code> is overwritten with the solution vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t62" headers="r1c1-t62">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t62 r1c2-t62">
<p>Specifies the increment for the elements of <code>x</code>. <code>incx</code> must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t62" headers="r1c1-t62">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t62 r1c2-t62">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17436"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71298" class="refsect2"><a id="CIAEJGDI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17437"></a>BLAS_TRMM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre>
B := alpha*op( A )*B
</pre>
<p>or</p>
<pre>
B := alpha*B*op( A )
</pre>
<p>where <code>alpha</code> is a scalar, <code>B</code> is an <code>m</code> by <code>n</code> matrix, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix and <code>op(A)</code> is one of</p>
<pre>
op( A ) = A
</pre>
<p>or</p>
<pre>
op( A ) = A'
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17438"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TRMM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TRMM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17439"></a>Parameters</p>
<div id="ARPLS71299" class="tblformal">
<p class="titleintable"><a id="sthref17440"></a><a id="sthref17441"></a>Table 232-35 BLAS_TRMM Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TRMM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t64">Parameter</th>
<th class="cellalignment1227" id="r1c2-t64">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t64" headers="r1c1-t64">
<p><code>side</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t64 r1c2-t64">
<p>Specifies whether the symmetric matrix <code>A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code>side</code> = <code>'L'</code> or <code>'l'</code> : <code>B := alpha*op(A)*B</code></p>
</li>
<li>
<p><code>side</code> = <code>'R'</code> or <code>'r'</code> : <code>B := alpha*B*op(A)</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t64" headers="r1c1-t64">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t64 r1c2-t64">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>' : <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t64" headers="r1c1-t64">
<p><code>transa</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t64 r1c2-t64">
<p>Specifies the form of <code>op</code><code>(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code>transa</code> = <code>'N'</code> or <code>'n'</code> : <code>op(A) = A</code></p>
</li>
<li>
<p><code>transa</code> = <code>'T'</code> or <code>'t'</code> : <code>op(A) = A'</code></p>
</li>
<li>
<p><code>transa</code> =<code>'C'</code> or <code>'c'</code> : <code>op(A) = A'</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t64" headers="r1c1-t64">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t64 r1c2-t64">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t64" headers="r1c1-t64">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t64 r1c2-t64">
<p>Specifies the number of rows of the <code>B</code>. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t64" headers="r1c1-t64">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t64 r1c2-t64">
<p>Specifies the number of columns of <code>B</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t64" headers="r1c1-t64">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t64 r1c2-t64">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha. When <code>alpha</code> is zero then <code>A</code> is not referenced and <code>B</code> need not be set before entry.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t64" headers="r1c1-t64">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t64 r1c2-t64">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (lda,k)</code> where <code>k</code> is m when <code>side</code> = <code>'L'</code> or <code>'l'</code>, and is <code>n</code> when <code>side</code> = '<code>'R'</code> or <code>'r'</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code> , the leading <code>k</code> by <code>k</code> upper triangular part of the array <code>A</code> must contain the upper triangular matrix, and the strictly lower triangular part of A is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>k</code> by<code>k</code> lower triangular part of the array <code>A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = '<code>'U'</code> or <code>'u'</code>, the diagonal elements of <code>A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t64" headers="r1c1-t64">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t64 r1c2-t64">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When <code>side = 'L' or 'l'</code>, <code>lda</code> must be at least <code>max(1,m)</code>, otherwise <code>lda</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t64" headers="r1c1-t64">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t64 r1c2-t64">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION (ldb,n)</code>.</p>
<p>Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>B</code> must contain the matrix <code>B</code>, and on exit is overwritten by the transformed matrix.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t64" headers="r1c1-t64">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t64 r1c2-t64">
<p>Specifies the first dimension of <code>b</code> as declared in the calling (sub) program. <code>ldb</code> must be at least <code>max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t64" headers="r1c1-t64">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t64 r1c2-t64">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71300" class="refsect2"><a id="CIAHFEBJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17442"></a>BLAS_TRMV Procedures</h3>
<p>This procedure performs the matrix-vector operations</p>
<pre>
x := A*x
</pre>
<p>or</p>
<pre>
x := A'*x
</pre>
<p>where <code>x</code> is an <code>n</code> element vector and <code>A</code> is an <code>n</code> by <code>n</code> unit, or non-unit, upper or lower triangular matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17443"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TRMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TRMV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17444"></a>Parameters</p>
<div id="ARPLS71301" class="tblformal">
<p class="titleintable"><a id="sthref17445"></a><a id="sthref17446"></a>Table 232-36 BLAS_TRMV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TRMV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t66">Parameter</th>
<th class="cellalignment1227" id="r1c2-t66">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t66" headers="r1c1-t66">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t66 r1c2-t66">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t66" headers="r1c1-t66">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t66 r1c2-t66">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'</code><code>x</code> := <code>A</code>*x</p>
</li>
<li>
<p><code>trans</code>= <code>'T'</code> or <code>'t'x := A'*x</code></p>
</li>
<li>
<p><code>trans</code> = <code>'C'</code> or <code>'c'x := A'*x</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t66" headers="r1c1-t66">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t66 r1c2-t66">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t66" headers="r1c1-t66">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t66 r1c2-t66">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t66" headers="r1c1-t66">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t66 r1c2-t66">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (<code>lda</code>, <code>n</code> ).</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular matrix and the strictly lower triangular part of <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array <code>A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the diagonal elements of <code>A</code> are not referenced either, but are assumed to be unity</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t66" headers="r1c1-t66">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t66 r1c2-t66">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t66" headers="r1c1-t66">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t66 r1c2-t66">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least<code>(1+(n-1)*as(incx))</code>. Before entry, the incremented array <code>X</code> must contain the <code>n</code> element vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t66" headers="r1c1-t66">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t66 r1c2-t66">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t66" headers="r1c1-t66">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t66 r1c2-t66">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71302" class="refsect2"><a id="CIAHHHFD"></a>
<hr />
<h3 class="refsect2"><a id="sthref17447"></a>BLAS_TRSM Procedures</h3>
<p>This procedure performs one of the matrix-matrix operations</p>
<pre>
op( A )*X = alpha*B
</pre>
<p>or</p>
<pre>
X*op( A ) = alpha*B
</pre>
<p>where <code>alpha</code> is a scalar, <code>X</code> and <code>B</code> are <code>m</code> by <code>n</code> matrices, <code>A</code> is a unit, or non-unit, upper or lower triangular matrix and <code>op(A)</code> is one of</p>
<pre>
op( A ) = A
</pre>
<p>or</p>
<pre>
op( A ) = A'
</pre>
<p>The matrix <code>X</code> is overwritten on <code>B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAIJHCF">BLAS Level 3 (Matrix-Matrix Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17448"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TRSM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_DOUBLE,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TRSM (
   side   IN      flag,
   uplo   IN      flag,
   transa IN      flag,
   diag   IN      flag,
   m      IN      POSITIVEN,
   n      IN      POSITIVEN,
   alpha  IN      SCALAR_FLOAT,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17449"></a>Parameters</p>
<div id="ARPLS71303" class="tblformal">
<p class="titleintable"><a id="sthref17450"></a><a id="sthref17451"></a>Table 232-37 BLAS_TRSM Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TRSM Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t68">Parameter</th>
<th class="cellalignment1227" id="r1c2-t68">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t68" headers="r1c1-t68">
<p><code>side</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t68 r1c2-t68">
<p>Specifies whether the symmetric matrix <code>A</code> appears on the left or right in the operation:</p>
<ul>
<li>
<p><code>side</code> = <code>'L'</code> or <code>'l'</code> : <code>op(A)*X = alpha*B</code></p>
</li>
<li>
<p><code>side</code> = '<code>R</code>' or 'r' : <code>X*op(A) = alpha*B</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t68" headers="r1c1-t68">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t68 r1c2-t68">
<p>Specifies whether the upper or lower triangular part of the array <code>A</code> is to be referenced:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code> : <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code> : <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t68" headers="r1c1-t68">
<p><code>transa</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t68 r1c2-t68">
<p>Specifies the form of <code>op</code><code>(A)</code> to be used in the matrix multiplication as follows:</p>
<ul>
<li>
<p><code>transa</code> = <code>'N'</code> or <code>'n'</code> : <code>op(A) = A</code></p>
</li>
<li>
<p><code>transa</code> =<code>'T'</code> or <code>'t'</code> : <code>op(A) = A'</code></p>
</li>
<li>
<p><code>transa</code> = '<code>C</code>' or '<code>c</code>' : <code>op(A) = A'</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t68" headers="r1c1-t68">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t68 r1c2-t68">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t68" headers="r1c1-t68">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t68 r1c2-t68">
<p>Specifies the number of rows of the <code>B</code>. <code>m</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t68" headers="r1c1-t68">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t68 r1c2-t68">
<p>Specifies the number of columns of <code>B</code>. <code>n</code> must be at least zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t68" headers="r1c1-t68">
<p><code>alpha</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t68 r1c2-t68">
<p><code>SCALAR_FLOAT</code>/<code>DOUBLE</code>. Specifies the scalar alpha. When <code>alpha</code> is zero then <code>A</code> is not referenced and <code>B</code> need not be set before entry.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t68" headers="r1c1-t68">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t68 r1c2-t68">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (lda, <code>k</code>) where <code>k</code> is <code>m</code> when <code>side</code> = <code>'L'</code> or <code>'l'</code>, and is <code>n</code> when <code>side</code> = '<code>R</code>' or <code>'r'</code>.</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>k</code> by <code>k</code> upper triangular part of the array <code>A</code> must contain the upper triangular matrix, and the strictly lower triangular part of <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>k</code> by <code>k</code> lower triangular part of the array <code>A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the diagonal elements of <code>A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t68" headers="r1c1-t68">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t68 r1c2-t68">
<p>Specifies the first dimension of <code>a</code> as declared in the calling (sub) program. When <code>side = 'L' or 'l'</code>, <code>lda</code> must be at least <code>max</code>(1, <code>m</code>), otherwise <code>lda</code> must be at least <code>max</code> (1, <code>n</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t68" headers="r1c1-t68">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t68 r1c2-t68">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (ldb, <code>n</code>).</p>
<p>Before entry, the leading <code>m</code> by <code>n</code> part of the array <code>B</code> must contain the matrix <code>B</code>, and on exit is overwritten by the solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t68" headers="r1c1-t68">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t68 r1c2-t68">
<p>Specifies the first dimension of <code>b</code> as declared in the calling (sub) program. <code>ldb</code> must be at least <code>max</code>(1, <code>m</code>).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t68" headers="r1c1-t68">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t68 r1c2-t68">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71304" class="refsect2"><a id="CIABJIEI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17452"></a>BLAS_TRSV Procedures</h3>
<p>This procedure solves one of the systems of equations</p>
<pre>
A*x = b
</pre>
<p>or</p>
<pre>
A'*x = b
</pre>
<p>where <code>b</code> and <code>x</code> are <code>n</code> element vectors and <code>A</code> is an n by <code>n</code> unit, or non-unit, upper or lower triangular matrix.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIACEIDA">BLAS Level 2 (Matrix-Vector Operations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17453"></a>Syntax</p>
<pre>
UTL_NLA.BLAS_TRSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_DBL,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.BLAS_TRSV (
   uplo   IN      flag,
   trans  IN      flag,
   diag   IN      flag,
   n      IN      POSITIVEN,
   a      IN      UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   x      IN OUT  UTL_NLA_ARRAY_FLT,
   incx   IN      POSITIVEN,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17454"></a>Parameters</p>
<div id="ARPLS71305" class="tblformal">
<p class="titleintable"><a id="sthref17455"></a><a id="sthref17456"></a>Table 232-38 BLAS_TRSV Procedure Parameters</p>
<table class="cellalignment1229" title="BLAS_TRSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t70">Parameter</th>
<th class="cellalignment1227" id="r1c2-t70">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t70" headers="r1c1-t70">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t70 r1c2-t70">
<p>Specifies whether the matrix is an upper or lower triangular matrix:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code> or <code>'u'</code>. <code>A</code> is an upper triangular matrix.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> or <code>'l'</code>. <code>A</code> is a lower triangular matrix.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t70" headers="r1c1-t70">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t70 r1c2-t70">
<p>Specifies the operation to be performed:</p>
<ul>
<li>
<p><code>trans</code> = <code>'N'</code> or <code>'n'A*x = b</code></p>
</li>
<li>
<p><code>trans</code> = <code>'T'</code> or <code>'t'A'*x = b</code></p>
</li>
<li>
<p><code>trans</code> = '<code>C'</code> or <code>'c'A'*x = b</code></p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t70" headers="r1c1-t70">
<p><code>diag</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t70 r1c2-t70">
<p>Specifies whether or not <code>A</code> is unit triangular:</p>
<ul>
<li>
<p><code>diag</code> = <code>'U'</code> or <code>'u'</code>. A is assumed to be unit triangular.</p>
</li>
<li>
<p><code>diag</code> = <code>'N'</code> or <code>'n'</code>. <code>A</code> is not assumed to be unit triangular.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t70" headers="r1c1-t70">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t70 r1c2-t70">
<p>Specifies the order of the matrix <code>A</code>. <code>n</code> must be at least zero. &nbsp;</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t70" headers="r1c1-t70">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t70 r1c2-t70">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of <code>DIMENSION</code> (<code>lda</code>, <code>n</code>).</p>
<p>Before entry with <code>uplo</code> = <code>'U'</code> or <code>'u'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of the array <code>A</code> must contain the upper triangular matrix and the strictly lower triangular part of <code>A</code> is not referenced.</p>
<p>Before entry with <code>uplo</code> = <code>'L'</code> or <code>'l'</code>, the leading <code>n</code> by <code>n</code> lower triangular part of the array <code>A</code> must contain the lower triangular matrix and the strictly upper triangular part of <code>A</code> is not referenced.</p>
<p>Note that when <code>diag</code> = <code>'U'</code> or <code>'u'</code>, the diagonal elements of <code>A</code> are not referenced either, but are assumed to be unity.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t70" headers="r1c1-t70">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t70 r1c2-t70">
<p>Specifies the first dimension of <code>A</code> as declared in the calling (sub) program. <code>lda</code> must be at least <code>max</code>(1, n).</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t70" headers="r1c1-t70">
<p><code>x</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t70 r1c2-t70">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL</code> of dimension at least</p>
<pre>
(1 + (n - 1) * abs (incx))
</pre>
<p>Before entry, the incremented array <code>X</code> must contain the <code>n</code> element right-hand side vector <code>b</code>. On exit, <code>X</code> is overwritten with the solution vector <code>x</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t70" headers="r1c1-t70">
<p><code>incx</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t70 r1c2-t70">
<p>Specifies the increment for the elements of <code>x</code>. Must not be zero.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t70" headers="r1c1-t70">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t70 r1c2-t70">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17457"></a>Usage Notes</p>
<p>No test for singularity or near-singularity is included in this routine. Such tests must be performed before calling this routine.</p>
</div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71306" class="refsect2"><a id="CIABIIEB"></a>
<hr />
<h3 class="refsect2"><a id="sthref17458"></a>LAPACK_GBSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is a band matrix of order <code>n</code> with <code>kl</code> sub diagonals and <code>ku</code> superdiagonals, and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
<p>The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code> as</p>
<pre>
a = L * U
</pre>
<p>where L is a product of permutation and unit lower triangular matrices with kl sub diagonals, and <code>U</code> is upper triangular with <code>kl+ku</code> superdiagonals. The factored form of <code>a</code> is then used to solve the system of equations</p>
<pre>
a * x = b
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17459"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GBSV (
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   nrhs   IN      POSITIVEN,
   ab     IN OUT  UTL_NLA_ARRAY_DBL,
   ldab   IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info   OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GBSV (
   n      IN      POSITIVEN,
   kl     IN      NATURALN,
   ku     IN      NATURALN,
   nrhs   IN      POSITIVEN,
   ab     IN OUT  UTL_NLA_ARRAY_FLT,
   ldab   IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info   OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17460"></a>Parameters</p>
<div id="ARPLS71307" class="tblformal">
<p class="titleintable"><a id="sthref17461"></a><a id="sthref17462"></a>Table 232-39 LAPACK_GBSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t72">Parameter</th>
<th class="cellalignment1227" id="r1c2-t72">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t72" headers="r1c1-t72">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t72 r1c2-t72">
<p>The number of linear equations, equivalent to the order of the matrix<code>a</code> .<code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t72" headers="r1c1-t72">
<p><code>kl</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t72 r1c2-t72">
<p>The number of sub diagonals within the band of a. <code>kl &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t72" headers="r1c1-t72">
<p><code>ku</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t72 r1c2-t72">
<p>The number of superdiagonals within the band of <code>a</code> . <code>ku &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t72" headers="r1c1-t72">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t72 r1c2-t72">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t72" headers="r1c1-t72">
<p><code>ab</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t72 r1c2-t72">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the matrix a in band storage, in rows <code>kl+1</code> to <code>2*kl+ku+1</code>; rows <code>1</code> to <code>kl</code> of the array need not be set. The <code>j</code>-th column of A is stored in the <code>j</code>-th column of the array <code>ab</code>:</p>
<p><code>ab(kl+ku+1+i-j,j) = a(i,j)</code> for <code>max(1,j-ku)&lt;=i&lt;=min(n,j+kl)</code></p>
<p>On exit, details of the factorization: <code>U</code> is stored as an upper triangular band matrix with <code>kl+ku</code> superdiagonals in rows <code>1</code> to <code>KL+KU+1</code>, and the multipliers used during the factorization are stored in rows:</p>
<p><code>kl+ku+2</code> to <code>2*kl+ku+1</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t72" headers="r1c1-t72">
<p><code>ldab</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t72 r1c2-t72">
<p>The leading dimension of the array ab.</p>
<p><code>ldab &gt;= 2*kl+ku+1</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t72" headers="r1c1-t72">
<p><code>ipiv</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t72 r1c2-t72">
<p><code>INTEGER</code> array, <code>DIMENSION (n)</code>.</p>
<p>The pivot indices that define the permutation matrix <code>P</code>; row <code>i</code>of the matrix was interchanged with row <code>ipiv(i)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t72" headers="r1c1-t72">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t72 r1c2-t72">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t72" headers="r1c1-t72">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t72 r1c2-t72">
<p>The leading dimension of the array b.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t72" headers="r1c1-t72">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t72 r1c2-t72">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, <code>U(i,i)</code> is exactly zero. The factorization has been completed, but the factor <code>U</code> is exactly singular, and the solution has not been computed</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t72" headers="r1c1-t72">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t72 r1c2-t72">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71308" class="refsect2"><a id="CIADGHHA"></a>
<hr />
<h3 class="refsect2"><a id="sthref17463"></a>LAPACK_GEES Procedures</h3>
<p>This procedure computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues, the real Schur form <code>T</code>, and, optionally, the matrix of Schur vectors <code>Z</code>. This gives the Schur factorization <code>A = Z*T*(Z**T)</code>.</p>
<p>A matrix is in real Schur form if it is upper quasi-triangular with <code>1</code> by <code>1</code> and <code>2</code> by <code>2</code> blocks. <code>2</code> by <code>2</code> blocks will be standardized in the form</p>
<p><code>[ a b ]</code></p>
<p><code>[ c a ]</code></p>
<p>where <code>b*c &lt; 0</code>. The eigenvalues of such a block are <code>a +- sqrt(bc)</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17464"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GEES (
   jobvs   IN       flag,
   n       IN       POSITIVEN,
   a       IN  OUT  UTL_NLA_ARRAY_DBL,
   lda     IN       POSITIVEN,
   wr      IN OUT   UTL_NLA_ARRAY_DBL,
   wi      IN OUT   UTL_NLA_ARRAY_DBL,
   vs      IN OUT   UTL_NLA_ARRAY_DBL,
   ldvs    IN       POSITIVEN,
   info    OUT      INTEGER,
   pack    IN       flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GEES (
   jobvs   IN       flag,
   n       IN       POSITIVEN,
   a       IN OUT   UTL_NLA_ARRAY_FLT,
   lda     IN       POSITIVEN,
   wr      IN       OUT UTL_NLA_ARRAY_FLT,
   wi      IN       OUT UTL_NLA_ARRAY_FLT,
   vs      IN OUT   UTL_NLA_ARRAY_FLT,
   ldvs    IN       POSITIVEN,
   info    OUT      integer,
   pack    IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17465"></a>Parameters</p>
<div id="ARPLS71309" class="tblformal">
<p class="titleintable"><a id="sthref17466"></a><a id="sthref17467"></a>Table 232-40 LAPACK_GEES Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GEES Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GEES subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t74">Parameter</th>
<th class="cellalignment1227" id="r1c2-t74">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t74" headers="r1c1-t74">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t74 r1c2-t74">
<ul>
<li>
<p><code>'N'</code>: Schur vectors are not computed.</p>
</li>
<li>
<p><code>'V'</code>: Schur vectors are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t74" headers="r1c1-t74">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t74 r1c2-t74">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t74" headers="r1c1-t74">
<p>a</p>
</td>
<td class="cellalignment1228" headers="r4c1-t74 r1c2-t74">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (lda, n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>n</code> by <code>n</code> matrix <code>A</code>.</p>
</li>
<li>
<p>On exit, <code>A</code> has been overwritten by its real Schur form <code>T</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t74" headers="r1c1-t74">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t74 r1c2-t74">
<p>The leading dimension of the array <code>a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t74" headers="r1c1-t74">
<p><code>wr</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t74 r1c2-t74">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p><code>wr</code> and <code>wi</code> contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form <code>T</code>. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t74" headers="r1c1-t74">
<p><code>wi</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t74 r1c2-t74">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz, n)</code>.</p>
<p><code>wr</code> and <code>wi</code> contain the real and imaginary parts respectively of the computed eigenvalues in the same order that they appear on the diagonal of the output Schur form <code>T</code>. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t74" headers="r1c1-t74">
<p><code>vs</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t74 r1c2-t74">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code>jobvs = 'V'</code>, <code>vs</code> contains the orthogonal matrix <code>Z</code> of Schur vectors.</p>
</li>
<li>
<p>If <code>jobvs = 'N'</code>, <code>vs</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t74" headers="r1c1-t74">
<p><code>ldvs</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t74 r1c2-t74">
<p>The leading dimension of the array <code>vs</code>. <code>VS. ldvs &gt;= 1</code>. If <code>jobvs = 'V'</code>, <code>ldvs &gt;= N</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t74" headers="r1c1-t74">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t74 r1c2-t74">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, and <code>i</code> is <code>&lt;= N</code>: the QR algorithm failed to compute all the eigenvalues. Elements <code>1:ILO-1</code> and <code>i+1:N</code> of <code>wr</code> and <code>wi</code> contain those eigenvalues which have converged. If <code>jobvs = 'V'</code>, <code>vs</code> contains the matrix which reduces <code>A</code> to its partially converged Schur form.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t74" headers="r1c1-t74">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t74 r1c2-t74">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71310" class="refsect2"><a id="CIADBIAE"></a>
<hr />
<h3 class="refsect2"><a id="sthref17468"></a>LAPACK_GELS Procedures</h3>
<p>This procedure solves overdetermined or underdetermined real linear systems involving an <code>m</code> by <code>n</code> matrix <code>A</code>, or its transpose, using a <code>QR</code> or <code>LQ</code> factorization of <code>A</code>. It is assumed that <code>A</code> has full rank.</p>
<p>The following options are provided:</p>
<ol>
<li>
<p>If <code>TRANS = 'N'</code> and <code>m &gt;= n</code>: find the least squares solution of an overdetermined system, that is, solve the least squares problem.</p>
<pre>
minimize || B - A*X ||
</pre></li>
<li>
<p>If <code>TRANS = 'N'</code> and <code>m &lt; n</code>: find the minimum norm solution of an underdetermined system <code>A * X = B</code>.</p>
</li>
<li>
<p>If <code>TRANS = 'T'</code> and <code>m &gt;= n</code>: find the minimum norm solution of an undetermined system <code>A**T * X = B</code>.</p>
</li>
<li>
<p>If <code>TRANS = 'T'</code> and <code>m &lt; n</code>: find the least squares solution of an overdetermined system, that is, solve the least squares problem <code>minimize || B - A**T * X ||</code>.</p>
</li>
</ol>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17469"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GELS (
   trans   IN       flag,
   m       IN       POSITIVEN,
   n       IN       POSITIVEN,
   nrhs    IN       POSITIVEN,
   a       IN OUT   UTL_NLA_ARRAY_DBL,
   lda     IN       POSITIVEN,
   b       IN OUT   UTL_NLA_ARRAY_DBL,
   ldb     IN       POSITIVEN,
   info    OUT      INTEGER,
   pack    IN       flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GELS (
  trans    IN       flag,
  m        IN       POSITIVEN,
  n        IN       POSITIVEN,
  nrhs     IN       POSITIVEN,
  a        IN OUT   UTL_NLA_ARRAY_FLT,
  lda      IN       POSITIVEN,
  b        IN OUT   UTL_NLA_ARRAY_FLT,
  ldb      IN       POSITIVEN,
  info     OUT      INTEGER,
  pack     IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17470"></a>Parameters</p>
<div id="ARPLS71311" class="tblformal">
<p class="titleintable"><a id="sthref17471"></a><a id="sthref17472"></a>Table 232-41 LAPACK_GELS Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GELS Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GELS subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t76">Parameter</th>
<th class="cellalignment1227" id="r1c2-t76">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t76" headers="r1c1-t76">
<p><code>trans</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t76 r1c2-t76">
<ul>
<li>
<p><code>CHARACTER = 'N'</code>: The linear system involves <code>A</code>.</p>
</li>
<li>
<p><code>CHARACTER = 'T'</code>: The linear system involves <code>A**T</code> .</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t76" headers="r1c1-t76">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t76 r1c2-t76">
<p>The number of rows of the matrix <code>a. M &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t76" headers="r1c1-t76">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t76 r1c2-t76">
<p>The number of columns of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t76" headers="r1c1-t76">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t76 r1c2-t76">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>and <code>x.nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t76" headers="r1c1-t76">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t76 r1c2-t76">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the matrix <code>b</code> of right hand side vectors, stored columnwise; <code>b</code> is <code>m</code> by <code>nrhs</code> if <code>TRANS = 'N'</code>, or <code>n</code> by <code>nrhs</code>if <code>trans = 'T'</code>.</p>
<p>On exit, if <code>m &gt;= n</code>, <code>a</code> is overwritten by details of its <code>QR</code> factorization as returned by <code>SGEQRF</code>. If <code>m &lt; n</code>, <code>A</code> is overwritten by details of its <code>LQ</code> factorization as returned by <code>SGELQF</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t76" headers="r1c1-t76">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t76 r1c2-t76">
<p>The leading dimension of the array <code>A</code>. <code>lda &gt;= max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t76" headers="r1c1-t76">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t76 r1c2-t76">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the matrix <code>b</code> of right hand side vectors, stored columnwise. <code>b</code> is <code>m</code> <code>bynrhs</code> if <code>trans = 'n'</code>, or <code>n</code> by <code>nrhs</code> if <code>trans = 'T'</code>.</p>
<p>On exit, <code>b</code> is overwritten by the solution vectors, stored columnwise:</p>
<ul>
<li>
<p>If <code>trans = 'n'</code> and <code>m &gt;= n</code>, rows 1 to n of <code>b</code> contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements <code>n+1</code> to <code>m</code> in that column.</p>
</li>
<li>
<p>If <code>trans = 'n'</code> and <code>m &lt; n</code>, rows 1 to <code>n</code> of <code>b</code> contain the minimum norm solution vectors.</p>
</li>
<li>
<p>If <code>trans = 'T'</code> and <code>m &gt;= n</code>, rows 1 to <code>m</code> of <code>b</code> contain the minimum norm solution vectors.</p>
</li>
<li>
<p>If <code>trans = 'T'</code> and <code>m &lt; n</code>, rows 1 to <code>m</code> of <code>b</code> contain the least squares solution vectors; the residual sum of squares for the solution in each column is given by the sum of squares of elements <code>m+1</code> to <code>n</code> in that column.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t76" headers="r1c1-t76">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t76 r1c2-t76">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,m,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t76" headers="r1c1-t76">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t76 r1c2-t76">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t76" headers="r1c1-t76">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t76 r1c2-t76">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71312" class="refsect2"><a id="CIAJBIGH"></a>
<hr />
<h3 class="refsect2"><a id="sthref17473"></a>LAPACK_GESDD Procedures</h3>
<p>This procedures computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and right singular vectors. If singular vectors are desired, it uses a divide-and-conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<p>The SVD is written</p>
<pre>
A = U * SIGMA * transpose(V)
</pre>
<p>where SIGMA is an <code>m</code> by <code>n</code> matrix which is zero except for its <code>min(m,n)</code> diagonal elements, <code>U</code> is an<code>m</code> by <code>m</code> orthogonal matrix, and <code>V</code> is an<code>n</code> by <code>n</code> orthogonal matrix. The diagonal elements of SIGMA are the singular values of <code>A</code>, they are real and non-negative, and are returned in descending order. The first <code>min(m,n)</code> columns of <code>U</code> and <code>V</code> are the left and right singular vectors of <code>A</code>.</p>
<p>Note that the routine returns <code>V**T</code>, not <code>V</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17474"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GESDD (
   jobz   IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_DBL,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_DBL,
   u      IN OUT   UTL_NLA_ARRAY_DBL,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_DBL,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GESDD (
   jobz   IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_FLT,
   u      IN OUT   UTL_NLA_ARRAY_FLT,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_FLT,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17475"></a>Parameters</p>
<div id="ARPLS71313" class="tblformal">
<p class="titleintable"><a id="sthref17476"></a><a id="sthref17477"></a>Table 232-42 LAPACK_GESDD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GESDD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GESDD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t78">Parameter</th>
<th class="cellalignment1227" id="r1c2-t78">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t78" headers="r1c1-t78">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t78 r1c2-t78">
<p>Specifies options for computing all or part of the matrix <code>U</code>:</p>
<ul>
<li>
<p><code>'A'</code>: All <code>m</code> columns of <code>u</code> and all <code>n</code> rows of <code>V**T</code> are returned in arrays <code>u</code> and <code>vt</code>.</p>
</li>
<li>
<p><code>'S'</code>: The first <code>min(m,n)</code> columns of <code>u</code> and the first <code>min(m,n)</code> rows of <code>V**T</code> are returned in the arrays <code>u</code> and vt.</p>
</li>
<li>
<p><code>'O'</code>: The first <code>min(m,n)</code> columns of <code>u</code> (the left singular vectors) are overwritten on the array <code>a</code>. <code>jobu</code> and jobvt cannot both be <code>'O'</code></p>
</li>
<li>
<p><code>'N'</code>: No columns of <code>u</code> (no left singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t78" headers="r1c1-t78">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t78 r1c2-t78">
<p>The order of the matrix <code>a. m &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t78" headers="r1c1-t78">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t78 r1c2-t78">
<p>The order of the matrix <code>a. n &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t78" headers="r1c1-t78">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t78 r1c2-t78">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code>n</code> by <code>n</code> matrix <code>A</code>.</p>
<p>On exit:</p>
<ul>
<li>
<p>If <code>jobz = 'O'</code>, <code>a</code> is overwritten with the first <code>min(m,n)</code> columns of <code>u</code> (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code>m &gt;= n</code>, <code>a</code> is overwritten with the first <code>m</code> rows of <code>V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code>jobz .ne. 'O'</code>, the contents of <code>a</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t78" headers="r1c1-t78">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t78 r1c2-t78">
<p>The leading dimension of the array <code>a. lda &gt;= max(1,m)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t78" headers="r1c1-t78">
<p><code>s</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t78 r1c2-t78">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (min(m,n)</code>.</p>
<p>The singular values of <code>a</code>, sorted so that <code>S(i) &gt;= S(i+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t78" headers="r1c1-t78">
<p><code>u</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t78 r1c2-t78">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>. <code>ucol = m</code> if <code>jobz = 'A'</code> or <code>jobz = 'O'</code> and <code>m &lt; n</code>; <code>ucol = min(m,n)</code> if <code>jobz = 'S'</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'A'</code> or <code>jobz = 'O'</code> and <code>m &lt; n</code>, <code>u</code> contains the <code>m</code> by <code>m</code> orthogonal matrix <code>u</code>.</p>
</li>
<li>
<p>If <code>jobz = 'S'</code>, <code>u</code> contains the first <code>min(m,n)</code> columns of u (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code>jobz = 'O'</code> and <code>m &gt;= n</code>, or <code>jobz = 'n'</code>, <code>u</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t78" headers="r1c1-t78">
<p><code>ldu</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t78 r1c2-t78">
<p>The leading dimension of the array <code>U. ldu &gt;= 1.</code> If <code>jobz = 'S'</code> or <code>'A'</code>,or <code>jobz = 'O'</code> and <code>m &lt; n</code>, <code>ldu &gt;= m</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t78" headers="r1c1-t78">
<p><code>vt</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t78 r1c2-t78">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldvt, n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'A'</code> or <code>jobz = 'O'</code> and <code>m &gt;= n</code>, <code>vt</code> contains the <code>n by n</code> orthogonal matrix <code>V**T</code>.</p>
</li>
<li>
<p>If <code>jobz = 'S',</code> <code>vt</code> contains the first <code>min(m,n)</code> rows of <code>V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code>jobz = 'O'</code> and <code>m &lt; n</code>, or <code>jobz = 'N'</code>, <code>vt</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t78" headers="r1c1-t78">
<p><code>ldvt</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t78 r1c2-t78">
<p>The leading dimension of the array <code>vt</code>. <code>ldvt &gt;= 1</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'A'</code>, or <code>jobz = 'O'</code> and <code>m &gt;= n</code>, <code>ldvt &gt;= n</code>.</p>
</li>
<li>
<p>If <code>jobz = 'S'</code>, <code>ldvt &gt;= min(m,n)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t78" headers="r1c1-t78">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t78 r1c2-t78">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : If <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : SBDSDC did not converge, updating process failed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t78" headers="r1c1-t78">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t78 r1c2-t78">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71314" class="refsect2"><a id="CIAFDDCG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17478"></a>LAPACK_GESV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an <code>n</code> by <code>n</code> matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
<p>The <code>LU</code> decomposition with partial pivoting and row interchanges is used to factor <code>A</code> as</p>
<pre>
a = P * L * U
</pre>
<p>where <code>P</code> is a permutation matrix, <code>L</code> is unit lower triangular, and <code>U</code> is upper triangular. The factored form of <code>a</code> is then used to solve the system of equations</p>
<pre>
a * x = b
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17479"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GESV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_DBL,
   lda    IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GESV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   a      IN OUT  UTL_NLA_ARRAY_FLT,
   lda    IN      POSITIVEN,
   ipiv   IN OUT  UTL_NLA_ARRAY_INT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17480"></a>Parameters</p>
<div id="ARPLS71315" class="tblformal">
<p class="titleintable"><a id="sthref17481"></a><a id="sthref17482"></a>Table 232-43 LAPACK_GESV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GESV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t80">Parameter</th>
<th class="cellalignment1227" id="r1c2-t80">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t80" headers="r1c1-t80">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t80 r1c2-t80">
<p>The number of linear equations, equivalent to the order of the matrix <code>a</code>. <code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t80" headers="r1c1-t80">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t80 r1c2-t80">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t80" headers="r1c1-t80">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t80 r1c2-t80">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code>n</code> by <code>n</code> coefficient matrix <code>a</code>.</p>
<p>On exit, the factors <code>L</code> and <code>U</code> from the factorization <code>a = P*L*U</code>; the unit diagonal elements of <code>L</code> are not stored.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t80" headers="r1c1-t80">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t80 r1c2-t80">
<p>The leading dimension of the array a.</p>
<p><code>lda &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t80" headers="r1c1-t80">
<p><code>ipiv</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t80 r1c2-t80">
<p><code>INTEGER</code> array, <code>DIMENSION (n)</code>.</p>
<p>The pivot indices that define the permutation matrix <code>P</code>; row <code>i</code>of the matrix was interchanged with row <code>ipiv(i)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t80" headers="r1c1-t80">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t80 r1c2-t80">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t80" headers="r1c1-t80">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t80 r1c2-t80">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t80" headers="r1c1-t80">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t80 r1c2-t80">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, <code>U(i,i)</code> is exactly zero. The factorization has been completed, but the factor <code>U</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t80" headers="r1c1-t80">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t80 r1c2-t80">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71316" class="refsect2"><a id="CIAFBFFI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17483"></a>LAPACK_GESVD Procedures</h3>
<p>This procedures computes the singular value decomposition (SVD) of a real <code>m</code> by <code>n</code> matrix <code>A</code>, optionally computing the left and/or right singular vectors. The SVD is written</p>
<pre>
A = U * SIGMA * transpose(V)
</pre>
<p>where SIGMA is an <code>m</code> by <code>n</code> matrix which is zero except for its <code>min(m,n)</code> diagonal elements, <code>U</code> is an<code>m</code> by <code>m</code> orthogonal matrix, and <code>V</code> is an<code>n</code> by <code>n</code> orthogonal matrix. The diagonal elements of SIGMA are the singular values of <code>A</code>, they are real and non-negative, and are returned in descending order. The first <code>min(m,n)</code> columns of <code>U</code> and <code>V</code> are the left and right singular vectors of <code>A</code>.</p>
<p>Note that the routine returns <code>V**T</code>, not <code>V</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17484"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GESVD (
   jobu   IN       flag,
   jobvt  IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_DBL,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_DBL,
   u      IN OUT   UTL_NLA_ARRAY_DBL,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_DBL,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GESVD (
   jobu   IN       flag,
   jobvt  IN       flag,
   m      IN       POSITIVEN,
   n      IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   s      IN OUT   UTL_NLA_ARRAY_FLT,
   u      IN OUT   UTL_NLA_ARRAY_FLT,
   ldu    IN       POSITIVEN,
   vt     IN OUT   UTL_NLA_ARRAY_FLT,
   ldvt   IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17485"></a>Parameters</p>
<div id="ARPLS71317" class="tblformal">
<p class="titleintable"><a id="sthref17486"></a><a id="sthref17487"></a>Table 232-44 LAPACK_GESVD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GESVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GESVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t82">Parameter</th>
<th class="cellalignment1227" id="r1c2-t82">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t82" headers="r1c1-t82">
<p><code>jobu</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t82 r1c2-t82">
<p>Specifies options for computing all or part of the matrix <code>U</code>:</p>
<ul>
<li>
<p><code>'A'</code>: All <code>m</code> columns of <code>U</code> are returned in array <code>U</code>.</p>
</li>
<li>
<p><code>'S'</code>: The first <code>min(m,n)</code> columns of <code>U</code> (the left singular vectors) are returned in the array <code>U</code>.</p>
</li>
<li>
<p><code>'O'</code>: The first <code>min(m,n)</code> columns of <code>U</code> (the left singular vectors) are overwritten on the array <code>a</code>. <code>jobu</code> and jobvt cannot both be 'O</p>
</li>
<li>
<p><code>'N'</code>: No columns of <code>U</code> (no left singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t82" headers="r1c1-t82">
<p><code>jobvt</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t82 r1c2-t82">
<p>Specifies options for computing all or part of the matrix <code>V**T</code>:</p>
<ul>
<li>
<p><code>'A'</code>: All <code>n</code> rows of <code>V**T</code> are returned in the array <code>vt</code>.</p>
</li>
<li>
<p><code>'S'</code>: The first min(m,n) rows of V**T (the right singular vectors) are returned in the array <code>vt</code>.</p>
</li>
<li>
<p><code>'O'</code>: The first min(m,n) rows of <code>V**T</code> (the right singular vectors) are overwritten on the array <code>a</code>. <code>jobvt</code> and <code>jobu</code> cannot both be 'O'.</p>
</li>
<li>
<p><code>'N'</code>: No rows of <code>V**T</code> (no right singular vectors) are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t82" headers="r1c1-t82">
<p><code>m</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t82 r1c2-t82">
<p>The order of the matrix <code>a. M &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t82" headers="r1c1-t82">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t82 r1c2-t82">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t82" headers="r1c1-t82">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t82 r1c2-t82">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (lda, n)</code>.</p>
<p>On entry, the <code>n</code> by <code>n</code> matrix <code>A</code>.</p>
<p>On exit:</p>
<ul>
<li>
<p>If <code>jobu = 'O'</code>, <code>A</code> is overwritten with the first <code>min(m,n)</code> columns of <code>U</code> (the left singular vectors, stored columnwise);</p>
</li>
<li>
<p>If <code>jobvt = 'O'</code>, <code>A</code> is overwritten with the first <code>min(m,n)</code> rows of <code>V**T</code> (the right singular vectors, stored rowwise);</p>
</li>
<li>
<p>If <code>jobu.ne.'O'</code> and <code>jobvt.ne.'O'</code>, the contents of <code>A</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t82" headers="r1c1-t82">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t82 r1c2-t82">
<p>The leading dimension of the array <code>a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t82" headers="r1c1-t82">
<p><code>s</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t82 r1c2-t82">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (min(m,n)</code>.</p>
<p>The singular values of <code>A</code>, sorted so that <code>S(i) &gt;= S(i+1)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t82" headers="r1c1-t82">
<p><code>u</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t82 r1c2-t82">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldu,ucol).(ldu,m)</code>if <code>jobu = 'A'</code> or <code>(ldu,min(m,n))</code> if <code>jobu = 'S'</code>.</p>
<ul>
<li>
<p>If <code>jobu = 'A'</code>, <code>U</code> contains the <code>m</code> by <code>m</code> orthogonal matrix <code>U</code>.</p>
</li>
<li>
<p>If <code>jobu = 'S'</code>, <code>U</code> contains the first <code>min(m,n)</code> columns of <code>U</code> (the left singular vectors, stored columnwise).</p>
</li>
<li>
<p>If <code>jobu = 'N'</code> or <code>'O'</code>, <code>U</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t82" headers="r1c1-t82">
<p><code>ldu</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t82 r1c2-t82">
<p>The leading dimension of the array <code>U. ldu &gt;= 1.</code> If <code>jobu = 'S'</code> or '<code>a'</code>, <code>ldu &gt;= m</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t82" headers="r1c1-t82">
<p><code>vt</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t82 r1c2-t82">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldvt, n)</code>.</p>
<ul>
<li>
<p>If <code>jobvt = 'A'</code>, <code>vt</code> contains the <code>n</code> by <code>n</code> orthogonal matrix <code>V**T</code>.</p>
</li>
<li>
<p>If <code>jobvt = 'S'</code>, <code>vt</code> contains the first min(m,n) rows of <code>V**T</code> (the right singular vectors, stored rowwise).</p>
</li>
<li>
<p>If <code>jobvt = 'N'</code> or <code>'O'</code>, <code>vt</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t82" headers="r1c1-t82">
<p><code>ldvt</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t82 r1c2-t82">
<p>The leading dimension of the array <code>vt</code>. <code>ldvt &gt;= 1</code>.</p>
<ul>
<li>
<p>If <code>jobvt = 'A'</code>, <code>ldvt &gt;= n</code>.</p>
</li>
<li>
<p>If <code>jobvt = 'S'</code>, <code>ldvt &gt;= min(m,n)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t82" headers="r1c1-t82">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t82 r1c2-t82">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : If <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : If SBDSQR did not converge, <code>info</code> specifies how many superdiagonals of an intermediate bidiagonal form B did not converge to zero.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t82" headers="r1c1-t82">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t82 r1c2-t82">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71318" class="refsect2"><a id="CIADEDBA"></a>
<hr />
<h3 class="refsect2"><a id="sthref17488"></a>LAPACK_GEEV Procedures</h3>
<p>This procedures computes for an <code>n</code> by <code>n</code> real nonsymmetric matrix <code>A</code>, the eigenvalues and, optionally, the left and/or right eigenvectors.</p>
<ul>
<li>
<p>The right eigenvector <code>v(j)</code> of <code>A</code> satisfies <code>A * v(j) = lambda(j) * v(j)</code> where <code>lambda(j)</code> is its eigenvalue.</p>
</li>
<li>
<p>The left eigenvector <code>u(j)</code> of <code>A</code> satisfies <code>u(j)**H * A = lambda(j) * u(j)**H</code> where <code>u(j)**H</code> denotes the conjugate transpose of <code>u(j)</code>.</p>
</li>
</ul>
<p>The computed eigenvectors are normalized to have Euclidean norm equal to <code>1</code> and largest component real.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17489"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GEEV (
   jobvl   IN      flag,
   jobvr   IN      flag,
   n       IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_DBL,
   lda     IN      POSITIVEN,
   wr      IN OUT  UTL_NLA_ARRAY_DBL,
   wi      IN OUT  UTL_NLA_ARRAY_DBL,
   vl      IN OUT  UTL_NLA_ARRAY_DBL,
   ldvl    IN      POSITIVEN,
   vr      IN OUT  UTL_NLA_ARRAY_DBL,
   ldvr    IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GEEV (
   jobvl   IN      flag,
   jobvr   IN      flag,
   n       IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_FLT,
   lda     IN      POSITIVEN,
   wr      IN OUT  UTL_NLA_ARRAY_FLT,
   wi      IN OUT  UTL_NLA_ARRAY_FLT,
   vl      IN OUT  UTL_NLA_ARRAY_FLT,
   ldvl    IN      POSITIVEN,
   vr      IN OUT  UTL_NLA_ARRAY_FLT,
   ldvr    IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17490"></a>Parameters</p>
<div id="ARPLS71319" class="tblformal">
<p class="titleintable"><a id="sthref17491"></a><a id="sthref17492"></a>Table 232-45 LAPACK_GEEV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GEEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_GEEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t84">Parameter</th>
<th class="cellalignment1227" id="r1c2-t84">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t84" headers="r1c1-t84">
<p><code>jobvl</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t84 r1c2-t84">
<ul>
<li>
<p><code>'N'</code>: Left eigenvectors of <code>A</code> are not computed.</p>
</li>
<li>
<p><code>'V'</code>: Left eigenvectors of <code>A</code> are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t84" headers="r1c1-t84">
<p><code>jobvr</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t84 r1c2-t84">
<ul>
<li>
<p><code>'N'</code>: Right eigenvectors of <code>A</code> are not computed.</p>
</li>
<li>
<p><code>'V'</code>: Right eigenvectors of <code>A</code> are computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t84" headers="r1c1-t84">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t84 r1c2-t84">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t84" headers="r1c1-t84">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t84 r1c2-t84">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (lda, n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>n</code> by <code>n</code> matrix <code>A</code>.</p>
</li>
<li>
<p>On exit, <code>A</code> has been overwritten.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t84" headers="r1c1-t84">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t84 r1c2-t84">
<p>The leading dimension of the array <code>a. lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t84" headers="r1c1-t84">
<p><code>wr</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t84 r1c2-t84">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p><code>wr</code> and <code>wi</code> contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t84" headers="r1c1-t84">
<p><code>wi</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t84 r1c2-t84">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz, n)</code>.</p>
<p><code>wr</code> and <code>wi</code> contain the real and imaginary parts respectively of the computed eigenvalues. Complex conjugate pairs of eigenvalues will appear consecutively with the eigenvalue having the positive imaginary part first.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t84" headers="r1c1-t84">
<p><code>vl</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t84 r1c2-t84">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code>jobvl = 'V'</code>, the left eigenvectors <code>u(j)</code> are stored one after another in the columns of <code>vl</code>, in the same order as their eigenvalues.</p>
</li>
<li>
<p>If <code>jobvs = 'N'</code>, <code>vl</code> is not referenced.</p>
</li>
<li>
<p>If the <code>j</code>-th eigenvalue is real, then <code>u(j) = VL(:,j)</code>, the <code>j</code>-th column of <code>vl</code>.</p>
</li>
<li>
<p>If the <code>j</code>-th and <code>(j+1)-st</code> eigenvalues form a complex conjugate pair, then <code>u(j) = VL(:,j) + i*VL(:,j+1)</code> and <code>u(j+1) = VL(:,j) - i*VL(:,j+1)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t84" headers="r1c1-t84">
<p><code>ldv1</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t84 r1c2-t84">
<p>The leading dimension of the array <code>vl</code>. <code>ldvl &gt;= 1. If jobvl = 'v'</code>, <code>ldvl &gt;= n</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t84" headers="r1c1-t84">
<p><code>vr</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t84 r1c2-t84">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldvr, n)</code>.</p>
<ul>
<li>
<p>If <code>jobvr = 'V'</code>, the right eigenvectors <code>v(j)</code> are stored one after another in the columns of <code>vr</code>, in the same order as their eigenvalues..</p>
</li>
<li>
<p>If <code>jobvr = 'N'</code>, <code>vr</code> is not referenced.</p>
</li>
<li>
<p>If the <code>j</code>-th eigenvalue is real, then <code>v(j) = VR(:,j)</code>, the <code>j</code>-th column of <code>vr</code>.</p>
</li>
<li>
<p>If the <code>j</code>-th and <code>(j+1)-st</code> eigenvalues form a complex conjugate pair, then <code>v(j) = VR(:,j) + i*VR(:,j+1)</code> and <code>v(j+1) = VR(:,j) - i*VR(:,j+1)</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t84" headers="r1c1-t84">
<p><code>ldvr</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t84 r1c2-t84">
<p>The leading dimension of the array <code>vr</code>. <code>vr.ldvr &gt;= 1</code>. If <code>jobvr = 'V'</code>, <code>ldvr &gt;= N</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r13c1-t84" headers="r1c1-t84">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r13c1-t84 r1c2-t84">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, and <code>i</code> is <code>&lt;= N</code>: the QR algorithm failed to compute all the eigenvalues, and no eigenvectors have been computed. Elements <code>i+1:N</code> of <code>wr</code> and <code>wi</code> contain eigenvalues which have converged..</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r14c1-t84" headers="r1c1-t84">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r14c1-t84 r1c2-t84">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71320" class="refsect2"><a id="CIAFDEJI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17493"></a>LAPACK_GTSV Procedures</h3>
<p>This procedure solves the equation</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an <code>n</code> by <code>n</code> tridiagonal matrix, by Gaussian elimination with partial pivoting.</p>
<p>Note that the equation <code>a'*x = b</code> may be solved by interchanging the order of the arguments <code>du</code> and <code>dl</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17494"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_GTSV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   dl     IN OUT  UTL_NLA_ARRAY_DBL,
   d      IN OUT  UTL_NLA_ARRAY_DBL,
   du     IN OUT  UTL_NLA_ARRAY_DBL,
   b      IN OUT  UTL_NLA_ARRAY_DBL,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_GTSV (
   n      IN      POSITIVEN,
   nrhs   IN      POSITIVEN,
   dl     IN OUT  UTL_NLA_ARRAY_FLT,
   d      IN OUT  UTL_NLA_ARRAY_FLT,
   du     IN OUT  UTL_NLA_ARRAY_FLT,
   b      IN OUT  UTL_NLA_ARRAY_FLT,
   ldb    IN      POSITIVEN,
   info      OUT  INTEGER,
   pack   IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17495"></a>Parameters</p>
<div id="ARPLS71321" class="tblformal">
<p class="titleintable"><a id="sthref17496"></a><a id="sthref17497"></a>Table 232-46 LAPACK_GTSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_GTSV Procedure Parameters" summary="This table describes the Parameters of the UTL_MAIL.SEND subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t86">Parameter</th>
<th class="cellalignment1227" id="r1c2-t86">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t86" headers="r1c1-t86">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t86 r1c2-t86">
<p>The order of the matrix <code>a</code> .<code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t86" headers="r1c1-t86">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t86 r1c2-t86">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t86" headers="r1c1-t86">
<p><code>dl</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t86 r1c2-t86">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, <code>dl</code> must contain the <code>(n-1)</code> sub-diagonal elements of <code>a</code>.</p>
<p>On exit, <code>dl</code> is overwritten by the <code>(n-2)</code> elements of the second super-diagonal of the upper triangular matrix <code>U</code> from the <code>LU</code> factorization of <code>a</code>, in <code>dl(1), ..., dl(n-2)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t86" headers="r1c1-t86">
<p><code>d</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t86 r1c2-t86">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n)</code>.</p>
<p>On entry, <code>d</code> must contain the diagonal elements of <code>a</code>.</p>
<p>On exit, <code>d</code> is overwritten by the n diagonal elements of <code>U</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t86" headers="r1c1-t86">
<p><code>du</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t86 r1c2-t86">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, <code>du</code> must contain the <code>(n-1)</code>super-diagonal elements of <code>a</code>.</p>
<p>On exit, <code>du</code> is overwritten by the <code>(n-1)</code> elements of the first super-diagonal of <code>U</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t86" headers="r1c1-t86">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t86 r1c2-t86">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (LDB, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code>, the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t86" headers="r1c1-t86">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t86 r1c2-t86">
<p>The leading dimension of the array b.</p>
<p><code>ldb &gt;= max (1, n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t86" headers="r1c1-t86">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t86 r1c2-t86">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, <code>U(i,i)</code> is exactly zero, and the solution has not been computed. The factorization has not been completed unless <code>i = n</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t86" headers="r1c1-t86">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t86 r1c2-t86">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71322" class="refsect2"><a id="CIAJHJBC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17498"></a>LAPACK_PBSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric positive definite band matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code>A</code> as</p>
<p><code>A = U**T*U</code> if <code>UPLO ='U'</code></p>
<p>or</p>
<p><code>A = L * L**T</code> if <code>UPLO = 'L'</code></p>
<p>where <code>U</code> is an upper triangular matrix and <code>L</code> is a lower triangular matrix. The factored form of <code>A</code> is then used to solve the system of equations <code>A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17499"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_PBSV (
uplo       IN      flag,
n          IN      POSITIVEN,
kd         IN      NATURALN,
nrhs       IN      POSITIVEN,
ab         IN OUT  UTL_NLA_ARRAY_DBL,
ldab       IN      POSITIVEN,
b          IN OUT  UTL_NLA_ARRAY_DBL,
ldb        IN      POSITIVEN,
info       OUT     INTEGER,
pack       IN      flag DEFAULT 'C');
    
</pre>
<pre>
UTL_NLA.LAPACK_PBSV (
uplo      IN      flag,
n         IN      POSITIVEN,
kd        IN      NATURALN,
nrhs      IN      POSITIVEN,
ab        IN OUT  UTL_NLA_ARRAY_FLT,
ldab      IN      POSITIVEN,
b         IN OUT  UTL_NLA_ARRAY_FLT,
ldb       IN      POSITIVEN,
info      OUT     INTEGER,
pack      IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17500"></a>Parameters</p>
<div id="ARPLS71323" class="tblformal">
<p class="titleintable"><a id="sthref17501"></a><a id="sthref17502"></a>Table 232-47 LAPACK_PBSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_PBSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t88">Parameter</th>
<th class="cellalignment1227" id="r1c2-t88">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t88" headers="r1c1-t88">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t88 r1c2-t88">
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code>. Upper triangular of <code>A</code> is stored.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code>. Lower triangular of <code>A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t88" headers="r1c1-t88">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t88 r1c2-t88">
<p>The number of linear equations, that is, the order of the matrix <code>a</code> .<code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t88" headers="r1c1-t88">
<p><code>kd</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t88 r1c2-t88">
<p>The number of superdiagonals of the matrix <code>A</code> if <code>uplo = 'U'</code>, or the number of subdiagonals if <code>UPLO = 'L'. KD &gt;= 0.</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t88" headers="r1c1-t88">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t88 r1c2-t88">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t88" headers="r1c1-t88">
<p><code>ab</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t88 r1c2-t88">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code>a</code>, stored in the first <code>kd+1</code> rows of the array. The <code>j</code>-th column of <code>a</code> is stored in the <code>j</code>-th column of the array <code>ab</code> is as follows:</p>
<ul>
<li>
<p>if <code>uplo = 'U'</code>, <code>AB(KD+1+i-j,j) = A(i,j) for max(1,j-KD)&lt;=i&lt;=j;</code></p>
</li>
<li>
<p><code>if uplo = 'L'</code>, <code>AB(1+i-j,j) = A(i,j) for j&lt;=i&lt;=min(N,j+KD)</code></p>
</li>
</ul>
<p>.See below for further details.On exit, if <code>info = 0</code>, the triangular factor <code>U</code> or <code>L</code> from theCholesky factorization <code>A = U**T*U</code> or <code>A = L*L**T</code> of the bandmatrix <code>A</code>, in the same storage format as <code>a</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t88" headers="r1c1-t88">
<p><code>ldab</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t88 r1c2-t88">
<p>The leading dimension of the array <code>ab</code>.</p>
<p><code>ldb &gt;= kd+1</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t88" headers="r1c1-t88">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t88 r1c2-t88">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t88" headers="r1c1-t88">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t88 r1c2-t88">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t88" headers="r1c1-t88">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t88 r1c2-t88">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the leading minor of order i of <code>a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t88" headers="r1c1-t88">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t88 r1c2-t88">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71324" class="refsect2"><a id="CIAGDCGG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17503"></a>LAPACK_POSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric positive definite matrix and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code>A</code> as</p>
<p><code>A = U**T* U</code> if <code>uplo = 'U'</code></p>
<p>or</p>
<p><code>A = L * L**T</code> if <code>UPLO = 'L'</code></p>
<p>where <code>U</code> is an upper triangular matrix and <code>L</code> is a lower triangular matrix. The factored form of <code>A</code> is then used to solve the system of equations <code>A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17504"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_POSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   a         IN OUT  UTL_NLA_ARRAY_DBL,
   lda       IN      POSITIVEN,
   b         IN OUT  UTL_NLA_ARRAY_DBL,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_POSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   a         IN OUT  UTL_NLA_ARRAY_FLT,
   lda       IN      POSITIVEN,
   b         IN OUT  UTL_NLA_ARRAY_FLT,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17505"></a>Parameters</p>
<div id="ARPLS71325" class="tblformal">
<p class="titleintable"><a id="sthref17506"></a><a id="sthref17507"></a>Table 232-48 LAPACK_POSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_POSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_POSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t90">Parameter</th>
<th class="cellalignment1227" id="r1c2-t90">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t90" headers="r1c1-t90">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t90 r1c2-t90">
<ul>
<li>
<p><code>uplo</code> = 'U'. Upper triangular of <code>A</code> is stored.</p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code>. Lower triangular of <code>A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t90" headers="r1c1-t90">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t90 r1c2-t90">
<p>The number of linear equations, that is, the order of the matrix <code>a</code> .<code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t90" headers="r1c1-t90">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t90 r1c2-t90">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t90" headers="r1c1-t90">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t90 r1c2-t90">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (lda, n)</code>.</p>
<p>If <code>uplo = 'U'</code>, the leading NRHS <code>n</code> by <code>n</code> upper triangular part of <code>a</code> contains the upper NRHS triangular part of the matrix A, and the strictly lower NRHS triangular part of A is not referenced.</p>
<p>If <code>uplo</code> = '<code>'L'</code>, then rhs leading <code>n</code> by <code>n</code> lower triangular part of a contains the lower nrhs triangular part of the matrix a, and the strictly upper nrhs triangular part of a is not referenced.</p>
<p>On exit, if <code>info</code> = 0, the factor <code>U</code> or <code>L</code> from the Cholesky factorization <code>A = U**T*U</code> or <code>A = L*L**T</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t90" headers="r1c1-t90">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t90 r1c2-t90">
<p>The leading dimension of the array a.</p>
<p><code>lda &gt;= max (1, n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t90" headers="r1c1-t90">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t90 r1c2-t90">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t90" headers="r1c1-t90">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t90 r1c2-t90">
<p>The leading dimension of the array b.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t90" headers="r1c1-t90">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t90 r1c2-t90">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the leading minor of order i of <code>a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t90" headers="r1c1-t90">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t90 r1c2-t90">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71326" class="refsect2"><a id="CIAGICJH"></a>
<hr />
<h3 class="refsect2"><a id="sthref17508"></a>LAPACK_PPSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric positive definite matrix stored in packed format and <code>x</code> and <code>b</code> are <code>n</code> by <code>nrhs</code> matrices.</p>
<p>The Cholesky decomposition is used to factor <code>A</code> as</p>
<p><code>A = U**T* U</code> if <code>UPLO = 'U'</code></p>
<p>or</p>
<p><code>A = L * L**T</code> if <code>UPLO = 'L'</code></p>
<p>where <span class="bold">U</span> is an upper triangular matrix and <code>L</code> is a lower triangular matrix. The factored form of <code>A</code> is then used to solve the system of equations <code>A * X = B</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17509"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_PPSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   ap        IN OUT  UTL_NLA_ARRAY_DBL,
   b         IN OUT  UTL_NLA_ARRAY_DBL,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT 'C');
    
</pre>
<pre>
UTL_NLA.LAPACK_PPSV (
   uplo      IN      flag,
   n         IN      POSITIVEN,
   nrhs      IN      POSITIVEN,
   ap        IN OUT  UTL_NLA_ARRAY_FLT,
   b         IN OUT  UTL_NLA_ARRAY_FLT,
   ldb       IN      POSITIVEN,
   info      OUT     INTEGER,
   pack      IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17510"></a>Parameters</p>
<div id="ARPLS71327" class="tblformal">
<p class="titleintable"><a id="sthref17511"></a><a id="sthref17512"></a>Table 232-49 LAPACK_PPSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_PPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t92">Parameter</th>
<th class="cellalignment1227" id="r1c2-t92">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t92" headers="r1c1-t92">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t92 r1c2-t92">
<ul>
<li>
<p><code>uplo = 'U'</code> . Upper triangular of <code>A</code> is stored.</p>
</li>
<li>
<p><code>uplo = 'L'</code>. Lower triangular of <code>A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t92" headers="r1c1-t92">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t92 r1c2-t92">
<p>The number of linear equations, that is, the order of the matrix <code>a</code> .<code>n &gt;= 0</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t92" headers="r1c1-t92">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t92 r1c2-t92">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t92" headers="r1c1-t92">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t92 r1c2-t92">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code>a</code>, packed columnwise in a linear array. The <code>j</code>-th column of <code>a</code> is stored in the array ap as follows:</p>
<p>If <code>uplo</code> = <code>'U'</code>, <code>AP(i + (j-1)*j/2) = A(i,j) for 1&lt;=i&lt;=j;</code></p>
<p>If <code>uplo</code> = '<code>L</code>', <code>AP(i + (j-1)*(2n-j)/2) = A(i,j) for j&lt;=i&lt;=n;</code></p>
<p>On exit, if <code>info</code> = 0, the factor <code>U</code> or <code>'L'</code> from the Cholesky factorization <code>A = U**T*U</code> or <code>A = L*L**T</code> in the same storage format as <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t92" headers="r1c1-t92">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t92 r1c2-t92">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t92" headers="r1c1-t92">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t92 r1c2-t92">
<p>The leading dimension of the array b.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t92" headers="r1c1-t92">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t92 r1c2-t92">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the leading minor of order i of <code>a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t92" headers="r1c1-t92">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t92 r1c2-t92">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p>'<code>C</code>': column-major (default)</p>
</li>
<li>
<p>'<code>R</code>': row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71328" class="refsect2"><a id="CIAEJBEG"></a>
<hr />
<h3 class="refsect2"><a id="sthref17513"></a>LAPACK_PTSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric positive definite tridiagonal matrix, and <code>x</code> and <code>b</code> are n by <code>nrhs</code> matrices.</p>
<p><code>a</code> is factored as <code>A = L*D*L**T</code>, and the factored form of a is then used to solve the system of equations.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17514"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_PTSV (
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   d      IN OUT   UTL_NLA_ARRAY_DBL,
   e      IN OUT   UTL_NLA_ARRAY_DBL,
   b      IN OUT   UTL_NLA_ARRAY_DBL,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag  DEFAULT 'C');
 
</pre>
<pre>
UTL_NLA.LAPACK_PTSV (
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   d      IN OUT   UTL_NLA_ARRAY_FLT,
   e      IN OUT   UTL_NLA_ARRAY_FLT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17515"></a>Parameters</p>
<div id="ARPLS71329" class="tblformal">
<p class="titleintable"><a id="sthref17516"></a><a id="sthref17517"></a>Table 232-50 LAPACK_PTSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_PTSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_PTSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t94">Parameter</th>
<th class="cellalignment1227" id="r1c2-t94">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t94" headers="r1c1-t94">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t94 r1c2-t94">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t94" headers="r1c1-t94">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t94 r1c2-t94">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t94" headers="r1c1-t94">
<p><code>d</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t94 r1c2-t94">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n)</code>.</p>
<p>On entry, the <code>n</code> diagonal elements of the tridiagonal matrix <code>a</code>.</p>
<p>On exit, the <code>n</code> diagonal elements of the diagonal matrix <code>d</code> from the factorization <code>A = L*D*L**T</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t94" headers="r1c1-t94">
<p><code>e</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t94 r1c2-t94">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, the <code>(n-1)</code> subdiagonal elements of the tridiagonal matrix <code>a</code>.</p>
<p>On exit, the <code>(n-1)</code> diagonal elements of the unit bidiagonal factor <code>L</code> from the factorization <code>A = L*D*L**T</code> of <code>a</code>.(<code>e</code> can also be regarded as the superdiagonal of the unit bidiagonal factor <code>U</code> from the <code>U**T*D*U</code> factorization of <code>a</code>)</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t94" headers="r1c1-t94">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t94 r1c2-t94">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t94" headers="r1c1-t94">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t94 r1c2-t94">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t94" headers="r1c1-t94">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t94 r1c2-t94">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the leading minor of order <code>i</code> of <code>a</code> is not positive definite, so the factorization could not be completed, and the solution has not been computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t94" headers="r1c1-t94">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t94 r1c2-t94">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71330" class="refsect2"><a id="CIAIJDGB"></a>
<hr />
<h3 class="refsect2"><a id="sthref17518"></a>LAPACK_SBEV Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric band matrix <code>A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17519"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SBEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_DBL,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SBEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_FLT,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17520"></a>Parameters</p>
<div id="ARPLS71331" class="tblformal">
<p class="titleintable"><a id="sthref17521"></a><a id="sthref17522"></a>Table 232-51 LAPACK_SBEV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SBEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SBEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t96">Parameter</th>
<th class="cellalignment1227" id="r1c2-t96">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t96" headers="r1c1-t96">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t96 r1c2-t96">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t96" headers="r1c1-t96">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t96 r1c2-t96">
<ul>
<li>
<p><code>'U'</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code>'L'</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t96" headers="r1c1-t96">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t96 r1c2-t96">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t96" headers="r1c1-t96">
<p><code>kd</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t96 r1c2-t96">
<p>The number of superdiagonals of the matrix <code>A</code> if <code>uplo = 'U',</code> or the number of subdiagonals if <code>uplo = 'L'</code>. <code>kd &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t96" headers="r1c1-t96">
<p><code>ab</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t96 r1c2-t96">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code>A</code> stored in the first <code>kd+1</code> rows of the array. The <code>j</code>-th column of <code>A</code> is stored in the <code>j</code>-th column of the array <code>ab</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, <code>ab(kd+1+i-j,j) = a(i,j)</code> for <code>max(1,j-kd)&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, <code>AB(1+i-j,j) = A(i,j)</code> for <code>j&lt;=i&lt;=min(n,j+kd)</code>.</p>
</li>
</ul>
<p>On exit, <code>ab</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code>T</code> are returned in rows <code>kd</code> and <code>kd+1</code> of <code>ab</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the diagonal and first subdiagonal of <code>T</code> are returned in the first two rows of <code>ab</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t96" headers="r1c1-t96">
<p><code>ldab</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t96 r1c2-t96">
<p>The leading dimension of the array <code>ab. ldab &gt;= kd + 1</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t96" headers="r1c1-t96">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t96 r1c2-t96">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t96" headers="r1c1-t96">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t96 r1c2-t96">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>w(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t96" headers="r1c1-t96">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t96 r1c2-t96">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t96" headers="r1c1-t96">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t96 r1c2-t96">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t96" headers="r1c1-t96">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t96 r1c2-t96">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71332" class="refsect2"><a id="CIAHJDIJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17523"></a>LAPACK_SBEVD Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17524"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SBEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_DBL,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SBEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   kd       IN      NATURALN,
   ab       IN OUT  UTL_NLA_ARRAY_FLT,
   ldab     IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17525"></a>Parameters</p>
<div id="ARPLS71333" class="tblformal">
<p class="titleintable"><a id="sthref17526"></a><a id="sthref17527"></a>Table 232-52 LAPACK_SBEVD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SBEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SBEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t98">Parameter</th>
<th class="cellalignment1227" id="r1c2-t98">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t98" headers="r1c1-t98">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t98 r1c2-t98">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t98" headers="r1c1-t98">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t98 r1c2-t98">
<ul>
<li>
<p><code>'U'</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code>'L'</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t98" headers="r1c1-t98">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t98 r1c2-t98">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t98" headers="r1c1-t98">
<p><code>kd</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t98 r1c2-t98">
<p>The number of superdiagonals of the matrix <code>A</code> if <code>uplo = 'U'</code>, or the number of subdiagonals if <code>uplo = 'L'</code>. <code>kd &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t98" headers="r1c1-t98">
<p><code>ab</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t98 r1c2-t98">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (ldab, n)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric band matrix <code>A</code> stored in the first <code>kd+1</code> rows of the array. The <code>j</code>-th column of <code>A</code> is stored in the <code>j</code>-th column of the array <code>ab</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, <code>ab(kd+1+i-j,j) = a(i,j)</code> for <code>max(1,j-kd)&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, <code>AB(1+i-j,j) = A(i,j)</code> for <code>j&lt;=i&lt;=min(n,j+kd)</code>.</p>
</li>
</ul>
<p>On exit, <code>ab</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code>T</code> are returned in rows <code>kd</code> and <code>kd+1</code> of <code>ab</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the diagonal and first subdiagonal of <code>T</code> are returned in the first two rows of <code>ab</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t98" headers="r1c1-t98">
<p><code>ldab</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t98 r1c2-t98">
<p>The leading dimension of the array <code>ab. ldab &gt;= kd + 1</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t98" headers="r1c1-t98">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t98 r1c2-t98">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz,n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t98" headers="r1c1-t98">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t98 r1c2-t98">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>w(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t98" headers="r1c1-t98">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t98 r1c2-t98">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t98" headers="r1c1-t98">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t98 r1c2-t98">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r12c1-t98" headers="r1c1-t98">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r12c1-t98 r1c2-t98">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71334" class="refsect2"><a id="CIADGJII"></a>
<hr />
<h3 class="refsect2"><a id="sthref17528"></a>LAPACK_SPEV Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17529"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SPEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_DBL,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SPEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_FLT,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17530"></a>Parameters</p>
<div id="ARPLS71335" class="tblformal">
<p class="titleintable"><a id="sthref17531"></a><a id="sthref17532"></a>Table 232-53 LAPACK_SPEV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SPEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t100">Parameter</th>
<th class="cellalignment1227" id="r1c2-t100">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t100" headers="r1c1-t100">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t100 r1c2-t100">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t100" headers="r1c1-t100">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t100 r1c2-t100">
<ul>
<li>
<p><code>'U'</code>: Upper triangle of <code>A</code> is stored.</p>
</li>
<li>
<p><code>'L'</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t100" headers="r1c1-t100">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t100 r1c2-t100">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t100" headers="r1c1-t100">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t100 r1c2-t100">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code>a</code> packed columnwise in a linear array. The <code>j</code>-th column of a is stored in the array <code>ap</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, <code>ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, <code>ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n</code>.</p>
</li>
</ul>
<p>On exit, <code>ap</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code>T</code> overwrite the corresponding elements of <code>A</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the diagonal and first subdiagonal of <code>T</code> overwrite the corresponding elements of <code>A</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t100" headers="r1c1-t100">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t100 r1c2-t100">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t100" headers="r1c1-t100">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t100 r1c2-t100">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz,n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>w(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t100" headers="r1c1-t100">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t100 r1c2-t100">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t100" headers="r1c1-t100">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t100 r1c2-t100">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t100" headers="r1c1-t100">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t100 r1c2-t100">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71336" class="refsect2"><a id="CIABDIAF"></a>
<hr />
<h3 class="refsect2"><a id="sthref17533"></a>LAPACK_SPEVD Procedures</h3>
<p>This procedure computes all the eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code> in packed storage. If eigenvectors are desired, it uses a divide and conquer algorithm. The divide and conquer algorithm makes very mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17534"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SPEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_DBL,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz       IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SPEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   ap       IN OUT  UTL_NLA_ARRAY_FLT,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17535"></a>Parameters</p>
<div id="ARPLS71337" class="tblformal">
<p class="titleintable"><a id="sthref17536"></a><a id="sthref17537"></a>Table 232-54 LAPACK_SPEVD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SPEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t102">Parameter</th>
<th class="cellalignment1227" id="r1c2-t102">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t102" headers="r1c1-t102">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t102 r1c2-t102">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t102" headers="r1c1-t102">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t102 r1c2-t102">
<ul>
<li>
<p><code>'U'</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code>'L'</code>: Lower triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t102" headers="r1c1-t102">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t102 r1c2-t102">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t102" headers="r1c1-t102">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t102 r1c2-t102">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code>a</code> packed columnwise in a linear array. The <code>j</code>-th column of a is stored in the array <code>ap</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, <code>ap(i + (j-1)*j/2) = a(i,j) for 1&lt;=i&lt;=j</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, <code>ap(i + (j-1)*(2*n-j)/2) = a(i,j) for j&lt;=i&lt;=n</code>.</p>
</li>
</ul>
<p>On exit, <code>ap</code> is overwritten by values generated during the reduction to tridiagonal form:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the diagonal and first superdiagonal of the tridiagonal matrix <code>T</code> overwrite the corresponding elements of <code>A</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the diagonal and first subdiagonal of <code>T</code> overwrite the corresponding elements of <code>A</code>.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t102" headers="r1c1-t102">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t102 r1c2-t102">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t102" headers="r1c1-t102">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t102 r1c2-t102">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz,n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>w(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t102" headers="r1c1-t102">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t102 r1c2-t102">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t102" headers="r1c1-t102">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t102 r1c2-t102">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t102" headers="r1c1-t102">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t102 r1c2-t102">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71338" class="refsect2"><a id="CIAEDCDH"></a>
<hr />
<h3 class="refsect2"><a id="sthref17538"></a>LAPACK_SPSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric matrix stored in packed format, and <code>x</code> and <code>b</code> are n by nrhs matrices.</p>
<p>The diagonal pivoting method is used to factor <code>A</code> as</p>
<p><code>A = U * D * U**T</code>, if <code>UPLO = 'U'</code></p>
<p>or</p>
<p><code>A = L * D * L**T</code>, if <code>UPLO = 'L'</code></p>
<p>where <code>U</code> (or <code>L</code>) is a product of permutation and unit upper (lower) triangular matrices, and <code>D</code> is symmetric and block diagonal with 1 by 1 and 2 by 2 diagonal blocks. The factored form of <code>A</code> is then used to solve the system of equations <code>A * X = B.</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17539"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SPSV (
   uplo    IN      flag,
   n       IN      POSITIVEN,
   nrhs    IN      POSITIVEN,
   ap      IN OUT  UTL_NLA_ARRAY_DBL,
   ipiv    IN OUT  UTL_NLA_ARRAY_INT,
   b       IN OUT  UTL_NLA_ARRAY_DBL,
   ldb     IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SPSV (
   uplo   IN       flag,
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   ap     IN OUT   UTL_NLA_ARRAY_FLT,
   ipiv   IN OUT   UTL_NLA_ARRAY_INT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17540"></a>Parameters</p>
<div id="ARPLS71339" class="tblformal">
<p class="titleintable"><a id="sthref17541"></a><a id="sthref17542"></a>Table 232-55 LAPACK_SPSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SPSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SPSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t104">Parameter</th>
<th class="cellalignment1227" id="r1c2-t104">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t104" headers="r1c1-t104">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t104 r1c2-t104">
<ul>
<li>
<p><code>uplo = 'U'</code>. Upper triangular of <code>A</code> is stored.</p>
</li>
<li>
<p><code>uplo = 'L'</code> . Lower triangular of <code>A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t104" headers="r1c1-t104">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t104 r1c2-t104">
<p>The number of linear equations, which is the order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t104" headers="r1c1-t104">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t104 r1c2-t104">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t104" headers="r1c1-t104">
<p><code>ap</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t104 r1c2-t104">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n*(n+1)/2)</code>.</p>
<p>On entry, the upper or lower triangle of the symmetric matrix <code>A</code>, packed columnwise in a linear array. The <code>j</code>-th column of <code>A</code> is stored in the array <code>ap</code> as follows:</p>
<ul>
<li>
<p><code>uplo</code> = <code>'U'</code>: <code>AP(i + (j-1)*j/2) = A(i,j)</code> for <code>1&lt;=i&lt;=j</code></p>
</li>
<li>
<p><code>uplo</code> = <code>'L'</code> : <code>AP(i + (j-1)*(2n-j)/2) = A(i,j)</code> for <code>j&lt;=i&lt;=n</code></p>
</li>
</ul>
<p>See below for further details.</p>
<p>On exit, the block diagonal matrix <code>D</code> and the multipliers used to obtain the factor <code>U</code> or <code>L</code> from the factorization <code>A = U*D*U**T or A = L*D*L**T</code> as computed by <code>SSPTRF</code>, stored as a packed triangular matrix in the same storage format as <code>A</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t104" headers="r1c1-t104">
<p><code>ipiv</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t104 r1c2-t104">
<p><code>INTEGER array</code><code>, DIMENSION (n)</code>.</p>
<p>Details of the interchanges and the block structure of <code>d</code>, as determined by <code>SSPTRF</code>.</p>
<ul>
<li>
<p>If <code>ipiv(k) &gt; 0</code>, then rows and columns <code>k</code> and <code>ipiv(k)</code> were interchanged, and <code>d(k,k)</code> is a 1 by1 diagonal block.</p>
</li>
<li>
<p>If <code>uplo</code> = <code>'U'</code> and <code>ipiv(k) = ipiv(k-1) &lt; 0</code>, then rows and columns <code>k-1</code> and <code>-ipiv(k)</code> were interchanged and <code>d(k-1:k,k-1:k)</code> is a 2 by 2 diagonal block.</p>
</li>
<li>
<p>If <code>uplo</code> = <code>'L'</code> and <code>ipiv(k) = ipiv(k+1) &lt; 0</code>, then rows and columns <code>k+1</code> and <code>-ipiv(k)</code> were interchanged and <code>d(k:k+1,k:k+1)</code> is a 2 by 2 diagonal block.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t104" headers="r1c1-t104">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t104 r1c2-t104">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code><code>, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t104" headers="r1c1-t104">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t104 r1c2-t104">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t104" headers="r1c1-t104">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t104 r1c2-t104">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, <code>d(i,i)</code> is exactly zero. The factorization has been completed, but the block diagonal matrix <code>d</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t104" headers="r1c1-t104">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t104 r1c2-t104">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71340" class="refsect2"><a id="CIAGEJCI"></a>
<hr />
<h3 class="refsect2"><a id="sthref17543"></a>LAPACK_STEV Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix <code>A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17544"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_STEV (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_DBL,
   e        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_STEV (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_FLT,
   e        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17545"></a>Parameters</p>
<div id="ARPLS71341" class="tblformal">
<p class="titleintable"><a id="sthref17546"></a><a id="sthref17547"></a>Table 232-56 LAPACK_STEV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_STEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_STEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t106">Parameter</th>
<th class="cellalignment1227" id="r1c2-t106">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t106" headers="r1c1-t106">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t106 r1c2-t106">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t106" headers="r1c1-t106">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t106 r1c2-t106">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t106" headers="r1c1-t106">
<p><code>d</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t106 r1c2-t106">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>n</code> diagonal elements of the tridiagonal matrix <code>A</code>.</p>
</li>
<li>
<p>On exit, if <code>info = 0</code>, the eigenvalues in ascending order.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t106" headers="r1c1-t106">
<p>e</p>
</td>
<td class="cellalignment1228" headers="r5c1-t106 r1c2-t106">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>(n-1)</code> subdiagonal elements of the tridiagonal matrix <code>A</code>, stored in elements 1 to <code>n-1</code> of <code>e</code>. <code>e(n)</code> need not be set, but is used by the subprogram.</p>
</li>
<li>
<p>On exit, the contents of <code>e</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t106" headers="r1c1-t106">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t106 r1c2-t106">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz, n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>d(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t106" headers="r1c1-t106">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t106 r1c2-t106">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t106" headers="r1c1-t106">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t106 r1c2-t106">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t106" headers="r1c1-t106">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t106 r1c2-t106">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71342" class="refsect2"><a id="CIAHFFCC"></a>
<hr />
<h3 class="refsect2"><a id="sthref17548"></a>LAPACK_STEVD Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric tridiagonal matrix. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17549"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_STEVD (
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_DBL,
   e        IN OUT  UTL_NLA_ARRAY_DBL,
   z        IN OUT  UTL_NLA_ARRAY_DBL,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_STEVD(
   jobz     IN      flag,
   n        IN      POSITIVEN,
   d        IN OUT  UTL_NLA_ARRAY_FLT,
   e        IN OUT  UTL_NLA_ARRAY_FLT,
   z        IN OUT  UTL_NLA_ARRAY_FLT,
   ldz      IN      POSITIVEN,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17550"></a>Parameters</p>
<div id="ARPLS71343" class="tblformal">
<p class="titleintable"><a id="sthref17551"></a><a id="sthref17552"></a>Table 232-57 LAPACK_STEVD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_STEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_STEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t108">Parameter</th>
<th class="cellalignment1227" id="r1c2-t108">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t108" headers="r1c1-t108">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t108 r1c2-t108">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t108" headers="r1c1-t108">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t108 r1c2-t108">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t108" headers="r1c1-t108">
<p><code>d</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t108 r1c2-t108">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>n</code> diagonal elements of the tridiagonal matrix <code>A</code>.</p>
</li>
<li>
<p>On exit, if <code>info = 0</code>, the eigenvalues in ascending order.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t108" headers="r1c1-t108">
<p>e</p>
</td>
<td class="cellalignment1228" headers="r5c1-t108 r1c2-t108">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<ul>
<li>
<p>On entry, the <code>(n-1)</code> subdiagonal elements of the tridiagonal matrix <code>A</code>, stored in elements <code>1</code> to <code>n-1</code> of <code>e</code>. <code>e(n)</code> need not be set, but is used by the subprogram.</p>
</li>
<li>
<p>On exit, the contents of <code>e</code> are destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t108" headers="r1c1-t108">
<p><code>z</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t108 r1c2-t108">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (ldz, n)</code>.</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>z</code> contains the orthonormal eigenvectors of the matrix <code>A</code>, with the <code>i</code>-th column of <code>z</code> holding the eigenvector associated with <code>d(i)</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then <code>z</code> is not referenced.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t108" headers="r1c1-t108">
<p><code>ldz</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t108 r1c2-t108">
<p>The leading dimension of the array <code>z</code>. <code>ldz &gt;= 1</code>, and if <code>jobz = 'v'</code>, <code>ldz &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t108" headers="r1c1-t108">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t108 r1c2-t108">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t108" headers="r1c1-t108">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t108 r1c2-t108">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71344" class="refsect2"><a id="CIAIDIGJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17553"></a>LAPACK_SYEV Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17554"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SYEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_DBL,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SYEV (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_FLT,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17555"></a>Parameters</p>
<div id="ARPLS71345" class="tblformal">
<p class="titleintable"><a id="sthref17556"></a><a id="sthref17557"></a>Table 232-58 LAPACK_SYEV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SYEV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYEV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t110">Paramete</th>
<th class="cellalignment1227" id="r1c2-t110">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t110" headers="r1c1-t110">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t110 r1c2-t110">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t110" headers="r1c1-t110">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t110 r1c2-t110">
<ul>
<li>
<p><code>'U'</code>: Upper triangle of A is stored.</p>
</li>
<li>
<p><code>'L'</code>: Upper triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t110" headers="r1c1-t110">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t110 r1c2-t110">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t110" headers="r1c1-t110">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t110 r1c2-t110">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the symmetric matrix <code>a</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of <code>a</code> contains the upper triangular part of the matrix <code>a</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the leading <code>n</code> by<code>n</code> lower triangular part of <code>a</code> contains the lower triangular part of the matrix <code>a</code>.</p>
</li>
</ul>
<p>On exit:</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>a</code> contains the orthonormal eigenvectors of the matrix <code>a</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then on exit the lower triangle (if <code>uplo = 'L'</code>) or the upper triangle (if <code>uplo='U'</code>) of <code>a</code>, including the diagonal, is destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t110" headers="r1c1-t110">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t110 r1c2-t110">
<p>The leading dimension of the array <code>a</code>. <code>lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t110" headers="r1c1-t110">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t110 r1c2-t110">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t110" headers="r1c1-t110">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t110 r1c2-t110">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t110" headers="r1c1-t110">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t110 r1c2-t110">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71346" class="refsect2"><a id="CIAGBGGH"></a>
<hr />
<h3 class="refsect2"><a id="sthref17558"></a>LAPACK_SYEVD Procedures</h3>
<p>This procedure computes all eigenvalues and, optionally, eigenvectors of a real symmetric matrix <code>A</code>. If eigenvectors are desired, it uses a divide and conquer algorithm that makes mild assumptions about floating point arithmetic.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFGFFC">LAPACK Driver Routines (LLS and Eigenvalue Problems) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17559"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SYEVD (
</pre>
<pre>
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_DBL,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_DBL,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');

UTL_NLA.LAPACK_SYEVD (
   jobz     IN      flag,
   uplo     IN      flag,
   n        IN      POSITIVEN,
   a        IN OUT  UTL_NLA_ARRAY_FLT,
   lda      IN      POSITIVEN,
   w        IN OUT  UTL_NLA_ARRAY_FLT,
   info     OUT     INTEGER,
   pack     IN      flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17560"></a>Parameters</p>
<div id="ARPLS71347" class="tblformal">
<p class="titleintable"><a id="sthref17561"></a><a id="sthref17562"></a>Table 232-59 LAPACK_SYEVD Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SYEVD Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYEVD subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t112">Parameter</th>
<th class="cellalignment1227" id="r1c2-t112">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t112" headers="r1c1-t112">
<p><code>jobz</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t112 r1c2-t112">
<ul>
<li>
<p><code>'N'</code>: Compute eigenvalues only.</p>
</li>
<li>
<p><code>'V'</code>: Compute eigenvalues and eigenvectors.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t112" headers="r1c1-t112">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t112 r1c2-t112">
<ul>
<li>
<p><code>'U'</code> : Upper triangle of A is stored.</p>
</li>
<li>
<p><code>'L'</code>: Upper triangle of A is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t112" headers="r1c1-t112">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t112 r1c2-t112">
<p>The order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t112" headers="r1c1-t112">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t112 r1c2-t112">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (lda, n)</code>.</p>
<p>On entry, the symmetric matrix <code>a</code>:</p>
<ul>
<li>
<p>If <code>uplo = 'U'</code>, the leading <code>n</code> by <code>n</code> upper triangular part of <code>a</code> contains the upper triangular part of the matrix <code>a</code>.</p>
</li>
<li>
<p>If <code>uplo = 'L'</code>, the leading <code>n</code> by<code>n</code> lower triangular part of <code>a</code> contains the lower triangular part of the matrix <code>a</code>.</p>
</li>
</ul>
<p>On exit:</p>
<ul>
<li>
<p>If <code>jobz = 'V'</code>, then if <code>info = 0</code>, <code>a</code> contains the orthonormal eigenvectors of the matrix <code>a</code>.</p>
</li>
<li>
<p>If <code>jobz = 'N'</code>, then on exit the lower triangle (if <code>uplo = 'L'</code>) or the upper triangle (if <code>uplo = 'U'</code>) of <code>a</code>, including the diagonal, is destroyed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t112" headers="r1c1-t112">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t112 r1c2-t112">
<p>The leading dimension of the array <code>a</code>. <code>lda &gt;= max(1,n)</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t112" headers="r1c1-t112">
<p><code>w</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t112 r1c2-t112">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code>, <code>DIMENSION (n)</code>.</p>
<p>If <code>info = 0</code>, the eigenvalues in ascending order.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t112" headers="r1c1-t112">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t112 r1c2-t112">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code>, the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info = i</code>, the algorithm failed to converge; <code>i</code> off-diagonal elements of an intermediate tridiagonal form did not converge to zero</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t112" headers="r1c1-t112">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t112 r1c2-t112">
<p>(Optional) Flags the packing of the matricies:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" -->
<div id="ARPLS71348" class="refsect2"><a id="CIADGGFJ"></a>
<hr />
<h3 class="refsect2"><a id="sthref17563"></a>LAPACK_SYSV Procedures</h3>
<p>This procedure computes the solution to a real system of linear equations</p>
<pre>
a * x = b
</pre>
<p>where <code>a</code> is an n by n symmetric matrix, and <code>x</code> and <code>b</code> are n by nrhs matrices.</p>
<p>The diagonal pivoting method is used to factor <code>A</code> as</p>
<p><code>A = U * D * U**T</code>, if <code>UPLO = 'U'</code></p>
<p>or</p>
<p><code>A = L * D * L**T</code>, if <code>UPLO = 'L'</code></p>
<p>where <code>U</code> (or <code>L</code>) is a product of permutation and unit upper (lower) triangular matrices, and <code>D</code> is symmetric and block diagonal with 1 by 1 and 2 by 2 diagonal blocks. The factored form of <code>A</code> is then used to solve the system of equations <code>A * X = B.</code></p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a href="#CIAFBCIJ">LAPACK Driver Routines (Linear Equations) Subprograms</a> for other subprograms in this group</div>
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17564"></a>Syntax</p>
<pre>
UTL_NLA.LAPACK_SYSV (
   uplo    IN      flag,
   n       IN      POSITIVEN,
   nrhs    IN      POSITIVEN,
   a       IN OUT  UTL_NLA_ARRAY_DBL,
   lda     IN      POSITIVEN,
   ipiv    IN OUT  UTL_NLA_ARRAY_INT,
   b       IN OUT  UTL_NLA_ARRAY_DBL,
   ldb     IN      POSITIVEN,
   info    OUT     INTEGER,
   pack    IN      flag DEFAULT 'C');
</pre>
<pre>
UTL_NLA.LAPACK_SYSV (
   uplo   IN       flag,
   n      IN       POSITIVEN,
   nrhs   IN       POSITIVEN,
   a      IN OUT   UTL_NLA_ARRAY_FLT,
   lda    IN       POSITIVEN,
   ipiv   IN OUT   UTL_NLA_ARRAY_INT,
   b      IN OUT   UTL_NLA_ARRAY_FLT,
   ldb    IN       POSITIVEN,
   info   OUT      INTEGER,
   pack   IN       flag DEFAULT 'C');
</pre></div>
<!-- class="refsubsect" -->
<div class="refsubsect">
<p class="titleinrefsubsect"><a id="sthref17565"></a>Parameters</p>
<div id="ARPLS71349" class="tblformal">
<p class="titleintable"><a id="sthref17566"></a><a id="sthref17567"></a>Table 232-60 LAPACK_SYSV Procedure Parameters</p>
<table class="cellalignment1229" title="LAPACK_SYSV Procedure Parameters" summary="This table describes the Parameters of the UTL_NLA.LAPACK_SYSV subprogram." dir="ltr">
<thead>
<tr class="cellalignment1220">
<th class="cellalignment1227" id="r1c1-t114">Parameter</th>
<th class="cellalignment1227" id="r1c2-t114">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r2c1-t114" headers="r1c1-t114">
<p><code>uplo</code></p>
</td>
<td class="cellalignment1228" headers="r2c1-t114 r1c2-t114">
<ul>
<li>
<p><code>uplo = 'U'</code>. Upper triangular of <code>A</code> is stored.</p>
</li>
<li>
<p><code>uplo = 'L'</code> . Lower triangular of <code>A</code> is stored.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r3c1-t114" headers="r1c1-t114">
<p><code>n</code></p>
</td>
<td class="cellalignment1228" headers="r3c1-t114 r1c2-t114">
<p>The number of linear equations, which is the order of the matrix <code>a. N &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r4c1-t114" headers="r1c1-t114">
<p><code>nrhs</code></p>
</td>
<td class="cellalignment1228" headers="r4c1-t114 r1c2-t114">
<p>The number of right-hand sides, which is the number of columns of the matrix <code>b</code>. <code>nrhs &gt;= 0</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r5c1-t114" headers="r1c1-t114">
<p><code>a</code></p>
</td>
<td class="cellalignment1228" headers="r5c1-t114 r1c2-t114">
<p><code>UTL_NLA_ARRAY_FLT</code>/<code>DBL, DIMENSION (n-1)</code>.</p>
<p>On entry, the symmetric matrix <code>a</code>. If <code>UPLO</code> = <code>'U'</code>, the leading n by n upper triangular part of a contains the upper triangular part of the matrix <code>a</code>, and the strictly lower triangular part of a is not referenced. If <code>uplo = 'L'</code>, the leading n by n lower triangular part of a contains the lower triangular part of the matrix <code>a</code>, and the strictly upper triangular part of <code>a</code> is not referenced.</p>
<p>On exit, if <code>info</code> = 0, the block diagonal matrix <code>d</code> and the multipliers used to obtain the factor <code>U</code> or <code>L</code> from the factorization <code>A = U*D*U**T</code> or <code>A = L*D*L**T</code> as computed by <code>SSYTRF</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r6c1-t114" headers="r1c1-t114">
<p><code>lda</code></p>
</td>
<td class="cellalignment1228" headers="r6c1-t114 r1c2-t114">
<p>The leading dimension of the array <code>a</code>.</p>
<p><code>lda &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r7c1-t114" headers="r1c1-t114">
<p><code>ipiv</code></p>
</td>
<td class="cellalignment1228" headers="r7c1-t114 r1c2-t114">
<p><code>INTEGER array</code><code>, DIMENSION (ldb, nrhs)</code>.</p>
<p>Details of the interchanges and the block structure of <code>d</code>, as determined by <code>SSYTRF</code>.</p>
<ul>
<li>
<p>If <code>ipiv(k) &gt; 0</code>, then rows and columns <code>k</code> and <code>ipiv(k)</code> were interchanged, and <code>d(k,k)</code> is a 1 by1 diagonal block.</p>
</li>
<li>
<p>If <code>uplo</code> = <code>'U'</code> and <code>ipiv(k) = ipiv(k-1) &lt; 0</code>, then rows and columns <code>k-1</code> and <code>-ipiv(k)</code> were interchanged and <code>d(k-1:k,k-1:k)</code> is a 2 by 2 diagonal block.</p>
</li>
<li>
<p>If <code>uplo</code> = <code>'L'</code> and <code>ipiv(k) = ipiv(k+1) &lt; 0,</code> then rows and columns <code>k+1</code> and <code>-ipiv(k)</code> were interchanged and <code>d(k:k+1,k:k+1)</code> is a 2 by 2 diagonal block.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r8c1-t114" headers="r1c1-t114">
<p><code>b</code></p>
</td>
<td class="cellalignment1228" headers="r8c1-t114 r1c2-t114">
<p><code>UTL_NLA_ARRAY_FLT/DBL</code><code>, DIMENSION (ldb, nrhs)</code>.</p>
<p>On entry, the <code>n</code> by <code>nrhs</code> matrix of right hand side matrix <code>b</code>.</p>
<p>On exit, if <code>info = 0</code> , the <code>n</code> by <code>nrhs</code> solution matrix <code>X</code>.</p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r9c1-t114" headers="r1c1-t114">
<p><code>ldb</code></p>
</td>
<td class="cellalignment1228" headers="r9c1-t114 r1c2-t114">
<p>The leading dimension of the array <code>b</code>.</p>
<p><code>ldb &gt;= max(1,n)</code></p>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r10c1-t114" headers="r1c1-t114">
<p><code>info</code></p>
</td>
<td class="cellalignment1228" headers="r10c1-t114 r1c2-t114">
<ul>
<li>
<p><code>= 0</code> : successful exit</p>
</li>
<li>
<p><code>&lt; 0</code> : if <code>info = -i</code> , the <code>i</code>-th argument had an illegal value</p>
</li>
<li>
<p><code>&gt; 0</code> : if <code>info</code> = <code>i, d(i,i)</code> is exactly zero. The factorization has been completed, but the block diagonal matrix <code>d</code> is exactly singular, so the solution could not be computed.</p>
</li>
</ul>
</td>
</tr>
<tr class="cellalignment1220">
<td class="cellalignment1228" id="r11c1-t114" headers="r1c1-t114">
<p><code>pack</code></p>
</td>
<td class="cellalignment1228" headers="r11c1-t114 r1c2-t114">
<p>(Optional) Flags the packing of the matrices:</p>
<ul>
<li>
<p><code>'C'</code>: column-major (default)</p>
</li>
<li>
<p><code>'R'</code>: row-major</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" --></div>
<!-- class="refsubsect" --></div>
<!-- class="refsect2" --></div>
<!-- class="refsect1" --></div>
<!-- class="refentry" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1219">
<tr>
<td class="cellalignment1228">
<table class="cellalignment1224">
<tr>
<td class="cellalignment1223"><a href="u_match.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1223"><a href="u_raw.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1231">
<table class="cellalignment1222">
<tr>
<td class="cellalignment1223"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1223"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1223"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1223"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1223"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1223"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
