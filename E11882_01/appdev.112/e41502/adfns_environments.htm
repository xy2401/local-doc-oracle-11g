<!DOCTYPE html>
<html lang="en" >
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
<meta charset="utf-8">
<title>Choosing a Programming Environment</title>
<meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Merged Version 1032" />
<meta name="dcterms.created" content="2014-12-06T1:49:50Z" />
<meta name="robots" content="all" />
<meta name="dcterms.title" content="Database Advanced Application Developer's Guide" />
<meta name="dcterms.identifier" content="E41502-06" />
<meta name="dcterms.isVersionOf" content="ADFNS" />
<meta name="dcterms.rights" content="Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved." />
<link rel="Start" href="../../index.htm" title="Home" type="text/html" />
<link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html" />

<script type="application/javascript"  src="../../dcommon/js/headfoot.js"></script>
<script type="application/javascript"  src="../../nav/js/doccd.js"></script>
<link rel="Contents" href="toc.htm" title="Contents" type="text/html" />
<link rel="Index" href="index.htm" title="Index" type="text/html" />
<link rel="Prev" href="adfns_flashback.htm" title="Previous" type="text/html" />
<link rel="Next" href="adfns_externproc.htm" title="Next" type="text/html" />
<link rel="alternate" href="../e41502.pdf" title="PDF version" type="application/pdf" />
<link rel="schema.dcterms" href="http://purl.org/dc/terms/" />
<link rel="stylesheet" href="../../dcommon/css/fusiondoc.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/header.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/footer.css">
<link rel="stylesheet" type="text/css"  href="../../dcommon/css/fonts.css">
<link rel="stylesheet" href="../../dcommon/css/foundation.css">
<link rel="stylesheet" href="../../dcommon/css/codemirror.css">
<link rel="stylesheet" type="text/css" title="Default" href="../../nav/css/html5.css">
<link rel="stylesheet" href="../../dcommon/css/respond-480-tablet.css">
<link rel="stylesheet" href="../../dcommon/css/respond-768-laptop.css">
<link rel="stylesheet" href="../../dcommon/css/respond-1140-deskop.css">
<script type="application/javascript" src="../../dcommon/js/modernizr.js"></script>
<script type="application/javascript" src="../../dcommon/js/codemirror.js"></script>
<script type="application/javascript" src="../../dcommon/js/jquery.js"></script>
<script type="application/javascript" src="../../dcommon/js/foundation.min.js"></script>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-552992c80ef99c8d" async="async"></script>
<script type="application/javascript" src="../../dcommon/js/jqfns.js"></script>
<script type="application/javascript" src="../../dcommon/js/ohc-inline-videos.js"></script>
<!-- Add fancyBox -->
<link rel="stylesheet" href="../../dcommon/fancybox/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/jquery.fancybox.pack.js?v=2.1.5"></script>
<!-- Optionally add helpers - button, thumbnail and/or media -->
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.css?v=1.0.5"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-buttons.js?v=1.0.5"></script>
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-media.js?v=1.0.6"></script>
<link rel="stylesheet"  href="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.css?v=1.0.7"  type="text/css" media="screen" />
<script type="text/javascript" src="../../dcommon/fancybox/helpers/jquery.fancybox-thumbs.js?v=1.0.7"></script>
</head>
<body>
<a href="#BEGIN" class="accessibility-top skipto" tabindex="0">Go to main content</a><header><!--
<div class="zz-skip-header"><a id="top" href="#BEGIN">Go to main content</a>--></header>
<div class="row" id="CONTENT">
<div class="IND large-9 medium-8 columns" dir="ltr">
<a id="BEGIN" name="BEGIN"></a>
<span id="PAGE" style="display:none;">23/31</span> <!-- End Header -->
<div id="ADFNS00109" class="chapter"><a id="BABFCGCD"></a>
<h1 class="chapter"><span class="secnum">13</span> Choosing a Programming Environment</h1>
<p><a id="sthref840"></a><a id="sthref841"></a>To choose a programming environment for a development project, read:</p>
<ul>
<li>
<p>The topics in this chapter and the documents to which they refer.</p>
</li>
<li>
<p>The platform-specific documents that explain which compilers and development tools your platforms support.</p>
</li>
</ul>
<p>Sometimes the choice of programming environment is obvious, for example:</p>
<ul>
<li>
<p>Pro*COBOL does not support ADTs or collection types, while Pro*C/C++ does.</p>
</li>
<li>
<p>SQLJ does not support dynamic SQL the way that JDBC does.</p>
</li>
</ul>
<p>If no programming language provides all the features you need, you can use multiple programming languages, because:</p>
<ul>
<li>
<p>Every programming language in this chapter can invoke PL/SQL and Java stored subprograms. (Stored subprograms include triggers and ADT methods.)</p>
</li>
<li>
<p>PL/SQL, Java, SQL, and Oracle Call Interface (OCI) can invoke external C subprograms.</p>
</li>
<li>
<p>External C subprograms can access Oracle Database using SQL, OCI, or Pro*C (but not C++).</p>
</li>
</ul>
<p>For more information about multilanguage programming, see <a href="adfns_externproc.htm#g1040439">Chapter 14, "Developing Applications with Multiple Programming Languages."</a></p>
<p class="subhead2"><a id="sthref842"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABFCHEJ">Overview of Application Architecture</a></p>
</li>
<li>
<p><a href="#BABIFJBF">Overview of the Program Interface</a></p>
</li>
<li>
<p><a href="#i1006218">Overview of PL/SQL</a></p>
</li>
<li>
<p><a href="#i1014864">Overview of Oracle Database Java Support</a></p>
</li>
<li>
<p><a href="#BABGDICD">Choosing PL/SQL or Java</a></p>
</li>
<li>
<p><a href="#BABCFEGI">Overview of Precompilers</a></p>
</li>
<li>
<p><a href="#i1006785">Overview of OCI and OCCI</a></p>
</li>
<li>
<p><a href="#BABCFFHG">Choosing a Precompiler or OCI</a></p>
</li>
<li>
<p><a href="#i1017567">Overview of Oracle Data Provider for .NET (ODP.NET)</a></p>
</li>
<li>
<p><a href="#BABDGFGI">Overview of OraOLEDB</a></p>
</li>
<li>
<p><a href="#i1017297">Overview of Oracle Objects for OLE (OO4O)</a></p>
</li>
</ul>
<a id="BABFCHEJ"></a>
<div id="ADFNS00101" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Application Architecture</h2>
<p><a id="sthref843"></a>In this topic, <span class="bold">application architecture</span> refers to the computing environment in which a database application connects to an Oracle Database.</p>
<p class="subhead2"><a id="sthref844"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1750629">Client/Server Architecture</a></p>
</li>
<li>
<p><a href="#g1750685">Server-Side Programming</a></p>
</li>
<li>
<p><a href="#g1750727">Two-Tier and Three-Tier Architecture</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT006" href="../../server.112/e40540/dist_pro.htm#CNCPT006"><span class="italic">Oracle Database Concepts</span></a> for more information about application architecture</div>
<a id="g1750629"></a>
<div id="ADFNS650" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Client/Server Architecture</h3>
<p><a id="sthref845"></a>In a traditional client/server program, your application code runs on a client system; that is, a system other than the database server. Database calls are transmitted from the client system to the database server. Data is transmitted from the client to the server for insert and update operations and returned from the server to the client for query operations. The data is processed on the client system. Client/server programs are typically written by using precompilers, whereas SQL statements are embedded within the code of another language such as C, C++, or COBOL.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT701" href="../../server.112/e40540/dist_pro.htm#CNCPT701"><span class="italic">Oracle Database Concepts</span></a> for more information about client/server architecture</div>
</div>
<!-- class="sect2" -->
<a id="g1750685"></a>
<div id="ADFNS651" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Server-Side Programming</h3>
<p><a id="sthref846"></a>You can develop application logic that resides entirely inside the database by using triggers that are executed automatically when changes occur in the database or stored subprograms that are invoked explicitly. Off-loading the work from your application lets you reuse code that performs verification and cleanup and control database operations from a variety of clients. For example, by making stored subprograms invocable through a web server, you can construct a web-based user interface that performs the same functions as a client/server application.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT036" href="../../server.112/e40540/srvrside.htm#CNCPT036"><span class="italic">Oracle Database Concepts</span></a> for more information about server-side programming</div>
</div>
<!-- class="sect2" -->
<a id="g1750727"></a>
<div id="ADFNS652" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Two-Tier and Three-Tier Architecture</h3>
<p><a id="sthref847"></a><a id="sthref848"></a>Client/server computing is often referred to as a <span class="glossaryterm">two-tier model</span>: your application communicates directly with the database server. In the <span class="glossaryterm">three-tier model</span>, a separate application server processes the requests. The application server might be a basic web server, or might perform advanced functions like caching and load-balancing. Increasing the processing power of this middle tier lets you lessen the resources needed by client systems, resulting in a <a id="sthref849"></a><span class="bold">thin client configuration</span> in which the client system might need only a web browser or other means of sending requests over the TCP/IP or HTTP protocols.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT702" href="../../server.112/e40540/dist_pro.htm#CNCPT702"><span class="italic">Oracle Database Concepts</span></a> for more information about multitier architecture</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABIFJBF"></a>
<div id="ADFNS99963" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of the Program Interface</h2>
<p>The <a id="sthref850"></a><a id="sthref851"></a><span class="bold">program interface</span> is the software layer between a database application and Oracle Database. The program interface:</p>
<ul>
<li>
<p>Provides a security barrier, preventing destructive access to the SGA by client user processes</p>
</li>
<li>
<p>Acts as a communication mechanism, formatting information requests, passing data, and trapping and returning errors</p>
</li>
<li>
<p>Converts and translates data, particularly between different types of computers or to external user program data types</p>
</li>
</ul>
<p>The Oracle code acts as a server, performing database tasks on behalf of an application (a client), such as fetching rows from data blocks. The program interface consists of several parts, provided by both Oracle Database software and operating system-specific software.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT906" href="../../server.112/e40540/dist_pro.htm#CNCPT906"><span class="italic">Oracle Database Concepts</span></a> for more information about the program interface</div>
<p class="subhead2"><a id="sthref852"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1750791">User Interface</a></p>
</li>
<li>
<p><a href="#g1750837">Stateful and Stateless User Interfaces</a></p>
</li>
</ul>
<a id="g1750791"></a>
<div id="ADFNS653" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">User Interface</h3>
<p>The <a id="sthref853"></a><a id="sthref854"></a><span class="bold">user interface</span> is what your application displays to end users. It depends on the technology behind the application and the needs of the users themselves. Experienced users can enter SQL statements that are passed on to the database. Novice users can be shown a graphical user interface that uses the graphics libraries of the client system (such as Windows or X-Windows). Any of these traditional user interfaces can also be provided in a web browser through HTML and Java.</p>
</div>
<!-- class="sect2" -->
<a id="g1750837"></a>
<div id="ADFNS99958" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Stateful and Stateless User Interfaces</h3>
<p><a id="sthref855"></a><a id="sthref856"></a><a id="sthref857"></a>In traditional client/server applications, the application can keep a record of user actions and use this information over the course of one or more sessions. For example, past choices can be presented in a menu so that they do not have to be entered again. When the application can save information in this way, the application is considered <span class="glossaryterm">stateful</span>.</p>
<p>Web or thin-client applications that are <span class="glossaryterm">stateless</span> are easier to develop. Stateless applications gather all the required information, process it using the database, and then start over with the next user. This is a popular way to process single-screen requests such as customer registration.</p>
<p>There are many ways to add stateful action to web applications that are stateless by default. For example, an entry form on one web page can pass information to subsequent web pages, enabling you to construct a wizard-like interface that remembers user choices through several different steps. You can use cookies to store small items of information about the client system, and retrieve them when the user returns to a web site. You can use servlets to keep a database session open and store variables between requests from the same client.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006218"></a>
<div id="ADFNS00102" class="sect1">
<h2 class="sect1">Overview of PL/SQL</h2>
<p><a id="sthref858"></a>PL/SQL, the Oracle procedural extension of SQL, is a completely portable, high-performance transaction-processing language. PL/SQL lets you manipulate data with SQL statements; control program flow with conditional selection and loops; declare constants and variables; define subprograms; define types, subtypes, and ADTs and declare variables of those types; and trap runtime errors.</p>
<p>Applications written in any of the Oracle Database programmatic interfaces can invoke PL/SQL stored subprograms and send blocks of PL/SQL code to Oracle Database for execution. Third-generation language (3GL) applications can access PL/SQL scalar and composite data types through host variables and implicit data type conversion. A 3GL language is easier than assembler language for a human to understand and includes features such as named variables. Unlike a fourth-generation language (4GL), it is not specific to an application domain.</p>
<p>You can use PL/SQL to develop stored procedures that can be invoked by a web client.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink LNPLS001" href="../../appdev.112/e25519/overview.htm#LNPLS001"><span class="italic">Oracle Database PL/SQL Language Reference</span></a> for information about the advantages, main features, and architecture of PL/SQL</p>
</li>
<li>
<p><a href="adfns_web.htm#g1026380">Chapter 9, "Developing PL/SQL Web Applications,"</a> to learn how to use PL/SQL in web development</p>
</li>
</ul>
</div>
</div>
<!-- class="sect1" -->
<a id="i1014864"></a>
<div id="ADFNS00103" class="sect1">
<h2 class="sect1">Overview of Oracle Database Java Support</h2>
<p><a id="sthref859"></a>This section provides an overview of Oracle Database features that support Java applications. The database includes the core JDK libraries such as <code dir="ltr">java</code>.<code dir="ltr">lang</code>, <code dir="ltr">java</code>.<code dir="ltr">io</code>, and so on. The database supports client-side Java standards such as JDBC and SQLJ, and provides server-side JDBC and SQLJ drivers that enable data-intensive Java code to run within the database.</p>
<p class="subhead2"><a id="sthref860"></a>Topics:</p>
<ul>
<li>
<p><a href="#CHDDDJCA">Overview of Oracle&nbsp;JVM</a></p>
</li>
<li>
<p><a href="#CHDEFCJH">Overview of Oracle JDBC</a></p>
</li>
<li>
<p><a href="#i1013482">Overview of Oracle SQLJ</a></p>
</li>
<li>
<p><a href="#BABIHHBG">Comparing Oracle JDBC and Oracle SQLJ</a></p>
</li>
<li>
<p><a href="#CHDHEJHF">Overview of Oracle JPublisher</a></p>
</li>
<li>
<p><a href="#CHDGBADI">Overview of Java Stored Subprograms</a></p>
</li>
<li>
<p><a href="#CHDBDJCB">Overview of Oracle Database Web Services</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink JJDEV" href="../../java.112/e10588/toc.htm"><span class="italic">Oracle Database Java Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a></p>
</li>
<li>
<p><a class="olink JJPUB" href="../../java.112/e10587/toc.htm"><span class="italic">Oracle Database JPublisher User's Guide</span></a></p>
</li>
</ul>
</div>
<a id="CHDDDJCA"></a>
<div id="ADFNS654" class="sect2">
<h3 class="sect2">Overview of Oracle&nbsp;JVM</h3>
<p><a id="sthref861"></a>Oracle&nbsp;JVM, the Java Virtual Machine provided with the Oracle Database, is compliant with the J2SE version 1.5.x specification and supports the database session architecture.</p>
<p>Any database session can activate a dedicated JVM. All sessions share the same JVM code and statics; however, private states for any given session are held, and subsequently garbage collected, in an individual session space.</p>
<p>This design provides these benefits:</p>
<ul>
<li>
<p>Java applications have the same session isolation and data integrity as SQL operations.</p>
</li>
<li>
<p>You need not run Java in a separate process for data integrity.</p>
</li>
<li>
<p>Oracle&nbsp;JVM is a robust JVM with a small memory footprint.</p>
</li>
<li>
<p>The JVM has the same linear Symmetric Multiprocessing (SMP) scalability as the database and can support thousands of concurrent Java sessions.</p>
</li>
</ul>
<p>Oracle&nbsp;JVM works consistently with every platform supported by Oracle Database. Java applications that you develop with Oracle&nbsp;JVM can easily be ported to any supported platform.</p>
<p>Oracle&nbsp;JVM includes a deployment-time native compiler that enables Java code to be compiled once, stored in executable form, shared among users, and invoked more quickly and efficiently.</p>
<p>Security features of the database are also available with Oracle&nbsp;JVM. Java classes must be loaded in a database schema (by using Oracle JDeveloper, a third-party IDE, SQL*Plus, or the <code dir="ltr">loadjava</code> utility) before they can be called. Java class calls are secured and controlled through database authentication and authorization, Java 2 security, and invoker's rights (IR) or definer's rights (DR).</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT820" href="../../server.112/e40540/srvrside.htm#CNCPT820"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Oracle JVM</div>
</div>
<!-- class="sect2" -->
<a id="CHDEFCJH"></a>
<div id="ADFNS655" class="sect2">
<h3 class="sect2">Overview of Oracle JDBC</h3>
<p><a id="sthref862"></a> Java Database Connectivity (JDBC) is an Applications Programming Interface (API) that enables Java to send SQL statements to an object-relational database such as Oracle Database.</p>
<p>Oracle Database includes these extensions to the JDBC 1.22 standard:</p>
<ul>
<li>
<p>Support for Oracle data types</p>
</li>
<li>
<p>Performance enhancement by row prefetching</p>
</li>
<li>
<p>Performance enhancement by execution batching</p>
</li>
<li>
<p>Specification of query column types to save round-trips</p>
</li>
<li>
<p>Control of <code dir="ltr">DatabaseMetaData</code> calls</p>
</li>
</ul>
<p>Oracle Database supports all APIs from the JDBC 2.0 standard, including the core APIs, optional packages, and numerous extensions. Some highlights include datasources, JTA, and distributed transactions.</p>
<p>Oracle Database supports these features from the JDBC 3.0 standard:</p>
<ul>
<li>
<p>Support for JDK 1.5.</p>
</li>
<li>
<p>Toggling between local and global transactions.</p>
</li>
<li>
<p>Transaction savepoints.</p>
</li>
<li>
<p>Reuse of prepared statements by connection pools.</p>
</li>
</ul>
<div class="infobox-note">
<p class="notep1">Note:</p>
JDBC code and SQLJ code interoperate. For more information, see <a href="#BABIHHBG">"Comparing Oracle JDBC and Oracle SQLJ"</a>.)</div>
<p class="subhead2"><a id="sthref863"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABDCCCC">Oracle JDBC Drivers</a></p>
</li>
<li>
<p><a href="#g1028939">Sample JDBC 2.0 Program</a></p>
</li>
<li>
<p><a href="#g1028945">Sample Pre-2.0 JDBC Program</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT616" href="../../server.112/e40540/srvrside.htm#CNCPT616"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Java support in Oracle Database</div>
<a id="BABDCCCC"></a>
<div id="ADFNS656" class="sect3"><!-- infolevel="all" infotype="General" -->
<h4 class="sect3">Oracle JDBC Drivers</h4>
<p><a id="sthref864"></a>The JDBC standard defines four types of JDBC drivers:</p>
<div class="inftblinformal">
<table class="cellalignment1273" title="Types of JDBC Drivers" summary="This table summarizes the types of JDBC drivers." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t12">Type</th>
<th class="cellalignment1274" id="r1c2-t12">Description</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t12" headers="r1c1-t12">1</td>
<td class="cellalignment1275" headers="r2c1-t12 r1c2-t12">A JDBC-ODBC bridge. Software must be installed on client systems.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t12" headers="r1c1-t12">2</td>
<td class="cellalignment1275" headers="r3c1-t12 r1c2-t12">Native methods (calls C or C++) and Java methods. Software must be installed on the client.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t12" headers="r1c1-t12">3</td>
<td class="cellalignment1275" headers="r4c1-t12 r1c2-t12">Pure Java. The client uses sockets to call middleware on the server.</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t12" headers="r1c1-t12">4</td>
<td class="cellalignment1275" headers="r5c1-t12 r1c2-t12">The most pure Java solution. Talks directly to the database by using Java sockets.</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" -->
<p>JDBC is based on Part 3 of the SQL standard, "Call-Level Interface."</p>
<p>You can use JDBC to do dynamic SQL. In dynamic SQL, the embedded SQL statement to be executed is not known before the application is run and requires input to build the statement.</p>
<p>The drivers that are implemented by Oracle have extensions to the capabilities in the JDBC standard that was defined by Sun Microsystems.</p>
<p class="subhead2"><a id="sthref865"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABJAHDF">JDBC Thin Driver</a></p>
</li>
<li>
<p><a href="#BABJEBFE">JDBC OCI Driver</a></p>
</li>
<li>
<p><a href="#BABHJIIH">JDBC Server-Side Internal Driver</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT825" href="../../server.112/e40540/srvrside.htm#CNCPT825"><span class="italic">Oracle Database Concepts</span></a> for additional general information about JDBC drivers</p>
</li>
<li>
<p><a class="olink JJDBC" href="../../java.112/e16548/toc.htm"><span class="italic">Oracle Database JDBC Developer's Guide</span></a> for more information about JDBC</p>
</li>
</ul>
</div>
<a id="BABJAHDF"></a>
<div id="ADFNS657" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">JDBC Thin Driver</h5>
<p>The JDBC thin driver is a Type&nbsp;4 (100% pure Java) driver that uses Java sockets to connect directly to a database server. It has its own implementation of a Two-Task Common (TTC), a lightweight implementation of TCP/IP from Oracle Net. It is written entirely in Java and is therefore platform-independent.</p>
<p>The thin driver does not require Oracle software on the client side. It does need a TCP/IP listener on the server side. Use this driver in Java applets that are downloaded into a web browser or in applications for which you do not want to install Oracle client software. The thin driver is self-contained, but it opens a Java socket, and thus can only run in a browser that supports sockets.</p>
</div>
<!-- class="sect4" -->
<a id="BABJEBFE"></a>
<div id="ADFNS658" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">JDBC OCI Driver</h5>
<p>The JDBC OCI driver is a Type&nbsp; 2 JDBC driver. It makes calls to OCI written in C to interact with Oracle Database, thus using native and Java methods.</p>
<p>The OCI driver provides access to more features than the thin driver, such as Transparent Application Fail-Over, advanced security, and advanced LOB manipulation.</p>
<p>The OCI driver provides the highest compatibility between different Oracle Database versions. It also supports all installed Oracle Net adapters, including IPC, named pipes, TCP/IP, and IPX/SPX.</p>
<p>Because it uses native methods (a combination of Java and C) the OCI driver is platform-specific. It requires a client installation of version Oracle8<span class="italic">i</span> or later including Oracle Net, OCI libraries, CORE libraries, and all other dependent files. The OCI driver usually runs faster than the thin driver.</p>
<p>The OCI driver is not appropriate for Java applets, because it uses a C library that is platform-specific and cannot be downloaded into a web browser. It is usable in J2EE components running in middle-tier application servers, such as Oracle Application Server. Oracle Application Server provides middleware services and tools that support access between applications and browsers.</p>
</div>
<!-- class="sect4" -->
<a id="BABHJIIH"></a>
<div id="ADFNS659" class="sect4"><!-- infolevel="all" infotype="General" -->
<h5 class="sect4">JDBC Server-Side Internal Driver</h5>
<p>The JDBC server-side internal driver is a Type&nbsp;2 driver that runs inside the database server, reducing the number of round-trips needed to access large amounts of data. The driver, the Java server VM, the database, the Java native compiler (which speeds execution by as much as 10 times), and the SQL engine all run within the same address space.</p>
<p>This driver provides server-side support for any Java program used in the database. You can also call PL/SQL stored subprograms and triggers.</p>
<p>The server driver fully supports the same features and extensions as the client-side drivers.</p>
</div>
<!-- class="sect4" --></div>
<!-- class="sect3" -->
<a id="g1028939"></a>
<div id="ADFNS660" class="sect3">
<h4 class="sect3">Sample JDBC 2.0 Program</h4>
<p><a id="sthref866"></a>This example shows the recommended technique for looking up a data source using JNDI in JDBC 2.0:</p>
<pre dir="ltr">
// import the JDBC packages 
import java.sql.*; 
import javax.sql.*; 
import oracle.jdbc.pool.*; 
...
   InitialContext ictx = new InitialContext(); 
   DataSource ds = (DataSource)ictx.<span class="bold">lookup</span>("jdbc/OracleDS"); 
   Connection conn = ds.getConnection(); 
   Statement stmt = conn.createStatement(); 
   ResultSet rs = stmt.executeQuery("SELECT last_name FROM employees"); 
   while ( rs.next() ) { 
   out.println( rs.getString("ename") + "&lt;br&gt;"); 
   } 
conn.close(); 
</pre></div>
<!-- class="sect3" -->
<a id="g1028945"></a>
<div id="ADFNS661" class="sect3">
<h4 class="sect3">Sample Pre-2.0 JDBC Program</h4>
<p><a id="sthref867"></a>This source code registers an Oracle JDBC thin driver, connects to the database, creates a <code dir="ltr">Statement</code> object, runs a query, and processes the result set.</p>
<p>The <code dir="ltr">SELECT</code> statement retrieves and lists the contents of the <code dir="ltr">last_name</code> column of the <code dir="ltr">hr</code>.<code dir="ltr">employees</code> table.</p>
<pre dir="ltr">
import java.sql.*
import java.math.*
import java.io.*
import java.awt.*

class JdbcTest { 
  public static void main (String args []) throws SQLException { 
    // Load Oracle driver
    DriverManager.registerDriver (new oracle.jdbc.OracleDriver());
     
    // Connect to the local database
    Connection conn = 
      DriverManager.getConnection ("jdbc:oracle:<span class="bold">thin</span>:@myhost:1521:orcl", 
                                   "hr", "<span class="italic">password</span>");

    // Query the employee names 
    Statement stmt = conn.createStatement (); 
    ResultSet rset = stmt.executeQuery ("SELECT last_name FROM employees");

    // Print the name out 
    while (rset.next ())
      System.out.println (rset.getString (1));
    // Close the result set, statement, and the connection
    rset.close();
    stmt.close();
    conn.close();
  } 
} 
</pre>
<p>One Oracle Database extension to the JDBC drivers is a form of the <code dir="ltr">getConnection()</code> method that uses a <code dir="ltr">Properties</code> object. The <code dir="ltr">Properties</code> object lets you specify user, password, database information, row prefetching, and execution batching.</p>
<p>To use the OCI driver in this code, replace the <code dir="ltr">Connection</code> statement with this code, where <code dir="ltr">MyHostString</code> is an entry in the <code dir="ltr">tnsnames</code>.<code dir="ltr">ora</code> file:</p>
<pre dir="ltr">
Connection conn = DriverManager.getConnection ("jdbc:oracle:<span class="codeinlinebold">oci8</span>:@MyHostString",
    "hr", "<span class="italic">password</span>");
</pre>
<p>If you are creating an applet, then the <code dir="ltr">getConnection()</code> and <code dir="ltr">registerDriver()</code> strings are different.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1013482"></a>
<div id="ADFNS662" class="sect2">
<h3 class="sect2">Overview of Oracle SQLJ</h3>
<div class="infobox-note">
<p class="notep1">Note:</p>
In this document, <span class="bold">SQLJ</span> refers to Oracle SQLJ and its extensions.</div>
<p><a id="sthref868"></a>SQLJ is an ANSI SQL-1999 standard for embedding SQL statements in Java source code. SQLJ provides a simpler alternative to JDBC for both client-side and server-side SQL data access from Java.</p>
<p>A SQLJ source file contains Java source with embedded SQL statements. Oracle SQLJ supports dynamic and static SQL. Support for dynamic SQL is an Oracle extension to the SQLJ standard.</p>
<p>Oracle Database provides a translator and a run time driver to support SQLJ. The SQLJ translator is 100% pure Java and is portable to any JVM that is compliant with JDK version 1.1 or higher.</p>
<p>The Oracle SQLJ translator performs these tasks:</p>
<ul>
<li>
<p>Translates SQLJ source to Java code with calls to the SQLJ run time driver. The SQLJ translator converts the source code to pure Java source code and can check the syntax and semantics of static SQL statements against a database schema and verify the type compatibility of host variables with SQL types.</p>
</li>
<li>
<p>Compiles the generated Java code with the Java compiler.</p>
</li>
<li>
<p>(Optional) Creates profiles for the target database. SQLJ generates "profile" files with customization specific to Oracle Database.</p>
</li>
</ul>
<p>Oracle Database supports SQLJ stored subprograms and triggers that run in the Oracle&nbsp;JVM. SQLJ is integrated with JDeveloper. Source-level debugging support for SQLJ is available in JDeveloper.</p>
<p>This is an example of a simple SQLJ executable statement, which returns one value because <code dir="ltr">employee_id</code> is unique in the <code dir="ltr">employee</code> table:</p>
<pre dir="ltr">
String name;
#sql  { SELECT first_name INTO <span class="codeinlinebold">:</span>name FROM employees WHERE employee_id=112 };
System.out.println("Name is " + name + ", employee number = " + employee_id);
</pre>
<p>Each host variable (or qualified name or complex Java host expression) included in a SQL expression is preceded by a colon (:). Other SQLJ statements declare Java types. For example, you can declare an iterator (a construct related to a database cursor) for queries that retrieve many values, as follows:</p>
<pre dir="ltr">
#sql iterator EmpIter (String EmpNam, int EmpNumb);
</pre>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink JJPUB" href="../../java.112/e10587/toc.htm"><span class="italic">Oracle Database JPublisher User's Guide</span></a> for more examples and details about Oracle SQLJ syntax</div>
<p class="subhead2"><a id="sthref869"></a>Topics:</p>
<ul>
<li>
<p><a href="#i1013504">Benefits of SQLJ</a></p>
</li>
<li>
<p><a href="#g1029012">SQLJ Stored Subprograms in the Server</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT826" href="../../server.112/e40540/srvrside.htm#CNCPT826"><span class="italic">Oracle Database Concepts</span></a> for additional general information about SQLJ</div>
<a id="i1013504"></a>
<div id="ADFNS663" class="sect3">
<h4 class="sect3">Benefits of SQLJ</h4>
<p>Oracle SQLJ extensions to Java enable rapid development and easy maintenance of applications that perform database operations through embedded SQL.</p>
<p>In particular, Oracle SQLJ does this:</p>
<ul>
<li>
<p>Provides a concise, legible mechanism for database access from static SQL. Most SQL in applications is static. SQLJ provides more concise and less error-prone static SQL constructs than JDBC does.</p>
</li>
<li>
<p>Provides an SQL Checker module for verification of syntax and semantics at translate time.</p>
</li>
<li>
<p>Provides flexible deployment configurations, which makes it possible to implement SQLJ on the client, server, or middle tier.</p>
</li>
<li>
<p>Supports a software standard. SQLJ is an effort of a group of vendors and is supported by all of them. Applications can access multiple database vendors.</p>
</li>
<li>
<p>Provides source code portability. Executables can be used with all of the vendor DBMSs if the code does not rely on any vendor-specific features.</p>
</li>
<li>
<p>Enforces a uniform programming style for the clients and the servers.</p>
</li>
<li>
<p>Integrates the SQLJ translator with <a id="sthref870"></a><a id="sthref871"></a><span class="glossaryterm">Oracle JDeveloper</span>, a graphical IDE that provides SQLJ translation, Java compilation, profile customizing, and debugging at the source code level, all in one step.</p>
</li>
<li>
<p>Includes Oracle Database type extensions.</p>
</li>
</ul>
</div>
<!-- class="sect3" -->
<a id="g1029012"></a>
<div id="ADFNS664" class="sect3">
<h4 class="sect3">SQLJ Stored Subprograms in the Server</h4>
<p>SQLJ applications can be stored and executed in the server by using these techniques:</p>
<ul>
<li>
<p>Translate, compile, and customize the SQLJ source code on a client and load the generated classes and resources into the server with the <code dir="ltr">loadjava</code> utility. The classes are typically stored in a Java archive (.<code dir="ltr">jar</code>) file.</p>
</li>
<li>
<p>Load the SQLJ source code into the server, also using <code dir="ltr">loadjava</code>, where it is translated and compiled by the server's embedded translator.</p>
</li>
</ul>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="BABIHHBG"></a>
<div id="ADFNS665" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Comparing Oracle JDBC and Oracle SQLJ</h3>
<p><a id="sthref872"></a><a id="sthref873"></a>JDBC code and SQLJ code interoperate, enabling dynamic SQL statements in JDBC to be used with both static and dynamic SQL statements in SQLJ. A SQLJ iterator class corresponds to the JDBC result set.</p>
<p>Some differences between JDBC and SQLJ are:</p>
<ul>
<li>
<p>JDBC provides a complete dynamic SQL interface from Java to databases. It gives developers full control over database operations. SQLJ simplifies Java database programming to improve development productivity.</p>
</li>
<li>
<p>JDBC provides fine-grained control of the execution of dynamic SQL from Java, whereas SQLJ provides a higher-level binding to SQL operations in a specific database schema.</p>
</li>
<li>
<p>SQLJ source code is more concise than equivalent JDBC source code.</p>
</li>
<li>
<p>SQLJ uses database connections to type-check static SQL code. JDBC, being a completely dynamic API, does not.</p>
</li>
<li>
<p>SQLJ provides strong typing of query outputs and return parameters and provides type-checking on calls. JDBC passes values to and from SQL without compile-time type checking.</p>
</li>
<li>
<p>SQLJ programs enable direct embedding of Java bind expressions within SQL statements. JDBC requires a separate get or set statement for each bind variable and specifies the binding by position number.</p>
</li>
<li>
<p>SQLJ provides simplified rules for calling SQL stored subprograms.</p>
<p>For example, the following four examples show, on successive lines, how to call a stored procedure or a stored function using either JDBC escape syntax or Oracle JDBC syntax:</p>
<pre dir="ltr">
prepStmt.prepareCall("{call fun(?,?)}");       //stored proc. JDBC esc.
prepStmt.prepareCall("{? = call fun(?,?)}");   //stored func. JDBC esc.
prepStmt.prepareCall("begin fun(:1,:2);end;"); //stored proc. Oracle
prepStmt.prepareCall("begin :1 := fun(:2,:3);end;"); //stored func. Oracle
</pre>
<p>The SQLJ equivalent is:</p>
<pre dir="ltr">
#sql {call fun(<span class="italic">param_list</span>) };  //Stored procedure
// Declare x
...
#sql x = {VALUES(fun(<span class="italic">param_list</span>)) };  // Stored function
// where VALUES is the SQL construct
</pre></li>
</ul>
<p>These benefits are common to SQLJ and JDBC:</p>
<ul>
<li>
<p>SQLJ source files can contain JDBC calls. SQLJ and JDBC are interoperable.</p>
</li>
<li>
<p>Oracle JPublisher generates custom Java classes to be used in your SQLJ or JDBC application for mappings to Oracle Database ADTs and collections.</p>
</li>
<li>
<p>PL/SQL and Java stored subprograms can be used interchangeably.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="CHDHEJHF"></a>
<div id="ADFNS666" class="sect2">
<h3 class="sect2">Overview of Oracle JPublisher</h3>
<p><span class="glossaryterm"><a id="sthref874"></a>Oracle JPublisher</span> is a code generator that automates the process of creating database-centric Java classes by hand. Oracle JPublisher is a client-side utility and is built into the database system. You can run Oracle JPublisher from the command line or directly from the Oracle JDeveloper IDE.</p>
<p>Oracle JPublisher inspects PL/SQL packages and database object types such as ADTs, <code dir="ltr">VARRAY</code> types, and nested table types, and then generates a Java class that is a wrapper around the PL/SQL package with corresponding fields and methods.</p>
<p>The generated Java class can be incorporated and used by Java clients or J2EE components to exchange and transfer database object type instances to and from the database transparently.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1809" href="../../server.112/e40540/cncptdev.htm#CNCPT1809"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Oracle JPublisher</p>
</li>
<li>
<p><a class="olink JJPUB" href="../../java.112/e10587/toc.htm"><span class="italic">Oracle Database JPublisher User's Guide</span></a> for complete information about Oracle JPublisher</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDGBADI"></a>
<div id="ADFNS667" class="sect2">
<h3 class="sect2">Overview of Java Stored Subprograms</h3>
<p>Java stored subprograms enable you to implement programs that run in the database server and are independent of programs that run in the middle tier. Structuring applications in this way reduces complexity and increases reuse, security, performance, and scalability.</p>
<p>For example, you can create a Java stored subprogram that performs operations that require data persistence and a separate program to perform presentation or business logic operations.</p>
<p>Java stored subprograms interface with SQL using an execution model similar to that of PL/SQL.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p><a class="olink CNCPT1805" href="../../server.112/e40540/srvrside.htm#CNCPT1805"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Java stored subprograms</p>
</li>
<li>
<p><a class="olink JJDEV01530" href="../../java.112/e10588/chone.htm#JJDEV01530"><span class="italic">Oracle Database Java Developer's Guide</span></a> for complete information about Java stored subprograms</p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" -->
<a id="CHDBDJCB"></a>
<div id="ADFNS668" class="sect2">
<h3 class="sect2">Overview of Oracle Database Web Services</h3>
<p><a id="sthref875"></a>Web services represent a distributed computing paradigm for Java application development that is an alternative to earlier Java protocols such as JDBC, and which enable applications to interact through the XML and web protocols. For example, an electronics parts vendor can provide a web-based programmatic interface to its suppliers for inventory management. The vendor can invoke a web service as part of a program and automatically order stock based on the data returned.</p>
<p>The key technologies used in web services are:</p>
<ul>
<li>
<p>Web Services Description Language (WSDL), which is a standard format for creating an XML document. WSDL describes what a web service can do, where it resides, and how to invoke it. Specifically, it describes the operations and parameters, including parameter types, provided by a web service. In addition, a WSDL document describes the location, the transport protocol, and the invocation style for the web service.</p>
</li>
<li>
<p>Simple Object Access Protocol (SOAP) messaging, which is an XML-based message protocol used by web services. SOAP does not prescribe a specific transport mechanism such as HTTP, FTP, SMTP, or JMS; however, most web services accept messages that use HTTP or HTTPS.</p>
</li>
<li>
<p>Universal Description, Discovery, and Integration (UDDI) business registry, which is a directory that lists web services on the internet. The UDDI registry is often compared to a telephone directory, listing unique identifiers (white pages), business categories (yellow pages), and instructions for binding to a service protocol (green pages).</p>
</li>
</ul>
<p>Web services can use a variety of techniques and protocols. For example:</p>
<ul>
<li>
<p>Dispatching can occur in a synchronous (typical) or asynchronous manner.</p>
</li>
<li>
<p>You can invoke a web service in an RPC-style operation in which arguments are sent and a response returned, or in a message style such as a one-way SOAP document exchange.</p>
</li>
<li>
<p>You can use different encoding rules: literal or encoded.</p>
</li>
</ul>
<p>You can invoke a web service statically, when you might know everything about it beforehand, or dynamically, in which case you can discover its operations and transport endpoints while using it.</p>
<p>Oracle Database can function as either a web service provider or as a web service consumer. When used as a provider, the database enables sharing and disconnected access to stored subprograms, data, metadata, and other database resources such as the queuing and messaging systems.</p>
<p>As a web service provider, Oracle Database provides a disconnected and heterogeneous environment that:</p>
<ul>
<li>
<p>Exposes stored subprograms independently of the language in which the subprograms are written</p>
</li>
<li>
<p>Exposes SQL Queries and XQuery</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1271" href="../../server.112/e40540/dist_pro.htm#CNCPT1271"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Oracle Database as a web service provider</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABGDICD"></a>
<div id="ADFNS99961" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Choosing PL/SQL or Java</h2>
<p><a id="sthref876"></a><a id="sthref877"></a>PL/SQL and Java interoperate in the server. You can run a PL/SQL package from Java or wrap a PL/SQL class with a Java wrapper so that it can be invoked from distributed CORBA and Enterprise Java Beans clients.</p>
<p><a href="#g1022106">Table 13-1</a> shows PL/SQL packages and their Java equivalents.</p>
<div id="ADFNS669" class="tblformal">
<p class="titleintable"><a id="sthref878"></a><a id="g1022106"></a>Table 13-1 PL/SQL Packages and Their Java Equivalents</p>
<table class="cellalignment1278" title=" PL/SQL Packages and Their Java Equivalents" summary="This table lists PL/SQL packages and their Java equivalents." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t20">PL/SQL Package</th>
<th class="cellalignment1274" id="r1c2-t20">Java Equivalent</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_ALERT</code></p>
</td>
<td class="cellalignment1275" headers="r2c1-t20 r1c2-t20">
<p>Call package with SQLJ or JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_DDL</code></p>
</td>
<td class="cellalignment1275" headers="r3c1-t20 r1c2-t20">
<p>JDBC has this functionality.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_JOB</code></p>
</td>
<td class="cellalignment1275" headers="r4c1-t20 r1c2-t20">
<p>Schedule a job that has a Java stored subprogram.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_LOCK</code></p>
</td>
<td class="cellalignment1275" headers="r5c1-t20 r1c2-t20">
<p>Call with SQLJ or JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r6c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_MAIL</code></p>
</td>
<td class="cellalignment1275" headers="r6c1-t20 r1c2-t20">
<p>Use JavaMail.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r7c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_OUTPUT</code></p>
</td>
<td class="cellalignment1275" headers="r7c1-t20 r1c2-t20">
<p>Use subclass <code dir="ltr">oracle</code>.<code dir="ltr">aurora</code>.<code dir="ltr">rdbms</code>.<code dir="ltr">OracleDBMSOutputStream</code> or Java stored subprogram <code dir="ltr">DBMS_JAVA</code>.<code dir="ltr">SET_STREAMS</code>.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r8c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_PIPE</code></p>
</td>
<td class="cellalignment1275" headers="r8c1-t20 r1c2-t20">
<p>Call with SQLJ or JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r9c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_SESSION</code></p>
</td>
<td class="cellalignment1275" headers="r9c1-t20 r1c2-t20">
<p>Use JDBC to run an <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r10c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_SNAPSHOT</code></p>
</td>
<td class="cellalignment1275" headers="r10c1-t20 r1c2-t20">
<p>Call with SQLJ or JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r11c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_SQL</code></p>
</td>
<td class="cellalignment1275" headers="r11c1-t20 r1c2-t20">
<p>Use JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r12c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_TRANSACTION</code></p>
</td>
<td class="cellalignment1275" headers="r12c1-t20 r1c2-t20">
<p>Use JDBC to run an <code dir="ltr">ALTER</code> <code dir="ltr">SESSION</code> statement.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r13c1-t20" headers="r1c1-t20">
<p><code dir="ltr">DBMS_UTILITY</code></p>
</td>
<td class="cellalignment1275" headers="r13c1-t20 r1c2-t20">
<p>Call with SQLJ or JDBC.</p>
</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r14c1-t20" headers="r1c1-t20">
<p><code dir="ltr">UTL_FILE</code></p>
</td>
<td class="cellalignment1275" headers="r14c1-t20 r1c2-t20">
<p>Grant the <code dir="ltr">JAVAUSERPRIV</code> privilege and then use Java I/O entry points.</p>
</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="tblformal" -->
<p class="subhead2"><a id="sthref879"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABBIDHB">Similarities of PL/SQL and Java</a></p>
</li>
<li>
<p><a href="#BABDDJHJ">PL/SQL Advantages Over Java</a></p>
</li>
<li>
<p><a href="#BABIIFBJ">Java Advantages Over PL/SQL</a></p>
</li>
</ul>
<a id="BABBIDHB"></a>
<div id="ADFNS670" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Similarities of PL/SQL and Java</h3>
<p>Both PL/SQL and Java provide packages and libraries.</p>
<p>Both PL/SQL and Java have object-oriented features:</p>
<ul>
<li>
<p>Both have inheritance.</p>
</li>
<li>
<p>PL/SQL has <span class="glossaryterm">type evolution</span>, the ability to change methods and attributes of a type while preserving subtypes and table data that use the type.</p>
</li>
<li>
<p>Java has polymorphism and component models for developing distributed systems.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="BABDDJHJ"></a>
<div id="ADFNS671" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">PL/SQL Advantages Over Java</h3>
<p>As an extension of SQL, PL/SQL supports all SQL data types, data encapsulation, information hiding, overloading, and exception-handling. Therefore:</p>
<ul>
<li>
<p>SQL data types are easier to use in PL/SQL than in Java.</p>
</li>
<li>
<p>SQL operations are faster with PL/SQL than with Java, especially when a large amount of data is involved, when mostly database access is done, or when bulk operations are used.</p>
<p>Some advanced PL/SQL capabilities are not available for Java in Oracle9<span class="italic">i</span> (for example, autonomous transactions and the dblink facility for remote databases).</p>
</li>
</ul>
<p>Code development is usually faster in PL/SQL than in Java.</p>
</div>
<!-- class="sect2" -->
<a id="BABIIFBJ"></a>
<div id="ADFNS672" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Java Advantages Over PL/SQL</h3>
<p>Java is used for open distributed applications, and many Java-based development tools are available throughout the industry. Java has a richer type system than PL/SQL. Java can use CORBA (which can have many different computer languages in its clients) and Enterprise Java Beans. PL/SQL packages can be invoked from CORBA or Enterprise Java Beans clients. You can run XML tools, the Internet File System, or JavaMail from Java.</p>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCFEGI"></a>
<div id="ADFNS99962" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Overview of Precompilers</h2>
<p><a id="sthref880"></a>Client/server programs are typically written using <span class="bold">precompilers</span>, which are programming tools that let you embed SQL statements in high-level programs written in languages such as C, C++, or COBOL. Because the client application hosts the SQL statements, it is called a <a id="sthref881"></a><span class="bold">host program</span>, and the language in which it is written is called the <a id="sthref882"></a><span class="bold">host language</span>.</p>
<p>A precompiler accepts the host program as input, translates the embedded SQL statements into standard database runtime library calls, and generates a source program that you can compile, link, and run in the usual way.</p>
<p class="subhead2"><a id="sthref883"></a>Topics:</p>
<ul>
<li>
<p><a href="#BABFFJCC">Overview of the Pro*C/C++ Precompiler</a></p>
</li>
<li>
<p><a href="#BABJHJEJ">Overview of the Pro*COBOL Precompiler</a></p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink CNCPT1765" href="../../server.112/e40540/cncptdev.htm#CNCPT1765"><span class="italic">Oracle Database Concepts</span></a> for additional general information about Oracle precompilers</div>
<a id="BABFFJCC"></a>
<div id="ADFNS00104" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of the Pro*C/C++ Precompiler</h3>
<p><a id="sthref884"></a>For the Pro*C/C++ precompiler, the host language is either C or C++. Some features of the Pro*C/C++ precompiler are:</p>
<ul>
<li>
<p>You can write multithreaded programs if your platform supports a threads package. Concurrent connections are supported in either single-threaded or multithreaded applications.</p>
</li>
<li>
<p>You can improve performance by embedding PL/SQL blocks. These blocks can invoke subprograms in Java or PL/SQL that are written by you or provided in Oracle Database packages.</p>
</li>
<li>
<p>Using precompiler options, you can check the syntax and semantics of your SQL or PL/SQL statements during precompilation, and at run time.</p>
</li>
<li>
<p>You can invoke stored PL/SQL and Java subprograms. Modules written in COBOL or in C can be invoked from Pro*C/C++. External C subprograms in shared libraries can be invoked by your program.</p>
</li>
<li>
<p>You can conditionally precompile sections of your code so that they can run in different environments.</p>
</li>
<li>
<p>You can use arrays, or structures, or arrays of structures as host and indicator variables in your code to improve performance.</p>
</li>
<li>
<p>You can deal with errors and warnings so that data integrity is guaranteed. As a programmer, you control how errors are handled.</p>
</li>
<li>
<p>Your program can convert between internal data types and C language data types.</p>
</li>
<li>
<p>The Oracle Call Interface (OCI) and Oracle C++ Call Interface (OCCI), lower-level C and C++ interfaces, are available for use in your precompiler source.</p>
</li>
<li>
<p>Pro*C/C++ supports dynamic SQL, a technique that enables users to input variable values and statement syntax.</p>
</li>
<li>
<p>Pro*C/C++ can use special SQL statements to manipulate tables containing user-defined object types. An Object Type Translator (OTT) maps the ADTs and named collection types in your database to structures and headers that you include in your source.</p>
</li>
<li>
<p>Two kinds of collection types, nested tables and <code dir="ltr">VARRAY</code>, are supported with a set of SQL statements that give you a high degree of control over data.</p>
</li>
<li>
<p>Large Objects are accessed by another set of SQL statements.</p>
</li>
<li>
<p>A new ANSI SQL standard for dynamic SQL is supported for new applications, so that you can run SQL statements with a varying number of host variables. An older technique for dynamic SQL is still usable by pre-existing applications.</p>
</li>
<li>
<p>Globalization support lets you use multibyte characters and UCS2 Unicode data.</p>
</li>
<li>
<p>Using scrollable cursors, you can move backward and forward through a result set. For example, you can fetch the last row of the result set, or jump forward or backward to an absolute or relative position within the result set.</p>
</li>
<li>
<p><a id="sthref885"></a><a id="sthref886"></a>A <span class="bold">connection pool</span> is a group of physical connections to a database that can be shared by several named connections. Enabling the connection pool option can help optimize the performance of Pro*C/C++ application. The connection pool option is not enabled by default.</p>
</li>
</ul>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCC" href="../../appdev.112/e10825/toc.htm"><span class="italic">Pro*C/C++ Precompiler Programmer's Guide</span></a> for complete information about the Pro*C/C++ precompiler</div>
<p><a href="#BABJAJIH">Example 13-1</a> is a code fragment from a C source program that queries the table <code dir="ltr">employees</code> in the schema <code dir="ltr">hr</code>.</p>
<div id="ADFNS673" class="example">
<p class="titleinexample"><a id="BABJAJIH"></a>Example 13-1 Pro*C/C++ Application</p>
<pre dir="ltr">
...
#define  UNAME_LEN   10
...
int   emp_number;
/* Define a host structure for the output values of a SELECT statement. */
/* No declare section needed if precompiler option MODE=ORACLE          */
struct {
    VARCHAR  last_name[UNAME_LEN];
    float    salary;
    float    commission_pct;
} emprec;
/* Define an indicator structure to correspond to the host output structure. */
struct {
    short emp_name_ind;
    short sal_ind;
    short comm_ind;
} emprec_ind;
...
/* Select columns last_name, salary, and commission_pct given the user's input 
/* for employee_id. */
    EXEC SQL SELECT last_name, salary, commission_pct
        INTO :emprec INDICATOR :emprec_ind
        FROM employees
        WHERE employee_id = :emp_number;
...
</pre>
<p>The embedded <code dir="ltr">SELECT</code> statement differs slightly from the interactive (SQL*Plus) <code dir="ltr">SELECT</code> statement. Every embedded SQL statement begins with <code dir="ltr">EXEC</code> <code dir="ltr">SQL</code>. The colon (:) precedes every host (C) variable. The returned values of data and indicators (set when the data value is <code dir="ltr">NULL</code> or character columns were truncated) can be stored in structs (such as in the preceding code fragment), in arrays, or in arrays of structs. Multiple result set values are handled very simply in a manner that resembles the case shown, where there is only one result, because of the unique employee number. Use the actual names of columns and tables in embedded SQL.</p>
<p>Either use the default precompiler option values or enter values that give you control over the use of resources, how errors are reported, the formatting of output, and how cursors (which correspond to a particular connection or SQL statement) are managed. Cursors are used when there are multiple result set values.</p>
<p>Enter the options either in a configuration file, on the command line, or inline inside your source code with a special statement that begins with <code dir="ltr">EXEC</code> <code dir="ltr">ORACLE</code>. If there are no errors found, you can compile, link, and run the output source file, like any other C program that you write.</p>
<p>Use the precompiler to create server database access from clients that can be on many different platforms. Pro*C/C++ gives you the freedom to design your own user interfaces and to add database access to existing applications.</p>
<p>Before writing your embedded SQL statements, you can test interactive versions of the SQL in SQL*Plus and then make minor changes to start testing your embedded SQL application.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" -->
<a id="BABJHJEJ"></a>
<div id="ADFNS00105" class="sect2"><!-- infolevel="all" infotype="General" -->
<h3 class="sect2">Overview of the Pro*COBOL Precompiler</h3>
<p><a id="sthref887"></a>For the Pro*COBOL precompiler, the host language is COBOL. Some features of the Pro*COBOL precompiler are:</p>
<ul>
<li>
<p>You can invoke stored PL/SQL or Java subprograms. You can improve performance by embedding PL/SQL blocks. These blocks can invoke PL/SQL subprograms written by you or provided in Oracle Database packages.</p>
</li>
<li>
<p>Precompiler options enable you to define how cursors, errors, syntax-checking, file formats, and so on, are handled.</p>
</li>
<li>
<p>Using precompiler options, you can check the syntax and semantics of your SQL or PL/SQL statements during precompilation, and at run time.</p>
</li>
<li>
<p>You can conditionally precompile sections of your code so that they can run in different environments.</p>
</li>
<li>
<p>Use tables, or group items, or tables of group items as host and indicator variables in your code to improve performance.</p>
</li>
<li>
<p>You can program how errors and warnings are handled, so that data integrity is guaranteed.</p>
</li>
<li>
<p>Pro*COBOL supports dynamic SQL, a technique that enables users to input variable values and statement syntax.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink LNPCB" href="../../appdev.112/e10826/toc.htm"><span class="italic">Pro*COBOL Programmer's Guide</span></a> for complete information about the Pro*COBOL precompiler</div>
</li>
</ul>
<p><a href="#BABFHEJI">Example 13-2</a> is a code fragment from a COBOL source program that queries the table <code dir="ltr">employees</code> in the schema <code dir="ltr">hr</code>.</p>
<div id="ADFNS674" class="example">
<p class="titleinexample"><a id="BABFHEJI"></a>Example 13-2 Pro*COBOL Application</p>
<pre dir="ltr">
...
 WORKING-STORAGE SECTION.
*
* DEFINE HOST INPUT AND OUTPUT HOST AND INDICATOR VARIABLES.
* NO DECLARE SECTION NEEDED IF MODE=ORACLE.
*
 01  EMP-REC-VARS.
     05  EMP-NAME    PIC X(10) VARYING.
     05  EMP-NUMBER  PIC S9(4) COMP VALUE ZERO.
     05  SALARY      PIC S9(5)V99 COMP-3 VALUE ZERO.
     05  COMMISSION  PIC S9(5)V99 COMP-3 VALUE ZERO.
     05  COMM-IND    PIC S9(4) COMP VALUE ZERO.
...
 PROCEDURE DIVISION.
...
     EXEC SQL
         SELECT last_name, salary, commission_pct
         INTO :EMP-NAME, :SALARY, :COMMISSION:COMM-IND
         FROM employees
         WHERE employee_id = :EMP-NUMBER
     END-EXEC.
...
</pre>
<p>The embedded <code dir="ltr">SELECT</code> statement is only slightly different from an interactive (SQL*Plus) <code dir="ltr">SELECT</code> statement. Every embedded SQL statement begins with EXEC SQL. The colon (:) precedes every host (COBOL) variable. The SQL statement is terminated by <code dir="ltr">END-EXEC</code>. The returned values of data and indicators (set when the data value is <code dir="ltr">NULL</code> or character columns were truncated) can be stored in group items (such as in the preceding code fragment), in tables, or in tables of group items. Multiple result set values are handled very simply in a manner that resembles the case shown, where there is only one result, given the unique employee number. Use the actual names of columns and tables in embedded SQL.</p>
<p>Use the default precompiler option values, or enter values that give you control over the use of resources, how errors are reported, the formatting of output, and how cursors are managed (cursors correspond to a particular connection or SQL statement).</p>
<p>Enter the options in a configuration file, on the command line, or inline inside your source code with a special statement that begins with EXEC ORACLE. If there are no errors found, you can compile, link, and run the output source file, like any other COBOL program that you write.</p>
<p>Use the precompiler to create server database access from clients that can be on many different platforms. Pro*COBOL gives you the freedom to design your own user interfaces and to add database access to existing COBOL applications.</p>
<p>The embedded SQL statements available conform to an ANSI standard, so that you can access data from many databases in a program, including remote servers networked through Oracle Net.</p>
<p>Before writing your embedded SQL statements, you can test interactive versions of the SQL in SQL*Plus and then make minor changes to start testing your embedded SQL application.</p>
</div>
<!-- class="example" --></div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="i1006785"></a>
<div id="ADFNS00106" class="sect1">
<h2 class="sect1">Overview of OCI and OCCI</h2>
<p><a id="sthref888"></a><a id="sthref889"></a>The Oracle Call Interface (OCI) and Oracle C++ Call Interface (OCCI) are application programming interfaces (APIs) that enable you to create applications that use native subprogram invocations of a third-generation language to access Oracle Database and control all phases of SQL statement execution. These APIs provide:</p>
<ul>
<li>
<p>Improved performance and scalability through the efficient use of system memory and network connectivity</p>
</li>
<li>
<p>Consistent interfaces for dynamic session and transaction management in a two-tier client/server or multitier environment</p>
</li>
<li>
<p><span class="italic">N</span>-tiered authentication</p>
</li>
<li>
<p>Comprehensive support for application development using Oracle Database objects</p>
</li>
<li>
<p>Access to external databases</p>
</li>
<li>
<p>Ability to develop applications that service an increasing number of users and requests without additional hardware investments</p>
</li>
</ul>
<p>OCI lets you manipulate data and schemas in a database using a host programming language, such as C. OCCI is an object-oriented interface suitable for use with C++. These APIs provide a library of standard database access and retrieval functions in the form of a dynamic runtime library (OCILIB) that can be linked in an application at run time. You need not embed SQL or PL/SQL within 3GL programs.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
For more information about OCI and OCCI calls:
<ul>
<li>
<p><a class="olink LNOCI" href="../e10646/toc.htm"><span class="italic">Oracle Call Interface Programmer's Guide</span></a></p>
</li>
<li>
<p><a class="olink LNCPP" href="../e10764/toc.htm"><span class="italic">Oracle C++ Call Interface Programmer's Guide</span></a></p>
</li>
<li>
<p><a class="olink ADQUE0300" href="../../server.112/e11013/aq_envir.htm#ADQUE0300"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
<li>
<p><a class="olink NLSPG" href="../../server.112/e10729/toc.htm"><span class="italic">Oracle Database Globalization Support Guide</span></a></p>
</li>
<li>
<p><a class="olink ADDCI4180" href="../../appdev.112/e10765/serv_c_java_ref.htm#ADDCI4180"><span class="italic">Oracle Database Data Cartridge Developer's Guide</span></a></p>
</li>
</ul>
</div>
<p class="subhead2"><a id="sthref890"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1029470">Advantages of OCI and OCCI</a></p>
</li>
<li>
<p><a href="#i1006837">OCI and OCCI Functions</a></p>
</li>
<li>
<p><a href="#g1029491">Procedural and Nonprocedural Elements of OCI and OCCI Applications</a></p>
</li>
<li>
<p><a href="#g1029499">Building an OCI or OCCI Application</a></p>
</li>
</ul>
<a id="g1029470"></a>
<div id="ADFNS675" class="sect2">
<h3 class="sect2">Advantages of OCI and OCCI</h3>
<p>OCI and OCCI provide significant advantages over other methods of accessing Oracle Database:</p>
<ul>
<li>
<p>More fine-grained control over all aspects of the application design.</p>
</li>
<li>
<p>High degree of control over program execution.</p>
</li>
<li>
<p>Use of familiar 3GL programming techniques and application development tools such as browsers and debuggers.</p>
</li>
<li>
<p>Support of dynamic SQL, method 4.</p>
</li>
<li>
<p>Availability on the broadest range of platforms of all the Oracle Database programmatic interfaces.</p>
</li>
<li>
<p>Dynamic bind and define using callbacks.</p>
</li>
<li>
<p>Describe functionality to expose layers of server metadata.</p>
</li>
<li>
<p>Asynchronous event notification for registered client applications.</p>
</li>
<li>
<p>Enhanced array data manipulation language (DML) capability for arrays.</p>
</li>
<li>
<p>Ability to associate a commit request with an run to reduce round-trips.</p>
</li>
<li>
<p>Optimization for queries using transparent prefetch buffers to reduce round-trips.</p>
</li>
<li>
<p>Thread safety, so you do not have to implement mutual exclusion (mutex) locks on OCI and OCCI handles.</p>
</li>
<li>
<p>The server connection in nonblocking mode means that control returns to the OCI or OCCI code when a call is still running or cannot complete.</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006837"></a>
<div id="ADFNS676" class="sect2">
<h3 class="sect2">OCI and OCCI Functions</h3>
<p><a id="sthref891"></a><a id="sthref892"></a><a id="sthref893"></a>Both OCI and OCCI have four kinds of functions:</p>
<div class="inftblinformal">
<table class="cellalignment1273" title="OCI and OCCI Functions" summary="This table lists the kinds of OCI and OCCI functions and describes their purposes." dir="ltr">
<thead>
<tr class="cellalignment1267">
<th class="cellalignment1274" id="r1c1-t25">Kind of Function</th>
<th class="cellalignment1274" id="r1c2-t25">Purpose</th>
</tr>
</thead>
<tbody>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r2c1-t25" headers="r1c1-t25">Relational</td>
<td class="cellalignment1275" headers="r2c1-t25 r1c2-t25">To manage database access and process SQL statements</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r3c1-t25" headers="r1c1-t25">Navigational</td>
<td class="cellalignment1275" headers="r3c1-t25 r1c2-t25">To manipulate objects retrieved from the database</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r4c1-t25" headers="r1c1-t25">Database mapping and manipulation</td>
<td class="cellalignment1275" headers="r4c1-t25 r1c2-t25">To manipulate data attributes of Oracle Database types</td>
</tr>
<tr class="cellalignment1267">
<td class="cellalignment1275" id="r5c1-t25" headers="r1c1-t25">External subprogram</td>
<td class="cellalignment1275" headers="r5c1-t25 r1c2-t25">To write C callbacks from PL/SQL</td>
</tr>
</tbody>
</table>
<br /></div>
<!-- class="inftblinformal" --></div>
<!-- class="sect2" -->
<a id="g1029491"></a>
<div id="ADFNS677" class="sect2">
<h3 class="sect2">Procedural and Nonprocedural Elements of OCI and OCCI Applications</h3>
<p><a id="sthref894"></a><a id="sthref895"></a>OCI and OCCI enable you to develop applications that combine the nonprocedural data access power of SQL with the procedural capabilities of most programming languages, including C and C++. Procedural and nonprocedural languages have these characteristics:</p>
<ul>
<li>
<p>In a nonprocedural language program, the set of data to be operated on is specified, but what operations are performed and how the operations are to be carried out is not specified. The nonprocedural nature of SQL makes it an easy language to learn and to use to perform database transactions. It is also the standard language used to access and manipulate data in modern relational and object-relational database systems.</p>
</li>
<li>
<p>In a procedural language program, the execution of most statements depends on previous or subsequent statements and on control structures, such as loops or conditional branches, which are not available in SQL. The procedural nature of these languages makes them more complex than SQL, but it also makes them very flexible and powerful.</p>
</li>
</ul>
<p>The combination of both nonprocedural and procedural language elements in an OCI or OCCI program provides easy access to Oracle Database in a structured programming environment.</p>
<p>OCI and OCCI support all SQL data definition, data manipulation, query, and transaction control facilities that are available through Oracle Database. For example, an OCI or OCCI program can run a query against Oracle Database. The queries can require the program to supply data to the database using input (bind) variables, as follows:</p>
<pre dir="ltr">
SELECT name FROM employees WHERE empno = <span class="codeinlinebold">:</span>empnumber
</pre>
<p>In the preceding SQL statement, :<code dir="ltr">empnumber</code> is a placeholder for a value to be supplied by the application.</p>
<p>Alternatively, you can use PL/SQL, Oracle's procedural extension to SQL. The applications you develop can be more powerful and flexible than applications written in SQL alone. OCI and OCCI also provide facilities for accessing and manipulating objects in Oracle Database.</p>
</div>
<!-- class="sect2" -->
<a id="g1029499"></a>
<div id="ADFNS678" class="sect2">
<h3 class="sect2">Building an OCI or OCCI Application</h3>
<p><a id="sthref896"></a><a id="sthref897"></a>As <a href="#i1006860">Figure 13-1</a> shows, you compile and link an OCI or OCCI program in the same way that you compile and link a nondatabase application. There is no need for a separate preprocessing or precompilation step.</p>
<div id="ADFNS679" class="figure">
<p class="titleinfigure"><a id="i1006860"></a>Figure 13-1 The OCI or OCCI Development Process</p>
<img width="363" height="308" src="img/adfns089.gif" alt="Description of Figure 13-1 follows" /><br />
<a id="sthref898" href="img_text/adfns089.htm">Description of "Figure 13-1 The OCI or OCCI Development Process"</a><br />
<br /></div>
<!-- class="figure" -->
<div class="infobox-note">
<p class="notep1">Note:</p>
To properly link your OCI and OCCI programs, it might be necessary on some platforms to include other libraries, in addition to the OCI and OCCI libraries. Check your Oracle platform-specific documentation for further information about extra libraries that might be required.</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" -->
<a id="BABCFFHG"></a>
<div id="ADFNS99960" class="sect1"><!-- infolevel="all" infotype="General" -->
<h2 class="sect1">Choosing a Precompiler or OCI</h2>
<p><a id="sthref899"></a><a id="sthref900"></a>Precompiler applications typically contain less code than equivalent OCI applications, which can help productivity.</p>
<p>Some situations require detailed control of the database and are suited for OCI applications (either pure OCI or a precompiler application with embedded OCI calls):</p>
<ul>
<li>
<p>OCI provides more detailed control over multiplexing and migrating sessions.</p>
</li>
<li>
<p>OCI provides dynamic bind and define using callbacks that can be used for any arbitrary structure, including lists.</p>
</li>
<li>
<p>OCI has many calls to handle metadata.</p>
</li>
<li>
<p>OCI enables asynchronous event notifications to be received by a client application. It provides a means for clients to generate notifications for propagation to other clients.</p>
</li>
<li>
<p>OCI enables DML statements to use arrays to complete as many iterations as possible before returning any error messages.</p>
</li>
<li>
<p>OCI calls for special purposes include Advanced Queuing, globalization support, Data Cartridges, and support of the date and time data types.</p>
</li>
<li>
<p>OCI calls can be embedded in a Pro*C/C++ application.</p>
</li>
</ul>
</div>
<!-- class="sect1" -->
<a id="i1017567"></a>
<div id="ADFNS00107" class="sect1">
<h2 class="sect1">Overview of Oracle Data Provider for .NET (ODP.NET)</h2>
<p><a id="sthref901"></a><a id="sthref902"></a>Oracle Data Provider for .NET (ODP.NET) is an implementation of a data provider for Oracle Database.</p>
<p>ODP.NET uses APIs native to Oracle Database to offer fast and reliable access from any .NET application to database features and data. It also uses and inherits classes and interfaces available in the Microsoft .NET Framework Class Library.</p>
<p>For programmers using Oracle Provider for OLE DB, ADO (ActiveX Data Objects) provides an automation layer that exposes an easy programming model. ADO.NET provides a similar programming model, but without the automation layer, for better performance. More importantly, the ADO.NET model enables native providers such as ODP.NET to expose specific features and data types specific to Oracle Database.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink ODPNT" href="../../win.112/e23174/toc.htm"><span class="italic">Oracle Data Provider for .NET Developer's Guide</span></a></div>
<p>This is a simple C# application that connects to Oracle Database and displays its version number before disconnecting:</p>
<pre dir="ltr">
using System; 
using Oracle.DataAccess.Client; 

class Example 
{ 
  OracleConnection con; 

  void Connect() 
  { 
    con = new OracleConnection(); 
    con.ConnectionString = "User Id=hr;Password=<span class="italic">password</span>;Data Source=oracle"; 
    con.Open(); 
    Console.WriteLine("Connected to Oracle" + con.ServerVersion); 
  } 

  void Close() 
  { 
    con.Close(); 
    con.Dispose(); 
  } 
  
  static void Main() 
  { 
    Example example = new Example(); 
    example.Connect(); 
    example.Close(); 
  } 
}
</pre>
<div class="infobox-note">
<p class="notep1">Note:</p>
Additional samples are provided in directory <code dir="ltr"><span class="codeinlineitalic">ORACLE_BASE</span></code><code dir="ltr">\</code><code dir="ltr"><span class="codeinlineitalic">ORACLE_HOME</span></code><code dir="ltr">\ODP.NET\Samples</code>.</div>
</div>
<!-- class="sect1" -->
<a id="BABDGFGI"></a>
<div id="ADFNS99959" class="sect1">
<h2 class="sect1">Overview of OraOLEDB</h2>
<p>Oracle Provider for OLE DB (OraOLEDB) is an OLE DB data provider that offers high performance and efficient access to Oracle data by OLE DB consumers. In general, this developer's guide assumes that you are using OraOLEDB through OLE DB or ADO.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<a class="olink OLEDB" href="../../win.112/e17726/toc.htm"><span class="italic">Oracle Provider for OLE DB Developer's Guide for Microsoft Windows</span></a></div>
</div>
<!-- class="sect1" -->
<a id="i1017297"></a>
<div id="ADFNS00108" class="sect1">
<h2 class="sect1">Overview of Oracle Objects for OLE (OO4O)</h2>
<p><a id="sthref903"></a>Oracle Objects for OLE (OO4O) is a product designed to provide easy access to data stored in Oracle Database with any programming or scripting language that supports the Microsoft COM Automation and ActiveX technology. This includes Visual Basic, Visual C++, Visual Basic For Applications (VBA), IIS Active Server Pages (VBScript and JavaScript), and others.</p>
<p>See the OO4O online help for detailed information about using OO4O.</p>
<p>Oracle Objects for OLE consists of these software layers:</p>
<ul>
<li>
<p>OO4O "In-Process" Automation Server</p>
</li>
<li>
<p>Oracle Data Control</p>
</li>
<li>
<p>Oracle Objects for OLE C++ Class Library</p>
</li>
</ul>
<p><a href="#i1006879">Figure 13-2</a> illustrates the OO4O software components.</p>
<div id="ADFNS680" class="figure">
<p class="titleinfigure"><a id="i1006879"></a>Figure 13-2 Software Layers</p>
<img width="302" height="346" src="img/adfns090.gif" alt="Description of Figure 13-2 follows" /><br />
<a id="sthref904" href="img_text/adfns090.htm">Description of "Figure 13-2 Software Layers"</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref905"></a>Topics:</p>
<ul>
<li>
<p><a href="#i1006886">OO4O Automation Server</a></p>
</li>
<li>
<p><a href="#i1006908">OO4O Object Model</a></p>
</li>
<li>
<p><a href="#i1007008">Support for Oracle LOB and Object Data Types</a></p>
</li>
<li>
<p><a href="#g1029675">Oracle Data Control</a></p>
</li>
<li>
<p><a href="#g1029680">Oracle Objects for OLE C++ Class Library</a></p>
</li>
</ul>
<a id="i1006886"></a>
<div id="ADFNS681" class="sect2">
<h3 class="sect2">OO4O Automation Server</h3>
<p><a id="sthref906"></a>The OO4O Automation Server is a set of COM Automation objects for connecting to Oracle Database, running SQL statements and PL/SQL blocks, and accessing the results.</p>
<p>Unlike other COM-based database connectivity APIs, such as Microsoft ADO, the OO4O Automation Server was developed specifically for use with Oracle Database.</p>
<p>It provides an optimized API for accessing features that are unique to Oracle Database and are otherwise cumbersome or inefficient to use from ODBC or OLE database-specific components.</p>
<p>OO4O provides key features for accessing Oracle Database efficiently and easily in environments ranging from the typical two-tier client/server applications, such as those developed in Visual Basic or Excel, to application servers deployed in multitiered application server environments such as web server applications in Microsoft Internet Information Server (IIS) or Microsoft Transaction Server (MTS).</p>
<p>Features include:</p>
<ul>
<li>
<p>Support for execution of PL/SQL and Java stored subprograms, and PL/SQL anonymous blocks. This includes support for Oracle Database data types used as parameters to stored subprograms, including PL/SQL cursors. See <a href="#i1007008">"Support for Oracle LOB and Object Data Types"</a>.</p>
</li>
<li>
<p>Support for scrollable and updatable cursors for easy and efficient access to result sets of queries.</p>
</li>
<li>
<p>Thread-safe objects and Connection Pool Management Facility for developing efficient web server applications.</p>
</li>
<li>
<p>Full support for Oracle Database object-relational and LOB data types.</p>
</li>
<li>
<p>Full support for Advanced Queuing.</p>
</li>
<li>
<p>Support for array inserts and updates.</p>
</li>
<li>
<p>Support for Microsoft Transaction Server (MTS).</p>
</li>
</ul>
</div>
<!-- class="sect2" -->
<a id="i1006908"></a>
<div id="ADFNS682" class="sect2">
<h3 class="sect2">OO4O Object Model</h3>
<p><a id="sthref907"></a>The Oracle Objects for OLE object model is illustrated in <a href="#i1006915">Figure 13-3</a>.</p>
<div id="ADFNS683" class="figure">
<p class="titleinfigure"><a id="i1006915"></a>Figure 13-3 Objects and Their Relations</p>
<img width="496" height="283" src="img/adfns092.gif" alt="Description of Figure 13-3 follows" /><br />
<a id="sthref908" href="img_text/adfns092.htm">Description of "Figure 13-3 Objects and Their Relations "</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref909"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1029040">OraSession</a></p>
</li>
<li>
<p><a href="#g1029045">OraServer</a></p>
</li>
<li>
<p><a href="#g1029055">OraDatabase</a></p>
</li>
<li>
<p><a href="#g1029080">OraDynaset</a></p>
</li>
<li>
<p><a href="#g1029092">OraField</a></p>
</li>
<li>
<p><a href="#g1029106">OraMetaData and OraMDAttribute</a></p>
</li>
<li>
<p><a href="#g1029125">OraParameter and OraParameters</a></p>
</li>
<li>
<p><a href="#g1029136">OraParamArray</a></p>
</li>
<li>
<p><a href="#g1029148">OraSQLStmt</a></p>
</li>
<li>
<p><a href="#g1029165">OraAQ</a></p>
</li>
<li>
<p><a href="#g1029176">OraAQMsg</a></p>
</li>
<li>
<p><a href="#g1029184">OraAQAgent</a></p>
</li>
</ul>
<a id="g1029040"></a>
<div id="ADFNS684" class="sect3">
<h4 class="sect3">OraSession</h4>
<p>An OraSession object manages collections of OraDatabase, OraConnection, and OraDynaset objects used within an application.</p>
<p>Typically, a single OraSession object is created for each application, but you can create named OraSession objects for shared use within and between applications.</p>
<p>The OraSession object is the top-most object for an application. It is the only object created by the CreateObject VB/VBA API and not by an Oracle Objects for OLE method. This code fragment shows how to create an OraSession object:</p>
<pre dir="ltr">
Dim OraSession as Object
Set OraSession = CreateObject("OracleInProcServer.XOraSession")
</pre></div>
<!-- class="sect3" -->
<a id="g1029045"></a>
<div id="ADFNS685" class="sect3">
<h4 class="sect3">OraServer</h4>
<p>OraServer represents a physical network connection to Oracle Database.</p>
<p>The <code dir="ltr">OraServer</code> interface is introduced to expose the connection-multiplexing feature provided in the Oracle Call Interface. After an <code dir="ltr">OraServer</code> object is created, multiple user sessions (<code dir="ltr">OraDatabase</code>) can be attached to it by calling the <code dir="ltr">OpenDatabase</code> method. This feature is particularly useful for application components, such as Internet Information Server (IIS), that use Oracle Objects for OLE in n-tier distributed environments.</p>
<p>The use of connection multiplexing when accessing Oracle Database with a large number of user sessions active can help reduce server processing and resource requirements while improving server scalability.</p>
<p>OraServer is used to share a single connection across multiple OraDatabase objects (multiplexing), whereas each OraDatabase obtained from an OraSession has its own physical connection.</p>
</div>
<!-- class="sect3" -->
<a id="g1029055"></a>
<div id="ADFNS686" class="sect3">
<h4 class="sect3">OraDatabase</h4>
<p>An <code dir="ltr">OraDatabase</code> <a id="sthref910"></a>interface adds additional methods for controlling transactions and creating interfaces representing Oracle Database object types. Attributes of schema objects can be retrieved using the <code dir="ltr">Describe</code> method of the <code dir="ltr">OraDatabase</code> interface.</p>
<p>Before Oracle Database 8<span class="italic">g</span> Release 1, an <code dir="ltr">OraDatabase</code> object is created by calling the <code dir="ltr">OpenDatabase</code> method of an <code dir="ltr">OraSession</code> interface. The Oracle Net alias, user name, and password are passed as arguments to this method. As of Oracle Database 8<span class="italic">g</span> Release 1, calling this method results in implicit creation of an <code dir="ltr">OraServer</code> object.</p>
<p>An <code dir="ltr">OraDatabase</code> object can also be created using the <code dir="ltr">OpenDatabase</code> method of the <code dir="ltr">OraServer</code> interface.</p>
<p>Transaction control methods are available at the <code dir="ltr">OraDatabase</code> (user session) level. Transactions might be started as <code dir="ltr">Read-Write</code> (default), <code dir="ltr">Serializable</code>, or <code dir="ltr">Read-only</code>. Transaction control methods include:</p>
<ul>
<li>
<p><code dir="ltr">BeginTrans</code></p>
</li>
<li>
<p><code dir="ltr">CommitTrans</code></p>
</li>
<li>
<p><code dir="ltr">RollbackTrans</code></p>
</li>
</ul>
<p>For example:</p>
<pre dir="ltr">
UserSession.BeginTrans(OO4O_TXN_READ_WRITE) 
UserSession.ExecuteSQL("delete emp where empno = 1234") 
UserSession.CommitTrans
</pre></div>
<!-- class="sect3" -->
<a id="g1029080"></a>
<div id="ADFNS687" class="sect3">
<h4 class="sect3">OraDynaset</h4>
<p>An <code dir="ltr">OraDynaset</code> object permits browsing and updating of data created from a SQL <code dir="ltr">SELECT</code> statement.</p>
<p>The <code dir="ltr">OraDynaset</code> object can be thought of as a cursor, although in actuality several real cursors might be used to implement the semantics of <code dir="ltr">OraDynaset</code>. An <code dir="ltr">OraDynaset</code> object automatically maintains a local cache of data fetched from the server and transparently implements scrollable cursors within the browse data. Large queries might require significant local disk space; application developers are encouraged to refine queries to limit disk usage.</p>
</div>
<!-- class="sect3" -->
<a id="g1029092"></a>
<div id="ADFNS688" class="sect3">
<h4 class="sect3">OraField</h4>
<p>An <code dir="ltr">OraField</code> object represents a single column or data item within a row of a dynaset.</p>
<p>If the current row is being updated, then the <code dir="ltr">OraField</code> object represents the currently updated value, although the value might not have been committed to the database.</p>
<p>Assignment to the <code dir="ltr">Value</code> property of a field is permitted only if a record is being edited (using <code dir="ltr">Edit</code>) or a record is being added (using <code dir="ltr">AddNew</code>). Other attempts to assign data to a field's <code dir="ltr">Value</code> property results in an error.</p>
</div>
<!-- class="sect3" -->
<a id="g1029106"></a>
<div id="ADFNS689" class="sect3">
<h4 class="sect3">OraMetaData and OraMDAttribute</h4>
<p>An <code dir="ltr">OraMetaData</code> object is a collection of <code dir="ltr">OraMDAttribute</code> objects that represent the description information about a particular schema object in the database.</p>
<p>The <code dir="ltr">OraMetaData</code> object can be visualized as a table with three columns:</p>
<ul>
<li>
<p><code dir="ltr">Metadata Attribute Name</code></p>
</li>
<li>
<p><code dir="ltr">Metadata Attribute Value</code></p>
</li>
<li>
<p><code dir="ltr">Flag</code> specifying whether the <code dir="ltr">Value</code> is another <code dir="ltr">OraMetaData</code> object</p>
</li>
</ul>
<p>The <code dir="ltr">OraMDAttribute</code> objects contained in the <code dir="ltr">OraMetaData</code> object can be accessed by subscripting using ordinal integers or by using the name of the property. Referencing an index that is not in the collection results in the return of a <code dir="ltr">NULL</code> <code dir="ltr">OraMDAttribute</code> object.</p>
</div>
<!-- class="sect3" -->
<a id="g1029125"></a>
<div id="ADFNS690" class="sect3">
<h4 class="sect3">OraParameter and OraParameters</h4>
<p>An <code dir="ltr">OraParameter</code> object represents a bind variable in a SQL statement or PL/SQL block.</p>
<p><code dir="ltr">OraParameter</code> objects are created, accessed, and removed indirectly through the <code dir="ltr">OraParameters</code> collection of an <code dir="ltr">OraDatabase</code> object. Each parameter has an identifying name and an associated value. You can automatically bind a parameter to SQL and PL/SQL statements of other objects (as noted in the object descriptions), by using the parameter name as a placeholder in the SQL or PL/SQL statement. Such use of parameters can simplify dynamic queries and increase program performance.</p>
</div>
<!-- class="sect3" -->
<a id="g1029136"></a>
<div id="ADFNS691" class="sect3">
<h4 class="sect3">OraParamArray</h4>
<p>An <code dir="ltr">OraParamArray</code> object represents an array-type bind variable in a SQL statement or PL/SQL block, as opposed to a scalar-type bind variable represented by the <code dir="ltr">OraParameter</code> object.</p>
<p><code dir="ltr">OraParamArray</code> objects are created, accessed, and removed indirectly through the <code dir="ltr">OraParameters</code> collection of an <code dir="ltr">OraDatabase</code> object. Each <code dir="ltr">OraParamArray</code> object has an identifying name and an associated value.</p>
</div>
<!-- class="sect3" -->
<a id="g1029148"></a>
<div id="ADFNS692" class="sect3">
<h4 class="sect3">OraSQLStmt</h4>
<p>An <code dir="ltr">OraSQLStmt</code> object represents a single SQL statement. Use the <code dir="ltr">CreateSQL</code> method to create an <code dir="ltr">OraSQLStmt</code> object from an <code dir="ltr">OraDatabase</code> object.</p>
<p>During create and refresh, <code dir="ltr">OraSQLStmt</code> objects automatically bind all relevant, enabled input parameters to the specified SQL statement, using the parameter names as placeholders in the SQL statement. This can improve the performance of SQL statement execution without reparsing the SQL statement.</p>
<p>The <code dir="ltr">OraSQLStmt</code> object can be used later to run the same query using a different value for the :<code dir="ltr">SALARY</code> placeholder. This is done as follows (<code dir="ltr">updateStmt</code> is the <code dir="ltr">OraSQLStmt</code> object here):</p>
<pre dir="ltr">
OraDatabase.Parameters("SALARY").value = 200000
updateStmt.Parameters("ENAME").value = "KING"
updateStmt.Refresh
</pre></div>
<!-- class="sect3" -->
<a id="g1029165"></a>
<div id="ADFNS693" class="sect3">
<h4 class="sect3">OraAQ</h4>
<p>An <code dir="ltr">OraAQ</code> object is instantiated by calling the <code dir="ltr">CreateAQ</code> method of the <code dir="ltr">OraDatabase</code> interface. It represents a queue that is present in the database.</p>
<p>Oracle Objects for OLE provides interfaces for accessing Oracle Advanced Queuing (AQ) feature. It makes AQ accessible from popular COM-based development environments such as Visual Basic. For a detailed description of Oracle Advanced Queuing, see <a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a>.</p>
</div>
<!-- class="sect3" -->
<a id="g1029176"></a>
<div id="ADFNS694" class="sect3">
<h4 class="sect3">OraAQMsg</h4>
<p>The <code dir="ltr">OraAQMsg</code> object encapsulates the message to be enqueued or dequeued. The message can be of any user-defined or raw type.</p>
<p>For a detailed description of Oracle Advanced Queuing, see <a class="olink ADQUE" href="../../server.112/e11013/toc.htm"><span class="italic">Oracle Streams Advanced Queuing User's Guide.</span></a></p>
</div>
<!-- class="sect3" -->
<a id="g1029184"></a>
<div id="ADFNS695" class="sect3">
<h4 class="sect3">OraAQAgent</h4>
<p>The <code dir="ltr">OraAQAgent</code> object represents a message recipient and is only valid for queues that support multiple consumers. It is a child of <code dir="ltr">OraAQMsg</code>.</p>
<p>An <code dir="ltr">OraAQAgent</code> object can be instantiated by calling the <code dir="ltr">AQAgent</code> method. For example:</p>
<pre dir="ltr">
Set agent = qMsg.AQAgent(name)
</pre>
<p>An <code dir="ltr">OraAQAgent</code> object can also be instantiated by calling the <code dir="ltr">AddRecipient</code> method. For example:</p>
<pre dir="ltr">
Set agent = qMsg.AddRecipient(name, address, protocol).
</pre></div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="i1007008"></a>
<div id="ADFNS696" class="sect2">
<h3 class="sect2">Support for Oracle LOB and Object Data Types</h3>
<p><a id="sthref911"></a><a id="sthref912"></a><a id="sthref913"></a><a id="sthref914"></a>Oracle Objects for OLE (OO4O) provides full support for accessing and manipulating instances of object data types and LOBs in Oracle Database. <a href="#i1007016">Figure 13-4</a> illustrates the data types supported by OO4O.</p>
<p>Instances of these types can be fetched from the database or passed as input or output variables to SQL statements and PL/SQL blocks, including stored subprograms. All instances are mapped to COM Automation Interfaces that provide methods for dynamic attribute access and manipulation.</p>
<div id="ADFNS697" class="figure">
<p class="titleinfigure"><a id="i1007016"></a>Figure 13-4 Supported Oracle Database Data Types</p>
<img width="395" height="262" src="img/adfns091.gif" alt="Description of Figure 13-4 follows" /><br />
<a id="sthref915" href="img_text/adfns091.htm">Description of "Figure 13-4 Supported Oracle Database Data Types"</a><br />
<br /></div>
<!-- class="figure" -->
<p class="subhead2"><a id="sthref916"></a>Topics:</p>
<ul>
<li>
<p><a href="#g1029198">OraBLOB and OraCLOB</a></p>
</li>
<li>
<p><a href="#g1029228">OraBFILE</a></p>
</li>
</ul>
<a id="g1029198"></a>
<div id="ADFNS698" class="sect3">
<h4 class="sect3">OraBLOB and OraCLOB</h4>
<p>The <code dir="ltr">OraBlob</code> and <code dir="ltr">OraClob</code> interfaces in Oracle Objects for OLE provide methods for performing operations on large database objects of data type <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, and <code dir="ltr">NCLOB</code>. <code dir="ltr">BLOB</code>, <code dir="ltr">CLOB</code>, and <code dir="ltr">NCLOB</code> data types are also referred to here as <span class="glossaryterm">LOB</span> data types.</p>
<p>LOB data is accessed using <code dir="ltr">Read</code> and the <code dir="ltr">CopyToFile</code> methods.</p>
<p>LOB data is modified using <code dir="ltr">Write</code>, <code dir="ltr">Append</code>, <code dir="ltr">Erase</code>, <code dir="ltr">Trim</code>, <code dir="ltr">Copy</code>, <code dir="ltr">CopyFromFile</code>, and <code dir="ltr">CopyFromBFile</code> methods. Before modifying the content of a LOB column in a row, a row lock must be obtained. If the LOB column is a field of an <code dir="ltr">OraDynaset</code>, object, then the lock is obtained by calling the <code dir="ltr">Edit</code> method.</p>
</div>
<!-- class="sect3" -->
<a id="g1029228"></a>
<div id="ADFNS699" class="sect3">
<h4 class="sect3">OraBFILE</h4>
<p>The <code dir="ltr">OraBFile</code> interface in Oracle Objects for OLE provides methods for performing operations on large database objects of data type <code dir="ltr">BFILE</code>.</p>
<p><code dir="ltr">BFILE</code> objects are large binary data objects stored in operating system files outside of the database tablespaces.</p>
</div>
<!-- class="sect3" --></div>
<!-- class="sect2" -->
<a id="g1029675"></a>
<div id="ADFNS700" class="sect2">
<h3 class="sect2">Oracle Data Control</h3>
<p><a id="sthref917"></a><a id="sthref918"></a>Oracle Data Control (ODC) is an ActiveX Control that is designed to simplify the exchange of data between Oracle Database and visual controls such edit, text, list, and grid controls in Visual Basic and other development tools that support custom controls.</p>
<p>ODC acts as an agent to handle the flow of information from Oracle Database and a visual data-aware control, such as a grid control, that is bound to it. The data control manages various user interface (UI) tasks such as displaying and editing data. It also runs and manages the results of database queries.</p>
<p>Oracle Data Control is compatible with the Microsoft data control included with Visual Basic. If you are familiar with the Visual Basic data control, learning to use Oracle Data Control is quick and easy. Communication between data-aware controls and a Data Control is governed by a protocol that Microsoft specified.</p>
</div>
<!-- class="sect2" -->
<a id="g1029680"></a>
<div id="ADFNS701" class="sect2">
<h3 class="sect2">Oracle Objects for OLE C++ Class Library</h3>
<p><a id="sthref919"></a><a id="sthref920"></a>Oracle Objects for OLE (OO4O) C++ Class Library is a collection of C++ classes that provide programmatic access to the Oracle Object Server. Although the class library is implemented using OLE Automation, neither the OLE development kit nor any OLE development knowledge is necessary to use it. This library helps C++ developers avoid the chore of writing COM client code for accessing the OO4O interfaces.</p>
<div class="infoboxnotealso">
<p class="notep1">See Also:</p>
<ul>
<li>
<p>For detailed information about Oracle Objects for OLE see the online help provided with the OO4O product:</p>
<p>Oracle Objects for OLE Help</p>
<p>Oracle Objects for OLE C++ Class Library Help</p>
</li>
<li>
<p>For examples of how to use Oracle Objects for OLE:</p>
<p>Samples in the <code dir="ltr">ORACLE_HOME\OO4O</code> directory of the Oracle Database installation</p>
<p><a class="olink ADLOB" href="../e18294/toc.htm"><span class="italic">Oracle Database SecureFiles and Large Objects Developer's Guide</span></a></p>
<p><a class="olink ADQUE0300" href="../../server.112/e11013/aq_envir.htm#ADQUE0300"><span class="italic">Oracle Streams Advanced Queuing User's Guide</span></a></p>
</li>
</ul>
</div>
</div>
<!-- class="sect2" --></div>
<!-- class="sect1" --></div>
<!-- class="chapter" --></div>
<!-- class="ind" -->
<!-- Start Footer -->
</div>
<!-- add extra wrapper close div-->
<footer><!--
<hr />
<table class="cellalignment1266">
<tr>
<td class="cellalignment1275">
<table class="cellalignment1271">
<tr>
<td class="cellalignment1270"><a href="adfns_flashback.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page" /><br />
<span class="icon">Previous</span></a></td>
<td class="cellalignment1270"><a href="adfns_externproc.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page" /><br />
<span class="icon">Next</span></a></td>
</tr>
</table>
</td>
<td class="cellalignment-copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle" /><br />
Copyright&nbsp;&copy;&nbsp;1996, 2014,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br />
<a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td>
<td class="cellalignment1277">
<table class="cellalignment1269">
<tr>
<td class="cellalignment1270"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home" /><br />
<span class="icon">Home</span></a></td>
<td class="cellalignment1270"><a href="../../nav/portal_booklist.htm"><img width="24" height="24" src="../../dcommon/gifs/booklist.gif" alt="Go to Book List" /><br />
<span class="icon">Book List</span></a></td>
<td class="cellalignment1270"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents" /><br />
<span class="icon">Contents</span></a></td>
<td class="cellalignment1270"><a href="index.htm"><img width="24" height="24" src="../../dcommon/gifs/index.gif" alt="Go to Index" /><br />
<span class="icon">Index</span></a></td>
<td class="cellalignment1270"><a href="../../nav/mindx.htm"><img width="24" height="24" src="../../dcommon/gifs/masterix.gif" alt="Go to Master Index" /><br />
<span class="icon">Master Index</span></a></td>
<td class="cellalignment1270"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page" /><br />
<span class="icon">Contact Us</span></a></td>
</tr>
</table>
</td>
</tr>
</table>
--></footer>
<noscript>
<p>Scripting on this page enhances content navigation, but does not change the content in any way.</p>
</noscript>
</body>
</html>
